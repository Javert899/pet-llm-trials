efﬁcient logging for
blockchain applications
c. klinkmüller
csiro data61
i. weber
tu berlin
a. ponomarev
exponential trading
a. b. tran
deputy
w. van der aalst
rwth aachen university
abstract —second generation blockchain platforms, like ethereum, can store arbitrary data and
execute user-deﬁned smart contracts. due to the shared nature of blockchains, understanding
the usage of blockchain-based applications and the underlying network is crucial. although log
analysis is a well-established means, data extraction from blockchain platforms can be highly
inconvenient and slow, not least due to the absence of logging libraries. to close the gap, we
here introduce the ethereum logging framework (elf) which is highly conﬁgurable and
available as open source. elf supports users (i) in generating cost-efﬁcient logging code readily
embeddable into smart contracts and (ii) in extracting log analysis data into common formats
regardless of whether the code generation has been used during development. we provide an
overview of and rationale for the framework’s features, outline implementation details, and
demonstrate elf’s versatility based on three case studies from the public ethereum blockchain.
introduction
blockchain technology was ﬁrst proposed in
2008 as a peer-to-peer distributed ledger system
for ﬁnancial transactions [1]. the second gener-
ation of blockchain platforms, like ethereum [2],
brought the capability to store arbitrary data and
execute user-deﬁned source code, so-called smart
contracts . when designing blockchain applica-
tions [3], developers should consider the plat-
form’s shared nature, possibly with democratic
governance among a network of unknown partic-
ipants. this is particularly true for decentralized
applications (dapps) , which provide their main
functionality through smart contracts [3]. whiledevelopers can exercise full control over their
dapp’s features, the control over when, where,
and under what circumstances it is executed is
limited. moreover, dapps might impact each other
even when being functionally independent. for
example, for some period of time the game cryp-
tokitties caused a transaction peak and thereby
slowed down transaction processing for all other
applications; and the infamous dao attack even-
tually resulted in a split between ethereum and
ethereum classic.
in this situation, understanding how one’s
application is used and how the underlying
blockchain is operated is critical, for planning
1arxiv:2001.10281v1  [cs.se]  28 jan 2020improvements, adaptation, and failure analysis.
logs have been used for such purposes since the
early days of computing [4]. while all data is
in principle present, given the immutable ledger,
extracting it can be highly inconvenient and very
slow [5]. as such, it is surprising that so far
no logging libraries for ethereum exist . we ﬁll
this gap by proposing the ethereum logging
framework (elf), a highly conﬁgurable logging
framework that covers (i) generation of cost-
efﬁcient logging code to be embedded in dapps
and (ii) extraction of data into formats suitable
for analysis. note that the latter applies to any
application, whether or not the code generation
has been used during development.
this framework is based on our own prior
work [6] where we focused on extracting event
data in the xes format for process mining. the
version proposed here supports general logging
and log extraction capabilities, without a speciﬁc
process focus. among others, it further supports
extraction of state and transaction data, formatting
as textual logs or csv , data streaming, and gen-
eralized selection criteria. elf also allows users
to extract data for business-level analysis, e.g., in
process mining [7].
the remainder of the paper starts with an
introduction of the framework’s features. in this
context, we discuss particularities related to log-
ging on ethereum and provide a rationale for
the framework’s features. subsequently, we cover
implementation details and discuss selected case
studies which showcase the versatile applications
of the framework. finally, we conclude the paper
with a summary.
framework
an overview of elf and its components is
depicted in figure 1. at the heart of the frame-
work is the manifest . it allows users to deﬁne
which data in ethereum is relevant and how it
should be transformed and formatted. to support
users in deﬁning a manifest, the validator syn-
tactically and semantically analyzes the manifest
for speciﬁcation errors. the extractor relies on
a given manifest to iteratively retrieve data from
an ethereum node, to subsequently transform it
according to user-deﬁned rules and to ﬁnally
format the transformed data in the requested
target format(s). the generator can derive costefﬁcient logging functionality from the manifest.
we provide a more detailed overview of the
framework’s capabilities below.
c.1 technological independence: the ex-
tractor relies on ethereum’s json-rpc api [8]
which is supported by the ethereum clients parity,
geth, and pantheon. the api standardized the
most common types of ethereum data queries. an
immediate consequence is that the framework can
be applied to new and existing smart contracts,
but also independent of the speciﬁc ethereum
node implementation and network. moreover, the
manifest forms the only input to the extractor, val-
idator and generator which do not require access
to the source code of the dapp or smart contract.
thus, an interpretation of dapp data (i.e., the
manifest) can be shared without compromising
the conﬁdentiality of the source code. note that
the manifest might reference parts of the public
interface of a smart contract, including log events
and access to member variables.
c.2 declarative speciﬁcation: the mani-
fest relieves users from manually implementing
an extraction pipeline. instead, it enables users
to declaratively conﬁgure the extraction process
in a script language that hides implementation-
speciﬁc details such as byte decoding, composi-
tion of api calls, transformation operations, and
value formatting.
c.3 selective data extraction: to extract
dapp related data, developers can resort to
databases containing all ethereum data. such
databases are provided by third-parties, for ex-
ample, the ethereum dataset hosted by google
bigquery [9]. alternatively, they can be manually
set up using libraries like blockchain-etl [10].
when one is only interested in the data rele-
vant to a certain dapp, this can be impracticable
for several reasons. accessing existing databases
is typically not free of charge and presumes
that users trust the integrity of these databases,
whereas manually setting up a database requires
access to high-performance compute resources
and large disk space. for example, in november
2019 google bigquery’s ethereum database con-
tained more than a terabyte of data. moreover, de-
velopers still need to manually implement trans-
formation and formatting functionality. as these
databases contain raw data – e.g., log entries and
transaction results are encoded as byte strings –
2output ethereum logging framework
(elf)ethereum
txt
manifest
solidity
source codeexecuteemitextractor
generatorvalidatorstatetransaction
receiptstransactions
xescsvfigure 1: the components of the ethereum logging framework (elf)
users also need to implement decoding functions.
by contrast, the proposed framework allows
users to only extract the data that is relevant to
their use cases. the previous version of the frame-
work, called bloxes [6], was centered around
the extraction of data from log entries that were
created with solidity’s event api which is the
predominant way of logging on ethereum [6].
elf now allows users to query ethereum in
more ﬂexible ways. essentially, the framework
retrieves data from ethereum block by block in
historical order, i.e., in the order in which the
data was created and included. users can then
apply the following ﬁve types of ﬁlters to select
relevant entities and their attributes. the block
ﬁlter allows for selecting blocks whose block
number is in the interval [from,to ]and provides
access to the attributes of those blocks like mining
difﬁculty or consumed gas. the transaction ﬁlter
must be nested within a block ﬁlter. it can be
used to narrow down the set of transactions within
the selected blocks based on account addresses
of senders and recipients. within the scope of
such a ﬁlter, transaction attributes, such as gas
price or transferred value, are accessible. simi-
larly, the log entry ﬁlter enables users to select
log entries that were emitted by smart contracts
during transaction execution via the event api. tothis end, users need to specify the relevant smart
contract addresses and the event signature. a log
entry ﬁlter must be combined with a transaction
or block ﬁlter. it provides access to log entry
attributes and the event signature parameters. the
smart contract state ﬁlter allows for querying
state information of smart contracts. to this end,
developers must specify the contract address and
the member variables or functions. note that
these variables and functions must be part of
the contract’s public api. this ﬁlter must be
nested within a block ﬁlter. while the ﬁrst four
ﬁlters rely on predeﬁned criteria, the generic ﬁlter
allows users to introduce arbitrary criteria which
can rely on entity or user-deﬁned variables. for
example, users could ﬁlter transactions based on
the consumed gas. a generic ﬁlter can be nested
into any other ﬁlter, but does not provide access
to new variables.
c.4 cost-efﬁcient logging: writing data into
the transaction log consumes gason ethereum,
and is therefore associated with costs [2]. gas
reﬂects computational and storage demand on
a blockchain system, and therefore developers
should consider options for reducing gas con-
sumption. elf offers support to this end in the
following ways. first, it allows for extracting
data not only from log entries, but also from
3blocks, transactions, and smart contract states.
hence, data obtainable from those entities does
not need to be logged. second, data transforma-
tion operations can be moved to the manifest,
making transformations for logging purposes in
smart contracts obsolete. lastly, as the gas cost
of a log data item is proportional to the size of
the value, the generator supports developers in
creating compression functionality. in particular,
developers can specify value dictionaries andbit
mappings in the manifest from which the genera-
tor then derives custom logging source code that
relies on the event api and that can be integrated
into a new smart contract. a value dictionary can
be used to deﬁne small codes that are logged
instead of larger values; during extraction they
are decoded. this can, e.g., be used to log an
integer instead of a string, which uses less space
and thus incurs a lower gas cost. similarly, bit
mappings can be used to combine multiple short
ranged attributes into a single value via solidity’s
bit-level operators.
c.5 extensible transformation operators:
the framework offers a basic set of data transfor-
mation operators. the results of these operators
can be assigned to user-deﬁned variables. addi-
tionally, developers can integrate custom opera-
tors. besides transforming data, those operators
could also extend the query functionality. for
example, methods for querying external systems
might be added to facilitate the merging of ex-
ternal and blockchain data. or non-standardized
ethereum client apis might be incorporated, such
as the transaction replay function offered by geth
or parity for obtaining more ﬁne-grained data
from smart contracts states or transaction execu-
tions.
c.6 dependency updates: throughout the
life of a dapp, smart contracts might be exchanged
to roll out new or improved functionality. to en-
sure that a dapp is upgradable, developers can rely
on patterns like satellite contracts and contract
registers [11]. this, however, has implications
for extracting dapp data, for example, when a
smart contract address for which log entry or
state data was extracted must be replaced by the
address of the newly deployed contract. in con-
trast to bloxes, elf now supports such dynamic
updates: smart contract addresses can be stored
in variables, which are updated from queries tocontract registers or log entries for such updates.
c.7 batch and streaming export: to sup-
port users in analyzing the extracted data, the
framework supports the export of entity and user-
deﬁned variables into three data formats (textual
logs, csv , and xes) which can be readily loaded
into common log analysis tools. elf can log
multiple formats at the same time, and may even
be conﬁgured to split data into different ﬁles.
moreover, users can choose between two modes
of export. in batch mode, the script runs once and
exports all data into (possibly large) ﬁles, one ﬁle
per speciﬁed output. in contrast, the streaming
mode exports one ﬁle per speciﬁed output for
each block on the main chain, and keeps doing
so for each new block until terminated. as such,
elf supports both static log analysis and near-
real-time monitoring. when using the streaming
mode on proof-of-work blockchains, users must
be aware that the consensus mechanism can result
in multiple alternative blocks with the same block
number being proposed by different miners. if the
consensus protocol decides on a different version
of a block than the one ﬁrst received by the local
ethereum node, the block overwrites the ﬁrst one.
in this case, elf will output a second ﬁle for the
same block number, effectively overwriting the
previously exported data. note that in the case of
the batch mode, the exported ﬁles only contain the
data that was present in the ethereum node when
data for the last relevant block was extracted.
implementation details
the framework is implemented in java v13
and is publicly available [12]. the framework’s
design is oriented towards guidelines for language
implementation [13]. that is, the validator is
the central component. it relies on the parser
generator library antlr4 for syntax deﬁnition
and syntactic parsing. semantic analysis is im-
plemented as a set of custom rules on top of the
syntax tree returned by antlr4. this amongst
others includes checks for type compatibility and
correct operator usage. if there are no syntactical
or semantic errors, the syntax tree can be passed
to the extractor or generator.
details regarding the logic for generating log-
ging functionality from bit mappings and value
dictionaries are provided in [6]. the extractor
is designed as a conﬁgurable etl process. the
4(a) block statistics
 (b) augur contract register updates
(c) cryptokitties lifecycle process (notation: bpmn)
figure 2: case studies
integration with nodes on an ethereum network is
based on the web3j library which provides wrap-
pers for ethereum’s json-rpc api. moreover,
while the export of textual logs and csv ﬁles
relies on the java class library, for exporting data
according to the xes standard [14] the extractor
uses the openxes library.
case studies
to demonstrate the applicability of elf, we
conducted three case studies focusing on public
ethereum to allow replication – elf is, however,
just as applicable for permissioned ethereum
blockchains. the respective manifests are part of
the publicly available source code [12].
the extracted data for all case studies is
visualized in figure 2. first, figure 2a shows
smoothed time series of basic network statistics
which are relevant to network behavior moni-
toring: the number of included transactions and
the reward from transaction inclusion (exclusive
of static block rewards). per block, we counted
the transactions and summed up the product of
consumed gas and gas price for each transaction.
finally, the data was exported into a csv ﬁle.
the respective manifest comprises 14 lines.
second, we investigated augur, a decentral-
ized prediction market with a complex architec-
ture centered around a contract register. we usedelf to setup a listener that monitors augur’s
architecture and sends out log messages con-
taining details about contract reference updates.
figure 2b shows the updates that occurred during
dapp deployment. the manifest is 234 lines long.
third, we analyzed the well-known ethereum-
based game cryptokitties, in which virtual cats
can be bred and traded. using a manifest with 60
lines, we queried information related to the cats’
life-cycles from log entries emitted by this dapp.
we exported the data into an xes ﬁle, allowing
us to visualize the life-cycle as a process model
(figure 2c) and to conﬁrm that the dapp correctly
implements the game rules. note that this case
study is essentially replicating the bloxes eval-
uation from [6]. yet, here we extract a noise-free
xes log by only considering cats born within the
speciﬁed block range. this was not possible with
bloxes.
summary
in this article, we introduced and practically
demonstrated elf, a generic and highly con-
ﬁgurable logging framework for ethereum. elf
supports a wide-range of log extraction scenar-
ios from ethereum nodes into different formats,
minimizing the amount of required code. ad-
ditionally, elf assists developers in generating
cost-efﬁcient logging code, readily embeddable
5into dapps. the value of the framework has been
demonstrated with three case studies that address
a variety of logging scenarios, each requiring
different framework functionality. in future work,
we plan to improve elf’s run-time efﬁciency and
to generalize it to other blockchain platforms.
references
1. s. nakamoto, “bitcoin: a peer-to-peer electronic cash
system.” 2008.
2. g. wood, “ethereum: a secure decentralised
generalised transaction ledger (eip-150 revision).”
http://gavwood.com/paper.pdf. accessed: 19/11/2019.
3. x. xu, i. weber, and m. staples, architecture for
blockchain applications . springer, 2019.
4. a. oliner, a. ganapathi, and w. xu, “advances and
challenges in log analysis,” commun. acm , vol. 55,
pp. 55–61, feb. 2012.
5. c. di ciccio, a. cecconi, j. mendling, d. felix, d. haas,
d. lilek, f . riel, a. rumpl, and p . uhlig, “blockchain-
based traceability of inter-organisational business pro-
cesses,” in bmsd , 2018.
6. c. klinkmüller, a. ponomarev, a. tran, i. weber, and
w. van der aalst, “mining blockchain processes: ex-
tracting process mining data from blockchain applica-
tions,” in bpm (blockchain forum) , 2019.
7. w. v. d. aalst, process mining – data science in action .
springer, 2016.
8. “json rpc.” https://github.com/ethereum/wiki/wiki/
json-rpc. accessed: 18/11/2019.
9. a. day and e. medvedev, “ethereum in bigquery:
a public dataset for smart contract analytics.”
https://cloud.google.com/blog/products/data-analytics/
ethereum-bigquery-public-dataset-smart-contract-analytics,
2018. accessed: 14/11/2019.
10. “blockchain etl.” https://github.com/blockchain-etl. ac-
cessed: 14/11/2019.
11. m. wöhrer and u. zdun, “design patterns for
smart contracts in the ethereum ecosystem,” in
ieee 2018 international congress on cybermatics
ithings/greencom/cpscom/smartdata/blockchain/cit ,
2018.
12. “ethereum logging framework.” https://bitbucket.csiro.
au/users/kli039/repos/ethereum-logging-framework.
13. t. parr, language implementation patterns: create your
own domain-speciﬁc and general programming lan-
guages . pragmatic bookshelf, 2009.
14. “ieee standard for extensible event stream (xes)for achieving interoperability in event logs and event
streams,” nov 2016. ieee std 1849-2016.
6