monitoring business constraints
with linear temporal logic:
an approach based on colored automata
fabrizio m. maggi1, marco montali2y, michael westergaard1z,
wil m.p. van der aalst1
1eindhoven university of technology, the netherlands.
ff.m.maggi, m.westergaard, w.m.p.v.d.aalst g@tue.nl
2university of bologna, italy.
marco.montali@unibo.it
abstract. today's information systems record real-time information
about business processes. this enables the monitoring of business con-
straints at runtime. in this paper, we present a novel runtime verica-
tion framework based on linear temporal logic and colored automata.
the framework continuously veries compliance with respect to a pre-
dened constraint model. our approach is able to provide meaningful
diagnostics even after a constraint is violated. this is important as in
reality people and organizations will deviate and in many situations it is
not desirable or even impossible to circumvent constraint violations. as
demonstrated in this paper, there are several approaches to recover after
the rst constraint violation. traditional approaches that simply check
constraints are unable to recover after the rst violation and still foresee
(inevitable) future violations. the framework has been implemented in
the process mining tool prom.
keywords: runtime verication, monitoring, linear temporal logic,
declare, automata
1 introduction
entities within an organization are supposed to operate within boundaries set
by internal policies, norms, best practices, regulations, and laws. for example,
requests of a particular type need to be followed by a decision. also in a cross-
organizational setting, people and organizations need respect certain rules, e.g.,
this research has been carried out as a part of the poseidon project at thales under
the responsibilities of the embedded systems institute (esi). the project is partially
supported by the dutch ministry of economic aairs under the bsik program.
ymontali has been partially supported by the nwo \visitor travel grant" initiative.
zthis research is supported by the technology foundation stw, applied science
division of nwo and the technology program of the dutch ministry of economic
aairs.a bill should be paid within 28 days. we use the generic term business con-
straint to refer a requirement imposed on the execution of an intra- or inter-
organizational process [11, 9]. business constraints separate compliant behavior
from non-compliant behavior.
compliance has become an important topic in many organizations. never-
theless, it is still dicult to operationalize compliance notions. several authors
developed techniques to ensure compliance by designing process models that
enforce a set of business constraints [1, 7]. given a process model and a set of
constraints, e.g., expressed in some temporal logic, one can use model checking
[4] to see whether the model satises the constraints .
however, static verication techniques are not sucient to tackle compliance
problems in a comprehensive way. first of all, some aspects cannot be veried a
priori as compliance may depend on the particular context and its participants.
second, it cannot be assumed that the behavior of all actors is known or can
be controlled. most processes involve autonomous actors, e.g. a specialist in a
hospital may deviate to save lives and another organization may not be very
responsive because of dierent objectives. third, process designs are typically
the outcome of a collaborative process where only some constraints are taken into
account (to reduce complexity and increase exibility). due to the procedural
nature of most process modeling languages [11], incorporating all constraints
is unreasonable (especially in environments with a lot of variability): the model
would become unreadable and dicult to maintain. last but not least, violations
do not always correspond to undesirable behavior. often people deviate for good
reasons. in unpredictable and dynamic settings, breaking the rules is sometimes
justied by the inadequacy or incompleteness of rules.
all these issues call for runtime verication facilities , able to monitor the
running cases of a process and to assess whether they comply with the business
constraints of interest. such facilities should provide meaningful information
to the stakeholders involved. in this paper, we present a novel framework for
compliance evaluation at runtime. the framework oers the following:
1.intuitive diagnostics , to give ne-grained feedback to the end users (which
constraints are violated and why);
2.continuous support , to provide verication capabilities even after a violation
has taken place;
3.recovery capabilities , to realize dierent strategies for continuous support and
accommodate sophisticated recovery mechanisms.
our proposed approach is based on colored automata, i.e., automata whose
states are associated to multiple relevant information (\colors"). moreover, we
adopt declare [10] as a constraint language. declare constraints have an intuitive
graphical notation and ltl-based semantics. ltl (linear temporal logic) is
an established formalism for describing behavioral constraints.
concerning the feedback returned to the monitored system, our approach
does not only communicate if a running case is currently complying with the
constraint model, but also computes the state of each constraint. in this paper,
three possible states are considered for constraints: satised ,possibly violated and
2permanently violated . the rst state attests that the monitored case is currently
compliant with the constraint. the second state indicates that the constraint
is currently violated, but it is possible to bring it back to a satised state by
executing a sequence of event. the last state models the situation where it has
become impossible to satisfy the constraint. at runtime, two possible violations
may occur: (a) a forbidden event is executed, or (b) a state is reached such that
two or more constraints become conicting. the presence of a conict means
that there is no possible future state such that all the involved constraints are
satised. furthermore, when the case is terminated all the possibly violated con-
straints become permanently violated, because no further event will be executed
to satisfy them.
the approach has been implemented using prom and declare. declare [10] is
a exible workow system based on the declare language. prom3is a pluggable
framework for process mining providing a wide variety of analysis techniques
(discovery, conformance, verication, performance analysis, etc.). in the context
of prom, we have developed a generic operational support (os) environment
[13, 16] that allows prom to interact with systems like declare at run-time. our
monitoring framework has been implemented as an os provider.
the remainder of this paper is organized as follows. section 2 presents some
preliminaries: declare as a specication language, rv-ltl as nite trace ltl se-
mantics, and a translation of ltl into automata to build the monitors. section 3
explains how colored automata can be used to check compliance at runtime and
provide meaningful diagnostics. section 4 presents three strategies for dealing
with violations. section 5 shows that the declare model can also be modied at
runtime, e.g., frequent violations may trigger an update of the model. related
work is discussed in section 6. section 7 concludes the paper.
2 background
in this section, we introduce some background material illustrating the basic
components of our framework. using a running example, we introduce declare
(sec. 2.1). in section 2.2, we present rv-ltl; an ltl semantics for nite traces.
in section 2.3, we introduce an approach to translate a declare constraint model
to a set of automata for runtime verication.
2.1 running example using declare
declare is both a language and system based on constraints [10]. the language is
grounded in ltl, but is equipped with a graphical and intuitive language. the
declare system is a full-edged workow system oering much more exibility
than traditional workow systems.
figure 1 shows a ctive declare model that we will use as a running ex-
ample throughout this paper. this example models two dierent strategies of
3prom and the runtime verication facilities described in this paper can be down-
loaded from www.processmining.org.
3low riskhigh yieldmoneystocksbonds=alternateresponseresponseprecedencenot co-existencefig. 1. reference model
investment: bonds and stocks. when an investor receives an amount of money,
she becomes in charge of eventually investing it in bonds or in stocks and she
cannot receive money anymore before the investment ( alternate response ). if the
investor chooses for a low risk investment, she must buy bonds afterwards ( re-
sponse ). moreover, the investor can receive a high yield only if she has bought
stocks before ( precedence ). finally, the investor cannot receive a high yield and
buy bonds in the same trace ( not coexistence ). the gure shows four constraints.
each constraint is automatically translated into ltl. for example, the response
constraint can be modeled as (x=)y) wherexislowrisk andyis
bonds .
unlike procedural languages, a declare model allows for everything that is
not explicitly forbidden. removing constraints yields more behavior. the not
coexistence constraint in fig. 1 is dicult or even impossible to model in proce-
dural languages. mapping this constraint onto a procedural language forces the
modeler to introduce a choice between bonds andhighyield (or both). who
makes this choice? when is this choice made? how many times will this choice
be made? in a procedural language all these questions need to be answered,
resulting in a complex or over-restrictive model.
2.2 ltl semantics for runtime verication
runtime verication linear temporal logic (rv-ltl) is a four-valued seman-
tics for ltl [2]. classically, ltl is dened for innite traces. for business pro-
cesses this does not make an sense as instances are supposed to end. therefore,
several authors dened alternative semantics. here, we use the one described in
[2]. the truth value of an ltl formula 'given a partial nite trace uusing
a variant of the standard semantics for dealing with nite traces is denoted by
uj='. rv-ltl extends this basic notion into a four-valued logic by taking
possible future continuations of uinto account. [ uj=']rvhas one of the values
inb4=f?;?p;>p;>g. the semantics of [ uj=']rvis dened as follows:
{[uj=']rv=>if for each possible continuation ofu:uj='(in this case
'ispermanently satised byu);
{[uj=']rv=?if for each possible continuation ofu:u6j='(in this case
'ispermanently violated byu);
{[uj=']rv=>pifuj='but there is a possible continuation ofusuch
thatu6j='(in this case 'ispossibly satised byu);
4{[uj=']rv=?pifu6j='but there is a possible continuation ofusuch
thatuj='(in this case 'ispossibly violated byu).
dierently from the original rv-ltl semantics, which focuses on trace suxes
of innite length, we limit ourselves to possible nite continuations, since a busi-
ness process execution must eventually reach an end. to keep the presentation
compact, we do not elaborate on the subtle dierences between [2] and our ap-
proach. the dierence between >pand>is based on possible continuations: if
[uj=']rv=>then'will always hold whereas if [ uj=']rv=>pthen there
is at least one continuation where 'does not hold.
note that when monitoring a business process using ltl, it rarely happens
that a constraint is denitely permanently satised . for the most part, business
constraints are possibly satised but can be violated in the future. for this reason,
in this paper, we make no dierence between permanently satised and possibly
satised constraints but we refer to both of them as satised . the following
example explains how the above semantics can be used in practice to monitor a
running process case.
example 1. let us consider the declare model represented in fig. 1. we name
the ltl formulas formalizing its dierent constraints as follows: 'ris the re-
sponse constraint, 'nis the not coexistence constraint, 'ais the alternate re-
sponse constraint, and 'pis the precedence constraint. figure 2 shows a graphical
representation of the constraints' evolution: events are displayed on the horizon-
tal axis. the vertical axis shows the four constraints.
initially, all four constraints are satised. let u0="denote the initial
(empty) trace.
[u0j='r]rv=>p[u0j='n]rv=>p[u0j='a]rv=>p[u0j='p]rv=>p
event money is executed next ( u1=money ), we obtain:
[u1j='r]rv=>p[u1j='n]rv=>p[u1j='a]rv=?p[u1j='p]rv=>p
note that [u1j='a]rv=?pbecause the branching alternate response becomes
possibly violated after the occurrence of money occurs. the constraint is waiting
for the occurrence of another event (execution of bonds orstocks ) to become
satised again. then, bonds is executed ( u2=money;bonds ), leading to a
situation in which constraint 'aissatised again:
[u2j='r]rv=>p[u2j='n]rv=>p[u2j='a]rv=>p[u2j='p]rv=>p
the next event is high yield (u3=money;bonds;high yield ), resulting in:
[u3j='r]rv=>p[u3j='n]rv=?[u3j='a]rv=>p[u3j='p]rv=?
'nand'pbecome permanently violated because bonds and high yield cannot
coexist in the same trace. moreover, the precedence constraint requires that
high yield isalways preceded by stocks and this is not the case for trace u3.
5fig. 2. one of the views provided by our monitoring system. the colors show the state
of each four constraints while the process instance evolves; red refers to ?, yellow refers
to?p, and green refers >or>p.
after reporting the violation, the monitoring system should continue to mon-
itor the process. suppose that the framework is able to provide continuous sup-
port and uses the strategy to simply ignore the violated constraint. assume that
money is executed again, i.e., u4=money ,bonds ,highyield ,money . the
result is that 'abecomes possibly violated again:
[u4j='r]rv=>p[u4j='n]rv=?[u4j='a]rv=?p[u4j='p]rv=?
however, this time the case completes its execution. we suppose that this is
communicated to the runtime verier by means of a special complete event.
usingufto denote the resulting total trace, we obtain:
[ufj='r]rv=>[ufj='n]rv=?[ufj='a]rv=?[ufj='p]rv=?
note that all the possibly violated constraints that are pending when the case
completes become permanently violated (because they cannot become satised
anymore).
2.3 translation of a declare constraint model to automata
to automatically determine the state of each constraint of a declare model
during runtime, we construct a deterministic nite state automaton (we will
simply refer to such an automaton as \automaton"). the automaton accepts a
trace if and only if it satises the modeled constraint. we assume that constraints
are specied in ltl (with a nite trace semantics). we use the translation in
[6] for constructing the automaton.
for the constraints in the model in fig. 1, we obtain the automata depicted
in fig. 3. in all cases, state 0 is the initial state and accepting states are in-
dicated using a double outline. a transition is labeled with the initial letter of
the event triggering it (e.g., we use the label lto indicate that the lowrisk
event occurs). for example, the response constraint automaton starts in state
6s0s1l!lb!b(a) response
s0s1s2s3!h&!bbh!hh!bb- (b) not coexistence
s0s2s1m!mmbs!s&!b&!m- (c) alternate response
s0s1s2hs!s&!h-- (d) precedence
fig. 3. finite automata accepting traces satisfying (a) 'r, (b)'n, (c)'a, and (d) 'p.
0, which is accepting. seeing an l(lowrisk ) we transition to state 1, which
is not accepting. only upon seeing a b(bonds ) do we transition back to state
0 and accept the remainder of the trace. this models our understanding of the
constraint: when we execute lowrisk we have to subsequently execute bonds .
as well as transitions labeled with a single letter, we also have transitions labeled
with one or more negated letters (e.g., ! lfor state 0 of the response constraint
automaton and ! h&!bfor state 0 of the not coexistence automaton). this in-
dicates that we can follow the transition for any event not mentioned (e.g., we
can execute the event highyield from state 0 of the response automaton and
remain in the same state). this allows us to use the same automaton regardless
of the input language.
when we replay a trace on the automaton, we know that if we are in an
accepting state, the constraint is satised and when we are in a non-accepting
state, it is not. we also need to distinguish between the case where the constraint
is permanently violated ?and when it is possibly violated ?p. to do that, we
extend the original automaton to accept all prexes of strings of the language
(in fact, fig. 3 already shows the extended version of the automaton). this is
possible by connecting all the \illegal" transitions of the original automaton to a
new state represented using a dashed outline (e.g., state 3 in the not coexistence
constraint automaton). when we reach such a state during the execution of the
automaton, we know that the constraint is permanently violated and when we
are in a state with a normal outline, the constraint is possibly violated.
we can use these local automata directly to monitor each constraint, but we
can also construct a single automaton for monitoring the entire system. we call
such an automaton a global automaton . the global automaton is needed to deal
with conicting constraints. conicting constraints are constraints for which
there is no possible continuation that satises them all. note that even when
all individual local automata indicate that the constraint is (possibly) satised,
there can still be conicting constrains.
the global automaton can be constructed in dierent ways. the simplest
way just constructs it as the automaton product of the local automata (or,
equivalently, as the automaton accepting the conjunction of the individual con-
straints). this allows us to recognize whether all constraints are satised, and
by also representing all prexes of such traces, we can recognize that at least
7one constraint is violated as well. [15] describes how to construct the global
automaton eciently.
3 colored automata for runtime verication
the global automaton for the system under study is shown in fig. 4. we use
as state names the state numbers from each of the automata from fig. 3, so
state 1020 corresponds to constraint response being in state 1, constraint not
coexistence being in state 0, and so on. to not clutter the diagram, we do not
shown self loops. these can be derived; every state also has a self-loop tran-
sition for any transition not otherwise explicitly listed. state fail corresponds
to all situations where it is no longer possible to satisfy all constraints. note
that state 1202 is not present in fig. 4 even though none of the local au-
tomata is in a permanently violated state. the reason is that from this state
it is never possible to ever reach a state where both response andnot coexistence
are satised, i.e., the two constraints are conicting (in order to satisfy the rst,
we have to execute bwhich would move the latter to state 3). executing the
trace from example 1 ( u4=money;bonds;high yield;money ), we obtain the
trace 0000 !m0020!b0100!hfail!mfail. hence, we correctly identify
that after the rst two events all constraints are satised, but after executing
highyield we permanently violate a constraint.
the global automaton allows us to identify whether we have a (possible)
violation, but not to determine exactly which constraint(s) caused it. in order to
do that, we preserve information about which constraints are satised and which
are not. in eect, we color the states with a unique color for each constraint,
assigning the color to the state if the constraint is satised. figure 5 shows the
colored automaton for our running example. we have indicated that a constraint
is satised by writing the rst letter of its name in upper case (e.g., in state 0000
we have colors rnap and all constraints are satised) and that a constraint can
be eventually satised by writing the rst letter of its name in lower case (e.g.,
in state 1202 we have colors rnap where constraint response is not satised, but
it can be satised by executing bonds and transitioning to state 0302). figure 2
already used such a coloring, i.e., red refers to ?, yellow refers to ?p, and green
refers >or>p.
comparing gures 4 and 5 shows that we now have many states with a dashed
outline, i.e., states from which we cannot reach a state where all constraints
are satised. this reects our desire to continue processing after permanently
violating a constraint. in fact, by folding all states with a dashed outline in
fig. 5, we obtain the original global automaton of fig. 4. note states 1202 and
1222 have a dashed outline even though all constraints are satised or at least
can be satised in successor states. this is because it is not possible to reach a
state where all constraints are satised at the same time (we have basically asked
for low risk, requiring investment in bonds as well as asked for high yield, which
requires investment in stocks only). executing the trace from example 1 ( u4=
money;bonds;high yield;money ), we obtain 0000 !m0020!b0100!h
8s0000
s1000ls0100 b
s0020m
s0002s
failh
b
s1020m
s1002sh
s1100ls0120
m
s0102sh
bs1120
ms1102
s
h
b
ls
h
mb
s
h
mb l
shm
bsh
m
lb
s0202hs0022
mb
s1022m
hl
s0122mhbs1122 mh
s0222m
b
lsb
l
sb
hmb
sl
h
mbs
hm
sl
bmfig. 4. global automaton for the system in fig. 1.
0301!m0321. the last state is colored with ra, indicating that the response
constraint is satised, the alternate response constraint is possibly violated, and
the two remaining constraints are permanently violated.
once the colored global automaton is constructed, runtime monitoring can
be supported in an ecient manner. the status of an instance can be monitored
in constant time, independent of the number of constraints and their complexity.
4 strategies for continuous support
as discussed in sec. 1, the monitoring system should continue to provide mean-
ingful diagnostics after a violation takes place. this section presents three ways
of recovering from a violation. these have been implemented in prom.
4.1 recovery by ignoring violated constraints
the rst recovery strategy simply ignores a constraint after it is permanently
violated. this was the approach we used for the trace discussed in example 1.
figure 2 illustrates the desired behavior when this strategy is used for u4=
9s0000
rnap
s1000
rnapl
s0100
rnapb
s0020
rnapms0201
rnah
s0002
rnap
sbs1020
rnapms1201
rna
h
s1002
rnapss1100
rnapls0120
rnap ms0301
ra
h
s0102
rnapsb
s1120
rnapms1301
ra
h
s1102
rnapss0010
rnp
s1010
rnpl
s0110
rnpbs0211
rn
h
s0012
rnpsbs1211
rn
h
s1012
rnpss1110
rnpls0311
r
h
s0112
rnpsbs1311
r
h
s1112
rnpsbm
ls0221
rna
h
sbms1221
rna
h
sbm
ls0321
ra
h
sbms1321
ra
h
slb
m
b
m lm
b
mlb
b
l
bsb
l
sbs
b
ml
b
sm
lb
s0202
rnaphs0022
rnapm
b
s1202
rnaphs1022
rnapml
s0302
rap
hs0122
rnapmb
s1302
raphs1122
rnapm
l
bs0222
rnapmbs1222
rnap m
l
s0322
rapmbs1322
rap
mm
lb
s0212
rnphb
s1212
rnphl
s0312
rph
b
s1312
rph
l
bb
l
b
sb
l
sbm
hs
bm
l
hbsm
h
s
bm
lsbm
sb
mlb
smfig. 5. colored global automaton for the system in fig. 1.
money ,bonds ,highyield ,money . the colored automaton directly supports
this strategy. in fig. 5 there are multiple states with a dashed outline to be able
to monitor the state of all constraints after a violation.
4.2 recovery by resetting violated constraints
the second recovery strategy resets a constraint when it is permanently vio-
lated. constraints that are not violated progress as before. consider, for in-
stance, the trace money;bonds;money;stocks ,highyield ,money;stocks ,
highyield ,money; stocks ,highyield ,complete . the rst four events can
be executed without encountering any problem: 0000 !m0020!b0100!m
0120!s0102. executing highyield results in a failed state in the colored
automaton: 0102 !h0302. the automaton modeling the not coexistence con-
straint is in state 3. resetting the constraint results in global state 0002. the
remaining events can be executed without any problems: 0002 !m0022!s
0002!h0202!m0222!s0202!h0202.
figure 6 shows the monitor in prom using the reset strategy for trace money ,
money ,lowrisk ,money ,bonds . when money is executed for the second
10fig. 6. recovery by resetting violated constraints.
time, the alternate response constraint becomes permanently violated. however,
after having detecting the violation, the constraint is put back to the initial
state, i.e., it becomes again satised when the following event low risk occurs.
we can provide support for the reset strategy in two dierent ways: (a)
by retaining the local automata for the system and translating back and forth
between the global and local automata when an error is encountered or (b) by
making an automaton specically tailored to handle this strategy.
the rst approach requires a mapping from states of the colored automaton
to states of each of the local automata and vice versa. we can do this using a hash
mapping, which provides constant lookup for this table. when we encounter a
transition that would lead us to a state from which we can no longer reach a state
where all constraints are satised (a dashed state in fig. 5), we translate the state
to states of the local automata. for instance, transition 0100 !h0301 during
the traceu4=money;bonds;high yield;money from example 1 results in a
dashed state 0301. two of the four local automata are in a permanently violated
state. these automata are reset resulting in state 0000.
the second approach creates a dedicated recovery automaton . figure 7 shows
the recovery automaton for our running example. in this automaton we take the
colored automaton and replace any transition to an error (dashed) state with
the state we would recover to, eectively precomputing recovery. we do this by
translating any transition to a dashed state to a transition to the state with the
correct recovery state. in fig. 7 we removed all dashed states, and introduced
new states not previously reachable (here 0200, 1200, 0220, and 1220). we have
handled recovery in states 1202 and 1222 by retaining both of the two conicting
(but not yet violated) constraints response andnot coexistence and handling the
conict when the violation occurs.
from a performance point of view, a dedicated recovery automaton is prefer-
able. each step takes constant time regardless of the size of the original model.
a possible disadvantage is its rigidity; the recovery strategy needs to be deter-
mined beforehand and the only way to switch to another recovery strategy is to
generate a new recovery automaton.
11s0000
rnaps1000
rnap
ls0100
rnap
b
s0020
rnap
ms0002
rnap
s
s0200
rnap
hb
s1020
rnapms1002
rnaps
s1200
rnap
hhs1100
rnap
l
s0120
rnap
ms0102
rnap
s
hb
s1120
rnapms1102
rnap
s
mb
ls
s0220
rnaphmbs
s1220
rnaphb
m
hls
bm
hs
lb
s0202
rnaphs0022
rnapmb
s1022
rnap
m
s1202
rnaphhls0122
rnap
m
hbs1122
rnapm
b
s0222
rnap
mlsb
l
s
mb
s1222
rnaphb
s
m
hlb
s
m
h
b
sml
bsl
mb
ms
b
smlbm
lsb
mb
s
mfig. 7. recovery automaton for the system in fig. 1 using recovery strategy reset and
retaining states for conicting constraints.
4.3 recovery by skipping events for violated constraints
the third recovery strategy skips events for permanently violated constraints
(but still executing it for non-violated constraints). consider, for example, trace
money;money;low risk;money;bonds ,complete . since two occurrences of
money happen next to each other, the alternate response constraint is perma-
nently violated. under the skipstrategy, this constraint is made again active, by
bringing it back to the last state before the violation, i.e., the alternate response
constraint eectively ignores the second occurrence of money . in this way, when
lowrisk occurs the constraint is possibly violated and when another money
is again executed, a new violation is detected. finally, when at the end bonds
occurs, the constraint becomes satised. figure 8 shows the monitor in prom
using the skip strategy for this trace.
figures 6 and 8 illustrate that the reset and skip strategies may produce
dierent results; the former detects one violation whereas the latter detects
two violations. another example is the trace money; bonds; money; stocks ,
highyield ,money;stocks ,highyield ,money;stocks ,highyield ,complete .
12fig. 8. recovery by skipping events for violated constraints.
using the skip strategy, the monitor detects three violations corresponding to
the three occurrences of highyield . the reset strategy detects only one vio-
lation; after resetting the not coexistence automaton no violations are detected
anymore.
similar to recovery by resetting violated constraints, it is possible to con-
struct a dedicated recovery automaton using the skipping events for violated
constraints. as a result, monitoring can be done in an ecient manner.
in this section, we described three recovery strategies. there is no \best
strategy" for continuous support. the choice strongly depends on the application
domain and other contextual factors. therefore, we have implemented all three
approaches in prom.
5 runtime modication
thus far we assumed that the model does not change during monitoring. in work-
ow literature one can nd many approaches supporting exibility by change [14,
12, 5]. the basic idea is that the process model can be changed at runtime. this
generates all kinds of complications (see for example the well-known \dynamic
change bug" [12]). models may change due to a variety of reasons, e.g., the im-
plementation of new legislation or the need to reduce response times. this type
of exibility can easily be supported by declare while avoiding problems such as
the \dynamic change bug". moreover, frequent violations of existing constraints
may trigger model changes such as removing a constraint.
consider for example a trace containing both bonds andhighyield , thus
violating the not coexistence constraint. instead of applying one of the afore-
mentioned recovery strategies, we could leverage on the possibility of modifying
the model at runtime. in particular, we can perform runtime modication using
the algorithms for dynamic modications presented in [15]. the algorithms are
able to update an automaton with changes (such as adding and removing con-
straints). this approach is much faster than regenerating the automaton from
scratch.
13low riskhigh yieldmoneystocksbonds=alternateresponseresponseprecedencenot successionfig. 9. dynamic change of the model shown in fig. 1
fig. 10. recovery by runtime change; at runtime the model shown in fig. 1 is replaced
by the model shown in fig. 9.
in our example, we could remove the not coexistence constraint from the ref-
erence model adding at the same time a new not succession constraint, obtaining
the declare model shown in fig. 9. after this modication, events bonds and
highyield can coexist but when lowrisk occurs,highyield cannot occur
anymore. after the modication the trace is monitored w.r.t. the new model,
leading to the result reported in fig. 10.
6 related work
several bpm researchers have investigated compliance at the model level [1, 7].
in this paper, we focus on runtime verication and monitoring based on the
observed behavior rather than the modeled behavior. this has been a topic of
ongoing research, not only in the bpm domain, but also in the context of soft-
ware engineering and service oriented computing. most authors propose to use
temporal logics (e.g., ltl) and model checking [4]. we refer to the survey paper
by bauer et al. [2] for an overview of existing approaches. classical automata-
based model checking techniques must be adapted to reason upon partial traces .
the monitored traces are nite , and also subject to extensions as new events
happen, making it not always possible to draw a denitive conclusion about
the property's satisfaction or violation. our verication technique is inspired by
[6], where the use of (a nite-trace version of) ltl is also considered to tackle
14runtime verication. here a translation from arbitrary (next-free) ltl formulas
is used to monitor any running system. the main dierence with our approach
is that we consider the monitor to be composed by several constraints, each of
which can be violated, and we report and recover based on individual automata
instead of the entire system.
other logic-based approaches have been proposed to deal with runtime ver-
ication of running traces. the work closest to our approach is [3], where dec-
serflow (one of the constraint-based languages supported by declare) is used to
declaratively model service choreographies, and a (reactive version) of the event
calculus [8] is employed to provide the underlying formalization and monitoring
capabilities. unlike our approach, the interplay between constraints is not taken
into account in [3].
the approach presented in this paper has been implemented as an opera-
tional support (os) provider in prom (www.processmining.org). the os frame-
work in prom can be used to detect, predict, and recommend at runtime. for
example, [13] describes os providers related to time. for example, based on a
partial trace the remaining ow time is predicted and the action most likely to
minimize the ow time is recommended.
7 conclusion
compliance has become an important topic in organizations that need to en-
sure the correct execution of their processes. despite the desire to monitor and
control processes, there are many events that cannot be controlled. for exam-
ple, it is impossible and also undesirable to control the actions of customers
and professionals. therefore, we propose a comprehensive set of techniques to
monitor business constraints at runtime. these techniques are based on colored
automata . one global automaton contains information about all individual con-
straints. this automaton can be precomputed, thus making monitoring very
ecient.
since constraints may be permanently violated, it is important to recover
after a violation (to continue to give meaningful diagnostics). we proposed and
implemented three recovery approaches (ignore, reset, and skip). moreover, we
showed that it is possible to eciently modify the constraint model while mon-
itoring.
the approach has been applied in the poseidon project where is has been used
to monitor \system health" in the domain of maritime safety and security. future
work aims at more applications in typical bpm domains (banking, insurance,
etc.). moreover, we would like to further improve our diagnostics and include
other perspectives (data, time, resources).
references
1. a. awad, g. decker, and m. weske. ecient compliance checking using bpmn-
q and temporal logic. in m. dumas, m. reichert, and m.-c. shan, editors, 6th
15international conference on business process management (bpm 2008) , volume
5240 of lncs , pages 326{341. springer, 2008.
2. a. bauer, m. leucker, and c. schallhart. comparing ltl semantics for runtime
verication. logic and computation , 20(3):651{674, 2010.
3. f. chesani, p. mello, m. montali, and p. torroni. verication of choreographies
during execution using the reactive event calculus. in r. bruni and k. wolf,
editors, proceedings of the 5th international workshop on web service and formal
methods (ws-fm2008) , volume 5387 of lncs , pages 55{72. springer, 2009.
4. e.m. clarke, o. grumberg, and d.a. peled. model checking . the mit press,
cambridge, massachusetts and london, uk, 1999.
5. p. dadam and m. reichert. the adept project: a decade of research and de-
velopment for robust and exible process support. computer science - r&d ,
23(2):81{97, 2009.
6. d. giannakopoulou and k. havelund. automata-based verication of temporal
properties on running programs. in proceedings of the 16th ieee international
conference on automated software engineering (ase 2001) , pages 412{416. ieee
computer society, 2001.
7. g. governatori, z. milosevic, and s. w. sadiq. compliance checking between
business processes and business contracts. in proceedings of the 10th ieee in-
ternational enterprise distributed object computing conference (edoc 2006) ,
pages 221{232. ieee computer society, 2006.
8. r.a. kowalski and m.j. sergot. a logic-based calculus of events. new generation
computing , 4(1):67{95, 1986.
9. marco montali. specication and verication of declarative open interaction mod-
els: a logic-based approach , volume 56 of lnbip . springer, 2010.
10. m. pesic, h. schonenberg, and w.m.p. van der aalst. declare: full support
for loosely-structured processes. in proceedings of the 11th ieee international
enterprise distributed object computing conference (edoc 2007) , pages 287{
300. ieee computer society, 2007.
11. m. pesic and w.m.p. van der aalst. a declarative approach for flexible business
processes management. in j. eder and s. dustdar, editors, proceedings of the
bpm 2006 workshops , volume 4103 of lncs , pages 169{180. springer, 2006.
12. h. schonenberg, r. mans, n. russell, n.mulyar, and w.m.p. van der aalst. to-
wards a taxonomy of process flexibility. in z. bellahsene, c. woo, e. hunt,
x. franch, and r. coletta, editors, proceedings of the forum at the caise'08
conference , volume 344 of ceur workshop proceedings , pages 81{84, 2008.
13. w.m. p. van der aalst, m. pesic, and m. song. beyond process mining: from
the past to present and future. in barbara pernici, editor, advanced information
systems engineering, 22nd international conference, caise 2010, hammamet,
tunisia, june 7-9, 2010. proceedings , volume 6051 of lecture notes in computer
science , pages 38{52. springer, 2010.
14. b. weber, s. rinderle, and m. reichert. change patterns and change support
features in process-aware information systems. in proceedings of the 19th inter-
national conference on advanced information systems engineering (caise 2007) ,
volume 4495 of lncs , pages 574{588. springer, 2007.
15. m. westergaard. better algorithms for analyzing and enacting declarative work-
ow languages using ltl. submitted to bpm'11, 2011.
16. m. westergaard and f.m. maggi. modelling and verication of a protocol for
operational support using coloured petri nets. in proc. of atpn'11 , 2011.
16