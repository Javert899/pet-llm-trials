cost-informed operational process support
m. t. wynn1, h. a. reijers2;3, m. adams1, c. ouyang1, a. h. m. ter
hofstede1;2, w. m. p. van der aalst2;1, m. rosemann1, and z. hoque4
1queensland university of technology, brisbane, australia.
fm.wynn,mj.adams,c.ouyang,a.terhofstede,m.rosemann g@qut.edu.au
2eindhoven university of technology, eindhoven, the netherlands.
fh.a.reijers,w.m.p.v.d.aalst g@tue.nl
3perceptive software, apeldoorn, the netherlands.
hajoalexander.reijers@perceptivesoftware.com
4la trobe university, melbourne, australia.
z.hoque@latrobe.edu.au
abstract. the ability to steer business operations in alignment with the
true origins of costs, and to be informed about this on a real-time basis ,
allows businesses to increase protability. in most organisations however,
high-level cost-based managerial decisions are still being made separately
from process-related operational decisions. in this paper, we describe how
process-related decisions at the operational level can be guided by cost con-
siderations and how these cost-informed decision rules can be supported
by a workow management system . the paper presents the conceptual
framework together with data requirements and technical challenges that
need to be addressed to realise cost-informed workow execution. the
feasibility of our approach is demonstrated using a prototype implemen-
tation in the yawl workow environment.
keywords: cost-informed process enactment, business process man-
agement, workow management, process modelling, prototype
1 introduction
organisations are eager to implement cost-based considerations in their day-to-
day operations. the gartner exp worldwide surveys of cios showed process
management and reducing enterprise costs to be the top two priorities for many
organisations [6]. an insurance company, for instance, may want to approve a
claim quickly and skip further investigations if the administrative cost incurred
at a certain point is deemed to be excessive in comparison to the potential
payout amount. in a similar vein, when an organization is seeking an external
service provider, the candidate who gives the cheapest quote for a job is preferred
provided that the candidate is deemed capable of doing the job.
in most organisations, however, tying cost considerations to process-related
decisions forms a challenge. our observation is that most workow management
systems (wfmss) oer no support for cost considerations beyond the use of
generic attributes (e.g. filenet business process manager) or some basic costrecognition and reporting (e.g. tibco staware process suite). detailed cost
information is typically not available at runtime and, as a result, cost information
is not used for monitoring or for operational decision support.
our motivation for this paper is to provide a conceptual framework to en-
able wfmss1to achieve a higher level of support for cost-informed operational
decisions. more specically, such a cost-aware wfms is able to record histor-
ical cost information and makes use of it for (real-time cost) monitoring and
escalation purposes, as well as supporting simulation and cost prediction capa-
bilities. ideally, it can also support process improvement decisions based on cost
considerations, such as determining cost proles of dierent processes/process
variants and using them for selection/redesign purposes. to this end, we propose
methods for the capture of cost-based decision rules for process, activity and re-
source selections within business processes and how automated support could be
provided for cost-informed process enactment within a wfms. our contribution
is that we lay the groundwork for organizations to more easily translate cost
strategies into their operational fullment activities using a wfms.
it is worth noting that cost is traditionally considered as one of many non-
functional requirements (nfr) for a software system or service in the same
manner as maintainability, usability, reliability, traceability, quality or safety [3].
researchers have explored how these requirements can be elicited from users and
how to incorporate nfrs in conceptual models [2, 5, 11, 13]. however, the cost
perspective has a very close and direct link with bpm/wfm, much more so than
most other nfrs. first of all, consider that cost is relevant from the viewpoint of
individual activities, resources, and entire processes { all of which are in scope for
a wfms. this versatility typically does not hold for many other nfrs. quality,
for example, is relevant in the context of a whole process, but not necessarily for
a single activity; usability can be tied to a single activity, but not to resources;
reliability may be relevant for a single activity, but is too ne-grained for cross-
functional processes. secondly, when we refer to the dynamic nature of cost we
mean that it is relevant for both design and run time decisions. this aspect diers
from nfrs such as maintainability and usability, which are important concerns
at design time, but out of scope for operational decision making. again, both
the design and run time perspectives are in scope for a wfms. in summary, a
wfms is a natural platform to manage cost concerns since it connects the many
levels of cost interests and allows for implementing cost-informed design and
operational decisions.
the remainder of the paper is organised as follows. section 2 describes the
proposed conceptual framework to support cost-informed decisions within a
workow environment. section 3 provides an overview of technical challenges
that need to be addressed to make wfmss cost-aware. section 4 discusses the
prototype implementation of a cost service within yawl , a well-known open-
source wfms. section 5 presents related work and section 6 concludes the paper.
1in the remainder, we use the term wfms to refer to all process-aware information
systems, including business process management systems (bpmss).2 a framework for cost-informed decisions
this section denes a framework to support cost-informed process execution in
a wfms. we propose that in addition to the ability to specify cost-informed
control ow denitions and resource allocation rules at design time , a cost-
informed wfms should also provide support for system-based decisions and
system-supported user decisions at runtime . as such, dierent types of actions
can be performed by a wfms or by a resource interacting with a wfms to sup-
port cost-informed decision making during process execution . figure 1 depicts
our conceptual framework which describes 1) data input , i.e. the information
requirements to enact actions that can be undertaken by or with a wfms to
support cost-informed decision making, 2) the actions that can be taken on
the levels of process, activity, and resource (work distribution), and 3) the cost-
informed support that is delivered, either through decisions by the wfms itself
or people using its support.
fig. 1. a framework supporting cost-informed process execution with a wfms.
2.1 data input
a number of key objects need to be provided to a wfms as data inputs to sup-
port cost-informed actions. in addition to an executable process model , we need
access to a cost model that can be associated with dierent elements within a
process model (e.g., the cost rates of activities and resources). cost data could
be as simple or as complex as an organisation requires it to be. for instance,
it could be a variable cost that describes the hourly rate of a resource, but it
could also be a dynamic scheme that ties overhead costs to each case depend-
ing on seasonal factors. a cost prole of a process is made up of all these cost
rates/data associated with activities within a particular process. cost informa-
tion, together with historical data as stored in a so-called process log regarding
past executions, can be used to determine the cost of process executions as il-
lustrated in our earlier work [23]. since a business process is always executed
in a particular context, we also adopt the four levels of context data described
in [20]: case attributes, process context, social context, and the environment.
environmental information, for example, is needed to accurately determine the
seasonal inuence in the dynamic cost scheme we mentioned.2.2 actions
all cost-informed actions are based on the data inputs that we discussed on
the one hand, while they are governed by the strategic considerations within an
organisation on the other. we refer to these as cost optimisation goals . typical
examples are: cost minimisation, cost overrun prevention, prot maximisation,
incorporation of opportunity cost, etc.
the concrete cost-informed actions supported by a wfms, informed by data
input and governed by cost optimisation goals, can then be classied into three
levels: process, activity, and resource.
process. the process level is concerned with carrying out process selection
based on cost information of processes or process variants at design time or at
runtime. this may involve the selection among dierent processes or selection
among dierent process variants (which are created from individual processes
during the execution phase). the variants of a process all share a kernel of sim-
ilar behaviour, but may subtly dier to make them appropriate to deal with
subtypes of cases, diering conditions across markets, or other concerns. for ex-
ample, a rigorous variant for damage claim processing may be in place for normal
operations, while in emergency situations a variant may be selected that relaxes
or postpones certain checks. it should also be possible to assign a (whole) pro-
cess or process variant to a certain resource team for execution (i.e. outsourcing)
based on the cost prole.
activity. for cases that have been started under the control of a wmfs, it
is necessary to decide at certain points about the activity (or activities) to be
executed next. note that a process instance is known as a case and an instance
of an activity in a case is known as a workitem . in its coordination capability, a
wfms may decide on which workitems are enabled in a specic case, based on
the branching conditions specied in the control-ow of the underlying process
model. as such, the wfms must be aware of or needs to have access to cost
relevant information for branching decisions. a wfms could also start, skip,
and cancel a workitem, among other actions, based on that cost information.
for example, a wfms can choose to cancel a particular workitem which might
cause a potential budget overrun.
resource. after a workitem has been enabled, further choices related to dis-
tributing work to resources become possible. for workitems that need to be
carried out by a user, both \push" and \pull" patterns of activity-resource as-
signment [17] should be supported. with respect to the \push" patterns, a wfms
would need to support cost-informed resource allocation rules for selecting a re-
source to oer, allocate, and/or start a workitem. with respect to the \pull"
patterns, a wfms would support a user to make cost-informed workitem selec-
tion decisions.figure 2 shows possible cost-based decision points within the lifecycle of a
workitem. after a workitem is created, the system can oer the workitem to one
or more resources for execution (which is depicted as \s:oer s" and \s:oer m"
decisions). an additional \c:selection" annotation indicates that it is possible
for this system decision to be cost-informed. i.e. a resource could be selected
based on its cost characteristics. after a workitem is oered to multiple re-
sources, one of these resources can decide to work on a workitem. for example,
the \r:allocate m" transition represents a resource making a selection and the
\c:selection" annotation indicates that this system-supported user decision can
be cost-informed. after a workitem is started by a resource, it can still be sus-
pended/resumed or cancelled by a resource. the \r:suspend", \r:resume", and
\r:cancel" transitions reect these possibilities and similarly the \c:decision"
annotations in these transitions indicate that these user decisions can be guided
by cost information. in figure 2, transitions that can be cost-informed are de-
picted using bold arrows.
fig. 2. lifecycle of a workitem (based on [17]) { enriched with potential cost-based
rules for system decisions and system-supported user decisions.
when more than one workitem is assigned to a resource and/or when a
workitem is oered to multiple resources, a wfms can provide support for
the prioritisation of workitems based on cost information. figure 3 illustrates
a scenario where a resource has multiple workitems on his/her worklist. these
workitems can be (re)ordered either by the resource (\r:re-order") or by the
system itself (\s:re-order") based on cost information. in the case of a workitem
being oered to multiple resources, the system can withdraw an oered workitem
(\s:withdraw"), which could lead to reordering of the remaining workitems on
a worklist. the \c:ordering" annotations indicate that these transitions can be
cost-informed.
2.3 cost-informed support
as we mentioned, our framework identies the two types of cost-informed sup-
port that result from the discussed ingredients: systems decisions , which can be
taken by the wfms itself, and system-supported user decisions , which are taken
by resources on the basis of information provided by the wfms. these decisions
reect the dierent action types supported by the framework. for instance, itfig. 3. cost-based (re)ordering of a worklist of a resource with multiple workitems
is possible for the wfms to make an automated selection of the process vari-
ant based on its cost prole and context information. alternatively, the wfms
can provide the resource with cost proles of dierent process variants and the
resource can make the selection. this is also true for decisions on which activ-
ities to execute. the wfms can either make a cost-informed decision based on
a pre-dened business rule to enable/start an activity or allow the resource to
start/skip/suspend/resume/cancel a particular activity based on cost informa-
tion. decisions on which paths to choose in a process are exclusively taken care
of by the wfms using predened cost-informed business rules. workitems can
be assigned by the wfms or can be selected by a resource based on their cost
(historical or predicted values). finally, a wfms can order multiple workitems
or a resource can decide to reorder his/her workitems using cost information.
the example in section 4.2 will illustrate these types of support, along with an
explanation of the technical capabilities these depend upon.
3 technical challenges
for a wfms to be capable of cost-informed enactment, execution and support
across the three levels (process, activity and resource), the following key criteria
would need to be satised:
1.association of cost data and cost-based rules with a process/workow. this
support is required prior to the execution phase. relevant cost rates for
dierent process elements such as activities and resources must be specied
in advance. some values would include salary and incidental costs for human
resources, the costs of materials required, xed costs associated with activity
enactments, rentals, depreciation, and so on.
2.runtime calculation of the cost of execution of each process instance and its
component activity instances. such calculations may be:
{time-based , for example salary costs for the time a human resource spends
on workitem execution, or timed charges for interaction with an external
service, or the cost of insurance for a period;
{usage-based , for example forklift hire, or the use of an mri machine, or
payment of a set fee for an expert witness;{measurement-based , for example per tonne costs of a raw material, or per
millilitre of a pharmaceutical, or per kilowatt-hour of a power supply;
{invocation-based , for example costs involving in retooling an assembly
line for a product run;
{a xed cost , for example an overhead cost of commencing an activity, or
a building approval application fee;
{a combination of the above , for example a truck rental may involve an ini-
tial hire cost plus a fee per kilometre, or a usage-based fee for a machine
hire may also involve a time-based insurance fee.
3.logging and analysis of cost data. the ability to archive all calculated costs
for each process instance (incorporated into the process event logs) and to
perform extrapolated calculations over archived data.
4.support for cost-informed decisions. the ability to use the calculated cost
for the current process instance, and/or those of all previous instances of the
process, to:
{make human-based and system-based cost-informed control-ow deci-
sions . these decisions would include providing real time calculated values
for use as input into branching predicates; to continuously monitor for
cost overruns and, when detected, manually or dynamically skip unnec-
essary or low priority workitems, or cancel workitem and/or cases; and
to notify administrators when cost thresholds are being approached;
{allocate work to resources based on decisions about their costs;
{provide human resources and administrators with cost information about
a process and its component activities, to enable them to make cost-
informed decisions about subsequent process executions and process re-
engineering;
{support for cost-informed process variant selections .
4 realisation
we have developed a prototype implementation for the yawl workow envi-
ronment [18] that addresses the technical challenges outlined in the previous
section. yawl was chosen as the implementation platform because it is built
on an expressive workow language that provides extensive support for iden-
tied workow and resource patterns, together with a formal semantics. the
environment is open-source and oers a service-oriented architecture, allowing
the prototype to be implemented completely independent of the core workow
(enactment) engine.
4.1 the cost service
our prototype, known as the cost service , has been realised as a yawl custom
service. it provides two interfaces: one which receives notications from the
workow engine and participating services at various points in the life-cycleof a case, and the other which allows the engine and services to query cost-
information, either to request a calculation and have the result returned, or to
return a complete cost-annotated log of a process instance (or instances). the
latter interface also supports the import and export of cost models .
a cost model is an xml document that describes all the base cost data and
formulae to be associated with a particular process model as dened in [23]. in
brief, each cost model consists of three core descriptor sets:
{drivers: each cost driver denes how cost is associated with one or more
process elements (resource, activity, case) together with the relevant cost
rate for each element. a cost rate is dened as a data pair of a value and
aperamount, for example $50 per hour, $70 per tonne, $20 per invocation
(xed) and so on, applied to a process element.
{functions: each function denes an expression for aggregating various cost
elements. for example, a function may aggregate a xed cost, and costs for
salaries, insurance and machine hire for all resources involved in an activity.
{mappings: each mapping provides a way to relate terms used in management
accounting to terms used in a wfms.
the cost service is also responsible for the logging of all cost data for all
process instances and their activities. the workow engine and other interested
services such as the resource service , which manages all resourcing allocations,
notify the cost service throughout the life-cycle of each process instance, passing
to it the appropriate data so that it can (i) perform the required cost calculations
by applying the data to the relevant cost model components; and (ii) store all
interactions and results in its process logs.
the workow engine has been extended to accommodate control-ow pred-
icates that include cost-based expressions. when process execution reaches a
control-ow predicate that contains a cost-based expression, the workow en-
gine will call the cost service , passing the expression, along with all associated
data. the cost service will use that data to evaluate the expression against the
appropriate cost model components, and return the result. the engine will then
embed the result into the predicate (replacing the cost-based expression), which
it will then continue to evaluate in the usual manner, as required.
the yawl resource service has a pluggable framework for adding new re-
source allocation strategies , which at runtime receive the set of potential users
that may be allocated an activity, and use a dened strategy to select one user
from the set. the standard set of yawl allocators (e.g., random choice, short-
est queue, round robin) has been extended with a number of cost-based strate-
gies, such as cheapest resource, cheapest to start, cheapest completer and so
on. when the resource service enacts a cost-based allocator at runtime, the
allocator will directly query the cost service , requesting a calculation based on
previous case histories (stored within the process logs) for the resources involved,
based on the particular allocation strategy in question. the allocator will then
use the result of the query to determine the appropriate resource to whom to
allocate the activity, fullling a push-based resource interaction.a user or administrator interacting with the yawl worklist, which is also
managed by the resource service, may invoke a query request to the cost service
for data about a particular activity, which will then be displayed on their work
queue. the user can then use this information to make ad-hoc cost-informed
decisions regarding which activity to choose from their worklist to perform next,
fullling a pull-based resource interaction.
with regards to process variants, the standard yawl environment contains a
service called the worklet service that allows for the selection of process variants
based on the current case context, available data values and an extensible rule
set [18]. future work will extend this service to also support cost-based rule
expressions, which may then be used to determine which process variant is the
ideal selection for the current context of a case.
fig. 4. prototype architectural ow in the yawl environment.
figure 4 shows the ow of information through the prototype for each level
of cost-informed support. at the process level, the workow engine schedules
an activity for execution by the worklet service (1.1). the worklet service
traverses its rule set for the activity, querying the cost service to evaluate cost-
based rule expressions (1.2). the cost services evaluates and returns the results
(1.3), which the worklet service uses to select the appropriate process variant
for the activity, and launches the variant in the engine (1.4).
at the activity level, when the workow engine encounters an branching
construct in the control-ow of a process instance, it queries the cost service
to evaluate the predicate of each outgoing branch (2.1). the engine then uses
the results of the predicate evaluations to re the branch that evaluates to true
(2.2).
at the resource level, where the distribution of work takes place, the work-
ow engine schedules an activity for a (human) resource (3.1) with the resourceservice. the resource service then queries the cost service for all cost informa-
tion pertaining to the activity (3.2), which the cost service returns (3.3). if the
activity is congured for system-based allocation (push pattern), the specied
allocation strategy (e.g. cheapest resource) is employed using the cost informa-
tion in its calculations, then the activity is routed to the worklist of the selected
resource (3.4). if the activity is congured for resource-based allocation (pull
pattern), the aected resources' worklists are updated with the retrieved cost
information (3.5) allowing a resource to select the appropriate activity based on
the cost information presented to them (3.6).
4.2 illustrative example
we consider a simplied home loan application and approval process as an illus-
trative example to demonstrate the support for cost-informed process enactment
within the yawl environment. figure 5 depicts a yawl model of the process
which has been annotated with role-based resource assignments. most of the
tasks in the process are assigned to one specic role, except for three parallel
tasks in the \(re-)assess loan application" sub-process, which can be per-
formed by either a resource performing the role of mortgage underwriter (mu)
or underwriting assistant (ua). note that the \engage broker" activity will be
delegated to the worklet service (ws) for execution at runtime. the execution
of the \need mortgage insurance" activity will be automatically supported by
the yawl engine using the information provided in the loan application.
fig. 5. a home loan process in yawl (annotated with resource assignments).with this example, we assume that the cost optimisation strategy is to min-
imise the labour cost for processing a loan case when possible. the cost model
includes the cost rates of resources and activities at a bank, and of mortgage
broker services. these can be categorised as follows.
{role-based (variable) cost rate of a resource, e.g., a bank employee in a
certain role has a salary of $50 per hour.
{fixed cost rate of a resource for a given activity, e.g., a property valuer
charges $300 to conduct a property valuation activity.
{fixed cost rate for an activity, e.g., a mortgage insurance processing fee is
$50 per loan application.
{case-based (variable) cost rate, e.g., a mortgage broker service charges a
commission of 0.5% of the loan amount.
support for cost-informed decisions at each of the three levels during the
process enactment can be demonstrated through examples as follows.
process level. at runtime the ws handling the \engage broker" activity main-
tains a number of process variants corresponding to various broker services that
charge the bank dierent commissions and/or fees for service provision. cost-
informed rules or criteria to guide the selection of the process variant to execute
can be specied as predicates to pass to the cost service for evaluation. de-
pending on information from the home loan application such as loan amount,
the applicant's ability to repay, the property location, and planning require-
ments, together with costs incurred from previous variant instances, the variant
that represents the best value for money, while covering the necessary regulatory
and risk requirements, will be selected.
activity level. the xor-split after the \(re-)assess loan application" activity
embeds a cost-based predicate. with a clear positive or negative assessment
result, the \make decision" activity will be carried out immediately afterwards.
otherwise, further follow-up will be required for another round of assessment.
however, if the processing cost to this point reaches a certain limit (can e.g. be set
as a certain percentage of the loan amount), then instead of conducting further
follow-up, a risk assessment will be performed based on the current evaluation
data to make a decision.
resource level. for each role, there are multiple resources who may have dierent
cost rates (e.g. dierent salary levels between a junior and a senior loan proces-
sor). for example, for the execution of the \conduct valuation" activity, the
\cheapest resource" resource allocation strategy is selected. figure 6 includes
screenshots of design-time support for allocation strategy selection in the yawl
designer, while figure 7 shows screenshots of the organisational model, the re-
lated cost model, and the automatic resource allocation (as expected) during the
process execution in the yawl runtime environment.fig. 6. at design time: the system is congured to allocate \conduct valuation"
activity to a resource with property valuer role with the cheapest cost.
fig. 7. at runtime: the system nds the resource with \property valuer" role (from
organisational data) with the cheapest cost (from the cost model) and assigns the
workitem (instance of activity) \conduct valuation" to this resource.
5 related work
cost has always been one of the key factors under consideration in the context of
business process reengineering [10] and process improvements [16]. in [10], the au-
thors discussed the ndings from a survey conducted of commonly used business
process reengineering techniques by consulting organisations and the ndings
highlighted the importance of cost/benet/risk analyses at dierent stages, and
in particular identied activity based costing (abc) [4] as one of the represen-
tative techniques in the evaluation stage. through the iterative application of
bpm techniques, processes can be improved in terms of quality, exibility, time
and/or cost [16, 12]. although wfmss support planning, execution, (re)design
and deployment of workows [22], direct support for cost-informed execution is
currently lacking. we have previously taken a rst step by proposing a generic
cost model [23], which is one of the ingredients of the encompassing framework
we presented and demonstrated in the current paper.
the interrelationships between processes, resources and cost are also high-
lighted in the reports produced by the international federation of accoun-
tants [14, 15]. notwithstanding these works, few studies exist where a structuredapproach to the analysis of cost factors in a process-aware information system
is undertaken. since the introduction of erp systems, a number of studies have
been conducted on the eects of erp systems on traditional management ac-
counting practices [1, 7, 8]. recently, vom brocke et al. proposed an information
model to link the aris accounting structure with aris process semantics using
event driven process chains (epc) [21].
cost-informed operational process support is related to the notion of op-
erational support studied in the context of process mining [19]. examples are
predictions and recommendations learned over historic event data and provided
in an online setting. current approaches are based on regression, decision tree
analysis, annotated transition systems, and so on [19]. operational support is
also mentioned as one of the main challenges in the process mining manifesto [9].
as shown in this paper, operational support based on cost considerations can be
provided though an external cost service tightly coupled to the wfms.
6 conclusion and future work
the paper proposes a conceptual framework to enable workow management
systems to be cost-informed during enactment. in particular, we proposed how
cost-based decision rules for process variant selections, activity related decisions
(e.g., execution, cancellation, deferment), and resource assignment decisions can
all be supported within a wfms. we presented the technical challenges that need
to be addressed to realise this level of support for a wfms and proposed an ar-
chitecture for cost-informed process execution. we also presented a realisation of
such a cost-informed workow environment using the yawl workow manage-
ment system. we believe that our approach will enable organizations to more
easily translate cost strategies into operational fullment using a wfms and
we have plans to evaluate the framework with stakeholders' input (e.g. through
interviews and case studies).
this work takes an important step towards achieving a higher level of support
for wfmss in terms of the cost perspective. for the future, we are interested in
the development of predictive capabilities that may help to project the cost
that is incurred by alternative operational decisions. furthermore, we are at this
point reecting on the incorporation of other non-functional concerns, besides
cost, to enhance the operational support provided by a wfms. we hope that our
work inspires other researchers to more closely connect organisational strategic
concerns with the practices and systems on the work oor.
references
1. p. booth, z. matolcsy, and b. wieder. the impacts of enterprise resource planning
systems on accounting practice{the australian experience. australian accounting
review , 10(22):4{18, 2000.
2. l. chung and j. c. s. do prado leite. on non-functional requirements in software
engineering. in conceptual modeling: foundations and applications , pages 363{379.
springer, 2009.3. l. chung, b. nixon, e. yu, and j. mylopoulos. non-functional requirements in
software engineering . kluwer, 2000.
4. r. cooper and r. kaplan. measure costs right: make the right decisions. harvard
business review , september - october:96{103, 1988.
5. l. m. cysneiros, j. c. s. do prado leite, and j. d. m. s. neto. a framework
for integrating non-functional requirements into conceptual models. requirements
engineering , 6(2):97{115, 2001.
6. gartner. improving business processes, 2010.
7. s. grabski, s. leech, and a. sangster. management accounting in enterprise re-
source planning systems . cima publishing, 2009.
8. t. hyv onen. exploring management accounting change in erp context . phd
thesis, university of tampere, 2010.
9. ieee task force on process mining. process mining manifesto. in bpm 2011
workshops , volume 99 of lnbip , pages 169{194. springer, 2011.
10. w. kettinger, j. teng, and s. guha. business process change: a study of method-
ologies, techniques, and tools. mis quarterly , 21(1):55{80, 1997.
11. j. mylopoulos, l. chung, and b. nixon. representing and using nonfunctional
requirements: a process-oriented approach. software engineering, ieee transac-
tions on , 18(6):483{497, 1992.
12. m. netjes, h. reijers, and w. van der aalst. on the formal generation of process
redesigns. in business process management workshops , pages 224{235. springer,
2009.
13. j. j. o'sullivan. towards a precise understanding of service properties . phd thesis,
queensland university of technology, 2006.
14. professional accountants in business committee. evaluating and improving cost-
ing in organizations, july 2009.
15. professional accountants in business committee. evaluating the costing journey:
a costing levels continuum maturity model, july 2009.
16. h. reijers and s. mansar. best practices in business process redesign: an overview
and qualitative evaluation of successful redesign heuristics. omega , 33(4):283{306,
2005.
17. n. russell, w. van der aalst, a. ter hofstede, and d. edmond. workow resource
patterns: identication, representation and tool support. in proceedings of the
conference on advanced information systems engineering , volume 3520 of lncs ,
pages 216{232. springer, 2005.
18. a. ter hofstede, w. van der aalst, m. adams, and n. russell, editors. modern
business process automation: yawl and its support environment . springer, 2010.
19. w. van der aalst. process mining: discovery, conformance and enhancement of
business processes . springer, 2011.
20. w. van der aalst and s. dustdar. process mining put into context. ieee internet
computing , 16:82{86, 2012.
21. j. vom brocke, c. sonnenberg, and u. baumoel. linking accounting and process-
aware information systems - towards a generalized information model for
process-oriented accounting. european conference on information systems , pages
1{13, 2011.
22. m. weske. business process management: concepts, languages, architectures .
springer-verlag, new york, inc., secaucus, nj, usa, 2007.
23. m. t. wynn, w. z. low, and w. nauta. a framework for cost-aware process
management: generation of accurate and timely management accounting cost re-
ports. in conferences in research and practice in information technology (cr-
pit) , 2013.