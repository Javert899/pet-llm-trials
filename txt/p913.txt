structure theory in a dynamic data-driven world
applications in process mining and bpm
(extended abstract)
wil m.p. van der aalst
eindhoven university of technology, po box 513, eindhoven, the netherlands
abstract. until the turn of the century, most petri nets were made by hand or
generated from another model (e.g., though synthesis). such petri nets where
mostly used to provide a speciﬁcation or design of a system (as-is or to-be). ana-
lysis of these nets aimed at detecting behavioral anomalies like deadlocks and
livelocks (through veriﬁcation) and understanding performance (through simula-
tion or analytical techniques). structure theory provided unique ways to facilitate
such analysis by exploiting the structure of (subclasses of) petri nets. however,
over the last decade one could witness a dramatic change in the way we analyze
the behavior of discrete processes and systems. model-driven approaches are re-
placed or complemented by data-driven approaches . the abundance of event data
makes it feasible to study processes and systems directly. process mining techni-
ques allow for the discovery of petri nets from event data and can be used to check
conformance. through process mining we are able to connect petri nets to main-
stream developments related to big data, data science, and machine learning. the
direct confrontation between modeled and observed behavior is valuable, but also
provides many challenges. for example, one needs to deal with huge event logs
and processes that change over time and exhibit deviating behavior. can structure
theory also play a key role in such data-driven analysis? the answer is afﬁrma-
tive. elements of structure theory are already widely used in process mining and
business process management (bpm). moreover, further breakthroughs are pos-
sible by tailoring structure theory towards more data-driven problems.
1 introduction
traditionally, petri nets are made by hand or generated from other models [23, 32, 34,
35]. petri nets can be used to design or specify discrete dynamic systems. most petri
nets described in literature where created manually . however, program code, lower-
level models (e.g., transition systems), and higher-level models (e.g., bpmn or uml
models) can be transformed into petri nets. most of these transformations are quite
straightforward, although the devil is often in the details and abstractions are needed.
for example, the de facto standard for business process modeling—bpmn (business
process model and notation) [33]—uses token passing. also uml activity diagrams
use token-based semantics and a notation similar to petri nets. examples of transforma-
tions that are more involved include the petri net synthesis techniques known under the
name of “region theory” [25, 20, 10]. state-based region theory starts from a transition
system and aims to produce a petri net that has the same behavior while capturing con-2 wil m.p. van der aalst
currency. for example, in [20] it is shown that any transition system can be transformed
into a bisimilar petri net.
given a petri net, one can apply veriﬁcation and performance analysis techni-
ques. veriﬁcation is concerned with the correctness of a system or process. veriﬁca-
tion techniques may be used to ﬁnd deadlocks, livelocks, and other anomalies. it is also
possible to deﬁne desirable properties in some temporal logic and then check whether
the model has these properties. performance analysis focuses on ﬂow times, waiting
times, utilization, and service levels. typically, three dimensions of performance are
identiﬁed: time, cost and quality. for each of these performance dimensions different
key performance indicators (kpis) can be deﬁned. simulation, queueing models, or
markov models can be used to analyze systems with respect to such kpis.
mainstream analysis techniques do notexploit the structure of the model. for ex-
ample, veriﬁcation techniques may try to exhaustively traverse the state space and si-
mulation approaches randomly sample behavior independent of the model’s structure.
one of the key advantages of using petri nets is that knowledge about the structure can
be exploited during analysis [16]. the marking equation can be used to rule out mar-
kings that cannot be reachable [37, 19]. siphons andtraps can be used to reason about
deadlocks [21, 22]. place and transition invariants are used to identify properties that
are preserved because of the net’s structure [27, 32, 31, 18]. reduction rules can be used
to make problems smaller while guaranteeing the same outcome [13, 14, 22, 46, 41].
free-choice nets [15, 22, 39, 42], petri nets without conﬂicting splits and joins [26],
andmarked graphs [32] are well-known subclasses of petri nets. these subclasses can
be identiﬁed based on their structure and often analysis becomes easier, e.g., one can
decide whether a free-choice net is live and bounded in polynomial time [22]. perfor-
mance analysis may also beneﬁt from structural theory [11, 17], e.g., one can compute
performance bounds for marked graphs and free-choice nets.
petri nets representing workﬂows or other types of business processes can also be-
neﬁt from knowledge about the structure of the model. consider for example the class
ofworkﬂow nets (wf-nets) and the corresponding soundness notion [1]. a wf-net is
a petri net with a dedicated source place where the process starts and a dedicated sink
place where the process ends. moreover, all nodes are on a path from source to sink. a
wf-net is sound if it is always possible to terminate and there are no dead parts in the
model. soundness can be checked in polynomial time for several subclasses, including
free-choice wf-nets [7, 40].
the examples above show that structure theory allows for the identiﬁcation of petri
nets whose structure strongly inﬂuences their behavior. moreover, structure theory can
also be used to compute bounds or shown the (im)possibility of particular behaviors.
structure theory developed over the last ﬁfty years with a strong focus on model-
based analysis [16]. however, the spectacular growth of data is rapidly changing the
way we analyze behavior . rather than analyzing modeled behavior, we can now analyze
theactual behavior of processes and systems!
data are collected about anything, at any time, and at any place. it has become pos-
sible to record, derive, and analyze events at an unprecedented scale. events may take
place inside a machine (e.g., an x-ray machine or baggage handling system), inside an
enterprise information system (e.g., an order placed by a customer or the submission ofstructure theory in a dynamic data-driven world 3
a tax declaration), inside a hospital (e.g., the analysis of a blood sample), inside a social
network (e.g., exchanging e-mails or twitter messages), inside a transportation system
(e.g., checking in, buying a ticket, or passing through a toll booth), etc. [5]. events
may be “life events”, “machine events”, or “organization events”. the term internet of
events (ioe), coined in [4], includes (1) the internet of content (traditional web pages,
articles, encyclopedia like wikipedia, youtube, e-books, newsfeeds, etc.), (2) the inter-
net of people (all data related to social interaction, including e-mail, facebook, twitter,
forums, linkedin, etc.), (3) the internet of things (physical objects connected to the
network), and (4) the internet of locations (data that have a geographical or geospa-
tial dimension, e.g., generated by smartphones and cars). the ioe provides a new and
extremely valuable source of information for analyzing processes and systems.
the abundance of event data triggers the question: do we need structure theory in
this dynamic data-driven world? we believe that, more than ever, there is a need to use
and develop structure theory. this extended abstract only provides a few pointers in this
direction. however, structure theory is already used in areas such as business process
management (bpm) and process mining. moreover, in the era of big data, there is a
need to analyze processes efﬁciently. this can only be done by exploiting the structure
of process models.
2 process mining and business process management
developments in business process management (bpm) over the last two decades have
resulted in a well-established set of principles, methods and tools that combine kno-
wledge from information technology, management sciences and industrial engineering
for the purpose of improving business processes [3, 24, 45]. until recently, mainstream
bpm approaches were predominantly model-driven without considering the “evidence”
hidden in the data [3]. however, this changed dramatically with the uptake of process
mining .
process mining aims to exploit event data in a meaningful way , for example, to
provide insights, identify bottlenecks, anticipate problems, record policy violations, re-
commend counter-measures, and streamline processes [5].
the interest in process mining is reﬂected by the growing number of commercial
process mining tools available today. there are over 25 commercial products suppor-
ting process mining (celonis, disco, minit, myinvenio, processgold, qpr, etc.). all
support process discovery and can be used to improve compliance and performance
problems. for example, without any modeling, it is possible to learn process models
clearly showing the main bottlenecks and deviating behaviors.
starting point for any process mining effort is a collection of events commonly
referred to as an event log (although events can also be stored in a database). each event
is characterized by:
– acase (also called process instance ), e.g., an order number, a patient id, or a busi-
ness trip,
– an activity , e.g., “submit form” or “make decision”,
– atimestamp , e.g., “2017-06-30t09:56:30+00:00”,4 wil m.p. van der aalst
– additional (optional) attributes such as the resource executing the corresponding
event, the type of event (e.g., start, complete, schedule, abort), the location of the
event, or the costs of an event.
the lion’s share of process mining research focused on the discovery of process
models from event data [5]. the process model should be able to capture causalities,
choices, concurrency, and loops. process discovery is a notoriously difﬁcult problem
because event logs are often far from complete and there are at least four competing
quality dimensions: (1) ﬁtness , (2)simplicity , (3)precision , and (4) generalization . most
discovery algorithms described in the literature (e.g., the -algorithm [8], the region-
based approaches [12, 38, 44], and the inductive mining approaches [28, 29, 30]) pro-
duce formal models having clear semantics. all of these approaches use petri nets as a
representation or the results they return can easily be converted into petri nets [5].
we strongly believe that the communities working on bpm and process mining can
beneﬁt more from structure theory. moreover, we also believe that process mining pro-
vides novel and exciting challenges for people working on structure theory. given the
developments sketched before, it is important to use the abundantly available data. pu-
rely model-driven analysis only makes sense when designing a completely new system
of process.
in the remainder, we brieﬂy sketch two examples where structure theory could play
a more prominent role. in this extended abstract, we only highlight some of the oppor-
tunities and challenges without going into detail.
3 process discovery
the goal of process discovery is to learn a process model from event data. typically, an
event logl2b (a)is used as input. lis a non-empty multiset of traces over some
activity seta. aprocess model modadeﬁnes a set of traces over some activity set
a. different representations can be used to describe mod . one can use for example a
so-called accepting labeled petri net described by the triplet an = (n;m init;mnal)
wheren= (p;t;f;a;l )is a labeled petri net, minit2b(p)is the initial marking,
andmnal2b(p)is the ﬁnal marking. pis the set of places, tis the set of transitions,
andfis the ﬂow relation. transitions can have a label as deﬁned by labeling function
l2t6!a. transition t2thas a labell(t)2aift2dom (l). otherwise, tis
silent (i.e., its occurences are not recorded). any ﬁring sequence leading from minit
tomnal corresponds to an accepting trace 2a.1the set of all possible accepting
traces deﬁnes the behavior of an:mod ana.
a discovery algorithm can be described as a function disc2b (a)!p (a).
note thatp(a)denotes the powerset of traces over a, i.e., disc (l)a. ideally,
the discovered model allows for all traces observed, i.e., f2lg disc (l). ho-
wever, it is easy to deﬁne degenerate solutions like disc overt (l) =f2lgand
disc undert (l) =athat do not provide any insights. disc overt basically enumerates
1note that one needs to apply the labeling function to each transition occurrence in the ﬁring
sequence. transitions without a visible label are skipped.structure theory in a dynamic data-driven world 5
the event log and is likely to severely overﬁt the data. disc undert allows for any be-
havior involving activities a. discovery function disc should generalize over the input
data that consists of examples only.2at the same time, we may want to abstract from
infrequent behavior.
therepresentation of the discovered process model plays an important role in ba-
lancing between overﬁtting and underﬁtting. the so-called representational bias de-
ﬁnes the class of model that can be returned by the discovery algorithm. accepting
labeled petri nets form such a class. one can impose additional restrictions on the class
of accepting labeled petri nets. for example, one can limit the representational bias
to free-choice nets, wf-nets, or sound wf-nets. such constraints may aid the under-
standability of the resulting process models, e.g., free-choice nets separate choice and
synchronization and wf-nets have a clear begin and end.
discovery algorithms producing petri nets may return a model that is not a wf-
net or that is not sound. this makes the interpretation of the discovered process model
very difﬁcult. the miner [8] and heuristic miner [43] aim to return a sound wf-net,
but often do not. parts of the model may be disconnected and cases may get stuck in
the middle of the process. discovered petri nets having deadlocks and and livelocks
are difﬁcult to interpret: they should describe the observed behavior but confuse the
analyst instead. the deadlocking or livelocking paths do not contribute to the set of
accepting traces mod ana. region-based approaches [12, 38, 44] provide more
control over the result. however, without special provisions the set of accepting traces
is ill-deﬁned or hard to interpret. the family inductive mining approaches [28, 29, 30])
produce process trees which form a subclass of sound wf-nets. however, the output
of these techniques is limited to process trees: a small and very particular subclass of
process models.
we would like to discover process models with a conﬁgurable representational bias
and therefore see many opportunities for structure theory . the representational bias,
i.e., the class of models that can be discovered, should not be accidental. the class
should be deﬁned based on desirable (1) structural properties and (2) behavioral pro-
perties. structural properties include possible constraints like:
– there is one source place and one sink place marking the start and completion of a
case (i.e., a wf-net) [1, 7].
– there should be no mixtures of choice and synchronization (i.e., the net is free-
choice) [22].
– splits and joins should match (i.e., there are no pt- and pt-handles) [26].
– the sort-circuited petri net should have an s-cover and/or a t-cover [22].
– places cannot be a split and a join at the same time (for any p2p:jpj 1or
jpj 1).
– places have at most kinputs and outputs for any p2p:jpj+jpjk.
– etc.
behavioral properties include [7]:
2loops can only be unfolded a ﬁnite number of times in the event log. moreover, in case of
concurrency, one cannot expect to see all interleavings in the log.6 wil m.p. van der aalst
– soundness: there are no dead parts and it is always possible to reach the ﬁnal mar-
king and when it is reached the rest of the net is empty.
– generalized soundness: the same as soundness but with any number of tokens in
the source place.
– relaxed soundness: there is at least one execution that ends up in the ﬁnal marking.
– deadlock free: the only reachable dead marking is the ﬁnal marking.
– etc.
as shown in [2, 40, 7] there are interesting relations between structure and behavior.
these are key to limit the search space to the desired class of models. it is not very
effective to generate models ﬁrst and subsequently check whether they match the desi-
red representational bias. therefore, structural techniques are needed to limit the search
space during discovery.
4 conformance checking
after discussing the (possible) role of structure theory in control-ﬂow discovery, we
now look at the situation in which both a process model and an event log are given.
the model may have been constructed by hand or may have been discovered. moreo-
ver, the model may be normative or descriptive. conformance checking relates events
in the event log to activities in the process model and compares both. the goal is to
ﬁnd commonalities and discrepancies between the modeled behavior and the observed
behavior.
for conformance checking an event log l2b(a)and a process model moda
are used as input. here we assume that process model mod was speciﬁed in terms
of accepting labeled petri net an = (n;m init;mnal)withn= (p;t;f;a;l ).
the result of conformance checking is a diagnosis identifying and explaining discre-
pancies. hence, a conformance checking algorithm can be described as a function
conf2b (a)p (a)!dwheredis the set of possible diagnostics. for ex-
ample, we may compute the fraction of cases in the log that ﬁt the model perfectly.
formally: conf (l;mod ) =j[2lj2mod ]j
jlj(note thatlis a multiset and mod is a set).
simply counting the fraction of ﬁtting cases is useful, but does not provide detailed
diagnostics. moreover, one cannot distinguish between cases that deviate just a bit and
cases that are completely unrelated. therefore, more advanced techniques have been de-
veloped. the token-based conformance checking approach proposed in [36] counts the
number of missing and remaining tokens. state-of-the-art techniques in conformance
checking are often based on the notion of alignments [6, 9]. alignments relate events
in the log to transition occurrences in the model. an alignment is a sequence of moves .
there are three types of moves: synchronous moves (model and log agree), moves on
model only (the model needs to make a move that is not matched by the event log),
and moves on log only (an event in the log cannot be matched by the model). here
we cannot give the details. however, the construction of an optimal alignment can be
formulated as a shortest path problem in the state space obtained by taking the synchro-
nous products of both the model and log. this shortest path problem greatly beneﬁts
from the marking equation which can be used to (1) prune the state-space by removingstructure theory in a dynamic data-driven world 7
paths that cannot lead to the ﬁnal marking and (2) to compute underestimates for the
remaining distance [6, 9]. this is a wonderful example of using structure theory in the
context of process mining.
apart from alignments there may be other opportunities for structure theory. if there
is a clear relation between structure and behavior, then there are opportunities to speed-
up conformance checking.
5 outlook
in this extended abstract, we positioned structure theory in the context of more data-
driven challenges. structure theory has been applied to veriﬁcation questions in busi-
ness process management (bpm). for example, the soundness notion for wf-nets can
be related to a variety of “structural ingredients”, e.g., by using properties speciﬁc for
free-choice wf-nets or by applying the marking equation to get initial diagnostics. ho-
wever, even more promising are the applications of structure theory in process mining .
we provided two example questions (process discovery and conformance checking)
where structure theory could play a prominent role. process discovery is probably the
most important and most visible intellectual challenge related to process mining. it is
far from trivial to construct a process model based on event logs that are incomplete
and noisy. new process mining approaches should reconsider the representational bias
to be used. however, this is only feasible for real-life event logs if the structure can
be related to behavior. alignments are a powerful tool to relate modeled and observed
behavior. however, computing optimal alignments requires solving large optimization
problems for every trace in the event log. fortunately, the marking equation can been
used to prune the search space and guide the search algorithms.
we hope that this extended abstract will encourage people working on structure
theory to consider the many interesting and challenging problems in process mining.
there are great opportunities for original research and a need to better cope with the
abundance of event data. clearly, it does not make sense to consider only models when
analyzing existing processes and systems. we should also take into account the data to
remain relevant for the stakeholders.
references
1. w.m.p. van der aalst. the application of petri nets to workﬂow management. the journal
of circuits, systems and computers , 8(1):21–66, 1998.
2. w.m.p. van der aalst. workﬂow veriﬁcation: finding control-flow errors using petri-net-
based techniques. in w.m.p. van der aalst, j. desel, and a. oberweis, editors, business
process management: models, techniques, and empirical studies , volume 1806 of lecture
notes in computer science , pages 161–183. springer-verlag, berlin, 2000.
3. w.m.p. van der aalst. business process management: a comprehensive survey. isrn
software engineering , pages 1–37, 2013. doi:10.1155/2013/507984.
4. w.m.p. van der aalst. data scientist: the engineer of the future. in k. mertins, f. bena-
ben, r. poler, and j. bourrieres, editors, proceedings of the i-esa conference , volume 7 of
enterprise interoperability , pages 13–28. springer-verlag, berlin, 2014.8 wil m.p. van der aalst
5. w.m.p. van der aalst. process mining: data science in action . springer-verlag, berlin,
2016.
6. w.m.p. van der aalst, a. adriansyah, and b. van dongen. replaying history on process
models for conformance checking and performance analysis. wires data mining and
knowledge discovery , 2(2):182–192, 2012.
7. w.m.p. van der aalst, k.m. van hee, a.h.m. ter hofstede, n. sidorova, h.m.w. verbeek,
m. v oorhoeve, and m.t. wynn. soundness of workﬂow nets: classiﬁcation, decidability,
and analysis. formal aspects of computing , 23(3):333–363, 2011.
8. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: discovering
process models from event logs. ieee transactions on knowledge and data engineering ,
16(9):1128–1142, 2004.
9. a. adriansyah, b. van dongen, and w.m.p. van der aalst. conformance checking using
cost-based fitness analysis. in c.h. chi and p. johnson, editors, ieee international en-
terprise computing conference (edoc 2011) , pages 55–64. ieee computer society, 2011.
10. e. badouel, l. bernardinello, and p. darondeau. petri net synthesis . texts in theoretical
computer science. an eatcs series. springer-verlag, berlin, 2015.
11. g. balbo and m. silva, editors. performance models for discrete event systems with syn-
chronisations: formalisms and analysis techniques , zaragoza, sept 1998. kronos.
12. r. bergenthum, j. desel, r. lorenz, and s. mauser. process mining based on regions of
languages. in g. alonso, p. dadam, and m. rosemann, editors, international conference
on business process management (bpm 2007) , volume 4714 of lecture notes in computer
science , pages 375–383. springer-verlag, berlin, 2007.
13. g. berthelot. checking properties of nets using transformations. in g. rozenberg, editor,
advances in petri nets 1985 , volume 222 of lecture notes in computer science , pages 19–
40. springer-verlag, berlin, 1986.
14. g. berthelot. transformations and decompositions of nets. in w. brauer, w. reisig,
and g. rozenberg, editors, advances in petri nets 1986 part i: petri nets, central models
and their properties , volume 254 of lecture notes in computer science , pages 360–376.
springer-verlag, berlin, 1987.
15. e. best. structure theory of petri nets: the free choice hiatus. in w. brauer, w. reisig,
and g. rozenberg, editors, advances in petri nets 1986 part i: petri nets, central models
and their properties , volume 254 of lecture notes in computer science , pages 168–206.
springer-verlag, berlin, 1987.
16. e. best and h. wimmel. structure theory of petri nets. in k. jensen, w.m.p. van der aalst,
g. balbo, m. koutny, and k. wolf, editors, transactions on petri nets and other models
of concurrency (topnoc vii) , volume 7480 of lecture notes in computer science , pages
162–224. springer-verlag, berlin, 2013.
17. j. campos, g. chiola, and m. silva. properties and performance bounds for closed free
choice synchronized monoclass queueing networks. ieee transactions on automatic cont-
rol, 36(12):1368–1381, 1991.
18. j.m. colom and m. silva. convex geometry and semiﬂows in p/t nets, a comparative study
of algorithms for computation of minimal p-semiﬂows. in g. rozenberg, editor, advances in
petri nets 1990 , volume 483 of lecture notes in computer science , pages 79–112. springer-
verlag, berlin, 1990.
19. j.m. colom and m. silva. improving the linearly based characterization of p/t nets. in
g. rozenberg, editor, advances in petri nets 1990 , volume 483 of lecture notes in computer
science , pages 113–146. springer-verlag, berlin, 1990.
20. j. cortadella, m. kishinevsky, l. lavagno, and a. yakovlev. deriving petri nets from finite
transition systems. ieee transactions on computers , 47(8):859–882, august 1998.structure theory in a dynamic data-driven world 9
21. j. desel. basic linear algebraic techniques of place/transition nets. in w. reisig and
g. rozenberg, editors, lectures on petri nets i: basic models , volume 1491 of lecture notes
in computer science , pages 257–308. springer-verlag, berlin, 1998.
22. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts in theore-
tical computer science . cambridge university press, cambridge, uk, 1995.
23. j. desel, w. reisig, and g. rozenberg, editors. lectures on concurrency and petri nets ,
volume 3098 of lecture notes in computer science . springer-verlag, berlin, 2004.
24. m. dumas, m. la rosa, j. mendling, and h. reijers. fundamentals of business process
management . springer-verlag, berlin, 2013.
25. a. ehrenfeucht and g. rozenberg. partial (set) 2-structures - part 1 and part 2. acta
informatica , 27(4):315–368, 1989.
26. j. esparza and m. silva. circuits, handles, bridges and nets. in g. rozenberg, editor,
advances in petri nets 1990 , volume 483 of lecture notes in computer science , pages 210–
242. springer-verlag, berlin, 1990.
27. k. jensen. coloured petri nets and the invariant-method. theoretical computer science ,
14:317–336, 1981.
28. s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering block-structured process
models from event logs: a constructive approach. in j.m. colom and j. desel, editors,
applications and theory of petri nets 2013 , volume 7927 of lecture notes in computer
science , pages 311–329. springer-verlag, berlin, 2013.
29. s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering block-structured pro-
cess models from event logs containing infrequent behaviour. in n. lohmann, m. song,
and p. wohed, editors, business process management workshops, international workshop
on business process intelligence (bpi 2013) , volume 171 of lecture notes in business in-
formation processing , pages 66–78. springer-verlag, berlin, 2014.
30. s.j.j. leemans, d. fahland, and w.m.p. van der aalst. scalable process discovery and
conformance checking. software and systems modeling , pages ??–??, 2016.
31. j. martinez and m. silva. a simple and fast algorithm to obtain all invariants of a genera-
lised petri net. in c. girault and w. reisig, editors, application and theory of petri nets :
selected papers from the ﬁrst and the second european workshop , volume 52 of informatik
fachberichte , pages 301–310, berlin, 1982. springer-verlag, berlin.
32. t. murata. petri nets: properties, analysis and applications. proceedings of the ieee ,
77(4):541–580, april 1989.
33. omg. business process model and notation (bpmn). object management group,
formal/2011-01-03, 2011.
34. w. reisig. petri nets: modeling techniques, analysis, methods, case studies . springer-
verlag, berlin, 2013.
35. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models , volume 1491
oflecture notes in computer science . springer-verlag, berlin, 1998.
36. a. rozinat and w.m.p. van der aalst. conformance checking of processes based on moni-
toring real behavior. information systems , 33(1):64–95, 2008.
37. m. silva, e. teruel, and j.m. colom. linear algebraic and linear programming techniques
for the analysis of place/transition net systems. in w. reisig and g. rozenberg, editors,
lectures on petri nets i: basic models , volume 1491 of lecture notes in computer science ,
pages 309–373. springer-verlag, berlin, 1998.
38. m. sole and j. carmona. process mining from a basis of regions. in j. lilius and w. pen-
czek, editors, applications and theory of petri nets 2010 , volume 6128 of lecture notes in
computer science , pages 226–245. springer-verlag, berlin, 2010.
39. e. teruel and m. silva. liveness and home states in equal conﬂict systems. in m. ajmone
marsan, editor, application and theory of petri nets 1993 , volume 691 of lecture notes in
computer science , pages 415–432. springer-verlag, berlin, 1993.10 wil m.p. van der aalst
40. h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing workﬂow processes
using woﬂan. the computer journal , 44(4):246–279, 2001.
41. h.m.w. verbeek, m.t. wynn, w.m.p. van der aalst, and a.h.m. ter hofstede. reduction
rules for reset/inhibitor nets. journal of computer and system sciences , 76(2):125–143,
2010.
42. j. wehler. simpliﬁed proof of the blocking theorem for free-choice petri nets. journal of
computer and system science , 76(7):532–537, 2010.
43. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models from event-
based data using little thumb. integrated computer-aided engineering , 10(2):151–162,
2003.
44. j.m.e.m. van der werf, b.f. van dongen, c.a.j. hurkens, and a. serebrenik. process dis-
covery using integer linear programming. fundamenta informaticae , 94:387–412, 2010.
45. m. weske. business process management: concepts, languages, architectures . springer-
verlag, berlin, 2007.
46. m.t. wynn, h.m.w. verbeek, w.m.p. van der aalst, a.h.m. ter hofstede, and d. edmond.
soundness-preserving reduction rules for reset workﬂow nets. information sciences ,
179(6):769–790, 2009.