congurable services in the cloud:
supporting variability while enabling
cross-organizational process mining
wil m.p. van der aalst
eindhoven university of technology, the netherlands
w.m.p.v.d.aalst@tue.nl
abstract. the software as a service (saas) paradigm is particularly
interesting in situations where many organizations need to support simi-
lar processes. for example, municipalities, courts, rental agencies, etc. all
need to support highly similar processes. however, despite these similari-
ties, there is also the need to allow for local variations in a controlled man-
ner. therefore, cloud infrastructures should provide congurable services
such that products and processes can be customized while sharing com-
monalities. congurable and executable process models are essential for
realizing such infrastructures. this will nally transform reference mod-
els from \paper tigers" (reference modeling  a la sap, aris, etc.) into
an \executable reality". moreover, \congurable services in the cloud"
enable cross-organizational process mining . this way, organizations can
learn from each other and improve their processes.
keywords: congurable process models, process mining, business pro-
cess management, yawl, prom
1 motivation
cloud computing is not a new idea. in 1961, in a speech given to celebrate mit's
centennial, john mccarthy stated \if computers of the kind i have advocated
become the computers of the future, then computing may someday be organized
as a public utility just as the telephone system is a public utility. the computer
utility could become the basis of a new and important industry." in 1961, even
arpanet, the predecessor internet, did not exist and it is remarkable that
people like john mccarthy, who received the turing award in 1971 for his work
on ai, could predict that computing would become a utility as is signied today
by gmail, google apps. salesforce.com, amazon ec2/s3, etc. cloud comput-
ingis typically dened as internet-based computing, whereby shared resources,
software, and information are provided on demand, like the electricity grid. the
term is closely related to the notion of software as a service (saas). saas refers
to a software distribution model in which applications are hosted by a vendor or
service provider and made available to customers over a network, typically the
internet. the terms saas and cloud computing are strongly related. people talk-
ing about cloud computing tend to emphasize the computing infrastructure andcombine this with a broad vision on computing as a utility. the term saas tends
to emphasize the role of services that are provided and consumed. saas service
providers typically oer a subscription model where service consumers do not pay
for software but only pay for the actual use of software. a well-known example of
a saas provider that is using a cloud infrastructure is salesforce.com. this com-
pany allows organizations to outsource the it support of standard functionality
such as sales, customer relationship management, etc. without worrying about
scalability and maintenance. another example is the conference management
system easychair that is currently probably the most commonly used system to
host conferences and to manage the reviewing of scientic papers. to organize a
conference, there is no need to install any software as everything is hosted and
managed centrally.
cloud computing and saas have in common that multiple organizations, of-
ten called tenants , are sharing the same infrastructure/software. this provides
many advantages: lower costs (only pay for actual use), reduced setup times,
reduced maintenance and management eorts, etc. however, it also creates the
challenge of dealing with variability across organizations . it is not realistic to
enforce \one size ts all" as tenants may have dierent needs and preferences.
in this paper, we focus on the process perspective and suggest using so-called
congurable process models to support variability [1, 3, 14{17, 23, 24]. the basic
idea of congurable process models is that one model does not represent a single
process, but a family of processes. by conguring a congurable process model
one obtains a concrete process model that can be executed within an organiza-
tion. congurability is essential for the success of saas software. ideally, tenants
are provided with a multitude of options and variations using a single code base,
such that it is possible for each tenant to have a unique software conguration.
related to variability, there are other concerns raised by multi-tenancy. for ex-
ample, how to ensure correctness of all possible congurations? it is not sucient
to guarantee the correct operation of a single process. instead one needs to ensure
the correctness of a process family and all of its congurations. another concern
is security; how to make sure that data and processes of dierent tenants are
isolated while using the same code base and infrastructure?
besides these challenges, there are also many opportunities. besides the ob-
vious \economies of scale" achievable from consolidating it resources, there is
the possibility to carefully analyze software usage and process executions across
dierent organizations. in the situation where customized enterprise information
systems are running inside organizations, the software vendor has little insight
into the actual use of its software. moreover, it is impossible to analyze dierences
between organizations. in this paper, we suggest using cross-organizational pro-
cess mining using multi-tenancy environments provided through saas and cloud
computing. the goal of process mining is to use event data to extract process-
related information, e.g., to automatically discover a process model by observing
events recorded by some enterprise system [5, 4, 6, 9, 11, 12, 18, 26]. where data
mining focuses on relatively simple tasks such as classication (e.g., decision
trees), clustering, and regression that aim at analyzing data, process miningprocesses
organization 1m1 e1is1
processes
organization 2m2 e2is2
processes
organization nmn enisn
...
processes
tenant1c1eis-saas
processes
tenant 2c2processes
tenant ncn...cm
(b) new situation using saas technology based on configurable services(a) traditional situation with, per process, one model, and a dedicated  system and 
database for each organizationfig. 1. the traditional situation where each organization has it's own it infrastructure
(a) and the situation where each organization is a tenant of a \shared congurable
cloud" (b). (is = information system, m = process model, cm = congurable process
model, e = event log, and c = conguration.)
focuses on operational processes , i.e., identifying causal dependencies between
activities, visualizing bottlenecks inside the discovered process, measuring con-
formance, detecting deviations, predicting cycle times, etc.
we will use figure 1 to illustrate the above. figure 1(a) shows the tra-
ditional situation where each organization uses its own infrastructure, process
models (m1;m2;:::m n), event logs ( e1;e2;:::e n), and information system
(is1;is 2;:::is n). note that we assume that organizations are using a process-
aware information system (pais) [10], i.e., a system that is driven by some
process model and that is recording events. note that workow management
(wfm) systems, business process management (bpm) systems, enterprise re-
source planning (erp) systems, customer relationship management (crm)
systems, etc. are all examples of such systems. some of these systems are driven
by explicit graphical process models and record events in a structured manner,
while others are supporting processes in a more implicit manner and some ef-
forts are needed to extract event logs suitable for analysis. in any case, processes
are being supported and it is possible to extract the information required for
process mining. each organization has complete freedom to change processesprovided that they have the resources needed to re-congure or replace parts of
the information system.
figure 1(b) shows the situation where the norganizations have become ten-
ants of a shared saas system. in this paper, we propose using one congurable
model (cm) per service and each tenant uses a particular conguration for this
service (c1;c2;:::c n).1the congurable model needs to be able to support
meaningful variations of the same process required by the dierent organiza-
tions. in the new situation events are recorded in a unied manner. this allows
for comparing processes within dierent organizations. we have identied two
possible use cases for cross-organizational process mining .
{the service provider can use the event logs of all tenants to improve its
services and provide guidance to tenants when conguring their processes.
note that the focus can be on the software or on the processes supported by
the software. for example, the service provider may note that there are situ-
ations where the system has poor response times or even fails. using process
mining it is possible to identify possible causes for such problems. moreover,
the usability of the system can be analyzed, e.g., measuring the time to com-
plete a task or the number of retries. however, the service provider can also
analyze dierences in the processes supported by these systems, e.g., com-
paring ow times of dierent organizations. these can be used to give advice
to individual organizations. note that data privacy is an important factor.
however, the service provider can do many types of analysis without looking
into sensitive data, e.g., the identities of individual workers or customers are
irrelevant for most analysis questions and no information about one tenant
is shared with other tenants.
{another use case is where multiple comparable organizations wish to share
information . in this case, cross-organizational process mining is used to
benchmark dierent organizations and dierences in performance are an-
alyzed. this is of course only possible in a non-competitive environment,
e.g., dierent branches of some multinational organization, franchises, mu-
nicipalities, courts, etc. the goal is to let organizations learn from each other
and establish proven best practices. of course privacy issues may again com-
plicate such analysis, however, it may be sucient to compare things at an
aggregate level or to anonymize the results.
the goal of this paper is to discuss the opportunities and challenges provided by
cloud computing and saas. in particular, we focus on the need for process cong-
uration and the opportunities provided by cross-organizational process mining.
this will be illustrated by a short description of the coselog (congurable
services for local governments) project. ten municipalities and two software
organizations are involved in this project. the goal of coselog is to develop
and analyze congurable services for local municipalities while using the saas
paradigm, process conguration, and process mining.
1we assume that any service is characterized by an interface that describes the infor-
mation exchanged. however, in this paper we focus on the process-related aspects of
a service. therefore, we will use the terms \service" and \process" interchangeably.before introducing the coselog project in section 4, we rst present our
ideas related to process conguration in the cloud (section 2) followed by an
introduction to cross-organizational process mining (section 3).
2 turning \paper tigers" into an \executable reality"
in this section we focus on congurable process models in a saas setting. these
enable service providers to support variability among dierent organizations in
a structured manner.
2.1 the need for congurable process models
although large organizations support their processes using a wide variety of
process-aware information systems (paiss) [10], the majority of business pro-
cesses are still not directly driven by explicit process models. despite the success
of business process management (bpm) thinking in organizations, workow
management (wfm) systems | today often referred to as bpm systems | are
not widely used. one of the main problems of bpm technology is the \lack of con-
tent", that is, providing just a generic infrastructure to build process-aware infor-
mation systems is insucient as organizations need to support specic processes.
organizations want to have \out-of-the-box" support for standard processes and
are only willing to design and develop system support for organization-specic
processes. yet most bpm systems expect users to model basic processes from
scratch. enterprise resource planning (erp) systems such as sap and oracle,
on the other hand, focus on the support of these common processes. although
all main erp systems have workow engines comparable to the engines of bpm
systems, the majority of processes are not supported by software that is di-
rectly driven by process models. for example, most of sap's functionality is not
grounded in their workow component, but hard-coded in application software.
erp vendors try to capture \best practices" in dedicated applications designed
for a particular purpose. such systems can be congured by setting parameters.
system conguration can be a time consuming and complex process. moreover,
conguration parameters are exposed as \switches in the application software",
thus making it dicult to see the intricate dependencies among certain settings.
a model-driven process-oriented approach toward supporting business pro-
cesses has all kinds of benets ranging from improved analysis possibilities (ver-
ication, simulation, etc.) and better insights, to maintainability and ability to
rapidly develop organization-specic solutions. although obvious, this approach
has not been widely adopted thus far, probably because bpm vendors have failed
to provide content and erp vendors suer from the \law of the handicap of
a head start". erp vendors manage to eectively build data-centric solutions
to support particular tasks. however, the complexity and large installed base of
their products makes it impossible to refactor their software and make it truly
process-centric.based on the limitations of existing bpm and erp systems, we propose
to use congurable process models . a congurable process model represents a
family of process models , that is, a model that through conguration can be
customized for a particular setting. conguration is achieved by hiding (i. e.,
bypassing) or blocking (i. e., inhibiting) certain fragments of the congurable
process model [14]. in this way, the desired behavior is selected. from the view-
point of generic bpm software, congurable process models can be seen as a
mechanism to add content to these systems. by developing comprehensive col-
lections of congurable models, particular domains can be supported. from the
viewpoint of erp software, congurable process models can be seen as a means
to make these systems more process-centric, although in the latter case quite
some refactoring is needed as processes are hidden in table structures and ap-
plication code.
various congurable languages have been proposed as extensions of existing
languages (e. g., c-epcs [24], c-iepcs, c-wf-nets [1], c-sap, c-bpel) but
few are actually supported by enactment software (e. g., c-yawl [16]). in this
paper, we are interested in the latter class of languages, which, unlike traditional
reference models [8, 7, 13], are executable after they have been congured. in this
paper, we focus on congurable services oered over the internet. therefore, the
models need to be executable to be of any use.
2.2 an example: c-yawl
as an example of a congurable language we briey describe c-yawl [16, 17].
yawl is a process modeling notation and workow environment based on petri
nets but extended with powerful features for cancelation, or-joins, etc. it has
been developed with the aim to provide a notation with formal semantics that
supports all desired workow patterns [19]. the yawl system is open-source
and supports the execution and work distribution of workows depicted in such
models even in production environments. thus, although originally developed
as a proof of concept, the yawl system can be used for practical applications
[19].
figure 2 depicts a simple yawl model for the process executed by munic-
ipalities when a man registers that he will become the father of a not-yet-born
child although he is not married to the mother [17]. in this model tasks are
depicted as rectangles while circles represent conditions like the initial and nal
condition in this example. conditions mark the states between tasks but can be
omitted for simplicity (like in the example). composite tasks enable the hier-
archical specication of sub-processes while split and join types of tasks allow
the specication of how the process should proceed in case a task splits or joins
the process's control ow. for this, yawl distinguishes an xor-split (as in the
example in figure 2) allowing the triggering of only one of the subsequent paths,
an and-split requiring the triggering of all subsequent paths, and an or-split
requiring the triggering of at least one subsequent path but allowing also for
path combinations. similarly, a task with an xor-join can be executed as soon
as one of its incoming paths is triggered, an and-join requires that all incomingarcs are triggered, and a task with an or-join allows for the execution of the
task as soon as no further incoming paths can potentially be triggered at any
future point in time (see [19] for further details).
condition
input condition
output conditionatomic task
and-split task xor-split task composite task or-split taskand-join task xor-join task or-join taskport
configurations
blockedhidden
fig. 2. a yawl process model for acknowledging an unborn child [17]. the input port
ofcheck permission is congured as hidden and one output port is blocked.
this routing behavior can be restricted by process conguration . for this
purpose, input ports are assigned to each task depicting how the task can be
triggered and output ports are assigned to depict which paths can be triggered
after the completion of the task. a task with an xor-join can be triggered via
each of its incoming paths. thus, it has a dedicated input port for each of these
paths. tasks with and-joins and or-joins can only be executed if all paths
(that can potentially be triggered) are triggered, i.e. there is only one way these
tasks can be triggered and thus there is only one input port. a task with an
xor-split has an output port for each subsequent path as each of these paths
can be triggered individually while a task with an and-split has only one output
port as all subsequent tasks must always be triggered. a task with an or-split
can trigger a subset of the outgoing paths, i.e. in this case a separate output
port exists for each of these combinations.
the process ow can be restricted at these ports. a blocked port prevents
the process ows through it, i.e. a blocked input port prevents the triggering of
the task through the port while a blocked output port prevents that the corre-
sponding output paths can be triggered. in the model in figure 2, we blocked
the output port from check for permission tono acknowledgement . thus, the
task check for permission must always be followed by the task decide choice of
name (under dutch law) as the path to the task no acknowledgement can no
longer be triggered. input ports can not only be blocked but also be congured
ashidden . similarly, the subsequent task can then not be triggered through this
port anymore. however, in this case the process ow is not completely blocked,
but only the execution of the corresponding task is skipped. the process exe-
cution continues afterwards. in figure 2 the input port of the task check for
permission is hidden. thus, the execution of this task is skipped which also ex-
plains why we blocked one of the task's output ports: the conguration resultsin skipping the check. hence, it can no longer fail and the process must continue
normally. further details on congurable yawl can be found in [16, 19].
as we can observe from this example, the congurations of ports are often
not independent from each other and require extensive domain knowledge. in
[23] it is shown how domain knowledge can be taken into account and used to
drive the conguration process. in [1, 3] dierent techniques are provided for
ensuring the correctness of the resulting models.
2.3 challenges
there are many challenges related to process conguration. first of all, there
is a need to develop complete collections of high-quality congurable models .
often the ideas and the technology are in place, but the actual \content" is
missing or of very low quality (see for example the many errors in sap's well-
known reference model [21]). it is important to develop a sound methodology
to extract best practise models. process mining can help to nd out what the
actual processes are and how they perform. a second challenge is how to extract
a manageable congurable process from a set of concrete models . as shown in
[17] techniques from process mining can be adapted for this purpose. however,
the resulting models are rather spaghetti-like. in [20] another approach, more
related to ad-hoc change, is used. here a reference model is chosen that requires
the least number of edit operations. unfortunately, one needs to manually modify
the reference model to create a selected variant. finally, there are many issues
related to multi-tenancy, exibility and change. how to change a congurable
model used by many tenants? how to ensure privacy and isolation? how to
accommodate exceptional requests that do not t the congurable model?
3 cross-organizational process mining
this section rst provides a high-level overview of process mining techniques.
subsequently, we introduce the concept of cross-organizational process mining
and discuss the corresponding challenges.
3.1 process mining in one organization
more and more information about (business) processes is recorded by informa-
tion systems in the form of so-called \event logs" (e.g., transaction logs, audit
trails, databases, message logs). it systems are becoming more and more inter-
twined with the processes they support, resulting in an \explosion" of available
data that can be used for analysis purposes. cloud computing and saas will fuel
this development even more.
to illustrate the role that event logs can play, let us rst explain figure 3. we
assume the existence of a collection of information systems that are supporting
a \world" composed of business processes, people, organizations, etc. the event
data extracted from such systems are the starting point for process mining . noteinformation system(s)
current 
data“world”people
machinesorganizations
business 
processes documents
historic 
data
resources/
organizationdata/rulescontrol-flowde jure models
resources/
organizationdata/rulescontrol-flowde facto modelsprovenanceexplore
predict
recommend
detect
check
compare
promote
discover
enhance
diagnosecartography navigation auditingevent logs
(simulation) models“pre 
mortem”“post 
mortem”fig. 3. overview of various process mining activities.
that figure 3 distinguishes between current data and historic data . the former
refers to events of cases (i.e., process instances) that are still actively worked
on (\pre mortem"). the latter refers to events of completed cases, i.e., process
instances that cannot be inuenced anymore (\post mortem"). the historic data
(\post mortem") can be any collection of events where each event refers to an
instance (i.e., case), has a name (e.g., activity name), and has a timestamp.
the collection of event data is becoming more important. one the one hand,
more and more event data are available. on the other hand, organizations de-
pend on such data; not only for performance measurement, but also for auditing.
we use the term business process provenance to refer to the systematic collection
of the information needed to reconstruct what has actually happened. the term
signies that for most organizations it is vital that \history cannot be rewritten
or obscured". from an auditing point of view the systematic, reliable, and trust-worthy recording of events is essential. fortunately, cloud computing and saas
can assist in the systematic and unied collection of event data.
the lower part of figure 3 shows two types of models: de jure models are
normative models that describe a desired or required way of working while de
facto models aim to describe the actual reality with all of its intricacies (policy
violations, ineciencies, fraud, etc.). both types of models may cover one or more
perspectives and thus describe control-ow, time, data, organization, resource,
and/or cost aspects. for process mining one can focus on a particular perspective.
however, when the goal is to build simulation models, all factors inuencing
performance need to be taken into account (e.g., when measuring utilization
and response times, it is not possible to abstract from resources and focus on
control-ow only). models can also be based on a mixture of \de jure" and \de
facto" information. the key idea of process mining is to not simply rely on de
jure models that may have little to do with reality. therefore, the goal is to
shift more to \de facto models"; this will save time and increase the quality of
analysis results.
in figure 3 three main categories of activities have been identied: cartog-
raphy ,auditing , and navigation . the individual activities are briey described
below.
1.discover. the discovery of good process models from events logs - compa-
rable to geographic maps - remains challenging. process discovery techniques
can be used to discover process models (e.g., petri nets) from event logs [4,
5].
2.enhance. existing process models (either discovered or hand-made) need
to be related to events logs such that these models can be enhanced by
making them more faithful or by adding new perspectives based on event
data. by combining historic data and pre-existing models, these models can
be repaired (e.g., a path that is never taken is removed) or extended (e.g.,
adding time information extracted from logs).
3.diagnose. models (either de jure or de facto) need to be analyzed using
existing model-based analysis techniques, e.g., process models can be checked
for the absence of deadlocks or simulated to estimate cycle times. probably
the most widely used model-based analysis technique is simulation.
4.detect. for on-line auditing, de jure models need to be compared with
current data (events of running process instances) and deviations of such
partial cases should to be detected at runtime. by replaying the observed
events on a model, it is possible to do conformance checking while the process
is unfolding.
5.check. similarly, historic \post mortem" data can be cross-checked with
de jure models. for this conformance checking techniques are used that can
pinpoint deviations and quantify the level of compliance [25].
6.compare. de facto models can be compared with de jure models to see in
what way reality deviates from what was planned or expected.
7.promote. based on an analysis of the dierences between a de facto model
and a de jure model, it is possible to promote parts of the de facto model toa new de jure model. by promoting proven \best practises" to the de jure
model, existing processes can be improved. for example, a simulation model
may be improved and calibrated based on elements of a de facto model.
8.explore. the combination of event data and models can be used to explore
business processes. here new forms of interactive process visualization can
be used (visual analytics).
9.predict. by combining information about running cases with models (dis-
covered or hand-made), it is possible to make predictions about the future,
e.g., the remaining ow time and the probability of success. here techniques
such as simulation and regression analysis can be used.
10.recommend. the information used for predicting the future can also be
used to recommend suitable actions (e.g. to minimize costs or time). the
goal is to enable functionality similar to the guidance given by navigation
systems like tomtom, but now in the context of bpm.
3.2 example: control-flow discovery
it is impossible to give concrete examples for all process mining techniques re-
ferred to in figure 3. therefore, we only illustrate the rst activity, i.e., process
discovery. input for process discovery and any other process mining technique is
an event log. the event log typically contains information about events referring
to an activity and a case. the case (also named process instance ) is the \thing"
which is being handled, e.g., a customer order, a job application, an insurance
claim, a building permit, etc. the activity (also named task, operation, action,
or work-item) is some operation on the case. typically, events have a times-
tamp indicating the time of occurrence. moreover, when people are involved,
event logs will characteristically contain information on the person executing or
initiating the event, i.e., the performer . also any other data can be attached to
events. various process mining techniques depend on subsets of this information.
for example, techniques focusing on performance take timestamps into account,
techniques focusing on decision points take data attributes into account, tech-
niques focusing on the organizational perspective take performers into account.
figure 4 shows the minimal input required for applying the so-called algorithm
[5]. the left-hand side represents cases as sequences of activities, also referred to
a traces. every sequence corresponds to a case. for example for the rst case, a,
b,c, anddare executed. for the second case, the same activities are executed
butbandcare reversed. etc. the traces in figure 4 suggest that the process
always starts with aand always ends with d. in-between aanddeithereor
bandcare executed. the algorithm analyzes the log for particular patterns
and deduces the petri net model shown on the right-hand side of figure 4. note
that the petri net indicates that after aeither just eor bothbandcare
executed. activities bandcare put in parallel. activity deither waits for the
completion of eor needs to wait until both bandccomplete.
thealgorithm is able to identify all of the common control-ow patterns
(and/xor-split/join, loops, etc.) [5]. however, it has many limitations when
applied to real-life logs. fortunately, many more mature techniques exist [4, 18,ab
cd efig. 4. process discovered using the algorithm [5].
26]. thealgorithm also only uses a subset of the information available and is
restricted to the control-ow perspective.
d:exprwsplaatje41.dotbbb
14279
020_contr_betstuk
142801.000|14279|
030_1e_vastlegging
156601.000|14029|
220_afsluiten
134720.974|184|0.958|115|
050_adm_akkoord
200210.998|15086|
0.981|264|
eee
142790.975|194 |0.998|1516|
0.997|1597|
070_pv
165980.999|14014|
0.986|353|
0.980|251|080_contract_akkoord
42210.987|2290|
0.999|2973|
0.993|725|
180_verificatie
135891.000|11798|
0.973|179|
0.972|176|0.996|747|
0.981|253|
150_2e_vastlegging
133160.997|13316| 0.997|902|
1.000|12401|
1.000|13472|0.987|365|
0.996|1859|
0.992|635|
0.945|86|
0.948|92|0.996|1184|
fig. 5. discovered process for invoice payments in rws [4].
figure 5 shows an example of a real life process discovered through process
mining. it is the invoice payment process of one of the twelve provincial oces
of \rijkswaterstaat", the dutch national public works department, often abbre-
viated as \rws". the process was discovered based on the event logs of rws's
information system. the goal was to nd out what the real process was and use
this information to improve and streamline it. figure 5 shows a particular viewon the control-ow of the rws process. we also discovered models for other
perspectives such as the organizational perspective, the time perspective, etc.
see [4] for a detailed analysis. we have been applying process mining in over 100
organizations. typically, we see that processes are less structured than people
think. moreover, conformance checking typically reveals many deviations and
ineciencies.
3.3 process mining in multi-tenancy environments
thus far process mining research mainly focused on the analysis of a single
process typically residing in one organization. some authors have investigated
interactions between web services [2, 11, 22], however, the focus is always on a
single process. in a multi-tenancy environment provided by a cloud or saas in-
frastructure, there will be many variants of the same process running in parallel.
this creates many interesting challenges.
assume that there are ncongured processes p1;p2;:::;p nthat are all vari-
ants of some congurable model cm. each of these processes has a conguration
ckand a set of process instances (cases) ik(withk2 f1;2;:::ng). using con-
ventional techniques, one can derive a model for every variant, e.g., model mk
is derived from ikusing some process discovery algorithm. it is also possible to
derive a model based on all instances; model mis derived from i=s
kik.m
can be seen as the \least common multiple" of all variants. if no congurable
model is given and only the variants are given, then mcan serve as a starting
point for constructing cm.
the challenge is to compare the dierent process variants and their per-
formance. note that dierent processes may share the same conguration but
operate under dierent circumstances. for example, two tenants may use the
same conguration, but one has a only a few customers while the other has
many. each of the congured processes has a set of features . these features are
based on properties of the process model mk, properties of the conguration ck,
and performance related properties such as average ow times, average response
times, service levels, frequencies, etc. using clustering one can group process
variants into coherent clusters. cluster analysis or clustering is \the assignment
of a set of observations into subsets (called clusters) so that observations in
the same cluster are similar in some sense". using classication one tries to
explain one feature in terms of other features, e.g., processes with a particular
conguration tend to have a better performance. a common technique is deci-
sion tree learning. clustering is sometimes referred to as unsupervised learning
while classication is referred to as supervised learning. the large scale adoption
of multi-tenancy environments will enable machine learning techniques such as
clustering and classication. this way cross-organizational process mining comes
into reach.
cross-organizational process mining is an unexplored area. one of the reasons
is that this requires comparable event logs, i.e., events need to be recorded in a
consistent manner across multiple organizations. fortunately, this can easily be
achieved in saas and cloud infrastructures. even if data is collected in a uniedmanner across dierent organizations, there are still several challenges. first of
all, there is the concern that enough variants of the same process should be
available to enable learning. second, there is the problem of concept drift .2the
same process variant may operate under dierent circumstances. for example,
there may be seasonal eects aecting the features of a process. the same process
may have long ow times in december and short ow times in january due
to dierences in workload. this should be taken into account when comparing
variants. in fact, the analysis of concept drift in processes is related to cross-
organizational process mining. instead of comparing dierent processes operating
in the same time period, one can also compare dierent episodes of the same
process.
4 coselog project
in this section, we briey introduce the coselog project and present an example
showing that municipalities form an interesting application domain for the ideas
presented in this paper.
4.1 overview
since there are 430 municipalities in the netherlands and they are all providing
similar services and are executing similar processes, the use of saas technology
could potentially be very benecial for these local governments. the coselog
project was established to exploit this observation. the goal of the project is
to create a cloud infrastructure for municipalities . more precisely: we want to
transition from situation depicted in figure 1(a) to the situation depicted in
figure 1(b) in a prototypical setting involving several municipalities. such a
cloud infrastructure for municipalities would oer services for handling various
types of permits, taxes, certicates, and licences. although municipalities are
similar, their internal processes are typically dierent. within the constraints of
national laws and regulations, municipalities can dierentiate because of dier-
ences in size, demographics, problems, and policies. therefore, the cloud should
provide congurable services such that products and processes can be customized
while sharing a common infrastructure. the coselog project aims at the de-
velopment and analysis of such services using the results described in sections 2
and 3.
the following (end-)user organizations are participating in the coselog pro-
posal: pallas athena, d!mpact, and 10 dutch municipalities (bergeijk, bladel,
coevorden, eersel, emmen, gemert-bakel, hellendoorn, noordoostpolder, reusel
2in machine learning, concept drift means that the statistical properties of the target
variable, which the model is trying to predict, change over time in unforeseen ways.
this causes problems because the predictions become less accurate as time passes.
in the context of process mining one is not investigating a single variable but a
complete process model. this makes it more dicult to properly dene this notion. 
oknot ok
not okcitizen
confirm identify
determine if
authorisation
check for
permission
draw up ackn.document
hand over copy
archiv edocumentsdecide choiceof namerequest
acknowledgement
archiv eno
acknowledgemen t 
niet akkoord
akkoord
niet akkoord
akkoord
decide choice
of name (dutchcitizen
determinenationality
hand over copy
archivedocumentsdraw up ackn.certificatecheck forpermissionrequestacknowledgement
confirm identify
determine ifauthorisation
  
 decide choiceof namenoacknowledgement
archiveyesnoyesno
no
yes
yesno
yesnounmarriednot  ok
oknot  oklast name
mothercit izen
fir s t c hild of the
relat ion
decide choice
of name (underrequest
acknowledgement
both live in themunicipalityidentify
unmarriedboth parent s
presentmin. 1 person
present
contact livingmunicipality
no
acknowledgement
arc hiv edet ermine if
authorisation
draw up ackn.
document
hand over copy
process ackn.
at birthdeclaration
unmarried
check f orpermission 
yesnoyesno
no
yesyesno
no
yesunmarried
not  ok
oknot  okcit izen
decide choice
of name (forunmarriedrequest
acknowledgement
both liv e in the
municipality
last  name
motherc onfir m identify
draw up ackn.
document
infor m of
authorit y over
p rocess ackn.at  birt hhand over copyboth parentspresentfirst  child of  t herelat ion
decide choiceof name (underdet erminenationalitynoacknowledgementcontact living
municipality
check f or
permissiondetermine ifauthorisat iondeclarat ion
unmarried
arc hiv emin. 1 personpresentfig. 6. the process \acknowledgement of an unborn child" in four municipalities [17].de mierden, and zwolle). the project started in may 2010 and is supported by
the jacquard program www.jacquard.nl which aims to promote saas research.
municipalities provide an ideal setting for saas, congurable models, and
cross-organizational mining . in principle all 430 municipalities need to oer the
same services to their citizens, and need to manage similar collections of pro-
cesses. however, due to demographics and political choices, municipalities are
handling things dierently. sometimes these dierences are unintentional, how-
ever, often these dierences can be easily justied by the desired \couleur lo-
cale". hence, it is important to support variability. interestingly, municipalities
arenotin direct competition with one another. therefore, cross-organizational
process mining is not a threat and municipalities are eager to share informa-
tion and experiences and learn from each other. therefore, a widely used cloud
infrastructure for municipalities can help to establish best practices based on
evidence obtained through cross-organizational process mining.
4.2 example
in [17] we analyzed four of the most frequently executed processes in munic-
ipalities: (a) acknowledging an unborn child, (b) registering a newborn child,
(c) marriage, and (d) issuing a death certicate. any municipality has these
processes, however, as we found out, these processes are implemented and ex-
ecuted dierently among municipalities. in [17] we compared the processes of
four municipalities and the reference model provided by the nvvb (nederlandse
vereniging voor burgerzaken). for example, figure 6 shows four variants of the
process related to \acknowledging an unborn child". each of the four municipal-
ities is using a specic variant of the processes. moreover, the nvvb reference
model (not shown in figure 6) is yet another variant of the same process. based
on a detailed analysis of the dierences we derived a congurable process model ,
i.e., a model that captures all variants observed. by setting the conguration
parameters, one can reconstruct each of the original process models (and many
more). the study reported in [17] revealed that: (a) it is possible to construct
(or even generate) congurable process models for the core processes in munic-
ipalities, (b) municipalities use similar, but at the same time really dierent,
processes, and (c) the comparison of the same process in multiple municipalities
provides interesting insights and triggers valuable discussions.
figure 6 illustrates that it is a challenge to merge dierent models into one
congurable model. as shown in [17] the resulting congurable model tends to
be rather complex and dicult to manage. moreover, it is questionable whether
the models shown in figure 6 adequately reect the real processes. using process
mining, more realistic models can be discovered and compared across municipal-
ities. the coselog project will research these problems and, hopefully, provide
solutions.5 conclusions
in this paper, we discussed congurable services that run in a cloud/saas in-
frastructure where multiple organizations need support for variants of the same
process. we showed that supporting variability is one of the main challenges.
moreover, we discussed the potential of process mining techniques in such envi-
ronments. we believe that \congurable services in the cloud" enable a new kind
of process mining, coined \cross-organizational process mining" in this paper.
the coselog project, presented in section 4, aims to address the challenges
presented in this paper.
acknowledgments. the author would like to thank all the people that con-
tributed to the development of prom and (c-)yawl. special thanks go to flo-
rian gottschalk and marcello la rosa for their seminal work on process con-
guration and boudewijn van dongen and eric verbeek for driving the process
mining work at tu/e. we thank the jacquard program for their support and
joos buijs and jan vogelaar for their eorts within the coselog project.
references
1. w.m.p. van der aalst, m. dumas, f. gottschalk, a.h.m. ter hofstede, m. la
rosa, and j. mendling. preserving correctness during business process model
conguration. formal aspects of computing , 22(3):459{482, 2010.
2. w.m.p. van der aalst, m. dumas, c. ouyang, a. rozinat, and h.m.w. verbeek.
conformance checking of service behavior. acm transactions on internet tech-
nology , 8(3):29{59, 2008.
3. w.m.p. van der aalst, n. lohmann, m. la rosa, and j. xu. correctness ensuring
process conguration: an approach based on partner synthesis. in r. hull,
j. mendling, and s. tai, editors, business process management (bpm 2010) ,
lncs, vol. 6336, pages 95{111. springer-verlag, 2010.
4. w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b.f. van dongen, a.k.
alves de medeiros, m. song, and h.m.w. verbeek. business process mining: an
industrial application. information systems , 32(5):713{732, 2007.
5. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
6. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ow logs. in sixth international conference on extending database technology ,
pages 469{483, 1998.
7. j. becker, p. delfmann, and r. knackstedt. adaptive reference modeling: inte-
grating congurative and generic adaptation techniques for information models.
in j. becker and p. delfmann, editors, reference modeling: ecient information
systems design through reuse of information models , pages 27{58. springer, 2007.
8. t. curran and g. keller. sap r/3 business blueprint: understanding the busi-
ness process reference model . upper saddle river, 1997.
9. a. datta. automating the discovery of as-is business process models: proba-
bilistic and algorithmic approaches. information systems research , 9(3):275{301,
1998.10. m. dumas, w.m.p. van der aalst, and a.h.m. ter hofstede. process-aware infor-
mation systems: bridging people and software through process technology . wiley
& sons, 2005.
11. s. dustdar and r. gombotz. discovering web service workows using web
services interaction mining. international journal of business process integration
and management , 1(4):256{266, 2006.
12. d.r. ferreira and d. gillblad. discovering process models from unlabelled event
logs. in u. dayal, j. eder, j. koehler, and h. reijers, editors, bpm 2009, lncs,
vol. 5701, pages 143{158. springer-verlag, berlin, 2009.
13. p. fettke and p. loos. classication of reference models - a methodology and its
application. information systems and e-business management , 1(1):35{53, 2003.
14. f. gottschalk, w.m.p. van der aalst, and h.m. jansen-vullers. congurable pro-
cess models: a foundational approach. in j. becker and p. delfmann, editors,
reference modeling: ecient information systems design through reuse of in-
formation models , pages 59{78, springer, 2007.
15. f. gottschalk, w.m.p. van der aalst, and m.h. jansen-vullers. sap webflow
made congurable: unifying workow templates into a congurable model. in
g. alonso, p. dadam, and m. rosemann, editors, bpm 2007, lncs, vol. 4714,
pages 262{270. springer-verlag, 2007.
16. f. gottschalk, w.m.p. van der aalst, m.h jansen-vullers, and m. la rosa. con-
gurable workow models. international journal of cooperative information sys-
tems, 17(2):177{221, 2008.
17. f. gottschalk, t. wagemakers, m.h. jansen-vullers, w.m.p. van der aalst,
n. sidorova, and m. la rosa. congurable process models: experiences from
a municipality case study. in p. van eck, j. gordijn, , and r. wieringa, editors,
caise'09, lncs, vol. 5565, pages 486{500. springer-verlag, 2009.
18. c.w. g unther and w.m.p. van der aalst. fuzzy mining: adaptive process simpli-
cation based on multi-perspective metrics. in g. alonso, p. dadam, and m. rose-
mann, editors, bpm 2007, lncs, vol. 4714, pages 328{343. springer-verlag, 2007.
19. a. ter hofstede, w. van der aalst, m. adams, and n. russell. modern business
process automation: yawl and its support environment . springer-verlag, 2010.
20. c. li, m. reichert and a. wombacher. discovering reference models by mining
process variants using a heuristic approach. in u. dayal, j. eder, j. koehler, and
h. reijers, editors, bpm 2009, lncs, vol. 5701, pages 344{362. springer-verlag,
2009.
21. j. mendling, h.m.w. verbeek, b.f. van dongen, w.m.p. van der aalst, and
g. neumann. detection and prediction of errors in epcs of the sap reference
model. data and knowledge engineering , 64(1):312{329, 2008.
22. h.r. motahari nezhad, r. saint-paul, b.benatallah, and f. casati. deriving
protocol models from imperfect service conversation logs. ieee transactions
on knowledge and data engineering , 20(12):1683{1698, 2008.
23. m. la rosa, w.m.p. van der aalst, m. dumas, and a.h.m. ter hofstede.
questionnaire-based variability modeling for system conguration. software and
systems modeling , 8(2):251{274, 2009.
24. m. rosemann and w.m.p. van der aalst. a congurable reference modelling
language. information systems , 32(1):1{23, 2007.
25. a. rozinat and w.m.p. van der aalst. conformance checking of processes based
on monitoring real behavior. information systems , 33(1):64{95, 2008.
26. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.