ieee transactions on systems, man, and cybernetics—part c: applications and reviews 1
process mining applied to the test process of
wafer steppers in asml
a. rozinat, i.s.m. de jong, c.w. g¨ unther, and w.m.p. van der aalst
abstract—process mining techniques attempt to extract non-
trivial and usefulinformation from event logs. for example , there
are many process mining techniques to automatically discov er
a process model describing the causal dependencies between
activities. several successful case studies have been repo rted in
literature, all demonstrating the applicability of proces s mining.
however, these case studies refer to rather structured admi nis-
trative processes. in this paper, we investigate the applic ability of
process mining to less structured processes. we report on a c ase
study where the prom framework has been applied to the test
processes of asml (the leading manufacturer of wafer scanne rs
in the world). this case study provides many interesting ins ights.
on the one hand, process mining is also applicable to the less
structured processes of asml. on the other hand, the case stu dy
also shows the need for alternative mining approaches.
i. introduction
asml is the world’s leading manufacturer of chip-making
equipment and a key supplier to the chip industry. asml desig ns,
develops, integrates and services advanced systems to prod uce
semiconductors. in short, it makes the wafer scanners that p rint
the chips. these wafer scanners are used to manufacture semi -
conductors (e.g., processors in devices ranging from mobil e
phones ad mp3 players to desktop computers). wafer scanners
are complex machines consisting of many building blocks and
use a photographic process to image nanometric circuit patt erns
onto a silicon wafer, much like a camera prints an image on
ﬁlm. because of competition and fast innovation, the time-t o-
market is very important. there is an ongoing effort to reduc e the
line widths on silicon wafer to enhance the performance of th e
manufactured semi-conductors. every new generation of waf er
scanners is balancing on the border of what is technological ly
possible. as a result, the testing of manufactured wafer sca nners
is an important but also time-consuming process. every wafe r
scanner is tested in the factory of asml. when it passes all te sts,
the wafer scanner is disassembled and shipped to the custome r
where the system is re-assembled. at the customer’s site, th e
wafer scanner is tested again. clearly, testing is a time-co nsuming
process and takes several weeks at both sites. since time-to -
market is very important, asml is involved in an ongoing effo rt
to reduce the test period. to assist asml in these efforts, we
applied process mining techniques to their test processes. rather
than focusing on fault detection as, e.g., in [15], the subje ct of
study is here the test process itself.
the basic idea of process mining is to discover, monitor and
improverealprocesses (i.e., not assumed processes) by extracting
a. rozinat, c.w. g¨ unther, and w.m.p. van der aalst are with t he in-
formation systems group, eindhoven university of technolo gy, p.o. box
513, nl-5600 mb, eindhoven, the netherlands (email: a.rozi nat@tue.nl;
c.w.gunther@tue.nl; w.m.p.v.d.aalst@tue.nl).
i.s.m. de jong is with asml, p.o. box 324, nl-5500 ah, veldhov en,
the netherlands (email: ivo.de.jong@asml.com).knowledge from event logs. today many of the activities occu r-
ringinprocessesare either supported or monitored by infor mation
systems. consider for example erp, wfm, crm, scm, and
pdm systems to support a wide variety of business processes
while recording well-structured and detailed event logs. h owever,
also other operational processes or systems can be monitore d.
for example, we have applied process mining to complex x-ray
machines, high-end copiers, web services, careﬂows in hosp itals,
etc. all of these applications have in common that there is
a notion of a process and that the occurrences of activities
are recorded in so-called event logs . assuming that we are
able to log events, a wide range of process mining techniques
comes into reach. the basic idea of process mining is to learn
from observed executions of a process and can be used to (1)
discovernew models (e.g., constructing a petri net that is able to
reproduce the observed behavior), (2) check the conformance of
a model by checking whether the modeled behavior matches the
observed behavior, and (3) extendan existing model by projecting
information extracted from the logs onto some initial model (e.g.,
show bottlenecks in a process model by analyzing the event lo g).
all three types of analysis have in common that they assume th e
existence of some event log.
at any point in time, asml’s wafer scanners record events tha t
can easily be distributed over the internet. hence, any even t that
takes place during the test process can be recorded easily. t he
availabilityof theseeventlogs andthedesireof asmltoimp rove
the testing process triggered the case study reported in thi s paper.
using process discovery, we tried to answer the question “ho w
are the tests actually executed?”, i.e., based on the event l ogs we
automatically constructed process models showing the orde ring
and frequency of test activities. then, we compared them to t he
idealized reference model. finally, we used process mining to
answer the question “where is the most time spent in the test
process?”. in this paper, we show that recently developed pr ocess
mining techniques can be used to answer the questions stated
above. this is interesting since, so far, process mining has only
been applied to rather structured processes (e.g., adminis trative
processes supported through some information system [2]). for
the case study we used our prom framework1. prom is open
source and uses a plug-able architecture, e.g., developers can
add new process mining techniques by adding plug-ins withou t
spending any efforts on the loading and ﬁltering of event log s
and the visualization of the resulting models [1]. version 5 .0 of
prom provides 230 plug-ins. for example, there are more than
15 plug-ins to discover process models from event logs.
the remainder of this paper is organized as follows. section ii
reviews related work both in process mining and the test proc ess
optimization domains. next, the context of the case study is
described in more detail in section iii. section iv presents
1prom can be freely downloaded from http://prom.sf.net/ .2 ieee transactions on systems, man, and cybernetics—part c: applications and reviews
the results of this study, and concrete improvement actions for
the asml test process are proposed in section v. section vi
concludes the paper.
ii. relatedwork
in this section, we ﬁrst review related work on process minin g
and then review related work on test processes.
since the mid-nineties several groups have been working on
techniques for process mining [4], [5], [10], [12], [14], [2 5], i.e.,
discovering process models based on observed events. in [3] an
overview is given of the early work in this domain. the idea to
apply process mining in the context of workﬂow processes was
introduced in [5]. in parallel datta [12] looked at the disco very of
business process models. cook et al. investigated similar i ssues
in the context of software engineering processes [10]. herb st [19]
was one of the ﬁrst to tackle more complicated processes, e.g .,
processes containing duplicate tasks.
most of the classical approaches have problems dealing with
concurrency. the α-algorithm [4] is an example of a simple
technique that takes concurrency as a starting point. howev er, this
simple algorithm has problems dealing with complicated rou ting
constructs and noise (like most of the other approaches desc ribed
in literature). in [14] a more robust but less precise approa ch is
presented. heuristics [25] or genetic algorithms [13] have been
proposed to deal with issues such as noise.
process mining can be seen in the broader context of business
process intelligence (bpi) and business activity monitori ng
(bam). in [16], [24] a bpi toolset on top of hp’s process
manager is described. the bpi toolset includes a so-called “ bpi
process mining engine”. in [22] zur muehlen describes the pi sa
tool which can be used to extract performance metrics from
workﬂow logs. similar diagnostics are provided by the aris
process performance manager (ppm) [20]. it should be noted
that bpi tools typically do not allow for process discovery a nd
conformance checking, and offer relatively simple perform ance
analysis tools that depend on a correct a-priori process mod el.
after providing an overview of process mining literature,
we discuss related work on the improvement of test processes .
most test process optimization techniques are currently fo cused
on optimizing the test organization instead of the processe s
themselves. if the test process is optimized by technology- based
optimization techniques, then these techniques are either only
applicable in a single discipline or still very general. an e xample
of detailed mono-disciplinary optimization techniques is the use
of testcoverage measures [21] for software testing. these d etailed
measures are used to determine the coverage of a set of test ca ses
on the system under test. these methods are applied for small
software systems where high quality levels are important an d do
not scale very well for large software systems.
more general test process optimization techniques apply ri sk-
based test sequencing [6], [18] in combination with a certai n stop
criterion such that the test cases which cover the highest ri sk
(high level test cases) are executed ﬁrst. the disadvantage of this
approach is that these high level test cases are often inconc lusive
about the root cause of a failure. a lengthy diagnosis action
is required when these test cases fail. a sequencing algorit hm
which optimizes a test phase including diagnosis and ﬁxacti ons is
described in [9], [8], whereas the system test model which is used
models a test problem independent of the discipline. the cas estudy reported in this paper investigates the differences b etween
theactual,executedtestsequences andtheplanned testseq uences.
iii. casestudy
this section introduces the case study where process mining
was applied to the test process of asml’s wafer scanners.
after providing some background information (section iii- a),
we describe the test process of a wafer scanner in more detail
(section iii-b), and then look at the log data recorded durin g
these tests (section iii-c). the event logs serve as input fo r our
process mining techniques and the results of their analysis are
described in section iv.
a. asml’s wafer scanners
nowadays, semi-conductors can be found in many appliances
around us. mobile phones, mp3-players, television sets and
desktop computers contain processors and computer memory.
these semi-conductors are manufactured in twenty-plus ste ps,
called the semi-conductor manufacturing process. images o f a
transistor pattern are placed on a silicon wafer with typica l line
widths of 90 nm and less. this imaging process is repeated up
to 30 or more times to form a completely functional integrate d
circuit. the imaging of the pattern on a silicon wafer is done
by a so-called wafer scanner. the semi-conductor manufactu ring
process is explained in detail in [11].
a wafer scanner consists of around one thousand building
blocks.these building blocks canbeconsidered asystemini tself;
theycanconsist of anentire electronics rack, thousands of linesof
code, or a complete lens system.most of thesebuilding block s are
manufactured at suppliers. together, these building block s form a
scanner. after assembly of the building blocks, the wafer sc anners
are calibrated and tested. the calibration and test sequenc e of
a wafer scanner ends with a system qualiﬁcation phase. in thi s
system qualiﬁcation phase, the system performance in terms
of throughput, overlay and imaging performance is measured .
the throughput of a wafer scanner is a measure of the wafer
production speed. the overlay of a wafer scanner is a measure of
how accurate the different patterns are placed on top of each other
in each next layer. the imaging performance of a wafer scanne r
determines thelinewidthof thestructures inthe integrate dcircuit.
the capabilities of the twinscantmxt:1900gi wafer scanner
used in this case study in terms of throughput, overlay and
imaging performance are resp. ≥131wph,≤6nm and ≤40nm
[7]. moore’s law2is forcing companies like asml to constantly
innovate and build machines that can handle silicon wafers w ith
smaller line widths. this requires a continuous balance bet ween
performance (smallerlinewidths)andreliability(semi-c onductors
that can be produced without failures).
b. the test process
the whole test process consists of three phases: (1) the cali bra-
tion phase, (2) the test phase (the actual testing), and (3) t he ﬁnal
qualiﬁcation phase. the whole process takes several weeks. when
ﬁnished, the wafer scanner is partly taken apart and shipped to a
2moore (founder of intel), commenting on the growth of the mic roelec-
tronics industry in 1964, noted a doubling of the number of el ements on a
produced chip once every 12 months. for a decade that meant a g rowth factor
of approximately 1000. today,when moore’s lawis quoted, th e time constant
typically quoted is 18 months.rozinat et al.: process mining applied to the test process of wafer stepper s in asml 3
(a) fragment of the original log 
data. each line corresponds to 
a test execution with start and 
end time 
(b) log fragment in mxml 
format. a separate audit trail 
entry is created for the start 
and the end of each test 1596,31-01-2006 17:33:13,31-01-2006 17:33:39,pola 
1596,31-01-2006 17:33:50,31-01-2006 17:34:46,oswl 
1596,31-01-2006 17:34:48,31-01-2006 17:35:10,ossp 
1596,31-01-2006 17:36:18,31-01-2006 17:36:49,ahzi 
1596,31-01-2006 17:42:18,31-01-2006 17:43:25,dsna 
1596,31-01-2006 17:43:39,31-01-2006 17:44:56,ahzi 
1596,31-01-2006 17:44:57,31-01-2006 17:59:10,svei 
1596,01-02-2006 07:15:37,01-02-2006 07:33:25,svei 
1596,01-02-2006 07:35:00,01-02-2006 07:53:24,scei 
1596,01-02-2006 07:53:25,01-02-2006 07:54:58,yhlh 
1596,01-02-2006 07:54:59,01-02-2006 07:57:41,ahhj 
1596,01-02-2006 07:57:42,01-02-2006 08:04:40,ahca <processinstance id="1596" description="test instan ce 1596">
  ... 
<audittrailentry>
<workflowmodelelement>oswl</workflowmodelelement>
<eventtype>start</eventtype>
<timestamp>2006-01-31t17:33:50.000+01:00</timestamp >
<originator>unknown</originator>
  </audittrailentry>
<audittrailentry>
<workflowmodelelement>oswl</workflowmodelelement>
<eventtype>complete</eventtype>
<timestamp>2006-01-31t17:34:46.000+01:00</timestamp >
<originator>unknown</originator>
</audittrailentry>
  ... 
</processinstance>
fig. 1. converting the log into the mxml format
customer. a part of the calibration and test phase is repeate d at
the customer site, after re-assembling the wafer scanner.
why is this test process so important for asml? asml
operates in a market where the time-to-market of system enha nce-
ments and the time-to-market of new system types is critical .
wafer scanners are continuously enhanced. as a result, the n um-
ber of manufactured wafer scanners of a single type is typica lly
less than 50. and with each new type, parts of the calibration and
test phase are adjusted. on average ﬁve different system typ es are
manufactured in parallel. the short time-to-market, the co nstant
innovation, and the high value of wafer scanners make testin g
very important. spending too much time on testing will resul t in
high inventory costs and lost sales. however, inadequate te sts will
result in systems which are malfunctioning.
sets of calibration and test actions are grouped into so-cal led
job steps . these job steps are executed according to a certain
sequence. only large changes in the system design result in
changes in the job step sequence, so the job step sequence can be
considered a ﬁxed sequence across different systems. the ac tual
execution of tests results in failing test cases, which can r esult
in a lengthy re-test of parts of the sequence depending on the
failure at hand. for asml, the goal is to minimize the waiting
time for a hardware ﬁx (idle time) and to reduce the re-execut ion
of parts of the job-step sequence. this goal could be easily m et
by testing all components and building blocks thoroughly be fore
and during system assembly. however, the increase in test ef fort
would result in an increase of the total test duration and the refore
an increase in time-to-market. this is the main reason that t esting
everything thoroughly beforehand is not considered a solut ion, so
the main goal is a reduction of the duration of the test proces s and
not cutting costs. the work presented in this paper attempts to
shorten the test process by applying process mining techniq ues to
the existing test processes, i.e., we analyze the test proce ss based
on historical data to ﬁnd bottlenecks and ideas for improvem ent.
c. log data and conversion
each wafer scanner in the asml factory produces a log of
the software tests which are executed. the manual assembly a nd
calibration actions are not logged and appear as idle time in this
log. the wafer scanner is calibrated and tested using calibr ation
and performance software, indicated in the logging as a four -
letter code. the logging contains the start and stop moment o f
eachtest. the idle time, i.e.,the time betweenstop of the pr evious
test and the start of the next test, is not speciﬁed in detail. this
idle time has a number of causes, ranging from inexperienced
operators reading the procedures, the end of the automated t est
queue during the night to diagnosing a problem, or waiting fo r
additional parts. some parts of the test sequence are execut ed
in an automated fashion. the operator starts a test queue whi ch
contains a set of test cases which are executed in a sequence.this test queue can also contain part of the recovery and retr y
sequence for certain failing test cases. the recovery or ret ry tests
are executed depending on the outcome of a test in the queue.
an example fragment of the test log of one of the wafer
scanners is depicted in figure 1(a). each line corresponds t o
the execution of one test. the number at the beginning of the
line identiﬁes the machine (i.e., the wafer scanner) that is tested.
afterwards the start time, the completion time, and the four -letter
code for the executed test are recorded.3
to analyze the log data with prom we had to convert them into
themxml4format. thiswasrealizedbyacustom-built converter
plug-in for the promimportframework5. promimportfacilitates
log transformation tasks and provides converter plug-ins f or a
wide variety of systems to the xml format used by prom [17].
in the mxml format, a log is composed of process instances
(i.e., cases) and within each instance there are audit trail entries
(i.e., events) with various attributes. these attributes r efer to,
for example, data ﬁelds, timestamps, or transactional info rmation
(i.e., whether the activity was scheduled, started, or comp leted).
dependingonthekindofinformation thatisinthelog,wemay be
able to answer different questions about the process. figur e 1(b)
depicts the mxml log fragment for the highlighted test from
figure 1(a). one can see that the start and the completion of
the test are captured by separate audit trail entries (inclu ding
the corresponding timestamps), and that the enclosing proc ess
instance (i.e., the case) corresponds to the tested machine .
note that the logging takes place on the test-code level, and
that there is no reference to the job step in which’s context
the test is performed. however, in addition to the log data an d
the job step reference sequence, asml also provided us with
an additional document specifying which test codes should b e
executed in which job step. in this mapping, there are a numbe r
of tests that appear in more than one job step (i.e., are execu ted
in different phases of the test process).
iv. processminingresults
in the following, we provide a summary of the results from
analyzing the test process execution logs. (more details ab out
the speciﬁc process mining techniques and used prom plug-in s
can be found in our technical report [23].) in section v, thes e
resultsarethenevaluated fromanasml perspective andconc rete
improvement actions are proposed.
in most domains, we usually see a large number of relatively
short log traces, i.e., many process instances with just a fe w
events. for example, when looking at processes related to pa tient
ﬂows, insurance claims, trafﬁc ﬁnes, etc., then there are ty pically
3note that both the actual machine numbers and the four-lette r test codes
have been anonymized for conﬁdentiality reasons.
4the xml schema deﬁnition is available at http://www.processmining.org/ .
5promimportcan be freely downloaded from http://promimport.sf.net/ .4 ieee transactions on systems, man, and cybernetics—part c: applications and reviews
thousands of cases each containing less than 50 events. when
we examine the log, it becomes clear that this test process ha s
very different characteristics, since there are just a few c ases (i.e.,
machines) but for each machine there may be thousands of log
events. in the initial data set we faced process instances th at
contained more than 50000 log events (each indicating eithe r the
startorthecompletion of aspeciﬁctest).asmentioned earl ier,the
testprocess ofawafer scannerlastsfor severalweeksandis partly
repeated after the machine has been re-assembled at the cust omer,
thus explaining the huge number of events per machine. from a
larger set of machines we selected 24 machines that fulﬁlled our
criteria: (1) the test process needed to be completed, (2) on ly
include the test period on the asml (and not the customer) sit e,
(3) belong to the same family (recall that typically not more than
50 wafer scanners of the same type are produced), and (4) not b e
a pilot system (as a pilot system is used for development test ing
and not for manufacturing qualiﬁcation). these 24 cases com prise
154966 log events in total, and the number of log events per
process instance (i.e., the length of the executed test sequ ence)
ranges from 2820 until 16250. finally, we can see that there a re
720 different audit trail entries in the log, which correspo nds to
360 different four-letter test codes as each test is capture d by both
a ‘start’ and ‘complete’ event.
furthermore, we are interested in analyzing the job steps, i .e.,
the test phases that can be associated to the reference seque nce.
to be able to analyze the log on the job-step level, we ﬁrst
have to apply certain ﬁlteringtechniques. recall that there is no
information about job steps recorded in the log, but that we h ave
obtained a document specifying which tests need to be execut ed
for each job step. in this mapping, there are 184 out of the 360
detected test codes associated to a job step. this means that 176
of the four-letter codes cannot be connected to a speciﬁc job step
(in the remainder of this paper we call them “unmapped” codes ).
they mainly correspond to additional (more speciﬁc) tests t hat
are executed as part of the diagnosis process after a failure . at
the same time, there are 49 out of the 184 mapped test codes
that are associated to more than one job step, i.e., they occu r in
different phases of the test process (in the remainder we cal l them
“multiple” codes). the rest of the four-letter codes (i.e., 135 test
codes) can be unambiguously mapped onto a speciﬁc job step.
as a next step, we want to make use of the timestamps in
the log. for example, we can easily add up the times between
the start and the completion of a speciﬁc test to see how much
it contributes to the overall test process duration. in comb ination
withﬁltering, alsomore complex information canbe derived from
the log. for example, table i shows the top 4 idle times that
accumulated after each test for machine 1596, sorted by the s um
of all measured values.
table i
idle times after test executions for machine 1596. t op4sorted
by sum: most of the idle time accumulated after test ’pywz’
test code minimum arithm. mean sum #
(in minutes) (in hours) (in hours)
pywz 97.0333 61.3256 429.2797 7
dsna 0.0166 1.1433 147.4886 129
iwow 1.1166 13.8753 111.0027 8
oshy 0.0166 2.1286 87.2730 41
detailed information about idle times, such as in table i, is es-
sential for asml to minimize the overall test duration. howe ver,before wecanextract thisinformation fromthelog, weagain need
to apply ﬁltering mechanisms to the initial event log. figur e 2
visualizes how the example log fragment is transformed from
representing test durations to idle times after these tests . as a ﬁrst
step, we replace each ‘complete’ event and its succeeding ‘s tart’
event by a ‘start’ and ‘complete’ event marking the transiti on
between those tests.6then, we abstract from the test that was
executed afterwards. this is the log that was used as input to
calculate the values in table i. nevertheless, it can also be useful
to analyze the log on level 1 (i.e., directly after the applic ation
of the inversion ﬁlter) as the succeeding test code can provi de
insight into the nature of the idle time.
oswl
startossp
startahzi
startdsna
startoswl
completeossp
completeahzi
completedsna
completeoswl-
to-ossp
completeossp-
to-ahzi
startoswl-
to-ossp
startossp-
to-ahzi
completeahzi-
to-dsna
startahzi-
to-dsna
completedsna-
to-ahzi
start
oswl
test durationossp
test durationahzi
test durationdsna
test durationoswl-followed 
idle timeahzi-followed 
idle time
oswl-
followed 
idle time
startahzi-
followed 
idle time
start
test durationsidle times 
after tests
dsna-
followed 
idle time
startremap 
filter
activity-
inversion 
filter
012
oswl-
followed 
idle time
completeossp-followed 
idle time
ossp-
followed 
idle time
startossp-
followed 
idle time
completeahzi-
followed 
idle time
completedsna-followed
idle time
fig. 2. an inversion ﬁlter allows to analyze the idle times in stead of the
actual test durations. then we abstract from the succeeding test
we have seen that using log inspection and ﬁltering tools we
can already answer questions about general log characteris tics,
such as simple frequency measures, the distribution of even ts over
time, throughput times, and basic statistics about test dur ations
and idle times. as stated in section iii-b, the second goal
for asml—next to the minimization of idle times in the test
process—is to reduce the re-execution of parts of the job-st ep
sequence. we, therefore, want to apply now process discovery
techniques to gain insight into the actual ﬂow of the test pro cess
to ﬁnd out where re-executions were often necessary.
process discovery algorithms automatically construct a pr ocess
model based on the behavior that was observed in the event log .
however, the nature of our test log poses some challenges. on the
one hand, there are only a few process instances available, w hich
at the same time are very long, and contain logged tests that a re
executed in different phases of the test process (i.e., ‘mul tiple’
codes). on the other hand, we already know that the process is
very ﬂexible (as parts of it might need to be redone depending on
the outcome of the performed tests, resulting in many variat ions
in the test sequences), while most of the traditional discov ery
algorithms described in literature assume that the underly ing
process is “structured” (i.e., the number of possible paths through
a process is limited or the paths have some regular form).
the heuristic miner is one of the algorithms that can deal
with such less structured processes [25]. it tries to abstra ct from
low-frequent behavior based on certain heuristics to conne ct the
activities in the process. figure 3(a) depicts the initial m odel that
was discovered based on the whole log. the discovered model
is “spaghetti-like”, i.e., it is huge (nodes corresponding to the
360 tests) and it is unstructured. such spaghetti-like mode ls are
6note that this mechanism only works because we have no interl eaving
tests in the log. each test that is started will ﬁrst be comple ted before the
next one is started.rozinat et al.: process mining applied to the test process of wafer stepper s in asml 5
(a) discovered process model based on log with 
only ‘complete’ events. contains 360 activities 
(b) discovered process model based on log with only  ‘complete’ 
events that occurred in all the 24 cases. contains 70 activities 
fig. 3. process models on test-code level discovery using pr om
not caused by limitations of the algorithm but by the inheren t
complexity of the testing process. therefore, we subsequen tly
applied further ﬁltering techniques to abstract from certa in tests
in the process. this helps to yield smaller models. as anexam ple,
we show the model in figure 3(b). this model contains only
70 different activities and reﬂects the view on all common tests
in the process (i.e., tests that were performed for each of th e
machines). to be able to compare the discovered model to the
existing reference sequence, we also analyzed the process o n the
job-step level. due to a lack of space, this model cannot be sh own
in this paper.
v. evaluation and improvement suggestions
to identify concrete improvement suggestions, we evaluate d
the presented process mining results from an asml perspecti ve.
first, the dominant feedback loops in the test process were
analyzed (section v-a). feedback loops in the process indic ate
that a job step fails and a previous job step needs to be re-
done. after the previous job step is re-done, often parts of t he
already executed sequence must also be re-executed. this is
taking valuable time. second, possible root causes for some of
the idle times are given (section v-b).
a. dominant feedback loops
feedback loops in the mined process indicate that a certain
job step failed and caused that a job step, which was position ed
earlier in the sequence, needs to be re-executed. ideally, f ailures,
ﬁxes, and re-execution of test cases are performed in the job
step that failed. given technological constraints related to theconstruction of a wafer scanner, this is not always feasible .
moreover, many different faults can cause a particular fail ure.
process improvement in this area should start with the most
important failures and feedback loops. the following domin ant
feedback loops ( →) have been observed between job steps in the
discovered process model: (1) z →(via d)→a, (2) z →(via d)
→l, (3) t→a, and (4) v →f.
in general, this shows that the job steps ‘z’, ‘t’, and ‘v’ are job
steps which are capable of ﬁnding the errors that were missed in
the previous job steps. errors detected in these steps cause the test
process to be “rolled back”. test cases that fail in these job steps
should be placed in the lower level job steps as additional te st
case to test the overall performance. this allows an early fa ilure
and an early ﬁx. process improvement should focus on these fo ur
dominant feedback loops for these systems. more speciﬁcall y, the
ﬁrst and second feedback loop visit job step ‘d’. this is poss ibly
to determine if either job step ‘a’ or job step ‘l’ needs to be
executed to ﬁx this problem. the test cases in job step ‘d’ tha t
perform this diagnosis could be useful as a standard test cas e in
job step ‘a’ and ‘l’.
b. idle times during test procedure
using idle time for scheduling automatic test actions is one of
the possibilities to reduce the overall test duration. in se ction iv
we described how the idle time accumulating after a certain
type of test can be determined using a combination of ﬁlterin g
techniques. table i shows the analysis results for one of the 24
machines.mostof theidletimeonthismachine accumulateda fter
executing the tests (1) ‘pywz’, (2) ‘dsna’, and (3) ‘iwow’,6 ieee transactions on systems, man, and cybernetics—part c: applications and reviews
which are also among the 4 tests that accumulated most of the
idle time for all the 24 machines together.
(1) the ‘pywz’ test is used to stabilize the wafer scanner,
which takes hours. therefore, it is started at the beginning of the
weekend at the end of the ‘zero’ job step. the wafer scanner
enters idle time if stabilization ﬁnishes earlier. this can easily be
solved by adding the test cases of the next job step to this tes t set.
for the machine in table i, at least 97minutes, and on average
61hours accumulated after 7executions of this test.
(2) the ‘dsna’ test ensures the reliabilityof the wafer hand ler,
one of the sub-systems in a wafer scanner. this test is execut ed
during the available night hours throughout the entire job s tep
sequence. sometimes, the test queue ﬁnishes early. this can be
resolved by adding additional ‘dsna’ test cases to the test s et.
for the machine in table i, at least 0.01minutes, and on average
1.14hours accumulated after 129executions of this test.
(3) after the execution of the test ‘iwow’, at least 1 minute,
and on average 13 hours accumulated after 8 executions on the
same machine. the test was executed twice as the last test bef ore
the weekend, and once before the christmas holidays.
vi. conclusion
we have demonstrated that current process mining technique s
can already answer many questions, even yield concrete sugg es-
tions for process improvement also in as complex environmen ts
as the wafer stepper qualiﬁcation phase of asml. however,
due to the rapid technological advancements, the analysis r esults
presented in this paper are likely to be outdated already for the
next series of wafer steppers than the ones that we analyzed. to
enable a continuous improvement of the test process in asml,
process analysis should be best carried out in an iterative m anner.
additional information sources that could be used to improv e
the data set are available, but were not used in this case stud y. for
example, sap data is available with (manually entered) job s tep
start andstop data, and the start andstop moment of the entir e test
sequence. more importantly, however, further research is n eeded
to develop process mining techniques that are particularly suitable
for analyzing less structured processes like the highly dyn amic
test process of asml. we found similar logs in other domains,
such as health-care processes. in these situations, the res ulting
models are often overly complex and confusing (i.e., “spagh etti-
like”), which makes them hard to extract useful information from.
acknowledgements
this research is supported by the technology foundation stw ,
eit, and the tangram and iop programs of the dutch ministry
of economic affairs.
references
[1] w.m.p. van der aalst, b.f. van dongen, c.w. g¨ unther, r.s . mans, a.k.
alves de medeiros, a. rozinat, v. rubin, m. song, h.m.w. verb eek,
and a.j.m.m. weijters. prom 4.0: comprehensive support for real
process analysis. in j. kleijn and a. yakovlev, editors, proceedings of
the icatpn 2007 , volume 4546 of lecture notes in computer science ,
pages 484–494. springer-verlag, berlin, 2007.
[2] w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b .f. van
dongen, a.k. alves de medeiros, m. song, and h.m.w. verbeek. busi-
ness process mining: an industrial application. information systems ,
32(5):713–732, 2007.
[3] w.m.p. van der aalst, b.f. van dongen, j. herbst, l. marus ter,
g. schimm, and a.j.m.m. weijters. workﬂow mining: a survey o f
issues and approaches. data and knowledge engineering , 47(2):237–
267, 2003.[4] w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster . workﬂow
mining: discovering process models from event logs. ieee transac-
tions on knowledge and data engineering , 16(9):1128–1142, 2004.
[5] r. agrawal, d. gunopulos, and f. leymann. mining process models
from workﬂow logs. in sixth international conference on extending
database technology , pages 469–483, 1998.
[6] s. amland. risk-based testing: risk analysis fundament als and metrics
for software testing including a ﬁnancial application case study.journal
of systems software , 53(3):287–295, 2000.
[7] asml. website asml nv, veldhoven, www.asml.com, 2007.
[8] r. boumen, i.s.m. de jong, j.w.h. vermunt, j.m. van de mor tel-
fronczak, and j.e. rooda. a risk-based stopping criterion f or test
sequencing. internal report se 420460, eindhoven universi ty of
technology, january 2006. submitted to ieee transactions o n sys-
tems,man,and cybernetics-part a: systems and humans.
[9] r. boumen, i.s.m. de jong, j.w.h. vermunt, j.m. van de mor tel-
fronczak, and j.e. rooda. test sequencing in complex manufa ctur-
ing systems. accepted for ieee transactions on systems,man,and
cybernetics-part a: systems and humans , 2006.
[10] j.e. cook and a.l. wolf. discovering models of software processes
from event-based data. acm transactions on software engineering
and methodology , 7(3):215–249, 1998.
[11] chipworks corporation. advanced semiconductor manuf acturing hand-
book. technical report, chipworks corporation, januari 20 00.
[12] a. datta. automating the discovery of as-is business pr ocess mod-
els: probabilistic and algorithmic approaches. information systems
research, 9(3):275–301, 1998.
[13] a.k. alves de medeiros. genetic process mining . phd thesis, de-
partment of technology management, technical university e indhoven,
2006.
[14] b.f.van dongen andw.m.p.van deraalst. multi-phase pr ocess mining:
building instance graphs. in p. atzeni, w. chu, h. lu, s. zhou , and
t.w. ling, editors, international conference on conceptual modeling
(er 2004) , volume 3288 of lecture notes in computer science , pages
362–376. springer-verlag, berlin, 2004.
[15] s.m. el-shal and a.s. morris. a fuzzy expert system for f ault detection
in statistical processcontrol of industrial processes. ieee transactions
on systems, man, and cybernetics–part c , 30(2):281–289, 2000.
[16] d. grigori, f. casati, m. castellanos, u. dayal, m. saya l, and m.c.
shan. business process intelligence. computers in industry , 53(3):321–
343, 2004.
[17] c.w. g¨ unther and w.m.p. van der aalst. a generic import framework
for process event logs. in j. eder and s. dustdar, editors, business
process management workshops, workshop on business proces s intel-
ligence (bpi 2006) , volume 4103 of lecture notes in computer science ,
pages 81–92. springer-verlag, berlin, 2006.
[18] m.j. harrold, d. rosenblum, g. rothermel, and e. weyuke r. empirical
studies of a prediction model for regression test selection .ieee
transactions on software engineering , 27(3):248–263, 2001.
[19] j. herbst. a machine learning approach to workﬂow manag ement.
in11th european conference on machine learning , volume 1810 of
lecture notes in computer science , pages 183–194. springer-verlag,
berlin, 2000.
[20] ids scheer. aris process performance manager (aris ppm ):
measure, analyze and optimize your business process perfor mance
(whitepaper). ids scheer, saarbruecken, gemany, http://w ww.ids-
scheer.com, 2002.
[21] british computer society special interest group in sof tware testing.
standard for software component testing . british computer society,
2001.
[22] m. zur m¨ uhlen and m. rosemann. workﬂow-based process m onitoring
and controlling - technical and organizational issues. in r . sprague,
editor,proceedings of the 33rd hawaii international conference on
system science (hicss-33) , pages 1–10. ieee computer society press,
los alamitos, california, 2000.
[23] a. rozinat, i.s.m. de jong, c.w. g¨ unther, and w.m.p. va n der aalst.
process mining of test processes: a case study. beta working paper
series, wp 220, eindhoven university of technology, eindho ven, 2007.
[24] m.sayal, f.casati, u.dayal, and m.c.shan. business pr ocess cockpit.
inproceedings of 28th international conference on very large data
bases (vldb’02) , pages 880–883. morgan kaufmann, 2002.
[25] a.j.m.m. weijters and w.m.p. van der aalst. rediscover ing work-
ﬂow models from event-based data using little thumb. integrated
computer-aided engineering , 10(2):151–162, 2003.