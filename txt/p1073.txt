 
 
general rights  
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other  copyright 
owners and it is a condition of accessing publications that users recognise  and abide by the legal requirements associated with these rights.  
 
 users may download and print one copy of any publication from the public portal for the purpose of private study or research.  
 you may not further distribute the material or use it for any profit -making activity or commercial gain  
 you may freely distribute the url identifying the p ublication in the public portal  
 
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the wo rk im mediately 
and investigate your claim.  
  
 
   
 
 
downloaded from orbit.dtu.dk on: jan 02, 2020
discovering high-level bpmn process models from event data
kalenkova, a.a. ; burattin, andrea; de leoni, m.; van der aalst, w.m.p.; sperduti, alessandro
published in:
business process management journal
link to article, doi:
10.1108/bpmj-02-2018-0051
publication date:
2018
document version
peer reviewed version
link back to dtu orbit
citation (apa):
kalenkova, a. a., burattin, a., de leoni, m., van der aalst, w. m. p., & sperduti, a. (2018). discovering high-
level bpmn process models from event data. business process management journal.
https://doi.org/10.1108/bpmj-02-2018-0051discovering high-level bpmn process models
from event data
a.a. kalenkova1, a. burattin2, m. de leoni3, w.m.p. van der aalst3,4,
and a. sperduti5
1national research university higher school of economics, russia
2technical university of denmark, denmark
3eindhoven university of technology, the netherlands
4rwth aachen university, germany
5the university of padua, italy
akalenkova@hse.ru, andbur@dtu.dk, m.d.leoni@tue.nl,
wvdaalst@pads.rwth-aachen.de, sperduti@math.unipd.it
1 introduction
process-aware information systems (paiss) are increasingly used by organizations to
support their businesses. all these systems record the execution of process instances in
so-called event logs. these logs thus capture information about activities performed.
each event records the execution of an activity instance by a given resource at a certain
point in time along with the output produced. analyzing event logs, understanding
and improving processes based on facts are the primary objectives of process min-
ing(van der aalst 2016).
in a relatively short time span, this discipline has proven to be capable of extract-
ing from event logs in-depth insights into process-related problems that contemporary
enterprises face. the lion’s share of attention in process mining is process discovery .
process discovery aims to discover the actual processes that are executed within orga-
nizations. typically, the output is a model that is a description of the process. process
models produced through process discovery are based on facts and are objective, in
contrast with those hand-made, which are subjective and biased toward the designer’s
belief.
what does one need a model for? models can be used for multiple purposes. they
can not only be used to conﬁgure a pais but also to discuss responsibilities, ana-
lyze compliance, reason over bottlenecks, resource utilization, costs, risks, and other
performance-related aspects of processes.
to ensure an efﬁcient communication with the company’s stakeholders, the pro-
cess model notation plays an important role. several notations exist but the evidence is
showing that, during the last years, bpmn (business process model and notation) 2.0
1(object management group 2013) is becoming the defacto standard for modeling busi-
ness processes in industry. therefore, it seems crucial that process discovery tech-
niques produce models in this notation. furthermore, models need to be of a high
quality: they need to be accurate, i.e., represent various perspectives of event data, and
not to underﬁt the reality. to achieve this, the models need to integrate the control-
ﬂow perspective, i.e., the allowed sequences of activities, with the resource and data
perspective (the latter a.k.a. case perspective). the organization perspective focuses on
which actors (people, systems, roles, organizational units) are involved and how: who
can execute what part of the process. the data perspectives focus on the properties of
the process instance executions (e.g., the age or gender of loan applicants) and how
these properties affect the process executions, e.g., the applications of gold customers
are managed differently from those of silver customers, which are, in turn, different
from normal customers.
the bpmn notation allows one to integrate these perspectives into a single model.
if process mining focuses on discovering integrated models, one can discover that, e.g.,
requests from certain customer types are managed by given organizational units or do
not need to be assessed by managers.
as mentioned, models need to be readable even when the processes consist of
dozens of activities and involve several organizational units. to tackle this, it is worth
using a “divide-et-impera” solution: the model is split into several sub-models, each
of which is a different, e.g., bpmn model. these sub-models are then connected to
illustrate how the executions iterate over them. in other words, readability is achieved
by making the model hierarchically structured into a main model and sub-models.
this paper illustrates a methodology to exploit event logs to generate hierarchi-
cal bpmn models that integrate the different perspectives mentioned above. the pa-
per starts from analyzing and reporting the bpmn meta-model (object management
group 2013), from which we derived the main modeling elements, which can be dis-
covered using different process mining techniques. we identiﬁed three main types of
bpmn models, which inherit core bpmn modeling constructs: bpmn models with
data,hierarchical bpmn models , and bpmn models with resources . after that, we
report on process discovery techniques that mine these three types of models. then,
we illustrate how these techniques can work in concert to integrate different views into
a single hierarchical bpmn model, which combines data, resource, and control-ﬂow
perspectives.
this integrated discovery approach was implemented as a plugin for prom, the
most widespread open-source process mining framework. we conducted three thor-
ough real-life case studies with processes enacted in several dutch municipalities, in
an online sales shop, and in a banking system. the event logs contained information
related to the control-ﬂow, the resource and the data perspective, which enabled us to
discover rich, integrated bpmn models. in addition to mining different perspectives,
these case studies illustrate the importance of mining hierarchical models where the
model is broken down into several subprocesses. indeed, the event logs recorded the
execution of dozens of process activities, which would have led to gigantic and unread-
able process models if we focused on mining “ﬂat” process models.
the behavioral and structural characteristics of the discovered bpmn models were
also evaluated. the structural characteristics of bpmn models discovered from real-
2life event logs were compared with the structural characteristics of bpmn models
taken from the signavio model collection. this allowed us to show that the models
that we automatically discovered resemble manually created models, which are com-
mon for the analysts.
the remainder of this paper is organized as follows. section 2 gives an overview
of related work. in section 3, all notions, including event logs, petri nets, bpmn
modeling constructs, are introduced. section 4 demonstrates the applicability of the
existing process discovery techniques to mine different types of bpmn models. the
integrated discovery approach is presented in section 4. section 5 demonstrates the
experimental results. finally, section 6 concludes the paper.
2 related work
there is a large body of work on process discovery. in (van der aalst 2016), van der
aalst discusses a large repertoire of process discovery techniques that mainly focus on
discovering the control-ﬂow, i.e., the sequences of executions of process activities. in
addition, there are several research works to discover the other process perspectives or
some subprocess hierarchies, e.g., (de leoni & van der aalst 2013, conforti et al. 2014,
2016, bazhenova et al. 2016, de smedt et al. 2017, kalenkova et al. 2017). however,
these works are often limited to a single perspective, such as the data or the resource
perspective. although some approaches to the discovery and conformance checking
of multi-perspective process models were proposed earlier (rozinat 2010, rozinat &
van der aalst 2006, mannhardt et al. 2016, mannhardt 2018), this work leverages the
expressive possibilities of the bpmn language. in (de weerdt et al. 2014) an approach
for discovering bpmn models represented by control and resource perspectives is sug-
gested, but it is limited to these perspectives only. furthermore, it is based on a spe-
ciﬁc process discovery algorithm, while we present a ﬂexible discovering methodology
where diverse discovery techniques can be integrated in a ﬂexible manner. the aim is
to discover a single process model with hierarchies integrating the data-ﬂow, resource,
and control-ﬂow perspectives.
we also believe that the evaluation of real-life case studies is certainly of higher
quality than the evaluations in previous works. no existing works have ever conducted
a signiﬁcant effort to illustrate how all perspectives can be mined and put together into
an integrated model, certainly not for case studies of a complexity comparable to what
is proposed in this paper. on average, the complexity of the event logs and of the
underlying processes is certainly far higher than any previous studies.
a related topic is the recent introduction of the dmn standard ( decision model
and notation (dmn) v1.1 2016) by the omg group. bpmn can be complemented
with dmn, where data-related decisions can be represented. in dmn, the data per-
spective is mainly modeled outside the bpmn process model as separate tables. in
(batoulis et al. 2015), the authors argue that this separation of concerns would increase
the readability, especially when models are of signiﬁcant size. indeed, the separation of
concerns might theoretically increase the readability, even though more investigation is
certainly necessary to support this statement. however, it is trivial to extract the data-
related decisions from the integrated bpmn models and to represent them as separate
3dmn tables. indeed, in (bazhenova et al. 2016), the authors mine dmn tables using
an approach that largely coincides with what is proposed in this paper. compared with
the latter, we propose an integrated framework where discovering the data perspective
(in the form of, e.g., rules attached to bpmn arcs or dmn tables) is just one of the
ingredients.
3 event logs, petri nets, and bpmn modeling
constructs
this section deﬁnes main concepts, including event logs and process modeling for-
malisms, which will be referred to later in this paper.
3.1 event logs
event logs containing information systems’ behavior are considered as a starting point
for the process discovery algorithms.
the deﬁnition of event logs reﬂects the deﬁnition reported in (van der aalst et al.
2015). letabe a set of activity names, 2abe a silent activity name ,^a=anfg
– a set of activity names without the silent activity ,attr– a ﬁnite set of attributes , and
val– a set of values .
anevent is deﬁned as a pair e= (a;f), wherea2^ais a name of the event,
andf:attr!valis an attribute function, which maps attributes to their values. by
ewe denote a set of events. edenotes the set of all ﬁnite sequences (including the
empty sequence) of elements from e. a sequence of events tr2eis called a trace ,
and an event loglis a multiset of traces, i.e., l2b(e)[1]. aconcatenation of two
traceshe1;e2;:::;e kiandhe0
1;e0
2;:::;e0
liis denoted byhe1;e2;:::;e kihe0
1;e0
2;:::;e0
li
and equalshe1;e2;:::;e k;e0
1;e0
2;:::;e0
li.
lete0ebe a subset of events, then a projection tr"e0of a trace tr2eon the
sete0is deﬁned inductively: tr"e0=8
><
>:hi; iftr=hi;
tr0
"e0; iftr=heitr0;e =2e0;
heitr0
"e0;iftr=heitr0;e2e0:
a projection l"e0of an event log l2b(e)on a sete0eis obtained by
projecting on e0all the traces from l.
consider the fragment of an event log presented in tab. 1.
this event log contains information about the procedure of application processing.
the arrival of an application initiates a process instance. after the application is re-
ceived an acknowledgment is sent back to the applicant and the application is either
processed or forwarded to a competent employee.
each case (identiﬁed by case id ) corresponds to the processing of a concrete ap-
plication and represents a sequence of events (a trace). timestamps deﬁne the order
of events within the traces. the resource attribute indicates employees performing the
activities.
4case id activity name resource timestamp
e1 1 "receive application" "john" 2017-08-15 11:23:17
e2 1 "send acknowledgment of receipt" "john" 2017-08-15 11:45:54
e3 2 "receive application" "mary" 2017-08-15 14:12:54
e1 3 "receive application" "john" 2017-08-15 14:21:32
e4 1 "process application" "kate" 2017-08-15 14:36:17
e2 3 "send acknowledgment of receipt" "john" 2017-08-15 14:41:15
e4 3 "process application" "kate" 2017-08-15 14:45:59
e5 2 "send acknowledgment of receipt" "mary" 2017-08-15 14:48:12
e6 2 "forward to competent authority" "jane" 2017-08-15 15:22:07
table 1: an event log of an application processing procedure.
formally, this event log can be deﬁned as a multiset of traces l= [he1;e2;e4i2;
he3;e5;e6i1], where each event is identiﬁed by its name and the value of the resource
attribute:e1= ("receive application ";f1),f1(resource ) = " john",e2= ("send
acknowledgment of receipt ";f2),f2(resource ) = " john",e3= (" receive appli -
cation ";f3),f3(resource ) = " mary ",e4= (" process application ";f4),f4(re-
source ) = " kate",e5= ("send acknowledgment of receipt ";f5),f5(resource ) =
"mary ",e6= (" forward to competent authority ";f6),f6(resource ) = " jane".
as it was mentioned before, case id is used to deﬁne traces, timestamp forms the
order of events within a trace.
3.2 classical petri nets and petri nets with data
petri nets are the most popular low-level process modeling formalism used in the con-
text of process mining. a labeled petri net is a tuple pn= (p;t;f;m init;m ﬁnal;l),
wherepis a set of places, tis a set of transitions, p\t=;, andf(pt)[
(tp)is a ﬂow relation, minit;m ﬁnalare initial and ﬁnal markings respectively, and
l2t!ais a labeling function which maps transitions to a set of activity names. a
marking is a function m2p!nmapping places to natural numbers. in a mark-
ingmplacepcontainsm(p)tokens. in addition, we will use the following notation:
by[p1;p3
2]we will denote a marking, in which place p1contains one token, place p2
contains three tokens, while other places are empty.
for transition tsets of input and output places are deﬁned as:t=fp2pj(p;t)2
fgandt=fp2pj(t;p)2fgcorrespondingly. places are represented by circles,
transitions by boxes, and the ﬂow relation by directed arcs.
transitiontisenabled in markingmiff8p2t:m(p)1, i.e., each input place
contains at least one token. an enabled transition tmay ﬁre, i.e., one token is removed
from each place fromtand one token is added to each place from t.
ifl(t) =, thentis called invisible and represented as a black box. func-
tionlcan be applied to transition sequences using the following inductive deﬁnition:
l() =8
><
>:hi; if=hi;
l(0); if=hti0;l(t) =;
hl(t)il(0);if=hti0;l(t)6=:
a traceh(a1;f1);:::;(ak;fk)i2ecan be replayed by a labeled petri net pn=
5(p;t;f;m init;m ﬁnal;l)if there is a sequence of transition ﬁrings , leading from the
initial marking minitto the ﬁnal marking mﬁnal, such thatl() =ha1;:::;a ki[2].
now let us extend petri nets and deﬁne petri nets with data introduced in (de leoni
& van der aalst 2013). a petri net with data is a tuple dpn = (pn;v;u;r;w;g ),
where pnis a labeled petri net, vis a set of variables. the function udeﬁnes possible
values for each variable v, such thatu(v) =dv, wheredvis the domain for v. the
functionsr:t!2vandw:t!2vdeﬁne sets of variables, which are read and
written by the transitions. the guard function g:t9gv[3] associates some of the
transitions with guards. a transition can ﬁre only if a corresponding guard evaluates to
true and all the input places contain at least one token[4]. a state of a petri net with
data is represented by a pair (m;val), wheremis a marking, and valis a function,
which maps variables to their values, i.e., val:v!d[f?g , whered=[v2vu(v).
the sign?denotes that the variable does not have a value.
an example of a petri net with data dpn = (pn;v;u;r;w;g ), where pn=
(p;t;f;m init;m ﬁnal;l)is presented in fig. 1. this petri net describes a booking pro-
pay by 
card choose 
payment 
type book 
 hotel 
view hotel 
details p1 p2
p5p3 p4 p7
p6t1
t2t3
t4
t6t7pay by 
e-money paymenttype=
''e-money'' 
paymenttype=
''card'' 
t5paymenttype=
''none'' payment 
type 
figure 1: an example of a petri net with data.
cess, where the user ﬁrst books a hotel, chooses a payment type, pays for the reservation
(using one of the payment types) or skips the payment and views the hotel details (be-
fore, after, or during the payment). formally, p=fp1;p2;p3;p4;p5;p6;p7g,t=
ft1;t2;t3;t4;t5;t6;t7g,f=f(p1;t1);(t1;p2);(t1;p5);(p2;t2);(t2;p3);(p3;t3);
(p3;t4);(p3;t5);(t3;p4);(t4;p4);(t5;p4);(p4;t7);(p5;t6);(t6;p6);(p6;t7);(t7;p7)g,
l(t1) = " book hotel ",l(t2) = " choose payment type ",l(t3) = " pay by e -money ",
l(t4) = " pay by card ",l(t6) = " view hotel details ",l(t5) =l(t7) =. placep1
contains one token in the initial marking, formally minit= [p1], the ﬁnal is deﬁned as
mﬁnal= [p7]. the set of variables vis represented by a variable paymenttype , i.e.,
v=fpaymenttypeg, the set of its possible values is deﬁned as u(paymenttype )
=f"e-money ";"card";"none"g. transitiont2writes to the variable paymenttype ,
transitionst3,t4, andt5read its values, formally, w(t2) =fpaymenttypeg,r(t3) =
r(t4) =r(t5) =fpaymenttypeg. moreover, the guard conditions for t3,t4, and
t5depend on the value of paymenttype :g(t3),g(t4), andg(t5)are deﬁned as
6paymenttype = "e-money ",paymenttype = "card",paymenttype = "none"
respectively, for other transitions the guard function is not deﬁned. this petri net
can replay 8 traces, represented by distinct sequences of activity names. sequence
h(a1;f1);(a2;f2);(a3;f3);(a4;f4)i, wherea1= "book hotel ",a2= "choose pay -
ment type ",a3= "view hotel details" ,a4= "pay by card ", is an example of such a
trace.
3.3 bpmn modeling constructs
in this subsection we will introduce bpmn modeling constructs deﬁned on the basis of
the bpmn 2.0 speciﬁcation (object management group 2013). bpmn offers a wide
range of modeling elements, but not all of them are frequently employed (muehlen
& recker 2008). in contrast to the existing formal bpmn semantics (dijkman et al.
2008, kheldoun et al. 2015, ye et al. 2008) in this paper we consider all key bpmn
constructs, which cover the main workﬂow perspectives: control, resource, and data.
we will restrict ourselves to private bpmn diagrams, which are used to model internal
business processes without interaction with the environment. modeling and discover-
ing of interacting processes is out of the scope of this paper and can be considered as a
direction for future work.
we iteratively introduce and formalize various types of bpmn diagrams. to show
their relations with the bpmn standard, corresponding meta-models were extracted
from the speciﬁcation (object management group 2013). native classes of modeling
elements and abstract classes are shown in white and gray respectively. classes of
bpmn diagrams added in this work are highlighted in blue. for each native bpmn
class a parent package from (object management group 2013) is speciﬁed.
3.3.1 core bpmn models
core bpmn models are used to formalize ﬂat processes represented by a control-ﬂow
perspective.
a meta-model, which describes elements of core bpmn models, is presented in
fig. 2.
it shows various types of ﬂow nodes , including activities ,gateways , and events .
activities stand for process steps (in separate core bpmn models they correspond to
tasks ),gateways are used to model routing constructions, start andend events denote
the beginning and completion of the process respectively. the nodes can be connected
via directed sequence ﬂows independently of their type. graphical notations of bpmn
elements used within core models are presented in fig. 3.
we will restrict core bpmn models to be oriented graphs with one start and multi-
ple end events, where the start event and end events do not have incoming and outgoing
sequence ﬂows respectively, and each node of the graph lies on a path from the start to
an end event.
similarly to petri nets, core bpmn models have an operational semantics based on
the model states (or markings). in each state, sequence ﬂows (fig. 3h) may carry to-
kens. in the initial state each outgoing sequence ﬂow of a start event (fig. 3a) contains
a token, while other sequence ﬂows do not. each node (except the start event) can be
7private bpmn 
diagram 
core bpmn 
model 
task 
(from 
activities)1
1..* 
flow node 
(from 
common)activity 
(from 
activities)exclusive 
gateway 
(from 
gateways)1
1
gateway 
(from 
gateways)inclusive 
gateway 
(from 
gateways)1
*
parallel 
gateway 
(from 
gateways)1
*
start event 
(from 
events)end event 
(from 
events)11
*
event 
(from 
events)throw 
event 
(from 
events)catch 
event 
(from 
events)sequence 
flow 
(from 
common)1
*
+outgoing 
+incoming * *
+sourceref 1
+targetref 1*figure 2: a meta-model for core bpmn models.
enabled and may ﬁre[5]. activities (fig. 3d) and exclusive gateways (fig. 3f) are en-
abled if at least one of the incoming sequence ﬂows contains a token. when an activity
ﬁres it takes a token from one of the incoming sequence ﬂows and adds a token to each
outgoing sequence ﬂow. while an exclusive gateway consumes a token from one of
the incoming sequence ﬂows and passes a token to one of the outgoing sequence ﬂows.
a. b. c. 
e. f. g. 
h. d. 
figure 3: elements of core bpmn
model: a. start event, b. end event,
c. cancellation end event, d. ac-
tivity, e. parallel gateway, f. exclu-
sive gateway, g. inclusive gateway,
h. sequence ﬂow.aparallel gateway (fig. 3e) is enabled only if
each of the incoming sequence ﬂows contains at
least one token. when an enabled parallel gate-
way ﬁres, it takes a token from each incoming
sequence ﬂow and produces a token to each out-
going sequence ﬂow. the semantics of inclu-
sive gateways (fig. 3g) is non-local . an inclu-
sive gateway ﬁres if some of the incoming se-
quence ﬂows contain tokens and it is not possible
to reach a marking from the current marking, in
which currently empty incoming sequence ﬂows
will contain tokens, without ﬁring this gateway.
an inclusive gateway produces tokens for some
of the outgoing sequence ﬂows.
anend event (fig. 3b) consumes all the
tokens as they arrive. beyond ordinary end
events we also consider cancellation end events
8(fig. 3c), which terminate the entire process, consuming all the tokens from its se-
quence ﬂows. the bpmn notation contains a wide range of event constructs, the
semantics of which involves cancellation. these can be error, signal, cancel, and other
types of events. in this paper we combine all of them together conceptually as one type
called cancel event.
3.3.2 bpmn models with data
in this subsection we will extend core bpmn modeling constructs by adding the data
perspective. as fig. 4 shows a bpmn model with data may contain data objects .
core bpmn 
model 
bpmn model 
with data 
1
*
data  
association 
(from data)
data input 
association 
(from data)data output 
association 
(from data)
activity 
(from 
activities)+datainputassociations 
1+dataoutputassociations *
1item aware 
element 
(from data)1
*
data object 
(from data)
0..10..1*
*+targetref 
+sourceref *sequence 
flow 
(from 
common)
expression 
(from 
common)1
0..1
+conditionexpres 
sion exclusive 
gateway 
(from 
gateways)inclusive 
gateway 
(from 
gateways)*1
*
0..1+default 
0..1
+default *1 1
*1
figure 4: a meta-model for bpmn models with data.
activities, which read or write data are connected with corresponding data objects
via input or output data associations respectively. fig. 5 shows a graphical representa-
tion of a data object and a data association.
also a bpmn model with data may incorporate conditional expressions . the val-
ues of conditional expressions are calculated on the basis of data object values and
deﬁne conditions for passing tokens to the corresponding sequence ﬂows.
despite the fact that according to the meta-model (fig. 4) default sequence ﬂows
can be used within core bpmn models, we will consider them in bpmn models with
data only, since without conditional expressions default sequence ﬂows do not inﬂu-
ence the model execution.
9figure 5: data
object, data asso-
ciation.in contrast to the bpmn speciﬁcation (fig. 4), where for any
arbitrary sequence ﬂow a corresponding conditional expression can
be determined, we will assume that conditional expressions are set
only for outgoing sequence ﬂows of exclusive and inclusive gate-
ways. also we will assume that for each exclusive or inclusive
gateway there is exactly one outgoing default sequence ﬂow .
an exclusive gateway passes a token to one of the outgoing se-
quence ﬂows, for which conditional expression is not deﬁned or
evaluates to true. an inclusive gateway produces tokens for all outgoing sequence
ﬂows, those conditional expressions are not deﬁned or true. if conditional expressions
of all outgoing sequence ﬂows evaluate to false , then a token is added to the corre-
sponding default sequence ﬂow .
3.3.3 bpmn models with resources
a resource is a business entity which executes or is responsible for business process
activities. these can be programs, human beings, departments, or even organizations.
usually, in private bpmn models resources are represented as lanes[6]. an example
of a bpmn model with lanes is presented in fig. 6.
lane2 lane1 a
b
figure 6: an example of a bpmn model with lanes.
a meta-model for bpmn models with resources is shown in fig. 7. as one may see
from this meta-model, each lane belongs to a lane set, which in turn can be contained
by a lane. in this work we will consider only one level of granularity. lanes may
contain ﬂow nodes, such as activities, gateways, events. note that sequence ﬂows may
cross a lane’s boundaries.
3.3.4 hierarchical bpmn models
a hierarchical bpmn model represents a nested structure of a process by adding sub-
processes and intermediate cancellation events (fig. 8).
as it follows from fig. 8, a subprocess is an activity, which forms a container with
inner ﬂow nodes, such as start/end events, other activities, and gateways. it means that
an activity can correspond to another core bpmn model, which in turn can also contain
compound activities.
the behavior of hierarchical bpmn models is built on top of the behavior of core
10core bpmn 
model 
bpmn model 
with resources 
lane set 
(from 
process)1
1
lane 
(from 
process)
0..1
+parentlane 0..1
+childlaneset +lanes *1+laneset *flow node 
(from 
common)
* +lanes +flownodesrefs figure 7: a meta-model for bpmn models with resources.
core bpmn 
model 
hierarchical 
bpmn model 
lane set 
(from 
process)
lane 
(from 
process)0..1+parentlane 0..1
+childlaneset 
+lanes 
*1
+laneset flow 
elements 
container 
(from 
common)+flowelements 
container 
0..1+lanesets *
flow 
element 
(from 
common)* +flowelements 
flow node 
(from 
common) *+lanes 
+flownodesrefs *
activity 
(from 
activities)sub 
process 
(from 
activities)1
*
event 
(from 
events)catch event 
(from 
events)boundary 
event 
(from 
events)
+attachedtoref +boundaryeventrefs 
1**1
figure 8: a meta-model for hierarchical bpmn models.
bpmn models and extends their semantics to execute non-atomic activities, i.e., sub-
processes.
each subprocess can be activated iff one of the incoming sequence ﬂows contains
a token and there are no tokens inside the subprocess and its nested subprocesses. an
activated subprocess consumes a token from an incoming sequence ﬂow and produces
a token to each outgoing sequence ﬂow of the inner start event. if the subprocess
terminates normally (all tokens are consumed by non-cancellation end events), then a
token is passed to each regular outgoing sequence ﬂow. in cases of a cancellation, the
11subprocess is terminated and the control is passed to an outgoing sequence ﬂow marked
by a corresponding boundary event . we will assume that boundary events are attached
to subprocesses only. in other words, we will not consider boundary events attached to
atomic activities without an inner structure.
an example of a subprocess is presented in fig. 9. an end cancellation event and a
corresponding boundary event are marked with a cross sign .
d
c
ba
figure 9: an example of a bpmn model with a subprocess.
3.3.5 integrated bpmn models
integrated bpmn models incorporate all process modeling perspectives introduced
above (see fig. 10 below).
we will assume that an integrated bpmn model consists of core bpmn models,
and each core bpmn model representing a subprocess or a root process, can be ex-
tended by both resources and data. a lane set can belong to a ﬂow elements container,
which is represented by a process or a subprocess (fig. 8). that means, each lane
set may be contained by a subprocess or a process. that also holds for data, since
(according to the bpmn speciﬁcation) each subprocess may have its own variables.
core bpmn 
model 
hierarchical 
bpmn model bpmn model 
with resources bpmn model 
with data 
integrated bpmn 
model 
figure 10: a meta-model for integrated bpmn models.
124 a framework for discovering integrated bpmn
models
this section presents a framework for discovering multi-perspective hierarchical bpmn
models. firstly, techniques for mining various modeling perspectives are discussed,
and then a novel integrated discovery approach is introduced.
4.1 transforming flat process models to bpmn
flat process models, such as petri nets, causal nets (van der aalst et al. 2011) and
process trees (leemans et al. 2014) can be obtained from event logs using existing
process discovery techniques.
to take advantages of the vast number of existing process discovery techniques
producing petri nets (leemans et al. 2014, van der aalst et al. 2003, bergenthum et al.
2007, van der aalst et al. 2008), an approach for the transformation of labeled petri
nets to bpmn, is used as a basis in this work. this transformation approach is in-
troduced by examples in this subsection. the detailed description of the control-ﬂow
transformations can be found in (kalenkova et al. 2017). these transformations were
implemented as plugins (kalenkova et al. 2014) for prom (van dongen et al. 2005) –
an open-source framework for developing process mining algorithms.
as an example, consider a labeled petri net, which models a simple booking process
(fig. 11). in this process people use an information system to register, book a ﬂight,
a hotel, rent a car, and pay. labeled transitions represent actions, while transitions
highlighted in black are invisible.
register book 
flight 
pay book 
hotel 
rent 
car 
figure 11: a labeled petri net of a
booking process.according to petri net semantics, users
can perform booking actions in any order,
moreover, they can skip some of the actions
(in that case corresponding invisible transi-
tions are ﬁred).
this labeled petri net can be auto-
matically transformed to a bpmn model
(fig. 12), using an existing transformation al-
gorithm (kalenkova et al. 2017). this algo-
rithm converts a labeled petri net to a core
bpmn model in such a way that for each
visible transition there exists one, and only one, activity with the same label. it was
proven (kalenkova et al. 2017) that the target core bpmn model has the same behav-
ior as the initial labeled peri net. moreover, the target bpmn model is a connected
graph with nodes lying on paths from the start to an end event.
the resulting core bpmn model (fig. 12) complies with the meta-model presented
in fig. 2. it contains activities, a start and an end event, exclusive/parallel gateways,
and sequence ﬂows. note that sequence ﬂows can connect arbitrary ﬂow nodes, thus,
invisible transitions are not added to the process model (fig. 12).
this bpmn model can be simpliﬁed and transformed to a model with inclusive
gateways (fig. 13), which compactly represents routing constructions.
13start 
event parallel 
gateway exclusive 
gateway 
exclusive 
gateway 
exclusive 
gateway book hotel 
register book flight 
rent car exclusive 
gateway 
exclusive 
gateway 
exclusive 
gateway parallel 
gateway 
pay 
end 
event figure 12: a bpmn model constructed from the labeled petri net presented in fig. 11.
start 
event inclusive 
gateway book hotel 
register book flight 
rent car inclusivel 
gateway 
pay end 
event 
figure 13: a bpmn model with inclusive gateways obtained form the bpmn model
presented in fig. 12.
4.2 converting petri nets with data to bpmn models with data
in order to transform a petri net with data to a target bpmn model, ﬁrst this petri net
should be converted to a core bpmn model, using an algorithm described in (kalenkova
et al. 2017).
after that, variables, read and write functions, and transition guards are trivially
transformed to data objects, input and output data associations, and conditional expres-
sions respectively.
to illustrate the conversion of transition guards let us consider a fragment of a petri
net presented in fig. 14 a. and a corresponding fragment of a data bpmn model shown
in fig. 14 b.
figure 14: conversion of data objects, data associations and guards.
this example shows that each transition guard is transformed to a conditional ex-
pression of a corresponding sequence ﬂow.
144.3 enhancing core bpmn models by adding resources and
subprocesses
in this subsection an approach for the enhancement of core bpmn models by adding
resources and subprocesses will be introduced.
the resource-based enhancement algorithm takes a core bpmn model and an event
log as input parameters and enhances the bpmn model with resources by specifying a
function, which maps activities and other elements to lanes, producing a bpmn model
with a set of resources. this approach puts each activity of a core bpmn model to
an aggregate resource (or lane), taking into account the resource attributes of corre-
sponding events. note that different corresponding events in a log can be associated
with different resources. we assume that activities connected by sequence ﬂows (pos-
sibly through a series of gateways) which have a certain number of common resources
belong to the same lane. all nodes of other types (gateways, events) are attached to
one of the resources of the "neighboring" activities. for a detailed description of the
approach please refer to (burattin et al. 2013).
similarly to resources, subprocesses are deﬁned using additional information pre-
sented in event logs. in this work we construct hierarchical bpmn models with subpro-
cesses using the localized logs process discovery technique proposed earlier in (van der
aalst et al. 2015).
each event in the event log can be assigned to a so-called region . as it will be
shown later in section 5, such event logs can be found in many application domains.
moreover, if there is no information on the events’ localization, then the event log can
be enriched with additional data using expert knowledge.
let us give a deﬁnition of a localized event log (van der aalst et al. 2015). a
localized event log is a tripletll= (l;reg;loc), wherel2 b(e)is an event
log,regis a set of regions (or localizations), and loc:e!p ne(reg)[7]. we will
consider only stable localized event logs. a localized event log ll= (l;reg;loc)
withl2b(e)is called stable iff8e1;e22e, such thate1= (a1;f1),e2= (a2;f2),
anda1=a2, holds loc(e1) =loc(e2).
the localized logs discovery approach performs a construction of a target labeled
petri net from a localized event log ll= (l;reg;loc),reg=freg1;:::;regkg,l2
b(e)in three steps:
1. for each region regi2rega labeled petri net pni= (pi;ti;fi;m initi;m ﬁnali;li)
is discovered from a projection of the log l"eion a set of events ei=fe2
ejregi2loc(e)g, using one of the existing process discovery techniques in such
a way that8t1;t22trifli(t1) =li(t2), thent1=t2, i.e., all transitions are
uniquely labeled;
2. a resulting labeled petri net pnu= (p;t;f;m init;m ﬁnal;l)is deﬁned as a
union of all discovered labeled petri nets pn1;:::;pnk, where transitions with
the same labels are merged, these transitions deﬁne start and end points of the
nested subprocesses;
3. all structurally redundant hanging places are removed.
15after the above, using the approach (kalenkova et al. 2017), the resulting petri
net is converted to a bpmn model, where all subgraphs, corresponding to concrete
regions, form subprocesses. compared with the approaches discussed in (conforti
et al. 2014, 2016), we provide language inclusion properties of the subprocesses that are
discovered. in the next section we will demonstrate how to integrate all the introduced
discovery techniques to learn hierarchical multi-perspective bpmn models.
4.4 integrated discovery approach
localized 
event log ll
filtering
discovering petri netsevent log l1 event log lk…
labeled petri 
net pn1... ...
labeled petri 
net pnk
replaying event logs…
 labeled  petri net pn1
alignment   a1... ...
merging petri nets
and replay results
 petri net with 
data dpn
bpmn model with data 
bpmn data
integrated bpmn 
model (with data) 
bpmn'i 
 core bpmn 
model bpmn 1 core bpmn 
model bpmn m
integrated bpmn 
model (with data and 
resources) bpmn i  labeled  petri net  pnk
alignment 
  ak
labeled petri 
net pn  alignmenta
discovering petri net 
with data
convert to bpmn
construct subprocesses
discover roles
figure 15: the integrated discovery approach
presented in this paper.this subsection presents an inte-
grated discovery approach for con-
structing hierarchical multiperspec-
tive bpmn models. this approach
incorporates all methods introduced
above.
the entire schema of the ap-
proach is presented in fig. 15. first,
a localized event log llis ﬁltered
and logsl1;:::;l kcorresponding to
regions are extracted.
after that labeled petri nets
pn1;:::;pnkare discovered from
these event logs using any of the
existing discovery techniques (lee-
mans et al. 2014, van der aalst
et al. 2003, bergenthum et al. 2007,
van der aalst et al. 2008).
then each event log liis re-
played on the corresponding labeled
petri net pniand an alignment
ai(replay sequences of steps, in-
cluding synchronous log and model
moves, log only and model only
moves) is constructed. these petri
nets and alignments are merged to
a uniﬁed labeled petri net pnand
a corresponding pseudo-alignment
a0, which in the general case may
contain replay sequences with merge
conﬂicts (verbeek & van der aalst
2016). all the replay sequences con-
taining merge conﬂicts are ﬁltered
out froma0or (if it is possible) re-
solved, and an alignment awithout
conﬂicts is obtained.
next a method for enriching
16petri nets with data recorded in the event logs using corresponding align-
ments (de leoni & van der aalst 2013) is applied, and as a result a petri net with
data, e.g., dpn , is obtained.
then the petri net with data is converted to a bpmn model with data bpmn dataus-
ing existing conversion techniques introduced above, thoroughly presented in (kalenkova
et al. 2017, 2014).
after that, on the basis of the localization information contained in the initial event
log, subprocesses are constructed within bpmn data, and an integrated model bpmn0
i,
containing core models bpmn 1, ...,bpmn menriched with data, is produced.
then the core models bpmn 1, ..., bpmn mare enriched with resources on the
basis of information presented in the corresponding event logs. and ﬁnally, the target
integrated bpmn model bpmn iis constructed.
note that log partitioning allows to reduce the total computational time. log par-
titioning works especially well for algorithms of enriching petri nets with data, since
they involve replay techniques, which are known to be time consuming for large models
and logs.
5 case studies
in this section we evaluate the integrated discovery approach developed as a plugin
within the multiperspectiveminer package for prom (process mining) framework (van
dongen et al. 2005) – an open source extensible platform, widely used for the analy-
sis of event logs. first, we show that our discovery approach can assist in extracting
in-depth knowledge from real-life event logs and represent them in terms of conve-
nient bpmn models. then behavioral and structural characteristics of bpmn models
discovered from the real-life event logs are obtained. finally, using these structural
characteristics the discovered bpmn models are compared to the manually created
bpmn models from the signavio model collection.
5.1 discovering multiperspective bpmn models
subsections 5.1.1, 5.1.2, and 5.1.3 contain information on the event logs of municipal,
booking, and banking systems respectively as well as multiperspective bpmn models
discovered from these event logs.
5.1.1 discovering municipal processes
first, we took event logs from building permission administrative processes of ﬁve
dutch municipalities (van dongen 2015) (containing 1;199, 832, 1;409,1;053, and
1;156traces respectively) and analyzed them. these event logs contain information on
processes managed by an information system and performed by human resources. a
fragment of one of the event logs after preprocessing is shown in table 2.
each row represents an event occurrence and contains a case id , anactivity name ,
atimestamp , aresource identiﬁer , asubprocess name (derived from an original event
code), and a value of additional question parameter. this fragment of the log describes
17case id activity name timestamp resource id subprocess question
name
5772892application
received2012-09-04 560912 hoofd empty
t13:12:34
5772892send
conﬁrmation2012-09-04 560912 hoofd true
t13:12:36
5772892enter date ac-
knowledgment2012-09-04 560912 hoofd empty
t13:16:20
5772892forward to the
competent2012-09-04 560912 drz false
authority t13:16:24
5772892start regular
procedure2012-09-04 560912 bpt true
without mer t13:16:24
... ... ... ... ... ...
5772892publish
document2012-10-23 560890 hoofd true
t15:48:36
table 2: event log of a dutch municipality processes.
one case of the building permission process. first, resource 560912 receives an appli-
cation, then sends a conﬁrmation of receipt and enters a date of acknowledgment (all
these activities are performed within the main subprocess hoofd ), after that within
thedrz subprocess resource 560912 decides not to forward the application to the com-
petent authority (note that the value of the question parameter is set to false ), and ﬁnally
he or she starts a regular procedure of application processing without mer (assessment
of the impact on the environment) within the bpt subprocess. then, after several steps
of the application processing, another resource 560890 publishes a document with a
ﬁnal decision.
the resulting bpmn model describes a building permission process and contains
13 subprocesses with control-ﬂow obtained on the basis of the inductive miner (lee-
mans et al. 2014) using the subprocess name attribute for the subprocesses’ identiﬁca-
tion.
the data and resource perspectives were discovered by (de leoni & van der aalst
2013) and (burattin et al. 2013) algorithms respectively. constructing resources within
subprocesses allowed to build a more detailed diagram and signiﬁcantly reduce time
costs for the resource discovery. moreover, the division of the model into subprocesses
made it possible to apply the data perspective mining technique (de leoni & van der
aalst 2013) which relies on the model and log alignment (and thus known to be possi-
bly time consuming as logs and models get bigger).
now let us consider the discovered bpmn model in details. a fragment of the bpt
subprocess is presented in fig. 16.
18figure 16: a fragment of the bpt subprocess.
as it follows from the diagram, the decision whether or not to process an applica-
tion with mer (assessment of the impact on the environment) depends on the value
of the question data variable. this dependency was automatically discovered and rep-
resented within the diagram. according to the log (tab. 2) the choice was made (the
variable assigned a value) in the previous step, when a performer decided whether the
application should be forwarded to a competent authority. the other exclusive choice
gateway (fig. 16) also has a guard depending on the value of the question data variable.
cases are split according to the procedure type ( regular or not). note, that just like in
the previous case the value of the variable is deﬁned in the preceding step (here it is
deﬁned by activities regular procedure ).
another fragment of the diagram, containing the ops subprocess, is presented in
fig. 17. it illustrates the applicability of the resource discovery approach.
figure 17: a fragment of the ops subprocess.
the subprocess ops describes a procedure of suspending an application and is
performed by two roles. as it follows from the diagram, role 2 is responsible for
the technical steps, such as registration of suspension, ﬁnding a reason for suspension
and forwarding the application to a competent authority. while role 1 is a role of a
competent authority, who deﬁnes the terms.
the basic approach constructs subprocesses with one entry and one exit. however,
in some cases it may be feasible to construct subprocesses with multiple exits. one of
these exits may represent a normal subprocess termination, while the other exists stand
for exceptional terminations. the localized logs approach can be extended to construct
subprocesses with multiple exits. this requires to enrich the event log with additional
19information about terminating events.
figure 18 presents a fragment of the eind subprocess, constructed for the event log
enriched with additional cancellation attributes. this subprocess describes a termina-
tion procedure. if the result of terminate on request activity is true(i.e., it was decided
to terminate the entire process), then a cancellation occurs and a token is produced to
an outgoing sequence ﬂow marked with a corresponding boundary cancellation event,
leading to the ﬁnal process activity. whereas, it was decided not to terminate the en-
tire process, the subprocess eind terminates normally, and a token is produced to an
ordinary outgoing sequence ﬂow, resuming execution of the entire process.
figure 18: a subprocess with a cancellation event.
5.1.2 discovering a booking process
a real-life event log of a ticketing system was analyzed as well. this log contains
774 traces and describes the behavior of a web-based system used for searching and
booking the ﬂights. each trace of the log represents user interactions with the ticketing
system. the user can buy a ﬂight and get an insurance. for that purpose he or she
needs to ﬁll-in the form with personal data, choose an insurance type, choose a type of
payment, and pay.
a hierarchical bpmn diagram discovered from the event log contains personal
data entry ,registration of insurance , and payment subprocesses. a fragment of the
personal data entry subprocess is presented in fig. 19.
the resource perspective shows that different groups of users perform different
steps within the subprocesses.
as it follows from this diagram, there are two groups of users: the ﬁrst group ﬁlls
the forms in order to buy a ﬂight, while users from the other group just check-in/check-
out the document expiry date checkbox. another important observation is that users
ﬁll the form ﬁelds in an arbitrary order: the parallel gateway splits the control-ﬂow into
several subﬂows, each of which corresponds to a concrete ﬁeld of the personal data
form.
20figure 19: a fragment of the personal data entry subprocess.
5.1.3 discovering a banking process
figure 20: a fragment of the ser-
vice subprocess.another event log being analyzed is a small (66
traces) software log of a banking information
system, which consists of three program layers
(front ,service ,database ) and handles the user re-
quests. first, a user request is received by the
front layer and transmitted to the next service
layer.
the service layer implements a business logic
of the process, interacting with the database layer
to store and retrieve data. each program layer was
discovered as a subprocess. fig. 20 shows a frag-
ment of the service layer: an exclusive gateway
with guards identiﬁes types of operations (types of requests) and passes the control to
corresponding outgoing sequence ﬂows.
5.2 analyzing discovered bpmn models
in the previous subsection we have discussed the capability of the integrated discov-
ery approach to build relevant multiperspective bpmn diagrams from real-life event
logs. now let us consider behavioral and structural characteristics of bpmn models
discovered from the real-life event logs.
for the experiments we have chosen 7 real-life event logs: 5 event logs of building
permission administrative processes of dutch municipalities (denoted as m1-m5), an
event log of a ticketing system ( ts), and an event log of a banking system ( bs). these
event logs are described in the subsections 5.1.1, 5.1.2, and 5.1.3 respectively. for
mining data and resource perspectives, approaches (de leoni & van der aalst 2013)
and (burattin et al. 2013) were used. to discover subprocesses, all the event logs were
preprocessed (the information needed for the events localization was learned from the
21event attributes) and then a discovery approach (van der aalst et al. 2015) was ap-
plied. the inductive miner technique (leemans et al. 2014) was used as an underlying
control-ﬂow discovery method. the discovered petri nets were converted to bpmn
models using an algorithm presented in (kalenkova et al. 2017).
since the aim of the work is to discover readable and convenient process models,
the analysis of their structural characteristics is meaningful. next to these structural
characteristics we need to estimate behavior parameters of models to evaluate their
quality with respect to the initial event logs. in order to relate initial event logs and
discovered process models, we consider three standard metrics: ﬁtness ,precision and
generalization (van der aalst 2016). fitness shows if the model can replay a given
event log. if all the traces of the log can be replayed by a model then the value of
theﬁtness function is 1. if there are non-ﬁtting traces, then corresponding alignments,
represented as sequences of synchronous and asynchronous steps performed to replay a
trace on a model, are calculated and penalties are estimated in such a way that the value
of the ﬁtness function will be decreased proportionally to the number of asynchronous
log and model moves in the alignment. the detailed description of the ﬁtness function
can be found in (van der aalst et al. 2012). in this work we calculate the ﬁtness
value of each subprocess, merge alignments using the approach presented in (verbeek
& van der aalst 2016), and then semi-automatically resolve merge conﬂicts to obtain
the overall alignments and corresponding ﬁtness values.
having a ﬁtting process model is not sufﬁcient, because it is easy to construct a
process model that can replay any trace, but overﬁts or underﬁts behavior observed
in the event log. thus, additional process metrics: precision andgeneralization are
needed (van der aalst 2016). the precision shows if the model does not allow too much
behavior, i.e., it does not underﬁt the event log. the generalization metric indicates
whether the model is general enough, i.e., the model is not overﬁtting.
tab. 3 compares behavioral characteristics of the models discovered using local-
ization information and models discovered directly from m1-m5event logs. for the
behavioral characteristics of the models discovered from tsandbsevent logs please
refer to (van der aalst et al. 2015). the process models constructed from the event
logs m1-m3using the localized logs approach are more ﬁtting than the corresponding
process models constructed directly. however, the models discovered from the event
logs m4-m5using localization information are less ﬁtting, because root subprocesses
in these models do not agree with the event logs on activities, which correspond to the
beginning of child subprocesses. skipping a shared event when aligning an event log
and a parent process may lead to skipping all events of the corresponding subprocess.
this can decrease the total ﬁtness value.
structural metrics of process models highly correlate with their readability. the
following structural metrics were considered during the analysis of the discovered
models: number of nodes, including the number of atomic activities, xor (exclusive)
gateways, and (parallel) gateways, data objects, subprocesses, and swimlanes; num-
ber of control-ﬂows; density (ratio of the number, to the possible maximum number
of control-ﬂows); diameter (the maximal shortest path from the start node to a graph
node); depth (maximal nesting of the graph); number of child nodes for compound
nodes. as it was statistically shown in (sánchez-gonzález et al. 2010), the number of
nodes, density, diameter, and depth have a negative correlation with the process model
22log fitness precision genera-
traces lization
m1 0.94 / 0.88 0.14 / 0.15 1.00 / 0.99
m2 0.96 / 0.88 0.14 / 0.12 1.00 / 0.99
m3 0.94 / 0.93 0.12 / 0.11 0.99 / 0.99
m4 0.80 / 0.89 0.13 / 0.12 0.99 / 0.99
m5 0.75 / 0.93 0.14/ 0.11 1.00 / 1.00
table 3: behavioral characteristics of process models discovered from the event logs
with and without application of the localized logs approach. the inductive miner was
used as an underlying discovery technique.
understandability. thus, we were especially interested in these metrics. structural
metrics of the discovered process models are presented in table 4.
number of number of number
log activities, num- swim- number of of data
traces xor, and ber of lanes child nodes density diameter depth objects
gateways ﬂows and sub- and
processes guards
m1 180, 24, 60 350 13, 14 124 / 1 / 12.8 0.003 35 / 4 / 10.6 3 2, 5
m2 235, 49, 72, 2 482 11, 22 191 / 1 / 13.2 0.003 44 / 4/ 12.7 3 2, 3
m3 238, 44, 66 494 10, 22 31 / 1 / 7.7 0.003 27 / 4/ 10.5 2 2, 6
m4 265, 44, 72 504 14, 37 134 / 1 / 9.5 0.002 31 / 4 / 13.8 3 2, 5
m5 255, 44, 88 512 13, 42 177 / 1 / 9.5 0.002 35 / 4 / 12.4 3 2, 3
ts 59, 4, 20 134 6, 5 47 / 1 / 12.0 0.009 13 / 2 / 7.3 3 6, 4
bs 74, 4, 10 159 4, 4 31 / 2 / 16 0.1 11 / 2 / 7.0 3 3, 4
table 4: structural characteristics of process models discovered from the event logs[8].
these structural characteristics of the discovered process models were compared
with the characteristics of the bpmn models constructed manually. for that reason
the existing signavio collection of 4781 bpmn models from various domains was an-
alyzed. the results based on the signavio collection analysis are presented in table 5.
for each parameter maximal, minimal and average values are speciﬁed.
number of number of number
activities, num- swim- number of of data
xor, and ber of lanes child nodes density diameter depth objects
gateways ﬂows and sub- and
processes guards
34/ 0/ 7.2, 38/ 0/ 14.6, 20/ 0/ 0.74,
16/ 0/ 2, 27/ 0/ 3.4 14/ 0/ 0.5 68/ 0/ 4.4 0.87/ 0/ 0.1 25/ 1/ 8 8/ 1/ 2.7 6 /0 /0.008
14/ 0/ 0.66
table 5: structural characteristics of bpmn models from the signavio model collec-
tion[8].
although the total number of elements in the discovered process models is signiﬁ-
cantly higher that in manually created bpmn models, structural characteristics within
containers (subprocesses and swimlanes), such as diameter (only for subprocesses) and
number of child nodes, are comparable. thus, an automatically discovered (sub)model
within a subprocess or a swimlane resembles a manually created model by its struc-
tural characteristics. the maximum values for the number of child nodes of the dis-
covered bpmn models were typically found in the main subprocesses whereas other
23subprocesses were comparable to the manually created models. thus, in contrast to the
approach of discovering large ﬂat bpmn models from real-life event logs (kalenkova
et al. 2017), we showed that the proper identiﬁcation of subprocesses, helps to discover
readable and convenient process models.
moreover, the decomposition (extraction of subprocesses) signiﬁcantly reduces the
discovery time. thus, using a laptop with 2.4ghz processor and 4gb ram, it takes
less than a minute to discover a bpmn model from any of the real-life event logs. in
the meantime, the discovery of multi-perspective bpmn models without identiﬁcation
of subprocesses cannot be performed in a reasonable amount of time, using a computer
with the same characteristics.
6 conclusion
this paper reported on a methodology to discover bpmn models that integrate several
perspectives and support the “divide-et-impera” paradigm, where the model is hierar-
chically broken down into several subprocesses.
section 2 discusses the related work. in section 3 the main concepts, such as petri
nets and bpmn modeling constructs, including data, resources and subprocesses, are
introduced. section 4 presents a novel integrated approach to discover hierarchical
multi-perspective process models. case studies are thoroughly described in section 5.
the overall methodology can be summarized as follows. first, the event log is split
into smaller event logs. the case studies reported in this paper illustrate that this is
often possible by leverage of domain knowledge. for each sub-log, we can discover
the control-ﬂow structure of the process, which is used as a sort of process backbone,
initially in the form of a labeled petri net. subsequently, the projected log is replayed
on these individual, generally, much smaller, labeled petri nets. through the replay,
we can add information on input and output data and we can even learn guards. the
resulting data petri net can be converted to a hierarchical bpmn model and resource
information can be added at each level of granularity. this results in a hierarchical
bpmn model that integrates the different perspectives.
the work was thoroughly validated with real-life event logs. the validation illus-
trates the pros of our framework in giving insights that are more accurate, incorporating
several process perspectives, and more understandable, with the process model struc-
tured in sub-models. an added bonus is that the splitting of the logs also improves
performance.
compared with the past research this framework is the ﬁrst attempt to integrate
several existing approaches with the aims of discovering multi-perspective hierarchical
bpmn models. note that, while the framework is showcased with several techniques,
it is possible in the future to integrate other techniques and also extend to other per-
spective, for example, the time.
in fact, the time perspective is certainly an avenue for future work. another impor-
tant direction of work is the discovery of interacting processes in a form of pools and
messages communicating these pools. it is also worth extending the framework to al-
low process analysts to compare the discovered bpmn models (a.k.a. “as-is models”)
with the supposed models (a.k.a. “to-be models”) that encode the knowledge of the
24stakeholders. by comparing the “as-is model” with the “to-be model”, one can better
pinpoint where deviations lie between what process participants should do and what
they actually do.
notes
1.b(x)denotes a set of multisets over x.
2. note that invisible steps in the process model do not need to be observed in the
event log.
3.9denotes a partial function, which is deﬁned for a subset of domain elements.
4. if transition tis not explicitly associated with a guard, we assume that g(t) =
true .
5. note that in order to avoid multiple ﬁrings of the start event, we assume that it
cannot be enabled.
6. despite the fact that an assignment of lanes is not strictly deﬁned in the bpmn
2.0 speciﬁcation, most frequently they are used to model resources.
7.pne(x)deﬁnes a set of non-empty subsets of x.
8. the maximal, minimal and average values are separated by a slash, the values of
metrics for different types of elements are separated by comma.
references
batoulis, k., meyer, a., bazhenova, e., decker, g. & weske, m. (2015), extracting
decision logic from process models, in‘caise 2015’, v ol. 9097 of lncs , springer,
pp. 349–366.
bazhenova, e., bülow, s. & weske, m. (2016), discovering decision models from
event logs, in‘bis 2016’, v ol. 255 of lnbip , springer, pp. 237–251.
bergenthum, r., desel, j., lorenz, r. & mauser, s. (2007), process mining based on
regions of languages, in‘business process management’, springer berlin heidel-
berg, berlin, heidelberg, pp. 375–383.
burattin, a., sperduti, a. & veluscek, m. (2013), business models enhancement
through discovery of roles, in‘ieee symposium on computational intelligence and
data mining 2013’, pp. 103–110.
conforti, r., dumas, m., garcía-bañuelos, l. & la rosa, m. (2014), beyond tasks
and gateways: discovering bpmn models with subprocesses, boundary events and
activity markers, in‘business process management: 12th international conference
2014, proceedings’, springer, pp. 101–117.
25conforti, r., dumas, m., garcía-bañuelos, l. & la rosa, m. (2016), ‘bpmn miner:
automated discovery of bpmn process models with hierarchical structure’, infor-
mation systems 56, 284 – 303.
de leoni, m. & van der aalst, w. (2013), data-aware process mining: discovering
decisions in processes using alignments, in‘proceedings of the 28th annual acm
symposium on applied computing, 2013’, pp. 1454–1461.
de smedt, j., hasic, f., vanden broucke, s. & vanthienen, j. (2017), towards a holistic
discovery of decisions in process-aware information systems, in‘bpm 2017’, v ol.
10445 of lncs , springer.
de weerdt, j., van den broucke, s. & caron, f. (2014), bidimensional process discov-
ery for mining bpmn models, in‘bpm 2014 international workshops’, springer,
pp. 529–540.
decision model and notation (dmn) v1.1 (2016).
url: http://www.omg.org/spec/dmn/1.1/
dijkman, r., dumas, m. & ouyang, c. (2008), ‘semantics and analysis of business
process models in bpmn’, information & software technology 50(12), 1281–1294.
kalenkova, a., de leoni, m. & van der aalst, w. (2014), discovering, analyzing and
enhancing bpmn models using prom, in‘proceedings of the bpm demo session
2014 co-located with bpm 2014’, pp. 36–40.
kalenkova, a., van der aalst, w., lomazova, i. & rubin, v . (2017), ‘process mining
using bpmn: relating event logs and process models’, software & systems model-
ing16(4), 1019–1048.
kheldoun, a., barkaoui, k. & ioualalen, m. (2015), speciﬁcation and veriﬁcation of
complex business processes - a high-level petri net-based approach, in‘business
process management: 13th international conference 2015, proceedings’, springer,
pp. 55–71.
leemans, s., fahland, d. & van der aalst, w. (2014), discovering block-structured
process models from incomplete event logs, in‘application and theory of petri
nets and concurrency’, v ol. 8489 of lecture notes in computer science , springer
international publishing, pp. 91–110.
mannhardt, f. (2018), multi-perspective process mining, phd thesis, tue: department
of mathematics and computer science.
mannhardt, f., de leoni, m., reijers, h. & van der aalst, w. (2016), measuring the
precision of multi-perspective process models, in‘business process management
workshops’, lecture notes in business information processing, springer, germany,
pp. 113–125.
26muehlen, m. & recker, j. (2008), how much language is enough? theoretical and
practical use of the business process modeling notation, in‘proceedings of the
20th international conference on advanced information systems engineering’, v ol.
5074 of lecture notes in computer science , springer-verlag, berlin, pp. 465–479.
object management group (2013), ‘business process model and notation (bpmn)
2.0.2’.
url: http://www.omg.org/spec/bpmn/2.0.2/pdf
rozinat, a. (2010), process mining : conformance and extension, phd thesis, tue :
department of industrial engineering and innovation sciences.
rozinat, a. & van der aalst, w. (2006), decision mining in prom, in‘business process
management’, springer berlin heidelberg, berlin, heidelberg, pp. 420–425.
sánchez-gonzález, l., garcía, f., mendling, j., ruiz, f. & piattini, m. (2010), pre-
diction of business process model quality based on structural metrics, in‘29th inter-
national conference on conceptual modeling’, v ol. 6412 of lecture notes in com-
puter science , springer, pp. 458–463.
van der aalst, w. (2016), process mining – data science in action, second edition ,
springer-verlag berlin heidelberg.
van der aalst, w., adriansyah, a. & van dongen, b. (2011), causal nets: a modeling
language tailored towards process discovery, in‘22nd international conference on
concurrency theory’, lecture notes in computer science, springer-verlag, berlin,
pp. 28–42.
van der aalst, w., adriansyah, a. & van dongen, b. (2012), ‘replaying history on
process models for conformance checking and performance analysis’, data mining
and knowledge discovery 2(2), 182–192.
van der aalst, w., kalenkova, a., rubin, v . & verbeek, e. (2015), process discovery
using localized events, in‘application and theory of petri nets and concurrency’,
v ol. 9115 of lecture notes in computer science , springer international publishing,
pp. 287–308.
van der aalst, w., rubin, v ., verbeek, h., van dongen, b., kindler, e. & günther, c.
(2008), ‘process mining: a two-step approach to balance between underﬁtting and
overﬁtting’, software & systems modeling 9(1), 87.
van der aalst, w., weijter, a. & maruster, l. (2003), ‘workﬂow mining: discover-
ing process models from event logs’, ieee transactions on knowledge and data
engineering 16, 2004.
van dongen, b. (2015), ‘bpi challenge 2015’.
url: https://data.4tu.nl/repository/uuid:31a308ef-c844-48da-948c-305d167a0ec1
27van dongen, b., medeiros, a., verbeek, h., weijters, a. & van der aalst, w. (2005),
the prom framework: a new era in process mining tool support, in‘application
and theory of petri nets 2005’, v ol. 3536 of lecture notes in computer science ,
springer-verlag, berlin, pp. 444–454.
verbeek, h. & van der aalst, w. (2016), merging alignments for decomposed replay,
in‘application and theory of petri nets and concurrency: 37th international con-
ference 2016, proceedings’, springer international publishing, pp. 219–239.
ye, j., sun, s., song, w. & wen, l. (2008), formal semantics of bpmn process mod-
els using yawl, in‘second international symposium on intelligent information
technology application’, v ol. 2, pp. 70–74.
28