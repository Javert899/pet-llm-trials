using process mining to analyze and
improve process flexibility
- position paper -
wil van der aalst1;2, christian gä unther1, jan recker2, and manfred reichert3
1eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
fw.m.p.v.d.aalst, c.w.gunther g@tm.tue.nl
2queensland university of technology
126 margaret street, brisbane qld 4000, australia
j.recker@qut.edu.au
3university of twente
p.o. box 217, 7500 ae enschede, the netherlands
m.u.reichert@ewi.utwente.nl
abstract. contemporary information systems struggle with the require-
ment to provide °exibility and process support while still enforcing some
degree of control. work°ow management systems are typically consid-
ered as too restrictive while groupware applications (e.g., e-mail) tend to
o®er hardly any process support or control at all. therefore, we consider
adaptive process management systems that allow for run-time changes at
both process type and process instance level (e.g., a system like adept).
assuming that these process changes are recorded explicitly, we discuss
how this information can be used as input for process mining . so far,
process mining has only be applied to operational processes, i.e., knowl-
edge is extracted from event logs (process discovery), or event logs are
compared with some a-priori model (conformance checking). in this pa-
per, we propose to apply process mining to change logs , i.e., we not only
analyze the operational processes but also the adaptations made at the
process type or process instance level. using such analysis, we envisage
to be able to better support °exibility by understanding when andwhy
process changes become necessary.
1 introduction
the notion of °exibility has emerged as a pivotal research topic in business
process management (bpm) over the last years [1{4]. it denotes an essential
requirement for maintaining a close \¯t" between real{word business processes
and the work°ows as supported by process management systems (pmss) [5,
6], the current generation of which is known under the label of process-aware
information systems (pais) [7]. due to continuous and often unprecedented
changes in their business environments [8], the alignment of business processes to
pmss requires continuous attention. the notion of °exibility plays a central rolein this context as not only business processes need to be designed for °exibility
but also their supporting systems. in general, °exibility denotes the ability to
yield to change without loss of identity [9]. business process °exibility is the
capability to react to external changes by modifying only those parts of a process
that need to be changed and keeping other parts stable, viz., the ability to
change the process without completely replacing it [1, 3]. process °exibility can
be classi¯ed according to three dimensions: where does change occur (abstraction
level of change), what is being changed (subject of change), and howis it changed
(properties of change) [10].
recently, many e®orts have been undertaken to make process management
systems more °exible and several approaches for \adaptive" process management
have emerged [11], most of which relate to some aspects of °exibility described
in [10]. the basic idea behind them is to enable dynamic changes of di®erent
process aspects (e.g., control °ow, organizational, functional, and informational
perspectives) and at di®erent process levels (e.g., instance and type level). for
example, ad-hoc changes conducted at the process instance level (e.g., to add
or shift steps) allow to °exibly adapt single process instances to exceptional or
changing situations [12]. as a positive side-e®ect we obtain much more mean-
ingful process logs when compared to existing pmss.
referring to the abstraction level of change, adaptive pmss such as adept
[12, 13] o®er °exibility at both process type level and process instance level [4].
however, so far adaptive pmss have not addressed the fundamental questions
what we can learn from this additional information and how we can derive
optimized process models from it. process mining techniques [14] o®er promising
perspectives in this context, but have focused on the analysis of pure execution
logs (i.e., a behavioral and operational perspective) so far.
this position papers seeks to discuss approaches for the intelligent mining
of °exible processes. this involves three problems: first, we have to determine
which information about ad-hoc process deviations should be logged to achieve
optimal mining results. second, we have to develop advanced mining techniques
which utilize execution and change logs. third, we have to integrate these tech-
niques with existing adaptive pmss in order to provide full process life cycle
support.
section 2 introduces the state-of-the art of process mining. section 3 then dis-
cusses the research problem of providing integrated support of °exible processes
and process mining techniques. therein we will propose and brie°y elaborate on
four dedicated research problems that need to be approached. section 4 closes
this paper by proving some outlook to future work.
2 process mining
process-aware information systems, such as wfm, erp, crm and b2b systems,
need to be con¯gured based on process models specifying the order in which
process steps are to be executed [15]. creating such models is a complex and
time-consuming task for which di®erent approaches exist. the most traditionalone is to analyze and design the processes explicitly making use of a business
process modeling tool. however, this approach has often resulted in discrepancies
between the actual business processes and the ones as perceived by designers
[16]; therefore, very often, the initial design of a process model is incomplete,
subjective, and at a too high level.
instead of starting with an explicit process design, process mining aims at ex-
tracting process knowledge from \process execution logs". process mining tech-
niques such as the alpha algorithm [14] typically assume that it is possible to
sequentially record events such that
{each event refers to an activity (i.e., a well-de¯ned step in the process) and
{each event refers to a case (i.e., a process instance).
moreover, there are other techniques using additional information such as
{the performer, also referred to as originator of the event (i.e., the per-
son/resource executing or initiating the activity),
{the timestamp of the event, or
{data elements recorded with the event (e.g., the size of an order).
this information can be used to automatically construct process models. for
example, the alpha algorithm [14] can construct a petri net model describing
the behavior observed in the log. the multi-phase mining approach [17] can be
used to construct an event process chain (epc) based on similar information. in
the meantime there are mature tools such as the prom framework (cf. figure 1)
to construct di®erent types of models based on real process executions [18].
however, process mining research so far has mainly focused on issues related
to control °ow mining, i.e., a behavioral and operational perspective. di®erent
algorithms and advanced mining techniques have been developed and imple-
mented in this context (e.g., making use of inductive learning techniques or
genetic algorithms). tackled problems include concurrency and loop backs in
process executions, but also issues related to the handling of noise (e.g., ex-
ceptions). furthermore, some initial work regarding the mining of other model
perspectives (e.g., organizational and informational perspectives) has been con-
ducted [19]. for example, work on the mining case handling systems puts more
emphasis informational perspective while social network mining techniques focus
on the organizational perspective.
figure 1 shows a screenshot of prom. prom [18] o®ers a wide variety of
process mining techniques and also supports multiple types of models, e.g., it
is possible to extract a process model represented in terms of an epc, then
convert this to a petri net for analysis purposes (e.g., veri¯cation or simula-
tion), and then translate the model to yawl [20] such that the yawl engine
can immediately execute the discovered models. prom also allows for the anal-
ysis of all perspectives, e.g., discovering social networks, building decision trees,
conformance checking, etc. however, thus far, not speci¯c extensions have been
developed to mine for changes.fig. 1. screenshot of prom.
3 using process mining for improving process
flexibility: a research statement
obviously, the practical bene¯t of process mining depends on the content and
the quality of the available log data. in wfms, for example, respective execution
logs can only re°ect situations the wfms is able to handle. particularly, if the
wfms does not support process instance changes it needs to be bypassed in
exceptional situations (e.g., by executing unplanned process activities outside
the scope of the wfms). consequently, the wfms is unaware of the applied
deviations and thus unable to log (let alone analyze) information about them.
this missing traceability limits the bene¯t of current process mining and delta
analysis approaches signi¯cantly.
but how is the situation if we apply current process mining techniques to
°exible or adaptive processes? since the execution logs of °exible processes re°ect
parts of the applied instance changes we get at least more meaningful results. for
example, for deleted process steps no related event will be recorded in the process
execution log. by contrast, the execution of a newly inserted step will be re°ected
in the execution log (at least if this step was started or ¯nished). though the
mining of respective execution logs is already more promising (when compared
with rigid process executions) we cannot achieve optimal results as long as we
ignore the available knowledge about the reasons and the context of a change. as
a consequence, current process mining techniques are only able to capture the
reactive part of process °exibility but not the stimulus for change. furthermore,
existing mining approaches mainly consider the control °ow perspective, whereasad-hoc changes often constitute a mix of control and data °ow adaptations (as
well as adaptations of other process aspects) to preserve correctness.
in order to achieve integrated support for °exible processes and process min-
ing techniques, several problems have to be addressed. in essence, we see three
main challenges:
1.we have to ¯nd a way to e®ectively discover knowledge about process in-
stance changes.
2.we have to ¯nd a way to e®ectively useknowledge about process instance
changes.
3.we have to ¯nd a way to e®ectively learn from knowledge about process
instance changes.
in order to be able to ultimately design process mining techniques for adaptive
processes, ¯rst of all, we must better understand which kind of information is
needed within the process execution logs. this triggers the ¯rst research question.
problem 1 what information about process changes is needed to achieve opti-
mal mining results?
when designing advanced mining techniques for °exible, adaptive processes
one fundamental question is what type of information about changes needs to be
recorded in order to achieve optimal results. minimally, a change log should keep
syntactical information about the kind and the context of the applied changes
(e.g., the type and position of a dynamically inserted process activity). while
this already helps to incorporate change knowledge into the mining process, it is
by far not su±cient to handle more complex scenarios. one challenging problem
is to enrich change logs with semantical information, i.e., context information
(e.g., about the reasons for a change). for example, assume that in a patient
treatment process an unplanned lab test is dynamically added for a consider-
able number of process instances. then the respective log entries should re°ect
information about the semantical context of these changes (e.g., that insertions
have been mainly applied for patients that are older than 60 years and who
su®er from diabetes) in order to derive optimal process model adaptations (e.g.,
to embed the activity to be inserted in a conditional branching with respective
transition conditions when bringing this change up to the process type level).
many challenging issues arise, e.g., how to gather the semantical information,
how to represent it in the logs, how to make it e±ciently accessible, etc.
there are more challenges related to problem 1. for instance, how can such
context information best be structured and described in change logs? what
process changes require what type of context information? how do you treat
noise in change logs?
anticipating a solution to these and other related questions triggers the ques-
tion of how process mining can be adapted to consider this additional data.
existing techniques are mainly limited to the control °ow perspective, hence,
problem 2 arises:problem 2 how to apply mining techniques to learn from °exible processes?
a solution to this problem needs to be based on the combined analysis of
process models, related execution logs and change logs. syntactical information
contained in change logs allows us to deduce adapted versions of the initial pro-
cess models, and to categorize changes based on their structural e®ect on the
process. from the combination of all versions of the process models and their
respective execution logs, a process mining algorithm can detect bottlenecks
and malfunctions. these problems can then be traced back to change operations
that have potentially caused them, and thus provide means for the evaluation of
changes. context information from change logs will provide semantic information
about the drivers of process changes, and can potentially be used to categorize
these changes in a meaningful manner. the result of such process mining tech-
nique should be a categorized set of abstract changes, indicating those that have
led to execution problems.
whether or not existing process mining techniques can be adapted or ex-
tended, the mining of process change logs poses additional challenges that have
to be tackled. first, mining techniques should examine change operations from
all process-relevant perspectives (e.g., control °ow, organizational, etc.). this is
a precondition for achieving a comprehensive solution, which is able to capture
the nature of changes adequately. second, process mining procedures should
consider the semantics of the applied change operations (e.g., add, delete or
shift process steps) when comparing instance changes, determining their degree
of overlap, etc. third, semantical information about the context of a change
should be taken into consideration as far as possible (cf. problem 1). fourth,
we have to cope with variations regarding change de¯nitions. note that ad-hoc
changes applied to a collection of process instances of the same type are usually
performed by di®erent users. even if two ad-hoc changes deal with the same ba-
sic situation there can be variations regarding their de¯nition, e.g., with respect
to the level of granularity or the parameterization of the changes (e.g. the posi-
tion an activity is added to). depending on their level of experience users may
perceive or perform a certain task in di®erent ways. in a hospital, for example,
junior physicians tend to document their work in a more ¯ne-grained way when
compared to senior physicians. by considering such factors as well, we could
obtain di®erent variants of the same process model, which leads to problem 3:
problem 3 how to support the reuse of ad-hoc changes?
current systems do not provide any knowledge about previously applied
process instance changes when a new ad-hoc deviation becomes necessary; viz.,
users have to de¯ne each ad-hoc change from scratch. this does not only lead to
high e®orts and lower user acceptance, but also to greater variability of change
de¯nitions and more noise (cf. problem 1). the enrichment of process change
logs with semantical information (cf. problem 1) provides promising perspec-
tives regarding the \reuse" of changes. in particular, we can apply semantical
information together with other change data to build up case bases where each
ad-hoc change is represented as a particular case. when a user wants to devi-ate from a pre-modeled process in exceptional or unanticipated situations, he or
she can make use of this process knowledge. thereby, the system should allow
either to de¯ne a new process instance change (i.e., to create a new case), or,
if a similar situation has happened before, to reuse a previously de¯ned ad-hoc
change. a solution to this problem could substantially bene¯t from existing work
on case-based reasoning. for example, yawl supports the dynamic selection of
\worklets" using ripple-down rules [21]. this selection could be guided by case-
based reasoning. note that an actor-driven reuse of cases also results in valuable
information about the ad-hoc changes (e.g., how often was the respective change
applied? how did users rate the respective case?), which can be considered by
the mining algorithms to be developed as well.
important challenges arise from the creation and management of such a case
base. the cases need to be organized along the de¯ned, °exible process models,
their di®erent versions, and the related process instances. we see an opportu-
nity to derive a meaningful structure for such case bases from the aforementioned
classi¯cation of process °exibility [10]. furthermore, powerful interfaces for up-
dating and querying case bases are needed. among other requirements this calls
for sophisticated algorithms for arguing about the similarity of ad-hoc changes,
the similarity of the exceptions that triggered the change, the similarity of the
change context, etc.
problem 4 how can an architecture be provided in which solutions for the
aforementioned problems can be implemented?
when providing adequate solutions for problems 1{3 powerful concepts for
the e®ective use of existing knowledge about process instance changes will evolve.
together these concepts make up a framework that enables the reuse of process
knowledge when introducing new ad-hoc changes. it will provide techniques for
learning from the process instance changes and for deriving optimized process
models out of them. however, the practical implementation of these concepts in
a coherent architecture, let alone an integration with existing pms frameworks
such as adept [12] or prom [18] is far from trivial. as an example consider
the maintenance of the case bases mentioned above. when bringing process op-
timizations to the process type level, a solution to problems 1-3 would already
support the migration of running process instances to a new process model ver-
sion. however, not only process models evolve over time, but also the case bases
related to them, and consequently, cases have to be migrated to new process
model versions as well. in particular, the new case base version should only keep
semantic information that still is relevant for process instances of the newly cre-
ated process model (and for changes of them). similar to these issues, there are
various challenges related to the design of a coherent, integrated architecture
providing adaptive process mining of °exible business processes.4 conclusions
this paper reported on the role that process mining can play in providing com-
prehensive support for °exible business processes. we brie°y examined current
state-of-the art of process mining approaches in light of the need for provid-
ing support for °exible (i.e., changing) processes. we investigated how adaptive
pmss can be engineered to maintain °exibility in business processes via ad-
vanced process mining. such a proposal incorporates several research challenges,
some of which we outlined and discussed brie°y.
our line of argumentation rests on the observation that business process °ex-
ibility is closely linked to, if not restrained by, the supporting pms. we argue
therefore that adaptability to °exible processes and changes within these pro-
cesses must be regarded a compulsory design principle for pmss. more specif-
ically, we argue that the engineering of adaptive pmss is dependent on the
provision of syntactic and semantic context information in the form of change
logs. this context knowledge will enable future pms architectures to discover,
use and learn from process changes in an intelligent manner, and will thus make
them adaptive to °exible processes.
in this paper we did not discuss legal, ethical, and social issues related to
process mining. clearly, event logs can be used to systematically measure the
performance of employees. when providing °exibility on the one hand and mon-
itoring deviations on the other hand, workers may feel threatened by the system.
moreover, in some countries there are legal restrictions, e.g., the dutch personal
data protection act (\wet bescherming persoonsgegevens") which is based on
a directive from the european union [22{24]. clearly these issues need to be
addressed carefully. however, there are many ways to deal with these issues,
e.g., explicit employee approval. moreover, tools such as promimport allow for
the automatic \anonymization" of data.
references
1.bider, i.: masking °exibility behind rigidity: notes on how much °exibility people
are willing to cope with. in castro, j., teniente, e., eds.: caise05 workshops,
porto, portugal, feup (2005) 7{18
2.bider, i., regev, g., so®er, p., eds.: proceedings of the 5th workshop on business
process modeling, development and support (bpmds'04). volume 2 of caise'04
workshops. riga technical university, latvia (2004)
3.so®er, p.: on the notion of flexibility in business processes. in castro, j.,
teniente, e., eds.: proceedings of the caise'05 workshops. vol. 1. feup, porto,
portugal (2005) 35{42
4.regev, g., so®er, p., schmidt, r.: taxonomy of °exibility in business processes.
(input bpmds'06 workshop) (2006)
5.van der aalst, w.m.p.: business alignment: using process mining as a tool for
delta analysis and conformance testing. requirements engineering journal 10
(2005) 198{2116.knoll, k., jarvenpaa, s.l.: information technology alignment or \fit" in highly
turbulent environments: the concept of flexibility. in ross, j.w., ed.: com-
puter personnel research conference on reinventing is. acm press, alexandria,
virginia (1994) 1{14
7.dumas, m., van der aalst, w.m.p., ter hofstede, a.h.m., eds.: process aware
information systems: bridging people and software through process technology.
wiley publishing, hoboken, new jersey (2005)
8.quinn, j.b.: intelligent enterprise: a knowledge and service based paradigm for
industry. free press, new york, new york (1992)
9.regev, g., wegmann, a.: a regulation-based view on business process and
supporting system flexibility. in castro, j., teniente, e., eds.: proceedings of the
caise05 workshops. vol. 1. feup, porto, portugal (2005) 91{98
10.regev, g., so®er, p., schmidt, r.: taxonomy of flexibility
in business processes. input to the 7th workshop bpmds'06,
http://lamswww.ep°.ch/conference/bpmds06/taxbp°ex. (2005)
11.rinderle, s., reichert, m., dadam, p.: correctness criteria for dynamic changes
in work°ow systems: a survey. data and knowledge engineering 50(2004) 9{34
12.reichert, m., dadam, p.: adept°ex supporting dynamic changes of work°ows
without loosing control. journal of intelligent information systems 10(1998)
93{129
13.rinderle, s., weber, b., reichert, m., wild, w.: integrating process learning
and process evolution a semantics based approach. in van der aalst, w.m.p.,
benatallah, b., casati, f., curbera, f., eds.: business process management: 3rd
international conference bpm 2005. volume 3649 of lecture notes in computer
science. springer, nancy, france (2005) 252{267
14.van der aalst, w.m.p., weijters, a.j.m.m., maruster, l.: work°ow mining: dis-
covering process models from event logs. ieee transactions on knowledge and
data engineering 16(2004) 1128{1142
15.van der aalst, w.m.p., van hee, k.m.: work°ow management: models, methods,
and systems. mit press, cambridge, massachusets (2002)
16.van der aalst, w.m.p., van dongen, b.f., herbst, j., maruster, l., schimm, g.,
weijters, a.j.m.m.: work°ow mining: a survey of issues and approaches. data
& knowledge engineering 47(2003) 237{267
17.van dongen, b.f., van der aalst, w.m.p.: multi-phase process mining: build-
ing instance graphs. in atzeni, p., chu, w.w., lu, h., zhou, s., ling, t.w.,
eds.: conceptual modeling er 2004: 23rd international conference on concep-
tual modeling. volume 3288 of lecture notes in computer science. springer,
shanghai, china (2004) 362{376
18.van dongen, b.f., alves de medeiros, a.k., verbeek, m., weijters, a.j.m.m.,
van der aalst, w.m.p.: the prom framework: a new era in process mining tool
support. in ciardo, g., darondeau, p., eds.: applications and theory of petri
nets 2005. volume 3536 of lecture notes in computer science. springer, berlin,
germany et al. (2005) 444{454
19.van der aalst, w.m.p., song, m.: mining social networks: uncovering interaction
patterns in business processes. in desel, j., pernici, b., weske, m., eds.: business
process management: second international conference bpm 2004. volume 3080 of
lecture notes in computer science. springer, potsdam, germany (2004) 244{260
20.van der aalst, w.m.p., ter hofstede, a.h.m.: yawl: yet another work°ow
language. information systems 30(2005) 245{27521.adams, m., hofstede, a., edmond, d., aalst, w.: facilitating flexibility and
dynamic exception handling in work°ows. in belo, o., eder, j., pastor, o., falcao
e cunha, j., eds.: proceedings of the caise'05 forum, feup, porto, portugal
(2005) 45{50
22.cbp: college bescherming persoonsgegevens (dutch data protection authority).
http://www.cbpweb.nl/index.htm (2003)
23.hulsman, b., ippel, p.: personeelsinformatiesystemen: de wet persoonsregistraties
toegepast, registratiekamer, the hague (1994)
24.sauerwein, l., linnemann, j.: guidelines for personal data processors: personal
data protection act, ministry of justice, the hague (2001)