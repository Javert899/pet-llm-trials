workﬂow mining: discovering process
models from event logs
w.m.p. van der aalst1,2, a.j.m.m. weijters1, and l. maruster1
1department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tm.tue.nl
2centre for information technology innovation, queensland university of
technology
p.o. box 2434, brisbane qld 4001, australia.
abstract. contemporary workﬂow management systems are driven by
explicit process models, i.e., a completely speciﬁed workﬂow design isrequired in order to enact a given workﬂow process. creating a workﬂow
design is a complicated time-consuming process and typically there are
discrepancies between the actual workﬂow processes and the processes asperceived by the management. therefore, we have developed techniquesfor discovering workﬂow models. starting point for such techniques isa so-called “workﬂow log” containing information about the workﬂowprocess as it is actually being executed. we present a new algorithm toextract a process model from such a log and represent it in terms of a
petri net. however, we will also demonstrate that it is not possible to
discover arbitrary workﬂow processes. in this paper we explore a class ofworkﬂowprocessesthatcanbediscovered.weshowthatthe α-algorithm
can successfully mine any workﬂow represented by a so-called swf-net.
key words : workﬂow mining, workﬂow management, data mining, petri nets.
1 introduction
during the last decade workﬂow management concepts and tech-
nology[4,6,15,26,28] have been applied in manyenterprise infor-mation systems. workﬂow management systems such as staﬀware,ibm mqseries, cosa, etc. oﬀer generic modeling and enactmentcapabilities for structured business processes. bymaking graphical
process deﬁnitions, i.e., models describing the life-cycle of a typical
case(workﬂowinstance)inisolation,onecanconﬁgurethesesystemsto support business processes. besides pure workﬂow managementsystems many other software systems have adopted workﬂow tech-
nology. consider for example erp (enterprise resource planning)systemssuchassap,peoplesoft,baanandoracle,crm(customerrelationship management) software, etc. despite its promise, manyproblems are encountered when applying workﬂow technology. oneoftheproblemsisthatthesesystemsrequireaworkﬂowdesign,i.e.,adesigner has to construct a detailed model accuratelydescribing therouting of work. modeling a workﬂow is far from trivial: it requiresdeep knowledge of the workﬂow language and lengthydiscussions
with the workers and management involved.
instead of starting with a workﬂow design, we start bygathering
information about the workﬂow processes as theytake place. weassume that it is possible to record events such that (i) each eventrefers to a task (i.e., a well-deﬁned step in the workﬂow), (ii) eachevent refers to a case (i.e., a workﬂow instance), and (iii) events aretotallyordered (i.e., in the log events are recorded sequentiallyeventhough tasks maybe executed in parallel). anyinformation sy stem
using transactional systems such as erp, crm, or workﬂow man-
agement systems will oﬀer this information in some form. note thatwe do not assume the presence of a workﬂow management system.the onlyassumption we make, is that it is possible to collect work-ﬂow logs with event data. these workﬂow logs are used to constructa process speciﬁcation which adequatelymodels the behavior regis-tered. we use the term process mining for the method of distilling a
structured process description from a set of real executions.
toillustratetheprincipleofprocessmining,weconsiderthework-
ﬂow log shown in table 1. this log contains information about ﬁvecases (i.e., workﬂow instances). the log shows that for four cases(1,2,3, and 4) the tasks a, b, c, and d have been executed. for theﬁfth case onlythree tasks are executed: tasks a, e, and d. eachcase starts with the execution of a and ends with the execution ofd. if task b is executed, then also task c is executed. however, forsome cases task c is executed before task b. based on the informa-tion shown in table 1 and bymaking some assumptions about thecompleteness of the log (i.e., assuming that the cases are representa-
tive and a suﬃcient large subset of possible behaviors is observed),
we can deduce for example the process model shown in figure 1.the model is represented in terms of a petri net [39]. the petri net
2case identifier task identifier
case 1 task a
case 2 task a
case 3 task a
case 3 task b
case 1 task b
case 1 task c
case 2 task c
case 4 task a
case 2 task b
case 2 task d
case 5 task a
case 4 task c
case 1 task d
case 3 task c
case 3 task d
case 4 task b
case 5 task e
case 5 task d
case 4 task d
table 1. a workﬂow log.
starts with task a and ﬁnishes with task d. these tasks are repre-
sented bytransitions. after executing a there is a choice betweeneither executing b and c in parallel or just executing task e. to ex-ecute b and c in parallel two non-observable tasks (and-split andand-join) have been added. these tasks have been added for rout-ing purposes onlyand are not present in the workﬂow log. note thatwe assume that two tasks are in parallel if theyappear in anyor-
der. however, bydistinguishing between start events and end events
for tasks it is possible to explicitlydetect parallelism. start eventsand end events can also be used to indicate that tasks take time.however, to simplifythe presentation we assume tasks to be atomicwithout losing generality. in fact in our tool emit [5] we reﬁne thiseven further and assume a customizable transaction model for tasksinvolving events like “start task”, “withdraw task”, “resume task”,“complete task”, etc. [5]. nevertheless, it is important to realize thatsuch an approach onlyworks if events these are recorded at the timeof their occurrence.
the basic idea behind process mining, also referred to as work-
ﬂow mining, is to construct figure 1 from the information given in
3aand
-splitb
cand
-join
d
e
fig. 1.a process model corresponding to the workﬂow log.
table 1. in this paper, we will present a new algorithm and prove its
correctness.
process mining is useful for at least two reasons. first of all, it
could be used as a tool to ﬁnd out how people and/or procedures
reallywork. consider for example processes supported byan erpsystem like sap (e.g., a procurement process). such a system logsall transactions but in manycases does not enforce a speciﬁc wayof working. in such an environment, process mining could be usedto gain insight in the actual process. another example would bethe ﬂow of patients in a hospital. note that in such an environmentall activities are logged but information about the underlying pro-cess is typically missing. in this context it is important to stressthat management information systems provide information aboutkeyperformance indicators like resource utilization, ﬂow times, and
service levels but notabout the underlying business processes (e.g.,
causal relations, ordering of activities, etc.). second, process miningc o u l db eu s e df o r delta analysis , i.e., comparing the actual process
with some predeﬁned process. note that in manysituations thereis a descriptive or prescriptive process model. such a model spec-iﬁes how people and organizations are assumed/expected to work.bycomparing the descriptive or prescriptive process model with thediscovered model, discrepancies between both can be detected andused to improve the process. consider for example the so-called ref-erence models in the context of sap. these models describe how thesystem should be used. using process mining it is possible to verify
whether this is the case. in fact, process mining could also be used
tocomparediﬀerentdepartments/organizationsusingthesameerpsystem.
4an additional beneﬁt of process mining is that information about
the waypeople and/or procedures reallywork and diﬀerences be-tween actual processes and predeﬁned processes can be used to trig-ger business process reengineering (bpr) eﬀorts or to conﬁgure“process-awareinformationsystems”(e.g.,workﬂow,erp,andcrmsystems).
table1containstheminimalinformationweassumetobepresent.
inmanyapplications,theworkﬂowlogcontainsatimestampforeacheventandthisinformationcanbeusedtoextractadditionalcausalityinformation.moreover,wearealsointerestedintherelation betweenattributesofthecaseandtheactualroutetakenbyaparticularcase.for example, when handling traﬃc violations: is the make of a carrelevant for the routing of the corresponding traﬃc violations? (e.g.,people driving a ferrari always pay their ﬁnes in time.)
for this simple example, it is quite easyto construct a process
modelthatisabletoregeneratetheworkﬂowlog.forlargerworkﬂowmodelsthisismuchmorediﬃcult.forexample,ifthemodelexhibitsalternative and parallel routing, then the workﬂow log will typicallynot contain all possible combinations. consider 10 tasks which can
be executed in parallel. the total number of interleavings is 10! =
3628800. it is not realistic that each interleaving is present in thelog. moreover, certain paths through the process model mayhavea low probabilityand therefore remain undetected. noisydata (i.e.,logs containing rare events, exceptions and/or incorrectlyrecordeddata) can further complicate matters.
in this paper, we do not focus on issues such as noise. we assume
that there is no noise and that the workﬂow log contains “suﬃcient”information. under these ideal circumstances we investigate whetherit is possible to rediscover the workﬂow process, i.e., for which class
of workﬂow models is it possible to accuratelyconstruct the modelbymerelylooking at their logs. this is not as simple as it seems.consider for example the process model shown in figure 1. thecorresponding workﬂow log shown in table 1 does not show anyinformation about the and-split and the and-join. nevertheless,
theyare needed to accuratelydescribe the process. these and other
problems are addressed in this paper. for this purpose we use work-
ﬂow nets (wf-nets). wf-nets are a class of petri nets speciﬁcally
5tailored towards workﬂow processes. figure 1 shows an example of
a wf-net.
generate workflow log
based on wf-netconstruct wf-net based
on applying workflow
mining techniquesworkflow logwf-net wf-net
wf1wf2
wf1 = wf2 ?
fig. 2.the rediscovery problem: for which class of wf-nets is it guaranteed that wf 2
is equivalent to wf 1?
to illustrate the rediscovery problem we use figure 2. suppose
we have a log based on manyexecutions of the process describedbya wf-net wf
1. based on this workﬂow log and using a mining
algorithm we construct a wf-net wf 2. an interesting question is
whether wf 1=wf 2. in this paper, we explore the class of wf-
nets for which wf 1=wf 2. note that the rediscoveryproblem is
onlyaddressed to explore the theoretical limits of process mining
and to test the algorithm presented in this paper. we have usedthese results to develop tools that can discover unknown processesand have successfullyapplied these tools to mine real processes.
the remainder of this paper is organized as follows. first, we in-
troducesomepreliminaries,i.e.,petrinetsandwf-nets.insection3weformalizetheproblemaddressedinthispaper.section4discussestherelationbetweencausalitydetectedinthelogandplacesconnect-ing transitions in the wf-net. based on these results, an algorithmfor process mining is presented. the qualityof this algorithm is sup-portedbythefactthatitisabletorediscoveralargeclassofworkﬂow
processes. appendix a gives some of the more involved proofs. ap-
pendix b presents the mimotool supporting the algorithm. mimo
has been used as the starting point for two process mining tools:
6emit [5] and little thumb [50] which both interface with com-
mercial systems and have been tested on real processes. the paperﬁnishes with an overview of related work and some conclusions.
2 preliminaries
this section introduces the techniques used in the remainder of thispaper. first, we introduce standard petri-net notations, then we de-ﬁne the class of wf-nets.
2.1 petri nets
weuseavariantoftheclassicpetri-netmodel,namelyplace/transit-
ion nets. for an elaborate introduction to petri nets, the reader isreferred to [12,37,39].
deﬁnition 2.1. (p/t-nets)
1an place/transition net, or simply
p/t-net, is a tuple ( p,t,f)w h e r e :
1.pis a ﬁnite set of places,
2.tis a ﬁnite set of transitions such that p∩t=∅,a n d
3.f⊆(p×t)∪(t×p) is a set of directed arcs, called the ﬂow
relation.
amarkedp/t-netisapair( n,s),wheren=(p,t,f)isap/t-net
and where sis a bag over pdenoting the marking of the net. the
set of all marked p/t-nets is denoted n.
amarkingisa bagoverthesetofplaces p,i.e.,itisafunctionfrom p
to the natural numbers. we use square brackets for the enumerationof a bag, e.g., [ a
2,b,c3] denotes the bag with two a-s, oneb,a n d
threec-s. the sum of two bags ( x+y), the diﬀerence ( x−y), the
presence of an element in a bag ( a∈x), and the notion of subbags
(x≤y) are deﬁned in a straightforward wayand theycan handle
a mixture of sets and bags.
letn=(p,t,f) be a p/t-net. elements of p∪tare called
nodes. a node xis an input node of another node yiﬀ there is a
1in the literature, the class of petri nets introduced in deﬁnition 2.1 is sometimes
referred to as the class of (unlabeled) ordinary p/t-nets to distinguish it from the
class of petri nets that allows more than one arc between a place and a transition.
7directed arc from xtoy(i.e., (x,y)∈f). nodexis an output node
ofyiﬀ (y,x)∈f. for any x∈p∪t,n•x={y|(x,y)∈f}and
xn•={y|(x,y)∈f}; the superscript nmaybe omitted if clear
from the context.
figure 1 shows a p/t-net consisting of 8 places and 7 transitions.
transition ahas one input place and one output place, transition
and-split has one input place and two output places, and transition
and-join has two input places and one output place. the black dot
in the input place of arepresents a token. this token denotes the
initial marking. the dynamic behavior of such a marked p/t-net isdeﬁned bya ﬁring rule .
deﬁnition 2.2. (firing rule) let (n=(p,t,f),s) be a marked
p/t-net. transition t∈tisenabled, denoted ( n,s)[t/angbracketright,i ﬀ•t≤s.
the ﬁring rule
[/angbracketright⊆n×t×nis the smallest relation satisfying
for any(n=(p,t,f),s)∈nand anyt∈t,(n,s)[t/angbracketright⇒(n,s)[t/angbracketright
(n,s−•t+t•).
inthemarkingshowninfigure1(i.e.,onetokeninthesourceplace),
transition ais enabled and ﬁring this transition removes the token
from the input place and puts a token in the output place. in theresulting marking, two transitions are enabled: eand and-split .
although both are enabled onlyone can ﬁre. if and-split ﬁres, one
token is consumed and two tokens are produced.
deﬁnition 2.3. (reachable markings) let (n,s
0) be a marked
p/t-net in n. a marking sisreachable from the initial marking s0
iﬀ there exists a sequence of enabled transitions whose ﬁring leads
froms0tos. the set of reachable markings of ( n,s 0) is denoted
[n,s 0/angbracketright.
the marked p/t-net shown in figure 1 has 8 reachable markings.
sometimes it is convenient to know the sequence of transitions thatare ﬁred in order to reach some given marking. this paper usesthe following notations for sequences. let abe some alphabet of
identiﬁers. a sequence of length n, for some natural number n∈
in, over alphabet ais a function σ:{0,...,n −1}→a.t h e
sequence of length zero is called the emptysequence and written ε.
for the sake of readability, a sequence of positive length is usuallywritten byjuxtaposing the function values: for example, a sequence
8σ={(0,a),(1,a),(2,b)}, fora,b∈a, is written aab.t h es e to fa l l
sequences of arbitrarylength over alphabet ais written a∗.
deﬁnition 2.4. (firing sequence) let (n,s 0)w i t hn=(p,t,f)
be a marked p/t net. a sequence σ∈t∗is called a ﬁring sequence
of (n,s 0) iﬀ, for some natural number n∈in, there exist markings
s1,...,s nand transitions t1,...,t n∈tsuch that σ=t1...t nand,
for alliwith 0 ≤i<n,(n,s i)[ti+1/angbracketrightandsi+1=si−•ti+1+ti+1•.
(note that n= 0 implies that σ=εand thatεis a ﬁring sequence
of (n,s 0).) sequence σis said to be enabledin marking s0, denoted
(n,s 0)[σ/angbracketright. firing the sequence σresults in a marking sn, denoted
(n,s 0)[σ/angbracketright(n,s n).
deﬁnition 2.5. (connectedness) an e tn=(p,t,f)i s weakly
connected ,o rs i m p l y connected , iﬀ, for everytwo nodes xandyin
p∪t,x(f∪f−1)∗y,w h e r er−1is the inverse and r∗the reﬂexive
and transitive closure of a relation r.n e tnisstrongly connected
iﬀ, for everytwo nodes xandy,xf∗y.
we assume that all nets are weaklyconnected and have at least two
nodes. the p/t-net shown in figure 1 is connected but not stronglyconnected because there is no directed path from the sink place tothe source place, or from d to a, etc.
deﬁnition 2.6. (boundedness, safeness) am a r k e dn e t( n=
(p,t,f),s)i s bounded iﬀ the set of reachable markings [ n,s/angbracketrightis
ﬁnite. it is safeiﬀ, for any s
/prime∈[n,s/angbracketrightand anyp∈p,s/prime(p)≤1. note
that safeness implies boundedness.
the marked p/t-net shown in figure 1 is safe (and therefore also
bounded) because none of the 8 reachable states puts more than one
token in a place.
deﬁnition 2.7. (dead transitions, liveness) let(n=(p,t,f),s)
be a marked p/t-net. a transition t∈tisdeadin (n,s)i ﬀt h e r e
is no reachable marking s/prime∈[n,s/angbracketrightsuch that ( n,s/prime)[t/angbracketright.(n,s)i s
liveiﬀ, for everyreachable marking s/prime∈[n,s/angbracketrightandt∈t,t h e r e
is a reachable marking s/prime/prime∈[n,s/prime/angbracketrightsuch that ( n,s/prime/prime)[t/angbracketright.n o t et h a t
liveness implies the absence of dead transitions.
none of the transitions in the marked p/t-net shown in figure 1 is
dead.however,themarkedp/t-netisnotlivesinceitisnotpossibleto enable each transition continuously.
92.2 workﬂow nets
most workﬂow systems oﬀer standard building blocks such as the
and-split, and-join, or-split, and or-join [6,15,26,28]. theseare used to model sequential, conditional, parallel and iterative rout-
ing (wfmc [15]). clearly, a petri net can be used to specify the
routing of cases. tasksare modeled bytransitions and causal depen-
dencies are modeled byplaces and arcs. in fact, a place correspondsto a condition which can be used as pre- and/or post-condition for
tasks. an and-split corresponds to a transition with two or moreoutput places, and an and-join corresponds to a transition withtwo or more input places. or-splits/or-joins correspond to placeswith multiple outgoing/ingoing arcs. given the close relation be-tween tasks and transitions we use the terms interchangeably.
a petri net which models the control-ﬂow dimension of a work-
ﬂow, is called a workflow net (wf-net). it should be noted that a
wf-net speciﬁes the dynamic behavior of a single case in isolation.
deﬁnition 2.8. (workﬂow nets) letn=(p,t,f) be a p/t-net
and¯ta fresh identiﬁer not in p∪t.nis a workﬂow net (wf-net)
iﬀ:
1.object creation :pcontains an input place isuch that •i=∅,
2.object completion :pcontainsanoutputplace osuchthato•=∅,
3.connectedness :¯n=(p,t∪{¯t},f∪{(o,¯t),(¯t,i)}) is strongly
connected,
the p/t-net shown in figure 1 is a wf-net. note that although the
net is not stronglyconnected, the short-circuited net¯n=(p,t∪
{¯t},f∪{(o,¯t),(¯t,i)}) (i.e., the net with transition ¯tconnecting o
toi) is stronglyconnected. even if a net meets all the sy ntactical
requirementsstatedindeﬁnition2.8,thecorrespondingprocessmay
exhibit errors such as deadlocks, tasks which can never become ac-
tive, livelocks, garbage being left in the process after termination,etc. therefore, we deﬁne the following correctness criterion.
deﬁnition 2.9. (sound) letn=(p,t,f) be a wf-net with
input place iand output place o.nissoundiﬀ:
1.safeness:(n,[i]) is safe,
2.proper completion : for anymarking s∈[n,[i]/angbracketright,o∈simplies
s=[o],
103.option to complete : for anymarking s∈[n,[i]/angbracketright,[o]∈[n,s/angbracketright,a n d
4.absence of dead tasks :(n,[i]) contains no dead transitions.
the set of all sound wf-nets is denoted w.
the wf-net shown in figure 1 is sound. soundness can be veriﬁed
using standard petri-net-based analysis techniques. in fact sound-ness corresponds to liveness and safeness of the corresponding short-circuited net [1,2,6]. this wayeﬃcient algorithms and tools canbe applied. an example of a tool tailored towards the analysis ofwf-nets is woﬂan [47].
3 the rediscovery problem
after introducing some preliminaries we return to the topic of thispaper: workﬂow mining . the goal of workﬂow mining is to ﬁnd a
workﬂow model (e.g., a wf-net) on the basis of a workﬂow log .
table1showsanexampleofaworkﬂowlog.notethattheorderingofevents within a case is relevant while the ordering of events amongst
cases is of no importance. therefore, we deﬁne a workﬂow log as
follows.
deﬁnition 3.1. (workﬂow trace, workﬂow log) lettbe a set
of tasks.σ∈t
∗is a workﬂow trace andw∈p(t∗)i sa workﬂow
log.2
the workﬂow trace of case 1 in table 1 is abcd. the workﬂow log
corresponding to table 1 is {abcd, acbd, aed }.n o t et h a ti n
thispaperweabstractfromtheidentityofcases.clearlytheidentity
and the attributes of a case are relevant for workﬂow mining. how-
ever, for the theoretical results in this paper, we can abstract fromthis. for similar reasons, we abstract from the frequencyof workﬂowtraces. in table 1 workﬂow trace abcdappears twice (case 1 and
case3),workﬂowtrace acbdalsoappearstwice(case2andcase4),
and workﬂow trace aed(case 5) appears onlyonce. these frequen-
cies are not registered in the workﬂow log {abcd,acbd,aed }.
note that when dealing with noise, frequencies are of the utmostimportance. however, in this paper we do not deal with issues such
2p(t∗)i st h ep o w e r s e to f t∗, i.e., w⊆t∗.
11as noise. therefore, this abstraction is made to simplifynotation.
for readers interested in how we deal with noise and related issues,we refer to [31,32,48–50]
to ﬁnd a workﬂow model on the basis of a workﬂow log, the
log should be analyzed for causal dependencies, e.g., if a task isalways followed by another task it is likely that there is a causalrelation between both tasks. to analyze these relations we introducethe following notations.
deﬁnition 3.2. (log-based ordering relations) letwbe a
workﬂow log over t, i.e.,w∈p(t
∗). leta,b∈t:
–a>wbiﬀthereisatrace σ=t1t2t3...t n−1andi∈{1,...,n −2}
such that σ∈wandti=aandti+1=b,
–a→wbiﬀa>wbandb/negationslash>wa,
–a#wbiﬀa/negationslash>wbandb/negationslash>wa,a n d
–a/bardblwbiﬀa>wbandb>wa.
consider the workﬂow log w={abcd,acbd,aed }(i.e., the
log shown in table 1). relation >wdescribes which tasks appeared
in sequence (one directlyfollowing the other). clearly , a> wb,
a> wc,a> we,b> wc,b> wd,c> wb,c> wd,a n d
e> wd.r e l a t i o n →wcan be computed from >wa n di sr e f e r r e dt o
as the (direct) causal relation derived from workﬂow log w.a→w
b,a→wc,a→we,b→wd,c→wd,a n de→wd.n o t e
thatb/negationslash→wcbecausec> wb.r e l a t i o n /bardblwsuggests potential
parallelism. for log wtasksbandcseem to be in parallel, i.e.,
b/bardblwcandc/bardblwb. if two tasks can follow each other directlyin any
order, then all possible interleavings are present and therefore theyare likelyto be in parallel. relation #
wgives pairs of transitions
that never follow each other directly. this means that there are nodirect causal relations and parallelism is unlikely.
property 3.3. letwbe a workﬂow log over t. for any a,b∈t:
a→
wborb→waora#wbora/bardblwb. moreover, the relations →w,
→−1
w,#w,a n d /bardblware mutuallyexclusive and partition t×t.3
this propertycan easybe veriﬁed. note that →w=(>w\>−1
w),
→−1
w=(>−1
w\>w),# w=(t×t)\(>w∪>−1
w),/bardblw=(>w∩>−1
w).
3→−1
wis the inverse of relation →w, i.e., →−1
w={(y,x)∈t×t|x→wy}.
12therefore, t×t=→w∪→−1
w∪#w∪/bardblw.ifnoconfusionispossible,
the subscript wis omitted.
to simplifythe use of logs and sequences we introduce some ad-
ditional notations.
deﬁnition 3.4. ( ∈,ﬁrst,last)letabe a set,a∈a,a n dσ=
a1a2...a n∈a∗a sequence over aof length n.∈,ﬁrst,lastare
deﬁned as follows:
1.a∈σiﬀa∈{a1,a2,...a n},
2.ﬁrst(σ)=a1,i fn≥1, and
3.last(σ)=an,i fn≥1.
to reason about the qualityof a workﬂow mining algorithm we need
to make assumptions about the completeness of a log. for a complexprocess, a handful of traces will not suﬃce to discover the exactbehavior of the process. relations →
w,→−1
w,#w,a n d /bardblwwill be
crucial information for anyworkﬂow-mining algorithm. since theserelations can be derived from >
w, we assume the log to be complete
with respect to this relation.
deﬁnition 3.5. (complete workﬂow log) letn=(p,t,f)bea
soundwf-net,i.e., n∈w.wisaworkﬂow log of niﬀw∈p(t∗)
and everytrace σ∈wis a ﬁring sequence of nstarting in state [ i]
and ending in [ o], i.e., (n,[i])[σ/angbracketright(n,[o]).wis a complete workﬂow
log ofniﬀ (1) for anyworkﬂow log w/primeofn:>w/prime⊆>w, and (2) for
anyt∈tthere is a σ∈wsuch that t∈σ.
a workﬂow log of a sound wf-net onlycontains behaviors that
can be exhibited bythe corresponding process. a workﬂow log iscomplete if all tasks that potentiallydirectlyfollow each other infact directlyfollow each other in some trace in the log. note thattransitions that connect the input place iof a wf-net to its output
placeoare “invisible” for >
w. therefore, the second requirement
has been added. if there are no such transitions, this requirementcan be dropped as is illustrated bythe following property .
property 3.6. letn=(p,t,f) be a sound wf-net. if wis a
complete workﬂow log of n,t h e n {t∈t|∃
t/prime∈tt>wt/prime∨t/prime>wt}
={t∈t|t/negationslash∈i•∩•o}.
13proof.consider a transition t∈t.s i n c enis sound there is ﬁring
sequence containing t.i ft∈i•∩•o, then this sequence has length
1a n dtcannot appear in >wbecause this is the onlyﬁring sequence
containing t.i ft/negationslash∈i•∩•o, then the sequence has at least length 2,
i.e.,tis directlypreceded or followed bya transition and therefore
appears in >w. ✷
the deﬁnition of completeness given in deﬁnition 3.5 mayseem ar-
bitrarybut it is not. note that it would be unrealistic to assume
that all possible ﬁring sequences are present in the log. first of all,
the number of possible sequences maybe inﬁnite (in case of loops).second, parallel processes typically have an exponential number ofstates and, therefore, the number of possible ﬁring sequences maybe enormous. finally, even if there is no parallelism and no loopsbut justnbinarychoices, the number of possible sequences maybe
2
n. therefore, we need a weaker notion of completeness. if there is
no parallelism and no loops but just nbinarychoices, the number
of cases required maybe as little as 2. of course for large nit is
unlikelythat all choices are observed in just 2 cases but still it in-dicates that this requirement is considerablyless demanding than
observing all possible sequences. the same holds for processes with
loops and parallelism. if a process has nsequential fragments which
each exhibit parallelism, the number of cases needed to observe allpossible combinations is exponential in the number of fragments.using our notion of completeness, this is not the case. one couldconsider even weaker notions of completeness, however, as will beshown in the remainder, even this notion of completeness (i.e., deﬁ-nition 3.5) is in some situations too weak to detect certain advancedrouting patterns.
wewillformulatetherediscoveryproblemintroducedinsection1
assuming a complete workﬂow log as described in deﬁnition 3.5.before formulating this problem we deﬁne what it means for a wf-net to be rediscovered.
deﬁnition 3.7. (ability to rediscover) letn=(p,t,f)b ea
sound wf-net, i.e., n∈w,a n dl e tαbe a mining algorithm which
maps workﬂow logs of nonto sound wf-nets, i.e., α:p(t
∗)→
w. if for anycomplete workﬂow log wofnthe mining algorithm
14returnsn(modulo renaming of places), then αis able to rediscover
n.
note that no mining algorithm is able to ﬁnd names of places.
therefore, we ignore place names, i.e., αis able to rediscover n
iﬀα(w)=nmodulo renaming of places.
the goal of this paper is twofold. first of all, we are looking
for a mining algorithm that is able to rediscover sound wf-nets,i.e., based on a complete workﬂow log the corresponding workﬂowprocess model can be derived. second, given such an algorithm wewanttoindicatetheclassofworkﬂownetswhichcanberediscovered.clearly, this class should be as large as possible. note that there is
no mining algorithm which is able to rediscover all sound wf-nets.
for example, if in figure 1 we add a place pconnecting transitions
aandd, there is no mining algorithm able to detect psince this
place is implicit, i.e., the addition of the place does not change thebehavior of the net and therefore is not visible in the log.
to conclude we summarize the rediscovery problem :“ f i n dam i n -
ing algorithm able to rediscover a large class of sound wf-nets onthe basis of complete workﬂow logs.” this problem was illustratedin the introduction using figure 2.
4 workﬂow mining
in this section, the rediscoveryproblem is tackled. before we presentaminingalgorithmabletorediscoveralargeclassofsoundwf-nets,we investigate the relation between the causal relations detected inthe log (i.e., →
w) and the presence of places connecting transitions.
first, we show that causal relations in →wimplythe presence of
places. then, we explore the class of nets for which the reverse also
holds. based on these observations, we present a mining algorithm.
4.1 causal relations imply connecting places
if there is a causal relation between two transitions according to
the workﬂow log, then there has to be a place connecting these twotransitions.
15theorem 4.1. letn=(p,t,f) be a sound wf-net and let w
be a complete workﬂow log of n. for anya,b∈t:a→wbimplies
a•∩•b/negationslash=∅.
proof.assumea→wbanda•∩•b=∅. we will show that this
leads to a contradiction and thus prove the theorem. since a>b
there is a ﬁring sequence σ=t1t2t3...t n−1andi∈{1,...,n −2}
such that σ∈wandti=aandti+1=b.l e tsbe the state just
before ﬁring a, i.e., (n,[i])[σ/prime/angbracketright(n,s)w i t hσ/prime=t1...t i−1.l e ts/primebe
the marking after ﬁring bin states, i.e., (n,s)[b/angbracketright(n,s/prime). note that
bis enabled in sbecause it is enabled after ﬁring aanda•∩•b=∅
(i.e.,adoes not produce tokens for anyof the input places of b).a
cannot be enabled in s/prime,o t h e r w i s e b>aand nota→wb.s i n c eais
enabled in sbut not in s/prime,bconsumes a token from an input place of
aand does not return it, i.e., (( •b)\(b•))∩•a/negationslash=∅. there is a place
psuch that p∈•a,p∈•b,a n dp/negationslash∈b•.m o r e o v e r , a•∩•b=∅.
therefore, p/negationslash∈a•.sincethenetissafe, pcontainspreciselyonetoken
in marking s. this token is consumed by ti=aand not returned.
hencebcannot be enabled after ﬁring ti. therefore, σcannot be a
ﬁring sequence of nstarting in i. ✷
letn1=({i,p 1,p2,p3,p4,o},{a,b,c,d },{(i,a),(a,p 1),(a,p 2),
(p1,b),(b, p 3),(p2,c),(c,p 4),(p3,d),(p4,d),(d,o)}). (this is
the wf-net with bandcin parallel, see n1in figure 4.) w1=
{abcd,acbd }is a complete log over n1.s i n c ea→w1b,t h e r e
has to be a place between aandb. this place corresponds to p1in
n1.letn2=({i,p 1,p2,o},{a,b,c,d },{(i,a),(a,p 1),(p1,b),(b,p 2),
(p1,c),(c,p 2),(p2,d),(d,o)}). (this is the wf-net with a choice
betweenbandc,seen2infigure4.) w2={abd,acd }isacom-
plete log over n2.s i n c ea→w2b, there has to be a place between
aandb. similarly, a→w2cand therefore there has to be a place
betweenaandc. both places correspond to p1inn1.n o t et h a ti n
the ﬁrst example ( n1/w1)t h et w oc a u s a lr e l a t i o n s a→w1band
a→w1ccorrespond to two diﬀerent places while in the second ex-
ample the two causal relations a→w1banda→w1ccorrespond
to a single place.
164.2 connecting places “often” imply causal relations
in this subsection we investigate which places can be detected by
simplyinspecting the log. clearly , not all places can be detected.for example places maybe implicit which means that theydo notaﬀect the behavior of the process. these places remain undetected.therefore, we limit our investigation to wf-nets without implicit
places.
deﬁnition 4.2. (implicit place) letn=(p,t,f) be a p/t-net
with initial marking s.ap l a c e p∈pis called implicit in ( n,s)
iﬀ, for all reachable markings s
/prime∈[n,s/angbracketrightand transitions t∈p•,
s/prime≥•t\{p}⇒s/prime≥•t.
figure 1 contains no implicit places. however, as indicated before,
adding a place pconnecting transition aanddyields an implicit
place. no mining algorithm is able to detect psince the addition of
the place does not change the behavior of the net and therefore isnot visible in the log.
fig. 3.two constructs not allowed in swf-nets.
fortherediscoveryproblemitisveryimportantthatthestructure
of the wf-net clearlyreﬂects its behavior. therefore, we also ruleout the constructs shown in figure 3. the left construct illustratesthe constraint that choice and synchronization should never meet.if two transitions share an input place, and therefore “ﬁght” for thesame token, theyshould not require sy nchronization. this meansthat choices (places with multiple output transitions) should not be
mixed with synchronizations. the right-hand construct in figure 3
illustrates the constraint that if there is a synchronization, all pre-ceding transitions should have ﬁred, i.e., it is not allowed to have
17synchronizations directly preceded by an or-join. wf-nets which
satisfythese requirements are named structured workﬂow nets .
deﬁnition 4.3. (swf-net) a wf-net n=(p,t,f)i sa n swf-
net(structured workﬂow net) iﬀ:
1. for allp∈pandt∈twith (p,t)∈f:|p•|>1 implies |•t|=1 .
2. forallp∈pandt∈twith (p,t)∈f:|•t|>1implies |•p|=1 .
3. there are no implicit places.
at ﬁrst sight the three requirements in deﬁnition 4.3 seem quite re-
strictive. from a practical point of view this is not the case. first ofall, swf-nets allow for all routing constructs encountered in prac-tice, i.e., sequential, parallel, conditional and iterative routing arepossible and the basic workﬂow building blocks (and-split, and-join, or-split and or-join) are supported. second, wf-nets thatare not swf-nets are typically diﬃcult to understand and shouldbe avoided if possible. third, manyworkﬂow management sy stemsonlyallow for workﬂow processes that correspond to swf-nets. thelatter observation can be explained bythe fact that most workﬂow
management systems use a language with separate building blocks
for or-splits and and-joins. finally, there is a very pragmatic ar-gument. if we drop anyof the requirements stated in deﬁnition 4.3,relation>
wdoes not contain enough information to successfully
mine all processes in the resulting class.
the reader familiar with petri nets will observe that swf-nets
belong to the class of free-choice nets [12]. this allows us to use
eﬃcient analysis techniques and advanced theoretical results. for
example, using these results it is possible to decide soundness inpolynomial time [2].
swf-nets also satisfyanother interesting property .
property 4.4. letn=(p,t,f) be an swf-net. for any a,b∈t
andp
1,p2∈p:i fp1∈a•∩•bandp2∈a•∩•b,t h e np1=p2.
this propertyfollows directlyfrom the deﬁnition of swf-nets and
states that no two transitions are connected bymultiple places. this
propertyillustrates that the structure of an swf-net clearlyreﬂects
its behavior and vice versa. this is exactlywhat we need to be ableto rediscover a wf-net from its log.
18we alreadyshowed that causal relations in →wimplythe pres-
ence of places. now we tryto prove the reverse for the class of swf-nets. first, we focus on the relation between the presence of placesand>
w.
theorem 4.5. letn=(p,t,f) be a sound swf-net and let w
be a complete workﬂow log of n. for any a,b∈t:a•∩•b/negationslash=∅
impliesa>wb.
proof.see appendix. ✷
ab
cdab
cd
ab
d
ab
cd
a b
cd
en1
n2
n3
n4
n5
fig. 4.five sound swf-nets.
19unfortunately a•∩•b/negationslash=∅doesnotimply a→wb.toillustratethis
consider figure 4. for the ﬁrst two nets (i.e., n1andn2), two tasks
are connected iﬀ there is a causal relation. this does not hold forn
3andn4.i nn3,a→w3b,a→w3d,a n db→w3d. however,
notb→w3b. nevertheless, there is a place connecting btob.
inn4, although there are places connecting btocand vice versa,
b/negationslash→w3candb/negationslash→w3c. these examples indicate that loops of
lengthone(see n3)andlengthtwo(see n4)areharmful.fortunately,
loops of length three or longer are no problem as is illustrated in the
following theorem.
theorem 4.6. letn=(p,t,f) be a sound swf-net and let w
be a complete workﬂow log of n. for any a,b∈t:a•∩•b/negationslash=∅
andb•∩•a=∅impliesa→wb.
proof.see appendix. ✷
acyclic nets have no loops of length one or length two. therefore, it
is easyto derive the following property .
property 4.7. letn=(p,t,f) be an acyclic sound swf-net and
letwbeacompleteworkﬂowlogof n.foranya,b∈t:a•∩•b/negationslash=∅
iﬀa→wb.
the results presented thus far focus on the correspondence between
connecting places and causal relations. however, causality( →w)i s
just one of the four log-based ordering relations deﬁned in deﬁni-tion 4.3. the following theorem explores the relation between the
sharing of input and output places and #
w.
theorem 4.8. letn=(p,t,f) be a sound swf-net such that
for anya,b∈t:a•∩•b=∅orb•∩•a=∅and letwbe a
complete workﬂow log of n.
1. ifa,b∈tanda•∩b•/negationslash=∅,t h e na#wb.
2. ifa,b∈tand•a∩•b/negationslash=∅,t h e na#wb.
3. ifa,b,t∈t,a→wt,b→wt,a n da#wb,t h e na•∩b•∩ •t/negationslash=∅.
4. ifa,b,t∈t,t→wa,t→wb,a n da#wb,t h e n •a∩•b∩t•/negationslash=∅.
proof.see appendix. ✷
20therelations →w,→−1
w,#w,and/bardblwaremutuallyexclusive.there-
fore, we can derive that for sound swf-nets with no short loops,a/bardbl
wbimpliesa•∩b•=•a∩•b=∅.m o r e o v e r , a→wt,b→wt,
anda•∩b•∩ •t=∅impliesa/bardblwb. similarly, t→wa,t→wb,
and•a∩•b∩t•=∅, also implies a/bardblwb. these results will be
used to underpin the mining algorithm presented in the followingsubsection.
4.3 mining algorithm
based on the results in the previous subsections we now present an
algorithm for mining processes. the algorithm uses the fact that formanywf-nets two tasks are connected iﬀ their causalitycan bedetected byinspecting the log.
deﬁnition 4.9. (mining algorithm α)letwbe a workﬂow log
overt.α(w) is deﬁned as follows.
1.t
w={t∈t|∃σ∈wt∈σ},
2.ti={t∈t|∃σ∈wt=ﬁrst(σ)},
3.to={t∈t|∃σ∈wt=last(σ)},
4.xw={(a,b)|a⊆tw∧b⊆tw∧∀ a∈a∀b∈ba→wb∧
∀a1,a2∈aa1#wa2∧∀ b1,b2∈bb1#wb2},
5.yw={(a,b)∈xw|∀ (a/prime,b/prime)∈xwa⊆a/prime∧b⊆b/prime=⇒(a,b)=
(a/prime,b/prime)},
6.pw={p(a,b )|(a,b)∈yw}∪{iw,ow},
7.fw={(a,p (a,b ))|(a,b)∈yw∧a∈a}∪{(p(a,b ),b)|(a,b)∈
yw∧b∈b}∪ {(iw,t)|t∈ti}∪ {(t,ow)|t∈to},a n d
8.α(w)=(pw,tw,fw).
the mining algorithm constructs a net ( pw,tw,fw). clearly, the
set of transitions twcan be derived byinspecting the log. in fact, as
shown in property3.6, if there are no traces of length one, twcan
be derived from >w. since it is possible to ﬁnd all initial transitions
tiand all ﬁnal transition to, it is easyto construct the connections
betweenthesetransitionsand iwandow.besidesthesourceplace iw
and the sink place ow, places of the form p(a,b )are added. for such
place, the subscript refers to the set of input and output transitions,i.e.,•p
(a,b )=aandp(a,b )•=b.aplaceisaddedin-between aandb
21iﬀa→wb. however, some of these places need to be merged in case
of or-splits/joins rather than and-splits/joins. for this purposethe relations x
wandyware constructed. ( a,b)∈xwif there is
a causal relation from each member of ato each member of band
the members of aandbnever occur next to one another. note that
ifa→wb,b→wa,o ra/bardblwb,t h e naandbcannot be both in a
(orb). relation ywis derived from xwbytaking onlythe largest
elements with respect to set inclusion. (see the end of this sectionfor an example.)
ab
d
ab
cd(n3)
(n4)
fig. 5.theαalgorithm is unable to rediscover n3andn4.
based on αdeﬁned in deﬁnition 4.9, we turn to the rediscovery
problem. is it possible to rediscover wf-nets using α(w)? consider
the ﬁve swf-nets shown in figure 4. if αis applied to a complete
workﬂowlogof n1,theresultingnetis n1modulorenamingofplaces.
similarly, if αis applied to a complete workﬂow log of n2,t h er e -
sulting net is n2modulo renaming of places. as expected, αis not
able to rediscover n3andn4(cf. figure 5). α(w3) is liken3but
without the arcs connecting bto the place in-between aanddand
two new places. α(w4) is liken4but the input and output arc of
care removed. α(w3) is not a wf-net since bis not connected
to the rest of the net. α(w4) is not a wf-net since cis not con-
nected to the rest of the net. in both cases two arcs are missing inthe resulting net. n
3andn4illustrate that the mining algorithm is
unable to deal with short loops. loops of length three or longer are
no problem. for example α(w5)=n5modulo renaming of places.
the following theorem proves that αis able to rediscover the class
of swf-nets provided that there are no short loops.
22theorem 4.10. letn=(p,t,f) be a sound swf-net and let w
be a complete workﬂow log of n. if for all a,b∈ta•∩•b=∅or
b•∩•a=∅,t h e nα(w)=nmodulo renaming of places.
proof.letα(w)=(pw,tw,fw). sincewis complete, it is easy
to see that t=tw. remains to prove that everyplace in ncorre-
sponds to a place in α(w)a n dv i c ev e r s a .
letp∈p. we need to prove that there is a pw∈pwsuch
thatn•p=nw•pwandpn•=pwnw•.i fp=i, i.e., the source place
orp=o, i.e., the sink place, then it is easyto see that there is
a corresponding place in α(w). transitions in in•∪n•ocan ﬁre
onlyonce directlyat the beginning of a sequence or at the end.therefore, the construction given in deﬁnition 4.9 involving i
w,ow,
ti,andtoyieldsasourceandsinkplacewithidenticalinput/output
transitions. if p/negationslash∈{i,o},t h e nl e t a=n•p,b=pn•,a n dpw=
p(a,b ).i fpwis indeed a place of α(w), thenn•p=α(w)•pwand
pn•=pwα(w)•. this follows directlyfrom the deﬁnition of the ﬂow
relationfwin deﬁnition 4.9. to prove that pw=p(a,b )is a place
ofα(w), we need to show that ( a,b)∈yw.(a,b)∈xw, because
(1) theorem 4.6 implies that ∀a∈a∀b∈ba→wb, (2) theorem 4.8(1)
implies that ∀a1,a2∈aa1#wa2, and (3) theorem 4.8(2) implies that
∀b1,b2∈bb1#wb2. to prove that ( a,b)∈yw, we need to show that it
is not possible to have ( a/prime,b/prime)∈xsuch that a⊆a/prime,b⊆b/prime,a n d
(a,b)/negationslash=(a/prime,b/prime) (i.e.,a⊂a/primeorb⊂b/prime). suppose that a⊂a/prime.
t h e r ei sa n a/prime∈t\asuch that ∀b∈ba/prime→wband∀a∈aa#wa/prime.
theorem 4.8(3) implies that an•∩a/primen•∩n•b/negationslash=∅for someb∈b.
letp/prime∈an•∩a/primen•∩n•b. property4.4 implies p/prime=p. however, a/prime/negationslash∈
a=n•panda/prime∈n•p/prime, and we ﬁnd a contradiction ( p/prime=pandp/prime/negationslash=p).
suppose that b⊂b/prime.t h e r ei sa b/prime∈t\bsuch that ∀a∈aa→wb/prime
and∀b∈bb#wb/prime. using theorem 4.8(4) and property4.4, we can
show that this leads to a contradiction. therefore, ( a,b)∈ywand
pw∈pw.
letpw∈pw. we need to prove that there is a p∈psuch that
n•p=nw•pwandpn•=pwnw•.i fpw=iworpw=ow,t h e npw
corresponds to iororespectively. this is a direct consequence of the
construction given in deﬁnition 4.9 involving iw,ow,ti,a n dto.i f
pw/negationslash∈{iw,ow}, then there are sets aandbsuch that ( a,b)∈yw
andpw=p(a,b ).α(n)•pw=aandpwα(n)•=b. remains to prove that
23there is a p∈psuch thatn•p=aandpn•=b.s i n c e(a,b)∈yw
implies that ( a,b)∈xw, for any a∈aandb∈bthere is a
place connecting aandb(usea→wband theorem 4.1). using
theorem 4.8, we can prove that there is just one such place. let p
be this place. clearly,n•p⊆aandpn•⊆b. remains to prove that
n•p=aandpn•=b. suppose that a/prime∈n•p\a(i.e.,n•p/negationslash=a). select
an arbitrary a∈aandb∈b. using theorem 4.6, we can show that
a/prime→wb.usingtheorem4.8(1),wecanshowthat a#wa/prime.thisholds
for anya∈aandb∈b. therefore, ( a∪{a/prime},b)∈xw. however,
this is not possible since ( a,b)∈yw((a,b) should be maximal).
therefore, we ﬁnd a contradiction. we ﬁnd a similar contradictionif we assume that there is a b
/prime∈pn•\b. therefore, we conclude that
n•p=aandpn•=b. ✷
ab
c d
e
fig. 6.another process model corresponding to the workﬂow log shown in table 1.
netsn1,n2andn5shown in figure 4 satisfythe requirements
stated in theorem 4.10. therefore, it is no surprise that αis able to
rediscover these nets. the net shown in figure 1 is also an swf-netwithnoshortloops.therefore,wecansuccessfullyrediscoverthenetif the and-split and the and-join are visible in the log . the latter
assumption is not realistic if these two transitions do not correspondto real work. given the fact the log shown in table 1 does not listthe occurrence of these events, indicates that this assumption is notvalid. therefore, the and-split and the and-join should be con-
sidered invisible. however, if we apply αto this log w={abcd,
acbd,aed }, then the result is quite surprising. the resulting net
α(w) is shown in figure 6.
24toillustratethe αalgorithmweshowtheresultofeachstepusing
the logw={abcd, acbd, aed }(i.e., a log like the one shown
in table 1):
1.tw={a,b,c,d,e },
2.ti={a},
3.to={d},
4.xw={({a},{b}),({a},{c}),({a},{e}),({b},{d}),
({c},{d}),({e},{d}),({a},{b,e}),({a},{c,e}),
({b,e},{d}),({c,e},{d})},
5.yw={({a},{b,e}),({a},{c,e}),({b,e},{d}),({c,e},{d})},
6.pw={iw,ow,p({a},{b,e}),p{a},{c,e}),p({b,e},{d}),p({c,e},{d})},
7.fw={(iw,a),(a,p ({a},{b,e})),(p({a},{b,e}),b)...,(d,o w)},and
8.α(w)=(pw,tw,fw)( a ss h o w ni nf i g u r e6 ) .
although the resulting net is not an swf-net it is a sound wf-net
whose observable behavior is identical to the net shown in figure 1.also note that the wf-net shown in figure 6 can be rediscoveredalthough it is not an swf-net. this example shows that the appli-cabilityis not limited to swf-nets. however, for arbitrarysoundwf-nets it is not possible to guarantee that theycan be rediscov-ered.
4.4 limitations of the αalgorithm
as demonstrated through theorem 4.10, the αalgorithm is able to
rediscover a large class of processes. however, we did not prove thatthe class of processes is maximal, i.e., that there is not a “better”algorithm able to rediscover even more processes. therefore, we re-ﬂect on the requirements stated in deﬁnition 4.3 (swf-nets) andtheorem 4.10 (no short loops).
let us ﬁrst consider the requirements stated in deﬁnition 4.3. to
illustratethenecessityoftheﬁrsttworequirementsconsiderﬁgures7and 8. the wf-net n
6shown in figure 7 is sound but not an swf-
net since the ﬁrst requirement is violated ( n6is not free-choice). if
we applythe mining algorithm to a complete workﬂow log w6ofn6,
weobtainthewf-nets n7alsoshowninfigure7(i.e., α(w6)=n7).
clearly,n6cannot be rediscovered using α. although n7is a sound
swf-net its behavior is diﬀerent from n6, e.g., workﬂow trace ace
25a d
c
en6
b
a d
c
en7
b
fig. 7.the non-free-choice wf-net n6cannot be rediscovered by the αalgorithm.
is possible in n7but not in n6. this example motivates the ﬁrst
requirement in deﬁnition 4.3. the second requirement is motivatedbyfigure 8. n
8violates the second requirement. if we applythe
mining algorithm to a complete workﬂow log w8ofn8,w eo b t a i n
the wf-net α(w8)=n9also shown in figure 8. although n9is
behaviorallyequivalent, n8cannot be rediscovered using the mining
algorithm.
although the requirements stated in deﬁnition 4.3 are necessary
in order to prove that this class of workﬂow processes can be redis-covered on the basis of a complete workﬂow log, the applicabilityisnot limited to swf-nets. the examples given in this section showthat in manysituations a behaviorallyequivalent wf-net can bederived. note that the third requirement stated in deﬁnition 4.3 (noimplicitplaces)canbedroppedthusallowingevenmorebehaviorallyequivalent wf-nets. even in the cases where the resulting wf-netis not behaviorallyequivalent, the results are meaningful, e.g., the
process represented by n
7is diﬀerent from the process represented
byn6(cf. figure 7). nevertheless, n7is similar and captures most
of the behavior.
26an8
bc
d
e
fg
an9
bc
d
e
fg
fig. 8.wf-net n8cannot be rediscovered by the αalgorithm. nevertheless αreturns
a wf-net which is behavioral equivalent.
ab
c e
dn10
ab
c e
dn11
fig. 9.although both wf-nets are not behavioral equivalent they are identical with
respect to >.
27another requirement imposed bytheorem 4.10 is the absence of
short loops. we alreadyshowed examples motivating this require-ment. however, it is clear that the αalgorithm can be improved to
deal with short loops. unfortunately, this is less trivial than it mayseem.weusefigure9andfigure10toillustratethis.figure9showstwo wf-nets. although both wf-nets have clearlydiﬀerent behav-iors their complete logs will have identical >relations. note that the
two wf-nets are not swf-nets because of the non-free-choice con-struct involving e. however, the essence of the problem is the short
loop involving c. because of this short loop the αalgorithm will
create for both n
10andn11the petri net where cis unconnected to
the rest of the net. clearly, this can be improved since for completelogs ofn
10andn11the following relations hold: b>c,c>b,
c>d,d>c,b/bardblc,c/bardbld,a n db/bardbld. these relations suggest that
b,c,a n ddare in parallel. however, in anycomplete log it can be
seen that this is not the case since ais never followed by c.d e s p i t e
this information, no algorithm will be able to distinguish n10and
n11because theyare identical with respect to >. figure 10 gives
another example demonstrating that dealing with short loops is farfrom trivial. n
12andn13are swf-nets that are behavioral equiv-
alent, therefore, no algorithm will be able to distinguish n12from
n13(assuming the notion of completeness and not logging explicit
start and end events). this problem mayseem similar to figure 8 orexamples with and without implicit places. however, n
12andn13
are swf-nets while n8or examples with implicit places are just
wf-nets not satisfying the requirements stated in deﬁnition 4.3.
despite the problems illustrated byfigure 9 and figure 10, it
is possible to solve the problem using a slightlystronger notion ofcompleteness. assume that it is possible to identify1-loops and 2-loops. this can be done bylooking for patterns aa(1-loop) and
aba(2-loop). then reﬁne relation >into a new relation >
+which
splits the existing transitions involved in a short loop into 2 or 3transitions. tasks involved in a 1-loop are mapped onto three tran-sitions (e.g., start, execute, and end). tasks involved in a 2-loop butnot a 1-loop are mapped onto two transitions (e.g., start and end).
the goal of this translation is to make the short loops longer by
using additional information about 1-loops and 2-loops (and whilepreserving the original properties). this reﬁned relation >
+can be
28ab
d
cn12
ab
d
cn13
fig. 10. both swf-nets are behavioral equivalent and therefore any algorithm will be
unable to distinguish n12fromn13(assuming a notion of completeness based on >).
used as input for the αalgorithm. this approach is able to deal with
all possible situations except the one illustrated in figure 10. notethat no algorithm will be able to distinguish the logs of the two pro-cesses shown in figure 10. however, this is not a real problem sincetheyare behaviorallyequivalent. in formal terms: we can replace therequirement in theorem 4.10 bythe weaker requirement that thereare no two transitions having identical input and output places. a
detailed description of this preprocessing algorithm and a proof of
its correctness are however beyond the scope of this paper.
besidestheexplicitrequirementsstatedindeﬁnition4.3andthe-
orem 4.10, there are also a number of implicit requirements. as in-dicated before, hidden tasks cannot be detected (cf. the and-splitand and-join in figure 1). moreover, our deﬁnition of a petri netassumes that each transition bears a unique label. instead, we couldhave used a labeled petri net [39]. the latter choice would have beenmore realistic but also complicate matters enormously. the currentdeﬁnition of a wf-net assumes that each task appears onlyonce inthenetwork.withoutthisassumption,everyoccurrenceofsometasktcould refer to one of multiple indistinguishable transitions with la-
belt. preliminaryinvestigations show that the problems of “hidden
tasks” and “duplicate tasks” are highlyrelated, e.g., a wf-net with
two transitions having the same label thas a corresponding wf-
net with hidden transitions but onlyone transition labeled t.m o r e -
29over, there are relations between the explicit requirements stated
in deﬁnition 4.3 and theorem 4.10 and the implicit requirementsjust mentioned, e.g., in some cases a non-free-choice wf-net canbe made free choice byinserting hidden transitions. these ﬁndingsindicate that the class of swf-nets is close to the upper bound ofworkﬂow processes that can be mined successfullygiven the notionof completeness stated in deﬁnition 3.5. to move beyond swf-netswe either have to resort to heuristics or strengthen the notion ofcompleteness (and thus require more observations).
to conclude this section, we consider the complexityof the α
algorithm. event logs maybe huge containing millions of events.fortunately, the αalgorithm is driven byrelation >. the time it
takes to build this relation is linear in the size of the log. the com-plexityof the remaining steps in αalgorithm is exponential in the
number of tasks. however, note that the number of tasks is typicallyless than 100 and does not depend on the size of the log. therefore,the complexityis not a bottleneck for large-scale application.
5 related work
the idea of process mining is not new [7,9–11,19–24,31–33,41–45,48–50].cookandwolfhaveinvestigatedsimilarissuesinthecontextof software engineering processes. in [9] theydescribe three methodsfor process discovery: one using neural networks, one using a purely
algorithmic approach, and one markovian approach. the authors
consider the latter two the most promising approaches. the purelyalgorithmic approach builds a ﬁnite state machine where states arefused if their futures (in terms of possible behavior in the next ksteps) are identical. the markovian approach uses a mixture of al-gorithmic and statistical methods and is able to deal with noise.note that the results presented in [9] are limited to sequential be-havior. related, but in a diﬀerent domain, is the work presentedin [29,30] also using a markovian approach restricted to sequentialprocesses. cook and wolf extend their work to concurrent processesin [10]. theypropose speciﬁc metrics (entropy , event ty pe counts,
periodicity, and causality) and use these metrics to discover models
out of event streams. however, theydo not provide an approach togenerate explicit process models. recall that the ﬁnal goal of the
30approach presented in this paper is to ﬁnd explicit representations
for a broad range of process models, i.e., we want to be able to gen-erate a concrete petri net rather than a set of dependencyrelationsbetween events. in [11] cook and wolf provide a measure to quan-tifydiscrepancies between a process model and the actual behavioras registered using event-based data. the idea of applying processmining in the context of workﬂow management was ﬁrst introducedin [7]. this work is based on workﬂow graphs, which are inspiredbyworkﬂow products such as ibm mqseries workﬂow (formerly
known as flowmark) and inconcert. in this paper, two problems
are deﬁned. the ﬁrst problem is to ﬁnd a workﬂow graph generatingevents appearing in a given workﬂow log. the second problem is toﬁnd the deﬁnitions of edge conditions. a concrete algorithm is givenfor tackling the ﬁrst problem. the approach is quite diﬀerent fromother approaches: because the nature of workﬂow graphs there isno need to identifythe nature (and or or) of joins and splits. asshown in [27], workﬂow graphs use true and false tokens which donot allow for cyclic graphs. nevertheless, [7] partially deals with iter-ationbyenumeratingalloccurrencesofagiventaskandthenfoldingthe graph. however, the resulting conformal graph is not a complete
model.in[33],atoolbasedonthesealgorithmsispresented.schimm
[41,42,45] has developed a mining tool suitable for discovering hier-archicallystructured workﬂow processes. this requires all splits andjoins to be balanced. herbst and karagiannis also address the issueof process mining in the context of workﬂow management [21,19,20,23,24,22] using an inductive approach. the work presented in [22,24] is limited to sequential models. the approach described in [21,19,20,23] also allows for concurrency. it uses stochastic task graphsas an intermediate representation and it generates a workﬂow modeldescribed in the adonis modeling language. in the induction steptask nodes are merged and split in order to discover the underlying
process. a notable diﬀerence with other approaches is that the same
task can appear multiple times in the workﬂow model, i.e., the ap-proach allows for duplicate tasks. the graph generation techniqueis similar to the approach of [7,33]. the nature of splits and joins(i.e., and or or) is discovered in the transformation step, wherethe stochastic task graph is transformed into an adonis workﬂowmodel with block-structured splits and joins. in contrast to the pre-
31vious papers, our work [31,32,48–50] is characterized bythe focus
on workﬂow processes with concurrent behavior (rather than addingad-hocmechanismstocaptureparallelism).in[48–50]aheuristicap-proachusingrathersimplemetricsisusedtoconstructso-called“de-pendency/frequencytables”and“dependency/frequencygraphs”.in[31] another variant of this technique is presented using examplesfrom the health-care domain. the preliminaryresults presented in[31,48–50] onlyprovide heuristics and focus on issues such as noise.the approach described in this paper diﬀers from these approaches
in the sense that for the αalgorithm it is proven that for certain
subclasses it is possible to ﬁnd the right workﬂow model. in [5] theemit tool is presented which uses an extended version of αalgo-
rithm to incorporate timing information. note that in this paperthere is no detailed description of the αalgorithm nor a proof of its
correctness.
process mining can be seen as a tool in the context of business
(process) intelligence (bpi). in [18,40] a bpi toolset on top of hp’s
process manager is described. the bpi tools set includes a so-called
“bpi process mining engine”. however, this engine does not pro-vide anytechniques as discussed before. instead it uses generic min-ing tools such as sas enterprise miner for the generation of deci-sion trees relating attributes of cases to information about executionpaths (e.g., duration). in order to do workﬂow mining it is conve-nient to have a so-called “process data warehouse” to store audittrails. such as data warehouse simpliﬁes and speeds up the queriesneeded to derive causal relations. in [13,34–36] the design of suchwarehouse and related issues are discussed in the context of work-ﬂow logs. moreover, [36] describes the pisa tool which can be used
to extract performance metrics from workﬂow logs. similar diagnos-
tics are provided bythe aris process performance manager (ppm)[25]. the later tool is commerciallyavailable and a customized ver-sion of ppm is the staﬀware process monitor (spm) [46] which istailored towards mining staﬀware logs. note that none of the lattertoolsisextractingtheprocessmodel.themainfocusisonclusteringand performance analysis rather than causal relations as in [7,9–11,19–24,31–33,41–45,48–50].
more from a theoretical point of view, the rediscoveryproblem
discussed in this paper is related to the work discussed in [8,16,17,
3238]. in these papers the limits of inductive inference are explored.
for example, in [17] it is shown that the computational problem ofﬁnding a minimum ﬁnite-state acceptor compatible with given datais np-hard. several of the more generic concepts discussed in thesepapers could be translated to the domain of process mining. it ispossible to interpret the problem described in this paper as an in-ductive inference problem speciﬁed in terms of rules, a hypothesisspace, examples, and criteria for successful inference. the compari-sonwithliteratureinthisdomainraisesinterestingquestionsforpro-
cess mining, e.g., how to deal with negative examples (i.e., suppose
that besides log wthere is a log vof traces that are not possible,
e.g., added bya domain expert). however, despite the manyrela-tions with the work described in [8,16,17,38] there are also manydiﬀerences, e.g., we are mining at the net level rather than sequen-tial or lower level representations (e.g., markov chains, ﬁnite statemachines, or regular expressions).
additional related work is the seminal work on regions [14]. this
work investigates which transition systems can be represented by(compact)petrinets(i.e.,theso-calledsynthesisproblem).althoughthesettingisdiﬀerentandournotionofcompletenessismuchweaker
than knowing the transition system, there are related problems such
as duplicate transitions, etc.
6 conclusion
in this paper we addressed the workﬂow rediscoveryproblem. thisproblem was formulated as follows: “find a mining algorithm ableto rediscover a large class of sound wf-nets on the basis of completeworkﬂow logs.” we presented the αalgorithm that is able to redis-
cover a large and relevant class of workﬂow processes (swf-nets).through examples we also showed that the algorithm provides in-teresting analysis results for workﬂow processes outside this class.at this point in time, we are improving the mining algorithm suchthat it is able to rediscover an even larger class of wf-nets. we havetackled the problem of short loops and are now focusing on hidden
tasks, duplicate tasks, and advanced routing constructs. however,
given the observation that the class of swf-nets is close to the up-per limit of what one can do assuming this notion of completeness,
33new results will either provide heuristics or require stronger notions
of completeness (i.e., more observations).
itisimportanttoseetheresultspresentedinthispaperinthecon-
text of a larger eﬀort [31,32,48–50]. the rediscoveryproblem is not
agoalbyitself.theoverallgoalistobeabletoanalyzeanyworkﬂow
logwithoutanyknowledgeoftheunderlyingprocessandinthepres-ence of noise. the theoretical results presented in this paper provideinsights that are consistent with empirical results found earlier [31,32,48–50]. it is quite interesting to see that the challenges encoun-tered in practice match the challenges encountered in theory. forexample, the fact that workﬂow process exhibiting non-free-choicebehavior (i.e., violating the ﬁrst requirement of deﬁnition 4.3) arediﬃcult to mine was observed both in theoryand in practice. there-fore,weconsidertheworkpresentedinthispaperasasteppingstone
for good and robust process mining techniques.
we have applied our workﬂow mining techniques to two real ap-
plications. the ﬁrst application is in health-care where the ﬂow ofmulti-disciplinary patients is analyzed. we have analyzed workﬂowlogs (visits to diﬀerent specialists) of patients with peripheral arte-
rial vascular diseases of the elizabeth hospital in tilburg and the
academic hospital in maastricht. patients with peripheral arterialvasculardiseasesareatypicalexampleofmulti-disciplinarypatients.we have preliminaryresults showing that process mining is verydiﬃcult given the “spaghetti-like” nature of this process. onlybyfocusing on speciﬁc tasks and abstracting from infrequent tasks weare able to successfullymine such processes. the second applicationconcerns the processing of ﬁnes bythe cjib (centraal justitieelincasso bureau), the dutch judicial collection agencylocated inleeuwarden. we have successfullymined the process using informa-tion of 130136 cases. the process comprises 99 tasks and has been
validated bythe cjib. this positive result shows that process min-
ing based on the αalgorithm and using tools like emit and little
thumb is feasible for at least structured processes. these ﬁndingsare encouraging and show the potential of the αalgorithm presented
in this paper.
acknowledgements the authors would like to thank ana karla
alvesdemedeirosandericverbeekforproof-readingearlierversions
34of this paper and boudewijn van dongen for his eﬀorts in developing
emit and solving the problem of short loops.
references
1. w.m.p. van der aalst. veriﬁcation of workﬂow nets. in p. az´ ema and g. balbo,
editors, application and theory of petri nets 1997 , volume 1248 of lecture notes
in computer science , pages 407–426. springer-verlag, berlin, 1997.
2. w.m.p. van der aalst. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers , 8(1):21–66, 1998.
3. w.m.p.vanderaalst,p.decrom,r.goverde,k.m.vanhee,w.hofman,h.rei-
jers, and r.a. van der toorn. exspect 6.4: an executable speciﬁcation tool for
hierarchical colored petri nets. in m. nielsen and d. simpson, editors, applica-
tion and theory of petri nets 2000 , volume 1825 of lecture notes in computer
science, pages 455–464. springer-verlag, berlin, 2000.
4. w.m.p. van der aalst, j. desel, and a. oberweis, editors. business process man-
agement: models, techniques, and empirical studies ,volume1806of lecture notes
in computer science . springer-verlag, berlin, 2000.
5. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
modelsfromtimedlogs. iny.han,s.tai,andd.wikarski,editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
6. w.m.p. van der aalst and k.m. van hee. workﬂow management: models, meth-
ods, and systems . mit press, cambridge, ma, 2002.
7. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.
8. d. angluin and c.h. smith. inductive inference: theory and methods. computing
surveys, 15(3):237–269, 1983.
9. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
10. j.e. cook and a.l. wolf. event-based detection of concurrency. in proceedings
of the sixth international symposium on the foundations of software engineering(fse-6), pages 35–45, 1998.
11. j.e. cook and a.l. wolf. software process validation: quantitatively measuring
the correspondence of a process to a model. acm transactions on software
engineering and methodology , 8(2):147–176, 1999.
12. j. desel and j. esparza. free choice petri nets ,v o l u m e4 0o f cambridge tracts
in theoretical computer science . cambridge university press, cambridge, uk,
1995.
13. j. eder, g.e. olivotto, and wolfgang gruber. a data warehouse for workﬂow
logs. in y. han, s. tai, and d. wikarski, editors, international conference on
engineering and deployment of cooperative information systems (edcis 2002) ,
volume 2480 of lecture notes in computer science , pages 1–15. springer-verlag,
berlin, 2002.
14. a. ehrenfeucht and g. rozenberg. partial (set) 2-structures - part 1 and part 2.
acta informatica , 27(4):315–368, 1989.
3515. l. fischer, editor. workﬂow handbook 2001, workﬂow management coalition .
future strategies, lighthouse point, florida, 2001.
16. e.m. gold. language identﬁcation in the limit. information and control ,
10(5):447–474, 1967.
17. e.m.gold. complexityofautomatonidentiﬁcationfromgivendata. information
and control , 37(3):302–320, 1978.
18. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,
p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors, proceedings of 27th international conference on very large data bases
(vldb’01) , pages 159–168. morgan kaufmann, 2001.
19. j.herbst. amachinelearningapproachtoworkﬂowmanagement. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
20. j. herbst. dealing with concurrency in workﬂow induction. in u. baake, r. zo-
bel, and m. al-akaidi, editors, european concurrent engineering conference .s c s
europe, 2000.
21. j. herbst. ein induktiver ansatz zur akquisition und adaption von workﬂow-
modellen . phd thesis, universit¨ at ulm, november 2001.
22. j. herbst and d. karagiannis. integrating machine learning and workﬂow man-
agement to support acquisition and adaptation of workﬂow models. in pro-
ceedings of the ninth international workshop on database and expert systems
applications , pages 745–752. ieee, 1998.
23. j. herbst and d. karagiannis. an inductive approach to the acquisition and
adaptation of workﬂow models. in m. ibrahim and b. drabble, editors, proceed-
ings of the ijcai’99 workshop on intelligent workﬂow and process management:the new frontier for ai in business , pages 52–57, stockholm, sweden, august
1999.
24. j. herbst and d. karagiannis. integrating machine learning and workﬂow man-
agement to support acquisition and adaptation of workﬂow models. interna-
tional journal of intelligent systems in accounting, finance and management ,
9:67–92, 2000.
25. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
26. s. jablonski and c. bussler. workﬂow management: modeling concepts, architec-
ture, and implementation . international thomson computer press, london, uk,
1996.
27. b. kiepuszewski. expressiveness and suitability of languages for control flow
modelling in workﬂows . phd thesis, queensland university of technology, bris-
bane, australia, 2002. available via http://www.tm.tue.nl/it/research/patterns.
28. f. leymann and d. roller. production workﬂow: concepts and techniques .
prentice-hall ptr, upper saddle river, new jersey, usa, 1999.
29. h. mannila and d. rusakov. decomposing event sequences into independent
components. in v. kumar and r. grossman, editors, proceedings of the first
siam conference on data mining , pages 1–17. siam, 2001.
30. h. mannila, h. toivonen, and a.i. verkamo. discovery of frequent episodes in
event sequences. data mining and knowledge discovery , 1(3):259–289, 1997.
31. l. maruster, w.m.p. van der aalst, a.j.m.m. weijters, a. van den bosch, and
w. daelemans. automated discovery of workﬂow models from hospital data. inb. kr¨o s e ,m .d er i j k e ,g .s c h r e i b e r ,a n dm .v a ns o m e r e n ,e d i t o r s , proceedings of
36the 13th belgium-netherlands conference on artiﬁcial intelligence (bnaic 2001) ,
pages 183–190, 2001.
32. l. maruster, a.j.m.m. weijters, w.m.p. van der aalst, and a. van den bosch.
process mining: discovering direct successors in process logs. in proceedings of
the 5th international conference on discovery science (discovery science 2002) ,
volume 2534 of lecture notes in artiﬁcial intelligence , pages 364–373. springer-
verlag, berlin, 2002.
33. m.k. maxeiner, k. k¨ uspert, and f. leymann. data mining von workﬂow-
protokollen zur teilautomatisierten konstruktion von prozemodellen. in pro-
ceedings of datenbanksysteme in b¨ uro, technik und wissenschaft , pages 75–84.
informatik aktuell springer, berlin, germany, 2001.
34. m. zur m¨ uhlen. process-driven management information systems combining
data warehouses and workﬂow technology. in b. gavish, editor, proceedings of
the international conference on electronic commerce research (icecr-4) ,p a g e s
550–566. ieee computer society press, los alamitos, california, 2001.
35. m. zur m¨ uhlen. workﬂow-based process controlling-or: what you can mea-
sure you can control. in l. fischer, editor, workﬂow handbook 2001, workﬂow
management coalition , pages 61–77. future strategies, lighthouse point, florida,
2001.
36. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) ,p a g e s
1–10. ieee computer society press, los alamitos, california, 2000.
37. t. murata. petri nets: properties, analysis and applications. proceedings of the
ieee, 77(4):541–580, april 1989.
38. l. pitt. inductive inference, dfas, and computational complexity. in k.p.
jantke, editor, proceedings of international workshop on analogical and inductive
inference (aii) , volume 397 of lecture notes in computer science , pages 18–44.
springer-verlag, berlin, 1889.
39. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
40. m. sayal, f. casati, and m.c. shan u. dayal. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb’02) ,
pages 880–883. morgan kaufmann, 2002.
41. g. schimm. process mining. http://www.processmining.de/.42. g.schimm. genericlinearbusinessprocessmodeling. ins.w.liddle,h.c.mayr,
and b. thalheim, editors, proceedings of the er 2000 workshop on conceptual
approaches for e-business and the world wide web and conceptual modeling ,
volume 1921 of lecture notes in computer science , pages 31–39. springer-verlag,
berlin, 2000.
43. g. schimm. process mining elektronischer gesch¨ aftsprozesse. in proceedings e lek-
tronische gesch¨ aftsprozesse , 2001.
44. g. schimm. process mining linearer prozessmodelle - ein ansatz zur automa-
tisierten akquisition von prozesswissen. in proceedings 1. konferenz profes-
sionelles wissensmanagement , 2001.
45. g. schimm. process miner - a tool for mining process schemes from event-
based data. in s. flesca and g. ianni, editors, proceedings of the 8th european
conference on artiﬁcial intelligence (jelia) , volume 2424 of lecture notes in
computer science , pages 525–528. springer-verlag, berlin, 2002.
46. staﬀware. staﬀware process monitor (spm). http://www.staﬀware.com, 2002.
3747. h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing workﬂow
processes using woﬂan. the computer journal , 44(4):246–279, 2001.
48. a.j.m.m. weijters and w.m.p. van der aalst. process mining: discovering work-
ﬂow models from event-based data. in b. kr¨ o s e ,m .d er i j k e ,g .s c h r e i b e r ,a n d
m. van someren, editors, proceedings of the 13th b elgium-netherlands conference
on artiﬁcial intelligence (bnaic 2001) , pages 283–290, 2001.
49. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data. in v. hoste and g. de pauw, editors, proceedings of
the 11th dutch-belgian conference on machine learning (benelearn 2001) , pages
93–100, 2001.
50. a.j.m.m. weijters and w.m.p. van der aalst. workﬂow mining: discovering
workﬂow models from event-based data. in c. dousson, f. h¨ oppner, and
r. quiniou, editors, proceedings of the ecai workshop on knowledge discovery
and spatial data , pages 78–84, 2002.
a proofs of theorems in section 4.2
theorem 4.5. letn=(p,t,f) be a sound swf-net and let w
be a complete workﬂow log of n. for any a,b∈t:a•∩•b/negationslash=∅
impliesa>wb.
proof.leta,b∈t. assume p∈a•∩•b.w ep r o v e a>wbby
considering two cases.
(i)|p•|>1. consider a ﬁring sequence σending with transition
a. such a ﬁring sequence exists since nis sound. this ﬁring
sequence marks p.i fpis marked, bis enabled because in an
swf-net |p•|>1 implies |•t|= 1 for all transitions consuming
tokens from p. hence,a>wb.
(ii)|p•|=1 .bis the onlyoutput transition of p.i fpis the only
input place of b, then anyoccurrence of acan be followed by b
anda>wb.i fbhas multiple input places ( |•b|>1), then the
fact thatnis a swf-net implies |•p|= 1. therefore, ais the
onlytransition producing tokens for p.s i n c epis not implicit,
there is a marking s∈[n,[i]/angbracketrightsuch that s≥•b\{p}but not
s≥•b, i.e.,bblocks on p.s i n c enis sound and tokens from
the input places of bcan onlybe removed byﬁring b, the ﬁring
sequence leading to sc a nb ee x t e n d e dt oﬁ r e adirectlyfollowed
byb. hence,a>wb.
✷
38theorem 4.6. letn=(p,t,f) be a sound swf-net and let w
be a complete workﬂow log of n. for any a,b∈t:a•∩•b/negationslash=∅
andb•∩•a=∅impliesa→wb.
proof.leta,b∈t. assumea•∩•b/negationslash=∅andb•∩•a=∅.t o
provea→wb, we show that a>wbandb/negationslash>wa.a>wbfollows
directlyfrom theorem 4.5. remains to prove that b/negationslash>wa. we will
prove this byshowing that it is not possible to have a ﬁring sequenceσ=t
1t2t3...t n−1suchthat( n,[i])[σ/angbracketrightandtn−2=bandtn−1=a.let
σ/prime,sn,a n dsn−2be such that ( n,[i])[σ/angbracketright(n,s n),σ/prime=t1t2t3...t n−3,
and (n,[i])[σ/prime/angbracketright(n,s n−2). (note that ( n,s n−2)[ba/angbracketright(n,s n).) letp∈
a•∩•b. in statesn−2,pis marked. moreover, ais enabled in sn−2
becauseais enabled after ﬁring bandb•∩•a=∅.l e ts/primebe the
markingafterﬁring ainsn−2,i.e.,(n,s n−2)[a/angbracketright(n,s/prime).ifp/negationslash∈•a,then
aproduces a token for pwhile there is a token alreadythere, i.e., in
s/primeplacepcontains at least two tokens. this is not possible since a
sound wf-net is safe. hence, there is a contradiction if p/negationslash∈•a.i f
p∈•a,t h e nbp/negationslash∈b•becauseb•∩•a=∅. in this case, ﬁring b
disablesa(i.e., ( •b\b•)∩•a/negationslash=∅) and thus σis not a possible ﬁring
sequence. ✷
theorem 4.8. letn=(p,t,f) be a sound swf-net such that
for anya,b∈t:a•∩•b=∅orb•∩•a=∅and letwbe a
complete workﬂow log of n.
1. ifa,b∈tanda•∩b•/negationslash=∅,t h e na#wb.
2. ifa,b∈tand•a∩•b/negationslash=∅,t h e na#wb.
3. ifa,b,t∈t,a→wt,b→wt,a n da#wb,t h e na•∩b•∩ •t/negationslash=∅.
4. ifa,b,t∈t,t→wa,t→wb,a n da#wb,t h e n •a∩•b∩t•/negationslash=∅.
proof.leta,b,t∈t. we prove each of the four items separately.
1. ifa•∩b•/negationslash=∅, then there is a common output place p∈a•∩b•.
i faﬁ r i n go f ais directlyfollowed by b(or vice versa), then two
subsequent transitions produce a token for p. these transitions
do not consume tokens from p(a•∩•b=∅orb•∩•a=∅).
therefore, pcontains at least two tokens after ﬁring aandb.t h i s
is not possible since ( n,[i]) is safe. hence, a/negationslash>wbandb/negationslash>wa
which implies a#wb.
2. similar arguments applyto the situation where p∈•a∩•b.
393. assume a→wt,b→wt,a n da#wb. theorem 4.1 implies that
there are two places p1,p2∈psuch that p1∈a•∩•tand
p2∈b•∩•t. also assume that a•∩b•∩•t=∅. this implies that
p1/negationslash=p2. we demonstrate that the latter assumption leads to a
contradiction.ineverycompleteﬁringsequence a,b,andtﬁrethe
same number of times because |•p1|=|p1•|=|•p2|=|p2•|=1 .
in factaandt(andbandt) ﬁre alternatingly. since b→wt
there is a ﬁring sequence where aﬁres before band the ﬁring
ofbis directlyfollowed by t. it is not possible that ais directly
followed by b. therefore, there is a directed path lab∈f∗from
atob. if there was no directed path lab,acould be “delayed”
untilbbecomes enabled and a ﬁring sequence where ais directly
followed by bispossible.let labbethesetofelementarydirected
paths from atob.labis marked if one of its places contains
a token and labis unmarked if none of its places contains a
token. not everyexecution of ais followed by b(sincea→wt
there is a ﬁring sequence where bﬁres before aand the ﬁring
ofais directlyfollowed by t.) therefore, there are transitions
removing tokens from labother than b. these transitions are in
conﬂict with transitions preserving tokens for lab. however, since
nis free-choice these conﬂicts cannot be controlled. since these
choices should be controlled depending on whether a,bor neither
anorbis the next to ﬁre. hence we ﬁnd a contradiction.
4. similar arguments applyto the situation where t→wa,t→wb,
anda#wb.
✷
b tool support
theαalgorithm presented in this paper has been implemented us-
ing our tool exspect [3]. exspect (executable speciﬁcation tool)supports high-level petri-nets and has been used to build a toolboxnamed mimo(mining module). mimo consists of two parts: (1) a
workﬂow log generator and (2) a workﬂow log analyzer. the work-
ﬂowloggenerator generatesworkﬂow tracesonthebasisof aprocess
model. it is possible to build a graphical model of the workﬂow pro-cess in terms of an hierarchical wf-net. using the mimo toolbox a
40workﬂow log is generated automatically. the generation process can
be controlled (e.g., started and stopped) bythe designer. instead ofusing the workﬂow log generator, it is also possible to upload work-ﬂow traces from a ﬁle.
the workﬂow log analyzer is the most interesting part of the
mimo toolbox. the analyzer is a straightforward implementationof the mining algorithm presented in the previous section. this partofthemimotoolboxautomaticallygeneratesapetrinetonthebasisof a workﬂow log. it is possible to generate a petri net on-the-ﬂyandthe user can inspect →
w,>w,#w,a n d /bardblwat anytime.
fig. 11. a screenshot of the exspect module mimo while mining a workﬂow process.
figure 11 shows a screenshot of the exspect module mimo. the
screenshot shows the architecture (upper left window), the workﬂowlog generator (upper right window), and the workﬂow log analyzer
41(bottom window). all examples in this paper have been analyzed
using the mimo toolbox.
mimo has been used as the starting point for the development of
twoadditionalprocessminingtools:emit[5]andlittlethumb[50].both tools use extended versions of the αalgorithm, interface with
commercial systems, and have been tested on real cases. emit dealswith short loops eﬀectivelyand is able to rediscover anyswf-netnot using the construct shown in figure 10, i.e., it implements thepreprocessing algorithm discussed in section 4.4. emit also takes
timestamps into account to generate performance information [5].
little thumb extends the αalgorithm with features to be able to
deal with noise. again some preprocessing is used to “massage” the>relation. a more detailed discussion of emit and little thumb
is beyond the scope of this paper. the interested reader is refereedto [5,50].
when describing tools like mimo, emit, and little thumb it is
interesting to discuss the performance of these tools and the com-plexityof the αalgorithm. event logs maybe huge containing mil-
lions of events. fortunately, the αalgorithm is driven byrelation >.
the time it takes to build this relation is linear in the size of the
log. therefore, even for large logs it is relativelyeasyto construct >.
during this preprocessing step one can also build sets t
w,ti,a n d
towithout anyadditional eﬀort. after the preprocessing step tw,
ti,to,a n d>contain all the information needed. the complexityof
the remaining steps in αalgorithm is exponential in the number of
tasks. however, note that the number of tasks is typically less than100 and does not depend on the size of the log. therefore, perfor-mance is not an issue and logs containing millions of events can beprocessed in onlya few seconds.
42