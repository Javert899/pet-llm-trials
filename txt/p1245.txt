stochastic process mining: earth movers' stochastic
conformance
sander j.j. leemansa,∗, wil m.p. van der aalstb, tobias brockhob,
artem polyvyanyyc
aqueensland university of technology, brisbane, australia
brheinisch-westf alische technische hochschule, aachen, germany
cthe university of melbourne, australia
abstract
initially, process mining focused on discovering process models from event
data, but in recent years the use and importance of conformance checking has
increased. conformance checking aims to uncover dierences between a process
model and an event log. many conformance checking techniques and measures
have been proposed. typically, these take into account the frequencies of traces
in the event log, but do not consider the probabilities of these traces in the
model. this asymmetry leads to various complications. therefore, we dene
conformance for stochastic process models taking into account frequencies and
routing probabilities. we use the earth movers' distance between stochastic
languages representing models and logs as an intuitive conformance notion. in
this paper, we show that this form of stochastic conformance checking enables
detailed diagnostics projected on both model and log. to pinpoint dierences
and relate these to specic model elements, we extend the so-called `reallocation
matrix' to consider paths. the approach has been implemented in prom and
our evaluations show that stochastic conformance checking is possible in real-life
settings.
keywords: process mining, conformance checking, stochastic process mining
1. introduction
process mining aims to analyse event data in a process-centric manner and
can be used to identify, predict and to address performance and compliance
problems [2]. the uptake of process mining in industry has accelerated in recent
years. currently, there are more than 35 commercial oerings of process mining
software (for instance celonis, disco, processgold, myinvenio, pafnow, minit,
qpr, mehrwerk, puzzledata, lanalabs, stereologic, everow, timelinepi,
∗corresponding author
preprint submitted to elseviersignavio and logpickr). these products still focus on process discovery. how-
ever, the perceived importance of conformance checking is clearly growing (see
for example the recent surveys by gartner [28]).
conformance checking techniques aim to compare observed behaviour in the
form of an event log with modelled behaviour . models may be expressed us-
ing bpmn, transition systems, petri nets, process trees, statecharts, etc. such
models may have been made by hand or learned from event data using process
discovery techniques. the rst comprehensive conformance checking techniques
used token-based replay in order to count produced, consumed, missing and
remaining tokens [51]. over the last decade, alignment-based techniques re-
placed token-based replay in process mining research. alignments are used to
directly relate observed traces to the corresponding closest paths through the
model [4, 16]. many conformance measures have been proposed throughout
the years [2, 4, 8, 16, 19, 20, 23, 35, 38, 51, 58, 59]. these cover dierent quality
dimensions. in [2], four major quality dimensions were identied: recall, preci-
sion, generalisation, and simplicity. most of the conformance measures focus on
the rst two dimensions. recall measures quantify the fraction of the log that
\ts" the model. this intuitive notion can be operationalised in dierent ways,
e.g., the percentage of observed traces that can be generated by the model or
the number of missing and remaining tokens during replay [2, 4, 16]. precision
measures complement recall. precision aims to quantify the fraction of modelled
behaviour that was actually observed in the event log. many precision notions
have been proposed, but, unfortunately, most turned out to be problematic
[3, 55]. there are several reasons for this. here, we name the two most import-
ant problems encountered using most of the measures. first of all, a model with
loops allows for innitely many traces making it dicult to dene the \fraction"
of observed behaviour (i.e., the observed percentage of modelled traces is zero
by denition). second, precision depends on recall. when many of the observed
traces are not tting, we cannot talk about precision in a meaningful way (i.e.,
precision is not orthogonal to but is inuenced by recall).
intuitively, most measures reason in terms of the \fraction of observed be-
haviour" and the \fraction of modelled behaviour". the rst fraction is easy
to quantify, because the event log is nite and observed behaviours have a fre-
quency. the second fraction is dicult to dene, leading to the two problems
related to precision mentioned before. how to talk about the \fraction of mod-
elled behaviour" covered by the event data when the number of possible traces
is innite or many observed traces are non-tting? note that the event log
contains only a sample of behaviour and it is odd to assume that for precision
one would need to see all possible behaviour. the analysis in this paper shows
that the absence of probabilities in the process model are a direct cause for these
problems . adding probabilities allows us to better reason about \fraction of
modelled behaviour" covered by the event log. this paper shows that these
problems indeed disappear when using probabilistic models. therefore, we ad-
vocate the use of stochastic conformance checking and provide a new approach
to compare event logs and process models.
this paper extends the work presented in [34] where we introduced the rst
2stochastic conformance checking technique. in [34], we proposed a measure for
quantifying the dierence between a process model having probabilities and a
standard event log capturing the frequencies of traces. both the process model
and the event log are mapped onto stochastic languages that are then compared
using the so-called earth movers' distance (emd). using emd we can quantify
the dierence between a model and a log in a more objective manner. however,
in [34] we only presented the emd-based measure without providing diagnostics .
in this paper, we extend our approach to also provide diagnostics projected
onto the event log and the process model. we annotate logs and models with
information explaining the dierences. this will help to diagnose deviations.
to this end, we added the new concept of stochastic trace alignments that
relates observed traces to paths in the model in detail, and added projections
of these trace alignments on the event log and on the model. furthermore, the
method now supports duplicate activity labels and unlabelled steps in process
models. the novel emd-based conformance checking technique based on the
extended reallocation matrix has been implemented as a prom plug-in and
can be obtained by downloading the earth movers' stochastic conformance
checking package from http://promtools.org .
we believe that it is important to consider the stochastic perspective as a
rst-class citizen for the following reasons:
•current conformance checking techniques are asymmetric , because the
frequencies of traces in the event log are taken into account without having
a comparable notion on the model side. this causes foundational problems
when dening for example precision (handling loops and event logs that
are relatively small or that contain deviating behaviour). as a result,
conformance checking measures and diagnostics tend to be misleading.
consequently, process discovery techniques cannot be compared properly.
•another reason to include the stochastic perspective is the obvious link
tosimulation ,prediction and recommendation [2]. simulation, predic-
tion and recommendation models inherently require probabilities. for
example, to predict the remaining process time of a running case, one
needs to know the likelihood of the dierent paths the case can take.
also, in simulation models, we need to assign probabilities to choices [52].
therefore, the quality of a process model is not only determined by its
control-ow structure but also by its stochastic perspective .
event logs typically have a clear pareto distribution: it is quite common that
less than 20% of the trace variants cover over 80% of the traces in the event
log. in an event log with thousands of traces, a deviating trace variant that
happened hundreds of times is clearly more severe than a deviating trace variant
that happened only once. when models have no probabilities, the decision to
include additional, less likely, paths in the model may have devastating eects
on precision. if the model distinguishes between \highways" (paths in the model
that have a high probability) and \dirt roads" (paths in the model that have
a low probability), then it is less severe that a dirt road is not observed in the
3event log. however, if highways are completely missing in the event log, then
this is more severe. conversely, the decision to include a dirt road in the model
or not should have limited impact on conformance.
existing conformance techniques are highly sensitive to what is included in
the model and what not. using existing measures a model may seem similar to
the actual process, but is not. conversely, the model may seem very dierent,
but is actually very close to what is observed.
stochastic conformance checking assumes the presence of probabilities in
process models. existing models typically do not have such probabilities. for-
tunately, by using replay techniques, it is relatively easy to add probabilities
to process models [48, 52]. these can be used as a rst estimate and should
be rened by domain experts after seeing conformance diagnostics. given the
problems mentioned, we feel that modellers should add probabilities to pro-
cess models and that discovery techniques should directly return models with
probabilities.
this paper extends [34] with support for silent and duplicate activities (e.g.,
skipping parts of the model or activities occurring in dierent parts of the pro-
cess), detailed log- and model-based diagnostics, based on the new concepts of
stochastic trace alignments. furthermore, a new formally-proven more ecient
implementation was added, and the evaluation was extended with several case
studies.
the remainder of this paper is organised as follows. we start by providing a
small motivating example in section 2. section 3 discusses related work. notions
such as event logs, process models, and stochastic languages are introduced in
section 4. section 5 introduces the earth mover's stochastic conformance
(emsc) notion to compare stochastic languages and presents the reallocation
matrix. based on this, stochastic trace alignments are computed, which serve
as input for diagnostics projected on the event log and process model. section 6
evaluates the approach which has been implemented in prom. section 7 discusses
applications and open challenges. section 8 concludes the paper.
2. motivating example
to motivate the need for stochastic conformance checking , we use a small
toy example. consider the process model in figure 1 and the following ve
event logs:
l1=[/uni27e8a;b;d;e /uni27e9490;/uni27e8a;d;b;e /uni27e9490;/uni27e8a;c;d;e /uni27e910;/uni27e8a;d;c;e /uni27e910]
l2=[/uni27e8a;b;d;e /uni27e9245;/uni27e8a;d;b;e /uni27e9245;/uni27e8a;c;d;e /uni27e95;/uni27e8a;d;c;e /uni27e95;/uni27e8a;b;e/uni27e9500]
l3=[/uni27e8a;b;d;e /uni27e9489;/uni27e8a;d;b;e /uni27e9489;/uni27e8a;c;d;e /uni27e910;/uni27e8a;d;c;e /uni27e910;/uni27e8a;b;e/uni27e92]
l4=[/uni27e8a;b;d;e /uni27e9500;/uni27e8a;d;b;e /uni27e9500]
l5=[/uni27e8a;c;d;e /uni27e9500;/uni27e8a;d;c;e /uni27e9500]
the process model is expressed in terms of an accepting petri net with an initial
marking [p1]and a nal marking [p6]. there are four possible traces starting in
4p1ap2
p3cb
p4
d
p5e
p6
figure 1: an accepting petri net allowing for the traces /uni27e8a;b;d;e /uni27e9,/uni27e8a;d;b;e /uni27e9,/uni27e8a;c;d;e /uni27e9, and
/uni27e8a;d;c;e /uni27e9.
[p1]and ending in [p6]:/uni27e8a;b;d;e /uni27e9,/uni27e8a;d;b;e /uni27e9,/uni27e8a;c;d;e /uni27e9, and/uni27e8a;d;c;e /uni27e9. these
describe the model's behaviour. note that we allow for petri nets with duplicate
and silent transitions. in fact, all notions dened in this paper are independent
of the representation and can be used for any modelling language. we only
use petri nets to provide a graphical representation of model behaviour and to
operationalise our approach (e.g., in conjunction with existing discovery tech-
niques). the event logs are multisets of traces and each trace is a sequence of
activities. trace /uni27e8a;b;d;e /uni27e9models the execution of activities a,b,d, ande. this
trace occurs 490 times in event log l1and 245 times in event log l2. each of
the ve event logs describes 1000 traces (to facilitate comparison).
each trace in l1matches a trace of the model in figure 1 and vice versa.
hence, all existing recall and precision measures tend to give a high score (i.e.,
good conformance). half of the traces in l2do not t the model ( /uni27e8a;b;e/uni27e9is
impossible according to the model in figure 1, but occurs 500 times). hence,
all existing recall measures will report a low recall score for l2. however, these
measures will report a high score for recall when l3is considered. the reason is
that inl3, 99.8% of the traces are tting ( /uni27e8a;b;e/uni27e9occurs only twice). existing
recall measures tend to give high scores when l4andl5are considered since
the model can reproduce all traces observed. however, both l4andl5are only
covering two of the four traces allowed by the process model in figure 1. hence,
existing precision measures tend to give a lower score for l4andl5. moreover,
due to symmetry, there is no reason to consider l4andl5to be dierent from
a precision point of view.
the above analysis of existing recall measures shows that frequencies matter .
l2andl3have the same sets of traces, but 50% of the traces of l2are tting and
99.8% of the traces of l3are tting. hence, most recall measures will consider
l3to conform much better than l2. the logical counterpart of frequencies
in event logs are routing probabilities in process models. however, almost all
existing measures ignore such routing probabilities. this leads to an asymmetry.
in this paper, we argue that also probabilities matter . to illustrate this, we add
probabilities to our accepting petri net.
consider the simplied stochastic process model in figure 2. the numbers
attached to transitions can be interpreted as weights . assumeahas occurred
resulting in the marking [p2;p3]enablingb,c, andd. the weights of the three
5p1a1.00p2
p3c0.02b0.98
p4
d1.00
p5e1.00
p6
figure 2: a stochastic petri net dening the stochastic language m =
[/uni27e8a;b;d;e /uni27e90:49;/uni27e8a;d;b;e /uni27e90:49;/uni27e8a;c;d;e /uni27e90:01;/uni27e8a;d;c;e /uni27e90:01].
enabled transitions are respectively 0.98, 0.02, and 1.00. this means that b
occurs rst with probability0:98
0:98+0:02+1:00=0:49,coccurs rst with probabil-
ity0:02
0:98+0:02+1:00=0:01, anddoccurs rst with probability1:00
0:98+0:02+1:00=0:5.
suppose that doccurs resulting in the marking [p2;p5]enablingbandc. the
weights of the enabled transitions are 0.98 and 0.02. this means that boc-
curs rst with probability0:98
0:98+0:02=0:98 andcoccurs rst with probability
0:02
0:98+0:02=0:02. hence, the probability of trace /uni27e8a;d;b;e /uni27e9is 0:5×0:98=0:49, the
probability of trace /uni27e8a;d;c;e /uni27e9is 0:5×0:02=0:01, etc. a stochastic language as-
signs probabilities to traces. for our example, m=[/uni27e8a;b;d;e /uni27e90:49;/uni27e8a;d;b;e /uni27e90:49;
/uni27e8a;c;d;e /uni27e90:01;/uni27e8a;d;c;e /uni27e90:01]is the stochastic language of the model in figure 2.
the stochastic process model in figure 2 does not show timing information.
however, the ordering of concurrent activities is resolved by time ( dis \racing"
againstbandc). for example, in a generalised stochastic petri net (gspn)
both timed and immediate transitions can be used [10]. immediate transitions
have priority over timed transitions and do not take any time. a gspn can
be converted into an embedded markov chain providing probabilities for each
path in the model. hence, we can abstract from time and focus on trace prob-
abilities. actually, we use so-called generalised stochastic labelled petri nets
which extend traditional gspns with a labelling function to allow for silent
and duplicate activities (while abstracting from time durations and focusing on
probabilities).
we can convert an event log into a stochastic language by dividing the
frequency of each trace by the overall number of traces. for our ve example
logs, we obtain the following stochastic languages:
l1=[/uni27e8a;b;d;e /uni27e90:49;/uni27e8a;d;b;e /uni27e90:49;/uni27e8a;c;d;e /uni27e90:01;/uni27e8a;d;c;e /uni27e90:01]
l2=[/uni27e8a;b;d;e /uni27e90:245;/uni27e8a;d;b;e /uni27e90:245;/uni27e8a;c;d;e /uni27e90:005;/uni27e8a;d;c;e /uni27e90:005;/uni27e8a;b;e/uni27e90:5]
l3=[/uni27e8a;b;d;e /uni27e90:489;/uni27e8a;d;b;e /uni27e90:489;/uni27e8a;c;d;e /uni27e90:01;/uni27e8a;d;c;e /uni27e90:01;/uni27e8a;b;e/uni27e90:002]
l4=[/uni27e8a;b;d;e /uni27e90:5;/uni27e8a;d;b;e /uni27e90:5]
l5=[/uni27e8a;c;d;e /uni27e90:5;/uni27e8a;d;c;e /uni27e90:5]
by converting event logs and process models to stochastic languages, con-
formance is reduced to the problem of comparing stochastic languages. consider
6m=[/uni27e8a;b;d;e /uni27e90:49;/uni27e8a;d;b;e /uni27e90:49;/uni27e8a;c;d;e /uni27e90:01;/uni27e8a;d;c;e /uni27e90:01]and the ve event
logsl1,l2,l3,l4, andl5. obviously, l3is closer tomthanl2. similarly, l4
is closer to mthanl5. in [34], we proposed to use the so-called earth movers'
distance (emd) to compare stochastic languages. if the probabilities of traces
are considered as piles of sand, then emd is the minimum cost of moving the
sand from one distribution to another. emd requires a distance notion. for
our earth movers' stochastic conformance (emsc) notion [34], we provided
several distance notions, e.g., the edit distance between two traces.
if we assume the normalised edit distance between traces, then the emd
distance is a number between 0 (identical, i.e., fully conforming) and 1 (worst
possible conformance). for our model mand logsl1;l2;:::;l 5we nd the
following distances: 0 for l1, 0.125 for l2, 0.0005 for l3, 0.005 for l4, and
0.245 forl5. note that distance is the inverse of similarity, i.e., for model m
and logsl1;l2;:::;l 5we nd the following emsc similarity measures: 1 for
l1, 0.875 forl2, 0.9995 for l3, 0.995 forl4, and 0.755 for l5. hence, given m,
l1has the best conformance, l3is much better than l2, andl4is much better
thanl5. this matches our intuition, e.g., l5does not have any executions of b
although, according to the model in figure 2, bshould be executed for 98% of
cases. note that there is just one conformance measure and not two separate
measures for recall and precision. this makes sense considering that increasing
the probability of one trace should coincide with lowering the probabilities of
other traces.
the example presented in this section shows that probabilities matter and
cannot be excluded.
3. related work
this section discusses related work. section 3.1 discusses techniques for
conformance checking in process mining. section 3.2 presents two case studies in
process mining, and broader in business process management, that can directly
benet from stochastic conformance checking. finally, section 3.3 summarises
modelling formalisms for describing stochastic languages.
3.1. conformance checking techniques
existing conformance checking techniques can be broadly classied based on
the analysis they apply, namely quantication and characterisation techniques.
quantication techniques assign a number, often between zero and one, which
measures deviations between a given event log and process model. then, in-
tuitively, a conformance measurement of zero signies that the log does not t
the model, while a measurement of one suggests that the log ts the model
perfectly. in general, a measurement has a higher value if the model can re-
play more (parts of) traces from the log. instead of mapping discrepancies and
commonalities between the log and model onto a numeric domain, the charac-
terisation techniques pinpoint them by means of descriptive artefacts. often,
such artefacts capture a specic class of deviations and commonalities, for ex-
ample the minimal necessary deviations between the log and model. next, in
7sections 3.1.1 and 3.1.2, we review prominent works on, respectively, quantic-
ation and characterisation conformance checking techniques.
in [49], the authors discuss a generalisation of the conformance checking
problem. instead of the classical setting, in which either the compared process
model or event log is fully trusted, the generalised approach strives for a con-
trolled balance of the trust in the quality of the compared log and process model.
given three distance functions, one between pairs of logs, another between pairs
of models, and a third one between pairs composed of one model and one log,
the generalised conformance checking is realised as an optimisation problem that
searches for a log and model in the trusted proximity to the original compared
log and model that demonstrate \good" conformance.
3.1.1. quantication techniques
one recall and several precision techniques presented in [51] are established
on statistics of replaying event log traces in the model. the recall measure
penalises tokens that are required but are missing to support the execution of
traces and tokens that remain after traces get executed. the precision measures
penalise large numbers of enabled transitions and mismatches in the pairs of
activities that characterise the behaviours captured in the log and model.
in [4], the authors present a technique for measuring recall based on the
notion of an optimal alignment, which describes minimal deviations between
traces of the log and model. the approach establishes recall by normalising
the total cost of optimal alignments of all traces in the log against the worst-
case scenario alignments that maximise deviations between trace activities by
deliberately avoiding capturing commonalities of traces. in [39], a precision
measure is proposed that constructs a prex automaton of states of the model
that are visited by the traces of the log. then, for each automaton state, the
approach evaluates if there are enabled activities by the model not present in the
log. in [4, 9], this approach is extended by aligning the log with the model before
constructing the prex automaton, which enables support for log traces that do
not t the model perfectly. finally, in [36], this approach is further extended
to quantify the commonalities and discrepancies in the data-, resource- and
time-related aspects of the compared traces.
in [24], the precision of discovered models is measured using negative events,
based on the notion of a confusion matrix. in [59], the authors devise an ap-
proach that establishes precision as the ration of the behaviour allowed by the
model that does not contradict the generated negative events. finally, in [57],
the measure from [24] was generalised by assigning weights to negative events
that reect the condence of the event being negative. consequently, the pre-
cision measure from [24] was generalised as well.
an approach for measuring precision based on anti-alignments is presen-
ted in [19]. given a log trace, an anti-alignment is a trace described by the
model that is as much dierent from the log trace as possible. in the approach,
some traces are removed from the log, and then the anti-alignments are used to
establish how precise the model describes the log traces.
8in [33], the authors present recall and precision measures that abstract the
behaviour captured in the model and log to subsets of activities of the size of
some input parameter k, encode the abstractions as deterministic nite auto-
mata and, nally, perform structural comparisons on the automata. a tech-
nique that measures precision and recall based on common abstract represent-
ations of process models and logs, called k-order markovian abstractions, is
presented in [12]. the higher the value of kused to construct the abstractions,
the more rened the computations, though at the cost of exponential run time.
the idea of using abstract representations of models and logs for computing the
precision and recall are also explored in [51, 60].
in [46], the authors present precision and recall measures grounded in the
notion of topological entropy of an irreducible language. the measures allow
for a monotone assessment of the compared collections of traces specied by the
model and log. in [43, 27], the measures are extended to account for traces that
dier in some activities.
recently, the process mining community started discussing formal properties
that good conformance measures should satisfy [55, 3, 46, 43]. by demonstrating
that a measure fullls certain properties, one, indirectly, establishes its useful-
ness, as the properties allow explaining and comparing the measured values.
as of today, the entropy-based conformance measures [46] are the only known
measures that satisfy all the properties put forward by the community [46, 54].
all the above-discussed techniques ignore the stochastic perspective of traces
described in the compared model and log. next, we discuss techniques that take
the stochastic perspective into account.
in [53], the question of how to compare actual process execution with the
scheduled execution in terms of performance was addressed, using queueing
networks. queueing networks describe inter-case timing dependencies, while
traces in stochastic languages (used in this paper) are in princple independent.
furthermore, the queueing networks of [53] do not support choice, which is
a key concept of stochastic behaviour. furthermore, where [53] uses markov
chains to compare models of behaviour, we directly compare the behaviour
of logs/models with one another without using any abstraction, and we allow
approximate matching using levenshtein. it would be interesting to combine
the concepts of [53] and this paper.
in [29], a range of desired properties for stochastic precision and recall meas-
ures is presented, and techniques grounded in the entropy of the compared
stochastic languages that indeed satisfy these properties are introduced. these
techniques do not take the stochastic perspective of both log and model into
account at the same time . that is, recall ignores the stochastic perspective of
the model, and precision ignores the stochastic perspective of the log.
finally, in [44], the authors propose an entropic relevance measure for stochastic
conformance checking, which measures the average number of bits required to
compress a log trace based on the given stochastic process model, and is com-
putable in time linear in the size of the input event log.
93.1.2. characterisation techniques
a (control-ow) alignment between a trace from an event log and a trace
described by a model is a sequence of moves, where a move is a pair in which
the rst element refers to an activity in the log trace and the second element
refers to a matching activity in the model trace. as the matching may not be
feasible due to the discrepancies between the traces, one element in a move can
be a special skip symbol to denote that the only activity in the move pair, either
from the log or model, could not be matched. note that moves in an alignment
must be composed in such a way that the projection to rst (second) elements
of the moves that omits the skip symbols is the log (model) trace. an optimal
alignment between a log trace and a process model is an alignment between the
log trace and some trace described by the model with the lowest possible cost
per some non-negative costing model on moves. consequently, an alignment
describes the \cheapest" possible deviations between the log trace and traces
supported by the model. the notion of control-ow alignment and the rst
technique for constructing optimal alignments were proposed in [8, 4].
the work in [23] presents a technique for conformance checking between an
event log and process model based on their common representations as event
structures, artefacts that encode the partial order semantics of processes. the
technique proceeds by folding the event log and unfolding the process model
into two structures and then constructing their partially synchronised product
that explains the commonalities and discrepancies of the two compared sets of
behaviour. as an event log does not contain information about concurrent exe-
cution of activities, the technique is parametrised by a function, a concurrency
oracle, that mines the partial order dependencies between the activities.
in [18], the authors generalised the notion of an optimal control-ow align-
ment to account for data, time and resources perspectives encoded both in
process models and event logs. the technique starts by constructing an op-
timal control-ow alignment and then extending it to further perspectives. the
technique discovers a valid process model execution with a minimal - subject
to the limitation imposed by the employed two-phase search approach - cost of
deviations with the given observed trace. the approach to multi-perspective
alignment presented in [35] overcomes the limitation of the approach in [18] by
suggesting a technique for constructing globally optimal multi-perspective align-
ments across all the process perspectives. finally, in [40], the authors presented
an approach that, given two event logs, constructs an abstract visualisation, in
the form of a graph or table, of their statistically signicant dierences.
as of today, to the best of our knowledge, there are no characterisation
conformance techniques that take the stochastic perspective of the compared
model and log into account. hence, this paper aims to address this.
3.2. case studies
in [45], the authors report on the outcomes of a project with a major ger-
man health insurance company that aimed to analyse and simplify approxim-
ately 4,000 models captured using the event-driven process chain (epc) nota-
tion annotated with probabilities of taking decisions at the designed branching
10points. the models and annotations were developed manually, by the business
analysts of the company. the probabilities were developed to reect the likeli-
hood of various business scenarios when handling clients or performing internal
operations. consequently, the insurer relied on the models to estimate the num-
ber of employees, i.e., sta-hours, to hire to support all the business processes in
the upcoming nancial year. the models and the probability annotations were
reviewed and updated every year, which constituted a signicant eort on the
company side. using logs of executed business processes at the end of a nancial
year, stochastic conformance checking can be used to analyse the correctness
of the original probability estimates and guide an automatic conguration of
decision probabilities in models used to plan resources for the next year.
the work in [14] presents an analytical approach for comparing whether or-
ganisations execute, what essentially is, the same business process in the same
way. the approach allows comparing observed process executions with the in-
tended design deployed by the organisation, as well as with variants of the design
deployed by other organisations. such comparisons can help organisations un-
derstand what they do dierently, and what potential for standardisation of
business processes exists. the comparison is based on classical, non-stochastic,
alignments. by extending the analytics oered in [14] to stochastic conformance
checking, one can obtain a more accurate diagnostics which pinpoints frequent
and rear discrepancies, rather than witnessing their presence or absence. we
will elaborate on this in section 6.5.
3.3. formalisms for describing stochastic languages
there exist several modelling languages for capturing stochastic languages.
here, we discuss several of such languages.
amarkov chain is a sequence of random variables [22]. the possible values
of the variables form the state space of the chain. common types of markov
chains dier in how they represent time, either discrete- or continuous-time, and
in the state space they encode, either countable or continuous [11]. usually, the
probability of a random variable in the markov chain does not depend on the
history of the chain, i.e., the values of the preceding variables. in markov chains
with memory, however, the future values of variables depend on the past values.
aprobabilistic automaton [47] generalises the concept of a deterministic nite
automaton by specifying probabilities for state transitions and a distribution for
choosing the initial state. consequently, the probabilistic automaton is also a
generalisation of the concept of a discrete-time countable markov chain. given
a current state, the probabilities indicate the likelihoods of the next input,
however given an input, the next state is deterministic.
in a classical petri net, transitions re non-deterministically. in a stochastic
petri net, transitions race to re, using a delay drawn from a distribution. the
reachability graph of a stochastic petri net can be mapped to a markov chain,
where each state in the reachability graph is mapped to the corresponding state
in the markov chain, and each transition ring is mapped to a transition in a
markov chain of the corresponding probability. generalised stochastic petri net s
extend this notion with a second category of transitions: immediate transitions,
11which re before the other transitions, with a likelihood based on their weight
relative to the total weight of all enabled immediate transitions [37]. in the next
section, we extend generalised stochastic petri nets with transition labels and
introduce them formally.
4. preliminaries
in this section, we introduce existing concepts to be used in the remainder
of the paper.
stochastic languages. given an alphabet  of activities, a trace is a sequence
of occurrences of activities. let t=∗denote the universal set of traces. a
stochastic language lassigns a probability to each trace:
l∶t→[0;1]such that /summation.disp
t∈tl(t)=1
anite stochastic language assigns a positive probability to a nite number
of traces. an event log is a multiset of traces. inherently, an event log denotes
a nite stochastic language. finally, a stochastic language lcan be projected
to its corresponding set of traces ̃l:
̃l={t/divides.alt0l(t)>0}
stochastic process models. alabelled petri net (p;t;f; ;;m 0)consists of
a set of places p, a set of transitions tsuch thatp∩t=/uni2205, a ow relation
f∶(p×t)→(t×p), a nite alphabet of activities  such that ∉, a
transition labelling function ∶t→∪{}, and an initial marking m0. we use
the standard semantics of petri nets [5]: a marking containing tokens on places
ofpindicates the state of the net, and a transition t∈tisenabled if all places
connected to it by fcontain tokens. when tres, it consumes and produces
tokens on the places as indicated by the ow relation f, and if(t)≠, indicates
the execution of activity (t).
ageneralised stochastic labelled petri net (gslpn) is an octuple (p,t,f,
,,m0,ti,w)in which (p;t;f; ;;m 0)is a labelled petri net, ti⊆tis a
set of immediate transitions, and w∶t→ris a weight function. semantically, if
an immediate transition ( t∈ti) is enabled, then no timed transition (t′∈tkti)
is enabled. let t′be the set of enabled transitions. then, the probability that
a transition t′∈t′res, isw(t′)/slash.left∑t′′∈t′w(t′′).
please note that immediate transitions do not increase the expressivity of
gslpn, that is, every gslpn can be expressed without immediate trans-
itions [17], however these transitions have been used in literature to increase
the legibility of stochastic models, and some stochastic process discovery tech-
niques return both types of transitions [48]. similarly, while silent transitions
are typically not part of stochastic petri net denitions, they are omnipresent
in process mining and thus part of stochastic process discovery [48], and thus
we dened glspn with a labelling function .
12in literature, timed transitions are typically modelled as ring after a par-
ticular time, modelled by an exponential distribution [50]. however, by the
memory-less property of the exponential distribution, for our purposes it suf-
ces to model which transition res with what probability, rather than how long
it takes before transitions re.
stochastic path languages. apath is a sequence of transitions that brings a
stochastic process model from its initial state m0to a nal state1. letp=t∗
denote the universal set of all paths. then, a stochastic path language mdenotes
a probability for each path:
m∶p→[0;1]such that /summation.disp
p∈pm(p)≤1
anite stochastic path language assigns a positive probability to a nite
number of paths. notice the inequality; we explicitly allow partial stochastic
path language s in which ∑p∈pm(p)<1. as we will show in section 5.7, we can
omit the \tail" of exceptional paths, for instance going through a loop many
times. using the labelling function of the stochastic petri net, a path can be
projected onto a trace (where ⋅denotes trace concatenation):
(/uni27e8/uni27e9)=/uni27e8/uni27e9
(/uni27e8p1/uni27e9⋅p)=/uni23a7/uni23aa/uni23aa/uni23a8/uni23aa/uni23aa/uni23a9(p) if(p1)=
/uni27e8(p1)/uni27e9⋅(p)otherwise
finally, a stochastic path language mcan be projected to its corresponding
set of paths /tildecomb.alt1mand its corresponding language:
/tildecomb.alt1m={p/divides.alt0m(p)>0}
(m)={(p) /divides.alt0p∈/tildecomb.alt1m}
note that the techniques presented in this paper are independent of the
stochastic process formalism: the techniques require a stochastic (path) lan-
guage, but no particular formalism.
5. earth movers' stochastic conformance checking
in this section, we introduce our approach for stochastic conformance check-
ing of event logs and stochastic process models: the earth movers' stochastic
conformance (emsc). intuitively, emsc mimics the earth movers' distance:
consider both the log and the model as piles of sand, each having a particu-
lar shape. then, the earth movers' distance is the minimal eort to transform
1in this paper, without loss of generality, we assume that every deadlock state is a nal
state and that every nal state is a deadlock state. we also assume that from each reachable
state, it is possible to reach a deadlock state (that is, no livelocks).
13event log
stochastic
process
modelreallocation
matrix (5.1)
numeric
measure
(5.2)stochastic
trace
alignments
(5.3)log projec-
tion (5.4)
model
projection
(5.5)
figure 3: overview of our approach. the numbers refer to the sections in which we discuss
the concepts and steps.
[/uni27e8a;b;e/uni27e930;
/uni27e8a/uni27e910;
/uni27e8a;d;e/uni27e94;
/uni27e8a;b;d;e /uni27e920;
/uni27e8a;d;b;e /uni27e930;
/uni27e8a;c;d;e /uni27e93;
/uni27e8a;c;e/uni27e93]
(a) event log le.a0.90
(a1)c0.02b0.98
d0.50
0.50()e1.00a0.10(a2)
(b) stochastic model me.
figure 4: running example of an event log and a stochastic process model.
one pile into the other, that is, the amount of sand that needs to be moved
multiplied by the distance over which it needs to be moved.
figure 3 shows an overview of the approach: rst, a reallocation matrix is
constructed, which shows how probability mass is to be moved between the log
and the model (section 5.1). from a reallocation matrix, a dierence measure is
derived (section 5.2). in order to oer more detailed insights into the dierences
between log and model, rst a set of stochastic trace alignments is computed
(section 5.3), which are consequently projected on the event log (section 5.4)
and the model (section 5.5).
in the remainder of this section, we introduce each of these steps in detail,
using the running example shown in figure 4. we nish the section with two
extensions to log-log and model-model comparisons in section 5.6 and discuss
practical considerations and ecient implementation in section 5.7.
14log
model
/uni27e8a2/uni27e9
/uni27e8a1;b;d;e/uni27e9
/uni27e8a1;b;;e/uni27e9
/uni27e8a1;c;d;e/uni27e9
/uni27e8a1;c;;e/uni27e9
/uni27e8a1;d;b;e/uni27e9
/uni27e8a1;d;c;e/uni27e9
/uni27e8a1;;b;e/uni27e9
/uni27e8a1;;c;e/uni27e9
p 0.1 0.2205 0.2205 0.0045 0.0045 0.2205 0.0045 0.2205 0.0045
/uni27e8a;b;e/uni27e9 0.3 0 0 0.0795 0 0 0 0 0.2205 0
/uni27e8a/uni27e9 0.1 0.1000 0 0 0 0 0 0 0 0
/uni27e8a;d;e/uni27e9 0.04 0 0 0.0355 0 0 0 0.0045 0 0
/uni27e8a;b;d;e /uni27e90.2 0 0.1950 0.0050 0 0 0 0 0 0
/uni27e8a;d;b;e /uni27e90.3 0 0 0.0795 0 0 0.2205 0 0 0
/uni27e8a;c;d;e /uni27e90.03 0 0.0255 0 0.0045 0 0 0 0 0
/uni27e8a;c;e/uni27e9 0.03 0 0 0.0210 0 0.0045 0 0 0 0.0045
table 1: a reallocation matrix for example log leand modelmeof figure 4. to distinguish
transitions of mewith the same label, these have been numbered, and the silent transition
is denoted with .
5.1. reallocation matrix
areallocation matrix indicates how the probability mass of the traces of a
log can be transformed into the probability mass of the paths of a model and vice
versa: the rows indicate how the mass of a trace is distributed over the paths,
while the columns indicate how the probability mass of a path is distributed
over the traces.
denition 1 (reallocation matrix) .letlbe a nite stochastic language and let
mbe a nite stochastic path language. then r∶l×m→[0;1]is areallocation
matrix if and only if:
1.each row, representing a trace t∈̃l, sums to the probability l(t):
∀t∈̃ll(t)=/summation.disp
p∈/tildecomb.alt1mr(t;p)
2.each column, representing a path p∈/tildecomb.alt1m, sums to at least the probability
m(p):
∀p∈/tildecomb.alt1mm(p)≤/summation.disp
t∈̃lr(t;p)
notice the asymmetry in requirements 1 and 2: in order to support models
with innitely many traces in a nite reallocation matrix, requirement 2 is an
inequality (we elaborate on this in section 5.7).
table 1 shows a reallocation matrix for our example log leandmeof
figure 4. in the paths of me, for readability, transitions with the same label
have been numbered, and the silent transition is denoted with . in this matrix,
for instance, all the probability of log trace /uni27e8a/uni27e9is mapped to the model path
/uni27e8a2/uni27e9.
intuitively, following the analogy of the earth movers' distance, the cost of
a reallocation matrix is the total probability mass that is moved multiplied by
the distance over which it is moved.
15log
model
/uni27e8a2/uni27e9
/uni27e8a1;b;d;e/uni27e9
/uni27e8a1;c;;e/uni27e9
/uni27e8a1;d;b;e/uni27e9
/uni27e8a1;b;;e/uni27e9
/uni27e8a1;d;c;e/uni27e9
/uni27e8a1;;c;e/uni27e9
/uni27e8a1;;b;e/uni27e9
/uni27e8a1;c;d;e/uni27e9
/uni27e8a;b;e/uni27e9 0.67 0.25 0.33 0.25 0 0.50 0.33 0 0.50
/uni27e8a/uni27e9 0 0.75 0.67 0.75 0.67 0.75 0.67 0.67 0.75
/uni27e8a;d;e/uni27e9 0.67 0.25 0.33 0.25 0.33 0.25 0.33 0.33 0.25
/uni27e8a;b;d;e /uni27e90.75 0 0.50 0.50 0.25 0.50 0.50 0.25 0.25
/uni27e8a;d;b;e /uni27e90.75 0.50 0.50 0 0.25 0.25 0.50 0.25 0.50
/uni27e8a;c;d;e /uni27e90.75 0.25 0.25 0.50 0.50 0.50 0.25 0.50 0
/uni27e8a;c;e/uni27e9 0.67 0.50 0 0.50 0.33 0.25 0 0.33 0.25
table 2: the distance matrix for example log leand model me.
the distance measure is a parameter of the approach, for which in this paper
we propose the normalised string edit (levenshtein) distance. the levenshtein
distance describes the minimum number of insertions, deletions and substitu-
tions to transform one string into another. for a trace tand a path p, we dene
their distance (t;p)to be the levenshtein distance between tand the down-
projected trace of p((p)) divided by the maximum length of tand(p). the
distance matrix of our example log leand model meis shown in table 2.
denition 2 (cost of reallocation matrix) .letlbe a nite stochastic language,
letmbe a nite stochastic path language and let rbe a reallocation matrix
overlandm. then, the cost of ris the inner product over reallocation and
distance:
cost(r;l;m )=/summation.disp
t∈̃l;p∈/tildecomb.alt1mr(t;p)(t;p)
for instance, the cost for our reallocation matrix in table 1, example log le
and model meis 0:0475.
finally, given an event log and a model, we refer to a reallocation matrix for
these with minimum cost as an optimal reallocation matrix . the reallocation
matrix in table 1 is an optimal reallocation matrix for our example log leand
modelme. please note that the optimal reallocation matrix is not unique: the
columns for /uni27e8a1;b;;e/uni27e9and/uni27e8a1;;b;e/uni27e9are interchangeable.
5.2. numeric measure
the cost of a reallocation matrix provides a measure for the dierences
between a given log and model. analogous to other conformance checking tech-
niques, we transform the cost into a conformance measure, such that 1 indicates
perfect conformance and 0 indicates the largest dierence:
denition 3 (earth movers' stochastic conformance) .letlbe a nite stochastic
language, let mbe a nite stochastic path language and let rbe an optimal real-
location matrix for landm. then, the earth movers' stochastic conformance
(emsc ) measure emsc(l;m)is1−cost(r;l;m ).
16considering denition 2, as 0 ≤≤1 andrsums to 1 over all tandp, the
cost of a reallocation matrix is a number between 0 and 1. to illustrate this, we
prove that the extreme values of emsc, being 0 and 1, coincide with complete
disjointness and equivalence, respectively. first, we prove that emsc is 1 if
and only if the log and model express the same stochastic language.
lemma 1. letlbe a nite stochastic language and let mbe a nite stochastic
path language. then, emsc(l;m)=1⇔l=(m).
proof.⇒assume emsc (l;m)=1. then, an optimal reallocation matrix
rforlandmhas zero cost. consider t∈̃landp∈/tildecomb.alt1msuch that
r(t;p)≠0. by denition 2, (t;p)=0, hencet=(p). by denition 1,
∑p′∈/tildecomb.alt1mr(t;p′)=l(t), thusl=(m).
⇐assumel=(m). consider p∈/tildecomb.alt1mandt∈̃lsuch that(p)=t. as
m(p)≤l(t)and(l;p)=0, if we choose r(t;p)=m(p)then the column
ofpdoes not contribute to the cost. this holds for all paths p, therefore
there is a reallocation matrix with zero cost, hence emsc (l;m)=1.
second, we prove that emsc is 0 if and only if the alphabets of the model
and the log are disjoint:
lemma 2. letlandmbe alphabets, lbe a nite stochastic language such
thatl={a∈t/divides.alt0t∈l}and letmbe a nite stochastic path language such that
m={a∈(p) /divides.alt0p∈/tildecomb.alt1m}. then, emsc(l;m)=0⇔l∩m=/uni2205.
proof.⇒assume emsc (l;m)=0. then, an optimal reallocation matrix
rforlandmhas unit cost, thus for all t∈landp∈m, the normalised
levenshtein distance is 1. towards contradiction, assume a∈l∩m,
then there are t,psuch thata∈t,a∈p. then, the normalised levenshtein
distance of tandpis<1. hence,  l∩m=/uni2205.
⇐assume  l∩m=/uni2205. then, for any t∈landp∈mthe normalised
levenshtein distance is 1. hence, emsc (l;m)=0.
5.3. stochastic trace alignments
a reallocation matrix rdenes, for a nite stochastic language land a
nite stochastic path language m, how the probability mass of lis reallocated
to the probability mass of m. that is, for each combination of t∈̃landp∈/tildecomb.alt1m,
r(t;p)indicates the probability mass that is moved from tinltopinm. to
comparetandpin detail, we consider a stochastic trace alignment , which shows
howtcan be transformed into pusing only insertions and deletions.
intuitively, analoguous to (non-stochastic) alignments [8], a stochastic trace
alignment is a sequence of moves , each indicating either a step in both tandp
(asynchronous move ), or a step only in t(alog move ), or a step only in p(a
model move ):
17denition 4 (move) .letbe an alphabet of activities such that ⇢∉and
∉, and lettbe a set of transitions, labelled by the function ∶t→∪{}.
then, a move is a pair (ma;mb)∈∪{⇢}×t∪{⇢}such that¬(ma=⇢∧mb=⇢)
and(ma≠⇢∧mb≠⇢)⇒ma=(mb).
a stochastic trace alignment is a sequence of moves, such that the synchron-
ous and log moves form the trace t, while the synchronous and model moves
form the path p. to formally dene stochastic trace alignments, we use two
helper functions to project a sequence of moves to either the log ( ↑) or model
(↓) perspective:
↑(/uni27e8/uni27e9)=/uni27e8/uni27e9
↑(/uni27e8(ma;mb)/uni27e9⋅x)=/uni23a7/uni23aa/uni23aa/uni23a8/uni23aa/uni23aa/uni23a9↑(x) ifma=⇢
/uni27e8ma/uni27e9⋅↑(x)otherwise
↓(/uni27e8/uni27e9)=/uni27e8/uni27e9
↓(/uni27e8(ma;mb)/uni27e9⋅x)=/uni23a7/uni23aa/uni23aa/uni23a8/uni23aa/uni23aa/uni23a9↓(x) ifmb=⇢
/uni27e8mb/uni27e9⋅↓(x)otherwise
denition 5 (stochastic trace alignment) .given a trace tand a path p, a
stochastic trace alignment is a sequence /uni27e8m1;:::mn/uni27e9of moves, such that t=
↑(/uni27e8m1;:::mn/uni27e9)andp=↓(/uni27e8m1;:::mn/uni27e9).
anoptimal stochastic trace alignment has the maximum number of syn-
chronous moves for a given trace tand pathp. we refer to such an alignment
witha(t;p). intuitively, given a corresponding reallocation matrix r,r(t;p)
then refers to the probability mass of the trace alignment.
for instance, considering trace t=/uni27e8a;c;d;e /uni27e9and pathp=/uni27e8a1;b;d;e/uni27e9from
our example log leand modelme, the following is an optimal stochastic trace
alignment with three synchronous moves:
ta c⇢d e
pa1⇢b d e
please note that, like for non-stochastic alignments [8], the optimal stochastic
alignment is not necessarily unique: for instance, in our example the log move
oncand the model move on bcould be swapped, yielding another optimal
stochastic trace alignment. as another example, consider the trace /uni27e8a/uni27e9and
the path /uni27e8a1;a2;a3/uni27e9. while it is clear that the event aneeds to be mapped to
either transition a1,a2ora3, there is no information available as to which one
it should be, and consequently which transitions should be considered model
moves. this is a common challenge in conformance checking techniques, thus
no conformance checking technique can be made deterministic without making
arbitrary choices.
in our implementation, we compute an optimal stochastic trace alignment
a(t;p)for each pair of t∈̃landp∈/tildecomb.alt1mfor which the reallocation matrix
18r(t;p)>0. we re-use the intermediate steps of the levenshtein computation
to construct a path through the state space of t×pdeterministically.
5.4. log projection
a set of stochastic trace alignments provides detailed information about the
relation between an event log and a model. in this section, we project this
information on the traces of the event log: for each event, we visualise the
probability that the event is synchronous with the model.2
we rst introduce a helper function that takes a sequence of moves and
an indexkand returns whether the kthlog or synchronous move in the trace
alignment is a synchronous move:
(/uni27e8(ma;mb)/uni27e9⋅x;k)=/uni23a7/uni23aa/uni23aa/uni23aa/uni23aa/uni23a8/uni23aa/uni23aa/uni23aa/uni23aa/uni23a9(x;k) ifma=⇢
(x;k−1)ifma≠⇢∧k>1
mb≠⇢ ifma≠⇢∧k=1
letlbe a nite stochastic language, let mbe a nite stochastic path
language, and let t=/uni27e8e1;:::en/uni27e9be a trace such that t∈̃l. then, given that we
observe trace tin the log,eiis a synchronous move in the model with likelihood
proportional to the probability mass of traces in which eiis a synchronous move.
denition 6 (event synchronous-likelihood) .letlbe a nite stochastic lan-
guage and let mbe a nite stochastic path language. furthermore, let t=
/uni27e8e1:::en/uni27e9be a trace in ̃l. then, for each event eiat indexiint:
psync(ei)=∑p∈/tildecomb.alt1mr(t;p)×/uni23a7/uni23aa/uni23aa/uni23a8/uni23aa/uni23aa/uni23a91if(a(t;p);i)
0otherwise
∑p∈/tildecomb.alt1mr(t;p)
intuitively, given that a trace thappens in the log, the likelihood that event
ei∈tis executed in the model (and eithus is a synchronous move) is psync(ei).
symmetrically, the likelihood that eiis not executed in the model (and eithus
is a log move) is 1 −psync(ei).
for instance, for our event log leand model me, consider the trace t=
/uni27e8a;c;d;e /uni27e9. according to an optimal reallocation matrix (table 1), the probab-
ility oftis reallocated to two paths: p1=/uni27e8a1;b;d;e/uni27e9andp2=/uni27e8a1;c;d;e/uni27e9, with
probability r(t;p1)=0:0255 andr(t;p2)=0:0045. consider the stochastic
trace alignmentsta c⇢d e
p1a1⇢b d eandta c d e
p2a1c d e. then,
psync(cat position 2 in p2)=0:0045
0:0255+0:0045=0:15. thus, event cintis a syn-
chronous move with 15% probability if trace toccurs.
to visualise this log projection, we use the concepts as shown in figure 5:
the traces of events are shown as rows of chevrons. each chevron is annotated
with itspsyncprobability and coloured with a shade of red accordingly, which
highlightes the deviating events.
2formally, these are fractions that can be interpreted as probabilities as they are [0,1].
19e1
psync(e1)e2
psync(e2). . .en
psync(en)
(a) the visualisation concepts.
(b) the model projection of our example log le,
modelmeand reallocation matrix.
figure 5: visualisation of log moves. given a trace t=/uni27e8e1;:::e n/uni27e9, the visualisation shows
each event eias a chevron, annotated with the likelihood that this event is synchronous
(psync(ei)). to highlight deviations, a chevron is coded with a shade of red: the lower the
synchronous-move value, the darker the red.
5.5. model projection
in order to visualise where a given model diers from an event log, we also
project the stochastic alignments onto a process model.
we rst introduce two helper functions to count the occurrences of a partic-
ular transition in a stochastic trace alignment. the rst ( ') simply counts the
occurrences of a particular transition x:
'(m;x)=/divides.alt0[(ma;mb)∈m/divides.alt0mb=x]/divides.alt0
the second helper function '′counts the number of synchronous moves on
a particular transition xin a stochastic trace alignment:
'′(m;x)=/divides.alt0[(ma;mb)∈m/divides.alt0mb=x∧((mb)=∨ma≠⇢)]/divides.alt0
denition 7. letlbe a nite stochastic language, let mbe a nite stochastic
path language, and let xbe a transition in the stochastic model from which m
is derived. then, given that the model indicates that xshould be executed in the
model, it is actually executed (and not a model move) with likelihood:
psync(x)=∑t∈̃l∧p∈/tildecomb.alt1m∧'(a(t;p);x)≥1r(t;p)'′(a(t;p);x)
'(a(t;p);x)
∑t∈̃l∧p∈/tildecomb.alt1m∧'(a(t;p);x)≥1r(t;p)
intuitively, for a transition x,psync(x)indicates the probability that if x
should re according to the model, it actually red in the event log. symmet-
rically, 1−psync(x)is the likelihood of a model move on xifxshould happen
according to the model.
20a
psync(a)sync move. . . . . .
(a) concepts of the visualisation.
(b) the model projection of our example log le, modelmeand reallocation matrix.
figure 6: dierences of stochastic language projected on a model.
for instance, consider the transition din figure 4. the paths in which dis
executed are /uni27e8a1;b;d;e/uni27e9,/uni27e8a1;d;b;e/uni27e9,/uni27e8a1;d;c;e/uni27e9and/uni27e8a1;c;d;e/uni27e9, and in total 5
trace alignments are relevant for these paths. in all of these trace alignments,
dis synchronous only, so psync(d)=1.
to visualise these model projections, we use the concepts shown in figure 6a:
the model is visualised as usual, however each transition is also annotated with
its probability psync, and coloured accordingly with a shade of red. the visu-
alisation of the model projection of our example log le, modelme(figure 4)
and reallocation matrix (table 1) is shown in figure 6b.
5.6. log-log and model-model
thus far, we used our earth movers' stochastic conformance checking tech-
nique only for log-model comparisons. however, using a few simple modica-
tions, the concepts apply to log-log and model-model comparisons as well. that
is, the reallocation matrix (denition 1) is updated accordingly:
denition 8 (reallocation matrix - log-log) .letl1andl2be nite stochastic
languages. then r∶l1×l2→[0;1]is areallocation matrix if and only if:
1.each row, representing a trace t∈/tildecomb.alt1l1, sums to the probability l(t):
∀t∈/tildecomb.alt1l1l1(t)=/summation.disp
t′∈/tildecomb.alt1l2r(t;t′)
2.each row, representing a trace t′∈/tildecomb.alt1l2, sums to the probability l(t′):
∀t′∈/tildecomb.alt1l2l2(t′)=/summation.disp
t∈/tildecomb.alt1l1r(t;t′)
21for model-model comparisons, both nite stochastic path languages might
not have their probabilities of traces sum to 1. therefore, a third requirement
is necessary to guarantee that the reallocation matrix itself sums to 1.
denition 9 (reallocation matrix - model-model) .letm1,m2be nite stochastic
path languages. then r∶m1×m2→[0;1]is areallocation matrix if and only
if:
1.each row, representing a path p∈/tildecomb.alt1m1, sums to at least the probability
m1(p):
∀p∈/tildecomb.alt1m1m1(p)≤/summation.disp
p′∈/tildecomb.alt1m2r(p;p′)
2.each column, representing a path p′∈/tildecomb.alt1m2, sums to at least the probability
m2(p′):
∀p′∈/tildecomb.alt1m2m2(p′)≤/summation.disp
p∈/tildecomb.alt1m1r(p;p′)
3.the sum of the matrix is 1:
/summation.disp
p∈/tildecomb.alt1m1;p′∈/tildecomb.alt1m2r(p;p′)=1
in a similar manner, the log and model projections can be applied to log-log
and model-model comparisons accordingly. we will show an example of this in
section 6.5.
5.7. computing emsc in practice
handling innite behaviour. the distance and reallocation matrices are dened
for a nite number of model paths. however, process models that contain loops
might have an innite number of paths, thus enumerating all paths is impossible.
to support such models, paths are extracted until a user-chosen total probability
mass has been covered, or a user-chosen time-out has been reached (whichever
comes rst).
then, a partial stochastic path language might remain, that is, a language
with the probability mass sum of less than 1. denition 1 is lenient towards
such partial languages: intuitively, the probability mass that is `missing' from
the partial language is distributed over the paths in the partial language by the
reallocation matrix.
finding an optimal reallocation matrix. a straightforward approach to
compute the optimal reallocation matrix is by means of linear programming.
to this end, we introduce a variable for each entry of the reallocation matrix
and formulate a linear program (lp) with the requirements of denition 1 as
its constraints and with denition 2 as its objective function. given a nite
22stochastic language land a nite stochastic path language m, we obtain the
following lp:
minimise /summation.disp
t∈̃l/summation.disp
p∈/tildecomb.alt1mxtp⋅(t;p) (1)
s.t. ∀t∈̃l∶/summation.disp
p∈/tildecomb.alt1mrtp=l(t) (supply) (2)
∀p∈/tildecomb.alt1m∶/summation.disp
t∈̃lrtp(=)
≤m(p)(demand) (3)
∀t∈̃l∀p∈/tildecomb.alt1m∶rtp≥0 (non-negativity) (4)
where equations 2 and 3 directly correspond to the requirements 1 and 2 of
denition 1. note that for path languages that do not require unfolding (that
is, for models without loops) or for log-log comparison, equation 3 becomes
an equality. in this case, the linear program is equivalent to the general linear
programming formulation of emd.
however, in previous tests, solving the lp with general-purpose linear pro-
gramming was the most time-consuming step of the approach [34], since it re-
quires to operate on an explicitly formulated constraint matrix of size (/divides.alt0̃l/divides.alt0+/divides.alt0/tildecomb.alt1m/divides.alt0)⋅
(/divides.alt0̃l/divides.alt0/divides.alt0/tildecomb.alt1m/divides.alt0). in order to more eciently solve this problem, we, resort to work from
the eld of operations research, or, more specically, on methods for solving the
transportation problem which already has been studied since the late 1930s [56].
in the hitchcock transportation problem [25], we consider msupply nodes with
certain quantities of a commodity serving a set of ndemand nodes with pre-
dened demands. while the supply nodes correspond to the traces in the log
(the rows in denition 1), the demand nodes correspond to the paths in the
model (the columns). the objective is to nd a minimum cost transshipment
from the supply to the demand nodes where the cost of a shipment between
two nodes is linear in the shipped quantity. the equality-constrained version of
the above linear program (thus, not-truncated languages from models without
loops) is an instance of the hitchcock transportation problem.
considering the specic structure of the transportation problem lp, dedic-
ated methods, which do not require an explicitly formulated constraint matrix,
have been developed. in our implementation, we use the method proposed in [41]
that combines an exterior point simplex algorithm (epsa) for the transport-
ation problem [42] with the initialisation method in [6]. as is characteristic for
simplex-type algorithms, the algorithm operates on a series of basic solutions
until an optimal solution is found. in contrast to the normal simplex algorithm,
the intermediate basic solutions do not need to be feasible with respect to the
constraints. regarding the underlying network of the transportation problem,
each of the encountered (linearly independent) basic solutions naturally corres-
ponds to a forest in which each tree describes a closed subow of commodities.
we store and update these trees using the performance-oriented array-based
implementation proposed in [1]. besides, this characterisation of the optimal
solution in terms of a basic solution also shows that the number of nonzero
23entries in the minimal-cost reallocation matrix is bounded by /divides.alt0̃l/divides.alt0+/divides.alt0/tildecomb.alt1m/divides.alt0−1. for
integer demands, the algorithm has a complexity of o(min(m;n)×(m+n)∗d),
whereddenotes the total demand [41]. for continuous demands (as in emsc's
case), proving a theoretical bound remains future work.
we initialise the algorithm according to the method in [6], which has been
shown to perform best among the initialisation methods considered in [41]. ba-
sically, we search the least-cost demand node for each supply node, and ll the
corresponding edge by the supply node's capacity. note that this might oversup-
ply the demand node; thus, it might not be a solution according to denition 1.
nevertheless, assuming that the log and the model describe similar behaviour,
this greedy initial \solution" might already be close to the nal optimal solution
and, thus, might reduce the number of iterations required by the algorithm. as
future work, it would be interesting to investigate the inuence of initialisation
strategies on run time.
the combined method has been shown to be approximately 3 times faster
than the constraint-matrix-free adaption of the general simplex algorithm to the
transportation problem [41]. even though the basic method assumes equality
in equation 3, thus excluding unfolded path languages, it can still be applied to
the relaxed problem with inequalities in equation 3. in appendix a, we show
that it suces to stop and retrieve the optimal solution as soon as all column
inequalities are satised.
tool support. the techniques described in this paper have been implemented
as plug-ins of the prom framework [21]. there are plug-ins available for log-
log, log-model and model-model comparisons. as input, the plug-ins support
stochastic petri nets [48], and/or standard event logs. the implementation is
open source and publicly available from http://svn.win.tue.nl/repos/pro
m/packages/earthmoversstochasticconformancechecking .
6. evaluation
in this section, we evaluate the earth movers' stochastic conformance (emsc)
checking technique as presented in this paper using four experiments: we rst il-
lustrate the necessity of conformance checking techniques to consider stochastic
information. second, we illustrate the inuence of unfolding innite behaviour
on the proposed measure. third, we show the feasibility of the approach on
real-life event logs and models. fourth, we illustrate the applicability of the log
projections on a real-life log. finally, we describe a use case that goes beyond
the typical log-model conformance checking setting. we conclude the section
by reviewing the reproducibility of the experiments.
6.1. stochastic information
as a rst step, we illustrate the limitations of conformance checking tech-
niques that ignore the stochastic perspective. we included four techniques: the
established technique to compute tness (alignments [4]), and three precision
24log emsc (this paper) alignments [4] etc [9] mfp [12] mcc [43]
similarity rank fitness rank precision rank precision rank precision rank
l11.0000 1 1.0000 1 1.0000 1 1.0000 1 1.0000 1
l20.8725 4 0.9286 5 1.0000 1 1.0000 1 1.0000 1
l30.9995 2 0.9997 4 1.0000 1 1.0000 1 1.0000 1
l40.9950 3 1.0000 1 0.9091 4 0.5833 4 0.982 4
l50.7550 5 1.0000 1 0.9091 4 0.5833 4 0.982 4
table 3: existing conformance checking techniques applied to our example event logs and the
model in figure 2.
techniques: etc precision [9], markovian precision (pfp) [12], and monotonic
precision (mcc) [43]. we apply these techniques to one process model (fig-
ure 2) and several event logs introduced in section 2:
l1=[/uni27e8a;b;d;e /uni27e9490;/uni27e8a;d;b;e /uni27e9490;/uni27e8a;c;d;e /uni27e910;/uni27e8a;d;c;e /uni27e910]
l2=[/uni27e8a;b;d;e /uni27e9245;/uni27e8a;d;b;e /uni27e9245;/uni27e8a;c;d;e /uni27e95;/uni27e8a;d;c;e /uni27e95;/uni27e8a;b;e/uni27e9500]
l3=[/uni27e8a;b;d;e /uni27e9489;/uni27e8a;d;b;e /uni27e9489;/uni27e8a;c;d;e /uni27e910;/uni27e8a;d;c;e /uni27e910;/uni27e8a;b;e/uni27e92]
l4=[/uni27e8a;b;d;e /uni27e9500;/uni27e8a;d;b;e /uni27e9500]
l5=[/uni27e8a;c;d;e /uni27e9500;/uni27e8a;d;c;e /uni27e9500]
the results are shown in table 3. conformance checking techniques typically
address two dimensions: tness (what part of the event log is represented by the
model) and precision (what part of the model is also present in the event log).
typical tness measures take the frequencies of traces in the log into account,
as each trace contributes to the nal measure, but the likelihoods in the model
are not considered at all.
as argued in section 1, intuitively, l1is most similar to the stochastic
behaviour of the model ( m), as its stochastic behaviour is equivalent. in our
experiment, this was unearthed by all measures. second, half of l2's traces
do not t the model. in l3, only 2 traces do not t the model, but otherwise
this log is similar to l1. thus,l3is closer to mthanl2. in the experiment,
the precision measures do not spot any dierence (as un-tting traces are not
a precision issue). the tness measure and emsc both rank l3higher than
l2. finally, log l4consists of the most-occurring traces of m, whilel5only
contains the least-occurring traces. thus, l4is more similar to mthanl5
is. in the experiment, only the emsc is able to make this dierence; all other
measures consider l4andl5equivalent.
we conclude that this small experiment illustrates the limitations of existing
techniques, despite some of them being stochastic techniques, as they do not
distinguish between the dierent stochastic behaviour used in this example, and
can thus not be used to provide insights into the dierences between these types
of behaviour.
6.2. the inuence of unfolding
to show the inuence of unfolding on a simple loop, we apply our technique
to an example consisting of the event log l=[/uni27e8a/uni27e91;/uni27e8a;a/uni27e93]and a stochastic
25a0.5
a0.5
figure 7: a process model with innite behaviour.
process model m, shown in figure 7, with stochastic language [/uni27e8a/uni27e91
2,/uni27e8a;a/uni27e91
4,
/uni27e8a;a;a/uni27e91
8,/uni27e8a;a;a;a /uni27e91
16:::].
analytical solution. the emsc of landmcan be computed analytically, using
the following distance matrix:
/uni27e8a/uni27e9 /uni27e8a;a/uni27e9 /uni27e8a;a;a/uni27e9 /uni27e8a;a;a;a /uni27e9 /uni27e8a;a;a;a;a /uni27e9. . .
/uni27e8a/uni27e9 01
22
33
44
5. . .
/uni27e8a;a/uni27e91
201
32
43
5. . .
then, an optimal reallocation matrix ris:
r/uni27e8a/uni27e9 /uni27e8a;a/uni27e9 /uni27e8a;a;a/uni27e9 /uni27e8a;a;a;a /uni27e9 /uni27e8a;a;a;a;a /uni27e9. . .
/uni27e8a/uni27e91
40 0 0 0 . . .
/uni27e8a;a/uni27e91
41
41
81
161
32. . .
finally, emsc can be computed as follows:
cost(r;l;m )=1
4⋅0+0⋅1
2+0⋅2
3+0⋅3
4+0⋅4
5+:::+
1
4⋅1
2+1
4⋅0+1
8⋅1
3+1
16⋅2
4+1
32⋅3
5+:::
=1
8+∞
/summation.disp
n=3n−2
2n⋅n=13
8−log 4
≈0:238706
emsc(l;m)=1−cost(r;l;m )
≈0:761294
the experiment. in this experiment, we stepwise increase the amount of unfol-
ded behaviour ( m) from 0.01 to 0.99. figure 8a shows the results, as well as the
analytical solution for landm(indicated by the dashed line). up to m=50%,
the unfolding only adds one trace to the model (consisting of a single a, which
has a likelihood of 50% in the model), which yields a constant emsc value of
0.625. this stable range of mindicates that the unfolding includes more probab-
ility mass than m, that is, if we choose m=2% then the unfolding nevertheless
includes 50% of the probability mass. at m=51%, a second trace is added, and
260 20 40 60 80 10000:20:40:60:81
% probability mass included ( m)emsc
(a) varying unfolding (parameter m).0 5 10 15 20
number of traces
(b) varying number of traces with increasing
loop unfoldings.
figure 8: emsc measured over our example landm. the dashed lines indicate the analytical
solution.
the emsc value jumps to 0.875, which remains constant until m=75%, with
a few exceptions in which the emsc value shortly drops. a manual inspection
revealed that as the unfolding is multithreaded, there are race conditions on
which paths are included, thus yielding these outliers in the emsc value. we
argue that this is an artifact of the limited language size and low mvalue in
this experiment. nevertheless, unfolding is inherently non-deterministic, thus
emsc is also non-deterministic. from m=76%, more traces are included in
the unfolded language, such that after this point, the unfolding includes more
and more traces that are not in the event log, multithreading issues become less
relevant, and consequently emsc drops and seems to approach the analytical
solution.
second, to illustrate the convergence to the analytical solution, we repeat
the experiment where we manually create stochastic languages for landm,
where we unfold the loop of man increasing number of times. figure 8b shows
these results. from this graph, it is clear that emsc quickly converges to the
analytical solution with every trace and loop unfolding added. at 6 traces,
which corresponds to m=98%, the dierence is a negligible 0.01.
thus, we conclude that the unfolding parameter minuences the resulting
emsc value, that in some cases an analytical value can be computed, and that
the unfolding eventually converges to this analytical value. in the next section,
we show the inuence of mon real life event logs. in future work, it would be
interesting to investigate which classes of behaviour can be solved analytically.
6.3. feasibility on real-life event logs
in this third experiment, we evaluate the applicability of emsc to 11 pub-
licly available real-life logs and stochastic process models discovered from them.
first, we apply the stochastic miner (sm) [50] to these logs to obtain stochastic
petri nets. as these nets contain silent transitions, they can be seen as gslpns
27table 4: real-life event logs used in the evaluation.
log activities traces events discovery [50]
bpic12 36 13087 262200 7out of memory →baseline
bpic18 control summary 7 43808 161296 3
bpic18 department control 6 29297 46669 3
bpic18 entitlement application 20 15620 293245 7out of memory →baseline
bpic18 geo parcel documents 16 29059 569209 7out of memory →baseline
bpic18 inspection 15 5485 197717 7out of memory →baseline
bpic18 parcel document 10 14750 132963 3
bpic18 payment application 24 43809 984613 7out of memory →baseline
bpic18 reference alignment 6 43802 128554 3
road traffic fines 11 150370 561470 3
sepsis 16 1050 15214 3
(see section 4). table 4 summarises the logs and their complexity. the discov-
ery technique succeeded in discovering a process model for only 6 logs, running
out of the 55gb of ram we had available, which indicates the need for more
research into stochastic process discovery techniques and their implementations.
for each event log for which discovery was not successful, we used a baseline
stochastic model. these baseline models were obtained by rst applying induct-
ive miner - infrequent [32] to obtain a petri net, after which the transitions in
this net were given weights according to the relative occurrence of their labels
(activities) in the event log.
second, we apply our new measures to the logs and the discovered glspns.
in order to apply emsc, the behaviour is unfolded as described in section 5.7,
using various parameters mto study how the inclusion of mass inuences the
returned values. we vary mfrom 2% to 98%. in the remainder of this section,
we discuss the results in two steps: we rst discuss the run time and the number
of paths considered, followed by a discussion on the returned emsc values.
number of paths & run times. first, we discuss the number of traces that res-
ulted after unfolding. the results are shown in figure 9. please note that due
to the inherent nondeterministic nature of emsc's unfolding and the multith-
readedness of the implementation, these results are indicative only, especially
for lowerm; and that these graphs have logarithmic y-axes.
some of the values could not be obtained: for bpic18 parcel document
withm=88, the unfolding step nished quickly, however the computation of
the reallocation matrix did not nish within 4 days. the discovered model for
the sepsis log contains transitions with a weight of 0, which are consequently
never executed by emsc and not part of the path language of the model.
for 3 out of 6 logs for which discovery was successful, computation took less
than a few seconds, which was considerably less than the discovery technique,
which could take hours on these logs. however, a general trend towards longer
run times is visible as mapproaches 100%. for bpic18 reference alignment ,
computation could take up to 20 minutes. a manual inspection revealed that
this is caused by the size of the language described in the stochastic models:
especially in models that combine concurrency with looping behaviour. in such
models, the probability mass per trace decreases and more traces are necessary
to cover a certain probability mass, which makes it very challenging to obtain
a high probability mass m.
280 20 40 60 80 100101105109
% probability mass included ( m)run time (ms)bpic18 control summary
bpic18 department control
bpic18 parcel document
bpic18 reference alignment
road traffic fines
sepsis
(a) run time.0 20 40 60 80 100100105
% probability mass included ( m)number of paths
(b) unfolded language size.
0 20 40 60 80 100101105109
% probability mass included ( m)run time (ms)bpic12
bpic18 - entitlement application
bpic18 - geo parcel documents
bpic18 - inspection
bpic18 - payment application
(c) run time.0 20 40 60 80 100100105
% probability mass included ( m)number of paths
(d) unfolded language size.
figure 9: run time and size of unfolded languages with varying mass unfolding parameters
(m) on real-life logs for logs where discovery was successful (a, b) and logs for which we used
a baseline model (c, d).
29for any stochastic model with loops, with mapproaching 100%, a \full"
unfolding would need to consider an unbounded number of traces, and thus
would suer from an innite run time. inherently, every implementation is going
to have its boundaries. the implementation of emsc running on our machine
seems to be capbable of handling around 106traces with corresponding run
times of around 30 minutes.
values. the emsc values are shown in figure 10, split over the logs for which
the discovery technique [50] was successful (figure 10a) and the logs for which
we used a baseline discovery technique (figure 10b).
most logs show expected behaviour with increasing m: due to nondetermin-
ism of the unfolding step, for lower mthey vary considerably, but stabilise with
mapproaching 100%. an exception is bpic18 reference alignment , which
increases to 0.98 for m=52, after which it decreases almost linearly. a manual
inspection revealed that the glspn contains many loops, while most of the
event log's traces do not exhibit repeating activities. as mincreases, more
traces are added by unfolding loops and, as these new traces are not in the log,
the measured emsc drops.
for the other logs and models, emsc yields a consistent ranking from m=
60%, thus using only around 60% of the behaviour of the models. finally,
we can conclude that the discovery technique stochastic miner [50] discovers
models of which the stochastic behaviour is much closer to the respective event
logs, compared to the baseline technique.
we conclude that our technique is feasible on most tested real-life event logs,
and that a high setting for mwas not always necessary to rank models.
300 20 40 60 80 10000:20:40:60:81
% probability mass included ( m)emscbpic18 control summary
bpic18 department control
bpic18 parcel document
bpic18 reference alignment
road traffic fines
sepsis
(a) logs on which discovery was successful.
0 20 40 60 80 10000:20:40:60:81
% probability mass included ( m)emscbpic12
bpic18 - entitlement application
bpic18 - geo parcel documents
bpic18 - inspection
bpic18 - payment application
(b) logs for which we used a baseline discovery technique.
figure 10: emsc values for our real-life logs.
31(a) fine amount ≤200 (r≤).
 (b) fine amount >200 (r>).
figure 11: emsc applied to two sub-logs of the road trac fine management process.
6.4. sub-log comparison
to illustrate the applicability of emsc, we applied it to an event log of a road
ne management process, in which nes are processed, payments received, and,
if necessary, penalties applied and referred for credit collection. we split this
log into two sub-logs: one with nes of eur 200 and lower (143955 traces, r≤),
and one for the other nes (6415 traces, r>). the control ow followed in both
logs is very similar. however, the stochastic perspective diers considerably,
which is reected by the emsc of 0.67. the computation took several seconds.
to study these dierences in more detail, the log projections on both sub-
logs are shown in figure 11. in the r≤log, over 36% of the traces follow a path
where a penalty is added before the ne is sent for credit collection (figure 11a).
this trace contains no stochastic dierences with the r>log, that is, all events
are always synchronous moves, which indicates that at least 36% of the traces
ofr>also followed this path. the second trace of figure 11a, in which a ne
is paid, appeared over 32% in r≤. however, the second event ( payment ) is
a synchronous move, that is, present in the traces of r>that were mapped
to this trace, in only 29% of the times this trace appeared in r≤. thus, the
log projections can be used to get very detailed insights into dierences in the
stochastic perspective of sub-logs, which could be used to, for instance, split the
process into two more specialised variants, based on the ne amount.
6.5. a use case: municipalities
as an illustration of the exibility of our technique and to show another po-
tential use case, we consider the bpi challenge logs of 2015. each of these 5 logs
describes a building permit approval processes in a dierent dutch municipality.
all processes serve the same function and have the same juridical foundation
based in national laws, however each municipality executes the process in its
own unique way, yielding similar but dierent processes [14]. key questions are
where the processes dier, and where they coincide. these dierences of beha-
viour include paths that are infrequent in one municipality and mainstream in
another. the complexity of the logs is described in table 5.
32log traces events activities
bpic15-1 1199 52217 398
bpic15-2 832 44354 410
bpic15-3 1409 59681 383
bpic15-4 1053 47292 356
bpic15-5 1156 59083 389
table 5: bpic 2015 event logs complexity.
log bpic15-1' bpic15-2' bpic15-3' bpic15-4' bpic15-5'
bpic15-1' 0.800 0.530 0.764 0.694 0.560
bpic15-2' 0.482 0.567 0.431 0.458 0.560
bpic15-3' 0.761 0.511 0.829 0.724 0.551
bpic15-4' 0.736 0.482 0.752 0.854 0.535
bpic15-5' 0.477 0.567 0.419 0.459 0.631
(a) cross-organizational comparison framework (obtained from [14]).
log bpic15-1 bpic15-2 bpic15-3 bpic15-4 bpic15-5
bpic15-1 1.0000 - - - -
bpic15-2 0.4752 1.0000 - - -
bpic15-3 0.5432 0.4697 1.0000 - -
bpic15-4 0.4781 0.4781 0.4868 1.0000 -
bpic15-5 0.4607 0.5011 0.4840 0.5077 1.0000
(b) a pairwise comparison using emsc (this paper).
table 6: two procedures to nd similarities in the dierent bpic 2015 logs.
using the method described in [14] (cross-organizational comparison frame-
work (cocf)), rst a process model is discovered from each log using an auto-
mated process discovery technique (the evoluationary tree miner [15]). second,
the tness of each process model with respect to each event log is reported, that
is, what part of the behaviour of the event log is represented by the model. the
result of this procedure is shown in table 6a. please note that due to the size
and complexity of the event logs, in [14], the event logs were ltered to contain
only the 47 most frequent activities accross all municipalities and the analyses
were performed on these simplied logs. from these results, in a workshop
setting, clusters of similar processes were identied and studied in more detail.
alternatively, using the technique described in this paper applied to two
logs rather than to a log and a model, a similar comparison procedure can be
performed, by comparing each pair of event logs directly. the result of this
procedure is shown in table 6b, and its run times are shown in table 7.
afterwards, trace alignments could be used to study dierences in more de-
tail, for instance using the log projection of the most-dierent sub-logs bpic15-2
and bpic15-3 shown in figure 12. in this projection of bpic15-3, the most-
occurring trace appears in 1% of all cases. four moves (the two rst and the two
last ones) coincide with corresponding traces in bpic15-2, however the three
events in the middle dier considerably, appearing in bpic15-2 as well with a
33figure 12: log projection of stochastic trace alignments of logs bpic15-2 and bpic15-3,
which were shown to be most dierent by emsc.
likelihood of only 0.4471 ( 01_hoofd_020 ).
the log projection enables the study of details, however aggregating the
trace alignments to a higher level remains future work: visualising a process
consisting of 410 activities remains a challenge in itself.
discussion. both procedures identify groups of similar municipalities: for cocf,
this was (bpic15-1, bpic15-3 and bpic15-4), while for emsc this were
(bpic15-1, bpic15-3) and, weaker, (bpic15-2, bpic15-4, bpic15-5). using
either result [14] could be applied to gain insights into more detailed common
aspects and dierences of the municipalities.
first, the diagonals of table 6 show the comparison of each event log with
itself, and clearly shows a weakness of the cocf approach: rst, a process
discovery technique is applied, which introduces some error, and this is reected
in the diagonals ranging from 0.567 to 0.854. furthermore, due to the discovery
step, the results are not symmetric, e.g. bpic15-1 compared to bpic15-2 yields
a dierent value than bpic15-2 compared to bpic15-1. as the discovery step is
avoided by using the measures introduced in this paper, each event log compared
with itself has an emsc of 1 (as shown in lemma 1). emsc is symmetric by
denition, which eases the analysis.
second, typical conformance checking techniques that are not stochastic
aware still take the stochastic perspective of the event log into account, by ac-
counting for traces that appear more often in event logs. however, as a process
model is discovered, this stochastic information is lost in cocf. thus, for each
pair of event logs, cocf only takes the stochastic perspective of one of them
34log bpic15-1 bpic15-2 bpic15-3 bpic15-4 bpic15-5
bpic15-1 1626 - - - -
bpic15-2 2373 1132 - - -
bpic15-3 4153 2763 2117 - -
bpic15-4 2658 2055 3193 1474 -
bpic15-5 3354 2503 3852 2764 1885
table 7: run time (ms) of emsc on bpic 2015 event logs.
into account, which is another source of asymmetry in the table. consequently,
emsc not only considers which paths through the process were executed in the
logs (the control ow), but also how often this happened.
finally, we argue that the emsc technique introduced in this paper, and by
extension the pairwise-comparison method it enables, are feasible on complex
real-life logs: the entire suite of comparisons combined took 175 seconds on our
machine (i7-9700k cpu, deliberately limited to 1gb ram), and log simplic-
ation was not necessary. the longest individual comparison, and application of
emsc, took around 4 seconds.
6.6. reproducibility
all experiments (unless indicated otherwise) were performed on a single
machine with i7-9700k cpu and 55gb ram available for each experiment
process, running a fully patched ubuntu 18.04 in february 2020. all logs are
public and available on https://data.4tu.nl/repository/collection:
event logs real . the source code is available on https://svn.win.tue.nl/r
epos/prom/packages/earthmoversstochasticconformancechecking/ . we
used svn revision 43084.
7. discussion
in this section, we illustrate the applicability of emsc by reporting on a
couple of case studies that were performed using emsc and we describe several
remaining open challenges.
in [13], concept drift detection is extended beyond control ow with the
stochastic perspective (using emsc), as to detect drift points in processes where
exceptional behaviour becomes mainstream or mainstream behaviour becomes
exceptional. the authors propose to complement the stochastic languages by
additional perspectives, e.g. time, and exploit exibly chosen reallocation dis-
tances to detect multi-perspective drifts. in addition to detecting general control
ow drifts, this method allows to detect drifts in dierent perspectives, for ex-
ample activity duration or sojourn time. moreover, comprehensive drifts, which
are dicult to detect considering a single perspective only, become detectable.
in [26], stochastic representations of behaviour have been used to study non-
deterministic long-distance dependencies from event logs, where emsc could
be used to verify the quality of the detected dependencies. that is, a choice
35early in the process inuences a choice later in the process, but stochasticly and
non-deterministically: if a particular option is chosen at the start of the process,
then a particular option at the end of the process is more likely.
in [31], emsc is used to identify the trace attributes (for instance, amount
of a loan application, gender, mode of study, etc.) has the highest inuence
on the process that is being followed, and to quantify this inuence. that is,
this technique automatically recommends trace-level lters that maximise the
dierences between groups of students (measured using emsc) having and not
having a particular attribute and value. the applicability of this technique was
illustrated in two case studies in australian universities: one to study the pro-
cesses of groups of students interacting with an online learning environment,
where using the technique clear learning pathway dierences between students
were identied by instructors, and one that studied milestones of phd students,
which found dierences in the processing of milestone e-forms (leave, conrm-
ation, thesis submission, . . . ) between faculties that led to a university-wide
change proposal. the second case study also found that there were virtually
no dierences in processing of e-forms related to demographic factors such as
gender, mode of study and being domestic or international, which was a nding
that was welcomed by stakeholders.
next, we discuss remaining challenges.
innite behaviour. the use of reallocation matrices in the implementation in-
herently brings the requirement that the two considered stochastic (path) lan-
guages must be nite. as described in section 5.7, process models with innitely
many traces, such as loops, can be unfolded to achieve this, at the cost of lower-
ing the accuracy of the achieved results, as shown in section 6. it would be
interesting to research alternative ways to handle inte behaviour, or to prove
bounds on the unfolding. nevertheless, as shown in section 6.2, it is sometimes
possible to compute emsc analytically for innite stochastic path languages.
it would be interesting to characterise the classes of models and logs for which
this is possible.
uniqueness. as shown in section 5.1, an optimal reallocation matrix is not
necessarily unique: several matrices with a minimal cost might exist. similarly,
for a given pair of traces and/or paths, multiple trace alignments might exist. in
stochastic trace alignments, log and model moves might be swappable, however
in our projections this dierence is not visible (unlike some visualisations of
alignments, such as in the inductive visual miner [30]). finally, unfolding of
innite behaviour is conceptually not deterministic. therefore, conceptually,
the projected results of the emsc (sections 5.4 and 5.5) are not deterministic
either. this issue is common for conformance checking techniques: for instance,
(non-stochastic) alignments [7] exhibit similar issues.
visualisations. the projections introduced in sections 5.4 and 5.5 show only log
moves for log projections, and only model moves for model projections. even
though trace alignments contain the information of the opposite (log moves for
36model projection, and model moves for log projection) as well, we did not nd
a method to visualise this information in a succinct manner, and leave such
visualisations for future work.
summaries. when comparing an event log with a stochastic process model,
the techniques described in this paper can succinctly visualise which parts of
the model deviate from the log (section 5.5). however, analysing the parts of
the log that deviate from the model (section 5.4 is tedious: all trace variants
are visualised one-by-one, and for larger event logs, it is infeasible to derive
information from this view. when we tested the emsc measures described in
this paper in a real-life industry setting with industry stakeholders, precisely
this question arose, and we consider it an interesting area of future research, or
a potential innovation factor for commercial process mining software vendors,
to visualise the stochastic trace alignments in existing log visualisations, such
as in the ubiquitous directly follows-based tools.
distance measures. finally, as mentioned in section 5.1, the distance measure
can be seen as a parameter of the emsc approach. therefore, the levenshtein
distance measure could easily be replaced with other measures, for instance
to provide activity-label text matching, or to take the performance or time
perspective into account. this would entail extending stochastic languages with
information how long eac h event takes, and consequently in order to derive such
a timed stochastic language from an event log would need (1) awareness of start
and completion events, and either (2a) a control-ow process model or (2b) a
partially ordered event log in order to take concurrency out of the equation
in determining how long an activity execution took. concepts from [53] could
perhaps be used to add inter-case dependencies and sensitivity to scheduling.
an obvious catch in this regard is the curse of dimensionality: when adding
dimensions to the distance measure, the expected distance between arbitrary
events approaches 1, eventually making the measure useless.
8. conclusion
the conformance checking technique presented in this paper considers the
stochastic perspective as a rst-class citizen . the main reason is to address the
asymmetry between event logs and process models. a unique trace that cannot
be replayed by the model is typically assumed to be less severe than a deviating
trace that appears many times in the event log. therefore, most conformance
checking techniques take trace frequencies into account. probabilities in process
models can be seen as the counterpart of frequencies in event logs. however,
most conformance checking approaches tend to abstract from probabilities. this
explains why existing precision notions are problematic. they aim to penalise
modelled behaviour that is not observed. however, process models with loops
allow for innitely many traces that are all considered equally important. since
the event log only contains example behaviour, one cannot expect to observe
all possible traces. these problems can be addressed by adding probabilities.
37given a model with probabilities, we expect the \highways" in the process model
to occur frequently in the event log and anticipate that unlikely traces may not
appear in the event log.
as demonstrated in this paper, we can only quantify the \fraction of modeled
behaviour actually observed" if we add probabilities to models. such probab-
ilities are not just needed for conformance checking. process models used for
simulation, predictions and recommendations all require probabilities. there-
fore, it is natural (and also not so dicult) to add the stochastic perspective.
moreover, treating all paths in the model equally does not only impact the dia-
gnostics of conformance checking, but also limits progress in process discovery.
adding infrequent behaviour to a process model often yields a small improve-
ment in tness while lowering precision signicantly. hence, process-discovery
techniques are tempted to simply leave out infrequent behaviour thus ignoring
observed behaviour.
stochastic conformance checking aims to address these problems by qualify-
ing the \distance" between stochastic languages representing models and logs.
in this paper, we presented our earth mover's stochastic conformance (emsc)
approach and the corresponding implementation. we introduced the so-called
`reallocation matrix' to deal with process models having silent and duplicate
activities. using stochastic trace alignments, we developed intuitive diagnostics
projected on event logs and process models. the techniques have also be ex-
tended to model-model and log-log comparisons. the approach has been fully
implemented in prom and uses techniques for solving transportation problems to
determine the earth movers' distance. this provides a considerable performance
improvement as shown in our evaluation. moreover, the practical applicability
of the emsc approach was demonstrated using 11 publicly available real-life
logs and corresponding models.
our ndings show that stochastic conformance checking is practically feas-
ible and helps to address the problems of existing conformance techniques re-
lated to precision measures and diagnostics. however, as discussed in sec-
tion 7, there are also several open challenges, such as dealing with innite be-
haviour without unfolding, non-determinism when computing stochastic trace
alignments, and providing aggregated diagnostics.
future work extends in two directions. the rst direction aims to use the
approach for questions that go beyond conformance checking. for example,
we have implemented concept-drift detection approaches using the same prin-
ciples. note that a major shift in the distribution of traces may not impact the
control-ow model, e.g., the percentage of cases that skip a check or the number
of customers that pay after delivery may grow from 10% to 60% without introdu-
cing new process variants. the second direction for future research aims to add
additional perspectives covering time, resources, decisions, and costs. although
we focused on the ordering of activities, the exact same idea can be applied to
traces and models extended with other perspectives. this requires additional
distance measures to introduce penalties for events that are too late or executed
by the wrong person. a baseline approach can be realised by making the ad-
ditional features (time, resource, cost, etc.) discrete and use weights for the
38dierent perspectives. for example, activity decide is split into decide(slow) ,
decide(normal) , and decide(fast) . in general it is non-trivial to dene distance
measures covering dierent perspectives, or to obtain them from event logs.
however, the framework presented can be applied directly. note that also for
the other perspectives, probabilities matter.
acknowledgments. we thank the alexander von humboldt (avh) stiftung for
supporting our research, and merih seran uysal for her useful comments on
the description of the implementation and its proofs. artem polyvyanyy was in
part supported by the australian research council project dp180102839.
references
[1]minimal cost network flows , chapter 9, pages 453{512. john wiley &
sons, ltd, 2009.
[2] w.m.p. van der aalst. process mining: data science in action . springer-
verlag, berlin, 2016.
[3] w.m.p. van der aalst. relating process models and event logs: 21 con-
formance propositions. in proceedings of the international workshop on
algorithms and theories for the analysis of event data (ataed 2018) ,
volume 2115 of ceur workshop proceedings , pages 56{74. ceur-ws.org,
2018.
[4] w.m.p. van der aalst, a. adriansyah, and b. van dongen. replaying
history on process models for conformance checking and performance
analysis. wires data mining and knowledge discovery , 2(2):182{192,
2012.
[5] w.m.p. van der aalst and w. reisig, editors. advanced tutorial on petri
net modelling of business processes (satellite event of acsd'06 and ic-
atpn'06) , turku, finland, june 2006.
[6] hans achatz, peter kleinschmidt, and konstantinos paparrizos. a dual
forest algorithm for the assignment problem. in bernd sturmfels and peter
gritzmann, editors, applied geometry and discrete mathematics: the vic-
tor klee festschrift , pages 1{10. ams & acm, 1991.
[7] a. adriansyah. aligning observed and modeled behavior . phd thesis,
eindhoven university of technology, april 2014.
[8] a. adriansyah, b. van dongen, and w.m.p. van der aalst. conformance
checking using cost-based fitness analysis. in c.h. chi and p. john-
son, editors, ieee international enterprise computing conference (edoc
2011) , pages 55{64. ieee computer society, 2011.
39[9] a. adriansyah, j. munoz-gama, j. carmona, b.f. van dongen, and
w.m.p. van der aalst. measuring precision of modeled behavior. in-
formation systems and e-business management , 13(1):37{67, 2015.
[10] m. ajmone marsan, g. balbo, g. conte, s. donatelli, and g. franceschinis.
modelling with generalized stochastic petri nets . john wiley and sons,
1995.
[11] sren asmussen. applied probability and queues , volume 51 of applications
of mathematics . springer new york, 2nd edition, 2003.
[12] adriano augusto, abel armas-cervantes, raaele conforti, marlon du-
mas, marcello la rosa, and daniel reiner. abstract-and-compare: a
family of scalable precision measures for automated process discovery. in
business process management - 16th international conference, bpm 2018,
sydney, nsw, australia, september 9-14, 2018, proceedings , pages 158{
175, 2018.
[13] tobias brockho, merih seran, and wil m. p. van der aalst. time-aware
concept drift detection using the earth mover's distance. in international
conference on process mining, icpm 2020, padova, italy, october 6-9,
2020, page to appear. ieee, 2020.
[14] j. c. a. m. buijs and hajo a. reijers. comparing business process vari-
ants using models and event logs. in enterprise, business-process and
information systems modeling - 15th international conference, bpmds
2014, 19th international conference, emmsad 2014, held at caise 2014,
thessaloniki, greece, june 16-17, 2014. proceedings , pages 154{168, 2014.
[15] j.c.a.m. buijs, b.f. van dongen, and w.m.p. van der aalst. a genetic
algorithm for discovering process trees. in ieee congress on evolution-
ary computation (cec 2012) , pages 1{8. ieee computer society, 2012.
[16] j. carmona, b. van dongen, a. solti, and m. weidlich. conformance
checking: relating processes and models . springer-verlag, berlin, 2018.
[17] giovanni chiola, marco ajmone marsan, gianfranco balbo, and gianni
conte. generalized stochastic petri nets: a denition at the net level and
its implications. ieee trans. software eng. , 19(2):89{107, 1993.
[18] m. de leoni and w.m.p. van der aalst. aligning event logs and process
models for multi-perspective conformance checking: an approach based
on integer linear programming. in f. daniel, j. wang, and b. weber,
editors, international conference on business process management (bpm
2013) , volume 8094 of lecture notes in computer science , pages 113{129.
springer-verlag, berlin, 2013.
[19] b.f. van dongen, j. carmona, and t. chatain. a unied approach for
measuring precision and generalization based on anti-alignments. in m.
40la rosa, p. loos, and o. pastor, editors, international conference on
business process management (bpm 2016) , volume 9850 of lecture notes
in computer science , pages 39{56. springer-verlag, berlin, 2016.
[20] b.f. van dongen, j. carmona, t. chatain, and f. taymouri. aligning
modeled and observed behavior: a compromise between computation
complexity and quality. in e. dubois and k. pohl, editors, interna-
tional conference on advanced information systems engineering (caise
2017) , volume 10253 of lecture notes in computer science , pages 94{109.
springer-verlag, berlin, 2017.
[21] b.f. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m.
weijters, and w.m.p. van der aalst. the prom framework: a new era
in process mining tool support. in g. ciardo and p. darondeau, editors,
application and theory of petri nets 2005 , volume 3536 of lecture notes
in computer science , pages 444{454. springer-verlag, berlin, 2005.
[22] paul a. gagniuc. markov chains . john wiley and sons ltd, 2017.
[23] l. garcia-banuelos, n. van beest, m. dumas, m. la rosa, and w. mertens.
complete and interpretable conformance checking of business processes.
ieee transactions on software engineering , 44(3):262{290, 2018.
[24] s. goedertier, d. martens, j. vanthienen, and b. baesens. robust process
discovery with articial negative events. journal of machine learning
research , 10:1305{1340, 2009.
[25] frank l. hitchcock. the distribution of a product from several sources to
numerous localities. journal of mathematics and physics , 20(1-4):224{230,
1941.
[26] gert janssenswillen, beno^ t depaire, and christel faes. enhancing dis-
covered process models using bayesian inference and mcmc. in business
process management workshops - bpm 2020 international workshops,
sevilla, spain, september 14, 2020, revised papers , volume to appear of
lecture notes in business information processing .
[27] anna kalenkova and artem polyvyanyy. a spectrum of entropy-based
precision and recall measurements between partially matching designed and
observed processes. in icsoc , 2020. in press.
[28] m. kerremans. gartner market guide for process mining, research note
g00353970. www.gartner.com , 2018.
[29] sander j. j. leemans and artem polyvyanyy. stochastic-aware conform-
ance checking: an entropy-based approach. in advanced information sys-
tems engineering - 32nd international conference, caise 2020, grenoble,
france, june 8-12, 2020, proceedings , pages 217{233, 2020.
41[30] sander j. j. leemans, erik poppe, and moe thandar wynn. directly
follows-based process mining: exploration & a case study. in international
conference on process mining, icpm 2019, aachen, germany, june 24-
26, 2019 , pages 25{32. ieee, 2019.
[31] sander j. j. leemans, shiva shabaninejad, kanika goel, hassan khos-
ravi, shazia sadiq, and moe t. wynn. identifying cohorts: recommend-
ing drill-downs based on dierences in behaviour for process mining. in
conceptual modeling - 39th international conference, er 2020, vienna,
austria, november 3-6, 2020, proceedings , volume to appear of lecture
notes in computer science .
[32] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering block-
structured process models from event logs containing infrequent beha-
viour. in n. lohmann, m. song, and p. wohed, editors, business process
management workshops, international workshop on business process in-
telligence (bpi 2013) , volume 171 of lecture notes in business information
processing , pages 66{78. springer-verlag, berlin, 2014.
[33] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. scalable process
discovery and conformance checking. software and systems modeling ,
17(2):599{631, 2018.
[34] s.j.j. leemans, a.f. syring, and w.m.p. van der aalst. earth movers'
stochastic conformance checking. in t.t. hildebrandt, b.f. van don-
gen, m. r oglinger, and j. mendling, editors, business process manage-
ment forum (bpm forum 2019) , volume 360 of lecture notes in business
information processing , pages 127{143. springer-verlag, berlin, 2019.
[35] f. mannhardt, m. de leoni, h.a. reijers, and w.m.p. van der aalst.
balanced multi-perspective checking of process conformance. computing ,
98(4):407{437, 2016.
[36] f. mannhardt, m. de leoni, h.a. reijers, and w.m.p. van der aalst. meas-
uring the precision of multi-perspective process models. in m. reichert
and h.a. reijers, editors, business process management workshops, in-
ternational workshop on business process intelligence (bpi 2015) , volume
256 of lecture notes in business information processing , pages 113{125.
springer-verlag, berlin, 2016.
[37] m. ajmone marsan, g. balbo, and g. conte. a class of generalised
stochastic petri nets for the performance evaluation of multiprocessor
systems. acm transactions on computer systems , 2(2):93{122, may 1984.
[38] j. munoz-gama and j. carmona. a fresh look at precision in process
conformance. in r. hull, j. mendling, and s. tai, editors, business pro-
cess management (bpm 2010) , volume 6336 of lecture notes in computer
science , pages 211{226. springer-verlag, berlin, 2010.
42[39] j. munoz-gama and j. carmona. enhancing precision in process con-
formance: stability, condence and severity. in n. chawla, i. king,
and a. sperduti, editors, ieee symposium on computational intelligence
and data mining (cidm 2011) , pages 184{191, paris, france, april 2011.
ieee.
[40] hoang nguyen, marlon dumas, marcello la rosa, and arthur h. m. ter
hofstede. multi-perspective comparison of business process variants based
on event logs. in conceptual modeling - 37th international conference,
er 2018, xi'an, china, october 22-25, 2018, proceedings , pages 449{459,
2018.
[41] charalampos papamanthou, konstantinos paparrizos, and nikolaos
samaras. computational experience with exterior point algorithms for the
transportation problem. appl. math. comput. , 158(2):459{475, november
2004.
[42] konstantinos paparrizos. a non improving simplex algorithm for transport-
ation problems. rairo - operations research - recherche op erationnelle ,
30(1):1{15, 1996.
[43] artem polyvyanyy and anna a. kalenkova. monotone conformance check-
ing for partially matching designed and observed processes. in international
conference on process mining, icpm 2019, aachen, germany, june 24-
26, 2019 , pages 81{88, 2019.
[44] artem polyvyanyy, alistair moat, and luciano garc a-ba~ nuelos. an en-
tropic relevance measure for stochastic conformance checking in process
mining. in icpm , 2020. in press.
[45] artem polyvyanyy, sergey smirnov, and mathias weske. reducing com-
plexity of large epcs. in mobis , volume 141, pages 195{207. gfi, 2008.
[46] artem polyvyanyy, andreas solti, matthias weidlich, claudio di ciccio,
and jan mendling. monotone precision and recall measures for comparing
executions and specications of dynamic systems. acm trans. softw. eng.
methodol. , 29(3):17:1{17:41, 2020.
[47] michael o. rabin. probabilistic automata. information and control ,
6(3):230{245, sep 1963.
[48] a. rogge-solti, w.m.p. van der aalst, and m. weske. discovering
stochastic petri nets with arbitrary delay distributions from event logs.
in n. lohmann, m. song, and p. wohed, editors, business process man-
agement workshops, international workshop on business process intelli-
gence (bpi 2013) , volume 171 of lecture notes in business information
processing , pages 15{27. springer-verlag, berlin, 2014.
43[49] a. rogge-solti, a. senderovich, m. weidlich, j. mendling, and a. gal. in
log and model we trust? a generalized conformance checking frame-
work. in m. la rosa, p. loos, and o. pastor, editors, international con-
ference on business process management (bpm 2016) , volume 9850 of
lecture notes in computer science , pages 179{196. springer-verlag, ber-
lin, 2016.
[50] andreas rogge-solti, wil m. p. van der aalst, and mathias weske. dis-
covering stochastic petri nets with arbitrary delay distributions from event
logs. in bpm workshops , pages 15{27, 2013.
[51] a. rozinat and w.m.p. van der aalst. conformance checking of processes
based on monitoring real behavior. information systems , 33(1):64{95,
2008.
[52] a. rozinat, r.s. mans, m. song, and w.m.p. van der aalst. discovering
simulation models. information systems , 34(3):305{327, 2009.
[53] arik senderovich, matthias weidlich, liron yedidsion, avigdor gal,
avishai mandelbaum, sarah kadish, and craig a. bunnell. conform-
ance checking and performance improvement in scheduled processes: a
queueing-network perspective. inf. syst. , 62:185{206, 2016.
[54] anja f. syring, niek tax, and wil m. p. van der aalst. evaluating conform-
ance measures in process mining using conformance propositions. trans-
actions on petri nets and other models of concurrency , pages 192{221,
2019.
[55] n. tax, x. lu, n. sidorova, d. fahland, and w.m.p. van der aalst. the
imprecisions of precision measures in process mining. information pro-
cessing letters , 135:1{8, 2018.
[56] a.n. tolstoi. methods of removing irrational shipments in planning. sot-
sialisticheskii transport , 9:28{51, 1939.
[57] seppe k. l. m. vanden broucke, jochen de weerdt, jan vanthienen, and
bart baesens. determining process model precision and generalization with
weighted articial negative events. ieee transactions on knowledge and
data engineering , 26(8):1877{1889, aug 2014.
[58] j. de weerdt, m. de backer, j. vanthienen, and b. baesens. a multi-
dimensional quality assessment of state-of-the-art process discovery al-
gorithms using real-life event logs. information systems , 37(7):654{676,
2012.
[59] j. de weerdt, m. de backer, j. vanthienen, and b. baesens. a robust f-
measure for evaluating discovered process models. in n. chawla, i. king,
and a. sperduti, editors, ieee symposium on computational intelligence
and data mining (cidm 2011) , pages 148{155, paris, france, april 2011.
ieee.
44[60] m. weidlich, a. polyvyanyy, n. desai, j. mendling, and m. weske. pro-
cess compliance measurement based on behavioral proles. information
systems , 36(7):1009{1025, 2011.
appendix a. exterior point simplex for log-model comparisons
in the following, we will use terminology and notation introduced in [42].
the proof can be divided into two parts. first, in order to apply the algorithm,
we introduce an articial demand node on the model side which normalises the
total demand. we show that this node will have zero incoming ow as long as
there are demand nodes with rest capacity. secondly, we show that the ow is
optimal for the unfolded model problem immediately before the rst usage of
the new demand node.
we start the proof with ve observations that follow directly from the al-
gorithm and its proof in [42]. the rst observation concerns the costs of aug-
menting ow along the path ptwhich is created between the two roots of the
surplus and decit trees of the incoming edge in step t.
observation 1 (flow augmentation cost) .given the path pt,tcorresponds
to the primal costs of augmenting one unit of ow along pt.
proof. this follows from the denition and update for the dual variables and is
a general relation between dual slack variables and their corresponding primal
variables in simplex type algorithms.
notice that augmenting ow along ptmight only violate the ow constraints
at the root nodes. the second observation establishes the monotonicity of t.
observation 2 (montonicity of t).for iterations t;t′witht<t′, it holds that
0≤t≤t′.
proof. first, 0≤0immediately follows from he akp forest initialisation method
[41] since the resulting forest is dual feasible. furthermore, t≤t+1holds inde-
pendently from the initialisation method [42, p. 9,13].
for the second part of the proof we observe that for every edge in the forest
the corresponding dual constraint is tight.
observation 3 (complementariy slackness wrt. wij).given(i;j)∈ft, it holds
that0=wij(ft)=cij−ui(ft)−vj(ft).
proof. this is a typical relation for simplex type algorithms and follows from
the akp intitialisation method and the update equations of the dual variables
of the algorithm.
the fourths observation concerns the primal ow constraints in the indi-
vidual subtrees.
45observation 4 (subtree flows) .for each node in ftthat is not a root its total
outgoing ow (supply node) or total incoming ow (demand node) constraints
are satised.
proof. this follows from the akp initialisation method and how ows are aug-
mented in the update step.
finally, we observe that every root node in ftcorresponds to a demand
node.
observation 5 (root nodes) .given a root node n∈ft, it holds that n∈j,
i.e.,nis a root node.
proof. forn∈f0, this follows from the akp intialisation method. for n∈ft;t>
0, this follows from the forest update routine that only reduces the number of
root nodes but never changes a root node nor adds a new tree.
given these observations, in order to apply the algorithm, we introduce an
additional articial demand (model) node nawhich normalises the total demand
capacity, i.e., bna=1−∑n
j=1bj. the distance to each of the supply(/log) nodes
is dened to be at least twice the total distance, i.e, cina=2∑i∈i∑j∈jcij+1,
withi=1:::m .
by introducing this articial demand node, we reformulate the problem as a
general tp problem with equality demand constraints and can then thus apply
the algorithm.
next, we show that the algorithm will not select an edge incident to naas
long as there are decit trees remaining, i.e., fd
t≠/uni2205. to this end, notice that
the initial greedy akp initialisation method will not attach a supply node to na.
furthermore, by the denition of cina;i=1;:::;m , the primal costs of augment-
ing ow along a path between two root nodes will always be less than the costs
for augmenting ow along a path that contains an edge (i;na)(fori=1;:::;m ).
given that the potential primal cost improvement of augmenting one unit of ow
is naturally bounded by the total sum of the distances, a path containing an edge
tonawill have a cost of at least 2 ∑i∈i∑j∈jcij+1−∑i∈i∑j∈jcij. accordingly,
using observation 1, twould not be minimal for an edge (i;na);i=1;:::;m if
fd
t/uni2216{na}≠/uni2205holds.
we stop the algorithm if there is no decit tree left except the artical
demand node, i.e., fd
t={na}, and remove na. letftfdenote the resulting
forest. for this solution, we prove that it is optimal for the lp for unfolded
model path languages. to this end, we prove primal feasibility, dual feasibility
and complementary slackness, which together imply optimality.
primal feasibility. by observation 4 all non-root nodes satisfy their constraints.
furthermore, by observation 5 every root node is a demand node and the
stopping criterion ensures that there is a surplus at the respective root of the
tree. thus, the solution is primal feasible.
46dual feasibility. in order to show dual feasibility, we start with wkl(ft)≥0;k∈
fs
0;l∈fd
0, which follows directly from observation 2 and the relation:
0≤0≤t=min{wij(ft)/divides.alt0i∈fs
t;j∈fd
t}≤wkl(ft)
in addition, we have to show that for the last forest ftf, it holds that
vj(ftf)≥0;j∈j. to this end, let j∈jand consider the sequence of all changes
ofvj, namely /parenleft.alt3vj(ftj
0);vj(ftj
1);:::;vj(ftj
fj)/parenright.alt3. that is, for k;l∈{0;:::;fj};k<l
andtj
k≤t<tj
l, it holds that vj(ftj
k)=vj(ft)≠vj(ftj
l). since the value of vj
may only change if and only if node jtransitions between a surplus tree and
a decit tree, we have vj∈fs
tj
k(vj∈fd
tj
k)if and only if vj∈fd
tj
k+1(vj∈fs
tj
k+1).
moreover, due to the akp initialisation method, we have vj(f0)=0. in order
to prove that vj(ftf)≥0, we consider the cases j∈fd
0andj∈fs
0, and prove
thatj∈fs
t′implies that vj(ft′)≥0 fort′=0;:::;tf.
•casej∈fd
0. first, observe that j∈fs
t′if and only if t′∈{tj
1;tj
3;:::;tj
fj−2;tj
fj}.
notice that tj
fjis included as the algorithm terminates when there is no
decit tree left. the claim follows by induction on k=1;3;::: proving
thatvj(ftj
k)≥0⇒vj(ftj
k+2)≥0.
induction base k=1:by the update rules we have 0 =vj(f0)=vj(ftj
1−1)tj
1≥0
≤
vj(ftj
1−1)+tj
1=vj(ftj
1).
induction step k→k+2:applying the update rules using vj∈fs
tj
k,vj∈
fd
tj
k+1andvj∈fs
tj
k+2yields
vj(ftj
k+2)=vj(ftj
k+1)+tj
k+1=vj(ftj
k)−tj
k+tj
k+1/dcurlyleft/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/dcurlymid/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/udcurlymod/dcurlyright
≥0(tj
k≤tj
k+1)≥vj(ftj
k)≥0:
thus, the case holds by induction.
•casej∈fs
0. analog to j∈fd
0with induction over k=0;2;:::.
as the algorithm terminates when there is no decit tree left and hence all
demand nodes are in a surplus tree, the solution is dual feasible.
complementary slackness. finally, we show complementary slackness of the
primal and dual solution, i.e.,
xij(ftf)wij(ftf)=xij(ftf)/parenleft.alt1cij−u(ftf)−v(ftf)/parenright.alt1=0
fori∈iandj∈j. this holds for every intermediate forest fi;i=0;:::;tfby
observation 3 and the fact that only tree edges have a nonzero ow.
47