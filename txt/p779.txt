process mining can be applied
to software too!
vladimir a. rubin1,2
vrubin@hse.rualexey a. mitsyuk2
amitsyuk@hse.ruirina a. lomazova2
ilomazova@hse.ru
wil m.p . van der aalst2,3
w.m.p.v.d.aalst@tue.nl
1dr. rubin it consulting, 60599, frankfurt am main, germany
(in collaboration with msg systems ag, germany),
2international laboratory of process-aware information systems,
national research university higher school of economics (hse),
33 kirpichnaya str., moscow, russia.
3architecture of information systems, eindhoven university of technology,
p .o. box 513, nl-5600 mb, eindhoven, the netherlands.
abstract
modern information systems produce tremendous amounts
of event data. the area of process mining deals with ex-
tracting knowledge from this data. real-life processes can
be eectively discovered, analyzed and optimized with the
help of mature process mining techniques. there is a variety
of process mining case studies and experience reports from
such business areas as healthcare, public, transportation and
education. although nowadays, these techniques are mostly
used for discovering business processes.
however, process mining can be applied to software too.
in the area of software design and development, process
models and user interface workows underlie the functional
specication of almost every substantial software system.
when the system is utilized, user interaction with the system
can be recorded in event logs. after applying process mining
methods to logs, we can derive process and user interface ow
models. these models provide insights regarding the real
usage of the software and can enable usability improvements
and software redesign.
in this industrial paper we present several process mining
examples of dierent productive software systems used in the
touristic domain. with the help of these examples we demon-
strate that process mining enables new forms of software
analysis. the user interaction with almost every software
system can be mined in order to improve the software and
to monitor and measure its real usage.
permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. to copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
esem ’14, september 18–19, 2014, torino, italy.
copyright 2014 acm 978-1-4503-2774-9/14/09 ...$15.00.categories and subject descriptors
h.4 [information systems applications ]: general; d.2.8
[software engineering ]: metrics| process metrics
general terms
experimentation, design
keywords
process mining, software process mining, user interface
design, client technology
1. introduction
information systems from dierent business areas, such as
healthcare, public, transport and education, produce tremen-
dous amounts of event data . process mining provides mature
theoretical and practical foundations for discovering pro-
cesses from dierent kinds of event data [27, 28]. the core
idea of process mining is to start from real event data and
to use these to derive process models . there are numerous
examples of successful applications of process mining in busi-
ness process management (bpm), but the adoption in other
domains is lagging behind.
bigsoftware projects and programs inuence signicantly
the way companies work. it architectural changes and im-
provements can be introduced only when the business pro-
cesses are properly analyzed and structured. from a software
engineer's point of view, business process design is a funda-
mental part of almost every enterprise architectural concept
and of the functional specication of almost every infor-
mation system [8, 4]. even for building the graphical user
interface (gui), architects and requirement engineers often
start with designing the user workows (screenows) { gui
storyboards [24, 11, 26]. these storyboards specify how the
system should be used from the end-user perspective.
in this paper we focus on the user workows . the idea
ofuser behavior analysis at runtime is not new, e.g., it is
especially widely adopted in the web domain. well-knowninstruments as google analytics and piwik are eectively
used in many companies working in the e-commerce area.
however, \smart" analysis of the user behavior and of the
user workows continues to be a challenging problem. since
usability and user acceptance are complicated issues in almost
every innovative software project, foundational research and
robust tools dealing with user behavior analysis are denitely
needed.
in this paper we present the area of software process mining ,
which deals with applying process mining to the software
analysis and especially to the user behavior analysis . we
outline two experience reports based on the software systems
used in the touristic domain: one big european customer
reservation system and one ticket reservation system widely
used in russia1. there are a lot of similarities between these
projects: stakeholders in both projects wanted to discover
and monitor the real usage of the systems for improving the
design and development. moreover, similar use cases are
available for a wide range of running software systems from
dierent business areas. therefore, our hypothesis is that
process mining can be successfully applied to the domain of
software user interface design , usability and runtime analysis
of software systems.
this is an industrial paper and the usage of process mining
was initiated due to the needs of the two projects. thus, we
start directly with experience reports in the next section.
2. experience report
in this section, we present two process mining case studies,
which deal with the analysis of complex touristic ticket reser-
vation systems . the architecture, the size and the market
segments of these systems are dierent, but similar methods
were applied and similar analysis results were obtained.
2.1 mining computer reservation system
in the rst case study, we deal with a big european touristic
system . this system belongs to a wide class of computer
reservation systems . the system is rolled out in europe in
more than 10000 travel agencies. the backend of the system
contains the business logic and provides booking services
to dierent types of client applications. most of the travel
agencies use text-based clients for expert users to access the
backend.
the communication with the backend is carried out through
a special touristic protocol called toma , which is widely ac-
cepted in the industry. toma is standardized and perfectly
documented [1]. the initial versions of the protocol were
built in the 80's and used ever since. the main advantage
for our research is that every message of the protocol exactly
species the user behavior and the user input data. the
start and the end of the interaction with the system are also
dened. thus, we have a perfect precondition for identifying
the business cases (process instances) and the user activities.
one important component of the backend is a special \in-
bound adapter", which intercepts all the calls to the backend
and logs the data. these logs are normally used for soft-
ware debugging and testing { producing such logs is common
practice in the industry. so, our initial idea was to extend
1the european project was done by dr. rubin it consulting
in collaboration with msg systems ag (frankfurt am main,
germany). the russian project was done by the members
of pais lab (moscow, russia).these logs with the details of the toma messages. it is use-
ful both for developing and testing the system components,
which deal with toma, and for enabling process mining and
behavior analysis.
2.1.1 event log
a fragment of an event log is shown in table 1. every
log entry contains an id of the case, an activity name, a
timestamp, a user id, a booking code and a notication.
an activity name encodes the type of message, the user
activity and the screen, e.g. \t1-hf-h:tes" means that
t1 message (initial process start message) was sent to the
system, the user activity was \hf-h" { search for available
hotels and the screen \tes" (entry screen) was shown. the
booking code identies the location, e.g. \ber"means berlin,
germany. and the notication depicts the system message,
which was sent to the user, e.g. \998" is a string message
of a variable length. request messages start with \t" and
response messages start with \m". every case starts with
\t1" message and nishes with the \m52" message. thus,
in the example in table 1 we show two cases: \case 16" is
search for available hotels in berlin and \case 17" { reserve
double room in a concrete hotel in berlin.
with the help of the inbound adapter, we collected the logs
for each day, when the system was tested (acceptance tests)
or productively used. we used the tool disco (fluxicon)
for process mining and model analysis. disco was chosen
because of its usability, delity, reliability and performance
when dealing with big logs. the core of disco is based on
the fuzzy mining algorithm [10]. the strength of the fuzzy
miner is the seamless process simplication and highlighting
of frequent activities. a disco screenshot with the model for
one working day is shown in fig. 1. the size of the log in cvs
format is 300 kb. the log contains 1122 cases, 4526 events
and 79 activities. each case represents a complete process
containing one or several system requests like search, book,
payment, etc. the nodes of the graph represent the activities
and the arcs { the order of their execution. the numbers at
the nodes show activity frequencies and the numbers at the
arcs { frequencies of corresponding connections (execution
paths).
figure 1: disco screenshot with a fuzzy model
even for one day (normally covering a subset of possible
behavior) a model looks rather complicated. thus, we used
the benets of fuzzy mining for adjusting the level of detailscase id activity timestamp user booking noti-
code cation
case 16 t1-hf-h:tes 2013-12-18 08:36:00:570 c05 ber
case 16 m55type010rsp-034 2013-12-18 08:36:04:717 c05 998
case 16 t3-hf-h:hh004 2013-12-18 08:36:09:337 c05 ber
case 16 m52rsp 2013-12-18 08:36:09:337 c05 998
case 17 t1-ba-h:tes 2013-12-18 08:36:12:155 c05 ber45010 dh
case 17 m52rsp 2013-12-18 08:36:18:397 c05 712
table 1: touristic protocol log
and also applied ltering in order to better perceive the pro-
cess model. we consider these mechanisms to be absolutely
essential for practical process mining. further, we focus on
one day of acceptance tests (pre-production phase).
2.1.2 frequency and negative behavior
with the help of frequency-based adjustment of detail level,
we easily identied the most frequent activities, see fig. 2.
in the model, we see that activities such as \t1-ai" (get
information about travel agency), \t1-d" (get reservation)
and \t1-ba-h" (reserve hotel) were executed often.
figure 2: frequency-based process model
sometimes, it is useful to highlight the negative behavior ; in
our example the paths which cause message\m51rsp"(message
51 is a failure message) as a response contain failures. with
the help of ltering, we can focus on the cases which include
the message of this type. in fig. 2, the transition between
\t1-d-:tes" and \m51rsp" is frequent, it shows the situa-
tions when the user wanted to get a reservation and received
failures. from this part of the model, we understand that the
implementation of \get reservation" function is error-prone .
\t1-d" (get reservation) caused \'m51rsp' 1464 times. in
77% of all cases, the user had problems with representing
existing reservations.
next, we switch to the cases and variants view, see fig. 3.
variants represent the types of cases with the same behavior.
in 65.86% of all negative cases, the user just wanted to get a
reservation, received an error and stopped his work.
the process models and particular cases were shown to
the team of acceptance testers and also to the team of de-
velopers . both teams could easily understand the models
figure 3: cases having message \m51rsp" as a response
contain failures
and emphasized that the models really reected the tested
behavior. during the whole day, the testers had signicant
problems with \get reservation" function, many of them were
disappointed and stopped their tests of this function. devel-
opers conrmed that that particular release introduced new
changes to \get reservation" and some basic functionality was
broken. since we had particular timestamps for the negative
cases, we aligned these timestamps with the software logs
(debugging and exceptions logs) and found out the excep-
tions thrown by the system. then, we created bug issues
for the developer team. the process models were included
to the description of the bugs, which helped the developers
to reproduce and x them. moreover, such type of concrete
formal communication, when the behavior is visualized and
the bugs are formulated, helped the teams of testers and the
developers to understand each other better.
2.1.3 positive behavior
for the same day of acceptance tests, we also excluded
all the cases with failures (message \m51") and focused only
on the positive behavior. such functions as \t1-g-f" (ight
search), \t1-bi" (booking information), \t1-ba-h" (reserve
hotel) and \t1-ai" (get agency information) worked properly
during the whole day.
this information was extremely useful for management ,
since it depicted the stable functionality of the system. we
showed two things: the positive behavior and also the func-
tionality which was tested by the test team. the managers
understood the widely used features and the testers received
an overview of their test cases. the missing test cases were
identied and for some types of behavior it was decided
(based on frequency) to make more thorough tests.
2.1.4 typical worfklow
for the designers and developers it is relevant to know
how the user works. it is helpful for reproducing the bugs,
writing tests and for learning the real system. thus, weltered out all the response messages and just looked at
the requests typically sent by the user. in fig. 4a we show
a performance view and in fig. 4b { a frequency view on
the process. the arcs in fig. 4a are labeled with median
duration between activities. users use to start with \t1-
ba" (make pre-reservation) or \t1-d" (get reservation), then
they proceed with such activities as \t1-h-h" (search hotel)
or \t1-g-f" (search ight). it is interesting to see, that
sometimes users do not close the clients properly, for example
transition \t1-ba-h" { \t1-ai" took 3.4 hours because the
user left the application open for a long time.
these models were especially useful for the developers and
for the test automation team. developers could learn how
the users actually work. for example, make a reservation,
then open it, search for further service (hotel or ight) in the
context of reservation, book it and repeat the whole process
again. thus, saving the reservation object in the execution
context and caching was a logical technical decision made by
the developers based on the process mining results. the test
automation experts also understood the typical ows and
could improve their test scripts in order to check the real
behavior.
2.1.5 statistics
also, the statistical information derived from the logs
was extremely useful. since our log (see table 1) contained
information about booking codes, users and notications, we
found out the most frequent travel directions, most active
users and most typical failure messages. for example, in
fig. 5, we see that \fra vno" (flight from frankfurt to
vilnius) was one of the most frequent routes.
figure 5: statistics about booking codes
it is important to note that not only the booking code and
the notication code can be included into the log, there are
plenty of dierent data attributes which could be relevant
for the analysis. for example, we could concentrate on the
organization aspect and deal with roles of the users and
information about travel agencies, or on the informational
aspect and booking and travel dates or customer data. the
process model and the statistics perfectly complement each
other: the model with frequencies and statistics enables
focusing on relevant things, statistics based on the model
better reveals the subject.
thus, in this case study, with the help of process mining
we did the following:
visualized user behavior and discussed it with the
users and developers. process models helped designers,
developers and testers to learn the typical way of work.
moreover, the models could be regularly shown to the
management , which helped them to estimate the real
stability and readiness of the system.
monitored the acceptance tests. after focusing on
negative behavior, we regularly identied the problems
of the users even before they created bug issues forthem. moreover, the user problems were aligned with
exceptions in the logs and the developers had a complete
view on the faulty behavior { from user to the business
logic.
identied the most typical and frequently used func-
tions of the system. the developers and test teams
focused on implementing, testing and xing the most
common and critical functionality.
at the end of this case study, it is worth mentioning that
not only described touristic system, but almost 200 tour
operators in europe use the same protocol. similar min-
ing techniques can be easily transferred to these systems.
such standard touristic processes as analysis of the preced-
ing touristic season, future demand calculation and yield
management can benet from process mining.
2.2 mining traveling portal
in the second case study, we examine a popular russian
traveling portal . in comparison to the previous case study,
this system is completely web-based and focused on e-trading .
through the portal, users search and book their tickets.
traveling directions are searched using dierent criteria like
origin, destination, date, class of service, etc. during the
sales process , the tickets are booked and than, in the after-
sales process , payment is done. like in the previous system,
the backend contains the business logic. but in this case,
the customers use the web interface for accessing the system.
the backend server (web and application servers) produces
the event logs, which serve as an input for process mining.
the touristic company constantly measures the eective-
ness of the web portal usage with the help of \amount of
purchases per visitor" metric. at some point of time it was
noticed that the value began to decrease. it was obvious that
people were leaving the website and the company was loosing
the clients . thus, it was decided to analyze the user behavior
in order to improve the functionality of the portal. it moti-
vated the company to use the process mining techniques for
this analysis.
2.2.1 event log
a fragment of the event log is shown in table 2. a log
entry contains a session id, an activity, a user id and a
timestamp. the session id is used as a case id for process
mining. an activity consists of an object and an action,
e.g. \window/load" means that the object \window"
was loaded. generally the log contains also additional at-
tributes like url, browser version, order status, etc. all these
attributes are relevant for statistical analysis and ltering,
but for process mining we initially used only the attributes
shown in the table.
this time we used the process mining toolkit prom [29].
prom contains more than 600 plugins and facilitates selection
of appropriate mining and analysis techniques. for this case
study, we used both fuzzy and heuristic miners. heuristic
miner [30] is a mining approach, which produces heuristic
nets and deals nely with noise and less structured models.
a prom screenshot with the results of process mining for
a one month period is shown in fig. 6. the log contained
11087 cases, 81872 events and 50 activities.
2.2.2 frequency(a) performance view
 (b) frequency view
figure 4: models of typical user behavior
session id activity user timestamp
4654514 window-load 6767 2013.09.24 19:36:48.000
4654514 profile-check 6767 2013.09.24 19:36:49.000
4654514 accept-check 6767 2013.09.24 19:36:49.000
4654514 confirm submit-click 6767 2013.09.24 19:36:49.000
4654514 window-unload 6767 2013.09.24 19:36:49.000
table 2: web portal log
figure 6: screenshot showing a heuristic model discovered
by prom
our goal was to identify the frequent scenarios character-
izing the cases where users left the website without nishing
the booking process. so, we ltered out the cases with or-
der status \nalized" (booking was completed) and also the
cases containing only opening and closing events from the
log. then we focused on the events preceding the \win-
dow/unload" event. a fragment of this model is shown
in fig. 7.
with the help of statistical analysis, we found out that
the most frequent events preceding leaving the portal were:
1.payment method verication \paymethod-click":
43.14%,
2.booking conrmation \confirm submit-click":
38.29%,



figure 13. a fragment of the heuristic net for the filtered event log 
figure 7: model fragment of a ltered log
3.acceptance of fare conditions \accept-check":
33.88%,
4.removal of an insurance policy \insured person-
uncheck": 20.47%
we carefully analyzed all the paths listed above. for
example for the case (1), we found out that the user normally
pressed the selection of payment method multiple times,
before leaving the page. it was a clear sign of a misleading
software behavior .
2.2.3 typical workﬂow
like in the previous case study, we were also interested in
a users typical way of work. the log was ltered, so that
only events existing in more than 44% of cases remained.
the heuristic net model is shown in fig. 8. the usersnormally started with entering the personal data and contact
information, proceeded with selecting the payment method
and submitting the data to the server.
it was interesting to notice that more than a half of all
the cases did not follow the normal scheme. after analysis
of dierent cases, we found that many exceptional cases
contained multiple clicks of the same buttons and duplicate
user actions. developers were surprised about various system
usage scenarios, which were neither designed nor expected.
our investigations on typical workows and on the frequent
portal leaving were presented to the management and to the
development . both sides were impressed by the deepness of
the analysis of their processes, which was achieved with the
help of process mining. on the basis of our analysis, we also
made research on improving the situation and formulated the
agenda . the agenda contained points such as (1) improving
the purchase scheme and reassessing the payment methods,
(2) changing the design of the oers page, (3) revising the
fare policy, etc.
so, in our case studies we focused on the touristic systems ,
their functionality is transparent and easily understandable
to the readers. both systems produce similar event logs as
input for process mining; in both systems managers and
developers were interested in visualization and analysis of
frequent positive/negative and typical behavior. however,
similar logs can be produced by dierent software systems
from various application domains. independently of the
technology, whether it is a rich client application (rst case
study) or a web portal (second case study), the gui design
and usage principles are similar and, thus, similar event data
can be produced.
3. process mining in the software
environment
in this section, we generalize our experiences described
and argue that our ndings apply to many other software
systems. several pragmatic software practices , which are
helpful for integrating process mining in a generic software
environment are presented here.
the gui of desktop and mobile software systems are built
using a variety of dierent client technologies. people dis-
tinguish between rich client (e.g., .net wpf, eclipse rcp,
objective c applications) and thin client applications (e.g,
google andoid, jsf, html5 + javascript). the communi-
cation between client and server can be done using http
protocol directly like in case of web or web/rest services
or using dierent remoting frameworks like rmi, iiop, jms,
which normally rely on the tcp/ip stack. a coarse view on
dierent types of client/server architectures is given in fig. 9.
a rich client can communicate with the server directly or
using a proprietary protocol (an example of toma protocol
was given in section 2.1), and a web client accesses the server
over http (an example was given in section 2.2).
in order to apply software process mining , it is necessary
to produce the event logs . in case of a rich client with
proprietary protocol , like in our rst case study, it is possible
to write the logs on the application server (see \event logs
(1)" in fig. 9), since request messages contain the data about
the user behavior and the identity of the user. in case of
normal rich client , the server request does not reect the user
behavior, furthermore, the client can contain its own business
logic and workows. thus, it is necessary to make loggingon the client side, see \event logs (2)". event logs from
dierent rich clients must be assigned a user identity and be
merged together in a combined log. in case of web client , the
user logic is distributed among browser, web and application
server. depending on the particular technology it is possible
to produce logs on the server side or on the client side, see
\event logs (3)". for example, in case of html5, the client
side containing powerful javascript libraries can intercept all
the user events and call the logging service on the server side
(similar approach is used by google analytics).
the event log entries reecting the user behavior have
similar structure :
[caseid; action; object; userid; timestamp ]. the client session
id is normally taken as a case id, like in our second case
study in section 2.2. the user actions are applied to some
widgets or dialogs (objects). for example: load window,
input address, click search button, etc. therefore, action and
object together normally represent a user activity. user id
reects the organizational aspect and timestamps are used
to analyze the performance aspect. as presented in the case
studies, additional attributes can be logged in order to reect
informational, security, transactional, infrastructural and
other software aspects.
from the point of view of software architecture needed
for process mining, logging is normally seen as a separate
aspect , which should not be mixed with the business logic.
thus, for all the cases listed above, event logging should be
implemented either as a separate aspect (in terms of aspect-
oriented programming) or using listeners (observer pattern)
for dierent gui forms and widgets.
for broad industrial usage, it is useful to implement per-
sistence and management of event logs as a separate service
with a separate storage . every activity of the user produces
an event. depending on particular client technology, listen-
ers or aspects are notied, and separate service for storing
event data is called. event log is stored separately and is
separated from the core of the software system. therefore,
process mining can be seen as an independent service , see
fig. 9. thus, dierent user behavior events are sent to the
process mining service . the service formats, lters and nor-
malizes the data and stores it into a separate process mining
database ; relational, but also nosql databases can be used
here. the process mining core comprises a set of process
mining techniques and algorithms.
inboth companies where we did the case studies, it ser-
vices departments used dierent application performance
monitoring and failure tracking tools. almost all of these
tools were available as separate services deployed in the in-
tranet cloud. cloud services become more and more eective
and applicable nowadays [6]. since, depending on the project,
dierent amounts of data and dierent computational per-
formance is needed, it is worthwhile also to deploy process
mining service in a cloud as a saas (software as a service)
service. in this case, dierent projects get access to the
service without deploying and installing the mining software.
moreover, cloud infrastructure, which provides scalability ,
elasticity and dynamic resource provisioning, enables solving
process mining problems of an extremely high complexity.
4. related work
process mining is a developed research eld providing a set
of mature methods and techniques [27, 28]. for the process
mining introduction , the interested reader is also referred tofigure 8: typical workow as a heuristic net
&' 
!+ 
*) 
%' ($' 
($) 
($ 
*) 
*#"##	","---	%"*&"---&' 
!. 
&' 
!/ 

) 
' 
figure 9: overview of software architecture
the process mining website www.processmining.org . process
mining was successfully applied in a set of business areas,
such as healthcare [16, 31, 21], insurance [25], auditing [12],
hardware test processes [22] and even vessel behavior [15]. in
this paper we present case studies from the other application
area { tourist industry.
in our research we look at user behavior analysis from a
software engineering perspective. some preliminary research
in this area already exists. the ideas about using process
mining for detecting abnormal behavior in social networks
were described by sahlabadi et al. [23]. an approach to
the analysis of farmers interaction with the decision support
systems was presented by maruster et al [17].
generally, a lot of contributions have been made in the area
of user behavior analysis and especially in web analytics [13]
und user activity tracking [3]. such tools as piwik [18] and
google analytics [20] are widely used in this domain and
accepted both by the research and industrial communities.
also a lot of work has been done in web usage mining [19,
7]. a separate domain here is mining search query logs [5].
the existing approaches normally use statistical and/or data
mining methods for analysis of user behavior in web. process
mining can be seen here as an important enhancement of
web analytics, which provides a holistic process view on the
behavior. also the domain of software runtime analysis with
the help of model generation [14] and mining [2, 9] deals with
applying mining methods to software, however dealing not
with the user but with the runtime perspective.
5. future work and conclusions
in this paper, we used two industrial projects to demon-
strate how process mining can be used for deriving and
analyzing the software user behavior . our experiments weredone with the help of a commercial tool disco and the open-
source platform prom . we generalized our experiences and
presented software process mining as a separate important
application domain . our goal was to motivate the need for
foundational research in the area of software process min-
ing and especially mining the software usage. based on our
experiences we arrived to a conclusion that process mining
is an advanced technique which can be used for analyzing
the user behavior for almost every software system, without
focusing on a particular business domain.
in the future, from the point of view of industrial process
mining tools, it makes sense to see process mining as a\clever"
analysis and monitoring service . it is important to be able
to embed event tracking to the existing software systems and
to provide process mining in the cloud in order to achieve
scalability and elasticity. we also see an urgent need to
support the automated adjustment of the abstraction level
of logs and models and better support of intelligent ltering.
practical event logs and models are huge and we have to be
able to do process mining for \big data" eectively.
6. acknowledgements
support from the basic research program of the national
research university higher school of economics is gratefully
acknowledged.
7. references
[1] amadeus. amadeus toma basic (trainingshandbuch).
http://www.amadeus.com/at/documents/aco/at/de/
amadeus%20toma%20basic.pdf , 2014.
[2] g. ammons, r. bod k, and j. r. larus. mining
specications. sigplan not. , 37(1):4{16, jan. 2002.[3] r. atterer, m. wnuk, and a. schmidt. knowing the
user's every move: user activity tracking for website
usability evaluation and implicit interaction. in
proceedings of the 15th international conference on
world wide web , www '06, pages 203{212, new
york, ny, usa, 2006. acm.
[4]j. barjis. the importance of business process modeling
in software systems design. science of computer
programming , 71(1):73 { 87, 2008.
[5] p. boldi, f. bonchi, c. castillo, d. donato, a. gionis,
and s. vigna. the query-ow graph: model and
applications. in proceedings of the 17th acm
conference on information and knowledge
management , cikm '08, pages 609{618, new york,
ny, usa, 2008. acm.
[6] r. buyya, j. broberg, and a. m. goscinski. cloud
computing principles and paradigms . wiley
publishing, 2011.
[7]f. chierichetti, r. kumar, p. raghavan, and t. sarlos.
are web users really markovian? in proceedings of the
21st international conference on world wide web ,
www '12, pages 609{618, new york, ny, usa, 2012.
acm.
[8] m. dumas, w. van der aalst, and a. ter hofstede.
process-aware information systems: bridging people
and software through process technology . wiley &
sons, 2005.
[9] r. gombotz, k. ba na, and s. dustdar. towards web
services interaction mining architecture for e-commerce
applications analysis. in proceedings of the conference
on e-business and e-learning , 1999.
[10] c. g unther and w. aalst. fuzzy mining: adaptive
process simplication based on multi-perspective
metrics. in g. alonso, p. dadam, and m. rosemann,
editors, international conference on business process
management (bpm 2007) , volume 4714 of lecture
notes in computer science , pages 328{343.
springer-verlag, berlin, 2007.
[11] m. haesen, k. luyten, and k. coninx. get your
requirements straight: storyboarding revisited. in
proceedings of the 12th ifip tc 13 international
conference on human-computer interaction: part ii ,
interact '09, pages 546{549, berlin, heidelberg,
2009. springer-verlag.
[12] m. jans, m. alles, and m. vasarhelyi. the case for
process mining in auditing: sources of value added and
areas of application. international journal of
accounting information systems , 14:1{20, 2012.
[13] a. kaushik. web analytics: an hour a day . sybex,
june 2007.
[14] d. lorenzoli, l. mariani, and m. pezz e. automatic
generation of software behavioral models. in
proceedings of the 30th international conference on
software engineering , icse '08, pages 501{510, new
york, ny, usa, 2008. acm.
[15]f. m. maggi, a. j. mooij, and w. m. p. van der aalst.
analyzing vessel behavior using process mining. in
situation awareness with systems of systems , pages
133{148. 2013.
[16] r. mans, m. schonenberg, m. song, w. aalst, and
p. bakker. process mining in healthcare: a case
study. in l. azevedo and a. londral, editors,proceedings of the international conference on health
informatics (healthinf'08) , pages 118{125.
institute for systems and technologies of information,
control and communication (insticc), 2008.
[17]l. maruster, n. r. faber, r. j. jorna, and r. j. f. van
haren. a process mining approach to analyse user
behaviour. in j. cordeiro, j. filipe, and s. hammoudi,
editors, webist (2) , pages 208{214. insticc press,
2008.
[18] s. miller. piwik web analytics essentials . community
experience distilled. packt publishing, limited, 2012.
[19] b. mobasher, r. cooley, and j. srivastava. automatic
personalization based on web usage mining. commun.
acm , 43(8):142{151, aug. 2000.
[20] b. plaza. google analytics for measuring website
performance. tourism management , 32(3):477 { 481,
2011.
[21]a. rebuge and d. r. ferreira. business process analysis
in healthcare environments: a methodology based on
process mining. inf. syst. , 37(2):99{116, apr. 2012.
[22] a. rozinat, i. de jong, c. g unther, and w. aalst.
process mining of test processes: a case study.
beta working paper series, wp 220, eindhoven
university of technology, eindhoven, 2007.
[23] m. sahlabadi, r. c. muniyandi, and z. shukur.
detecting abnormal behavior in social network websites
by using a process mining technique. journal of
computer science , 10:393{402, march 2014.
[24] b. shneiderman and c. plaisant. designing the user
interface: strategies for eective human-computer
interaction (4th edition) . pearson addison wesley,
2004.
[25] s. suriadi, m. t. wynn, c. ouyang, a. h. ter
hofstede, and n. van dijk. understanding process
behaviours in a large insurance company in australia :
a case study. in 25th international conference on
advanced information systems engineering, caise
2013, pages 449{464, valencia, spain, 2013. springer.
[26] k. n. truong, g. r. hayes, and g. d. abowd.
storyboarding: an empirical determination of best
practices and eective guidelines. in proceedings of the
6th conference on designing interactive systems , dis
'06, pages 12{21, new york, ny, usa, 2006. acm.
[27] w. van der aalst. process mining: discovery,
conformance and enhancement of business processes .
springer-verlag, berlin, 2011.
[28]w. van der aalst. process mining. communications of
the acm , 55(8):76{83, 2012.
[29] h. verbeek, j. buijs, b. van dongen, and w. van der
aalst. prom 6: the process mining toolkit. in m. l.
rosa, editor, proc. of bpm demonstration track 2010 ,
volume 615 of ceur workshop proceedings , pages
34{39, 2010.
[30] a. weijters, w. aalst, and a. medeiros. process
mining with the heuristics miner-algorithm. beta
working paper series, wp 166, eindhoven university
of technology, eindhoven, 2006.
[31] w.-s. yang and s.-y. hwang. a process-mining
framework for the detection of healthcare fraud and
abuse. expert systems with applications , 31(1):56 { 68,
2006.