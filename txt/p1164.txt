root cause analysis in process mining using structural
equation models
mahnaz sadat qafari and wil van der aalst
rheinisch-westf ¨alische technische hochschule aachen(rwth), aachen, germany
m.s.qafari@pads.rwth-aachen.de,wvdaalst@pads.rwth-aachen.de
abstract. process mining is a multi-purpose tool enabling organizations to mon-
itor and improve their processes. process mining assists organizations to enhance
their performance indicators by helping them to ﬁnd and amend the root causes
of performance or compliance problems. this task usually involves gathering
process data from the event log and then applying some data mining and machine
learning techniques. however, using the results of such techniques for process en-
hancement does not always lead to any process improvements. this phenomenon
is often caused by mixing up correlation and causation. in this paper, we present a
solution to this problem by creating causal equation models for processes, which
enables us to ﬁnd not only the features that cause the problem but also the e ect
of an intervention on any of the features. we have implemented this method as a
plug-in in prom and we have evaluated it using two real and synthetic event logs.
these experiments show the validity and e ectiveness of the proposed method.
keywords: process miningroot cause analysis causality inference.
1 introduction
one of the main purposes of using process mining is to enhance process performance
indicators leading to reduced costs and response times and better quality. to enhance
the performance of a process, we ﬁrst need to identify friction points in the process.
the second step is ﬁnding the root causes of each friction point and estimating the
possible e ect of changing each factor on the process. the ﬁnal step is planning pro-
cess enhancement actions and then re-engineering the process. while there are di erent
techniques that help to ﬁnd the friction points in processes, there is little work on root
cause analysis. so, the focus of this paper is on the second step.
the task of ﬁnding the root cause of a problem in a given process is quite intricate.
each process involves many steps and in each step, many factors may be of inﬂuence.
also, the steps or the order of the steps that are taken for each case may vary. another
obstacle arises when using a classiﬁer, which is basically designed for prediction and
not for interventions, for ﬁnding the root cause of the problem. by judging the causal
relationships among the features merely based on the ﬁndings of a classiﬁer, we may
fall into the trap of considering correlation as causation.
consider a scenario where in an online shop, some of the package deliveries get
delayed and there is a high correlation between the delayed orders and the resources
that were responsible for them. we can infer causal relationships based on the observed2 m. s. qafari et al.
correlations and declare these resources that were in charge of delivering those delayed
items as the reason for delays. however, there may be a non-causal correlation between
them. changing the process based on an observed correlation may aggravate the prob-
lem (or create new problems). two correlated events may have a confounder, i.e., a
common unmeasured (hidden) cause. in this scenario, the delayed cases are related to
the packages with a bigger size which are usually assigned to speciﬁc resources.
two general frameworks for ﬁnding the causes of a problem and anticipating the
eect of any intervention on the process are random experiments and the theory of
causality [10, 11]. applying random experiments, i.e., randomly setting the values of
those features that have a causal e ect on the problem of interest and monitoring their
eect, is usually too expensive (and sometimes unethical) or simply impossible. the
other option is modeling the causal relationships between di erent features of the pro-
cess using a structural causal model [10, 11] and then studying the e ect of changes
imposed on each process feature on the process indicators.
fig. 1. the general structural causal equation discovery.
in this paper, we propose a framework based on the second approach for root cause
analysis, which includes several steps. first, the event log is enriched by several process-
related features derived from di erent data sources like the event log, the process model,
and the conformance checking results. then, depending on the identiﬁed problem and
features that have a possible direct or indirect causal e ect on it, a speciﬁc data table,
which we call it situation feature table , is created. in the next step, a graph encoding the
structure of causal relationships among the process features is provided by the customer.
the other option for creating such a graph is using a causal structure learning algorithm,
also called search algorithm , on the data. the resulting graph can be modiﬁed by adding
domain knowledge as an input to the search algorithm or by modifying the discovered
graph. finally, the strength of each causal relationship and the e ect of an intervention
on any of the process features on the identiﬁed problem are estimated. the general
overview of the proposed approach is shown in figure 1.root cause analysis in process mining using structural equation models 3
2 motivating example
consider an it company, that implements software for its customers, but does not main-
tain the implemented software after it has been released. the petri-net model of this
company is depicted in figure 2. each trace, which is corresponding to the process of
implementation of one project, has an associated attribute priority , indicating how ur-
gent the software is for the customer. the manager of the company is concerned about
the duration of the implementation phase of projects. by implementation phase , we
mean the sub-model including two transitions “development” and “test” (marked with
a blue rectangle in figure 2). for simplicity, we use the abbreviations mentioned in
table 1 in this paper.
the manager believes that p,nt, and pbd are the process features that might
have a causal e ect on ipd. the question is which features have a causal e ect on
ipd and to what extent . also, the manager needs to know what is the e ect of an
intervention on any of the features on ipd. mentioned questions are valid ones to be
asked before planning for re-engineering and enhancing a process. also, we consider c
(thecomplexity of a project) as a feature that is not recorded in the event log and may
have a causal e ect on ipd. the answers to such questions are highly inﬂuenced by the
fig. 2. the process of it company described in section 2.
list of abbreviations
fsfeasibility study cid case id bcbusiness case development rel release
pbproduct backlog dev development ntnumber of employees in team t etest
dddevelopment duration t dtest duration pbd product backlog duration ppriority
tcteam charter ccomplexity ipd implementation phase duration
table 1. the list of abbreviations based on it example, section 2.
structure of the causal relationship among the features. some of the possible structures
are depicted in figure 3. according to 3.a), the high correlation between ipd andpbd
is not a causation. so, changing pbd does not have any e ect on ipd. according to
3.b), one may conclude that all p,pbd , and ntplay a role in the determination of the
value of ipd and by changing each of these three features, one can inﬂuence the value
ofipd. according to 3.c), the existence of a hidden feature in the model, captured by c
(and depicted by the gray dashed oval in the model), has been considered that causally
inﬂuences both ipd andpbd . so, their signiﬁcant correlation relationship is due to4 m. s. qafari et al.
fig. 3. three possible causal structures.
having a common cause. if this is the case, then forcing pbactivity to take a shorter or
longer amount of time does not have any e ect on the value of ipd.
it is worth noting that it is not possible to intervene on all the features. for exam-
ple, the manager can assign more or fewer people to a project; but he cannot change
the complexity of a project. so, it is possible to intervene on nt, but not on c. just
using common sense and domain knowledge we can judge whether a feature can be
intervened.
the remainder of the paper is organized as follows. in section 3, we brieﬂy present
some related work. in section 4, an overview of the problem and the proposed approach
is presented. the details and assumptions of the implemented plugin and the experi-
mental results of applying it on synthetic and real event logs are presented in section 5.
finally, in section 6, we summarize our approach and its applications.
3 related work
the main approaches in process mining to ﬁnd the root causes of a performance or
compliance problem are classiﬁcation [4, 6], and rule mining [13]. although the the-
ory of causality has been studied deeply [11] and its methods have been successfully
applied on a variety of domains (e.g. [7, 18]), their application in the area of process
mining is limited. however, there are some works in this ﬁeld that use causality theory.
for example, in [5] an approach based on time-series analysis has been proposed for
discovering causal relationships between a range of business process characteristics and
process performance indicators. the idea is to look at the performance indicators val-
ues as time-series, and investigating the causality relationship between them using the
granger causality test [3]. the problem with this approach is that the granger test can
only ﬁnd predictive causality which might not be a true cause-and-e ect relationship.
in [8], a methodology for structural causal model discovery in the area of process
mining has been proposed. they propose discovering structural causal models using the
event log and the bpmn model of a process. one of the assumptions in this work is
that the bpmn model is an accurate model of a process, which is not always the case.
4 approach
in the proposed method, we assume that we already know that a problem, such as a
bottleneck or deviation, exists in the process. several features may have a causal e ectroot cause analysis in process mining using structural equation models 5
on the problem, which some of them may not exist in the event log. as the ﬁrst step, the
event log is enriched by adding some new derived features computed from the event log
or possibly other sources. the derived features can be related to any of the process per-
spectives; the time perspective, the data ﬂow-perspective, the control-ﬂow perspective,
the conformance perspective, or the resource /organization perspective of the process.
the enriched event log is then used for creating the situation feature table. finally, we
discover the structural equation model (sem) of the situation features using the situa-
tion feature table. in the sequel, we explain the details of situation feature table creation
and sem inference. but ﬁrst, we need to deﬁne an (enriched) event log.
an event log is a collection of traces where each trace itself is a collection of events.
letuactbe the universe of all activity names ,utimethe universe of all time stamps ,uatt
the universe of all attribute names , anduvalthe universe of all values . also, consider
umap=uatt67!u valanddom :uatt7!p(uval)1, the function that returns the set of all
possible values of a given attribute name. we deﬁne an event log as follows:
deﬁnition 1 (event log). each element ofuactu timeu mapis an event andeis the
universe of all possible events. let act(e)=a,time(e)=t, andmap(e)=m for a given
event e =(a;t;m)2e. each element of p(umape+)is called an event log wheree+
is the set of all non empty sequences of events such that for each he1;:::; eni2e+we
have81i<jntime(ei)time(ej). the universe of all possible logs is denoted by land
each element (m;e)of an event log is called a trace .
we assume that in a given log leach event has a unique time stamp. also, given e=
he1;:::; eni2e+, we deﬁne tail(e)=en,prfx(e)=fhe1;:::; eiij1ingwhich is the
set of all the nonempty preﬁxes of e, and set(e)=fe1;:::; eng.
4.1 situation feature table creation
an observed problem in the process might be related to either a trace or a speciﬁc
activity. we assume that, given a problem, in each trace only that part of the data that
has been recorded before the occurrence of the problem can have a causal e ect on
it. so the relevant part of a trace to a given problem is a preﬁx of it which we call a
situation . more formally, a situation is an element of umape+and we useusfto
denote the universe of all possible situations. given an event log l2 l, we deﬁne
the set of all situations of lassl=s
(m;e)2lf(m;e0)je02prfx(e)g. considering
actnames las the set of the activity names of all the events that appear in the traces of
l, we deﬁne an a-based situation subset oflassl;a=f(m;e)2sljact(tail(e))=ag,
where a2actnames landtrace-based situation subset oflassl;?=l.
there are two types of attributes in a given event log, attributes linked to the traces
and attributes linked to the events. when extracting the data from event log, we need
to distinguish these two levels of attributes. for that, we use situation feature function
which is deﬁned over the situations and is identiﬁed by an activity, a(possibly a=?),
and an attribute, at. ifa=?,sfa;at((m;e)) returns the value of atin trace level (i.e.
m(at)). however, if a,?, then sfa;at(s) returns the value of atine2set(e) with the
maximum time stamp for which act(e)=a. more formally:
1we deﬁne p(a) as the set of all non-empty subsets of set a.6 m. s. qafari et al.
deﬁnition 2 (situation feature). let l2l, a2actnames l[f?g , and at2u att. we
deﬁne a situation feature as sfa;at:usit67!u val. given (m;e)2l, we deﬁne,
sfa;at((m;e))=8>><>>:m(at) a=?
map(arg maxe2fe2set(e)jact(e)=agtime(e))(at)a2actnames l:
we denote the universe of all possible situation features by usf. with slight abuse of
notation, we deﬁne dom (sfa;at)=dom(at). also, for a given n 2n,sf2 un
sfis a
situation feature extraction plan of size n, whereun
sfis deﬁned asusfu sf|             {z             }
n times.
we can interpret a situation feature extraction plan as the schema composed of those
situation features that are relevant to the given problem in the process. in the sequel, we
call the situation feature that captured the existence of the problem (or represents the
quantity or quality of interest) in the process the class situation feature and denote it as
csf. moreover, in case of no ambiguity, we remove the subscripts of situation features
to increase readability.
now, we can concretely specify the problem in the process and the set of situation
features that we need to investigate their causal e ect on the occurrence of the problem.
deﬁnition 3 (causal situation speciﬁcation). a causal situation speciﬁcation is a
tuple css =(sf;csf)in which sf=(sf1;:::; sfn)2un
sffor some n2n, csf2u sf,
and csf<set(sf)where with slight abuse of notation set (sf)=fsf1;:::; sfng.
here, sfis the tuple that includes all of the situation features that we expect them to
have a potential causal e ect on the class situation feature. here, we assume that there
is no hidden common confounder exists any subset of situation features in set(sf)[
fcsfg. using the causal situation speciﬁcation, we can deﬁne a situation feature table as
follows:
deﬁnition 4 (situation feature table). given an event log l 2l and a causal sit-
uation speciﬁcation css =(sf;csf), where sf=(sf1;:::; sfn)and csf =sfa;at, a
situation feature table is a multi-set which is deﬁned as:
tcss;l=[(sf1(s);:::; sfn(s);csf(s))js2sl;a^csf(s),?]:
we call t css;lasituation feature table of l.
4.2 sem inference
given a log l, if we consider a trace or activity based situation subset of las a sample
and each situation feature as a random variable, then we can deﬁne a structural equation
model for a given causal structure speciﬁcation as follows2:
deﬁnition 5 (structural equation model (sem)). given css =(sf;csf), a struc-
tural equation model is deﬁned as a collection of assignments s=fssf1;:::; ssfn;scsfg
such that
ssf:sf=fsf(pasf;nsf);sf2set(sf)[fcsfg;
2deﬁnition 5 and 8 are based on [11].root cause analysis in process mining using structural equation models 7
where pasfset(sf)[fcsfgnfsfgis called parents of sf and and n sf1;:::; nsfn;ncsfare
distributions of the noise variables, which we require to be jointly independent.
note that these equations are not normal equations but a way to determine how to
generate the observational and the interventional distributions. the set of parents of
a situation feature is the set of situation features that have a direct causal e ect on it.
the structure of the causal relationships between the situation features in a sem can
be encoded as a directed acyclic directed g=(v;) which is called a causal structure .
in this graph, v=set(sf)[fcsfg,=f(sf1;sf2)2vvjsf12pa(sf2)g.
the ﬁrst step of inferring a sem is discovering its causal structure and the second
step is estimating a set of equations describing how each situation feature is inﬂuenced
by its immediate causes. in the sequel, we describe these two steps.
causal structure discovery. the causal structure can be determined by an expert who
possesses the domain knowledge about the underlying process and the causal relation-
ships between its features. but having access to such knowledge is quite rare. hence,
we support discovering the causal structure in a data driven manner.
several search algorithms have been proposed in the literature (e.g., [2, 15, 9]). the
input of a search algorithm is observational data in the form of a situation feature table
(and possibly knowledge) and its output is a graphical object that represents a set of
causal structures that cannot be distinguished by the algorithm. one of these graphical
objects is partial ancestral graph (pag) introduced in [19].
a pag is a graph whose vertex set is v=set(sf)[fcsfgbut has di erent edge
types, including!;$;!;3. each edge type has a speciﬁc meaning. let sf1;sf22
v.sf1!sf2indicates that sf1is a direct cause of sf2,sf1$sf2means that neither sf1
norsf2is an ancestor of the other one, even though they are probabalistically dependent
(i.e., sf1andsf2are both caused by one or more hidden confounders), sf1!sf2means
sf2is not a direct cause of sf1, and sf1sf2indicates that there is a relationship
between sf1andsf2, but nothing is known about its direction. the formal deﬁnition of
a pag is as follows [19]:
deﬁnition 6 (partial ancestral graph (pag)). a pag is a tuple (v;!;$;!;)
in which v=set(sf)[fcsfgand!;$;!;vvsuch that!,$,!, and
are mutually disjoint. moreover, there is at most one edge between every pair of
situation features in v.
the discovered pag by the search algorithm represents a class of causal structures
that satisﬁes the conditional independence relationships discovered in the situation table
and ideally, includes the true causal structure of the causal situation speciﬁcation. now,
it is needed to modify the discovered pag to a compatible causal structure. as we
assume no hidden common confounder exists, we expect that in the pag, relation $be
empty4. we can deﬁne the compatibility of a causal structure with a pag as follows:
deﬁnition 7 (compatibility of a causal structure with a given pag). given a pag
(v;!;$;!;)in which$=;, we say a causal structure (u;)is compatible with
3we usually use abinstead of ( a;b)2for2f!;$;!;g[fg.
4if$,;, the user can restart the procedure after adding some more situation features to the
causal situation speciﬁcation.8 m. s. qafari et al.
the given pag if v=u,(sf1!sf2_sf1!sf2)=)sf1sf2, and sf1sf2=)
(sf1sf2sf2sf1), where sf1;sf22v.
to transform the output pag to a compatible causal structure, which represents the
causal structure of the situation features in the situation feature speciﬁcation, domain
knowledge of the process and common sense can be used. these information can be
use to directly modify the discovered pag or by adding them to the search algorithm,
as an input, in the form of required directions orforbidden directions denoted as dreq
anddf rb, respectively. dreq;df rbvvanddreq\df rb=;. if ( sf1;sf2)2dreq
then sf1!sf2orsf1!sf2in the output pag. however, if ( sf1;sf2)2df rb, then in the
discovered pag it should not be the case that sf1!sf2.
causal strength estimation. the ﬁnal step of discovering the causal model is estimat-
ing the strength of each direct causal e ect using the observed data. suppose gis the
causal structure of a causal situation speciﬁcation cs s =(sf;csf). asgis a directed
acyclic graph, we can sort its nodes in a topological order . now, we can statistically
model each situation feature sf2as a function of the noise terms nsf1of the situation
features sf1for which(sf1)(sf2), where sf1;sf22set(sf)[fcsfg. the result is
sf2=f2 (nsf1)sf1:(sf1)(sf2)[11]. the set of these functions, for all sf2set(sf)[fcsfg,
is the sem of cs s =(sf;csf).
finally, we want to answer questions about the e ect of an intervention on any of the
situation features on the class situation feature. here we focus on atomic interventions
which are deﬁned as follows:
deﬁnition 8 (atomic intervention). given an sems, an intervention is obtained by
replacing s sf2snf scsfgby sf =c where c2r.
note that the corresponding causal structure of an sem after intervention on sfis ob-
tained from the original causal structure of mby removing all the incoming edges to
sf[11]. when we intervene on a situation feature, we just replace the equation of that
situation feature in the sem and the others do not change as causal relationships are
autonomous under interventions [11].
if in a given causal structure of a causal situation speciﬁcation cs s =(sf;csf),
there is no directed path between sf2set(sf) and csf, they are independent and con-
sequently, intervening on sfby forcing sf=chas no e ect on csf. otherwise, we need
to estimate the e ect of that intervention on the class situation feature which is the
function estimating (the distribution of) csfcondition on sf=c, while controlling for
situation features in pasf.
5 experimental results
to validate the proposed approach, we implemented it as a plugin in prom [16], an
open-source and extensible platform for process mining. the implemented plugin takes
the event log, the petri-net model of the process, and, the conformance checking results
of replaying the given event log on the given model as input. the implemented plugin
is available in the nightly-build of prom under the name causality inference in process
mining . in the following, we brieﬂy mention some of the implementation details and
the results of applying the plugin on both synthetic and real event logs.root cause analysis in process mining using structural equation models 9
5.1 implementation notes
as the search algorithm, we use the greedy fast causal inference (gfci) algorithm
[9]. gfci is a hybrid search algorithm where its inputs are the situation feature table
and possibly background knowledge and its output is a pag with the highest score on
the input data. in [9], it has been shown that if the assumptions mentioned in section
4.2 hold, then under the large sample limit each edge in the pag computed by gfci is
correct. also, using empirical results on simulated data, it has been shown that gfci
has the highest accuracy among several other search algorithms [9]. in this plugin, we
use the tetrad [14] implementation of the gfci algorithm. in the experiments, we use
the following settings for the gfci algorithm: cuto for p-values =0.05, maximum
path length =-1, maximum degree =-1, and penalty discount =2.
for estimating the e ect of an intervention on the class situation feature, in the case
of continuous data, we assume linear dependencies among the situation features and
additive noise. we can represent the sem graphically by considering the coe cient of
sf1inssf2as the weight of the edge from sf1tosf2in its corresponding causal structure.
thus, to estimate the magnitude of the e ect of sfon the csf, it is enough to sum the
multiplication of the weights of the edges for each directed path from sftocsf.
5.2 synthetic data
we have created the petri-net model of the process described in section 2 using cpn
tools [12] and generate an event log with 1000 traces. the log is enriched by adding
ipd as a derived trace level attribute that indicates the duration of the sub-model in-
cluding dev andt etransitions in person-day. we generate the log with the following
settings:sf?;c=nsf?;cnsf?;cuni f orm (1;10)
sfbc;p=nsfbc;pnsfbc;puni f orm (1;3)
sfpb;pbd=10sf?;c+nsfpb;pbdnsfpb;pbduni f orm ( 2;4)
sft d;nt=5sf?;c+3sfbc;p+nsft d;ntnsft d;ntuni f orm ( 1;2)
sf?;ipd=50sf?;c+5sft d;nt+nsf?;ipdnsf?;ipduni f orm (10;20)
then, we use the proposed approach for cs s =((sf?;p;sfpb;pbd;sftc;t n);sf?;ipd). the
discovered causal structure is as depicted in figure 4.a. this causal structure does not
say much about the direction of discovered potential causal relationships. regarding the
types of edges, we can guess that there might be another inﬂuential attribute that acts
as a hidden common cause. if we consider sf?;cas one of the independent situation
features, then the discovered causal structure is the one depicted in figure 4.b, which
is more accurate. if the complexity of a project is not recorded in the event log, we
can assume that the pbtakes longer in more complex projects and compute it as the
ﬂoor of the value of pbd divided by 10. now, using domain knowledge, we can turn
this pag to the one depicted in figure 4.c. by doing the estimation, the sem shown in
figure 4.d is obtained. by comparing the estimated coe cients of situation features in
figure 4.d (the weights of edges), and those in the mentioned equations, it is clear the
estimated and real strengths of causal relationships are quite close which proves that the
implemented plugin is capable of discovering the true sem.
now, if we want to see how each situation feature a ects the class situation fea-
ture, we just need to click on its corresponding node in the causal structure to see10 m. s. qafari et al.
the estimated interventional e ect. suppose c1is a constants. for example, we have
sf?;ipd=75:0004sf?;c+c1sft d;nt+noise which means that if we could enforce
the complexity of the projects to be one unit more complex, then the implementation
phase will take approximately 75 more person-days. the other estimated interventional
eect is sf?;ipd=0:0sfpb;pbdthat means intervention on sfpb;pbdhas no e ect on
sf?;ipd.
fig. 4. a) the pag of causal situation speciﬁcation of section 5.2, discovered by the imple-
mented plugin. using this pag, we can guess that there are other inﬂuential situation features
not recorded in the data. b) the resulting pag after considering sf?;cas one of the inﬂuential
situation features, c) the causal structure obtained by modifying the previous one using common
sense and domain knowledge. d) the causal structure model generated by doing estimation on
the strength of each discovered causal relationship.
5.3 real data
for the real data, we use receipt phase of an environmental permit application process
(wabo) coselog project [1] event log (receipt log for short), which includes 1434
traces and 8577 activities. as a problem, we consider the delay in some of the cases
where the threshold for the delay is set to 3% of the maximum duration of all traces.
note that the average trace duration in this event log is about 2% of the maximum
duration of its traces. so, the class situation feature is sf?;delay. here, we want to in-
vestigate the e ect of three situation features indicating the choice of recourse working
on three activities “conﬁrmation of receipt” denoted as con f , “t02 check conﬁrma-
tion of receipt” denoted as t02, and “t04 determine conﬁrmation of receipt” denoted
ast04, on sf?;delay. thus, the causal situation speciﬁcation that we are interested in is
cs s =((sfcon f;resource;sft02;resource;sft04;resource );sf?;delay). note that using the chi-
square test, there is a high correlation between every pair of situation features.
the output of applying the implemented plugin on the created situation feature table
for this problem is shown in figure 5.a). using the temporal ordering of the activities
(in this process, con f happens before t02, and t02 happens before t04 in all the
traces) and common sense (the choice of the resource of an activity has no e ect on
the choice of the resource of another activity that happened before) we can infer thatroot cause analysis in process mining using structural equation models 11
fig. 5. a) the pag of causal situation speciﬁcation of receipt event log example in section 5.3,
discovered by the implemented plugin. b) the causal structure obtained by modifying the previ-
ous one using common sense and domain knowledge.
the true causal structure is the one shown in figure 5.b). this causal structure indicates
thatsfcon f;resource has a causal e ect on sf?;delayand there is no causal relationship be-
tween sft02;resource andsf?;delayand also between sft04;resource andsf?;delay. moreover,
it indicates that the choice of sft02;resource is inﬂuenced by sfcon f;resource . by doing the
estimation and clicking on each node of the graph we can see the interventional distri-
butions of sf?;delaycaused by intervention on the corresponding situation feature of that
node. for example, we can see that the the probability of sf?;delay=delayed under an
intervention which enforce sfcon f;resource =resource 14 is almost 0.159.
6 conclusion
if an organization has performance and /or conformance problems, then it is vital to un-
cover the causes of these problems and the strength of their e ect. it is also needed to
investigate the e ect of an intervention on the process. this information is essential to
design and order the process enhancement and re-engineering steps. this is a very fun-
damental and inﬂuential step toward process enhancement. process interventions based
on correlations that are not causalities may lead to more problems. by using the frame-
work proposed in this paper, the stakeholders can incorporate both domain knowledge
and potential statistically supported causal e ects to ﬁnd the sem of the features and
indicators of the process. using sem in this framework enables us to estimate to what
extent each feature contributes to the given problem using the observational data.
as mentioned in section 4.2, the search algorithm assumes strong assumptions such
as the independence and identically distribution of situations. one of the main draw-
backs of applying this framework is that the features of di erent traces are not indepen-
dent. future research aims to address these limitations.
acknowledgement
we thank the alexander von humboldt (avh) stiftung for supporting our research.
references
1. buijs, j.: receipt phase of an environmental permit application process (‘wabo’), coselog
project. eindhoven university of technology (2014)12 m. s. qafari et al.
2. chickering, d.m.: optimal structure identiﬁcation with greedy search. journal of machine
learning research 3(nov), 507–554 (2002)
3. granger, c.w.: some recent development in a concept of causality. journal of econometrics
39(1-2), 199–211 (1988)
4. gupta, n., anand, k., sureka, a.: pariket: mining business process logs for root cause
analysis of anomalous incidents. in: proceedings of databases in networked informa-
tion systems - 10th international workshop. vol. 8999, pp. 244–263. springer (2015).
https: //doi.org /10.1007 /978-3-319-16313-0 19
5. hompes, b.f.a., maaradji, a., rosa, m.l., dumas, m., buijs, j.c.a.m., van der aalst,
w.m.p.: discovering causal factors explaining business process performance variation. in:
proceedings of advanced information systems engineering. vol. 10253, pp. 177–192.
springer (2017). https: //doi.org /10.1007 /978-3-319-59536-8 12
6. de leoni, m., van der aalst, w.m., dees, m.: a general process mining framework for cor-
relating, predicting and clustering dynamic behavior based on event logs. inf. syst. 56(c),
235–257 (2016). https: //doi.org /10.1016 /j.is.2015.07.003
7. mothilal, r.k., sharma, a., tan, c.: explaining machine learning classiﬁers through diverse
counterfactual explanations. in: proceedings of the 2020 conference on fairness, account-
ability, and transparency. pp. 607–617 (2020), http: //arxiv.org /abs/1905.07697
8. narendra, t., agarwal, p., gupta, m., dechu, s.: counterfactual reasoning for process opti-
mization using structural causal models. in: proceedings of business process management
forum. vol. 360, pp. 91–106. springer (2019). https: //doi.org /10.1007 /978-3-030-26643-1 6
9. ogarrio, j.m., spirtes, p., ramsey, j.: a hybrid causal search algorithm for latent variable
models. in: proceedings of probabilistic graphical models - eighth international confer-
ence. pp. 368–379 (2016), http: //proceedings.mlr.press /v52/ogarrio16.html
10. pearl, j.: causality. cambridge university press (2009)
11. peters, j., janzing, d., sch ¨olkopf, b.: elements of causal inference: foundations and learning
algorithms. mit press (2017)
12. ratzer, a.v ., wells, l., lassen, h.m., laursen, m., qvortrup, j.f., stissing, m.s., west-
ergaard, m., christensen, s., jensen, k.: cpn tools for editing, simulating, and analysing
coloured petri nets. in: proceedings of applications and theory of petri nets. vol. 2679, pp.
450–462. springer (2003). https: //doi.org /10.1007 /3-540-44919-1 28
13. sani, m.f., van der aalst, w.m.p., bolt, a., garc ´ıa-algarra, j.: subgroup discovery in
process mining. in: proceedings of business information systems. pp. 237–252. springer
(2017). https: //doi.org /10.1007 /978-3-319-59336-4 17
14. scheines, r., spirtes, p., glymour, c., meek, c., richardson, t.: the tetrad project: con-
straint based aids to causal model speciﬁcation. multivariate behavioral research 33(1),
65–117 (1998)
15. spirtes, p., glymour, c.n., scheines, r., heckerman, d.: causation, prediction, and search.
mit press (2000)
16. verbeek, h., buijs, j., van dongen, b., van der aalst, w.m.: prom 6: the process mining
toolkit. proc. of bpm demonstration track 615, 34–39 (2010)
17. verenich, i., dumas, m., la rosa, m., nguyen, h.: predicting process performance: a white-
box approach based on process models. journal of software: evolution and process 31(6),
e2170 (2019)
18. wang, y ., liang, d., charlin, l., blei, d.m.: the deconfounded recommender:
a causal inference approach to recommendation. corr abs /1808.06581 (2018),
http://arxiv.org /abs/1808.06581
19. zhang, j.: on the completeness of orientation rules for causal discovery in the pres-
ence of latent confounders and selection bias. artif. intell. 172(16-17), 1873–1896 (2008).
https: //doi.org /10.1016 /j.artint.2008.08.001