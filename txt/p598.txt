business trend analysis by simulation
helen schonenberg, jingxian jian, natalia sidorova, and wil van der aalst
eindhoven university of technology,
department of mathematics & computer science,
den dolech 2, 5600 mb eindhoven, the netherlands
fm.h.schonenberg, n.sidorova, w.m.p.v.d.aalst g@tue.nl
abstract. business processes are constantly aected by the environ-
ment in which they execute. the environment can change due to sea-
sonal and nancial trends. for organisations it is crucial to understand
their processes and to be able to estimate the eects of these trends on
the processes. business process simulation is a way to investigate the
performance of a business process and to analyse the process response
to injected trends. however, existing simulation approaches assume a
steady state situation. until now correlations and dependencies in the
process have not been considered in simulation models, which can lead
to wrong estimations of the performance. in this work we dene an adap-
tive simulation model with a history-dependent mechanism that can be
used to propagate changes in the environment through the model. in ad-
dition we focus on the detection of dependencies in the process based on
the executions of the past. we demonstrate the application of adaptive
simulation models by means of an experiment.
1 introduction
business processes are often the result of a t between the needs and capabilities
of the internal stakeholders of the business and the opportunities and threats
the business identies in its environment [14]. the environment in which these
processes operate is typically unstable and business processes should be robust
enough to cope with a variable and changing environment. the behaviour of the
environment can be subject to seasonal or nancial trends, such as customers not
booking expensive holidays due to nancial crisis. the most interesting question
from the business point of view is: \how will these trends aect the performance
of my business process?" .
this paper aims at detecting dependencies in the business process that can
be used to accurately analyse the eects of environmental trends on the busi-
ness process performance. nowadays, most business processes are supported by
information systems that store information about the process execution in logs.
we can use this historical information to estimate the eect of trends on busi-
ness process performance and to help organisations with obtaining insight in
questions such as: \do we have enough resources available to execute the process
during the holiday season?" .real-life business processes usually contain many execution alternatives due
to choices, parallelism, iterations and (data) dependencies in the process. for
example the choice the environment makes in some part of the process might
be correlated with a choice that the environment made earlier in the process,
i.e. a customer who books an expensive mean of transportation is more likely
to book more expensive hotels. performance analysis of such systems by using
analytical models is often intractable and simulation is used instead. for accurate
simulation, i.e. simulation that is close to reality, it is of crucial importance to
capture the real behaviour of the process. it is not sucient to only include the
actual execution alternatives in the simulation model to analyse performance,
also information about decisions, costs, resources and stochastic aspects of the
behaviour need to be included [17].
in most simulation tools for business process management, simulation param-
eters, like activity cost, duration and probability, are variables that are assumed
to be independent, which is often not the case. incorrect assumptions about
correlations and dependencies can lead to over or underestimation of the out-
come [9, 12, 18]. in this paper we show how dependencies are mined from a log
of a business process and how they are incorporated into the simulation model.
our approach is to create an adaptive simulation model with parameters that
adapt according to the information obtained by the simulation steps executed
so far (history-dependency), based on the dependencies found in the log.
an adaptive simulation model is created from two components. the rst com-
ponent is the control ow model that can be either given (predened models)
or mined from the log using standard process mining techniques [2]. the second
component consists of information about the simulation parameters. again, the
parameters can be predened or the log can be used to determine the param-
eters. in this paper we focus on the latter case, where we consider the simula-
tion parameters as random variables that we are going to estimate on the log.
both components are integrated into an adaptive simulation model by a history-
dependent mechanism, that, for each instance, estimates the parameters on the
(partial) simulation trace of that instance.
the outline of the paper is as follows. first we give some preliminaries in
section 2. in section 3 we describe the adaptive simulation model. in prac-
tice abstractions will be needed to detect dependencies and section 4 gives an
overview of some elementary abstractions and shows how they can be combined.
section 5 illustrates the use of adaptive simulation models in the experimental
setting. related work will be presented in section 6. finally, we conclude the
paper in section 7.
2 preliminaries
ndenotes the set of natural numbers. a bag (or multiset) over some set s
is a mappingb:s!nthat maps each element to the number of times it
occurs. the size of a bag jbjis the total number of elements in the bag including
duplicates. [ a2;b4;c] represents the bag with b(a) = 2;b(b) = 4;b(c) = 1 andb(d) = 0, where a;b;c;d2sandj[a2;b4;c]j= 7. the bag where all elements
occur exactly once corresponds to a set. a sequence of length nover elements
of setsis a mapping 2f1;:::;ng!s. we denote the empty sequence by
and non-empty sequences by listing their elements, e.g. =he1;e2;:::;eni,
whereei=(i) for 1in. the size of a sequence jjcorresponds to the
length of the sequence. "sis the projection of onto elements of set s, e.g.
ha;b;e;a;b;ci"fa;cg=ha;a;ci. the set of all sequences over s is denoted as
s, the set of all sets over sas 2sand the set of all bags over sasns. the
parikh vector parikh ()2b(s) denotes the number of occurrences of element s
in a sequence , i.e. fors2s:parikh ()(s) =j"fsgj. the set:s!2sis
a function that transforms a sequence over sto a set ofs, i.e. set() =faja2
g. functions can be composed by function composition. let f:a!band
g:b!c, thengf:a!c, such that8x2a: (gf)(x) =g(f(x)).
current information systems log their activities (process steps) occurring in
the context of the business processes they support. we assume that events in
the log are uniquely associated with the activities in the process.
denition 1 (event). letebe the universe of events, i.e. the set of all possible
event identiers. events are executed in the context of an instance of a process.
letibe the universe of process instance identiers. we assume there is a func-
tionpid:e!i that maps each event to its process instance. events can have
additional parameters such as activity name, time stamp, executing resource and
data attributes. we use vto denote the universe of values for a parameter .
for each parameter we assume there exists a function that maps an event to
its parameter value, i.e. :e!v, e.g.cost:e!z.
events are linked (by pid) to a particular instance (or case) of a process. a
log is basically a sequence over events from which event traces can be derived:
a trace is an ordered sequence of events belonging to the same process instance
where time is non-decreasing.
denition 2 (event trace). an event trace is sequence of events 2e, such
that each event belongs to the same process instance, appears only once in the
sequence and time is non-decreasing, i.e., is such that for 1i < jjj:
pid((i)) =pid((j)),(i)6=(j)andtime((i))time((j)). the universe
of all event traces over eis denoted aste.
in absence of time stamps, we assume events are ordered by their occurrence
in the log, i.e. time((i)) =i.
denition 3 (event log). an event log (in the remainder referred to as log)
is a set over event traces, formally lte, such that each event occurs in at
most one trace.81;22l:set(1)\set(2) =;or1=2.
3 adaptive simulation model
in this section we will elaborate on the denition of an adaptive simulation model
that supports the (re-)estimation (adaptation) of simulation parameters during
execution.reg
coachflight
cheap
hotelexp
hotel
avg
hotel
no
pickuppickupbook
more
confirmno
install
mentinstall
ment
no giftgiftfinish
create pdf files without this message by purchasing novapdf printer (http://www.novapdf.com)fig. 1. the travel agency process.
as running example, we consider a simple travel agency process where cus-
tomers can compose a trip by booking a ight or coach transport, and a hotel
(luxury, middle class or budget), for one or more days. the trip can be com-
posed of multiple transport-hotel combinations. for each hotel stay customers
can make use of a pickup service that transports them to the city centre or the
airport. clients may choose to pay their holidays by installment. in addition cus-
tomers who spend much money are rewarded with a gift. a good estimation for
the number of pickups is necessary for arranging a suitable contract with one of
the local taxi companies. the agency would also like to estimate the number gifts
to be purchased. early market research indicates a trend towards a decreasing
budget for clients. the agency has disposal of a log containing information about
customers of the past years. how will the expected trend aect the number of
pickups and gifts for the next year?
figure 1 depicts the control ow for the travel agency. it contains all typical
routing constructs such as sequentiality, parallelism, iteration, synchronisation,
deterministic and non-deterministic choices of the environment. for meaningful
analysis parameters (e.g. activity durations and probabilities) should be added
to the control ow that reect the real execution of the process. moreover, for
accurate simulation, we need to incorporate existing execution dependencies into
the model. we use the log of the process that contains past executions to detect
dependencies and to estimate the simulation parameters.
static models cannot capture correlations between the parameters, such as
a decreasing probability to choose going on with booking after every iteration,
or a correlation between the choice of transportation and the hotel class. this
results in inaccuracies of the analysis, e.g. the estimation of the number of gifts
that should be ordered.
in adaptive simulation models, we incorporate dependencies into the model.
this allows simulation parameters to be updated during the simulation execu-
tion by considering the predictors that inuence the parameter value and some
equation describing how the simulation parameter changes in terms of the val-
ues of the predictors, e.g. the probability for booking an expensive hotel for
customers who booked a ight is 60%, and for those who chose a coach it is
10%. historical execution data, captured in a log, is used to nd an equation
that predicts the parameter value based on the value the predictor chosen for thisparameter. during the simulation, predictor values are derived from the trace of
the running simulation instance, e.g. ight is the transportation type booked for
some instance. the equations to determine the values of simulation parameters
and the equations for deriving predictor values from the (prex) of the simula-
tion trace are included in the model. note that each parameter can depend on
multiple predictors and dierent parameters can have dierent predictors.
note that predictors are not simply case variables that are dened by the
designer of the process, nor are correlations the decision rules for the process.
for example, the duration of an activity is the time that is actually needed for
its execution rather than a predened value. dierent resources might need dif-
ferent time periods to execute the activity, which is also not something typically
predened.
in the remainder of this section we represent steps of the business process
as activities in the simulation model, e.g. a (coloured) petri net or any other
formalism with clear execution semantics that allow for simulation. activities
can be associated to parameters such as cost, duration and execution probability.
denition 4 (model parameters). letabe the universe of activities. the
set of activities in model mis denoted as am, whereama . activities can
have additional parameters and we use mto denote the parameters of model
m. the domain of parameter values of mis denoted asv. the values for the
parameters of the model are stochastical values that we estimate based on a log
(l) of some process associated to m.
one can annotate the model with xed values for each simulation parameter,
following e.g. the approach proposed in [17].
denition 5 (annotated static model). letmbe a model describing the
relation between the set of activities aa. the static annotated version of m
is described byms= (m;vals)where val s:m!vis a function that maps
parameters to parameter values.
parameters are mapped to the average value of this parameter in the log. the
values of the static model are xed, regardless the current simulation instance.
in adaptive models we assume that the values of simulation parameters de-
pend on the state of the instance and can change during the development of
the instance. a regression equation describes the relation between a response
variable (here simulation parameter) and explanatory (or predictor) variables in
a data set.
denition 6 (regression equation for parameters). the regression equa-
tion for a parameter is a function f:x!v, describing the response of pa-
rameterto some experimental setting specied by a vector of predictor variables
x2x. we userto denote the universe of regression equations.
the selection of fis a choice that should be carefully matched with the data
set and assumptions on the data. a general additive multiple regression modelwhich relates a dependent variable ytokpredictor variables x1;x2;:::;xk, is
given by the model equation y=a+1x1+2x2+:::+kxk+e, wherea
is the intercept, eis random deviation and each iis a population regression
coecient for predictor xi[7]. in this model the right hand side of the equation
is the population regression function ( f) that determines the outcome given a
vector of predictor variables x. qualitative predictors variables (e.g. the name
of an activity) can be encoded [7]. to predict the probability we use the gen-
eralized logit model for multinomial response [3]. statistical packages such as
r [13], a software environment for statistical computing and graphics, contain
functionality for encoding data and tting models on data.
denition 7 (predictor value function). the predictor value function #
is a function that maps a trace to a vector of predictor values, #:te!x. we
usevto denote the universe of predictor value functions.
the predictor value function extracts the value of the predictor from a partial
trace. for example for pickup probability in figure 1 the predictor value function
could be dened as #() = [ lasthotel ();lasttravel ()], whereis the partial
trace of the instance, lasthotel determines the type of the last hotel that was
booked and lasttravel determines the type of the last travel that was taken.
denition 8 (annotated adaptive model). letmbe a model describ-
ing the control ow based on the selection of activities a a . the adap-
tive annotated version of mis described byma= (m;vala;regr;pred)where
vala:te!vis a function that maps parameters to parameter values, de-
pending on a (partial) simulation trace, regr :!r is a function that maps pa-
rameters to corresponding regression functions and pred :!v maps a param-
eter to a predictor value function. assume regr () =fand pred () =#. then
the parameter value for , given trace 2te, is dened as val a(;) =f#().
values for parameters of the adaptive model can be obtained by applying the
associated regression equation on the current predictor values.
example 1 (adaptive parameter value). consider again the travel agency pro-
cess depicted in figure 1. from the log we derive a regression equation for the
pickup probability parameter. suppose the regression equation to estimate the
pickup probability is based on the type of the last booked hotel and the type
of the last travel. the predictor value function extracts this property from the
instance history. the parameter is estimated by applying the regression function
on the current predictor values obtained from the current simulation trace, i.e.
vala(prob pickup;) =fprob pickup#(), where the predictor value function
is dened by #() = [ lasthotel ();lasttravel ()] and extracts the type of the
last booked hotel and the type of the last travel from the trace. the regression
functionfprob pickup predicts the value of the pickup probability, given the last
type of hotel and travel.4 mining dependencies
for modelmwith parameters mand loglwe mine an adaptive simulation
modelma= (m;vala;regr;pred), where we set the adaptive parameter value for
each parameter according to the current simulation trace using the predictor
value function and the regression function. using regression analysis we can nd
dependencies between parameter and predictor values.
what can be suitable predictor candidates in terms of event traces of busi-
ness processes? an obvious predictor candidate seems to be the partial trace of
the instance. for real-life processes however, the log contains a wide variety of
traces, but typically not many of them follow the same execution scheme and
not all possible traces are contained in the log. as we showed in [18], trace ab-
stractions can be applied to tackle this issue. such abstractions consider some
characteristics of the trace rather than the exact trace; the occurrence of a single
activity, or a choice that was made at some point in the process are examples
of abstractions that can be used as predictor. the goal is to nd those trace
characteristics (captured by a trace abstraction) that are good predictors for a
simulation parameter. we do this by applying existing statistical methods where
we dene regression models for dierent predictor combination and determine
which regression model ts the data set best. during simulation, parameters
in the adaptive simulation model are determined by the associated regression
model, based on the abstraction values for the current simulation trace.
abstractions we consider are functions that map one representation of a
partial trace to another, leaving out irrelevant details. regression analysis is
used to detect which abstractions are good predictors for a parameter. the input
values for the regression equation are dened by the predictor value function #
(cf. denition 7).
denition 9 (predictor values for abstractions). let the predictors for
a regression equation be given by a vector of kabstractions [1;:::;k]. then
for all traces 2tethe input for the regression equation is dened as #() =
[1();:::;k()], wherei()denotes the value of the ithabstraction applied
to.
4.1 abstractions
this section presents an overview of elementary abstractions and compositions
thereof.
property projection (property
p:te!v) converts a sequence of events
to a sequence of their properties, e.g. a sequence of data attributes or time
stamps, i.e. property
p(ha1;:::;ani) =hp(a1);:::;p(an)i.
event projection is an abstraction that can be used to extract specied
elements from a trace. event projection is a function ( event
a:v!v) that
retains elements of 2vthat are in a, i.e. event
a() ="a.window abstraction denes the region of interest within a trace as sub-
trace. window abstraction takes some (or all) consecutive elements of the trace
(window:v!v). the window can be specied by an interval between
two points (denoted as window
p1;p2), or by one point, a direction and a width
(denoted as window
p;d;w). a pointpcan be a concrete event (e.g. the last oc-
currence of an event with a certain event name) or it can be characterised by
some condition on the event (e.g. the ithevent from the trace). the direction d
of the window is specied prior to ( <) or after (>) the point. the width wof
the window is specied by a time interval or some condition.
bag, set and cardinality abstractions abstraction from the event or-
dering can be done by the bag abstraction. set abstraction abstracts both from
event ordering and their frequencies. cardinality abstraction can be used to focus
on the size of sequences, sets and bags.
bag abstraction (bag:v!nv) is a function that transforms a sequence
2vinto a bag, i.e. bag() =par().
set abstraction (set:v!2v) is a function that transforms a sequence
2vinto a set, i.e. set() =set().
cardinality abstraction (cardinality:c!n) is a function that gives the
size of a collection c, wherecisv, 2v, ornv, i.e.8c2c:cardinality(c) =jcj.
last occurrence abstraction considers the last occurring element from
a specied set. this abstraction allows us to look, for example, at the most
recent value of a data element associated with an activity that can re-occur in
an iterative process, such as the last test outcome in figure ??.
last occurrence abstraction ( last
a:v!a[f?g ) is a function that gives
the last occurring element of set ain traceovere, if any, otherwise undened
?.
last
a() =t, if9t2(a\e);2e;2(ena), such that = (;t;)
?, if2(ena).
existence abstraction detects the occurrence of a specied event. for ex-
ample, for an insurance company the probability that the extensive procedure
for handling claims will be chosen is higher if the person has already committed
fraud. existence abstraction is a function ( existance
e:v!ftrue;falseg) that
indicates whether element eis part of a sequence, i.e. existance
e() =e2.
duration abstraction can be used to obtain the duration between two
events, e.g. the shorter the test procedure is, the more likely its result will be neg-
ative and another repair try will be needed. duration abstraction ( duration
e1;e2:
v!n) is a function that indicates the time duration between two events e1
ande2, i.e. duration
e1;e2() =time(event
e2) time(event
e1).
in practical applications combinations of abstractions, constructed as func-
tion compositions, are often used.
example 2 (combination of abstractions). the number of iterations alreasy taken
when executing a process from figure 1 can be computed from a partial traceresponse variable : parameter θ
predictors variables : α1...αn  
α1(σ)... θ αn(σ)
regression dataapply 
abstractions 
on log tracesregression 
analyses
log# result: estimations for pickup
pickup no pickup
0.77018414 0.22981586  # fθ (flight , exphotel ) 
create pdf files without this message by purchasing novapdf printer (http://www.novapdf.com)fig. 2. mining predictors (abstractions).
as the number of occurrences of the bookmore transition, i.e. cardinality
event
fbookmoreg().
4.2 mining predictors
section 4.1 identies a collection of possible abstraction candidates that can be
used to predict a parameter. for the selection of suitable predictors for a param-
eter we can dene regression models with dierent combinations of predictors
and nd the model that best ts the data set that is derived from the execution
log. in fact the execution log is converted into a list of parameter observations
where each observation contains the value of the parameter and the values of
all predictors under consideration. the predictor values for a parameter can be
obtained by applying each predictor on the prex of the parameter. the data
set consists of the observations of all log traces for a parameter and a collection
of abstractions.
suppose, we want to observe the probability of selecting option c1;c2orc3(in
a free choice construct) where we consider the set abstraction setand cardinal-
ity abstraction cardinality, which is used to count the number of times activity
aoccurs. consider the observations for log trace =ha;b;e;c 1;b;f;c 3;a;b;f;c 1i.
in this trace there are three observations, one for each occurrence of c1;c2orc3.
for the rst occurrence of c1the observation is [ fa;b;eg;1;c1], determined by the
setandcardinalityon prexha;b;ei, similarly we can observe [ fa;b;e;fg;1;c3]
and [fa;b;e;fg;2;c1].
the data set, which can be obtained by traversing the log once, is the input for
regression analysis. there are dierent methods to systematically determine the
model with the best combination of predictors for a data set. one can stepwise
eliminate or add predictors to the model based on statistical relevance with
respect to a reference model, or dene all models, based on the power set of
predictors, and nd the best tting model. in the adaptive simulation model the
best tting regression model is used for predicting the parameter value. recall
that the predictors of a regression model are in fact abstractions. applying these
abstractions on the simulation trace yields the predictor values for the regression
model.5 experiments
in this section we illustrate and validate our approach by using adaptive sim-
ulation models to analyse the eect of trends on a business process. since it is
infeasible to expose a real-life process to trends for the purpose of validating our
approach, we conduct our experiments on a reference model which is based on
the control ow given in figure 1. from the log of the reference model ( mr)
we derive a static simulation model ( ms) and an adaptive simulation model
(ma). the three models are then exposed to the same trend and the results are
compared.
5.1 experiment set-up
for the experiments we dene a reference model mrthat emulates a real pro-
cess and produces logs. from these logs we build a static msand an adaptive
simulation model ma. to evaluate the suitability of the simulation models for
evaluating business trends we expose the business process (the reference model)
and the simulation models to some trends, i.e. a change in the environment of the
processes such as a customer bias towards cheaper transportation. we compare
the capabilities of the adaptive and static model by comparing their perfor-
mance with respect to the performance of the reference model. the performance
is measured in occurrence ratio of pickup and gift transitions.
reference model. the role of the reference model is to produce logs by emulating
a real life process and its environment. a complex stochastic scheme has been
added to the control ow depicted in figure 1 in order to equip the process with
non-trivial dependencies, so that it became impossible to analytically compute
dependencies between dierent choices and parameter values. in real life these
dependencies are not known; in the reference model we in fact use them to
emulated human decisions. furthermore the reference model has been equipped
with logging functions that log every activity that is executed during simulation.
we run 30 replications of 10.000 instances on mr, each replication creating
a log. we randomly select one of these logs to detect dependencies and to create
an adaptive model maand a static model ms. to create these models one can
annotate the control ow of the travel agency process based on the log of mr.
(note that the control ow can also be mined from this log by standard process
mining techniques.) it is important to note that these models are created based
on the log without using any knowledge of the stochastic scheme of mr.
static model we mine the log of mrto nd the values for the parameters of
the static model ms, using techniques from [17]. from the log of mrwe can
determine such parameters as the probability to book an expensive hotel as the
percentage of cases in which expensive hotels were booked and annotate the
control ow to obtain the static model, cf. def. 5. recall that in the static model
the values are xed and that the partial simulation trace (or the history) is not
used to estimate their values.adaptive model for the adaptive model we use the log of mrto determine the
regression model that best ts the log, cf. section 4. we annotate the control
ow model with the obtained model, and the predictors (abstractions), cf. def.
8, so that the parameter values can now be determined during the simulation,
depending on the partial simulation trace.
mining simulation model parameters. the probabilities for the static model for
ring the pickup and the gift transitions can be mined using the performance
analysis with petri net plugin of prom [1]. for the adaptive model parameters
we determine suitable predictors for those transitions with regression analysis
using the multinom function from the nnet library in r [13]. the r data is
created using our prom r data plugin [1]. this function ts multinomial logit
models with nominal response categories.
injecting the trend. to evaluate the suitability of the simulation models for
evaluating business trends we expose the reference model to a lower customer
budget, aecting the way of travelling, hotel type and number of composed
travel-hotel combinations. on the reference model the trend results in decreasing
the share of ights from 50% to 10%. the shares of expensive, medium and cheap
hotels change from 33% to 10%, 25% and 65%, respectively. finally, the number
of booked combinations drops. the trend of booking less ights is injected in
the simulation models in a consistent manner; the bounds for the guards that
control the transportation choice are set to the mentioned probabilities. note
that, except for the injected trend, the simulation models do not change.
running the simulations. all models have been implemented as coloured petri
net in cpn tools [11], which is a well established tool for modelling and anal-
ysis of coloured petri nets. we refer the interested reader for implementation
details of the models to [12]. for each model we run 30 replications of 10.000
instances. for each replication we determine the occurrence ratio of pickup and
gift transitions. the result of all the replications are depicted as condence
intervals.
5.2 results
the procedure to mine correlations starts with the denition of the response
variable and the predictors for the estimation for the response variable.
estimating the pickup probability. to convert the log into regression data, the
response variable and the predictor variables have to be chosen. for the proba-
bility of pickup we consider the following abstractions: (1) which hotel was the
last one that was booked, (2) last type of travel and (3) the number of iterations.
we convert the log for these abstractions to a data format that can be used for
regression analysis. the data is imported into r where we t the data using
multinom function from the nnet library. for each combination of abstractions
we dened a logit model. from the models with a single predictor, the modelfig. 3. simulating the eect of clients becoming more poor. mris the reference model,
mais the history-dependent model and msa history-independent model. after insert-
ing the new trend referred to as m0
r;m0
aandm0
s. (a) depicts the eect on the number
ofpickup using the last occurrence of the hotel type as predictor and (b) depicts the
eect on percentage clients that get a gift, using the number of iterations as predictor.
that considered the last hotel tted the data best. moreover, adding more pre-
dictors did not signicantly improve the results. therefore, only the last hotel
was used for estimating the response probabilities for all predictor combinations,
e.g. the probability for pickup given that the last hotel was an expensive hotel
is 53%, for a budget hotel this probability is 44%.
the conversion of the log took 1 minute and 24 seconds and the execution
of all r commands (including the tting and testing of other models) took 39
seconds.
estimating the gift probability. similarly we determine the predictors for esti-
mating the probability for gifts. dierent abstractions and combinations thereof
have been considered, including (1) the set abstraction on the hotels, (2) the
sequence of the last two hotels, (3) the set abstraction on the travel types and
(4) the sequence of the last two travel types and (5) the number of booked com-
binations. the model using the last abstraction as predictor was the one with
the best t.
simulated process performance. figure 3 depicts the results of simulation of
the dierent models before and after the injected trend of customers with a
lower budget. the results are depicted as 95% condence intervals, that depict
the occurrence ratios of the pickup and the gift transitions. on the left side of
the gures we depict the value for the log produced by mrthat was (randomly)
selected to derive the adaptive maand static model ms. the condence intervals
shown formr;maandmsare based on simulation without introducing the trend;
here bothmaandmsapproximate the behaviour of mrwell. after the trend is
introduced, only mais able to follow the direction of the trend whereas msis
unable to do so, because essential correlations are not taken into account as all
choices are considered mutually independent.notice that maslightly underestimates the number of pickups. this is caused
by the fact that the log randomly selected from 30 replications contains slightly
less pickups than obtained on all the 30 logs on average. also note that ma
overestimates the number of gifts for the new situation due to the fact that we
try to capture a complex data dependency by a very simple abstraction, which
does not exactly captures the dependency but approximate it.
it is clear the the adaptive model gives a much better approximation than
the static model. our experiments show that the history-dependent mechanism
adapting simulation parameters according to the developments in the running
instance is able to propagate environmental changes in the simulation. for logs
containing data, abstractions on data can be used to obtain even more precise
results.
6 related work
business process simulation (bps) has been indicated by [10] as an essential
technique for business process re-engineering (bpr) where it is not only im-
portant to understand the static behaviour of the process, but also to accurately
predict the outcome of proposed and/or expected changes for the process to
judge the eect on the organisation performance. this does not only apply to
the area bpr, which traditionally focuses on complete redesign of existing pro-
cesses, but it is also interesting in a less radical setting: \how will a trend aect
the performance of my existing business process?" . simulation oers support for
randomness, uncertainty and interdependencies, making it a valuable technique
for business process management.
the biggest challenge in the development of a simulation model is obtaining
an accurate model that is close to reality. to tackle the problem of creating
realistic simulation models, [17] present a method to generate simulation models
based on actual information from logs. the authors create simulation models in
cpn tools [11] capturing the control ow perspective, the resource perspective
and the data perspective and the current state. in their approach they assume
all variables to be independent. this assumption is, however, unrealistic for real-
life business processes, as [5] explains, dependencies and correlations present in
business processes.
history-dependent petri nets [18] (hdspns) are an extension of classical
petri nets [6, 16] that use a history-dependent mechanism to model history-
dependent choices. this approach can easily be extended to model cost and
dependencies for activities.
detection of correlations from process logs and using them for business pro-
cess simulation has not been studied extensively yet. usually assumptions are
made about the dependency and/or distributions of the variables [4,15,17]. cor-
relations between quantitative variables in business processes can be used to ob-
tain more accurate settings for cost and durations of variables. these correlations
can be derived from data with simple statistical techniques. when qualitative
variables (e.g. resource and activity names) are involved, more advanced tech-niques such as regression analysis are required. closest related work is the one
on predictions in business processes [8]. there non-parametric regression anal-
ysis is used to predict the nishing time of an instance. intermediate process
dependencies are not considered. the complexity of constructing the regression
model is a serious limitation of that approach.
7 conclusion
in this paper we focused on analysing the eects of trends on existing business
processes. the analysis is performed on simulation models based on information
obtained by actual executions (a log) of the process. the main idea is that
dependencies need to be included into the simulation model to accurately predict
the global eect of new trends. for this purpose we introduce adaptive simulation
models that have simulation parameters (re-)estimated during execution. we
discussed how dependencies can be derived from a log of a business process using
regression analysis. we use abstractions on traces to balance between the amount
of data available in the log and the amount of information necessary to make
good predictions. the conversion of log data to r data, for selected abstractions
candidates is implemented as the r data plugin in the prom framework [1]. this
data can used directly in r to determine the best tting regression model.
the obtained dependencies are included into the simulation model by means
of a history-dependent mechanism that uses the partial simulation trace to de-
termine further simulation parameters. we have demonstrated the application
of dependencies in adaptive simulation models on a reference model from whose
log we created an adaptive and a static simulation model. only the adaptive
simulation model was able to propagate the trend into the correction direction.
an important direction for future work goes into the direction of the gener-
ation ofrdata given some abstractions. currently abstractions can have many
values (levels) and the generated data can be sparse, making it unsuitable for
regression. as future work we plan to look into data mining techniques to cluster
abstraction levels. furthermore, we will focus on doing experiments that con-
sider the probability, cost and duration of parameters and predictors and where
more complex abstraction compositions are considered.
references
1.prom nightly builds , 2006. http://prom.win.tue.nl/tools/prom/nightly/.
2. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237{267, 2003.
3. a. agresti. categorical data analysis . wiley series in probability and statistics.
wiley-interscience, 2nd edition, 2002.
4. f. baccelli and p. konstantopoulos. estimates of cycle times in stochastic petri
nets. rapport de recherche 1572, inria, rocquencourt , 1992.5. a.p. barros, g. decker, and a. grosskopf. complex events in business processes.
inbis, volume 4439 of lecture notes in computer science , pages 29{40. springer,
2007.
6. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts
in theoretical computer science . cambridge university press, 1995.
7. j. devore and n. farnum. applied statistics for engineers and scientists . duxbury,
1st edition, 1999.
8. b.f. van dongen, r.a. crooy, and w.m.p. van der aalst. cycle time prediction:
when will this case finally be finished? in coopis 2008, otm 2008, part
i, volume 5331 of lecture notes in computer science , pages 319{336. springer-
verlag, 2008.
9. s. ferson and m.a. burgman. correlations, dependency bounds and extinction
risks. biological conservation , 73(2):101 { 105, 1995. applications of population
viability analysis to biodiversity.
10. b. gladwin and k. tumay. modeling business processes with simulation tools. in
wsc '94: proceedings of the 26th conference on winter simulation , pages 114{121,
san diego, ca, usa, 1994. society for computer simulation international.
11. k. jensen, l.m. kristensen, and l. wells. coloured petri nets and cpn tools
for modelling and validation of concurrent systems. international journal on
software tools for technology transfer , 9(3-4):213{254, 2007.
12. j. jian. mining simulation models with correlations. master's thesis, eindhoven
university of technology, eindhoven, the netherlands, 2009.
13. r development core team. r: a language and environment for statistical com-
puting . r foundation for statistical computing, vienna, austria, 2006. isbn
3-900051-07-0.
14. g. regev and a. wegmann. why do we need business process support? bal-
ancing specialization and generalization with bps systems (introductory note).
incaise workshops , 2003.
15. h. a. reijers. case prediction in bpm systems: a research challenge. journal
of the korean institute of industrial engineers , 33:1{10, 2006.
16. wolfgang reisig and grzegorz rozenberg, editors. lectures on petri nets i: basic
models, advances in petri nets, the volumes are based on the advanced course
on petri nets, held in dagstuhl, september 1996 , volume 1491 of lecture notes in
computer science . springer, 1998.
17. a. rozinat, r. s. mans, m. song, and w. m. p. van der aalst. discovering
simulation models. inf. syst. , 34(3):305{327, 2009.
18. m.h. schonenberg, n. sidorova, w.m.p. van der aalst, and k.m. van hee. history-
dependent stochastic petri nets. in perspectives of system informatics (psi
2009) , volume 5947 of lncs , pages 366{379. springer, 2009.