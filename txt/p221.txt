process mining: extending the α-algorithm
to mine short loops
a.k.a.demedeiros,b.f.vandongen,w.m.p.vanderaalst,
anda.j.m.m.weijters
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
{a.k.medeiros, b.f.v.dongen, w.m.p.v.d.aalst, a.j.m.m.weijters }@tm.tue.nl
abstract. thedeployment of workﬂowmanagement systems is a time-
consuming and error-prone task. a possible solution is process min-
ing, which automatically extracts workﬂow models from event-data logs.
however, the current research in process mining still has problems in
mining some common constructs in workﬂow models. among these con-
structs are short loops, which are loops of length one and two. for in-stance, the α-algorithm was proven to mine sound structured workﬂow
nets without short loops. in this paper, we present a new algorithm (the
α
+-algorithm)thatcanhandleshortloops,andweprovethatitcorrectly
mines all sound structured workﬂow nets. the α+-algorithm is based
on the α-algorithm and is implemented in the emit tool.
keywords : process mining, workﬂow mining, petri nets, workﬂow petri nets.
1 introduction
everycompanywantstoproducemoreinlesstime.onewaytoaccomplishthis
is having a well-deﬁned business process model that reﬂects the dependenciesamong tasks and also tasks that can be processed in parallel. workﬂow man-
agement(wfm)systemsoﬀerthefunctionalitytodesignandenactoperational
processes.
inanidealsituation,well-deﬁnedbusinessprocessesshouldbedesignedbe-
foreenactmentispossibleand,redesignedwheneverchangeshappen.however,
inpracticealotoftimeisspentonmodellingbusinessprocesseswhilethere-sultingworkﬂowmodelsaretypicallystillerrorprone,becauseknowledgeabout
thewholeprocessisscatteredamongemployeesandpaperprocedures.
toavoidtheabovementioneddiﬃculties,insteadofstartingwithaprocess
design,ourprocessminingstartsbygatheringinformationabouttheprocessesas
theytakeplace.weassumethattheeventdatalogcontainsenoughinformationtocorrectlyextracttheworkﬂowmodel.anyinformationsystemusingtransac-
tional systems such as erp (enterprise resource planning), crm (customer
relationship management), b2b (business to business), scm (supply chainmanagement)andwfmsystemswilloﬀerthisinformationinsomeform.note
thatwedonotassumethatthepresenceofawfmsystem.theonlyassumption
wemakeisthatitispossibletocollectaprocesslogthatrecordstheorderinwhichtheeventstakeplace.
to illustrate the principle of process mining, we consider the process log
shown in table 1. this log contains information about ﬁve cases (i.e., processinstances)andsixtasks(a..f).basedontheinformationshownintable1and
bymakingsomeassumptionsaboutthecompletenessofthelog(i.e.,ifataskcanfollowanothertask,thereisalogtracetoshowthis)wecandeduceforexample
the process model shown in figure 1. the model is represented in terms of a
petrinet[31].afterexecutinga,tasksbandcareinparallel.notethatforthisexample we assume that two tasks are in parallel if they appear in any order.
by distinguishing between start events and end events for tasks it is possible
toexplicitlydetectparallelism.insteadofstartingwithatheprocesscanalsostartwithe.taskeisalwaysfollowedbytaskf.table1containstheminimal
informationweassumetobepresent.
ab
cd
e f
fig. 1.a process model corresponding to the process log.
for this simple example, it is quite easy tocaseidentiﬁer taskidentiﬁer
case1 taska
case2 taska
case3 taska
case3 taskb
case1 taskb
case1 taskc
case2 taskc
case4 taska
case2 taskb
case2 taskd
case5 taske
case4 taskc
case1 taskd
case3 taskc
case3 taskd
case4 taskb
case5 taskf
case4 taskd
table 1.aprocesslog.constructaprocessmodelthatisabletoregen-
eratetheprocesslog.forlargerprocessmodels
thisismuchmorediﬃcult.forexample,ifthe
modelexhibitsalternativeandparallelrouting,thentheprocesslogwilltypicallynotcontainall
possiblecombinations.moreover,certainpaths
throughtheprocessmodelmayhavealowprob-
abilityandthereforeremainundetected.noisy
data (i.e., logs containing exceptions) can fur-thercomplicatematters.thesearejustsomeof
the problems that we need to face in process
mining research. a lot of work is done to de-velopmoreminingalgorithmsthatcanbeused
inpractice. inthis paper aformal approach is
presented. we assume perfect information: (i)thelogmustbecomplete(i.e.,ifataskcanfol-
lowanothertaskdirectly,thelogcontainsanex-
ampleofthisbehavior)and(ii)thelogisnoisefree(i.e.,everythingthatisregisteredinthelog
iscorrect).thisisnotareallimitationbecause
weareprimarilyinterestedinformalpropertiesofouralgorithms.
processminingcanbeviewedasathree-phaseprocess: pre-processing ,pro-
cessingand post-processing .inthepre-processingphase,basedontheassump-
tionthattheinputlogcontainsenoughinformation,theorderingrelationsbe-tween tasks are inferred. the processing phase corresponds to the execution
of the mining algorithm, given the log and the ordering relations as input. inourcase,theminingalgorithmisthe α-algorithm.duringpost-processing,the
discovered model (in our case a petri-net) can be ﬁne-tuned and a graphical
representationcanbebuild.
the focus of most research in the domain of process mining is on mining
heuristicsbasedonorderingrelationsoftheeventsintheprocesslog(cf.sec-
tion5).considerableworkhasbeendoneonheuristicstomineevent-datalogstoproduceaprocessmodelthatcansupporttheworkﬂowdesignprocess.how-
ever, all the existing heuristic-based mining algorithms have their limitations
[26].typically,moreadvancedprocessconstructsarediﬃculttohandleforex-istingminingalgorithms.someoftheseproblematicconstructsarecommonin
workﬂowsand,therefore,needtobeaddressedtoenableapplicationinpractice.
amongtheseconstructsareshortloops(seefigure2).
original net:
i a o f
eb
c
ddiscovered net
ia
o
f ebc
d
fig. 2.example of a sound swf-net the α-algorithm cannot correctly mine.
themainaimofourresearchistoextendtheclassofnetswecancorrectly
mine. the α-algorithm is proved to correctly mine sound swf-nets without
short loops [6]. in this paper we prove that it is possible to correctly mine all
nets in the class of sound swf-nets .thenewminingalgorithmiscalled α+and
isbasedonthe α-algorithm.
theremainderofthispaperisorganizedasfollows.section2describesthe
α-algorithmanditssupportingdeﬁnitions.section3presentsthenewapproach
totacklelength-twoloopsusingthe α-algorithm.section4showshowtoextend
theapproachinsection3tominealsolength-oneloops.section5discusseshow
toextendthe α+-algorithmtominenetsbeyondtheclassofsoundswf-nets.
section6discussesrelatedworks.section7hastheconclusions.
2 preliminaries
thissectioncontainsthemaindeﬁnitionsusedinthe α-algorithmthatarealso
relevanttothe α+-algorithm. thedetailedexplanationaboutthe α-algorithm
andstructuredworkﬂownets(swf-nets)isin[6].
the rest of this section is as follows. subsection 2.1 introduces standard
petri-netnotations.subsection2.2deﬁnestheclassofwf-nets.subsection2.3
explainsthe α-algorithm.2.1 petri nets
weuseavariantoftheclassicpetri-netmodel,namelyplace/transitionnets.
foranelaborateintroductiontopetrinets,thereaderisreferredto[12,29,31].
deﬁnition 2.1. (p/t-nets)1anplace/transitionnet,orsimplyp/t-net,is
atuple(p,t,f)where:
1.pisaﬁnitesetof places,
2.tisaﬁnitesetof transitionssuchthat p∩t=∅,and
3.f⊆(p×t)∪(t×p)isasetofdirectedarcs,calledthe ﬂow relation.
amarkedp/t-netisapair( n,s),wheren=(p,t,f)isap/t-netandwhere
sisabagover pdenotingthe markingofthenet.thesetofallmarkedp/t-nets
isdenoted n.
amarkingisa bagoverthesetofplaces p,i.e.,itisafunctionfrom pto
thenaturalnumbers.weusesquarebracketsfortheenumerationofabag,e.g.,[a
2,b,c3]denotesthebagwithtwo a-s,oneb,andthree c-s.thesumoftwobags
(x+y),thediﬀerence( x−y),thepresenceofanelementinabag( a∈x),
and the notion of subbags ( x≤y) are deﬁned in a straightforward way and
theycanhandleamixtureofsetsandbags.
letn=(p,t,f)beap/t-net.elementsof p∪tarecalled nodes.anode
xisan input nodeofanothernode yiﬀthereisadirectedarcfrom xtoy(i.e.,
xfy).nodexisan output nodeofyiﬀyfx.forany x∈p∪t,n•x={y|yfx}
andxn•={y|xfy};thesuperscript nmaybeomittedifclearfromthecontext.
figure1showsap/t-netconsistingof7placesand6transitions.transition
ahas one input place and two output places. transition ais an and-split.
transition dhas two input places and one output place. transition dis an
and-join. the black dot in the input place of aanderepresents a token.
thistokendenotestheinitialmarking.thedynamicbehaviorofsuchamarkedp/t-netisdeﬁnedbya ﬁring rule.
deﬁnition 2.2. (firing rule) let (n=(p,t,f),s) be a marked p/t-net.
transition t∈tisenabled,denoted( n,s)[t/angbracketright,iﬀ•t≤s.the ﬁring rule
[/angbracketright⊆
n×t×nisthesmallestrelationsatisfyingforany( n=(p,t,f),s)∈nand
anyt∈t,(n,s)[t/angbracketright⇒(n,s)[t/angbracketright(n,s−•t+t•).
inthemarkingshowninfigure1(i.e.,onetokeninthesourceplace),transitions
aandeareenabled.althoughbothareenabledonlyonecanﬁre.iftransition
aﬁres,atokenisremovedfromitsinputplaceandtokensareputinitsoutput
places. in the resulting marking, two transitions are enabled: bandc. note
thattheﬁringof bandcareindependent.
deﬁnition 2.3. (reachable markings) let(n,s 0)beamarkedp/t-netin
n.amarking sisreachablefromtheinitialmarking s0iﬀthereexistsasequence
1in the literature, the class of petri nets introduced in deﬁnition 2.1 is sometimes
referred to as the class of (unlabeled) ordinary p/t-nets to distinguish it from the
class of petri nets that allows more than one arc between a place and a transition.of enabled transitions whose ﬁring leads from s0tos.t h es e to fr e a c h a b l e
markingsof( n,s 0)isdenoted[ n,s 0/angbracketright.
themarkedp/t-netshowninfigure1has6reachablemarkings.sometimesit
isconvenienttoknowthesequenceoftransitionsthatareﬁredinordertoreach
somegivenmarking.thispaperusesthefollowingnotationsforsequences.let
abe some alphabet of identiﬁers. a sequence of length n, for some natural
numbern∈in, over alphabet ais a function σ:{0,...,n −1}→a.t h e
sequenceoflengthzeroiscalledtheemptysequenceandwritten ε.forthesake
ofreadability,asequenceofpositivelengthisusuallywrittenbyjuxtaposingthefunctionvalues:forexample,asequence σ={(0,a),(1,a),(2,b)},fora,b∈a,
is written aab. the set of all sequences of arbitrary length over alphabet ais
writtena
∗.
deﬁnition 2.4. (firing sequence) let(n,s 0)withn=(p,t,f)beamarked
p/tnet.asequence σ∈t∗iscalleda ﬁring sequence of(n,s 0)ifandonlyif,
forsomenaturalnumber n∈in,thereexistmarkings s1,...,s nandtransitions
t1,...,t n∈tsuchthat σ=t1...t nand,forall iwith0 ≤i<n,(n,s i)[ti+1/angbracketright
andsi+1=si−•ti+1+ti+1•. (note that n= 0 implies that σ=εand that
εis a ﬁring sequence of ( n,s 0).) sequence σis said to be enabledin marking
s0,denoted( n,s 0)[σ/angbracketright.firingthesequence σresultsinamarking sn,denoted
(n,s 0)[σ/angbracketright(n,s n).
deﬁnition 2.5. (connectedness) a netn=(p,t,f)i s weakly connected ,
orsimply connected,iﬀ,foreverytwonodes xandyinp∪t,x(f∪f−1)∗y,
wherer−1istheinverseand r∗thereﬂexiveandtransitiveclosureofarelation
r.netnisstrongly connected iﬀ,foreverytwonodes xandy,xf∗y.
weassumethatallnetsareweaklyconnectedandhaveatleasttwonodes.the
p/t-netshowninfigure1isconnectedbutnotstronglyconnected.
deﬁnition 2.6. (boundedness, safeness) a marked net ( n=(p,t,f),s)
isboundediﬀthesetofreachablemarkings[ n,s/angbracketrightisﬁnite.itis safeiﬀ,forany
s/prime∈[n,s/angbracketrightandanyp∈p,s/prime(p)≤1.notethatsafenessimpliesboundedness.
the marked p/t-net shown in figure 1 is safe (and therefore also bounded)
becausenoneofthe6reachablestatesputsmorethanonetokeninaplace.
deﬁnition 2.7. (dead transitions, liveness) let (n=(p,t,f),s)b ea
marked p/t-net. a transition t∈tisdeadin (n,s) iﬀ there is no reachable
marking s/prime∈[n,s/angbracketrightsuch that ( n,s/prime)[t/angbracketright.(n,s)i s liveiﬀ, for every reachable
marking s/prime∈[n,s/angbracketrightandt∈t, there is a reachable marking s/prime/prime∈[n,s/prime/angbracketrightsuch
that(n,s/prime/prime)[t/angbracketright.notethatlivenessimpliestheabsenceofdeadtransitions.
noneofthetransitionsinthemarkedp/t-netshowninfigure1isdead.how-
ever, the marked p/t-net is not live since it is not possible to enable each
transitioncontinuously.2.2 workﬂow nets
most workﬂow systems oﬀer standard building blocks such as the and-split,
and-join,or-split,andor-join[4,14,21,23].theseareusedtomodelsequen-tial, conditional, parallel and iterative routing (wfmc [14]). clearly, a petri
net can be used to specify the routing of cases. tasksare modeled by transi-
tionsandcausaldependenciesaremodeledbyplacesandarcs.infact,aplace
corresponds to a conditionwhich can be used as pre- and/or post-condition
for tasks. an and-split corresponds to a transition with two or more outputplaces, and an and-join corresponds to a transition with two or more input
places.or-splits/or-joinscorrespondtoplaceswithmultipleoutgoing/ingoing
arcs. given the close relation between tasks and transitions we use the termsinterchangeably.
apetrinetwhichmodelsthecontrol-ﬂowdimensionofaworkﬂow,iscalleda
workflow net (wf-net).itshouldbenotedthatawf-netspeciﬁesthedynamic
behaviorofasinglecaseinisolation.
deﬁnition 2.8. (workﬂow nets) letn=(p,t,f) be a p/t-net and ¯ta
freshidentiﬁernotin p∪t.nisa workﬂow net (wf-net)iﬀ:
1.object creation :pcontainsaninputplace isuchthat •i=∅,
2.object completion :pcontainsanoutputplace osuchthat o•=∅,
3.connectedness :¯n=(p,t∪{¯t},f∪{(o,¯t),(¯t,i)})isstronglyconnected,
the p/t-net shown in figure 1 is a wf-net. note that although the net is
notstronglyconnected,the short-circuited netwithtransition ¯tisstronglycon-
nected. even if a net meets all the syntactical requirements stated in deﬁni-
tion2.8,thecorrespondingprocessmayexhibiterrorssuchasdeadlocks,taskswhichcanneverbecomeactive,livelocks,garbagebeingleftintheprocessafter
termination,etc.therefore,wedeﬁnethefollowingcorrectnesscriterion.
deﬁnition 2.9. (sound) letn=(p,t,f) be a wf-net with input place i
andoutputplace o.nissoundiﬀ:
1.safeness:(n,[i])issafe,
2.proper completion :foranymarking s∈[n,[i]/angbracketright,o∈simpliess=[o],
3.option to complete :foranymarking s∈[n,[i]/angbracketright,[o]∈[n,s/angbracketright,and
4.absence of dead tasks :(n,[i])containsnodeadtransitions.
thesetofallsoundwf-netsisdenoted w.
thewf-netshowninfigure1issound.soundnesscanbeveriﬁedusingstan-
dardpetri-net-basedanalysistechniques.infactsoundnesscorrespondstolive-
nessandsafenessofthecorrespondingshort-circuitednet[1,2,4].thiswayeﬃ-
cientalgorithmsandtoolscanbeapplied.anexampleofatooltailoredtowardstheanalysisofwf-netsiswoﬂan[35].
ourprocessminingresearchaimsatrediscoveringwf-netsfromeventlogs.
however,notallplacesinsoundwf-netscanbedetected.forexampleplacesmaybeimplicitwhichmeansthattheydonotaﬀectthebehavioroftheprocess.
these places remain undetected. therefore, we limit our investigation to wf-
netswithoutimplicitplaces.deﬁnition 2.10. (implicit place) letn=(p,t,f)beap/t-netwithinitial
markings.aplace p∈piscalledimplicitin( n,s)ifandonlyif,forallreachable
markings s/prime∈[n,s/angbracketrightandtransitions t∈p•,s/prime≥•t\{p}⇒s/prime≥•t.
figure1containsnoimplicitplaces.however,addingaplace pconnectingtran-
sitionaanddyieldsanimplicitplace.nominingalgorithmisabletodetect
psince the addition of the place does not change the behavior of the net and
thereforeisnotvisibleinthelog.
(i) (ii)
fig. 3.constructs not allowed in swf-nets.
for process mining it is very important that the structure of the wf-net
clearlyreﬂectsitsbehavior.therefore,wealsoruleouttheconstructsshowninfigure3.theleftconstructillustratestheconstraintthatchoiceandsynchro-
nizationshouldnevermeet.iftwotransitionsshareaninputplace,andtherefore
“ﬁght”forthesametoken,theyshouldnotrequiresynchronization.thismeansthatchoices(placeswithmultipleoutputtransitions)shouldnotbemixedwith
synchronizations.theright-handconstructinfigure3illustratestheconstraint
thatifthereisasynchronizationallprecedingtransitionsshouldhaveﬁred,i.e.,itisnotallowedtohavesynchronizationsdirectlyprecededbyanor-join.wf-
nets which satisfy these requirements are named structured workﬂow nets and
aredeﬁnedas:
deﬁnition 2.11. (swf-net) awf-net n=(p,t,f)isan swf-net(struc-
turedworkﬂownet)ifandonlyif:
1. forall p∈pandt∈twith(p,t)∈f:|p•|>1implies |•t|=1.
2. forall p∈pandt∈twith(p,t)∈f:|•t|>1implies |•p|=1.
3. therearenoimplicitplaces.
this paper introduces the α
+-algorithm, which mines allswf-nets. the α+-
algorithmisbasedonthe α-algorithm,whichcorrectlyminesswf-nets without
short loops.inoursolution,weﬁrsttacklelength-twoloops(seesection3)and
thenalsolength-oneloops(seesection4).whiletacklinglength-twoloopsonly,
wedonotallowthenetstohavelength-oneloops.thatiswhyweintroducethe
deﬁnitionof one-loop-free workﬂow nets .
deﬁnition 2.12. (one-loop-free workﬂow nets) letn=(p,t,f)b ea
workﬂow net. nis a one-loop-free workﬂow net if and only if for any t∈t,
t•∩•t=∅.2.3 the α-algorithm
our start point to mine workﬂows is an event log. a log is a set of traces.
workﬂowtracesandlogsaredeﬁnedas:
deﬁnition 2.13. (workﬂow trace, workﬂow log) lettbeasetoftasks.
σ∈t∗isa workﬂow trace andw∈p(t∗)isa workﬂow log.2
from a worﬂow log, ordering relations between tasks can be inferred. in the
caseofthe α-algorithm,everytwotasksintheworkﬂowlogmusthaveoneof
the following four ordering relations: >w(follows), →w(causal), /bardblw(paral-
lel)and# w(unrelated).theseorderingrelationsareextractedbasedonlocal
informationinthelogtraces.theorderingrelationsaredeﬁnedas:
deﬁnition 2.14. (log-based ordering relations) letwbeaworkﬂowlog
overt,i.e.,w∈p(t∗).leta,b∈t:
–a>wbifandonlyifthereisatrace σ=t1t2t3...t n−1andi∈{1,...,n −2}
suchthat σ∈wandti=aandti+1=b,
–a→wbifandonlyif a>wbandb/negationslash>wa,
–a#wbifandonlyif a/negationslash>wbandb/negationslash>wa,and
–a/bardblwbifandonlyif a>wbandb>wa.
toensuretheworkﬂowlogcontainstheminimalamountofinformationneces-
sarytominetheworkﬂow,thenotionoflogcompletenessisdeﬁnedas:
deﬁnition 2.15. (complete workﬂow log) letn=(p,t,f) be a sound
wf-net,i.e., n∈w.wisa workﬂow log of nifandonlyif w∈p(t∗)and
everytrace σ∈wisaﬁringsequenceof nstartinginstate[ i]andendingin
state[o],i.e.,(n,[i])[σ/angbracketright(n,[o]).wisa completeworkﬂowlogof nifandonly
if(1)foranyworkﬂowlog w/primeofn:>w/prime⊆>w,and(2)forany t∈tthereisa
σ∈wsuchthat toccursin σ.
for figure 1, a possible complete workﬂow log wis:abcd,acbdand ef.f r o m
thiscompletelog,thefollowingorderingrelationsareinferred:
–(follows) a>wb,a>wc,b>wc,b>wd,c>wb,c>wdande>wf.
–(causal)a→wb,a→wc,b→wd,c→wdande→wf.
–(parallel) b/bardblwcandc/bardblwb.
notethatthereareno unrelatedtransitionsforthenetinfigure1.
nowwecangivetheformaldeﬁnitionofthe α-algorithmfollowedbyamore
intuitiveexplanation.
deﬁnition 2.16. (mining algorithm α)letwbe a workﬂow log over t.
theα(w)isdeﬁnedasfollows.
1.tw={t∈t|∃σ∈wt∈σ},
2.ti={t∈t|∃σ∈wt=ﬁrst(σ)},
2t∗is the set of all sequences that are composed of zero of more tasks from t.p(t∗)
is the powerset of t∗, i.e., w⊆t∗.3.to={t∈t|∃σ∈wt=last(σ)},
4.xw={(a,b)|a⊆tw∧b⊆tw∧∀a∈a∀b∈ba→wb∧∀a1,a2∈aa1#wa2∧
∀b1,b2∈bb1#wb2},
5.yw={(a,b)∈xw|∀(a/prime,b/prime)∈xwa⊆a/prime∧b⊆b/prime=⇒(a,b)=(a/prime,b/prime)},
6.pw={p(a,b )|(a,b)∈yw}∪{iw,ow},
7.fw={(a,p (a,b ))|(a,b)∈yw∧a∈a}∪{(p(a,b ),b)|(a,b)∈
yw∧b∈b}∪ {(iw,t)|t∈ti}∪ {(t,ow)|t∈to},and
8.α(w)=(pw,tw,fw).
theα-algorithmworksasfollows.first,itexaminesthelogtracesand(step1)
createsthesetoftransitions ( tw)intheworkﬂow, (step2) thesetof output
transitions( ti)ofthesourceplace,and(step3)thesetoftheinputtransitions
(to)ofthesinkplace3.insteps4and5,the α-algorithmcreatessets( xwand
yw, respectively) used to deﬁne the places of the discovered workﬂow net. in
step4,the α-algorithmdiscoverswhichtransitionsarecausallyrelated.thus,
f o re a c ht u p l e( a,b)i nxw, each transition in set acausally relates to all
transitions in set b, and no transitions within a(orb) follow each other in
someﬁringsequence.theseconstraintstotheelementsinsets aandballow
the correct mining of and-split/join and or-split/join constructs. note that
theor-split/joinrequiresthefusionofplaces.instep5,the α-algorithmreﬁnes
setxwbytakingonlythelargestelementswithrespecttosetinclusion.infact,
step5establishestheexactamountofplacesthediscoverednethas(excluding
thesourceplace iwandthesinkplace ow).theplacesarecreatedinstep6and
connectedtotheirrespectiveinput/outputtransitionsinstep7.thediscovered
workﬂownetisreturnedinstep8.
finally,wedeﬁnewhatitmeansforawf-nettoberediscovered.
deﬁnition 2.17. (ability to rediscover) letn=(p,t,f)beasoundwf-
net,i.e.,n∈w,andlet αbeaminingalgorithmwhichmapsworkﬂowlogsof
nontosoundwf-nets,i.e., α:p(t∗)→w.ifforanycompleteworkﬂowlog
wofntheminingalgorithmreturns n(modulorenamingofplaces),then αis
ableto rediscover n.
note that no mining algorithm is able to ﬁnd names of places. therefore, we
ignore place names, i.e., αis able to rediscover nif and only if α(w)=n
modulorenamingofplaces.
3 length-two loops
inthissectionweﬁrstshowwhyanewnotionoflogcompletenessisnecessaryto
capturelength-twoloopsinswf-netsandwhythe α-algorithmdoesnotcapture
length-two loops in swf-nets (even if the new notion of log completeness isused).thenanewdeﬁnitionoforderingrelationsisgiven,andﬁnallyweprove
that this new deﬁnition of ordering relations is suﬃcient to tackle length-two
loopswiththe α-algorithm.
3in a workﬂow net, the source place ihas no input transitions and the sink place o
has no output transitions.3.1 new notion of log completeness
logcompletenessasdeﬁnedindeﬁnition2.15isinsuﬃcienttodetectlength-two
loopsinswf-nets.asanexample,considertheswf-netinfigure2(left-hand
side).thisnetcanhavethecompletelog: ab, acdb, edcf, ef .however,bylooking
at this log it is not clear if transitions cand dare in parallel or belong to a
length-two loop. thus, to correctly detect length-two loops in swf-nets, the
followingnewdeﬁnitionofcompletelogisintroduced.
deﬁnition 3.1. (loop-complete workﬂow log) letn=(p,t,f)b ea
sound swf-net and wa log of n.wis a loop-complete workﬂow log of n
if and only if wis complete and for all workﬂow logs w/primeofn: if there is a
ﬁring sequence σ/prime∈w/primewithσ/prime=t1t2t3...t n/primeandi/prime∈{1,...,n/prime−2}such
thatti/prime=ti/prime+2=aandti/prime+1=b, for some a,b∈t:a/negationslash=b, then there is a
ﬁring sequence σ∈wwithσ=t1t2t3...t nandi∈{1,...,n −2}such that
ti=ti+2=aandti+1=b.
notethata loop-complete workﬂow log forthenetinfigure2willcontainone
ormoretraceswiththesubstrings“ cdc”and“ dcd”.besides,allloop-complete
workﬂowlogsarealsocompleteworkﬂowlogs.
in deﬁnition 3.1 it is implicitly assumed that there exists a loop-complete
workﬂow log with a ﬁnite set of traces. furthermore, it is assumed that all
tracesareﬁnite.wewouldliketopointoutthatitisindeedpossibletohavealoop-completeworkﬂowlogwiththeseproperties.
theorem 3.2. itispossibletohavealoop-completelogthatisaﬁnitesetof
ﬁnitetraces.
proof.consider the reachability graph of a swf-net. since the number of
possible markings is ﬁnite, the reachability graph is also ﬁnite. furthermore,soundness(ormorespeciﬁcallyliveness)impliesthatinthereachabilitygraph
thereisapathfrommarking[ i]toeveryotherreachablemarkingandthereisa
pathfromeveryreachablemarkingtothestate[ o].everyarcinthereachability
graphcanbemappedontotheﬁringofatransition,thereforeweneedtoshow
twothings:
–for every two arcs ( s
j−1,sj) and (sj,sj+1) there is a path from [ i]t o[o]
over these arcs. liveness properties of a sound swf-netgive that there is
a shortest path from marking [ i] to marking sj−1. furthermore, there is a
shortestpathfrommarking sj+1tomarking[ o].combiningthesetwopaths
withthetwoarcs( sj−1,sj)and(sj,sj+1)leadstoaﬁnitepathfrom[ i]to
[o]overthesetwoarcs.extendingthistoallpairsshowsthatthereareﬁnite
tracesthatcontainallinformationforthe >relation.
–foreverythreearcs( sj−1,sj),(sj,sj+1)and(sj+1,sj+2)suchthat( sj−1,sj)
and(sj+1,sj+2)representtheﬁringofthesametransition t1and(sj,sj+1)
representstheﬁringofadiﬀerenttransition t2,weneedtoshowthatthere
isagainapathfrom[ i]to[o]overthesearcs.theproofforthisisthesame
asforthe >relation.therefore,therealsoexistﬁnitetracescontainingall
theinformationneededtodetecttheﬁringsequences t1t2t1.all that we need to show now is that it is possible to generate a ﬁnite set of
ﬁnitetracesthatisaloop-completelog.sincewehaveshownthatforeachpairortripleofarcsitispossibletogenerateaﬁnitetrace,andthenumberofpairs
andtriplicatesisboundedinthesizeofthegraph,weknowthatthisisthecase.
✷
3.2 redeﬁnition of ordering relations
thenewnotionofaloop-completeworkﬂowlogisnecessarybutnotsuﬃcient
tominelength-twoloops.themainreasonisthatthetasksinthelength-twoloopareinferredtobeinparallel.forexample,forthenetinfigure2,anyloop-
completeworkﬂowlogwillleadto c/bardbl
wdandd/bardblwc.however,thesetransitions
arenotinparallel.infact,theyareconnectedbyplacesthatcanonlybecorrectlyminedbythe α-algorithmifatleast c→
wdandd→wc.usingthisinsight,
weredeﬁnedeﬁnition2.14,i.e.,weprovidethefollowingnewdeﬁnitionsforthe
basicorderingrelations →wand/bardblw.
deﬁnition 3.3. (ordering relations capturing length-two loops) letw
bealoop-completeworkﬂowlogover t,i.e.,w∈p(t∗).leta,b∈t:
–a/trianglewbifandonlyifthereisatrace σ=t1t2t3...t nandi∈{1,...,n −2}
suchthat σ∈wandti=ti+2=aandti+1=b,
–a/diamondmathwbifandonlyif a/trianglewbandb/trianglewa,
–a>wbifandonlyifthereisatrace σ=t1t2t3...t n−1andi∈{1,...,n −2}
suchthat σ∈wandti=aandti+1=b,
–a→wbifandonlyif a>wband(b/negationslash>waora/diamondmathwb),
–a#wbifandonlyif a/negationslash>wbandb/negationslash>wa,and
–a/bardblwbifandonlyif a>wbandb>waanda/negationslash/diamondmathwb.
note that, in the new deﬁnition 3.3, two transitions aandbare also in the
a→wbrelation if a> wbandb>waand the substrings abaandbabare
containedinthelogtraces.
theorem 3.4. letn=(p,t,f)beanone-loop-freesoundswf-net.let w
bealoop-completeworkﬂowlogof n.forany a,b∈t,suchthat •a∩b•/negationslash=∅
anda•∩•b/negationslash=∅,a/trianglewbimpliesb/trianglewa.
proof.assumea•∩•b/negationslash=∅,b•∩•a/negationslash=∅,∃σ=...aba...and/negationslash∃σ/prime=...bab....w e
showthatthisleadstoacontradiction.
sincenis a swf-net and no implicit places are possible, |a•∩•b|=1
and|b•∩•a|=1.let pab,pba∈pbe the places between aandb, such that
a•∩•b={pab}andb•∩•a={pba}.since ∃σ=...aba...andnissafe, |•a|=1
and•a={pba}.sincethereisnoﬁringsequence σ/prime=...bab...anda•∩•b/negationslash=∅,
bhasmorethanoneinputplace,i.e. |•b|>1.wedeﬁne {pab,pb,in}⊆•b.
consequently,thefollowingpropertieshold:
–|•pab|=1.thisisadirectconsequenceofdeﬁnition2.11(2).
–|pab•|=1.thisisadirectconsequenceofdeﬁnition2.11(1).–pb,in•={b}.thisisadirectconsequenceofdeﬁnition2.11(1).
bydeﬁnition, •pab={a}andpab•={b}.sincethenetissafeandthesequence
σ=...aba...exists,weknowthatalltokensproducedby amustbeconsumedby
b.fromthedeﬁnitionofswf-netsitisknownthat |a•∩•b|≤1forallaandb.
therefore, a•={pab}meaningthattheﬁringof acanonlyaﬀecttheenabling
ofb.
furthermore, it can be shown that {pba}⊂b•. assume that {pba}=b•.w e
showthatthisleadstoacontradiction.sincethenetislive,thereisamarking
s1that puts a token in pabandpb,into enable b. since the token in pabcan
onlyarriveafterﬁring a,amarking s2thatputsatokenin pbaandpb,inmust
also exist. assume that there is a trace containing b, i.e.∃σ1=...abσ/prime
1such
thatb/negationslash∈σ/prime
1∧a/negationslash∈σ/prime
1. from the property of proper completion we know that
such a trace must exist. we know that no transition can remove tokens from
pb,inother than b. since the trace σ/prime
1can be ﬁred from a marking smarking
pbaandnotpb,in,itcanbeﬁredfromamarking s/primemarkingeveryplacethatis
markedin sandmarking pb,in.however,afterﬁring σ/prime
1frommarking s/primeatoken
iseventuallyplacedinthesinkplaceandthetokenin pb,inisnotremoved.this
isacontradictiontothepropertyof proper completion ofswf-nets.
now we know that there must be a place pb,outsuch that {pba,pb,out}⊆b•
andpb,out/negationslash=pb,in. from the property of safenesswe know that after ﬁring b
thetokenfrom pb,outhastoberemovedbefore bbecomesenabledagain.this
meansthatfromthemoment bbecomesenabledtherearetwotokenstravelling.
onebetween pabandpbaandonebetween pb,inandpb,out.sincetheproperty
ofproper completion holdsforthenet,weknowthatthesetwotokensneedto
besynchronizedinordertoexittheloopbetween aandb.
structural properties of swf-nets forbid a transition to take tokens from
paband tokens in pb,inc a no n l ybec o n s u m e db y b.proper completion implies
thatithastobepossibletoremoveatokenfrom pba.anytransitionremoving
thistokendoesnothaveanyotherinputplacesbecauseofstructuralproperties.livenessimpliesthatthetokenproducedin p
b,outcanbetransportedbackto
pb,inbyﬁringatleastonetransition.thesubnettransportingthistokencannot
knowwhethertransition ahasﬁred,orthetokenin pbahasbeenremovednever
toreturn.anyconstructionthatchecksthisconditionwouldnamelyviolatefree-
choiceness. therefore, this subnet could produce a token in pb,in, even though
transition awillneverbecomeenabledagain.thisviolates proper completion or
deadlock freedom andtherefore,anetwhere pab⊂•bcannotbeasoundswf-
net.therefore, •b={pab}andconsequently, b•={pba}.however,ifthatisthe
casethenthetrace σ/prime=...bab...ispossible,thusleadingtoacontradiction.
✷
however,thereisstillaproblem.length-oneloopsinthenetmayalsoproduce
“cdc”and“dcd”patternsinthelogtraces.forexample,seethenetsinfigure
4.therefore,toprovethatthe α-algorithmcancorrectlyminelength-twoloops
whenusingthenewdeﬁnitionsofloop-completeworkﬂowlogandorderingre-
lations,weassumethatthenetisa sound one-loop-free swf-net .insection4,
weshowhowtohandlethegeneralcase(allsoundswf-nets).a b
dc
i o a b
dc
i o
fig. 4.example illustrating why length-one loops are not allowed when mining length-
two loops. note that both nets have loop-complete workﬂow logs that contains traceswith the substrings “ cdc”o r“ dcd”.
3.3 proof that the α-algorithm mines length-two loops
in[6],the α-algorithm wasprovedtocorrectlyminesoundswf-netswithout
shortloops.insubsections3.1and3.2,werespectivelyintroducedthenewdef-
initions of log completeness (deﬁnition 3.1) and ordering relations (deﬁnition
3.3)thatarenecessarytocapturelength-twoloopsusingthe α-algorithm.how-
ever,weneedtoprovethatthe α-algorithmcorrectlyminesone-loop-freesound
swf-netswhenthedeﬁnitions3.1and3.3areused.thus,thissubsectionhas
proofsfortherelevanttheoremsandpropertiesin[6]thatdonotholddirectly
whenusingthedeﬁnitions3.1and3.3.
theorem 3.5.4letn=(p,t,f)beasoundone-loop-freeswf-netandlet
wbe a loop-complete workﬂow log of n. for any a,b∈t:a→wbimplies
a•∩•b/negationslash=∅.
proof.assumea→wb.ifa/negationslash/diamondmathwbthena>wbandb>waandtheorem4.1in
[6]canbeusedtoprovethat a•∩•b/negationslash=∅.therefore,wealsoassumethat a/diamondmathwb.
nowweneedtoﬁndacontradictionwhenwealsoassumethat a•∩•b/negationslash=∅.
becausenis one-loop-free and safe, for any t∈t,t•∩•t=∅a n dt h e r ei s
no ﬁring sequence σ/prime/prime=...tt.... so, once a transition tﬁres, it can be enabled
againonlyaftertheﬁringofanotherdistincttransition.however,thisleadstoa
contradictionbecausethereisaﬁringsequence σ/prime=...bab...thatcannotbetrue
ifa•∩•b=∅,sinceaistheonlytransitiontoﬁrebetweenthetwoﬁringsof
b.forsimilarreasons,itisalsoimpossibletohave σ=...aba...if•a∩b•=∅.
✷
theorem 3.6.5letn=(p,t,f)beasoundone-loop-freeswf-netandlet
wbealoop-completeworkﬂowlogof n.
1. ifa,b∈tanda•∩b•/negationslash=∅,thena#wb.
2. ifa,b∈tand•a∩•b/negationslash=∅,thena#wb.
3. ifa,b,t∈t,a→wt,b→wt,anda#wb,thena•∩b•∩ •t/negationslash=∅.
4. ifa,b,t∈t,t→wa,t→wb,anda#wb,then •a∩•b∩t•/negationslash=∅.
proof.leta,b,t∈t.weproveeachofthefouritemsseparately.
4theorem 4.1 in [6].
5theorem 4.8 in [6].1. ifa•∩b•/negationslash=∅, then there is a common output place p∈a•∩b•.i f
aﬁ r i n go f ais directly followed by b(or vice versa), then two subsequent
transitionsproduceatokenfor p.thesetransitionsdonotconsumetokens
fromp(because a•∩•a=∅andb•∩•b=∅).therefore, pcontains
atleasttwotokensafterﬁring aandb.thisisnotpossiblesince( n,[i])is
safe.hence, a/negationslash>wbandb/negationslash>wawhichimplies a#wb.
2. similarargumentsapplytothesituationwhere p∈•a∩•b.
3. assume a→wt,b→wt,a#wbanda•∩b•∩ •t=∅.weshowthisleads
toacontradiction.fromtheorem3.5,weknow a→wtimpliesa•∩•t/negationslash=∅.
similarly, b→wtimpliesb•∩•t/negationslash=∅.w eassumedthat a•∩b•∩ •t=∅.
thusa•∩b•=∅. moreover, if pat∈a•∩•tandpbt∈b•∩•t, then
•pat∩•pbt=∅. this means that tcan only ﬁre after the ﬁrings of botha
andb.ifa/trianglewt,weknowthereisaﬁringsequence σ/prime=...tat....thismeans
thattﬁred(afterwardsallitsinputplacesareemptysincethenetissafe),
aﬁredand tﬁredagain.however,thisisimpossiblesince b•∩•t/negationslash=∅and
a•∩b•=∅, i.e.pbtis empty. so a•∩b•∩ •t/negationslash=∅ifa/trianglewt. similar
argumentsholdif b/trianglewt,t/trianglewa,andt/trianglewb.therefore,wecanrefertothe
proofattheorem4.8in[6].
4. similarargumentsapplytothesituationwhere t→wa,t→wb,anda#wb.
✷
theorem 3.7. letn=(p,t,f)beasoundone-loop-freeswf-netandlet w
be a loop-complete workﬂow log of n. thenα(w)=nmodulo renaming of
places.
proof.thistheoremiscorrectbecausealltheoremsandpropertiesoftheorig-
inalα-algorithmareproventostillholdwhendealingwithsoundone-loop-free
swf-net,loop-completeworkﬂowlogsandtheneworderingrelations. ✷
4 length-one loops
in this section we show the properties of length-one loops in sound swf-nets
andanalgorithm(called α+)thatcorrectlyminesallsoundswf-nets.
4.1 properties of length-one loops
length-oneloopsareconnectedtoasingleplaceinanysoundswf-netandthis
placecannotbethesourceorsinkplaceofthesoundswf-net,asisstatedin
thefollowingtheorem:
theorem 4.1. letn=(p,t,f)beasoundswf-net.forany a∈t,a•∩•a/negationslash=
∅impliesa/negationslash∈i•,a/negationslash∈•o,a•=•aand|•a|=1.
proof.leta∈t.weprovebycontradiction.assume a•∩•a/negationslash=∅and:
1.a∈i•.if|•a|=1,then •a=a•=i,sincea•∩•a/negationslash=∅. however, nisa
wf-netand •i=∅(seedeﬁnition2.8(1)).sowehaveacontradiction.2.a∈•o.againif |•a|=1wehaveacontradiction(seedeﬁnition2.8(2)).
3.•a/negationslash=a•,i.e.thereisaplace p∈•a\a•orp∈a•\•a.ifp∈•a\a•,then
aisdeadbecausetheswf-netpropertiesimplythattheplacesin a•∩•a
canneverbemarked.if p∈a•\•a,theresultingnetisunboundedbecause
ifacanﬁreonceitcanﬁremultipletimes.
4.|•a|>1.letp∈a•=•a.again,fromdeﬁnition2.11(2), |•a|>1implies
|•p|=1.butifthisisthecase, aisadeadlockbecausetheonlytransition
thatcanputatokenin pisa.thisisacontradictionsince nissound.
✷
property 4.2. letn=(p,t,f) be a sound swf-net. let wbe a loop-
complete workﬂow log of n. for any a∈t:•a∩a•/negationslash=∅implies there are
b,c∈t:a/negationslash=bandb/negationslash=canda/negationslash=candb→waanda→wcandb→wcand
•c=•a.
thispropertyfollowsdirectlyfromdeﬁnition2.11(1)andtheorem4.1inthis
paper,andfromtheorem4.66in[6].property4.2statestherearealwaysnon-
length-one loops transitions that are either input transitions or output transi-tionsfromthesingleplaceconnectedtoalength-one-looptransitioninasound
swf-net.furthermore,theoutputtransitionshaveonlythissingleplaceastheir
inputplace.
theorem 4.3. letn=(p,t,f)beasoundswf-net.let n
/prime=(p/prime,t/prime,f/prime)
be a one-loop-free pt-net such that p/prime=p,t/prime={t∈t|•t∩t•=∅},a n d
f/prime=f∩(p/prime×t/prime∪t/prime×p/prime).letwbealoop-completeworkﬂowlogof nand
letw−l1lbe the log created by excluding the occurrences of length-one-loop
transitionsfromeverylogtracein w.then:
1.n/primeisasoundone-loop-freeswf-net,
2.α(w−l1l)=n/primemodulorenamingofplaces.
proof.weprove(1)bycheckingif n/primeissound,one-loop-freeandaswf-net.
weprove(2)byshowing w−l1lisaloop-completeworkﬂowlogof n/prime.
1.n/primeis a one-loop-free by deﬁnition. thus, it remains to prove n/primeis sound
andisaswf-net.letusﬁrstlookatthesoundnessof n/prime.f romtheorem
4.1,weknowanylength-one-looptransition tisconnectedtoasingleplace
in a sound swf-net. thus, the ﬁring of tdoes not change the marking
ofn. we know n/primeis originated from nby excluding all tand the arcs
connectedto t.sothesetofreachablemarkingsfor ncoincideswiththeset
ofreachablemarkingsfor n/prime.consequently, n/primeissoundbecause nissound.
byreasoningaboutthesetofreachablemarkingsisalsoeasytosee n/primeis
a wf-net. it remains to check if n/primeis a swf-net. deﬁnition 2.11(1) and
2.11(2)holddirectlybecause n/primeiscreatedbyonlyexcludingtransitionsand
arcsfrom n,whichisalreadyaswf-net.deﬁnition2.11(1)holdsbecause,
6this theorem is deﬁned as:
letn=(p,t,f) be a sound swf-net and let wbe a complete workﬂow log of n.
for any a, b∈t:a•∩• b/negationslash=∅andb•∩• a=∅implies a→ wb.asstatedinproperty4.2,foranyothertransition t/primesuchthat •t/prime∩t/prime•=∅
and•t∩•/primet/negationslash=∅impliest/primehasasingleinputplace pthatisalsoconnected
tot.notethat t/primeexistsbecause p/negationslash=o.since |•t|=1,pcanneverbecome
animplicitplacein n/prime.
2. letw/primebealoop-completeworkﬂowlogof n/prime.n/primeandnhavethesamesetof
reachablemarkings.thus,foranytwotransitions a,b∈t/prime,ifa>w/primebholds,
thena>wbalsoholds.since w−l1liscreatedbyexcludingtheoccurrences
oflength-one-looptransitions t(i.e.•t∩t•/negationslash=∅)fromthelogtracesof w,
a> w−l1lbalsoholds.consequently, w−l1lisaloop-completeworkﬂow
forn/prime.sincen/primewasprovenin(1)tobeasoundone-loop-freeswf-net,by
theorem3.7, α(w−l1l)=n/prime.
✷
theorem 4.3 states that the main net structure (called n/primein the theorem) of
any sound swf-net can be correctly discovered by the α-algorithm whenever
length-one-looptransitionsareremovedfromtheinputlog.consequently,since
length-one-looptransitionsarealwaysconnectedtoasingleplaceinsoundswf-
net(theorem4.1),wecanusethe α-algorithmtominethemainnetstructure
n/primeandthenconnectthelength-one-looptransitiontothisnet.
thenextsubsectionshowshowtoidentifylength-one-loopstransitionsand
howtocorrectlyinserttheminthenetthe α-algorithmoutputs.
4.2 solution to tackle length-one loops
thesolutiontotacklelength-oneloopsinsoundswf-netsfocussesonthepre-
and post-processing phases of process mining. the key idea is to identify thelength-one-loop tasks and the single place to which each task should be con-
nected.anylength-one-looptask tcanbeidentiﬁedbysearchingaloop-complete
workﬂowlogfortracescontainingthesubstring tt.todeterminethecorrectplace
ptowhicheach tshouldbeconnectedinthediscoverednet,wemustcheckwhich
transitionsaredirectedfollowedby tbutdonotdirectfollow t(i.e.pisanoutput
placeofthesetransitions) andwhichtransitionsdirectfollow tbuttdoesnot
directfollowthem(i.e. pistheinputplaceofthesetransitions).
thealgorithm-called α
+-tominesoundswf-netsisformalizedasfollows.
note that the function eliminatetask maps any log trace σto a new one σ/prime
withouttheoccurrenceofacertaintransition t.
deﬁnition 4.4. (mining algorithm α+)letwbealoop-completeworkﬂow
logovert,theα-algorithmasindeﬁnition2.16andtheorderingrelationsas
indeﬁnition3.3.
1.tlog={t∈t|∃σ∈w[t∈σ]}
2.l1l={t∈tlog|∃σ=t1t2...t n∈w;i∈{1,2,...,n }[t=ti−1∧t=ti]}
3.t/prime=tlog\l1l
4.fl1l=∅
5. foreach t∈l1ldo:(a)a={a∈t/prime|a>wt}
(b)b={b∈t/prime|t>wa}
(c)fl1l:=fl1l∪{(t,p (a\b,b\a)),(p(a\b,b\a),t)}
6.w−l1l=∅
7. foreach σ∈wdo:
(a)σ/prime=σ
(b) foreach t∈l1ldo:
i.σ/prime:=eliminatetask (σ/prime,t)
(c)w−l1l:=w−l1l∪σ/prime
8. (pw−l1l,tw−l1l,fw−l1l)=α(w−l1l)
9.pw=pw−l1l
10.tw=tw−l1l∪l1l
11.fw=fw−l1l∪fl1l
12.α+=(pw,tw,fw)
theα+worksasfollows.first,itexaminesthelogtraces(step1)andidentiﬁes
thelength-one-looptransitions(step2).insteps3to5,theplacestowhicheach
length-one-looptransitionshouldbeconnectedtoareidentiﬁedandtherespec-
tivearcsareincludedin fl1l.then,alllength-one-looptransitionsareremoved
fromtheinputlog w−l1ltobeprocessedbythe α-algorithm(steps6and7).
instep8,the α-algorithmdiscoversaworkﬂownetbasedontheloop-complete
workﬂowlog w−l1landtheorderingrelationsasdeﬁnedindeﬁnition3.3.in
steps9to11,thelength-one-looptransitionsandtheirrespectiveinputandout-
putarcsareaddedtothenetdiscoveredbythe α-algorithm.theworkﬂownet
withtheaddedlength-oneloopsisreturnedinstep12.
theorem 4.5. letn=(p,t,f) be a sound swf-net and let w be a loop-
completeworkﬂowlogof n.usingtheorderingrelationsasindeﬁnition3.3,
α+(w)=nmodulorenamingofplaces.
proof.ifnisanone-loop-freesoundswf-net,the α+-algorithmworksasthe
α-algorithm. if nis not an one-loop-free sound swf-net, given theorem 4.3,
it suﬃces to prove fl1lcorrectly connects all length-one-loops transitions to
thediscoverednet( pw/prime,tw/prime,fw/prime).weprovethisintwoparts:ﬁrstweprove
thearcs( t,p (a\b,b\a))and(p(a\b,b\a),t),createdinstep5c,pointtoplaces
inpw−l1l.inotherwords, p(a\b,b\a)∈pw−l1l.secondweprove p(a\b,b\a)is
therightplace.
part 1:arcs are connected to existing places. we prove this by showing
(a\b,b\a)∈xw(deﬁnition2.16(4))in α-algorithm.let t∈l1lbealength-
one-looptransition.fromproperty4.2,weknowtherearetransitions x,y∈t/prime,
suchthat x→wt,t→wy,x→wyand•y=•t.x∈a\bbecausex>wtand
t/negationslash>wx.similarly, y∈b\a.because x→wy,x∈a\bandy∈b\a,wecan
conclude( a\b)→w(b\a).toshow( a\b,b\a)∈xw,itremainstoprove
thatforany x1,x2∈a\b,x1#wx2andforany y1,y2∈b\a,y1#wy2.butthisfollowsdirectlyfromtheorem3.6(1-2).notethat x1•∩x2•/negationslash=∅because
x1•∩•t/negationslash=∅,x2•∩•t/negationslash=∅and|•t|=1.similarreasoningappliesto y1andy2.
part 2:hereweneedtoprovethatthearcsareconnectedtotherightplace.
this means ( a\b,b\a)∈yw(deﬁnition 2.16(5)) in the α-algorithm. let
usﬁrstcheckif b\aismaximal.let t∈l1lbealength-one-looptransition.
assume there exists y∈t/primesuch that ( a\b)>wy,y∈b,•t∩•y/negationslash=∅and
y/negationslash∈b\a.sincey∈bbuty/negationslash∈b\a,theny∈aandy>wt.however,this
is a contradiction because y•∩•y/negationslash=∅(fromy∈t/prime)a n d •t∩•y/negationslash=∅imply
y•∩•t/negationslash=∅.thus,when yﬁresitconsumesthetokenin •tanddoesnotreturn
it.sincewearedealingwithlogsofsafenets, y> wtisimpossible.asimilar
reasoningisusedtoprove a\bismaximal. sinceboth a\bandb\aare
proventobemaximal, a\b,b\a)∈ywandthearcsin fl1lareconnected
totherightplace. ✷
n1i a o db
c
i a o d
cn2
n3b
i a o hc
df
gb e
n4
i aib
cf
e
d h
eo j
fig. 5.examples of sound swf-nets that the α+-algorithm correctly mines.
theoriginalnetinfigure2andthenets n1−4infigure5satisfytherequire-
mentsstatedintheorem4.5.therefore,theyareallcorrectlydiscoveredbythe
α+-algorithm.infact,the α+canbeextendedtocorrectlydiscovernetsbeyond
theclassofsoundswf-net.thesenetsarediscussedinthenextsection.
5 extension beyond swf-nets
toenablethe α+-algorithmtocorrectlydiscovernetsbeyondtheclassofsound
swf-net,step11indeﬁnition4.4mustbemodiﬁedto:
11.fw=fw/prime∪
{(t,p (a,b ))∈(l1l×pw)|∃ (t/prime,p(a/prime,b/prime))∈fl1l[t=t/prime∧a⊆a/prime∧b⊆b/prime]}∪
{(p(a,b ),t)∈(pw×l1l)|∃ (p(a/prime,b/prime),t/prime)∈fl1l[t=t/prime∧a⊆a/prime∧b⊆b/prime]}i ab e
c fd o g
fig. 6.example of a sound wf-net that the modiﬁed version of the α+-algorithm (the
α++) correctly mines.
as an example, see the net in figure 6. this net is not a swf-net, but it is
correctly mined by the modiﬁed version of the α+-algorithm. let us call α++
themodiﬁedversionofthe α+-algorithm.notethatthe α++-algorithmbehaves
exactlyasthe α+-algorithmwhendealingwithloop-completeworkﬂowlogsof
soundswf-nets.thishappensbecausestep11indeﬁnition4.4canberewritten
to:
fw=fw/prime∪
{(t,p (a,b ))∈(l1l×pw)|∃ (t/prime,p(a/prime,b/prime))∈fl1l[t=t/prime∧a=a/prime∧b=b/prime]}∪
{(p(a,b ),t)∈(pw×l1l)|∃ (p(a/prime,b/prime),t/prime)∈fl1l[t=t/prime∧a=a/prime∧b=b/prime]}
theargumentabovemakesittrivialtoseethatalltheproofsgiveninsection
4 are valid when the α++-algorithm is used. in fact, the emit mining tool
implementsthe α++-algorithm.
wethinkthe α++-algorithmcorrectlyminesall soundnetsofthefollowing
class:
deﬁnition 5.1. (extended swf-nets) a wf-net n=(p,t,f)i sa n ex-
tended swf-net (structuredworkﬂownet)if,andonlyif:
1. forall p∈pandt∈twith(p,t)∈fand•t∩t•=∅:|p•|>1implies
|•t|=1.
2. forall p∈pandt∈twith(p,t)∈fand•t∩t•=∅:|•t|>1implies
|•p|=1.
3. therearenoimplicitplaces.
4. forall t∈t:•t∩t•/negationslash=∅implies •t=t•and(forall t/prime∈t:t/prime•∩•t/negationslash=∅
impliest/prime•⊆•t).
extended swf-nets have three main properties. the ﬁrst is that all length-
one-loop transitions have all of their input places as output places too. this
propertyassuresthatlength-one-looptransitionscanbesafelyremovedduring
the pre-processing phase. the second property is that if a transition tshares
outputplaceswithanotherlength-one-looptransition t/prime,thenalloutputplaces
oftare connected to t/primetoo. this property assures the correct detection of all
theplacestowhichthelength-one-looptransitionsshouldbeconnectedto.thethird property is that, when removing all the length-one-loop transitions (and
theirconnectingarcs)fromanextendedswf-net,theremainingnetisaswf-
net.thispropertyassuresthe α-algorithmcorrectlyminestheremainingnet.asanexample,notethatthesoundwf-netinfigure6isanextendedswf-net,
butthesoundwf-netinfigure7isnot.
i ae
c fd o goriginal net:
discovered net
i ae
c fd o g
fig. 7.example of a sound wf-net that the modiﬁed version of the α+-algorithm (the
α++) does not correctly mine.
6 literature on process mining
theideaofprocessminingisnotnew[7,9–11,17–19,24,25,32,33,5,36,6].cook
andwolfhaveinvestigatedsimilarissuesinthecontextofsoftwareengineeringprocesses. in [9] they describe three methods for process discovery: one using
neuralnetworks,oneusingapurelyalgorithmicapproach,andonemarkovian
approach.theauthorsconsiderthelattertwothemostpromisingapproaches.thepurelyalgorithmicapproachbuildsaﬁnitestatemachinewherestatesare
fused if their futures (in terms of possible behavior in the next k steps) are
identical.themarkovianapproachusesamixtureofalgorithmicandstatisticalmethodsandisabletodealwithnoise.notethattheresultspresentedin[9]are
limitedtosequentialbehavior.cookandwolfextendtheirworktoconcurrent
processesin[10].theyproposespeciﬁcmetrics(entropy,eventtypecounts,pe-
riodicity, and causality) and usethese metrics to discover models out of event
streams.however,theydonotprovideanapproachtogenerateexplicitprocessmodels.recallthattheﬁnalgoaloftheapproachpresentedinthispaperisto
ﬁndexplicitrepresentationsforabroadrangeofprocessmodels,i.e.,wewant
to be able to generate a concrete petri net rather than a set of dependencyrelationsbetweenevents.in[11]cookandwolfprovideameasuretoquantify
discrepancies between a process model and the actual behavior as registered
usingevent-based data. theidea of applying processmining inthe context ofworkﬂowmanagementwasﬁrstintroducedin[7].thisworkisbasedonworkﬂow
graphs,whichareinspiredbyworkﬂowproductssuchasibmmqserieswork-
ﬂow(formerlyknownasflowmark)andinconcert.inthispaper,twoproblemsaredeﬁned.theﬁrstproblemistoﬁndaworkﬂowgraphgeneratingeventsap-
pearing in a given workﬂow log. the second problem is to ﬁnd the deﬁnitionsofedgeconditions.aconcretealgorithmisgivenfortacklingtheﬁrstproblem.
the approach is quite diﬀerent from other approaches: because the nature of
workﬂowgraphsthereisnoneedtoidentifythenature(andoror)ofjoinsand splits. as shown in [22], workﬂow graphs use true and false tokens which
donotallowforcyclicgraphs.nevertheless,[7]partiallydealswithiterationby
enumeratingalloccurrencesofagiventaskandthenfoldingthegraph.however,theresultingconformalgraphisnotacompletemodel.in[25],atoolbasedon
thesealgorithmsispresented.schimm[32,33]hasdevelopedaminingtoolsuit-
ablefordiscoveringhierarchicallystructuredworkﬂowprocesses.thisrequiresallsplitsandjoinstobebalanced.herbstandkaragiannisalsoaddresstheissue
of process mining in the context of workﬂow management [18,17,19] using an
inductiveapproach.theworkpresentedin[19]islimitedtosequentialmodels.
theapproachdescribedin[18,17]alsoallowsforconcurrency.itusesstochastic
taskgraphsasanintermediaterepresentationanditgeneratesaworkﬂowmodeldescribedintheadonismodelinglanguage.intheinductionsteptasknodes
aremergedandsplitinordertodiscovertheunderlyingprocess.anotabledif-
ferencewithotherapproachesisthatthesametaskcanappearmultipletimesintheworkﬂowmodel,i.e.,theapproachallowsforduplicatetasks.thegraph
generation technique is similar to the approach of [7,25]. the nature of splits
and joins (i.e., and or or) is discovered in the transformation step, wherethestochastictaskgraphistransformedintoanadonisworkﬂowmodelwith
block-structuredsplitsandjoins. incontrastto thepreviouspapers,ourwork
[24,36]ischaracterizedbythefocusonworkﬂowprocesseswithconcurrentbe-havior(ratherthanaddingad-hocmechanismstocaptureparallelism).in[36]
a heuristic approach using rather simple metrics is used to construct so-called
“dependency/frequencytables”and“dependency/frequencygraphs”.thepre-liminaryresultspresentedin[36]onlyprovideheuristicsandfocusonissuessuch
as noise. in [3] the emit tool is presented which uses an extended version of
theα-algorithmtoincorporatetiminginformation.nowemitalsoincorporates
theideaspresentedinthispaper.foradetaileddescriptionofthe α-algorithm
andaproofofitscorrectnesswereferto[6].foradetailedexplanationofthe
constructsthe α-algorithmdoesnotcorrectlyminesee[26].
process mining can be seen as a tool in the context of business (process)
intelligence(bpi).in[16]abpitoolsetontopofhp’sprocessmanagerisde-scribed. the bpi tools set includes a so-called “bpi process mining engine”.
however,thisenginedoesnotprovideanytechniquesasdiscussedbefore.instead
itusesgenericminingtoolssuchassasenterpriseminerforthegenerationofdecisiontreesrelatingattributesofcasestoinformationaboutexecutionpaths
(e.g., duration). in order to do workﬂow mining it is convenient to have a so-
called “process data warehouse” to store audit trails. such as data warehousesimpliﬁesandspeedsupthequeriesneededtoderivecausalrelations.in[13,27,
28]thedesignofsuchwarehouseandrelatedissuesarediscussedinthecontext
ofworkﬂowlogs.moreover,[28]describesthepisatoolwhichcanbeusedtoextractperformancemetricsfromworkﬂowlogs.similardiagnosticsareprovided
bythearisprocessperformancemanager(ppm)[20].thelatertooliscom-mercially available and a customized version of ppm is the staﬀware process
monitor(spm)[34]whichistailoredtowardsminingstaﬀwarelogs.notethat
none of the latter tools is extracting the process model. the main focus is onclusteringandperformanceanalysisratherthancausalrelationsasin[7,9–11,
17–19,24,25,32,33,36].
morefromatheoreticalpointofview,therediscoveryproblemdiscussedin
thispaperisrelatedtotheworkdiscussedin[8,15,30].inthesepapersthelim-
itsofinductiveinferenceareexplored.forexample,in[15]itisshownthatthe
computational problem of ﬁnding a minimum ﬁnite-state acceptor compatiblewith given data is np-hard. several of the more generic concepts discussed in
these papers could be translated to the domain of process mining. it is possi-
ble to interpret the problem described in this paper as an inductive inferenceproblem speciﬁed in terms of rules, a hypothesis space, examples, and criteria
for successful inference. the comparison with literature in this domain raises
interestingquestionsforprocessmining,e.g.,howtodealwithnegativeexam-ples (i.e., suppose that besides log wthere is a log vof traces that are not
possible,e.g.,addedbyadomainexpert).however,despitethemanyrelations
with the work described in [8,15,30] there are also many diﬀerences, e.g., we
areminingatthenetlevelratherthansequentialorlowerlevelrepresentations
(e.g.,markovchains,ﬁnitestatemachines,orregularexpressions).forasurveyofexistingresearch,wealsoreferto[5].
7 conclusion
thefocusofthispaperhasbeentheextensionofthe α-algorithmsothatitcan
mineallsoundswf-nets.thenewalgorithmiscalled α+.theα-algorithmis
proventocorrectlydiscoversoundswf-netswithoutlenght-oneorlength-twoloops. the extension involved changes in the pre- and post-processing phases.
first,length-twoloopsweretackledbyredeﬁningthenotionoflogcompleteness
and the possible ordering relations among tasks in the process. this solution
dealt with the pre-processing phase only. then, the solution to tackle length-
two loops was extended to tackle also length-one loops. the key property isthat length-one-loop tasks are connected to single places in sound swf-nets.
therefore,the α
+-algorithm(i)removesalloccurrencesoflength-oneloopsfrom
the input log, (ii) feeds in the α-algorithm with this log and the new deﬁned
orderingrelationsoverthislog,and(iii)reconnectsallthelength-onelooptasks
totheirrespectiveplaceinthenetthe α-algorithmproduced.weprovedthat
theα+-algorithmcorrectlyminesnetsintheclassofsoundswf-nets.thisnew
algorithmisimplementedintheemittool7.
inthispaperaformalapproachhasbeenpresented.wepresupposeperfect
information: (i) the log must be complete (i.e., if a task can follow another
7theemittoolisavailableatourresearchgroup’swebsite(www.processmining.org).taskdirectly,thelogcontainsanexampleofthisbehavior)and(ii)thereisno
noise in the log (i.e., everything that is registered in the log is correct). theadvantages of a formal approach is that we can proveunder which conditions
ouralgorithmwillcertainlydiscovertherightworkﬂownet.however,reallogs
arerarelycompleteand/ornoisefree.forthisreasonwealsotrytodevelopedheuristicminingtechniquesandtoolswhicharelesssensitivefornoiseandthe
incompletenessoflogs.
however,notethatevennoisyorincompletelogs not alwaysmakeitimpos-
sible to use the algorithm α
+orα. the reason is that real logs usually also
containsmoredatathanweassume.thisextradatamayhelpincorrectlyin-
ferringtheorderingrelationsevenifthelogisincompleteornoisy.additionally,basedonthisextradata,theworkﬂowloggivenasinputcanalsobetreatedto
containallnecessarytransitionsandloops.asaresult,thepre-processingphase
ismodiﬁed,buttheprocessingandpost-processingphasesremainthesame.
infutureresearchwetrytodevelopstrongerminingalgorithmsthatcandeal
withawiderclassofworkﬂownets.
acknowledgements
a.k.a.demedeiroswouldliketothankp.c.w.vandenbrandforthehelpfuldiscussionsabouttheoremproving.
references
1. w.m.p. van der aalst. veriﬁcation of workﬂow nets. in p. az´ ema and g. balbo,
editors, application and theory of petri nets 1997 , volume 1248 of lecture notes
in computer science , pages 407–426. springer-verlag, berlin, 1997.
2. w.m.p. van der aalst. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers , 8(1):21–66, 1998.
3. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
modelsfromtimedlogs. iny.han,s.tai,andd.wikarski,editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
4. w.m.p.vanderaalstandk.m.vanhee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
5. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering, accepted for publication, 2003.
6. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering (tkde), accepted for publication, 2003.
7. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.
8. d. angluin and c.h. smith. inductive inference: theory and methods. computing
surveys, 15(3):237–269, 1983.9. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
10. j.e. cook and a.l. wolf. event-based detection of concurrency. in proceedings
of the sixth international symposium on the foundations of software engineering(fse-6), pages 35–45, 1998.
11. j.e. cook and a.l. wolf. software process validation: quantitatively measuring
the correspondence of a process to a model. acm transactions on software
engineering and methodology , 8(2):147–176, 1999.
12. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts
in theoretical computer science . cambridge university press, cambridge, uk,
1995.
13. j. eder, g.e. olivotto, and wolfgang gruber. a data warehouse for workﬂow
logs. in y. han, s. tai, and d. wikarski, editors, international conference on
engineering and deployment of cooperative information systems (edcis 2002) ,
volume 2480 of lecture notes in computer science , pages 1–15. springer-verlag,
berlin, 2002.
14. l. fischer, editor. workﬂow handbook 2001, workﬂow management coalition .
future strategies, lighthouse point, florida, 2001.
15. e.m.gold. complexityofautomatonidentiﬁcationfromgivendata. information
and control , 37(3):302–320, 1978.
16. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors, proceedings of 27th international conference on very large data bases
(vldb’01) , pages 159–168. morgan kaufmann, 2001.
17. j. herbst. dealing with concurrency in workﬂow induction. in u. baake, r. zo-
bel, and m. al-akaidi, editors, european concurrent engineering conference .s c s
europe, 2000.
18. j. herbst. ein induktiver ansatz zur akquisition und adaption von workﬂow-
modellen . phd thesis, universit¨ at ulm, november 2001.
19. j. herbst and d. karagiannis. integrating machine learning and workﬂow man-
agementtosupportacquisitionandadaptationofworkﬂowmodels. international
journal of intelligent systems in accounting, finance and management , 9:67–92,
2000.
20. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
21. s. jablonski and c. bussler. workﬂow management: modeling concepts, architec-
ture, and implementation . international thomson computer press, london, uk,
1996.
22. b. kiepuszewski. expressiveness and suitability of languages for con-
trol flow modelling in workﬂows (submitted) . phd thesis, queens-
land university of technology, brisbane, australia, 2002. available viahttp://www.tm.tue.nl/it/research/patterns.
23. f. leymann and d. roller. production workﬂow: concepts and techniques .
prentice-hall ptr, upper saddle river, new jersey, usa, 1999.
24. l. maruster, a.j.m.m. weijters, w.m.p. van der aalst, and a. van den bosch.
process mining: discovering direct successors in process logs. in proceedings of
the 5th international conference on discovery science (discovery science 2002) ,
volume 2534 of lecture notes in artiﬁcial intelligence , pages 364–373. springer-
verlag, berlin, 2002.25. m.k. maxeiner, k. k¨ uspert, and f. leymann. data mining von workﬂow-
protokollen zur teilautomatisierten konstruktion von prozemodellen. in proceed-
ings of datenbanksysteme in b¨ uro, technik und wissenschaft , pages 75–84. infor-
matik aktuell springer, berlin, germany, 2001.
26. a.k.a. de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. workﬂow
mining: current status and future directions. in robert meersman, zahir tari, anddouglas c. schmidt, editors, on the move to meaningful internet systems 2003:
coopis, doa, and odbase ,v o l u m e2 8 8 8o f lncs, pages 389–406. springer-
verlag, 2003.
27. m. zur m¨ uhlen. process-driven management information systems combining
data warehouses and workﬂow technology. in b. gavish, editor, proceedings of
the international conference on electronic commerce research (icecr-4) ,p a g e s
550–566. ieee computer society press, los alamitos, california, 2001.
28. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1–10. ieee computer society press, los alamitos, california, 2000.
29. t. murata. petri nets: properties, analysis and applications. proceedings of the
ieee, 77(4):541–580, april 1989.
30. l. pitt. inductive inference, dfas, and computational complexity. in k.p. jan-
tke, editor, proceedings of international workshop on analogical and inductive
inference (aii) , volume 397 of lecture notes in computer science , pages 18–44.
springer-verlag, berlin, 1889.
31. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
32. g. schimm. process mining. http://www.processmining.de/.33. g. schimm. process miner - a tool for mining process schemes from event-
based data. in s. flesca and g. ianni, editors, proceedings of the 8th european
conference on artiﬁcial intelligence (jelia) ,v o l u m e2 4 2 4o f lecture notes in
computer science , pages 525–528. springer-verlag, berlin, 2002.
34. staﬀware. staﬀware process monitor (spm). http://www.staﬀware.com, 2002.
35. h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing workﬂow
processes using woﬂan. the computer journal , 44(4):246–279, 2001.
36. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data using little thumb. integrated computer-aided engi-
neering, 10(2):151–162, 2003.