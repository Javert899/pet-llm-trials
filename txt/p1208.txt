using free-choice nets for process mining and
business process management
wil m.p. van der aalst
process and data science (informatik 9), rwth aachen university, aachen, germany and
fraunhofer-institut für angewandte informationstechnik (fit), sankt augustin, germany
email: wvdaalst@pads.rwth-aachen.de
abstract —free-choice nets, a subclass of petri nets, have been
studied for decades. they are interesting because they have many
desirable properties normal petri nets do not have and can be
analyzed efﬁciently. although the majority of process models used
in practice are inherently free-choice, most users (even modeling
experts) are not aware of free-choice net theory and associated
analysis techniques. this paper discusses free-choice nets in the
context of process mining and business process management. for
example, state-of-the-art process discovery algorithms like the
inductive miner produce process models that are free-choice.
also, hand-made process models using languages like bpmn
tend to be free-choice because choice and synchronization are
separated in different modeling elements. therefore, we introduce
basic notions and results for this important class of process
models. moreover, we also present new results for free-choice
nets particularly relevant for process mining. for example, we
elaborate on home clusters and lucency as closely-related and
desirable correctness notions. we also discuss the limitations
of free-choice nets in process mining and business process
management, and suggest research directions to extend free-
choice nets with non-local dependencies.
i. i ntroduction
free-choice nets can be used to model processes
that include process patterns such as sequence, choice,
loop, and concurrency. compared to general petri nets they
require choice and synchronization to be separable. this is
automatically the case in languages having explicit split and
join operators (also called connectors or gateways) that do
not mix choice and synchronization. for example, when using
business process modeling notation (bpmn) with only and
and xor gateways, the behavior is automatically free-choice .
although bpmn allows for many advanced constructs, the
most widely used bpmn constructs can be easily mapped
onto free-choice nets.
in this paper, we relate recent developments in free-choice
nets to business process management (bpm) in general and
process mining in particular. the desire to manage and im-
prove processes is not new. the ﬁeld of scientiﬁc management
emerged in the 1890-ties with pioneers like frederick winslow
taylor (1856-1915) [31]. taylor already systematically ana-
lyzed manually recorded data in order to uncover potential
process improvements. with the availability of computers,
the focus shifted to automation. in the 1970-ties there was
the expectation that ofﬁce would would become increasingly
automated, not requiring human intervention. pioneers like
skip ellis [18] and michael zisman [34] worked on so-calledofﬁce automation systems . the ideas lead to the development
of workﬂow management (wfm) systems in the 1990-ties
(see [8]). later, bpm systems broadened the scope from
automation to management. in hindsight, these approaches
were not so successful. for example, as the longitudinal
study in [28] shows, many workﬂow implementations failed.
as a result, wfm/bpm technology is often considered too
expensive and only feasible for highly-structured processes.
at the same time, people continued to model processes using
ﬂowchart-like description languages. for example, modeling
tools such as aris and signavio have been used to model
millions of processes all over the globe. modeling is less
costly than automation, but the effect is often limited. due to
the disconnect between reality and such hand-made models,
the bpm market was shrinking until recently. however, this
changed with the uptake of process mining [2].
process mining dramatically changed the way we look at
process models and operational processes. even seemingly
simple processes like purchase-to-pay (p2p) and order-to-
cash (o2c) are often amazingly complex, and traditional
hand-made process models fail to capture the true fabric
of such processes. process mining bridges the gap between
between process science (i.e., tools and techniques to improve
operational processes) and data science (i.e., tools and tech-
niques to extract value from data).
fig. 1. process model discovered using prom’s inductive miner.
figure 1 shows prom’s inductive miner [22] in action. based
on (heavily ﬁltered) data from sap’s purchase-to-pay (p2p)
process, a process model is derived. process discovery is just
one of several process mining tasks. first, event data need
to be extracted from information systems like sap. process
discovery techniques transform such event data into process
models (e.g., bpmn, petri nets, and uml activity diagrams).
there are simple approaches like creating so-called directly-
follows-graphs (dfgs) that do not discover concurrency thus
having obvious problems [4]. dozens, if not hundreds, ofmore sophisticated algorithms were proposed [12], [2], [13],
[20], [21], [22], [33]. using replay and alignment techniques
it is possible to do conformance checking and relate process
models (hand-made or discovered) with event data. this can
be used to discover differences between reality and model
[2], [16], [30]. moreover, the model can be extended with
additional perspectives, e.g., organizational aspects, decisions,
and temporal aspects.
fig. 2. bpmn model discovered using celonis.
currently, there are over 35 commercial process mining ven-
dors (abbyy timeline, aris process mining, businessop-
tix, celonis process mining, disco/fluxicon, everﬂow, lana,
mavim, mpm, minit, pafnow, qpr, etc.) and process mining
is applied in most of the larger organizations. figure 2 shows
a bpmn model discovered using the celonis process mining
software. the same model can also be used for conformance
checking and show where reality and model deviate.
unlike traditional wfm/bpm technologies, there is a direct
connection to the data. this allows stakeholders to spot
inefﬁciencies, delays, and compliance problems in real-time.
process mining revitalized the bpm discipline, as is proven by
the valuation of process mining ﬁrms. for example, celonis is
currently the ﬁrst and only german “decacorn” (i.e., a start-up
whose value is considered to be over $10 billion).
fig. 3. a free-choice net generated from the models in figures 1 and 2.
so how this related to free-choice nets? process models
play a key role in bpm and process mining, and these
models can often be viewed as free-choice. commonly used
process notations are dfgs, bpmn models, petri nets, and
process trees. for example, the inductive mining approach
uses process trees [22]. although not visible, figures 1 and
2 were actually generated using this approach. process trees
can be visualized using bpmn or petri nets. figure 3 shows
the petri net representation of the process tree. any process
tree corresponds to a so-called free-choice net having the same
behavior. later we will provide a formal deﬁnition for these
notions. at this stage, it is sufﬁcient to know that, in a free-
choice net, choice and synchronization can be separated.any process tree can be converted to a free-choice net.
moreover, a large class of bpmn models is inherently free-
choice. in a bpmn model there are ﬂow objects such as
events, activities, and gateways that are connected through
directed arcs and together form a graph [26]. there are many
modeling elements, but most process modelers use only a
small subset [24]. for example, in many models, only ex-
clusive gateways (for xor-splits/joins) and parallel gateways
(for and-splits/joins) are used. such models can be converted
to free-choice nets [27]. it is also possible to convert bpmn
models with inclusive gateways (i.e., or-splits/joins) into free-
choice nets (as long as the splits and joins are matching).
since most process discovery techniques discover process
models that are free-choice and also people modeling pro-
cesses tend to come up with free-choice models, this is an
interesting class to be studied. therefore, this paper focuses
on free-choice models. the goal is to expose people interested
in bpm and process mining to free-choice-net theory.
section ii introduces preliminaries, including petri nets,
free-choice nets, and lucency. luceny is a rather new notion
which states that there cannot be two states enabling the
same set of activities. section iii focuses on the class of
process models having so-called home clusters . this class
extends the class of sound models that can always terminate
(e.g., no deadlocks) with the class of models that have a
regeneration point. free-choice nets with home clusters are
guaranteed to be lucent. hence, these nets are interesting for
a wide range of applications and an interesting target class
for process mining. section iv discusses the limitations of
free-choice nets, e.g., the inability to express non-local (i.e.,
long-term) dependencies. these insights may help to develop
better process discovery techniques that produce more precise
models. section v concludes this paper.
ii. p reliminaries
free-choice nets are well studied [14], [15], [19], [32]. the
deﬁnite book on the structure theory of free-choice nets is
[17]. to keep the paper self-contained, ﬁrst standard petri net
notions are introduced. if unclear, consider reading one of the
standard introductions [11], [25], [29]. most of the notations
used are adopted from [6].
p1
t2t1
t3t5
t6p6
p8p2
t4
p7 p3p4
p5
fig. 4. a petri net n= (p; t; f )withp=fp1; p2; : : : p 8g,t=
ft1; t2; : : : ; t 6g, andf=f(p1; t1);(p1; t2);(t1; p4); : : : ; (t6; p8)gthat is
not free-choice. the initial marking is m= [p1], i.e., only place p1contains
a token.a. petri nets
figure 4 shows a petri net with eight places, six transitions,
and twenty arcs.
deﬁnition 1 (petri net): apetri net is a tuplen= (p;t;f )
withpthe non-empty set of places, tthe non-empty set of
transitions such that p\t=;, andf(pt)[(tp)
the ﬂow relation such that the graph (p[t;f)is (weakly)
connected.
deﬁnition 2 (pre- and post-set): letn= (p;t;f )be a
petri net. for any x2p[t:x=fyj(y;x)2fgand
x=fyj(x;y)2fg.
for example, in figure 4, p2 =ft1;t2g,t5 =
fp4;p6;p7g,t1=fp2;p3;p4g, andp8=;.
deﬁnition 3 (marking): letn= (p;t;f )be a petri net. a
markingmis a multiset of places, i.e., m2b(p).1(n;m )
is a marked net.
in the marking shown in figure 4, transitions t1andt2are
enabled . an enabled transition tcan ﬁre consuming a token
from each input place in tand producing a token for each
output place in t.
deﬁnition 4 (enabling, firing rule, reachability): let
(n;m )be a marked net with n= (p;t;f ). transitiont2t
is enabled iftm.2this is denoted by (n;m )[ti(each of
t’s input placestcontains at least one token). en(n;m ) =
ft2tj(n;m )[tigis the set of enabled transitions. firing
an enabled transition tresults in marking m0= (mnt)[t.
(n;m )[ti(n;m0)denotes that tis enabled in mand ﬁringt
results in marking m0. a marking m0isreachable frommif
there exists a ﬁring sequence such that (n;m )[i(n;m0).
r(n;m ) =fm02b(p)j92t(n;m )[i(n;m0)gis
the set of all reachable markings. (n;m )[idenotes that the
sequenceis enabled when starting in marking m(without
specifying the resulting marking).
letn be the petri net shown in figure 4.
(n;[p1])[1i(n;[p4;p6;p7]) with1=ht1;t3;t4iand
(n;[p1])[2i(n;[p8])with2=ht2;t4;t3;t6i. we also
deﬁne the usual properties for petri nets.
deﬁnition 5 (live, bounded, safe, dead, deadlock-free,
well-formed): a marked net (n;m )islive if for every
reachable marking m02r(n;m )and for every transition
t2tthere exists a marking m002r(n;m0)that enables
t. a marked net (n;m )isk-bounded if for every reachable
markingm02r(n;m )and everyp2p:m0(p)k. a
marked net (n;m )isbounded if there exists a ksuch that
(n;m )isk-bounded. a 1-bounded marked net is called safe.
a placep2pisdead in(n;m )when it can never be
marked (no reachable marking marks p). a transition t2tis
dead in(n;m )when it can never be enabled (no reachable
marking enables t). a marked net (n;m )isdeadlock-free if
each reachable marking enables at least one transition. a petri
1in a multiset elements may appear multiple times, e.g., m=
[p1; p2; p2; p2] = [ p1; p23]is a multiset with four elements (three have the
same value).
2m1m2(inclusion), m1[m2(union), m1nm2(difference) are deﬁned
for multisets in the usual way (i.e., taking into account the cardinalities. sets
are treated as multisets where all elements have cardinality 1.netnisstructurally bounded if(n;m )is bounded for any
markingm. a petri net nisstructurally live if there exists
a markingmsuch that (n;m )is live. a petri net niswell-
formed if there exists a marking msuch that (n;m )is live
and bounded.
deﬁnition 6 (proper petri net): a petri netn= (p;t;f )
isproper if all transitions have input and output places, i.e.,
for allt2t:t6=;andt6=;.
deﬁnition 7 (strongly connected): a petri net n=
(p;t;f )isstrongly connected if there is a directed path
between any pair of nodes.
note that a strongly connected net is also proper. figure 4
shows that the converse does not hold, the net is proper, but
not strongly connected.
deﬁnition 8 (home marking): let(n;m )be a marked
net. a marking mhis ahome marking if for every reachable
markingm02r(n;m ):mh2r(n;m0).
the marked petri net in figure 4 has one home marking:
[p8].
b. free-choice nets
the concepts and notations discussed apply to any petri net.
now we focus on the class of free-choice nets . as indicated
in the introduction, this is an important class because most
process models used in the context of bpm and process mining
are free-choice.
deﬁnition 9 (free-choice net): letn= (p;t;f )be a
petri net.nisfree-choice net if for anyt1;t22t:t1=t2
ort1\t2=;.
the petri net in figure 4 is not free-choice because t5\
t6=fp6;p7g6=;, butt56=t6. if we remove the places p4
andp5, then the net becomes free-choice. the places model
a so-called long-term (or non-local) dependency : the choice
betweent1andt2in the beginning is controlling the choice
betweent5andt6at the end.
p1
t2t1
t3t5
t6p4
p6p2
t4
p5 p3p7t7 t8
fig. 5. a strongly-connected free-choice net.
figure 5 is free-choice. transitions t1andt2share an input
place, butt1=t2=fp1g. transitions t5andt6share an
input place, butt5=t6=fp4;p5g.
the process model discovered using prom (figure 1) and
celonis (figure 2) based on ﬁltered sap data is free-choice.
figure 3 shows the corresponding free-choice net.c. lucency
the notion of lucency was ﬁrst introduced in [3]. a marked
petri net is lucent if there are no two different reachable
markings enabling the same set of transitions, i.e., states are
fully characterized by the transitions they enable.
deﬁnition 10 (lucent petri nets): let(n;m )be a marked
petri net. (n;m )islucent if and only if for any m1;m22
r(n;m ):en(n;m 1) =en(n;m 2)impliesm1=m2.
the marked petri nets in figures 3 and 5 are lucent, i.e.,
there are no two reachable markings that enable the same set
of transitions. the marked petri net in figure 4 is not lucent.
markingsm1= [p2;p3;p4]andm2= [p2;p3;p5]are both
reachable and enable transitions t3andt4.
lucency is often a desirable property. think, for example,
of an information system that has a user interface showing
what the user can do. in this setting, lucency implies that
the offered actions fully determine the internal state and the
system will behave consistently from the user’s viewpoint. if
the information system would not be lucent, the user could
encounter situations where the set of offered actions is the
same, but the behavior is very different. another example is
the worklist of a workﬂow management system that shows the
workitems that can or should be executed. lucency implies
that the state of a case can be derived based on the workitems
offered for it [6].
characterizing the class of systems that are lucent is a
foundational and also challenging question [3], [6], [7].
iii. f ree-choice nets with home clusters
workﬂow nets form a subclass of petri nets starting with a
source place start and ending with a sink place end[9]. the
modeled workﬂow can be instantiated by putting tokens on the
input place start. in the context of workﬂow nets, a correctness
criterion called soundness has been deﬁned [9]. a workﬂow
net is sound if and only if the following three requirements
are satisﬁed: for each case it is always still possible to reach
the state which just marks place end(option to complete), if
place endis marked all other places are empty for a given case
(proper completion), and it should be possible to execute an
arbitrary activity by following the appropriate route through
the workﬂow net (no dead transitions) [9]. in [1], it was
shown that soundness is decidable and can be translated into
a liveness and boundedness problem, i.e., a workﬂow is sound
if and only if the corresponding short-circuited net (i.e., the
net where place end is connected to place start) is live and
bounded. this can be checked in polynomial time for free-
choice nets [1]. figures 3 and 4 show two sound workﬂow
nets. figures 5 and 6 show free-choice nets that do not have a
designated start and end place. hence, soundness is not deﬁned
for these models.
a strongly-connected petri net cannot be a workﬂow net.
however, the lion’s share of petri net theory focuses on
strongly-connected petri nets. therefore, [6] investigated a
new subclass of petri nets having a so-called home cluster .
p1
t2t1
t3t5
t6p4
p6p2
t4
p5 p3t7fig. 6. a lucent free-choice net having two home clusters.
first, we deﬁne the notion of a cluster . a cluster is a maxi-
mal set of connected nodes, only considering arcs connecting
places to transitions.
deﬁnition 11 (cluster): letn= (p;t;f )be a petri net
andx2p[t. the cluster of nodex, denoted [x]cis the
smallest set such that (1) x2[x]c, (2) ifp2[x]c\p, then
p[x]c, and (3) ift2[x]c\t, thent[x]c.[n]c=f[x]cj
x2p[tgis the set of clusters of n.mrk(c) = [p2c\p]
is the marking which only marks the places in c.
figure 6 has ﬁve clusters: [n]c=ffp1;t1;t2g;fp2;t3g;
fp3;p4g;fp4;p5;t5;t6g;fp6;t7gg.
a home cluster is a cluster that serves as a “target” that
can always be reached again. hence, it can be seen as a
generalization of soundness.
deﬁnition 12 (home clusters): let(n;m )be marked petri
net.cis ahome cluster of(n;m )if and only if c2[n]c
(i.e.,cis a cluster) and mrk(c)is a home marking of
(n;m ). if such acexists, we say that (n;m )has a home
cluster.
figure 6 has two home clusters: c1=fp4;p5;t5;t6gand
c2=fp6;t7g.
property 1 (sound workﬂow nets have a home cluster):
let(n;m )be a sound workﬂow net. (n;m )has a home
cluster.
also, all short-circulated sound workﬂow nets are guaran-
teed to have a home cluster. all marked petri nets show thus
far (i.e., figures 3-6) have a home cluster. however, the nets
in figures 5 and 6 are not workﬂow nets.
most of the results for petri nets and in particular free-
choice nets are deﬁned for well-formed nets [11], [14], [15],
[17], [19], [25], [29], [32]. recall that a petri net is well-
formed if there exists a marking that is live and bounded.
some well-known properties of well-formed free-choice nets:
a well-formed free-choice net is strongly connected.
a bounded and strongly-connected marked free-choice
net is live if and only if it is deadlock free.
a marked free-choice net is live if and only if every
proper siphon includes a marked trap.
well-formed free-choice nets are covered by p-
components and t-components.
well-formedness can be decided in polynomial time for
free-choice nets.
live and bounded free-choice nets have home markings.interestingly, marked free-choice nets having a home cluster
donotneed to be well-formed. yet, free-choice nets having
a home cluster have interesting properties as demonstrated in
[6]. a surprising result is that free-choice nets having a home
cluster are lucent.
theorem 1 (home clusters ensure lucency [6]): let
(n;m )be a marked proper free-choice net having a home
cluster. (n;m )is lucent.
the theorem can be used to show that the process models
in figures 3, 5, and 6 are lucent.
theorem 1 is surprising since there are t-systems (i.e.,
marked graphs) that are live, bounded, safe, well-formed, and
strongly connected that are not lucent. a proof of theorem 1 is
outside of the scope of this paper (see [6] for details). however,
it is important to note that the proof does not rely on any of
the classical results for well-formed nets. instead, several new
concepts are introduced, such as:
expediting transitions in a ﬁring sequence of a free-
choice net. as long as the order per cluster is maintained,
transitions can ﬁre earlier without causing any problems
(e.g., deadlocks).
the notion of disentangled paths , i.e., paths in the net that
start and end with a place and do not contain elements
that belong to the same cluster. a c-rooted disentangled
path ends with a place in cluster c.
ac-rooted disentangled path is safe ifcis a home
cluster. this implies that marked proper free-choice nets
having a home cluster must be safe.
the notion of conﬂict-pairs , i.e., a pair of markings such
that no transition is enabled in both markings, but if a
transition is enabled in one marking, the other marking
must mark at least one of its input places.
a marked proper free-choice net having a home cluster
cannot have any conﬂict pairs.
these results make free-choice nets having a home cluster
interesting candidate models in the context of bpm and
process mining. however, as discussed next, there are also
some limitations.
iv. a dding non-local dependencies
although many process discovery techniques return models
that can be seen as free-choice and process modelers using
bpmn are more-or-less forced to draw free-choice models,
there are some limitations when using free-choice nets. con-
sider again the petri net in figure 4, which is not free-choice
due to the places p4andp5. the process model allows for
the following four traces l1=fht1;t3;t4;t5i;ht1;t4;t3;t5i;
ht2;t3;t4;t6i;ht2;t4;t3;t6ig. note thatt1is always followed
byt5, andt2is always followed by t6. in bpmn, we
cannot express such dependencies (without resorting to data
or other more advanced constructs). ignoring the non-local
dependencies represented by the places p4andp5leads to the
bpmn model shown in figure 7.
the corresponding free-choice net is shown in figure 8.
both the bpmn model and the free-choice net allow for the
following eight traces l2=fht1;t3;t4;t5i;ht1;t3;t4;t6i;
t1 t3 t5
x + xx +
x
t2 t4 t6 x +fig. 7. a bpmn model that aims to describe the behavior in figure 4 without
local dependencies.
ht1;t4;t3;t5i;ht1;t4;t3;t6i;ht2;t3;t4;t5i;ht2;t3;t4;t6i;
ht2;t4;t3;t5i;ht2;t4;t3;t6ig. hence, the number of
possibilities doubled.
t2t1 t3 t5
t6 t4
fig. 8. the free-choice net corresponding to the bpmn model in figure 7.
most process discovery techniques will be unable to capture
such non-local dependencies. given an event log with only
traces from l1, most discovery techniques will produce a
process model that allows for l2. some of the region-based
process mining techniques can discover the process model
allowing for only l1. however, these techniques have many
other problems: they tend to produce over-ﬁtting models, can-
not handle infrequent behavior, and are very time-consuming.
therefore, it may be better to ﬁrst discover a free-choice
backbone model that is then extended to make it more precise.
concretely, one can ﬁrst discover a petri net using the induc-
tive mining approach and then add non-local dependencies.
one can use, for example, a variant of the approach in [23]
to add places. it is also possible to combine two types of arcs
as in hybrid process models [10]. in [10], we use hybrid petri
nets and ﬁrst discover a causal graph based on the event log.
based on different (threshold) parameters, we scan the event
log for possible causalities. in the second phase, we try to
learn places based on explicit quality criteria. places added
can be interpreted in a precise manner and have a guaranteed
quality. causal relations that cannot or should not be expressed
in terms of places are added as sure or unsure arcs. a similar
approach can be used for strongly correlating choices in a
free-choice net.
there is also an interesting connection to the notion of
confusion . confusion is the phenomenon that the order of
executing concurrent transitions may inﬂuence choices in the
model. here, we consider a simpler notion and consider a petri
net to be confusion-free when transitions that share an input
place either cannot be both enabled or have the same set of
input places.
deﬁnition 13 (confusion-free): a marked petri net (n;m )
withn= (p;t;f )isconfusion-free if for any two transitions
t1;t22twitht1\t26=;andt16=t2there is no reach-
able marking m02r(n;m )such thatft1;t2gen(n;m ).all models in this paper are confusion free. note that free-
choice nets are by deﬁnition confusion-free. an interesting
question is to develop automatic conversions from models that
are “almost free-choice”.
thus far concepts such as confusion-free, lucency, and home
clusters have not been exploited in process mining using tra-
ditional event logs. in [5], an algorithm is presented assuming
translucent event logs that explicitly show the enabling of
activities. however, such event logs are rarely available.
v. c onclusion
in this paper, we discussed recent results in free-choice
net theory and related these results to business process
management (bpm) in general and process mining in par-
ticular. although most discovery techniques produce free-
choice models, this property is rarely exploited explicitly.
assuming that the process model is a free-choice net with
a home cluster, provides many valuable properties relevant for
process discovery. as shown in this paper, such models are,
for example, guaranteed to be lucent. this implies that there
cannot be two states enabling the same set of activities. also,
disentangled paths rooted in a home cluster are safe, i.e., such
paths cannot contain two tokens. the open question is how to
exploit this in process mining.
we also discussed the need to add non-local dependencies.
such dependencies destroy elegant properties such as lucency.
hence, they can be seen as a secondary layer of annotations.
for example, we can connect clusters that are strongly corre-
lated. the goal is to make the process models more precise
without overﬁtting the data or destroying the structure of the
model.
acknowledgment
the author thanks the alexander von humboldt (avh)
stiftung for supporting our research.
references
[1] w.m.p. van der aalst. the application of petri nets to workﬂow
management. the journal of circuits, systems and computers , 8(1):21–
66, 1998.
[2] w.m.p. van der aalst. process mining: data science in action . springer-
verlag, berlin, 2016.
[3] w.m.p. van der aalst. markings in perpetual free-choice nets are
fully characterized by their enabled transitions. in v . khomenko and
o. roux, editors, applications and theory of petri nets 2018 , volume
10877 of lecture notes in computer science , pages 315–336. springer-
verlag, berlin, 2018.
[4] w.m.p. van der aalst. a practitioner’s guide to process mining:
limitations of the directly-follows graph. in international conference
on enterprise information systems (centeris 2019) , volume 164 of
procedia computer science , pages 321–328. elsevier, 2019.
[5] w.m.p. van der aalst. lucent process models and translucent event
logs. fundamenta informaticae , 169(1-2):151–177, 2019.
[6] w.m.p. van der aalst. free-choice nets with home clusters are
lucent. fundamenta informaticae , 181(4):273–302, 2021.
[7] w.m.p. van der aalst. reduction using induced subnets to systemat-
ically prove properties for free-choice nets. in d. buchs and j. car-
mona, editors, applications and theory of petri nets and concurrency
(pn 2021) , volume 12734 of lecture notes in computer science , pages
208–229. springer-verlag, berlin, 2021.
[8] w.m.p. van der aalst and k.m. van hee. workﬂow management:
models, methods, and systems . mit press, cambridge, ma, 2002.[9] w.m.p. van der aalst, k.m. van hee, a.h.m. ter hofstede, n. sidorova,
h.m.w. verbeek, m. v oorhoeve, and m.t. wynn. soundness of work-
ﬂow nets: classiﬁcation, decidability, and analysis. formal aspects of
computing , 23(3):333–363, 2011.
[10] w.m.p. van der aalst, r. de masellis, c. di francescomarino, and
c. ghidini. learning hybrid process models from events: process
discovery without faking conﬁdence. in j. carmona, g. engels,
and a. kumar, editors, international conference on business process
management (bpm 2017) , volume 10445 of lecture notes in computer
science , pages 59–76. springer-verlag, berlin, 2017.
[11] w.m.p. van der aalst and c. stahl. modeling business processes: a
petri net oriented approach . mit press, cambridge, ma, 2011.
[12] w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow
mining: discovering process models from event logs. ieee transac-
tions on knowledge and data engineering , 16(9):1128–1142, 2004.
[13] a. augusto, r. conforti, m. marlon, m. la rosa, and a. polyvyanyy.
split miner: automated discovery of accurate and simple business
process models from event logs. knowledge information systems ,
59(2):251–284, may 2019.
[14] e. best, j. desel, and j. esparza. traps characterize home states
in free-choice systems. theoretical computer science , 101:161–176,
1992.
[15] e. best and h. wimmel. structure theory of petri nets. in k. jensen,
w.m.p. van der aalst, g. balbo, m. koutny, and k. wolf, editors,
transactions on petri nets and other models of concurrency (topnoc
vii), volume 7480 of lecture notes in computer science , pages 162–
224. springer-verlag, berlin, 2013.
[16] j. carmona, b. van dongen, a. solti, and m. weidlich. conformance
checking: relating processes and models . springer-verlag, berlin,
2018.
[17] j. desel and j. esparza. free choice petri nets , volume 40 of cambridge
tracts in theoretical computer science . cambridge university press,
cambridge, uk, 1995.
[18] c.a. ellis and g.j. nutt. computer science and ofﬁce information
systems . xerox, palo alto research center, 1979.
[19] j. esparza. reachability in live and safe free-choice petri nets is
np-complete. theoretical computer science , 198(1-2):211–224, 1998.
[20] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering
block-structured process models from event logs: a constructive
approach. in j.m. colom and j. desel, editors, applications and theory
of petri nets 2013 , volume 7927 of lecture notes in computer science ,
pages 311–329. springer-verlag, berlin, 2013.
[21] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering
block-structured process models from event logs containing infre-
quent behaviour. in n. lohmann, m. song, and p. wohed, editors,
business process management workshops, international workshop on
business process intelligence (bpi 2013) , volume 171 of lecture notes
in business information processing , pages 66–78. springer-verlag,
berlin, 2014.
[22] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. scalable process
discovery and conformance checking. software and systems modeling ,
17(2):599–631, 2018.
[23] l. mannel and w.m.p. van der aalst. finding complex process-
structures by exploiting the token-game. in s. donatelli and s. haar,
editors, applications and theory of petri nets 2019 , volume 11522 of
lecture notes in computer science , pages 258–278. springer-verlag,
berlin, 2019.
[24] m. zur muehlen and j. recker. how much language is enough?
theoretical and practical use of the business process modeling nota-
tion. in z. bellahsene and m. léonard, editors, proceedings of the 20th
international conference on advanced information systems engineering
(caise’08) , volume 5074 of lecture notes in computer science , pages
465–479. springer-verlag, berlin, 2008.
[25] t. murata. petri nets: properties, analysis and applications. proceed-
ings of the ieee , 77(4):541–580, april 1989.
[26] omg. business process model and notation (bpmn). object man-
agement group, formal/2011-01-03, 2011.
[27] c. ouyang, m. dumas, a.h.m. ter hofstede, and w.m.p. van der aalst.
pattern-based translation of bpmn process models to bpel web
services. international journal of web services research , 5(1):42–62,
2007.
[28] h.a. reijers, i.t.p. vanderfeesten, and w.m.p. van der aalst. the
effectiveness of workﬂow management systems: a longitudinal study.
international journal of information management , 36(1):126–141, 2016.[29] w. reisig. petri nets: modeling techniques, analysis, methods, case
studies . springer-verlag, berlin, 2013.
[30] a. rozinat and w.m.p. van der aalst. conformance checking of
processes based on monitoring real behavior. information systems ,
33(1):64–95, 2008.
[31] f.w. taylor. the principles of scientiﬁc management . harper and
bothers publishers, new york, 1919.
[32] p.s. thiagarajan and k. v oss. a fresh look at free choice nets.information and control , 61(2):85–113, 1984.
[33] s.j. van zelst, b.f. van dongen, w.m.p. van der aalst, and h.m.w ver-
beek. discovering workﬂow nets using integer linear programming.
computing , 100(5):529–556, 2018.
[34] m.d. zisman. representation, speciﬁcation and automation of ofﬁce
procedures . phd thesis, university of pennsylvania, warton school of
business, 1977.