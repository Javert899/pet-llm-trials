events put into context (epic)
marcus dees∗¶, bart hompes†¶, wil m.p . van der aalst‡§¶
∗uitvoeringsinstituut werknemersverzekeringen (uwv), amsterdam, the netherlands
†artifex consultancy, eindhoven, the netherlands
‡rwth aachen university, aachen, germany
§fraunhofer institute for applied information technology
¶eindhoven university of technology, eindhoven, the netherlands
marcus.dees@uwv.nl, bart.hompes@artifexconsultancy.nl, wvdaalst@pads.rwth-aachen.de
abstract —business process models can be (re)constructed us-
ing event data recorded during the process’ execution. similarly,
event data can be used to verify conformance to prescribedbehavior and to analyze and improve the underlying processes.however, not all events that are related to a process necessarilyrelate to its control-ﬂow. some events occur in the context of theprocess. in this work, we introduce the concept of context events
to deal with these types of events. we show how distinguishingbetween contextual and control-ﬂow events aids process discoveryto obtain less complex process models. we demonstrate howvisualizing context events on top of process models helps identifypoints in the process where context events occur often, aidingunderstanding. we analyze these beneﬁts using two case studiesinvolving real-life processes and event data.
index t erms—process mining, complex event processing,
context events, business process intelligence
i. i ntroduction
a process comprises a series of activities performed in
order to achieve a speciﬁc goal, such as creating a product or
delivering a service. a process model describes the control-
ﬂow of a process, i.e., the order in which its activities should
be executed. organizations use process models in a normativeand descriptive manner to deﬁne the boundaries of a processand to make sure the process yields the desired result. modernprocesses are supported by information systems in whichthey leave digital footprints in the form of event data. suchevents typically represent the occurrence of an instance ofan activity. analyzing event data is valuable because it canreveal previously unknown properties of processes. processmining is a discipline that analyzes both event data and processmodels. it comprises three main use cases: process discovery,conformance checking, and process enhancement [1].
in many processes, there exist activities that, while bearing
a relation to the process, are not part of its prescribed control-ﬂow. these activities can occur at any time during the processexecution. for example, lab tests in a hospital are part ofthe diagnostic process, but can be executed at any timeduring the process. event data representing activities that mayoccur at any time during the process’ execution have provenproblematic for most discovery algorithms [2]. additionally,such behavior complicates conformance checking [3]. in con-clusion, it limits process understanding. existing methods toobtain more precise process models exclude such contextual
behavior during process discovery. however, by ﬁltering outbehavior, the discovered process model will not represent anyof the excluded events and lack the complete picture.
it is our aim to both locate contextual behavior in a process
and to represent it in a complete yet precise process model. tothis end, we introduce the concept of context events. context
events are events that can be linked to cases in a process,but the activity associated with the event is not part of theprescribed control-ﬂow for the process. as such, context eventsmay inﬂuence the process, but do not change the control-ﬂow
state. context events are a new class of events that are usefulto be identiﬁed and handled separately from events that arerelated to the control-ﬂow as deﬁned by a process model.
fig. 1 introduces a running example of a compensation
request process to which we will relate the ideas presented inthis paper. the process model for this example is taken from[1]. we use the alphabet athroughhto represent the activities
of the process. we also introduce three activities, x,yandz,
that are related to the process but can not be mapped to anactivity in the process’ control-ﬂow. these activities representcontact with the customer, which can occur at any given timein the process. there are few alternatives to represent thecustomer contact activities in our process model. fig. 2a shows
aτ
b
de
fstart end
p2t1p1 p3
p4cg
hp5t2
t3
t4
t5t6t8
t9
t7
(a) process model in petri net notation.
a. register request g. pay compensation
b. examine thoroughly h. reject requestc. examine casually h. reject requestd. check ticket x. incoming calle. decide y. incoming chat
f. re-initiate request z. incoming complaint
(b) legend for the transition labels of fig. 1a
fig. 1: running example of a compensation request process.aτ
b
de
fcg
h
τ
xyzτstart end
(a) fig. 1a with context activities added in a parallel branch.
a
b
de
fstartend
cg
hττ
zτ
τyτ
ττ
ττ
x
(b) discovered process model, using the inductive visual miner (ivm)
[4], based on a example dataset taken from [1] extended with context
eventsx,y, andzfor only4out of1,391 cases (0.29%).
fig. 2: two examples of how the running example can be
extended with context activities x,y andz.
how they can be modelled in a parallel branch. this doesnot allow to pinpoint which activity occurs exactly where inrelation to the other activities. fig. 2b shows a discoveredprocess model based on an example dataset taken from [1].the dataset is extended with context events x,y, andzfor
only4of the1,391 cases (0.29%). the discovered model in
fig. 2b allows activity ato be executed after b,candd, while
in the dataset this never happens. likewise, the number ofoccurrences of bpluscis no longer equal to the number of
occurrences of d. this shows the inﬂuence of only a few events
on a process discovery result. clearly, neither alternative issatisfactory. a novel approach is required that captures thenon-control-ﬂow behavior and relates it to the process model.
the remainder of this paper is structured as follows. section
ii discusses related work. section iii introduces preliminarydeﬁnitions. section iv explains our approach, while in sectionv the approach is evaluated using two case studies. sectionvi concludes the paper with suggestions for future work.
ii. r
ela ted work
context is used in many different ways. in [1], the context
in which events of a process are executed is divided intofour categories: case, process, social, and external. these mayinﬂuence the execution, performance or outcome of a process.in [5], hompes et al. relate process, case, and activity contextinformation to performance in order to identify possible causalrelationships. the multi-perspective process explorer presentedin [6] allows the user to visualize context information by se-lecting elements of a process model and comparing aggregatedattribute values between the selected parts of the model. in[3], contextual information consists of control-ﬂow events thatoccur in the neighborhood of a log pattern.our approach to distinguish control-ﬂow events from con-
text events could prove beneﬁcial for other process miningapproaches. in both [3] and [7], context is used during processdiscovery. however, no distinction is made between control-ﬂow events and events that occur in the context of the process.another way of improving the result of process discovery, isby ﬁltering out undesired behavior from an event log beforeapplying a discovery algorithm. an approach for this usinginformation theory concepts is presented in [8], while in [9]the probability of an activity occurring in the context of otheractivities is used. finally, a different approach to improving theresult of discovery is the repair approach presented in [10]. agiven process model is repaired to reﬂect the behavior presentin an event log from the same process. both model discoveryand model repair techniques can beneﬁt from our approach,as it helps reduce the number of activities and relationsbetween those activities, hence reducing the complexity of therespective task, as shown in fig. 2.
visualization, used by many process mining techniques, can
be improved by separating context information and control-ﬂow information. as mentioned above, the multi-perspectiveprocess explorer [6] allows to aggregate the values of case andevent attributes in the context of a process model. however,it does not allow to show contextual events in relation to aprocess model. similarly, in [11], an artifact-centered approachis used to show multiple related (sub-)processes and howthey interact with each other. since context events are notnecessarily related to one another, applying this approach in aprocess with contextual behavior does not lead to meaningfulresults. work by de leoni et al. creates movies in which thestate of each process activity is calculated at each moment intime [12]. the result is plotted on top of a process model.however, there is no option to show events that are not partof the control-ﬂow, i.e., that are not part of the process modelin the movie. only the number of unmapped events at anytime during the process is shown in the process movie.
in [13], four questions are raised regarding the overlap
between the ﬁelds of complex event processing (cep) and pro-cess mining. our work can be applied towards the challenge ofprocess mining sensor events. identifying control-ﬂow-relatedsensor events, while keeping track of when other (contextual)sensor events take place, helps identify those sensor eventsthat can be transformed into activities. mandal et al. use anexample from the logistics domain [14]. goods are transportedfrom a warehouse to a customer. while on route, incidents mayhappen that require recalculating the route. knowing whenincidents (context events) occur in relation to the transportationprocess (control-ﬂow) facilitates the adaptation of the process,reducing the inﬂuence of incidents on the delivery time.
iii. p
reliminaries
the research reported in this paper builds on a body of
existing research in process mining. although our approachis generic and applicable to any modelling language (e.g.,bpmn, epc, etc.), we opt for petri nets due to their simpleand clear semantics. our approach uses alignments of petrinets and event logs for the localisation of context events.
66processes supported by information systems leave a digital
footprint in event logs. events have properties identifying
different aspects of the event, such as a timestamp or thecorresponding activity. events from the same process instanceare grouped into cases, and multiple cases form an event log.
deﬁnition 1 (event, event attributes). letebe the universe
of events, i.e., the universe of unique event identiﬁers. let qbe
the universe of event properties and let vbe universe of event
property values. let π∈q→(e/notarrowrightv)be the event property
function. f or any property q∈q,π(q)(denoted π
q)is a
partial function mapping events onto values. if πq(e)=v,
then event e∈e has a property q∈q and the value of
this property is v∈v .i fe/∈dom(πq), then event edoes
not have property qand we write πq(e)=⊥. letabe the
universe of activity labels, label∈q ,dom(πlabel)=e, and
rng(πlabel)=a, i.e., every event has a label property value.
deﬁnition 2 (case, trace, event log). acasec∈e∗is a
sequence of events, i.e., c=/angbracketlefte1,e2,...,e n/angbracketright.atraceσ∈
a∗is a sequence of activity labels. we deﬁne function trace
to project a case onto its trace, i.e., trace:e∗→a∗and
trace(c)=/angbracketleftπlabel(e1),πlabel(es),...,π label(en)/angbracketright. letlbe
the universe of event logs. an event log l∈l is a set of
cases, i.e., l⊆e∗.
deﬁnition 3 (petri net, petri net edge). letnbe the universe
of petri nets. let pbe the universe of places. let tbe the
universe of transitions. let p⊆p be a set of places, t⊆t
be a set of transitions, and f⊆(p×t)∪(t×p)be
a ﬂow relation between places and transitions (and between
transitions and places). a petri net n∈n is a tuple n=
(p,t,f). a petri net edge f∈fis an input edge if f∈p×t
and an output edge if f∈t×p. we deﬁne function label as
a transition labeling function, i.e., label∈t →a∪{ τ}.
deﬁnition 4 (marking, system net). a marking m is a
multiset of places, i.e., m∈b(p). letsbe the universe of
system nets. a system net s∈s is a triplet (n,minit,mfinal)
wheren∈n is a petri net, minit∈b(p)is the initial
marking, and mfinal∈b(p)is the ﬁnal marking.
figure 1a shows an example petri net. visually, a petri net
consists of squares, circles, and directed edges, which repre-sent the transitions, places, and ﬂow relations, respectively.transitions represent process activities. the only exceptionsare the invisible transitions labeled τ, which do not represent
pieces of the process’ work but are necessary to properlymodel some types of routing of the process. places maycontain tokens; whereas the structure of the petri net neverchanges, tokens are created and consumed. a transition isenabled (the activity it represents is allowed to occur at thecurrent state) if and only if at least one token exists in eachinput place of the transition. by ﬁring (i.e., executing) atransition, a token is consumed from each input place anda token is produced for each output place. the state of apetri net is uniquely determined by the distribution of tokensover places, which is denoted as its marking. for the petri
net in fig. 1a, the initial marking is place start, and the
ﬁnal marking is place end. a complete ﬁring sequence is asequence of transitions leading from the initial marking to theﬁnal marking, indicating a complete execution of a processinstance. the set of all complete ﬁring sequences of a systemnetsis denoted by ψ
s. for further information on petri nets
in relation to process mining, readers are referred to [1].
conformance checking aims to verify whether observed
behavior recorded in an event log matches behavior describedby a process model. the notion of alignments provides a robust
approach to conformance checking, which makes it possible topinpoint the deviations causing nonconformity [15]. buildingsuch alignments between an event log and a process modelis not trivial, since the log may deviate from the model at anarbitrary number of places. we need to relate “moves” in thelog to “moves” in the model. however, it may be that someof the moves in the log cannot be mimicked by the modeland vice versa. in other words, not all traces in an event logmay be reproducible by the corresponding petri net, i.e., notall traces may correspond to a complete ﬁring sequence.
deﬁnition 5 (alignment move). letm be the universe of
alignment moves, i.e., the universe of unique alignment move
identiﬁers. we deﬁne function λas follows. given m∈m :
•λevent(m)∈ e ∪{/greatermuch},
•λlabel(m)∈a∪{τ},
•λtrans(m)∈ t ∪{/greatermuch},
where/greatermuchidentiﬁes the absence of respectively an event or a
transition, such that
•λevent(m)=/greatermuch=⇒λtrans(m)∈t ,
•λtrans(m)=/greatermuch=⇒λevent(m)∈e ,
•λevent(m)/negationslash=/greatermuch=⇒λlabel(m)=πlabel(λevent(m)),
•λtrans(m)/negationslash=/greatermuch=⇒λlabel(m)=label(λtrans(m)).
deﬁnition 6 (alignment, alignment set). an alignment γ∈
m∗is a ﬁnite sequence of alignment moves such that each
alignment move appears only once, i.e., 1≤i<j≤|γ|:
γ(i)/negationslash=γ(j). an alignment set is γ⊆m∗such that each
alignment move appears only once. uγis the universe of
alignments and uγthe universe of alignment sets.
for a given alignment move m∈m ,mis considered a
synchronous move when λevent(m)/negationslash=/greatermuch∧λtrans(m)/negationslash=/greatermuch,
a model move when λevent(m)=/greatermuchandλlabel(m)/negationslash=τ,a
log move when λtrans(m)=/greatermuchand an invisible move when
λlabel(m)=τ. for every alignment γ∈uγof a system net
s∈s and a case c∈e∗, the projection on λevent yieldsc,
and the projection on λtrans yields a path in ψs.
multiple alignments are possible for the same case and
model. the aim is to ﬁnd a complete alignment with aminimal number of deviations, also known as an optimal
alignment [15]. for the sake of space, we assume here that
all deviations (i.e., model moves for visible transitions andlog moves) have unit cost. in [15], aalst et al. show how thisassumption can be removed. different alignment techniquesexist, which we generalize by the alignment function.
deﬁnition 7 (alignment function). the alignment function
align∈l×s→u
γaligns an event log with a system
net and returns an alignment set consisting of one optimal
alignment for each case in the event log.
67clearly, different cases may have different (optimal) align-
ments as they contain different events and deviations. for
example, fig. 3 shows three possible alignments for trace/angbracketlefta,e,b,d,g /angbracketrightand the petri net (system net) in fig. 1a. here, γ
1
contains two deviations: one log move (m 12) and one model
move (m15). furthermore, γ2contains one invisible move
(m22), a model move ( m23), and two log moves (m 25and
m26). lastly, γ3contains an invisible move (m 32), two model
moves (m33andm37), and one log move (m 34). since no
alignment exists with less than two asynchronous moves forvisible transitions, γ
1is an optimal alignment for the trace.
iv . p utting events into context
in this paper, we argue that not all events should be treated
equally. we distinguish two main types of events: control-ﬂowevents and context events. we aim to visualize the processmodel using both event types. the concept of alignments isused to identify where in a process model context events occur.this requires context events to be identiﬁed (section iv-a) andthat a mapping is created between the context events and theprocess model (section iv-b).
a. identifying context events
in order to identify different types of events, we introduce
an event property type∈q withdom(π
type)=e . in other
words, every event has an event type. the default value is
control-ﬂow. this implies that an event is part of the control-ﬂow of the process. during analysis, an analyst may deﬁneother event types to relate to context events. for example,
a purchasing process typically consists of activities such asplacing an order, making a payment, receiving a request, andsending goods. these events would be of type control-ﬂow.
other events may occur that may inﬂuence the process, but do
not change the state of the process. for example, a customer
may call to inquire the status of the order, may ﬁle a complaint,or may visit the website to check the current prices. theseevents can be deﬁned as events of type context. furthermore,
γ
1=m11m12m13m14m15m16
e11e12e13e14/greatermuche15
aebdeg
t1/greatermucht3t5t6t8
γ2=m21m22m23m24m25m26m27
e11/greatermuch/greatermuche12e13e14e15
aτdebdg
t1t2t5t6/greatermuch/greatermucht8
γ3=m31m32m33m34m35m36m37m38
e11/greatermuch/greatermuche12e13e14/greatermuche15
aτdebdeg
t1t2t5/greatermucht3t5t6t8
fig. 3: three example alignments of trace /angbracketlefta,e,b,d,g /angbracketrightwith
the system net in fig. 1a. columns represent alignment moves.the rows represents the alignment move identiﬁer, the eventidentiﬁer, the label, and the transition, from top to bottom.multiple event types may be identiﬁed to distinguish differenttypes of contextual events (e.g., call, complaint, website visit ).
process models describe the lifecycle of a single process
instance, i.e., a case. as such, events that are not linked to acase cannot be logically represented on a process model. toanalyze context events, they need to be included in an event logand linked to a case. a connection is to be made between thecontext events and the control-ﬂow events. such connectionscan be made based on shared event properties (e.g., order id)or on the time period in which the events occurred.
figure 4 shows the alignments for the traces /angbracketlefta,d,c,g,h/angbracketright
and/angbracketlefta,d,h/angbracketright with the petri net in fig. 1a. context events
labeledx,y, andzare inserted. since there are no transitions
in the petri net labeled x,y,o rz , these context events thus
become log moves in the alignment. in order to distinguishlog moves for context events (i.e., events of type context )
from regular log moves (i.e., log moves for events of typecontrol-ﬂow), we introduce alignment move types. the typeof the move equals the type of the event. if the move does notcorrespond to an event, the move is of type control-ﬂow.
deﬁnition 8 (alignment move type). letm∈m be an
alignment move. we extend function λsuch that:
•λevent(m)/negationslash=/greatermuch=⇒λtype(m)=πtype(λevent(m))
•λevent(m)=/greatermuch=⇒λtype(m)= control-ﬂow
γ4=m41m42m43m44m45m46m47m48
e41e42e43e44e45/greatermuche46e47
adxcyegh
t1t5/greatermucht4/greatermucht6t8/greatermuch
γ5=m51m52m53m54m55m56m57m58
e51e52e53e54/greatermuch/greatermuche55e56
adxyτehz
t1t5/greatermuch/greatermucht2t6t9/greatermuch
fig. 4: example of alignments with context moves highlightedin gray. in γ
4(trace/angbracketlefta,d,x,c,y,g,h/angbracketright ),m43, andm45are of
type context. in γ5(trace/angbracketlefta,d,x,y,h,z /angbracketright),m53,m54, andm58
are of type context.
b. visualizing context moves
in existing literature, when projecting alignment data onto
petri nets, model moves are commonly associated with tran-
sitions and log moves with places [1]. as such, we havechosen to associate context moves (i.e., moves of type context)
to petri net edges as to avoid ambiguity about information
mapped onto the process model. this design decision hasseveral consequences that need to be addressed.
firstly, to determine on which edges a context move should
be plotted, we need to determine through which transitionsa case travels, i.e., what its corresponding ﬁring sequence is.since context moves occur in-between control-ﬂow moves, itis enough to determine the preceding and succeeding control-ﬂow move in the alignment, for each context move. todo this, we deﬁne function enrich. each context move is
mapped to exactly one control-ﬂow predecessor move and
68one control-ﬂow successor move. if the context move is the
ﬁrst (respectively last) move in the alignment, the predecessor(respectively successor) does not exist and we write /greatermuch. figure
5 shows the results of applying function enrich toγ
4andγ5.
deﬁnition 9 (enrich function). we deﬁne function enrich to
enrich each context move in an alignment with it’s precedingand succeeding control-ﬂow alignment move, i.e.:enrich:u
γ→m×(m∪{/greatermuch}) ×(m∪{/greatermuch}) .
enrich(γ4)={(m43,m42,m44),(m45,m44,m46)}
enrich(γ5)={(m53,m52,m55),(m54,m52,m55),
(m58,m57,/greatermuch)}
fig. 5: results of enrich(γ4)andenrich(γ5).
secondly, since transitions might have multiple input and
output edges, if we would associate a context move with everyoutgoing edge of the transition corresponding to the precedingcontrol-ﬂow move and every incoming edge of the transitioncorresponding to the succeeding control-ﬂow move, we riskincreasing the total number of context moves associated withthe process model. to avoid this, we assign a weight to everycontext move. if a context move is mapped onto nedges, this
weight is calculated as
1
n.
thirdly, the control-ﬂow moves that precede or succeed a
context move may be model moves, i.e., the labels representedby their corresponding transitions were expected in the model,but they did not occur in the event log. in this case, we cannotbe entirely certain that the context move actually occurredbetween these two model transitions. we argue that, dependingon whether only one of the surrounding control-ﬂow movesin the alignment is a model move, or both, the certaintydecreases. this is captured by the function cert . given a
context move, its predecessor, and its successor, the certaintyis calculated as shown in fig. 6.
cert(m
cont,mpred,msucc)=
⎧
⎪⎪⎪⎨
⎪⎪⎪⎩0.25λ
trans(mpred)=/greatermuch∧λtrans(msucc)=/greatermuch
0.50λtrans(mpred)=/greatermuch∧λtrans(msucc)/negationslash=/greatermuch
0.50λtrans(mpred)/negationslash=/greatermuch∧λtrans(msucc)=/greatermuch
1.00λtrans(mpred)/negationslash=/greatermuch∧λtrans(msucc)/negationslash=/greatermuch
fig. 6: calculation of the certainty that a context move has
occurred in between two control-ﬂow moves.
we choose this way of calculating weight and certainty
for simplicity and ease of use. other aspects of the model,the event log, or their alignment can be taken into accountin order to calculate how certain one can be of a contextmove occurring between any two transitions of the model. forexample, the preﬁx or postﬁx of the trace, or even the numberof optimal alignments could be used.
once the context moves are identiﬁed and enriched with
their surrounding control-ﬂow moves, they can be mappedonto a petri net model. algorithm 1 shows how context movesare mapped to petri net edges. context moves are plottedalgorithm 1: map context moves onto petri net edges
input:n=(p,t,f)∈n
input:γ∈uγ
output: ef⊆f×m×r ×r
ef←∅
foreachγ∈γdo
em←enrich(γ)
foreach(mcont,mpred,msucc)∈em do
ct←cert(mcont,mpred,msucc)
tp←λtrans(mpred)
ts←λtrans(msucc)
fout←{(tp,pp)∈f}
fin←{(ps,ts)∈f}
overlap←{(t p,pp)∈fout|∃(ps,ts)∈fin∧ps=pp}∪
{(ps,ts)∈fin|∃(tp,pp)∈fout∧pp=ps}
if|fout|=0∧|fin|>0then
foreachf∈findo
ef←ef∪{(f,m cont,1
|fin|,ct)}
else if|fout|>0∧|fin|=0 then
foreachf∈fout do
ef←ef∪{(f,m cont,1
|fout |,ct)}
else if|overlap| >0then
foreachf∈overlap do
ef←ef∪{(f,m cont,1
|overlap |,ct)}
else if|overlap| =0 then
foreachf∈fin∪fout do
ef←ef∪{(f,m cont,1
|fin|+|fout |,ct)}
returnef
asclose as possible to the location in the process model
where they occurred, i.e., as close as possible to the transitionscorresponding to the control-ﬂow moves immediately beforeand after the context move. when a context move is positionedin between two transitions that have a route between them,then it is mapped on the two edges connecting the transitionsin the petri net. in algorithm 1 this is expressed in thesituation where overlap exists between the petri net places
related to both transitions. when no such overlap exists, thecontext move is plotted on all outgoing edges of the transitioncorresponding to the preceding control-ﬂow move and onall incoming edges of the transition corresponding to thesucceeding control-ﬂow move. when the context move doesnot have a preceding control-ﬂow move, i.e., it occurred beforethe ﬁrst control-ﬂow move, then the context move is plottedon the incoming edges of the transition corresponding to thesucceeding control-ﬂow move. finally, when the context movedoes not have a succeeding control-ﬂow move, it is plottedon the outgoing edges of the transition corresponding to thepreceding control-ﬂow move.
consider context move m
43of alignment γ4in fig. 4. this
move corresponds to event e43(labelx), and is positioned
in between m42(labeld, transition t5), andm44(labelc,
transition t4). bothm42andm44are synchronous alignment
moves. this implies that the certainty that e43occurred
between t5andt4is equal to 1. in the petri net (shown in
fig. 1a) there are no shared places between the outgoing edgesfrom transition t
5and the incoming edges from transition t4.
following algorithm 1, context event e43is thus related to
edge(p2,t5)and edge (p1,t4), both with a weight of1
2.
69v. e v alua tion
this section reports on an evaluation of our technique based
on two case studies. the ﬁrst case study, presented in section
v-a, is based on a hospital process in which patients are testedfor sepsis. these tests can be executed at any time during thepatients stay in the hospital. the second case study, in sectionv-b, shows an insurance claim process in which customers cancall the insurance company to ask questions regarding theirclaim. the approach has been implemented in prom.
1
a. case study emergency room sepsis process discovery
this section illustrates how our technique can be beneﬁcial
for process discovery [1]. when selected events in the eventlog are marked as context events, they can be kept aside whileexecuting the process discovery process. using less activitiesin process discovery will lead to a less complex result. after amodel is discovered, the context events can be plotted on top ofthis model, highlighting the locations where the context eventsare most likely to occur. visualizing context events in this waycan identify the best locations for modifying the process modelby adding context activities, which relates to model repair.
the process used in the case study in this section was
introduced by mannhardt et al. in [16]. the data is publiclyavailable through [17]. the data describes cases that followa process starting in the emergency room of a hospital andending when the patient is released from the hospital. thedata focuses on activities to detect and handle sepsis. sepsisis the presence in tissues of harmful bacteria and their toxins,typically through infection of a wound. the data consists of16 activities leading to 15,214 events for 1,050 cases. theevent log has 846 different execution paths (trace variants).three activities are related to lab tests, i.e., crp, lactic acid
and leucocytes. these activities can be performed anywhere
during the process. when events for these activities areremoved from the event log, we still have the same 1,050cases, however, the number of variants is reduced to 182.a reduction of 664 variants by only removing these threeactivities highlights the complexity caused by consideringthose events as control-ﬂow events. the same reduction incomplexity can be observed when fig. 7 is compared tofig. 8. both ﬁgures show the result of a process discoveryanalysis using the directly f ollows miner (dfm) [18]. while
the number of activities is reduced by only three, the numberof connections between the transitions of the process modelis reduced ten-fold. on the other hand, we have removedinformation about the execution of the lab tests and it is nolonger visible when they can occur.
to provide insights into when the lab tests are executed,
we use the hand-made petri net presented in [16]. next, wemark the three lab test events in the event log as contextevents. the context enriched event log is aligned with themodel and ﬁnally, the lab test events are plotted on top ofthe model. the resulting enriched process model is shownin fig. 9. the ﬁgure shows the sum of the weights of the
1prom is an extensible tool that supports a wide variety of process mining
techniques through plug-ins, see http://www.promtools.org. our technique is
part of the contextevents package.
fig. 7: result of the dfm miner [18] on sepsis event log [17],
using all events and the path slider is set to 80%.
fig. 8: result of the dfm miner [18] on sepsis event log [17],not using the lab events and the path slider is set to 80%.
fig. 9: absolute context heatmap of sepsis process lab tests.
fig. 10: relative context heatmap of sepsis process lab tests.
context events on each edge, highlighted in a red color scale.an edge is colored black when the edge does not have anycontext events mapped to it. the width of the edge indicatesthe sum of the weights of all context events that are related to
the edge. the red color intensity of an edge indicates the sumof the certainties of the context events related to that edge. werefer to this visualisation as an absolute context heat map.w e
use the term heatmap because the ﬁgure shows the magnitudeof a phenomenon, i.e., the occurrence of context events. thevariation in color gives a visual cue to the reader about howcertain we are about the magnitude.
fig. 9 shows that most lab tests are executed after admission
nc2. since admission nc is the activity with the highest
frequency in the event log it is as expected that lab tests havea high occurrence rate at this point in the process model.we create a so-called relative context heatmap to put the
cases with context events related to an edge in perspectiveof the total number of cases that traverse that edge, i.e., thepercentage of cases with a context event related to that edgeis calculated and plotted.
if we look at the relative context heatmap, presented in
fig. 10, a different insight emerges. relatively, most lab tests
70are executed after an admission to a normal or intensive care
department, i.e., admission nc and admission ic. lab tests
also occur immediately following the er sepsis triage activity
when both iv antibiotics and iv liquid are not executed.
we can take this analysis a step further by ﬁltering on
cases for which a selected event occurs. in fig. 11 the dataset is ﬁltered on cases having an event that is aligned to theadmission ic1 transition, and in fig. 12 only cases that have
an event that is aligned to the admission ic2 transition. fig.
11 shows that from admission nc1 toadmission ic1 and
immediately after admission ic1, relatively often a lab test
is executed. respectively for 54% of cases after admission
nc1 and 100% after admission ic1. fig. 12 shows that after
admission ic2, always a lab test is executed. combining
fig. 11 and fig. 12 reveals that after the admission to anintensive care department a lab test is always executed. addinga mandatory labtest activity to the process model, immediatelyafter both the admission ic activities, would make it possible
to check if the labtest is always executed or not.
fig. 11: relative context heatmap of sepsis process lab tests,ﬁltered on cases that have activity admissionic1.
fig. 12: relative context heatmap of sepsis process lab tests,ﬁltered on cases that have activity admissionic2.
b. case study uwv claim process
uwv is the social security institute of the netherlands and
responsible for the implementation of a number of employeerelated insurances. the case study focuses on the unem-ployment beneﬁts claim process of uwv . when employeesbecome unemployed, they may be entitled to the beneﬁts.employees have to ﬁle a claim at uwv , which then decideswhether they are entitled to beneﬁts. when claims are ac-cepted, employees receive beneﬁts with a regular frequencyuntil they ﬁnd a new job or the maximum period for theirentitlements is reached. uwv refers to employees who aremaking use of their services as customers, therefore we usethe term customer in the remainder of the paper.
the unemployment beneﬁts claim process starts at uwv
when a claim is received. first, the customer is sent a changeform, because the customer is obliged to notify uwv of anychanges during the claim handling process. next a check isperformed whether all required information is available. if thisis not the case, the customer can be requested to provide themissing information. the request can be done by two typesof letters or a phone call. when the information is received,uwv registers a document in event. if needed a reminder
can be send to the customer. when all information is receivedthe decision is made. finally, the customer is notiﬁed of thedecision by the appropriate letter.
fig. 13: absolute context heatmap for uwv claim process.
before, during and after the claim handling process the
customer can contact the uwv call center. every contact isregistered as a call in event including a description of the
questions asked by the customer. the process model used inthis case study is obtained from a process specialist at uwv .fig. 13 shows the absolute context heatmap for the uwvclaim process. incoming calls occur during the whole processexecution as can be seen from almost all edges being coloredred and not being thin. the most incoming calls occur afterthe decision is made and before the acceptance letter is sent.most customers get accepted (on average 80%). the secondmost frequent location of calls is immediately after the ﬁrstchange f orm out, which occurs at the start of the process.
fig. 14: relative context heatmap for uwv claim process.
the relative context heatmap in fig. 14 shows there are
several locations that trigger similar amounts of incomingcalls. the ﬁrst location is again between the decision and theacceptance letter. also, questions come in after informationwas requested from the customer by sending a letter. interest-ingly, when information was requested by phone, a relativelysmaller number of customers ask questions. this gives riseto the insight that contacting customers by phone could bebeneﬁcial for uwv to reduce the number of incoming calls.next, just before receiving a change f orm in, questions come
in. finally, after receiving a negative decision, withdrawingthe claim or when the claim is stopped, more questions aretriggered compared to when the claim is accepted. providinga customer with adequate information regarding the decisioncould help reduce the number of customers calling uwv . thisanalysis shows that knowing when customers call is helpfulwhen advising uwv on how the process could be improvedfrom both the customer and uwv’s perspective.
71vi. c onclusion
the technique introduced in this paper uses existing process
mining concepts such as event logs, process models, and
alignments to introduce the concept of context events: eventsthat are part of the event log and can be linked to casesin a process, but are not part of the process’ control-ﬂow.highlighting such events on a process model separately fromthe control-ﬂow activities provides added value by showingnovel insights and facilitating process discovery.
the emergency room sepsis case study in section v-a
shows that keeping selected events aside while doing processdiscovery leads to less complex results. the events that are ﬁrstkept aside, can, with our technique, be once more related tothe process model. in this way the information contained in theevents is used to improve the discovered model. in the uwvcase study in section v-b, customers can call uwv while theirunemployment beneﬁts claim is being processed. identifyingthe locations in the process model when relatively the mostcustomers call, gives input for improving the customer journey.
we foresee several directions for further research on this
topic. for example, up until now, we have only looked atatomic events, i.e., events without duration. instead, we couldalso look at durative events, i.e., events that have a start and acomplete timestamp. these types of events identify a periodin which they are active. examples of these types of durativeevent are the caseload of a system and the happiness level of acustomer during the process execution. one option of plottingthese periods on top of a process model is to use a heatmap,reﬂecting the average caseload of the system or the averagehappiness of the customers when the process was executed. inthis way, a more complex context can be related to the model.
in this paper, we have shown how to plot a single context
event type in relation to a process model. research could bedirected to ﬁnding ways to plot multiple context classes on thesame process model. this should be done in a way that is stillcomprehensible to the users of the visualization. a simple yeteffective direction would be to use icons attached to the petrinet edges. different icons may represent different event types.
instead of having an analyst identify context events, the
labeling could be done in a semi- or fully automatic way. oneapproach would be to use the techniques developed by tax etal. [8] to identify so-called chaotic activities.
another possible direction for future work is to use data
attributes when plotting context events. in this way, contextevents can be conditionally plotted or guards could be derivedindicating under which circumstances context events occur.inversely, context events themselves can become input forexplanatory data analysis. for example in the work work by deleoni et al. [19] on process predictions. in the work by v an deraalst et al. [20] on visualizing token ﬂows using interactiveperformance spectra the context events can be used as a newclassiﬁer to explain the process behavior.
finally, while we use calculation heavy alignments in our
current approach, it is also possible to use the more perfor-mance friendly token-based replay.a
cknowledgment
creating this paper would not have been possible without
the help of maikel leemans.
references
[1] w. m. p . van der aalst, process mining - data science in action, second
edition. springer, 2016.
[2] m. f. sani, s. j. van zelst, and w. m. p . van der aalst, “repairing
outlier behaviour in event logs,” in business information systems - 21st
international conference, bis, berlin, germany, proceedings, 2018.
[3] x. lu, d. fahland, r. andrews, s. suriadi, m. t. wynn, a. h. m.
ter hofstede, and w. m. p . van der aalst, “semi-supervised log pat-
tern detection and exploration using event concurrence and contextualinformation,” in otm 2017 proceedings, part i, 2017, pp. 154–174.
[4] s. j. j. leemans, d. fahland, and w. m. p . van der aalst, “discovering
block-structured process models from event logs containing infrequentbehaviour,” in business process management workshops - bpm 2013
international workshops, beijing, china, august 26, 2013, revisedpapers, 2013, pp. 66–78.
[5] b. f. a. hompes, j. c. a. m. buijs, and w. m. p . van der aalst, “a
generic framework for context-aware process performance analysis,” inon the move to meaningful internet systems: otm 2016 conferencesproceedings, 2016, pp. 300–317.
[6] f. mannhardt, m. de leoni, and h. a. reijers, “the multi-perspective
process explorer,” in proceedings of the bpm demo session, 2015.
[7] p . m. dixit, h. m. w. v erbeek, j. c. a. m. buijs, and w. m. p .
van der aalst, “interactive data-driven process model construction,” inconceptual modeling - 37th international conference, er 2018, xi’an,china, october 22-25, 2018, proceedings, 2018, pp. 251–265.
[8] n. tax, n. sidorova, and w. m. p . van der aalst, “discovering
more precise process models from event logs by ﬁltering out chaoticactivities,” j. intell. inf. syst., vol. 52, no. 1, pp. 107–139, 2019.
[online]. available: https://doi.org/10.1007/s10844-018-0507-6
[9] m. f. sani, s. j. van zelst, and w. m. p . van der aalst, “repairing
outlier behaviour in event logs using contextual behaviour,” enterp.
model. inf. syst. archit. int. j. concept. model., vol. 14, pp. 5:1–5:24,2018. [online]. available: https://doi.org/10.18417/emisa.14.5
[10] d. fahland and w. m. p . van der aalst, “model repair - aligning
process models to reality,” inf. syst., vol. 47, pp. 220–243, 2015.
[online]. available: https://doi.org/10.1016/j.is.2013.12.007
[11] m. l. van eck, n. sidorova, and w. m. p . van der aalst, “discovering
and exploring state-based models for multi-perspective processes,” inbusiness process management conference proceedings, 2016.
[12] m. de leoni, s. suriadi, a. h. m. ter hofstede, and w. m. p . van der
aalst, “turning event logs into process movies: animating what hasreally happened,” software and system modeling, vol. 15, no. 3, pp.
707–732, 2016.
[13] p . soffer, a. hinze, a. koschmider, h. ziekow, c. d. ciccio, b. kold-
ehofe, o. kopp, a. jacobsen, j. s ¨urmeli, and w. song, “from event
streams to process models and back: challenges and opportunities,”information systems, 2017.
[14] s. mandal, m. hewelt, and m. weske, “a framework for integrating
real-world events and business processes in an iot environment,” in otm
2017 conferences proceedings, part i, 2017, pp. 194–212.
[15] w. m. p . van der aalst, a. adriansyah, and b. f. van dongen,
“replaying history on process models for conformance checking andperformance analysis,” wiley interdisc. rew.: data mining and knowl-
edge discovery, vol. 2, no. 2, pp. 182–192, 2012.
[16] f. mannhardt and d. blinde, “analyzing the trajectories of patients
with sepsis using process mining,” in 29th international conference on
advanced information systems engineering (caise), 2017, pp. 72–80.
[17] mannhardt, f. (felix), “sepsis cases - event log,”
2016. [online]. available: https://data.4tu.nl/repository/uuid:915d2bfb-7e84-49ad-a286-dc35f063a460
[18] s. j. j. leemans, e. poppe, and m. t. wynn, “directly follows-based
process mining: exploration & a case study,” in international conference
on process mining, icpm, aachen, germany, 2019, pp. 25–32.
[19] m. de leoni, w. m. p . van der aalst, and m. dees, “a general process
mining framework for correlating, predicting and clustering dynamicbehavior based on event logs,” inform. syst., vol. 56, 2016.
[20] w. m. p . van der aalst, d. tacke genannt unterberg, v . denisov,
and d. fahland, “visualizing token ﬂows using interactive performancespectra,” 2020. [online]. available: https://www.youtube.com/watch?v=mkbq
jxyivs&feature=youtu.be
72