process-aware information systems:
design, enactment, and analysis
wil m.p. van der aalst
department of mathematics and computer science, eindhoven university of tech-nology, p.o. box 513, nl-5600 mb eindhoven, w.m.p.v.d.aalst@tue.nl
abstract. process-aware information systems support operational business pro-
cesses by combining advances in information technology with recent insights
from management science. workﬂow management systems are typical examples
of such systems. however, many other types of information systems are also“process aware” even if their processes are hard-coded or only used implicitly(e.g., erp systems). the shift from data orientation to process orientation has in-creased the importance process-aware information systems. moreover, advancedanalysis techniques ranging from simulation and veriﬁcation to process miningand activity monitoring allow for systems that support process improvement invarious ways. this article provides an overview of process-aware informationsystems and also relates these to business process management, workﬂow man-agement, process analysis techniques, and process ﬂexibility.
keywords: process-aware information systems, workﬂow management, busi-
ness process management, petri nets, process mining, process veriﬁcation, sim-ulation
1 introduction
information technology has changed business processes within and between enter-prises. more and more work processes are being conducted under the supervisionof information systems that are driven by process models. examples are work-ﬂow management systems such as filenet p8, staffware, websphere, flowerand yawl and enterprise resource planning (erp) systems such as sap andoracle. moreover, many domain speciﬁc systems have components driven by(process) models. it is hard to imagine enterprise information systems that areunaware of the processes taking place. although the topic of business processmanagement using information technology has been addressed by consultants
1and software developers in depth, more fundamental approaches towards such
process-aware information systems (paiss) have been rare [1]. only since the
nineties, researchers started to work on the foundations of paiss.
the goal of this article is to: (1) provide an overview of paiss and put these
systems in a historical context, (2) to show their relevance and potential to dra-matically improve business processes, (3) to discuss some more advanced topicsto provide insights in current challenges and possible inhibitors. before going
into more detail, we ﬁrst provide some deﬁnitions and give an overview of the
different types of paiss.
paiss play an important role in the business process management (bpm).
there exist many deﬁnitions of bpm. here we will use the following deﬁni-tion: “business process management (bpm) is a ﬁeld of knowledge that com-bines knowledge from information technology and knowledge from managementsciences and applies this to operational business processes”. bpm can be seenas an extension of workﬂow management (wfm) which primarily focuses on the
automation of business processes.
(re)design
analysis
enactment
diagnosis
figure 1: relating process-aware information systems (paiss) to other ap-
proaches and tools in business process management (bpm).
figure 1 shows the relation between paiss, bpm, and wfm. note that the
term pais refers to software while the terms bpm and wfm refer to ﬁeldsof knowledge in which paiss can be used. workﬂow management systems(wfmss) can be seen as a particular kind of paiss where the emphasis is onprocess automation rather than redesign and analysis. a deﬁnition of wfmscould be: “a generic software system that is driven by explicit process designs toenact and manage operational business processes”. clearly, a wfms should beprocess-aware and generic in the sense that it is possible to modify the processes it
2supports. note that the process designs automated by a wfms are often graphical
and the focus is on structured processes that need to handle many cases.
although a wfms can be seen as a prototypical example of a pais, not all
paiss can be classiﬁed as pure wfmss. as shown in figure 1 wfmss are con-sidered to be a subclass of all paiss. there are many examples of systems thatare process-aware, but that do not provide a generic approach to the modelingand enactment of operational business processes. for example, there may be sys-
tems where processes are hard-coded and cannot be modiﬁed. for example, many
processes supported by an erp system (e.g., sap r/3) are hard-coded in soft-ware and can only be modiﬁed through explicit conﬁguration parameters, i.e., theset of possible variation points is predeﬁned and there is no notion of a processmodel that can be modiﬁed freely. many organizations have developed softwareto support processes without using a wfms, e.g., many banks, hospitals, elec-tronic shops, insurance companies, municipalities have developed custom-madesoftware to support processes. these systems are process-aware but are devel-oped without using a wfms. another difference between paiss and wfmssis the fact that process automation is just one aspect of bpm. process analysis
and diagnosing existing processes clearly extend the scope beyond pure process
automation.
figure 1 also shows some more terms that are relevant in this context (bpr,
soa, bam, etc.). business process redesign (bpr) is concerned with ﬁndingbetter process designs. bpr efforts can be supported and enabled by paiss.business activity monitoring (bam) uses information about running processesextracted from paiss. process mining techniques can be used to analyze this in-formation and come up with ideas to improve processes. recently, the so-calledservice-oriented architecture (soa) has been proposed as platform for realiz-
ing paiss. soa is an architectural style whose goal is to achieve loose couplingamong interacting parties. a service is a unit of work done by a service provider
to achieve desired end results for a service consumer. both provider and consumer
are roles played by different pieces of software. the provider and consumer mayreside in the same organization but also within different organizations. by usingthe soa it becomes easier to compose and maintain paiss, because applicationfunctionality can be wrapped into serves that are invoked using a bpel engine.the business process execution language (bpel) [2] is the de-facto standardfor process execution in a soa environment. in bpel one can specify processesand enact them using the process engines of systems such as ibm’s websphereor oracle bpel.
bpel is a textual xml-based language and its constructs are close to pro-
3gramming [2]. people talk about “programming in the large” illustrating that
it is not easy for non-programmers to model processes using bpel. therefore,languages such as bpmn (business process modeling notation) [3] have beenproposed. note that many modeling tools support languages similar to bpmn,e.g., aris, protos, etc. figure 1 shows that the emphasis of execution languageslike bpel is on enactment while languages like bpmn, epcs, and protos focusmore on (re)design. note that bpmn is not executable and has no formal seman-
tics. however, in many cases it is possible to generate some bpel template code
[3, 4].
a pais requires the modeling of different perspectives, e.g., control-ﬂow, in-
formation, and organization/resources. this article will mention the different per-spectives, but will focus primarily on the control-ﬂow perspective. moreover, weuse a particular technique to model this perspective: petri nets [5].
in the remainder of this article, we will ﬁrst put bpm and related pais technol-
ogy in their historical context (section 2). then, in section 3, we discuss modelsfor process design. since pais are typically driven by explicit models, it is impor-tant to use the right techniques. therefore, we discuss techniques for the analysis
of process models in section 4. we will argue that it is vital to have techniques
to assert the correctness of workﬂow designs. based on this we focus on systemsfor process enactment, i.e., systems that actually make the “work ﬂow” based on amodel of the processes and organizations involved (section 5). finally, we focuson two more advanced topics: process ﬂexibility (section 6) and process mining(section 7). section 8 concludes this article.
2 business process management from a historical
perspective
to show the relevance of paiss, it is interesting to put them in a historical per-
spective [6]. consider figure 2, which shows some of the ongoing trends in infor-mation systems. this ﬁgure shows that today’s information systems consist of anumber of layers. the center is formed by the operating system, i.e., the softwarethat makes the hardware work. the second layer consists of generic applicationsthat can be used in a wide range of enterprises. moreover, these applications aretypically used within multiple departments within the same enterprise. examplesof such generic applications are a database management system, a text editor, anda spreadsheet program. the third layer consists of domain speciﬁc applications.
4these applications are only used within speciﬁc types of enterprises and depart-
ments. examples are decision support systems for vehicle routing, call centersoftware, and human resource management software. the fourth layer consists oftailor-made applications. these applications are developed for speciﬁc organiza-tions.
operating
system
generic
applications
domain
specific
applications
tailor-made
applicationstrends in
information
systems
1. from programming to
assembling.2. from data orientation to
process orientation.
3. from design to redesign
and organic growth.
figure 2: trends relevant for business process management.
in the sixties the second and third layer were missing. information systems
were built on top of a small operating system with limited functionality. sinceno generic nor domain speciﬁc software was available, these systems mainly con-sisted of tailor-made applications. since then, the second and third layer havedeveloped and the ongoing trend is that the four circles are increasing in size,i.e., they are moving to the outside while absorbing new functionality. today’soperating systems offer much more functionality. database management systemsthat reside in the second layer offer functionality which used to be in tailor-madeapplications. as a result of this trend, the emphasis shifted from programming
5to assembling of complex software systems. the challenge no longer is the cod-
ing of individual modules but orchestrating and gluing together pieces of softwarefrom each of the four layers.
another trend is the shift from data to processes. the seventies and eighties
were dominated by data-driven approaches. the focus of information technol-ogy was on storing and retrieving information and as a result data modeling wasthe starting point for building an information system. the modeling of business
processes was often neglected and processes had to adapt to information tech-
nology. management trends such as business process reengineering illustrate theincreased emphasis on processes. as a result, system engineers are resorting to amore process driven approach.
the last trend we would like to mention is the shift from carefully planned de-
signs to redesign and organic growth. due to the omnipresence of the internet andits standards, information systems change on-the-ﬂy. few systems are built fromscratch. in most cases existing applications are partly used in the new system. asa result, software development is much more dynamic.
the trends shown in figure 2 provide a historical context for paiss. paiss
are either separate applications residing in the second layer or are integrated com-
ponents in the domain speciﬁc applications, i.e., the third layer. notable examplesof paiss residing in the second layer are wfmss [7, 8, 9] such as staffware,filenet p8, and cosa, and case handling systems such as flower. middlewareplatforms such as ibm’s websphere provide a workﬂow engine (typically basedon bpel [2]). moreover, there are many open-source wfmss, cf. activebpel,enhydrashark, jbpm, and yawl. note that leading enterprise resource plan-ning (erp) systems populating the third layer also offer a workﬂow managementmodule. the workﬂow engines of sap, baan, peoplesoft, oracle, and jd ed-wards can be considered as integrated paiss. the idea to isolate the managementof business processes in a separate component is consistent with the three trends
identiﬁed. paiss can be used to avoid hard-coding the work processes into tailor-
made applications and thus support the shift from programming to assembling.moreover, process orientation, redesign, and organic growth are supported. forexample, today’s workﬂow management systems can be used to integrate exist-ing applications and support process change by merely changing the workﬂowdiagram. given these observations, we hope to have demonstrated the practicalrelevance of paiss. in the remainder of this article, we will focus more on thescientiﬁc importance of these systems. moreover, for clarity we will often restrictthe discussion to clear cut business process management systems such as wfmss.
an interesting starting point from a scientiﬁc perspective is the early work on
6ofﬁce information systems. in the seventies, people like skip ellis [10], anatol
holt [11], and michael zisman [12] already worked on so-called ofﬁce informa-tion systems, which were driven by explicit process models. it is interesting tosee that the three pioneers in this area independently used petri-net variants tomodel ofﬁce procedures. during the seventies and eighties there was great op-timism about the applicability of ofﬁce information systems. unfortunately, fewapplications succeeded. as a result of these experiences, both the application of
this technology and research almost stopped for a decade. consequently, hardly
any advances were made in the eighties. in the nineties, there again was a hugeinterest in these systems. the number of wfmss developed in the past decadeand the many papers on workﬂow technology illustrate the revival of ofﬁce infor-mation systems. today wfmss are readily available. however, their applicationis still limited to speciﬁc industries such as banking and insurance. as indicatedby skip ellis it is important to learn from these ups and downs. the failures inthe eighties can be explained by both technical and conceptual problems. in theeighties networks were slow or not present at all, there were no suitable graphicalinterfaces, and proper development software was missing. however, there were
also more fundamental problems: a uniﬁed way of modeling processes was miss-
ing and the systems were too rigid to be used by people in the workplace. most ofthe technical problems have been resolved by now. however, the more conceptualproblems remain. good standards for business process modeling are still missingand even today’s wfmss are too rigid.
one of the great challenges of paiss is to offer both support and ﬂexibility.
today’s systems typically are too rigid, thus forcing people to work around thesystem. one of the problems is that software developers and computer scientistsare typically inspired by processes inside a computer system rather than processesoutside a computer. as a result, these engineers think in terms of control systemsrather than support systems. this explains that few of the existing wfmss allow
for the so-called implicit choice, i.e., a choice resolved by the environment rather
than the system.
to summarize we would like to state that, although the relevance of paiss is
undisputed, many fundamental problems remain to be solved. in the remainder ofthis article, we will try to shed light on some of these problems.
73 models for process design
paiss are driven by models of processes and organizations [1]. by changing
these models, the behavior of the system adapts to its environment and changingrequirements. these models cover different perspectives. figure 3 shows someof the perspectives relevant for paiss [9]. the process perspective describes thecontrol-ﬂow, i.e., the ordering of tasks. the information perspective describes thedata that are used. the resource perspective describes the structure of the organi-zation and identiﬁes resources, roles, and groups. the task perspective describes
the content of individual steps in the processes. each perspective is relevant. how-
ever, the process perspective is dominant for the type of systems addressed in thisarticle.
process perspectivetask
perspectiveinformation
perspectiveresource
perspective
figure 3: perspectives of models driving paiss
many techniques have been proposed to model the process perspective. some
of these techniques are informal in the sense that the diagrams used have no for-mally deﬁned semantics. these models are typically very intuitive and the inter-pretation shifts depending on the modeler, application domain, and characteristicsof the business processes at hand. examples of informal techniques are isac,
dfd, sadt, and idef. these techniques may serve well for discussing work
processes. however, they are inadequate for directly driving information systemssince they are incomplete and subject to multiple interpretations. therefore, moreprecise ways of modeling are required.
figure 4 shows an example of an order handling process modeled in terms
of a so-called workﬂow net [13]. workﬂow nets are based on the classical petrinet model invented by carl adam petri in the early sixties [5]. the squares arethe active parts of the model and correspond to tasks. the circles are the passiveparts of the model and are used to represent states. in the classical petri net, thesquares are named transitions and the circles places. a workﬂow net models the
8start register
send_billreceive_paymentarchiveship_goods check_availabilityreplenish
update
reminderendc1
c2c3
c4
c5
c6c7
c8
figure 4: a wf-net modeling the handling of orders. the top part models the
logistical part of the process while the bottom part models the ﬁnancial part.
life-cycle of one case. examples of cases are insurance claims, tax declarations,
and trafﬁc violations. cases are represented by tokens and in this case the to-
ken in start corresponds to an order. task register is a so-called and-split and
is enabled in the state shown. the arrow indicates that this task requires humanintervention. if a person executes this task, the token is removed from place start
and two tokens are produced: one for c1and one for c2. then, in parallel, two
tasks are enabled: check
availability andsend bill. depending on the eagerness
of the workers executing these two tasks either check available orsend billis ex-
ecuted ﬁrst. suppose check availability is executed ﬁrst. if the ordered goods are
available, they can be shipped by executing task ship goods . if they are not avail-
able, either a replenishment order is issued or not. note that check availability
is an or-split and produces one token for c3,c4,o rc5. suppose that not all or-
dered goods are available, but the appropriate replenishment orders were already
issued. a token is produced for c3and task update becomes enabled. suppose
that at this point in time task send billis executed, resulting in the state with a
token in c3andc6. the token in c6is input for two tasks. however, only one
of these tasks can be executed and in this state only receive payment is enabled.
task receive payment can be executed the moment the payment is received. task
reminder is an and-join/and-split and is blocked until the bill is sent and the
9goods have been shipped. note that the reminder is sent after a speciﬁed period as
indicated by the clock symbol. however, it is only possible to send a remainderif the goods have been actually shipped. assume that in the state with a token inc3andc6taskupdate is executed. this task does not require human involvement
and is triggered by a message of the warehouse indicating that relevant goodshave arrived. again check
availability is enabled. suppose that this task is exe-
cuted and the result is positive. in the resulting state ship goods can be executed.
now there is a token in c6andc7thus enabling task reminder . executing task
reminder again enables the task send bill. a new copy of the bill is sent with the
appropriate text. it is possible to send several reminders by alternating reminder
andsend bill. however, let us assume that after the ﬁrst loop the customer pays
resulting in a state with a token in c7andc8. in this state the and-join archive is
enabled and executing this task results in the ﬁnal state with a token in end.
this very simple workﬂow net shows some of the routing constructs rele-
vant for business process modeling. sequential, parallel, conditional, and iterativerouting are present in this model. there also are more advanced constructs suchas the choice between receive
payment andreminder . this is a so-called implicit
choice [14] since it is not resolved by the system but by the environment of the
system. the moment the bill is sent, it is undetermined whether receive payment
orreminder will be the next step in the process. another advanced construct is the
fact that task reminder is blocked until the goods have been shipped. the latter
construct is a so-called milestone [14]. the reason that we point out both con-
structs is that many systems have problems supporting these rather fundamentalprocess patterns [14].
workﬂow nets have clear semantics. the fact that one is able to play the so-
called “token game” using a minimal set of rules shows the fact that these modelsare executable. none of the informal informal techniques mentioned before (i.e.,isac, dfd, sadt, and idef) have formal semantics. besides these informal
techniques there are also many formal techniques. examples are the many variants
of process algebra and statecharts. the reason we prefer to use a variant of petrinets is threefold [13]:
petri nets are graphical and yet precise.
petri nets offer an abundance of analysis techniques.
petri nets treat states as ﬁrst class citizens.
the latter point deserves some more explanation. many techniques for business
process modeling focus exclusively on the active parts of the process, i.e., the
10tasks. this is very strange since in many administrative processes the actual
processing time is measured in minutes and the ﬂow time is measured in days.this means that most of the time cases are in-between two subsequent tasks.therefore, it is vital to model these states explicitly.
at the beginning of this section, we mentioned that there are informal tech-
niques (without formal semantics) and rigorous formal methods such as petri nets.over the last two decades many semi-formal methods have been proposed, i.e.,
in-between the two extreme classes mentioned earlier. these methods are in-
formal, however, because the models need to transformed into executable codemore rigorous interpretations are added afterwards. the uml (uniﬁed modelinglanguage) [15] in an example of such a language. it has become the de factostandard for software development. uml has four diagrams for process model-ing. uml supports variants of statecharts and its activity diagrams are inspiredby petri nets (i.e., a token-based semantics is used). many notations exist that areat the same level as uml activity diagrams. bpmn (business process modelingnotation) [3] diagrams and event-driven process chains (epcs) [16] are exam-ples of such languages. many researchers are trying to provide solid semantics
for uml, epcs, bpmn, bpel, etc. for subsets of these languages there are for-
malizations in terms of petri nets and transition systems. these formalizationstypically reveal ambiguous constructs in the corresponding language.
note that the goal of this article is not to advocate petri nets as an end-user
modeling language. uml, epcs, and bpm contain constructs that support theworkﬂow designer. however, petri nets serve as an important foundation for paistechnology. without such foundations it is impossible to reason about semantics,correctness, completeness, etc. a nice illustration is the or-join in epc andbpmn models that have semantics leading to paradoxes such as the “vicious cir-cle” [16]. moreover, a solid foundation can be used for analysis as will be shownnext.
4 techniques for process analysis
many paiss allow organizations to change their processes by merely changing themodels. the models are typically graphical and can be changed quite easily. thisprovides more ﬂexibility than conventional information systems. however, byreducing the threshold for change, errors are introduced more easily. therefore, itis important to develop suitable analysis techniques. however, it is not sufﬁcientto just develop these techniques. it is as least as important to look at methods and
11tools to make them applicable in a practical context.
traditionally, most techniques used for the analysis of business processes,
originate from operations research. all students taking courses in operations man-agement will learn to apply techniques such as simulation, queueing theory, andmarkovian analysis. the focus mainly is on performance analysis and less at-
tention is paid to the correctness of models. veriﬁcation andvalidation are often
neglected. as a result, systems fail by not providing the right support or even
break down. veriﬁcation is needed to check whether the resulting system is free
of logical errors. many process designs suffer from deadlocks and livelocks thatcould have been detected using veriﬁcation techniques. validation is needed tocheck whether the system actually behaves as expected. note that validation iscontext dependent while veriﬁcation is not. a system that deadlocks is not cor-rect in any situation. therefore, verifying whether a system exhibits deadlocks iscontext independent. validation is context dependent and can only be done withknowledge of the intended business process.
start register
send_billreceive_paymentarchiveship_goods check_availabilityreplenish
update
reminderendc1
c2c3
c4
c5
c6c7
c8c9
figure 5: an incorrect wf-net. place c9has been added to model that a replen-
ishment order can only be placed if the customer has paid. however, because ofthis addition the process can deadlock and a token is left behind in the process ifno replenishments are needed.
to illustrate the relevance of validation and veriﬁcation and to demonstrate
some of the techniques available, we return to the workﬂow net shown in fig-ure 4. this workﬂow process allows for the situation where a replenishment isissued before any payment is received. suppose that we want to change the de-
12sign such that replenishments are delayed until receiving payment. an obvious
way to model this is to connect task receive payment with replenish using an ad-
ditional place c9as shown in figure 5. although this extension seems to be correct
at ﬁrst glance, the resulting workﬂow net exhibits several errors. the workﬂowwill deadlock if a second replenishment is needed and something is left behind inthe process if no replenishments are needed. these are logical errors that can bedetected without any knowledge of the order handling process. for veriﬁcation,
application independent notions of correctness are needed. one of these notions
is the so-called soundness property [13]. a workﬂow net is sound if an only if the
workﬂow contains no dead parts (i.e., tasks that can never be executed), from anyreachable state it is always possible to terminate, and the moment the workﬂowterminates all places except the sink place are empty. note that soundness rulesout logical errors such as deadlocks and livelocks. the notion of soundness isapplicable to any workﬂow language. an interesting observation is that sound-ness corresponds to liveness and boundedness of the short-circuited net [13]. thelatter properties have been studied extensively [17]. as a result, powerful analy-sis techniques and tools can be applied to verify the correctness of a workﬂow
design. practical experience shows that many errors can be detected by verifying
the soundness property. moreover, petri-net theory can also be applied to guidethe designer towards the error.
start register
send_billreceive_paymentarchiveship_goods check_availability
reminderendc1
c2c4
c5
c6c7
c8
figure 6: a sound but incorrect wf-net. the shipping of goods is no longer
guaranteed.
soundness does not guarantee that the workﬂow net behaves as intended. con-
sider for example, the workﬂow net shown in figure 6. compared to the original
13model, the shipment of goods is skipped if some of the goods are not available.
again this may seem to be a good idea at ﬁrst glance. however, customers areexpected to pay even if the goods are never delivered. in other words, task re-
ceive
payment needs to be executed although task ship goods may never be exe-
cuted. the latter error can only be detected using knowledge about the context.based on this context one may decide whether this is acceptable or not. fewanalysis techniques exist to automatically support this kind of validation. the
only means of validation offered by today’s wfmss is gaming and simulation.
an interesting technique to support validation is inheritance of dynamic be-
havior. inheritance can be used as a technique to compare processes. inheritancerelates subclasses with superclasses [18]. a workﬂow net is a subclass of a su-perclass workﬂow net if certain dynamic properties are preserved. a subclasstypically contains more tasks. if by hiding and/or blocking tasks in the subclassone obtains the superclass, the subclass inherits the dynamics of the superclass.
1
the superclass can be used to specify the minimal properties the workﬂow de-sign should satisfy. by merely checking whether the actual design is a subclassof the superclass, one can validate the essential properties. consider for example
figure 7. this workﬂow net describes the minimal requirements the order han-
dling process should satisfy. the tasks register ,ship
goods ,receive payment , and
archive are mandatory. tasks ship goods andreceive payment may be executed in
parallel but should be preceded by register and followed by archive . the original
order handling process shown in figure 4 is a subclass of this superclass. there-fore, the minimal requirements are satisﬁed. however, the order handling processshown in figure 6 is not a subclass. the fact that task ship
goods can be skipped
demonstrates that not all properties are preserved.
inheritance of dynamic behavior is a very powerful concept that has many
applications. inheritance-preserving transformation rules and transfer rules of-fer support at design-time and at run-time [19]. subclass-superclass relationships
also can be used to enforce correct processes in an e-commerce setting. if busi-
ness partners only execute subclass processes of some common contract process,then the overall workﬂow will be executed as agreed. it should be noted thatworkﬂows crossing the borders of organizations are particularly challenging froma veriﬁcation and validation point of view. errors resulting from miscommuni-cation between business partners are highly disruptive and costly. therefore, itis important to develop techniques and tools for the veriﬁcation and validation of
1we have identiﬁed four notions of inheritance. in this article, we only refer to life-cycle
inheritance.
14start register
receive_paymentarchiveship_goods
endc1
c2c3
c4
figure 7: a superclass wf-net.
these processes. for example, in the context of soa-based processes (e.g., bpel
processes) the so-called open wf-nets (owf-nets) [20, 21] are used to studynotions such as controllability and accordance.
few mature tools aiming at the veriﬁcation of workﬂow processes exist. woﬂan
[22] is one of the notable exceptions. figure 8 shows a screenshot of woﬂan.woﬂan combines state-of-the-art scientiﬁc results with practical applications [22].woﬂan can interface with wfmss such as staffware, websphere, oracle bpel,
cosa, and yawl. it can also interface with bpr-tools such as protos and process
mining tools such as prom [23]. workﬂow processes designed using any of thesetools can be veriﬁed for correctness. it turns out that the challenge is not to decidewhether the design is sound or not. the real challenge is to provide diagnosticinformation that guides the designer to the error. woﬂan also supports the inher-itance notions mentioned before. given two workﬂow designs, woﬂan is able todecide whether one is a subclass of the other. tools such as woﬂan illustrate thebeneﬁts of a more fundamental approach. recently, several tools have been devel-oped for the analysis of bpel processes. the tools4bpel toolset consisting offiona, lola, and bpel2owfn is an example of a state-of-the-art bpel analyzer[21].
to conclude this section, we would like to refer to a study reported in [24].
this study shows that of the 604 process models in the sap r/3 reference model,20 percent contains errors that can easily be discovered using veriﬁcation. sincethe middle of the 1990s the sap r/3 reference model has been available in differ-ent versions to support the implementation and conﬁguration of the sap system.the reference model is not only included in the sap system itself, but also shippedwith the business process modeling tools aris of ids scheer or netprocess ofintellicorp. the reference model covers several modeling perspectives such as
15figure 8: a screenshot showing the veriﬁcation and validation capabilities of
woﬂan.
data and organization structure, but the main emphasis is on 604 non-trivial busi-
ness processes represented as event-driven process chains (epcs). more than20 percent of these epcs contain errors stemming from incorrect combinationsof connector elements such as deadlocks and livelocks. a deadlock describes asituation in a process model where e.g. a customer order remains waiting for anactivity to complete that can never be executed. a simple pattern leading to adeadlock is an xor split which is joined with an and. a livelock is an inﬁnite
loop, i.e., it is impossible to move beyond a certain point an terminate. the many
errors in the sap r/3 reference model illustrate the need for rigorous analysistechniques.
5 systems for process enactment
progress in computer hardware has been incredible. in 1964 gordon moore, pre-dicted that the number of elements on a produced chip would double every 18
16months.2up until now, moore’s law still applies. information technology has
also resulted in a spectacular growth of the information being gathered. the com-monly used term “information overload” illustrates this growth. already in 2003,it is estimated that for each individual, i.e., child, man, and woman, 800 megabytesof data are gathered each year [25]. the internet and the world-wide-web havemade an abundance of information available at low costs. however, despite theapparent progress in computer hardware and information processing, many infor-
mation systems leave much to be desired. one of the problems is that process
logic is mixed with application logic. as a result it is difﬁcult to change a systemand people need to “work around the system” rather than getting adequate sup-port. to improve ﬂexibility and reliability, process logic should be separated fromapplication logic. these observations justify the use of solid models and analysistechniques, as discussed before.
thus far, the focus of this article has been on the design and analysis of work
processes. now it is time to focus on the systems to enact these work processes.figure 9 shows the typical architecture of a business process management system.the designer uses the design tools to create models describing the processes and
the structure of the organization. the manager uses management tools to monitor
the ﬂow of work and act if necessary. the worker interacts with the enactmentservice. the enactment service can offer work to workers and workers can search,select and perform work. to support the execution of tasks, the enactment servicemay launch various kinds of applications. note that the enactment service is thecore of the system deciding on “what”, “how”, “when”, and “by whom”. clearly,the enactment service is driven by models of the processes and the organizations.by merely changing these models the system evolves and adapts. this is theultimate promise of paiss.
however, pais systems are not the “silver bullet” that solves all problems, i.e.,
“there is no such thing as a free lunch” and rigorous modeling is needed to capture
processes adequately. moreover, existing wfmss still have problems supporting
ﬂexibility (cf. section 6).
today’s wfmss have an architecture consistent with figure 9. consider, for
example, the screenshots of staffware shown in figure 10. staffware is one of theleading wfmss. the top window shows the design tool of staffware while deﬁn-
2moore (founder of intel), commenting on the growth of the microelectronics industry in 1964,
noted a doubling of the number of elements on a produced chip once every 12 months. for a decade
that meant a growth factor of approximately 1000. today, when moore’s law is quoted, the time
constant typically quoted is 18 months. however, some argue that a constant of 24 months is more
appropriate.
17offer
work enactment
service
managementtoolsdesign tools
run-time dataprocess
dataorganizational
data
perform
work workermanagementdesignerhistoricaldata
case
dataapplications
figure 9: the architecture of a pais.
ing a simple workﬂow process. work is offered through so-called work queues.
one worker can have multiple work queues and one work queue can be sharedamong multiple workers. the window in the middle shows the set of available
work queues (left) and the content of one of these work queues (right). the bottom
window shows an audit trail of a case. the three windows show only some of thecapabilities offered by contemporary workﬂow management systems. it is fairlystraightforward to map these windows onto the architecture. in other processes-aware information systems such as for example enterprise resource planning sys-tems, one will ﬁnd the architecture shown in figure 9 embedded in a larger archi-tecture.
the architecture shown in figure 9 assumes a centralized enactment service.
inside a single organization such an assumption may be realistic. however, in across-organizational setting this is not the case. fortunately, most vendors now
support the soa mentioned earlier. in a soa tasks are subcontracted to other
parties, i.e., what is one task for the service consumer may be a complex processfor a service consumer. the web-services stack using standards such as wsdland bpel facilitates the development of cross-organizational workﬂows.
despite the acceptance of paiss, the current generation of products leaves
much to be desired. to illustrate this, we focus on the current generation ofwfmss. we will use figure 9 to identify ﬁve problems.
18figure 10: the graphical workﬂow deﬁner, work queue, and audit trail of
staffware.
first of all, there is a lack of good standards for workﬂow management. there
is for example not a good standard for exchanging process models. existing for-mats have no clearly deﬁned semantics and fail to capture many routing con-structs. current standards for workﬂow management are incomplete, inconsistent,at the wrong abstraction level, and mainly driven by the commercial interests ofworkﬂow vendors. the workﬂow management coalition (wfmc) has been try-ing to standardize workﬂow processes since the early nineties. this resulted inthe workﬂow process deﬁnition language (wpdl) and the xml process deﬁ-nition language (xpdl). only a few vendors actively supported these standards.
the standards had no clearly deﬁned semantics and encouraged vendors to make
product-speciﬁc extensions. the business process execution language (bpel)[2] emerged later and is currently the de-facto standard for process execution in a
19soa environment. however, this language also has no clearly deﬁned semantics
and is at a rather technical level [26].
second, the expressive power, i.e., the ability to represent complex work pro-
cesses, of the current generation of wfmss is insufﬁcient. several evaluations re-vealed that the classical wfmss support less than half of the desirable workﬂowpatterns [14]. as an example, consider the workﬂow process shown in figure 4.few systems are able to handle the implicit choice and milestone construct iden-
tiﬁed before. fortunately, modern systems (e.g., based on bpel) support more
patterns.
a third problem is the lack of understanding of how people actually work.
work processes are more than the ordering of tasks. work is embedded in a socialcontext. a better understanding of this context is needed to make systems sociallyaware as well. modeling processes as if people are “machines” is a too limitedview of reality. it is vital to empower workers and to provide more ﬂexibility.
the fourth problem is the limited support for workﬂow analysis. as indi-
cated before, there are powerful techniques for workﬂow analysis. however, fewsystems embed advanced analysis techniques. besides model-based veriﬁcation,
validation, and performance analysis, new types of analysis are possible. the
combination of historical and run-time data on the one hand and workﬂow designson the other, offers breathtaking possibilities. historical data can be used to obtainstochastic data about routing and timing. using run-time data to reconstruct thecurrent state in a simulation model allows for on-the-ﬂy simulation . simulation
based on the current state, historical data, and a good model offers high-qualityinformation about potential problems in the near future. historical data can alsobe used for process mining . the goal of workﬂow mining is to derive process
models from transaction logs.
finally, many technical problems remain. some of these problems can be re-
solved using internet-based technology and standards. however, many problems
related to the integration of components and long-lived transactions remain un-
solved. since the early nineties [8] many database researchers have been focusingon transactional aspects of workﬂows. note that an instance of a workﬂow can beseen as a long running transaction, e.g., some cases (e.g., a mortgage or insurance)may run dozens of years [27].
in the remainder, we would like to focus on two particular challenges: process
ﬂexibility andprocess mining .
206 challenge: flexibility
adaptability has become one of the major research topics in the area of workﬂow
management [28]. today’s wfmss and many other paiss have problems sup-porting ﬂexibility. as a result, these systems are not used to support dynamicallychanging business processes or the processes are supported in a rigid manner, i.e.,changes are not allowed or handled outside of the system. these problems havebeen described and addressed extensively in literature [29, 30, 31, 32, 33, 34, 35,36]. nevertheless, many problems related to ﬂexibility remain unsolved.
in this section, we provide a taxonomy of ﬂexibility since it is probably the
biggest challenge today’s paiss are facing. to clarify things we focus on wfmssrather than the broader class of paiss.
to start, let us identify the different phases of a process (instance) in the con-
text of a wfms:
design time. at design time a generic process model is created. this model
cannot be enacted because it is not connected to some organizational setting.
conﬁguration time. at conﬁguration time a generic model is made more
speciﬁc and connected to some organizational context which allows it to beinstantiated.
instantiation time. at instantiation time a process instance is created to
handle a particular case (e.g., a customer order or travel request).
run time. at run-time the process instance is executed according to the
conﬁgured model. the different activities are being enacted as speciﬁed.
auditing time. at auditing time the process instance has completed, how-
ever, its audit trail is still available and can be inspected and analyzed.
flexibility plays a role in most of the phases. at design time some modeling
decisions can be postponed to run time. at run time one can decide to deviatefrom the model and at instantiation time one can change the process model usedfor the particular instance. when it comes to ﬂexibility, we identify three ﬂexibility
mechanisms :
defer, i.e., decide to decide later. this ﬂexibility mechanism deliberately
leaves freedom to manoeuver at a later phase. examples are the use of a
21declarative process modeling language which allows for the “under speciﬁ-
cation” of processes and the use of late-binding, i.e., the process model hasa “hole” that needs to be ﬁlled in a later phase.
change, i.e., decide to change model. most researchers have addressed
ﬂexibility issues by allowing for change. decisions made at an earlier phasemay be revisited. for example, for premium customers the process may be
adapted in an ad-hoc manner. the change may refer to the model for a
single instance (ad-hoc change) or to all future cases (evolutionary change).in both cases, a change can create inconsistencies. for evolutionary changethere may the additional complication that cases need to be migrated.
deviate, i.e., decide to ignore model. the third mechanism is to simply
deviate from the model, e.g., tasks are skipped even if the model does notallow for this to happen. in many environments it is desirable that peopleare in control, i.e., the system can only suggest activities but not force themto happen.
design timedefer
(decide to decide 
later)
configuration  time
instantiation  time
run  time
auditing  timechange
(decide to change 
model)deviate
(decide to ignore 
model)
e.g., defer to run-time by 
using late binding or
declarative modelingn/a n/a
n/a n/a n/ae.g., change model for
running instance or migrate
instance to new modeln/ae.g., skip or redo a task
while this is not specifiedn/ae.g., violate a configuration
constraint
e.g., modify model for a 
particular customere.g., remodel parts of the
process at configuration
timee.g., defer configuration
decisions
e.g., defer the selection of
parameters or process 
fragments
figure 11: classiﬁcation of the different types of ﬂexibility based on the phase
and mechanism.
figure 11 relates the two dimensions just mentioned. based on the different
phases and the three mechanisms, different types of ﬂexibility are classiﬁed. notethat we did not mention any examples of ﬂexibility at auditing time. after theprocess instance completes it is not possible to defer, change, or violate things,since this would imply fraud. figure 11 can be used to characterize the support
22for ﬂexibility of a concrete wfms. unfortunately, today’s systems support only
a few forms of ﬂexibility thus limiting the applicability of paiss.
it is impossible to provide a complete overview of the work done on ﬂexibility
in workﬂows. the reader is referred to [28] for another taxonomy. many au-thors have focused on the problems related to change [31, 32, 33, 34] (cf. the cell“change at run time” in figure 11). the problem of changing a process while in-stances are running was ﬁrst mentioned in [31]. in the context of adept [32, 34]
many problems has been addressed. see [34] for an excellent overview of prob-
lems related to dynamic change (the cell “change at run time” in figure 11). otherauthors approach the problem by avoiding change, e.g., either by using a moredeclarative language [33] or late binding [30, 35, 36] (also referred to as worklets,pockets of ﬂexibility, or process fragments). these approaches ﬁt into the col-umn “defer” in figure 11. another interesting approach is provided by the systemflower of pallas athena. this system uses the so-called “case handling” con-cept to provide more ﬂexibility [29]. most of the ideas of case handling relate tothe “defer” and “deviate” columns in figure 11.
7 challenge: process mining
process mining has emerged as a way to analyze systems and their actual usebased on the event logs they produce [37, 38]. process mining always starts withevent logs . events logs may originate from all kinds of paiss. examples are clas-
sical wfmss, erp systems (e.g. sap), case handling systems (e.g. flower),pdm systems (e.g. windchill), crm systems (e.g. microsoft dynamics crm),middleware (e.g., ibm’s websphere), hospital information systems (e.g., chip-soft), etc. these systems provide very detailed information about the activitiesthat have been executed.
the goal of process mining is to extract information (e.g., process models)
from these logs, i.e., process mining describes a family of a-posteriori analysis
techniques exploiting the information recorded in the event logs. typically, theseapproaches assume that it is possible to sequentially record events such that eachevent refers to an activity (i.e., a well-deﬁned step in the process) and is related toa particular case (i.e., a process instance). furthermore, some mining techniquesuse additional information such as the performer or originator of the event (i.e.,the person / resource executing or initiating the activity), the timestamp of theevent, or data elements recorded with the event (e.g., the size of an order).
process mining addresses the problem that most “process/system owners”
23have limited information about what is actually happening. in practice, there is
often a signiﬁcant gap between what is prescribed or supposed to happen, andwhat actually happens. only a concise assessment of reality, which process min-
ing strives to deliver, can help in verifying process models, and ultimately be usedin system or process redesign efforts.
models
analyzesrecords
events, e.g., 
messages,
transactions,
etc.specifies
configures
implements
analyzessupports/
controls
people machines
organizationscomponentsbusiness processes
figure 12: three types of process mining: (1) discovery, (2) conformance, and(3) extension.
the idea of process mining is to discover, monitor and improve real processes
(i.e., not assumed processes) by extracting knowledge from event logs. we con-
sider three basic types of process mining (figure 12):
discovery : there is no a-priori model, i.e., based on an event log some
model is constructed. for example, using the α-algorithm [37] a process
model can be discovered based on low-level events.
conformance : there is an a-priori model. this model is used to check if
reality conforms to the model. for example, there may be a process modelindicating that purchase orders of more than one million euro require twochecks. another example is the checking of the four-eyes principle. con-formance checking may be used to detect deviations, to locate and explain
these deviations, and to measure the severity of these deviations.
extension : there is an a-priori model. this model is extended with a new
aspect or perspective, i.e., the goal is not to check conformance but to enrich
24the model with the data in the event log. an example is the extension of a
process model with performance data, i.e., some a-priori process model isused on which bottlenecks are projected.
traditionally, process mining has been focusing on discovery , i.e., deriving
information about the original process model, the organizational context, and exe-cution properties from enactment logs. an example of a technique addressing thecontrol ﬂow perspective is the α-algorithm, which constructs a petri net model
[17] describing the behavior observed in the event log. however, process mining
is not limited to process models (i.e., control ﬂow) and recent process mining tech-niques are more and more focusing on other perspectives, e.g., the organizationalperspective or the data perspective. for example, there are approaches to extractsocial networks from event logs and analyze them using social network analy-sis. this allows organizations to monitor how people, groups, or software/systemcomponents are working together.
conformance checking compares an a-priori model with the observed behav-
ior as recorded in the log. in [39] it is shown how a process model (e.g., a petrinet) can be evaluated in the context of a log using metrics such as “ﬁtness” (isthe observed behavior possible according to the model?) and “appropriateness”
(is the model “typical” for the observed behavior?). however, it is also possible
to check conformance based on organizational models, predeﬁned business rules,temporal formulas, quality of service (qos) deﬁnitions, etc.
there are different ways to extend a given process model with additional per-
spectives based on event logs, e.g., decision mining, performance analysis, anduser proﬁling. decision mining, also referred to as decision point analysis, aimsat the detection of data dependencies that affect the routing of a case. starting froma process model, one can analyze how data attributes inﬂuence the choices madein the process based on past process executions. classical data mining techniquessuch as decision trees can be leveraged for this purpose. similarly, the processmodel can be extended with timing information (e.g., bottleneck analysis).
at this point in time there are mature tools such as the prom framework [23],
featuring an extensive set of analysis techniques which can be applied to real-lifelogs while supporting the whole spectrum depicted in figure 12.
while ﬂexibility issues may form an inhibitor for the application of paiss,
process mining techniques may increase the value of a pais. the structured analy-sis of the event logs of paiss provides an added value over information systemsthat not are aware of the processes these support.
process mining is strongly related to classical data mining approaches [40].
25however, the focus is not on data but on process-related information (e.g., the
ordering of activities). process mining is also related to monitoring and businessintelligence [41].
8 conclusion
process-aware information systems (paiss) follow a characteristic life-cycle . fig-
ure 13 shows the four phases of such a life-cycle [7]. in the design phase , the
processes are (re)designed. in the conﬁguration phase , designs are implemented
by conﬁguring a pais (e.g., a wfms). after conﬁguration, the enactment phase
starts where the operational business processes are executed using the system con-ﬁgured. in the diagnosis phase , the operational processes are analyzed to identify
problems and to ﬁnd things that can be improved. the focus of traditional work-ﬂow management (systems) is on the lower half of the life-cycle. as a result thereis little support for the diagnosis phase. moreover, support in the design phase islimited to providing an editor while analysis and real design support are missing.
figure 13: pais life-cycle.
in this article, we showed that paiss support operational business processes
by combining advances in information technology with recent insights from man-agement science. we started by reviewing the history of such systems and thenfocused on process design. from the many diagramming techniques available, we
chose one particular technique (petri nets) to show the basics. we also emphasized
the relevance of process analysis, e.g., by pointing out that 20 percent of the morethan 600 process models in the sap reference model are ﬂawed [24]. we also
26discussed the systems that enact such process designs (e.g., the workﬂow engines
embedded in various systems) and concluded by elaborating on two challenges:ﬂexibility and process mining. more ﬂexibility is needed to widen the scope ofpaiss. today’s systems tend to restrict people in their actions, even if this is notdesired. process mining is concerned with extracting knowledge from event logs.this is relatively easy in the context of paiss and offers many opportunities to im-prove the performance of the underlying business processes. moreover, process
mining is an essential factor in closing the pais life-cycle shown in figure 13.
references
[1] m. dumas, w.m.p. van der aalst, and a.h.m. ter hofstede. process-aware
information systems: bridging people and software through process tech-nology . wiley & sons, 2005.
[2] a. alves, a. arkin, s. askary, c. barreto, b. bloch, f. curbera, m. ford,
y. goland, a. guzar, n. kartha, c.k. liu, r. khalaf, dieter koenig,m. marin, v. mehta, s. thatte, d. rijn, p. yendluri, and a. yiu. webservices business process execution language version 2.0 (oasis stan-
dard). ws-bpel tc oasis, http://docs.oasis-open.org/wsbpel/2.0/wsbpel-
v2.0.html, 2007.
[3] s.a. white et al. business process modeling notation speciﬁcation (version
1.0, omg final adopted speciﬁcation), 2006.
[4] c. ouyang, m. dumas, a.h.m. ter hofstede, and w.m.p. van der aalst.
pattern-based translation of bpmn process models to bpel web services.international journal of web services research , 5(1):42–62, 2007.
[5] w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin,
1998.
[6] w.m.p. van der aalst. making work flow: on the application of petri
nets to business process management. in j. esparza and c. lakos, editors,
application and theory of petri nets 2002 , volume 2360 of lecture notes in
computer science , pages 1–22. springer-verlag, berlin, 2002.
27[7] w.m.p. van der aalst and k.m. van hee. workﬂow management: models,
methods, and systems . mit press, cambridge, ma, 2004.
[8] d. georgakopoulos, m. hornick, and a. sheth. an overview of workﬂow
management: from process modeling to workﬂow automation infrastruc-ture. distributed and parallel databases , 3:119–153, 1995.
[9] s. jablonski and c. bussler. workﬂow management: modeling concepts,
architecture, and implementation . international thomson computer press,
london, uk, 1996.
[10] c.a. ellis. information control nets: a mathematical model of ofﬁce in-
formation flow. in proceedings of the conference on simulation, measure-
ment and modeling of computer systems , pages 225–240, boulder, col-
orado, 1979. acm press.
[11] a. w. holt. coordination technology and petri nets. in g. rozenberg, edi-
tor,advances in petri nets 1985 , volume 222 of lecture notes in computer
science , pages 278–296. springer-verlag, berlin, 1985.
[12] m.d. zisman. representation, speciﬁcation and automation of ofﬁce pro-
cedures . phd thesis, university of pennsylvania, warton school of business,
1977.
[13] w.m.p. van der aalst. the application of petri nets to workﬂow manage-
ment. the journal of circuits, systems and computers , 8(1):21–66, 1998.
[14] w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. bar-
ros. workﬂow patterns. distributed and parallel databases , 14(1):5–51,
2003.
[15] object management group. omg uniﬁed modeling language 2.0 . omg,
http://www.omg.com/uml/, 2005.
[16] e. kindler. on the semantics of epcs: a framework for resolving the
vicious circle. data and knowledge engineering , 56(1):23–40, 2006.
[17] j. desel and j. esparza. free choice petri nets , volume 40 of cambridge
tracts in theoretical computer science . cambridge university press, cam-
bridge, uk, 1995.
28[18] t. basten and w.m.p. van der aalst. inheritance of behavior. journal of
logic and algebraic programming , 47(2):47–145, 2001.
[19] w.m.p. van der aalst and t. basten. inheritance of workﬂows: an approach
to tackling problems related to change. theoretical computer science ,
270(1-2):125–203, 2002.
[20] w.m.p. van der aalst, n. lohmann, p. massuthe, c. stahl, and k. wolf.
from public views to private views: correctness-by-design for services.in m. dumas and h. heckel, editors, informal proceedings of the 4th in-
ternational workshop on web services and formal methods (ws-fm 2007) ,
pages 119–134. qut, brisbane, australia, 2007.
[21] n. lohmann, p. massuthe, c. stahl, and d. weinberg. analyzing interacting
bpel processes. in s. dustdar, j.l. faideiro, and a. sheth, editors, inter-
national conference on business process management (bpm 2006) , volume
4102 of lecture notes in computer science , pages 17–32. springer-verlag,
berlin, 2006.
[22] h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing work-
ﬂow processes using woﬂan. the computer journal , 44(4):246–279, 2001.
[23] w.m.p. van der aalst, b.f. van dongen, c.w. g ¨unther, r.s. mans, a.k.
alves de medeiros, a. rozinat, v. rubin, m. song, h.m.w. verbeek, and
a.j.m.m. weijters. prom 4.0: comprehensive support for real processanalysis. in j. kleijn and a. yakovlev, editors, application and theory of
petri nets and other models of concurrency (icatpn 2007) , volume 4546
oflecture notes in computer science , pages 484–494. springer-verlag,
berlin, 2007.
[24] j. mendling, g. neumann, and w.m.p. van der aalst. understanding the
occurrence of errors in process models based on metrics. in f. curbera,f. leymann, and m. weske, editors, proceedings of the otm conference on
cooperative information systems (coopis 2007) , volume 4803 of lecture
notes in computer science , pages 113–130. springer-verlag, berlin, 2007.
[25] p. lyman and h. varian. how much information.
http://www.sims.berkeley.edu/how-much-info.
[26] w.m.p. van der aalst, m. dumas, a.h.m. ter hofstede, n. russell, h.m.w.
verbeek, and p. wohed. life after bpel? in m. bravetti, l. kloul, and
29g. zavattaro, editors, ws-fm 2005 , volume 3670 of lecture notes in com-
puter science , pages 35–50. springer-verlag, berlin, 2005.
[27] g. weikum and g. vossen. transactional information systems: theory,
algorithms, and the practice of concurrency control and recovery . morgan
kaufmann publishers, san francisco, ca, 2002.
[28] w.m.p. van der aalst and s. jablonski. dealing with workﬂow change:
identiﬁcation of issues and solutions. international journal of computer
systems, science, and engineering , 15(5):267–276, 2000.
[29] w.m.p. van der aalst, m. weske, and d. gr ¨unbauer. case handling: a new
paradigm for business process support. data and knowledge engineering ,
53(2):129–162, 2005.
[30] m. adams, a.h.m. ter hofstede, w.m.p. van der aalst, and d. edmond. dy-
namic, extensible and context-aware exception handling for workﬂows.in f. curbera, f. leymann, and m. weske, editors, proceedings of the otm
conference on cooperative information systems (coopis 2007) , volume
4803 of lecture notes in computer science , pages 95–112. springer-verlag,
berlin, 2007.
[31] c.a. ellis, k. keddara, and g. rozenberg. dynamic change within work-
ﬂow systems. in n. comstock, c. ellis, r. kling, j. mylopoulos, and s. ka-
plan, editors, proceedings of the conference on organizational computing
systems , pages 10 – 21, milpitas, california, august 1995. acm sigois,
acm press, new york.
[32] m. reichert and p. dadam. adeptﬂex: supporting dynamic changes of
workﬂow without loosing control. journal of intelligent information sys-
tems, 10(2):93–129, 1998.
[33] m. pesic, m. h. schonenberg, n. sidorova, and w.m.p. van der aalst.
constraint-based workﬂow models: change made easy. in f. curbera,f. leymann, and m. weske, editors, proceedings of the otm conference on
cooperative information systems (coopis 2007) , volume 4803 of lecture
notes in computer science , pages 77–94. springer-verlag, berlin, 2007.
[34] s. rinderle, m. reichert, and p. dadam. correctness criteria for dynamic
changes in workﬂow systems: a survey. data and knowledge engineer-
ing, 50(1):9–34, 2004.
30[35] s. sadiq, w. sadiq, and m. orlowska. pockets of flexibility in workﬂow
speciﬁcation. in proceedings of the 20th international conference on con-
ceptual modeling (er 2001) , volume 2224 of lecture notes in computer
science , pages 513–526. springer-verlag, berlin, 2001.
[36] m. weske. formal foundation and conceptual design of dynamic adapta-
tions in a workﬂow management system. in r. sprague, editor, proceedings
of the thirty-fourth annual hawaii international conference on system sci-
ence (hicss-34) . ieee computer society press, los alamitos, california,
2001.
[37] w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow min-
ing: discovering process models from event logs. ieee transactions on
knowledge and data engineering , 16(9):1128–1142, 2004.
[38] w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b.f. van dongen,
a.k. alves de medeiros, m. song, and h.m.w. verbeek. business processmining: an industrial application. information systems , 32(5):713–732,
2007.
[39] a. rozinat and w.m.p. van der aalst. conformance testing: measuring the
fit and appropriateness of event logs and process models. in c. bussleret al., editor, bpm 2005 workshops (workshop on business process intelli-
gence) , volume 3812 of lecture notes in computer science , pages 163–176.
springer-verlag, berlin, 2006.
[40] i.h. witten and e. frank. data mining: practical machine learning tools
and techniques (second edition) . morgan kaufmann, 2005.
[41] d. grigori, f. casati, m. castellanos, u. dayal, m. sayal, and m.c. shan.
business process intelligence. computers in industry , 53(3):321–343, 2004.
31