a general framework to identify software components
from execution data
cong liu1, boudewijn f. van dongen1, nour assy1and wil m.p. van der aalst2;1
1eindhoven university of technology, 5600mb eindhoven, the netherlands
2rwth aachen university, 52056 aachen, germany
fc.liu.3, b.f.v.dongen, n.assy g@tue.nl, wvdaalst@pads.rwth-aachen.de
keywords: component identiÔ¨Åcation, software execution data, community detection, empirical evaluation.
abstract: restructuring an object-oriented software system into a component-based one allows for a better understanding
of the software system and facilitates its future maintenance. a component-based architecture structures a
software system in terms of components and interactions where each component refers to a set of classes. in
reverse engineering, identifying components is crucial and challenging for recovering the component-based
architecture. in this paper, we propose a general framework to facilitate the identiÔ¨Åcation of components
from software execution data. this framework is instantiated for various community detection algorithms,
e.g., the newman‚Äôs spectral algorithm, louvain algorithm, and smart local moving algorithm. the proposed
framework has been implemented in the open source (pro)cess (m)ining toolkit prom . using a set of software
execution data containing around 1.000.000 method calls generated from four real-life software systems, we
evaluated the quality of components identiÔ¨Åed by different community detection algorithms. the empirical
evaluation results demonstrate that our approach can identify components with high quality, and the identiÔ¨Åed
components can be further used to facilitate future software architecture recovery tasks.
1 introduction
the maintenance and evolution of software systems
have become a research focus in software engineer-
ing community (mancoridis et al., 1999). architec-
tures of these systems can be used as guidance to
help understand and facilitate the future maintenance
(liu et al., 2018d). however, complete and up-to-date
software architecture descriptions rarely exist (lind-
vall and muthig, 2008). software architectures that
normally include components and interactions can
be reconstructed from low-level data, such as source
code, and execution data.
during the execution of software systems, tremen-
dous amounts of execution data can be recorded. by
exploiting these data, one can reconstruct a software
architecture. to this end, we need to identify com-
ponents from the execution data. for object-oriented
software systems, a component is extracted as a set of
classes that provide a number of functions for other
components. in this paper, we propose a general
framework to identify components from software exe-
cution data by applying various community detection
algorithms. community detection is one of the most
useful techniques for complex networks analysis with
an aim to identify communities. a software systemcan be viewed as a complex network of classes, in
which the component identiÔ¨Åcation problem can be
naturally regarded as the community detection prob-
lem with modularity maximization.
more concretely, we Ô¨Årst construct a class interac-
tion graph by exploiting the software execution data
that provides rich information on how classes interact
with each other. then, different community detec-
tion algorithms are applied to partition the class in-
teraction graph into a set of sub-graphs. classes that
are grouped in the same sub-graph form a component.
next, a set of quality criteria are deÔ¨Åned to evaluate
the quality of the identiÔ¨Åed components from differ-
ent perspectives. our framework deÔ¨Ånition is generic
and can be instantiated and extended to support vari-
ous community detection algorithms. to validate the
proposed approach, we developed two plug-ins in the
prom toolkit1, which support both the identiÔ¨Åcation
and the evaluation process.
the main contributions of this paper include:
a general framework to support the identiÔ¨Åcation
and quality evaluation of components from soft-
ware execution data and its instantiation by Ô¨Åve
community detection algorithms. different from
1http://www.promtools.org/existing graph partitioning-based algorithms, our
approach does not require users to specify the
number of clusters in advance; and
two plug-ins in the prom toolkit. this allows
other researchers reproducing our experiments
and comparing their approaches.
section 2 presents some related work. section 3
deÔ¨Ånes preliminaries. section 4 presents the main ap-
proach. section 5 introduces the tool support. in sec-
tion 6, we present the experimental evaluation. fi-
nally, section 7 concludes the paper.
2 related work
generally speaking, the identiÔ¨Åcation of components
can be achieved by clustering classes. table 1 sum-
marizes some typical component identiÔ¨Åcation ap-
proaches for object-oriented software systems by con-
sidering the required type of input (i.e., source code,
development documents, execution data), the type of
identiÔ¨Åcation techniques (e.g., graph clustering/parti-
tion, genetic algorithm, etc.), the parameter settings,
and tool support availability. note that 3/7means
that the tool is introduced in the paper but is not avail-
able online or does not work any more.
according to table 1, these approaches are clas-
siÔ¨Åed into three categories based on their required in-
put artifacts: (1) development documents-based ap-
proaches that take the sequence diagram, class dia-
gram and use case diagram as input; (2) source code-
based approaches that take the source code as input
and consider structural connections among classes;
and (3) execution data-based approaches that take
software execution data as input. the output of these
approaches are component conÔ¨Ågurations, i.e., how
classes are grouped to form components. our work
Ô¨Åts into the third category.
because software development documents are
typical either incomplete or out-of-date, the appli-
cability of the development documents-based ap-
proaches is quite limited. for components, the idea is
to group together classes that contribute to the same
function. source code-based approaches use the de-
pendencies among classes that are extracted from the
source code by static analysis techniques. however,
classes in the source code may have in some cases a
wider scope than the functional scope. in addition,
they are not applicable anymore if the source code
is not available (e.g., in case of legacy software sys-
tems). another way to determine which class con-
tributes to which function (component) is to execute
the software system with individual functions. theexecution data-based approaches help limit the anal-
ysis of dependency only to the space covered by the
application execution. however, existing execution
data-based approaches suffer from the following lim-
itations that may restrict the applicability:
requirement for user input parameters. ex-
isting approaches require users to specify a group
of parameters (e.g., the number/size of compo-
nents) as input. however, a reasonable parameter
setting is very difÔ¨Åcult for users that are not fa-
miliar with the approach. if parameters are not set
properly, the underlying approaches may perform
badly.
lack of a clearly deÔ¨Åned systematic method-
ology. a systematic methodology deÔ¨Ånes clearly
the required input, the techniques, the resulted
output and the evaluation criteria of the approach
to solve a general research challenge. existing
execution data-based approaches do not explicitly
deÔ¨Åne such a complete methodology. this limits
the applicability and extensibility of existing ap-
proaches in the large.
lack of tool support. the usability of an ap-
proach heavily relies on its tool availability. exist-
ing dynamic component identiÔ¨Åcation approaches
do not provide usable tools that implement their
techniques. this unavailability prohibits other re-
searchers to reproduce the experiment and com-
pare their approaches.
3 preliminaries
letumbe the method call universe, unbe the
method universe, ucbe the universe of classes, uo
be the object universe where objects are instances of
classes. to relate these universes, we introduce the
following notations: for any m2um,bm2unis the
method of which mis an instance. for any o2uo,
bo2ucis the class of o.
a method call is the basic unit of software execu-
tion data (liu et al., 2016; liu et al., 2018d; liu et al.,
2018a; liu et al., 2018c; liu et al., 2018b; leemans
and liu, 2017; qi et al., 2018). the method call and
its attributes are deÔ¨Åned as follows:
deÔ¨Ånition 1. (method call, attribute ) for any m2
um, the following standard attributes are deÔ¨Åned:
h:um!uois a mapping from method calls to
objects such that for each method call m 2um,
h(m)is the object containing the instance of the
method bm.
c:um!um[f?g is the calling relation among
method calls. for any m i;mj2um, c(mi) =mjtable 1: summary of existing component identiÔ¨Åcation approaches.
reference required input artifacts techniquesparameter
requirementtool
availability
(lee et al., 2001) development documents graph clustering 3 7
(kim and chang, 2004) development documents use case clustering 3 3/7
(hasheminejad and jalili, 2015) development documents evolutionary algorithm 3 7
(washizaki and fukazawa, 2005) source code class relation clustering 3 3/7
(kebir et al., 2012) source codehierarchical clustering
genetic algorithm3 7
(cui and chae, 2011) source code hierarchical clustering 3 3/7
(luo et al., 2004) source codegraph clustering
graph iterative analysis3 7
(chiricota et al., 2003) source code graph clustering 3 7
(mancoridis et al., 1999) source code graph partition 3 3/7
(qin et al., 2009) execution data hyper-graph clustering 3 7
(allier et al., 2009) execution data concept lattices 3 7
(allier et al., 2010) execution data genetic algorithm 3 7
means that m iis called by m j, and we name m ias
the callee and m jas the caller. for m 2um, if
c(m) =?, then bm is a main method.
deÔ¨Ånition 2. (software execution data ) sdum
is the software execution data.
according to deÔ¨Ånition 2, the software execution
data are deÔ¨Åned as a Ô¨Ånite set of method calls.
4 component
identification
the input of our approach is software execution data,
which can be obtained by instrumenting and monitor-
ing software execution. in section 4.1, we Ô¨Årst give
an overview of the identiÔ¨Åcation framework. then,
we present the instantiation of the framework with de-
tails in sections 4.2-4.4.
4.1 approach overview
an approach overview is described in the following:
class interaction graph construction. starting
from the software execution data, we construct a
class interaction graph ( cig) where a node rep-
resents a class and an edge represents a calling
relation among the two classes.
component identiÔ¨Åcation. by taking the con-
structed cig as input, we partition it into a set
of sub-graphs using existing community detection
algorithms. classes that are grouped in the same
sub-graph form components.
quality evaluation of the identiÔ¨Åed compo-
nents. after identifying a set of components, we
evaluate the quality of the identiÔ¨Åed components
against the original cig.4.2 class interaction graph
construction
given the software execution data, we Ô¨Årst construct
thecig according to the following deÔ¨Ånition.
deÔ¨Ånition 3. (class interaction graph ) let sd be
the execution data of a piece of software. g = (v;e)
is deÔ¨Åned as the class interaction graph (cig) of sd
such that:
v=fv2ucj9m2sd:[h(m)=v_\h(c(m))=vg;
e=f(vi;vj)2vvj9m2sd:[h(m) =vi^
\h(c(m)) = vjg.
according to deÔ¨Ånition 3, a cig contains (1) a set
of classes, i.e. vertices; and (2) a set of calling rela-
tions among them, i.e., edges. note that the calling re-
lations among classes are obtained from method calls,
e.g., if m1calls m2we have a calling relation saying
the class of m1calls the class of m2. different from
existing software call graphs that are deÔ¨Åned on top
of the method calling relation in the source code (qu
et al., 2015), the cig id deÔ¨Åned on the class calling
relations from the execution data.
4.3 component identiÔ¨Åcation
after constructing a cig, we introduce how to iden-
tify components out of the cig. essentially, the com-
ponent identiÔ¨Åcation is a division of the vertices of
cig into a Ô¨Ånite set of non-overlapping groups as de-
Ô¨Åned in the following:
deÔ¨Ånition 4. (component identiÔ¨Åcation ) let sd be
the software execution data and g = (v;e)be its
cig. csp(v)is deÔ¨Åned as the identiÔ¨Åed compo-
nent set based on certain approach such that:
s
c2csc=v; and 8c1;c22cs, we have c 1\c2=/0, i.e., classes
of different components do not overlap.
deÔ¨Ånition 4 gives the general idea of component
identiÔ¨Åcation by explicitly deÔ¨Åning the input and out-
put, based on which we can see that the identiÔ¨Åcation
does not allow overlaps among components. note
that this deÔ¨Ånition can be instantiated by any graph
clustering or community detection techniques.
in the following, we instantiate the component
identiÔ¨Åcation framework by Ô¨Åve state-of-the-art com-
munity detection algorithms: (1) the newman‚Äôs spec-
tral algorithm (newman, 2006) and its mvm reÔ¨Åne-
ment (schaffter, 2014); (2) louvain algorithm (blon-
del et al., 2008) and multi-level reÔ¨Ånement (rotta and
noack, 2011); and (3) smart local moving algorithm
(waltman and van eck, 2013).
1) newman‚Äôs spectral algorithm and moving ver-
tex method reÔ¨Ånement. newman‚Äôs spectral algorithm
aims to determine whether there exists any natural di-
vision of the vertices in a graph/network into nonover-
lapping groups/modules, where these groups/modules
may be of any size. this is addressed by deÔ¨Åning a
quantity called modularity qto evaluate the division
of a set of vertices into modules. qis deÔ¨Åned as fol-
lows: q=fe efe where ferepresents fraction of
edges falling within modules and efe represents ex-
pected fraction of such edges in randomized graphs.
to further improve the quality of group structures
inferred using the newman‚Äôs spectral algorithm, a
reÔ¨Ånement technique, called moving vertex method
(mvm) is introduced in (schaffter, 2014). mvm
works independently on top of the detection results
obtained by the newman‚Äôs spectral algorithm. it tries
to move nodes from one community to another com-
munity and checks the effect of the modiÔ¨Åcation on
q. the modiÔ¨Åcation that leads to the largest increase
inqis accepted. for more explanations of the mvm
technique reÔ¨Ånement, the reader is referred to (new-
man, 2006) and (schaffter, 2014).
2) louvain algorithm and multi-level reÔ¨Ånement.
the louvain algorithm starts with each node in a net-
work belonging to its own community, i.e., each com-
ponent consists of one node only. then, the algo-
rithm uses the local moving heuristic to obtain an im-
proved community structure. the idea of local mov-
ing heuristic is to repeatedly move individual nodes
from one community to another in such a way that
each node movement results in a modularity increase.
hence, individual nodes are moved from one commu-
nity to another until no further increase in modularity
can be achieved. at this point, a reduced network
where each node refers to a community in the orig-
inal network is constructed. the louvain algorithm
proceeds by assigning each node in the reduced net-work to its own singleton community. next, the local
moving heuristic is applied to the reduced network in
the same way as was done for the original network.
the algorithm continues until a network is obtained
that cannot be reduced further. an extension of the
louvain algorithm with multi-level reÔ¨Ånement is in-
troduced in (rotta and noack, 2011). the reÔ¨Ånement
improves solutions found by the louvain algorithm
in such a way that they become locally optimal with
respect to individual node movements.
3) smart local moving algorithm. the smart lo-
cal moving (slm) algorithm starts with each node
in a network being its own community and it iter-
ates over all communities in the present community
structure. for each community, a sub-network is con-
structed which is a copy of the original network that
includes only the nodes belonging to a speciÔ¨Åc com-
munity of interest. the slm algorithm then uses the
local moving heuristic to identify communities in the
sub-network. each node in the sub-network is Ô¨Årst
assigned to its own singleton community, and then lo-
cal moving heuristic is applied. after a community
structure has been obtained for each sub-network, the
slm algorithm constructs a reduced network. in the
reduced network, each node corresponds to a com-
munity in one of the sub-networks. the slm al-
gorithm then performs an initial assignment of the
nodes to communities in the reduced network in such
a way that nodes corresponding to communities in the
same sub-network are assigned to the same commu-
nity. the previous steps start over again for the re-
duced network until a network is obtained that cannot
be reduced any more.
4.4 quality metrics
this section introduces a group of quality metrics to
help evaluate the components identiÔ¨Åed by different
community detection techniques.
1) size and counting .
to give a general overview of the identiÔ¨Åed com-
ponents, we Ô¨Årst introduce the following metrics:
the number of identiÔ¨Åed components (noc) from
the execution data of a software system.
the average size of identiÔ¨Åed components (aoc),
i.e., the average number of classes that each com-
ponent involves.
the ratio of single class components (rsc). rsc
means the number of classes in single class com-
ponents divided by the total number of classes.
the ratio of largest component (rlc). rlc rep-
resents the number of classes in the largest com-
ponent divided by the total number of classes.the ratio of intermediate components (ric). ric
represents the number of classes in the interme-
diate components divided by the total number of
classes. note that rics refer to components that
neither contains one class nor be the largest ones.
according to (cui and chae, 2011), components
with very large number of classes (high rlc) or very
small number of classes (high rsc) cannot be re-
garded as good components. an ideal distribution is
a normal distribution where quite many components
have reasonable size (high ric). hence, we should
try to avoid the case of too many single class compo-
nents as well as a single very large one.
2) coupling . in component-based software sys-
tems, coupling represents how tightly one compo-
nent interacts with the others. the coupling metric
between two components is deÔ¨Åned as the ratio of
the number of edges connecting them to the maximal
number of edges that connect all their vertices.
letg= (v;e)be a cig andcsbe the identiÔ¨Åed
components. for any c1;c22cs, we have:
coupl (c1;c2) =jcouedgej
jc1jjc2j(1)
where couedge =e\((c1c2)[(c2c1))rep-
resents the set of edges that connecting components
c1andc2. then, the coupling metric of all compo-
nents is deÔ¨Åned as follows:
coupling (cs) =√•
1i<jjcsjcoupl (ci;cj)
jcsj(jcsj 1)(2)
3) cohesion . in component-based software sys-
tems, cohesion represents how tightly classes in the
same component are associated. the cohesion metric
of a component is deÔ¨Åned as the ratio of the number
of its edges to the maximal number of edges that can
connect all its vertices (the number of edges in the
complete graph on the set of vertices).
for any c2cs, its cohesion metric is deÔ¨Åned as:
cohes (c) =jcohedge (c)j
jcj(jcj 1)(3)
where cohedge (c) =e\(cc)represents the set
of edges that are contained in c. then, the cohesion
metric of all components is deÔ¨Åned as follows:
cohesion (cs) =√•
c2cscohes (c)
jcsj(4)
4) modularity quality . the cohesion and cou-
pling metrics measure the quality of the identiÔ¨Åca-
tion results from two opposite perspectives. a well-
organized component-based architecture should be
highly cohesive and loosely coupled.table 2: number and size of identiÔ¨Åed components.
lexi 0.1.1 jhotdraw 5.1 junit 3.7 jgraphx 3.5.1
noc aoc noc aoc noc aoc noc aoc
nsa 20 3.4 13 7.1 9 5.2 11 5.6
nsa-r 3 22.3 5 18.6 4 10.2 1 62
slm 5 13.6 6 15.5 5 9.4 5 12.4
la 5 13.6 6 15.5 5 9.4 5 12.4
la-r 5 13.6 7 13.3 5 9.4 5 12.4
base 5 13.6 7 13.3 3 15.6 9 6.9
modularity quality (mq) aims to reward the cre-
ation of highly cohesive components and to penalize
excessive coupling among them. it is formally de-
Ô¨Åned as follows:
mq(cs) =cohesion (cs) coupling (cs) (5)
mq lies in the [ 1;1]interval and a higher mq
value normally means a better architecture quality.
5 implementation in prom
the open-source (pro)cess (m)ining framework
prom 62provides a completely plugable environment
for process mining and related topics. it can be ex-
tended by adding plug-ins, and currently, more than
1600 plug-ins are included.
the component identiÔ¨Åcation and quality evalua-
tion approaches have been implemented as two plug-
ins in our prom 6 package3. the Ô¨Årst one, called in-
tegrated component identiÔ¨Åcation framework , takes
as input the software execution data, and returns the
component conÔ¨Åguration Ô¨Åle that describes which
classes belong to which components. note that this
plugin currently supports all community detection al-
gorithms introduced in section 4.3. the second plu-
gin, called quality measure of component identiÔ¨Å-
cation , takes (1) the software execution data and (2)
component conÔ¨Åguration as input, and returns the
quality metrics (e.g., size and modularity values) of
the identiÔ¨Åcation component conÔ¨Åguration. all ex-
perimental results in the following discussions are
based on these two tools.
6 experimental ev aluation
then, we evaluate our approaches using four open-
source software systems.
2http://www.promtools.org/
3https://svn.win.tue.nl/repos/prom/packages/softwareprocessmining/0.250
.0100 0 0.010.670.940
.3380 .3380 .3380.540
.080
.050.6620 .6620 .6620
.45n
san sa-rs lml al a-rbaseline0.00.20.40.60.81.0size(a) lexi 0.1.1
0.0860
0 0 0 0.010.430.5260
.30 .3020 .3020.420.4840.4740.70 .6980 .6980
.57n
san sa-rs lml al a-rbaseline0.00.10.20.30.40.50.60.70.8size (b) jhotdraw 5.1
0.220
0 0 0 0 0.390.430
.250 .250 .250.460
.390.570.750 .750 .750
.54n
san sa-rs lml al a-rbaseline0.00.10.20.30.40.50.60.70.8size
(c) junit 3.7
0.1450
0 0 0 0.020.8210
.3380 .3380 .3380
.190
.0350
0.6620 .6620 .6620.79n
san sa-rs lml al a-rbaseline0.00.20.40.60.81.0 rsc 
rlc 
ricsize (d) jgraphx 3.5.1
figure 1: size comparison.
6.1 subject software systems and
execution data
for our experiments, we use the execution data that
are collected from four open-source software systems.
more speciÔ¨Åcally, lexi 0.1.14is a java-based open-
source word processor. its main function is to cre-
ate documents, edit texts, save Ô¨Åles, etc. the format
of exported Ô¨Åles are compatible with microsoft word.
jhotdraw 5.15is a gui framework for technical and
structured 2d graphics. its design relies heavily on
some well-known gof design patterns. junit 3.76
is a simple framework to write repeatable tests for
java programs. it is an instance of the xunit archi-
tecture for unit testing frameworks. jgraphx 3.5.17
is an open-source family of libraries that provide fea-
tures aimed at applications that display interactive di-
agrams and graphs.
note that the execution data of lexi 0.1.1 ,
jgraphx 3.5.1 , and jhotdraw 5.1 are collected by
monitoring typical execution scenarios of the soft-
ware systems. for example, a typical scenario of the
jhotdraw 5.1 is: launch jhotdraw, draw two rectan-
gles, select and align the two rectangles, color them
as blue, and close jhotdraw. for the junit 3.7 , we
monitor the execution of the project test suite with
259 independent tests provided in the mapperxml8
release. table 3 shows the detailed statistics of the
data execution, including the number of packages/-
classes/methods that are loaded during execution and
the number of method calls analyzed.
4http://essere.disco.unimib.it/svn/dpb/lexi%20v0.1.1%20alpha/
5http://www.inf.fu-berlin.de/lehre/ws99/java/swing/jhotdraw5.1/
6http://essere.disco.unimib.it/svn/dpb/junit%20v3.7/
7https://jgraph.github.io/mxgraph/
8http://essere.disco.unimib.it/svn/dpb/mapperxml%20v1.9.7/table 3: statistics of subject software execution data.
software #packages #classes #methods #method calls
lexi 0.1.1 5 68 263 20344
jhotdraw 5.1 7 93 549 583423
junit 3.7 3 47 213 363948
jgraphx 3.5.1 9 62 695 74842
6.2 identiÔ¨Åcation approaches
five component identiÔ¨Åcation approaches are evalu-
ated with respect to a baseline. the Ô¨Årst approach
identiÔ¨Åes components by the newman‚Äôs spectral algo-
rithm (denoted as nsa). the second approach iden-
tiÔ¨Åes components by newman‚Äôs spectral algorithm
with mvm reÔ¨Ånement (denoted as nsa-r ). the third
one creates a component based on smart local mov-
ing algorithm (denoted as slm ). the forth approach
identiÔ¨Åes components by the louvain algorithm (de-
noted as la). finally, the last one identiÔ¨Åes compo-
nents by the louvain algorithm with multi-level re-
Ô¨Ånement (denoted as la-r ).
to evaluate the quality of identiÔ¨Åed components,
we compare them with a baseline. the packages that
are deÔ¨Åned in the source code are assumed as compo-
nents manually classiÔ¨Åed by software developers in
the design stage, and are used as the baseline in the
following experiments.
6.3 evaluation results
in this section, we evaluate the quality of the compo-
nents identiÔ¨Åed by different approaches as well as the
baseline. more speciÔ¨Åcally, we Ô¨Årst identify compo-
nents for the four software systems using nsa,nsa-
r,slm ,laandla-r . afterwards, the quality of com-
ponents is measured and compared in terms of size
and modularity metrics that are deÔ¨Åned in section
4.4. in addition, the time performance of different
approaches are also compared.
the number of identiÔ¨Åed components (noc) and
the average size of components (aoc) for the four
open-source software systems based on nsa,nsa-r ,
slm ,la,la-r , and the baseline are shown in table 2.
note that the aoc value decreases as the noc value
increases for each software system. this is because
the aoc is computed as the total number of classes
divided by noc. in general, the noc/aoc values of
nsa-r ,slm ,laandla-r are similar with the base-
line while the noc/aoc value of nsa is much higher
than others, i.e., too much components are identiÔ¨Åed
bynsa for each software system.
fig. 1 shows the size metric evaluation results
forlexi 0.1.1 ,jhotdraw 5.1 ,junit 3.7 andjgraphx
3.5.1 based on nsa,nsa-r ,slm ,la,la-r , and the0.0580.2380.2660.2660.2660
.16n
san sa-rs lml al a-rbaseline0.000.050.100.150.200.250.30modularity(a) lexi 0.1.1
0.0580.2380.2660.2660.2660
.16n
san sa-rs lml al a-rbaseline0.000.050.100.150.200.250.30modularity (b) jhotdraw 5.1
0.090.2920.3130.3130.3130
.161n
san sa-rs lml al a-rbaseline0.000.050.100.150.200.250.300.35modularity
(c) junit 3.7
0.0530.120.280.280.280
.22n
san sa-rs lml al a-rbaseline0.000.050.100.150.200.250.30modularity (d) jgraphx 3.5.1
figure 2: modularity comparison.
baseline. normally, a higher ric (or low rsc and
rlc) value indicates that the identiÔ¨Åed components
are more well-organized than those with lower ric
(or high rsc and rlc) values. generally speaking,
the ric values of slm ,laandla-r are much higher
than those of nsa andnsa-r as well as the baseline.
as for the slm ,laandla-r , they have almost the
same results. this can be explained by the fact that
all these three approaches are based on the local mov-
ing heuristic. different from this general conclusion,
there are some exceptions. considering for example
thejgraphx 3.5.1 . the ric value of the baseline is
much higher than those of slm ,laandla-r . this
indicates that the package structure of the jgraphx
3.5.1 is better-organized than those of other software.
fig. 2 shows the evaluation results in terms of the
mqfor the four software systems. this metric mea-
sures the quality of the identiÔ¨Åed components from an
architectural point of view. a higher mqvalue nor-
mally indicates that the identiÔ¨Åed components lead to
a better software architecture quality than those with
lower mqvalues. generally speaking, the mqvalues
ofslm ,laandla-r are much higher than those of
nsa andnsa-r as well as the baseline. in addition,
nsa-r always performs better than nsa for the four
software systems. the rationale behind is that nsa-r
reÔ¨Ånes the results of nsa with the aim to improve the
overall modularity.
fig. 3 shows the time performance comparison
results in terms of milliseconds for the four soft-
ware systems. an approach with a lower performance
value indicates that it is more efÔ¨Åcient than that with
a higher value. generally speaking, slm ,laandla-
rare more efÔ¨Åcient than nsa andnsa-r according
to fig. 3. as for laandla-r ,lais always more
efÔ¨Åcient than la-r because la-r requires a further
reÔ¨Ånement step on top of the results of la.
2 4 72 9 7
1 8 4
1 4 31 5 1
n s a n s a - r s l m l a l a - r05 01 0 01 5 02 0 02 5 03 0 0e x e c u t i o n t i m e / m s(a) lexi 0.1.1
3 8 1 43 9 0 0
3 1 0 0 3 1 3 6 3 1 6 9
n s a n s a - r s l m l a l a - r05 0 01 0 0 01 5 0 02 0 0 02 5 0 03 0 0 03 5 0 04 0 0 0e x e c u t i o n t i m e / m s (b) jhotdraw 5.1
2 7 4 62 8 8 3
2 6 3 3 2 6 1 8 2 6 6 8
n s a n s a - r s l m l a l a - r05 0 01 0 0 01 5 0 02 0 0 02 5 0 03 0 0 0e x e c u t i o n t i m e / m s
(c) junit 3.7
6 4 26 7 9
5 5 4 5 5 0 5 5 9
n s a n s a - r s l m l a l a - r01 0 02 0 03 0 04 0 05 0 06 0 07 0 0e x e c u t i o n t i m e / m s (d) jgraphx 3.5.1
figure 3: time performance comparison.
in summary, compared with nsa,nsa-r ,slm
and la,la-r can efÔ¨Åciently (from a performance
point of view) identify components with high mqval-
ues, which can help reconstruct the software architec-
ture with better quality. based on the experimental
evaluation, we recommend to apply the la-r to iden-
tify components for architecture recovery from soft-
ware execution data.
7 conclusion
by exploiting tremendous amounts of software exe-
cution data, we can identify a set of components for
a given software system. our proposed approaches
have been implemented in the prom toolkit and its
advantage and usability were demonstrated by apply-
ing them to a set of software execution data generated
from four different real-life software systems.
this paper provides a concrete step to reconstruct
the architecture from software execution data by iden-
tifying a set of components. if the execution data
does not cover certain part of the software, our ap-
proach fails to identify interaction between classes. in
this scenario, combination of the static analysis tech-
niques (i.e., source code) and dynamic analysis tech-
niques (i.e., execution data) is desired. another future
challenge is to discover how components interact with
each other via interfaces as well as reconstructing the
overall software architecture. in addition, we will
conduct an empirical evaluation to compare the qual-
ity of the recovered architectural models using differ-
ent component identiÔ¨Åcation techniques (e.g., (allier
et al., 2009; qin et al., 2009)) and interface identiÔ¨Å-
cation techniques (e.g., (liu et al., 2018a)).references
allier, s., sahraoui, h., sadou, s., and vaucher, s.
(2010). restructuring object-oriented applications
into component-oriented applications by using consis-
tency with execution traces. component-based soft-
ware engineering , pages 216‚Äì231.
allier, s., sahraoui, h. a., and sadou, s. (2009). identi-
fying components in object-oriented programs using
dynamic analysis and clustering. in proceedings of
the 2009 conference of the center for advanced stud-
ies on collaborative research , pages 136‚Äì148. ibm
corp.
blondel, v . d., guillaume, j.-l., lambiotte, r., and lefeb-
vre, e. (2008). fast unfolding of communities in large
networks. journal of statistical mechanics: theory
and experiment , 2008(10):p10008.
chiricota, y ., jourdan, f., and melanc ¬∏on, g. (2003). soft-
ware components capture using graph clustering. in
program comprehension, 2003. 11th ieee interna-
tional workshop on , pages 217‚Äì226. ieee.
cui, j. f. and chae, h. s. (2011). applying agglomerative
hierarchical clustering algorithms to component iden-
tiÔ¨Åcation for legacy systems. information and soft-
ware technology , 53(6):601‚Äì614.
hasheminejad, s. m. h. and jalili, s. (2015). ccic: cluster-
ing analysis classes to identify software components.
information and software technology , 57:329‚Äì351.
kebir, s., seriai, a.-d., chardigny, s., and chaoui, a.
(2012). quality-centric approach for software compo-
nent identiÔ¨Åcation from object-oriented code. in soft-
ware architecture (wicsa) and european conference
on software architecture (ecsa), 2012 joint working
ieee/ifip conference on , pages 181‚Äì190. ieee.
kim, s. d. and chang, s. h. (2004). a systematic method
to identify software components. in 11th asia-paciÔ¨Åc
software engineering conference, 2004. , pages 538‚Äì
545. ieee.
lee, j. k., jung, s. j., kim, s. d., jang, w. h., and ham,
d. h. (2001). component identiÔ¨Åcation method with
coupling and cohesion. in eighth asia-paciÔ¨Åc soft-
ware engineering conference, 2001. apsec 2001. ,
pages 79‚Äì86. ieee.
leemans, m. and liu, c. (2017). xes software event exten-
sion. xes working group , pages 1‚Äì11.
lindvall, m. and muthig, d. (2008). bridging the software
architecture gap. computer , 41(6).
liu, c., van dongen, b., assy, n., and van der aalst, w.
(2016). component behavior discovery from software
execution data. in international conference on com-
putational intelligence and data mining , pages 1‚Äì8.
ieee.
liu, c., van dongen, b., assy, n., and van der aalst, w.
(2018a). component interface identiÔ¨Åcation and be-
havior discovery from software execution data. in
26th international conference on program compre-
hension (icpc 2018) , pages 97‚Äì107. acm.
liu, c., van dongen, b., assy, n., and van der aalst, w.
(2018b). a framework to support behavioral design
pattern detection from software execution data. in13th international conference on evaluation of novel
approaches to software engineering , pages 65‚Äì76.
liu, c., van dongen, b., assy, n., and van der aalst, w.
(2018c). a general framework to detect behavioral de-
sign patterns. in international conference on software
engineering (icse 2018) , pages 234‚Äì235. acm.
liu, c., van dongen, b., assy, n., and van der aalst, w.
(2018d). software architectural model discovery from
execution data. in 13th international conference on
evaluation of novel approaches to software engi-
neering , pages 3‚Äì10.
luo, j., jiang, r., zhang, l., mei, h., and sun, j. (2004).
an experimental study of two graph analysis based
component capture methods for object-oriented sys-
tems. in software maintenance, 2004. proceedings.
20th ieee international conference on , pages 390‚Äì
398. ieee.
mancoridis, s., mitchell, b. s., chen, y ., and gansner,
e. r. (1999). bunch: a clustering tool for the recov-
ery and maintenance of software system structures.
insoftware maintenance, 1999.(icsm‚Äô99) proceed-
ings. ieee international conference on , pages 50‚Äì59.
ieee.
newman, m. e. (2006). modularity and community struc-
ture in networks. proceedings of the national academy
of sciences , 103(23):8577‚Äì8582.
qi, j., liu, c., cappers, b., and van de wetering, h.
(2018). visual analysis of parallel interval events. in
20th eg/vgtc conference on visualization (eurovis
2018) , pages 1‚Äì6.
qin, s., yin, b.-b., and cai, k.-y . (2009). mining compo-
nents with software execution data. in international
conference software engineering research and prac-
tice., pages 643‚Äì649. ieee.
qu, y ., guan, x., zheng, q., liu, t., wang, l., hou, y ., and
yang, z. (2015). exploring community structure of
software call graph and its applications in class cohe-
sion measurement. journal of systems and software ,
108:193‚Äì210.
rotta, r. and noack, a. (2011). multilevel local search
algorithms for modularity clustering. journal of ex-
perimental algorithmics (jea) , 16:2‚Äì3.
schaffter, t. (2014). from genes to organisms: bioin-
formatics system models and software . phd thesis,
¬¥ecole polytechnique f ¬¥ed¬¥erale de lausanne.
waltman, l. and van eck, n. j. (2013). a smart local mov-
ing algorithm for large-scale modularity-based com-
munity detection. the european physical journal b ,
86(11):471.
washizaki, h. and fukazawa, y . (2005). a technique for
automatic component extraction from object-oriented
programs by refactoring. science of computer pro-
gramming , 56(1-2):99‚Äì116.