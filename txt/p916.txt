discovering hierarchical consolidated models from
process families
assy, n.; van dongen, b.f.; van der aalst, w.m.p.
published in:
advanced information systems engineering
doi:
10.1007/978-3-319-59536-8_20
published: 01/01/2017
document version
publisher’s pdf, also known as version of record (includes final page, issue and volume numbers)
please check the document version of this publication:
• a submitted manuscript is the author's version of the article upon submission and before peer-review. there can be important differences
between the submitted version and the official published version of record. people interested in the research are advised to contact the
author for the final version of the publication, or visit the doi to the publisher's website.
• the final author version and the galley proof are versions of the publication after peer review.
• the final published version features the final layout of the paper including the volume, issue and page numbers.
link to publication
citation for published version (apa):
assy, n., van dongen, b. f., & van der aalst, w. m. p. (2017). discovering hierarchical consolidated models
from process families. in advanced information systems engineering: 29th international conference, caise
2017, essen, germany, june 12-16, 2017, proceedings (pp. 314-329). (lecture notes in computer science
(including subseries lecture notes in artificial intelligence and lecture notes in bioinformatics); vol. 10253
lncs). dordrecht: springer. doi: 10.1007/978-3-319-59536-8_20
general rights
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners
and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights.
            • users may download and print one copy of any publication from the public portal for the purpose of private study or research.
            • you may not further distribute the material or use it for any profit-making activity or commercial gain
            • you may freely distribute the url identifying the publication in the public portal ?
take down policy
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the work immediately
and investigate your claim.
download date: 14. jan. 2018discovering hierarchical consolidated models
from process families
nour assy(b), boudewijn f. van dongen, and wil m.p. van der aalst
department of mathematics and computer science,
eindhoven university of technology, eindhoven, the netherlands
{n.assy,b.v.f.dongen,w.m.p.v.d.aalst }@tue.nl
abstract. process families consist of diﬀerent related variants that rep-
resent the same process. this might include, for example, processes exe-
cuted similarly by diﬀerent organizations or diﬀerent versions of a same
process with varying features. motivated by the need to manage vari-ability in process families, recent advances in process mining make it
possible to discover, from a collection of event logs, a generic process
model that explicitly describes the commonalities and diﬀerences acrossvariants. however, existing approaches often result in ﬂat complex mod-
els where it is hard to obtain a comparative insight into the common and
diﬀerent parts, especially when the family consists of a large number ofprocess variants. this paper presents a decomposition-driven approach
to discover hierarchical consolidated process models from collections of
event logs. the discovered hierarchy consists of nested process fragmentsand allows to browse the variability at diﬀerent levels of abstraction. the
approach has been implemented as a plugin in prom and was evaluated
using synthetic and real-life event logs.
keywords: process mining
·consolidated process families ·hierarchical
conﬁgurable models ·decomposed discovery ·conﬁgurable fragments
1 introduction
as event data are becoming omnipresent, the importance of process mining is
becoming more and more signiﬁcant. process mining allows to automatically
discover, analyse and improve business processes from execution data referred
to asevent logs [1]. traditionally, event logs are assumed to describe the execu-
tion of static and homogeneous processes. however, business requirements and
regulations are continuously changing, and so are the processes. municipalities,
banks, telecommunication service providers and many others execute the sameprocesses but with personalized features. for example, [ 2] reports on about 100
process variants executed by an asset management company to handle assets
for institutional clients and fund distributors. this results in a family of relatedevent logs that can be mined to discover their underlying process variants.
discovering a collection of disconnected variants creates redundancy and
turns the management and maintenance of the process family a diﬃcult task [ 3].
c/circlecopyrtspringer international publishing ag 2017
e. dubois and k. pohl (eds.): caise 2017, lncs 10253, pp. 314–329, 2017.doi: 10.1007/978-3-319-59536-8
20discovering hierarchical consolidated models from process families 315
instead, organizations need to eﬃciently analyze and track changes in their
processes in a uniﬁed way. recent advances in process mining make it possibleto mine process variants and to discover a generic consolidated process model
(e.g. [ 4,5]). however, as the number of process variants increases, it becomes
more common to observe partly shared behavior between a subset of the vari-ants instead of one global behavior shared between all the variants. as a result,
the discovered consolidated models may quickly become large and complex [ 6].
to remedy this problem, we propose an approach to discover hierarchical con-
solidated process models from collections of event logs. the discovered hierarchy
helps in taming the complexity of consolidated models in two ways: (i) by mod-
eling variability at diﬀerent levels of abstraction (i.e. variability is shown/hiddenaccording to the desired level of abstraction) and (ii) by expressing variabil-
ity in a coarse-grained way (i.e. commonalities and diﬀerences between process
fragments instead of individual elements).
figure 1describes the problem addressed and the desired output. given a
process family consisting of a collection of events logs, state of the art discoveryapproaches produce ﬂat consolidated models as shown in fig. 1b. the nodes’
sizes give an indication about the number of variants in which the activities
appear. some edges are annotated with the logs’ identiﬁers from which they arediscovered. clearly, the ﬂat structure of the model and the increasing number of
variants make it hard to compare variants and to track where do they agree or
disagree unless applying some ﬁltering techniques (e.g. ﬁltering on digests [ 7]).
the hierarchical model discovered by our approach is shown in fig. 1c. the
hierarchical structure allows to browse the process variability at diﬀerent levels
of abstraction. the elements in the hierarchy refer to abstracted process frag-ments shared between a (sub)set of process variants. to describe fragments, we
introduce the concept of shared-entry shared-exit (sheshe) which is inspired
from the well-know concept of single-entry single-exit (sese) [ 8]. sheshes
are independent subprocesses that are entered and exited via shared paths . they
have well-deﬁned interfaces through which they interact with the rest of the
process. their internal behavior encloses the variability between the entering
and exiting variants. the variability abstraction is achieved by hiding the inter-
nal behavior of each fragment and by keeping the interaction of its boundarieswith the rest of the process visible. therefore, going down in the hierarchy corre-
sponds to expanding the internal behavior of abstracted fragments. for example,
in the process model shown at level 2 , the internal behavior of the parent at
level 1 is expanded and the abstracted nested fragments at level 2 become
visible.
the approach has been implemented as a plugin in prom and was evalu-
ated using both synthetic and real-life event logs. experimental results show
that the hierarchical structure does not only reduce the structural complexity of
consolidated processes but also can improve their behavioral quality.
the paper is structured as follow. in sect. 2, related work is discussed.
some basic deﬁnitions used throughout the paper are introduced in sect. 3.t h e
proposed approach is detailed in sect. 4through a running example. section 5316 n. assy et al.
(a) input: collec-
tion of event logs
recording the ex-
ecution of a pro-
cess familyb,c,d,e,f
a,c,d,e,fd,e,fc,e,f e,f
c,d,e,fb,c,d,e,f
c,d,e,fa,b,c,d,e,fc,e,f
a,e,fa,c,d,e,f
b,d,e,fd,e,f
c,e,f
(b) output of traditional approaches: a ﬂat consolidated model
where variability (commonalities vs diﬀerences) is expressed at
the process elements’ level; for readability, some of the edges are
annotates with the logs’ identiﬁers from which they are discovered
top level 
fragment shared 
between all variants
fragment shared 
between b, c, d, 
e, ffragment shared 
between c, d, e, 
f...
fragment shared 
between d, e, ffragment shared 
between c, e, flegend
hidden informa ɵon
abstracɵon of the 
internal behavior of the 
fragment shared 
between the variants 
indicated by their entry 
and exit nodesentry exitlevel 1
level 2
level 3
(c) output of the proposed approach: a hierarchical consolidated model where vari-
ability is expressed at the fragment level and is shown/hidden according to the desiredlevel of abstraction
fig. 1. snapshot of the problem addressed and the proposed approachdiscovering hierarchical consolidated models from process families 317
reports our experimental results. finally, we discuss some limitations and exten-
sions of the proposed work in sect. 6.
2 related work
process variant management is a recent research body that addresses the
problem of modeling and maintaining large collections of related process vari-
ants [3]. approaches developed in this area aim to represent the variants in a
consolidated manner. for this purpose, conventional process modeling languageshave been extended to explicitly support process variability modeling [ 9]. in this
work, we adopt the conﬁgurable modeling approach [ 10] since it allows to explic-
itly represent the common and diﬀerent parts in one customizable model.
to consolidate a collection of process variants, two techniques can be applied:
model-merging (e.g. [ 2,7]) and model-mining (e.g. [ 4,5]). model-merging tech-
niques construct consolidated process models by structurally merging existing
process variants. model-mining techniques use process mining to discover con-
solidated process models from the execution behavior of process variants. all of
the existing approaches produce ﬂat models with ﬁne-grained variability.
to overcome the complexity of consolidated models, diﬀerent approaches
have been proposed to abstract from the ﬁne-grained variability expressed at the
process elements’ level to a coarse-grained variability expressed using domain ori-
ented models (e.g. [ 11,12]). the drawback of these approaches is that they heav-
ily rely on the domain expert knowledge. another stream of works try to tamethe complexity by localizing variability in fragments instead of entire processes
(e.g. [ 6,13]). subprocesses, often expressed in terms of sese fragments, are
extracted from existing process variants and are consolidated if they are similar.these techniques use model merging. the merged fragments show a local view
on the variability, while in our work, we aim at providing a global view of the
consolidated model and at diﬀerent levels of abstraction.
divide and conquer techniques have been also proposed to solve the com-
plexity of discovered models. they can be grouped into two categories: case-based
and activity-based. in case-based techniques, the log is split into homogeneousclusters of traces and a model is mined per cluster (e.g. [ 14]). the aim here is to
mine a collection of simpler variants of a complex process. in this work, we deal
with activity-based decomposition where traces are split into clusters of sub-traces. a fragment is mined from each cluster and ﬁnally, the mined fragments
are glued together into an overall model. in [ 15], a generic approach is presented
and the principles of correct decomposition are discussed. the decomposition
technique proposed in this paper rely on the theoretical results presented in [ 15].
finally, our work can be also related to process model abstraction
(e.g. [16,17]) and hierarchical process discovery (e.g. [18]). in model abstrac-
tion, the aim is to create simpler views of the process by abstracting from process
details. the focus of existing works has been on deﬁning aggregation and hidingoperators that preserve some correctness criteria. the focus of our work is not
on deﬁning new abstraction operators. instead, we aim at automatically creating318 n. assy et al.
diﬀerent abstraction levels of the variability in a process family. for this purpose,
we introduce the notion of sheshe fragments which, by deﬁnition, allows us toachieve our goal. on the other hand, the works on hierarchical process discovery
explore the information recorded in event logs in order to infer a hierarchical
structure that can explain the ﬂow of the process. in our work, we discover ahierarchical structure that explains the ﬂow of the variability in a process family.
3 preliminaries
set, multiset. letsbe a ﬁnite set. the multiset b(s)o v e r sis a set
where elements may appear multiple times. the elements in the multiset arelisted between square brackets. for example, b=[ ] is the empty multiset,
b(s)=[a,a,b,c,b ]=[a
2,b2,c] is a multiset over s={a,b,c}.b(s)i st h es e to f
all multisets over s.
sequence, projection. a sequence σ=/angbracketlefts1,s2,...,s n/angbracketright∈s∗is an ordered list
of elements. the empty sequence is denoted as /angbracketleft/angbracketright. the projection of σon a subset
s/prime⊆sdenoted as σ/harpoonuprights/primeis a subsequence of σcontaining only the elements of s/prime.
for example /angbracketlefta,a,b,d /angbracketright/harpoonupright{a,d}=/angbracketlefta,a,d/angbracketright. projection is also deﬁned for multisets.
for example, [ a3,b2,c]/harpoonupright{a,b}=[a3,b2].
event log. an event log is a multiset of traces. a trace is a sequence of activities
describing the lifecycle of a particular process instance. let a⊆u abe a set
of activities in some universe of activities. a trace σ∈a∗is a sequence of
activities. l∈b(a∗) is an event log. we denote by al={a∈σ|σ∈l}the
set of activities occurring in l.
causal graph. ac a u s a lg r a p h cl=(al,e l) constructed from an event log
lis a graph showing the causal relations between the log activities. most process
mining algorithms build such a graph in a preprocessing step by scanning theevent log to see how many times an activity a
1is followed by another activity
a2. if this occurs above a certain threshold, then it is assumed that a1causally
precedes a2(i.e. (a1,a2)∈el). the selection of an appropriate threshold is out
of scope of this paper. in this work, we assume that clis constructed using an
existing algorithm. we also assume that clis connected.
conﬁgurable process models. conﬁgurable process models allow to explic-
itly represent the common and diﬀerent parts in one customizable process model.
they need to be conﬁgured to speciﬁc requirements by (de)selecting (ir)relevantparts. the essence of conﬁguration can be captured in terms of two operators,
hiding andblocking [10]. hiding an activity corresponds to skipping it. in other
words, the activity is either removed or renamed to a silent step. blocking anactivity corresponds to disabling it, i.e. the path from the activity cannot be
taken anymore. there exist several extensions to existing process modeling nota-
tions. they all share the same conﬁguration basis but diﬀer according to thelanguage notation. in this work, we use petri nets as a process modeling nota-
tion since a great number of the process mining techniques assume or generate
petri nets. however the results are not restricted to this notation.discovering hierarchical consolidated models from process families 319
4 proposed approach
in this section, we ﬁrst present a running example (sect. 4.1) that will be used
to illustrate the three steps of our discovery approach (sects. 4.2,4.3and4.4).
4.1 running example
we consider a scenario of four diﬀerent variants of a loan process: home, student,
business and small. example event logs corresponding to these variants are as fol-
low:l1=[/angbracketlefta,b,c,d,e,h,i,j,l,k,m,n,o,p,w /angbracketright47,/angbracketlefta,b,d,c,e,h,i,j,k,l,m,n,o,q,
w/angbracketright28,/angbracketlefta,b,d,c,e,h,i,k,j,l,m,n,o,p /angbracketright25];l2=[/angbracketlefta,b,r,s,t,u,v,w /angbracketright50];l3=[/angbracketlefta,
b,c,d,f,g,e,h,n,w /angbracketright48,/angbracketlefta,b,d,c,f,g,e,h,n,w /angbracketright52];l4=[/angbracketlefta,b,r,s,t,v,s,u,v,o,
p,q,w /angbracketright48,/angbracketlefta,b,r,s,u,v,o,q,p,w /angbracketright52]. figure 2shows the causal graphs of the four
event logs. to ease the understanding of the processes, we split and annotate
them with the names of diﬀerent phases. there are in total 22 distinct activities.three activities appear in all the four event logs and 13 activities appear in
diﬀerent subsets of the logs.
a binitialize
processingc
de hcheck
homeloan
ij
klpre-approvemortage
m n oarchive
request
p
qwnotify
client
(a)c1: home loan processa binitialize
processing
r s t u vcheck stude ntloan
wnotify
client
(b)c2: student loan process
a binitialize
processingc
df g echeck h omeloan
h n wnotify
client
(c)c3: business loan processa binitialize
processing
r scheck sma ll lo an
t
uv op
qwnotify
client
(d)c4: small loan process
a: receive application m: loan type approved g: check revenue s: check amount
b: start processing n: request approval h: end checking t: check system fundsc: register client o: check income i: verify mortage type u: check eligibility (small)
d: check client credit p: archive request j: check property information v:end checking phase
e: contact bank q: contact client k: request mortage underwriter
f: check company funds r: check proﬁle l: check eligibility (big)
(e) activities’ names
fig. 2. the causal graphs of four event logs of diﬀerent loan process variants
our approach for discovering a hierarchical consolidated model consists of
three main steps:
1. an integrated representation of the causal graphs is created and is referred
to asmulti causal graph (sect. 4.2);320 n. assy et al.
2. the multi causal graph is decomposed into a hierarchical structure of nested
sheshe fragments. for this, we formally introduce the concept of shesheand their induced hierarchical structure (sect. 4.3);
3. the abstraction of sheshe fragments is generated and the event logs are
mined accordingly to discover a hierarchical consolidated model (sect. 4.4).
4.2 multi causal graph construction
given a collection of event logs l
1,...,l n∈b(a∗), we ﬁrst unify the start and
end of all the event logs by adding start (st) and end (et) activities to all the
traces. then, we construct a causal graph cifor each event log li. the causal
graphs are merged into a multi-causal graph. edges in the multi causal graphhave diﬀerent identities according to the causal graph from which they originate.
in this work, we assume that activities having the same labels are identical.
deﬁnition 1 (multi causal graph). let l={l
i|i≥2}be a collection of
events logs with unique start (st) and end activities (et) and ci=(ai,e i)a
causal graph constructed for each li∈l. a multi causal graph c◦=(a◦,e◦)
is the graph resulting from merging the causal graphs such that a◦=/uniontext
i≥2ai
ande◦=/uniontext
i≥2{((a1,a2),i)|(a1,a2)∈ei}.
figure 3shows an example of the multi causal graph resulting from merging
the causal graphs in fig. 2(for now ignore the dashed rectangles).
st a bc
d
r s t u vf g
e h ij l
km n op
qw etf0
f1
f5f2f3
f4
f6
c1
c2
c3
c4
fig. 3. maximal sheshe decomposition on the multi causal graph resulting from
merging the causal graphs in fig. 2
4.3 sheshe decomposition
the second step of our approach is to ﬁnd a hierarchical decomposition of the
multi causal graph in terms of fragments organized in a hierarchical contain-
ment relationship. to deﬁne fragments, we introduce the concept of shared-
entry shared-exit (sheshe) . sheshe fragments are subprocesses with well-
deﬁned interfaces through which they interact with the rest of the process. theydiscovering hierarchical consolidated models from process families 321
represent parts in the process where variants enter and exit through the same
interfaces . in the following, we give some deﬁnitions to introduce a sheshe.
let l={li|i≥2}be a collection of event logs with unique start (st) and
end (et) activities; c1,...,c nbe the casual graphs constructed for each li∈l
andc◦=(a◦,e◦) be the multi causal graph constructed from c1,...,c n.
deﬁnition 2. letf⊆e◦be a non empty set of weakly connected edges. we
deﬁne the following notations:
– the shareability level of f:id(f)={i|((a1,a2),i)∈f};
– the edges with the identiﬁer iinf:f/harpoonuprighti={((a1,a2),i/prime)∈f|i/prime=i};
– the set of activities: act(f)=/uniontext
((a1,a2),i)∈f{a1,a2};
– the complement of fine◦:f=e◦\f;
– for an activity a∈act(f), the following is deﬁned:
•the incoming edges that belong to f:in(a,f)={((a1,a),i)∈f};
•the incoming edges that do not belong to f:in(a,f)=in(a,f)=
{((a1,a),i)∈f};
•the outgoing edges that belong to f:out(a,f)={((a,a1),i)∈f};
•the outgoing edges that do not belong to f:out(a,f)=out(a,f)=
{((a,a1),i)∈f};
•the edges connected to a:conn(a,f)=in(a,f)∪in(a,f)∪out(a,f)∪
out(a,f).
the activities in fcan be split into three categories: local if the activity is
connected only to activities in f, boundary if it is connected to elements not
inf, and shared boundary if, in addition to being boundary, the activity is
connected only to edges having the identiﬁer included in the shareability level
off. this latter category allows us to introduce the concept of sheshe.
deﬁnition 3 (local, boundary, shared boundary). letf⊆e◦be a
non empty set of weakly connected edges such that st,et / ∈act(f). the local,
boundary and shared boundary nodes in fare deﬁned as following:
–lact(f)={a∈act(f)|in(a,f)∪out(a,f)=∅};
–bact(f)={a∈act(f)|a/∈lact(f)};
–sact(f)={a∈bact(f)|id(conn(a,f)) =id(f)}.
for example, in fig. 3, the set of edges represented by the fragment f5
has:lact(f5)={s,t,u},bact(f5)={r, v}andsact(f5)={r, v}. the bound-
ary activities in fcan be further classiﬁed into entry and exit activities. in [ 8],
seses are deﬁned as sets of edges having single entry andsingle exit activities.
in this work, we deﬁne sheshes as sets of edges having shared entry andshared
exitnodes. roughly speaking, a shared entry is a shared boundary through which
it is possible for every variant to enter inside the region represented by f.t h e
same holds for a shared exit. for example, in fig. 3,candda r es h a r e de n t r i e s
forf2since both variant 1 (which corresponds to l1) and variant 3 can enter
f2through them; nis a shared exit, since both variants can exit f2through it.
the formal deﬁnition of shared entry and exit nodes is given in deﬁnition 4.322 n. assy et al.
deﬁnition 4 (shared entry and exit nodes). letf⊆e◦be a non empty
set of weakly connected edges such that st,et / ∈act(f).an o d e a∈sact(f)
is a shared entry iﬀ:
1.id(in(a,f)) =id(out(a,f)) =id(f)and
2.[(∀i∈id(f)out(a,f)/harpoonuprighti=∅∨in(a,f)/harpoonuprighti=∅)or
3.(id(out(a,f)) =id(in(a,f)) =id(f))].
a∈sact(f)is a shared exit iﬀ:
1.id(out(a,f)) =id(in(a,f)) =id(f)and
2.[(∀i∈id(f)in(a,f)/harpoonuprighti=∅∨out(a,f)/harpoonuprighti=∅)or
3.(id(in(a,f)) =id(out(a,f)) =id(f))].
we denote by entry(f)andexit(f)the set of entry and exit nodes respectively.
the ﬁrst requirement of a shared entry states that the set of identiﬁers of the
incoming edges that do not belong to fshould be equal to the set of identiﬁers
of the outgoing edges that belong to f, which in turn, should be equal to the
shareability level of f. this requirement ensures that all variants can enter f
through the entry node. since we do not impose single entry nodes, the second
and third requirement ensure that the entry node can either be only an entry
(i.e. no variant can exit through this node) or a shared exit (i.e. all variants havethe possibility to exit the node).
deﬁnition 5 (shared-entry shared-exit). letf⊆e
◦be a non empty
set of weakly connected edges such that st,et / ∈act(f).fis a shared-entry
shared-exit iﬀ: act(f)=lact(f)∪entry(f)∪exit(f).
a sheshe fragment allows to localize the variability between a subset of
variants. as all involved variants can enter and exit through its entry and exit
nodes, the fragment can be treated as a black box (similar to a macro activity)
and the variability can be expressed at the fragment level. blocking a fragmentcorresponds to blocking the subprocess executed by the corresponding variants.
on the process elements’ level, this requires only to blocking the fragment inter-
faces (i.e. entry and exit activities). on the other hand, any local conﬁgurationinside the fragment does not aﬀect its interfaces and therefore is independent
from outside. examples of sheshe fragments are shown in fig. 3.
the edges formed by e
◦deﬁne a speciﬁc type of a sheshe with no incom-
ing or outgoing edges. this fragment is called the root and is not considered
in any operation on sheshes. in this work, we are interested in a hierarchical
representation of sheshe fragments where a child fragment restricts the share-ability level of its parent. this requires that sheshe fragments do not overlap.
in the following, we give some deﬁnitions to derive non-overlapping sheshes.
lemma 1 (sheshe inclusion). letf
1,f2⊆e◦be two sheshes such
thatf1⊆f2. the following hold: (i) id(f1)⊆id(f2)and (ii) if entry(f1)∩
entry(f2)/negationslash=∅orexit(f1)∩exit(f2)/negationslash=∅thenid(f1)=id(f2).discovering hierarchical consolidated models from process families 323
lemma 2 (sheshe union). letf1,f2⊆e◦be two sheshes and f=
f1∪f2be their union such that fis weakly connected. fis a sheshe iﬀ
id(f1)=id(f2)orf1⊆f2.
many of the sheshes in a multi causal graph are less informative .f o r
instance, in fig. 3,f/prime
1={((e,h),1),((e,h),2)}⊂f11has the same shareability
level{1,2}asf1.g i v e n f1,f/prime
1does not provide any additional information. this
does not hold for f8⊂f1asf8has a new restricted shareability level. in this
work, we are interested in maximal sheshe fragments that are the largest
fragments having a speciﬁc shareability level.
deﬁnition 6 (maximal sheshe). letf⊆e◦be a sheshe. fis maxi-
mal iﬀ ∄f/prime⊆e◦,f/prime/negationslash=fwhere f∪f/primeis a sheshe and id(f)=id(f/prime).
proposition 1 (non overlapping sheshe). letf,f/prime⊆e◦be two max-
imal sheshes. one of the three statements holds: (i) f⊆f/prime, (ii)f/prime⊆for
(iii)f∩f/prime=∅.
proposition 1allows to derive a hierarchical topology of the sheshe fragments
organized in a tree-like structure (fig. 3shows an example).
deﬁnition 7 (sheshe decomposition tree). letc◦be a multi causal
graph and fbe the set of its maximal sheshes including e◦.d=(f,≺)
is a tree of maximal sheshe fragments where fis the set of tree nodes and
≺⊆ f×f is the set of parent-child relations such that (f1,f2)∈≺iﬀf2⊂f1
andf1is the smallest sheshe containing f2.
4.4 hierarchical discovery
given a sheshe decomposition tree, we aim at discovering a hierarchical con-
solidated model that shows the fragments at diﬀerent levels of abstraction. theabstraction of fragments allows to show the most shared behavior and to hide the
local variability between the involved variants. for instance, given f
2in fig. 3,
we would like to see that the variants of both l1andl3start with executing
candd; both execute the fragment represented by eandhand end with the
execution of n; the fragments f3andf4are hidden since they are executed by
l3andl1respectively and therefore depict a local variability. in terms of event
logs, this abstraction can be achieved by projecting the traces of the logs l1and
l3on the activities c,d,e,handnand discovering the corresponding fragment.
the fragment is discovered by merging the projected traces of l1andl3into
one log and using existing discovery techniques (e.g. inductive miner).
in addition to the shared behavior, we should be able to link the discovered
abstracted fragments with their children in order to create the entire process.
for example, the abstracted fragment of f2includes the activities c,d,e,hand
n; the abstracted fragment of f3includes fandgand the abstracted fragment
1this sheshe is not shown because it is not maximal according to deﬁnition 6.324 n. assy et al.
off4includes i,j,l,kandm. in order to construct the whole behavior of f2
(i.e. non abstracted version), we should be able to link the discovered abstracted
fragment of f2with its children. in this case two solutions are possible. the
trivial one is to restart from scratch by projecting the traces of l1andl3on
all the activities of f2and discovering their corresponding fragment. however,
this solution requires an excessive and repeated work of discovery which may be
expensive in case of a large number of parent-child relations in the tree.
another more convenient solution is to include the boundary nodes of chil-
dren fragments in their abstracted parent fragment. in this way the children
boundary nodes act as a glue and allow to create the entire process by combin-
ing the discovered abstracted parents with their discovered abstracted children.this solution corresponds to the output of the approach shown in fig. 4.
sheshe 0
top level
sheshe 1
variants 1, 2, 3, 4
sheshe 2
variants 1, 3sheshe 5
variants 2, 4sheshe 6
variants 1, 4
sheshe 3
variants 3sheshe 4
variants 1st a w et
a br
c
dnoq
pwv
c
dn
f ge h
i m
fig. 4. output of the discovery approach taking as input the logs of the variants in
fig. 2. transitions with dashed line represent the entry of the sheshe fragment; those
with bold line represent the exit; gray transitions are the boundaries of the sheshechildren. the fragments are discovered using inductive miner
a br
c
dnoq
pwv
stet
fig. 5. a model provided at the second level of the tree in fig. 4by glueing the dis-
covered fragment of sheshe 0 and its children (in this case sheshe 1)
the tree shows the abstracted fragments of the sheshe decomposition tree
in fig. 3. the discovered fragments of some nodes are shown on the right-hand
side. for example, the discovered fragment of sehshe 2 which corresponds to
the abstracted version of f2includes the entry and exit of f2, the shared behavior
including the activities eandhas well as the boundary nodes of sheshe 3discovering hierarchical consolidated models from process families 325
and sheshe 4. each level of the tree shows a local behavior on the abstracted
sheshe. to construct an entire process, parents and children can be recursivelyglued at each level using the approach presented in [ 15]. for example, the model
shown in fig. 5corresponds to the entire process of the second level in the tree.
it is obtained by glueing together the fragment of sheshe 0 and its children(in this case sheshe 1). the entire process of the third level can be obtained
by glueing the entire process of the second level with the children of the third
level (i.e. sheshe 5, 6 and 2) and so on.
having such hierarchical structure, it becomes easy to express variability
by identifying the conﬁgurable elements. the tree nodes shared between a sub-
set of the variants are conﬁgurable. they can be either blocked or allowed.
on the process level, this corresponds to making the entry and exit activities
conﬁgurable.
5 evaluation
the approach has been implemented as a plugin in prom2(www.processmining.
org). the plugin takes a collection of event logs as input and produces a hierar-
chical consolidated process model as output.
5.1 synthetic logs
we used event logs of four variants of a travel booking process3. the base process
allows for booking a ﬂight with the option of booking a hotel and/or a car in
a subset of the variants. figure 6a shows the ﬂat conﬁgurable process model
discovered using inductive miner (im) with the default parameters in prom.
because of the high variability in the logs, im generates an underﬁtting model
(i.e., a ﬂower construct) which allows for any behavior. all the activities in theﬂower construct are conﬁgurable. this model is simple but scores very low on
precision. with heuristics miner (hm), a better model is discovered. however,
the number of conﬁgurable nodes is 21 which is still relatively high.
figure 6b shows the hierarchical structure discovered using our approach.
the tree hierarchy contains 5 conﬁgurable fragments (i.e. 5 out of 7 nodes areshared between a subset of the variants). figures 6c and d show the discovered
root fragment sheshe 0 and the fragment sheshe 4 using im. compared to
the ﬂower model in fig. 6a, the ﬂower construct in the root fragment is reduced
and is completely broken in the child fragment.
5.2 real-life logs
we used the dataset from bpi challenge 2015 [ 19] which corresponds to ﬁve
process variants of building permit applications executed by ﬁve dutch municipal-
ities. we evaluated the quality, in terms of structural complexity and behavioral
2https://svn.win.tue.nl/repos/prom/packages/nourassy/ .
3the process models and logs can be downloaded from: https://svn.win.tue.nl/repos/
prom/packages/nourassy/trunk/artiﬁciallogs .326 n. assy et al.
(a) im: ﬂower model - all activities
are conﬁgurablesheshe 0 
variants 
1,2,3,4
sheshe 3 
variants 
1,2,3,4sheshe 1 
variants 
1,3,4sheshe 4 
variants 1,2
sheshe 2 
variants 3,4sheshe 5 
variants 1sheshe 4 
variants 1,4
(b) im: discovered hierarchy (5 conﬁgurable
fragments)
(c) fragment of sheshe 0 shared be-tween all variants (d) fragment of sheshe 4 shared betweenvariants 1 and 2
fig. 6. (a) ﬂat vs (b), (c) and (d) hierarchical discovered process models
accuracy, of the discovered models using traditional approaches for discovering
ﬂat models versus using our approach for discovering hierarchical models.
the structural quality of the discovered models is measured in terms of the
hierarchy quality and the fragments complexity. to evaluate the quality of the
hierarchy, we compute (i) the number of conﬁgurable nodes in the discovered
models (# conf. nodes), (ii) the average number of conﬁguration steps neededto derive a variant (# conf. dec.), (iii) the depth of the tree and (iv) the average
number of shared variants per node (# avg. share). regarding the fragments’
complexity, we measured their average size and compared it to the size of one ﬂatmodel (size(# arcs)). the behavioral accuracy is measured in terms of ﬁtness,
precision and generalization of the merged log against the discovered consoli-
dated model. the results are reported in tables 1and2.
the results show that, with the hierarchical discovery, the sizes of fragments
in the hierarchy are greatly reduced compared to the size of one ﬂat model.
instead of looking to one bigprocess model, one can scan the hierarchy and
inspect smaller fragments. on the other hand, the depth of the tree is small.
this means that the decomposition was not able to ﬁnd a hierarchy of nested
fragments. because of the small depth, the diﬀerence in the number of conﬁg-urable nodes between the hierarchical model and the ﬂat model is not in our
favour. in the hierarchical model, the fragments shared between diﬀerent vari-
ants contain shared activities but exhibit diﬀerent behavior (this is explained bydiscovering hierarchical consolidated models from process families 327
the high number of conﬁgurable nodes in the ﬂat model). the reasons for this
can be explained by the fact that we assumed that activities with the same labelsare the same across variants. by doing so, we reduce the chance to ﬁnd valid
sheshes. regarding the behavioral quality, we noticed that our decomposition
approach was able to improve the precision of hierarchical models with a smalldecrease in the ﬁtness. the decrease in the ﬁtness is not caused by the sheshe
decomposition itself, but because of the glueing step presented in sect. 4.4.
table 1. structural quality of the discovered ﬂat vs hierarchical model
dataset flat hierarchical
# conf. nodes # conf. dec size depth avg. share #conf. nodes # conf. dec size frag
bpi 15 29 16.6 102 2 2.92 7 2 45.53
table 2. behavioral quality of the discovered ﬂat model vs hierarchical model
fitness precision generalization
im flat 1 0.1 1
hierarchical 0.86 0.57 0.97
hierarchical (fragment avg.) 0.99 0.84 0.44
hm flat 0.93 0.76 0.94
hierarchical 0.96 0.8 0.95
hierarchical (fragment avg.) 0.99 0.99 0.4
6 conclusion
in this paper, we presented an approach for mining hierarchical consolidated
models from process families. the hierarchy allows to (i) browse the variability
at diﬀerent levels of abstraction and to (ii) model it in a coarse-grained way.
through experimental evaluation, we showed that our decomposition approachis suitable to tame the complexity of consolidated models.
as already shown in sect. 5, the quality of the discovered hierarchy highly
depends on the way the equivalence class is deﬁned over the logs’ activities. in thepresent work, we simply assumed that activities with common labels are equal.
however, one interesting feature of our shared-entry shared-exit fragments is that
they allow to bring structure to unstructured variability . therefore, in our future
work, we will investigate the problem of discovering consolidated process models
with structured variability. this calls for the problem of ﬁnding an equivalence
class over the logs’ activities that optimizes the sheshe decomposition quality.328 n. assy et al.
references
1. van der aalst, w.m.p.: process mining - data science in action, 2nd edn. springer,
heidelberg (2016)
2. reijers, h.a., mans, r.s., van der toorn, r.a.: improved model management with
aggregated business process models. data knowl. eng. 68(2), 221–243 (2009)
3. dijkman, r.m., la rosa, m., reijers, h.a.: managing large collections of business
process models - current techniques and challenges. comput. ind. 63(2), 91–97
(2012)
4. buijs, j.c.a.m., dongen, b.f., van der aalst, w.m.p.: mining conﬁgurable process
models from collections of event logs. in: daniel, f., wang, j., weber, b. (eds.)bpm 2013. lncs, vol. 8094, pp. 33–48. springer, heidelberg (2013). doi: 10.1007/
978-3-642-40176-3
5
5. li, c., reichert, m., wombacher, a.: mining business process variants: challenges,
scenarios, algorithms. data knowl. eng. 70(5), 409–434 (2011)
6. milani, f., dumas, m., ahmed, n., matulevicius, r.: modelling families of business
process variants: a decomposition driven method. inf. syst. 56, 55–72 (2016)
7. la rosa, m., dumas, m., uba, r., dijkman, r.: business process model merging:
an approach to business process consolidation. acm trans. softw. eng. methodol.22(2), 11:1–11:42 (2013)
8. johnson, r., pearson, d., pingali, k.: the program structure tree: computing
control regions in linear time. in: proceedings of the acm sigplan 1994 confer-ence on programming language design and implementation (pldi), pp. 171–185
(1994)
9. la rosa, m., van der aalst, w.m.p., dumas, m., milani, f.p.: business process
variability modeling: a survey. acm comput. surv. 50(1), 2:1–2:45 (2017)
10. gottschalk, f., van der aalst, w.m.p., jansen-vullers, m.h., la rosa, m.: con-
ﬁgurable workﬂow models. int. j. coop. inf. syst. 17(2), 177–221 (2008)
11. la rosa, m., van der aalst, w.m.p., dumas, m., ter hofstede, a.h.m.:
questionnaire-based variability modeling for system conﬁguration. softw. syst.
model. 8(2), 251–274 (2009)
12. gr¨ oner, g., boskovic, m., parreiras, f.s., gasevic, d.: modeling and validation of
business process families. inf. syst. 38(5), 709–726 (2013)
13. la rosa, m., dumas, m., ekanayake, c.c., garc ´ ıa-ba˜ nuelos, l., recker, j., ter
hofstede, a.h.m.: detecting approximate clones in business process model repos-
itories. inf. syst. 49, 102–125 (2015)
14. garc ´ ıa-ba˜ nuelos, l., dumas, m., la rosa, m., de weerdt, j., ekanayake, c.c.:
controlled automated discovery of collections of business process models. inf. syst.
46, 85–101 (2014)
15. van der aalst, w.m.p.: decomposing petri nets for process mining: a generic app-
roach. distributed and parallel databases 31(4), 471–507 (2013)
16. polyvyanyy, a., smirnov, s., weske, m.: the triconnected abstraction of
process models. in: dayal, u., eder, j., koehler, j., reijers, h.a. (eds.) bpm
2009. lncs, vol. 5701, pp. 229–244. springer, heidelberg (2009). doi: 10.1007/
978-3-642-03848-8
16
17. reichert, m., kolb, j., bobrik, r., bauer, t.: enabling personalized visualization
of large business processes through parameterizable views. in: proceedings of the
acm symposium on applied computing, sac 2012, riva, trento, italy, 26–30march 2012, pp. 1653–1660 (2012)discovering hierarchical consolidated models from process families 329
18. conforti, r., dumas, m., garc ´ ıa-ba˜ nuelos, l., la rosa, m.: bpmn miner: auto-
mated discovery of bpmn process models with hierarchical structure. inf. syst.
56, 284–303 (2016)
19. van dongen, b.f.: bpi challenge 2015 (2015). http://dx.doi.org/10.4121/uuid:
31a308ef-c844-48da-948c-305d167a0ec1