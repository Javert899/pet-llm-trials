rapidprom: mine your processes and not just
your data
wil m.p. van der aalst, alfredo bolt, sebastiaan j. van zelst
march 13, 2017
abstract
the number of events recorded for operational processes is growing ev-
ery year. this applies to all domains: from health care and e-government
to production and maintenance. event data are a valuable source of in-
formation for organizations that need to meet requirements related to
compliance, eciency, and customer service. process mining helps to turn
these data into real value: by discovering the real processes, by auto-
matically identifying bottlenecks, by analyzing deviations and sources of
non-compliance, by revealing the actual behavior of people, etc. process
mining is very dierent from conventional data mining and machine learn-
ing techniques. p rom is a powerful open-source process mining tool sup-
porting hundreds of analysis techniques. however, p rom does not sup-
port analysis based on scientic workows. r apid prom, an extension of
rapid miner based on p rom, combines the best of both worlds. com-
plex process mining workows can be modeled and executed easily and
subsequently reused for other data sets. moreover, using r apid prom,
one can benet from combinations of process mining with other types of
analysis available through the r apid miner marketplace.
1 introduction
the number of events recorded in operational processes is growing every year.
this applies to all domains: from healthcare and e-government to production and
maintenance. event data are a valuable source of information for organizations
that need to meet requirements related to compliance, eciency, and customer
service. within organizations the interest in data science and big data is rapidly
growing. therefore they need to handle and analyze novel sources of data in
smarter and more ecient ways. however, in order to improve business processes
and services it is often not sucient to focus on data storage and data analysis
alone. in fact, it is often the case that individual data elements within a process-
based data set are not independent at all. process mining [1] is a process centric
technique that helps to turn event data into real value: by discovering the real
processes, by automatically identifying bottlenecks, by analyzing deviations and
sources of non-compliance, by revealing the actual behavior of people, etc.
1arxiv:1703.03740v1  [cs.oh]  10 mar 2017process mining is a rapidly growing sub discipline within both business
process management (bpm) [2] and data science [3]. process mining is dierent
from conventional data mining and machine learning techniques as it specically
takes into account that the event data originates from a business process. many
mainstream data mining and machine learning techniques on the other hand ne-
glect this fact, i.e., they are notprocess centric. as a result, mainstream business
intelligence (bi), data mining and machine learning tools are not tailored to-
wards the analysis of event data and the improvement of processes. fortunately,
there are dedicated process mining tools able to transform event data into ac-
tionable process-related insights. for example, p rom [4] ( www.promtools.org )
is an open-source process mining tool supporting analyses such as process dis-
covery, conformance checking, social network analysis, organizational mining,
clustering, decision mining, prediction, and recommendation. moreover, in re-
cent years, several vendors released commercial process mining tools. examples
include: celonis process mining by celonis gmbh ( www.celonis.de ),disco
by fluxicon ( www.fluxicon.com ),interstage business process manager an-
alytics by fujitsu ltd ( www.fujitsu.com ),minit by gradient ecm ( www.
minitlabs.com ),myinvenio by cognitive technology ( www.my-invenio.com ),
perceptive process mining by lexmark ( www.lexmark.com ),qpr processan-
alyzer by qpr ( www.qpr.com ),rialto process by exeura ( www.exeura.eu ),
snp business process analysis by snp schneider-neureither & partner ag
(www.snp-bpa.com ), and ppm webmethods process performance manager by
software ag ( www.softwareag.com ). the growing number of process mining
tools illustrates the relevance of process mining.
as mentioned above, p rom is a powerful open-source tool supporting hun-
dreds of process mining analysis techniques. however, p rom does not support
the creation and execution of analytic workows . we therefore recently intro-
duced r apid prom [5]1(www.rapidprom.org ), a r apid miner extension that
wraps around the core functionality present within p rom. it entails stable al-
gorithms for the purpose of process mining analysis such as process discovery,
conformance checking, performance analysis, etc. r apid prom combines the
advantages of the academic nature of p rom, i.e., it consists of state-of-the-art
process mining algorithms, with the advanced data mining and analytic work-
ow capabilities of r apid miner . complex process mining workows can be
modeled and executed easily and subsequently reused for other data sets. more-
over, using r apid prom, one can benet from combinations of process mining
with other types of analysis available through the r apid miner marketplace.
in [1], three categories of process mining tools are identied, which are
schematically depicted in figure 1. type 1 process mining tools are mainly
built for answering ad-hoc questions about business processes. an example tool
of such type is disco , which allows the user to interactively lter the data and
project this immediately on a (newly learned) process model. tools of type
3are tailored towards answering predened questions repeatedly in a known
1rapidprom is an open source project, the source code is openly available via http:
//github.com/rapidprom
2how often is the same analysis repeated ?can the 
end-user 
freely 
determine 
the analysis 
to be 
conducted ?flexible
defined
fixed
hourly daily weekly monthly yearly nevertype 3
(standard )type 1
(ad-hoc)
type 2
(repeated )
figure 1: diagram showing three dierent categories of process mining tools and
the positioning of r apid prom.
setting. these tools are typically used to create \process dashboards" that pro-
vide standard views. a tool like celonis process mining supports the creation
of such process-centric dashboards. tools of type 2 aim to answer questions
that are recurring, but possibly at a lower frequency. analysis workows may
be predened, but do not need to be completely xed upfront. customization
may be needed and the interpretation of the results requires knowledge of pro-
cess mining and understanding of the data. unlike tools of type 1 and type 3 ,
the analytic workow is made explicit such that it can be adapted and reused.
rapid prom is one of the few tools of type 2 . it can also be used as a type
1tool, however, the workow-like interaction style makes it predominantly a
type 2 tool. r apid prom can also be used for process mining research where
experiments need to be repeated for dierent data sets and parameter values.
due to the loop and subprocess functionalities of r apid miner , rapid prom
allows users to dene a specic process mining analysis and repeat this multiple
times while varying parameters or event data.
the development of the rst version of r apid prom started at the eind-
hoven university of technology around 2014 in context of the stw project
\developing tools for understanding healthcare processes" [5]. the extension
consisted of basic operators for the purpose of process discovery, conformance
checking, performance analysis, data exploration, etc. since then, r apid prom
has been under active development, i.e., algorithms have been updated continu-
ously, and, new operators were added. in [6], r apid prom is used to assess the
applicability of analytic workows in a process mining context. additionally the
work oers a set of basic workow patterns for the purpose of process mining.
the goal of this chapter is to provide a basic overview of process mining, and,
in particular r apid prom. we assume that the reader is not familiar with pro-
cess mining, but has used r apid miner before. the basic architecture is given
and the most prominent objects and operators are discussed. we also present
three case studies showing both the usefulness and applicability of applying
3process mining by using analytic workows.
the remainder of this chapter is organized as follows. in section 2 we present
a basic overview of the eld of process mining. in section 3 we briey argue the
main dierences between conventional data mining and process mining. in sec-
tion 4 we present r apid prom by means of an overview of its architecture,
common objects and operators. in section 5 we present three case studies high-
lighting dierent functionalities of r apid prom. finally, section 6 concludes
the chapter.
2 what is process mining?
the main goal of process mining is to improve operational processes by using
event data. by exploiting recorded event data, process mining techniques are
able to show what actually happened during the execution of a business pro-
cess. we identify three main types of process mining, being process discovery ,
conformance checking andperformance analysis . we present each of these types
in more detail. prior to this, we introduce the main source of data used within
process mining, i.e., event logs . throughout this section we use a simplied data
set based on a real \road trac fine management" process originating from
an italian municipality. in section 5 we go more in depth and perform three
case studies based on the real data set using r apid prom.
2.1 event logs
process mining is impossible without proper event logs [1]. fortunately, event
logs can be extracted from a wide variety of data sources, including enter-
prise systems (sap, oracle, etc.), hospital information systems (epic, chipsoft,
siemens, etc.), middleware (ibm, microsoft, etc.), business process management
systems, mobile applications, social media, sensor networks, etc. most databases
contain event information. however, often quite some eorts are needed to ex-
tract event logs from them (scoping, selection, and transformation).
an event log contains event data related to a particular process. each event
in an event log refers to an activity executed for a particular process instance ,
also referred to as a case. events related to a case are ordered and can have
any number of additional attributes. examples of typical attributes next to
the mandatory case identier, activity and time attributes are resource, costs,
transaction type, location, etc. not all events need to have the same set of
attributes. however, typically, events referring to the same activity have the
same set of attributes.
a simplied example of an event log, based on a real event log, is depicted
in figure 2. the event log shows a few events related to handling trac nes.
consider for example row 2 in the example, i.e., the rst event below the header.
this event relates to a payment activity, preformed in context of case s101157 .
the amount of the ne equals the amount of payment , as indicated by the
amount and payment amount columns respectively. note that additional infor-
4figure 2: simplied event log where each line refers to an event in the process
of handling road nes.
mation such as the law article related to the ne as well as the vehicle type is
also recorded. figure 2 shows three events that are all related to case c17393
(rows 7,8,9 ). three activities are performed in sequence for this case, i.e., cre-
ate fine ,send fine , and, insert fine notication . together these three events
form a trace describing the lifecycle of a trac ne.
figure 3 shows an overview of process mining highlighting the three main
types of analysis. event logs are represented by the three shapes labeled with
event data . in the upcoming sections we discuss each sub discipline, i.e., process
discovery, conformance checking, and, performance analysis in more detail. as
the gure illustrates, all these techniques use, amongst other artifacts, event
logs as an input.
2.2 process discovery
the rst type of process mining is discovery (see figure 3). a process discovery
technique takes an event log as an input and produces a model without using any
a-priori information. typically the focus of process discovery techniques in on
thecontrol-ow aspect of a process. within this aspect we are mainly interested
in what ways the activities within the process can be ordered. several process
model formalisms exist, e.g., bpmn [7], petri nets [8] etc.
a simplied example of a process model, using the petri net formalism, is
depicted in figure 4. this process model was discovered based on the event log
depicted in figure 2. within the model, a square with an inscription represents
an activity. the squares without inscription refer to invisible activities . such
invisible activities are usually used for routing purposes, or, to allow us to skip
certain activities, i.e., we are able to skip the payment activity. this particular
5organizations , devices , people ,  processes , ...
conformance 
checking
process 
discoveryevent
data 
event
data 
performance 
analysisextract , load , 
transform event 
data from 
operational 
processeselt
modeling , i.e., 
creating normative 
or descriptive 
process models
hand -made and 
automatically 
discovered models
event
data !!! deviation
!!! bottleneck
01001001
11001101
00111010
finding out what 
really happens in 
real-life processes
understanding 
real-life process 
performance (e.g., 
bottlenecks )understanding and 
quantifying 
deviationsfigure 3: schematic overview of process mining spectrum showing the three
main types of process mining: (1) process discovery, (2) conformance checking,
and (3) performance analysis.
figure 4: simplied petri net describing the main behavior present in the ex-
ample event log of figure 2.
process model describes that within the process, a ne is always created rst.
after this two parallel branches of behavior are started. the upper branch de-
scribes that the sequence of activities send fine ,insert fine notication and
add penalty should be performed, or, the activities are not performed at all.
the lower branch species that a payment should be performed, or it should
be skipped. if all activities within the two branches are performed or skipped,
the process nishes. note that the fact that the two branches are executed in
parallel implies that the execution of the payment activity is independent of the
execution of the activities in the upper branch. thus, according to this process
model, the payment activity can be performed at any point in time, though
after the ne is created.
62.3 conformance checking
the second type of process mining is conformance checking (see figure 3). here,
an existing process model is compared with an event log of the process that the
model is describing, i.e., modeled behavior is confronted with observed behavior.
conformance checking can be used to check if reality, as recorded in the log,
conforms to the model and vice versa.
figure 5: an example conformance checking diagnostics for a particular process
instance.
consider again the simple process model depicted in figure 4. as an ex-
ample, we take the following actual trace from the event log used as a basis
of the snapshot in figure 2: hcreate fine ;send fine ;insert fine notication ;
add penalty ;send for credit collection i. obviously, this trace is not completely
conforming with respect to the model as it contains activity send for credit col-
lection , which is not present in the model. applying conformance checking tech-
niques for this trace results in figure 5.2the green blocks indicate that the
algorithm was able to match an event in the trace to an activity in the model.
the gray blocks correspond to the invisible activities as introduced in the previ-
ous section. finally the yellow block corresponds to a non-conforming event. in
this case, it refers to an activity that did occur in the trace of events, though the
model does not describe the activity. such type of non-conforming event is often
referred to as a log move . clearly, it is also possible that the model describes
that a certain activity should happen, though the activity is not present in the
trace of events. in such case we refer to a model move .
2.4 performance analysis
the third type of process mining is performance analysis by replaying the event
data on a discovered process model (see figure 3). typically, techniques from
conformance checking are used combined with timing information present in
the event log, e.g., by using timestamps we are able to deduct the average time
in-between two events etc. these types of statistics are subsequently projected
onto a discovered or hand-made process model.
the results of performance analysis can be used to identify the problematic
parts of the process, e.g., bottlenecks. an example of such analysis is depicted
in figure 6. within the gure, we projected timing information from our ex-
ample log on the process model of figure 4. in this example, the yellow colored
2in figure 5 we project conformance diagnostics onto a trace. however, conformance diag-
nostics can also be projected on the process model.
7figure 6: by replaying the event log on the process model, it is possible to an-
notate the model with performance information. the red transitions and places
correspond to bottlenecks in the process.
elements of the process indicate ecient ows, whereas orange and/or red ele-
ments highlight activities that are taking longer. again, the gray components
correspond to invisible activities and are not considered within the performance
analysis.
2.5 other types of process mining
apart from the three subelds mentioned in the previous sections, other analyses
have been developed within the domain of process mining as well. an example
of analysis is predictive analysis, i.e., predicting the remaining time of a process
instance. also, some analysis methods focus on the organizational perspective of
the process. usually an event log contains information regarding what resource
executed what activity. hence, several interesting social networks can be mined
from the event log. consider for example figure 7 which depicts a similar task
social network .
the vertices within the social network correspond to resources that where
active within the process. an arc between two vertices indicates that the re-
sources execute similar tasks within the process. clearly there are a few clusters
identiable within the network, suggesting that dierent groups of resources
execute a dierent set of activities.
another type of process mining is decision mining which focuses on the data
ow in a process model. for each decision point, one can derive explanations
based on dierent features. this can be used to learn that nes of a particular
type, e.g., nes for speeding versus nes related to parking illegally, correlate
with specic process executions.
8figure 7: an example of a social network based on similarity of work proles of
resources.
3 why is process mining dierent from data
mining?
process mining provides a range of tools to improve processes in a variety of
application domains. in the previous section we introduced the main forms of
process mining. process mining builds on process model-driven approaches and
data mining. however, process mining is much more than an amalgamation of
existing approaches. for example, existing data mining techniques are too data-
centric to provide a comprehensive understanding of the end-to-end processes
in an organization. some would argue that process mining is part of the broader
data mining or machine learning discipline. depending on the denition, this
could be (partially) correct. a common denition for data mining is \the analysis
of (often large) data sets to nd unsuspected relationships and to summarize the
data in novel ways that are both understandable and useful to the data owner"
[9]. using this broad denition, parts of process mining are indeed included.
however, discussions on such inclusion relations are seldom useful and are often
politically motivated [1]. most data mining tools do notprovide process mining
capabilities, most data mining books do notdescribe process mining techniques,
and it seems that process mining techniques like conformance checking do not
t in any of the common denitions of data mining. it is comparable to claiming
9that \data mining is part of statistics". taking the transitive closure of both
statements, we would even be able to conclude that process mining is part of
statistics. obviously, this does not make any sense.
like process mining, data mining is data-driven. however, unlike process
mining, mainstream data mining techniques are typically not process-centric.
process models expressed in terms of petri nets or bpmn diagrams cannot be
discovered or analyzed in any way by the main data mining tools. typically,
data mining techniques assume that the data items used originate from some
unknown distribution, and moreover, are independent . within process mining,
the primary source of data is an event log. at the lowest level, an event log con-
sists of events, however, multiple events together constitute to a trace. taking
into account that events together constitute to cases eectively adds an addi-
tional layer within the data which can not be ignored. thus, within process
mining we do not only consider the events in isolation, rather, we also look at
events at the trace level and use this to gain new insights within the data.
there are a few data mining techniques that come close to process mining [1].
examples are sequence and episode mining [10, 11]. however, these techniques
do not consider end-to-end processes.
one of the important features of r apid prom is that the standard data
mining techniques shipped with r apid miner can be combined with a range
of process-centric analytical techniques from p rom. through process mining,
it becomes easier to apply data mining techniques to event data. the process
model serves as a backbone for a variety of data mining techniques (classica-
tion, clustering, etc.). for example, decision rules can be learned using standard
data mining tools after the control-ow backbone (e.g., a petri net) has been
learned using a process mining tool. it is also interesting to combine process min-
ing with other types of analysis available though the r apid miner marketplace
(e.g., text mining, web mining, deep learning, etc.).
4 rapidprom
in this section we describe r apid prom, the process mining extension of
rapid miner . we present a high-level view of the basic architecture of the
extension, commonly used objects, and, an overview of commonly used opera-
tors.
4.1 architecture
as indicated in the introduction, the process mining toolkit p rom [1, 4] is
the standard scientic tool for performing process mining analytics. as a con-
sequence, p rom consists of a vast amount of state-of-the-art algorithms for
the purpose of process discovery, conformance checking and performance anal-
ysis. conveniently, both p rom and r apid miner are programmed in the java
(http://www.java.com ) programming language. hence, porting existing algo-
rithms implemented in p rom is mainly concerned with integrating them within
10figure 8: basic overview of the architecture of r apid prom.
the r apid miner ecosystem.
in figure 8 a high-level overview of the architecture of r apid prom is de-
picted schematically. r apid prom acts as a bridge between r apid miner and
prom. within p rom any algorithm that performs some process mining task,
e.g., a process discovery algorithm is called a plug-in . such plug-in usually
expects a (set of) input object(s) and results in a (set of) output object(s).
thus in that respect a plug-in is comparable with an operator as dened within
rapid miner , and, most operators in r apid prom correspond directly to their
counterpart in p rom. each plug-in has an associated (set of) visualizer(s) that
allow the user to inspect the results of their process mining analysis. again,
most of these visualizers are ported as renders into r apid prom and hence,
have a corresponding counterpart in p rom.
4.2 objects
objects specic to r apid prom are either based on data stored in some source,
e.g., les, or, are the result of applying some algorithm. a complete overview
of all objects ported and/or dened in r apid prom is outside the scope of this
chapter. however, we present the most prominent categories of objects relevant
for process mining related analyses.
event logs. the most prominent data objects within r apid prom are
event logs. as indicated, an event log is a collection of traces which represent pro-
cess instances that have been executed. several operators within r apid prom
need an event log as an input object. r apid prom supports importing data les
which adhere to the xesstandard ( http://www.xes-standard.org/ ). most
commonly .xes les are used, an xmlbased data source adhering to the stan-
dard. within r apid prom, the openxes reference implementation is used for
importing/exporting .xes les. additionally, r apid prom supports convert-
ingexample sets into event log objects, and, event log objects into example
11sets .3
process model related objects. since most algorithms within process
mining are related to (business) processes, several objects implementing some
process model formalism are available in r apid prom. examples of such for-
malisms are bpmn models [12], petri nets [8], colored petri nets [13], process
trees [14], etc.
analysis and reporting objects. apart from event logs and process
model related objects, r apid prom includes several objects related to analy-
sis and reporting. for example, we are able to perform conformance checking
of event logs and petri nets by computing so called alignments [15]. hence,
rapid prom includes p rom based alignment objects with corresponding vi-
sualizations to inspect conformance results. another example would be the in-
ductive visual miner [16] object, which presents a visual animation of cases
going through a process model. this object is interactive, as it enables the user
to lter cases based on selected behavior. it also highlights deviations of cases
w.r.t. the process model.
4.3 operators
rapid prom introduces several operators that allow us to perform process min-
ing analyses. we present the most prominent categories of process mining op-
erators.
input/output. for some of the objects dened in r apid promimport
and export operators are available, e.g., event logs, petri nets, etc. all these
operators need the input/output le/folder as a parameter. additionally, for
event logs an extractor operator is present which is able take a le as an input
object.
discovery. rapid prom provides several dierent process discovery al-
gorithms, e.g., the alpha miner [17], the heuristics miner [18], and the in-
ductive miner [19]. apart from these control-ow based algorithms, i.e. algo-
rithms focusing on the sequential ordering of business activities within a process,
rapid prom also provides a social network miner [20]. this operator allows us
to discover a social network of interacting resources within the event log. the
corresponding renderer allows the user to inspect and manipulate this network
in an interactive fashion.
analysis. rapid prom provides several operators for the purpose of ana-
lyzing process discovery results. several conformance checking related operators
are present that allow the user to assess the conformance of an event log to a
process model and vice versa. furthermore, several operators that enable the
user to analyze/enhance process models are provided, e.g., for analyzing formal
properties of the models and/or simplifying the models. finally, r apid prom
oers operators that allow the user to visualize actual data present in the event
log onto the model, e.g., \replaying" the event log on a process model.
apart from the three main categories mentioned here there are some more
3anexample set is the basic tabular data object in rapidminer.
12operators available in r apid prom. there are operators that provide the pos-
sibility to convert certain objects into other objects, e.g., petri nets to bpmn
models. other operators allow the user to manipulate event logs, e.g., adding
articial start and end events to traces within event logs (which greatly improves
the performance of some process discovery algorithms).
an example workow containing an import operator, a discovery operator
and an analysis operator is depicted in figure 9.
figure 9: an example of a r apid prom workow where (i). an event log is
imported, (ii). a process model is discovered based on the event log (using the
inductive miner), and, (iii). a conformance checking analysis is performed using
both the event log and the resulting process model.
5 rapidprom in action
this section describes three concrete use cases in which the operators provided
by r apid prom are used to obtain insights about a process using the pro-
cess mining techniques described in section 2. we aim at using simple work-
ows in order to show the main process mining capabilities of r apid prom.
a real-life event log, containing more than 150.000 cases, is used as input
for all three use cases. the event log is obtained from the data archive of
the 4tu.centre for research data (4tu.researchdata).4within this archive,
other event logs are publicly available as well, i.e., https://data.4tu.nl/
repository/collection:event_logs as part of the \ieee task force on pro-
cess mining - event logs" collection. within the case studies we do not go
into detail w.r.t. the algorithmic properties of the operators used. however, the
complete documentation (i.e., operator description, parameter explanation and
related articles) of all the operators used within the workows described in the
case studies is provided by r apid prom and is embedded in r apid miner (by
4http://data.4tu.nl
13means of the help window). finally, note that some of the results depicted
in this section are enhanced to increase their readability on paper and there-
fore in some cases might deviate from their corresponding visualization(s) in
rapid prom.
5.1 dataset: road fines management process
the dataset used in the three case studies is an event log that was extracted
from an information system that handles the \road trac fine management"
process in an italian municipality.5the event log includes cases of road trac
nes that are processed by the municipality over a period of three years (from
january 2000 until june 2013). the \road trac fine management" process
is composed of 11 dierent activities. we describe the process as it should look
like according to domain experts. the activities, as recorded within the event
log, are written italic.
the process starts with a ne being created (i.e., create fine ). after a ne
has been created, it is sent to the oender's place of residence (i.e., send fine ).
when the oender receives the ne, the date of reception of such notication is
also registered (i.e., insert fine notication ). after this, the ne should be paid
within 60 days (i.e., payment ). however, in case the ne was physically handed
over to the oender, e.g. by means of a parking ticket, the oender is able to
immediately pay the ne. in such case, the ne will not be sent and there will
be no registration of the notication. this exception, i.e., direct payment after
ticket creation saves the oender administration costs. in total, the oender has
60 days to either pay the ne or appeal against it. after this period, a penalty is
added to the ne amount (i.e., add penalty ). if the oender appealed against the
ne within 60 days, the appeal is sent to the corresponding prefecture (i.e., send
appeal to prefecture ), which is registered when it is received (i.e., insert date
appeal to prefecture) . the results of the appeal are sent back to the municipality
(i.e., receive result appeal from prefecture ) and they are notied to the oender
(i.e., notify result appeal to oender ), which can appeal against the result
(appeal to judge ). if the oender does not pay (possibly after a denied appeal),
the ne is sent for credit collection (i.e., send for credit collection ).
a simple normative process model (petri net) based on the description in
the previous paragraph is depicted in figure 10. note that this model does not
capture any form of parallelism. it is merely a sequence of activities combined
with possible choices, e.g., after the create fine activity, the process model
describes the choice of either a payment activity, or, a send fine activity.
5.2 case study 1: discovering process models
as mentioned in subsection 2.2, many dierent models can be discovered from
the same event log by applying dierent discovery techniques. furthermore,
process models can be described using dierent notations, e.g., using petri net,
5this event log is publicly and permanently available at ( http://dx.doi.org/10.4121/
uuid:270fd440-1057-4fb9-89a9-b699b47990f5 ).
14figure 10: normative process model based on the \road trac fine manag-
ment" process description.
bpmn, etc. this case study shows how several process models can be discovered
from a real event log using the discovery operators of r apid prom.
workow figure 11 illustrates a basic r apid miner workow used to dis-
cover process models from an event log. first, an event log is imported using the
import event log operator. then, several process models are discovered from
the event log using dierent operators that produce process models in dierent
notations. the discovery operators included in this workow, and the type of
process model that they produce are: the alpha miner (petri net), the ilp
miner (petri net), the heuristics miner (heuristics net), the inductive miner
(petri net), the social network miner (social network), the transition system
miner (transition system), and the fuzzy miner (fuzzy model).
the workow immediately highlights an advantage of using r apid miner
15figure 11: workow used for case study 1: an event log is imported and sev-
eral process model are created using some of the available discovery operators
provided by r apid prom.
as it allows us to generate all results of the dierent miners in one go. moreover
we are able to directly reuse this workow for other event logs as well. in such
case we just change the le pointed to by the import event log operator. if we
do this, depending on the event log, we might need to change the classier used
by the discovery algorithms. the classier parameter is shared by all discovery
operators. it is a default attribute within an event log and species what event
attribute should be used in order to identify the corresponding activity . in case
of our example event log snapshot, depicted in figure 2, the classier to use is
theactivity column.6finally, the workow can also be used as a sub-process
after which the best model, depending on some process model specic quality
criteria, e.g., model simplicity, is selected for further analysis.
results analysis consider figure 12, in which the result of applying the
heuristics miner on the event log is depicted. the model depicted in figure 12 is
a heuristics net. the squares refer to activities whereas an arrow between two
activities indicates that the source activity preceded the target activity. the
intensity of the dierent elements within the net correspond to their relative
6classiers originate from the xes standard. more information on classiers can be found
in:http://www.xes-standard.org/_media/xes/xesstandarddefinition-2.0.pdf .
figure 12: result (heuristics net) of applying the heuristics miner on the event
log.
16figure 13: result (petri net) of applying the inductive miner on the event log.
frequency as observed within the event log. although the presence of paral-
lelism is somewhat hard to detect in a heuristic net, it still provides very usable
insights. from the heuristics net we deduce that indeed, as prescribed in the
textual and normative models, after the create fine activity a payment ac-
tivity can be performed. however, when considering the payment activity, we
observe a self-loop , i.e. an arc leaving and entering the payment activity. this
possibly suggests that the specic municipality allows for paying the ne in
terms. another interesting observation is the fact that after a penalty is added,
the activity send for credit collection always seems to occur. in some cases,
even though a payment was made, still the send for credit collection activity
was performed. this can have several explanations, e.g., the payment did not
match the ne, the payment was registered too late etc. finally after the insert
fine notication activity, the appeal to judge activity seems to be executed.
consider the petri net depicted in figure 13, obtained by applying the in-
ductive miner on th event log (using a noise lter level of 0.2). due to the
application of a noise lter, the petri net might neglect some of the behavior
as captured within the event log. the model describes that after the create
fine activity we are able to choose between executing three invisible activities
(the black squares, intended for routing purposes). choosing the lowest invisible
activity leads us directly to the payment activity. we are however able to skip
the activity. if we execute the middle invisible activity (after the create fine
activity), we always have to execute the send fine activity. after this the insert
fine notication activity is either executed or skipped. finally, if we choose the
upper invisible transition, the model shows some interesting behavior. the ac-
tivities send appeal to prefecture ,insert date to prefecture and receive result
appeal from prefecture should all be executed. however, the model describes
that they are in a parallel block, i.e., we are able to executed them in any
arbitrary order. note that the model also describes that we are able to only
execute the create fine activity and then skipping all subsequent activities,
i.e., resulting in a trace with only one activity.
17figure 14: workow used for case study 2: an event log and petri net are
imported. subsequently the model and the event log are used for conformance
checking.
5.3 case study 2: checking process conformance
the previous case study shows how process discovery can be used to get an
insight in a process based on the actual behavior recorded an event log. very
often, as was the case in the previous case study, the event log contains behavior
that does not comply with the process description. this may have several rea-
sons, e.g., the process description is incomplete, errors occurred during logging
the process, the process was executed incorrect etc. at the same time, due to
limitations of the process discovery algorithm, a resulting process model may
describe behavior that is not present in the event log . although applying process
discovery yields insights w.r.t. the degree of compliance, it does not provide an
accurate exact result. therefore, in this case study, we perform conformance
checking of the normative process model w.r.t. the event log to get a more exact
conformance result.
workow figure 14 illustrates the basic workow for the purpose of confor-
mance checking. we import an event log using the import event log operator.
secondly we import the normative model using the import petri net operator.
the two artifacts are used to check conformance by means of the conformance
checking operator. note that the conformance checking operator needs a petri
net and an event log as an input, hence, the petri net can also be the result of
any process discovery operator (given that the operator produces a petri net).
hence, we can use the result of a conformance checking operator as a quality
measure for a process discovery algorithm. the conformance checking operator
provides several results, e.g., a projection of conformance results onto the process
model, or, onto the event log. also, conformance checking results are provided
asexample sets for further analysis using other r apid miner operators.
results analysis in this section we analyze some of the results obtained by
theconformance checker in the workow described in the previous section. we
rst inspect the projection of the conformance checking results onto the process
model, as depicted in figure 15. note that the model depicted in figure 15 is
the same as the normative model depicted in figure 10, the dierence in layout
is related to the underlying visualization software. within figure 15 we identify
two dierent types of squares, which we highlight in figure 16.
18figure 15: conformance results projected onto the normative model
the rst type of activity are highlighted in 16a, are highlighted in a solid
blue color. for these type of activities, the event log and the model are per-
fectly conforming w.r.t. each other. the intensity of the color is related to the
frequency of occurrence of such an activity. as highlighted in figure 15, the
create fine activity of the normative model aligns perfectly w.r.t. the event
log (and vice versa). this mainly implies that the activity is executed in each
trace. it does however not necessarily imply that the create fine activity is
indeed always the rst activity within any sequence. the exact reason for this
is somewhat technical and outside of the scope of this chapter, hence, we refer
the interested reader to [15] for more detail. the create fine activity is also
depicted in 16a. the (150370 =0) inscription underneath the create fine label
indicates that in 150 :370 cases the event log and the model agreed that the
activity should be executed, whereas in 0 cases this was not the case. another
example of a perfectly conforming activity is the send fine activity.
the second type of activity are activities that are not perfectly conforming.
these activities have a red border, and, a green and pink bar in the bottom
of the square. consider figure 16b for an example. the width of the green bar
indicates the number of conforming occurrences of the particular activity. the
pink bar indicates the number of non conforming occurrences. in case of the
payment activity, depicted in figure 16b, we observe that in 49 :976 cases the
event log and model conform w.r.t. executing the activity. however, in 20 :534
cases, the model dictates that the activity should occur, whereas according to
the event log, this is not the case.
(a) activity for which the event
log and model conform perfrectly.
(b) activity for which the event
log and model do not conform
perfrectly.
figure 16: two activities from the normative model having a dierent type of
conformance result.
19although the projection of conformance metrics onto the model leads to
interesting insights, it does not allows us to inspect the conformance of individual
traces within the event log. moreover, as argued before, we are not able to
deduce that the create fine activity is indeed always the rst activity of any
case. within r apid prom, we therefore also provide the option to project the
conformance results onto case within the event log (by means of a dierent
renderer of the conformance results). an example screen shot of this view in
rapid promis depicted in figure 17. within this view, the cases are ordered
figure 17: example screen shot of conformance statistics projected onto cases
in the event log.
based on their frequency within the event log. consider figure 18 depicting the
rst case of figure 17 in more detail. as the statistics show, there is a total
of 56.482 traces within the event log that exactly follow this execution path.
clearly this is a typical case of non-paying oenders that did not appeal.
there are also cases for which the trace and the model are not conforming
w.r.t. each other. consider the example depicted in figure 19. the gure in-
dicates that indeed, the create fine activity is both present in the trace and
in the model. secondly, it indicates that a send fine activity was performed,
followed by an insert fine notication activity. somehow, the oender did not
pay in time and hence a penalty was added to the ne. up until this point the
trace and the model still conform. however, after the rst payment activity,
the oender again performed a payment activity. the second payment is not in
line with the normative model and is therefore indicated in yellow. there may
be several reasons for a duplicate payment, e.g., the oender payed the ticket
figure 18: conformance results projected onto a trace which perfectly conform-
ing w.r.t. normative model.
20figure 19: conformance results projected onto a trace which does not conform
w.r.t. the normative model.
too late and afterwards payed the ne as well, the oender payed in multiple
terms etc. in any case, given that this behavior occurred around 3.736 times,
such case is interesting to discuss with the business owner of the process, the
italian municipality in this case.
5.4 case study 3: identifying bottlenecks in a process
the previous case study shows how to do conformance checking using an event
log and a process model. in this case study, we go one step further and analyze
the behavior in the event log from a performance perspective, as described in
subsection 2.4.
workow the workow used within this case study equals the workow
used within the previous case study. however, instead of using the conformance
checking operator, we use the analyze performance (manifest) operator. the
result of this operator is a projection of performance statistics onto the input
model, in this case the normative model.
results analysis some global statistics related to the performance of the
process are depicted in figure 20 the average throughput time reported is
10.51 months, with a standard deviation of around 11.45 months. interestingly
the longest running case was running for 114.57 months. the reason for this can
be a long running appeal against the ne. however, often these type of cases
are related to issues in data quality, e.g. inaccurate logging of events etc. thus,
this stresses the need for proper data cleaning and ltering methods.
to gain more insights into the performance of individual activities we show
the result of projecting performance information onto the normative process
model in figure 21. the timing information in the event log is projected onto
figure 20: screens shot of the global performance statistics of the normative
process as reported by r apid prom.
21figure 21: projection of performance information into the normative process
model.
the activities present in the model. the activities in the process model are
colored depending on their performance, i.e., red colors indicate longer waiting
times and yellow colors indicate shorter waiting times.
the result object is highly interactive: users can lter cases based on their
throughput time, choose a dierent performance annotationm e.g., sojourn time,
waiting time, change color schemes, among many other functionalities. also, for
each activity several statistics are available such as minimum time, maximum
time, mean, standard deviation etc.
the activity with the highest waiting time is send for credit collection ,
having a waiting time of 17.61 months on average. this high waiting time can
be explained by the fact that only those nes that are not paid are sent to credit
collection. also, the time that the municipality waits before sending an unpaid
ne for credit collection depends on the actions of the oender (e.g., if he/she
appealed against the ne).
the second highest waiting time corresponds to the activity receive result
appeal from prefecture , with 5.06 months on average. it seems that a large
amount of time is spent between applying for an appeal and receiving the result
from prefecture. whether the municipality is able to speed up this part of the
process is questionable, since this is most probably executed by an external
party, i.e., the prefecture.
an interesting observation is the fact that activity add penalty has a waiting
time of 2.0 months on average. this is in line with the fact that the municipality
adds a penalty 60 days after the ne was sent. the standard deviation for this
particular activity is around 30 minutes. due to this small deviation it is highly
likely that adding the penalty is an automated activity . another interesting
observation is related to payments. the average waiting time is 1.92 months,
just under 2 months, i.e., the regular term for paying a ne. although this seems
a reasonable period, the standard deviation is 4.08 months, indicating that the
average wait time for payments is not strictly related to the legal payment term.
22as the previous insights highlight, performing performance analysis using
rapid prom leads to interesting results. these results can subsequently be
used to select and lter the event log in order to inspect the bottleneck cases in
more detail.
6 conclusion
in this chapter we introduced the r apid prom plugin which extends
rapid miner with process mining capabilities. r apid prom oers support to
organizations that need to manage non-trivial operational processes. most of
the operators provided by r apid miner correspond to data handling and clas-
sical forms of data mining. these operators are notprocess-centric and can-
not be used to analyze and improve end-to-end processes. the operators in
rapid prom provide process centric analysis capabilities. the r apid prom
operators focus on the analysis of event data and process models. they take
into account that events are related to process instances and should be han-
dled as such. r apid prom supports discovering process models from event logs,
checking conformance of an event log w.r.t. a process model, and calculating per-
formance results based on an event log and a process model. combined with the
powerful capabilities of r apid miner in terms of building analytical workows
and data mining, r apid prom enables us to:
1. design complex process mining experiments, combining several dierent
techniques.
2. reuse earlier dened analyses to be applied to new event logs (of the same
or another process).
3. bridge the gap between process mining and data mining.
we aim at keeping r apid prom up-to-date as new process mining tech-
niques or more ecient implementations emerge. for user/developer documen-
tation, data sets, example workows, etc., we refer to www.rapidprom.org .
acknowledgements
the authors would like to thank all that contributed the p rom plug-ins used
in r apid prom (see www.promtools.org ). special thanks go to ronny mans
who developed the rst version of r apid prom.
references
[1] w.m.p. van der aalst. process mining: data science in action . springer-
verlag, berlin, 2016.
23[2] w.m.p. van der aalst. business process management: a com-
prehensive survey. isrn software engineering , pages 1{37, 2013.
doi:10.1155/2013/507984.
[3] w.m.p. van der aalst. data scientist: the engineer of the future. in
k. mertins, f. benaben, r. poler, and j. bourrieres, editors, proceedings
of the i-esa conference , volume 7 of enterprise interoperability , pages
13{28. springer-verlag, berlin, 2014.
[4] w.m.p. van der aalst, b.f. van dongen, c.w. g unther, a. rozinat,
h.m.w. verbeek, and t. weijters. prom: the process mining toolkit.
inproceedings of the business process management demonstration track
(bpmdemos 2009) , 2009.
[5] r. mans, w.m.p. van der aalst, and e. verbeek. supporting process
mining workows with rapidprom. in l. limonad and b. weber, editors,
business process management demo sessions (bpmd 2014) , volume 1295
ofceur workshop proceedings , pages 56{60. ceur-ws.org, 2014.
[6] a. bolt, m. de leoni, and w.m.p. van der aalst. scientic workows for
process mining: building blocks, scenarios, and implementation. inter-
national journal on software tools for technology transfer , pages 1{22,
2016.
[7] omg. business process model and notation (bpmn). object manage-
ment group, dtc/2010-06-05, 2010.
[8] t. murata. petri nets: properties, analysis and applications. proceedings
of the ieee , 77(4):541{580, april 1989.
[9] d. hand, h. mannila, and p. smyth. principles of data mining . mit
press, cambridge, ma, 2001.
[10] r. agrawal and r. srikant. mining sequential patterns. in proceedings of
the 11th international conference on data engineering (icde'95) , pages
3{14. ieee computer society, 1995.
[11] h. mannila, h. toivonen, and a.i. verkamo. discovery of frequent
episodes in event sequences. data mining and knowledge discovery ,
1(3):259{289, 1997.
[12] omg. business process model and notation (bpmn). object manage-
ment group, formal/2011-01-03, 2011.
[13] k. jensen and l.m. kristensen. coloured petri nets - modelling and val-
idation of concurrent systems . springer, 2009.
[14] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. scalable pro-
cess discovery with guarantees. in k. gaaloul, r. schmidt, s. nurcan,
24s. guerreiro, and q. ma, editors, enterprise, business-process and infor-
mation systems modeling (bpmds 2015) , volume 214 of lecture notes
in business information processing , pages 85{101. springer-verlag, berlin,
2015.
[15] w.m.p. van der aalst, a. adriansyah, and b. van dongen. replaying
history on process models for conformance checking and performance
analysis. wires data mining and knowledge discovery , 2(2):182{192,
2012.
[16] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. process and devia-
tion exploration with inductive visual miner. in l. limonad and b. weber,
editors, business process management demo sessions (bpmd 2014) , vol-
ume 1295 of ceur workshop proceedings , pages 46{50. ceur-ws.org,
2014.
[17] w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workow
mining: discovering process models from event logs. ieee transactions
on knowledge and data engineering , 16(9):1128{1142, 2004.
[18] a.j.m.m. weijters, w.m.p. van der aalst, and a.k. alves de medeiros.
process mining with the heuristics miner-algorithm. beta working paper
series, wp 166, eindhoven university of technology, eindhoven, 2006.
[19] s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering block-
structured process models from event logs: a constructive approach. in
j.m. colom and j. desel, editors, applications and theory of petri nets
2013, volume 7927 of lecture notes in computer science , pages 311{329.
springer-verlag, berlin, 2013.
[20] w.m.p. van der aalst, h.a. reijers, and m. song. discovering social net-
works from event logs. computer supported cooperative work , 14(6):549{
593, 2005.
25