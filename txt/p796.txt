compliance checking of data-aware
and resource-aware compliance requirements
elham ramezani, vladimir gromov, dirk fahland, and wil m. p. van der aalst
eindhoven university of technology, the netherlands
{e.ramezani,v.gromov,d.fahland,w.m.p.v.d.aalst}@tue.nl
abstract. compliance checking is gaining importance as today‚Äôs organizations need
to show that their business practices are in accordance with predeÔ¨Åned (legal) require-
ments. current compliance checking techniques are mostly focused on checking the
control-Ô¨Çow perspective of business processes. this paper presents an approach for
checking the compliance of observed process executions taking into account data,
resources, and control-Ô¨Çow. unlike the majority of conformance checking approaches
we do not restrict the focus to the ordering of activities (i.e., control-Ô¨Çow). we show
a collection of typical data and resource-aware compliance rules together with some
domain speciÔ¨Åc rules. moreover providing diagnostics and insight about the deviations
is often neglected in current compliance checking techniques. we use control-Ô¨Çow and
data-Ô¨Çow alignment to check compliance of processes and combine diagnostics ob-
tained from both techniques to show deviations from prescribed behavior. furthermore
we also indicate the severity of observed deviations. this approach integrates with
two existing approaches for control-Ô¨Çow and temporal compliance checking, allowing
for multi-perspective diagnostic information in case of compliance violations. we
have implemented our techniques and show their feasibility by checking compliance
of synthetic and real life event logs with resource and data-aware compliance rules.
keywords: compliance checking, auditing, data-aware and resource-aware com-
pliance requirements, conformance checking
1 introduction
organizations need to comply with an increasing set of laws, regulations, and service level
agreements set by both internal and external stakeholders. major corporate and accounting
scandals including those affecting enron, tyco, adelphia, peregrine, and worldcom have
fueled the interest in more rigorous auditing practices. legislation, such as the sarbanes-
oxley (sox) act of 2002 and the basel ii accord of 2004, was enacted as a reaction to such
scandals. failing to comply may be costly, therefore organizations need to continuously
check whether processes are executed within a given set of boundaries. moreover organi-
zations seek for a better control of their processes to streamline their business operation and
prevent fraud, malpractices, risks, and inefÔ¨Åciencies.
there are two basic types of compliance checking: (1) forward compliance checking
aims to design and implement processes where compliant behavior is enforced, and (2)
backward compliance checking aims to detect and localize non-compliant behavior. this
paper focuses on backward compliance checking based on event data.
current backward compliance checking techniques focus on verifying aspects related to
control Ô¨Çow while checking compliance requirements addressing other fundamental aspects
of a process including data handling, and resources are as important. the compliance re-
quirements considered in this paper take into account data, resources, control-Ô¨Çow, and theirinterplay. we have collected several compliance requirements found in literature; we classify
these requirements using two main categories and propose two generic techniques for check-
ing these rules. our approach seamlessly integrates with control-Ô¨Çow compliance checking.
more important, the technique provides detailed diagnostic information in case of non-
compliant behavior; it shows for each process instance which attribute(s) (resource or data)
inwhich event violated a requirement and what changes would have been needed to make the
behavior compliant. our data and resource-aware compliance checking techniques leverage
a recent data-aware alignment technique [11] that allows to check conformance of a log
with respect to a data-aware petri net . we adapt and improve this technique for our purpose.
moreover, our collection of data and resource-aware compliance rules, address the problem
of compliance rule elicitation from informal description of compliance requirements.
the remainder of this paper is organized as follows. we recall some basic deÔ¨Ånitions
for control-Ô¨Çow and data-Ô¨Çow alignments in sect. 2. in sec. 3, we give an overview on
how a compliance requirement may impact different perspectives of a business process and
show different types of data and resource-aware compliance rules. section 4 introduces the
problem of data and resource-aware compliance checking and discusses our solution through
a running example. in sect. 5 the implementation of the approach in prom is showcased.
experimental results are presented and discussed in sect. 6. we discuss related work in
sect. 7, and sect. 8 concludes this paper.
2 preliminaries
this section recalls basic notions for control-Ô¨Çow alignment [2,5] and data-Ô¨Çow align-
ment [ 12] on which we build for data and resource-aware compliance checking. alignments
relate recorded executions of a process to a formal speciÔ¨Åcation which describes the bound-
aries of a compliant process.
logs. executions of business processes are recorded in terms of event logs . an event
loglis a multiset of traces. a log trace l=he1;:::;e ni 2ldescribes a par-
ticular process execution as a sequence of events. an event erefers to the execution
of an activity and is a tuple of pairs of distinct attributes and their corresponding val-
ues;e= ((attre
1;vale
1);:::; (attre
k;vale
k)). each attribute and its corresponding value
provides information on the executed activity. for instance in the event e= ((name;
approve loan request ),(resource;john),(amount;10000 )), the pair (name;approve
loan request )refers to the name of the respective activity executed, (resource;john )indi-
cates the resource approved the request, and (amount; 10000) records the request amount.
lete=fe1;:::;e ngbe the set of all events in log l.attre=fattre
1;:::;attre
kg
is the set of all kattributes of an event e; andvale=fvale
1;:::;vale
kgis the set of all
values for attributes of an event e. as a shorthand, we write le(attre
i) =vale
ito denote that
eventehas value vale
ifor attribute attre
i;1ik. we deÔ¨Åneattrlas the set of all
event attributes in the log; attrl=[e2eattre.
speciÔ¨Åed behaviors. a speciÔ¨Åcation describes what is considered compliant and what is not.
in essence, each speciÔ¨Åcation describes a set sofcompliant traces . every compliant trace
s=ha1;:::; ani2sis a sequence of activities which are allowed to be executed. activ-
ities may have attributes with corresponding admissible values that describe how an activity
must be executed in a compliant trace. an activity ais a tuple of pairs of distinct attributes
and their corresponding setof admissible values; a= ((attra
1;vala
1);:::;(attra
k;vala
k))
where each vala
iis a set of admissible values that attribute attra
iis allowed to take.
for instance for the activity a= ((name;fapprove loan request g);(resource;fjohn;
elham;luisg);(amount;f500;:::; 1500g)), the pair (name;fapprovegloan requestg)shows the name of the activity allowed to be executed, (resource;fjohn;elham;luisg)
indicates the resources who are allowed to approve a loan request, (amount;f500;:::; 1500g)
speciÔ¨Åes the admissible amount for a loan.
as a shorthand, we write la(attra
i) =vala
ito denote that activity acan take values
vala
ifor attribute attra
i,1ik. the set attraof all attributes of activity a, and
attrsof speciÔ¨Åcation sare deÔ¨Åned similar to attributes of events and logs.
given an activity a,laassigns a set of admissible values to an attribute of activity a;
la(attra
i) =vala
ifor16i6k. we deÔ¨Åne attraas the set of all kattributes of an
activitya;attra=fattra
1;:::; attra
kg.attrsis the set of all attributes of all the
activities in the speciÔ¨Åcation; attrs=[a2aattra, andais the set of all activities
in speciÔ¨Åcation s;a=fa1;:::;a ng.
relating events in a log to activities in the speciÔ¨Åcation. as we already mentioned every
event refers to execution of an activity. we will explain later in this paper how we use
alignment techniques for checking compliance. there, we will pair events in the log and
activities in the speciÔ¨Åcation using the following notation.
for event log lwith eventse, and attributes attrl, we call an attribute typel2
attrlalog type attribute iftypel2\e2eattre, i.e., an attribute present in all events
inl. we assume that at least one typelexists forl. we deÔ¨Åne typevallas the set of
all values for typel;typevall=fle(typel)je2eg.
similarly for speciÔ¨Åcation swith activities aand attributes attrs, we call an at-
tribute types2attrsaspeciÔ¨Åcation type attribute iftypes2\a2aattra, i.e.,
an attribute present in all activities of speciÔ¨Åcation s. we assume that at least one types
exists for speciÔ¨Åcation sand attribute typeshas only a single value for each activity i.e.,
la(types) =flabelag. we deÔ¨Åne typevalsas the set of all admissible values for a
speciÔ¨Åcation attribute types;typevals=[a2ala(types).
note that a log and a speciÔ¨Åcation may have multiple type attributes. later on, we relate
ltosby picking a speciÔ¨Åc log type attribute and a speciÔ¨Åc speciÔ¨Åcation type attribute each,
and mapping the values typevallto the values typevals.
data-aware petri nets the speciÔ¨Åcation srepresenting all compliant traces, can be
expressed in various ways. for instance as a petri net [2] or in terms of declarative con-
straints [12]. typically, the speciÔ¨Åcation sis very large, being the semantic notion of all
compliant traces. in this paper, we use petri nets to specify sin a concise form. fig. 1
illustrates a variant of petri nets called data-aware petri net. data-aware petri nets extend
classical petri nets with data. they describe which activities are allowed to be executed
and in which sequence. in addition, a data-aware petri net describes how every activity is
allowed to be executed with respect to its attributes and their values. ns‚Äîthe data-aware
petri net shown in fig. 1‚Äî describes a simpliÔ¨Åed version of a loan application procedure.
the process starts with activity a1which is represented with the transition receive loan
request and continues with a2represented by check credit of the applicant requesting the
loan. afterwards the decision for approving orrejecting the request should be taken either
by executing activity a3ora4, and Ô¨Ånally the applicant will be informed about the decision
by executing activity a5. each activity has an attribute name that we will use later as a
speciÔ¨Åcation attribute typesfor mapping (please see sect.2). the admissible value of this
attribute is written inside the transition representing each activity.
moreovernsdepicts other admissible attributes as the yellow colored eclipses including
resource , and amount . some activity attributes may be accessible by all the activities e.g.,
resource or may be accessible by speciÔ¨Åc activities e.g., amount . this is speciÔ¨Åed by the
dashed line connecting attributes to activities. a speciÔ¨Åcation describes how an activity mustapprove loan 
request
(app.req.)
inform applicant
(inf.app.)receive loan 
request
(rec.req.) credit check
(cred.ch.)
reject request
(rej.req.)amountresource
{w: r = e2.resource}
a1 a2 a3 a1œ≠s1œ≠si
a3 a5œ≠sna1 a2a3
a4a5[r ‚â† e2.resource]
{w: r = e3.resource}
a5
name rec.req. cred.ch. app.req. {inf.clinet}
resource john john luis john
amount 5000
name rec.req. cred.ch. app.req. {inf.clinet}
resource john luis john john
amount 5000 a2
name rec.req. cred.ch. rej.req. {inf.clinet}
resource john luis john john
amount 10000 a1 a4 a5 a2
s={, ‚Ä¶ , , ‚Ä¶ , }
œ≠s1œ≠si
 ‚Ä¶  ‚Ä¶ œ≠snfig. 1.ns, a data-aware petri net example, and some compliant trace examples from speciÔ¨Åcation s.
be executed in order to be compliant; hence in a data-aware petri net activities may have
additional annotations. for instance in ns, activitya3represented by the labeled transition
approve loan request is guarded. the guard restricts the relation between activities of a2,
anda3with the help of variable r. the value of the attribute resource for the recent event
produced by the execution of a2is stored in variable r. this is expressed by the write statement
fr=e2:resourcegannotated at a2. the execution of activity a3updates the value of r.
this is expressed by the write statementfr=e3:resourcegannotated at a3. the guard
on activitya3[r6=e2:resource ]speciÔ¨Åes that the resource executeda3must be different
with the resource executeda2. that is, the new value of rmust be different from its previous
value which was written by the execution of a2. please note that this guard describes four-eye
principle . the Ô¨Åring sequences of the petri net nsis the setsgiven in fig. 1(bottom).
name rec.req. cred.ch. app.req.
lresource john luis luis
amount 10000
fig. 2. sample trace laligning observed behavior to speciÔ¨Åed behavior.
an observed trace in a log may deviate from admissible
behaviors; e.g., the non-compliant trace lshown in
fig. 2. there are three events and three attributes in this
trace. we choose name as log type attribute typel(see
sect.2) and map the values of this attribute occurring
inlto transition labels in nswhen they have the same value. please note that transition
labels innsdenote the admissible values of types. if we only consider the compliance of
lw.r.t. existence and correct sequence of events, we see that an event ewith ( name:inform
applicant ) is missing as the Ô¨Ånal event in the trace. to understand where ldeviates from
speciÔ¨Åcation s, we apply control-Ô¨Çow alignment [2] between landnsas follows.
name rec.req. cred.ch. app.req.
lresource john luis luis
amount 10000
sname rec.req. cred.ch. app.req. inf.client>>
fig. 3. a control-Ô¨Çow alignment cof tracel
and speciÔ¨Åcation swithtypel=types=
name andmapping :r(val) =val.the idea is to Ô¨Ånd a compliant trace
s2sthat is as similar as possible to
l; differences between sandlthen
indicates deviations. we relate lto any
traces2sby pairing events in lto
activities in swhere events and activities
are of the same type with the same value. for
our example typel=types=name . the
obtained alignment is shown in fig. 3; top
row corresponds to events in land bottom row refers to activities in s. as is indicated inc, an event with ( name:inform client ) is missing; this is denoted by in the alignment
indicating a move on model.
letlbe an event log and sbe a speciÔ¨Åcation. we pick a log type attribute typel
(with values typevalloccurring in l) and a speciÔ¨Åcation type attribute types(with
values typevalsoccurring in s) as described above. further, we pick a mappingr:
typevalltotypevalsrelating log type attributes to speciÔ¨Åcation type attributes.
a control-Ô¨Çow alignment move mc(wrt.typel,types, andr) is a pair (x;y)2(e[f
g)(a[fg )nf(;)gwhere:
‚Äì(x;)is amove on log .
‚Äì(;y)is amove on speciÔ¨Åcation s.
‚Äì(x;y)is asynchronous move ifx;y6=andr(lx(typel))2ly(types).
a synchronous move (x;y)relates the event xto the activity ybased on the log type
attribute typeland the speciÔ¨Åcation type attribute types; the type value of xhas to map to
the type value of y(via mapping r).
a control-Ô¨Çow alignment of a trace l2ltosis a sequence c=hmc
1;:::;mc
niof
control-Ô¨Çow alignment moves such that ignoring , the projection x1:::xnjeis the original
tracel, and the projection y1:::ynja=s2sis described by the speciÔ¨Åcation.
the control-Ô¨Çow conformance checking technique of [ 2,5,14] returns an optimal control-
Ô¨Çow alignment s.t. no other alignment has fewer non-synchronous moves (move on log or
move on speciÔ¨Åcation only). this technique Ô¨Ånds an optimal alignment using a cost-based
approach: a cost function cassigns each control-Ô¨Çow alignment move (x;y)a costc(x;y)
s.t. a synchronous control-Ô¨Çow alignment move has cost 0and all other types of moves have
cost>0. then an a-based search on the space of (all preÔ¨Åxes of) all alignments of ltos
is guaranteed to return an optimal alignment for lands. in such an optimal alignment,
a move on log (e;)indicates that the trace lhad an event ethat was not supposed to
happen according to the speciÔ¨Åcation swhereas a move on speciÔ¨Åcation (;a)indicates
thatlwas missing an event that was expected according to s. as the alignment preserves
the position relative to the trace l, we can locate exactly where lhad an event too much
or missed an event compared to s.
a data-aware alignment [ 11] extends a control-Ô¨Çow alinement by also comparing every
evente2lwith all its attributes and their values to its corresponding activity a2swith
its admissible attributes and their values. if an event ewas not executed in compliance with
its corresponding activity, the data-aware alignment technique can identify the deviation and
extent of the deviation.
name rec.req. cred.ch. app.req.
lresource john luis luis
amount 10000
name rec.req. cred.ch. app.req. inf.client
resource john luis john john
amount 10000>>
s
fig. 4. the data-aware alignment dof tracel
ands.given event log land speciÔ¨Åca-
tions, a control-Ô¨Çow alignment c=
hm1;:::;m niof a log trace l2l
tosextends to a data-aware alignment
d=hm1;:::;m niby considering all at-
tributes as follows. log move and model
move are deÔ¨Åned as before. a synchronous
move (e;a)iscorrect iff for each attribute
attri2attreholds: attri2attra
andle(attri)2la(attri), i.e., each data
attribute of the event has a value admitted by the activity. otherwise, the synchronous move
is called incorrect . figure 4 shows an example of a data-aware alignment.
activitya3named approve loan request is executed by a resource which is not allowed
based on the guard at a3inns. the resource ( luis) executed approve loan request shouldhave been different from the resource executed credit check . in addition to Ô¨Ånding deviations,
dindicates the correct value for the violating attribute. in our example, from the resources
allowed to execute activity approve loan request ,john is suggested as the correct value.
similar to the cost-based approach applied in control-Ô¨Çow alignment, a cost function d
assigns each data-alignment move a cost d(x;y)s.t, a correct data-alignment move has
cost0and an incorrect move has cost >0. in the data-aware alignment technique of [ 11], an
ilp solver Ô¨Ånds among all synchronous control-Ô¨Çow alignment moves, values for attributes
ofssuch that the total cost of deviations for an alignment including move on log ,move on
model , and incorrect move is minimized. we apply control-Ô¨Çow and data-aware alignments
for data and resource-aware compliance checking.
3 compliance requirements
fig. 5. compliance rule frame-
work [14]compliance requirements prescribe how internal or cross-
organizational business processes have to be designed or
executed. they originate from legislations and restrict one
or several perspectives of a process (control Ô¨Çow, data Ô¨Çow,
process time or organizational aspects). restrictions can
be imposed for individual cases or groups of cases, they
can prescribe properties of process executions or process
design [ 14]. these different aspects of compliance give rise
to the framework shown in fig. 5. a complex compliance re-
quirement covering several perspectives of a process can be
decomposed into smaller compliance rules, each covering
a single aspect along the dimensions of this framework.
for example, a compliance requirement might state:
‚Äúbefore approving a loan request, the bank must check the
credit history of the applicant. a request can be approved
if it passes the evaluation. the approval and credit checking
must be done by different agents. regardless of rejection or
approval of the request, applicant must be informed about the bank‚Äôs decision within a weak
after submitting the request‚Äù.
this requirement can be divided into different compliance rules: i) control Ô¨Çow : ‚Äòloan
request approval or rejection must be preceded by credit check‚Äô, ii) process data : ‚Äòa loan may
be approved only if it passes the evaluation‚Äô, iii) process resource : ‚Äòrequest approval and
check credit must be done with different resources‚Äô, and iv) process time : ‚Äòevery application
for requesting a loan must be processed within one week from the date of application
submission‚Äô; each rule taking only one perspective into account. our earlier compliance
checking techniques of [14,20] are able to check control-Ô¨Çow and temporal compliance
rules, but do not provide a notion of data orresource . in the following, we present a new
approach for checking data and resource-aware compliance rules that provides diagnostic
information about deviations. before, we will explain the data and resource-aware rules
supported by our approach.
3.1 data-aware and resource-aware compliance rules
we identiÔ¨Åed some works [22,4,18,7,21,8,19] discussing compliance rules that restrict
process data and resource. table 1 shows the collection of compliance rules taken from these
sources and some more taken from practise e.g., medical guidelines. we found some typicalrestrictions on process data and resources such as four-eye principle (separation of duties),
authorization level or three-way match and some domain speciÔ¨Åc compliance rules.
in addition to the classiÔ¨Åcation presented in table 1, all different types of data-aware
and resource-aware constraints fall into two main categories: (1) constraints that enforce
a restriction on data attributes, and (2) constraints that restrict activities when a certain
data condition holds. for example a compliance rule such as the four-eye principle is of
the Ô¨Årst category. this rule speciÔ¨Åes that two activities aandbmust be executed by two
different resources. the rule assumes that the underlying control-Ô¨Çow sequence is correct
i.e., no matter in which order two activities aorbare executed, the restriction is on the
corresponding data attribute (resource). in case ais executed Ô¨Årst by resource r1, the rule
will urge that bmust not be executed by r1. whereas, if bwas executed Ô¨Årst, the restriction
would be on the resource executing activity a. in contrary with rules like four-eyes principle ,
a rule stating ‚Äúactivity bmust not be executed for gold customers‚Äù belongs to the second
category. this rule restricts the execution of activity bwhen a certain value ( gold) for
data attribute customer type holds. that is, based on a certain data condition, the constraint
restricts the control-Ô¨Çow i.e., restricting execution of activity b.
in sect. 2 we discussed an example of a rule from the Ô¨Årst category. in the next section we
will discuss examples of both categories in more detail while elaborating on the differences
in corresponding checking technique employed.
rule description example
four-eye principle: a security principle that re-
quires segregating the execution of critical tasks
and associated privileges among multiple users.the person requesting purchase of goods should
not be the one who approves it.
a purchase order approval requires two signatures.
authorization (access control): a security princi-
ple that limits execution of activities or accessing
a data object to authorized individuals.only a Ô¨Ånancial manager can approve a loan.
two (three)-way match :an accounting rule that
requires the value of two different data objects to
match.all vendor invoices that are based on purchase
orders should be matched with purchase order
lines (two-way matching).
activitytmay/must (not) be executed if attribute
xhas the value v; (xmay be local to the activity
tor may appear anywhere in a trace).an account must not be opened in case risk is high.
during ventilation, patient must receive ‚Äúpropofol‚Äù
with dosage of (5mg).
activityt1may/must (not) be executed if attribute
xhas valuevat activityt2. (attributexis local
to activityt2)in case the respondent bank rating review is re-
jected during evaluation, an account must never be
opened.
activitytmust not change value of attribute x.bank account data must not change during pay-
ment.
value of attribute xmust not change after activity
tis executed.all invoices must be archived and no changes must
be made to the document.
activityt1may occur only if the value of attribute
xis increased/decreased by activity t2withd.if gastric tube feeding cannot be increased by (1,20
kcal/ml), then use ‚Äòerythromycin‚Äô.
if attributexhas valuevthen resource rmust
execute the activity.loans with value more than 1000000 euro must
only be approved by cfo.
if activityt1is done by agent a, activityt2must
be done by the same agent.a customer complain must be handseled with the
same agent registered the customer request.
table 1. collection of data-aware and resource-aware compliance rules.4 data-aware and resource-aware compliance checking
this section presents our main contribution, an approach for checking data and resource-
aware compliance on past executions recorded in event logs. we Ô¨Årst introduce a motivating
example which we use throughout this section to explain our techniques.
4.1 motivating example
a process model, expressed in bpmn notation, describing a simpliÔ¨Åed procedure for
procurement in a company is shown in fig. 6. the process starts with activity receive request
for purchasing goods . afterwards the sub-process for choosing supplier is activated. every
purchase requisition carries a risk which is calculated based on a set of factors such as history
of supplier‚Äôs business, legal background, and etc. consequently the risk is classiÔ¨Åed as high
orlow. if risk is high and not acceptable, the procurement expert investigates about risk
reduction measures . these measures may lead to a lowrisk or the risk may stay still high.
the procurement expert must decide based on the new information to continue with risk
reduction measures oraccept the risk . if risk is accepted purchase order can be prepared .
for every purchase order twoapprovals are required by two different agents. an approved
purchase order is sent to supplier . the process continues with receiving invoice . after
receiving goods , thepayment is done and the process terminates.
receive request 
for purchasing 
goods 
(rec-req)choose 
supplier 
(cho)evaluate 
purchase 
requisition 
(eva)risk reduction 
measures 
(red)
prepare 
purchase order 
(pre)purchase order 
approval (ii) 
(app-ii)
purchase order 
approval (i) 
(app-i)send purchase 
order to supplier 
(sen)
receive 
invoice 
(rec-inv)receive 
products
(rec-pro)payment
(pay)n-ok
ok
fig. 6. a process model for procurementto prevent fraud, the
company has deÔ¨Åned vari-
ous compliance rules. the
employees may deviate from
the modelled process as long
as they do not violate the
compliance rules. here, we
present just two of the rules
that must be followed:
‚Äìrule 1 (four-eye principle): purchase order approval(i) andpurchase order approval(ii)
must be executed by two different agents.
‚Äìrule 2 : ifriskof procurement from a supplier is calculated high,risk reduction measures
must be executed at least once.
during auditing, the company checks if the procurement process were executed in
compliance with relevant compliance rules including above mentioned ones. therefore,
executions of this process are recorded in terms of an event log and are used for compliance
checking. these rules cannot be checked by solely considering the execution order of events;
instead, speciÔ¨Åc event attribute values need to be taken into account.
name rec-req cho eva pre app-i app-ii sen rec-inv rec-pro pay
resource john luis luis sara arash clara luis luis john luis
role clerk expert expert clerk director manager expert expert clerk expert
inventory
level500 pce. 300 pce.
risk low high high high high high high high high
time 20-jan-14 21-jan-14 22-jan-14 24-jan-14 26-jan-14 26-jan-14 28-jan-14 28-jan-14 29-jan-14 29-jan-14l
fig. 7. tracerecorded an instance of the procurement process execution
the synthetic event log lcontains the executions of the procurement process for january
of 2014. the trace shown in fig. 7 is taken from the event log l.4.2 methodology
as discussed in 3, compliance rules fall into two main categories. the techniques we employ
to check compliance of rules varies per category. figure 8 depicts the approach we use for
checking the compliance rules of the Ô¨Årst category. for these rules, we need to check if a
restricted activity was executed with a correct data or resource. hence, the restriction on data
attributes must be checked and the underlying control-Ô¨Çow is assumed to be correct. for this,
as is shown in fig 8, we prepare the log and enrich it with some necessary information in
steps 1, and2. to check every compliance rule, we need to capture the scope of the rule i.e.,
we identify when a compliance rule is triggered. the scope of the rule is deÔ¨Åned based on the
occurrence of an activity or sequence of activities creating a control-Ô¨Çow alignment. in step
3, we specify the scope of the compliance rule in form of a classical petri net and create a
control-Ô¨Çow alignment in step 4 . we generate a log using the alignment result and enrich
it instep 5 with diagnostics we obtained in the previous step. later in step 6 , we create a
data-aware alignment using a data-aware petri net to check if the data condition speciÔ¨Åed in
the rule, holds.
event 
log
petri-net 
specificationalignment
event log 
preparation 
(steps 1,2)
data-aware 
petri-net 
specification
data-flow 
alignment
adata or 
resource 
restriction
 control-flow 
alignment 
(step 4)
log enrichment 
(step 5)
projected log 
enriched with 
diagnostics
specify scope of the 
compliance rule 
(step 3)
data-flow 
alignment 
(step 6)
data or 
resource 
restriction
fig. 8. compliance checking approach for compliance rules restricting a data attribute
the compliance rules of the second category restrict the execution of activities when a
certain data or resource condition holds. these rules assume the data-Ô¨Çow is correct and
the control-Ô¨Çow i.e., the execution of activities under a certain data condition, must be
checked. for this, we create a data-aware alignment to identify all the situations where a
compliance rule must hold. then creating a control-Ô¨Çow alignment we can check if activities
were executed correctly under the speciÔ¨Åed data condition. fig. 9 describes the approach
we employ for checking compliance rules of the second category. in this approach after
preparation of the event log in steps 1, 2, and3, instep 4 we apply data-aware alignment
technique to identify all the situations where the compliance rule must hold. in step 5 we
enrich the log with diagnostics obtained in data-aware alignment. we deÔ¨Åne the scope of the
compliance rule in step 6 and apply control-Ô¨Çow alignment technique in step 7 to check if
event 
log
petri-net 
specificationdata-aware 
alignment
event log preparation 
(steps 1,2,3)
data-aware 
petri-net 
specification
alignment
a
data or resource 
restriction
data-flow 
alignment 
(step 4)
log enrichment 
(step 5)
projected log 
enriched with 
diagnosticsspecify scope of the 
compliance rule 
(step 6)
control-flow 
alignment 
(step7)
fig. 9. compliance checking approach for compliance rules restricting activities when a certain data or
resource condition holdsactivities were executed correctly under the speciÔ¨Åed data condition. in the following we
will elaborate on both approaches by checking the sample compliance rules deÔ¨Åned for the
motivating example.
4.3 compliance checking of rules restricting data attributes
from the compliance rules listed for the motivating example in sect. 4.1, rule 1 falls in the
Ô¨Årst category of compliance rules. for checking such rules we employ the approach shown
in fig. 8. in the following we will explain the technique step by step for this example.
compliance rule 1 (four-eye principle): purchase order approval(i) and purchase order
approval(ii) must be executed by two different agents.
step 1. in this step we abstract the log from event attributes and their values which are not
relevant for the rule. this rule restricts the data attribute resource of activities with ( name:
app-i ), and ( name: app-ii ). therefore we can focus on event attributes name , and resource
and discard other event attributes of . consequently we obtain 11shown in fig. 10.
name rec-req cho eva pre app-i app-ii sen rec-inv rec-pro pay
resource john luis luis sara arash clara luis luis john luisl
fig. 10. trace11obtained from step 1
step 2. in the second step we abstract 11further from information that is not relevant for
checking rule 1 . therefore we keep the value of data attribute name when (name: app-i) ,
and(name: app-ii) and replace all other values of attribute name with a generic value 
.
rule 1 restricts the value of data attribute resource at activities with (name: app-i) and(name:
app-ii) ; hence we keep the value of resource at these activities and discard its value at any
other event. as a result of this step we obtain the trace 12shown in fig. 11.
nameœâœâœâœâapp-i app-iiœâœâœâœâ
resource arash claral
fig. 11. trace12obtained from step 2step 3. the four-eye rule belongs to the
Ô¨Årst category (fig. 8). hence, the control-
Ô¨Çow is assumed to be correct. for this
rule activities with (name: app-i) ,(name:
app-ii) may be executed in any order.
considering this information, in this step
we decide where the compliance rule is triggered. as soon as any of the events with (name:
app-i) or(name: app-ii) occurs, the rule is activated.
initialistfinal
startendapp-i
œâ app-ii
icmp
œâ œâ 
fig. 12. petri net specifying the scope
ofrule 1some compliance rules may hold several times in
a trace. to elaborate more on this, consider the compli-
ance rule stating : ‚Äúevery time activity aoccurs it must
be followed by activity b. ‚Äù. ifaoccurs multiple times
in a trace, we will have different instances of this rule
in a trace and every occurrence of amust be followed
by activity b. when deciding on the scope of a compli-
ance rule, we need to consider if multiple instances of
a compliance rule is allowed or not.
after deÔ¨Åning the rule scope, we design a petri
net which describes the rule. for this, we can apply the compliance elicitation technique
available in [ 15]. the petri net describing rule 1 is shown in fig. 12. this net starts by Ô¨Åring
transitionstart and a token in place final represents a completed trace. the part between
transitionsistandicmprepresents an instance of the compliance rule. please note thatseveral instances of the compliance rule are allowed and captured in the structure of the net.
the rule becomes active when istÔ¨Åres and it ends when icmpÔ¨Åres. after the instantiation of
every compliance rule, activities with (name: app-i) , and (name: app-ii) may occur in any
order. the
transition represents any event in the trace with name:
. the hollow transitions
(start;ist;icmp;andend) are invisible.
name œâœâœâœâ app-i app-ii œâœâœâœâ
resource arash clara
s name startœâœâœâœâi-st app-i app-ii i-cmpœâœâœâœâendl >> >> >> >>
fig. 13. alignmentc
1obtained from step 4.step 4 : having trace 12and the
petri net, we apply our control-
Ô¨Çow alignment technique to cap-
ture the scope where the compli-
ance rule must hold. this align-
ment indicates deviations of 12
from the petri net and diagnostics about the deviations. for control-Ô¨Çow compliance checking
we ignore attributes other than name and use this attribute for mapping events and activities
in aligning trace 12to the petri net. c
1in fig. 13 shows the resulting alignment.
name startœâœâœâœâi-st app-i app-ii i-cmpœâœâœâœâend
resource arash claral
fig. 14. trace15enriched with additional information ob-
tained from control-Ô¨Çow alignment.the alignment shows that
trace12can be replayed with-
out any real violation on the
petri net. please note that the
missing events () indicated
in the top row of the align-
ment are related to invisible transitions in the petri net and are not con-
sidered as real violations i.e., costs of deviation for these events are 0.
initialistfinal
startend app-iœâ
app-iiicmp
{w: r=undef.}{w: r=e.resource}
{w: r=e.resource}
[r=undef. || r‚Äô‚â† e.resource]resource[r=undef. || r‚Äô‚â† e.resource]œâ
œâ
fig. 15. data-aware petri net of rule 1step 5 : in this step we enrich trace
12with the additional information
we obtained from the control-Ô¨Çow
alignment as follows. we insert ar-
tiÔ¨Åcial events with attribute name
and values ( start;ist;icmp;end)
in the trace where the alignment iden-
tiÔ¨Åed missing events ( ). as a result
we obtain trace 15shown in fig. 14.
this additional information marks
the scope of the compliance rule in
the trace and it shows that rule 1 was triggered once in the trace.
step 6 : in this step we apply the data-aware alignment technique on the enriched log ( 15)
obtained from step 5 and the extended petri net with data annotations. figure 15 shows the
data-aware petri-net describing the restriction on data attribute resource w.r.t. rule 1 .
the data attribute resource is shown as the yellow eclipse in fig. 15. the dotted line
which associates attribute resource to transitions app-i ,app-ii indicates that the value of
attribute resource can get updated by occurrence of any of these activities. as explained
in sect. 2, we deÔ¨Åne a variable rthat takes the value of attribute resource whenever this
attribute is updated by any of the transitions app-i orapp-ii . this is shown by the annotation
fw:r=e:resourcegon these two transitions. please note that we annotate the transition
istwithfw:r=undef:gto express that as soon as the compliance rule is activated the
value of variable ris set to undeÔ¨Åned . the restriction on data attribute resource which is
speciÔ¨Åed in rule 1 is expressed by the guard [r=undef:jjr06=e:resource ]annotated at
transition app-i andapp-ii . this guard speciÔ¨Åes that the variable ris allowed to get a new
value if its previous value is undeÔ¨Åned [r=undef:]or in case it has already a value, the new
value must be different with current value [r06=e:resource:]; implying activities app-i andapp-ii must be executed with different resources . the data-aware alignment of 15against
the data-aware petri net is shown in fig. 16. the alignment illustrates that both guards are
evaluated to correct. hence the trace is compliant with rule 1 .
4.4 compliance checking of rules restricting activities when a certain data
condition holds
name startœâœâœâœâi-st app-i app-ii i-cmpœâœâœâœâend
resource arash clara
name startœâœâœâœâi-st app-i app-ii i-cmpœâœâœâœâend
resource arash claral
s
fig. 16. data-aware alignment d
1obtained from step 6.the compliance rule 2 listed for the
motivating example in sect. 4.1 falls
in the second category of compliance
rules. for checking these rules we
employ the approach shown in fig. 9.
next we will explain this technique
step by step for rule 2 .
compliance rule 2: if risk of procurement from a supplier is calculated high, risk reduction
measures must be executed at least once.
name rec-req cho eva pre app-i app-ii sen rec-inv rec-pro pay
risk low high high high high high high high highl
fig. 17. trace21obtained from step 1step 1. similar to the
log preparation pro-
cedure we followed
in the previous ap-
proach, we Ô¨Årst ab-
stract the log from
event attributes and their values which are not relevant for the rule. therefore we remove
other attributes apart from name andriskfrom the trace and we obtain 21in fig. 17.
œ≠22
œ≠23
nameœâœâœâœâœâœâœâœâœâœâ
risk low high high high high high high high high
data
conditionœârisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writel
fig. 18. traces22, and23obtained respectively from steps 1, and 2
step 2. we keep the value of event attribute name forrisk reduction measure and substitute
all other values of attribute name with the generic value 
. in addition we keep the attribute
riskwith all its values. trace 22shown in fig. 18 is the result of step 2. as is shown in 22,
activity risk reduction measure was never executed.
step 3. inrule 2 , the restriction is on the number of occurrences of activity risk reduction
measures when data attribute riskhas value high, hence the rule is triggered as soon as
attribute riskgets value high. not all the events have access to attribute riski.e., not all
events can update the value of attribute risk. therefore, we need to capture the existence
and changes in the value of risk. to this end we introduce a new event attribute named data
condition which gets the value risk write whenever an event records a value for its attribute
risk. the data condition gets the value 
ifriskdoesn‚Äôt have any value in an event. trace
23shown in fig. 18 is obtained from step 3.
step 4. as discussed in sect. 2, we express data and resource-aware compliance rules using
a data-aware petri net. the corresponding alignments of a data-aware petri net to a log will
then allow to check these rules. for the alignment we use the abstracted and enriched log 23
obtained from step 3 .the data-aware petri net shown in fig. 19 has two transitions 
andrisk write where we
map them respectively to the values of event attribute data condition in the log. therefore,
events with ( data condition:risk write ) are mapped to transition risk write in the data aware
petri net and events with ( data condition: 
) are mapped to the transition labelled 
. the
other event attributes name andriskare mapped respectively to data attributes name andrisk.
initial
risk write œâ 
endfinalname
risk[e.risk=high]
fig. 19. the data-aware petri net
ofrule 2we would like to capture all situations where the data
condition of rule 2 holds. that is, we want to capture the
events where riskishigh and check if such an event is
followed at least once by the activity risk reduction measure .
hence the transition risk write in the data-aware petri net
(fig. 19) is guarded with [e.risk = high] .
we check the conformance of the trace 23against
the data-aware petri net of rule 2 applying data-aware
alignment. the data-aware alignment technique checks if
events with data condition:risk write were executed with
the admissible value ( high) for its riskattribute. as a result the data-aware conformance
checking technique will return a data-aware alignment d
2as is shown in fig. 20. the columns
colored in red indicate the events with (data condition:risk write) which didn‚Äôt have the
value high for attribute risk(yellow eclipses in the data-aware petri net).
nameœâœâœâœâœâœâœâœâœâœâ
risk low high high high high high high high high
data
conditionœârisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
write
nameœâœâœâœâœâœâœâœâœâœâ
risk high high high high high high high high high
data
conditionœârisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writel
s
fig. 20. data alignment d
2of trace23for compliance rule 2
step 5. in this step we enrich trace 23with diagnostics we obtained from the data-aware
alignment in the previous step as follows:
i)we insert an event attribute condition holds to all events in the trace. this new event
attribute gets no value ( ) if no value is recorded for the attribute riskof the events. whenever
a deviation is indicated in the alignment (columns colored in red), condition holds gets value
false, else it gets the value true. note that value false for attribute condition holds indicates
all the situations in the trace where riskwas not high.
ii)we insert event attribute admissible risk to the violating events. this new attribute
shows the admissible value; for our example ( admissible risk:high) .
iii)we insert event attribute combined name&condition to all events. the value of this
attribute for every event is the combination of the value for the corresponding attributes
name andcondition holds of that event. this event attribute is added to enable us in the next
step to check if an activity was executed with the right data or resource.
as a result of above mentioned modiÔ¨Åcations, we obtain trace 24(shown in fig. 21)
enriched with diagnostics and added information.
step 6. in this step we deÔ¨Åne the scope of the compliance rule. rule 2 is triggered whenever
riskis calculated high and it is satisÔ¨Åed as soon as activity risk reduction measure is executed.
please note that afterwards the riskmay stay high or risk reduction measure may occur
arbitrary number of times. if we interpret this rule in context of the trace 24, we can rephrasename œâœâœâœâœâœâœâœâœâœâ
risk low high high high high high high high high
data
conditionœârisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
write
condition
holds>> false true true true true true true true true 
admissible
risk>> high high high high high high high high high
combined
name&
conditionœâ->>œâ-falseœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-truelfig. 21. trace24enriched with diagnostics obtained from data-aware alignment
the rule to: ‚Äúoccurrence of an event with (combined name&condition: 
 true)must be
followed at least once by an event having value risk reduction measures-true orrisk reduction
measures-false for event attribute combined name&condition . in other words, an event with

 true indicates that Ô¨Årst activity which calculated (risk:high) is executed. in addition any
of the events with risk reduction measures-true orrisk reduction measures-false indicates
that activity risk reduction measures was executed.
when deÔ¨Åning the scope of rule 2 , we need to consider whether multiple instances of the
rule are allowed. in case of rule 2 , only fulÔ¨Ålling one instance of the rule is enough and after
fulÔ¨Ålling it once, it won‚Äôt be triggered again although riskmay still be high. after deciding
about the scope of the rule we can design a petri net which describes the rule. the result is
shown in fig. 22.
œâ-true
red-falseinitialicmp istœâ-
false 
final
startend
end
œâ-
truered-trueœâ-
true
œâ-
false
œâ->> œâ->>œâ->>red-
truered-
true
fig. 22. petri net specifying compliance rule 2step 7. having trace 24and the
petri net speciÔ¨Åcation of in fig. 22,
we apply control-Ô¨Çow conformance
checking to get an alignment be-
tween24and the speciÔ¨Åcation.
this alignment indicates deviations
and diagnostics about the deviations.
for control-Ô¨Çow alignment we ig-
nore attributes other than ‚Äòcombined
name&condition‚Äô and align the trace 24to the net shown in fig. 22. c
2in fig. 23 shows the
alignment obtained.
name œâœâ œâœâœâœâœâœâœâœâ
risk low high high high high high high high high
data
conditionœârisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
writerisk
write
condition
holds>> false true true true true true true true true 
admissible
risk>> high high high high high high high high high
combined
name&
conditionœâ->>œâ-false œâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-true
scombined
name&
conditionstartœâ->>œâ-falsei-stœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-trueœâ-truered-true i-cmp endl >> >> >> >> >>
fig. 23. data-aware alignment c
2obtained from step 7.the alignment indicates a deviation in trace 24implying that riskhas been high, hence
activity risk reduction measure should have happened but it didn‚Äôt.
5 implementation
the presented technique is supported by two novel plugins in the complianceframework
package of prom 6.31. the data and resource compliance checking-rules restricting
activities plug-in checks the compliance of event logs against rules of the Ô¨Årst category and
takes an event log and a data-aware petri net as input. the data and resource compliance
checking-rules restricting attributes checks the compliance of event logs against rules of
the second category and takes an event log, a data-aware petri net, and a classical petri net as
input. both return diagnostics about deviations in the from of an alignment. the resulting
alignments provide diagnostics by showing data and resource violations and control-Ô¨Çow
violations projected over the original log.
6 experimental results
we applied our approach and toolset in two case studies: one for checking compliance of a
personal loan process within a global Ô¨Ånancial organization and one for analyzing the process
of patient treatment in icu department of a dutch hospital against a medical guideline.
case study 1 : the event log related to the Ô¨Årst case study is taken from bpi challenge
of 20122and it has 13.087 traces. a compliance rule restricting this process states: ‚Äúloan
applications with requesting amount less that 5000 and more than 50000 must not be
approved‚Äù. this compliance rule is of second type of data-aware compliance rules. we found
117 number of deviations from the compliance rule out of all 13.087 traces executed, i.e.,
117 approved application requested an amount for more than 50000 or less than 5000.
case study 2 : in this case study we investigated the compliance of an event log taken
from icu department of a dutch hospital with a medical guideline restricting tube feeding
nutrition of patients. the event log has 1207 traces; each trace recorded the treatment
that a patient received in icu department. the compliance requirement states: ‚Äú if gastric
tube feeding cannot be increased then use domperidone ormetoclopramide . the starting
dosage is usually (1250ml)and it is recommended that the increase follows the pattern
(1250ml;12100ml;12120ml)‚Äù.
the guideline is not precise here, hence we check two different data-aware rules: i)the
nutrition must increase, else domperidone ormetoclopramide must be administered to the
patient. ii)the increase must follow the pattern (1250ml;12100ml;12120ml).
we Ô¨Årst checked if the nutrition has been increased for respective patients and if not,
did they receive either domperidone ormetoclopramide . we observed that from 1207
patients treated in icu, 209 received tube feeding nutrition. in addition we found that
metoclopramide has not been administered for these patient; only one patient has received
this medicine and it has been independent from tube feeding nutrition. for 72 patients, the
tube feeding nutrition has increased without any problem. 56 patients received domperidone
when nutrition was not increased.
we observed in total 81 violating traces. we identiÔ¨Åed several patterns for these violations.
in some of violating traces, we observed that although nutrition has increased, patients
1available from www.processmining.org
2this event log is publicly available at:
dx.doi:10.4121/uuid:3926db30-f712-4394-aebc-75976070e91freceived domperidone . it could be that that domperidone was administered to these patients
independent from nutrition and for other purposes.
another group of violations are related to patients that did not receive domperidone
although nutrition was not increased for them. we checked these traces further and found that
this violation occurs in two situations. one group contained real violations because patients
never received domperidone despite the nutrition was not increased. however for another
group of patients we observed several iterations of tube feeding nutrition with an increase
inside every iteration. for example a patient has received nutrition following two times the
pattern (1250ml;12100ml;12120ml). that is we see the increase in every occurrence
of the pattern, yet the second occurrence of the pattern starts again from (1250ml).
we also investigated if the recommended pattern of increase has been followed or not. we
found out that only for less than 20% of patients the recommended pattern of the guideline
is followed. from the remaining we identiÔ¨Åed 3 groups of patients. one group of course
were the 56 patients that the nutrition was not increased for them. for the second group of
patients, the nutrition was increased with the pattern (1250ml;12100ml;12140ml).
the third group mostly followed the pattern (500ml;1000ml;1500ml;1700ml). these
patients received domperidone once in every 24 hours, unlike the other groups that received
domperidone every two hours a day.
applying the technique presented in this paper, we were able to check compliance
of all the traces in the event logs rather than being limited to sample based compliance
checking. the technique works on large event logs because we can focus on events relevant
to a speciÔ¨Åc compliance rule and abstract from all other events. our technique identiÔ¨Åed
and located the deviations by visualizing for each trace the difference between admissible
and observed behavior in the alignment. the extent of the deviation is reported in two ways:
(1) the alignment visualizes observed and expected values of deviating events. (2) we
compute statically information about the number of deviations per case, in total, etc. a
domain specialists can use this information to assess their severity and analyze root-causes.
7 related work
existing work in data and resource compliance checking mainly focuses on design time
veriÔ¨Åcation. in [ 6], authors incorporate data in speciÔ¨Åcation of compliance rules. these rules
are expressed using a query language which is an extended version of bpmn-q and they are
formalized by mapping into pltl. they can visualize violations by indicating execution
paths in a process model causing them.
in [17] the control-Ô¨Çow is modeled and object life-cycles model other perspectives. later
object state change becomes explicit in the process model and then the process model is used
to generate life-cycles for each object type used in the process. the consistency between
business process models and life-cycles of business objects is checked. apart from the fact
that this approach also focuses on veriÔ¨Åcation of models, it is not discussed how deviation
points represented and if further diagnostics are provided.
other approaches such as [ 9,19,21] enforce compliance of business processes through
the use of compliance patterns. these patterns include some of the data and resource-aware
compliance requirements such as four-eye principle. however, speciÔ¨Åc checking technique
are not discussed. further on, the work in [ 10] addresses the veriÔ¨Åcation of process models
for data-aware compliance requirements. the authors do not apply a particular modeling
language for specifying compliance rules, but introduce a general notion for data-aware
conditions. for checking data-aware requirements, abstraction strategies are introduced
to reduce complexity of data-aware compliance checking and deal with state explosionissues. this is achieved by abstracting from concrete state of data objects. the approach
automatically derives an abstract process model and an abstract compliance rule.
process mining techniques [ 1] offer a means to more rigorously check compliance and
ascertain the validity of information about an organization‚Äôs core processes. the challenge
is to compare the prescribed behavior (e.g., a process model or set of rules) to observed
behavior (e.g., audit trails, workÔ¨Çow logs, transaction logs, message logs, and databases).
various techniques have been proposed for checking control-Ô¨Çow compliance rules based on
event data including ltl-based checking [3] . in [13] both ltl-based and sciff-based
(i.e., abductive logic programming) approaches are used to check compliance with respect to
a declarative process model and an event log. dozens of approaches have been proposed to
check conformance given a petri-net and an event log [2,16].
the classical data-aware conformance checking [11] that we have applied in our ap-
proach, allows for aligning event logs and process models for multi-perspective conformance
checking but it has some limitations; as we can only check the compliance rules of the Ô¨Årst
category we discussed earlier. in addition if a deviation is observed for an activity that is
restricted with several data attributes at the same time, the classical data-aware conformance
checking can only indicate the deviation but not the speciÔ¨Åc data attribute(s) causing the
deviation; resulting in less precise diagnostics. moreover using classical data-aware confor-
mance checking, we cannot focus only on speciÔ¨Åc rules and abstracting from other activities
that are not restricted by respective compliance rule. that is we need to provide a data-aware
petri net that captures the behavior of the whole process; consequently make the checking
less Ô¨Çexible. we have covered above mentioned limitations in our approach by extending the
classical data-aware conformance checking.
8 conclusion and future work
in this paper, we provided an approach for data and resource-aware compliance checking of
behavior recorded in execution logs. we show a collection of different compliance constraints
restricting process data and resources. in addition, we provide two generic techniques for
checking these rules based on alignments. our technique separates control-Ô¨Çow, data and
resource compliance checking to the possible extent, and provides integrated diagnostic
information about both control-Ô¨Çow violations, and data and resource related compliance
violations. in particular, our technique is capable of showing diagnostic information about
violations of a compliance rule in a process instance. we have shown this technique to be
feasible for compliance rules on data dependencies between two or three data attributes.
more complex rules are possible but require additional pre-processing and data-aware
alignment steps. a more scalable technique is subject to further research.
we provide an implementation of our techniques in the compliancefarmework package
of prom. the software has been tested in synthetic logs and two case studies involving
real-life logs from a Ô¨Ånancial institute and icu department of a hospital. the results are
encouraging: we were able to uncover various violations and no performance issues were
encountered. future research aims at making the approach more user-friendly. while the
compliance checking itself is fully automatic, the user still has to create formal compliance
rules and interpret the results. formal data-aware compliance rules could be elicited in
questionnaire-based approach similar to [ 15]. further, a higher-level compliance language
and a dashboard for integrating results of control-Ô¨Çow, temporal, and data and resource-aware
compliance checking to provide a multi-perspective view on data are required.references
1.van der aalst, w.m.p.: process mining - discovery, conformance and enhancement of business
processes. springer (2011)
2.van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on process models
for conformance checking and performance analysis. wiley interdisc. rew.: data mining and
knowledge discovery 2(2), 182‚Äì192 (2012)
3. van der aalst, w.m.p., de beer, h., van dongen, b.f.: process mining and veriÔ¨Åcation of
properties: an approach based on temporal logic. in: on the move to meaningful internet
systems 2005: coopis 2005. lncs, vol. 3760, pp. 130‚Äì147. springer-verlag, berlin (2005)
4.accorsi, r., stocker, t.: on the exploitation of process mining for security audits: the conformance
checking case. in: sac. pp. 1709‚Äì1716. acm (2012)
5.adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: conformance checking using cost-based
Ô¨Åtness analysis. in: edoc. pp. 55‚Äì64. ieee computer society (2011)
6.awad, a., weidlich, m., weske, m.: speciÔ¨Åcation, veriÔ¨Åcation and explanation of violation for
data aware compliance rules. in: icsoc/sw. lncs, vol. 5900, pp. 500‚Äì515 (2009)
7. botha, r.a., eloff, j.h.p.: separation of duties for access control enforcement in workÔ¨Çow
environments. ibm systems journal 40(3), 666‚Äì682 (2001)
8.elgammal, a., t ¬®uretken, o., van den heuvel, w.j., papazoglou, m.p.: on the formal speciÔ¨Åcation
of regulatory compliance: a comparative analysis. in: icsoc workshops. lncs, vol. 6568, pp.
27‚Äì38 (2010)
9. elgammal, a., t ¬®uretken, o., van den heuvel, w.j., papazoglou, m.p.: root-cause analysis of
design-time compliance violations on the basis of property patterns. in: icsoc. lncs, vol. 6470,
pp. 17‚Äì31 (2010)
10. knuplesch, d., ly, l.t., rinderle-ma, s., pfeifer, h., dadam, p.: on enabling data-aware
compliance checking of business process models. in: er. lncs, vol. 6412, pp. 332‚Äì346. springer
(2010)
11.de leoni, m., van der aalst, w.m.p.: aligning event logs and process models for multi-perspective
conformance checking: an approach based on integer linear programming. in: bpm. lncs, vol.
8094, pp. 113‚Äì129. springer (2013)
12.de leoni, m., maggi, f.m., van der aalst, w.m.p.: aligning event logs and declarative process
models for conformance checking. in: bpm. pp. 82‚Äì97 (2012)
13. montali, m., pesic, m., van der aalst, w.m.p., chesani, f., mello, p., storari, s.: declarative
speciÔ¨Åcation and veriÔ¨Åcation of service choreographiess. tweb 4(1) (2010)
14.ramezani, e., fahland, d., van der aalst, w.m.p.: where did i misbehave? diagnostic information
in compliance checking. in: bpm. pp. 262‚Äì278 (2012)
15. ramezani, e., fahland, d., van der aalst, w.m.p.: supporting domain experts to select and
conÔ¨Ågure precise compliance rules. in: bpm workshops. lecture notes in business information
processing, vol. 171, pp. 498‚Äì512. springer (2013)
16.rozinat, a., van der aalst, w.m.p.: conformance checking of processes based on monitoring real
behavior. inf. syst. 33(1), 64‚Äì95 (2008)
17.ryndina, k., k ¬®uster, j.m., gall, h.: consistency of business process models and object life cycles.
in: models workshops. lncs, vol. 4364, pp. 80‚Äì90. springer (2006)
18.samarati, p., di vimercati, s.d.c.: access control: policies, models, and mechanisms. in: fosad.
lncs, vol. 2171, pp. 137‚Äì196. springer (2000)
19. schumm, d., t ¬®uretken, o., kokash, n., elgammal, a., leymann, f., van den heuvel, w.j.:
business process compliance through reusable units of compliant processes. in: icwe workshops.
lncs, vol. 6385, pp. 325‚Äì337. springer (2010)
20.taghiabadi, e.r., fahland, d., van dongen, b.f., van der aalst, w.m.p.: diagnostic information
for compliance checking of temporal compliance requirements. in: caise. lncs, vol. 7908, pp.
304‚Äì320. springer (2013)
21.t¬®uretken, o., elgammal, a., van den heuvel, w.j., papazoglou, m.p.: enforcing compliance on
business processes through the use of patterns. in: ecis (2011)
22.di vimercati, s.d.c., paraboschi, s., samarati, p.: access control: principles and solutions. softw.,
pract. exper. 33(5), 397‚Äì421 (2003)