passages in graphs
w.m.p. van der aalst
department of mathematics and computer science, technische universiteit eindhoven, the netherlands.
bpm discipline, queensland university of technology, gpo box 2434, brisbane qld 4001, australia.
www: www.vdaalst.com , e-mail: w.m.p.v.d.aalst@tue.nl
abstract
directed graphs can be partitioned in so-called passages . a passage pis a set of edges such that any
two edges sharing the same initial vertex or sharing the same terminal vertex are both inside por are
both outside of p. passages were rst identied in the context of process mining where they are used to
successfully decompose process discovery and conformance checking problems. in this article, we examine the
properties of passages. we will show that passages are closed under set operators such as union, intersection
and dierence. moreover, any passage is composed of so-called minimal passages. these properties can be
exploited when decomposing graph-based analysis and computation problems.
keywords: directed graphs, process modeling, decomposition
1. introduction
recently, the notion of passages was introduced in the context of process mining [2]. there it was
used to decompose process discovery and conformance checking problems [1]. any directed graph can be
partitioned into a collection of non-overlapping passages. analysis can be done per passage and the results
can be combined easily, e.g., for conformance checking a process model can be decomposed into process
fragments using passages and traces in the event log t the overall model if and only if they t all process
fragments.
as shown in this article, passages have various elegant problems. although the notion of passages is very
simple, we could not nd this graph notion in existing literature on (directed) graphs [3, 6]. classical graph
partitioning approaches [7, 8] decompose the vertices of a graph rather than the edges, i.e., the goal there
is to decompose the graph in smaller components of similar size that have few connecting edges. some of
these notions have been extended to vertex-cut graph partitioning [5, 9]. however, these existing notions
are not applicable in our problem setting where components need to behave synchronously and splits and
joins cannot be partitioned. we use passages to decompose a graph into sets of edges such that all edges
sharing an initial vertex or terminal vertex are in the same set . to the best of our knowledge, the notion
of passages has not been studied before. however, we believe that this notion can be applied in various
domains (other than process mining). therefore, we elaborate on the foundational properties of passages.
the remainder is organized as follows. in section 2 we dene the notion of passages, provide alternative
characterizations, and discuss elementary properties. section 3 shows that any graph can be partitioned
into passages and that any passage is composed of so-called minimal passages. section 4 introduces passage
graphs visualizing the relations between passages. graphs may be partitioned in dierent ways. therefore,
section 5 discusses the quality of passage partitionings. section 6 concludes this article.
2. dening passages
passages are dened on directed graphs, simply referred to as graphs.
denition 1 (graph). a (directed) graph is a pair g= (v;e)composed of a set of vertices vand a set
of edgesevv.
december 2012arxiv:1304.1000v1  [cs.dm]  3 apr 2013ab
c
de
fg
hifigure 1: graph g1with 9 vertices, 12 edges, and 32 passages.
a passage is a set of edges such that any two edges sharing the same initial vertex (tail) or sharing the
same terminal vertex (head) are both inside or both outside of the passage. for example, f(a;b);(a;c)gis
a passage in graph g1shown in figure 1 because there are no other edges having aas initial vertex or bor
cas terminal vertex.
denition 2 (passage). letg= (v;e)be a graph. peis a passage if for any (x;y)2pand
f(x;y0);(x0;y)ge:f(x;y0);(x0;y)gp. pas (g)is the set of all passages of g.
figure 2 shows 7 of the 32 passages of graph g1shown in figure 1. p2=f(b;e);(b;f);(c;f);(c;d);(d;d);(d;f)g
is a passage as there are no other edges having b,c, ordas initial vertex or d,e, orfas terminal vertex.
figure 2 does not show the two trivial passages: ;(no edges) and e(all edges).
b
c
de
fab
c
e gf h
g
hip1
p3p2p4
p5
e
fg
hi
p6e
fg
hab
cp7
figure 2: seven example passages of graph g1shown in figure 1.
lemma 1 (trivial passages). letg= (v;e)be a graph. the empty passage;and the full passage e
are trivial passages of g. formally:f;;egpas(g)for anyg.
some of the passages in figure 2 are overlapping: p6=p3[p4[p5andp7=p1[p3[p4. to combine
passages into new passages and to reason about the properties of passages we dene the following notations.
denition 3 (passage operators). letg= (v;e)be a graph with p;p 1;p2e.p1[p2,p1\p2,
p1np2,p1=p2,p16=p2,p1p2, andp1p2are dened as usual. 1(p) =fxj(x;y)2pgare
the initial vertices of p,2(p) =fyj(x;y)2pgare the terminal vertices of p,p1#p2if and only if
p1\p2=;,p1.p2if and only if 2(p1)\1(p2)6=;.
2note thatdis both an initial and terminal vertex of p2in figure 2: 1(p2) =fb;c;dgand2(p2) =fd;e;fg.
p5#p7becausep5\p7=;.p4.p5because2(p4)\1(p5) =fhg6=;.
the union, intersection and dierence of passages yield passages. for example, p7=p1[p3[p4is a
passage composed of three smaller passages. p5=p6np7andp6\p7=p3[p4are passages.
lemma 2 (passages are closed under [,\andn).letg= (v;e)be a graph. if p1;p22pas(g)
are two passages, then p1[p2,p1\p2, andp1np2are also passages.
proof. letp1;p22pas(g), (x;y)2p1[p2, andf(x;y0);(x0;y)ge. we need to show that f(x;y0);(x0;y)g
p1[p2. if (x;y)2p1, thenf(x;y0);(x0;y)gp1p1[p2. if (x;y)2p2, thenf(x;y0);(x0;y)gp2
p1[p2.
letp1;p22pas(g), (x;y)2p1\p2, andf(x;y0);(x0;y)ge. we need to show that f(x;y0);(x0;y)g
p1\p2. since (x;y)2p1,f(x;y0);(x0;y)g p1. since (x;y)2p2,f(x;y0);(x0;y)g p2. hence,
f(x;y0);(x0;y)gp1\p2.
letp1;p22pas(g), (x;y)2p1np2, andf(x;y0);(x0;y)ge. we need to show that f(x;y0);(x0;y)g
p1np2. since (x;y)2p1,f(x;y0);(x0;y)gp1. since (x;y)62p2,f(x;y0);(x0;y)g\p2=;. hence,
f(x;y0);(x0;y)gp1np2. 
a passage is fully characterized by both the set of initial vertices and the set of terminal vertices. therefore,
the following properties hold.
lemma 3 (passage properties). letg= (v;e)be a graph. for any p1;p22pas(g):
1(p1) =1(p2),p1=p2,2(p1) =2(p2),
p1#p2,1(p1)\1(p2) =;, and
p1#p2,2(p1)\2(p2) =;.
proof.x=1(p) impliesp=f(x;y)2ejx2xg(denition of passages). hence, 1(p1) =1(p2))
p1=p2(because a passage pis fully determined by 1(p)). the other direction ( () holds trivially. a
passagepis also fully determined by 2(p). hence,2(p1) =2(p2))p1=p2. again the other
direction (() holds trivially.
the second property follows from the observation that two passages share an edge if and only if the
initial vertices overlap. if two passages share an edge ( x;y), they also share initial vertex x. if two passage
share initial vertex x, then they also share some edges ( x;y).
due to symmetry, the same holds for the third property. 
the following lemma shows that a passage can be viewed as a xpoint: p= ((1(p)v)[(v2(p)))\e.
this property will be used to construct minimal passages.
lemma 4 (another passage characterization). letg= (v;e)be a graph. peis a passage if
and only if p= ((1(p)v)[(v2(p)))\e.
proof. supposepis a passage: it is fully characterized by 1(p) and2(p). take all edges leaving
from1(p):p= (1(p)v)\e. take all edges entering 2(p):p= (v2(p))\e. hence,
p= (1(p)v)\e= (v2(p))\e. so,p= ((1(p)v)[(v2(p)))\e.
supposep= ((1(p)v)[(v2(p)))\e. let (x;y)2pandf(x;y0);(x0;y)ge. clearly, (x;y0)2
(1(p)v)\eand (x0;y)2(v2(p))\e. hence,f(x;y0);(x0;y)g((1(p)v)[(v2(p)))\e=p.

33. passage partitioning
after introducing the notion of passages and their properties, we now show that graph can be partitioned
using passages. for example, the set of passages fp1;p2;p3;p4;p5gin figure 2 partitions g1. other passage
partitionings for graph g1arefp2;p5;p7gandfp1;p2;p6g.
denition 4 (passage partitioning). letg= (v;e)be a graph.p=fp1;p2;:::;pngpas(g)nf;g
is apassage partitioning if and only ifsp=eand81i<jnpi#pj.
any passage partitioning pdenes an equivalence relation on the set of edges. for e1;e22e,e1pe2if
there exists a p2pwithfe1;e2gp.
lemma 5 (equivalence relation). letg= (v;e)be a graph with passage partitioning p.pdenes
an equivalence relation.
proof. we need to prove that pis reexive, symmetric, and transitive. let e;e0;e002e. clearly,epe
becausee2e=sp(pis a passage partitioning). hence, there must be a p2pwithe2p(reexivity).
ifepe0, thene0pe(symmetry). if epe0ande0pe00, then there must be a p2p such that
fe1;e2;e3gp. hence,epe00(transitivity). 
any graph has a passage partitioning, e.g., fegis always a valid passage partitioning. however, to decompose
analysis one is typically interested in partitioning the graph in as many passages as possible. therefore,
we introduce the notion of a minimal passage. passage p6in figure 2 is not minimal because it contains
smaller non-empty passages: p3,p4, andp5. passagep7is also not minimal. only the rst ve passages in
figure 2 (p1,p2,p3,p4andp5) are minimal.
denition 5 (minimal passages). letg= (v;e)be a graph and p2pas(g)a passage. pis minimal
if and only if there is no non-empty passage p02pas(g)nf;g such thatp0p. pasmin(g)is the set of
all non-empty minimal passages.
two dierent minimal passages cannot share the same edge. otherwise, the dierence between both passages
would yield a smaller non-empty minimal passage. hence, an edge can be used to uniquely identify a minimal
passage. the xpoint characterization given in lemma 4 suggests an iterative procedure that starts with a
single edge. in each iteration edges are added that must be part of the same minimal passage. as shown
this procedure can be used to determine all minimal passages.
lemma 6 (constructing minimal passages). letg= (v;e)be a graph. for any (x;y)2e, there
exists precisely one minimal passage p(x;y)2pasmin(g)such that (x;y)2p(x;y).
proof. initially, set p:=f(x;y)g. extendpas follows: p:= ((1(p)v)[(v2(p)))\e. repeat
extendingpuntil it does not change anymore. finally, return p(x;y)=p. the procedure ends because the
number of edges is nite. if p= ((1(p)v)[(v2(p)))\e(i.e.,pdoes not change anymore), then
pis indeed a passage (see lemma 4). pis minimal because no unnecessary edges are added: if ( x;y)2p,
then any edge starting in xor ending in yhas to be included.
to prove the latter one can also consider all passages p=fp1;p2;:::;pngthat contain ( x;y). the
intersection of all such passagestpcontains edge ( x;y) and is again a passage because of lemma 2. hence,tp=p(x;y). 
the construction described in the proof can be used compute all minimal passages and is quadratic in the
number of edges.
pasmin(g1) =fp1;p2;p3;p4;p5gfor the graph shown in figure 1. this is also a passage partitioning.
(note that the construction in lemma 6 is similar to the computation of so-called clusters in a petri net
[4].)
theorem 1 (minimal passage partitioning). letg= (v;e)be a graph. pasmin(g)is a passage par-
titioning.
4proof. letpasmin(g) =fp1;p2;:::;png. clearly,fp1;p2;:::;png pas(g)nf;g ,s
1inpi=eand
81i<jnpi#pj(follows from lemma 6). 
figure 3 shows a larger graph g2= (v2;e2) withv2=fa;b;:::;ogande2=f(a;b);(b;e);:::; (n;o)g. the
gure also shows six passages. these form a passage partitioning. each edge has a number that refers to
the corresponding passage, e.g., edge ( h;k) is part of passage p4. passages are shown as rectangles and
vertices are put on the boundaries of at most two passages. vertex ain figure 3 is on the boundary of p1
because (a;b)2p1. vertexbis on the boundary of p1andp2because (a;b)2p1and (b;e)2p2.g2has
no isolated vertices, so all vertices are on the boundary of at least one passage.
a b
d
mcp1e
f
ghi
k
j
n
olp2 p3 p4
p5
p61 22 2
2
23
34 4
4
44
55
5
6 661
figure 3: a passage partitioning for graph g2.
the passage partitioning shown in figure 3 is not composed of minimal passages as is indicated by the
two dashed lines. both p1andp6are not minimal. p1can be split into minimal passages p1a=f(a;b)g
andp1b=f(c;d)g.p6can be split into minimal passages p6a=f(m;l)gandp6b=f(n;o);(n;m)g. in fact,
as shown next, any passage can be decomposed into minimal non-empty passages.
theorem 2 (composing minimal passages). letg= (v;e)be a graph. for any passage p2pas(g)
there is a set of minimal non-empty passages fp1;p2;:::;png pasmin(g)such thats
1inpi=pand
81i<jnpi#pj.
proof. letfp1;p2;:::;png=fp(x;y)j(x;y)2pg. these passages are minimal (lemma 6) and also cover
all edges in p. moreover, two dierent minimal passages cannot share edges. 
a graph without edges has only one passage. hence, if e=;, then pas(g) =f;g(just one passage),
pasmin(g) =;(no minimal non-empty passages), and ;is the only passage partitioning. if e6=;, then
there is always a trivial singleton passage partitioning fegand a minimal passage partitioning pasmin(g)
(but there may be many more).
lemma 7 (number of passages). letg= (v;e)be a graph with k=jpasmin(g)jminimal non-empty
passages. there are 2kpassages and bkpassage partitionings.1for any passage partitioning fp1;p2;:::;png
ofg:nkjej.
1bkis the k-th bell number (the number of partitions of a set of size k), e.g., b3= 5,b4= 15, and b5= 52 [10].
5proof. any passage can be composed of minimal non-empty passages. hence, there are 2kpassages.bkis
the number of partitions of a set with kmembers, thus corresponding to the number of passage partitionings.
if there are no edges, there are no minimal non-empty passages ( k= 0) and there is only one possible
passage partitioning: ;. hence,n= 0. ife6=;, then pasmin(g) is the most rened passage partitioning.
there are at most jejminimal non-empty passages as they cannot share edges. hence, nkjej. note
thatn1 ife6=;. 
graphg2in figure 3 has 28= 256 passages and b8= 4140 passage partitionings.
4. passage graphs
passage partitionings can be visualized using passage graphs . to relate passages, we rst dene the
input/output vertices of a passage.
denition 6 (input and output vertices). letg= (v;e)be a graph and p2pas(g)a passage.
in(p) =1(p)n2(p)are the input vertices of p, out (p) =2(p)n1(p)are the output vertices of p,
and io (p) =1(p)\2(p)are the input/output vertices of p.
note the dierence between input, output, and input/output vertices on the one hand and the initial and
terminal vertices of a passage on the other hand. given a passage partitioning, there are ve types of
vertices: isolated vertices, input vertices, output vertices, connecting vertices, and local vertices.
denition 7 (five types of vertices). letg= (v;e)be a graph andp=fp1;p2;:::;pnga passage
partitioning. viso=vn(1(e)[2(e))are the isolated vertices of p,vin=1(e)n2(e)are the input
vertices ofp,vout=2(e)n1(e)are the output vertices of p,vcon=s
i6=j2(pi)\1(pj)are the
connecting vertices of p,vloc=s
i1(pi)\2(pi)are the local vertices of p.
note thatv=viso[vin[vout[vcon[vlocand the ve sets are pairwise disjoint, i.e., they partition v.
in the passage partitioning shown in figure 3: ais the only input vertex, kandoare output vertices, and
e,iandmare local vertices. all other vertices are connecting vertices.
denition 8 (passage graph). letg= (v;e)be a graph andp=fp1;p2;:::;pnga passage partition-
ing. (p;f(p;p0)2ppjp .p0g)is corresponding passage graph .
figure 4 shows a passage graph. the graph shows the relationships among passages and can be used to
partition the vertices vintoviso[vin[vout[vcon[vloc.
a p1 p2 p3 p4b,d f,ge
hi
k
p5c j
p6n l
o m
figure 4: passage graph based on the passage partitioning shown in figure 3.
65. quality of a passage partitioning
passages can be used to decompose analysis problems (e.g., conformance checking and process discovery
[2]). in the extreme case, there is just one minimal passage covering all edges in the graph. in this case,
the graph cannot be decomposed. ideally, we would like to use a passage partitioning p=fp1;p2;:::;png
that is accurate and that has only small passages. one could aim at as many passages as possible in order
to minimize the average size per passage: av(p) =jej
nper passage. one can also aim at minimizing the
size of the biggest passage (i.e., big(p) =max 1injpij) because the biggest passage often takes most of
the computation time.
to have smaller passages, one may need to abstract from edges that are less important. to reason
about such \approximate passages" we dene the input as g= (v;) with vertices vand weight function
2(vv)![ 1;1]. given two vertices x;y2v:(x;y) is \weight" of the possible edge connecting
xandy. if(x;y)>0, then it is more likely than unlikely that there is an edge connecting xandy. if
(x;y)<0, then it is more unlikely than likely that there is an edge connecting xandy. one can view
(x;y)+1
2as the \probability" that there is such an edge. the penalty for leaving out an edge ( x;y) with
(x;y) = 0:99 is much bigger than leaving out an edge ( x0;y0) with(x0;y0) = 0:15. the accuracy of a
passage partitioning p=fp1;p2;:::;pngwithe=[1inpifor inputg= (v;) can be dened as
acc(p) =p
(x;y)2e(x;y)
maxe0vvp
(x;y)2e0(x;y). ifacc(p) = 1, then all edges having a positive weight are included in
some passage and none of edges having a negative weight are included. often there is a trade-o between
higher accuracy and smaller passages, e.g., discarding a potential edge having a low weight may allow for
splitting a large passage into two smaller ones. just like in traditional graph partitioning [7, 8], one can look
for the passage partitioning that maximizes acc(p) provided that av(p)avand/or big(p)big, where
avandbigare suitably chosen thresholds. whether one needs to resort to approximate passages depends
on the domain, e.g., when discovering process models from event logs causalities tend to be uncertain and
including all potential causalities results in spaghetti-like graphs [1], therefore approximate passages are
quite useful.
6. conclusion
in this article we introduced the new notion of passages. passages have been shown to be useful in the
domain of process mining. given their properties and possible applications in other domains, we examined
passages in detail. passages are closed under the standard set operators (union, dierence, and intersection).
a graph can be partitioned into components based on its minimal passages and any passage is composed of
minimal passages. the theory of passages can be extended to deal with approximate passages. we plan to
examine these in the context of process mining, but are also looking for applications of passage partitionings
in other domains (e.g., distributed enactment and verication).
references
[1] w.m.p. van der aalst. process mining: discovery, conformance and enhancement of business processes . springer-
verlag, berlin, 2011.
[2] w.m.p. van der aalst. decomposing process mining problems using passages. in s. haddad and l. pomello, editors,
applications and theory of petri nets 2012 , volume 7347 of lecture notes in computer science , pages 72{91. springer-
verlag, berlin, 2012.
[3] j. bang-jensen and g. gutin. digraphs: theory, algorithms and applications (second edition) . springer-verlag, berlin,
2009.
[4] j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts in theoretical computer science .
cambridge university press, cambridge, uk, 1995.
[5] u. feige, m. hajiaghayi, and j. lee. improved approximation algorithms for minimum-weight vertex separators. in
proceedings of the thirty-seventh annual acm symposium on theory of computing , pages 563{572. acm, new york,
2005.
[6] j.l. gross and j. yellen. handbook of graph theory . crc press, 2004.
[7] g. karpis and v. kumar. a fast and high quality multilevel scheme for partitioning irregular graphs. siam journal
on scientic computing , 20(1):359{392, 1998.
7[8] b.w. kernighan and s. lin. an ecient heuristic procedure for partitioning graphs. the bell systems technical
journal , 49(2), 1970.
[9] m. kim and k. candan. sbv-cut: vertex-cut based graph partitioning using structural balance vertices. data and
knowledge engineering , 72:285{303, 2012.
[10] n.j.a. sloane. bell numbers. in encyclopedia of mathematics . kluwer academic publishers, 2002. http://www.
encyclopediaofmath.org/index.php?title=bell_numbers&oldid=14335 .
8