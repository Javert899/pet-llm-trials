towards robust conformance checking
a. adriansyah, b.f. van dongen, and w.m.p. van der aalst
department of mathematics and computer science
eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
{a.adriansyah,b.f.v.dongen,w.m.p.v.d.aalst}@tue.nl
summary. the growing complexity of processes in many organizations
stimulates the adoption of business process management (bpm) tech-
niques. process models typically lie at the basis of these techniques and
generally, the assumption is made that the operational business processes
as they are taking place in practice conform to these models. however,
recent experience has shown that this often isn't the case. therefore, the
problem of checking to what extent the operational process conforms to
the process model is increasingly important.
in this paper, we present a robust approach to get insights into the
conformance of an operational process to a given process model. we use
logs that carry information about which activities have being performed,
in which order and we compare these logs to an abstract model. we do
not only provide several di®erent conformance metrics, but we show an
e±cient implementation for the calculation of these metrics.
our approach has been implemented in the prom framework1, evaluated
using simulated event logs and compared against an existing conformance
technique based on petri nets.
key words: process mining, conformance, process analysis
1 introduction
the growing complexity of business processes has triggered a wide usage of pro-
cess models. the emergence of many systems that base their functions around
process models such as bpm (business process management), bam (business
activity monitoring), and bpi (business process intelligence) shows how im-
portant process models are to organizations. models are not only used as in-
struments to describe existing processes. they have become an integral part of
process optimization, monitoring, and even auditing [14].
unfortunately, process models do not always conform to reality. even in au-
tomated processes, deviations can occur [10]. in some other cases, it is desirable
to have models that allow for °exibility [8]. hence, before performing any sort
of process analysis based on process models, it is important to know in advance
to what extent the models conform to reality.
1seehttp://www.processmining.orgconformance checking techniques evaluate the relation between process mod-
els and reality presented in form of event logs . given a process model and an event
log, the following orthogonal dimensions of conformance can be measured [11]:
fitness: is the observed behavior captured by the model?
precision: does the model only allow for behavior that happens in reality?
generalization: does the model allow for more behavior than encountered in
reality?
structure: does the model have a minimal structure to describe its behavior?
many existing conformance checking techniques require process models in the
form of petri nets (e.g. [2,7,11]). given a petri net and an event log, various con-
formance metrics are calculated by replaying the log in the net. however, there
are at least two drawbacks of petri net-based conformance checking techniques.
first, their metrics are often based on notions that only exist in petri nets such
as tokens and \invisible" transitions and second, petri-net-based conformance
checking techniques may produce \false negative" results. thus, without in depth
knowledge about the language and the algorithm used, it is di±cult to utilize
the metrics for further analysis.
in figure 1, we show the result of applying conformance checking technique
in [11] to a petri net and an event log. the event log was obtained by simulating
the net, hence it conforms fully to the model. the positive number in each
place indicates the number of remaining tokens after replay and negative number
indicates missing tokens. the existence of missing and remaining tokens leads to
a ¯tness value less than 100%, although it should be 100% [9]. in this case, the
false negative is caused by the invisible transitions that model an or-split [9].
in [3], problems of petri-net-based conformance checking are solved by using
fuzzy models that have very relaxed semantics. for these fuzzy models, confor-
mance calculations are again made by replaying the log in the model. however,
the problem with this conformance is that it is di±cult to perform further anal-
ysis given a conformance value, because the semantics of fuzzy models are too
relaxed.
in this paper, we propose a new way of looking at conformance in the context
of event logs. in section 2, we introduce a model with semantics, such that these
a+1995 
-1288 
+2117 
-1251 
+2062 
-1208 d
c
b+5705 
+1583 
-4473 
+1705 
-4484 ex
e-5705 
-5705 f
ginvisible transitions 
to construct or-split 
fig. 1. false negative ¯tness indication in petri-net based conformance checker
2process models event logs 
replay 
- conformance
- diagnosticse.g., dedicated formats such as ibm’s 
common event infrastructure (cei) and 
mxml or proprietary formats stored in flat 
files or database tables .
e.g. process models represented in bpmn, 
bpel, epcs, petri nets, uml ad, etc. fig. 2. common approach to analyze conformance of process models to logs
semantics are more relaxed than petri net semantics, but stricter than fuzzy-
model semantics. then, in section 3, we show how several conformance metrics
can be de¯ned for these models. section 4 shows, for one of these metrics, how
to compute one of the metrics for a given log and model and in section 5, we
show some experiments. section 6 concludes the paper.
2 preliminaries
conformance is measured by replaying event logs in process models (see figure
2). with the existence of various process modeling languages, each with its own
semantics, replaying event logs is a unique problem for each process modeling
language. hence, rather than developing a replay algorithm for each existing pro-
cess modeling language, we use a modeling language that provides an abstraction
of existing languages, while maintaining some notion of semantics.
based on existing process modeling languages (e.g. bpmn2, epc [13], yawl
[5], heuristic nest [16], fuzzy models [3], and petri nets), we propose an exten-
sion of °exible models [9] to be a process modeling language that captures the
essential aspects of existing languages in the control-°ow dimension by focusing
on activities and their synchronization and/or enabling alternatives.
before introducing our °exible model, we ¯rst introduce some basic graph
notation for directed graphs.
de¯nition 2.1. (successor/predecessor nodes in a directed graph) let
g= (n; e) with eµn£nbe a directed graph. for n2n, we say successor
nodes of node nasng²=fn02nj(n; n0)2egandpredecessor nodes of node
nasg²n=fn02nj(n0; n)2eg. we omit the superscript gif the context is
clear.
de¯nition 2.2. (path in a directed graph) letg= (n; e) be a directed
graph. for n; n02n, there exists a path from nton0if and only if there is
a sequence of edges h(n1; n2);(n2; n3); :::;(nx¡1; nx)iwith x > 1 where n1=
n^nx=n0^ 81·i<x(ni; ni+1)2eholds. by nãn0we denote that a path
from nton0exists.
2business process model and notation http://www.bpmn.org/
3ab
c
atau-1 
tau-2 b
c
atau-1 
tau-2 b
c tau-3 a b
c
ab
c
ab
cand-split 
pattern 
xor-split 
pattern 
or-split 
pattern i(a)= {∅}
o(a)= {{b,c}} i(b)= {{a}}
o(b)= {∅}
i(c)= {{a}}
o(c)= {∅}
i(a)= {∅}
o(a)= {{b},{c}} i(b)= {{a}}
o(b)= {∅}
i(c)= {{a}}
o(c)= {∅}
i(a)= {∅}
o(a)= {{b},{c},{b, c}} i(b)= {{a}}
o(b)= {∅}
i(c)= {{a}}
o(c)= {∅}fig. 3. petri nets with invisible transitions labeled tau(left) and their possible °exible
model counterparts (right)
de¯nition 2.3. (acyclic graph) letg= (n; e) be a directed graph. we say
thatgis an acyclic graph if 8n2n@nãnholds
2.1 flexible models
a °exible model is a (potentially cyclic) directed graph consisting of tasks and
edges. a task represents an activity in a process. for each task, possible sets
of predecessors tasks (indicated by ior¶), and sets of successors tasks ( o) are
enumerated. an activity in the business process may be represented by more
than one task (i.e. duplicate tasks are permitted). using input and output sets
of tasks, °exible models can express either strict or relaxed semantics.
the idea of our work is to model processes as °exible models and measure the
conformance of an event log and the °exible model. in figure 3, we illustrate how
a °exible model can express patterns that are often needed to model processes in
reality, using petri net as its counterpart. note that the often-needed or-split
construct can be modeled using °exible model in a straightforward way.
the formal de¯nition of flexible model is given as follows:
de¯nition 2.4. (flexible model)
letabe a set of activities. a °exible model maoverais a tuple ( t; f; ¶; o; ¯ ),
where:
{tis a ¯nite set of tasks,
{fµ(t£t) is a set of directed edges connecting tasks,
{¶:t! p (p(t)) is a function, such that for t2tands2¶(t),sis a
synchronization alternative for t. we require that ¶(t)6=;ands
s2¶(t)=²t.
4{o:t! p (p(t)) is a function, such that for t2tands2o(t),sis an
enabling alternative of t. we require that o(t)6=;ands
s2o(t)=t².
{¯:t!ais a surjective function mapping tasks to activities, i.e. each activity
appears as at least one task in the model.
it is important to realize that °exible models can be obtained using several
approaches, e.g. by discovering them directly from event log, by converting ex-
isting process models, or by modeling them manually. in this paper, we assume
that such model already exists for a given event log.
flexible models are intended to be models with a formal semantics. however,
we do not provide execution semantics. instead, we later provide semantics only
in the context of a case, i.e. for a given sequence of task executions, we can
say whether or not this sequence is a (partial) execution of a °exible model.
therefore, we formally introduce the notion of a partial and full instance of a
°exible model.
de¯nition 2.5. (partial instance of °exible model) letabe a set of
activities and ma= (t; f; ¶; o; ¯ ) be a °exible model over a. let i= (n; r; ¸ )
be a tuple where nis a set of unique task instances, rµn£nis a set of edges
such that ( n; r) is an acyclic graph, and ¸:n!tis a function mapping the
elements of nto their corresponding tasks. we say iis a partial instance of ma
if and only if the following holds:
{8(n;n0)2r(¸(n); ¸(n0))2f,
{8n2n8n1;n22n²n16=n2=)¸(n1)6=¸(n2)
{8n2n8n1;n22²nn16=n2=)¸(n1)6=¸(n2)
{8n2n9s2o(¸(n))¸(n²)µs, and
{8n2n9s2¶(¸(n))¸(²n)µs
a partial instance of a °exible model is a partial order of task instances,
such that the edges respect the existence of edges in the original °exible model.
furthermore, the input and output sets as de¯ned in the °exible model are
partly respected. once all input and output sets are fully respected, we say that
an instance is complete.
de¯nition 2.6. (complete instance of °exible model) letabe a set of
activities and ma= (t; f; ¶; o; ¯ ) be a °exible model over a. let i= (n; r; ¸ )
be a partial instance of ma. we say iis a complete instance of maif and only
if the following holds:
{8n2n9s2o(¸(n))¸(n²) =s, and
{8n2n9s2¶(¸(n))¸(²n) =s
2.2 event logs
as described in figure 2, we also need event logs in order to check for confor-
mance. an event log records which activities have been performed in a business
process. hence, we formalize log-related terms as follows:
5de¯nition 2.7. (event logs)
letabe a set of activities. an event log over ais de¯ned as la= (e; c; ®; °; â),
where:
{eis a ¯nite set of events,
{cis a ¯nite set of cases,
{®:e!ais a function relating each event to an activity,
{°:e!cis a surjective function relating each event to a case.
{âµe£eimposes a total ordering on the events in e. the ordering is typically
based on timestamps of events.
de¯nition 2.8. (case events)
letabe a set of activities and la= (e; c; ®; °; â) be an event log over a.
letc2cbe a case identi¯er. with ec, we denote the events of case c, i.e.
ec=fe2ej°(e) =cg. asâimposes a total ordering on e, it also imposes a
total ordering on ec.
in the following section, we show how several conformance metrics can be
de¯ned for the combination of an event log and a °exible model.
3 conformance in flexible model
a °exible model as de¯ned in de¯nition 2.4 is not executable. given a task in
a °exible model, we cannot provide insights into which tasks can be executed
next such that in the end, a complete instance of this °exible model will be
constructed. however, this is not the goal of °exible models. instead, we aim at
deciding if and to what extent a given event log can be replayed in a °exible
model, i.e. for a given execution, we need to say whether or not this execution
conforms to the °exible model.
in this paper, we focus on conformance between a model and a log that refer
to the same set of activities. through standard ¯ltering techniques, a log can
always be pre-processed to meet this requirement for a °exible model.
for a log and a °exible model, we need to de¯ne a match between a partial
instance and a case, i.e. for a given case, we need to de¯ne a class of partial
instances that this case can correspond to. at this point, we do not provide
insights into constructing instances. however, in section 4, we show how to
obtain an element of the class of partial instances that matches a case and
minimizes a speci¯c conformance metric.
de¯nition 3.1. (matching case and °exible model instance)
letabe a set of activities, let la= (e; c; ®; °; â) be an event log over aand
letma= (t; f; ¶; o; ¯ ) be a °exible model over a. let c2cbe a case and let
i= (n; r; ¸ ) be a partial instance of ma.
we say that candimatch if and only if:
{ec=n, i.e. each event is a node in the partial instance,
6{8e;e02ec(eâe0))(e6ãe0), i.e. the ordering of events in the log is respected
in the instance, and
{8e2ec¸(e)2 ft2tj¯(t) =®(e)g, i.e. each event is mapped to a task that
corresponds to the activity represented by this event.
we use icto denote an arbitrary instance imatching cand we use =cto denote
the (possibly in¯nite) set of all instances matching c.
in order to reason about matching instances for a case, we show that at least
one matching instance always exists, i.e. =c6=;.
lemma 3.2. (matching partial instance exists for any case)
letabe a set of activities, let la= (e; c; ®; °; â) be an event log over aand
letma= (t; f; ¶; o; ¯ ) be a °exible model over a. let c2cbe a case and let
i= (ec;;; ¸) be a partial instance of ma. we show that imatches c(i.e.i2 =c
for any ¸that satis¯es 8e2ec¸(e)2 ft2tj¯(t) =®(e)g.
proof. it is trivial to see that ifollows de¯nition 2.6. furthermore, since there
are no edges, we know that for all e; e02echolds that e6ãe0. since n=ec
and8e2ec¸(e)2 ft2tj¯(t) =®(e)g, we know that iis a matching partial
°exible model instance, hence i2 =c. ¤
as stated before, in a partial instance of a °exible model, there can be in-
stances of tasks for which the input conditions are not completely satis¯ed. if
such an instance matches a case, then there are events in the log that correspond
to these task instances. we call these events unsatis¯ed .
de¯nition 3.3. (unsatis¯ed events) letabe a set of activities, let la=
(e; c; ®; °; â) be an event log over aand let ma= (t; f; ¶; o; ¯ ) be a °exible
model over a. let c2cbe a case and let ic= (ec; r; ¸ ) be a partial instance
ofmamatching c.
we say that e2ecis an unsatis¯ed event if and only if ¸(ic²e)62¶(¸(e)). we
denote the set of unsatis¯ed events by eus
ic.
similar to unsatis¯ed events, we de¯ne unhandled events .
de¯nition 3.4. (unhandled events) letabe a set of activities, let la=
(e; c; ®; °; â) be an event log over aand let ma= (t; f; ¶; o; ¯ ) be a °exible
model over a. let c2cbe a case and let ic= (ec; r; ¸ ) be a partial instance
ofmamatching c.
we say that e2ecis an unhandled event if and only if ¸(eic²)62o(¸(e)). we
denote the set of unhandled events by euh
ic.
using the notion of unhandled and unsatis¯ed events, we de¯ne several con-
formance metrics.
3.1 conformance metrics
given a °exible model and a log, we can always obtain a matching instance for
each case in the model. in this section, we de¯ne several metrics to express the
7conformance between a case and a matching instance. in section 4, we use these
metrics to construct a matching instance that maximizes conformance for each
case.
de¯nition 3.5. (single case ¯tness metrics) letabe a set of activities,
letla= (e; c; ®; °; â) be an event log over aand let ma= (t; f; ¶; o; ¯ ) be
a °exible model over a. let c2cbe a case. we de¯ne two ¯tness metrics for
matching instances as follow:
case absolute ¯tness ,fabs
c:=c! f0;1g, is a function that returns 1 only if
there are no unsatis¯ed events in the case.
fabs
c(ic) =½0 ifjeus
icj>0 holds, else
1 if previous condition doesn't hold
task ratio ¯tness ,frat
c(ic) :=c![0;1], is a function that indicate the ratio
between unsatis¯ed events and total number of events in a case.
frat
c(ic) = 1¡jeus
icj
jecj
theabsolute ¯tness metric states that a case is only ¯tting a °exible model
instance if this instance does not have unsatis¯ed events. on the other hand, task
ratio ¯tness provides the percentage of events that are unsatis¯ed. we extend
these two ¯tness metrics to the level of °exible models as follows.
de¯nition 3.6. (fitness metrics) letabe a set of activities, let la=
(e; c; ®; °; â) be an event log over aand let ma= (t; f; ¶; o; ¯ ) be a °exible
model over a.
our ¯tness metrics are de¯ned as follow:
absolute ¯tness fabs2[0;1] indicates the average maximal absolute ¯tness.
fabs=p
c2cmaxic2=cfabs
c(ic)
jcj,
task ratio ¯tness frat2[0;1] indicates the average maximal task ratio ¯t-
ness.
frat=p
c2cmaxic2=cfrat
c(ic)
jcj,
event ¯tness fevt2[0;1] indicates the maximal ratio of events in the log that
can be satis¯ed by some instance.
fevt=p
c2cmaxic2=cfrat
c(ic)¢jecj
jej
so far, we de¯ned several ¯tness metrics that can be computed only when for
each case in the log, we can obtain a matching (partial) instance of the °exible
model that maximizes any of our two case-based ¯tness functions. therefore, in
the following section, we present an algorithm that constructs a partial model
instance that maximizes the ¯tness metrics we de¯ned.
4 constructing matching partial model instance
given a °exible model and an event log over a set of activities, our ¯tness values
depend on a matching (partial) model instance for each case in the log. from
de¯nition 3.6, it is clear that for each case, we need to construct a partial model
8let a = {x,y,z}be a set of activities and let 
la = ( e,c,α,γ,> )be an event log over awhere e 
= {x,y,z},c = {c}. each event is mapped to case 
cby γand mapped to its uppercase activity by 
α.let mabe a flexible model over a.
x y zflexible model  ma
xyzinstance ic(3):frat (ic(3)) =  1/3xyzinstance ic(1):frat (ic(1)) =  1   
xyzinstance ic(2):frat (ic(2))= 2/3
i(z)={{y}} 
o(z)={∅}i(y)={{x}} 
o(y)={{z}} i(x)={∅}
o(x) = {{y}} fig. 4. matching partial instances given a case and a °exible model
instance that maximizes the value of the case based ¯tness metrics de¯ned in
de¯nition 3.5. in this section, we introduce an algorithm that achieves this.
as an illustration, consider the °exible model and events of a case as shown
in figure 4. more than one matching partial model instance can be generated
from the model, each of which has a di®erent ¯tness value for the task ratio
¯tness frat. since the model can capture the behavior of the case as shown by
instance 1, the ¯tness value should be 1. hence, an instance with task ratio
¯tness 1 should be selected as the basis for ¯tness calculation.
from de¯nition 3.5, it can easily be concluded that maximum ¯tness will be
achieved if the number of unsatis¯ed events of a case in an instance is minimal.
according to de¯nition 2.5, all predecessor/successor relations between task in-
stances should honor the same relation between tasks in the original model.
however, from de¯nition 3.3, we can see that only the predecessor relation mat-
ters for the ¯tness metrics we de¯ned. therefore, the selection of predecessors
of task instances is important to minimize the number of unsatis¯ed events.
given a case in an event log and a °exible model, we have shown that the set
of matching partial instances for that case is non-empty (lemma 4). furthermore
it is easy to see that the number of matching partial instances is ¯nite (in fact,
it is at most exponential in the number of events in the case). although in
theory this implies that we could iterate all instances to ¯nd one maximizing
¯tness, this would be infeasible for real-life event logs. therefore, we introduce
a search algorithm, based on the a* algorithm [4], that guarantees us to ¯nd an
instance that minimizes the number of unsatis¯ed events and hence maximizes
the case-based ¯tness metric.
the a* algorithm was developed to ¯nd the shortest path from a source node
to atarget node in a weighted directed graph. given a directed graph g= (n; e)
where nis a set of nodes and e:n£nis a set of directed arcs, a* heuristic
relies on cost function f(n) =g(n) +h(n), where n2nis a node in the graph.
function g(n) returns the total cost so far to reach nfrom a source node nsrc,
and heuristic function h(n) returns estimation cost from node nto target node
9ntrg. function hshould not return a value that overestimates the cost to reach
the goal, and cost function fshould exhibit incremental monotonicity [12]. if
functions with such properties are used, the algorithm has been proven to be
complete and optimal (i.e. return path from nsrctontrgwith the minimum
value of f(n)) [1,12].
the a* algorithm can be used in the construction of matching partial in-
stances which maximize a case's ¯tness value. the sketch of the approach is
given as follows. we start our search from the matching partial instance that
always exists, i.e. a matching partial instance that contains no edges, but only
the events as nodes. then, we consider all events one by one, in the order pro-
vided by the log. for each event, we try to satisfy one of the synchronization
alternatives de¯ned in the °exible model (i.e. we need to consider all tasks in the
°exible model that refer to the same activity as the event). in order to satisfy
a synchronization alternative, we add edges from earlier events to the event un-
der investigation, while maintaining the restrictions on the enabling alternatives
provided by the °exible model. if no synchronization alternative can be satis¯ed,
we do not add any edges.
obviously the algorithm sketched above could be used to generate all match-
ing partial instances. however, we use the a* algorithm to limit our search in
the following way. first, we de¯ne the target function fas the number of events
in the case plus the number of unsatis¯ed events so far . as the number of events
in the case is ¯xed, minimizing this will also minimize the number of unsatis-
¯ed events. furthermore, function grepresents the number of events considered
so-far (the depth of the search tree) plus the number of unsatis¯ed events so far
andhprovides the number of events still to consider.
during our search, no edges are ever added toan earlier event. therefore,
once an event was unsatis¯ed, it will never be satis¯ed later. hence, function f
is strictly increasing as the search progresses and the a* algorithm is guaranteed
to ¯nd a matching partial instance with minimal number of unsatis¯ed events.
5 experiments
we implemented our calculation approach with a* heuristic in the prom frame-
work. in addition to conformance values such as the ¯tness metrics presented
in this paper, other useful information obtained from replaying the log in the
model is projected onto the original °exible model [15].
using our implementation, we compared the results of our approach to an
existing petri net based approach proposed in [11] that is also the basis for [7].
the goal of this experiment is to show that our approach returns the right ¯tness
values, where petri net based approach does not.
to perform our experiment, ¯ve event logs were generated from various petri
nets, each with or-split or or-join constructs, duplicate transitions, or loop
constructs. for modeling the nets and generating logs, we used cpn tools [6].
the conformance of each log is measured against both the original petri net and
10table 1. experiment results
log id # case # evts fabsfratfevtpetri net based.
orsjn1 5000 18556 1 1 1 0.77
orsjn2 10000 37153 1 1 1 0.77
ors1 5000 26323 1 1 1 0.89
ors2 10000 52762 1 1 1 0.89
loop 10000 115384 1 1 1 0.89
a °exible model that is the counterpart of that petri net. each log has a size
reasonable for simulating real-life data ( ¸5000 cases).
the experiments results are shown in table 1. as shown in the table (columns
4,5 and 6), our conformance metrics return 1 for all logs. this is expected, as the
models were used to generate the log. when the same logs are checked against
the petri nets the ¯tness is less than 1, due to the inability of existing algorithms
to handle the chosen constructs (e.g. it detects false negatives).
6 conclusion and future work
in this paper, we provide a robust method for calculating conformance between
a log and a process model. first, we introduced °exible models that provide an
abstraction of many languages and allow for the modeling of complex control
°ow constructs, such as or-split/joins and multiple tasks that represent the
same activity. we provided semantics for these models, but without specifying
how to execute them. instead, we showed that in the context of a case that
has been recorded in the log, we can construct instances of the model that
maximize certain conformance metrics. finally, using experiments on simulated
data (comparable in size to real-life data sets), we have shown that our approach
calculates ¯tness correctly in the presence of complex constructs, where existing
approaches do not.
the work presented in this paper provides a solid basis for robust confor-
mance checking. since our °exible models do not have executable semantics,
we do not rely on state-space exploration (which is required in petri-net based
conformance checking).
in the future, we plan to extend this work by de¯ning metrics that do not
only capture the unsatis¯ed events, but also the unhandled events. furthermore,
we aim at developing metrics related to other aspects of conformance, such as
appropriateness. next to that, there is also a need to identify the \skipping" of
activities, i.e. by identifying which tasks were executed but not logged.
finally, to make our work applicable in real-life settings, we aim to inves-
tigate possible approaches to obtain °exible models, both using mining and by
conversion from other models.
11references
1.r. dechter and j. pearl. generalized best-¯rst search strategies and the opti-
mality of a*. journal of the acm (jacm) , 32(3):505{536, 1985.
2.s. goedertier, d. martens, j. vanthienen, and b. baesens. robust process discov-
ery with arti¯cial negative events. the journal of machine learning research ,
10:1305{1340, 2009.
3.c.w. gunther. process mining in flexible environments . phd thesis, eindhoven
university of technology, eindhoven, 2009.
4.p. e. hart, n. j. nilsson, and b. raphael. a formal basis for the heuristic
determination of minimum cost paths in graphs. ieee trans. syst. sci. and
cybernetics , ssc-4(2):100{107, 1968.
5.a.h.m. hofstede, w.m.p. van der aalst, m. adams, and n. russell. modern
business process automation . springer-verlag, 2010.
6.j. kurt, l. m. kristensen, and l. wells. coloured petri nets and cpn tools for
modelling and validation of concurrent systems. international journal on software
tools for technology transfer (sttt) , 9(3-4):213{254, june 2007.
7.j. muoz-gama and j. carmona. a fresh look at precision in process confor-
mances. in proceedings of the 8th international conference on business process
management (bpm 2010) , 2010.
8.m. pesic. constraint-based work°ow management systems: shifting control to
users . phd thesis, eindhoven university of technology, eindhoven, 2008.
9.a. rozinat. process mining: conformance and extension . phd thesis, eindhoven
university of technology, eindhoven, 2010.
10.a. rozinat, i.s.m. de jong, c.w. gunther, and w.m.p. van der aalst. confor-
mance analysis of asml's test process. in s. sadiq, m. indulska, m. zur muehlen,
e. dubois, and p. johannesson, editors, proceedings of the second international
workshop on governance, risk and compliance (grcis'09) , volume 459, pages
1{15. ceur-ws.org, 2009.
11.a. rozinat, a.k. alves de medeiros, c.w. gunther, a.j.m.m. weijters, and
w.m.p. van der aalst. the need for a process mining evaluation framework
in research and practice. in a. ter hofstede, b. benatallah, and h.y. paik, edi-
tors, business process management workshops , volume 4928 of lecture notes in
computer science , pages 84{89. springer-verlag, berlin, 2008.
12.s. russel and p. norvig. arti¯cial intelligence: a modern approach . prentice hall,
1st edition, 1995.
13.w.m.p. van der aalst. formalization and veri¯cation of event-driven process
chains. information and software technology , 41(10):639{650, 1999.
14.w.m.p. van der aalst, k.m. van hee, j.m. van der werf, and m. verdonk. auditing
2.0: using process mining to support tomorrow's auditor. computer , 43:90{93,
march 2010.
15.b.f. van dongen and a. adriansyah. process mining: fuzzy clustering and per-
formance visualization. in business process management workshops , volume 43,
pages 158{169. springer berlin heidelberg, 2009.
16.a.j.m.m. weijters, w.m.p. van der aalst, and a.k. alves de medeiros. process
mining with the heuristics miner-algorithm. technical report, eindhoven univer-
sity of technology, eindhoven, 2006. beta working paper series, wp 166.
12