comparative process mining in education: an
approach based on process cubes
wil m.p. van der aalst1;2, shengnan guo1, and pierre gorissen3
1eindhoven university of technology, p.o. box 513, 5600 mb, eindhoven, the
netherlands
w.m.p.v.d.aalst@tue.nl ,s.guo@tue.nl
2international laboratory of process-aware information systems, national
research university higher school of economics (hse),
33 kirpichnaya str., moscow, russia.
3fontys hogescholen, p.o. box 347, 5600 ah, eindhoven, the netherlands
p.gorissen@fontys.nl
abstract. process mining techniques enable the analysis of a wide vari-
ety of processes using event data. for example, event logs can be used to
automatically learn a process model (e.g., a petri net or bpmn model).
next to the automated discovery of the real underlying process, there
are process mining techniques to analyze bottlenecks, to uncover hidden
ineciencies, to check compliance, to explain deviations, to predict per-
formance, and to guide users towards \better" processes. dozens (if not
hundreds) of process mining techniques are available and their value has
been proven in many case studies. however, existing techniques focus on
the analysis of a single process rather than the comparison of dierent
processes. in this paper, we propose comparative process mining using
process cubes . an event has attributes referring to the dimensions of the
process cube. through slicing, dicing, rolling-up, and drilling-down we
can view event data from dierent angles and produce process mining
results that can be compared. to illustrate the process cube concept,
we focus on educational data. in particular, we analyze data of students
watching video lectures given by the rst author. the dimensions of the
process cube allow us to compare the process of students that passed the
course versus the process of students that failed. we can also analyze
dierences between male and female students, between dierent parts of
the course, and between dutch students and international students. the
initial analysis provided in this paper is used to elicit requirements for
better tool support facilitating comparative process mining.
key words: process mining, online analytical processing, learning an-
alytics, comparative process mining
1 introduction
process mining can be seen as the missing link between model-based process
analysis (e.g., simulation and verication) and data-oriented analysis techniques2 wil van der aalst et al.
such as machine learning and data mining [1]. it seeks the \confrontation" be-
tween real event data and process models (automatically discovered or hand-
made). as process mining techniques mature, more ambitious types of analysis
come into reach. whereas classical process mining techniques focus on a single
process, this paper focuses on comparing dierent processes using event data .
in [3], we proposed the notion of process cubes where events and process
models are organized using dierent dimensions. each cell in the process cube
corresponds to a set of events that can be used to discover a process model,
to check conformance, or to discover bottlenecks. the idea is related to the
well-known olap (online analytical processing) data cubes and associated
operations such as slice, dice, roll-up, and drill-down [20]. however, there are
also signicant dierences because of the process-related nature of event data.
for example, process discovery based on events is incomparable to computing
the average or sum over a set of numerical values. moreover, dimensions related
to process instances (e.g. male versus female students), subprocesses (e.g. group
assignments versus individual assignments), organizational entities (e.g. students
versus lecturers), and time (e.g. years or semesters) are semantically dierent
and it is challenging to slice, dice, roll-up, and drill-down process mining results
eciently.
this paper focuses on comparative process mining using process cubes . we
discuss the main challenges related to comparative process mining. to do this, we
use a data set describing behavior of students taking the \business information
systems" (2ii05) course given at eindhoven university of technology. the data
set contains two types of events: (1) events generated by students watching
recorded video lectures and (2) events generated by students making exams.
to understand dierences in behavior among dierent student groups we apply
comparative process mining and sketch the possible dimensions of the process
cube.
the remainder is organized as follows. in section 2 we briey introduce the
process mining spectrum. section 3 denes the process cube notion as a means
to view event data from dierent angles. then we discuss a concrete case study
analyzing the way students watch recorded lectures and correlate this with exam
results (section 4). section 5 lists the main requirements and open challenges.
related work is briey discussed in section 6. section 7 concludes the paper.
2 process mining
process mining provides a powerful way to analyze operational processes based
on event data. unlike classical purely model-based approaches, process mining
is driven by \raw" observed behavior instead of assumptions or aggregate data.
unlike classical data-driven approaches, it is truly process-oriented and relates
events to high-level end-to-end process models.
normally, event logs serve as the starting point for process mining. an event
log can be viewed as a multiset of traces . each trace describes the life-cycle of
a particular case (i.e., a process instance ) in terms of the activities executed.comparative process mining in education 3
every horizontal line 
corresponds to a 
student (287 students)
a red dots refers to an 
exam attemptcourse instance 
running from january 
2011 until august 2011
a non-red dots refers to a student 
viewing a particular lecture (each 
lecture has a unique color) time runs from left to 
right (period of 
approximately 3 years)each dot refers to 
an event (6744 
events in total)
fig. 1. dotted chart showing all events related to the course business information
systems (2ii05). the dotted chart was created using one of the over 600 prom plug-
ins (cf. www.processmining.org).
often event logs store additional information about events, e.g., the resource
(i.e., person or device) executing or initiating the activity, the timestamp of the
event, or data elements recorded with the event.
process mining has been applied in a wide variety of organizations (e.g.,
banks, hospitals, municipalities, governmental agencies, webshops, and high-tech
system manufacturers). moreover, there are dozens of process mining techniques
answering a wide variety of questions [1]. due to space restrictions we can only
illustrate a fraction of the available process mining techniques. to do so, we
use a concrete data set involving two types of events recorded for students that
took the business information systems (2ii05) course at eindhoven university
of technology from 2009 until 2014. a view event refers to a student watching
a particular lecture. an exam attempt event refers to a student taking an exam.
since the course is quite challenging, it is not uncommon that students need to
resit the 2ii05 exam multiple times. there are at least two exams per year. the
initial log contains 6744 events generated by 287 students.
figure 1 shows a so-called dotted chart taking the viewpoint that each student
corresponds to a case (i.e., process instance). the dotted chart has 287 horizontal
lines each corresponding to a student. the dots along such a line dene the
corresponding trace. the color of the dot refers to the corresponding activity,
e.g., viewing a particular lecture. the red dots in figure 1 refer to exam attempts.
it can be seen that some students need to take multiple exams and that students4 wil van der aalst et al.
tend to watch irregularly. note that the video lectures are an additional service
to the students (i.e., next to regular lectures).
let us zoom in on the group of 47 students taking the course in the period
january 2011 - august 2011. these students took the exam on 21-6-2011 and/or
the retake exam on 16-8-2011. there were 24 lectures (two lectures per week)
in the period from january until may 2011. students could watch the lectures
via an internet connection soon after recording. for example, activity \2ii05
college 11b" refers to the second lecture in the 11th week. figure 2 shows a
process model discovered for this event log. indeed students tend to watch the
videos in chronological order. however, figure 2 only considers the most frequent
paths. the actual process is more \spaghetti-like".
we have made a process model having 24 viewing activities in sequence
followed by an exam. hence, the model only allows for the trace h\2ii05 college
1a", \2ii05 college 1b", \2ii05 college 2a", \2ii05 college 2b", :::, \exam"i.
using prom we can check the conformance of such a model in various ways. for
example, we can compute alignments that map the traces in the event log to
valid paths in the model [5, 10]. figure 3 shows four such alignments. overall,
the tness is low (0 :33) showing that despite the tendency to watch lectures
in the expected order, few students do so consistently. also the times at which
students watch the videos show a lot of variation. for example, it can be noted
that, other than just before the exam, students rarely watch video lectures in
the second half of the course.
3 process cubes
figures 1, 2 and 3 show some example results computed for a given event log, i.e.,
a collection of events. however, often the goal is to compare dierent variants
of the same process or to zoom in on particular parts or aspects of the process.
olap (online analytical processing) tools aim to support this by organizing
data in a cube having multiple dimensions [20]. however, olap is only used for
numerical comparisons, e.g., the average transaction amount in dierent shops
on dierent days in the week. in a process cube [3] we organize events using
dierent dimensions and compute a (process) model per sublog associated to a
cell. this way we can slice, dice, roll-up, and drill-down process mining results
easily.
throughout the paper we assume the following universes [3].
denition 1 (universes). uvis the universe of possible attribute values (e.g.,
strings, numbers, etc.). ?2u vdenotes a missing (\null") value. us=p(uv)
is the universe of value sets. uh=p(us)is the universe of value set collections
(set of sets).
note thatv2uvis a single value (e.g., v= 300),v2usis a set of values
(e.g.,v=fmale;femaleg), andh2uhis a collection of sets. for example,
h=ffx2njx<50g;fx2nj40x<80g;fx2njx70gg.
anevent base is a \raw" collection of events having properties .comparative process mining in education 5
fig. 2. process model created using disco while abstracting from infrequent paths.
there are 24 activities corresponding to the video lectures and one activity correspond-
ing to an exam attempt. the coloring indicates the frequency of the activities.6 wil van der aalst et al.
green steps refer to 
“synchronous moves”, 
i.e., log and model agree
purple steps refer to 
“moves on model”, i.e., the 
student was supposed to 
watch a video, but did not
yellow steps refer to “moves 
on log”, i.e., the student  
watched a video that was 
not the next in line
fig. 3. alignments for four students showing that few students actually watch the
lectures sequentially. the \synchronous moves" show where model and log agree. the
\moves on model" show where the student skipped a video lecture. the \moves on
log" show where the student watched a video lecture that was not next in line.
denition 2 (event base, [3]). anevent base eb= (e;p; )denes a set
ofeventse, a set of event properties p, and a function 2p!(e!u v).
for any property p2p,(p)(denotedp) is a function mapping an event onto
a value for property p. ifp(e) =v, then event e2ehas a property p2pand
the value of this property is v2uv. we write p(e) =?for missing values.
independent of the event base ebwe dene the structure of the process cube.
the structure is fully characterized by the dimensions of the cube.
denition 3 (process cube structure, [3]). aprocess cube structure is a
triplet pcs = (d;type;hier)where:
{dis a set of dimensions,
{ type2d! u sis a function dening the possible set of values for each
dimension, e.g., type (age) =f0;1;2;:::; 120gfor age2d, and
{ hier2d!u hdenes a hierarchy for each dimension such that for any
d2d: type (d) =shier(d).
note that a hierarchy is merely a collection of sets of values. to relate an event
base and a process cube structure, both need to be compatible , i.e., dimensions
should correspond to properties ( dp) and concrete event property values
need to be of the right type ( d(e)2type(d) for anyd2dande2e). moreover,
for process mining we often assume that fcase;activity;time;resourcegd
p, i.e., each event refers to a case and an activity, occurred at a particular time,
and was executed by a particular resource. these properties do not need to becomparative process mining in education 7
decided upfront and can be changed during analysis. for example, the notion of
case may be changed to create another viewpoint (see chapter 4 in [1]).
age{0,1,2, … ,140,? }
{19, 20, … ,140 } {0,1,2, … ,18 }
{0} {140} {1} {18} ... {19}{20}...
staff{peter,sue,ellen,tom, ... }
{peter,sue,..}
{peter} {sue}...“all”
“young” “old”
{ellen} {tom}“all”
“nurse”
{ellen,tom, ...} {ellen, ...}“doctor” “surgeon”
{?}“unknown”
fig. 4. two example hierarchies, both having three levels. the left-hand-side hierar-
chy can be used to group events according to the patient's age. the right-hand-side
hierarchy can be used to group events according to the role of the resource performing
the activity.
to clarify the notion of a process cube structure , let us consider an example
pcs = (d;type;hier).
{d=fpatient id;type;age;activity;sta;time;:::gdenes the set of dimen-
sions.
{type is a function mapping each dimension onto a set of possible values:
{type(patient id) =f99000;99001;:::99999gis the set of patient identiers
(this value canbe used as a case identier),
{type(type) =fgold;silvergis the set of patient types (patients of type gold
have a better insurance allowing for extra privileges),
{type(age) =f0;1;2;:::; 140;?gis the set of possible ages (value \?" denotes
that the age of the patient is unknown),
{type(activity ) =fblood test;doctor visit;xray;handle payment;:::gis the
set of activities,
{type(sta) =fpeter;sue;ellen;tom;:::gis the set of resources (doctors,
nurses, and
{type(time) is the set of possible timestamps.
{hier is a function dening a hierarchy for each dimension:
{hier(opatient id) =ff99000;99001;:::99999g;f99000g;f99001g;f99002g;
:::;f99999gg. the elementf99000;99001;:::; 99999gcan be seen as the
root of the hierarchy, i.e., all possible values. the other singleton elements
can be seen as the leaves of the hierarchy, e.g., the set f99023grepresents
one individual patient.
{hier(type) =ffgold;silverg;fgoldg;fsilvergg. setfgold;silvergcan be seen
as the root of the hierarchy, i.e., all patient types. the singleton fgoldg
refers to patients having special privileges and the singleton fsilvergrefers
to \normal" patients.8 wil van der aalst et al.
{hier(age) =ff0;1;2;:::; 140;?g;f0;1;2;:::; 18g;f19;20;:::; 140g;f0g;f1g;
f2g;:::;f140g;f?ggdenes an age hierarchy with three levels (see figure 4),
e.g., the element f0;1;2;:::; 18grepresents the subset \young".
{hier(activity ) =ffblood test;doctor visit;xray;handle payment;:::g;
fblood testg;fdoctor visitg;:::ggroups all activities in a simple hierarchy,1
{hier(sta) =ffpeter;sue;ellen;tom;:::g;fpeter;sue;:::g;fellen;tom;
:::g;fellen;:::g;fpeterg;fsueg;felleng;ftomg;:::gdenes a role hierar-
chy as shown in figure 4. sta member ellen is both a doctor and a surgeon
and appears in four subsets of hier(sta).
{hier(time) can be used to group timestamps into years, months, weekdays,
days, etc.
figure 4 shows two hierarchies. the arcs are based on inclusion and can be
interpreted as \is a". in this paper we use a rather simplistic, but also general,
notion of hierarchy. only the possible elements of a dimension are mentioned
and no further constraints are given. we do not specify which elements can
be used at the same time (see also [3]). normally, one will make the dierent
levels explicit and only select elements of a given level. we also do not specify
navigation rules and do not explicitly name the sets in a hierarchy. the names
used figure 4 (\all", \young", and \nurse") are not formalized, but should of
course be supported by software tools.
agetype
{silver} {gold}
{peter,sue,... }{ellen,tom, ... }{ellen, ...}
staff
{19, 20, … ,140 } {0,1,2, … ,18 } {?}
fig. 5. process cube view having three selected dimensions: dsel=ftype;age;sta g.
aprocess cube view denes which dimensions are visible and which events
are selected.
1the hier(activity ) hierarchy could be further rened based on some taxonomy. here
we just consider individual activities (singleton sets) and the set of all activities.comparative process mining in education 9
denition 4 (process cube view, [3]). let pcs = (d;type;hier)be a
process cube structure. a process cube view is a pair pcv = (dsel;sel)such
that:
{dseldare the selected dimensions,
{ sel2d!u his a function selecting the part of the hierarchy considered per
dimension. function sel is such that for any d2d: sel(d)hier(d).
figure 5 shows an example of a process cube view. dsel=ftype;age;stag
are the selected dimensions. sel(type) =ffgoldg;fsilvergg,sel(age) =ff0;1;2;
:::;18g;f19;20;:::; 140g;f?gg, and sel(sta) =ffpeter;sue;:::g;fellen;tom;
:::g;fellen;:::gg. note that function selreturns a set of sets for each dimension.
for the non-selected dimensions dndselwe cannot see the value of selin fig-
ure 5, but still these dimensions may have been used for ltering. for example,
it may be that sel(activity ) =ffblood testgg, i.e., only events related to blood
tests are considered. moreover, it could be that sel(type) is used to select events
that happened in 2013 and 2014.
by removing elements from dsel, the number of dimensions is reduced. this
is orthogonal to function selwhich decides on the granularity and ltering of
each dimension. given an event base and a process cube view, we can compute
an event log for every cell in the process cube.
denition 5 (materialized process cube view). let process cube struc-
ture pcs = (d;type;hier)and event base eb = (e;p; )be compatible.
the materialized process cube for some view pcv = (dsel;sel)of pcs is
meb;pcv =f(c;events (c))jc2cellsgwith cells =fc2dsel! u sj
8d2dselc(d)2sel(d)gbeing the cells of the cube and events (c) =fe2ej
8d2dseld(e)2c(d)^ 8d2dd(e)2ssel(d)gthe set of events per cell.
the term \materialized" may be misleading, it is just used to express that,
in order to apply standard process mining techniques, we need to create an event
log (e.g., in xes format [28]) for every cell in the process cube view. figure 5
highlights one of the 18 cells: this cell contains all events corresponding to a
\normal" patient having a unknown age, and performed by a nurse. the events
in this cell can be transformed into an event log and analyzed using process
mining techniques. moreover, results for dierent cells can be compared.
using the above denition we can formalize notions such as slice, dice, roll-up,
and drill-down for process cubes.
denition 6 (slice, [3]). let pcs = (d;type;hier)be a process cube struc-
ture and pcv = (dsel;sel)a view of pcs. for any d2dselandv2sel(d):
slice d;v(pcv ) = (d0
sel;sel0)withd0
sel=dselnfdg, sel0(d) =fvg, and
sel0(d0) =sel(d0)ford02dnfdg.
through slicing, a dimension dis removed. at the same time one value set
vis chosen for the removed dimension.
for example, figure 6 shows slice sta;fpeter ;sue;:::g(pcv ), starting from the
view in figure 5. this new process cube view is the result of slicing using dimen-
sion sta and value setfpeter;sue;:::g, i.e., the sta dimension is no longer10 wil van der aalst et al.
agetype
{silver} {gold}
{19, 20, … ,140 } {0,1,2, … ,18 } {?}
fig. 6. the process cube view after slicing based on dimension sta.
selected and only events performed by nurses are considered in the resulting
view.
denition 7 (dice, [3]). let pcs = (d;type;hier)be a process cube structure
and pcv = (dsel;sel)a view of pcs. let res 2dsel6!u hbe a restriction
such for any d2dom(res): res(d)sel(d). dice res(pcv ) = (dsel;sel0)with
sel0(d) =res(d)ford2dom(res)and sel0(d) =sel(d)ford2dndom(res).
dicing does not remove a dimension, but restricts the values sets for one or
more dimensions.
agetype
{silver} {gold}
{peter,sue,... }{ellen,tom, ... }
staff
{19, 20, … ,140 } {0,1,2, … ,18 }
fig. 7. the result after dicing based on dimensions sta and age.
consider figure 5 again. suppose that we would like to remove events re-
ferring to patients whose age is unknown and that we only consider events per-comparative process mining in education 11
formed by nurses and doctors. hence, dom(res) =fsta;agegbecause these are
the two dimensions we would like to dice. moreover, sel(age) =ff0;1;2;:::;
18g;f19;20;:::; 140gg(note thatf?gwas removed) and sel(sta) =ffpeter;
sue;:::g;fellen;tom;:::gg(note that the surgeon role was removed). the re-
sult is shown in figure 7.
denition 8 (change granularity, [3]). let pcs = (d;type;hier)be a pro-
cess cube structure and pcv = (dsel;sel)a view of pcs. let d2dselandh2
uhsuch that:hhier(d)andsh=ssel(d). chgrd;h(pcv ) = (dsel;sel0)
with sel0(d) =h, and sel0(d0) =sel(d0)ford02dnfdg.
drilling down is an example of an operator for changing the granularity of
the cube, e.g., rening a year into months. however, it is also possible to make
the view more coarse (roll-up).
agetype
{silver,gold}
{peter}{sue }{ellen}
staff
{19, 20, … ,140 } {0,1,2, … ,18 } {?}
fig. 8. the process cube view after changing the granularity of dimensions type and
sta. the type dimension was rolled up (made coarser) and the sta dimension was
rened (drill-down to the level of individual sta members).
figure 8 shows a process cube view that was obtained by changing granularity
of the original view depicted in figure 5. function chgrd;hwas applied twice: the
typedimension was coarsened and sta dimension was rened. events related to
silver and gold patients have been merged, but still the type dimension is visible.
moreover, events are now related to individual sta members rather than roles.
figure 8 now uses the leaves of the sta hierarchy.
through slicing (cf. figure 6), dicing (cf. figure 7), and changing the gran-
ularity (cf. figure 8), we can change the process cube view in figure 5. at any12 wil van der aalst et al.
point in time we can generate an event log per cell and compare the process
mining results. to be able to apply process mining per cell, the classical require-
ments need to be satised, i.e., events need to be (partially) ordered (e.g., based
on some timestamp), one needs to select a case identier to correlate events and
an event classier to determine the activities. see [1, 3, 28] for more information
on process mining, process cubes, and event logs.
based on the denitions in this section we have developed an initial prototype
(called procube ) using the process mining framework prom and the palo olap
toolset [31]. procube runs as a plugin in prom . the plug-in creates sublogs per
cell on-the-y and visualizes process models discovered using the fuzzy miner
[26] and the heuristic miner [45], social networks derived using prom 's social
network miner [7], and dotted charts [42] computed per cell. the prototype has
many limitations (too slow for high-dimensional process cubes, poor visualiza-
tion of the results, and limited support for hierarchies), but nicely illustrates
the concepts. currently, we are working on more mature process cube support
through software.
4 video lectures: a case study
the primary goal of the process cube notion is to facilitate comparison. to il-
lustrate this, we return to the data set described in section 2. at eindhoven
university of technology various lectures are recorded and made available on-
line. the lecture capturing system (lcs) used is mediasite developed by son-
icfoundry. this system is able to provide an audit trail, but does not provide
any form of process mining. we also used a database with exam results to re-
late student performance to viewing behavior. student names were replaced by
anonymous identiers before analysis. our analysis builds on the phd research of
pierre gorissen who analyzed the viewing behavior of students using mediasite
by means of more traditional methods rather than process mining [25].
4.1 data available on video lectures and exams
to understand the data available consider the class diagram shown in figure 9.
acourse has a unique code and a name. the same course may be given multiple
times, e.g., once or twice per year. such a course instance has a start date and an
end date, in-between these dates video lectures are recorded. per course there are
exams . each exam refers to the lastcourse instance given. per course instance
there are one or more corresponding exams (typically a regular exam and an
additional exam for the students that failed). a student may use multiple exam
attempts . such an attempt refers to an exam on a particular day and a student.
students may view lectures, also of earlier course instances. an atomic view
refers to one student and one lecture. per atomic view the interval watched is
recorded, e.g., a student watches the rst 14 minutes of \2ii05 college 11b".
also the time and date at which the student watches the fragment is recorded.comparative process mining in education 13
course
course_name : namecourse_code : idcourse_instance
end_date : datestart_date : datevideo_lecture
recording_date : datetitle_lecture : name1 0..*◄ inst. of
1 0..*◄ part of
exam
date : date1
0..*for ►last ►
◄ first1
11..*0..1
student
name : namestudent_id : idexam_attempt
passed : boolmark : mark1 0..*◄ forview_atomic
interval : intervalviewing_time : datetime1
0..*of ►
gender : gender
nationality : nationality0..*
1makes ►
10..*
has ►
fig. 9. overview of the raw data available.
4.2 identifying events
students can view a lecture in smaller chunks, e.g., a student can fast forward 20
minutes, then watch 5 minutes, go back to be beginning and watch 10 minutes,
etc. therefore, the same student may generate hundreds of atomic views of the
same lecture on the same day. since we would like to have a model at the level
of lectures, we add a new class named \view (derived)" in figure 10. entities of
this class correspond to compositions of atomic views. attribute \nof views" in
figure 10 refers to the number of atomic events and \total duration" is the sum
of all the durations of the corresponding atomic events. we also record the start
time of the rst and last atomic view of the lecture by that student on that day.
based on the available data we propose two types of events: exam attempts
(entities of class \exam attempt") and views (entities of class \view (de-
rived)"). figure 10 shows all the properties of these events. these properties
follow directly from the class model. for example, a view refers to a student
and her properties (id, name, gender, and nationality), a view refers to a video
lecture and its properties (name and recording date). because a video lecture
belongs to a course instance and therefore also to a course, additional properties
can be derived.
4.3 dening the process cube structure and selecting views
the two events types in figure 10 list many properties. when merging both
event types in an event base eb= (e;p; ) we take the union of these. each of
the properties may serve as a dimension in the process cube structure pcs =
(d;type;hier). if a course is composed of dierent parts, function hier can be
used to reect this. also there is a natural hierarchy for the time domain (years,
months, weeks, days, etc.). it is also possible to group exams in a hierarchical14 wil van der aalst et al.
course
course_name : namecourse_code : idcourse_instance
end_date : datestart_date : datevideo_lecture
recording_date : datetitle_lecture : name1 0..*◄ inst. of
1 0..*◄ part of
exam
date : date1
0..*for ►last ►
◄ first1
11..*0..1
student
name : namestudent_id : idexam_attempt
passed : boolmark : mark1 0..*◄ forview_atomic
interval : intervalviewing_time : datetime1
0..*of ►
view (derived)
nof_views : intviewing_date : date
gender : gender
nationality : nationality0..*
1makes ►
10..*
has ►
1 0..*has ►
total_duration : durationcomposed 
of ►1..*
11
of ►
0..*event: exam_attempt
mark : mark
passed : bool
exam.date : date
course.course_code : id
course.course_name : name
course_instance.start_date : date
course_instance.end_date : date
student.student_id : id
student.name : name
student.gender : gender
student.nationality: nationalityevent: view
viewing_date : date
first_aview_st : datetime
last_aview_st : datetime
nof_views : int
total_duration : duration
video_lecture.title_lecture : name
video_lecture.recording_date : date
course_instance.start_date : date
course_instance.end_date : date
course.course_code : id
course.course_name : name
student.student_id : id
student.name : name
student.gender : gender
student.nationality: nationalityfirst_aview_st : datetime
last_aview_st : datetime
fig. 10. the class diagram with the two types of events considered: views and exam
attempts .
manner: a course instance or course can also be viewed as a collection of exams.
this way we obtain a hierarchy consisting of three levels: individual exams,
exams belonging to a course instance, and exams for a course. the video lectures
can also be grouped in a hierarchical manner.
the process cube view pcv = (dsel;sel) denes the cells that we would like
to consider. we can slice the cube to focus on a particular course. for example
we can select only events related to course \2ii05" and remove the dimensions
\course.course code" and \course.course name" from dsel. the process cube
operators dened in section 3 can be used to create the desired view pcv =
(dsel;sel). at any time the view pcv can be materialized resulting in an event
log per cell (sublogs). figure 11 illustrates the overall process. once we have an
event log per cell, we can apply any process mining technique to all cells and
compare the results. this facilitates comparative process mining.
recall that for process mining we often assume that fcase;activity;time;
resourcegd.case(e) is the case associated to event e. there are two obvious
choices: a case is an exam attempt or a case is a student. if a student used three
exam attempts and we assume the rst notion, then the same student will gener-
ate three cases. also other choices are possible, e.g., cases may also correspond to
video lectures or course instances. to simplify the interpretation of the results
in this paper, we assume that case(e) equals the \student.student id" event
attribute in figure 10. for exam events we choose activity (e) to be the string
\exam". for view events we choose activity (e) to be the title of the lecture,
e.g., \2ii05 college 11b". for exam events we choose time(e) to be the date
and time of the exam. for view events we choose time(e) to be the date and
time of viewing. we actually have start and complete events for all activities andcomparative process mining in education 15
course_instance
student.nationalitystudent.gender
process cell
eventnew behaviorprocess cube
cell sublogcases
timemale
germanjan-aug-
2011dimensionmale female
dutch chinese german
process mining 
results per cell
fig. 11. given a process cube view, the cells can be materialized. subsequently, process
mining techniques can be applied to the cell sublogs.
can thus measure the duration of activities. resources seem less relevant here
because the case is a student and hence resource (e) refers to the case itself.
4.4 analyzing process cube views: some examples
assume we have \sliced and diced" the process cube in such a way that we only
consider the course instance of 2ii05 running from january 2011 until august
2011. moreover, dselcontains only the dimensions gender (male of female) and
nationality (dutch or international). this results in four cells. table 1 shows
some results for this process cube view. dutch students tend to watch the video
lectures more frequently and are more likely to pass. students that pass tend to
watch the video lectures more frequently than the ones that do not pass. note
that table 1 is based on just the 47 students that followed this particular course
instance. hence, based on these ndings we cannot (and should not) generalize.
table 1 also shows the average trace tness for each of the four cells. con-
formance checking based on alignments and a sequential idealized process model
are used to compute these numbers (see section 2). the average trace tness is
1 if all the students watch all video lectures in the default order and conclude16 wil van der aalst et al.
with an exam. the dutch students that passed have the highest average trace
tness (0.39). international students and students that failed have a lower aver-
age trace tness. the average trace tness for all students that passed is 0.37.
this is signicantly higher than the average trace tness for all students that
did not pass (which is 0.28).
dutch students dutch students international students international studentsstudents that passed students that passed students that did not pass students that did not pass
fig. 12. four dotted charts based on the simple process cube view having two dimen-
sions.
any process mining algorithm can be applied to the materialized cells of a
process cube view. figure 12 shows dotted charts for each of the four cells also
used in table 1. it shows that the dutch students that passed often took the
rst exam and passed immediately. they also watched the lectures right from the
start. the students that did not pass often skipped the rst exam or even made
table 1. some numerical results based on a simple process cube view having only two
selected dimensions.
dutch student international student
student number of students: 20 number of students: 2
passed events per student: 28.5 events per student: 12
views per student: 13.1 views per student: 4
exams per student: 1.15 exams per student: 2
trace tness: 0.39 trace tness: 0.25
student number of students: 17 number of students: 8
did not events per student: 20.2 events per student: 17.5
pass views per student: 8.7 views per student: 7.1
exams per student: 1.4 exams per student: 1.6
trace tness: 0.29 trace tness: 0.26comparative process mining in education 17
two unsuccessful attempts. it can also be seen that some students systematically
watched the videos to prepare for the exam.
for each cell we can also discover process models using process mining tech-
niques. here, we compare the students that passed (figure 13) with the students
that did not pass (figure 14), i.e., we only use one dimension for comparison.
figure 13 is based on 22 cases and figure 14 is based on 25 cases. hence, it is
not easy to generalize the results. however, there are obvious dierences between
both process models that conrm our earlier ndings. students that pass, tend
to watch the lectures more regularly. for example, students that pass the course
tend to start by watching the rst lecture (see connection from the start node
to \2ii05 college 1a"), whereas students that fail tend to start by making the
exam (see connection from the start node to \exam") rather than watching any
video lectures.
although the small of number students in the selected course instance does
not allow for reliable generalizations, the case study nicely illustrates the ap-
plicability of process cubes for comparative process mining. due to space re-
strictions, we could only present a fraction of the results and touched only a
few of the available dimensions. for example, we also compared dierent courses
instances, investigated dierences in study behavior between male and female
students, etc.
5 requirements and challenges
the case study just presented nicely illustrates the usefulness of process cubes
for comparative process mining. however, the case study also reveals severe
limitations of the current approach and implementation.
5.1 performance
the process cube notion is most useful if the users can interactively \play with
the cube" (slice, dice, drill-down, roll-up, etc.). however, this necessitates a good
performance . there are two potential performance problems: (1) it takes too long
to materialize the cells selected for analysis (i.e., create the event logs) and (2) it
takes too long to compute the process mining results for all selected cells. most
process mining algorithms are linear in the number of cases and exponential in
the number of activities or average trace length. hence, it may be worthwhile to
precompute results. however, if there are many dimensions each having many
possible values, then this is infeasible. in the latter case one also needs to deal
with the sparsity problem [36]. suppose that there are just 10 dimensions each
having just 10 possible values. then, there are 1010cells at the lowest level
of granularity. this means that even if we have one million of events, at least
99.99% of cells will be empty. this creates an enormous overhead if sparsity is
not handled well by the implementation [31].18 wil van der aalst et al.
fig. 13. process model for the students that passed.comparative process mining in education 19
fig. 14. process model for the students that did notpass.20 wil van der aalst et al.
5.2 interpreting the results: comparing graphs
another diculty is the problematic interpretation of the results. the goal of
showing multiple process mining results is to facilitate comparison. however,
this is far from trivial as is illustrated by the four dotted charts in figure 12.
how to highlight dierences and commonalities among multiple dotted charts?
process mining results are often presented as graphs . in earlier sections we
presented a few discovered process models showing only the control-ow. most
discovery algorithms return process models that are graphs (petri nets, bpmn
models, transition systems, markov chains, etc.). moreover, many other types
of mining algorithms create graphs, e.g., organizational graphs, social networks,
or richer process maps also showing data ow and work distribution [1]. the
layout of such graphs is typically not tailored for comparison. see for example
figure 13 where the \exam" activity appears in the upper half of the diagram
and figure 14 where the same activity appears at the bottom of the process
map. to visualize such networks the nodes in the dierent graphs need to be
aligned. assuming that there is a mapping between the nodes of the graphs,
e.g., based on activity labels, there are dierent ways of visualizing such graph
alignments. one can use a \side-by-side" approach where the individual graphs
are shown next to each other. to highlight the aligned nodes one can try to
give related nodes the same relative position. one can also create a \all-in-one"
graph that is the union of all individual graphs and use coloring or annotations
to facilitate the reconstruction of the individual graphs. [15] propose a mixture
of the above two approaches (2.5d layouts). here, the correspondence of aligned
nodes is implied by drawing all 2d layouts simultaneously. the third dimension is
used to place corresponding nodes on top of each other. the all-in-one approach
seems to be most promising for a binary comparison of two models. here one can
take one of the two graphs as a reference and then highlight the dierences in a
so-called comparison graph. for example, if the arcs in the individual graphs are
annotated with durations, then the comparison graph can show the dierences
highlighting parts that are faster or slower than the reference process.
5.3 renements
next to challenges in performance and visualization, also conceptual renements
of the process cube notion are needed. we use the data set presented in section 4
to illustrate these.
as figure 10 indicates, we have two very distinct types of events (exam
attempts and views) having dierent properties. by taking the union over these
properties, we get many missing values (i.e., p(e) =?for property pand event
e). for example, an exam attempt event does not have a \nof views" property
and a view event does not have a \mark". moreover, one should make sure that
the properties having the same name across dierent event types actually have
the same semantics. for process mining, it makes no sense to only focus on
events of one particular type. end-to-end processes may refer to a wide variety
of activities. to address this problem one could extend the process cube notioncomparative process mining in education 21
into an array of process cubes (one for each type of event) with explicit relations
between them. alternatively, one can also dene dimensions to be irrelevant for
certain event types. for example, when slicing the process cube using the \mark"
dimension (e.g. slice mark ;f8g(pcv )) one would like to retain all view events and
only remove exam attempts having a dierent mark (e.g. not equal to 8). in the
current formalization this can be mimicked by including events having a ?value
when doing a slice or dice action.
when applying process mining, events need to refer to a case and an activ-
ity, and have a timestamp. hence, fcase;activity;timegd. however, these are
notordinary dimensions. for example, we may alter the notion of a case during
analysis. for instance, using the event data described in figure 10, we can rst
consider students to be the cases and later change the case notion into exam
attempts. we can investigate the study progress of a group of students across
dierent courses (i.e., a case should refer to a student). we can also investigate
the results for a particular exam (i.e., a case refers to an exam attempt). sim-
ilarly, we can change the activity notion. for example, in our analysis we did
not distinguish between dierent exams when naming activities ( activity (e) =
\exam"). we could also have opted for dierent activity names depending on
the exam (date and/or course). the process cube should support various case
and activity notions and not consider these to be xed upfront.
the same event may appear in multiple cells, e.g., organizational units may
partially overlap and subprocesses may have common interface activities [3]. the
notion of hierarchy should be as general as described in section 3 to allow for
this.
a case is dened as a collection of events. hence, a case cannot have zero
events, because it will simply not appear in the process cube. this may lead to
incorrect or misleading interpretations. on the one hand, some process mining
algorithms cannot handle empty traces. on the other hand, also empty traces
contain information. see for example the importance of empty traces in de-
composed process mining [2]. now all dimensions in pcv are event properties.
however, some properties clearly reside at the case level . for example, a view
event in figure 10 has as property the gender of the student that viewed the lec-
ture. however, this is more a property of the case (i.e., student) rather than the
event (i.e., view). as a result, information is replicated across events. hence, it
may be useful to distinguish between case dimensions and event dimensions in a
process cube. moreover, it is often useful to exploit derived case information. for
example, we may want to use the number of failed exam attempts or ow time.
generally speaking processes are executed within a particular context [6], and
events and cases may need to be enriched with derived context information. for
an evente, we may want to know the utilization level of the resources involved
in the execution of e, and insert this utilization level as another dimension. for
a case, we may want to know the relative duration compared to other cases and
insert it as a dimension at the case level.22 wil van der aalst et al.
6 related work
see [1] for an introduction to process mining and the process mining manifesto
[27] for the main challenges in process mining. for example, dozens of process
discovery [1, 8, 9, 13, 23, 14, 18, 19, 21, 24, 33, 41, 29, 30, 45, 46] and conformance
checking [5, 10, 11, 12, 16, 22, 24, 34, 35, 39, 44] approaches have been proposed
in literature. this paper is not about new process mining techniques, but builds
on the notion of process cubes introduced in [3]. process cubes are related to the
well-known olap (online analytical processing) cubes [20] and large process
model repositories [38].
7 conclusion
as process mining techniques are maturing and more event data become avail-
able, we no longer want to restrict analysis to a single process. we would like
compare dierent variants of the process or dierent groups of cases. organiza-
tions are interested in comparative process mining to understand how processes
can be improved. we propose to use process cubes as a way to organize event
data in a multi-dimensional data structure tailored towards process mining .
to illustrate the process cube concept, we used a data set containing partial
information about the study behavior of students. when do they view video lec-
tures? what is the eect of viewing these lectures on the exam results? learning
analytics is the broader eld that aims to answer such questions. it is dened
as \the gathering and analysis of and reporting on data relating to students
and their environment for the purpose of gaining a better understanding of and
improving education and the environment in which it is provided" [40]. the
terms learning analytics (la) and educational data mining (edm) are used
interchangeably and both advocate the intelligent use of event data [17]. al-
though pechenizkiy et al. explored the use of process mining in the context of
la and edm, most of the existing analysis approaches are not process-centric
[37, 43, 17]. we consider the comparison of the learning processes inside and be-
tween courses as an essential ingredient for a better understanding of the study
behavior of students.
the results presented in this paper are only the starting point for a more
comprehensive analysis of learning behavior. first of all, we would like to address
the foundational challenges described in section 5 (i.e., rening the process cube
concept and improving performance in higher-dimensional cubes). currently,
major implementation eorts are ongoing to provide better support for process
cubes. we are developing a solution embedded in prom (work of shengnan
guo) and a solution based on database technology calling prom plug-ins from
outside prom (work of alfredo bolt). the latter solution is related to calling
prom plug-ins from other tools like rapidminer [32] and knime. next, we
would like to apply the process cube notion to all video lectures recorded at
eindhoven university of technology and oer such an in-depth analysis as a
service for teachers and students. finally, we would like to apply comparativecomparative process mining in education 23
process mining based on process cubes to new data sets. for example, we will use
process cubes to analyze the massive open online course (mooc) on \process
mining: data science in action" [4]. moreover, we envision that more and more
data on learning behavior will become available from very dierent sources. this
supports our quest to store event data in such a way that interactive analysis
becomes possible. of course there are also serious privacy concerns. students
should be aware of what is recorded and be able to use it to their advantage.
for teachers there is often no need to know the progress of individuals. often
it is sucient to understand the eectiveness of lectures and teaching material
at a group level. only when students give their consent, one should use the
information at the level of individual students.
references
1. w.m.p. van der aalst. process mining: discovery, conformance and enhancement
of business processes . springer-verlag, berlin, 2011.
2. w.m.p. van der aalst. decomposing petri nets for process mining: a generic
approach. distributed and parallel databases , 31(4):471{507, 2013.
3. w.m.p. van der aalst. process cubes: slicing, dicing, rolling up and drilling
down event data for process mining. in m. song, m. wynn, and j. liu, editors,
asia pacic conference on business process management (ap-bpm 2013) , vol-
ume 159 of lecture notes in business information processing , pages 1{22. springer-
verlag, berlin, 2013.
4. w.m.p. van der aalst. process mining: data science in action. coursera course,
november 2014. https://www.coursera.org/course/procmin.
5. w.m.p. van der aalst, a. adriansyah, and b. van dongen. replaying history
on process models for conformance checking and performance analysis. wires
data mining and knowledge discovery , 2(2):182{192, 2012.
6. w.m.p. van der aalst and s. dustdar. process mining put into context. ieee
internet computing , 16(1):82{86, 2012.
7. w.m.p. van der aalst, h.a. reijers, and m. song. discovering social networks
from event logs. computer supported cooperative work , 14(6):549{593, 2005.
8. w.m.p. van der aalst, v. rubin, h.m.w. verbeek, b.f. van dongen, e. kindler,
and c.w. g unther. process mining: a two-step approach to balance between
undertting and overtting. software and systems modeling , 9(1):87{111, 2010.
9. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
10. a. adriansyah, b. van dongen, and w.m.p. van der aalst. conformance checking
using cost-based fitness analysis. in c.h. chi and p. johnson, editors, ieee
international enterprise computing conference (edoc 2011) , pages 55{64. ieee
computer society, 2011.
11. a. adriansyah, b.f. van dongen, and w.m.p. van der aalst. towards robust con-
formance checking. in m. zur muehlen and j. su, editors, bpm 2010 workshops,
proceedings of the sixth workshop on business process intelligence (bpi2010) ,
volume 66 of lecture notes in business information processing , pages 122{133.
springer-verlag, berlin, 2011.24 wil van der aalst et al.
12. a. adriansyah, n. sidorova, and b.f. van dongen. cost-based fitness in confor-
mance checking. in international conference on application of concurrency to
system design (acsd 2011) , pages 57{66. ieee computer society, 2011.
13. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ow logs. in sixth international conference on extending database technology ,
volume 1377 of lecture notes in computer science , pages 469{483. springer-
verlag, berlin, 1998.
14. r. bergenthum, j. desel, r. lorenz, and s. mauser. process mining based on
regions of languages. in g. alonso, p. dadam, and m. rosemann, editors, inter-
national conference on business process management (bpm 2007) , volume 4714
oflecture notes in computer science , pages 375{383. springer-verlag, berlin,
2007.
15. s. brasch, g. fuellen, and l. linsen. venlo: interactive visual exploration
of aligned biological networks and their evolution. in l. linsen, h. hagen,
b. hamann, and h. hege, editors, visualization in medicine and life sciences ii ,
mathematics and visualization, pages 231{249. springer-verlag, berlin, 2012.
16. t. calders, c. guenther, m. pechenizkiy, and a. rozinat. using minimum de-
scription length for process mining. in acm symposium on applied computing
(sac 2009) , pages 1451{1455. acm press, 2009.
17. t. calders and m. pechenizkiy. introduction to the special section on educational
data mining. sigkdd explorations newsletter , 13(2):3{6, 2012.
18. j. carmona and j. cortadella. process mining meets abstract interpretation. in
j.l. balcazar, editor, ecml/pkdd 210 , volume 6321 of lecture notes in articial
intelligence , pages 184{199. springer-verlag, berlin, 2010.
19. j. carmona, j. cortadella, and m. kishinevsky. a region-based algorithm
for discovering petri nets from event logs. in business process management
(bpm2008) , pages 358{373, 2008.
20. s. chaudhuri and u. dayal. an overview of data warehousing and olap tech-
nology. acm sigmod record , 26(1):65{74, 1997.
21. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215{249, 1998.
22. j.e. cook and a.l. wolf. software process validation: quantitatively measuring
the correspondence of a process to a model. acm transactions on software
engineering and methodology , 8(2):147{176, 1999.
23. w. gaaloul, k. gaaloul, s. bhiri, a. haller, and m. hauswirth. log-based transac-
tional workow mining. distributed and parallel databases , 25(3):193{240, 2009.
24. s. goedertier, d. martens, j. vanthienen, and b. baesens. robust process dis-
covery with articial negative events. journal of machine learning research ,
10:1305{1340, 2009.
25. p. gorissen. facilitating the use of recorded lectures: analysing students' inter-
actions to understand their navigational needs . phd thesis, eindhoven university
of technology, june 2013.
26. c.w. g unther and w.m.p. van der aalst. fuzzy mining: adaptive process sim-
plication based on multi-perspective metrics. in g. alonso, p. dadam, and
m. rosemann, editors, international conference on business process management
(bpm 2007) , volume 4714 of lecture notes in computer science , pages 328{343.
springer-verlag, berlin, 2007.
27. ieee task force on process mining. process mining manifesto. in bpm work-
shops , volume 99 of lecture notes in business information processing . springer-
verlag, berlin, 2011.comparative process mining in education 25
28. ieee task force on process mining. xes standard denition. www.xes-
standard.org, 2013.
29. s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering block-
structured process models from event logs: a constructive approach. in j.m.
colom and j. desel, editors, applications and theory of petri nets 2013 , volume
7927 of lecture notes in computer science , pages 311{329. springer-verlag, berlin,
2013.
30. s.j.j. leemans, d. fahland, and w.m.p. van der aalst. discovering block-
structured process models from event logs containing infrequent behaviour.
in n. lohmann, m. song, and p. wohed, editors, business process management
workshops, international workshop on business process intelligence (bpi 2014) ,
volume 171 of lecture notes in business information processing , pages 66{78.
springer-verlag, berlin, 2014.
31. t. mamaliga. realizing a process cube allowing for the comparison of event
data. master's thesis, eindhoven university of technology, eindhoven, 2013.
32. r. mans, w.m.p. van der aalst, and e. verbeek. supporting process mining
workows with rapidprom. in l. limonad and b. weber, editors, business pro-
cess management demo sessions (bpmd 2014) , volume 1295 of ceur workshop
proceedings , pages 56{60. ceur-ws.org, 2014.
33. a.k. alves de medeiros, a.j.m.m. weijters, and w.m.p. van der aalst. genetic
process mining: an experimental evaluation. data mining and knowledge dis-
covery , 14(2):245{304, 2007.
34. j. munoz-gama and j. carmona. a fresh look at precision in process confor-
mance. in r. hull, j. mendling, and s. tai, editors, business process management
(bpm 2010) , volume 6336 of lecture notes in computer science , pages 211{226.
springer-verlag, berlin, 2010.
35. j. munoz-gama and j. carmona. enhancing precision in process conformance:
stability, condence and severity. in n. chawla, i. king, and a. sperduti, editors,
ieee symposium on computational intelligence and data mining (cidm 2011) ,
pages 184{191, paris, france, april 2011. ieee.
36. i. naydenova and k. kaloyanova. sparsity handling and data explosion in olap
systems. in mediterranean conference on information systems (mcis 2010) ,
page 62. ais electronic library, 2010.
37. m. pechenizkiy, n. trcka, e. vasilyeva, w.m.p. van der aalst, and p. de bra.
process mining online assessment data. in c. romero, s. ventura, m. pech-
enizkiy, and r. baker, editors, educational data mining (edm 2009) , pages 279{
288. www.educationaldatamining.org, 2009.
38. m. la rosa, h.a. reijers, w.m.p. van der aalst, r.m. dijkman, j. mendling,
m. dumas, and l. garcia-banuelos. apromore: an advanced process model
repository. expert systems with applications , 38(6):7029{7040, 2011.
39. a. rozinat and w.m.p. van der aalst. conformance checking of processes based
on monitoring real behavior. information systems , 33(1):64{95, 2008.
40. g. siemens and r. baker. learning analytics and educational data mining:
towards communication and collaboration. in proceedings of the international
conference on learning analytics and knowledge (lak '12) , pages 252{254, new
york, usa, 2012. acm.
41. m. sole and j. carmona. process mining from a basis of regions. in j. lilius and
w. penczek, editors, applications and theory of petri nets 2010 , volume 6128 of
lecture notes in computer science , pages 226{245. springer-verlag, berlin, 2010.26 wil van der aalst et al.
42. m. song and w.m.p. van der aalst. supporting process mining by showing events
at a glance. in k. chari and a. kumar, editors, proceedings of 17th annual
workshop on information technologies and systems (wits 2007) , pages 139{145,
montreal, canada, december 2007.
43. n. trcka, m. pechenizkiy, and w.m.p. van der aalst. chapter 9: process mining
from educational data. in c. romero, s. ventura, m. pechenizkiy, and r. baker,
editors, handbook of educational data mining , data mining and knowledge dis-
covery series, pages 123{142. taylor and francis, 2010.
44. j. de weerdt, m. de backer, j. vanthienen, and b. baesens. a robust f-measure
for evaluating discovered process models. in n. chawla, i. king, and a. sperduti,
editors, ieee symposium on computational intelligence and data mining (cidm
2011) , pages 148{155, paris, france, april 2011. ieee.
45. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.
46. j.m.e.m. van der werf, b.f. van dongen, c.a.j. hurkens, and a. serebrenik.
process discovery using integer linear programming. fundamenta informaticae ,
94:387{412, 2010.