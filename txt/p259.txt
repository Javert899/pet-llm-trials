process mining and security:
detecting anomalous process executions
and checking process conformance
w.m.p.vanderaalstanda.k.a.demedeiros
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
{w.m.p.v.d.aalst, a.k.medeiros }@tm.tue.nl
abstract. one approach to secure systems is through the analysis of
audit trails. an audit trail is a record of all events that take place ina system and across a network, i.e., it provides a trace of user/system
actions so that security events can be related to the actions of a speciﬁc
individual or system component. audit trails can be inspected for thepresence or absence of certain patterns. this paper advocates the use of
process mining techniques toanalyzeaudittrailsforsecurityviolations.it
is shown how a speciﬁc algorithm, called the α-algorithm, can be used to
support security eﬀorts at various levels ranging from low-level intrusion
detection to high-level fraud prevention.
keywords : process mining, security, audit trails, pattern discovery, data mining, petri
nets.
1 introduction
fueled by the omnipresence of event logs in transactional information systems
(cf. wfm, erp, crm, scm, and b2b systems), process mining has becomea vivid research area [5,6]. until recently, the information in these event logs
was rarely used to analyze the underlying processes. process mining aims at
improvingthisbyprovidingtechniquesandtoolsfordiscoveringprocess,control,data, organizational, and social structures from event logs, i.e., the basic idea
of process mining is to diagnose processes by mining event logs for knowledge.
so far, process mining research has focussed on process discovery and process
improvement. in this paper, we focus on the application of process mining to
securityissues.
whenconsideringanenterpriseinformationsystem,securityplaysaroleat
diﬀerent levels, i.e., from the level of unix processes to the level of interorga-
nizationalbusinessprocesses.securitypoliciesmayrefertothingsrangingfromcryptography and role-based access control to auditing and the four-eyes prin-
ciple.securityviolationsmaybeconductedbyhackersbutalsobywhite-collar
criminals,cf.thediscussionson“corporategovernance”followingtheenronandparmalat scandals). literature on security can be split into computer security
[11]andauditing[31].althoughcomputersecurityandauditingareatverydif-
ferentlevels,theabsenceorpresenceofcertainbehavioralpatternsmayindicatesecurityviolations. therefore, audit trailscanbeuseful.fortunately, many en-
terpriseinformationsystemsstorerelevanteventsinsomestructuredform.forexample, workﬂow management systems typically register the start and com-
pletion of activities [3]. erp systems like sap log all transactions, e.g., users
ﬁllingoutforms,changingdocuments,etc.business-to-business(b2b)systemslog the exchange of messages with other parties. call center packages but also
general-purposecrmsystemsloginteractionswithcustomers.theseexamples
show that many systems have some kind of event logoften referred to as “au-
dittrail”,“history”,“transactionlog”,etc.[5,8,21,32].theeventlogtypically
containsinformationabouteventsreferringtoan activityanda case.thecase
(alsonamedprocessinstance)isthe“thing”whichisbeinghandled,e.g.,acus-tomerorder,ajobapplication, aninsuranceclaim,abuildingpermit,etc.the
activity(alsonamedtask,operation,action,orwork-item)issomeoperationon
thecase.typically,eventshavea timestampindicatingthetimeofoccurrence.
moreover,eventlogstypicallyalsocontaininformationontheactor,i.e.,person
orsystemcomponent,executingorinitiatingtheevent.wewillrefertosuchanactorasthe originatororperformer.basedonthisinformationseveraltoolsand
techniquesforprocessmininghavebeendeveloped[2,4,5,7,8,13,22,23,28,32,
35].
processminingisusefulforatleasttworeasons.firstofall,itcouldbeused
as a tool to ﬁnd out how people and/or procedures really work. consider forexampleprocessessupportedbyanerpsystemlikesap(e.g.,aprocurement
process).suchasystemlogsalltransactionsbutinmanycasesdoesnotenforce
aspeciﬁcwayofworking.insuchanenvironment,processminingcouldbeused
togaininsightintheactualprocess.anotherexamplewouldbetheﬂowofpa-
tientsinahospital.notethatinsuchanenvironmentallactivitiesareloggedbutinformationabouttheunderlyingprocessistypicallymissing.inthiscontextit
is important to stress that management information systems provide informa-
tionaboutkeyperformanceindicatorslikeresourceutilization,ﬂowtimes,andservicelevelsbut notabouttheunderlyingbusinessprocesses(e.g.,causalrela-
tions,orderingofactivities,etc.).second,processminingcouldbeusedfor delta
analysis,i.e.,comparingtheactualprocesswithsomepredeﬁnedprocess.note
thatinmanysituationsthereisadescriptiveorprescriptiveprocessmodel.such
amodelspeciﬁeshowpeopleandorganizationsareassumed/expectedtowork.
bycomparingthedescriptiveorprescriptiveprocessmodelwiththediscoveredmodel,discrepanciesbetweenbothcanbedetectedandusedtoimprovethepro-
cess.considerforexampletheso-calledreferencemodelsinthecontextofsap.
thesemodelsdescribehowthesystemshouldbeused.usingprocessminingitispossibleto verifywhether this isthecase.infact, processmining could also
be used to compare diﬀerent departments/organizations using the same erp
system.
clearly,bothaspects(discoveryanddeltaanalysis)arerelevantforcomputer
security and auditing. for example, in [18] an approach for intrusion detection
is presented. this method inspects audit trails and uses ﬁxed-length patterns
to distinguish self(i.e., normal process execution) from other(i.e., a potentialsecurity violation). in [36] this is extended to variable length patterns. unfor-
tunately, approaches such as [18,36] do not consider the process structure andareunabletodetectparallelismandcausality.therefore,weexploretheconcept
of process mining and one algorithm in particular (the α-algorithm, [7]) in the
contextofsecurity.
the remainder of this paper is organized as follows. section 2 introduces
the concept of process mining. section 3 introduces the basic notation and
presents the basic α-algorithm. then the paper focuses on two problems: de-
tecting anomalous process executions (section 4) and checking process con-
formance(section 5). section 6 provides some related work. finally, section 7
concludesthepaper.
2 process mining: an overview
thegoalofprocessminingistoextractinformationaboutprocessesfromtrans-
actionlogs[5].weassumethatitispossibletorecordeventssuchthat(i)each
eventreferstoan activity(i.e.,awell-deﬁnedstepintheprocess),(ii)eachevent
refers to a case(i.e., a process instance), (iii) each event can have a performer
alsoreferredtoas originator(theactorexecutingorinitiatingtheactivity),and
(iv)eventshavea timestampandaretotallyordered.table1showsanexample
of a log involving 19 events, 5 activities, and 6 originators. in addition to the
information shown in this table, some event logs contain more information on
thecaseitself,i.e.,dataelementsreferringtopropertiesofthecase.forexample,thecasehandlingsystemflowerlogseverymodiﬁcationofsomedataelement.
case id activity id originator timestamp case id activity id originator timestamp
case 1 activity a john 9-3-2004:15.01 case 5 activity a sue10-3-2004:13.05
case 2 activity a john 9-3-2004:15.12 case 4 activity c carol 11-3-2004:10.12
case 3 activity a sue9-3-2004:16.03 case 1 activity d pete11-3-2004:10.14
case 3 activity b carol 9-3-2004:16.07 case 3 activity c sue11-3-2004:10.44
case 1 activity b mike 9-3-2004:18.25 case 3 activity d pete11-3-2004:11.03
case 1 activity c john 10-3-2004:9.23 case 4 activity b sue11-3-2004:11.18
case 2 activity c mike10-3-2004:10.34 case 5 activity e clare 11-3-2004:12.22
case 4 activity a sue10-3-2004:10.35 case 5 activity d clare 11-3-2004:14.34
case 2 activity b john10-3-2004:12.34 case 4 activity d pete11-3-2004:15.56
case 2 activity d pete10-3-2004:12.50
table 1. an event log (audit trail).
eventlogs1suchastheoneshownintable1areusedasthestartingpointfor
mining.wedistinguishthreediﬀerentperspectives:(1)theprocessperspective,(2) the organizational perspective and (3) the case perspective. the process
perspectivefocuses on the control-ﬂow, i.e., the ordering of activities. the goal
ofminingthisperspectiveistoﬁndagoodcharacterizationofallpossiblepaths,
e.g.,expressedintermsofapetrinet[30]orevent-drivenprocesschain(epc)
[23,24].the organizational perspective focusesontheoriginatorﬁeld,i.e.,which
1in the context of security, event logs should be interpreted as audit trails.performersareinvolvedandhowaretheyrelated.thegoalistoeitherstructure
theorganizationbyclassifyingpeopleintermsofrolesandorganizationalunitsortoshowrelationbetweenindividualperformers(i.e.,buildasocialnetwork[9,10,
12,15,19,20,27,29,33,34]).the case perspective focusesonpropertiesofcases.
cases can be characterized by their path in the process or by the originatorsworkingonacase.however,casescanalsobecharacterizedbythevaluesofthe
corresponding data elements. for example, if a case represent a replenishment
orderitisinterestingtoknowthesupplierorthenumberofproductsordered.
aand
-splitb
cand
-join
d
e
(a) the control-flow structure expressed in terms of a petri net.
(b) the organizational structure expressed in
terms of a activity-role-performer diagram.john sue mike carol pete clarerole x role y role zjohn sue
mike
carol peteclare
(c) a sociogram based on transfer of work.
fig. 1.some mining results for the process perspective (a) and organizational (b and
c) perspective based on the event log shown in table 1.
the process perspective is concerned with the “how?” question, the orga-
nizational perspective is concerned with the “who?” question, and the caseperspectiveisconcernedwiththe“what?”question.toillustratetheﬁrsttwo
consider figure 1. the log shown in table 1 contains information about ﬁve
cases (i.e., process instances). the log shows that for four cases (1, 2, 3, and4) the activities a, b, c, and d have been executed. for the ﬁfth case only
three activities are executed: activities a, e, and d. each case starts with the
executionofaandendswiththeexecutionofd.ifactivitybisexecuted,then
also activity cis executed. however, for some cases activity cis executed be-
foreactivityb.basedontheinformationshownintable1andbymakingsomeassumptionsaboutthecompletenessofthelog(i.e.,assumingthatthecasesare
representativeandasuﬃcientlargesubsetofpossiblebehaviorsisobserved),we
can deduce the process model shown in figure 1(a). the model is representedin terms of a petri net [30]. the petri net starts with activity a and ﬁnishes
withactivityd.theseactivitiesarerepresentedbytransitions.afterexecuting
a there is a choice between either executing b and cin parallel or just exe-cutingactivitye.toexecutebandcinparalleltwonon-observableactivities
(and-split and and-join) have been added. theseactivities have been added
for routing purposes only and are not present in the event log. note that forthisexampleweassumethattwoactivitiesareinparalleliftheyappearinany
order.bydistinguishingbetweenstarteventsandcompleteeventsforactivitiesitispossibletoexplicitlydetectparallelism.
figure 1(a) does not show any information about the organization, i.e., it
does not use any information on the people executing activities. however, ta-
ble1showsinformationabouttheperformers.forexample,wecandeducethatactivity a is executed by either john or sue, activity b is executed by john,
sue,mikeorcarol,cisexecutedbyjohn,sue,mikeorcarol,disexecutedby
peteorclare,andeisexecutedbyclare.wecouldindicatethisinformationinfigure1(a).theinformationcouldalsobeusedto“guess”or“discover”organi-
zationalstructures.forexample,aguesscouldbethattherearethreeroles:x,
y,andz.fortheexecutionofarolexisrequiredandjohnandsuehavethisrole. fortheexecution ofbandcrole yisrequiredandjohn,sue,mike and
carol have this role. for the execution of d and e role z is required and pete
andclarehavethisrole.forﬁvecasesthesechoicesmayseemarbitrarybutforlarger data sets such inferences capture the dominant roles in an organization.
the resulting “activity-role-performer diagram” is shown in figure 1(b). the
three“discovered”roleslinkactivitiestoperformers.figure1(c)showsanotherview on the organization based on the transfer of work from one individual to
another,i.e.,notfocusontherelationbetweentheprocessandindividualsbut
onrelationsamongindividuals(orgroupsofindividuals).considerforexample
table 1. although carol and mike can execute the same activities (b and c),
mikeisalwaysworkingwithjohn(cases1and2)andcarolisalwaysworkingwithsue(cases3and4).probablycarolandmikehavethesamerolebutbased
on the small sample shown in table 1 it seems that john is not working with
carolandsueisnotworkingwithmike.
2theseexamplesshowthattheevent
logcanbeusedtoderiverelationsbetweenperformersofactivities,thusresult-
inginasociogram.forexample,itispossibletogenerateasociogrambasedon
thetransfersofworkfromoneindividualtoanotherasisshowninfigure1(c).each node represents one of the six performers and each arc represents that
therehasbeenatransferofworkfromoneindividualtoanother.thedeﬁnition
of “transfer of work from a to b” is based on whether for the same case anactivity executed by a is directly followed by an activity executed by b. for
example,bothincase1and2thereisatransferfromjohntomike.figure1(c)
doesnotshowfrequencies.however,foranalysispurposesthesefrequenciescanbeadded.thearcfromjohntomikewouldthenhaveweight 2.typically, we
do not use absolute frequencies but weighted frequencies to get relative values
between0and1.figure1(c)showsthatworkistransferredtopetebutnotvice
versa.mikeonlyinteractswithjohnandcarolonlyinteractswithsue.clareis
theonlypersontransferringworktoherself.
besidesthe“how?”and“who?”question(i.e.,theprocessandorganization
perspectives),thereisthecaseperspectivethatisconcernedwiththe“what?”
2clearly the number of events in table 1 is too small to establish these assumptions
accurately. however, for the sake of argument we assume that the things that did
not happen will never happen.question. figure 1 does not address this. in fact, focusing on the case perspec-
tive is most interesting when also data elements are logged but these are notlistedintable1.thecaseperspectivelooksatthecaseasawholeandtriesto
establish relations between the various properties of a case. note that some of
thepropertiesmayrefertotheactivitiesbeingexecuted,theperformersworkingon the case, and the values of various data elements linked to the case. using
clusteringalgorithmsitwouldforexamplebepossibletoshowapositivecorre-
lationbetweenthesizeofanorderoritshandlingtimeandtheinvolvementofspeciﬁcpeople.
orthogonal to the three perspectives (process, organization, and case), the
result of a mining eﬀort may refer to logicalissues and/or performance issues.
for example, process mining can focus on the logical structure of the processmodel (e.g., the petri net shown in figure 1(a)) or on performance issues such
as ﬂow time. for mining the organizational perspectives, the emphasis can be
ontherolesorthesocialnetwork(cf.figure1(b)and(c))orontheutilizationofperformersorexecutionfrequencies.
to address the three perspectives and the logical and performance issues
wehavedevelopedasetoftoolsincludingemit[2],thumb[35],andminson
[4]. these tools share a common xml format. for more details we refer tohttp://www.processmining.org.
3 wf-nets and the α-algorithm
thissectioncontainsthemaindeﬁnitionsusedinthe α-algorithm.formorein-
formationonthe α-algorithmanditssupportingdeﬁnitionsthereaderisreferred
to[7].weassumesomebasicknowledgeofpetrinets.readersnotfamiliarwith
basic concepts such as ( p,t,f) as a representation for a petri net, the ﬁring
rule,ﬁringsequences,preset •x,postset x•,boundedness,liveness,reachability,
etc.arereferredto[1,14,30].
3.1 workﬂow nets
before introducing the α-algorithm we brieﬂy discuss a subclass of petri nets
called a workflow nets (wf-nets). this subclass is tailored towards modeling
thecontrol-ﬂowdimensionofaworkﬂow3oranyothercasedrivenprocess,e.g.,
loggingontoasystem.itshouldbenotedthatawf-netspeciﬁesthedynamic
behaviorofasinglecaseinisolation[1].
deﬁnition 3.1. (workﬂow nets) letn=(p,t,f) be a petri net and ¯ta
freshidentiﬁernotin p∪t.nisaworkﬂow net (wf-net)iﬀ:
1.object creation :pcontainsaninputplace isuchthat •i=∅,
2.object completion :pcontainsanoutputplace osuchthat o•=∅,
3.connectedness :¯n=(p,t∪{¯t},f∪{(o,¯t),(¯t, i)})isstronglyconnected,
3note that we use the words workﬂow andprocessinterchangeably.the petri net shown in figure 1 is a wf-net. note that although the net is
notstronglyconnected,the short-circuited netwithtransition ¯tisstronglycon-
nected. even if a net meets all the syntactical requirements stated in deﬁni-
tion3.1,thecorrespondingprocessmayexhibiterrorssuchasdeadlocks,tasks
whichcanneverbecomeactive,livelocks,garbagebeingleftintheprocessaftertermination,etc.therefore,wedeﬁnethefollowingcorrectnesscriterion.
deﬁnition 3.2. (sound) letn=(p,t,f) be a wf-net with input place i
andoutputplace o.nissoundiﬀ:
1.safeness:(n,[i])issafe,
2.proper completion :foranymarking s∈[n,[i]/angbracketright,o∈simplies s=[o],
3.option to complete :foranymarking s∈[n,[i]/angbracketright,[o]∈[n,s/angbracketright,and
4.absence of dead tasks :(n,[i])containsnodeadtransitions.
thesetofallsoundwf-netsisdenoted w.
thewf-netshowninfigure1issound.soundnesscanbeveriﬁedusingstan-
dardpetri-net-basedanalysistechniques[1,3].
mostprocessmodelinglanguagesoﬀerstandardbuildingblockssuchasthe
and-split, and-join, xor-split, and xor-join [3]. these are used to modelsequential,conditional,parallelanditerativerouting.clearly,awf-netcanbe
used to specify the routing of cases, i.e., process instances. tasks, also referred
toas activities,aremodeledbytransitionsandcausaldependenciesaremodeled
by places and arcs. in fact, a place corresponds to a conditionwhich can be
used as pre- and/or post-condition for tasks. an and-split corresponds to atransition with two or more output places, and an and-join corresponds to
a transition with two or more input places. xor-splits/xor-joins correspond
toplaceswithmultipleoutgoing/ingoingarcs.giventhecloserelationbetweentasksandtransitionsweusethetermsinterchangeably.
ourprocessminingresearchaimsatrediscoveringwf-netsfromeventlogs.
however,notallplacesinsoundwf-netscanbedetected.forexampleplacesmaybeimplicitwhichmeansthattheydonotaﬀectthebehavioroftheprocess.
these places remain undetected. therefore, we limit our investigation to wf-
netswithoutimplicitplaces.
deﬁnition 3.3. (implicit place) letn=(p,t,f)beapetrinetwithinitial
marking s.aplace p∈piscalledimplicitin( n,s)ifandonlyif,forallreachable
markings s
/prime∈[n,s/angbracketrightandtransitions t∈p•,s/prime≥•t\{p}⇒s/prime≥•t.4
figure1containsnoimplicitplaces.however,addingaplace pconnectingtran-
sition aanddyields an implicit place. no mining algorithm is able to detect
psince the addition of the place does not change the behavior of the net and
thereforeisnotvisibleinthelog.
for process mining it is very important that the structure of the wf-net
clearlyreﬂectsitsbehavior.therefore,wealsoruleouttheconstructsshownin
4[n,s/angbracketrightis the set of reachable markings of net nwhen starting in marking s,p•is the
set of output transitions of p,•tis the set of input places of t,a n d ≥is the standard
ordering relation on multisets.(i) (ii)
fig. 2.constructs not allowed in swf-nets.
figure 2. the left construct illustrates the constraint that choice and synchro-
nizationshouldnevermeet.iftwotransitionsshareaninputplace,andtherefore
“ﬁght”forthesametoken,theyshouldnotrequiresynchronization.thismeans
thatchoices(placeswithmultipleoutputtransitions)shouldnotbemixedwithsynchronizations.theright-handconstructinfigure2illustratestheconstraint
thatifthereisasynchronizationallprecedingtransitionsshouldhaveﬁred,i.e.,
it is not allowed to have synchronizations directly preceded by an xor-join.wf-nets which satisfy these requirements are named structured workﬂow nets
andaredeﬁnedas:
deﬁnition 3.4. (swf-net) a wf-net n=(p,t,f)i sa n swf-net(struc-
turedworkﬂownet)ifandonlyif:
1. forall p∈pandt∈twith( p, t)∈f:|p•|>1implies |•t|=1.
2. forall p∈pandt∈twith( p, t)∈f:|•t|>1implies |•p|=1.
3. therearenoimplicitplaces.
3.2 the α-algorithm
the starting point for process mining is the event log. a log is a set of traces.
eventtracesandlogsaredeﬁnedas:
deﬁnition 3.5. (event trace, event log) lettbeasetoftasks. σ∈t
∗is
anevent traceandw∈p(t∗)isan event log.5
fromaneventlog,orderingrelationsbetweentaskscanbeinferred.inthecase
ofthe α-algorithm,everytwotasksintheeventlogmusthaveoneofthefollow-
ingfourorderingrelations: >w(follows), →w(causal), /bardblw(parallel)and# w
(unrelated). these ordering relations are extracted based on local information
intheeventtraces.theorderingrelationsaredeﬁnedas:
deﬁnition 3.6. (log-based ordering relations) letwbeaneventlogover
t,i.e., w∈p(t∗).let a, b∈t:
–a>wbifandonlyifthereisatrace σ=t1t2t3...tn−1andi∈{1,...,n −2}
suchthat σ∈wandti=aandti+1=b,
–a→wbifandonlyif a>wbandb/negationslash>wa,
–a#wbifandonlyif a/negationslash>wbandb/negationslash>wa,and
–a/bardblwbifandonlyif a>wbandb>wa.
to ensure the event log contains the minimal amount of information necessary
tominetheprocess,thenotionoflogcompletenessisdeﬁnedas:
5t∗is the set of all sequences that are composed of zero of more tasks from t.p(t∗)
is the powerset of t∗, i.e., w⊆t∗.deﬁnition 3.7. (complete event log) letn=(p,t,f)beasoundwf-net,
i.e.,n∈w.wisan event log of nifandonlyif w∈p(t∗)andeverytrace
σ∈wisaﬁringsequenceof nstartinginstate[ i]andendinginstate[ o],i.e.,
(n,[i])[σ/angbracketright(n,[o]).wisacompleteeventlogof nifandonlyif(1)foranyevent
logw/primeofn:>w/prime⊆>w,and(2)forany t∈tthereisa σ∈wsuchthat t∈σ.
forfigure1,apossiblecompleteeventlog wis{abcd,acbd,aed }.f rom
thiscompletelog,thefollowingorderingrelationsareinferred:
–(follows) a> wb,a> wc,a> we,b> wc,b> wd,c> wb,
c>wdande>wd.
–(causal) a→wb,a→wc,a→we,b→wd,c→wdande→wd.
–(parallel) b/bardblwcandc/bardblwb.
nowwecangivetheformaldeﬁnitionofthe α-algorithmfollowedbyamore
intuitiveexplanation.
deﬁnition 3.8. (mining algorithm α)letwbe an event log over t.t h e
α(w)isdeﬁnedasfollows.
1.tw={t∈t|∃σ∈wt∈σ},
2.ti={t∈t|∃σ∈wt=ﬁrst(σ)},
3.to={t∈t|∃σ∈wt=last(σ)},
4.xw={(a, b)|a⊆tw∧b⊆tw∧∀a∈a∀b∈ba→wb∧∀a1,a2∈aa1#wa2∧
∀b1,b2∈bb1#wb2},
5.yw={(a, b)∈xw|∀ (a/prime,b/prime)∈xwa⊆a/prime∧b⊆b/prime=⇒(a, b)=(a/prime,b/prime)},
6.pw={p(a,b )|(a, b)∈yw}∪{iw,ow},
7.fw={(a, p (a,b ))|(a, b)∈yw∧a∈a}∪{(p(a,b ),b)|(a, b)∈
yw∧b∈b}∪ {(iw,t)|t∈ti}∪ {(t, ow)|t∈to},and
8.α(w)=(pw,tw,fw).
theα-algorithmworksasfollows.first,itexaminestheeventtracesand(step
1)createsthesetoftransitions( tw)intheprocess,(step2)thesetofoutput
transitions( ti)ofthesourceplace,and(step3)thesetoftheinputtransitions
(to)ofthesinkplace6.insteps4and5,the α-algorithmcreatessets( xwand
yw,respectively)usedtodeﬁnetheplacesofthediscoveredwf-net.instep4,
theα-algorithmdiscoverswhichtransitionsarecausallyrelated.thus,foreach
tuple ( a, b)i nxw, each transition in set acausally relates to alltransitions
in set b, and no transitions within a(orb) follow each other in some ﬁring
sequence. these constraints to the elements in sets aandballow the correct
mining of and-split/join and xor-split/join constructs. note that the xor-split/joinrequiresthefusionofplaces.instep5,the α-algorithmreﬁnesset x
w
by taking only the largest elements with respect to set inclusion. in fact, step
5 establishes the exact amount of places the discovered net has (excluding thesource place i
wand the sink place ow). the places are created in step 6 and
connectedtotheirrespectiveinput/outputtransitionsinstep7.thediscovered
6in a wf-net, the source place ihas no input transitions and the sink place ohas no
output transitions.wf-net is returned in step 8. figure 3 shows the result of applying the α-
algorithmtothelogshownintable1,i.e. w={abcd,acbd,aed }.note
thatthe α-algorithmisnotabletodiscovertheand-splitandand-joinshown
infigure1(thesearenotinthelog),butisstillabletoconstructanequivalent
wf-net.
ab
cd e
fig. 3.the wf-net discovered by the α-algorithm (based on table 1).
finally,wedeﬁnewhatitmeansforawf-nettobe rediscovered androughly
characterizetheclassofprocessesforwhichthe α-algorithmworkscorrectly.
deﬁnition 3.9. (ability to rediscover) letn=(p,t,f)beasoundwf-
net,i.e., n∈w,andlet αbeaminingalgorithmwhichmapseventlogsof n
onto sound wf-nets, i.e., α:p(t∗)→w. if for any complete event log wof
ntheminingalgorithmreturns n(modulorenamingofplaces),then αisable
torediscover n.
theorem 3.10. letn=(p,t,f)beasoundswf-netandlet wbeacomplete
eventlogof n.ifforall a, b∈ta•∩• b=∅orb•∩• a=∅,then α(w)=n
modulorenamingofplaces.
note that no mining algorithm is able to ﬁnd names of places. therefore, we
ignoreplacenames,i.e., αisabletorediscover nifandonlyif α(w)=nmodulo
renamingofplaces.alsonotetherequirementnotallowing“shortloops”.usingthereﬁnementdescribedin[26]thisadditionalrequirementcanbeavoided.
4 detecting anomalous process executions
insubsection3.2,wepresentedhowthe α-algorithmcanminethecasesintable
1,anddiscoveraprocess(seefigure3)thatdescribes allpossiblebehaviors.a
similar reasoning holds for security issues if we consider the event traces to be
audit trails,andthe casesase.g. session ids.inthissectionweshow(i)howto
use the α-algorithm to discover the acceptable or normal behavior in systems
and(ii)howtousethediscoverednettodetectundesiredbehavior.
theα-algorithmdiscoversanetthatmodelsallacceptablebehaviorwhenever
thecomplete log givenasinputhas only acceptable audittrailsandthediscovered
net is a sound wf-net. for example, imagine a website that is used to sellproducts.assumeeveryuserinthiswebsitehasashoppingbasketthatcanbe
editedatanytime.iftheshoppingbasketcontainsproductswhentheuserleaves
thewebsite,theuserbasket’sstatusissavedandisretrievedwhentheuserentersthewebsiteagain.possibleuseractionsaredescribedbythewf-netinfigure4.
now,assumewedonotknowthenetinfigure4,butwedohaveacompletelogof
acceptableaudittrails.forinstance,letthisauditlogbe w
ok={“enter, selectproduct, add to basket, cancel order ”, “enter, select product, remove from
basket, cancel ”, “enter, select product, add to basket, continue shopping,
select product, remove from basket, continue shopping, select product, add to
basket, proceed to checkout, fill in delivery info, fill in payment info, provide
password, process order, finish checkout ”, “enter, select product, remove
from basket, proceed to checkout, fill in payment info, fill in delivery info,
provide password, process order, finish checkout ”}.given wokasinput,the
α-algorithmdiscoversthenetshowninfigure4.
sink placesource place
enterselect
productadd to basket
remove from
basketcontinue
shopping
proceed to
checkoutfill in delivery
info
fill in payment
infoprovide
password
process
orderfinish
checkoutcancel
order
fig. 4.example of a process description to buy products at a website.
oncethenetisdiscovered,theconformanceof everynewaudittrailcanbe
veriﬁed by playing the “token game”. note that anomalous audit trails do not
correspond to possible ﬁring sequences in the “token game” for the discovered
net. furthermore, the “token game” detects the point in which the audit traildivergesfromthenormalbehaviorandallowsalsoforthe real timeveriﬁcation
oftrails.forexample,letusverifythenewauditlog w
nok={“enter, select
product, remove from basket, proceed to checkout, fill in delivery info, fillin payment info, provide password, process order, finish checkout ”,“enter,
select product, remove from basket, proceed to checkout, fill in payment info,
fill in delivery info, process order, finish checkout ”}byplayingeverytracein
w
okinthenetinfigure4.theﬁrstaudittrailin wnokisanacceptableone.
note that this trail is notinwok, but it can be generated by the discovered
net.thesecondtrailisananomalousonebecauseitdoesnotcontainthetask
provide password . by playing the “token game”, we see that two tokens get
stuckintheinputplacesof provide password .inotherwords,the“tokengame”
explicitlyshowsthepointwheretheanomalousbehaviorhappened.theemit
toolsupportsthe“tokengame”andindicatesdeadlocksandremainingtokens.
note that the α-algorithm correctly discovered the net in figure 4 without
requiring the “training” complete log wokto show all possible behavior (the
ﬁrsttracein wnokisnotin wok).however,becausethe α-algorithmaimsat
discoveringthe process perspective ,itdoesnotcaptureconstraintsthatrelateto
datainthesystem,likethemaximumnumberoftimesaloopmayiterate.for
theexampleinfigure4,theloopcanbeexecutedanunlimitednumberoftimeswithout violating security issues. nonetheless, if the loop would correspond to
userattemptstologintothesystem,amaximumnumberofloopiterationsmustbeset.ifthisisthecase,thediscoveredwf-netmustbeexplicitlymodiﬁedto
incorporate the required data-related constraints. as a ﬁnal remark, we would
like to point out that the simple idea of playing the “token game” can also beusedwithoutapplyingthe α-algorithm,i.e.,byexplicitlymodelingtheprocess.
however, given the evolving nature of systems and processes, the α-algorithm
is a useful tool to keep the “security process” up-to-date. for example, if anaudit trail “does not ﬁt” but does not correspond to a violation, then it can
be added to the event log used by the α-algorithm. audit trails that seemed
ok,butturnedouttobepotentialsecuritybreachescanberemovedfromthelog.byapplyingthe α-algorithmtothemodiﬁedeventlog,anewandupdated
“securityprocess”canbeobtainedwithoutanymodelingeﬀorts.
5 checking process conformance
the ordering relations can be used to check system properties. in section 4,
a process model is derived from acceptable audit trails. the discovered net is
thenusedtochecknewaudittrails.inthiscase,everyaudittrailmustcomply
with the process. however, sometimes security applies only to a part of the
process. for example, for the process in figure 4, the critical security issue is
to execute the task provide password before process order . in other words,
task provide password should causetask process order .theprocessfragment
for this situation is construct (a) in figure 5. this construct is mapped to the
orderingrelation provide password →process order .thus,givenanauditlog,we
can check if this pattern holds for the system . i.e., considering allaudit trails,
we check if the ordering relations that are equivalent to the desired pattern
hold. back to our example in section 4 and considering an audit log w=
wok∪wnok, we do infer the relation provide password →wprocess order .
thus, we can conclude that the process described by wcontains the pattern
showninfigure5(a).
x y (a) x  y
x
z(b)x  y, x  z,
and y||zyx
z (d)x  z, y  z,
and x||yy
x
z(c)x  y, x  z,
and y#zyx
z (e)x  z, y  z,
and x#y
y
fig. 5.relating the log-based relations >w,→ w,/bardblw,a n d# wto basic petri-net
constructs.
the approach to check process conformance veriﬁes if a pattern holds, but
does not assure this is alwaysthe case. full conformance can be veriﬁed bycombining this approach with the one in section 4. the diﬀerence is that now
we play the “token game” with the subnet . by playing every event trace in the
desired pattern, we check if there is always a causal relation between provide
passwordand process order . note this will not be the case for all trails in w
and the anomalous one will be detected. the main advantage of the approachforcheckingprocessconformanceisthatitdoesnotrequireacompleteauditlog
for the wholeprocess, but only for the tasks involved in the pattern. figure 5
illustratesthebasicpatternsthatcanbeusedtobuildprocessfragments.
6 related work
theideaofprocessminingisnotnew[2,5,7,8,13,22,23,25,28,32,35]andmosttechniques aim at the control-ﬂow perspective. however, process mining is not
limitedtothecontrol-ﬂowperspective.forexample,in[4]weuseprocessmining
techniquestoconstructasocialnetwork.formoreinformationonprocessmining
we refer to a special issue of computers in industry on process mining [6] and
asurveypaper[5].inthispaper,unfortunately,itisimpossibletodojusticetotheworkdoneinthisarea.
thefocusofthispaperisonthe α-algorithm.formoreinformationonthe
algorithm, we refer to [2,7,25,35]. in [26] one of the problems raised in [25] is
tackled(“shortloops”)andshouldbeconsideredasanextensionof[7].
in the security domain there are related papers dealing with intrusion de-
tectionbasedonaudittrails[18,36].thesepaperbreak“normalbehavior”into
smallerpatternsandthencompareactualaudittrailsusingthesepatterns.note
that, unlike the α-algorithm, these approaches do not consider explicit process
models.
therehavebeenmanyformalapproachestowardssecurity,e.g.,usingpetri
nets or process algebras [16,17]. unlike our approach they typically focus on
veriﬁcationofadesignratherthananalyzingtheactualbehavior.
tosupportourminingeﬀortswehavedevelopedasetoftoolsincludingemit
[2],thumb[35],andminson[4].thesetoolsshareacommonxmlformat.for
moredetailswerefertowww.processmining.org.
7 conclusion
inthispaper,weexploredtheapplicationofprocessminingtechniquesinsecu-
rity.first,weintroducedprocessminingandthenwefocusedononealgorithmto mine the process perspective. then we showed the application of this algo-
rithm to security issues. first we discussed the detection of anomalous process
executionsintheminedwf-netbyplayingthe“tokengame”forconcretecases.then,weshowedthatprocessconformancecanbecheckedbycomparingprocess
fragmentswiththediscoveredwf-net.
we would like to emphasize that we consider the application of the α-
algorithm at any level of security, i.e., from low-level intrusion detection tohigh-level fraud presenting. the focus on corporate governance and govern-
mentalregulationssuchas sarbanes-oxley act triggerthedevelopmentoftools
toenforceandchecksecurityatthelevelofbusinessprocesses.webelievethat
organizations will increasingly need to store and monitor audit trails. process
miningtechniquessuchasthe α-algorithmcanassistintheseeﬀorts.
acknowledgements
the author would like to thank ton weijters, boudewijn van dongen, min-seoksong,lauramaruster,ericverbeek,moniquejansen-vullers,hajoreijers,
michaelrosemann,andpetervandenbrandfortheiron-goingworkonprocess
miningtechniquesandtoolsateindhovenuniversityoftechnology.
references
1. w.m.p. van der aalst. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers , 8(1):21–66, 1998.
2. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
modelsfromtimedlogs. iny.han,s.tai,andd.wikarski,editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
3. w.m.p.vanderaalstandk.m.vanhee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
4. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in m. weske, b. pernici, and j. desel, editors,international conference on business process management (bpm 2004) ,l e c t u r e
notes in computer science, springer-verlag, berlin, 2004.
5. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267, 2003.
6. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining ,s p e c i a l
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
7. w.m.p.vanderaalst,a.j.m.m.weijters,andl.maruster. workﬂowmining:dis-
coveringprocessmodelsfromeventlogs. quttechnicalreport,fit-tr-2003-03,
queensland university of technology, brisbane, 2003. (accepted for publication
in ieee transactions on knowledge and data engineering.).
8. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.
9. a.a. bavelas. a mathematical model for group structures. human organization ,
7:16–30, 1948.
10. h.r. bernard, p.d. killworth, c. mccarty, g.a. shelley, and s. robinson. com-
paring four diﬀerent methods for measuring personal social networks. social
networks , 12:179–216, 1990.
11. m. bishop. computer security: art and science . addison-wesley, boston, usa,
2003.
12. r.s.burtandm.minor. applied network analysis: a methodological introduction .
sage, newbury park ca, 1983.13. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
14. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts
in theoretical computer science . cambridge university press, cambridge, uk,
1995.
15. m. feldman. electronic mail and weak ties in organizations. oﬃce: technology
and people , 3:83–101, 1987.
16. r. focardi and r. gorrieri. a classiﬁcation of security properties for process
algebras. journal of computer security , 3(1):5–33, 1995.
17. r. focardi, r. gorrieri, and f. martinelli. a comparison of three authentication
properties. theoretical computer science , 291(3):285–327, 2003.
18. s. forrest, a.s. perelson, l. allen, and r. cherukuri. self-nonself discrimination
in a computer. in proceedings of the 1994 ieee symposium on research in se-
curity and privacy , pages 202–212. ieee computer society press, los alamitos,
california, 1994.
19. l.c. freeman. a set of measures of centrality based on betweenness. sociometry ,
40:35–41, 1977.
20. l.c. freeman. centrality in social networks: conceptual clariﬁcation. social
networks , 1:215–239, 1979.
21. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors,proceedings of 27th international conference on very large data bases
(vldb’01) , pages 159–168. morgan kaufmann, 2001.
22. j.herbst. amachinelearningapproachtoworkﬂowmanagement. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
23. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
24. g. keller and t. teufel. sap r/3 process oriented implementation . addison-
wesley, reading ma, 1998.
25. a.k.a. de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. workﬂow
mining: current status and future directions. in r. meersman, z. tari, and d.c.
schmidt, editors, on the move to meaningful internet systems 2003: coopis,
doa, and odbase , volume 2888 of lecture notes in computer science ,p a g e s
389–406. springer-verlag, berlin, 2003.
26. a.k.a. de medeiros, b.f. van dongen, w.m.p. van der aalst, and a.j.m.m. wei-
jters. process mining: extending the α-algorithm to mine short loops. beta
working paper series, wp 113, eindhoven university of technology, eindhoven,
2004.
27. j.l. moreno. who shall survive? nervous and mental disease publishing com-
pany, washington, dc, 1934.
28. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1–10. ieee computer society press, los alamitos, california, 2000.
29. h. nemati and c.d. barko. organizational data mining: leveraging enterprise
data resources for optimal performance . idea group publishing, hershey, pa,
usa, 2003.30. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
31. j.c. robertson. auditing. irwin, burr ridge, usa, 1993.
32. m. sayal, f. casati, and m.c. shan u. dayal. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb’02) ,
pages 880–883. morgan kaufmann, 2002.
33. j. scott. social network analysis . sage, newbury park ca, 1992.
34. s. wasserman and k. faust. social network analysis: methods and applications .
cambridge university press, cambridge, 1994.
35. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data using little thumb. integrated computer-aided engi-
neering, 10(2):151–162, 2003.
36. a. wespi, m. dacier, and h. debar. intrusion detection using variable-length
audit trail patterns. in h. debar, l. me, and s.f. wu, editors, recent advances
in intrusion detection , volume 1907 of lecture notes in computer science ,p a g e s
110–129. springer-verlag, berlin, 2000.