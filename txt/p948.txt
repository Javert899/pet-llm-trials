 
complex systems informatics and modeling quarterly  
csimq, issue  xx, month 2017, pages xx -xx 
published online by rtu press, https://csimq -journals.rtu.lv  
https://doi.org/ 10.7250/csimq.201 7-xx.xx 
issn: 2255 -9922 online  
 
 human performance-aware scheduling and routing of a
multi-skilled workforce
maikel l. van eck1;?, murat firat1, wim p.m. nuijten1;2, natalia sidorova1, and wil m.p. van der
aalst1
1eindhoven university of technology, the netherlands
2quintiq, utopialaan 25, ‚Äòs-hertogenbosch, the netherlands
fm.l.v.eck,m.firat,w.p.m.nuijten,n.sidorova,w.m.p.v.d.aalst g@tue.nl
abstract. planning human activities within business processes often hap-
pens based on the same methods and algorithms as are used in the area of
manufacturing systems. however, human behaviour is quite different from
machine behaviour. their performance depends on a number of factors, in-
cluding workload, stress, personal preferences, etc. in this paper we describe
an approach for scheduling activities of people that takes into account busi-
ness rules and dynamic human performance in order to optimise the sched-
ule. we formally describe the scheduling problem we address and discuss
how it can be constructed from inputs in the form of business process mod-
els and performance measurements. finally, we discuss and evaluate an im-
plementation for our planning approach to show the impact of considering
dynamic human performance in scheduling.
keywords: scheduling, business process management, dynamic human
performance, mixed integer programming
1 introduction
scheduling is used in the planning of personnel and human activities in different environ-
ments [1,2,3]. traditionally, scheduling problems are often presented as optimisation problems
in the context of manufacturing systems, where a set of jobs is to be assigned to a set of machines
such that the total length of the schedule is minimized. the basic job shop scheduling problem
has since been extended and scheduling problems now exist in many different variations and set-
tings, each with their own characteristics. these variations aim to incorporate the complexity of
the real world in order to increase the applicability of their solutions, but this generally increases
the difÔ¨Åculty of Ô¨Ånding an optimal schedule.
nowadays, the work in many organisations such as hospitals and Ô¨Ånancial institutions is done
according to predeÔ¨Åned business processes [4,5]. these processes specify which activities need to
be executed, in what order and by who [6,7]. the Ô¨Åeld of business process management (bpm)
can be deÔ¨Åned as a discipline involving modeling, automation, execution, control, measurement
and optimization of these business activity Ô¨Çows. therefore, we are interested in incorporating
elements from bpm, such as the use of process models, into human activity scheduling in order to
match the current way of working.
?this research was performed in the context of the impuls collaboration project of eindhoven university
of technology and philips: ‚Äúmine your own body‚Äù.additionally, in the majority of scheduling literature, activity or job durations are assumed to
be Ô¨Åxed [1,2,3]. in reality job durations may vary due to uncertainties in the nature of the pro-
cess such as machine breakdown and accidents, but also due to variations in human performance.
people‚Äôs performance changes dynamically depending on factors such as their experience, stress
and workload [8,9,10,11]. this means that the schedule itself, including the number of breaks and
the order of jobs performed, affects human performance and therefore the realisations of job dura-
tions. hence, we argue that the accuracy of schedules and the timely execution of processes can be
improved by taking a dynamic view of human performance.
in order to take dynamic human performance into account during scheduling, we need to es-
tablish the interactions between performance and the execution of the activities to be scheduled.
part of this information can be gathered by logging the jobs being performed by people and their
duration. other information such the relation between stress and performance can be obtained us-
ing new technological advances and smart sensor technologies [12,13]. these enable unobtrusive
monitoring of personal stress levels to identify sources of stress at work and discover performance
patterns. together, this information could then be taken into account in personal activity scheduling
and perhaps even improve both the health of employees and their performance [14].
in this paper we present a human performance-aware activity planning approach that takes into
account dynamic performance differences to Ô¨Ånd schedules in a setting where the activity workÔ¨Çow
is deÔ¨Åned by process models. the contributions of this paper are the following:
a formal description of a workforce scheduling problem is provided where individual, dynamic
performance differences are taken into account.
the relation between business process management (bpm) and this scheduling problem is
established, showing how the scheduling problem can be constructed from inputs in the form
of business process knowledge.
an evaluation on synthetic data shows that a mixed integer linear programming (milp) so-
lution of the scheduling problem can take into account dynamic human performance to create
schedules where employee workload and efÔ¨Åciency are balanced.
the evaluation also shows that the difÔ¨Åculty of the scheduling problem with dynamic human
performance is not signiÔ¨Åcantly increased compared to scheduling with static performance.
the remainder of this paper is organised as follows: in section 2 we Ô¨Årst formulate the schedul-
ing problem and its characteristics. the related work in the area of workforce scheduling is pre-
sented in section 3. in section 4 we explain how to obtain the scheduling instance parameters
necessary to construct a dynamic human performance-aware scheduling problem in the context of
bpm. then we introduce an milp implementation of the approach in section 5 and we evaluate
the implementation in section 6. finally, in section 7 we conclude the paper and state several areas
for future work.
2 problem description and notation
in this section we Ô¨Årst discuss the modelling of human performance and then formulate our work-
force scheduling and routing problem that takes into account such a performance model. we intro-
duce the notions of procedures and a dynamic human performance efÔ¨Åciency factor in our schedul-
ing problem as extensions to previously studied scheduling and routing problems in the literature,
which are discussed in section 3. we develop the necessary notation accordingly.
2.1 problem setting
as in most scheduling problems, we are interested in obtaining an optimal allocation of a set of
activities over a set of resources, given a number of restrictions and an objective [1,2]. different
from other scheduling settings, we assume that the activities, resources and restrictions are part
2of one or more processes within an organisation. these processes can be described from different
perspectives using process models and organisational models to specify which activities need to be
executed, in what order and by who.
the three most commonly represented process perspectives are the functional ,organisational
andbehavioural perspectives [6,7]. the functional perspective represents the process elements
which are being performed, i.e. the jobs being scheduled. the organisational perspective repre-
sents where and by whom these process elements are performed. the behavioural or control Ô¨Çow
perspective represents the possible orderings in which process elements are performed and other
aspects such as iteration and decision points.
taking these perspectives into account we can derive the required elements of our scheduling
problem in this context. we obviously have a set of jobs to be scheduled and a set of workers
performing these jobs. we also need a set of locations and travel times because one worker may
execute activities at different places, e.g. a surgeon in a hospital moves between working in his of-
Ô¨Åce and the operating rooms. not everybody may perform every activity that needs to be planned,
e.g. a secretary and a manager have different duties, so we assume that workers have different skills
that deÔ¨Åne which jobs they may execute. processes generally have an order to the activities being
performed, e.g. a mortgage application needs to be validated before the mortgage is provided, so
we also assume that there are precedence relations . finally, there are sometimes multiple ways to
achieve the same goal, e.g. replacing or repairing a broken machine, so we deÔ¨Åne a set of choices
between job alternatives. these elements form the starting point of our workforce scheduling prob-
lem, together with a model for the performance of the workers.
there are other possible aspects that can be considered in scheduling problems in addition to
the ones mentioned above [1]. however, including such extensions comes at the cost of additional
complexity in both modelling and the search for scheduling solutions.
2.2 dynamic human performance
it is well know that the performance of people is dynamic and depending on various factors such as
experience, stress and workload [8,9,10,11,13,15]. for some of these factors, e.g. workload there
exist frameworks that can be used to model human performance [15], but for others such as stress
there is no uniÔ¨Åed consensus on how exactly they affect human performance [9].
over the years different models have been proposed to explain how stress affects performance.
a well known model is that of yerkes and dodson, which has been explained to state that perfor-
mance increases as stress or arousal increases, until a point where increased stress will decrease
performance [16]. however, additional research has shown that the yerkes and dodson law of per-
formance cannot be universally applied and additional models have been formulated and tested [9].
for example, westman et al. examined the relationship between stress and performance across a
variety of mental domains and their results supported a negative linear trend between stress and
performance[10].
in the absence of a consensus on the best model to explain the theoretical relationship between
stress and performance, researchers have made progress on measuring these relations in practice.
various physiological measures (e.g. cortisol levels or skin conductance) have been used to get in-
dications of a person‚Äôs stress or a partial proxy, e.g. workload [9,13]. studying these measures can
reveal relations between a process or event and the stress that a person experiences. importantly,
due to new technological advances in smart sensor technologies, people are now able to unobtru-
sively monitor their personal stress levels and become aware of sources of stress or patterns in their
daily lives that lead to stress for themselves [12,13].
the above results in the need to consider the effects of workload and stress in order to improve
the quality and accuracy of schedules for people‚Äôs work. furthermore, the advances in personal
stress measurement and the investigation of relations between stress and speciÔ¨Åc aspects of perfor-
mance lead us to conclude that it is possible to discover personal models that relate stress to the
3efÔ¨Åciency of performing certain tasks [12,13]. such models can subsequently be used in solving
scheduling problems, which to the best of our knowledge has not been considered before.
in this work we assume a model where workers have an efÔ¨Åciency level that varies depending
on the jobs they perform. not all jobs affect the efÔ¨Åciency of a worker equally, e.g. some jobs may
be more tiring or stressful, so we consider an exhaustion ratio for each job. to further take into
account the effects of workload on human performance we assume that there is a certain recovery
rate for the efÔ¨Åciency of workers while they are not working. although the effects of workload
and stress on performance vary between individuals, we assume for simplicity a general model
of the dynamic human performance in our scheduling problem and do not consider individual
differences.
2.3 notation
below we provide a description of the workforce scheduling problem that we consider in this work,
based on the above problem setting and our assumed model of dynamic human performance. the
notation is summarized in table 1 in section 5 and used in the formulation of the mixed integer
linear programming model presented there.
locations we are given a network having a set nof locations where jobs may be processed. the
traveling time needed to go from nton0is denoted by tn;n0withn;n02n .
workers we are given a set wof workers, each having skills and varying efÔ¨Åciency levels as
explained in the following.
skills we are given a set sof skill domains that can be used to deÔ¨Åne which workers can execute
which jobs. the skills of a worker ware given as skw2f0;1gs.
jobs we are given a set jof jobs that need to be scheduled. workers assigned to job j2j
should meet the required skills which are given by srj2ns, i.e.srjspeciÔ¨Åes for each skill
the minimal number of workers needed that posses that skill. we assume that workers can use
their skills simultaneously in all domains while processing a job. additionally, job jcan only start
being processed after its release date rj, and the completion should be not later than due date dj.
finally, a job may be processed in a number of locations in njn , from which one is chosen in
the schedule as the processing location of the job, denoted as locj2n j.
efÔ¨Åciency the performance of the workers in our problem is expressed using efÔ¨Åciency levels. a
worker‚Äôs efÔ¨Åciency level at time tis given byelw;t2(0;1), where 0is the lowest efÔ¨Åciency level,
and1is the highest. due to the complex nature of team performance we use a simpliÔ¨Åed model
where job durations depend on the minimum of the efÔ¨Åciency levels of the workers performing it.
that is, a job j2j has a shortest duration pjif all of the assigned workers workers are at the
highest efÔ¨Åciency level and a longest duration if at least one worker is at the lowest efÔ¨Åciency level.
workers‚Äô efÔ¨Åciency levels may decrease due to performing a job and we assume that the change
depends on the current efÔ¨Åciency level of the worker and the job to be processed. let worker w
with efÔ¨Åciency level elw;tstart performing job jat timet. then performing job jwill decrease the
efÔ¨Åciency level of worker wwithjelw;t, wherej2(0;1)is called exhaustion ratio of jobj.
moreover, traveling and idle times contribute to the relaxation of workers according to the
recovery rate . for simplicity, we assume that the increase in efÔ¨Åciency level is proportional with
the relaxation time, hence the efÔ¨Åciency level increases at a constant recovery rate ec+2(0;1).
that is, if a worker wstarts performing job j0aftertunits of idle time after the completion of job
j, then relaxation increases the efÔ¨Åciency level by tec+to a maximum of 1.
4procedures we are given a set pof procedures that are part of a process in whose context the
scheduling problem exists. these procedures deÔ¨Åne the behavioural or control Ô¨Çow perspective
that expresses relations between jobs, such as their ordering or potential choices in a process.
we assume four types of procedures: individual jobs, setsof sub-procedures, ordered sequences
of sub-procedures, and choices between sub-procedures. the function jobs :p!f 0;1gjgives
the collection of jobs associated with a procedure. if procedure p2 p is an individual job j
thenjobs(p) =j, but ifpis aset,sequence orchoice of sub-procedures fp1;:::;p qg2pthen
jobs(p) =s
1iqjobs(pi). each procedure is unique and can only be the sub-procedure of at
most one other procedure, i.e. 8p;p02p:8pi2p;pi02p0:pi6=pi0. the set of setprocedures is
denoted aspsetp, the set of sequence procedures is denoted as pseqp and the set of choice
procedures is denoted as pxorp.
precedence relations there exist precedence relations between jobs that are part of the sub-
procedures of a sequence . ifjis a predecessor of j0then the start time of job j0should be at least the
completion time of job j. we deÔ¨Åne the function pred(j) :j !f 0;1gj, the set of predecessors
ofj2j, as follows:8p2p seq:8pi;pi02p;i<i0:8j2jobs(pi);j02jobs(pi0) :j2pred(j0).
that is, the order of the sub-procedures of a sequence deÔ¨Ånes the order in which their jobs should
be executed.
choices in real-life situations the same goal can sometimes be achieved by different types of
actions, each requiring different skills and durations. for example, a problem in a high-tech ma-
chine in manufacturing may be Ô¨Åxed by maintenance experts by making conÔ¨Åguration adjustments,
whereas the problem may also be solved by technicians replacing the problematic components of
the machine. we model achieving the same goal by alternative ways in the form of choices .
only one of the sub-procedures of each choice is executed, so the jobs and other procedures
that are part of a choice are optional and not always scheduled. we deÔ¨Åne optional procedures as
popt=fp2pj9p02p xor:jobs(p)jobs(p0)gand hencepman =pnp optdeÔ¨Ånes the
mandatory procedures.
2.4 feasibility
a solution to our problem speciÔ¨Åes a start time stj, location to process locj2n j, and team to
process!jw for every executed job j, and a job processing sequence jsw= (jsw(1);:::)for
every worker w2w . from this we can compute routes, efÔ¨Åciency level changes of workers and
durations of jobs. let jbe the realized duration of job j, and letdept w;js w(i)denote the departure
time of worker wat locationlocjsw(i), whereithjob in the sequence jswis performed.
in the following, we detail the constraints to be satisÔ¨Åed by every feasible solution.
executed jobs letexec :p!f 0;1gwhereexec (p) = 1 implies that procedure pis executed,
andexec (p) = 0 means otherwise. by deÔ¨Ånition,
exec (p) = 1; p2p man (1)
setandsequence procedures are executed if all of their sub-procedures are executed, i.e.
exec (p)jpj=x
pi2pexec (pi); p2p set[p seq (2)
choice procedures are executed if exactly one of their sub-procedures is executed, i.e.
exec (p) =x
pi2pexec (pi); p2p xor (3)
letjxdenote the jobs that are executed in a given schedule, i.e. jx=fj2jjexec (j) = 1g.
5precedences every job starts after completion of all of its executed predecessors
stj0+j0stj; j02pred(j);j0;j2j x (4)
skill requirements the cumulative skills in team of a job should satisfy the minimum skill re-
quirements
x
w2!jskwsrj; j2j x (5)
temporal constraints departures of workers from processing locations should respect completion
times of jobs
dept w;js w(i)=stjsw(i)+jsw(i); w2w;1ijjswj (6)
start times of jobs respect departure and travel times of workers
stj max
w2!j;jsw(k)=jfdept w;js w(k 1)+tlocjsw(k 1);locjsw(k)g; j2j x (7)
utilization of workers
w2!j,j2jsw; j2j x; w2w (8)
efÔ¨Åciency levels efÔ¨Åciency levels of workers change as determined by the job they process and
the travel or waiting time until the next job starts.
elw;st jsw(i)=elw;st jsw(i 1) jsw(i 1)elw;st jsw(i 1)
+ec+(stjsw(i) dept w;js w(i 1)); w2w;1ijjswj (9)
2.5 scheduling problem
the objective of our scheduling problem is to minimise the makespan. the makespan, denoted by
cmax, is the latest completion time of any executed job. now we can state our problem as follows:
problem : human performance -aware scheduling and routing (hpas)
instance : given setsof skill domains, set nof locations, setwof workers with varying
efÔ¨Åciency levels, set jof jobs with skill requirements, exhaustion ratios, and efÔ¨Åciency
dependent durations, and set pof procedures.
question : does there exist a feasible schedule that satisÔ¨Åes (1)-(9) and minimizes cmax?
3 related work
in this section we discuss related work on workforce scheduling.
3.1 workforce scheduling and routing
this paper describes a scheduling and routing problem containing three new aspects; efÔ¨Åciency
factor, choices, and alternative locations for jobs. the reduced problem obtained by dropping these
aspects is closely related to the technician routing and scheduling problem studied by [17]. the
difference is in the feasibility such that teams are built to travel together and perform all assigned
tasks within a workday. the authors extend the technician scheduling problem of [18] and [19]
by adding routing aspect. the aforementioned scheduling problem belongs to france telecom
which was the topic of roadef 2007 challenge. note that in this stream of problems, customers
6demands are expressed as service skill/quality rather than good amount. for an extensive overview
of multi-skill workforce scheduling we refer to [3].
services in home health care may also require routing of nurses, social workers, and doctors as
in the problem settings of [20], and [21]. [22] studies the skilled vehicle routing problem (vrp)
that is equivalent of the special case of our problem, without the new aspects, in which every job
can be performed by one technician. this problem is actually a routing problem in which skills
deÔ¨Åne compatibilities between vehicles (i.e. nurses/doctors) and customers (i.e. patients). due to
social dimension of home care services, several soft constraints should be cared. for example, the
patients prefer receiving their treatments by the same nurse which is also preferred symmetrically
by nurses as well.
[23] describes a workforce routing and scheduling problem in the maintenance of electricity
networks. in the studied problem, jobs are deÔ¨Åned as sets of tasks and the tasks belonging to a
job are related by precedence constraints. in airlines sector, the aircraft maintenance routing and
the crew scheduling problem is studied by [24]. here, the services are Ô¨Çights and the skills are
implicitly deÔ¨Åned by Ô¨Çight properties.
[25] views the technician scheduling and routing problem as an extension for the vehicle
routing problem in which technicians play the role speciÔ¨Åc vehicles with certain skills, tools,
and spare parts. similarly, the problem studied by [18] aims to combine technicians in order to
form a convenient so-to-say vehicle that is capable of performing the assigned workload. there,
the authors do not consider routing aspect, but only the scheduling of tasks, i.e. simultaneously
combining technicians as teams and combining tasks as team workloads. moreover, the authors
combine tasks and technicians to obtain schedules for given time periods, so-called workdays. the
vrp with time windows (vrptw) has a vast literature. for an extensive overview for the vrptw
and state-of-art approaches we refer to [26].
our workforce scheduling and routing problem is np-hard, since it contains the vrptw as a
special case. in order to tackle the high complexity of workforce scheduling and routing problems,
many researchers proposed smart enumeration algorithms like branch-and-price or branch-and-
cut. in order to obtain high lower bounds, these problems are reformulated as master lp models
that are convenient for applying column generation methods.
another line of research contains large neighborhood search (lns) methods. these methods
Ô¨Årst construct an initial solution by employing simple heuristics like greedy. then destroy and
repair methods are used to modify and hopefully improve the incumbent solution. [17] propose an
adaptive lns method in which it is dynamically decided which destroy and repair methods are
used. [23] deÔ¨Ånes a lns method in which work plans are found Ô¨Årst, feasibility of work plans are
checked by a dynamic programming, and optimal schedules of feasible work plans are found by
solving a lp model.
[27] proposes a heuristic method that solves signiÔ¨Åcantly restricted mip problems to iteratively
improve the best known feasible solution. [22] develops an aggregated Ô¨Çow based vrp model and
concludes that the lp bound of their ilp model seems strong and may be used as a starting point
for a heuristic.
3.2 optional jobs and scheduling
in classical scheduling problems it is assumed that all jobs that are considered for scheduling have
to be processed [3]. however, there exist some scheduling problems that consider logical nodes in
addition to the precedence relation to create a precedence network of jobs [28]. using these logical
nodes it is possible to create precedence networks that are similar to process models, allowing
choice and repetition.
unfortunately, in this setting the creation of scheduling problem instances requires additional
steps to transform these precedence networks to standard precedence relation or dependency
7figure 1: an overview of the use of business process knowledge in scheduling. to create the hpas
problem instance as speciÔ¨Åed in section 2 we need to determine various input parameters that can
be linked to speciÔ¨Åc aspects from the Ô¨Åeld of process management.
graphs in order to obtain a schedule. such transformations as described by [28] have several draw-
backs. their strategy to deal with choices is to create an alternative dependency graph for each
possible choice. afterwards, the scheduling is done separately for each individual dependency
graph and Ô¨Ånally the best solution is chosen. this means that the number of scheduling problems
to solve is exponential in the number of choices in the process. to eliminate repetition, they unfold
each cycle and create new occurrences of the repeated activities in the dependency graph. the un-
folded activities then have a duration in the scheduling problem that is multiplied by the expected
number of repetitions. the disadvantage of this approach is that for a process with a choice inside
a repetition, it is no longer possible to make a different choice for each execution of the repetition.
in the Ô¨Åeld of order acceptance and scheduling, or scheduling with job rejection, there are also
both optional jobs and mandatory jobs [29,30]. these problems are concerned with both determin-
ing which jobs should be processed and how the accepted jobs should then be scheduled. in these
problems there is usually a high inventory or tardiness costs, such that it is more cost-effective to
outsource or reject some of the jobs.
this area of scheduling is related to our problem in the sense that we consider mutually exclu-
sive sets of choice sub-procedures. these choices are used to model the parts of business processes
where there exist choices between alternative ways to execute process activities. this means that
some of the jobs are mandatory, while others may not be executed depending on the choices. or-
der acceptance problems often allow for total freedom in the rejection of jobs, but there also exist
variants where precedence constraints or a set of mandatory jobs are considered [31,32]. in our
setting we do not reject jobs, but choices are instead used to specify alternative ways of essentially
reaching the same goal.
4 incorporating bpm in scheduling
one of the goals of our work is to show that business process knowledge can be used in the context
of workforce scheduling. we have formulated the hpas scheduling problem in section 2, and
speciÔ¨Åed the necessary inputs to construct such a problem instance. in this section we discuss
which elements from the Ô¨Åeld of bpm can be used in this setting, leading to an overall scheduling
approach as shown in figure 1.
we assume that our scheduling approach is applied in the context of one or more business
processes. this means that the construction of a hpas problem instance consists of the combi-
nation of information from three of the most commonly represented process perspectives [6,7]
together with process execution measurements. the functional perspective represents the process
elements which are being performed, i.e. the jobs being scheduled. the organisational perspec-
8tive represents where and by whom these process elements are performed, i.e. the job processing
locations, the workers, their skills and job skill requirements. the behavioural or control Ô¨Çow per-
spective represents the possible orders in which process elements are performed and other aspects
such as iteration and decision points, i.e. the precedences and choices between jobs. the last in-
put, process execution measurements and information on the performance of people relates to the
efÔ¨Åciency levels of workers and the processing times of jobs.
some of this information needed to construct a hpas instance is easily obtained and speciÔ¨Åed,
e.g. the jobs that need to be scheduled and their allowed processing locations, while other inputs
need to be derived or calculated, e.g. the relations between worker efÔ¨Åciency and estimated pro-
cessing times. in the remainder of this section we discuss how to obtain the non-trivial problem
inputs.
4.1 organisational perspective
the organisational perspective of a process provides several of the parameters for the scheduling
of a workforce. it is generally straightforward to obtain an overview of the locations involved in
a process and to specify where each activity can be performed. most activities either have a Ô¨Åxed
location, e.g. jobs involving physical presence at a speciÔ¨Åc customer or patient [33], or no location
restrictions, e.g. electronic work that can be accessed using it solutions [5,34]. in many situations
it is also clear which workers or organisational roles can be involved in each activity. however, this
information may need to be transformed to the format of skills and skill requirements introduced
in section 2.
a process description may specify that an activity can be performed by members of a spe-
ciÔ¨Åc organisational unit, a role, speciÔ¨Åc employees or workers with a speciÔ¨Åc skill set [7]. in our
hpas problem description we only accounted for the requirement of speciÔ¨Åc skills for the execu-
tion of jobs, but the other situations can be easily modelled using artiÔ¨Åcial skills. for example, if
a job in a purchasing process requires an employee from the Ô¨Ånancial department then an artiÔ¨Åcial
skill Ô¨Ånancial department can be created, assigned to all workers from the Ô¨Ånancial department
and added as a requirement to any job requiring an employee from this organisational unit. in this
way it is possible to create an arbitrary mapping specifying the organisational requirements for
jobs in the form of skills.
4.2 determining worker efÔ¨Åciency
the integration of dynamic human performance is one of the core elements of the hpas problem.
however, it is not easy to determine the input parameters for this aspect of the scheduling prob-
lem [15]. this has to do with the complex nature of human performance, which we discussed in
section 2.2.
in our problem statement we described a simpliÔ¨Åed model of the relation between changing
worker efÔ¨Åciency and the duration of activities. the essential elements of this model are that each
activity is assumed to have a minimal and a maximal duration, i.e. the time it is expected to take
for the job to be completed when the workers are at optimal or worst efÔ¨Åciency, respectively. these
durations can be established using performance measurements under the assumption that the jobs
that need to be scheduled can be compared to previous jobs for which performance measurements
are available. in this way worker experience and individual performance differences are taken into
account.
additionally, the problem statement speciÔ¨Åes that the workload of a worker causes job-speciÔ¨Åc
exhaustion that may reduce the efÔ¨Åciency of workers. depending on the available data, different
models can be chosen to predict dynamic human performance based on workload. for exam-
ple, [15] provide a model to determine the distributions of performance variables based on the
effects of taskload, where a higher taskload results in lower performance. taskload in this case is
9simply the percentage of time during which the worker was performing a given set of tasks during
a speciÔ¨Åc time period. this is comparable to the way that performing jobs decreases the efÔ¨Åciency
level of workers and idle times relax and improve the efÔ¨Åciency level of workers in our problem
statement.
as the work of [14] has shown, there are also links between stress, workload and performance.
[13] provide a method to predict the performance of workers using data from wearable biosensors
that measure galvanic skin response, a popular measurable indicator of stress. establishing such
models can explain how the efÔ¨Åciency of workers is affected by speciÔ¨Åc jobs that cause stress or
exhaustion. these models can then be used to calculate individual and context-dependent perfor-
mance estimates to be used in the scheduling problem.
4.3 functional and control flow perspectives
the functional perspective is the most basic process perspective, representing the process elements
being performed and therefore being closely related to the jobs in a scheduling context. however,
the most well-known process perspective is the control Ô¨Çow perspective, which expresses the be-
haviour allowed by the process in terms of its executions. process models usually combine both
perspectives and describe the allowed ordering of activities [6,7], which means that they contain
information on the jobs to be scheduled and their precedence relations. in this section we provide
an approach to incorporate process models in the form of process trees [35,36], a formalism to
specify block-structured workÔ¨Çow nets [4], into our scheduling problem.
there exist many different process model notations [4,7], but most traditional modelling lan-
guages allow the creation of models that are not sound , i.e. these models may contain deadlocks,
livelocks and other anomalies. process trees, however, are guaranteed to represent sound process
models and their structure enables a more straightforward mapping between process knowledge
and scheduling input.
figure 2 shows the possible operators that process trees can be composed of, and their transla-
tions to bpmn constructs [35,36]. operator nodes specify the relation between their children. the
Ô¨Åve available operator types are: sequential execution ( !), parallel execution ( ^), exclusive choice
(), non-exclusive choice ( _) and repeated execution ( 	). children of an operator node can again
be operator nodes or they can be leafnodes that represent the execution of an activity. the order of
the children matters for the sequence and loop operators. the order of the children of a sequence
operator speciÔ¨Åes the order in which the children are executed (from left to right). nodes can have
an arbitrary number of children, except for loop nodes ( 	) that always have three children. the left
child is the ‚Äòdo‚Äô part of the loop and after its execution either the middle child, the ‚Äòredo‚Äô part, may
be executed or the right child, the ‚Äòexit‚Äô part, may be executed. after the execution of the ‚Äòredo‚Äô
part the ‚Äòdo‚Äô part is again enabled and the ‚Äòexit‚Äô part is disabled. process trees can also contain
unobservable activities, indicated with a .
the types of nodes in process trees match closely with the notion of procedures as deÔ¨Åned in
section 2.3. leaf nodes representing activities can be compared to individual jobs. similarly, the
behaviour of the!operator matches that of the sequence procedure, while the ^operator matches
thesetprocedure, and the operator matches the choice procedure. for the non-exclusive choice
(_) and repeated execution ( 	) there is no direct translation between process tree operator and
scheduling concept. the reason for this is that in a setting where the makespan of a schedule
is minimized, it is not desirable to execute unnecessary activities. hence a non-exclusive choice
becomes an exclusive choice in a scheduling context and the loop becomes a sequence of a single
‚Äòdo‚Äô and ‚Äòexit‚Äô.
figure 3 shows an example process model for a simple hardware maintenance process in the
form of a process tree [35,36] and a bpmn model [4]. each instance of this process starts with
the execution of a single problem intake (pi) activity. this is followed by the parallel execution
ofarrange service evaluation (ase) and a choice between a repair product (rr) or a replace
10figure 2: the process tree operators and their relation to bpmn constructs.
!1
di ^
	
 rm
rc!2
tp rrasepi
(a) as a process tree.
 (b) as a bpmn model.
figure 3: a process model for a simple hardware maintenance process.
product (rc) . the repair product activity is followed by test product (tp) , and in either case
there is the option to perform a redo maintenance (rm) afterwards in order to execute a new
round of activities. finally, the process instance ends when document incident (di) is executed.
this example process can be transformed into the following set of scheduling procedures. the
individual jobs:fpi;ase;rr;tp;rc;rm;di g. the set^with sub-procedures fase;	g.
thesequences!1with sub-procedures fpi;^;digand!2with sub-procedures frr;tpg. the
choicewith sub-procedures f! 2;rcg. this collection of scheduling procedures represents a
single execution or process instance of this process model.
note that the 	-operator has been assumed to be executed once without redo. however, a
process model can express complex constructs such as choices or repetition, which need special
considerations when deducing the scheduling procedures from a process model. we discuss this in
the next subsection in more detail.
in the above example we constructed the procedures belonging to a single execution of a pro-
cess. however, in general there are often many process instances being executed concurrently,
possibly described by different process models. to create a scheduling problem instance where
activities from different process instances are competing for the same resources, the deduction of
the procedures is simply repeated for each process instance to be scheduled.
4.4 choices and repetition
in practice, the choices made and repetitions executed often depend on factors that are difÔ¨Åcult
to consider during the creation of a schedule. for example, some choices may depend on external
11events or data, so called non-controllable choices , while controllable choices can be decided by the
people executing the process [37]. historical information may be used in order to estimate the ex-
pected activity executions and non-controllable choices made. during the creation of the schedul-
ing problem, this information can then be used to omit the branches of non-controllable choices
that are not expected to be executed for a given process instance. however, we retain controllable
choices in our scheduling problem, which are not Ô¨Åxed by the characteristics of a given process
instance or external input, in order to allow the scheduling approach to make the best choice for
a better process execution. dealing with repetition is similar to handling non-controllable choices,
as we assume that repeating activities is not desirable in our scheduling context.
for each process instance, we need to determine what the controllable and uncontrollable
choices and repetition are, which requires domain knowledge of the process. in the process model
shown in figure 3 there is a choice and a cycle: a choice between a repair and a replacement and
an option to restart the maintenance cycle. the choice between repairing or replacing the product
is controllable, so this results in a choice procedure in the hpas instance with two alternative sub-
procedures. the option to restart the maintenance depends on the success of the previous activities,
so this repetition is in any case uncontrollable and therefore deciding whether or not to restart the
maintenance cycle cannot be part of the scheduling problem.
handling an uncontrollable choice or repetition depends on previous process performance mea-
surements. if the maintenance cycle is only repeated rarely then this activity can be omitted from
the list of jobs to be scheduled. alternatively, an estimation can be made for the number of process
instances that will feature a repeated maintenance. for these process instances we need to take
care of the repetition in the model to arrive at a Ô¨Ånite set of jobs and procedures representing their
execution.
to remove inÔ¨Ånite behaviour and create a proper dependency graph, we unfold repetition in
the process model when present in a given instance. this is done using the observation that each
	-operator results in a sequence of ‚Äòdo‚Äô and ‚Äòredo‚Äô executions, Ô¨Ånalized by the execution of the
‚Äòexit‚Äô branch. therefore, once an assumption has been made on the number of executions of the
repetition, it can simply be replaced. for the example process with a single estimated repetition
execution, the possible cycle is replaced by a choice between a repair and replacement, followed
byredo maintenance , again followed by a choice between repair and replacement, after which the
process continues. this procedure can be repeated for every cycle in the process model, where mul-
tiple executions of a cycle result in multiple sequential unfoldings of the ‚Äòdo‚Äô and ‚Äòredo‚Äô branches.
using the above transformation approach, executions of any process tree can be scheduled by
solving a hpas instance.
5 solving hpas instances
as shown in figure 1, once we have created a hpas instance as described in section 4 we need
to solve it to obtain optimised schedules. we have formulated our scheduling problem as a mixed
integer linear programming (milp) model, which is included below. this milp model has been
implemented and can be solved with cplex [38].
the formulation of the milp model is relatively straightforward from the problem statement
deÔ¨Åned in section 2. the notation from section 2.3 is summarized in table 1. the exact relations
between worker efÔ¨Åciency levels and job durations are not explicitly speciÔ¨Åed in the problem
statement. the reason for this is that these relations are heavily affected by a trade-off between
model complexity and realism. as stated in section 4.2, there are complex models that can be used
to predict dynamic human performance based on historical performance measurements. instead
of these complex models we chose to assume a job-speciÔ¨Åc linear dependency between efÔ¨Åciency
and job durations for ease of understanding and computational efÔ¨Åciency.
we also simpliÔ¨Åed the modelling of choice procedures slightly by restricting that a choice
procedure cannot contain another choice as a sub-procedure. the reason for this was to reduce the
12complexity of the milp model, as the size of the scheduling problems that can be solved using
this implementation is limited.
the milp model has several constraints that use big m coefÔ¨Åcients to formulate our nonlinear
scheduling problem in a way that can be solved using linear programming. the coefÔ¨Åcients are
used to trivially enable certain constraints using indicator variables, e.g. to only specify activity
durations for the jobs that are actually executed.
table 1 gives the notation used in our milp model, i.e. sets, indices, parameters, and decision
variables.
table 1: sets, parameters, and variables
sets
s set of skill domains, s2s
n set of all locations, n2n
w set of all workers, w2w
j set of all jobs, j2j,j=jman[jopt
pxor set of all choice procedures, p2pxor
parameters
tn;n0 travel time to go from location nton0
nj allowed processing locations of job j
skw skills of worker w,skw2f0;1gsl
srj skill requirements of job j,srj2nsl
rj;djrelease and due date of job j
pred jpredecessors of job j,pred jjnfjg
pj minimum processing time of job j
j rate at which the duration of job jis increased due to worker inefÔ¨Åciency
j exhaustion ratio by which efÔ¨Åciency decreases after performing job j,j2(0;1)
ec+efÔ¨Åciency level change due to relaxing or travelling in unit time
imax maximum size of any job sequences of workers
jobs (pq)set of jobs in sub-procedure pq2p, of choicep2pxor,jobs (pq)jopt
decision variables
cmax makespan of the schedule
sj;j start time, and duration of job j
exec a indicates if alternative ais executed, a2c,c2c
xj indicates if job jis executed
yj;n indicates if processing location locjof jobjisn, wheren2n j
zw;i;j indicates if job jisithjob in the job sequence of worker w, i.e.jsw(i) =j
dept w;i departure time of worker wat the processing location of jsw(i)
w;i travel time of worker wfrom processing location of jsw(i 1)to the one of jsw(i)
elw;i efÔ¨Åciency level of worker wwhen starting to process job jsw(i)
el 
w;i efÔ¨Åciency level change of worker wdue to processing job jsw(i)
minimize cmax (10)
subject to
sj+jcmax; j2j (11)
13x
pq2pexec pq= 1; p2p xor (12)
xj=exec pq; j2jobs(pq);pq2p;p2p xor (13)
x
n2njyj;n=xj; j2j (14)
sj0+j0 m(1 xj0)sj; j2j;j02pred j (15)
rj m(1 xj)sjdj j; j2j (16)
x
w2wsks
wimaxx
i=1zw;i;jsrs
jxj; j2j;s2s (17)
x
j2jzw;i;j1; w2w;iimax (18)
imaxx
i=1zw;i;jxj; w2w;j2j (19)
x
j2jzw;i;jx
j2jzw;i 1;j; w2w;iimax (20)
dept w;i 1+w;i m(1 zw;i;j)sj; j2j;w2w;iimax (21)
sj+j m(1 zw;i;j)dept w;i; j2j;w2w;iimax (22)
tn;n0 m(4 yj;n yj0;n0 zw;i 1;j zw;i;j0)w;i;
j;j02j;n2n j;n02n j0;w2w;iimax (23)
jelw;i m(1 zw;i;j)el 
w;i; j2j;w2w;iimax (24)
elw;i 1 el 
w;i 1+ec+(sj dept w;i 1) m(1 zw;i;j)elw;i;
j2j;w2w;iimax (25)
pj(1 +j(1 elw;i)) m(1 zw;i;j)j; j2j;w2w;iimax (26)
exec pq2f0;1g; p q2p;p2p xor (27)
yj;n2f0;1g; j2j[j opt;n2n j (28)
zw;i;j2f0;1g; j2j[j opt;w2w;1iimax (29)
14!
di^
!
tp
rc rrasepi
(a) the process model.activity resources locationduration exhaustion
(min-max) ratio
problem intake (pi) clerk ofÔ¨Åce 1-2 10%
arrange serviceclerk ofÔ¨Åce 1-2 10%evaluation (ase)
repair product (rr) 2technician customer 3-14 80%
replace product (rc)technician +customer 6-10 40%sr. technician
test product (tp) 2technician customer 1-2 10%
document incident (di) technician anywhere 2 20%
(b) the organisational model and activity performance information.
figure 4: the process knowledge for a simple hardware maintenance process, as used in our sim-
ulation.
then the milp model is given by constraints (10)-(29). the Ô¨Årst constraint (10) is the objective
function which is minimized. constraint (11) is used to Ô¨Ånd the makespan of the schedule. con-
straints (12)-(13) ensure that only one alternative sub-procedure is executed per choice. mandatory
jobs are always executed, i.e. xj= 1for allj2j man, so we deÔ¨Åne xjvariables for jobs in jman
only for the simplicity of the milp formulation. every job should be executed exactly in one
location (constraints (14)), and precedence relations should be satisÔ¨Åed (constraints(15)). execu-
tions of jobs should be between their release and due dates (constraints(16)), and they should be
executed by a group of workers who have requested skills to do so (constraints(17)). assignment
between workers and jobs are expressed by constraints (18)-(20). constraints (21)-(23) ensure that
each worker has a route while executing the jobs and temporal constraints are satisÔ¨Åed, i.e. depar-
tures, start times, and travel times. constraints (24)-(26) are used to obtain correct efÔ¨Åciency level
of workers after job executions and efÔ¨Åciency-dependent job durations. note that the efÔ¨Åciency
level update in constraints (25) considers efÔ¨Åciency changes of a worker due to job execution as
well as efÔ¨Åciency changes due to non-working times like breaks and travels. finally, constraints
(27)-(29) enforce that choice-sub-procedure-execution, job-location and worker-job assignment
variables should be binary.
6 evaluation
in this section we present an evaluation of the milp implementation introduced above. the main
goals of the evaluation are to show that dynamic human performance can be taken into account in
scheduling and to understand how the inclusion of dynamic performance differences in scheduling
affects the complexity of the problem. therefore, we created a simulation model and compared
the simulated performance to the schedules generated by our approach. we also tested the ability
of the milp implementation to solve different scheduling problems of varying difÔ¨Åculty within a
set time limit. the evaluation was performed using cplex v12.6.0 [38] on a pc with a 3.4 ghz
quad-core processor and 16 gb ram memory.
6.1 example process simulation
we created a simulation model of a simple hardware maintenance process using cpn tools [39].
the process knowledge used in this simulation is shown in figure 4. this information was also
used in the creation of a hpas problem instance, as discussed in section 4.
the organisational model shows which activities from the process model can be executed by
what roles and at what location. note that some activities require two resources to complete. it
is assumed that the role of senior technician may also perform any job requiring a technician .
different process instances may involve different customers and hence different locations.
15figure 5: the optimal scheduling of 3 process instances of the process described in figure 4.
figure 6: an example schedule for 3 process instances generated by the simulation model of the
process described in figure 4.
both cpn tools and our milp scheduling implementation use discrete time. the minimum
and maximum job durations mentioned in figure 4b are given in discrete time units, with the
realised job durations depending on worker efÔ¨Åciency linearly. the travel distance between the
ofÔ¨Åce location and the various customers was set to 1 time unit.
both the simulation and the hpas instance were used to obtain schedules for the above process
description. figure 5 and figure 6 show the optimal schedule as provided by the cplex solver
and an example obtained from the simulation model. comparing the simulated schedule and the
optimal one shows that under this human performance model it is more efÔ¨Åcient to balance work-
load and rest. this is also highlighted by the average utility of workers, which is 68% in the optimal
solution and 90% in the simulation model if jobs are executed as soon as possible.
6.2 parameter effects on complexity
the scheduling problem that we address in this work has a large number of parameters. these pa-
rameters inÔ¨Çuence the problem complexity and the size of the search space for a possible solution.
we are interested in Ô¨Ånding out how these affect the difÔ¨Åculty of the scheduling problem, and in
particular how the inclusion of dynamic performance affects the difÔ¨Åculty of Ô¨Ånding an optimal or
feasible schedule. unfortunately, it is not feasible to test all possible combinations of these param-
eters. therefore the parameters are divided into four groups, each related to a speciÔ¨Åc aspect of the
scheduling problem: routing, skill requirements, worker efÔ¨Åciency and process control Ô¨Çow. we
evaluated the solutions with and without taking into account each of the four aspects, for a total of
16 different possible combinations.
the instances were generated randomly with a Ô¨Åxed number of jobs and workers, and other
parameters falling into a range depending on the selected aspect combinations. each instance in-
cluded 20 jobs and 10 workers, which was based on memory and process time requirements during
initial testing and comparable to e.g. the instance sizes used in the evaluation of [33,40].
for the routing aspect there was a setting with some basic movement of workers between four
different locations arranged sequentially. the network of locations was kept very simple because
initial tests showed that complex routing requirements would already result in very difÔ¨Åcult prob-
lems, even without taking into account the scheduling of the activities. each job was randomly
assigned to one out of four locations. when routing was not taken into account each job was as-
signed to the same location and workers had no need to travel.
for the skill requirement aspect we introduced 10 skill domains, similar to the instances
from [40]. the workers and jobs were divided randomly into three different groups of roughly
equal size: one requiring or possessing a single random skill, one requiring or possessing every
16skill and one requiring or possessing half of the skills. when skill requirements were not taken into
consideration, there was only a single skill that every worker possessed and every job required.
the efÔ¨Åciency aspect introduced job-speciÔ¨Åc durations and effects on efÔ¨Åciency. each job had
a 50% chance to have a duration affected by worker efÔ¨Åciency. each job also had an independent
50% chance to have an effect on worker efÔ¨Åciency. when worker efÔ¨Åciency was not taken into
account each job had a Ô¨Åxed duration and no effect on worker efÔ¨Åciency.
the control Ô¨Çow aspect concerned the presence of job predecessors and choices between jobs.
in this setting there was a random set of generated procedures resulting in 10 precedence con-
straints and 2 choices between alternative jobs. when the control Ô¨Çow aspect was not taken into
account there were no choices or predecessors amongst the scheduled jobs.
6.3 complexity results
for each of the 16 parameter aspect combinations introduced above we generated 20 random in-
stances for a total of 320 scheduling problem instances. the milp implementation was given up
to 5 minutes to solve each scheduling instance. the results are shown in table 2.
table 2: the results of the evaluation, with time measured in seconds and also showing the per-
centage of instances for which a feasible or optimal solution could be found within the time limit.
each scenario consisted of 160 instances, i.e. 20 instances for each of the 8 combinations of the 3
other aspects.
scenarioaverage time to feasible after average time to optimal after
feasible (stdev.) 300 seconds optimal (stdev.) 300 seconds
no routing 6.0 (24.2) 93% 35.9 (52.4) 31%
routing 4.9 (15.7) 89% 63.2 (67.7) 32%
no skill requirements 2.5 (4.0) 100% 35.0 (43.5) 49%
skill requirements 9.1 (29.8) 83% 104.1 (86.7) 13%
no worker efÔ¨Åciency 2.7 (7.4) 85% 17.0 (27.5) 33%
worker efÔ¨Åciency 7.8 (27.0) 98% 85.3 (68.9) 30%
no control Ô¨Çow 1.2 (1.1) 100% - (-) 0%
control Ô¨Çow 10.6 (29.7) 83% 49.8 (61.8) 63%
the results above show that for all scenarios the milp implementation is able to Ô¨Ånd a feasible
solution for the majority of the scheduling instances within the given time limit. the inclusion
of an additional aspect generally increases the time required to Ô¨Ånd a feasible solution, but not
signiÔ¨Åcantly. there were slightly more instances with a feasible solution when worker efÔ¨Åciency
was taken into account, so including this aspect in the scheduling problem does not appear to make
it more difÔ¨Åcult to obtain a feasible solution.
the results are quite different when considering the time and likelihood required to obtain an
optimal solution. for the inclusion of the routing, skill requirements and worker efÔ¨Åciency aspects
the average time required to obtain an optimal solution increased signiÔ¨Åcantly. however, both
routing and worker efÔ¨Åciency appear to have little effect on the likelihood to obtain an optimal
solution. the inclusion of skill requirements did have a signiÔ¨Åcant negative effect on both the time
and the likelihood required to obtain an optimal solution. interestingly, in the absence of control
Ô¨Çow constraints the current implementation was not able to Ô¨Ånd any optimal solutions. finding an
optimal solution appears to highly dependent on the parameter settings, but the inclusion of worker
efÔ¨Åciency is not a major factor in the solver‚Äôs ability to obtain an optimal solution.
to explore why the implementation was unable to Ô¨Ånd the optimal scheduling solution in the
absence of control Ô¨Çow constraints, we performed a manual study of several easy problem in-
stances. it was found that the solver was able to Ô¨Ånd a solution that was actually optimal, but it was
not able to conÔ¨Årm the solution‚Äôs optimality within the time limit. this is most likely related to the
fact that in these instances the solver appears to explore and enumerate all possible orderings of
17jobs within the other restrictions such as worker assignment. upon reducing the size of the gen-
erated problem instances to 10 jobs and 5 workers the solver was able to prove the optimality of
the discovered solutions within seconds. repeated testing with increasing problem instance sizes
revealed that there appeared to be a cut-off point where the solver was no longer able to determine
optimality using branch-and-bound methods. at that point it reverted to enumerating all possible
job assignment combinations.
the above evaluation shows that the scheduling of activities affected by dynamic human per-
formance is a difÔ¨Åcult problem. even for a small simulated environment, the current model often
cannot be solved to obtain an optimal schedule, although Ô¨Ånding feasible solutions is generally
possible. additional research is required to show the application of dynamic human performance
in a real-life setting to demonstrate its value.
7 conclusions
in this paper we have shown how dynamic human performance may inÔ¨Çuence the scheduling pro-
cess. to the best of our knowledge, this is the Ô¨Årst attempt to incorporate worker efÔ¨Åciency as a
concept into workforce scheduling and routing. for the sake of clarity, we assumed that (1) job
durations are effected proportionally by the worst performance level of assigned workers, and (2)
worker performances decrease when performing jobs proportional to their current levels. accord-
ingly, we provided a formal description of the hpas scheduling problem, and speciÔ¨Åed feasibility
conditions in section 2. then we discussed how various aspects from the Ô¨Åeld of business process
management relate to the parameters of this scheduling problem and how they can be established.
we also formulated the hpas scheduling problem as a milp model. finally, we showed that
scheduling instances of limited size can be solved by using our milp model. regarding our ex-
perimentation, we may conclude that taking into account dynamic worker efÔ¨Åciency does not sig-
niÔ¨Åcantly increase the hardness of solving scheduling instances that we have generated compared
to traditional extensions of the scheduling problem such as skill levels and routing.
although signiÔ¨Åcant improvements are obtained in solving milp models in the recent years,
our evaluation has shown that it remains an issue to obtain good-quality schedules in reason-
able times for larger instance sizes. therefore, a possible research direction may be solving the
hpas scheduling problem by smart enumeration methods like branch-and-price. this requires to
reformulate the problem as a master lp model, and applying column generation to solve that lp
model. in the reformulation, the columns may corresponds to routes or job sequences of workers,
and worker efÔ¨Åciencies may be decided by the master model.
another research direction is the development of a large neighborhood search method for our
scheduling problem. in an lns method, destroying and repairing heuristics should be carefully
designed such that the worker efÔ¨Åciency levels are maintained correctly after every improvement
iteration.
the main limitation of this work is that the evaluation was performed on a simulation model
of a business process. the way how worker efÔ¨Åciencies affect the realisation of schedules highly
depends on the type of industry sector and the processes and people involved. to increase the re-
alism of the efÔ¨Åciency model it is necessary to do case studies to apply our scheduling approach in
practice and study the results. with the advent of wearable sensor technologies, the Ô¨Årst steps have
been taken to measure stress and workload in order to obtain the individual models of performance
that enable this.
references
[1] s. hartmann and d. briskorn, ‚Äúa survey of variants and extensions of the resource-constrained project
scheduling problem,‚Äù european journal of operational research , vol. 207, no. 1, pp. 1‚Äì14, 2010.
18[2] p. brucker, a. drexl, r. m ¬®ohring, k. neumann, and e. pesch, ‚Äúresource-constrained project schedul-
ing: notation, classiÔ¨Åcation, models, and methods,‚Äù european journal of operational research , vol.
112, no. 1, pp. 3‚Äì41, 1999.
[3] j. v . den bergh, j. beli ¬®en, p. d. bruecker, e. demeulemeester, and l. d. boeck, ‚Äúpersonnel scheduling:
a literature review,‚Äù european journal of operational research , vol. 226, no. 3, pp. 367 ‚Äì 385, 2013.
[4] w. m. p. van der aalst, process mining: discovery, conformance and enhancement of business pro-
cesses . springer, 2011.
[5] a. goel, v . gruhn, and t. richter, ‚Äúmobile workforce scheduling problem with multitask-processes,‚Äù
ininternational conference on business process management . springer, 2009, pp. 81‚Äì91.
[6] b. curtis, m. i. kellner, and j. over, ‚Äúprocess modeling,‚Äù communications of the acm , vol. 35, no. 9,
pp. 75‚Äì90, 1992.
[7] b. list and b. korherr, ‚Äúan evaluation of conceptual business process modelling languages,‚Äù in pro-
ceedings of the 2006 acm symposium on applied computing . acm, 2006, pp. 1532‚Äì1539.
[8] j. c. goodale and e. tunc, ‚Äútour scheduling with dynamic service rates,‚Äù international journal of
service industry management , vol. 9, no. 3, pp. 226‚Äì247, 1998.
[9] m. a. staal, ‚Äústress, cognition, and human performance: a literature review and conceptual frame-
work,‚Äù hanover, md: national aeronautics and space administration , 2004.
[10] m. westman and d. eden, ‚Äúthe inverted-u relationship between stress and performance: a Ô¨Åeld study,‚Äù
work & stress , vol. 10, no. 2, pp. 165‚Äì173, 1996.
[11] m. jamal, ‚Äújob stress and job performance controversy: an empirical assessment,‚Äù organizational
behavior and human performance , vol. 33, no. 1, pp. 1‚Äì21, 1984.
[12] r. kocielnik, n. sidorova, f. m. maggi, m. ouwerkerk, and j. h. d. m. westerink, ‚Äúsmart technolo-
gies for long-term stress monitoring at work,‚Äù in proceedings of the 26th ieee international sympo-
sium on computer-based medical systems, porto, portugal, june 20-22, 2013 , 2013, pp. 53‚Äì58.
[13] c. mundell, j. p. vielma, and t. zaman, ‚Äúpredicting performance under stressful conditions using
galvanic skin response,‚Äù corr , vol. abs/1606.01836, 2016.
[14] m. bernburg, k. vitzthum, d. a. groneberg, and s. mache, ‚Äúphysicians‚Äô occupational stress, depres-
sive symptoms and work ability in relation to their working environment: a cross-sectional study of
differences among medical residents with various specialties working in german hospitals,‚Äù bmj open ,
vol. 6, no. 6, p. e011369, 2016.
[15] e. m. rantanen and b. r. levinthal, ‚Äútime-based modeling of human performance,‚Äù in proceedings
of the human factors and ergonomics society annual meeting , vol. 49, no. 12. sage publications,
2005, pp. 1200‚Äì1204.
[16] r. m. yerkes and j. d. dodson, ‚Äúthe relation of strength of stimulus to rapidity of habit-formation,‚Äù
journal of comparative neurology and psychology , vol. 18, no. 5, pp. 459‚Äì482, 1908.
[17] a. a. kovacs, s. n. parragh, k. f. doerner, and r. f. hartl, ‚Äúadaptive large neighborhood search
for service technician routing and scheduling problems,‚Äù journal of scheduling , vol. 15, no. 5, pp.
579‚Äì600, 2012.
[18] m. fƒ±rat and c. hurkens, ‚Äúan improved mip-based approach for a multi-skill workforce scheduling
problem,‚Äù journal of scheduling , vol. 15, no. 3, pp. 363‚Äì380, 2012.
[19] j.-f. cordeau, g. laporte, f. pasin, and s. ropke, ‚Äúscheduling technicians and tasks in a telecommu-
nications company,‚Äù journal of scheduling , vol. 13, no. 4, pp. 393‚Äì409, 2010.
19[20] b. elbenani, j. a. ferland, and v . gascon, ‚Äúmathematical programming approach for routing home
care nurses,‚Äù in 2008 ieee international conference on industrial engineering and engineering man-
agement , dec 2008, pp. 107‚Äì111.
[21] s. v . begur, d. m. miller, and j. r. weaver, ‚Äúan integrated spatial dss for scheduling and routing
home-health-care nurses,‚Äù interfaces , vol. 27, no. 4, pp. 35‚Äì48, 1997.
[22] p. cappanera, l. gouveia, and m. g. scutell `a,the skill vehicle routing problem . berlin, heidelberg:
springer berlin heidelberg, 2011, pp. 354‚Äì364.
[23] a. goel and f. meisel, ‚Äúworkforce routing and scheduling for electricity network maintenance with
downtime minimization,‚Äù european journal of operational research , vol. 231, no. 1, pp. 210 ‚Äì 228,
2013.
[24] j. d ¬¥ƒ±az-ram ¬¥ƒ±rez, j. i. huertas, and f. trigos, ‚Äúaircraft maintenance, routing, and crew scheduling
planning for airlines with a single Ô¨Çeet and a single maintenance and crew base,‚Äù computers industrial
engineering , vol. 75, pp. 68 ‚Äì 78, 2014.
[25] v . pillac, c. gu ¬¥eret, and a. medaglia, ‚Äúon the technician routing and scheduling problem,‚Äù in meta-
heuristics international conference (mic) 2011 , udine, italy, jul. 2011, pp. s2‚Äì40‚Äì1, isbn 978-88-
900984-3-7.
[26] p. toth, d. vigo, p. toth, and d. vigo, vehicle routing: problems, methods, and applications, second
edition . philadelphia, pa, usa: society for industrial and applied mathematics, 2014.
[27] d. bredstr ¬®om and m. r ¬®onnqvist, ‚Äúcombined vehicle routing and scheduling with temporal precedence
and synchronization constraints,‚Äù european journal of operational research , vol. 191, no. 1, pp. 19 ‚Äì
31, 2008.
[28] u. belhe and a. kusiak, ‚Äúresource constrained scheduling of hierarchically structured design activity
networks,‚Äù ieee transactions on engineering management , vol. 42, no. 2, pp. 150‚Äì158, 1995.
[29] s. a. slotnick, ‚Äúorder acceptance and scheduling: a taxonomy and review,‚Äù european journal of
operational research , vol. 212, no. 1, pp. 1‚Äì11, 2011.
[30] d. shabtay, n. gaspar, and m. kaspi, ‚Äúa survey on ofÔ¨Çine scheduling with rejection,‚Äù journal of
scheduling , vol. 16, no. 1, pp. 3‚Äì28, 2013.
[31] m. ebben, e. hans, and f. o. weghuis, ‚Äúworkload based order acceptance in job shop environments,‚Äù
or spectrum , vol. 27, no. 1, pp. 107‚Äì122, 2005.
[32] f. t. nobibon and r. leus, ‚Äúexact algorithms for a generalization of the order acceptance and schedul-
ing problem in a single-machine environment,‚Äù computers & operations research , vol. 38, no. 1, pp.
367‚Äì378, 2011.
[33] r. b. bachouch, a. guinet, and s. hajri-gabouj, ‚Äúan optimization model for task assignment in home
health care,‚Äù in health care management (whcm), 2010 ieee workshop on . ieee, 2010, pp. 1‚Äì6.
[34] e. e. kossek and j. michel, ‚Äúflexible work schedules,‚Äù handbook of industrial-organizational psy-
chology , vol. 1, pp. 535‚Äì72, 2010.
[35] j. c. a. m. buijs, ‚Äúflexible evolutionary algorithms for mining structured process models,‚Äù ph.d.
dissertation, ph.d. thesis, technische universiteit eindhoven, 2014.
[36] m. l. van eck, j. c. a. m. buijs, and b. f. van dongen, ‚Äúgenetic process mining: alignment-based
process model mutation,‚Äù in business process management workshops - bpm 2014 international
workshops, eindhoven, the netherlands, september 7-8, 2014, revised papers , 2014, pp. 291‚Äì303.
[37] j. dehnert, ‚Äúnon-controllable choice robustness expressing the controllability of workÔ¨Çow processes,‚Äù
ininternational conference on application and theory of petri nets . springer, 2002, pp. 121‚Äì141.
20[38] i. ilog, ‚Äúibm ilog cplex optimization studio,‚Äù 2015. [online]. available: https://www.ibm.com/
software/products/en/ibmilogcpleoptistud
[39] k. jensen, l. m. kristensen, and l. wells, ‚Äúcoloured petri nets and cpn tools for modelling and
validation of concurrent systems,‚Äù international journal on software tools for technology transfer ,
vol. 9, no. 3-4, pp. 213‚Äì254, 2007.
[40] m. firat, d. briskorn, and a. laugier, ‚Äúa branch-and-price algorithm for stable workforce assignments
with hierarchical skills,‚Äù european journal of operational research , vol. 251, no. 2, pp. 676‚Äì685,
2016.
21