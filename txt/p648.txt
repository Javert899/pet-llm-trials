ieee transactions on industrial informatics, vol. x, no. x, x 20xx 1
managing process model complexity via
abstract syntax modiﬁcations
marcello la rosa, petia wohed, jan mendling, arthur h.m. ter hofstede, hajo a. reijers
and wil m.p. van der aalst, member, ieee
abstract —as a result of the growing adoption of business
process management (bpm) technology, different stakeholders
need to understand and agree upon the process models that
are used to conﬁgure bpm systems. however, bpm users have
problems dealing with the complexity of such models. therefore,
the challenge is to improve the comprehension of process models.
while a substantial amount of literature is devoted to this topic,
there is no overview of the various mechanisms that exist to
deal with managing complexity in (large) process models. as a
result, it is hard to obtain an insight into the degree of support
offered for complexity reducing mechanisms by state-of-the-art
languages and tools. this paper focuses on complexity reduction
mechanisms that affect the abstract syntax of a process model,
i.e. the formal structure of process model elements and their
interrelationships. these mechanisms are captured as patterns
so that they can be described in their most general form, in
a language- and tool-independent manner. the paper concludes
with a comparative overview of the degree of support for these
patterns offered by state-of-the-art languages and tools, and with
an evaluation of the patterns from a usability perspective, as
perceived by bpm practitioners.
index terms —process model, pattern, complexity, understand-
ability, process metric.
i. i ntroduction
business process management (bpm) is increasingly rec-
ognized as an overarching approach to improve performance
at an operational level. companies typically utilize bpm
technology to reduce costs, save cycle time, and react to
changes in a more agile way. while many bpm concepts have
been applied to improve business performance in industrial
practice, there are still signiﬁcant challenges, which need to
be addressed by bpm research.
one of the challenges in this context relates to complexity
management of process models. the capability of a process
model to be easily understandable plays an important role for
the success of process redesign projects [49]. business process
manuscript received may x, 2011; revised x x, 2011.
copyright c2011 ieee. personal use of this material is permitted.
however, permission to use this material for any other purposes must be
obtained from the ieee by sending a request to pubs-permissions@ieee.org.
m. la rosa and a.h.m. ter hofstede are with the queens-
land university of technology. e-mail: see http://marcellolarosa.com and
http://yawlfoundation.org/ arthur. ter hofstede is also with eindhoven uni-
versity of technology.
p. wohed is with stockholm university, sweden. e-mail: see
http://people.dsv.su.se/ petia.
j. mendling is with humboldt university of berlin, germany. e-mail: see
http://mendling.com.
h.a. reijers and w.m.p. van der aalst are with eindhoven university
of technology, the netherlands. e-mail: see http://www.reijers.com and
http://www.vdaalst.com. van der aalst is also with queensland university
of technology.models in practice often contain dozens of activities and
complex behavioral dependencies between them. an increase
in size of a business process model beyond certain thresholds,
can lead to comprehension problems by its stakeholders. for
complex models it becomes difﬁcult to validate them, to main-
tain them, and to utilize them as means of communication.
however, the sheer size of a process model is not the only
factor affecting the complexity of a process model. the level
of abstraction used to describe the various process tasks, the
way the model is laid out, the language used in the labels, etc.,
are all factors affecting the complexity of a process model.
more generally, we relate process model complexity to its
understandability, i.e. we refer to the effort required by its
users to understand a given process model.
the empirical connection between complexity and process
model understanding has been demonstrated in recent publi-
cations (e.g. [69], [6], [81]), as much as mechanisms have
been proposed to alleviate speciﬁc aspects of complexity (e.g.
[90], [95], [40]). however, what is lacking is a systematic
classiﬁcation of the various operations that exist for reduc-
ing complexity in process models. a comprehensive account
of such mechanisms would contribute to improved support
for complexity management in process modeling languages,
standards and tools. a corresponding classiﬁcation may be
beneﬁcial to research and practice, for instance to initiatives
towards process modeling language standardization, to aca-
demic and industrial tool evaluation, and to vendors seeking
to incorporate innovative features in their tools.
in this paper we address this research gap by compiling
a collection of patterns, which deﬁne an extensive range
of desired capabilities. the approach of capturing design
knowledge as patterns has been used in various engineering
disciplines including architecture, software engineering, and
workﬂow modeling. the patterns described in this paper
capture mechanisms for managing process model complexity.
they stem from the literature, process modeling language
speciﬁcations, and tool implementations.
essentially, mechanisms for managing complexity of pro-
cess models can be deﬁned on two different levels [72]: (a)
the concrete syntax of a model and (b) the abstract syntax
of a model. the concrete syntax of a process model deals
with its visual appearance, including symbols, colors and
position, and is also referred to as secondary notation [75].
a collection of patterns for concrete syntax modiﬁcations has
been presented in [55]. these patterns include mechanisms for
arranging the layout, for highlighting parts of the model using
enclosure, graphics, or annotations, for representing speciﬁcieee transactions on industrial informatics, vol. x, no. x, x 20xx 2
concepts explicitly or in an alternative way, and for providing
naming guidance. the abstract syntax of a process model
relates to the formal structure of process model elements
and their interrelationships. if we draw a parallel with the
ﬁeld of linguistics [20], the abstract syntax of a process
model corresponds to the deep structure of a sentence, i.e.
its underlying syntactic structure, as opposed to the concrete
syntax of a process model, which corresponds to the surface
form of a sentence, i.e. its presentation. the patterns presented
in this paper work on the abstract syntax and complement the
patterns collection for concrete syntax modiﬁcations presented
in [55]. they relate to model operations such as transforming
a model into a set of modules or omitting elements to provide
a more abstract view on the process. clearly, a change to the
abstract syntax of a process model can be expected to affect
the model’s visual appearance as well.
in this paper we aim for a language-independent description
of abstract syntax related patterns. each pattern is accom-
panied with a discussion of its intended effect on model
complexity and of different realizations to clarify its scope
and to demonstrate its relevance. the pattern description is
complemented by an overview of its support in tools and
modeling languages, which sheds light on its comparative
strengths and weaknesses. additionally, we evaluate each of
the patterns from a usability perspective as perceived by bpm
practitioners.
the paper is structured accordingly. section ii describes
and justiﬁes the methodology, which we used to identify the
patterns. section iii presents the collection of patterns in detail.
section iv evaluates the pattern support of various process
modeling languages and tools. section v presents the results
of a usability evaluation with bpm practitioners. section vi
discusses related work while section vii concludes the paper.
ii. m ethodology
in this paper we identify patterns to reduce the model
complexity on the level of its abstract syntax. the original idea
to organize design knowledge in terms of patterns stems from
the architect christopher alexander, who collected rules and
diagrams describing methods for constructing buildings. in this
context, a pattern provides a generic solution for a recurring
class of problems. the general idea of design patterns has been
introduced to information systems engineering by gamma,
helm, johnson and vlissides, who describe a set of recurring
problems and solutions for object-oriented software design.
the design patterns by gamma et al. inspired many patterns
initiatives in computer science, including the workﬂow pat-
terns initiative1.
the patterns for abstract syntax modiﬁcations, which are
deﬁned in this paper, have been collected through a series
of steps. the starting point was an extensive analysis of
the bpm literature. we looked at the last ten years’ table
of contents of all the major conferences in this ﬁeld, e.g.
bpm, caise, coopis, icsoc, and major journals such as
dke, ieee tse, acm tosem, is, icjis. in particular, the
selection of forums was determined on the basis of the era
1http://www.workﬂowpatterns.com2010 classiﬁcation2and the journals’ impact factor according
to web of knowledge.3in this step, we also looked at all
speciﬁcations and standard proposals that are endorsed by the
major standardization bodies such as oasis, omg, w3c and
wfmc. subsequently, we inspected mainstream commercial
bpm tools and the operations they offer for modifying the
abstract syntax. the initial set of patterns was ﬁrst discussed
among three of the authors, and then validated with the
remaining authors. the patterns derived in this way were then
presented to a panel of experts which resulted in a further
identiﬁcation of two additional patterns. this extended set was
evaluated with respect to their support by reported research
approaches, languages and tools with the goal to distinguish
those which are most frequently used. we decided to focus
on those patterns that are supported by at least ﬁve research
approaches/languages/tools. this resulted in a ﬁnal set of
12 patterns. finally, we evaluated this ﬁnal set on its ease
of use and usefulness by interviewing a group of 22 bpm
professionals.
each of the twelve patterns in the ﬁnal set is illustrated
in this paper by the use of bpmn (business process model
and notation), an industry standard for modeling business
processes. figure 1 shows the notational elements of bpmn
which are used in this paper. the example models are inten-
tionally kept simple such that they can be understood without
deep knowledge of this standard.
when referring to a model, we use the term model element
to indicate any element which has a corresponding concept
in the language’s meta-model. model elements can be nodes
(e.g. a task, a gateway or a business object) or arcs. we also
use the term fragment to indicate a set of model elements in
a process model that are organized via control-ﬂow relations,
and the term module to indicate a process model which is part
of a larger business process (e.g. a subprocess or the portion
of model enclosed by a lane).
we use a ﬁxed format to document the twelve patterns
and to discuss their support in languages, tools, and in the
literature. this format contains: (a) description, (b) purpose,
(c) example, (d) metric, (e) rational and (f) realization of
a pattern. the purpose describes the use case in which the
pattern is commonly used, while the rationale provides a
justiﬁcation grounded in the literature, as to why a given
pattern reduces the complexity of the process model it is
applied to. moreover, we relate each pattern that operates on a
process model to a desired improvement of a structural metric.
in fact, it has been shown that certain structural metrics can be
related to process model understandability [69]. for example,
intuitively, the smaller the size of a model, the easier it is to
understand it. we discuss the following metrics in this context:
module size , the number of nodes in a module;
model size , the summed size of all modules in a process
model [65];
repository size , the summed size of all models in a
process model repository;
models , the number of models in a process model repos-
2http://www.arc.gov.au/era
3http://apps.webofknowledge.comieee transactions on industrial informatics, vol. x, no. x, x 20xx 3
end 
eventstart 
eventmessage
flowxor
gatewayor
gatewayand
gatewaycall
activityend 
terminatesequence
flowcatching 
message
eventthrowing
message 
eventtaskcollapsed
subprocessthrowing
link
eventcatching
link
event
fig. 1. bpmn 2.0 concepts used in this paper.
itory [95];
depth , the number of modular levels appearing in a
process model [95];
diameter , the longest path from a start to an end element
in a process model [65];
average gateway degree , the number of nodes a gateway
in a speciﬁc process model is on average connected
to [65];
structuredness , the restructuring ratio of an unstructured
model to a block-structured variant of it [58];4
modules overhead , the ratio between modules andmodel
size;
fan-in , the average number of references to a module [57];
different modeling concepts , the number of different mod-
eling concepts used in a process model.
for example, fig. 5 shows a bpmn model consisting of three
levels with one root module and three subprocess modules.
this model has the following metrics: depth=3, modules=4,
model size=25, average gateway degree=3, different modeling
concepts=10 (arc, start event, end event, atomic task, subpro-
cess, and-split, and-join, xor-split, xor-join). similarly,
we can infer metrics for speciﬁc modules. for example the
root module has module size=9 and diameter=8.
iii. p atterns for abstract syntax modification
from an analysis of relevant bpm languages, tools and
approaches, we identiﬁed twelve patterns operating on the
abstract syntax of a process model and classiﬁed them ac-
cording to the hierarchy in fig. 2. the patterns are categorized
into two main groups: model modiﬁcation (including patterns
that directly modify a process model or set thereof) and
meta-model modiﬁcation (including patterns that have more
profound changes because they affect the underlying process
language). model modiﬁcation includes behavior abstraction
andbehavior neutral patterns. behavior abstraction includes
those patterns that operate on a single model and provide a
more abstract one as a result. omission simply skips elements
of the original model, while collapse aggregates a set of
elements into a single, semantically more abstract element. be-
havior neutral patterns preserve the behavior being described
in a single model or in a set of models, but organize this
behavior in a different representation. restructuring refers to
transformations that reorganize the control ﬂow of a process
model in a more understandable way, either in terms of
block-structuring orcompacting the process model, while
duplication introduces model element redundancy in order to
simplify its structure. three modularization patterns, vertical ,
4a block-structured model is one where each split element has a correspond-
ing join element of the same type, and split-join pairs are properly nestedhorizontal andorthogonal , capture different ways in which a
process model is decomposed into modules. two integration
patterns, namely composition andmerging , refer to features
for combining information which is scattered across different
modules or models into a single one. while composition
uses references among different modules or models to achieve
integration, merging relies on an overlap of elements. finally,
meta-model modiﬁcations involve restriction andextension .
pattern 1 (block-structuring )
description this pattern refers to methods to structure a
process model in blocks.
purpose to improve understandability and maintenance
through a simpler process model structure.
example fig. 3a shows an unstructured model where split
gateways are not matched by corresponding join gateways.
fig. 3b shows a behavior-equivalent model which is structured.
metrics increases structuredness of a process model.
rationale structured models are easier to understand [69], [70]
and less error-prone [65], [58] than unstructured models.
realization the problem of structuring process models has
been extensively analyzed in the literature both from an
empirical and from a theoretical point of view. laue and
mendling [58] report the results of a study showing that
structured models are less error-prone than unstructured equiv-
alent models. mendling et al. [70] propose seven guidelines
to model easily-understandable process models. one of these
guidelines is to model processes as structured as possible,
which was ranked by a pool of practitioners as the guide-
line with the highest relative potential for improving process
model understandability. kiepuszewski et al. [48] provide a
ﬁrst attempt to classifying unstructured process models that
can be transformed to structured equivalents, and show that
structured models are less expressive than unstructured ones.
thus, unstructured model fragments cannot always be replaced
with structured fragments that are behavior-equivalent. liu and
kumar [63] present an alternative taxonomy of unstructured
process models which also covers acyclic models, and sketch
a method to transform some types of unstructured models
into structured trace-equivalent alternatives. different trans-
formation strategies are also illustrated in [67]. in a similar
vein, [43] proposes a classiﬁcation of (unstructured) process
models using region trees, and provides a set of rules to
transform certain types of unstructured regions into structured
equivalents. an alternative classiﬁcation of process models
based on the rpst decomposition [94] (a reﬁnement of [43])
is proposed in [77], showing how unstructured regions can
be generated by composing structured process fragments. a
method speciﬁcally tailored to untangling unstructured cyclic
models and transforming them into structured bpel models isieee transactions on industrial informatics, vol. x, no. x, x 20xx 4
model
modification
restriction extensionmeta-model
modificationabstract 
syntax 
modification
horizontal vertical orthogonalmodularization
duplicationblock-
structuringcompactingrestructuring ommission collapse
composition mergingintegrationbehavior
neutralbehavior
abstraction
single module/model operation multiple module/model operation
fig. 2. patterns for abstract syntax modiﬁcation.
register 
loan
applicationa)
b)
register 
loan
application
approve
loanreject
loan
high liability 
and no debtsschedule
contract 
signingsign 
contractcalculate start date 
& interest 
ratetransfer 
moneynotify 
customercheck
debts
check 
liability
check
debts
check 
liabilityhigh liabilitylow liability
approve
loanschedule
contract 
signingsign 
contractcalculate start date 
& interest 
ratetransfer 
moneynotify 
customerreject
loan
no debtsdebts
low liability
and/or debts
fig. 3. a) an unstructured bpmn model. b) a behavior-equivalent model which is structured.
presented in [50], [44]. a complete characterization of unstruc-
tured acyclic process models that cannot be transformed into
block-structured ones is presented in [76], [29]. this method
is based on the rpst decomposition and is accompanied by
a tool to automatically structure acyclic process models that
are not in this class. finally, weber et al. [95] propose a set
of refactoring mechanisms for process models wherein they
devise (but do not operationalize) a mechanism to replace
a process fragment with a trace-equivalent fragment having
simpler structure.
pattern 2 (duplication )
description duplication (aka cloning) introduces controlled
redundancy in a process model by repeating model elements.
two model elements are duplicated if they point to the same
conceptual deﬁnition.
purpose to improve understandability and maintenance
through a simpler process model structure. often required to
block-structure an unstructured process model.
example fig. 4 shows a behavior-equivalent representation of
the model in fig. 3a after repeating task “reject loan”. this
alternative representation of the same model does not have any
crossing lines nor or-join gateways.metrics despite increasing model size , this pattern typically
also increases structuredness .
rationale less cluttered and more structured process models
are easier to comprehend [69], [70] and less error-prone [65],
[58].
realization process modeling languages generally provide the
possibility of creating duplicate model elements. for example,
in yawl [46] tasks can be duplicated by associating multiple
tasks to the same task decomposition, so that these tasks
have same operationalization. still, the two duplicates can be
allocated to different resources for their execution. in bpmn
2.0 two service tasks can be associated with the same service
reference and service endpoint, thus pointing to the same
web service implementation. to duplicate other types of tasks,
such as manual and user tasks, bpmn 2.0 provides the
global task construct, which is a reusable atomic task that can
be called from within any process model via an atomic call
activity. similar to service tasks, a call activity can override
the resources attribute of the invoked global task. global
tasks replace reference tasks in bpmn 1.2, which supported
duplication within the same process model only. in eepcs,
multiple elements (e.g. multiple events or functions) can point
to the same deﬁnition, thus allowing the repeated use of the
same concept. since different functions may be preceded orieee transactions on industrial informatics, vol. x, no. x, x 20xx 5
succeeded by the same events, it may be useful to duplicate
all preceding/subsequent events of a given function so as to
line them up close to the corresponding function’s symbol,
instead of having crossing arcs. in the activity diagrams
(ads) of uml 2.3, duplication is supported by the callbe-
havioraction, which is an action that points to an activity
deﬁnition. the mechanisms offered by these languages are
generally supported by the respective tool implementations.
for example, in aris one can navigate from the occurrence
of a deﬁnition in a process model back to the deﬁnition object
stored in the aris database, and when creating occurrence
copies of a deﬁnition, all attributes will also be copied. in
tibco business studio a bpmn 1.2 task can be identiﬁed as
a reference task and assigned to another task within the same
model, while a function “reveal” allows highlighting the task
being referenced by a reference task. in signavio a task can
be set as call activity, but it cannot be linked to a global task.
in the literature, duplication is used to block-structure process
models. for instance, the block-structuring approach in [76]
uses unfolding techniques from petri net theory to construct
an occurrence net [31]. in an occurrence net, each xor-join
is unfolded by repeating the subsequent net. the result is a
structured, but often much bigger model. the possibility to
have multiple tasks carrying identical labels may increase the
expressiveness of the language. a classical example can be
found in the theory of regions for petri nets. to construct a
bisimilar petri net for a transition system, it may be necessary
to do “label splitting” (multiple transitions referring to the
same task) [21].
pattern 3 (compacting )
description this pattern refers to methods to remove redun-
dant elements in a process model without loss of process
behavior. elements that can be removed include redundant
transitive arcs, superﬂuous gateways or duplicated tasks. this
pattern may revert the effects of duplication.
example fig. 3b can also be obtained by compacting the
two occurrences of task reject loan and the two xor-split
gateways from the model in fig. 4.
purpose to reduce model size and thus improve the overall
model representation, especially in large process models or
models that have undergone a number of updates.
metrics reduces model size .
rationale reducing model size positively affects model un-
derstanding [69].
realization methods for eliminating superﬂuous elements
have been deﬁned for petri nets. the work by berthelot
deﬁnes so-called implicit places [13]. an implicit place does
not contribute to the overall behavior captured in a process
model, since it always has a token when other places have
tokens too. thus, it can be deleted without impacting the
model behavior. a related reduction rule is deﬁned by desel
and esparza [26] with the notion of transitively dependent
arc. while this concept is deﬁned for veriﬁcation purposes,
it can also be used to eliminate superﬂuous arcs from a
process model without an effect on the behavior. the concept
of transitive reduction is also exploited in an approach to
synthesize process models from behavioral proﬁles such thattransitive order dependencies are deleted [89]. furthermore,
[27] proposes an approach to merge subsequent connectors of
the same type. the same idea is utilized in [66].
pattern 4 (vertical modularization )
description this pattern captures features to decompose a
model into vertical modules, i.e. subprocesses, according to
a hierarchical structure.
purpose to increase understandability of large process mod-
els by “hiding” process details into sub-levels. to decrease
redundancy and foster reuse by referring to a subprocess from
several places within the same process model or from different
process models in a repository. the maintenance burden of a
process model (repository) is also decreased, as a change to a
subprocess needs only be performed in one place.
example fig. 5 shows the vertical modularization of the model
in fig. 3b in three hierarchical levels.
metrics increases depth andmodels , and reduces module size
by replacing a model fragment with a single element referring
to that module. it may increase the overall model size if the
fan-in of the module being introduced is one, because for
each extracted module a node needs to be inserted in the root
model to refer to that module. modules overhead needs to
be controlled (i.e. it is pointless to factor out single model
elements or very small process fragments to subprocesses).
rationale hiding process details into sub-levels increases
understanding [83] and fosters reuse [4], [60]. smaller models
are less error-prone [68] and easier to maintain [70] than larger
ones. reducing redundancy helps to avoid inconsistencies,
since redundant fragments may be edited by different users
simultaneously [93].
realization most languages offer modeling constructs to cap-
ture vertical modularization. uml ads provide the notion
of an activity to encapsulate subprocesses, as opposed to
atomic actions. in eepcs, models of different types can be
assigned to different element types. for example, a function
can be decomposed into an eepc capturing a subprocess, an
event can be decomposed into an event diagram capturing
more detailed sub-events, and an organizational unit can be
decomposed into an organizational chart. in bpmn 2.0 a task
can be decomposed into a collapsed subprocess (the subpro-
cess is available as a separate module) or as an expanded
subprocesses (the subprocess is represented within the task
box itself). bpmn requires a different construct (the collapsed
call activity task) if the subprocess to be invoked is external
(i.e. it is a standalone process model), rather than an internal
module. in yawl, bpel and protos subprocesses can only be
invoked internally via a compound task (yawl), scope ac-
tivity (bpel) or sub-process element (protos). for correctness
purposes, yawl and bpel only accept single-entry single-
exit subprocesses. tools offer different degrees of support for
this pattern. some simply allow the speciﬁcation of pointers
to subprocesses (e.g. the yawl editor), others allow process
hierarchies to be traversed (e.g. oracle jdeveloper, signavio),
and some also offer a tree-like view of the hierarchy and allow
sub-processes to be automatically created from a set of model
elements (e.g. protos and aris). general recommendations
are also available for modularizing a process model vertically:ieee transactions on industrial informatics, vol. x, no. x, x 20xx 6
register 
loan
applicationcheck
debts
check 
liabilityhigh liability
low liabilityno debtsdebts reject
loan
reject
loanapprove 
loanschedule
contract 
signingsign 
contractcalculate 
start date 
& interest 
ratetransfer 
moneynotify 
customer
fig. 4. a behavior-equivalent representation of the model in fig. 3a after repeating task “reject loan” (the top “reject loan” task is the global task while
the bottom one is the call activity referring to that task).
[59], [10] suggest to encapsulate only single-entry single-
exit (sese) fragments in subprocesses and [94] provides a
method for automatically detecting sese fragments based
on the rpst decomposition. moreover, [47], [86] suggest to
introduce subprocesses in models with 5–15, resp., 5–7 nodes,
while [70] suggests to decompose models with more than 50
nodes based on empirical evidence. the positive effects of
vertical modularization on process model understanding have
been studied in [83]. a mechanism to automatically extract
cloned fragments in large process model repositories and
capture them as globally available subprocesses, is envisaged
in [95], while an algorithm to detect such clones is deﬁned
and implemented in [93].
approve
loanreject
loan
calculate 
start date 
& interest 
ratetransfer 
moneynotify 
customerschedule 
contract 
signingsign 
contractsign
process 
loanregister 
loan
application
high liability and no debtslow liability
and/or  debts
check loan 
application
check
debts
check 
liability
fig. 5. vertical modularization: the model in fig. 3b has been decomposed
into three levels.
pattern 5 (horizontal modularization )
description this pattern captures features to partition a pro-
cess model into peer modules.
purpose to increase maintainability by breaking down a
process model into smaller and more easily manageable parts,
the ownership of which may be assigned to different users.
hence, to facilitate collaboration. to reduce clutter in those
models where long or crossing edges cannot be avoided. to
foster reuse of modules within the same process model or
across different process models.
example fig. 6a shows how the model in fig. 3b has been
decomposed into two parallel modules: “home loan” and
“sign”, which communicate via message exchange. process
model “sign” can now also be used by a third model, namely
“student loan”, thus increasing reusability. the model in
fig. 3b actually focuses on the loan registration part of a larger,end-to-end process model for handling loans, where “register
loan” is preceded by “merchandize” and followed by “handle
loan”. this model can thus also be decomposed into multiple
sequential modules, e.g. one per logical part. fig. 6b shows
the “register loan” module which is connected to the other
modules via link events. moreover, the “sign loan” part has
been extracted from “register loan” and modeled separately.
metrics reduces module size (by replacing a model fragment
with a single element referring to that module), and increases
models . it may also increase model size if the fan-in of the
module being introduced is one.
rationale reducing model size positively affects model un-
derstanding [69]. decomposing a process model into modules
fosters reuse of shared modules [4], [60].
realization uml ads, bpmn and bpel offer features to
represent parallel process modules via message exchange.
uml ads offers the concept of partitions to divide a process
model in peer modules. bpmn provides pools to create peer
modules and message flows to connect a source node in
one pool to a target node in another pool. bpel supports
synchronous and asynchronous inter-process communication
via the invoke, receive and reply activities, which link to
a bpel process counterpart via a partnerlink. bpmn also
offers the signal event to synchronize the control ﬂow in dif-
ferent modules. the difference between these languages is that
only in bpel the modules are completely independent, while
in uml ads and bpmn reuse of a module is limited within
the same process model. other languages such as eepcs and
protos provide constructs to capture external connections (i.e.
events in eepcs and triggers in protos). however, while in
eepcs two process modules can be formally linked by using
two occurrence copies of the same event deﬁnition, this is
not possible in protos. sequential modules can be obtained
in bpmn via the link event which interrupts the ﬂow after
a source node and before a target node. the corresponding
construct in uml ads is the activity edge connector, in
eepcs it is the processinterface while in protos it is the off-
page connector. generally, the above concepts are supported
by tools. for example, both signavio and protos allow users
to jump from two corresponding link events, resp., off-page
connectors. in the literature, [28] deﬁnes a mechanism to
partition large bpmn models sequentially by cutting those
edges with numerous bends and crossings and inserting two
pointers at the two ends of each cut edge. the objective is
to obtain subgraphs of nearly equal size while keeping the
number of cut edges low. worklets [8] are a mechanism to deal
with highly-ﬂexible process models. a worklet is a processieee transactions on industrial informatics, vol. x, no. x, x 20xx 7
approve
loanreject
loan
conditionally 
approve loan
approve
loanno debtsregister 
loan
applicationcheck
debts
check 
liabilities high liability 
and no debtslow liability
and/or  debts
register 
loan
applicationcheck
debtsdebtsa)
sign loanschedule 
contract 
signingsign 
contractnotify 
customer...register 
loan
applicationreject
loan
high liability and no debtslow liability
and/or  debts
b.1
(to sign loan)b.2
(from sign loan)
b.1
(from
register loan)b.2
(to register loan)a
(from 
merchandize)c
(to handle 
payments)sign loan register loanapprove
loan...b)home loan student loanschedule 
contract 
signingsign 
contractnotify 
customer...loan 
sent for 
signaturesigned 
loan
received
signed loansent
signed 
loan
receivedloan 
sent for 
signatureloanreceived
fig. 6. horizontal modularization: (a) the model in fig. 3b has been partitioned in two parallel modules via message exchange (“home loan” and “sign”),
and (b) the end-to-end process model for handling loans has been partitioned in four sequential modules two of which are shown.
fragment capturing a speciﬁc process scenario, i.e. variant
within a given process model. various worklets can exist for
a given variation point and one of them will be activated
at run-time based on the evaluation of a set of ripple-down
rules. this approach has been implemented in the yawl
system where worklets can be deﬁned to tasks via the rules
editor, and instantiated via the worklet service. a similar
mechanism is provided in [32], where a large, unstructured
petri net can be represented as a set of partially-ordered,
acyclic process fragments called oclets. each oclet captures a
speciﬁc scenario of a given process together with information
indicating when the scenario occurs. this idea of capturing
a process model as a set of partially-ordered runs is also put
forward in [25], [12]. proclets [5] are lightweight workﬂow
nets which interact via message exchange and have knowledge
of previous interactions. a process model is a set of proclets
that are instantiated and coupled according to an underlying
business object model. this approach is introduced to deal
with highly-interactive business processes.
pattern 6 (orthogonal modularization )
description this pattern captures features to decompose a
process model along the crosscutting concerns of the modeling
domain, which are scattered across several model elements
or modules. examples of concerns are security, privacy and
exception handling.
purpose to enable a separation of concerns and distribution
of responsibilities. to facilitate maintenance of individual,
concern-speciﬁc process models.
example fig. 7a shows a more detailed representation of the
“process loan” subprocess from fig. 5, which includes further
tasks to deal with the security aspect related to loan processing.
fig. 7b shows the orthogonal modularization of this process
across its security aspect. the tasks related to this aspect have
been extracted and captured in a separate model which is
accessible by the ﬁrst two activities of “process loan”. these
activities are instantiated at the join point in the “security
aspect” model.
metrics increases models , as “concern-speciﬁc” process mod-
els are introduced. decreases the model size when a concernis associated with several process models, as its speciﬁcation
is deﬁned in a single place.
rationale reducing model size positively affects model un-
derstanding [70], [73]. decomposing a process model into
modules fosters reuse of shared modules [4], [60].
realization aspect-oriented modularization [18] is an appli-
cation of this pattern. this approach is inspired by aspect-
oriented programming and deﬁnes extensions to workﬂow
languages in general [17], bpel [18] and bpmn [16], to
represent non-functional aspects of a business process such
as security and logging, as separate, reusable modules. the
notions of joint point ,pointcut andadvice used in aspect ori-
ented programming, are adopted in this context. for instance,
fig. 7 shows a bpmn model extended with such notions.
during process execution, when the task associated with a
pointcut is reached, the module (i.e. advice) speciﬁed for the
corresponding aspect is triggered. its join point task is then
substituted with the task triggering that advice. an advice
can be executed before or after a join point, although more
advanced mechanisms can be envisaged, e.g. in parallel to the
join point. various aspects can be associated with the same
activity and a concern may include more than one module, e.g.
different levels of security could be captured via different mod-
ules. orthogonal modularization is also applied to deal with
exceptions. the basic idea is to avoid unnecessary cluttering of
a process model by extrapolating those procedures to handle
possible exceptions from the main process ﬂow. in bpmn 2.0,
exceptions can be handled outside the normal process ﬂow via
an event subprocess. these subprocesses are triggered by the
occurrence of a given event, and can either run in parallel to
the main process ﬂow (non-interrupting event subprocess) or
in alternative to the main ﬂow (interrupting event subprocess).
in uml ads exception routines are speciﬁed in separate
exception handler activities which are connected to the main
activities where exceptions may occur via an interrupt flow
arc. similarly, in bpel fault handlers can be attached to a
scope activity or to a global process model. these features
are generally provided by the respective tools. [7] proposes to
capture exception handling routines via the exlet notion. anieee transactions on industrial informatics, vol. x, no. x, x 20xx 8
process loan (enhanced with security)
generate
codeenter
keyvalidate
keykey ok
key 
not okpoint
cutjoin
pointtransfer 
moneynotify 
customergenerate
codeenter
keyvalidate
keykey 
ok
key 
not okcalculate 
start date 
& interest 
rategenerate
codeenter
keyvalidate
keykey 
ok
key 
not oka)
b)
calculate 
start date 
& interest 
ratetransfer 
moneynotify 
customerprocess loan
security aspect
fig. 7. orthogonal modularization: (a) extracting the security aspect from the “process loan” subprocess in fig. 5 and (b) capturing it in a separate module.
exlet speciﬁes how an exception inﬂuences a running task,
process instance, or all instances of a process model, and can
be assigned a compensating routine in the form of a worklet to
be performed when the given exception occurs. this approach
is supported in the context of the yawl language by the
rules editor and the exception service available in the yawl
system.
pattern 7 (composition )
description this pattern describes features for constructing a
consolidated process model from different disjoint modules.
modules may be organized vertically in a hierarchy (in this
case composition will ﬂatten the hierarchy), or horizontally, or
orthogonally (where each module represents a domain-speciﬁc
concern). as such, this pattern may reverse the effects of
modularization.
purpose to consolidate a family of interrelated modules
into a single process model. the effect may be increased
maintainability and understandability when there are too many
or too small modules, e.g. due to subsequent modiﬁcations.
it is useful when the process depth is too high or when a
module contains only one or two nodes. the advantages are
situation-dependent (e.g. ﬂattening a model may be useful
when presenting it to a business user).
example fig. 3b can be obtained by composing either the
vertical modules in fig. 5, or the horizontal modules “home
loan” and “sign loan” in fig. 6a.
metrics decreases modules and their fan-in , but increases
model size . reduces depth andmodules overhead when ap-
plied to a process hierarchy.
rationale extracting information from fewer modules or from
a single model may be easier than dealing with many small
modules [83].
realization the concept of this pattern has been deﬁned as a
refactoring mechanism in [95]. here the authors recommend
to inline process fragments when the induced navigation
overhead of a modularization is not justiﬁed. a corresponding
change pattern is speciﬁed in [96]. composing vertical mod-
ules is also deﬁned as a transformation strategy to convert
bpel models to bpmn [67], and adapted to owl-s in
[35]. [53] proposes a method for composing state machines
describing the lifecycle of independent objects involved in a
business process, into a single uml ad capturing the overall
process. this work assumes that the lifecycles to be composed
are disjoint and consistent. the concept of composition isalso widely supported by business process modeling tools.
for instance, aris provides the model generator command
to construct a ﬂattened model from a subprocess hierarchy,
or to compose sequential modules into one model. a similar
feature, called explode is available in the protos editor.
pattern 8 (merging )
description this pattern describes features for merging similar
process models based on their commonalities, i.e. their iden-
tical model elements. the result is a single merged model.
purpose to consolidate a family of similar process models (i.e.
process variants ) into a single “reference” process model, by
removing redundancies.
example fig. 8 shows the model resulting from merging the
“home loan” and “student loan” modules in fig. 6a.
metrics decreases models . it also decreases repository size
since redundancies among variants are minimized. however,
the resulting reference model may be more complex.
rationale consolidating a process family improves its un-
derstandability, since a single model is kept instead of many
variants. it also improves the maintainability of a repository,
given that the total number of models is reduced [95], [54].
removing redundancies helps decrease the risk of inconsis-
tencies due to independent changes to the repository [95].
realization [92] proposes, but does not fully automate, an
approach for merging block-structured workﬂow nets by using
a set of merge patterns between mapped tasks. [71] proposes
a merging operator that takes two different epcs each rep-
resenting a speciﬁc process view, as well as a mapping of
their correspondences, and produces a merged epc. since
the models to be merged represent partial views of the same
process, the resulting merged model allows the various views
to be executed in parallel. [37] merges pairs of epcs by
performing the union of each of the two models. the nodes to
be merged must have identical labels and the input epcs must
have single start and end events and no connector chains. this
approach is operationalized as a prom plug-in. [54] presents
an algorithm to merge process variants into a conﬁgurable
process model [84] where divergencies between common
and variant-speciﬁc fragments are marked via conﬁgurable
connectors. the mapping between two input variants relies on
the similarity of their nodes’ labels (including resource and
object nodes) and of their graph structures. the algorithm is
language-independent (it has been validated on bpmn and
eepc models) and has been implemented on the apromoreieee transactions on industrial informatics, vol. x, no. x, x 20xx 9
approve
loanreject
loan
student: no debts/
home: low liability
and no debtsregister 
loan
applicationcheck
debts
check 
liabilityconditionally 
approve loanstudent: 
debtsstudent/
home
homehome: low liability 
and/or  debts
loan sent 
for signaturesigned loan
received
fig. 8. the models “home loan” and “student loan” from fig. 6a have been merged in a single reference process model for registering loans.
process model repository. tools deriving from research initia-
tives such as greta [33] and viptool [12] allow the automatic
synthesis of a petri net from a set of partially-ordered petri
nets (called oclets in greta). this is closely related to the
topic of process mining where example behavior is folded
within a single model [1]. [61] proposes to construct a single
generic model from a set of model variants, such that the
sum of the change distances between each variant and the
generic model is minimal. this approach only works for
block-structured process models with and and xor blocks
and has been implemented on the miniadept tool. the
problem of maintaining merged epcs has been explored in
[82]. here the authors propose an alternative (mostly manual)
method which is applicable if the need for maintaining merged
models is identiﬁed before the actual process modeling effort
is started. finally, [51] describes the requirements of a process
merging tool for version conﬂict resolution. the aim is to assist
modelers in resolving differences manually, by identifying
changes via the technique in [52].
pattern 9 (omission )
description omission (aka elimination) captures features to
remove one or more elements from a process model and
reconnect the remaining ones. it implies loss of process
behavior.
purpose to focus on speciﬁc parts of a process model while
abstracting from the rest, due to the requirements of a project
or speciﬁc audience.
example fig. 9a shows an example of omission by displaying
only the tasks from the process in fig. 3b which are performed
by a loan clerk, and omitting the automated tasks.
metrics decreases model size and may also decrease diameter
andaverage gateway degree .
rationale simpler process models which focus on speciﬁc
aspects relevant to a given audience are easier to understand
by the latter [88].
realization omitting process behavior is related to the notion
ofinheritance of workﬂow behavior [2]. accordingly, process
model behavior can be restricted by applying two operators
to petri net transitions: hiding (an hidden transition remains
in the model but its behavior is no longer observable) and
blocking (a blocked transition is removed from the model with
possible consequences to the control ﬂow). [90] proposes a
decimation algorithm to remove model nodes that are less
relevant, and reconstructing the process ﬂow. the relevance
of a node is determined according to a text search (the nodes
whose labels contain a given string are kept), and to structuralimportance (the main model structure is kept). [78] proposes a
slider approach for building process model abstractions based
on thresholds such as execution frequency, time and cost of
nodes. [19] applies omission to create public process views
for inter-organizational cooperation, driven by the need to hide
business data for conﬁdentiality reasons. users specify which
process tasks represent cooperative tasks that can be safely
shared with partners, and then a public process is derived
which shows these tasks only. these approaches are close to
the separation of concerns between bpel public processes,
containing communication tasks only, and bpel private pro-
cesses, also containing internal tasks. deriving customized
process views for speciﬁc audiences is also the purpose of
[39], where a method for removing epc functions based on the
organizational structure is proposed. process conﬁguration is
another research area where omission is applied. it consists of
removing from a conﬁgurable process model those fragments
that are not relevant to a speciﬁc scenario. this is done via the
application of an individualization algorithm. individualization
algorithms have been deﬁned for various languages, including
uml ads [22], ltss [36], epcs [24] (pp. 111–148) [84],
yawl [38] and petri nets [3]. finally, omission also occurs in
[30] and in [15] for achieving customized process views, and
in [41] for simplifying process models that have been mined
from logs. these approaches apply omission in combination
with collapse mechanisms (more details are given in the
realization of collapse).
pattern 10 (collapse )
description collapse (aka aggregation) describes features to
synthesize multiple model elements into a single one of more
abstract nature, where the distinction among the constituent
elements is no longer relevant. it implies information synthe-
sis.
purpose to simplify a process model for a speciﬁc audience.
example fig. 9b shows an example of collapse between single
control-ﬂow elements from the model in fig. 3b. here tasks
check debts and check liability, and all tasks in the lower
path of the xor-split, have been collapsed into a single task
for performing the required checks, resp., a single task for
approving and processing loans.
metric decreases model size , and may also decrease diameter
andaverage gateway degree .
rationale simpler process models which focus on speciﬁc
aspects relevant to a given audience are easier to understand
by the latter [88].ieee transactions on industrial informatics, vol. x, no. x, x 20xx 10
approve 
and sign
loanb)
register 
loan
applicationreject
loan
high liability 
& no debtscheck
liability and 
debtsa)
reject
loan
high liability & no debtssign 
contractcheck
debts
check 
liabilityapprove
loanlow liability
and/or  debtslow liability
and/or debts
fig. 9. two patterns applied to the model in fig. 3b: (a) the omission pattern was used to remove the automated tasks, and (b) the collapse pattern was
used to join the tasks in the lower branch following the xor-split into a single task.
realization [90] proposes an algorithm to incrementally sim-
plify a process model by applying a set of reduction rules
via which nodes with low relevance are gradually collapsed to
their predecessor nodes. the order of the collapsed elements
can be stored should the user wish to reverse the collapse
effects. [30] uses a combination of omission and collapse
to derive models for cross-organization collaboration. the
approach contains two steps: aggregation andcustomization .
in the ﬁrst step, the provider selects those internal tasks that
they wish to hide to a speciﬁc customer, and these tasks
are collapsed accordingly. afterwards, the customer speciﬁes
the tasks they are interested in and the remaining tasks are
either collapsed with each other, or omitted from the model.
similarly, the proviado approach [15] applies a combination of
graph reduction (omission) and graph aggregation (collapse)
techniques to obtain customized process views, based on a
user query, e.g. “show the tasks of a particular user only”.
attribute values of aggregated tasks, e.g. data information,
are also collapsed – a feature that is not available in other
approaches, which only focus on control ﬂow. process views
of workﬂow models are also obtained in [62] by collapsing
connected sets of tasks. the approach in [80] proposes an
algorithm for abstracting process models. it uses the model’s
rpst decomposition to identify fragments that are structurally
suitable for collapse. then transformation rules are applied to
produce an abstracted fragment by collapsing its tasks. this
algorithm lifts the limitations of another abstraction algorithm
from the same authors [79]. the latter work aimed to collapse
those tasks that are observed less often based on the identiﬁca-
tion of abstraction patterns (dead-end, sequential, block, and
loop abstractions). as such, it was limited by the occurrence
of these patterns in a model. [89] proposes an approach based
on the notion of behavioral proﬁles [97]. a behavioral proﬁle
describing the behavior of a process model in terms of task
order relations if ﬁrst inferred from a process model. then this
proﬁle is used together with an user-deﬁned grouping of tasks
to produce an abstract process model where selected tasks are
collapsed based on the deﬁned grouping of tasks. the degree
of collapse is determined by the user. collapse has also been
applied in process mining [1]. [41] presents an algorithm in
which both collapse and omission are used to identify non-
essential details when extracting process models from logs.
the algorithm applies a number of metrics (derivable from the
logs) to establish the signiﬁcance of and correlation between
model elements, according to which process models are either
collapsed or omitted.pattern 11 (restriction )
description this pattern captures features to restrict the syntax
and semantics of a process modeling language, by removing
modeling concepts from the language’s meta-model. this
pattern impacts all process models described by the restricted
meta-model.
purpose to improve understandability and maintenance
through a simpliﬁed process model.
example fig. 10a shows the restriction of the “home loan”
model in fig. 6a after removing the concept of event from
the bpmn meta-model.
metrics decreases the number of different modeling concepts
in a process model. it may decrease model size when removing
any modeling concepts that are used in the process model.
rationale a smaller number of element types is easier to learn
for modeling novices [42], [74]. for this reason, modelers tend
to use only a subset of language elements in practice [74].
realization different conformance classes have been intro-
duced in bpmn 2.0 to restrict the meta-model in a con-
trolled way. there are four classes for process modeling,
process execution, bpel process execution, and choreog-
raphy modeling. another example of meta-model restriction
is the proposal by silver [87]. it introduces three levels
of bpmn usage: level 1 for business people, level 2 for
analysts, and level 3 for developers. the more business-
oriented levels only contain a subset of the overall bpmn
notation. a similar distinction is sometimes also made by
software vendors. in tibco’s iprocess suite, for instance, a
process model can be classiﬁed according to its purpose, i.e.
business analysis, deployment or simulation, where the meta-
models for deployment and simulation implement a subset of
the bpmn notation. similarly, the bpel standard deﬁnes a
subset for abstract processes. becker et et. [11] outline an
approach for creating process model projections based on the
restriction of the process’ meta-model. these projections are
achieved by applying so-called conﬁguration parameters to
meta-model elements in order to simplify the notation for
a speciﬁc audience. for example, one can hide the resource
perspective in the eepc meta-model so that all the roles and
organizational units that are associated with eepc functions
are removed. this functionality is also implemented in the
form of ﬁlters by tools such as aris and signavio.
pattern 12 (extension )
description this pattern captures features to extend the syntax
and semantics of a process modeling language by adding new
modeling concepts to the language’s meta-model, or reﬁning
the existing ones.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 11
approve
loanreject
loan
register 
loan
applicationcheck
debts
check 
liabilities high liability 
and no debtslow liability
and/or debts
approve
loan
<<approval>>reject
loan
<<rejection>>
register 
loan
applicationcheck
debts
check 
liabilities high liability and no debtslow liability
and/or  debts
loan sent 
for signature
<<fax>>signed loan
received
<<fax>>b) a)
fig. 10. examples of (a) restriction and (b) extension for the “home loan” model in fig. 6a. in (a) the concept of event has been removed from the
bpmn meta-model. in (b) new stereotypes have been added to specialize the concepts of task and message event.
purpose to obtain either a closer match to the concepts of
a particular domain, or a straightforward transformation to
executable software.
example fig. 10b shows the “home loan” model in fig. 6a
after extending the bpmn meta-model with two task sub-
types, namely approval and rejection, and with one message
event subtype, namely fax (each captured by a stereotype).
in fig. 10b the approval and rejection task stereotypes have
been applied to task reject loan, resp., approve loan, while
the fax stereotype has been applied to the two message events.
metrics increases the number of different modeling concepts
in a process model. it may increase model size when a new
modeling concept is used in the process model.
rationale reﬁning a language’s meta-model to suit the spe-
ciﬁc concepts of a domain makes the process models described
by this language easier to understand for the audience of that
domain [73], [34].
realization both uml ads and bpmn beneﬁt from the
extension capabilities of the meta-object facility (mof) [45],
which provides a standardized way for reﬁning existing ele-
ment types based on stereotyping. for instance, this mecha-
nism has been used in [85] to extend bpmn with the concepts
ofvariation point and variant , and in [22] to extend uml
ads with similar concepts. moreover, various approaches exist
which extend the meta-models of process modeling languages
by adding new elements, rather than using stereotypes. for
instance, [98] provides an extension to the bpmn meta-model
to explicitly capture access control requirements. [16] extends
bpmn to model non-functional aspects while [18] provides a
similar extension to bpel. bpel4people [9] and bpelj [14]
are two further extensions of the bpel meta-model to repre-
sent human tasks, resp., to incorporate java snippets in bpel.
further, [91] extends uml ads with concepts to deﬁne role-
based access control aspects. epcs have also been extended
in different works with real-time concepts, object orientation,
risk, and control-ﬂow constructs of other languages [65]. uml
modeling tools such as enterprise architect, typically support
the standard uml extension mechanism of stereotypes. aris
provides features to perform limited customizations of an
eepc meta-model (called aris method ). one can rename
meta-model elements and attributes, and regroup attributes.
however it is not possible to add new sub-types or attributes.
iv. b enchmarking
similar to our previous work in [55], we now report the
results of evaluating several languages and tools against their
support for the identiﬁed patterns. the languages we selected
for this evaluation are mainstream process modeling languagesstemming from standardization efforts, large-scale adoptions
or established research initiatives. speciﬁcally, we chose three
languages for conceptual process modeling (uml ads 2.3,
eepcs and bpmn 2.0) and four languages for executable
process modeling (bpmn 2.0, bpel 1.2/2.0, yawl 2.2 beta
and protos 8.0.25). for each language, we also evaluated one
supporting modeling tool. for uml ads we tested sparx’s
enterprise architect 9; for eepcs we tested aris business
architect 7.2 from software ag; for bpmn we tested sig-
navio editor 5.0.0; for bpel we tested oracle’s jdeveloper
11.1.1.5.0; for yawl we tested the yawl editor and rules
editor; and for protos the protos editor 8.0.2/bpm jone from
pallas athena.
table 11 shows the results of the analysis, where tool
evaluations are shown next to the evaluations of the supported
languages, except for protos, where the language cannot be
separated from its tool, because it is vendor speciﬁc. for a
tool, we measured the extent by which it facilitates the support
for a pattern, as it is offered by the corresponding language.
we ranked a tool with a ‘-’ if it offers no support for a pattern;
with a ‘+/-’ if the support is only partial or if it is the same
as that offered by the corresponding language; and with a
‘+’ if the support goes beyond that offered by the language,
i.e. if the tool actually facilitates the application of a pattern.
accordingly, for duplication we ranked signavio, jdeveloper
and protos with a ‘-’. in particular, in signavio call activity
tasks cannot be linked with global tasks thus this pattern is not
actually supported. for vertical modularization, we ranked the
yawl editor with a ‘+/-’ as it is not possible to navigate from
a parent model to a subprocess. enterprise architect took a
‘+/-’ for horizontal modularization as it supports the concept
of uml partition (to create parallel modules), but not that of
activity edge connector (to create sequential modules). for
extension we gave a ‘+/-’ to aris as it only allows renaming
of elements and attributes of the eepc meta-model, but not
the addition of new concepts.
six of the twelve patterns that we identiﬁed in this paper
(i.e. block-structuring, compacting, composition, merging,
omission and collapse) are not applicable to languages since
they refer to tool features only (we crossed the corresponding
cells for the languages in table 11). for these patterns,
we rated a tool with a ‘+’ if it supported the pattern, and
otherwise with a ‘-’. as per bpel, even though this language
is essentially block-structured, tool features could still be
provided to block-structure or compact the content of a flow
5protos is now part of the bpm jone suite that allows protos models to
be executed. however, in most organizations, protos is still mainly used for
process modeling and analysis rather than for enactment.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 12
 
 
uml ad s 2.3 
enterprise  
architect 9 
eepcs  
aris 7. 2 
bpmn 2.0  
signavio 5.0.0  
bpel 1.2/ 2.0 
jdeveloper 
11.1.1.5 .0 
yawl 2. 2 beta  
yawl  + rules  
editor 2.2 beta  
protos 8.0.2  / 
bpm|one  
1 block -structuring   -  -  -  -  - - 
2 duplication  + + + + + - - - + + - 
3 compacting   -  -  -  -  - - 
4 vertical 
modularization  + + + + + + + + + +/- + 
5 horizontal 
modularization  + +/- + + + + + + - - + 
6 orthogonal 
modularization  + + - - + + + + + + - 
7 composition   -  +  -  -  - + 
8 merging   -  -  -  -  - - 
9 omission   -  -  -  -  - - 
10 collapse   -  -  -  -  - - 
11 restriction  - - - + + + + - - - - 
12 extension  + + - +/- + - - - - - - 
fig. 11. evaluation results.
activity (e.g. by removing redundant link arcs). however,
since jdeveloper does not offer any such feature, we rated
this tool with a ‘-’ along these two patterns. in fact, these
six patterns are not supported by any of the evaluated tools,
except for aris and protos which cater for composition. this
indicates a clear immaturity of process modeling tools for such
advanced features, which have only been explored in research.
one would expect that a tool generally offered wider pattern
support than the respective language. indeed, this is what we
observed in the benchmark of tools for the concrete syntax pat-
terns [55]. however for the abstract syntax patterns the results
are more varied. aris supports more patterns than eepcs,
enterprise architect supports as many patterns as uml ads,
while signavio, jdeveloper and the yawl editors support
less patterns than their respective languages. the reason for
such different level of sophistication among the tools evaluated
may be twofold. first, these tools have a different maturity
(for example, aris and enterprise architect have been around
much longer than the others). second, the difference in support
between bpmn 2.0 and signavio is likely due to the fact
that bpmn 2.0 has only been standardized recently (a few
months before the time of writing). thus, we cannot yet expect
a high level of maturity for its supporting tools. finally, as
observed for the concrete syntax patterns, bpmn 2.0 is the
language supporting the greatest number of patterns, out of
the languages being evaluated. this is clearly a reﬂection of
the evolution of business process modeling languages.
v. u sability evaluation
for the evaluation of the usability of the patterns we drew
inspiration from the technology acceptance model [23] and its
adaptation to conceptual modeling [64]. this theory postulates
that actual usage of an information technology artifact—
patterns in the case of this paper—is mainly inﬂuenced by the
perceptions of potential users regarding usefulness and easeof use. accordingly, a potential user who perceives a pattern
to be useful andeasy to use is likely to actually adopt it.
we conducted a series of focus group sessions with pro-
fessionals to discuss the patterns, in a similar vein as in our
earlier work [55]. each session started with a presentation of
the patterns, which was used to clarify any doubt that may
arise in the audience through an open discussion. this was
followed by the actual survey, where we inquired the audience
about their perceived usefulness and ease of use of the patterns,
and gathered their comments. each session took between one
and two hours, depending on the number of attendees and the
length of the open discussions that took place. altogether, 22
process modeling experts participated in these sessions, which
took place in sweden (ﬁve participants), in germany (four
participants) and in australia (13 participants). on average, the
participants had close to eight years experience with process
modeling. when we asked them, they estimated that in the past
twelve months each analyzed approx. 120 models on average,
while having created over 45 models in the same period. the
average size of such a model would be 30 tasks. due to
this extensive involvement in both process model analysis and
development, the participants can be considered as genuine
experts in the ﬁeld.
we used a questionnaire with seven-point scale items
adopted from [64] to measure the participants’ perceptions on
usefulness and ease of use for each of the patterns. our earlier
pattern evaluation using the same set of questions [55] already
pointed at the high internal consistency of these questions,
which is a measure for the reliability of this evaluation. indeed,
the computation of cronbach’s alpha as ex post reliability
check for this evaluation provided the values 0.89 for useful-
ness and 0.82 for ease of use, which conﬁrm our conﬁdence
in this instrument. the boxplots in fig. 12 and 13 display
the outcomes of the data analysis for the patterns’ usefulness
and ease of use respectively (in a boxplot the median value
is shown as a horizontal line in a box, which represents the
interval between the lower and upper quartiles).
1 – block-structuring
2 – duplication
3 – compacting4 – v. modularization
5 – h. modularization
6 – o. modularization7 – composition
8 – merging
9 – omission10 – collapse
11 – restriction
12 – extension
fig. 12. perceived usefulness of the patterns.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 13
1 – block-structuring
2 – duplication
3 – compacting4 – v. modularization
5 – h. modularization
6 – o. modularization7 – composition
8 – merging
9 – omission10 – collapse
11 – restriction
12 – extension
fig. 13. perceived ease of use of the patterns.
as displayed by fig. 12, all patterns are perceived to be use-
ful (each median at least equals 5). the patterns that received
the highest scores are patterns 5 (horizontal modularization)
and 11 (restriction). figure 13 shows that ease of use is
considered positively too, with median values of 5 or more
for all but patterns 6 (orthogonal modularization) and 12
(extension); their median scores still exceeded 4. the patterns
that received the highest scores for ease of use are patterns 4
(vertical modularization) and 7 (composition).
during the survey, we invited the participants to explain
their scores. one of the swedish participants singled out
pattern 11 (restriction), stating that it is “very efﬁcient”
and often applied by this person in modeling workshops.
a participant from australia stressed the value of pattern 2
(duplication), saying that “we use this a lot in our aris
modeling, especially in swim lane models to avoid clutter and
cross-over”. another pattern that received explicit praise for
usefulness in the discussion was pattern 3 (compacting), as
it was recognized to reduce confusion of name similarities in
large models. by contrast, pattern 6 received critical remarks.
one of the german participants noted that it was rather
complicated to understand and to apply. as he said, “if at all,
this might be relevant for very large repositories of executable
process models”. however, in follow-up to this remark two
other participants in the same session expressed their belief in
the value of this pattern, in particular to separate exceptions
from the normal ﬂow.
in summary, the focus group sessions support the statement
that the patterns can be considered useful and in general easy
to use. it is interesting to note that in comparison to our earlier
evaluation of patterns for concrete syntax modiﬁcations [55],
the lack of tool support was not considered an issue. this may
very well point at a greater adoption of abstract syntax patterns
in praxis.
vi. r elated work
this paper should be seen as a continuation of the work
presented in [55] where we described and evaluated eightpatterns for concrete syntax modiﬁcation. the goal of these
patterns is to reduce the perceived model complexity without
changing the abstract syntax, i.e., the goal is to simplify
the representation of the process model without changing its
formal structure. an example of such a pattern is layout
guidance, i.e., the availability of layout conventions or advice
to organize the various model elements on a canvas. the
other seven patterns described in [55] are enclosure highlight,
graphical highlight, pictorial annotation, textual annotation,
explicit representation, alternative representation and nam-
ing guidance.
the twelve patterns presented in this paper complement
the patterns of [55] as they operate on the abstract syntax
of process models. for example, duplicating a task to make
the model structured changes the abstract syntax whereas
modifying the layout does not.
many authors have worked on functionality related to
abstract syntax modiﬁcations as is illustrated by the many
references provided when describing the possible realizations
of such patterns. however, we are not aware of other ap-
proaches that systematically collect patterns to improve the
understandability of process models.
there have been other approaches to analyze the expres-
siveness or completeness of bpm languages and systems. for
a review of these approaches, we refer to the related work
section of our previous patterns collection [55].
our work is also related to [73], which proposes a theory
of general principles for designing cognitive-effective visual
notations. in particular, our modularization patterns can be
seen as an implementation of the principle of complexity
management, which prescribes the provision of modulariza-
tion and hierarchical abstraction to deal with model com-
plexity. however, our patterns collection also provides other
mechanisms related to complexity management besides mod-
ularization. our restriction pattern is related to the principle
of graphic economy, according to which the number of
different graphical symbols should be controlled in order to
be “cognitively manageable”. in fact, as a result of restricting
a meta-model, the number of symbols available will also
be restricted. this is particularly valid for languages with
an extensive number of graphical symbols such as eepcs
and bpmn, where restriction could be applied to ﬁlter-out
irrelevant symbols for particular audiences. further, extension
is related to the principle of cognitive fit, which prescribes
the use of different dialects for different audiences. in fact
this pattern can be used to create an audience-speciﬁc process
modeling dialect by extending a process’ meta-model.
vii. c onclusion
the main contribution of this paper is a systematic analysis
of abstract syntax modiﬁcations for reducing the complexity in
process models, as they occur in the literature, in process mod-
eling languages, and tool implementations. this analysis took
the form of a collection of frequently recurring patterns. these
twelve patterns, combined with the eight patterns presented in
[55], provide a comprehensive overview of existing mecha-
nisms and language features to improve the understandabilityieee transactions on industrial informatics, vol. x, no. x, x 20xx 14
of process models by reducing complexity. the patterns in [55]
focused on changes to the concrete syntax (e.g., improving the
layout) but did not consider changes to the abstract syntax.
after documenting these patterns, we evaluated state-of-
the-art languages and language implementations in terms of
these patterns, and conducted a usability test with practitioners.
the results of the usability test demonstrate that all identiﬁed
patterns are indeed perceived as relevant and useful.
although most tools provide some support for modifying
models to improve their understandability, there is no real
guidance on how to simplify and clarify the representation of
process models. for example, many tools allow the duplication
of model elements (e.g., two nodes referring to the same
activity), but automated support to suggest duplication for
increasing the understandability is missing in the current gen-
eration of process model editors. thus, one could argue that
today’s tools are appropriate for model creation, yet provide
little support for model management and maintenance. since
business processes change at an increasing pace and more and
more variants of the same process need to be supported, this
shortcoming is limiting the applicability of bpm technology.
therefore, we hope that tool vendors will use our patterns as
a guide to drive the development of better functionality. we
also aim to extend existing research tools such as the yawl
editor, and the process model repository apromore [56], with
innovative features to support the identiﬁed patterns.
acknowledgments we thank the practitioners involved in
the empirical evaluation for their valuable time, and the
anonymous reviewers for their comments which helped to
improve this paper. this research is partly funded by the arc
linkage project lp110100252, “facilitating business process
standardisation and reuse” (la rosa and ter hofstede).
references
[1] w.m.p. van der aalst. process mining: discovery, conformance and
enhancement of business processes . springer, 2011.
[2] w.m.p. van der aalst and t. basten. inheritance of workﬂows:
an approach to tackling problems related to change. theoretical
computer science , 270(1-2):125–203, 2002.
[3] w.m.p. van der aalst, m. dumas, f. gottschalk, a.h.m. ter hofstede,
m. la rosa, and j. mendling. preserving correctness during business
process model conﬁguration. formal aspects of computing , 22(3):459–
482, 2010.
[4] w.m.p. van der aalst and k. m. van hee. workﬂow management:
models, methods, and systems . mit press, 2002.
[5] w.m.p. van der aalst, r.s. mans, and n.c. russell. workﬂow support
using proclets: divide, interact, and conquer. ieee data eng. bull. ,
32(3), 2009.
[6] a.a. abdul, g.k.t. wei, g.m. muketha, and w.p. wen. complexity
metrics for measuring the understandability and maintainability of
business process models using goal-question-metric (gqm). ijcsns ,
8(5):219–225, 2008.
[7] m. adams, a.h.m. ter hofstede, w.m.p. van der aalst, and d. ed-
mond. dynamic, extensible and context-aware exception handling for
workﬂows. in otm , volume 4803 of lncs , pages 95–112. springer,
2007.
[8] m. adams, a.h.m. ter hofstede, d. edmond, and w.m.p. van der aalst.
worklets: a service-oriented implementation of dynamic flexibility in
workﬂows. in otm conferences (1) , volume 4275 of lncs , pages
291–308. springer, 2006.
[9] a. agrawal, m. amend, m. das, c. keller, m. kloppmann, d. k ¨onig,
f. leymann, r. m ¨uller, g. pfau, k. plosser, r. rangaswamy, a. rick-
ayzen, m. rowley, p. schmidt, i. trickovic, a. yiu, and m. zeller.
ws-bpel extension for people (bpel4people), version 1.0. technical
report, active endpoints, adobe, bea, ibm, oracle and sap, 2007.[10] a. basu and r.w. blanning. synthesis and decomposition of processes
in organizations. info. sys. research , 14:337–355, 2003.
[11] j. becker, p. delfmann, a. dreiling, r. knackstedt, and d. kuropka.
conﬁgurative process modeling – outlining an approach to increased
business process model usability. in m. khosrow-pour, editor, pro-
ceedings of the 14th information resources management association
international conference . irm press, 2004.
[12] r. bergenthum, j. desel, s. mauser, and r. lorenz. construction of
process models from example runs. topnoc ii , 2009.
[13] g. berthelot. transformations and decompositions of nets. in
w. brauer, w. reisig, and g. rozenberg, editors, advances in petri nets
1986 part i: petri nets, central models and their properties , volume 254
oflecture notes in computer science , pages 360–376. springer-verlag,
berlin, 1987.
[14] m. blow, y . goland, m. kloppmann, f. leymann, g. pfau, d. roller,
and m. rowley. bpelj: bpel for java. technical report, bea and
ibm, 2004.
[15] r. bobrik, m. reichert, and t. bauer. view-based process visualization.
inproc of. bpm , volume 4714 of lncs , pages 88–95. springer, 2007.
[16] c. cappelli, j.c.s.p. leite, t. batista, and l. silva. an aspect-oriented
approach to business process modeling. in early aspects of aspect-
oriented software development , pages 7–12, 2009.
[17] a. charﬁ and m. mezini. aspect-oriented workﬂow languages. in
cooperative information systems , volume 4275 of lncs , pages 183–
200. springer, 2006.
[18] a. charﬁ and m. mezini. ao4bpel: an aspect-oriented extension to
bpel. in proc. of www , volume 10, pages 309–344. springer, 2007.
[19] i. chebbi, s. dustdar, and s. tata. the view-based approach to
dynamic inter-organizational workﬂow cooperation. data & knowledge
engineering , 56(2):139–173, 2006.
[20] n. chomsky. syntactic structures . mouton, 1957.
[21] j. cortadella, m. kishinevsky, l. lavagno, and a. yakovlev. deriving
petri nets from finite transition systems. ieee transactions on
computers , 47(8):859–882, august 1998.
[22] k. czarnecki and m. antkiewicz. mapping features to models: a
template approach based on superimposed variants. in proc. of gpce ,
pages 422–437. springer-verlag, berlin, 2005.
[23] f.d. davis. perceived usefulness, perceived ease of use, and user
acceptance of information technology. mis quarterly , 13(3):319–340,
1989.
[24] p. delfmann. adaptive referenzmodellierung. methodische konzepte zur
konstruktion und anwendung wieder verwendungsorientierter informa-
tionsmodelle . logos, 2006. (in german).
[25] j. desel. validation of process models by construction of process nets.
inbpm , 2000.
[26] j. desel and j. esparza. free choice petri nets , volume 40 of
cambridge tracts in theoretical computer science . cambridge univ.
press, cambridge, uk, 1995.
[27] b.f. van dongen, w.m.p. van der aalst, and h.m.w. verbeek. veriﬁ-
cation of epcs: using reduction rules and petri nets. in in proc. of
caise , volume 3520 of lncs , pages 372–386. springer, 2005.
[28] p. efﬁnger, m. siebenhaller, and m. kaufmann. an interactive layout
tool for bpmn. e-commerce technology , 0:399–406, 2009.
[29] f. elliger, a. polyvyanyy, and m. weske. on separation of concurrency
and conﬂicts in acyclic process models. in emisa , pages 25–36, 2010.
[30] r. eshuis and p.w.p.j. grefen. constructing customized process views.
data knowl. eng. , 64(2):419–438, 2008.
[31] j. esparza and k. heljanko. unfoldings: a partial-order approach to
model checking . springer-verlag new york inc, 2008.
[32] d. fahland. oclets – scenario-based modeling with petri nets. in proc
of petri nets , lncs. springer, 2009.
[33] d. fahland and m. weidlich. scenario-based process modeling with
greta. in bpm demos , volume 615. ceur, 2010.
[34] m. fowler and r. parson. domain-speciﬁc languages . addison-wesley,
2010.
[35] a. gater, d. grigori, and m. bouzeghoub. ranked matching for owl-s
process model discovery. technical report, prism, 2010.
[36] f. gottschalk, w.m.p. van der aalst, and m.h. jansen-vullers. con-
ﬁgurable process models: a foundational approach. in reference
modeling , pages 59–78. springer, 2007.
[37] f. gottschalk, w.m.p. van der aalst, and m.h. jansen-vullers. merging
event-driven process chains. in proc. of coopis , volume 5331 of
lncs , pages 418–426. springer, 2008.
[38] f. gottschalk, w.m.p. van der aalst, m.h. jansen-vullers, and m. la
rosa. conﬁgurable workﬂow models. int. journal of cooperative
information systems , 17(2):177–221, 2008.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 15
[39] f. gottschalk, m. rosemann, and w.m.p. van der aalst. my
own process: providing dedicated views on epcs. in epk 2005
- gesch ¨aftsprozessmanagement mit ereignisgesteuerten prozessketten ,
volume 167 of ceur , pages 156–175, 2005.
[40] v . gruhn and r. laue. reducing the cognitive complexity of business
process models. in ieee icci , pages 339–345, 2009.
[41] c.w. g ¨unther and w.m.p. van der aalst. fuzzy mining - adaptive
process simpliﬁcation based on multi-perspective metrics. in proc. of
bpm , volume 4714 of lncs , pages 328–343. springer, 2007.
[42] m. h. halstead. elements of software science , volume 7 of operating,
and programming systems series . elsevier, 1977.
[43] r. hauser, m. friess, j.m. kuster, and j. vanhatalo. an incremental
approach to the analysis and transformation of workﬂows using
region trees. ieee transactions on systems, man, and cybernetics,
part c , 38(3):347–359, 2008.
[44] r. hauser and j. koehler. compiling process graphs into executable
code. in gpce , volume 3286 of lncs , pages 317–336, 2004.
[45] brian henderson-sellers and cesar gonzalez-perez. uses and abuses of
the stereotype mechanism in uml 1.x and 2.0. in in proc. of models ,
volume 4199 of lncs , pages 16–26. springer, 2006.
[46] a.h.m. ter hofstede, w.m.p. van der aalst, m. adams, and n. russell,
editors. modern business process automation: yawl and its support
environment . springer, 2010.
[47] n.f. kock jr. product flow, breadth and complexity of business
processes: an empirical study of 15 business processes in three or-
ganizations. business process re-engineering & management journal ,
2:8–22, 1996.
[48] b. kiepuszewski, a.h.m ter hofstede, and c. bussler. on structured
workﬂow modelling. in advanced information systems engineering ,
volume 1789 of lncs , pages 431–445. springer, 2000.
[49] n. kock, j. verville, a. danesh-pajou, and d. deluca. communication
ﬂow orientation in business process modeling and its effect on redesign
success: results from a ﬁeld study. decision support systems , 46(2):562–
575, 2009.
[50] j. koehler and r. hauser. untangling unstructured cyclic flows – a
solution based on continuations. in otm , volume 3290 of lncs , pages
121–138, 2004.
[51] j.m. k ¨uster, c. gerth, a. f ¨orster, and g. engels. a tool for process
merging in business-driven development. in proc. of the caise’2008
forum , volume 344 of ceur workshop proceedings , pages 89–92.
ceur, 2008.
[52] j.m. k ¨uster, c. gerth, a. f ¨orster, and g. engels. detecting and
resolving process model differences in the absence of a change log.
inproc. of bpm , volume 5240 of lncs , pages 244–260. springer, 2008.
[53] j.m. k ¨uster, k. ryndina, and h. gall. generation of business process
models for object life cycle compliance. in proc. of bpm , volume
4714 of lncs , pages 165–181. springer, 2007.
[54] m. la rosa, m. dumas, r. uba, and r. dijkman. merging business
process models. in otm , lncs. springer, 2010.
[55] m. la rosa, a.h.m. ter hofstede, p. wohed, h.a. reijers, j. mendling,
and w.m.p. van der aalst. managing process model complexity via
concrete syntax modiﬁcations. ieee trans. on industrial informatics ,
7(2), 2011.
[56] m. la rosa, h.a. reijers, w.m.p. van der aalst, r.m. dijkman,
j. mendling, m. dumas, and l. garc ´ıa-ba ˜nuelos. apromore: an
advanced process model repository. expert systems with applications ,
38(6), 2011.
[57] r. laue and v . gruhn. complexity metrics for business process models.
inbusiness information systems , volume 85 of lni, pages 1–12. gi,
2006.
[58] r. laue and j. mendling. structuredness and its signiﬁcance for
correctness of process models. inf. syst. e-business management ,
8(3):287–307, 2010.
[59] f. leymann. workﬂows make objects really useful. in emisa forum ,
volume 6, pages 90–99. gi, 1996.
[60] f. leymann and d. roller. workﬂow-based applications. ibm systems
journal , 36(1):102–123, 1997.
[61] c. li, m. reichert, and a. wombacher. the minadept clustering
approach for discovering reference process models out of process
variants. int. j. cooperative inf. syst. , 19(3-4):159–203, 2010.
[62] d.r. liu and m. shen. workﬂow modeling for virtual processes: an
order-preserving process-view approach. information systems , 28, 2003.
[63] r. liu and a. kumar. an analysis and taxonomy of unstructured
workﬂows. in proc. of bpm , volume 3649, pages 268–284, 2005.
[64] a. maes and g. poels. evaluating quality of conceptual modelling
scripts based on user perceptions. data & knowledge engineering ,
63(3):701–724, 2007.[65] j. mendling. metrics for process models: empirical foundations of
veriﬁcation, error prediction, and guidelines for correctness , volume 6
oflnbip . springer, 2009.
[66] j. mendling and w.m.p. van der aalst. formalization and veriﬁcation
of epcs with or-joins based on state and context. in j. krogstie,
a.l. opdahl, and g. sindre, editors, in proc. of caise , volume 4495
oflncs , pages 439–453, 2007.
[67] j. mendling, k.b. lassen, and u. zdun. on the transformation of con-
trol ﬂow between block-oriented and graph-oriented process modelling
languages. international journal of business process integration and
management , 3(2):96–108, 2008.
[68] j. mendling, g. neumann, and w.m.p. van der aalst. understanding
the occurrence of errors in process models based on metrics. in otm ,
volume 4803 of lncs , pages 113–130. springer, 2007.
[69] j. mendling, h.a. reijers, and j. cardoso. what makes process models
understandable? in proc. of bpm , volume 4714 of lncs , pages 48–63.
springer, 2007.
[70] j. mendling, h.a. reijers, and w.m.p. van der aalst. seven process
modeling guidelines (7pmg). information and software technology ,
52(2):127–136, 2010.
[71] j. mendling and c. simon. business process design by view integra-
tion. in proc. of bpm workshops , volume 4103 of lncs , pages 55–64.
springer, 2006.
[72] b. meyer. introduction to the theory of programming languages .
prentice-hall, englewood cliffs, new jersey, 1990.
[73] d.l. moody. the “physics” of notations: toward a scientiﬁc basis
for constructing visual notations in software engineering. ieee
transactions on software engineering , 35:756–779, 2009.
[74] m. zur muehlen and j. recker. how much language is enough? theo-
retical and practical use of the business process modeling notation. in
proc. of caise , volume 5074 of lncs , pages 465–479. springer, 2008.
[75] m. petre. cognitive dimensions ’beyond the notation’. j. vis. lang.
comput. , 17(4):292–301, 2006.
[76] a. polyvyanyy, l. garc ´ıa-ba ˜nuelos, and m. dumas. structuring acyclic
process models. in bpm , volume 6336 of lncs , pages 276–293.
springer, 2010.
[77] a. polyvyanyy, l. garc ´ıa-ba ˜nuelos, and m. weske. unveiling hidden
unstructured regions in process models. in otm , volume 5870 of
lncs , pages 340–356, 2009.
[78] a. polyvyanyy, s. smirnov, and m. weske. process model abstraction:
a slider approach. in proc. of edoc , pages 325–331. springer, 2008.
[79] a. polyvyanyy, s. smirnov, and m. weske. reducing complexity of
large epcs. in proc of. mobis , pages 195–207. gi, 2008.
[80] a. polyvyanyy, s. smirnov, and m. weske. the triconnected abstrac-
tion of process models. in proc. of bpm , volume 5701 of lncs , pages
229–244. springer, 2009.
[81] j. recker, m. zur muehlen, k. siau, j. erickson, and m. indulska.
measuring method complexity: uml versus bpmn. in amcis , pages
1–12. ais, 2009.
[82] h.a. reijers, r.s. mans, and r.a. van der toorn. improved model
management with aggregated business process models. data knowl.
eng., 68(2):221–243, 2009.
[83] h.a. reijers, j. mendling, and r.m. dijkman. human and automatic
modularizations of process models to enhance their comprehension.
information systems , 36(5):881–897, 2011.
[84] m. rosemann and w.m.p. van der aalst. a conﬁgurable reference
modelling language. information systems , 32(1):1–23, 2007.
[85] a. schnieders and f. puhlmann. variability mechanisms in e-business
process families. in proc. of bis , volume 85 of lni, pages 583–601.
gi, 2006.
[86] a. sharp and p. mcdermott. workﬂow modeling: tools for process
improvement and application development . artech house, 2001.
[87] b. silver. bpmn method & style . cody-cassidy press, 2009.
[88] s. smirnov, h.a. reijers, t. nugteren, and m. weske. business
process model abstraction: theory and practice. technical report 35,
university of potsdam, 2010.
[89] s. smirnov, m. weidlich, and jan mendling. business process model
abstraction based on behavioral proﬁles. in proc. of icsoc , volume
6470 of lncs , pages 1–16, 2010.
[90] a. streit, b. pham, and r. brown. visualization support for managing
large business process speciﬁcations. in bpm , volume 3649 of lncs ,
pages 205–219. springer, 2005.
[91] m. strembeck and j. mendling. modeling process-related rbac
models with extended uml activity models. information & software
technology , 53(5):456–483, 2011.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 16
[92] s. sun, a. kumar, and j. yen. merging workﬂows: a new perspective
on connecting business processes. decision support systems , 42(2):844–
858, 2006.
[93] r. uba, m. dumas, l. garc ´ıa-ba ˜nuelos, and m. la rosa. clone
detection in repositories of business process models. in proc. of bpm ,
lncs, 2011.
[94] j. vanhatalo, j. v olzer, and j. kohler. the reﬁned process structure
tree. dke , 68(9):793–818, 2009.
[95] b. weber, m. reichert, j. mendling, and h.a. reijers. refactoring
large process model repositories. computers in industry , 62(5):467–
486, 2011.
[96] b. weber, m. reichert, and s. rinderle-ma. change patterns and change
support features - enhancing ﬂexibility in process-aware information
systems. data knowl. eng. , 66(3):438–466, 2008.
[97] m. weidlich, j. mendling, and m. weske. efﬁcient consistency
measurement based on behavioural proﬁles of process models. ieee
tse, page (to appear), 2011.
[98] c. wolter and a. schaad. modeling of task-based authorization
constraints in bpmn. in in proc. of bpm , volume 4714 of lncs ,
pages 64–79. springer, 2007.
marcello la rosa is a senior lecturer with the
bpm research group at the queensland university
of technology, brisbane, australia. he obtained his
phd in computer science with the same research
group in 2009. his research interests embrace differ-
ent topics in the bpm area, such as management of
large process model collections, process modeling,
conﬁguration and automation. marcello is a senior
trainer for professional education courses on bpm
and service-oriented architecture topics.
petia wohed is an associate professor at the
department of computer and systems sciences at
stockholm university, where she is a member of
the information system laboratory. since her grad-
uation in 2000, wohed’s main interest is in the
area of business process management, in which she
has worked on a series of patterns-based analyses
of modern process modeling languages and open-
source workﬂow systems.
jan mendling is a junior-professor with the insti-
tute of information systems at humboldt-universit ¨at
zu berlin, germany. his research areas include busi-
ness process management, conceptual modeling and
enterprise systems. he has published more than 100
research papers and articles. jan is member of the
editorial board of three international journals. he
served as co-chair for the int. conference on bpm in
2010 and was the initiator of the bpmn workshop
series.
arthur h.m. ter hofstede is a professor at the
faculty of science & technology of queensland
university of technology in brisbane, australia.
he is co-leader of the bpm research group in this
faculty. he is also a professor in the information
systems group at eindhoven university of tech-
nology in eindhoven, the netherlands. his main
research interests lie in the area of business process
automation. he is involved in both the workﬂow
patterns initiative and the yawl initiative.
hajo a. reijers is an associate professor in the
information systems group at technische univer-
siteit eindhoven and an afﬁliated professor with
the tias/nimbas business school of tilburg uni-
versity. his research interests cover business process
redesign, business process modeling, workﬂow man-
agement technology, and simulation. he published
over 75 refereed papers and served as the co-chair
of the int. conference on bpm in 2009.
wil m.p. van der aalst is full professor of in-
formation systems at the technische universiteit
eindhoven and adjunct professor at queensland
university of technology. his research interests in-
clude workﬂow management, process mining, petri
nets, process modeling and analysis. many of his
papers are highly cited (he has an h-index of 80 as
per google scholar, making him the dutch computer
scientist with the highest h-index) and his ideas
have inﬂuenced researchers, software developers and
standardization committees on process support.