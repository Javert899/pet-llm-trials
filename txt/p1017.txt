interactive data-driven process model
construction
p.m. dixit1, h.m.w. verbeek1, j.c.a.m. buijs1, and w.m.p. van der aalst2
1eindhoven university of technology, eindhoven, the netherlands
2rheinisch-westflische technische hochschule, (rwth) aachen, germany
{p.m.dixit,h.m.w.verbeek,j.c.a.m.buijs}@tue.nl
wvdaalst@pads.rwth-aachen.de
abstract. process discovery algorithms address the problem of learning
process models from event logs. typically, in such settings a user's acti-
vity is limited to conguring the parameters of the discovery algorithm,
and hence the user expertise/domain knowledge can not be incorporated
during traditional process discovery. in a setting where the event logs
are noisy, incomplete and/or contain uninteresting activities, the process
models discovered by discovery algorithms are often inaccurate and/or
incomprehensible. furthermore, many of these automated techniques can
produce unsound models and/or cannot discover duplicate activities, si-
lent activities etc. to overcome such shortcomings, we introduce a new
concept to interactively discover a process model, by combining a user's
domain knowledge with the information from the event log. the disco-
vered models are always sound and can have duplicate activities, silent
activities etc. an objective evaluation and a case study shows that the
proposed approach can outperform traditional discovery techniques.
keywords: hci, process discovery, process mining
1 introduction
process discovery, a sub-eld of process mining, aims at discovering process
models from event logs. most discovery algorithms aim to do so automatically
by learning patterns from the event log. automated process discovery algorithms
work well in settings where the event log contains all the necessary (e.g. noise
free, complete) information required by the algorithm, and the language of the
underlying model is about the same as the language of the models discovered by
the discovery algorithm. however, in many real world scenarios this is not the
case.
first, the discovered process models might explain the event logs extremely
well, but may still be completely incomprehensible to the end user. therefore,
it is imperative to enable the user to have control over the process model being
discovered, thereby also enabling incorporation of domain knowledge during pro-
cess discovery. second, the process models discovered by discovery algorithms are
constrained by the vocabulary of the language used for representing the model,
i.e., representational bias [1]. that is, some process discovery algorithms may
not discover silent activities (i.e., skippable activities), duplicate activities (i.e.,
activities that occur more than once) etc. third, many discovery algorithms may2 dixit et al.
discover process models which are unsound. a sound process model guarantees
an option to execute each activity in the process at least once and the ability to
reach the nal state (thereby terminating the process) from any valid reachable
state. in practical settings, unsound process models are often not interesting to
the user and hence are discarded. ideally the discovery algorithm should limit
the search space to only sound process models. however, for many discovery
techniques this is not the case.
user
event logsynthesis rules:
sound free choice
workï¬‚ow nets
a 
b e 
c a 
workï¬‚ow net editorfeedback from
the event logmodify pro-
cess model
fig. 1: overview of interactive process
discovery. the user can edit/discover a
sound models guided by an event log.in the interactive process disco-
very approach presented in this paper
and as shown in figure 1, the user
discovers a process model incremen-
tally. the user has total control over
the discovery approach and can dis-
cover/model the process at a desired
complexity level. therefore, the user
can balance simplicity, and to a cer-
tain extent, generalization of the pro-
cess model (among other dimensions)
in an ecient way. the interactive
editor is further enhanced with pro-
cess mining capabilities. information
from the event log is used to guide the user in modeling/discovering the process.
the user can make informed decisions about where to place a particular activity,
depending on the insights gained from the event log. the interactive approach
gives the user total control over process discovery. moreover, by default, the
modeled/discovered processes are always in the realm of sound process models.
the remainder of the paper is structured as follows. we review the related
work in section 2 and the preliminaries in section 3 respectively. in section 4
we discuss our approach followed by implementation overview in section 5. in
section 6 we evaluate our approach and conclude in section 7.
2 related work
in this section, we rst review the state-of-the-art automated process discovery
techniques followed by the user-guided process mining techniques.
2.1 automated process discovery
discovery algorithms which use the information from the event log about or-
dering relations in activities and their frequencies such as the miner and the
heuristic miner [3,2] are sensitive to noise. alongside these, the techniques that
use a semantic approach for discovery such as the the state based region miner,
numerical abstract domains, and the language based region miner [5,11,6] do
not guarantee soundness. furthermore, algorithms such as the ilp miner and
theminer [2,4] cannot discover silent activities. genetic discovery techniquesinteractive process discovery 3
table 1: representational bias of various process discovery and repair algorithms.
[2]hm
[3]ilp
[4]sbr
[5]lbr
[6]etm
[7]im
[8]mbr
[9]ipd
duplicate
activities- - - + - + - - +
silent acti-
vities- + - + - + + + +
self loop
activities- + + + + + + + +
non block
structured+ + + + + - - + +
classic
soundness- + - - - + + - +
: alpha miner, hm: heuristic miner, ilp: ilp miner, sbr: state based regions,
lbr: language based regions, etm: evolutionary tree miner, im: inductive miner,
mbr: model based repair, ipd: interactive process discovery (this paper)
classic soundness[10] is dened for the class of workow nets
such as [7] have excessive run times and usually do not give any guarantees
on any quality criterion in a short run. the inductive miner [8] can discover
only block-structured process models and cannot discover duplicate activities.
techniques such as [12] focus on discovering complex process models represen-
ted as bpmn models containing sub-processes and events. discovery techniques
such as [13,14,15] discover either constraints based declarative models, or pro-
babilistic models, and not an end-to-end process model.
our approach diers from all these automated process discovery techniques
in multiple ways (see table 1 for an overview). the process models generated
by our approach are always sound, since we use a synthesis rules kit (based on
[16]) which guarantees soundness. in our approach, the user has control over the
discovery (modeling) process, therefore addition of constructs such as duplicate
activities, silent activities, (self-)loops etc. are all allowed as deemed appropriate
by the user. also, noisy (incomplete) information could be ignored (overcome)
based on the extracted information from the event log presented to an informed
user.
2.2 user-guided approaches
of late, there has been an interest in using domain knowledge, along with the
event logs, for process discovery [17,18,19,20]. however, the domain knowledge
is usually represented by some pre-dened constructs or some sort of rules which
are used as input during the process discovery. the language used to represent
the domain knowledge severely limits the expressiveness of the domain expert.
in our approach, the user has total control over the discovery phase and can
intuitively use the domain knowledge, along with the event logs, to interactively
visualize and discovery the process model. in [21], the authors provide a way for
the user to include domain expertise in the miner. however, this approach is
tied to the underlying algorithm, and thereby includes all the limitations of the
algorithm. apromore [22] provides a host of techniques including interactive4 dixit et al.
process model repair techniques [23]. however, the focus of these techniques is
model repair using alignments, similar to [9]. these techniques have a dierent
scope compared to our approach, whose focus is process model discovery.
3 preliminaries
in this section, we introduce the so-called activity logs and synthesized nets .
3.1 activity logs
table 2: the exam-
ple activity log
activity trace freq
ha;a;f;c i 8
ha;f;a;e;c i 1
ha;f;a;e;e;c i 1
hb;d;e;c i 4
hb;d;e;e;c i 1
hb;e;d;c i 4
ha;a;f;e;e;e;c i1anactivity log is a multi-set (or bag) of sequences of acti-
vities. every sequence of activities in the activity log is
called an activity trace. table 2 shows an example acti-
vity log, which contains 20 activity traces, 7 dierent
activity traces, 87 activities, and 6 dierent activities. in
real life, we often see event logs instead of activity logs,
where an event log is a (multi-)set of sequences of events .
an event is typically a key-value pair containing values
for several attributes that are related to the event, such
as the time on which the event occurred and to which
activity the event relates. using the latter attribute, the
mapping from such an event log to an activity log is then
straightforward. as a result, although we use activity logs in this paper, the
presented approach is also applicable on event logs.
3.2 synthesized nets
i
>
p1a
t5
b
t1p2p7
p8
p6a
t6
d
t2
et4f
t7p3
p5c
t3 t8p?o
fig. 2: the example synthesized net corre-
sponding to table 2.asynthesized net is a free-choice
[16] workow net [24] containing a
source place i, a sink place o, a
start transition >, and an end tran-
sition ?. only the start transition
may have an input arc from the
source place, and only the end tran-
sition may have an arc to the sink
place. the source and sink place are
known from the workow nets [24],
but our approach also requires the
additional start and end transition.
we use the regular petri net
semantics [16] for the synthesized
net. a transition is enabled if all
its input places contain tokens. in the initial state of the example net, as shown
in figure 2, only the >transition is enabled as only place icontains a token.
an enabled transition may be red, which removes a token from every inputinteractive process discovery 5
place and adds a token to every output place. firing the enabled transition >
in the example net results in the state where place p1contains one token and all
other places are empty. this state enables the transitions t1andt5, etc. being a
workow net, the goal of the example net is to reach the state where only place
ocontains a token and all other places are empty, that is, the stop state of the
net. the soundness property [10] guarantees that this stop state can always be
reached.
figure 2 also shows that we allow the transitions to be labeled (by activities,
actually), but that we also allow a transition to be silent, that is, not labeled.
as examples, the transition t5is labeled with activity a, and the transition t8is
silent. the start and end transitions are required to be silent.
4 approach
in this section, we discuss the approach used in order to enable interactive process
discovery using the synthesis rules [16]. we begin with the initial net and the
synthesis rules in the context of our approach.
4.1 initial net and synthesis rules
i
>pb
?o
fig. 3: initial
net.figure 3 shows the initial synthesized net, which is the mi-
nimal synthesized net. as mentioned earlier, the places iand
o, the transitions >and?, and the arcs connecting them are
required, and we need the place pwith its connecting arcs to
make it a workow net. we have three synthesis rules, where
each of the rules is based on a synthesis rule from [16]: an
abstraction rule, a place rule, and a transition rule.
the abstraction rule allows one to introduce a new place and a new transition,
provided that we have a set of transitions rand a set of places ssuch that
there is an arc from every transition in rto every place in s. figure 4a shows
a synthesized net that can be obtained from the initial net by applying this rule
three times. first, place p1and transition t1are introduced using r=f>g and
s=fpg. second, place p2and transition t2are introduced using r=ft1gand
s=fpg. third, place p3and transition t3are introduced using r=ft2gand
s=fpg.
the other two synthesis rules use the fact whether a place or a transition
islinearly dependent . for this, we need the incidence matrix of the net. a net
can be short-circuited by removing the place o, and re-routing the outgoing arc
from?toi. table 3 shows the incidence matrix of the short circuited version
of figure 4b. in this matrix, every row vector corresponds to a place, and every
column vector corresponds to a transition. the number at the intersection of a
row vector and a column vector provides the net eect of ring that transition
on that place. for e.g., the value for place p1and transition >is 1, as ring >
adds a token to p1.6 dixit et al.
i
>p1
b
t1p2d
t2p3
c
t3p?o
(a) a part of the example synthesized net.i
>p1
b
t1p2d
t2p3
p5c
t3p?o
(b) after having added the place p5using the
place rule.
i
>p1
b
t1p2
p6d
t2
e
t4p3
p5c
t3p?o
(c) after having applied the abstracton rule for
the fth time.i
>p1a
t5
b
t1p2
p6d
t2
e
t4p3
p5c
t3p?o
(d) after having added the transition t5using
the transition rule.
fig. 4: first steps in synthesis of the example synthesized net.
table 3: in-
cidence ma-
trix of 4b.
>t1t2t3?
i-1 0 0 0 1
p11 -1 0 0 0
p20 1 -1 0 0
p30 0 1 -1 0
p0 0 0 1 -1
p50 1 0 -1 0the place rule allows one to introduce a new place, provided
that the new place is linearly dependent [16] on the existing pla-
ces, from the incidence matrix. figure 4b shows a synthesized net
that can be obtained from the net in figure 4a by using a single
application of this rule: the place p5, which is linearly dependent
on the places p2andp3, has been introduced. in a similar way, the
transition rule allows one to introduce a new transition, provided
that the new transition is linearly dependent [16] on the existing
transitions. figure 4d shows a synthesized net obtained from fi-
gure 4c using a single application of this rule: the transition t5,
which is linearly dependent on the transitions t1,t2, andt4, has been introduced.
we can deduce the net of figure 2 from figure 4d by using two more abstraction
rules and one more transition rule.
in [16] it has been proven that these rules preserve well-formedness [16], which
is related to soundness but not exactly the same. the key dierence is that for
soundness we require a specic state (one token in the place i) whereas for well-
formedness we do not require such a state. hence, in our approach the place
rule is restricted to forbid adding places which may preserve well-formedness
but may not preserve soundness. the related intricacies are out of scope.
4.2 using activity logs
in this section, we discuss how the information from the activity logs is linked
to the synthesized nets. the activity logs are central for making decisions in all
the automated process discovery techniques. motivated by the usage of activity
logs in state-of-the-art process discovery techniques, we derive three kinds of
statistics, which guide the user in decision making. the synthesized net expandsinteractive process discovery 7
one transition and/or one place at a time. the user labels newly added transi-
tions in the synthesized net with either an activity from the activity log, or the
transition does not represent an activity, i.e. leaves the transition silent. the in-
formation from the activity log is aggregated in a pairwise manner between each
activity from the synthesized net (labels of visible transitions) and the activity
selected by the user to be added to the net, which assists the user in positioning
the selected activity in the net. we rst dene the co-occurs value between two
activities.
denition 1 (co-occurs ( c(a;b))).letlbe an activity log and let aandbbe
two activities that occur in l, the co-occurs value of (a;b), denotedc(a;b)is:
c(a;b)=j[2lja2^b2]j
j[2lja2]j
for a pair of activities a;b, if the co-occurs value is 0, then aandbdo not
occur together, whereas if the co-occurs value is 1 then boccurs ifaoccurs. it
should be noted that, the co-occurs value is not commutative. this is because,
the co-occurs value is calculated using the absolute occurrence of rst activity in
the denominator. next, we dene the eventually follows value, which indicates
the number of times an activity is eventually followed by another activity.
denition 2 (eventually follows). letlbe an activity log and let aandb
be two activities that occur in l, and for a trace 2l, let #a>bindicate
number of occurrences of bafter the rst occurrence of ain. the eventually
follows relationship between aandbfor a trace , denotedef(a;b), is:
ef(a;b) =8
><
>:#a>b
#a>b+ #b>a, if#a>b6= 0
0 , otherwise.
the eventually follows value for a pair ( a;b) w.r.t. the entire log l, denoted
asefl(a;b), is calculated as the average of all the traces which have a non-zero
value for a pair, or is zero otherwise. if efl(a;b) = 1, then aandbco-occur, but
anever occurs after a b, which hints that bshould be following a. the directly
follows relation w.r.t. activities aandbis calculated as follows:
denition 3 (directly follows ( df(a;b))).letlbe an activity log and let
aandbbe two activities that occur in l, and for a trace 2l, let #a>d
b
indicate number of occurrences of bdirectly after the occurrence of activity a
in. the directly follows relationship between aandbfor a trace , denoted
df(a;b), is:
df(a;b) =8
>><
>>:#a>d
b
#a>d
b+ #b>d
a, if#a>d
b6= 0
0 , otherwise.
the directly follows value for the entire log l, denoted as dfl(a;b), is cal-
culated similar to efl(a;b). similarly, eventually precedes and directly precedes
values are also calculated.8 dixit et al.
4.3 activity log projectioni
>p1
b
t1p2d
t2p3
p5c
t3p?o
fig. 5: eventually follows/precedes pro-
jections on figure 4c, when the se-
lected activity is eand the pairwise re-
lations between activities are: efl(b;
e) = 1;efl(e;d) = 0:5;efl(e;c) = 1;
c(e;d)= 1;c(e;b)= 1 andc(e;c)= 1.
purple (yellow) color indicates the de-
gree to which selected activity occurs
after (before) the activity represented
by the transition.in this section, we discuss the mecha-
nism used for projecting information
from the activity log on the synthesi-
zed net. the user selects an activity
from the activity log, to be added to
the synthesized net. depending on the
activity selected by the user, the co-
loring of the activities in the current
synthesized net is updated. the colors
indicate which activities (and to what
extent) from the synthesized net occur
before and/or after the selected acti-
vity. the projected information can be
based either on the eventually follows
(precedes) relation, or the directly fol-
lows (precedes) relation as desired by the user. the opacity of the colors indicate
the co-occurrence of the two activities. all the information from the activity logs
is also presented in a tabular format to the user. thereby, in situations where
the projected visualizations seem vague, the user can use the information from
the tables for making an informed decision.
figure 5 shows the projection on transitions when an activity eis selected by
the user. the degree of purple (yellow) color in a transition indicates that the
selected activity occurs after (before) the activity represented by the transition.
as transition t1is completely colored purple (darker), we know that activity e
occurs after activity b. likewise, as transition t3is completely colored yellow (lig-
hter), we know that activity eoccurs before activity c. in contrast, as transition
t2is fty-fty colored purple and yellow we know that activity eoccurs about
equally often before and after activity d. the opacity of the coloring indicates
the co-occurrence values of the activity chosen and the activities represented by
the transitions. based on these insights, it is clear that activity emust be added
in parallel to d, beforecand afterb, i.e., using the abstraction rule on the thic-
ker edge in figure 5. multiple transitions having the same label would also have
the same coloring. if a transition is colored white, it implies that the activity
selected and the activity represented by the transition never co-occur together.
furthermore, the user is also presented with raw information pertaining to the
selected activity such as % of the traces in which the selected activity occurred ,
average occurrence of the selected activity in a trace etc.
5 interactive editing and implementation
in this section, we discuss the implementation and user interaction details of our
technique. the proposed technique is implemented and available in the \inte-
ractive process mining" package in the process mining toolkit prom3. the user
3http://www.processmining.org/prom/startinteractive process discovery 9
(a) possible outputs when the place before bis
selected. dark grey colored place indicates pos-
sibility of a self-loop , i.e. a transition having
same input and output. blue colored places in-
dicate candidate transition with multiple out-
puts, for the selected input place. each green
colored place indicate candidate with a single
output place for the selected input place(s).
(b) after selecting the place after das an out-
put place. the input place (i.e. the place before
b) is turned red, indicating it is no longer pos-
sible to use this place to add a self-loop transi-
tion. the green places are ltered out, as such
candidate transitions are no longer valid for the
selected input-output place combination. more-
over, the place before dis also colored white as
there is no candidate transition which contains
both the place after dand the place before din
its output places.
fig. 6: user interaction for adding linearly dependent transitions in our tool.
interacts with a synthesized net (starting with the initial net), in order to deduce
new nets, by applying one of the synthesis rules. in order to use the abstraction
rule, the user clicks on a (set of) arc(s), and presses enter . the selected arcs are
highlighted in green. the abstraction rule allows addition of a new place and a
new transition in between a set of transitions and a set of places. the (optional)
activity label of the new transition is pre-selected by the user, after which the
rule is applied.
in the case of linear dependency rules, all possible applications of a rule are
projected on the synthesized net based on the user interaction. we explain this
with the help of an example from figure 6, which shows a screen shot of our
tool (corresponding to figure 4c) and an application of the transition rule, when
activityais selected by the user. note that activities b;dandeare colored
white and activity cis colored yellow. hence we would like to place activity
aas an alternative to b;dandeand before c. re-collect that the transition
rule allows addition of a linearly dependent transition to a synthesized net.
all the candidate linearly dependent transitions are pre-computed. this set of
candidate transitions is nite, and independent of the activity label chosen by
the user. whenever a user navigates on a place, all the candidate transitions
are explored and only those candidate transitions are presented which have the
navigated place as an input place. for all such candidate transitions, the output
places (and possible additional input places) are projected on the synthesized
net, using color coding. the user rst selects the desired input places of the
candidate transition. the candidate transitions are ltered based on the selected
input places, and the output places of the ltered candidate transitions are
highlighted. next, the user chooses output places. in case of multiple output
places for a candidate transition, the user clicks on one of the desired multiple
output place. the candidate transitions are further ltered based on the output
places chosen. when a user has selected enough input and output places to
pinpoint a single candidate transition, the selected candidate transition is added
to the synthesized net. a similar approach is followed for the place rule.10 dixit et al.
6 evaluation
in order to validate the approach presented in this paper, we presented two
types of evaluations: an objective comparison with traditional process discovery
approaches, and a subjective validation via a case study.
6.1 objective evaluation : process discovery contest
as a part of the objective evaluation of the tool, we use our winning entry
from the annual process discovery contest4, organized at the bpi workshop of
bpm 2017 conference. the aim of the process discovery contest is to evaluate
tools and techniques which are able to discover process models from incom-
plete, infrequent event logs. in total, 10 process models had to be discovered
from 10 corresponding event logs. every model could contain sequences, choi-
ces and concurrent activities. furthermore, the organizers provided participants
with additional information about each process model, such as the presence of
duplicate activities, loops, optional activities, inclusive choices and long-term
dependencies. we consider this additional information as the domain knowledge
in our approach. every nal process model was evaluated based on an unseen
test log containing 20 traces, as well as by a jury of bpm practitioners to rate
the simplicity and understandability of the discovered process models.
in order to keep the comparison across various discovery techniques fair, in
this section we focus on 2 process models: model numbers 2 and 10. other process
models (1 and 3-9) contained artifacts such as inclusive choices. even though our
approach is able to model such artifacts, many state-of-the-art techniques can
not. both the training logs for models 2 and 10 are incomplete logs, and contain
sequential, concurrent, exclusive choices and optional activities. furthermore,
model 2 contains loops and model 10 contains duplicate activities. we used
this information in combination with simple log visualizers, in order to discover
process models with our tool. both the process models discovered were able to
replicate all the behavior from the test activity logs. furthermore, over all the
10 models, we received 98.5% accuracy w.r.t. the test activity logs: of the 200
test traces we had to classify, we classied 197 correctly.
in figure 7a we compare the tness and precision scores of the training
activity log used to discover the process model, with the discovered process
model, using a prex-based alignment technique [25]. for model 2, the miner
resulted in a model which could not be replayed using [25]. furthermore, in
figure 7b we compare the discovered process models with the original process
models which are used to generate the activity logs (both training and test logs).
this comparison is done using the technique from [26], which supports only
the process models discovered by inductive miner variants and our approach.
the tness value indicates the part of the behavior of the activity log (or the
original process model) that is captured by the discovered process model. the
precision value on the other hand captures the part of behavior of the discovered
4https://www.win.tue.nl/ieeetfpm/doku.php?id=shared:process discovery contestinteractive process discovery 11
imim-i
im-infrealphailp hm ipd00:51tness/precisiontness2 precision2
tness10 precision10
(a) discovered models compared with training
activity log using [25].imim-i
im-infreipd00:51tness/precisiontness2 precision2
tness10 precision10
(b) discovered models compared with the ori-
ginal models used to generate the activity logs
of the process discovery contest, using [26].
fig. 7: discovery techniques - im : inductive miner, im-i : inductive miner in-
complete, im-infreq : inductive miner infrequent, alpha miner, ilp miner, hm:
heuristic miner, ipd : interactive process discovery - this paper.
model that is also present in the activity log (or the original process model). as
evident from figure 7a and figure 7b, our approach typically outperforms all
the automated discovery techniques. by using the properties of the net (such
as possibility of loops, duplicates etc.) we were able to interactively discover
process models which are strikingly similar to the original process models. for
example, figure 8 shows the synthesized net we discovered from activity log 10.
the only real dierence when compared to the original process model is the
incorrect presence of the silent transition just below the transition labeled f.
furthermore, figure 7 also demonstrates the ability of our approach to cope
with complex constructs such as duplication of activities, silent activities etc.,
where many state-of-the-art techniques falter, as discussed in table 1.
6.2 case study
in this section, a real-life synthesized net is modeled using our tool by using dom-
ain knowledge along with the event log. the case study is performed with a local
healthcare partner who was the domain expert, by using data on the treatment
process of 2 years for a specic type of cancer. the domain expert knew parts
fig. 8: synthesized net 10 of the process discovery contest discovered using our
approach.12 dixit et al.
fig. 9: synthesized net for cancer patients in a dutch hospital as discovered by
the domain expert using our tool.
of the process behavior and was interested in discovering the end-to-end process
model. although in theory the process should be rather straightforward, the
usage of automated process discovery techniques resulted in extremely incom-
prehensible process models, or highly imprecise process models which allowed for
any behavior. the process models discovered by the traditional discovery techni-
ques were either incomprehensible and/or very far o from the reality according
to the domain expert. therefore, the interactive process discovery approach was
used to try to structure the process data by using domain knowledge.
the synthesized net discovered using our approach is shown in figure 9.
the domain expert had complete control about the modeling of the process. on
several occasions, the domain expert took assistance from insights of the activity
log gained via our technique. for e.g., the domain expert was not entirely sure
iflvpa should be placed before or after mdo . however, after gaining insights
from the data, the domain expert decided to add lvpa before mdo . on some
other occasions, the domain expert chose to ignore the information from the data,
deeming it inappropriate and/or inadequate. finally, using the information from
the event log and some background knowledge, the domain expert was able to
discover, and was satised with, a very structured process model.
the interactively discovered process model had a low tness with the acti-
vity log. investigating the causes for the low tness led to the conclusion that
there were some serious data quality issues in the activity log, rather than non-
compliance of protocols. data quality problems are often the reason why all
the automated discovery algorithms fail to discover a structured process model.
however in our case, by not relying completely on an event log for process disco-
very, and using knowledge from a domain expert, a structured process model was
discovered. moreover, since the domain expert was directly involved in process
modeling/discovery, the simiplicity and generalization dimensions of the process
model were implicitly taken into account.
7 conclusion and future research
in this paper, we presented the concept of interactive discovery of a process mo-
del based on synthesis rules. the use of synthesis rules as an engine to expandinteractive process discovery 13
the synthesized net guarantee soundness of the discovered process model. furt-
hermore, the information from the event log is extracted and presented to the
user to assist the user in decision making. giving users complete control over
the discovery approach supported by the information from the event log enables
critical decision making. this is true especially when all the information needed
by the discovery algorithms is not present in the event log; which is often the
case in many real-life event logs as apparent from the case study presented. the
automated discovery algorithms fail to cope with insucient information in the
event log, and could produce process models which are incomprehensible and/or
inaccurate. moreover, our approach is able to discover constructs such as dupli-
cate activities, inclusive choices and silent activities, that cannot be discovered
by many state-of-the-art techniques. in the future, we aim to improve the assis-
tance provided to the user in decision making. one future direction would be to
provide online conformance results to the user during process discovery. another
future direction could be pre-populating a number of options to be presented to
the user to add a particular activity.
references
1. van der aalst, w.m.p.: on the representational bias in process mining. in: enabling
technologies: infrastructure for collaborative enterprises (wetice), 2011 20th
ieee international workshops on. (june 2011) 2{7
2. van der aalst, w.m.p., weijters, a.j.m.m., maruster, l.: workow mining: dis-
covering process models from event logs. knowledge and data engineering, ieee
transactions on 16(9) (2004) 1128{1142
3. weijters, a.j.m.m., van der aalst, w.m.p.: rediscovering workow models from
event-based data using little thumb. integr. comput.-aided eng. 10(2) (april
2003) 151{162
4. van der werf, j.m.e.m., van dongen, b.f., hurkens, c.a.j., serebrenik, a.: pro-
cess discovery using integer linear programming. in: international conference on
applications and theory of petri nets, springer (2008) 368{387
5. cortadella, j., kishinevsky, m., lavagno, l., yakovlev, a.: deriving petri nets from
nite transition systems. ieee transactions on computers 47(8) (1998) 859{882
6. bergenthum, r., desel, j., lorenz, r., mauser, s.: process mining based on regi-
ons of languages. in: international conference on business process management,
springer (2007) 375{383
7. buijs, j.c.a.m., van dongen, b.f., van der aalst, w.m.p.: a genetic algorithm
for discovering process trees. in: evolutionary computation (cec), 2012 ieee
congress on, ieee (2012) 1{8
8. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured
process models from event logs containing infrequent behaviour. in: business pro-
cess management workshops, springer (2014) 66{78
9. fahland, d., van der aalst, w.m.p. in: repairing process models to reect rea-
lity. springer berlin heidelberg, berlin, heidelberg (2012) 229{245
10. van der aalst, w.m.p., van hee, k.m., ter hofstede, a.h.m., sidorova, n., verbeek,
h.m.w., voorhoeve, m., wynn, m.t.: soundness of workow nets: classication,
decidability, and analysis. formal aspects of computing 23(3) (may 2011) 333{
36314 dixit et al.
11. carmona, j., cortadella, j.: process discovery algorithms using numerical abstract
domains. ieee transactions on knowledge and data engineering 26(12) (dec
2014) 3064{3076
12. conforti, r., dumas, m., garc a-ba~ nuelos, l., la rosa, m.: beyond tasks and ga-
teways: discovering bpmn models with subprocesses, boundary events and activity
markers. in sadiq, s., soer, p., v olzer, h., eds.: business process management,
cham, springer international publishing (2014) 101{117
13. chesani, f., lamma, e., mello, p., montali, m., riguzzi, f., storari, s.: tran-
sactions on petri nets and other models of concurrency ii: special issue on con-
currency in process-aware information systems. in: exploiting inductive logic
programming techniques for declarative process mining. springer berlin heidel-
berg, berlin, heidelberg (2009) 278{295
14. bellodi, e., riguzzi, f., lamma, e.: probabilistic declarative process mining. in
bi, y., williams, m.a., eds.: knowledge science, engineering and management,
berlin, heidelberg, springer berlin heidelberg (2010) 292{303
15. breuker, d., matzner, m., delfmann, p., becker, j.: comprehensible predictive
models for business processes. mis quarterly 40(4) (2016)
16. desel, j., esparza, j.: free choice petri nets. volume 40. cambridge university
press (2005)
17. greco, g., guzzo, a., lupa, f., luigi, p.: process discovery under precedence
constraints. acm transactions on knowledge discovery from data 9(4) (june
2015) 32:1{32:39
18. maggi, f.m., mooij, a.j., van der aalst, w.m.p.: user-guided discovery of decla-
rative process models. in: computational intelligence and data mining (cidm),
2011 ieee symposium on, ieee (2011) 192{199
19. dixit, p.m., buijs, j.c.a.m., van der aalst, w.m.p., hompes, b.f.a., buurman,
j. in: using domain knowledge to enhance process mining results. springer
international publishing, cham (2017) 76{104
20. rembert, a.j., omokpo, a., mazzoleni, p., goodwin, r.t.: process discovery
using prior knowledge. in: service-oriented computing. springer (2013) 328{342
21. mathern, b., mille, a., bellet, t.: an interactive method to discover a petri net
model of an activity. working paper or preprint (april 2010)
22. la rosa, m., reijers, h.a., van der aalst, w.m.p., dijkman, r.m., mendling, j.,
dumas, m., garc a-ba~ nuelos, l.: apromore: an advanced process model reposi-
tory. expert systems with applications 38(6) (2011) 7029 { 7040
23. armas cervantes, a., van beest, n.r.t.p., la rosa, m., dumas, m., garc a-
ba~ nuelos, l.: interactive and incremental business process model repair. in pa-
netto, h., debruyne, c., gaaloul, w., papazoglou, m., paschke, a., ardagna,
c.a., meersman, r., eds.: on the move to meaningful internet systems. otm
2017 conferences, cham, springer international publishing (2017) 53{74
24. van der aalst, w.m.p.: the application of petri nets to workow management.
journal of circuits, systems, and computers 8(01) (1998) 21{66
25. adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: towards robust con-
formance checking. in: business process management workshops. volume 66 of
lecture notes in business information processing. springer berlin heidelberg
(2011) 122{133
26. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: scalable process discovery
and conformance checking. software & systems modeling 08(jul) (2016) 1619{
1374