finding process variants in event logs (short paper)
bolt iriondo, a.j.; van der aalst, w.m.p.; de leoni, m.
published in:
on the move to meaningful internet systems. otm 2017 conferences
doi:
10.1007/978-3-319-69462-7_4
published: 01/01/2017
document version
publisher’s pdf, also known as version of record (includes final page, issue and volume numbers)
please check the document version of this publication:
• a submitted manuscript is the author's version of the article upon submission and before peer-review. there can be important differences
between the submitted version and the official published version of record. people interested in the research are advised to contact the
author for the final version of the publication, or visit the doi to the publisher's website.
• the final author version and the galley proof are versions of the publication after peer review.
• the final published version features the final layout of the paper including the volume, issue and page numbers.
link to publication
citation for published version (apa):
bolt iriondo, a. j., van der aalst, w. m. p., & de leoni, m. (2017). finding process variants in event logs (short
paper). in h. panetto, c. debruyne, w. gaaloul, m. papazoglou, a. paschke, c. agostino ardagna, & r.
meersman (eds.), on the move to meaningful internet systems. otm 2017 conferences : confederated
international conferences: coopis, c&tc, and odbase 2017, rhodes, greece, october 23-27, 2017,
proceedings, part i (pp. 45-52). (lecture notes in computer science (including subseries lecture notes in
artificial intelligence and lecture notes in bioinformatics); vol. 10573 lncs). dordrecht: springer netherlands.
doi: 10.1007/978-3-319-69462-7_4
general rights
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners
and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights.
            • users may download and print one copy of any publication from the public portal for the purpose of private study or research.
            • you may not further distribute the material or use it for any profit-making activity or commercial gain
            • you may freely distribute the url identifying the publication in the public portal ?
take down policy
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the work immediately
and investigate your claim.
download date: 14. jan. 2018finding process variants in event logs
(short paper)
alfredo bolt(b), wil m.p. van der aalst, and massimiliano de leoni
eindhoven university of technology, eindhoven, the netherlands
{a.bolt,w.m.p.v.d.aalst,m.d.leoni }@tue.nl
abstract. the analysis of event data is particularly challenging when
there is a lot of variability. existing approaches can detect variants in
very speciﬁc settings (e.g., changes of control-ﬂow over time), or do notuse statistical testing to decide whether a variant is relevant or not. in
this paper, we introduce an unsupervised and generic technique to detect
signiﬁcant variants in event logs by applying existing, well-proven datamining techniques for recursive partitioning driven by conditional infer-
ence over event attributes. the approach has been fully implemented and
is freely available as a prom plugin. finally, we validated our approach byapplying it to a real-life event log obtained from a multinational spanish
telecommunications and broadband company, obtaining valuable insights
directly from the event data.
keywords: process variant detection
·process mining ·event data
1 introduction
organizations can record the execution of business processes supported by
process aware information systems into event logs [ 1]. process mining is a rel-
atively young research discipline that is concerned with discovering, monitor-
ing, and improving real processes by extracting knowledge from event logs [ 1].
processes are aﬀected by variability that is not only related to the control-ﬂow
perspective (e.g., a process may skip risk assessment steps for gold customers),
but can also be related to other perspectives, such as performance . for example,
if two branches of a company execute their processes in the same way (i.e., same
control-ﬂow) there could still be performance diﬀerences between the branches.
in this paper, we brieﬂy discuss a novel technique to detect relevant process
variants (i.e., groups of process executions) in an event log using the control-ﬂow,
performance and context attributes of events in an interactive and exploratoryway, where only relevant results are presented. the full version of this paper
containing extended discussions, formalizations and results is presented in [ 2].
it is important to note that the type of analysis performed with our approach
can also be achieved by combining other approaches and standard data mining
techniques. however, such techniques require extensive and manual ad-hoc para-
metrization and conﬁguration to achieve the same results that our approach can
c/circlecopyrtspringer international publishing ag 2017
h. panetto et al. (eds.): otm 2017 conferences, part i, lncs 10573, pp. 45–52, 2017.https://doi.org/10.1007/978-3-319-69462-7
_446 a. bolt et al.
fig. 1. overview and steps of our approach: (1) given an event log, a process model
is created. (2) points of interest are identiﬁed in the process model. (3) for each pointof interest, the set of cases that reach it is partitioned into process variants. (4) a
summary of process variants is produced, where the splitting criteria and the resulting
variants are shown for each point of interest.
obtain in a much easier way. we achieve this by leveraging on process models
to identify points of interest in the process (e.g., a given state in the process).
then, the same variability analysis is automatically performed in each point ofinterest and the summarized results for the whole process are presented to the
user as result. figure 1illustrates the overview and steps of our approach. note
that our technique provides, for each point of interest, a clear partitioning cri-teria that allows one to easily identify and characterize process variants. the
resulting process variants can be analyzed individually, but can also be com-
pared using process comparison techniques such as [ 3]. our approach has been
implemented and evaluated in a real case study.
2 preliminaries
letebe the universe of events, nbe the universe of attribute names and v
be the universe of possible attribute values. events can have values for given
attributes through the function # : n→ (e/notarrowrightv). for an attribute a∈n,t h e
partial function #( a):e/notarrowrightv, denoted as # a, can relate events to values of the
attribute a.
letσ∈e∗be a trace. a trace records the execution of an instance of a process
and is a ﬁnite sequence of events. let l⊆e∗be an event log, i.e., a set of traces.
each event is unique and appears only once in one trace within the event log,i.e., for any event e∈e:/vextendsingle/vextendsingle/braceleftbig
(σ, i)|σ∈l∧i∈{1,...,|σ|} ∧ σ(i)=e/bracerightbig/vextendsingle/vextendsingle≤1.
a process variant v⊆lis deﬁned as a set of traces . the traces in a process
variant also contain similarities in other event attributes. process variants also
should have diﬀerences with respect to other process variants. the traces in such
process variants should be similar to traces in the same variant, but are diﬀerent
to traces in other process variants.
in this paper, we leverage on the same log augmentation techniques deﬁned
in [4] (i.e., trace manipulation operations) to extend events with obtainfinding process variants in event logs 47
additional attributes, such as the elapsed time of an event within its case, or
thenext activity to be executed in a case.
the ﬁrst step in our approach is to create a process model from the event log.
transition systems are very simple process models that are composed of states
and of transitions between them. a transition is deﬁned by an activity being
executed, triggering the current state to move from a source to atarget state.
preﬁxes of traces can be mapped to states and transitions using representation
functions that deﬁne how these preﬁxes are interpreted.
deﬁnition 1 (transition system). letl∈e∗be an event log, plthe set
of all the preﬁxes of traces of l,elthe set of all the events of l,rsa state
representation function and raan activity representation function. a transition
system ts(rs,ra,l)is deﬁned as a triplet ( s,a,t ) where s={s∈rs|∃σ∈pls=
rs(σ)}is the set of states, a={a∈ra|∃e∈ela=ra(e)}is the set of activities
andt={(s1,a,s 2)∈s×a×s|∃σ∈pl\{/angbracketleft/angbracketright}s1=rs(pref|σ|−1(σ))∧a=
ra(σ(|σ|))∧s2=rs(σ)}is the set of valid transitions between states.
3 finding process variants in event logs
deﬁning points of interest in a transition system (step 2): given a
transition system ts(rs,ra,l)=(s,a,t ), we deﬁne p⊆s∪tas the set of points
of interest . given an event log land a transition system ts(rs,ra,l)=(s,a,t ),
every point of interest p∈s∪tcan be related to a set of traces through the
function tr:(s∪t)→p(l).
finding variants in a point of interest (step 3): we ﬁnd process variants
in the points of interest deﬁned above by using recursive partitioning by con-ditional inference (rpci) techniques [ 5] over event attributes. this technique is
able to split a set of instances based on dependent and independent attributes
(i.e., features, variables).
a trace cannot correspond directly to an instance because it may have several
diﬀerent values for the same attribute. for example, an elapsed time attribute
can have diﬀerent values for each event in the trace. for this purpose, we choosethe attribute values of a single event of a trace to represent it as an instance .
the choice of which event should be used is related to the deﬁnition of points of
interest discussed before. since we know that for a given point of interest p,a n y
trace σ∈tr(p) reaches it at some point, we could simply choose the last event
of the smallest preﬁx of σthat reaches p.
given a point of interest p, the set of events that represent the traces in tr(p)
is deﬁned as e
p=/unionmultitext
σ∈tr(p)e(p)(σ), where every event e∈epcorresponds to an
instance . for each point of interest p, we aim to ﬁnd the relevant partitions of
its corresponding set of events (i.e., instances) ep(denoted as simply e)b a s e d
on their event attributes.
letebe a set of events, and a(e)={a∈n|dom(#a)∩e/negationslash=∅}the set of
event attributes associated with the events in e. for each attribute a∈a(e),48 a. bolt et al.
na(e)={#a(e)|e∈dom(#a)∩e}deﬁnes the set of values of the attribute a
over the set of events e.
we choose one of the event attributes d∈a(e)a so u r dependent attribute
(chosen by the user), for which we will reduce the variability by partitioning
any combination of the other a(e)\{d}event attributes, namely independent
attributes .
our approach leverages on the recursive partitioning by conditional infer-
ence (rpci) approach [ 5] to partition the set of events e. rpci provides a
unbiased selection and binary splitting mechanism by means of statistical tests
of independence between the splitting attributes and the dependent attribute.
the details of how rpci works are out of the scope of this paper, and the readeris referred to [ 5] for the speciﬁc mechanisms that rpci uses to deal with diﬀerent
types of distributions and combinations of attributes.
in a nutshell, rcpi is described for a set of events eby the following steps:
1. given a dependent attribute d∈a(e), ﬁnd the independent attribute i∈
a(e)\{d}with the strongest signiﬁcant correlation with d.
2. if such independent attribute idoes not exist (i.e., no correlation is signiﬁ-
cant), stop the recursion. if it does exist, an optimal binary partition of thedependent attribute dis obtained, such that eis split into e
1⊂eand
e2=e\e1.
3. repeat step 1 and 2 for e1ande2recursively.
as a result of rpci, a set of events ecan be partitioned into a set of subsets
se={λ1,...,λ n}. given the recursive nature of this approach, the exact total
number of partitions to be evaluated depends on the characteristics and distri-
butions of the attributes. every subset λ∈secorresponds to a set of events.
rpci provides, for each λ∈sea set of conditions that deﬁne it.
given the way that ewas built and the nature of events being unique, every
event in λis related to a diﬀerent trace. therefore, se={λ1,...,λ n}can be
transformed into a set of process variants v={v1,...,v n}of the same size where
given an point of interest p, a variant vis deﬁned as vi={σ∈tr(p)|∃e∈λi:e∈σ}
for any i∈{1,...,n }. therefore, the variants are guaranteed to be disjoint.
the approach discussed in this section is repeated for the sets of events
related to each point of interest in the transition system deﬁned by the user.
a summary of process variants (step 4): according to rpci, the traces
related to a point of interest can be split into process variants or not, depend-ing on the signiﬁcance of the correlation between dependent and independent
attributes. we present a summary of only the points of interest where process
variants were found. for each point of interest, the splitting criteria obtainedfrom rpci is clearly presented, and the process variants are available to the
user for other types of analysis. a concrete visual representation of the sum-
mary is presented in [ 2].finding process variants in event logs 49
4 implementation and case study
we have implemented our approach as a prom [ 6] plugin named “process variant
finder” included in the variantfinder package.1
in this paper, we report on the results of a case study obtained by applying
our approach to an event log provided by a spanish broadband and telecommu-
nications company. the provided event log refers to a claim handling process
related to three services that this company provides, codenamed: globalsim,sm2m and jasper. in total, the event log contains 8296 cases (i.e., claims)
processed between january 2015 and december 2016. each claim has, on aver-
age 5 activities. claims correspond to traces of this process and can have fourseverities: slight, minor, major and critical. in total, there are 40965 events in
the event log.
customers of the company create a claim which is activated by an employee of
the company when he/she starts working on it. claims with missing information
can be delayed . if the service was interrupted, the ﬁrst step is to work on the
restoration of the service. if there was no interruption, or the service has been
restored, resources work on solving the problem that caused the claim. once a
problem has been solved, it is informed to the customer, which can close the
claim. customers can also cancel claims at any moment.
fig. 2. transition system representing the claim handling process. states are deﬁned
by the last two activities executed in a trace preﬁx. thickness represents frequency.
points of interest (ı.e., states and transitions) with a frequency of 5% of claims or less
were ﬁltered out. states “active, new” and “closed, solved” are highlighted. (colorﬁgure online)
figure 2illustrates this process as a transition system, in which a state is
deﬁned by the last two activities executed in a preﬁx of a trace. we used ourapproach to discover process variants in all states and transitions of the transition
system shown in fig. 2. in every state and transition, we searched for process
variants. because of space limitations, the remainder of this section discussesonly a few process variants detected in the “active, new” and the “closed,
solved” states of the transition system presented in fig. 2(highlighted in red
and blue respectively).
the variants detected in the “active, new” state (shown in fig. 3)w a s
obtained by selecting the next activity attribute (described in sect. 2)a st h e
dependent attribute, and using all the other attributes as independent attributes.
1the reader can get this package via the prom package manager.50 a. bolt et al.
fig. 3. partition detected in the “active, new” state, deﬁning six control-ﬂow variants
with diﬀerences in the “next activity” to be executed. the labels in each bar chart are
(from left to right): canceled, delayed, restored, solved. the dependent attribute is
the next activity to be executed. all other attributes are considered as independentattributes.
therefore, the resulting variants of this partition can be considered as control-
ﬂow variants . on the one hand, we can observe that the claims related to the
globalsim and jasper services (i.e., ﬁrst branch to the left in fig. 3)h a v ea
higher tendency to get delayed than claims related to the sm2m service. this is
accentuated in claims with a “slight” severity. on the other hand, claims asso-
ciated to the sm2m service (i.e., ﬁrst branch to the right in fig. 3) do not follow
this pattern. from these claims, the ones that have a “slight” severity are more
likely to be immediately solved. domain experts related this to the fact that
slight severity claims usually do not involve an interruption of the service (thus,no restoration) and can be immediately solved.
more severe claims are divided whether they belong to a “parent claim” (1) or
not (0). this is indicated by the “ischild” attribute (a claim can be subdividedinto smaller claims). claims that belong to a parent claim are more likely to
become “restored”. this make sense because bigger or more complex claims
are more likely to have child claims, and are also more likely to have a serviceinterruption. claims that do not belong to any parent claim can be split into
two main variants: the ones that take one minute or less to be activated and
those that take more than one minute. we can observe that the faster claims are
more likely to be solved, but the slower ones get delayed more often. this could
be related to “easier” claims being processed ﬁrst.
figure 4shows performance process variants detected in the “close, solved”
state (i.e., when a claim has been solved and then closed) where the splitting
attributes and criteria are represented in a tree-fashion. we can observe thatclaims related to the globalsim service have the longest throughput time (i.e.,
the time between a claim is created until it is closed), followed by claims related
to the jasper service. note that claims related to the s2m2 service are the fastestto be closed in average, but the time distribution is more spread than claims
related to the jasper service. this can be observed on the position of quartilesfinding process variants in event logs 51
fig. 4. performance variants detected in the “closed, solved” state. elapsed time is
measured in milliseconds and is presented as box plots for each variant. the depen-
dent attribute is elapsed time. all other attributes are considered as independent
attributes.
in the box plots shown in fig. 4. domain experts explained the fact that, in
average, globalsim claims took longer to be closed by the fact that there was achange in the management of this service in may 2016, which resulted, among
other consequences, in the massive closeup of claims. most of such claims were
declared as “solved” several months before, but were never oﬃcially closed. itis important to note that the company is only responsible for claims until they
are solved, since the closing of a claim depends on the customer, hence it is not
included in the company’s slas.
naturally, the obtained process variants can be compared. we refer the reader
to [2] for an comparative analysis of obtained process variants.
5 related work
we grouped existing process variant detection techniques into four categories:
concept drift detection, trace clustering, performance analysis, and attributecorrelation. in this paper we only discuss attribute correlation approaches since
it is the category in which our paper falls into. for a more detailed discussion of
related work, we refer the reader to the full version of this paper [ 2].
attribute correlation techniques aim to group cases depending on any event
attributes. the only other approach that belongs in this category (besides our
approach) is [ 4], that focuses on classifying speciﬁc selections of events by build-
ing decision or regression trees with the attributes of such events that are later
used to classify traces into process variants. our approach is closely related to [ 4].
the similarities between these approaches are: (1) behavioral features are
annotated into events as extra attributes via trace manipulation functions. (2)
selection of events are partitioned into subgroups using such event attributes.
the diﬀerences between these approaches are that, in our approach: (1)
process variants are always guaranteed to be disjoint (see sect. 3). this is only
guaranteed in [ 4] for the event ﬁlters ef
2andef 3, which select either the ﬁrst52 a. bolt et al.
or the last event of a trace respectively. (2) the required conﬁguration is simpler
than in [ 4]: in our approach, given a transition system, the user only needs to
select the dependent and independent attributes, and the same analysis is per-
formed for all points of interest. in [ 4] an ad-hoc analysis use case needs to be
manually designed for each point of interest. therefore our approach presentsa summary of process variants in many points of the process. in [ 4], the result
is a single decision tree describing variants in a single point of the process. (3)
events are split using rpci instead of decision or regression trees.
arguably, if rpci would be used in [ 4], then they could replicate the results
provided by our approach in processes without loops (see ﬁrst diﬀerence), but
it would require to manually conﬁgure several analysis use cases (see seconddiﬀerences).
6 conclusions
the problem of detecting process variants in event logs has been tackled by
several authors in recent years. many authors have successfully solved speciﬁc
scenarios where the focus in on speciﬁc attributes, such as time. some haveeven provided general solutions, but they fail to ﬁlter out irrelevant splits. this
paper presents an approach that is able to detect relevant process variants in any
available event attribute by automatically splitting any other (combination of)event attributes in many points of the process. the approach has been imple-
mented and is publicly available. we were able to successfully identify points
of process variability inside in a real-life event log and we were able to detect
process variants without the use of domain knowledge, conﬁrming such vari-
ability using process comparison techniques. therefore, our approach provides aviable solution to process variant detection, even when no domain knowledge is
available.
references
1. van der aalst, w.m.p.: process mining: data science in action, 2nd edn. springer,
heidelberg (2016)
2. bolt, a., van der aalst, w.m.p., de leoni, m.: finding process variants in event
logs. research report bpm-17-04. bpmcenter.org (2017)
3. bolt, a., de leoni, m., van der aalst, w.m.p.: a visual approach to spot
statistically-signiﬁcant diﬀerences in event logs based on process metrics. in:
nurcan, s., soﬀer, p., bajec, m., eder, j. (eds.) caise 2016. lncs, vol. 9694,
pp. 151–166. springer, cham (2016). doi: 10.1007/978-3-319-39696-5 10
4. de leoni, m., van der aalst, w.m., dees, m.: a general process mining framework
for correlating, predicting and clustering dynamic behavior based on event logs. inf.
syst. 56, 235–257 (2016)
5. hothorn, t., hornik, k., zeileis, a.: unbiased recursive partitioning: a conditional
inference framework. j. comput. graph. stat. 15(3), 651–674 (2006)
6. van dongen, b.f., de medeiros, a.k.a., verbeek, h.m.w., weijters, a.j.m.m., van
der aalst, w.m.p.: the prom framework: a new era in process mining tool support.
in: ciardo, g., darondeau, p. (eds.) icatpn 2005. lncs, vol. 3536, pp. 444–454.
springer, heidelberg (2005). doi: 10.1007/11494744 25