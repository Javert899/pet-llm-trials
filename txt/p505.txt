analyzing multi-agent activity logs
using process mining techniques
a. rozinat1;2, s. zickler2, m. veloso2, w.m.p. van der aalst1, and c.
mcmillen2
abstract
distributed autonomous robotic systems exhibit complex behavior that|
although programmed, but due to the impact of the environment|only ma-
terializes as the process unfolds. thus, the actual behavior of such a system
cannot be known in advance but must be observed to be evaluated or veri-
ed. in this paper we propose to use process mining techniques to extract,
compare, and enhance models of the actual behavior of a multi-agent robotic
system through analyzing collected log data. we use the example of robot
soccer as such a multi-agent robotic system, and we demonstrate which types
of analysis are currently possible in the context of the process mining tool
set prom.
1 introduction
robotic systems are growing more and more complex as they seek, for exam-
ple, to be self-reconguring, self-organizing, or working in teams. while their
behavioral logic is of course programmed, and, thus, in principle predictable,
the more autonomous a robot grows, or the more it adapts to its environment,
the more it is true that the actual behavior of the system cannot really be
known in advance anymore. for example, in a team of robots, the overall sys-
tem behavior is determined through interaction among multiple robots. or,
if robots interact with humans, their actions are inuenced by the actions of
the human. thus, the question whether this overall behavior corresponds to
the intended system behavior can only be answered through observation.
process mining techniques use log data to analyze observed processes and
have been successfully applied to real-life logs from, e.g., hospitals, banks,
municipalities etc. (see [2] for one of many real-life applications). the basic
idea of process mining is to discover, monitor and improve real processes (i.e.,
information systems group, eindhoven university of technology, nl-5600 mb,
eindhoven, the netherlands. fa.rozinat,w.m.p.v.d.aalst g@tue.nlcomputer sci-
ence department, carnegie mellon university, pittsburgh pa 15213-3890, usa.
fszickler,veloso,mcmillen g@cs.cmu.edu
1not assumed processes) by extracting knowledge from event logs. today many
of the activities occurring in processes are either supported or monitored by
information systems. however, process mining is not limited to information
systems and can also be used to monitor other operational processes or sys-
tems, such as complex x-ray machines, high-end copiers, or web services.
the common denominator in the various applications of process mining is
that there is a notion of a process and that the occurrences of activities are
recorded in so-called event logs [1].
in this paper, we use log data collected by the cmdragons team during
the international robot soccer competition 'robocup' 2007 to investigate the
applicability of process mining techniques to a multi-agent robotic system. in
the context of robot soccer, the motivation for analyzing log data is two-fold:
self-analysis : while detailed logs are recorded during the competitions,
the evaluation of a game is carried out mostly through watching the
accompanying video recordings. a wealth of detailed data are available,
but usually they are not analyzed in a structured way. we argue that
a systematic and more high-level analysis of these log data can help to
obtain an overall picture, and to, for example, discover transient faulty
states that|due to being held only for a short time|are dicult to be
observed by the human eye.
opponent analysis : obtaining behavioral models of the opponent
robots is even more interesting as their intentions are hidden and the
only way to derive knowledge about their strategic behavior is through
observation. we envision the application of process mining techniques in
combination with activity recognition [9, 7], which is able to identify high-
level actions (for example that a robot is \attacking") based on low-level
behaviors (such as the robot's position and velocity).
without loss of generality, we can restrict ourselves to self-analysis, since
the described techniques can be equally applied for the purpose of opponent
analysis given that appropriate activity recognition mechanisms are in place.
the paper is organized as follows. first, we describe the domain of robot
soccer that is used in the remainder of this paper as an example of a multi-
robot system (section 2). then, we introduce process mining and explain
how process mining can be applied in the context of this example domain
(section 3). next, the log data that are used as input for the process mining
techniques are described (section 4) and some illustrative analysis results are
presented (section 5). section 6 concludes the paper.
2 robot soccer: a multi-agent system
behavioral multi-robot systems are control architectures where multiple
agents coordinate the execution of dierent individual tactical approaches,
2called behaviors, typically in order to achieve a common goal. one particu-
larly interesting behavioral multi-agent domain, which we are going to use
as the data source for our experiments, is the robocup small size league.
here, the objective is to have two teams of small robots compete in a game of
miniature soccer, without human intervention. in the small-size league, each
team normally consists of ve homogeneous, omni-directional robots which
are remotely controlled by an o-board computer. the computer obtains
its observations from two overhead cameras mounted above the soccer eld
which are then processed to provide very accurate estimates of positions and
orientations of all the players on the eld. challenges of this domain include
its very fast pace, and its complex tactical properties. a scene from a typical
robocup game is shown in figure 1.
fig. 1 a scene of a robocup small-size league game.
this paper utilizes real game data collected by carnegie mellon univer-
sity's small-size team \cmdragons" [5]. the software architecture of the
team's oboard control system is shown in figure 2. the server component
in this diagram performs computer vision and manages communication with
the robots. the intelligence of the system arises from the soccer component
which embodies all autonomous decision making processes. the heart of the
soccer component is its behavioral control architecture, known as \skills,
tactics, and plays" (stp) [4]. within stp, multi-agent coordination and
team-based strategic decisions are performed by chosing from a collection of
\plays". a play is dened as a list of role assignments for multiple robots. for
example, in robot soccer, one might imagine an \oensive" play, which assigns
most robots to be attackers, and some other robots to be defenders. the ap-
plicability of a particular play depends on whether that play's pre-conditions
are currently met, given the value of some variables of the domain. if multiple
plays are simultanously applicable then one of them is chosen probabilisti-
cally. the role assignment (e.g. which particular robots become an attacker)
is then performed dynamically based on the robots' positions and availabil-
ity. individual robot roles are called tactics and are typically implemented as
state-machines consisting of lower level navigational functions, called skills.
examples of soccer tactics include \attacker", \defender", and \goalie".
the data used in our experiments originate from the performance of the
cmdragons team at robocup 2007. the data was gathered over four round
robin games against teams named \wright eagle", \robodragons", \b-
3fig. 2 the general architecture of the cmdragons oboard control software.
smart", and \botnia", followed by the quarter-nal, semi-nal, and nal
games against \eagle knights", \zjunlict", and \plasma-z", respectively.
for each game, the system has generated a log le describing the game obser-
vations, as well as the cmdragon's internal system state. log entries carry
the currently executed play and tactic names of each robot and additional
globally observed variables, such as positions, and velocities of the ball and
robots. furthermore, they include the status of so-called referee events which
indicate the change of the global game status such as, e.g., a switch from a
\game-stoppage" to a \kicko". log entries are recorded at 60hz in unison
with the system's main processing loop, which leads to a new log entry about
every 17 milliseconds.
3 process mining
process mining is a eld of analysis techniques that focuses on mining behav-
ioral aspects from log data. since the mid-nineties several groups have been
concentrating on the discovery of process models from event-based data. pro-
cess models are structures|usually directed graphs|that model behavior.
in [3] an overview is given of the early work in this domain. despite the many
relations to some work discussed in the machine learning domain, there are
also many dierences as the targeted process models reside at the net level
(e.g., petri nets) rather than sequential or lower level representations (e.g.,
markov chains, nite state machines, or regular expressions). therefore, pro-
cess mining needs to deal with various forms of concurrency.
over the years, the notion of process mining has broadened to the general
idea of extracting non-trivial and useful information from process execution
logs [1]. for example, in the context of the robot soccer domain described in
the previous section, the real-world process of interest is a robot soccer match
(see figure 3). multiple robots interact with each other in the process of the
game, and we are able to record information about their activities. these
so-called \event logs" are the starting point for process mining techniques,
and they can be used to derive and enrich higher-level models, or to compare
4robotprocessmodeleventlogsmodels /analyzesdiscoveryrecords eventsextensionconformancerobot soccerfig. 3 process mining in the context of robot soccer.
them to potentially existing models of behavior. generally, we distinguish
three classes of analysis:
discovery extracting a new model from the event log . in the context of
robot soccer, for example, we may want to see process models of the overall
team behavior, or of individual robot behavior.
conformance comparing an existing model to the behavior observed in
the log . in the robot soccer example one could, for instance, compare the
behavior of the opposing team with the own behavioral models or compare
the observed behavior with some normative or descriptive model.
extension projecting additional information onto an existing model . note
that many aspects of a process (such as timing) cannot be known before-
hand as they depend on the environment (for example, the opposing team).
hence, existing models can be enriched with derived information.
prom [1] is a tool set that supports a wide variety of process mining tech-
niques1. furthermore, due to its plug-able architecture, it enables researchers
to quickly implement new algorithms without spending any eorts on com-
mon tasks such as loading logs, displaying discovered models etc. in this
study, we did not develop any custom analysis plug-in but used functionality
that is readily available in prom. some sample analysis results are described
in more detail in section 5. however, in the next section we rst take a closer
look at the activity logs that form the input data for the process mining
techniques.
4 activity logs
as described in section 2, there are dierent levels of robot behavior. the
high-level actions that we want to analyze are the tactics , which are the
1the software including source code and documentation can be freely downloaded from
prom.sf.net (see also our website processmining.org ).
5dierent roles that a robot can have, such as \mark" or \position for pass".
since prom uses the mining xml (mxml) format to read event logs, the
data collected by the cmdragons team needed to be converted into this
format. the basic structure of mxml is very simple: a process log consists of
a set of process instances, which in turn each contain a sequence of events. a
process instance, also referred to as case, trace, or audit trail, is one particular
realization of the process, while events correspond to concrete steps that are
undertaken in the context of that process for the particular process instance.
furthermore, each event carries a timestamp and many contain additional
data.
note that already during log conversion dierent views on the process can
be taken , since the denition of what is to be considered a process instance
determines the scope of the process to be analyzed. for example, in the con-
text of a robot soccer match one could be interested in the overall team
formations over multiple games, as well as individual robot behaviors within
a single game. thus, dierent conversions can be leveraged to obtain dier-
ent views on the same process. using a custom plug-in of the prom import
framework [6] we have created both individual robot logs and team logs . be-
cause the overall team behavior is globally orchestrated, we can easily get
information about the current role of all the robots in the team at each point
in time, and we consider a team formation by abstracting from which robot
engages in which role. thus, in a team log we see an action as a set of roles.
furthermore, we abstract from the goalie (as there is always one goalie).
an excerpt of an event in such a team log is shown in the following mxml
log fragment. the event ( audittrailentry ) was recorded in the context of the
game against \plasma-z" ( processinstance ) on 8 july 2007 at 12:57:18 accord-
ing to us eastern time zone ( timestamp ), and refers to the team formation
\mark mark wall wall" ( workflowmodelelement ) while the ball was in posses-
sion of the cmdragons ( data) etc. the dots indicate that the log contains
further process instances, and the process instance further events. further-
more, the event contains more data attributes than is shown here.
<process id="teamlog" description="all matches together"> ...
<processinstance id="4" description="game plasmaz"> ...
<audittrailentry>
<data>
<attribute name="ball_possession_ours">1</attribute> ...
</data>
<workflowmodelelement>mark mark wall wall</workflowmodelelement>
<eventtype>complete</eventtype>
<timestamp>2007-07-08t18:57:18.709+02:00</timestamp>
</audittrailentry> ...
</processinstance> ...
</process>
the complete team log contains more than half a million (624,801) events
that are distributed over 7 process instances. because we are mainly inter-
ested in changes of behavior, we subsequently lter out repetitions of the
6same team formation. this way, we yield a much more condensed log fo-
cusing only on state changes, while preserving information about the timing
behavior through the time stamps. the ltered team log now contains only
2,183 events for all the 7 games, with the shortest process instance listing
63 and the longest 762 team formation changes. the same can be done for
individual robot logs.
5 analysis and results
due to space limits we can not go into detail about individual mining tech-
niques, and only consider two illustrative examples of discovery (cf. sec-
tion 3), namely (a) process model discovery and (b) decision rule mining.
start1defendcircle wallwall wall158 1
mark markwall wall20 20defendcircle positionposition position8 8
defendcircle positionforpasspositionforpass setplaykick22 15defendcircle defendcirclemark wall32 32
positionforpass positionforpasssetplaykick wall23 23defendcircle positionforpasssetplaykick wall22 21defendcircle markmark wall9 9
defendcircle positionreceivechip setplaykick9 9defendcircle defendcirclepositionforpass setplaykick5 5mark markposition wall15 15end1 1
attacker defendcircledefendcircle mark175 20defendcircle positionforpasspositionforpass positionforready8 8
 7
attacker defendcircledefendcircle positionforpass177 22attacker defendcirclepositionforpass positionforpass79 32
 6 40 41 32 82
 23 72 80
 32 46 17 11 12 22 9
 9 5 15
fig. 4 process model discovered by the heuristics miner based on the team log of the
nal game between cmdragons against \plasma-z". each rectangle corresponds to a team
formation of the cmdragons in that game (without the goalie).
(a) based on the team log, we use the heuristics miner [10] to automat-
ically construct a process model of the team formations in the nal game
against \plasma-z", which is depicted in figure 4. it shows the causal de-
pendencies between activities and provides an overview about the actual ow
of the process, whereas each rectangle corresponds to a team formation of the
cmdragons in that game (the numbers reect the frequencies at which the
team formation changes were observed). now consider figure 5, which was
created from an individual robot log, and thus depicts the discovered process
model of one individual robot in the same game. we can see that the robot
7start1defendcircle106 1 39mark91 39
wall130 65positionforpass123 66attacker86 27end1 1 26 31
 54 60 30 46 43
 31 67 24
setplaykick18 15position15 12receivechip5 5 45 52
 73 43 27 21 48
 45 20 38
 18 14
positionforready1 1 5
 1fig. 5 process model of one individual robot's behavior.
was frequently changing into the role \wall" (130 times) and that it was, for
example, frequently switching from the role \wall" into \positionforpass"
(67 times) and back (73 times). note that these models could now be further
enhanced by making use of the time information in the log and visualizing
the length of stay in each of these states by dierent colors.
(b) we apply the decision miner [8] in combination with the weka ma-
chine learning workbench [11] to discover under which conditions which team
formation is being chosen by the system. for this, we create a petri net process
model that represents the playbook of the soccer component (cf. figure 2),
which is partly shown in figure 6, and we restrict the used data attributes
to those used in the pre-conditions of the world model. as described ear-
lier, the internal behavioral model assigns probabilities to the dierent plays,
which are active as soon as their pre-conditions are fullled. apart from these
pre-conditions, every team formation is possible at each point in time (repre-
sented by \playing game" in figure 6). note that the internal model is more
general than the discovered models in figure 4 and figure 5, which depict
typical action ows more closely. thus, the discovered models can provide real
insight into the process as it took place, dierent games can be compared etc.
it is interesting that we can discover the same or similar rules to a large
extent. for example, the discovered rule ` their kicko =>mark mark wall
8startplayinggame
endaftergamemark markwall wall
defendcircle markwall wallbeforegame...their_kickofftheir_freekick  and  !their_sidefig. 6 petri net process model reecting the world model, where each of the team forma-
tions is possible at every point in time, if certain pre-conditions are met. the discovered
rules (two examples are shown) largely coincide with the internal rules.
wall ' coincides with the original one and has both precision and recall of 1.0.
the discovered rule ` their freekick and !their side =>defendcircle mark
wall wall ' is slightly more general as the original rule was ` their freekick
and our side and !our corner '. the overall accuracy of the discovered rules
(using 10-fold cross validation over the whole team log) is between 63 and 74
% (depending on the classication algorithm). if there are mismatches, then
this is mainly because some plays share the same pre-conditions and are then
selected randomly. if we include additional attributes not directly used in the
pre-conditions (e.g., referee status) the accuracy exceeds even 90 %. while it
is less useful to re-discover one's own rules, this seems directly useful in the
context of analyzing the opponent's behavior (\when do they react how?").
6 conclusion
in this paper, we have shown the potential of structured log analysis to gain
more high-level insight into the behavior of multi-robot systems. we have
demonstrated based on the robot soccer domain that it is possible to apply
process mining to multi-agent activity logs.
many other techniques are applicable but have not been mentioned. for
example, while the global observation system is very accurate and provides
high-qualitative data, in turbulent phases of the game sometimes not all
attributes can be reliably determined. thus, it can happen that the ball pos-
session is \ours" and \theirs" at the same time. using linear temporal logic
(ltl) one can check such pre-dened properties (` <>(ballpossession ours
and ball possession theirs )') and further investigate those cases to improve
the situation. finally, custom implementations in the context of the prom
framework are possible. they have the advantage that they|while building
9on common functionality|enable domain-aware and specialized solutions.
acknowledgements . this research is supported by the iop program of the
dutch ministry of economic aairs. the authors also thank the cmdragons
team for sharing their robocup log data, and douglas vail who helped us to
create the ascii logs used for conversion to the mxml format. furthermore,
we thank all prom developers for their on-going work on process mining tech-
niques. special thanks to christian w. g unther for nikefs2, which makes it
possible to work with large real-world logs, and for his gui redesign, which
continues to impress people and makes using prom so much more fun.
references
1. w.m.p. van der aalst, b.f. van dongen, c.w. g unther, r.s. mans, a.k. alves de
medeiros, a. rozinat, v. rubin, m. song, h.m.w. verbeek, and a.j.m.m. wei-
jters. prom 4.0: comprehensive support for real process analysis. in j. kleijn
and a. yakovlev, editors, application and theory of petri nets and other models of
concurrency (icatpn 2007) , volume 4546 of lecture notes in computer science ,
pages 484{494. springer-verlag, berlin, 2007.
2. w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b.f. van dongen, a.k. alves
de medeiros, m. song, and h.m.w. verbeek. business process mining: an industrial
application. information systems , 32(5):713{732, 2007.
3. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workow mining: a survey of issues and approaches. data and
knowledge engineering , 47(2):237{267, 2003.
4. b. browning, j. bruce, m. bowling, and m. veloso. stp: skills, tactics and plays
for multi-robot control in adversarial environments. ieee journal of control and
systems engineering , 219:33{52, 2005.
5. j. bruce, s. zickler, m. licitra, and m. veloso. cmdragons 2007 team description.
technical report, tech report cmu-cs-07-173, carnegie mellon university, school of
computer science, 2007.
6. c.w. g unther and w.m.p. van der aalst. a generic import framework for process
event logs. in j. eder and s. dustdar, editors, business process management work-
shops, workshop on business process intelligence (bpi 2006) , volume 4103 of lecture
notes in computer science , pages 81{92. springer-verlag, berlin, 2006.
7. k. han and m. veloso. automated robot behavior recognition. 2008.
8. a. rozinat and w.m.p. van der aalst. decision mining in prom. in s. dustdar,
j.l. faideiro, and a. sheth, editors, international conference on business process
management (bpm 2006) , volume 4102 of lecture notes in computer science , pages
420{425. springer-verlag, berlin, 2006.
9. d. vail, m. veloso, and j. laerty. conditional random elds for activity recognition.
inaamas '07: proceedings of the 6th international joint conference on autonomous
agents and multiagent systems , pages 1{8, new york, ny, usa, 2007. acm.
10. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workow models from
event-based data using little thumb. integrated computer-aided engineering ,
10(2):151{162, 2003.
11. i.h. witten and e. frank. data mining: practical machine learning tools and tech-
niques (second edition) . morgan kaufmann, 2005.
10