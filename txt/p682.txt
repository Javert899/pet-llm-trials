where did i misbehave?
diagnostic information in compliance checking
elham ramezani, dirk fahland, and wil m.p. van der aalst
eindhoven university of technology, the netherlands
{e.ramezani,d.fahland,w.m.p.v.d.aalst }@tue.nl
abstract. compliance checking is gaining importance as today’s organizations
need to show that operational processes are executed in a controlled manner
while satisfying predeﬁned (legal) requirements. deviations may be costly andexpose the organization to severe risks. compliance checking is of growing im-
portance for the business process management and auditing communities. this
paper presents a comprehensive compliance checking approach based on petri-
net patterns and alignments . 55 control ﬂow oriented compliance rules, dis-
tributed over 15 categories, have been formalized in terms of petri-net patterns
describing the compliant behavior. to check compliance with respect to a rule,the event log describing the observed behavior is aligned with the corresponding
pattern. the approach is ﬂexible ( e a s yt oa d dn e wp a t t e r n s ) , robust (the selected
alignment between log and pattern is guaranteed to be optimal), and allows forboth a quantiﬁcation of compliance andintuitive diagnostics explaining devia-
tions at the level of alignments. the approach can also handle resource-based and
data-based compliance rules and is supported by prom plug-ins. the applicability
of the approach has been evaluated using various real-life event logs.
keywords: compliance checking, process mining, conformance checking,
petri-nets.
1 introduction
business processes need to comply with regulations and laws set by both internal and
external stakeholders. failing to comply may be costly, therefore, organizations need to
continuously check whether business processes are executed within the boundaries setby managers, governments, and other stakeholders. deviations of the observed behavior
from the speciﬁed behavior may point to fraud, ma lpractice, risks, and inefﬁciencies.
five types of compliance-related activities can be identiﬁed [23,30,19,28]:
–compliance elicitation : determine the constraints that need to be satisﬁed (i.e., rules
deﬁning the boundaries of compliant behavior),
–compliance formalization : formulate precisely the compliance requirements de-
rived from laws and regulations in compliance elicitation,
–compliance implementation : implement and conﬁgure information systems such
that they fulﬁl compliance requirements,
–compliance checking : investigate whether the constraints will be met (forward com-
pliance checking) or have been met (backward compliance checking), and
a. barros, a. gal, and e. kindler (eds.): bpm 2012, lncs 7481, pp. 262–278, 2012.
c/circlecopyrtspringer-verlag berlin heidelberg 2012diagnostic information in compliance checking 263
–compliance improvement : modify the processes and systems based on the diagnos-
tic information in order to improve compliance.
there are two basic types of conformance checking: (1) forward compliance checking
aims to design and implement processes where conformant behavior is enforced and (2)
backward compliance checking aims to detect and localize non-conformant behavior.
this paper focuses on backward comp liance checking based on event data.
compliance checking is gaining importance because of the availability of event data
and new legislations. major corporate and accounting scandals including those affect-
ing enron, tyco, adelphia, peregrine and worldcom have fueled the interest in morerigorous auditing practices. legislation s uch as the sarbanes-oxley (sox) act of 2002
and the basel ii accord of 2004 was enacted as a reaction to such scandals. at the same
time, new technologies are provi ding opportunities to systematically observe processes
at a detailed level by recordin g all process relevant events.
process mining techniques [1] offer a means to more rigorously check compliance
and ascertain the valid ity and reliability of in formation about an organization’s core pro-
cesses. the core challenge is to compare the prescribed behavior (e.g., a process model
or set of rules) to observed behavior (e.g., audit trails, workﬂow logs, transaction logs,message logs, and databases). for example, in [3] it is shown how constraints expressed
in terms of linear temporal logic (ltl) can be checked with respect to an event log. in
[25] both ltl-based and sciff-based (i.e., abductive logic programming) approaches
are used to check compliance with respect to a declarative process model and an event
log. dozens of approaches have been proposed to check conformance given a petri-netand an event log [2,8,6,7,11,13,20,26,27,31,38]. approaches such as in [31] replay the
event log on the model while counting “missing” and “remaining” tokens. the former
indicates observed, but disallowed behavior, and the latter indicate non-observed, butrequired behavior. state-of-the-art techniques in conformance checking retrieve this in-
formation by computing optimal alignments [2,8] between traces in the event log and
“best ﬁtting” paths in the model.
existing approaches to backwards compliance checking have two main problems.
first of all, the elicitation of compliance rules is not supported well . end users need
to map compliance rules onto expressions in temporal logic or encode the rules into a
petri-net-like process model. second, existing checking techniques can discover viola-
tions but do not provide useful diagnostics . while forward compliance checking tech-
niques [10,18] employ pattern matching to highlight compliance violations in a model,
such techniques are not applicable in backwards checking where not a model, but a
log is given. here, ltl-based checkers will classify a trace as non-compliant withoutproviding detailed diagnostics and discard the remainder of the trace when the ﬁrst
deviation is detected.
to address these limitations we provide a comprehensive collection of control ﬂow
related compliance rules . we identify 55 rules distributed over 15 categories. these
compliance rules are formalized in terms of p etri-net patterns. we apply the alignment
technique developed in [2,8] to analyze if the process execution (log) has been compli-
ant with the compliance rules (petri-net patterns). if the observed behavior is consistent
with the compliance rule, then the optimal alignment shows that all moves of the logcan be mimicked by the corresponding petri-net pattern and vice versa. if this is not264 e. ramezani, d. fahland, w.m.p. van der aalst
possible because the compliance rule is vio lated, then the alignment shows the root
cause of the deviation. this way, we are able to show detailed diagnostics without false
negatives (non-conformant behavior remains undetected) and false positives (confor-
mant behavior is classiﬁed as non-conformi ng because of an incorrect alignment of log
and model/rule). the approach is extendible , i.e., to add a new type of rule, one just
needs to add the petri-net pattern to our repository. moreover, as shown in this paper,
our approach can be used to support resource-based and data-based compliance rules.
the remainder of this paper is organized as follows. section 2 reviews related work.
section 3 explains the notion of alignments to relate observed and modeled behavior.
our compliance rule framework is introduced in section 4. although the primary focusof this paper is on control ﬂow compliance rules, section 5 illustrates that the approach
also supports the other perspectives (e.g. resources and data). in section 6 the approach
is validated using a case study and the impl ementation in prom is showcased. section 7
concludes the paper.
2 related work
the importance of compliance management has been pointed out by various authors [5].in [30] a life cycle is introduced to structure the process of compliance management.a comparative analysis over different comp liance management solution frameworks is
provided in [23].
compliance management has gained wide in terest from the business process man-
agement (bpm) community. compliance checking approaches can be mapped onto two
main categories [22]:
–forward compliance checking aims at ensuring compliant process executions. pro-
cesses can be constructed to be compliant [32] or veriﬁed whether they are com-
pliant [24]. alternatively, compliance requirements can be transformed into mon-itoring rules [12] or model annotations which then are used to enforce compliant
process executions [17,39]. diagnostic information is obtained by pattern match-
ing [10,18].
–backward compliance checking evaluates in hi ndsight whether process executions
did comply to all compliance rules or when and where a particular rule was vio-lated. a variety of conformance checking techniques have been proposed to quan-
tify conformance and detect deviations based on an event log and process model
(e.g., a petri-net) [2,8,6,7,11,13,20,26,27,31,38]. also approaches based on tempo-ral logic [3,25] have been proposed to check compliance
in this paper we focus on backward compliance checking and assume an event log to
be present. compared to exis ting approaches we provide a comprehensive collection
of compliance rules. moreover, we focus on providing diagnostic information in back-
wards compliance checking.
3 conformance checking based on alignments
as will be shown in this paper, we provide a large repository of petri-net patterns mod-eling typical compliance rules. these rules can be instantiated for a particular process,diagnostic information in compliance checking 265
i.e., the abstract activities in the pattern are replaced by concrete activities also recorded
in the event log. the log complies to the rule if each log trace is described by the petri-
net pattern. in case a trace is not described, we want to locate where the trace deviates
from the pattern. this section recalls basi c notions and a recent technique [2,8] for
ﬁnding deviations between log traces an d formal speciﬁcation (a petri-net).
anevent log is amultiset oftraces . each trace describes the life-cycle of a particular
case (i.e., a process instance ) as a sequence of events . an event often refers to the ac-
tivity executed. however, event logs may store additional information about events. for
example, many process mining techniques use extra information such as the resource
(i.e., person or device) executing or initiating the activity, the timestamp of the event, or
data elements recorded with the event (e.g., the size of an order).
from a formal point of view a trace σlis a sequence over an alphabet σl, i.e.,
σl∈σl∗.a ne v e n tl o g lis a multiset of traces, i.e., l∈ib(σl∗). the alphabet σl
is typically the set of activity names. howeve r, when including additional perspectives,
the alphabet may be extended to also contain information about data and resources. for
example, (prepare decision ,start,john,gold,50 euro )∈σlmay refer to an event
describing the start of activity “prepare decision” by john for a gold customer claiming
50 euro. the choice of σldepends on the compliance rule that needs to be checked,
e.g., for most control ﬂow related rules it is sufﬁcient to record the activity name.
a petri-net pattern is essentially a speciﬁ cation prescribing compliant traces in a con-
cise way. technically, a speciﬁcation s⊆σs∗is a ﬁnite set of traces over an alphabet
σstogether with a mapping /lscript:σs→2σl∪{τ}that relates each speciﬁcation event
inσsto a set of log events in σlor toτ. in this paper, sis the set of ﬁring sequences
of a petri-net and /lscriptis the function that labels each transition with an activity name. s
and/lscriptcan be described by other formalisms such as temporal logics as well.
we use the alignment approach described in [2,8] to relate traces in the log (i.e.,
observed behavior) to traces of the speciﬁca tion (i.e., prescribed behavior). an optimal
alignment of σltos, roughly speaking, is a trace σsthat is possible according to s
and that is as similar to σlas possible . by comparing σlandσs, a business analyst
gains an understanding on what has been done wrong in σland what instead should
have been done (to behave as shown in σs).
a given trace σl∈lwill be related to a trace σs∈sby pairing events in σlto
events ofσs. formally, a move (ofσlands)i sap a i r (x,y)∈(σl∪{/greatermuch} )×(σs∪{/greatermuch
})\{(/greatermuch,/greatermuch)}.f o rx∈σl,y∈σs, we call (x,/greatermuch)amove on log ,(/greatermuch,y)amove on
speciﬁcation s,a n di fx∈/lscript(y),t h e n (x,y)is asynchronous move .
analignment of a trace σl∈σl∗tosis a sequence γ=/angbracketleft(x1,y1)...(xn,yn)/angbracketrightof
moves (of σlands) such that the projection x1...xntoσlis the original trace σl,
i.e.,/angbracketleftx1...xn/angbracketright|σl=σl, and the projection /angbracketlefty1...yn/angbracketright|σs=σs∈sis described by
the speciﬁcation.
for example, for a speciﬁcation s={/angbracketlefta,b,c,d/angbracketright,/angbracketlefta,c,b,d/angbracketright}with/lscript(x)={x}the
traceσl=/angbracketlefta,c,c,d/angbracketrighthas (among others), the following two alignments with events
ofσlshown at the top and events of sshown at the bottom: γ1=a
c
c
/greatermuch
d
a
c
/greatermuch
b
dandγ2=
a
/greatermuch
/greatermuch
c
c
d
a
c
b
/greatermuch
/greatermuch
d.266 e. ramezani, d. fahland, w.m.p. van der aalst
both alignments yield the same speciﬁed trace σs=/angbracketlefta,c,b,d/angbracketright∈s.h o w e v e r , γ1is
preferable over γ2as it maximizes the number of synchronous moves. the conformance
checking problem in this setting is to ﬁnd for a given trace σland speciﬁcation san
optimal alignment γofσltoss.t. no other alignment has fewer non-synchronous
moves (move on log only or move on speciﬁcation only). the technique of [2,8] ﬁndssuch an optimal alignment using a cost-based approach: a cost-function κassigns each
move (x,y)ac o s tκ(x,y)s.t. a synchronous move has cost 0and all other types of
moves have cost >0.t h e na na
⋆-based search on the space of (all preﬁxes of) all
alignments of σltosis guaranteed to return an optimal alignment for σlands.
in such an optimal alignment, a move on log (x,/greatermuch)indicates that the trace σlhad
an eventxthat was not supposed to happen according to the speciﬁcation swhereas
a move on speciﬁcation (/greatermuch,y)indicates that σlwas missing an event /lscript(y)that was
expected according to s. as the alignment preserves the position relative to the trace
σl, we can locate the exact position where σlhad an event too much or missed an
event compared to s.
in the remainder of this paper, we show how to leverage this approach to compliance
checking. the optimal alignm ents between log and speciﬁcation provide excellent di-
agnostic information and can be used to robustly quantify conformance. thereby, the
speciﬁcation swill formally capture all traces th at comply to a given compliance con-
straint. the alignment of a log trace σltoscan then clearly show where and how often
σldeviates from the constraint.
4 expressing compliance rules as petri-net patterns
in this section, we provide a framework for compliance rules together with an extensive
list of control ﬂow rules in 15 different categories. each rule has a comprehensive de-
scription and is formalized as a petri-net pattern. in sect. 5 we generalize this approach
to data- and resource-related rules.
4.1 compliance rule framework
a compliance rule prescribes how an internal or cross-organizational business process
has to be designed or executed. it originates in explicitly stated regulations and can referto the individual perspectives of a business p rocess (control ﬂow, data ﬂow, organiza-
tional aspects) or a combination of several perspectives. we reviewed existing literature
on compliance [4,15,9,14,21,36,19,33,35], collected the rules described in these papers,and categorized them. we found that a single rule usually is not concerned with only one
perspective of a process, but with several perspectives. based on this observation, we
identiﬁed six orthogonal dimensions of comp liance rules, into which each of the rules
could be categorized. for example, the rule “after a claim of more than 3000 eur has
been ﬁled, two different emp loyees need to check the validity of the claim indepen-
dently.” is composed of 3 basic rules that refer to (1) control ﬂow (“after a claim has
been ﬁled, validity mu st be checked.”), (2) data ﬂow (“a claim over 3000 eur requires
two validity checks.”), and (3) the organization (“multiple validity checks are carried
out by different employees.”).diagnostic information in compliance checking 267
fig. 1. compliance rule frameworkfurthermore, a compliance rule can
(4) impose time-related constraints (e.g.,
“within 6 months the claim must be de-
cided.”) or can be untimed ,(5) prescribe
properties of a single case or of multiple
cases (e.g., “20% of all claims require a
detailed check.”), and (6) prescribe prop-
erties of the process design (e.g., “the
claim process must have a time-out event
handler.”) or properties of the process ex-ecutions, which can be observed (i.e.,
recorded in an event log).
these six dimensions give rise to
the framework shown in fig. 1. in this
paper, we present compliance rules for
control ﬂow, data ﬂow as well as organi-zational aspects, where we focus on un-
timed, observation-based properties of individual cases. the remainder of this section
presents control ﬂow compliance rules and the ir formalization. section 5 presents data
ﬂow rules and organizational rules and t heir combination with control ﬂow rules.
4.2 control flow compliance rules
eliciting andformalizing compliance rules for a business process comprise determining
the laws and regulations that are relevant for this process and formulating these compli-
ance rules in an unambiguous, yet understandable manner [30]. typically, this involvesexpressing a given informal requirement in a formal notation: a task an end user may not
be capable of. to support elicitation, we provide end users with an extensive library of
comprehensive compliance rules. each rule has an informal, precise description and is
accompanied by a mathematical formalization. the end user just has to pick the rule(s)
that describe the given compliance require ment best; the accompanying formalization
is then used for compliance checking.
we collected from literature [4,15,9,14,21,36,19,33,35] 55 compliance rules that
concern the control ﬂow perspective of a process, and classiﬁed them further into 15categories; see tab. 1. each category include s several compliance rules. for example,
theexistence category deﬁnes 2 rules in total, e.g ., “in each process execution, task a
should be executed” and “in each process execution, task ashould not be executed.”
each rule is parameterized over tasks (e.g., task a) or numeric parameters (e.g., gov-
erning bounds for repetitions etc.).
to formalize these rules we need to use a concrete formalism. some compliance
rules prescribe behaviors that are easier t o express in terms of logical formulas (each
ais followed by a b), and some rules prescribe behav iors that are easier to express
in a more operational model ( a,b,a n dchappen twice directly in sequence with no
other event in between). our literature surv ey found both kinds of rules to be relevant,
temporal logics (e.g., ltl) against operati onal models (e.g., petri-nets). because of tool
support for conformance checking [8], we decided to formalize rules as parameterized268 e. ramezani, d. fahland, w.m.p. van der aalst
table 1. categorization of the 55 control flow compliance rules
category (rules) description
existence (2) limits the occurrence or absence of a given event awithin a
scope. [4],[15],[9], [14],[21],[36],[33]
bounded existence (6) limits the number of times a given event amust or must not
occur within a scope. [15],[14]
bounded sequence (5) limits the number of times a given sequence of events must
or must not occur within a scope. [15],[14]
parallel (1) a speciﬁc set of events should occur in parallel within a scope.
[33]
precedence (10) limits the occurrence of a given event ain precedence over
a given event b. [15],[33],[14],[36],[9],[19],[21],[4],[33]
chain precedence (4) limits the occurrence of a sequence of events a1,...,a n
over a sequence of events b1,...,b n. [15],[14],[21]
response (10) limits the occurrence of a given event bin response to a
given event a. [33],[14],[21],[15],[37],[9],[19]
chain response (4) limits the occurrence of a sequence of events b1,...,b nin
response to a sequence of events a1,...,a n.[ 1 5 ]
between (7) limits the occurrence of a given event bbetween a sequence
of events aand c.[ 1 4 ]
exclusive (1) presence of a given event amandates the absence of an
event b.[ 1 5 ]
mutual exclusive (1) either a given event aor event bmust exist but not none of
them or both. [15],[34]
inclusive (1) presence of a given event amandates that event bis also
present. [15]
prerequisite (1) absence of a given event amandates that event bis also
absent. [15]
substitute (1) a given event bsubstitutes the absence of event a.[ 1 5 ]
corequisite (1) either given events aand bshould exist together or to be
absent together. [15]
petri-net patterns . although being an unusual choice, we could formalize operational
rules as well as declarative rules in a systematic and understandable way. the complete
collection of compliance rules and their petri-net patterns is described in [29]. in the
following we present a few characteristic rules and their formalization in terms of petri-
net patterns.
4.3 petri-net patterns for compliance rules
bounded existence of a task (from category bounded existence). description: “task
ashould be executed exactly ktimes.” if aoccurs less than or more than ktimes, the
rule is violated. for instance, for k=2, the trace /angbracketleftbcadbcad /angbracketrightcomplies to this
rule and/angbracketleftbcadbcaad /angbracketrightviolates the rule.
figure 2 shows the petri-net pattern that formalizes this rule. task ais expressed as
ana-labeled transition. occurrences of any other transition than aare mimicked by
theω-labeled transition. this way, the pattern abstracts from all other trace events thatdiagnostic information in compliance checking 269
are not described in the compliance rule. the transition fexpresses that the end of the
trace has been reached, i.e., it occurs after all other events of the trace occurred.
the pre-place pkofais initially marked with ktokens. as each occurrence of a
consumes one token from pk,acan occur at most ktimes. also each occurrence of
aproduces one token on count . by consuming ktokens from place count ,t h eﬁ n a l
transition fcan only occur (i.e., the trace can only complete) if ahas occurred ktimes.
af
ω initialpk (k=2)
count
(k=2)final
fig. 2. petri-net pattern for rule “bounded exis-
tence of a task”figure 2 also illustrates the basic prin-
ciples of petri-net patterns for compliance
rules. each pattern has a dedicated place
final that deﬁnes the ﬁnal marking of the
pattern. a trace σcomplies to the pattern
(its rule) iff after executing σ, ﬁnal transi-
tionfis enabled, and its occurrence leads
to the ﬁnal marking that puts 1token on
place ﬁnal and all other places are empty. in fig. 2, the arc from ftoinitial ensures
that once foccurs, no other tokens remain in the net and aandωcannot occur any-
more.
we use the alignment-based approach of sect. 3 for checking whether a trace σcom-
plies to this rule, by aligning σto an occurrence sequence σsof the net of fig. 2 where
fis the last event of σs. to this end, we ﬁrst have to map transitions of the pattern to
events of σby the labeling function /lscript. for example, the trace /angbracketleftbcadbcad /angbracketrightcould
have the mapping /lscript(a)={a},/lscript(ω)={b,c,d},a n d/lscript(f)={τ}(the ﬁnal transi-
tionfis always regarded as silent and not mapped to any trace event). for this labeling,
the approach of sect. 2 aligns σ1=/angbracketleftbcadbcad /angbracketrightbyγ1=b
c
a
d
b
c
a
d
/greatermuch
ω
ω
a
ω
ω
ω
a
ω
fand
σ2=/angbracketleftbcadbcaad /angbracketrightbyγ2=b
c
a
d
b
c
a
a
d
/greatermuch
ω
ω
a
ω
ω
ω
a
/greatermuch
ω
fandσ3=/angbracketleftbcadbcd /angbracketrightbyγ3
=b
c
a
d
b
c
/greatermuch
d
/greatermuch
ω
ω
a
ω
ω
ω
a
ω
f. alignment γ1only contains synchronous moves of σ1and petri-
net (except for ﬁnal transition f) which means that σ1complies to the rule. in contrast,
γ2contains a move on log (a,/greatermuch)on the third a. this move on log not only indicates
thatσ2violates the compliance rule, but the move (a,/greatermuch)also tells the exact location of
the deviation, which is the third a.γ3contains a move on model (/greatermuch,a)that is required
to get the petri-net pattern into its ﬁnal marking. this move on model also indicates a
violation of the rule as a missing second ain theσ3. this ﬁrst rule constrains a sin-
gle task. the following rules constrain orderings of several tasks and also shows the
importance of the ω-transition in the petri-net patterns.
direct precedence of a task (from category precedence). description: “every time b
occurs, it should be directly preceded by a.” ifboccurs without a directly preceding
a, the rule is violated. for instance, /angbracketleftaccaac /angbracketrightand/angbracketleftabcaab /angbracketrightcomply to the rule,
whereas/angbracketleftabacb /angbracketrightviolates the rule.
the pattern of fig. 3(top left) formalizes this rule. it basically describes a cycle of
aandb,s ot h a tbcan only occur if ahas preceded it. as there is no ω-transition
adjacent to place p,adirectly precedes anyb(occurrences of any other transition but
bare excluded).270 e. ramezani, d. fahland, w.m.p. van der aalst
this pattern also demonstrates the power of the alignment-based approach and for
checking whether a trace complies the rule. for instance, in the compliant trace σ=
/angbracketleftabcaaba /angbracketright, the second and the last occurrence of aare aligned to the left-most
transition aof fig. 3 and only the ﬁrst and third athat directly precede a bare aligned
to enter the cycle. this capability of the alignment-based approach allows to designpatterns with non-deterministic choices such as in fig. 3, which gives greater ﬂexibility
when formalizing compliance rules.
  
	 

  
	 


astastω
facmpbst bcmp
acmp
final
fig. 3. petri-net patterns for precedenceour approach also allows to derive vari-
ants of patterns. for instance, fig. 3(top
right) formalizes that “every occurrence of b
should be preceded by a(also several steps
earlier).” the patterns presented so far as-
s u m e da no c c u r r e n c eo fat a s k ato be rep-
resented as an atomic event ain the log.
fig. 3(bottom) formalizes the direct prece-
dence rule for the case that task ais rep-
resented by two events a−start (ast)a n d
a−complete (acmp) indicating the start and
completion of an ongoing activity. all petri-
net patterns of our collection rules come in
these two ﬂavors and can be picked based onthe setting. the next rule demonstrates that in this way, also intricate ordering con-
straints can be formalized with petri-nets in an intuitive way.
direct precedence or simulta neous occurrences of tasks. “task amust always be
executed simultaneously or directly before task b.” in case of atomic tasks this rule
is identical to the p receding rule, in case of ongoing tasks, aandbcan overlap in
time. for example, the trace /angbracketlefta
stbstcacmpdbcmp/angbracketrightcomplies to this rule whereas
/angbracketleftastacmpcbstdbcmp/angbracketrightviolates this rule.
finalacmp
bcmpω 
acmpast
bst
f ast
ast acmp bst bcmp
fig. 4. petri-net pattern for “direct precedence or simultaneous
occurrences of tasks”the petri-net pattern of
fig. 4 formalizes this rule.
the case where astrictly
precedes b(aends be-
forebstarts) is formal-
ized by the lower cycle
of the net. more interest-
ingly, the case where aand
boccur simultaneously is
formalized by the upper
cycle (white transitions are
silent). there is no cycle that permits bwithout a preceding or simultaneous a.i ft h e r e
is noborbjust occurred, any events but bstandbcmpmay occur. this is also the
situation when the pattern may terminate. the replay-based approach of sect. 3 aligns
traces to this pattern as explained for “direct precedence of a task.”diagnostic information in compliance checking 271
the preceding rules constrained control ﬂ ow in one speciﬁc dimension (ordering or
number of occurrences). the next rule shows that also mixed rules occur, and how to
formalize mixed rules by reusing c oncepts of the pr eceding patterns.
bounded existence of sequence of tasks (from category bounded sequence). de-
scription: “the direct sequence of tasks /angbracketleftab/angbracketright(b exactly after a) should not occur
more than ktimes.” if /angbracketleftab/angbracketrightoccurs for the k+1-st time, the rule is violated. for in-
stance, for k=2,/angbracketleftcabacbabc /angbracketrightcomplies to this rule and /angbracketleftcabbcababc /angbracketright
violates the rule.
ω 
ba
f finitialpk (k=2)
p1
finalb
a
ω 
fig. 5. petri-net pattern for “bounded
existence of sequence of tasks”the pattern of fig. 5 formalizes this rule
by combining concepts of “bounded existence”
(fig. 2) with concepts of “direct precedence”
(fig. 3). a consecutive sequence /angbracketleftab/angbracketrightis ex-
pressed as a cycle in the pattern. the complete
cycle may occur at most ktimes because of pre-
placepkofb.ak+1-st occurrence of ais
permitted as it does not complete /angbracketleftab/angbracketright,y e t .a f -
teraoccurred, there may be arbitrary further
occurrences of a; a subsequent bstill yields a
direct sequence /angbracketleftab/angbracketright, any other transition inter-
rupts this sequence ( ωbrings the token back to
initial ).
the pattern can go to the ﬁnal marking at any point (that is, if there are no other
events to be executed). here, the reset arcs frompkto the ﬁnal transitions fensure
that all pending tokens are removed from the net (e.g., if /angbracketleftab/angbracketrightnever occurred).
aligning the violating trace σ=/angbracketleftcabbcababc /angbracketrightto this pattern yields align-
mentγ=c
a
b
b
c
a
b
a
b
c
/greatermuch
ω
a
b
b
ω
a
b
a
/greatermuch
ω
fwhere the move on log (b,/greatermuch)at the third occurrence
of/angbracketleftab/angbracketrightarises because there is no token on pkleft (and hence bis not enabled in
the pattern), i.e., this move on log indicates the violation. these patterns demonstrate
some of the key concepts and basic building blocks that we used to formalize all 55
compliance rules in terms of petri-net patterns.
5 compliance to data and organizational aspects
so far we presented a comprehensive coll ection of control ﬂow compliance rules and
their formalization as petri-net patterns. these rules cover the control ﬂow dimension
of the compliance rule framework introduced in fig. 1. in this section, we show how
the pattern-based approach to compliance rules of sect. 5 can also be applied to check
compliance with respect to data and to organizational aspects , which constitute two
other dimensions of the framework. as before, we consider single-case observation-
based untimed compliance rules.
5.1 data flow compliance rules
a typical example of a data ﬂow compliance rule is to restrict data values permit-
ted for a task . for example, “a discount of 10% is granted if the customer is a gold272 e. ramezani, d. fahland, w.m.p. van der aalst
customer; 5% are granted if the customer is a silver customer.” a rule of this kind pre-
scribes that task grant refers to 2 attributes e.g., customer status andpercentage .w h e n
taskgrant discount occurs, these attribute values need to be logged in the corresponding
event such as (grant,john,gold,10%) (see sect. 3); otherwise compliance cannot be
checked in hindsight.
when checking compliance to this rule, it is not just sufﬁcient to check whether
grant occurred, but we need to check whether grant occurred with the right attribute
values. to this end slight changes in actual petri-net pattern and labeling /lscriptthat relates
petri-net transitions to events are required. figure 6(top) shows the petri-net pattern for
this rule. it contains two transitions grant that are further distinguished by the attribute
value combinations that are permitted by this task.


	
		
	
	

	

init
finalω 
fgrant 10% goldgrant 10% gold
grant 5% silvergrant 5% silverpk (k=2)
fig. 6. petri-net pattern to ‘restrict data
values permitted for a task’recall from sect. 3 that each pattern also
has a labeling function /lscript(.)that maps transi-
tions to sets of events. in contrast to sect. 4, a
transition is not mapped to an event name, but
to a combination of name and attribute values .
for instance, the mapping /lscript(grant 10%gold)=
{(grant,x,y,z )|y=gold,z= 10%}maps
transition grant 10%gold only to grant events
which have gold and10% as their attribute val-
ues, correspondingly for grant 5%silver .o t h e r
occurrences of grant (with other attribute value
combinations) are disallowed by mapping ω
only to events other than grant ,e . g . ,/lscript(ω)=
{(a,x,y,... )|a/negationslash=grant}. this mapping /lscriptand the pattern of fig. 6(bottom)
together formalize the compliance rule. for example, trace /angbracketleft(add item,x,10eur )
(add item,y,32eur )(grant,joe,gold,10%)/angbracketrightcomplies to this rule whereas align-
ing trace /angbracketleft(add item,x,10eur )(add item,y,32eur )(grant,jim,silver,10%)/angbracketrightto
the this rule yields a move on log ((grant,jim,silver,10%),/greatermuch)indicating that jim
was granted a wrong discount.
note that data ﬂow compliance is essentially formalized by further distinguishing
transitions in the petri-net patterns, and by deﬁning the right mapping from transitionsto events. this permits to combine control ﬂow rule and data ﬂow compliance rules
also formally, e.g., the pattern of fig. 6(bottom) formalizes that “a discount (of 10%
for gold customers and 5% for silver customers) is given at most twice per case.”
5.2 compliance to organizational aspects
separation of duty (4-eyes principle). the perhaps best known compliance rule states
that “of two sequential tasks aandb,i fawas performed by user r,t h e nbmust not
be performed by r.” here, each task has a particular attribute performed by (or role)
which takes as values user names or roles. technically, the role attribute is a special dataattribute: a log event (check,sue)describes that sueperformed activity check . a trace
σ
1=/angbracketleft(receive,tom )(check,sue)(notify,sue)(pay,tom )/angbracketrightcomplies to the 4-eye
principle for tasks check andpaywhereas/angbracketleft(receive,tom )(check,sue)(notify,sue)
(pay,sue)/angbracketrightviolates the principle.diagnostic information in compliance checking 273
figure 7 shows the petri-net pattern that formalizes this compliance rule. it distin-
guishes two cases (as indicated by the upper and lower grey-shaded rectangle. eachcase describes one compliant role assignment to tasks aandb, eitherais performed
byr,t h e nbnot byr, or vice versa. in this compliance rule, once rperformed a,
it always has to perform aand may never perform b(within the same trace). hence
the choice for either case is permanent in the pattern as well. the pattern may termi-
nate at any point in time, and all other tasks (except for aandbwith the chosen role
assignments) may occur at any point in time. as for data ﬂow complia nce, the labeling
/lscript(.)is crucial to relate patterns of the transitions to events: /lscript(a,r)={(x,y)|x=
a,y =r},/lscript(a,not-r )={(x,y)|x=a,y/negationslash=r},/lscript(b,r)={(x,y)|x=b,y =
r},/lscript(b,not-r )={(x,y)|x=b,y/negationslash=r},/lscript(ω
)={(x,y)|x/negationslash∈{a,b},y/negationslash=r}.
each user gives rise to a different labeling that has to be checked separately from
other labelings. when checking compliance of trace σ2given above w.r.t. tasks check ,
pay, and user joe, the alignment-based approach of sect. 3 returns a move on log
 
 		
	
	
	



 

fig. 7. petri-net pattern for “separation of duty”((pay,sue),/greatermuch)indicating that
thepaytask should not have been
performed by sue ( a si ti sn o ta l -
lowed by the pattern).
altogether, compliance to data
ﬂow and to organizational as-
pects is orthogonal to control ﬂowcompliance and builds on map-
ping petri-net transitions to events
based on a combination of eventname and attributes. this also al-
lows to formalize and check rules
that depend on mixture of control
ﬂow, data ﬂow and organizational
aspects.
6 experimental results
we have evaluated the technique on real-life log taken from the ﬁnancial system of a
large dutch hospital. the log contained over 150000 events from over 700 different
activities in 1150 cases, each case representing a patient. the log was obtained from
ﬁnancial system of the hospital in the period of 2005 to 2008. beside anonymizing the
log, all other data in log is preserved incl uding event names, involved resources etc.
we ﬁrst describe the implementation used in this evaluation and then report on some
compliance rules relevant to this process and the results we obtained for them.
6.1 implementation in prom
the presented technique is implemented in the compliance package of the process min-
ing toolkit prom 6, available from http://www.processmining.org/ .t h e
packet provides petri-net patterns for the control ﬂow compliance rules discussed in274 e. ramezani, d. fahland, w.m.p. van der aalst
this paper. the “ check compliance ” plugin takes a log as input. then the user can
pick from a list of available compliance rules, those rules against which the log shallbe checked. for each rule to check, the user then conﬁgures its parameters, mostly by
mapping events to task names of the rule. then the conformance checker of sect. 3 is
called to align the log to the rule’s petri-net pattern. the resulting alignment is shown tothe user. each aligned trace is shown in a separate row and deviations are highlighted:
a move on log indicates an event occurred whi ch did not comply to the rule, a move on
model indicates which event skipped in log such that log does not comply to the rule.
several ﬁgures in the next section show these alignments.
to ease presentation of our results, we abstract long sequences of events that are
not relevant to the compliance rule (i.e., which are mapped to ω-transitions), to shorter
sequences. this way, order and relative position of compliance-relevant events are pre-
served while irrelevant details are abstracted from.
6.2 case study constraints and results
in the case study we followed the standard use case for compliance checking: (1) check
relevant regulations and elicit respective com pliance requirement s, (2) for each require-
ment, identify the patterns that precisely express the requirement from the rule collec-
tion in tab. 1, (3) take the corresponding petr i-net pattern and map its transitions to the
events in the given log, and (4) run the conformance checker.
in the following, we describe our ﬁndings for three compliance requirements that
were derived from the ﬁnancial department’s internal policies and medical guidelines.
fig. 8. non-compliant case for
‘first visit registration should
occur exactly once’compliance requirement 1. “the hospital should reg-
ister each visiting patient and prevent duplicate regis-trations for a patient.” this requirement is formalized
by the compliance rule “event first visit registration
should occur exactly once per case.” from the category‘bounded existence ’ of table 1. the corresponding pat-
tern is shown in fig. 2 (left). to obtain a reliable result,
we needed to ﬁlter the data for patients who started theirtreatment between 2005 and 2008. we checked compliance for 640 cases and identiﬁed
622 compliant and 18 non-compliant cases.
figure 8 shows diagnostic information for a non-compliant case. as described above,
prom maps the trace on to the compliance-inﬂuencing events: first visit registration
occurs twice, where the ﬁrst occurrence is compliant (highlighted green) and the secondone should not have been in the trace (highlighted yellow, move on log ).
compliance requirement 2. the patients are sent to the hospital for specialized treat-
ment. therefore a basic x-ray scan has to be performed after a patient was registered.
this requirement is formalized by two rules: “event x-ray should occur at least once per
case.” and “every time the event ‘ x-ray ’ occurs, ‘ first visit registration ’ should have
happened before x-ray .” figure 9 shows compliance results for the second rule, which
is formalized by fig. 3(top right); we found 104compliant cases out of 640.diagnostic information in compliance checking 275
fig. 9. non-compliant case
for ‘first registration visit
precedes x-ray ’an example of a non-compliant case is shown in
fig. 9. the relevant sequence of events in this case is/angbracketleft...x-ray...firstvisitregistration .../angbracketright. the compliance
checker identiﬁed the x-ray event as an event that should not
have happened (highlighted yellow, move on log ) because it
occurred before the firstvisitregistration event). in addi-
tion, the checker highlights the position where x-ray should
have occurred as a move on model (highlighted purple).
initω p1f
f
mri ω ω ct
final
fig. 10. petri-net pattern and a non-
compliant case for ‘ct-scan and mritest exclude each other’compliance requirement 3. “for safety reasons,
either a ct-scan or an mri test of an organ should
be taken from a patient but not both.” the corre-
sponding compliance rule from the exclusive cat-
egory has the petri-net pattern of fig. 10(top).
we checked this rule and identiﬁed 1092 com-
pliant cases out of 1150. fig. 10(bottom) shows di-
agnostic information for one non-compliant case.the relevant sequence of events for this case is
/angbracketleft...ct.mri...ct...mri.../angbracketright. the occurrence of
cttogether with mri is a violation. in addi-
tion, the diagnostic information provided by the
checker clearly shows several violations due to
multiple occurrences of ct(move on log , high-
lighted yellow).
altogether we could identify and precisely locate various compliance deviations
from given compliance rules in a real-life log.
7c o n c l u s i o n
today’s organizations need to comply to an in creasing set of laws and regulations. com-
pliance requirements are often described in natural language which makes checking
compliance a difﬁcult task. in this paper we provided a ﬁrst comprehensive collection
of control ﬂow compliance rules which allow to formally capture a large set of compli-ance requirements. moreover we presented a robust technique for backwards compli-
ance checking which enables us to provide diagnostic information in case of violations.
the technique is also applicable to check comp liance of artifact-centric processes [16].
the approach is supported by prom plugins and we tested our techniques using real-life
logs and compliance requirements.
the unusual choice of formalizing compliance rules as petri-nets rather than log-
ics posed no difﬁculties. yet, we can foresee beneﬁts from a mixed formalization of
declarative rules by logics and operational rules by petri-nets. note that in no situation,the end user is confronted with the formalization of the rule, but picks rules by their
informal description.
we showed that our approach can also handl e organizational rules and data ﬂow
rules to constrain individual tasks. handling constraints across several tasks requires to276 e. ramezani, d. fahland, w.m.p. van der aalst
generalize the technique, in particular the underling conformance checker [8]. also, the
mapping between event attributes and transiti ons is cumbersome and currently speciﬁed
at a technical level using concrete values; a more user-friendly approach to specify
organizational and data ﬂow rules is required.
thus, future work aims at exploring the compliance rule framework (fig. 1) further
and extending the compliance rule set (table 1) for other dimensions, i.e., with collec-
tions of compliance rules restricting dat a ﬂow, process resource, and process time.
acknowledgements. we thank r.mans, a.adriansyah and c.stahl for their substantial
support in writing this paper. the research leading to these results has received fund-
ing from the european community’s seventh framework programme fp7/2007-2013
under grant agreement no257593 (acsi).
references
1. van der aalst, w.m.p.: process mining - discovery, conformance and enhancement of busi-
ness processes. springer (2011)
2. van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on process mod-
els for conformance checking and performance analysis. wires data mining knowl. dis-
cov. 2, 182–192 (2012)
3. van der aalst, w.m.p., de beer, h.t., van dongen, b.f.: process mining and veriﬁcation of
properties: an approach based on temporal logic. in: meersman, r. (ed.) otm 2005, part
i. lncs, vol. 3760, pp. 130–147. springer, heidelberg (2005)
4. van der aalst, w.m.p., van hee, k.m., van der werf, j.m., kumar, a., verdonk, m.: con-
ceptual model for online auditing. decision support systems 50(3), 636–647 (2011)
5. abdullah, n.s., sadiq, s.w., indulska, m.: information systems research: aligning to in-
dustry challenges in management of regulatory compliance. in: pacis 2010, p. 36. aisel
(2010)
6. adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: towards robust conformance
checking. in: zur muehlen, m., su, j. (eds.) bpm 2010 workshops. lnbip, vol. 66, pp.
122–133. springer, heidelberg (2011)
7. adriansyah, a., sidorova, n., van dongen, b.f.: cost-based fitness in conformance check-
ing. in: acsd 2011, pp. 57–66. ieee (2011)
8. adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: conformance checking using cost-
based ﬁtness analysis. in: edoc 2011, pp. 55–64. ieee (2011)
9. awad, a., decker, g., weske, m.: efﬁcient compliance checking using bpmn-q and tem-
poral logic. in: dumas, m., reichert, m., shan, m.-c. (eds.) bpm 2008. lncs, vol. 5240,
pp. 326–341. springer, heidelberg (2008)
10. awad, a., weske, m.: visualization of compliance violation in business process models.
in: rinderle-ma, s., sadiq, s., leymann, f. (eds.) bpm 2009. lnbip, vol. 43, pp. 182–193.
springer, heidelberg (2010)
11. calders, t., guenther, c., pechenizkiy, m., rozinat, a.: using minimum description length
for process mining. in: sac 2009, pp. 1451–1455. acm press (2009)
12. christopher giblin, s.m., pﬁtzmann, b.: research report: from regulatory policies to event
monitoring rules: towards model-driven compliance automation. tech. rep., ibm research
gmbh, zurich research laboratory, switzerland (2006)
13. cook, j., wolf, a.: software process valida tion: quantitatively m easuring the correspon-
dence of a process to a model. acm transactions on software engineering and methodol-
ogy 8(2), 147–176 (1999)diagnostic information in compliance checking 277
14. dwyer, m.b., avrunin, g.s., corbett, j.c.: patterns in property speciﬁcations for ﬁnite-state
veriﬁcation. in: icse 1999, pp. 411–420 (1999)
15. elgammal, a., turetken, o., van den heuvel, w.-j., papazoglou, m.: root-cause analy-
sis of design-time compliance violations on the basis of property patterns. in: maglio,
p.p., weske, m., yang, j., fantinato, m. (eds.) icsoc 2010. lncs, vol. 6470, pp. 17–31.springer, heidelberg (2010)
16. fahland, d., de leoni, m., van dongen, b.f., van der aalst, w.m.p.: conformance checking
of interacting processes with overlapping instances. in: rinderle-ma, s., toumani, f., wolf,k. (eds.) bpm 2011. lncs, vol. 6896, pp. 345–361. springer, heidelberg (2011)
17. f¨ otsch, d., pulverm¨ uller, e., rossak, w.: modeling and verifying workﬂow-based regula-
tions. in: remo2v 2006. ceur workshop proceedings, vol. 241 (2007)
18. ghose, a., koliadis, g.: auditing business process compliance. in: kr¨ amer, b.j., lin, k.-j.,
narasimhan, p. (eds.) icsoc 2007. lncs, vol. 4749, pp. 169–180. springer, heidelberg(2007)
19. giblin, c., liu, a.y ., m¨ uller, s., pﬁtzmann, b., zhou, x.: regulations expressed as logi-
cal models (realm). in: frontiers in artiﬁci al intelligence and applications, jurix 2005,
vol. 134, pp. 37–48. ios press (2005)
20. goedertier, s., martens, d., vanthienen, j., baesens, b.: robust process discovery with ar-
tiﬁcial negative events. journal of machine learning research 10, 1305–1340 (2009)
21. gruhn, v ., laue, r.: patterns for timed property speciﬁcations. electr. notes theor. comput.
sci. 153(2), 117–133 (2006)
22. kharbili, m.e., de medeiros, a.k.a., stein, s., van der aalst, w.m.p.: business process
compliance checking: current state and future challenges. in: mobis 2008. lni, vol. 141,
pp. 107–113. gi (2008)
23. kharbili, m.: business process regulatory compliance management solution frameworks: a
comparative evaluation. in: apccm 2012. crpit, vol. 130, pp. 23–32. acs (2012)
24. lu, r., sadiq, s., governatori, g.: compliance aware business process design. in: ter hof-
stede, a.h.m., benatallah, b., paik, h.-y . (eds.) bpm workshops 2007. lncs, vol. 4928,
pp. 120–131. springer, heidelberg (2008)
25. montali, m., pesic, m., van der aalst, w.m.p., chesani, f., mello, p., storari, s.: declar-
ative speciﬁcation and veriﬁcation of servi ce choreographies. acm transactions on the
web 4(1), 1–62 (2010)
26. mu˜ noz-gama, j., carmona, j.: a fresh look at precision in process conformance. in: hull,
r., mendling, j., tai, s. (eds.) bpm 2010. lncs, vol. 6336, pp. 211–226. springer, heidel-berg (2010)
27. mu˜ noz-gama, j., carmona, j.: enhancing precision in process conformance: stability, con-
ﬁdence and severity. in: cidm 2011. ieee (2011)
28. pitzmann, b., powers, c., waidner, m.: ibm’s uniﬁed governance framework (ugf). tech.
rep., ibm research division, zurich (2007)
29. ramezani, e., fahland, d., van der aalst, w.m.p.: diagnostic information in compliance
checking. tech. rep., bpm center report bpm-12-11, bpmcenter.org (2012)
30. ramezani, e., fahland, d., van der werf, j.m., mattheis, p.: separating compliance man-
agement and business process management. in : daniel, f., barkaoui, k., dustdar, s. (eds.)
bpm workshops 2011, part ii. lnbip, vol. 100, pp. 459–464. springer, heidelberg (2012)
31. rozinat, a., van der aalst, w.m.p.: conformance checking of processes based on monitoring
real behavior. inf. syst. 33(1), 64–95 (2008)
32. sadiq, s., governatori, g., namiri, k.: modeling control objectives for business process
compliance. in: alonso, g., dadam, p., rosemann, m. (eds.) bpm 2007. lncs, vol. 4714,
pp. 149–164. springer, heidelberg (2007)278 e. ramezani, d. fahland, w.m.p. van der aalst
33. schleicher, d., grohe, s., leymann, f., schneider, p., schumm, d., wolf, t.: an approach
to combine data-related and control-ﬂow-related compliance rules. in: soca 2011, pp. 1–8.
ieee (2011)
34. schleicher, d., anstett, t., leymann, f., schumm, d.: compliant business process design
using reﬁnement layers. in: meersman, r., dillon, t.s., herrero, p. (eds.) otm 2010, part
i. lncs, vol. 6426, pp. 114–131. springer, heidelberg (2010)
35. schleicher, d., fehling, c., grohe, s., leymann, f., nowak, a., schneider, p., schumm, d.:
compliance domains: a means to model data-restrictions in cloud environments. in: edoc,
pp. 257–266 (2011)
36. schumm, d., leymann, f., ma, z., scheibler, t., strauch, s.: integrating compliance into
business processes: process fragments as reusable compliance controls. in: mkwi 2010.
universit¨ atsverlag g¨ ottingen (2010)
37. schumm, d., turetken, o., kokash, n., elgammal, a., leymann, f., van den heuvel, w.-j.:
business process compliance through reusable units of compliant processes. in: daniel, f.,
facca, f.m. (eds.) icwe 2010. lncs, vol. 6385, pp. 325–337. springer, heidelberg (2010)
38. weerdt, j.d., backer, m.d., vanthienen, j., baesens, b.: a robust f-measure for evaluating
discovered process models. in: cidm 2011, pp. 148–155. ieee (2011)
39. wolter, c., meinel, c.: an approach to capture authorisation requirements in business pro-
cesses. requir. eng. 15(4), 359–373 (2010)