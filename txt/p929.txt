guided interaction exploration in artifact-centric
process models
maikel l. van eck, natalia sidorova, wil m.p. van der aalst
eindhoven university of technology, the netherlands
email:fm.l.v.eck,n.sidorova,w.m.p.v.d.aalst g@tue.nl
abstract ‚Äîartifact-centric process models aim to describe com-
plex processes as a collection of interacting artifacts. recent
development in process mining allow for the discovery of such
models. however, the focus is often on the representation of
the individual artifacts rather than their interactions. based
on event data we can automatically discover composite state
machines representing artifact-centric processes. moreover, we
provide ways of visualizing and quantifying interactions among
different artifacts. for example, we are able to highlight strongly
correlated behaviours in different artifacts. the approach has
been fully implemented as a prom plug-in; the csm miner
provides an interactive artifact-centric process discovery tool
focussing on interactions. the approach has been evaluated using
real life data sets, including the personal loan and overdraft
process of a dutch Ô¨Ånancial institution.
i. i ntroduction
process discovery is the automated creation of process
models that explain the behaviour captured in event data [1].
these process models can be studied e.g. to identify interesting
process Ô¨Çows that differ from the process behaviour expected
by a process expert or analyst. however, complex process
behaviour can result in unstructured process models, which
makes them difÔ¨Åcult and time-consuming to analyse. further-
more, there are often multiple views on the same process, and
analysts do not always know what they are looking for.
one of the sources of complexity of discovered process
models is that many process discovery approaches produce
models that provide a monolithic view on the real process [1],
[2]. these models generally explain the behaviour of a process
in terms of the life-cycle of a single process instance. however,
in reality a process instance may involve several interacting
process objects or artifacts, each with their own life-cycle [3],
[4]. for example, a procurement process with order and invoice
objects, the behavioural process of a smart product with
sensors that detect the product‚Äôs state for different physical
aspects, or the status of a single resource in terms of its status
in the different processes it is involved in.
recently, it has become possible to automatically discover
models for process artifacts and their behavioural interac-
tions [2], [4], [5]. these techniques produce individual process
models for each artifact or perspective similar to traditional
process discovery approaches. the addition of artifact in-
teraction enriches the individual models, connecting process
elements from different artifact models. such information
this research was performed in the impuls collaboration project of
eindhoven university of technology and philips: ‚Äúmine your own body‚Äù.highlights e.g. whether a speciÔ¨Åc state in one artifact coincides
with the state of another artifact.
artifact-centric techniques can provide more structured pro-
cess models than traditional discovery approaches [2]. how-
ever, decomposing the behaviour of a process into interacting
artifacts does not necessarily make the overall process easier to
understand. therefore, we present an approach to support the
analysis of behavioural interactions between process artifacts .
the goal is to Ô¨Ånd the most interesting or relevant interactions
so that an analyst can inspect these Ô¨Årst. this helps process
analysts faced with complex processes featuring artifacts in-
teracting in a bigger system.
there are different ways to interpret the interaction of
artifacts [2], [5], [6]. we are interested in Ô¨Ånding implications
that given the occurrence of an element of one artifact-lifecycle
provide information on the possible behaviour of other arti-
facts. process data generally does not explicitly contain these
interactions or causal relations between artifact behaviour, so
instead, we use information on correlations between artifact
behaviour to obtain such insights .
the analysis guidance involves the use of measures of
interestingness to quantify artifact interactions. such measures
have been developed in the Ô¨Åeld of association rule learning to
quantify the relevance of relations between sets of items [7],
[8]. in this work we show how these measures can be deÔ¨Åned
in the context of process artifact interaction. based on these
measures a ranking of artifact interactions can be presented
to process analysts when inspecting process discovery results.
we have extended our artifact-centric process discovery tool,
the csm miner [9] in the prom process mining framework,
to support the explanation and analysis of interactions.
to evaluate the use of analysis guidance in practice we
have used the developed tool with real life process data. we
discuss the results of this analysis and compare it to insights
obtained by other researchers using traditional process mining
approaches on the same data. this evaluation shows that the
analysis guidance provides insights into the overall process
behaviour by highlighting interesting artifact interactions.
the remainder of this paper is structured as follows. first, in
section ii we discuss related work on artifact-centric process
mining and measures of interestingness. in section iii we in-
troduce a way to model processes representing artifact systems
and deÔ¨Åne artifact interactions. then in section iv we deÔ¨Åne
measures of interestingness in the context of process artifacts.
we present the implementation of the analysis guidance in thearxiv:1706.02109v1  [cs.db]  7 jun 2017csm miner in section v. we evaluate the tool using real life
process data in section vi. finally, in section vii we present
future work and conclusions.
ii. r elated work
a plethora of algorithms and tools for automated process
discovery emerged over the last decade [1]. these produce
models in various process model notations. several approaches
have also been developed to take an object-oriented or artifact-
centric view of process mining [3], [4]. however, the number
of techniques that can automatically discover the interactions
between artifact models is limited [2], [5].
there are different types of behavioural interaction between
artifacts that can be mined from process execution data. like
in monolithic process discovery, it is possible to establish
causal dependencies between events that occur in different
artifacts [5]. it is also possible to link a stage in one artifact
lifecycle to stages in related artifact lifecycles by discovering
synchronization conditions [6]. similarly, one can identify
artifact interaction deÔ¨Åned as the co-occurrence of states and
transitions from different artifacts as part of the states and
transitions of the entire process [2].
the goal of the analysis of process artifacts and their
interaction is to help the user understand complex behaviour by
providing additional structure to the process through decompo-
sition. there are several other existing approaches in process
mining to deal with model complexity. most process discovery
tools have Ô¨Åltering options or sliders to adjust which activities
and dependencies between activities are shown, often based
on frequency information [1]. for some types of processes
it is also possible to discover hierarchical process models
that allow the analysis of a process at different levels of
detail [10]. trace clustering is a technique to decompose the
process data of Ô¨Çexible processes with many different process
instance variants that share little overlap in behaviour [11].
the clustered process instances are used to mine a more
limited model with fewer and stronger dependencies between
activities. however, all these approaches simplify the real
behaviour shown by the data and hide information instead of
using the complete information to guide the analyst.
understanding the relations between artifacts and their
effect on the overall process behaviour is a challenge [5]. for
complex processes this requires the analysis of large numbers
of possible artifact interactions, many of which are not interest-
ing. this problem is related to the problem in association rule
learning that association rule mining algorithms produce large
numbers of rules that are not equally relevant [7], [8], [12]. a
solution in association rule learning for this problem involves
the quantiÔ¨Åcation of the interestingness of the association rules
using speciÔ¨Åc measures of interestingness.
iii. m odelling of artifact systems
in this work we use the notion of state machines to model
processes representing artifact systems and the life-cycles of
artifacts as presented in [2]. we developed the csm miner to
support such models [9].regarding notation, we write kfor thek-th element of
a sequence 2sof elements from some set s, andjj
denotes the length of . we writes2ifs=kfor some
kandhs;:::;s0ifor the concatenation of with sequence
hs;:::;s0i. additionally, for s2s1snwe writes(i)
for the value of the i-th component of s(i2f1;:::;ng).
a. composite state machines
a process consisting of a number of interacting artifacts
is called an artifact system, and we model its behaviour as
acomposite state machine (csm). the state of a csm is
deÔ¨Åned as the composition of the states of its artifacts, i.e.
it is a vector of states. the set of all possible states of a
csm is a subset of the cartesian product of the sets of states
of its artifacts, as not all combinations of artifact states are
necessarily possible. each transition in a csm represents a
change in the state of at least one artifact; we do not allow
self loops. formally:
deÔ¨Ånition 1. acomposite state machine m= (s;t;b;f )is
a model of a process with nartifacts where s(s1sn)
is a set of states, with s1;:::;snthe sets of artifact states,
b= (b1;:::;bn)is the initial source state, f= (f1;:::;fn)
is the Ô¨Ånal sink state, t(s[fbg)(s[ffg)is the set of
transitions, and8(s;s0)2t:s6=s0. we deÔ¨Ånes=s[fb;fg
andsi=si[fbi;figfori2f1;:::;ng.
the explicit initial and Ô¨Ånal states have no incoming and
outgoing transitions, respectively. they are not true states: they
only mark the points in time where a process instance begins
and Ô¨Ånishes. as a special case, we call a csm with only one
artifact an artifact model , which represents the behaviour of
the artifact in isolation.
we can project a csm onto a speciÔ¨Åc subset of its artifacts
to focus only on their behaviour. a csm projection is obtained
by reducing the cartesian product of each state to the given
subset of artifacts, merging the identical states, and omitting
unnecessary transitions and self loops. as transitions represent
state changes, two states of a projection are only connected by
a transition if there is a transition in the csm whose source
and target are reduced to these different states.
deÔ¨Ånition 2. given a csmm and an ordered sub-
set of indices  =fi1;:::;img  f 1;:::;ng, with
i1< i2<< im, we deÔ¨Åne the state projection function
: (s1sn)!(si1sim)as follows:
8s2s;ij2 : ((s))(j) =s(ij). acsm projection of
mon,m= (s;t;b;f), is deÔ¨Åned as:
s=f(s)js2sg;
t=f((s);(s0))j(s;s0)2t^(s)6=(s0)g;
b=(b);
f=(f):
the artifact modelaiis deÔ¨Åned as the projection mfigof
monfig.
note that the projection of a csm is itself again a csm,
modelling only the behaviour of the artifacts projected on.fig. 1: a modelmof a simple healthcare process and its two artifact models a1anda2. every state in the process is a
combination of a state from each artifact.
in fig. 1 we present a simple healthcare process, which we
use as a running example. this process (model m) has two
distinct perspectives or artifacts: the status of the patient being
treated (modela1), and the status of lab tests of the patient
(modela2). the artiÔ¨Åcial initial and Ô¨Ånial states are marked
without border.
the healthcare process starts when the patient is registered,
after which a lab test is planned to diagnose the patient.
if the patient misses their appointment or if the results are
inconclusive, then a new test is planned, but if the test results
are ready then the treatment can proceed. during the treatment
additional tests may be required, until the patient is healthy
again and the process ends. note that the composite process is
smaller than the cartesian product of the artifacts ( 45 = 20
states) because not all state combinations can be observed due
to interdependencies. for example, once the patient is healthy
no extra lab tests are needed. such dependencies between
artifacts can be interesting to analyse.
b. process execution data
the csm models as introduced above provide only limited
insights into the dependencies and interaction between the
artifacts whose behaviour makes up the process of the artifact
system. there are no expected sojourn times for the different
states or frequencies for transitions. for the process in fig. 1
an analyst could be interested e.g. in the average time spent
waiting on result (c) while the patient is in treatment (y)
or the difference in probability of transitioning to new test
needed (e) before and after the patient is diagnosed (x) .
to enrich the model with such information, we require a
collection of process execution data.
in this work we assume the availability of both a csm of
the process of interest and a matching collection of process
instance data consisting of execution sequences of the process.
each state entry in an execution sequence , or trace, speciÔ¨Åes
the new state of the artifact system at a certain point in time. a
collection of execution sequences together form a log. givena log, a csm can be discovered that matches the execution
sequences in the log [2].
deÔ¨Ånition 3. letmbe a csm and ta time domain. we call
e2(st)astate entry . function state (e)returns the state,
time(e)returns the time, and statei(e) =fig(state (e))re-
turns the state projection of the state entry e.
2(st)is an execution sequence ofmiff:
state (1) =b,
state (jj) =f,
(state (k);state (k+1))2tfork2f1;:::;jj 1g,
time(1) =time(2), and
time(k)<time(k+1)fork2f2;:::;jj 1g.
the set tracesmis the set of all possible execution sequences
ofm. aloglm:tracesm!nis a multiset of execution
sequences.
an example of an execution sequence for the csms from
fig. 1 is provided in fig. 2. note that no time is spent in
the artiÔ¨Åcial initial state b, representing the beginning of the
known execution, but it is included in execution sequences to
enable the calculation of the frequency of the different possible
ways to start a process. artiÔ¨Åcial Ô¨Ånal state frepresents the
point in time after which the process instance Ô¨Ånished and the
state is unknown.
we can use the time information in an execution sequence
to calculate the time spent in a given state. by aggregating the
durations of state entries over a log the models can be enriched
with sojourn time statistics for each state. similar to state
sojourn times, we can also count the number of transitions
occurring in a log. these numbers can be used to annotate the
transitions in the process models with frequency statistics.
deÔ¨Ånition 4. letkbe a state entry of an execution sequence
2tracesmof csmm. the state entry‚Äôs duration is given
by:
(k) =(
time(k+1) time(k);if1k<jj
0; ifk=jjfig. 2: an execution sequence for the running example process from fig. 1.
table i: the state entries of the execution sequence ofmfrom fig. 2, the sequence projected on the Ô¨Årst artifact
0=f1g(), and the sequence projected on the second artifact 00=f2g().
k k (k)
1 ((b1;b2), 1-1-‚Äô17) 0
2 ((w,a), 1-1-‚Äô17) 4
3 ((w,b), 5-1-‚Äô17) 2
4 ((w,c), 7-1-‚Äô17) 4
5 ((w,d), 11-1-‚Äô17) 1
6 ((x,d), 12-1-‚Äô17) 2
7 ((y ,d), 14-1-‚Äô17) 4
8 ((y ,e), 18-1-‚Äô17) 3
9 ((y ,b), 21-1-‚Äô17) 3
10 ((y ,c), 24-1-‚Äô17) 2
11 ((z,d), 26-1-‚Äô17) 1
12 ((f1;f2), 27-1-‚Äô17) 0l0
l(0
l)
1 (b1, 1-1-‚Äô17) 0
2 (w, 1-1-‚Äô17) 11
3 (x, 12-1-‚Äô17) 2
4 (y , 14-1-‚Äô17) 12
5 (z, 26-1-‚Äô17) 1
6 (f1, 27-1-‚Äô17) 0m00
m(00
m)
1 (b2, 1-1-‚Äô17) 0
2 (a, 1-1-‚Äô17) 4
3 (b, 5-1-‚Äô17) 2
4 (c, 7-1-‚Äô17) 4
5 (d, 11-1-‚Äô17) 7
6 (e, 18-1-‚Äô17) 3
7 (b, 21-1-‚Äô17) 3
8 (c, 24-1-‚Äô17) 2
9 (d, 26-1-‚Äô17) 1
10 (f2, 27-1-‚Äô17) 0
the total sojourn time of a state s2sfor a loglmis:
soj(s;lm) =x
2lmx
fkjstate(k)=sg(k)
lm()
the frequency of a transition (s;s0)2tfor a loglmis:
freqt((s;s0);lm) =x
2lmfkjstate (k) =s^state (k+1) =s0glm()
an execution sequence of a csm can also be projected onto
a subset of its artifacts such that it is an execution sequence
of the matching projected csm. the projection abstracts from
state entries where the state of the speciÔ¨Åed artifacts does not
change from the previous state entry, as these entries no longer
represent transitions in the projected process model. with such
projections we can calculate sojourn and frequency statistics
to enrich projected csms as before.
deÔ¨Ånition 5. letmbe a csm, a set of artifact indices,
anda state projection function. we lift the application of
projection function to sequences 2tracesmso that
()2tracesm. we deÔ¨Åne()recursively:
if=hithen() =hi, and if=hei, withe2(s
t), then() =h((state (e));time(e))i. for an execution
sequencehe1;e2i,
(he1;e2i) =8
><
>:(he1i); if(state (e1)) =
(state (e2))
(he1i)(he2i);otherwise
alog projectionl
m:tracesm!nof a loglmis a
multiset of execution sequences such that: 8&2tracesm:
l
m(&) =p
2lm:&=()lm().table i shows an execution sequence of the running
example process and its projections ()for =f1gand
 =f2g, together with their corresponding durations.
the information in a collection of execution sequences
can be used to enrich a csm and its projections with state
sojourn statistics and transition frequencies as described above.
fig. 3 shows the running example process of fig. 1 annotated
with frequency and average sojourn time information. process
execution data can also be used for the identiÔ¨Åcation of
relations between artifact model elements and the calculation
of measures of interestingness for such relations.
c. artifact interaction
given a csmmwith multiple artifacts and a log lm,
we want to Ô¨Ånd interesting artifact interactions that are a part
of the artifact system behaviour. for example, if the state
of an artifact cannot be advanced until a certain state in a
different artifact has been reached then this may represent a
bottleneck in the overall process. similarly, the probability of
making speciÔ¨Åc choices at a decision point in one artifact may
be affected by the state of another artifact. the executions
in a log do not explicitly describe such causal dependencies
between the behaviour of different artifacts, but we can infer
correlations between sets of artifact states or transitions. based
on this, we distinguish three types of artifact interaction: state
co-occurrence ,transition co-occurrence andforward-looking
co-occurrence .
we focus here only on the interaction between pairs of
artifacts, but the interaction deÔ¨Ånitions can be generalised to
involve sets of artifacts. we formulate each interaction as an
implication (x)y)between two statements regarding the
states or execution behaviour of the artifacts.4 days
4 days2 days
1 day2 days
1 day 4 days 1 day2 days
2 days 1 day100
100
100100 102030
120
100
208010
10
10110
100
20
80 70
12 days
2 days
1 day9 days100
100
100
100100
4 days
4 days
6 days
2 day 8 days
100100
100
2030
90140
220
190fig. 3: the models of the healthcare process from fig. 1 annotated with transition frequencies and average state sojourn times
per trace.
state co-occurrence (si)ssj)is deÔ¨Åned as the conditional
probability that artifact model ajis in statesjgiven that
artifact modelaiis in statesi. from the execution sequences
in a log we can determine the strength of this interaction in
the observed data. it is calculated as the amount of time the
system state contains both states compared to the total time
spent insi.
deÔ¨Ånition 6. letmbe a csm with artifacts iandj,
si2siandsj2sj. the strength of the state co-occurrence
(si)ssj)is deÔ¨Åned as:
^ps(si)ssj) =soj((si;sj);lfi;jg
m)
soj(si;lfig
m)
in fig. 3 we can see that the average time spent in
treatment (y) given that the lab is waiting on result (c) is 2
days, while the average time spent registered (w) given that
the lab is waiting on result (c) is 4 days. so, the interaction
(c)sw)is a stronger co-occurrence (4
6) than the interaction
(c)sy)(2
6).
transition co-occurrence ((si;s0
i))t(sj;s0
j))is deÔ¨Åned
as the conditional probability that, given that aiis in a
transition from sitos0
i,ajhas a statesjbefore and a state
s0
jafter the transition. if sj=s0
jthis co-occurrence speciÔ¨Åes
the state ofajduring the given transition in ai, but if they
differ then it speciÔ¨Åes a transition in ajthat co-occurs with the
transition inai. the strength of this interaction is calculated
as the number of times we observe transitions for which both
the condition and the consequence hold divided by the total
number of observed transitions for which the condition holds.
deÔ¨Ånition 7. letmbe a csm with artifacts iandj,
si;s0
i2si,si6=s0
i, andsj;s0
j2sj. the strength of the
transition co-occurrence ((si;s0
i))t(sj;s0
j))is deÔ¨Åned as:
^pt((si;s0
i))t(sj;s0
j)) =freqt(((si;sj);(s0
i;s0
j));lfi;jg
m)
freqt((si;s0
i);lfig
m)in fig. 3 there are three types of transitions from waiting
on result (c) toresult ready (d) : while the patient is regis-
tered (w) (100 times), while the patient is in treatment (y) (70
times), and simultaneously together with a transition from in
treatment (y) tohealthy (z) (20 times). therefore, the strength
of the transition co-occurrence ((c;d))t(w;w ))is100
190.
forward-looking co-occurrence (si^sj)f(sj;s0
j))is
deÔ¨Åned as the conditional probability that the next transition
executed inajgoes to state s0
j, given thatajis in statesj
and thataiis in statesiduring and after the next transition in
aj. the strength of this interaction is calculated as the number
of times we observe a transition from sjtos0
jwhileaihas
the speciÔ¨Åed state sidivided by the total number of outgoing
transitions from sjwhileaiis insi.
deÔ¨Ånition 8. letmbe a csm with artifacts iandj,si2si,
andsj;s0
j2sj,sj6=s0
j. the strength of the forward-looking
co-occurrence (si^sj)f(sj;s0
j))is deÔ¨Åned as:
^pf(si^sj)f(sj;s0
j)) =
freqt(((si;sj);(si;s0
j));lfi;jg
m)
p
s00
j2sjfreqt(((si;sj);(si;s00
j));lfi;jg
m)
in fig. 3 there are transitions from waiting on result (c)
tonew test needed (e) that occur while the patient is in
treatment (y) (10 times). while in treatment (y) andwaiting
on result (c) there are also transitions to result ready (d) (70
times). therefore the interaction (y^c)f(c;e))has a
strength of10
80.
it is possible to calculate the artifact interactions deÔ¨Åned
above for all pairs of states and transitions of all pairs of
artifacts. however, it is clear that this results in a very large
number of interactions for a process analyst to inspect. one
solution to this problem is to rank and Ô¨Ålter the list of
interactions to obtain the most interesting artifact relations and
to present those to the analyst Ô¨Årst.iv. a rtifact interaction interestingness
in order to rank and Ô¨Ålter artifact interactions based on
their interestingness it is necessary to be able to quantify
‚Äúinterestingness‚Äù. as we discussed in section ii, work has
been performed in the Ô¨Åeld of association rule learning to
develop measures of interestingness to help with the analysis
of large sets of association rules [7], [8]. we have selected
a number of such measures and we discuss their meaning
and applicability in the context of artifact interactions that
represent process behaviour.
a. probability interpretation
the artifact interactions we deÔ¨Åned in section iii-c are im-
plications over binary stochastic variables representing state-
ments of artifact behaviour. the implications are of the form
(x)y). each statement xoryis either true or false,
with a certain probability that can be estimated from process
execution data. the measures of interestingness objectively
score statistical correlations between the variables based on
these probabilities. we discuss the probabilities and their
interpretations for each type of artifact interaction.
state co-occurrence (si)ssj)is an implication between
stochastic variables of the form (xsi)ysj)withxsideÔ¨Åned
asaihas statesiandysjdeÔ¨Åned asajhas statesj. the
probability of xsican be estimated based on the total sojourn
time over all states:
^ps(xsi) =soj(si;lfig
m)p
s2ssoj(s;lm)
transition co-occurrence ((si;s0
i))t(sj;s0
j))is either an
implication of the form (x(si;s0
i))ysj)ifsj=s0
j, with
x(si;s0
i)deÔ¨Åned asaiis in transition from sitos0
i, or it
is an implication (x(si;s0
i))y(sj;s0
j))ifsj6=s0
j. strictly
speaking, the probability of x(si;s0
i)cannot be expressed
because transitions are instantaneous and on a continuous time
scale the probability to be in the speciÔ¨Åc point in time where
the transition occurs is inÔ¨Ånitesimal, i.e. not distinguishable
from 0. as a result, a number of measures of interestingness
would not be deÔ¨Åned for transition co-occurrence. we express
the probability based on the total frequency of transitions to
avoid this issue:
^pt(x(si;s0
i)) =freqt((si;s0
i);lfig
m)p
(s;s0)2tfreqt((s;s0);lm)
forward-looking co-occurrence (si^sj)f(sj;s0
j))is of
the form (xsi^sj)yf(sj;s0
j))withxsi^sjdeÔ¨Åned asajhas
statesjandaihas statesiduring the next transition in aj,
andyf(sj;s0
j)deÔ¨Åned as the next transition in ajis fromsjto
s0
j. the probability of xsi^sjis estimated by the probabilityto be insjand the frequency of siin all possible transitions
fromsj:
^pf(xsi^sj) =soj(sj;lfjg
m)p
s2ssoj(s;lm)
p
s00
j2sjfreqt(((si;sj);(si;s00
j));lfi;jg
m)
p
s00
j2sjfreqt((sj;s00
j);lfjg
m)
becauseyf(sj;s0
j)is only possible if ajhas statesjwe can
estimate it with the probability to be in sjand the frequency
of each possible outgoing transition from sj:
^pf(yf(sj;s0
j)) =soj(sj;lfjg
m)p
s2ssoj(s;lm)
freqt((sj;s0
j);lfjg
m)
p
s00
j2sjfreqt((sj;s00
j);lfjg
m)
b. measures of interestingness
below we present a selection of measures of interestingness
that have been implemented in the csm miner to evaluate
the interestingness of artifact interactions. the motivation for
this selection is that each of these measures has an intuitive
interpretation, and that evaluation studies in other application
areas have shown that these measures have high predictive
power and low collinearity with each other when used to
approximate association rule interestingness [12].
for each measure we provide a deÔ¨Ånition, a short descrip-
tion of its intuitive meaning and its range. the measures
are deÔ¨Åned in terms of the probabilities of observing the
conditions and consequences of the implications representing
the different types of artifact interaction. some measures are
symmetric, i.e. their value for x)yis equal for y)x.
conÔ¨Ådence: the conÔ¨Ådence of an artifact interaction is
also referred to as the strength of the prediction, which we
introduced for each type of artifact interaction in section iii-c.
it is deÔ¨Åned as a conditional probability:
conf(x)y) =p(x)y) =p(yjx)
the range of conf is[0;1]and it is asymmetric, i.e. in
general conf(x)y)6=conf(y)x).
support: in the context of association rule learning the
support measure is traditionally deÔ¨Åned as the frequency
with which items occur in a set of transactions, which is
an estimate of their probability of occurrence. in the setting
of artifact interaction the support of individual statements
is their probability interpretation as deÔ¨Åned in the section
above, e.g. supp (xsi) = ^ps(xsi)and supp (yf(sj;s0
j)) =
^pf(yf(sj;s0
j)). the support of an implication x)yis then
the probability that the implication is true, multiplied by the
probability of observing the condition of the implication:
supp (x)y) =p(yjx)p(x) =p(x^y)
the range of supp is[0;1]and it is symmetric.lift: the lift of an interaction is deÔ¨Åned as the ratio
between the probabilitiy of co-occurrence and the expected
co-occurrence under statistical independence:
lift(x)y) =conf(x)y)
supp (y)=p(yjx)
p(y)=p(x^y)
p(x)p(y)
the range of liftis[0;1]and it is symmetric. a lift measure
of0indicates that they are never observed together, a value of
1indicates that xandyare independent, and a value above 1
indicates that xandyare observed together more often than
can be expected under conditions of statistical independence.
conviction: the conviction of an interaction is similar to
lift, but it is a directed measure. it looks at the expected
probability of observing xwithouty, i.e. the frequency
of the implication being incorrect. it is deÔ¨Åned as the ratio
of the frequency of the implication being incorrect, if they
were statistically independent, and the frequency of actual
observations of the implication not holding:
convic (x)y) =1 supp (y)
1 conf(x)y)=p(x)p(y)
p(x^y)
the range of convic is(0;1]and it is asymmetric. a
conviction measure of 1indicates that xandyare statis-
tically independent, while a measure value of 1occurs for
interactions that always hold in the observed data.
cosine: the cosine measure is deÔ¨Åned as the geometric
mean of lift and support:
cosine (x)y) =supp (x)y)p
supp (x)supp (y)=p(x^y)p
p(x)p(y)
the range of cosine is[0;1]and it is symmetric. it is a null-
invariant measurement, i.e. it is not affected by the number of
observations involving neither xnoryin the dataset, while
e.g. the lift measure does not have this property.
jaccard: the jaccard of an interaction is deÔ¨Åned as the ratio
between the probability of the co-occurrence of xandyand
the probability of observing either:
jaccard (x)y) =supp (x)y)
supp (x) +supp (y) supp (x)y)
=p(x^y)
p(x_y)
the range of jaccard is[0;1], it is symmetric and a null-
invariant measurement. a jaccard measure of 0means that
items fromxandyare never observed together, and a value
of1indicates that if they occur then they are always observed
together.
phi-coefÔ¨Åcient: the-coefÔ¨Åcient of an interaction is de-
Ô¨Åned as the normalised difference between the probability of
co-occurrence and the expected probability of co-occurrence
under statistical independence:(x)y) =p(x^y) p(x)p(y)p
p(x)p(y)(1 p(x))(1 p(y))
the range of is[ 1;1]and it is symmetric. a value of 0
indicates that xandyare statistically independent.
v. a nalysis guidance implementation
in this section we discuss the implementation of the analysis
guidance in the csm miner [9], a plug-in1in the process
mining framework prom.
the csm miner discovers a model of the artifact system
and of each artifact in the input log, annotates them with
sojourn times and frequencies, and presents them in an in-
teractive visualisation. the interaction allows the user to click
on a state or transition and this will highlight all other states
and transitions for which supp (x)y)>0, based on either
^ps,^ptor^pf. the colour of the highlighting is dependent
onconf(x)y).
the analysis guidance for the exploration of artifact interac-
tions is provided below the interactive model visualisation, as
shown in fig. 4. it provides a list of artifact interactions and
for each interaction the measures discussed in section iv are
calculated. the user can sort the interactions by the measure
values and can set minimum values for each measure to Ô¨Ålter
the list.
when clicking on the artifact interactions in the list, the
user is also presented with a textual interpretation based on
four possible templates:
‚Äúconf(si)ssj)of the total time spent in siis spent
while being in sj‚Äù (state co-occurrence)
‚Äútransitions from sitos0
ioccur conf((si;s0
i))tsj)of
the times while being in sj‚Äù (transition co-occurrence)
‚Äútransitions from sitos0
ioccur conf((si;s0
i))t
(sj;s0
j))of the times together with a transition from sj
tos0
j‚Äù (transition co-occurrence)
‚Äúa transition from sjgoes conf(si^sj)f(sj;s0
j))
of the times to s0
jwhile being in si(compared
to^pf((sj;s0
j)jsj)on average)‚Äù (forward-looking co-
occurrence)
vi. e valuation
to be able to create analysis guidance that suggests artifact
interactions of interest to process analysts it is necessary
to establish what qualiÔ¨Åes as interesting or relevant. the
measures introduced in section iv are suggestions to quantify
interest from the Ô¨Åeld of association rule learning, but it is
unclear how these measures relate to the actual judgments
of interest by process analysts. the aim of this evaluation
is to show that the analysis guidance highlights behaviour in
real life processes that is useful for understanding the process.
therefore, we compare the suggestions provided by the tool
with insights obtained by other researchers using traditional
process mining approaches on real life process data.
1contained in the csmminer package of the prom 6 nightly build, available
at http://www.promtools.org/.fig. 4: the analysis guidance is shown below the process models. users can sort and Ô¨Ålter on the different measures of
interestingness, and then click on an artifact interaction to highlight it. the highlighted interaction is also presented as a textual
interpretation.
a. process description
the event data was taken from the bpi challenge 2012 [13].
this dataset concerns process instances of a personal loan and
overdraft application process at a dutch Ô¨Ånancial institute. the
events and activities in the log are related to three interrelated
sub-processes, which can be considered as interacting process
artifacts. the Ô¨Årst artifact concerns the state of the application
(a-states), the second relates to the work-items performed by
the Ô¨Ånancial institute ( w-states), and the third concerns the
state of a potential offer that the institute can make to the
applicant ( o-states). this process has been analysed in several
other papers [14], [15].
the overall process behavior is as follows. the process
starts with the submission of the application. an unlogged
check determines whether the application is pre-accepted or
declined immediately. the application is accepted once all
necessary information has been provided to complete the
application. after the acceptance, the institute sends a concrete
offer for the terms of the loan or overdraft to the applicant.
when the response is returned, the application is validated
and then accepted or declined. at any point in the process
the applicant can decide to cancel their application and exit
the process. in cases where the applicant does not respond
in a timely manner, or if the application does not meet the
criteria of the Ô¨Ånancial institute, then the application can bedeclined by the institute. in exceptional cases the Ô¨Ånancial
institute checks the applications for fraud.
b. results
the data of the above process was mined by the csm
miner and then analysed by looking at the measures of
interestingness. we present a list of the top artifact interactions
for several of the measures from section iv and explain their
relevance for understanding the process behaviour. such lists
can be obtained in the tool by sorting on the desired measure.
table ii shows Ô¨Åve examples of state co-occurrences with
high conf scores. there are several state co-occurrences that
have a conf score of 1, indicating that a given artifact state
always co-occurs with a single state in another artifact. not
all of these are shown here because most are the result
of the offer artifact not changing state from o::notstarted
until after the application has been accepted. in general,
the state co-occurrences with a high conf score indicate
relations between artifact states that match the expected Ô¨Çow
of the process as also described in other work [14]. for
example, if the loan is activated then the offer has been
accepted by the customer ( a::activated)so::accepted ),
and if the application is approved then the application has
been validated ( a::approved)sw::validation.end ). another
example is that the Ô¨Ånancial institute only contacts the cus-table ii: top conf state co-occurrence.
condition consequence conf
a::accepted o::notstarted 1
w::processleads.start o::notstarted 1
a::activated o::accepted 1
a::approved w::validation.end 0.998
w::followupoffers.start o::sent 0.986
table iii: top 5 supp state co-occurrence.
condition consequence supp
a::Ô¨Ånalized o::sent 0.657
a::Ô¨Ånalized w::followupoffers.end 0.577
w::followupoffers.end o::sent 0.504
a::preaccepted o::notstarted 0.191
w::completeapplication.end o::notstarted 0.175
tomer to follow-up on an offer after the offer has been sent
(w::followupoffers.start )so::sent ). state co-occurrences
highlighted with high conf scores can be compared to concur-
rent dependencies between events or activities in traditional
process mining.
by contrast, a high supp measure indicates the co-
occurring artifact states where a lot of time is spent. ta-
ble iii shows the Ô¨Åve pairs of artifact states with the high-
estsupp scores; note that supp is a symmetric measure
so condition and consequence are interchangeable. these
results show that almost two thirds of the average time
spent in a loan application is spent waiting for the cus-
tomer to respond after the application has been Ô¨Ånalised
(a::Ô¨Ånalized)so::sent ). during this period some time is
spent calling the customer, but most of it is spent in between
follow-ups ( a::Ô¨Ånalized)sw::followupoffers.end ). addi-
tionally, this measure shows that around 20% of the average
total time is spent completing the application before an offer is
sent out ( a::preaccepted)so::notstarted ). these imbalances
indicate a potential bottleneck at the customer. this shows that
an initial overview of this measure can point out performance
issues and encourage a process analyst to do a more thorough
process performance and bottleneck analysis. the insights also
match results from other process analyses [14], [15].
a top Ô¨Åve of most interesting artifact interactions according
to the liftmeasure is shown in table iv. liftshows relations
between artifacts that are statistically strong in the sense that
they occur much more often than would be expected by chance
under independence assumptions. these results indicate that
there are different reasons for an application to be declined
(a::declined ): the offer may have been declined ( o::declined ),
the lead may not have matched the required criteria
(a::declined)sw::processleads.start ), or fraud may have
been discovered ( a::declined)sw::frauddetection.start ). it
also highlights the synchronisation between the cancellation of
the application and the offer ( a::cancelled)so::cancelled ),
asliftis a symmetric. although the results are not surprising
given the process description and semantic understanding of
the state names, liftdoes provide understanding of the strongest
connections between artifacts.
similar to lift,convic also provides an overview of strongtable iv: top 5 liftstate co-occurrence.
condition consequence lift
a::declined o::declined 596207
a::cancelled o::cancelled 10498
a::declined w::processleads.start 834
w::validation.start o::declined 819
a::declined w::frauddetection.start 626
table v: top convic state co-occurrence.
condition consequence convic
w::validation.end o :sentback 10.4
a::accepted w::completeapplication.end 10.0
a::preaccepted w::completeapplication.end 7.61
a::activated w::validation.end 7.54
w::callincompletefiles.start o::sentback 6.70
relations between artifacts, but this measure is asymmetric in
condition and consequence. table v shows several relations
with high conviction. we have omitted relations that have
even higher convic scores but that were also highlighted by
the other measures. again, the results show relations that are
consistent with other analyses [14]. for example, given that
the application has been validated we know that the offer must
have been sent back, and given that the application has been
accepted or preaccepted we know that the customer must have
provided information to complete the application.
the top results for state co-occurrence in terms of cosine ,
jaccard andgenerally score high on at least one other
measure. the exact order of the artifact interactions differs
between the measures, but in general the state co-occurrence
relations that are scored as most interesting are those that
have a strong link to the overall behaviour of the application
process.
table vi shows several transitions that always co-occur
with the application state a::Ô¨Ånalized . this means that these
transitions, such as the creation and sending of an of-
fer, are only enabled if the application has been Ô¨Ånalized
((o::created,o::sent ))ta::Ô¨Ånalized ), i.e. if all the required
information has been provided. in general, there are many
trivial transition co-occurrences that have a conf of1, which
means there are clear synchronization points in the interaction
between the artifacts. other examples are related to the start
of the process that only involves the application artifact.
there are many transition co-occurrences with high liftmet-
ric scores due to the clear synchronisation between artifacts.
table vii shows a number of these, with a minimum sup-
port of 0:001 to Ô¨Ålter out patterns that are the result of
very rare transitions. especially the strong links between
table vi: top conf transition co-occurrence.
condition consequence conf
from o::selected, to o::cancelled a::Ô¨Ånalized 1
from o::selected, to o::created a::Ô¨Ånalized 1
from o::created, to o::sent a::Ô¨Ånalized 1
from w::completeapplication.end,a::Ô¨Ånalized 1to w::followupoffers.start
from w::frauddetection.end,a::Ô¨Ånalized 1to w::validation.starttable vii: top lifttransition co-occurrence.
condition consequence lift
from o::sent, to o::declined a::declined 130
from o::sent, to o::accepted a::approved 54.0
from o::sent, to o::accepted w::callincompletefiles.start 18.3
from w::followupoffers.end,o::sentback 6.88to w::validation.start
from o::sentback, to o::cancelled w::callincompletefiles.start 4.90
the outcome of the application and the state of the offer
are very clear again. interestingly, there are transitions from
the sending of the offer directly to its acceptance, without
receiving a reply to the offer ( o::sentback ). the liftmea-
sure shows that these transitions co-occur signiÔ¨Åcantly of-
ten while calling the customer for incomplete information
((o::sent,o::accepted ))tw::callincompletefiles.start ). this
shows that it appears that the institute also allows the offer to
be verbally accepted by customers during contact by phone.
also, a signiÔ¨Åcant number of offers that were sent back
and then cancelled were cancelled during contact by phone
((o::sentback,o::cancelled ))tw::callincompletefiles.start ).
these observations are not immediately clear when looking at
the control Ô¨Çow using traditional approaches [14], [15]
the above discussion shows that the presented approach
is able to highlight artifact interactions that provide insights
into the behaviour of a real life process. the insights obtained
are comparable with those provided by traditional process
mining approaches, but they do not require an analysis of
the control Ô¨Çow of a complex or unstructured process model.
sorting and Ô¨Åltering functionalities ensure that the size of
the list of potentially interesting artifact interactions remains
manageable. however, there are often interactions that score
well on multiple measures and it currently remains up to
the user to identify the overlap between the top scoring
interactions for two or more measures.
vii. c onclusion & f uture work
in this paper we have presented an approach to objectively
quantify the interestingness of interactions between artifacts in
artifact-centric processes. this approach is based on measures
of interestingness that have been deÔ¨Åned in the context of
process models. it highlights useful or surprising artifact
interactions and thereby enables process analysts to deal with
large or complex models. the approach has been implemented
using an interactive process discovery tool, the csm miner,
which has been shown to provide relevant insights on real
life process execution data. most of the insights discussed can
also be obtained with traditional process mining techniques,
but they require data preprocessing to obtain structured models
and careful analysis of the behaviour of those complex models.
we aim to extend this work in several ways. the current
evaluation is limited and provides only an indication of the
usefulness of the approach in practice. we plan to conduct a
user study to relate the objective measures of interestingness to
the subjective interests of process analysts. controlled exper-
iments could also provide indications for cut-off or minimal
values for the measures.extensions of the approach itself are also possible. instead
of only looking at pairs of artifacts, we can generalise artifact
interaction to sets of artifacts, similar to association rule
learning. in contrast to association rule learning, infrequent
relations may also be interesting when analysing a process.
there is also room to improve the transformation of execu-
tion sequences into observations of artifact interaction. for
example, correlations based on time intervals could be used
to handle noise or non-Ô¨Åtting executions in the process data.
references
[1] w. m. p. van der aalst, process mining - data science in action, second
edition . springer, 2016.
[2] m. l. van eck, n. sidorova, and w. m. p. van der aalst, ‚Äúdiscovering
and exploring state-based models for multi-perspective processes,‚Äù in
business process management - 14th international conference, bpm
2016, rio de janeiro, brazil, september 18-22, 2016. proceedings , 2016,
pp. 142‚Äì157.
[3] w. m. p. van der aalst, p. barthelmess, c. a. ellis, and j. wainer,
‚Äúproclets: a framework for lightweight interacting workÔ¨Çow processes,‚Äù
int. j. cooperative inf. syst. , vol. 10, no. 4, pp. 443‚Äì481, 2001.
[4] v . popova, d. fahland, and m. dumas, ‚Äúartifact lifecycle discovery,‚Äù
int. j. cooperative inf. syst. , vol. 24, no. 1, 2015.
[5] x. lu, m. nagelkerke, d. van de wiel, and d. fahland, ‚Äúdiscovering in-
teracting artifacts from erp systems,‚Äù ieee trans. services computing ,
vol. 8, no. 6, pp. 861‚Äì873, 2015.
[6] v . popova and m. dumas, ‚Äúdiscovering unbounded synchronization
conditions in artifact-centric process models,‚Äù in business process
management workshops - bpm 2013 international workshops, beijing,
china, august 26, 2013, revised papers , 2013, pp. 28‚Äì40.
[7] p. tan, v . kumar, and j. srivastava, ‚Äúselecting the right objective
measure for association analysis,‚Äù inf. syst. , vol. 29, no. 4, pp. 293‚Äì
313, 2004.
[8] b. liu, w. hsu, s. chen, and y . ma, ‚Äúanalyzing the subjective
interestingness of association rules,‚Äù ieee intelligent systems , vol. 15,
no. 5, pp. 47‚Äì55, 2000.
[9] m. l. van eck, n. sidorova, and w. m. p. van der aalst, ‚Äúcomposite
state machine miner: discovering and exploring multi-perspective pro-
cesses,‚Äù in proceedings of the bpm demo track 2016 co-located with
the 14th international conference on business process management
(bpm 2016), rio de janeiro, brazil, september 21, 2016. , 2016, pp.
73‚Äì77.
[10] r. p. j. c. bose, h. m. w. e. verbeek, and w. m. p. van der aalst,
‚Äúdiscovering hierarchical process models using prom,‚Äù in is olympics:
information systems in a diverse world - caise forum 2011, london,
uk, june 20-24, 2011, selected extended papers , 2011, pp. 33‚Äì48.
[11] j. d. weerdt, s. k. l. m. vanden broucke, j. vanthienen, and b. bae-
sens, ‚Äúactive trace clustering for improved process discovery,‚Äù ieee
trans. knowl. data eng. , vol. 25, no. 12, pp. 2708‚Äì2720, 2013.
[12] d. l. bazaldua, r. s. baker, and m. o. s. pedro, ‚Äúcomparing expert
and metric-based assessments of association rule interestingness,‚Äù in
proceedings of the 7th international conference on educational data
mining, edm 2014, london, uk, july 4-7, 2014 , 2014, pp. 44‚Äì51.
[13] b. f. van dongen, ‚Äúbpi challenge 2012,‚Äù 2012. [online]. available: http:
//dx.doi.org/10.4121/uuid:3926db30-f712-4394-aebc-75976070e91f
[14] a. d. bautista, l. wangikar, and s. m. k. akbar, ‚Äúprocess mining-
driven optimization of a consumer loan approvals process - the bpic
2012 challenge case study,‚Äù in business process management workshops
- bpm 2012 international workshops, tallinn, estonia, september 3,
2012. revised papers , 2012, pp. 219‚Äì220.
[15] a. adriansyah and j. c. a. m. buijs, ‚Äúmining process performance from
event logs,‚Äù in business process management workshops - bpm 2012
international workshops, tallinn, estonia, september 3, 2012. revised
papers , 2012, pp. 217‚Äì218.