process mining for python ( pm4py ): bridging the
gap between process- and data science
alessandro berti, sebastiaan j. van zelsty, wil m.p. van der aalsty
rwth aachen university
process and data science group, lehrstuhl f ¬®ur informatik 9, 52074 aachen, germany
fa.berti,s.j.v.zelst,wvdaalst g@pads.rwth-aachen.de
yfraunhofer gesellschaft
institute for applied information technology (fit), sankt augustin, germany
fsebastiaan.van.zelst,wil.van.der.aalst g@Ô¨Åt.fraunhofer.de
abstract ‚Äîprocess mining, i.e., a sub-Ô¨Åeld of data science
focusing on the analysis of event data generated during the
execution of (business) processes, has seen a tremendous change
over the past two decades. starting off in the early 2000‚Äôs,
with limited to no tool support, nowadays, several software
tools, i.e., both open-source, e.g., prom and apromore, and
commercial, e.g., disco, celonis, processgold, etc., exist. the
commercial process mining tools provide limited support for
implementing custom algorithms. moreover, both commercial
and open-source process mining tools are often only accessible
through a graphical user interface, which hampers their usage in
large-scale experimental settings. initiatives such as rapidprom
provide process mining support in the scientiÔ¨Åc workÔ¨Çow-based
data science suite rapidminer. however, these offer limited to
no support for algorithmic customization. in the light of the
aforementioned, in this paper, we present a novel process mining
library, i.e. process mining for python (pm4py) that aims to
bridge this gap, providing integration with state-of-the-art data
science libraries, e.g., pandas, numpy, scipy and scikit-learn. we
provide a global overview of the architecture and functionality
of pm4py, accompanied by some representative examples of its
usage.
index terms ‚Äîprocess mining; data science; python.
i. i ntroduction
the Ô¨Åeld of process mining [1] provides tools and tech-
niques to increase the overall knowledge of a (business)
process, by means of analyzing the event data stored during
the execution of the process. process mining received a lot of
attention from both academia and industry, which led to the
development of several commercial and open-source process
mining tools. the majority of these tools supports process
discovery , i.e., discovering a process model that accurately
describes the process under study, as captured within the
analyzed event data. however, process mining also comprises
conformance checking , i.e., checking to what degree a given
process model is accurately describing event data, and process
enhancement , i.e., techniques that enhance process models
by projecting interesting information, e.g. case Ô¨Çow and/or
performance measures, on top of a model. the support of
such types of process mining analysis is typically limited to
open source, academic process mining tools such as the prom
framework [2] and apromore [3].both prom and apromore put a signiÔ¨Åcant emphasis on
non-expert usability, i.e., by means of providing an easy to
use graphical user interface. whereas such an interface helps to
engage non-expert users and, furthermore, helps to showcase
process mining to a larger audience, it hampers the usability
of the tools for the purpose of large-scale scientiÔ¨Åc experi-
mentation [4]. to this end, the rapidprom [5], [6] initiative
allows for repeated execution of large-scale experiments with
process mining algorithms in the rapidminer1suite. however,
rapidprom provides neither easy algorithmic customization
nor an easy way to integrate custom developed algorithms. as
such, the aforementioned tools fail to support customizable
process mining algorithms and large-scale experimentation and
analysis.
to bridge the aforementioned gap, i.e., the lack of process
mining software that i) is easily extendable, ii) allows for
algorithmic customization and iii) allows us to easily conduct
large scale experiments, we propose the process mining for
python (pm4py) framework. to achieve the aforementioned
goals, a fresh look on the currently available programming
languages and libraries indicates that the python programming
language2, along with its ecosystem, is most suitable. in
particular, the data science world, both for classic data science
(pandas, numpy, scipy . . . ) and for cutting-edge machine learn-
ing research (tensorÔ¨Çow, keras . . . ), is heavily using python.
other libraries, albeit with a lower number of features, exist
already for the python language (pmlab [7], opyenxes [8]).
the bupar library [9] supports process mining in the statistical
language r, that is widely used in data science. the main focal
points of the novel pm4py library are:
lowering the barrier for algorithmic development and
customization when performing a process mining analysis
compared to existing academic tools such as prom [2],
rapidprom [5] and apromore [3].
allow for the easy integration of process mining algo-
rithms with algorithms from other data science Ô¨Åelds,
implemented in various state-of-the-art python packages.
1http://rapidminer.com
2http://python.orgarxiv:1905.06169v1  [cs.se]  15 may 20191from pm4py . a l g o . d i s c o v e r y . a l p h a import v e r s i o n s
2from pm4py . o b j e c t s . c o n v e r s i o n . l o g import f a c t o r y as l o g c o n v e r s i o n
3 alpha version classic = ‚Äô c l a s s i c ‚Äô
4 alpha version plus = ‚Äô p l u s ‚Äô
5 versions = falpha version classic : v e r s i o n s . c l a s s i c . apply ,
6 alpha version plus : v e r s i o n s . p l u s . applyg
7def apply ( log , p a r a m e t e r s =none , v a r i a n t =alpha version classic ) :
8 return versions[ v a r i a n t ] ( l o g c o n v e r s i o n . apply ( log , p a r a m e t e r s , l o g c o n v e r s i o n . to event log) , p a r a m e t e r s )
figure 1: example factory method (alpha miner). different variants (the alpha and the alpha+) are made available.
create a collaborative eco-system that easily allows re-
searchers and practitioners to share valuable code and
results with the process mining world.
provide accurate user-support by means of a rich body
of documentation on the process mining techniques made
available in the library.
algorithmic stability by means of rigorous testing.
the remainder of this paper is structured as follows. in
section ii, we present the architecture and an overview of
the features provided by pm4py. in section iii, we present
some representative examples (process discovery, conformance
checking). section iv discusses the maturity of the tool and
section v concludes this paper.
ii. a rchitecture and features
in order to maximize the possibility to understand and re-use
the code, and to be able to execute large-scale experiments,
the following architectural guidelines have been adopted on
the development of pm4py:
a strict separation between objects (event logs, petri
nets, dfgs, . . . ), algorithms (alpha miner [10], inductive
miner [11], alignments [12] . . . ) and visualizations in
different packages. in the pm4py.object package, classes
to import/export and to store the information related to
the objects are provided, along with some utilities to
convert objects (e.g. process trees into petri nets); while in
thepm4py.algo package, algorithms to discover, perform
conformance checking, enhancement and evaluation are
provided. all visualizations of objects are provided in the
pm4py.visualization package.
most functionality in pm4py has been realized through
factory methods . these factory methods provide a single
access point for each algorithm, with a standardized set
of input objects, e.g., event data and a parameters object.
consider the factory method of the alpha miner, depicted
in fig. 1. the alpha (variant=‚Äôclassic‚Äô) and
the alpha+ (variant=‚Äôplus‚Äô) are made available.
factory methods allow for the extension of existing
algorithms whilst ensuring backward-compatibility. the
factory methods typically accept the name of the variant
of the algorithm to use, and some parameters (shared
among variants, or variant-speciÔ¨Åc).in the remainder of this section, we present the main
features of the library, organized in objects, algorithms, and
visualizations.
a. object management
within process mining, the main source of data are event
data, often referred to as an event log . such an event log,
represents a collection of events, describing what activities
have been performed for different instances of the process
under study. pm4py provides support for different types of
event data structures:
event logs , i.e., representing a list of traces . each trace,
in turn, is a list of events. the events are structured as
key-value maps.
event streams representing one list of events (again rep-
resented as key-value maps) that are not (yet) organized
in cases.
conversion utilities are provided to convert event data objects
from one format to the other. furthermore, pm4py supports
the use of pandas data frames , which are efÔ¨Åcient in
case of using larger event data. other objects currently sup-
ported by pm4py include: heuristic nets, accepting petri nets,
process trees and transition systems.
b. algorithms
the pm4py library provides several mainstream process
mining techniques, including:
process discovery : alpha(+) miner [10] and inductive
miner (imdf [11]).
conformance checking : token-based replay and align-
ments [12].
measurement of Ô¨Åtness, precision, generalization and
simplicity of process models.
filtering based on time-frame, case performance, trace
endpoints, trace variants, attributes, and paths.
case management: statistics on variants and cases.
graphs: case duration, events per time, distribution of a
numeric attribute‚Äôs values.
social network analysis [13]: handover of work, working
together, subcontracting and similar activities networks.1from pm4py . o b j e c t s . l o g . i m p o r t e r . xes import f a c t o r y as x e s i m p o r t e r
2from pm4py . a l g o . d i s c o v e r y . a l p h a import f a c t o r y as a l p h a m i n e r
3from pm4py . v i s u a l i z a t i o n . p e t r i n e t import f a c t o r y as p n v i s f a c t o r y
4 l o g = x e s i m p o r t e r . apply ( ‚Äùc:nnr e c e i p t . xes ‚Äù )
5# d i s c o v e r s a p e t r i n e t along w i t h an i n i t i a l ( im )
6# and a f i n a l marking ( fm )
7 net , im , fm = a l p h a m i n e r . apply ( l o g )
8 g v i z = p n v i s f a c t o r y . apply ( net , im , fm )
9 p n v i s f a c t o r y . view ( g v i z )
figure 2: pm4py code to load a log, apply alpha miner and visualize a petri net.
figure 4: social network analysis (handover of work metric)
using pyvis visualization.
c. visualizations
the following python visualization libraries have been used
in the project:
graphviz: representation of directly-follows graphs, petri
nets, transition systems, process trees.
networkx: static representation of social networks.
pyvis: web-based, dynamic representation of social net-
works (see fig. 4).
iii. e xamples
in this section, we provide some examples of the use of
pm4py.
figure 5: pm4py in action: process discovery with the alpha
miner.
a. process discovery
fig. 2 shows example code to perform process discovery
using alpha miner and visualize the process model. the
factory methods that are needed (xes importer, alpha miner
and petri net visualization) are loaded (line 1-3). then, an xes
log is imported (line 4), the alpha miner is applied providing
the log object (line 7), and the visualization is obtained: a
factory method is applied to layout the graph (line 8), and the
result is shown in a window (line 9). the result is shown in
fig. 5.
1from pm4py . a l g o . conformance . a l i g n m e n t s import f a c t o r y as a l i g n m e n t s
2# a l i g n m e n t s a c c e p t s a l o g and an a c c e p t i n g p e t r i net , i . e .
3# a p e t r i n e t along w i t h an i n i t i a l ( im ) and a f i n a l ( fm ) marking
4 a l i g n e d t r a c e s = a l i g n m e n t s . apply ( log , net , im , fm )
5 f o r index , r e s u l t in enumerate ( a l i g n e d t r a c e s ) :
6 p r i n t ( index , r e s u l t [ ‚Äô a l i g n m e n t ‚Äô ] )
[ ( ‚Äô r e g i s t e r r e q u e s t ‚Äô , ‚Äô r e g i s t e r r e q u e s t ‚Äô ) , ( ‚Äô >>‚Äô , none ) , ( ‚Äô check t i c k e t ‚Äô , ‚Äô check t i c k e t ‚Äô ) ,
( ‚Äô examine t h o r o u g h l y ‚Äô , ‚Äô examine t h o r o u g h l y ‚Äô ) , ( ‚Äô >>‚Äô , none ) , ( ‚Äô d e c i d e ‚Äô , ‚Äô d e c i d e ‚Äô ) , ( ‚Äô >>‚Äô , none ) ,
( ‚Äô r e j e c t r e q u e s t ‚Äô , ‚Äô r e j e c t r e q u e s t ‚Äô ) ]
figure 3: pm4py code to perform alignments between a log and a model, and print the alignments. the output of the alignment
of a trace on an example log and model is reported.figure 6: users that accessed the pm4py website in february
2019
figure 7: daily downloads of pm4py from pypi during the
month of february 2019
b. conformance checking
fig. 3 shows example code to apply alignments and display
the result. first, the alignments factory method is loaded (line
1). then, the alignments between a log object and a process
model are obtained (line 4). for each aligned trace (line 5)
the alignment result is displayed on the screen (line 6). the
alignment of a trace is reported in the lower part of fig. 3.
iv. m aturity of the tool
pm4py 1.0 has been released on 21/12/2018 and was used
by200students in the ‚Äúintroduction to data science‚Äù course
held by the process and data science group in the rwth
aachen university. already two academic projects have been
supported by pm4py and are publicly available:
usage of probabilistic automata for compliance checking
(https://github.com/lvzheqi/streamingeventcompliance ).
preÔ¨Åx alignments for streaming event data [14]
(https://gitlab.com/prefal/confo ).
pm4py 1.1 has been released on 22/02/2019 with additional
features. there are some integrations of the pm4py library in
other projects:
bupar r process mining library uses pm4py to handle
alignments and get models using the inductive miner.
a data analytics web interface was written in vue.js
(https://git.bogdan.co/b0gdan/beratungsleistungen ).
in fig. 6, some statistics taken from google analytics are re-
ported about the number of accesses to pm4py web site during
the month of february 2019. in fig. 7, some statistics about
the downloads of the pm4py library from pip are reported.issues are managed through github. the xes certiÔ¨Åcation,
with maximum score, has been awarded to the pm4py library.
v. c onclusion
in this paper, the pm4py process mining library has been
introduced. pm4py supports a rapidly growing set of pro-
cess mining techniques (discovery, conformance checking,
enhancement . . . ). a video presenting the library and some
example applications (log management, process discovery,
conformance checking) has been made available3. the library
can be installed4through the command pip install pm4py .
extensive documentation is provided through the ofÔ¨Åcial web-
site of the library. moreover, the github repository supports
a collaborative eco-system where users could signal problems
or contribute to the code.
references
[1] w. van der aalst, process mining - data science in action, second
edition . springer, 2016.
[2] b. f. van dongen, a. k. a. de medeiros, h. verbeek, a. weijters, and
w. van der aalst, ‚Äúthe prom framework: a new era in process mining
tool support,‚Äù in international conference on application and theory of
petri nets . springer, 2005, pp. 444‚Äì454.
[3] m. la rosa, h. a. reijers, w. van der aalst, r. m. dijkman,
j. mendling, m. dumas, and l. garc ¬¥ƒ±a-ba Àúnuelos, ‚Äúapromore: an
advanced process model repository,‚Äù expert systems with applications ,
vol. 38, no. 6, pp. 7029‚Äì7040, 2011.
[4] a. bolt, m. de leoni, and w. m. van der aalst, ‚ÄúscientiÔ¨Åc workÔ¨Çows
for process mining: building blocks, scenarios, and implementation,‚Äù
international journal on software tools for technology transfer , vol. 18,
no. 6, pp. 607‚Äì628, 2016.
[5] r. mans, w. van der aalst, and h. e. verbeek, ‚Äúsupporting process
mining workÔ¨Çows with rapidprom.‚Äù in bpm (demos) , 2014, p. 56.
[6] w. van der aalst, a. bolt, and s. j. van zelst, ‚Äúrapidprom: mine your
processes and not just your data,‚Äù corr , vol. abs/1703.03740, 2017.
[online]. available: http://arxiv.org/abs/1703.03740
[7] j. carmona vargas and m. sol ¬¥e, ‚Äúpmlab: a scripting environment for
process mining,‚Äù in proceedings of the bpm demo sessions 2014: co-
located with the 12th international conference on business process
management (bpm 2014) eindhoven, the netherlands, september 10,
2014 . ceur-ws. org, 2014, pp. 16‚Äì20.
[8] h. valdivieso, w. l. j. lee, j. munoz-gama, and m. sep ¬¥ulveda,
‚Äúopyenxes: a complete python library for the extensible event stream
standard.‚Äù
[9] g. janssenswillen and b. depaire, ‚Äúbupar: business process analysis in
r,‚Äù 2017.
[10] w. van der aalst, t. weijters, and l. maruster, ‚ÄúworkÔ¨Çow mining:
discovering process models from event logs,‚Äù ieee transactions on
knowledge and data engineering , vol. 16, no. 9, pp. 1128‚Äì1142, 2004.
[11] s. j. leemans, d. fahland, and w. van der aalst, ‚Äúscalable process
discovery with guarantees,‚Äù in international conference on enterprise,
business-process and information systems modeling . springer, 2015,
pp. 85‚Äì101.
[12] a. adriansyah, n. sidorova, and b. f. van dongen, ‚Äúcost-based Ô¨Åtness
in conformance checking,‚Äù in 2011 eleventh international conference
on application of concurrency to system design . ieee, 2011, pp.
57‚Äì66.
[13] w. van der aalst and m. song, ‚Äúmining social networks: uncovering
interaction patterns in business processes,‚Äù in international conference
on business process management . springer, 2004, pp. 244‚Äì260.
[14] s. j. van zelst, a. bolt, m. hassani, b. f. van dongen, and w. van der
aalst, ‚Äúonline conformance checking: relating event streams to process
models using preÔ¨Åx-alignments,‚Äù international journal of data science
and analytics , pp. 1‚Äì16, 2017.
3http://pm4py.pads.rwth-aachen.de/pm4py-demo-video/
4additional prerequisites, available at the page http://pm4py.pads.rwth-
aachen.de/installation/ have to be installed.