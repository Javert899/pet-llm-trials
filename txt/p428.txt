mulyar    a pattern-based analysis of cig mo deling languages       page 1 of 45 pages 
a pattern-based analysis of clinical computer-
interpretable guideline modeling languages 
 
nataliya mulyar1 msc, wil m.p. van der aalst1 phd, mor peleg2 phd 
 
affiliations of the authors: (1) eindhove n university of technology, eindhoven, the 
netherlands; (2) department of management in formation systems, university of haifa, 
israel 
 
correspondence and reprints: nataliya muly ar, msc, eindhoven university of technology 
paviljoen j.08, nl-5600 mb eindhoven, the netherlands. e-mail: n.mulyar@tue.nl
tel: +31  40 2475209; fax: +31 40 2432612 mulyar    a pattern-based analysis of cig mo deling languages       page 2 of 45 pages 
 
abstract 
 
objective : languages used to specify computer interp retable guidelines (cigs) differ in their 
approaches to addressing pa rticular modeling challenges. the main goals of this paper are: 1) 
to examine the expressive power of ci g modeling languages; and 2)  to define the differences, 
from the control-flow perspective, between process languages in workflow management systems 
and modeling languages used to design clinical guidelines.  
design : the pattern-based analysis was app lied to guideline modeling languages asbru, 
eon, glif, and pro forma. we focused on control-flow and left other perspectives out of 
consideration. 
measurements : we evaluated the selected cig m odeling languages a nd identified their 
degree of support of  43 control-fl ow patterns. we used a set of  explicitly defined evaluation 
criteria to determine whether each pattern is supported directly, indirectly or not at all. 
results: proforma offers direct support for 22 of 43 patterns, asbru 20, glif 17, and eon 
11.   all four directly support.  basic control-flow patterns, cancellation patterns, and some 
advance branching and synchroniza tion patterns.  none support mu ltiple instances patterns.  
they offer varying levels of support for s ynchronizing merge patterns and state-based  
patterns.   some support a few scenarios not  covered by the 43 cont rol-flow patterns. 
conclusion : cig modeling languages are remarkably close to traditional workflow 
languages from the control-flow perspective, but cover many fewer workflow patterns. cig 
languages offer some flexibility that supports modeling of complex decisions and provide ways for modeling some decisions not cove red by workflow management systems.  
workflow management systems may be suitab le for clinical guide line applications. 
 
keywords : workflow patterns, evaluation, clin ical guidelines, modeling languages mulyar    a pattern-based analysis of cig mo deling languages       page 3 of 45 pages 
i. introduction 
 
clinical practice guidelines and protocols ar e being applied in diverse areas including 
policy development, utilization management, e ducation, reference, clin ical decision support, 
conduct of clinical trials, and wo rkflow facilitation. the main intent  of clinical guidelines is 
to improve the quality of patient care and reduce costs. creating computer-interpretable 
representations of the clinical knowledge cont ained in clinical guidelines is crucial for 
developing decision-support system s that can provide patient-specific advice at the point of 
care. it has been demonstrated that au tomated guideline-based systems can improve 
adherence to paper-based guidelines [1]. 
although many parties have been engaged in  developing languages for representing 
computer-interpretable guidelines  (cigs) [2,3,4,5,6,7,8,9], there is st ill little sta ndardization 
of languages that fully support representation of the logic of guidelines that unfold over time 
to facilitate sharing or to enable adaptation to  local practice settings [10]. indeed, the three 
standards, arden syntax, gem and gello, whic h have been developed in the domain of 
clinical decision-support  do not satisfy these requirements. the guidelines elements model 
(gem [11], a standard of the american society for testing and materials (astm)) is an 
xml-based knowledge model for guideline documen ts. gem elements relate to a guideline’s 
identity, developer, purpose, intended audien ce, method of development, target population, 
knowledge components, testing, and review plan . although this standard  includes elements 
for marking-up elements of clinical algor ithms, the resulting markup does not support 
computer execution that requires automatic infere nce. the arden syntax [12], a standard of 
astm and of health level seven (hl7) that ha s been substantially used in industry. this 
standard is suitable for repres enting individual deci sion rules in self-contained units called 
medical logic modules (mlms) which are usually implemented as event-driven alerts or 
reminders. it is not designed for encoding complex multi-step guidelines that unfold over mulyar    a pattern-based analysis of cig mo deling languages       page 4 of 45 pages 
time and does not offer mechanisms for complexity management and for managing linked 
mlms [13]. gello (guideline expression lan guage, object-oriented, see [14], which has 
been recently accepted as an hl7 and ansi st andard, is an object-oriented expression 
language that is vendor-independe nt, side-effect-free, and extensible expr ession language that 
could be used for specifying and sharing decision logic and eligibility criteria, calculations, 
patient state definitions, conditions, and system actions. as its goal is to be an expression language, it does not support sp ecification of entire clinic al algorithms, but focuses on 
specifying logical expressions. gello is the first component of a cig language that hl7 
started to standardize in orde r to support a full cig formalism. the other components that 
hl7 sought to standardize include, among others, a control-fl ow language [15]. 
as there is no standard cig formalism, our paper concentrates on non-standard cig 
formalisms of the type termed “task- network models (tnms)” [15,14]. tnm cig 
formalisms have in common a process-flow-lik e model that decomposes guidelines into a 
network of tasks that unfold over time, but they differ from each other in their approaches to 
addressing particular modeling challenges. in [15,14], authors compared six guideline 
modeling languages: asbru, eon, glif, guide, prodigy, and pro forma according to 
eight components that capture the structure of  cig languages (see related work section). in 
this paper, we examine the modeling languages us ing control-flow patter ns. the control-flow 
patterns have been tested by evaluating a multitude of workflow systems and standards. the feedback from industry has resulted in the revision and extension of the control-flow patterns, 
which nowadays serve as an accepted benchmark [17]. 
the evaluation of cig modeling 
languages is a big challenge because the terminology used in these languages is inconsistent, the 
semantics of the control-flow of some of the languages is incompletely and informally defined, 
and the approaches employed by the languages for guideline modeling are heterogeneous.  cigs 
represent clinical algorithms that unfold over time by specifyi ng the ordering of tasks and mulyar    a pattern-based analysis of cig mo deling languages       page 5 of 45 pages 
activities. the ordering of tasks in a process model is also refe rred to in the literature as 
control-flow , which is the perspective we focused on during the analysis. we compared the 
control-flow component of cig languages by ev aluating their degree of support of control-
flow patterns [16,17] that ar e known as "workflow patterns" . although workflow patterns 
come from the business process modeling comm unity, they are suitable for comparing cig 
languages; while a cig la nguage is a computer-int erpretable tnm of a clinical  care process 
that realizes a clinical/medical  goal, a workflow model is a co mputer-interpretable tnm of a 
business process that realizes a business  objective. from the control- flow perspective, both of 
these types of models (languages) are tnms and are comparable from the control-flow 
perspective. 
initially we intended to analyze the current ve rsions of the same se t of tnm languages as 
considered in [15]: asbru, eon, glif, newguide, prodigy and pro forma. however, we 
excluded from our analysis newguide because it is still under development and prodigy 
because it is no longer actively supported. 
ii. background 
 
this section describes the main concepts  of the cig modeling languages asbru, eon, 
glif, and pro forma and presents work related to workflow patterns. 
a. computer-interpretable guidelines 
table 1 illustrates terms used in the cig modeling languages which correspond to the main 
workflow concepts that will be used throughout  this paper. these terms include process 
model, case, task, parallel branching and ex clusive branching and are defined in [18]. a 
process model  consists of a number of tasks that have to be carried out and a set of conditions 
that determine the order of tasks. a task is a logical unit of work that is carried out as a 
whole. tasks can be executed based on sequential, parallel or  conditional routing. parallel mulyar    a pattern-based analysis of cig mo deling languages       page 6 of 45 pages 
branching  specifies that two or more tasks ar e executed independently of each other. 
exclusive branching  splits a process in several branches , only one of which can be selected 
based on the fulfillment of a condition associated  with a given branch [19]. process models 
are executed for specific cases (e.g., a patient with high blood pressure being managed by a 
hypertension cig). each case involves a proc ess being performed, with its current active 
tasks. in appendix 1 we describe in a more  detail the main concepts of cig modeling 
languages by modeling a patient diagnosis  scenario in asbru/asbruview , pro forma/tallis, 
eon/ protege-2000 and glif/protege-2000 respectively. 
b. workflow patterns 
the recent workflow patterns initiative [17] has taken an empirical approach to 
identifying the most common control constructs  inherent to modeling languages adopted by 
workflow systems. in particular, a broad survey of modeling languages resulted in 20 
workflow patterns being identified [20]. the co llection of patterns was originally limited to 
the control-flow perspective, thus the data, or ganizational and applica tion perspectives were 
missing. in addition, the set of control-flow patterns was not complete since the patterns were gathered non-systematically: they  have been obtained as a result of an empirical analysis of 
the modeling facilities offered by selected workfl ow systems. the first shortcoming has been 
addressed by means of the systematic analysis of data and resource pe rspectives and resulted 
in the extension of the collec tion of the control-flow pattern s by 40 data patterns and 43 
resource patterns [21,22]. the issue of the in completeness of the control-flow patterns has 
been resolved by means of the systematic anal ysis of the classical control-flow patterns 
against workflow pattern specification language [23]. furthermore, the originally-identified 
set of the 20 control-flow patterns has been revised and extended with 23 new patterns. a 
comprehensive description of the full set of  43 control-flow patterns is found in [16]. mulyar    a pattern-based analysis of cig mo deling languages       page 7 of 45 pages 
the 43 patterns can be divided into seve ral groups: basic control-flow patterns, 
advanced branching and synchronization patter ns, structural patterns, multiple instances 
patterns, state-based patterns, cancellation patte rns, and the 23 new patterns that will be 
classified outside the scope of this research. due to the lack of space, in this paper we provide 
only the description of pattern s that have received differe nt ratings by the examined 
languages, and are therefore, the most interesti ng. these definitions are given in the results 
section, so that the discussion of the different ways in which the cig languages support these 
patterns could be easily followed.  
workflow patterns have become a standard  for assessing strengths and weaknesses of 
process specifications. many workflow system s and standards such as xpdl, uml, bpel, 
xlang, wsfl, bpml, and wsci were evaluated from the pers pective of the control-flow 
patterns, a summary of which is available at [17]. the patterns have inspired the 
improvement and development of 10 languages a nd tools [17]. furthermore, the workflow 
patterns were used for selecti ng a workflow management system  (wfms) (i.e., a system in 
which workflows are defined, created and execute d) and have been used in teaching [17]. 
iii. research questions 
 
the main research questions addressed by this  study are: "what is th e degree of support of 
the control-flow patterns in special-purpose la nguages for modeling clin ical guidelines?" and 
"what are the differences, from the control-fl ow perspective, betw een process languages 
offered by workflow management systems and modeling languages used  to design clinical 
guidelines?".  
iv. methods 
 
in this section we describe the types of analyses  that we carried out and the criteria used for 
evaluating the pattern support offered by the examined cig modeling languages. mulyar    a pattern-based analysis of cig mo deling languages       page 8 of 45 pages 
a. analysis 
 
we evaluated the set of cig languages agai nst the revised set of 43 control-flow 
patterns, described in detail in [16]. 
to compare the examined languages, we used  quantitative and quali tative measures. we 
calculated the number of  patterns supported by the examined languages directly, indirectly, 
and not supported at all. furthermore, we anal yzed in greater detail the differences between 
the languages based on the support of patterns that have received different ratings. in 
particular, we underlined the strengths of cig languages that were unique in their support of 
particular patterns, the significan ce of this support to clinical gui delines, the different ways in 
which the considered language s support the workflow pattern s, and how they differ from 
process modeling languages used  in the business domain. 
b. evaluation criteria 
 
for each language, we checked whether it is possi ble to realize the control-flow pattern with 
the facilities offered by the language. as a mean s for evaluation, we used evaluation criteria 
explicitly defined in [16]. these evaluation cr iteria specify a set of  context conditions an 
analyzed language has to fulfill in order to support a pattern. the pa ttern support has been 
rated as full, partial , or no support . a pattern is fully supported (+) if the examined language 
fully satisfies the evaluation criteria for the pattern and provides direct support for each of 
them via constructs found in the language. a pattern is supported pa rtially (+/-) if the 
examined language provides indirect support for all of the criteria either via extended workarounds or programmatic extensions. a patt ern is not supported (-) if the examined 
language does not satisfy any of the criteria for direct or indirect support. to make sure that 
our understanding of the cig languages abilities was correct, th e developers of the four 
languages that we compared reviewed  our paper before its submission. mulyar    a pattern-based analysis of cig mo deling languages       page 9 of 45 pages 
v. results 
a. comparing cig languages support of categories 
of workflow patterns 
table 2 summarizes the support of the full set of 43 patterns by the languages. the brief 
description of pattern categories used for the evaluation is given in table 3. we explicitly 
elaborate on patterns that received different ratings by the examined languages (i.e., patterns 
which are supported only by a sub-set of the examined languages), which underline the 
weaknesses and strength s of these languages essential for understanding of the paper in 
appendix 2 . we provide the full set of results in an online source [ 24]. 
after analyzing how the four cig languages support the specific workflow patterns, 
as summarized in table 2, we tr ied to arrive at more general conclusions about the languages' 
support of categories of workflow patterns. as  the results of the analysis have shown, 
proforma offers direct support for the largest number of patterns  (22 out of 43) among the 
examined offerings. asbru and glif offer s upport for 20 and 17 patterns respectively. even 
fewer patterns are supported by e on (it supports only 11 patterns).  
more detailed analysis of the pattern s upport reveals that all examined offerings 
directly support basic control- flow patterns. at least half of the advanced branching and 
synchronization patterns, which are relative ly common to business processes used in 
practice, are supported by all offerings. note th at the structured sync hronizing merge pattern 
is not supported by all examined offerings. while pro forma supports this pattern directly, 
asbru adds a time restriction to the process of synchronization to a pproximate the desired 
behavior. the semantics of the synchronizati on blocks in eon and glif are not precise 
enough, i.e. they do not specify what happens to the active tasks af ter the synchronization 
task has been executed. this is also the r eason why some of the new patterns addressing 
variants of the synchronization me rge are not supported by eon and glif. mulyar    a pattern-based analysis of cig mo deling languages       page 10 of 45 pages 
none of the examined modeling languages have the concept of a multiple instance 
activity and, therefore, pattern s from the multiple instances pattern group and new patterns 
related to the multiple instances act ivity are not supported directly.  
not all examined languages have full support for the state-based patterns. although 
eon and glif have the notion of the patient stat e, they lack the notion of the process state. 
the only language that employed these concepts is pro forma . all analyzed languages 
support the cancellation pa tterns relatively well. 
b. unique features of the cig languages 
while evaluating the modeling languages and studying their documentation, we identified 
several scenarios not co vered by the set of the control-flow  patterns that we had used as a 
reference framework. in particular, a deferre d multi-choice is a capability to defer the 
selection of multiple options by a user until th e user decides that no more options will be 
selected (for instance, selecting several medicines from the recommended ones for the 
treatment of the patient). the functionality of  the deferred multi-choice has been encountered 
in glif3.5/ protege-2000, eon/ protege-2000 and pro forma/ tallis. another scenario is 
related to "forced trigger", wher e any internal or external ev ent triggers the execution of a 
task even if the task precondition was not satisfied at the moment of triggering. the 
functionality of the forced trig ger has been encountered in proforma/ tallis. 
in addition, guideline modeling languages allow for some flexibility by offering 
expression languages that support modeling of co mplex decisions. they also provide ways 
for modeling decisions as argumentation rule s (rule-in and rule-o ut) which are unique 
features that affect control-flow specification  and are not offered by workflow management 
systems. 
another aspect of flexibility, offered in eon and glif, is the ability to specify multiple 
entry and exit points to a gui deline. such a feature might be useful when, due to mulyar    a pattern-based analysis of cig mo deling languages       page 11 of 45 pages 
unpredictable changes in a patient's state, a patient has to  "jump" from one state of the 
guideline , at which he was situated at the previous encounter, to another state that reflects his 
current situation (e.g., his condition deteriorated despite the use of the guideline, or due to a 
different guideline that was applied to him, medications were added, etc).  however, such 
support of multiple entry point s is not unique to eon and glif and has alternatives; similar 
behavior can be achieved by means of the state triggers in pro forma. 
vi.  discussion 
members of the computerized guidelines community have emphasi zed how important it 
is to support flexibility in guideline form alisms [15,4,25]. however, when we examined 
guideline modeling languages, we found only lim ited additional flexib ility not present in 
business process modeling languages. the cig languages we studied support only two new 
patterns not encountered in bus iness process models. this is remarkable since one would 
have expected dedicated cons traints allowing for more flex ibility given the more dynamic 
nature of care processes. 
moreover, only half of the workflow patterns elicited from business process modeling 
languages are supported by cig languages. an interesting question is wh ether the patterns 
that are not supported by cig la nguages could be useful in the domain of clinical guidelines 
automation. many of these patterns relate to fl exibility of process ex ecution. in the business 
processes domain, multiple threads of execution that relate to the same activity are often 
supported (e.g., an insurance claim with a variable  number of witness statements or an order 
containing multiple order lines).  similar situations may arise when  a clinical trial is executed 
for groups of patients, for example. to identify whether there is a need for cig modeling constructs supporting multiple instances, more re search has to be done addressing the nature 
of the clinical guide lines requirements. mulyar    a pattern-based analysis of cig mo deling languages       page 12 of 45 pages 
since cig languages do not offer substantia lly more control-flow constructs than 
business process modeling languages, the medical  community might reth ink the use of more 
general formalisms and tools, which have form al foundation and have been widely tested and 
used in industry, for expressing control flow of guideline models. for instance, the case-
handling system flower [26] offers a high de gree of flexibility during the execution of a 
case (i.e., a process instance). flower is based on an "information-driven" approach and 
takes the process as its focal point, whereas traditional workflow ma nagement systems are 
based on the routing of activities from work tr ay to work tray, leading to inflexibility. 
although flower suggests which steps have to be performed according to the modeled 
process description, a user  is able to execute any task from the given list, even to re-execute 
some of them. this may be very useful for clinicians who are using guideline and disagree with 
the advice provided by the cig because they think that their patient's case was not considered by 
the developers of the cig or that new evidence suggests other treatment option. we note that 
some of the cig execution engines (e.g., glif's execution engine glee) support execution of 
any task that is defined in the cig, at any point in time, if the user wishes to do so. yet, this 
execution semantics is not part of the semantics defined for the glif language.  
in addition to the set of constructs discusse d in this paper, the medical community may 
also consider using configurable modeling co nstructs, found in business process formalisms 
[27]. a cig developed by one organization can be locally ad justed by another organization 
by using configurable modeling constructs. such  configurable constructs enable specifying 
ahead of time what part of a model can be configured and how. for instance, a choice 
between various kinds of tests performed by a laboratory can be configured to a choice 
between a blood analysis and urin e analysis that are performed by an assistant of a family 
doctor. this is very important, as some ch anges that are made locally could violate the 
purpose of the guideline and it is therefore im portant to define wh at changes should be 
permitted. mulyar    a pattern-based analysis of cig mo deling languages       page 13 of 45 pages 
another area that has been developing in  the business process community and could 
benefit the cig community (esp ecially if it would adopt a workflow-based semantics of 
process models) is the area of  process mining [28]. mining lo gs of executed events (e.g., 
medication ordering, patient referrals) can be used to discover the actual  workflow of patient 
care and how it deviates from a cigs process model. 
the results of the evaluation presented in th is paper could be used to clarify language 
specifications. moreover, the evaluation results can be used as a means for comparing the 
capabilities of the languages to express the control-flow patterns and for selecting an 
appropriate modeling language. for instance, me dical organizations, who plan to automate 
their processes and improve the quality of care by employing cigs may match the list of their 
requirements against the results of the patt ern-based evaluation. for example, if an 
organization requires exclusive execution of activities in non-predefined order, then asbru might be chosen, since no other language from the evaluated ones offers these feature (see 
pattern 17). if a requirement is to incorporate transient triggers (pattern 23) then the best 
choice would be pro forma; persistent triggers (pattern 24) are also supported by glif. 
proforma is also a good choice if su ch requirements as synchronization of variable number 
of paths (pattern 37) or support of mi lestones (pattern 18) are important. 
the milestone pattern 
is important for modeling medical guidelines. for example, in a cancer protocol, two treatment 
strategies could be used: a surgery or medication. a su rgery may be performed only if 
medication cannot be prescribed or it does not help. checking th e state of medication affect 
before enabling the surgery could be done by me ans of the milestone pattern. glif or eon 
could be a language of choice if flexibility in the structure of a guide line is required (they 
support arbitrary cycles pattern). 
the analysis we performed and reported in this paper has several limitations. it 
concentrates only on the control-flow aspect of the guideline formalisms and does not take mulyar    a pattern-based analysis of cig mo deling languages       page 14 of 45 pages 
into consideration other aspects such as data and resources. furthermore, the evaluation has 
been performed on the limited set of the languages. in particular , a couple of formalisms that 
are recognized as standards, e.g. arden syntax  and gem, were not in cluded in the study. 
note that arden syntax has been excluded since it  is used to model individual decisions (not 
guidelines that unfold over time). gem is  focused on the guideline document model – 
structuring the evidence statements and the decision variable. gem permits to markup text as 
imperative recommendations or as parts of d ecisions tables; at the same time it misses the 
logic of a guideline that unfolds over time. 
vi. conclusions 
from a flow-control pe rspective, the asbru, eon, glif3.5 and pro forma  cig languages 
are very similar to the proce ss languages of workflow manage ment systems, although they do 
not make use of many of the workflow patterns in such systems.   the additional workflow 
patterns supported by process langu ages of workflow management systems may be useful for 
clinical guideline applications .  a suitable cig can be selected for a specific modeling and 
execution task on the basis of pattern-based requirements.  . 
vii. acknowledgments  
we would like to thank samson tu, silvia miks ch, andreas seyfang and paolo ciccarese for 
their contribution in the tool evaluations. we also thank to richard thomson, nick j. wells 
and john fox for providing an access to the talli s tool-set and for the cross-check of the 
evaluation results. furthermore, we thank to nick russell for the input he provided to the 
revision of the control-flow patterns. mulyar    a pattern-based analysis of cig mo deling languages       page 15 of 45 pages 
appendix 1. main concept s of cig modeling languages 
we introduce the m ain concepts of cig m odeling languages by m odeling the following 
patient diagnosis scenario in the corresponding tools. 
a patient is registered at a hos pital, after which he consults a doctor. the doctor directs the 
patient to take a blood test and a urine test. w hen the results of both tests becom e available, 
the doctor determ ines the diagnosis and defines the treatm ent strategy. 
figure 1 presents the scenario m odeled in  asbruview [29]. asbruview is one am ong 
several tools (delt/a [30,31], uruz [32,33], and carevis [34,35] ) that were developed to 
support authoring of guidelines in  asbru [31]. a process m odel in asbru [ 35] is represented 
by m eans of a tim e-orien ted skelet al plan. the root plan (m arked as plan a) is com posed of a 
set of other plans. the p lans are rep resented as three-dim ensional obj ects, where the width 
repres ents th e tim e axis, the depth rep resents  plans on the sam e level of the decom position 
(i.e., that are perform ed in parallel), and the he ight represents the decom position of plans into 
sub-plans. p arent plans are considered to be  completed when all m andatory sub-plans are 
completed. enabling, co mpletion, resum ption and abortion conditions can be specified for 
each plan, if necessary. as the tim e axis shows, plans register patient , consult with doctor , 
test phase , and define the trea tment are executed sequentially. the test phase plan is a 
parallel plan consisting of two activities: ask for u rine test and ask for blood test . in this 
model, we used only two types of plans: sequent ial (root plan) and parallel plan (test phase 
plan). asbruview perm its to visualize also a ny-order plan, u nordered plan, cyclical plan, 
and if-then-else plan, and two types of actions: ask and variable assignm ent. 
an eon model of  the pa tient-diagno sis scen ario crea ted in th e protege-2000 
environm ent is illustrated in figure 2. protege-2000 is an ontology-editor and knowledge-
base fram ework (cf. http://pro tege.stanford.edu ). the m ain modeling entities in eon [36] are 
scenarios, action steps, branching, decisions, and synchronization [37,3]. a scenario is used mulyar    a pattern-based analysis of cig mo deling languages       page 16 of 45 pages 
to characterize the state of a patient. there are two types of decision steps in eon, i.e. a 
case step and a choice step, which allow ex actly one path or more to be selected 
respectively. an action step is used to specify a set of action specifications or a sub-guideline 
that are to be carried out. branch and synchronization steps are used to specify parallel 
execution. 
glif3.5 [4] is a specification method for structured representation of guidelines. to 
create a model in glif, an ontology schema and a graph widget have to be loaded into the 
protege-2000 environment. figure 3 visualizes the glif model of the patient-diagnosis 
scenario. in glif3.5, five main modeling enti ties are used for process modeling, i.e. an 
action step, a branch step, a decision step, a patient-state step, and a synchronization 
step. an action step is a block used to spec ify a set of tasks to be performed, without 
constraints set on the execution order. it allows sub-guidelines to be incl uded into the model. 
decision steps, combining a case step and a choice step from glif 3.4, are used for 
conditional and unconditional (user-se lected) routing of the flow to  one out of multiple steps. 
branch and synchronization steps are us ed for modeling concurrent steps and 
synchronization of the parallel br anches respectively. a patient-sta te step is a guideline step 
used for describing a patient state and for specifying an entry poi nt(s) to a guideline. 
proforma [39] is a formal knowledge repr esentation language for authoring, 
publishing and executing clinical guidelines . it deliberately supports a minimal set of 
modeling constructs: actions, com pound plans, decisions, and enqui ries that can be used as 
tasks in a task network. in addition, a keystone ma y be used to denote a generic task in a task 
network. all tasks share attri butes describing goals, control flow, pre-conditions, and post-
conditions. a model of the patient-diagnosis scen ario, created in tallis, is shown in figure 4. 
note that in pro forma, control-flow behavior is captu red by modeling constructs in 
combination with scheduling constraints. sche duling constraints are vi sualized as arrows mulyar    a pattern-based analysis of cig mo deling languages       page 17 of 45 pages 
connecting two tasks, meaning that the task at the tail of the arrow may become enabled only 
after the task at the head of the arrow has completed. 
the current evaluation can be considered as complementary to several comparisons 
[15,40, 36,9].wang et al. [9] have reviewed and compared formal methods for cig 
specification focusing mainly on guideline representation primitives, process models and 
their relationship with a patient’s clinical  status. tu and musen [36] focused on the 
computational methods of the formalisms. de cl ercq et al. took a life-cycle approach to 
compare five formalisms for representing guidelines and medical decision rules: asbru, eon, glif, pro forma, and the arden syntax, examin ing guideline representation, 
acquisition, verification and execu tion aspects [40]. peleg et al. [15] analyzed cigs by 
examining them against identified by them eight dimensions capturing the conceptual 
components of cigs: organization of guideline  plans, goals, model of guideline actions, 
decision model, expression language, data interp retation/abstractions, medical concept model, 
and patient information model. 
 
appendix 2. cig languages support of workflow 
patterns 
the results reported in this appendix refer to the numbering used in table 2. we explicitly 
elaborate on patterns that received different ratings by the examined languages (i.e., patterns 
which are supported only by a sub-set of the examined languages), which underline the 
weaknesses and strengths of these languages essential for understanding of the paper . we 
provide the full set of results in an online source [ 24]. 
basic control-flow patterns mulyar    a pattern-based analysis of cig mo deling languages       page 18 of 45 pages 
the basic control-flow patterns define elementary aspects of process control: sequence , 
parallel split , synchronization, exclusive choice , and simple merge . all basic patterns are 
directly supported by the examined languages. we  will illustrate the support of these patterns 
along with the description of  more complex patterns. 
advanced control-flow patterns 
while the basic control-flow patterns select all pa rallel paths or just on e-of a set of mutually 
exclusive paths, the advanced patterns allow specifying in-between behaviors, where some of 
the paths in a set of paths can be selected fo r execution and different modes of continuation 
are possible thereafter. as shown in table 2, two advanced branching and synchronization 
patterns,  multiple choice  and structured discriminator  were supported by all of the 
languages while multiple merge was not supported by any language. the structured 
synchronizing merge pattern, which received different ratings for support by the examined 
languages, combines the functi onality of the synchronizati on and simple merge patterns 
used for synchronization of parallel and exclusive paths.  
pattern 7. structured synchronizing merge 
description  the convergence of two or more branches (which diverged earlier in the process 
at a uniquely identifiable point ) into a single subsequent bran ch. the thread of control is 
passed to the subsequent branch when each active incoming branch has been enabled. 
proforma supports this pattern via task precondition and antecedent tasks property 
specifying tasks that must be completed or discar ded before this one starts. in fact, an action 
block used for synchronizing multiple branch es would only be executed after all incoming 
tasks were either completed or discarded.  
asbru supports this pattern indi rectly. if the branches for merging were modeled as an 
if-then-else statement, the merge occurs before th e next step after if-then-else is performed. if 
the branches were implemented as sub-plans of a certain plan (using plan-ordering parallel or mulyar    a pattern-based analysis of cig mo deling languages       page 19 of 45 pages 
unordered), the merge occurs when the con tinuation condition (specified in element wait-for ) 
is fulfilled. the timing of the merge can be in fluenced via time-annotations for each plan-
activation of sub-plans, both to delay it and en force a time limit. in other words, the duration 
of waiting for completion of incoming tasks by th e merge has to be specified. only the inputs 
which arrived before the timeout occurred will be merged. 
eon does not support this pattern. the only pos sibility for synchronization in eon is 
to use the synchronization step is in the mode wait-for-all or proceed-after-one , thus giving 
no option for synchronizing of a variable numbe r of branches. glif also does not support 
this pattern since it does not keep track of activated branches.  
structural patterns 
structural patterns such as arbitrary cycles and implicit termination identify whether the 
modeling formalism has any restri ctions regarding the structure of the processes. we discuss 
the arbitrary cycles  pattern below. implicit termination is supported by all of the languages. 
pattern 10. arbitrary cycles 
description  the ability to represent cy cles in a process model that have more than one entry 
or exit point. 
only glif and eon support this pattern. in  glif it is possible to specify multiple 
entry or end-points to a loop (see figure 5). in addition, it is possible to  specify iterations of 
action and decision steps using an iteration expression that sp ecifies the iteration frequency, 
along with stopping and abort condi tions that terminate the loop.  similar structures can be 
realized in eon. asbru supports  only structured loops (i.e., without multiple entry and exit 
points) by means of a cyclical plan (see figure 6). pro forma prohibits modeling arbitrary 
cycles to prevent a model from deadlocki ng. note, however, that all analyzed languages 
allow for modeling of the structured loops (also known as while-do and repeat-until 
constructs of pattern 21). mulyar    a pattern-based analysis of cig mo deling languages       page 20 of 45 pages 
multiple instances patterns 
the multiple instances (mi) patterns refer to situ ations where several instances of a task can 
be active concurrently in the same case. none of the examined languages offers a direct 
support for these patterns; therefore we omit the discussion of patterns related to them. 
state-based patterns 
the state-based patterns charac terize scenarios in a process where subsequent execution is 
determined by the state of the process in stance. there are three such patterns: deferred 
choice, interleaved parallel routing  and milestone. we discuss the interleaved parallel 
routing pattern in the context of the critical section  pattern (#39), which is a more complex 
pattern variant of it . the two other state-based pa tterns are described below. 
pattern 16. deferred choice 
description  a point in a workflow process where one of several branches is chosen based on 
interaction with the operating environment. prior to the decision, all branches present 
possible future courses of execution. after th e decision is made, execution alternatives in 
branches other than the on e selected are withdrawn.  
from the analyzed specifications, asbru, glif, and pro forma support this pattern. 
asbru implements this pattern via the any-or der plan in conjunction with the continuation 
specification wait-for-one and the flag confirmation required in the filter-condition of the 
sub-plans. in this case, all sub-plans are presented to the user who selects one sub-plan. as 
soon as this sub-plan is activat ed (in response to the user’s selection) the other sub-plans 
cannot be activated any more (because of the mechanism of any-order plan). as soon as the selected sub-plan is completed, the parent pl an completes, because it was only waiting for 
one sub-plan to complete. thus, the not se lected plans cannot be selected later.  
glif supports this pattern by a decision step with no conditions specified on the 
outgoing arcs. when multiple options are presente d to a user, recommendations for selecting mulyar    a pattern-based analysis of cig mo deling languages       page 21 of 45 pages 
or declining the presented op tions are given to the user. the recommendations for the 
decision may involve rule-in, ru le-out, strict-rule-in and strict-rule-out properties. these 
properties contain a set of cond itions which has to be satisfied in order to suggest which 
candidate to select and which to decline. 
proforma supports this pattern by a decision plan in which choice is made by an 
end-user between different candidates. the select ion of a candidate is driven by an argument 
in the form of the truth-valued expression and support offered to the candidate if the 
condition is true. next to th is, decision has recommendation rules which determine whether a 
certain candidate is recommended or not. to make sure that only one candidate from multiple 
available ones will be selected, a selection mode has to be set to single. an end-user may 
select either a recommended or a non-recommended candidate. the result of the decision 
block used in preconditions of the tasks following this decision realizes the behavior of the 
deferred choice . 
note that although in eon a choice step and the associated action choice present 
several choices to a user and the decision as to  which option is selected is deferred until the 
user makes his choice, multiple options can be selected, thus the option to execute other 
branches is not imme diately withdrawn.   
pattern 18. milestone 
description  an activity is only enabled when the pro cess instance (or which it is part) is in a 
specific state. the state is assumed to be a specific execution point (also known as a 
milestone ) in the process model. when this execu tion point is reached, the nominated activity 
can be enabled. if the process instance has pr ogressed beyond this stat e, then the activity 
cannot be enabled now or at any future time (i.e. the deadline has expired). 
proforma supports this pattern by means of a stat e trigger that allows checking states 
of activities and values of truth-valued expres sions. asbru does not support this pattern. eon mulyar    a pattern-based analysis of cig mo deling languages       page 22 of 45 pages 
also does not support this patter n, however it allows to repres ent a state of a patient via 
scenario , the eligibility conditions of which specify  the necessary conditions for a patient to 
be in this scenario. glif does not support this pattern directl y, however it allows an action 
step to be triggered by an ev ent of the following types: end- of-previous step, patient-data-
availability, patient-arrival, or temporal. similar to eon, glif allows for the modeling of a 
patient state step which denotes the state of the patient. patient state step is used to denote 
multiple entry points to a guideline model.  
cancellation patterns 
there are two so-called cancellation patterns: cancel activity  and cancel case. cancel 
activity pattern is supported by all examined offerings. asbru supports canceling of an 
arbitrary set of tasks whereas other languages support either cancel ing of a single task or of a 
group of tasks related to each other. 
pattern 20. cancel case 
description  a complete process instance is remo ved. this includes currently executing 
activities, those which may execute at some future time and all sub-processes. 
asbru supports this pattern via an ab ort-condition of a root plan. pro forma supports 
this pattern via an abort condi tion associated with a plan containing all activities. glif 
indirectly supports this pattern. it requires the whole guideline to be  placed inside of the 
action step , the fulfillment of the abort condition of which would lead to the cancellation of 
the included guideline. eon does not support this pattern. 
new patterns 
the 23 new control-flow patterns consist of a se t of completely new patterns and a number of 
variants of the revised patterns described earl ier. among them are patt erns which address the 
concepts such as triggers, path and thread  branching and synchronization, and cancellation. 
only 11 patterns from this category are suppor ted by some of the analyzed languages. we mulyar    a pattern-based analysis of cig mo deling languages       page 23 of 45 pages 
omit the discussion of patterns cancel multiple instance activity (#26) and complete 
multiple instance activity (#27) because they relate to the concept of multiple-instances task 
which is not present in of the examined languages. these patterns are supported by some of 
the languages because they offer support for task cancellation and task completion. we discuss the support of the interleaved routing pattern (#40) by means of its complex pattern 
variant critical section  (#39). the other 8 patterns are described below. 
pattern 22. recursion 
description  the ability of an activity to invoke itse lf during its execution or an ancestor in 
terms of the overall decomposition hier archy with which it is associated. 
eon, glif and pro forma do not support this pattern. as bru supports it by a static-
plan pointer invoking itself in an invoking-plan element. 
pattern 23. transient trigger 
description  the ability for an activity to be trigge red by a signal from another part of the 
process or from the external environment. these tr iggers are transient in nature and are lost if 
not acted on immediately by the receiving activity. 
from all examined specifications, only pro forma supports this pattern via an event 
trigger, which brings a task to  execution even if scheduling cons traints are not met. since the 
context conditions of this pattern assume that the transient triggers are lost if not acted on 
immediately, and pro forma event triggers always force the execution of tasks and never get 
lost, therefore pro forma supports this pattern partially. 
pattern 24. persistent trigger 
description  the ability for an activity to be trigge red by a signal from another part of the 
process or from the external environment. th ese triggers are persistent in form and are 
retained by the workflow until they ca n be acted on by the receiving activity. mulyar    a pattern-based analysis of cig mo deling languages       page 24 of 45 pages 
glif supports this pattern via action st eps and decision steps with an attribute 
triggering events  (see figure 7), which specifies the even ts that trigger the execution of the 
step. during the execution, when the flow reaches a step that has associated triggering events, 
this next step should be executed only after one  of its triggering event occurred. if more than 
one triggering event occurs at the same time, th en the highest priority  event is chosen to 
trigger the step. pro forma supports the pattern via a state tr igger. a state trigger is an 
expression that has to be true before the task can be executed.  the task remains dormant until 
it becomes true. asbru and eon do not support this pattern. 
pattern 29. canceling discriminator 
description  the convergence of two or more branch es into a single s ubsequent branch 
following one or more corresponding divergences earlier in the process model. the thread of 
control is passed to the subsequent branch wh en the first active incoming branch has been 
enabled. triggering the discriminator also canc els the execution of all of other incoming 
branches and resets the construct. 
only pro forma and asbru support this pattern. pro forma supports this pattern via a 
plan which has tasks that are marked as term inal. the plan completes as soon as a first 
terminal task has completed (see figure 8).  asbru supports this pattern by means of the 
propagation specification (abort-if) to influence the abort-condition . 
we describe the support of the structured n-out-of-m join pattern  which 
automatically supports special case of the 1-out-of-m join also known as the structured 
discriminator pattern (#9). 
pattern 30. structured n-out-of-m join 
description  the convergence of m branches into a single subsequent branch following a 
corresponding divergence ear lier in the process model. the thr ead of control is passed to the 
subsequent branch when n of the incoming branches have been enabled. subsequent mulyar    a pattern-based analysis of cig mo deling languages       page 25 of 45 pages 
enablement of incoming branches does not result in the thread of control being passed on. 
the join construct resets when all acti ve incoming branches have been enabled. 
asbru supports the pattern by wait-for-group attribute of a plan that specifies that n 
tasks must complete to continue the execution, the rest of the tasks are out of importance. 
glif supports the pattern via a synchronization step whose continuation attribute allows for 
explicit specification of branch es which must complete before a subsequent activity can be 
performed (see figure 9). pro forma supports this pattern via a plan which has tasks that are 
marked as terminal. completion of all tasks in  any of the specified groups would lead to 
termination of the discriminator and cancella tion of active tasks (s ee figure 10). although 
eon supports 1-out-of-m join, it do es not support th is pattern.   
pattern 32. canceling n-out-of-m join 
description  the convergence of two or more branch es into a single s ubsequent branch 
following one or more corresponding divergences earlier in the process model. the thread of 
control is passed to the subsequent branch when n of the incoming branches have been 
enabled. triggering the join also  cancels the execution of all of  the other incoming branches 
and resets the construct. 
none of the examined cigs except for pro forma support this pattern. pro forma 
supports this pattern direc tly as described in the structured n-out-of-m join pattern.  
pattern 37. acyclic synchronizing merge 
description  the convergence of two or more branches  which diverged earlier in the process 
into a single subsequent branch. the thread of control is pass ed to the subsequent branch 
when each active incoming branch has been enabled. where a given branch does not have a thread of control passed to it at  the divergence, "false" tokens are passed along the branch to 
ensure that the merge construct is able to de termine when each of the incoming branches can mulyar    a pattern-based analysis of cig mo deling languages       page 26 of 45 pages 
be synchronized. clearly, it is on ly possible to pass false tokens if  the split is before the join. 
therefore, no cycles are possible. 
none of the examined cigs except pro forma support this pattern. pro forma 
supports this pattern directly vi a scheduling constraints and the st atus of the antecedent tasks. 
the patterns interleaved parallel routing (p attern 17), critical section (pattern 39), 
and interleaved routing (pattern 40) address similar problems; therefore we will describe 
only one of them, i.e., the critical section pattern.  
pattern 39. critical section 
description. two or more connected subgraphs of a process model are identified as "critical 
sections". at runtime for a given process inst ance only activities in one of these "critical 
sections" can be active at any given time. on ce execution of the activit ies in one "critical 
section" commences, it must complete before  another "critical se ction" can commence. 
asbru supports the pattern by any-order sub-plans, where critical  sections have to be 
included in a body of sub-plans (see figur e 11). glif supports this pattern via any_order 
attribute of branch step. critical sections have  to be included on sepa rate branches. eon and 
proforma do not support this pattern. 
 
references 
 
1. j.m. overhage, w.m.tierney, x.h. zhou, c.j. mcdonald. a randomized trial of 
"corollary orders to prev ent errors of omission." j am med inform assoc. 
1997;4(5):364-375. 
2. p. votruba, s. miksch, and r. kosara. fac ilitating knowledge maintenance of clinical 
guidelines and protocols. medinfo.  2004;11(pt 1):57-61 
3. s.w. tu. the eon guideline model. t echnical report. last accessed may 2, 2007, 
http://smi.stanford.edu/projects/eon/eonguidelinemodeldocumentation.doc, 2006.  mulyar    a pattern-based analysis of cig mo deling languages       page 27 of 45 pages 
4. a.a. boxwala, m.peleg, s. tu, o.oqunyemi , q. zeng, d. wang, and et al. glif3: a 
representation format for sharable computer-i nterpretable clinical  practice guidelines. 
biomedical informatics, 37(3):147–161, 2004. 
5. p.d. johnson, s.w. tu, n. booth, b.  sugden, and i.n. purves. design and 
implementation of a framework to support the development of clinical guidelines. proc 
amia symp., pp. 389–393, 2000. 
6. p.a. de clercq, a. hasman, j.a. blom, and h.h. korsten. design and implementation 
of a framework to support the development of clinical guid elines. int j med info, 64(2), 
2001. 
7. p. ciccarese, e. caffi, s. quaglini, and m. stefanelli. architectures and tools for 
innovative health information systems: the guide project . int j med info, 74(7-8), 2005. 
8. s. tu and m. musen. a flexible appro ach to guideline modeling. in amia symp., 
pp. 420–424, 1999. 
9. d. wang, m. peleg, s. tu, a.a. boxwala,  and r.a. greenes et al. representation 
primitives, process models and patient data in  computer-interpretable clinical practice 
guidelines: a literature review of guidelin e representation models. intl j med inform, 
68(1), 2002. 
10. m. peleg , chapter 13: guideline and wo rkflow models. in greenes r.a., editor, 
medical decision support: computer-based  approaches to improving healthcare 
quality and safety. elsevier, 2006, pp. 281-306.. 
11. r.n. shiffman, b.t. karras, a. agrawal,  r. chen, l. marenco, s. nath. gem: a 
proposal for a more comprehensive guidelin e document model using xml. j am med 
inform assoc. 2000;7(5):488-498 
12. g. hripcsak, p. ludemann, t.a. pryor, o.b.  wigertz , p.d. clayton. rationale for the 
arden syntax. comput biomed res 1994;27(4):291-324 mulyar    a pattern-based analysis of cig mo deling languages       page 28 of 45 pages 
13. m. peleg, a.a. boxwala, e. bernstam, s. tu, r.a. greenes, e.h. shortliffe. sharable 
representation of clinical guidelines in gl if: relationship to the arden syntax. journal 
of biomedical informatics 2001;34(3):170-81. 
14. m. sordo, o. ogunyemi, a.a. boxwala,  r.a. greenes, s. tu. gello: a common 
expression language.  http://cslxi nfmtcs.csmc.edu/hl7/arden/2004-09-
atl/v3ballot_gello_aug2004.zip) 
15. m. peleg, s.w. tu, j. bury, p. ciccarese,  j. fox,. r.a. greenes and et al. comparing 
computer-interpretable guidelin e models: a case-study approach. j am med inform 
assoc. , vol. 10, no. 1, jan-feb 2003, pp. 52-68.  
16. n. russell, a.h.m. ter hofstede, w.m.p. van der aalst, and n. mulyar. workflow control-flow patterns: a revised view. bpm center report bpm-06-22, 
bpmcenter.org, 2006, url: 
http://workflowpatterns.com/documentation/documents/bpm-06-22.pdf , last accessed 
april 30, 2007.  
17. workflow patterns home page. http:// www.workflowpatterns.com. last accessed 
april 30, 2007. 
18. w. van der aalst and k. van hee. workflow management. the mit press, 2004. 
19. m.dumas, w. van der aalst, a.h. ter ho fstede. process-aware information systems: 
bridging people and software throu gh process technology. wiley&sons. 2005. 
20. b. kiepuszewski. expressiveness and su itability of languages for control flow 
modelling in workflows. phd thesis, queen sland university of  technology, brisbane, 
australia, 2003. available via http://www.workflowpatterns.com . 
21. n. russell, a.h.m. ter hofstede, d. ed mond, and w.m.p. van der aalst. workflow 
resource patterns: identification, representation and tool support, caise 2005 , porto, 
portugal, pp. 216-232. mulyar    a pattern-based analysis of cig mo deling languages       page 29 of 45 pages 
22. n. russell, a.h.m. ter hofstede, d. ed mond, and w.m.p. van der aalst. workflow 
data patterns. qut technical report, fit-tr-2004-01, queensland university of 
technology, brisbane, 2004. 
23. n. mulyar, w.m.p. van der aalst, a.h.m. ter hofstede, and n. russell. towards a 
wpsl: a critical analysis of the 20 cla ssical workflow control-flow patterns. 
technical report, bpm center report bpm-06-18, bpmcenter.org, 2006. 
24. n. mulyar, w.m.p. van der aalst, and m. peleg. a pattern-based analysis of clinical 
computer-interpretable gu ideline modeling languages . bpm center report bpm-06-
29, bpmcenter.org, 2006.  
25. s. quaglini, m. stefanelli, g. lanzola, v. caporusso and s. panzarasa. flexible guideline-based patient careflow system s. artif intell med. 2001 apr;22(1):65-80. 
26. pallas athena. pallas athena website. http://www.pallasathena.nl . last accessed may 
2, 2007.  
27. w.m. p. van der aalst , a. dreiling , f. gottschalk , m. rosemann, m. h. jansen-
vullers : configurable process models as a basis for reference modeling. business 
process management workshops 2005 , lncs, springer, pp.512-518, 2005.  
28. a. rozinat, r.s. mans, and w.m.p. van der aalst. mining cpn models: discovering 
process models with data from event logs. in k. jensen, editor, proceedings of the 
seventh workshop on the practical use of co loured petri nets and cpn tools (cpn 
2006), aarhus, denmark, october 2006. university of aarhus.  
29. asbruview. 13 december 2006 http://www.ifs. tuwien.ac.at/asgaard/asbru/tools.html. 
30. delt/a. document explor ation and linking tool/addons. 
http://ieg.ifs.tuwien.ac.at/projects/delta . last accessed may 2, 2007. mulyar    a pattern-based analysis of cig mo deling languages       page 30 of 45 pages 
31. y. shahar, s. miksch, and p. johnson. the asgaard project: a task-specific 
framework for the application and critiquing of  time-oriented clinical guidelines. artif 
intell med, (14):29–51, 1998. 
32. r. kosara and s. miksch. metaphors of movement: a visualization and user 
interface for time-oriented skeletal plans. artificial intelligence in medicine , special 
issue, 22(2), pp. 111-131, 2001 . 
33. carevis. http://ieg.ifs.tuwien.ac.at/projects/carevis . last accessed april 30, 2007. 
34. w. aigner and s. miksch. carevis: in tegrated visualizati on of computerized 
protocols and temporal patient data. artif  intell med, vol. 37, no. 3. (july 2006), pp. 
203-218. 
35. a. seyfang, r. kosara, and s. miks ch. asbru reference manual, version 7.3. 
technical report, vienna un iversity of technology, institute of soft-ware technology, 
vienna. report no.: asgaard-tr-2002-1, 2002. 
36. s. tu and m. musen. representation fo rmalisms and computational methods for 
modeling guideline-based patient care. in first european workshop on computer-based 
support for clinical guidelines and protocols, leipzig, germany, pp.125–142, 2000. 
37. s.w. tu and m.a. musen. a flexible appr oach to guideline modeling. in proc amia 
symp, pp. 420–424, 1999. 
38. s.w. tu and m.a. musen. from guideline modeling to guideline execution: defining 
guideline-based decision-support servi ces. in proc amia annu symp, pp. 863–867, 
2000. 
39. j. fox, n. johns, and a. rahmanzadeh. disseminating medical knowledge: the proforma approach. artificial inte lligence in medicine, 14(1):157–182, 1998. mulyar    a pattern-based analysis of cig mo deling languages       page 31 of 45 pages 
40. p.a. clercq, j.a. blom, h.h. korsten, and a. hasman. approaches for creating 
computer interpretable guidelines that facilitate decision support. artif intell med.  2004 
may;31(1):1-27. mulyar    a pattern-based analysis of cig mo deling languages       page 32 of 45 pages 
table 1 terms used by asbru, eon, glif, and pro forma  
terms asbru eon  glif pro forma  
process model plan guideline guideline plan 
case instance of plan guideline 
instance guideline 
instance instance of plan 
task/ activity plan action action action, enquiry 
 
parallel branching plan type branch and 
synchronization branch and 
synchronization action or enquiry 
exclusive branching plan precondition, 
plan type decision decision decision, enquiry 
and scheduling constraints 
 mulyar    a pattern-based analysis of cig mo deling languages       page 33 of 45 pages 
table 2 support for the control–flow patterns in asbru, eon, glif, and pro forma  
basic control-flow asbru eon glif pro forma  
1. sequence + + + + 
2. parallel split  + + + + 
3. synchronization + + + + 
4. exclusive choice + + + + 
5. simple merge + + + + 
advanced branching and synchronization     
6. multi-choice + + + + 
7. structured synchronizing merge +/- - - + 
8. multi-merge - - - - 
9. structured discriminator + + + + 
structural patterns     
10. arbitrary cycles - + + - 
11. implicit termination + + + + 
multiple instances patterns     
12. mi without synchronization - - - - 
13. mi with a priori design time knowledge +/- +/- +/- +/- 
14. mi with a priori run-time knowledge - - - - 
15. mi without a priori run-time knowledge - - - - 
state-based patterns     
16. deferred choice + - + + 
17. interleaved parallel routing + - - - 
18. milestone - - - + 
cancellation patterns     
19. cancel activity + + + + 
20. cancel case + - +/- + 
new patterns     
21. structured loop + + + + 
22. recursion + - - - 
23. transient trigger - - - + 
24. persistent trigger - - + + 
25. cancel region - - - - 
26. cancel multiple instance activity + - + + 
27. complete multiple instance activity  + - - + 
28. blocking discriminator - - - - 
29. canceling discriminator  + - - + 
30. structured n-out-of-m join + - + + 
31. blocking n-out-of-m join - - - - 
32. canceling n-out-of-m join - - - + 
33. generalized and-join - - - - 
34. static n-out-of-m join for mis - - - - 
35. static n-out-of-m join for mis with cancellation - - - - 
36. dynamic n-out-of-m join for mis - - - - 
37. acyclic synchronizing merge - - - + 
38. general synchronizing merge - - - - 
39. critical section + - + - 
40. interleaved routing + - + - 
41. thread merge - - - - 
42. thread split - - - - 
43. explicit termination - - - - 
 (+) : full support; (+/-): partial support, (-) : no support. mi – multiple instances mulyar    a pattern-based analysis of cig mo deling languages       page 34 of 45 pages 
table 3 description of pattern categories 
category name description 
basic control-flow patterns patterns describing elementary aspects of process control: 
sequence , parallel split, synchronization , exclusive choice , 
and simple merge  
advanced branching and synchronization patterns describing in-between behaviors, where some of the 
paths in a set of paths can be selected for execution and 
different modes of continuation are possible thereafter 
structural patterns structural patterns identify whether the modeling formalism has 
any restrictions regarding the structure of the processes 
multiple instances patterns patterns that refer to situations where several instances of a task 
can be active concurrently in the same case 
state-based patterns patterns characterizing scenarios in a process where subsequent 
execution is determined by the state of the process instance 
cancellation patterns patterns refer to the s ituation where either a single task  or a 
group of tasks have to be cancelled in a model 
new patterns a set of new patterns and the revised variants of patterns in the 
above-introduced categories which address the concepts such as 
triggers, path and thread branching and synchronization, and 
cancellation. 
 mulyar    a pattern-based analysis of cig mo deling languages       page 35 of 45 pages 
 parallel 
plans sequentia l plan 
figure 1 the patie nt-diagn osis scenario modeled  in as bruview mulyar    a pattern-based analysis of cig mo deling languages       page 36 of 45 pages 
branch _step synchronizatio n_step 
figure 2 the patie nt-diagn osis scenari o modeled in e on/pr otege mulyar    a pattern-based analysis of cig mo deling languages       page 37 of 45 pages 
 
figure 3 the patient-diagnosis scen ario model ed in glif3.5/protege mulyar    a pattern-based analysis of cig mo deling languages       page 38 of 45 pages 
actionenquiry plan decision
keystone
 
figure 4 the pati ent-diagnosis scenari o modeled in p roforma/tallis mulyar    a pattern-based analysis of cig mo deling languages       page 39 of 45 pages 
 
figure 5 speci fication of the arbi trary cyc les in glif3.5/prote ge mulyar    a pattern-based analysis of cig mo deling languages       page 40 of 45 pages 
 
 
figure 6 speci ficati on of the stru ctured  loop in  asbru/asbruview mulyar    a pattern-based analysis of cig mo deling languages       page 41 of 45 pages 
 
figure 7 speci ficati on of the persistent trigger  in glif3.5 
 mulyar    a pattern-based analysis of cig mo deling languages       page 42 of 45 pages 
 
figure 8 speci fication of the canceling  discrimina tor in profo rma/tallis 
 mulyar    a pattern-based analysis of cig mo deling languages       page 43 of 45 pages 
 
figure 9 speci ficati on of the struc tured  n-out-of-m jo in in glif3 .5/protégé 
 mulyar    a pattern-based analysis of cig mo deling languages       page 44 of 45 pages 
 
figure 10 specifica tion of the structured  n-out-of-m join in profo rma/tallis 
 mulyar    a pattern-based analysis of cig mo deling languages       page 45 of 45 pages 
 
figure 11  specifica tion o f critic al sec tion in as bru/asb ruview 
 