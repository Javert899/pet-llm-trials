an experimental evaluation of passage-based
process discovery
h.m.w. verbeek and w.m.p. van der aalst
technische universiteit eindhoven
department of mathematics and computer science
p.o. box 513, 5600 mb eindhoven, the netherlands
{h.m.w.verbeek,w.m.p.v.d.aalst}@tue.nl
abstract. in the area of process mining, the ilp miner is known for
the fact that it always returns a petri net that perfectly ts a given event
log. like for most process discovery algorithms, its complexity is linear
in the size of the event log and exponential in the number of event classes
(i.e., distinct activities). as a result, the potential gain by partitioning
the event classes is much higher than the potential gain by partitioning
the traces in the event log over multiple event logs. this paper proposes
to use the so-called passages to split up the event classes over multiple
event logs, and shows the results are for seven large real-life event logs
and one articial event log: the use of passages indeed alleviates the
complexity, but much hinges on the size of the largest passage detected.
key words: process discovery, fitness, petri nets, passages
1 introduction
process discovery, i.e., learning a process model from an event log, remains the
most challenging process mining task [1]. the best-known process discovery al-
gorithm is the -algorithm [2]. under some assumptions, this algorithm results
in a petri net that ts the original event log. however, if these assumptions do
not hold, this petri net may not even be free of deadlocks.
an example of a process discovery algorithm that always discovers a perfectly
tting petri net is the so-called ilp miner [3]. this algorithm uses integer linear
programming (ilp) techniques to check whether or not adding a place would
harm perfect tness. however, the downside of this algorithm is that lots of places
need to be checked, as we have to check all combinations of possible inputs and
outputs. as a result, the ilp miner works ne for event logs that contain only
a few event classes, but it may require excessive computation time in case the
number of event classes is even moderate (say, 20 or more).
recently, the notion of passages was introduced to decompose process mining
problems [4]. instead of having to mine the entire log for a perfectly tting petri
net, we can partition the log into several smaller passage logs and mine every
passage log for a petri net. at the end, we can simply combine the resulting
passage petri nets into a single petri net for which we know that it perfectly ts2 h.m.w. verbeek and w.m.p. van der aalst
the entire log. as a result, passage-based decomposition may help to address the
complexity problem of the ilp miner.
this paper aims at evaluating the passage technique introduced in [4] using a
number of large real-life logs with many event classes. for details on the passages,
we refer to [4]. for a more detailed version of this paper, please see [5]. here, it
suces to mention that the passage technique requires the addition of a unique
start event and a unique end event, and that it allows for two abstract algorithms
candp, wherecis used to detect causal relations (which underly the dierent
passage logs) between event classes, and pis used to mine a petri net from a
single passage log.
the remainder of this paper is organized as follows. first, section 2 describes
the experimental setup and section 3 presents the experimental evaluation. the
latter shows that although the passages alleviate performance problems to a
large extent, there may still be large passages that are to big for the ilp miner
to handle. section 4 presents a possible solution to the problem of big passages,
which allows the user of the ilp miner to focus on the most obvious places and
to simply ignore the less obvious ones. finally, section 5 concludes the paper by
wrapping up the results and oering hints for future work.
2 experimental setup
the initial experimental setup contains 7 real-life event logs ( atog). table 1
shows the characteristics of these logs. acontains test events for the deployment
of high-tech equipment, which contains both in-factory tests and on-site test
events.bis the bpi challenge 2012 event log [6]. ccontains diagnostic and
treatment events from a hospital department. dandecontain events from a
municipality, where dcontains events that correspond to citizens objecting to
the valuation of their houses, and econtains events that correspond to citizens
that request for building permits. fcontains events from a web server. finally,
gcontains events related to invoices at a provincial oce of the dutch national
public works.
each of these logs will be mined using both the standard ilp miner1and
the passage-enhanced ilp miner2as they are implemented in prom 6.23. table 2
shows the characteristics of the system we used to run both miners on.
3 experimental evaluation
table 3 shows the run times we obtained from the standard ilp miner. for sake
of completeness, we mention that the run times have been rounded to the nearest
1the ilp miner plug-in from the ilpminer package with default settings.
2the mine petri net using passages plug-in from the passage package with c
set to heuristics miner (relative-to-best set to 0 and dependency set to 100)
andpset to ilp miner .
3prom 6.2 can be downloaded from www.processmining.org .an experimental evaluation of passage-based process discovery 3
number containing only two relevant digits. for example, the run time for bis
rounded from 4620 :97 to 4600. the standard ilp miner ran out of memory for
aandfand ran out of time (more than a week) for c.
in contrast, table 5 shows (among other things) the run times for the passage-
enhanced ilp miner. for example, it shows that the run time for bhas decreased
from 4600 to 290 seconds, that 16 passages were detected, that the largest pas-
sage contains 13 event classes, and that it took the ilp miner 92 seconds to
mine the petri net for the largest passage. the run times for the largest passages
show that we do not gain much by running the ilp miner on dierent computers
for dierent passages, as the overall run time mainly depends on the run time
for the largest passage. only if several other passages are about as large as the
largest passage, then using dierent computers might help. finally, note that
this miner also cannot handle f: it simply contains too many event classes to
be kept in memory.
these results show that splitting up the event log into many event logs using
passages typically helps in reducing the run times, while still resulting in a petri
net that perfectly replays the original event log. it also shows, that the better
the distribution among the passages is, the better the reduction will be: if some
passage is still large in size, the run time will still be large as well. finally, g
shows that the passage-enhanced ilp miner comes with a little overhead (the
additional start and end event classes), which may result in worse run times in
case the log cannot really be split up into passages.
of course, one could argue that the passage-enhanced ilp miner takes less
run time because it produces dierent results, i.e., dierent petri nets. therefore,
we also conducted experiments where we used the proper completion ilp miner
as both the calgorithm and the palgorithm4: if we split up the net as obtained
from the proper completion ilp miner into passages, run the same miner on
every passage, and glue the resulting net into a single petri net, then we expect
that the end result is identical to the result of the initial ilp miner. however,
this requires that the event log at hand contains almost no noise, as the ilp
miner translates noise into causal dependencies, which typically results in a net
that contains only a single passage.
therefore, we created a model for a paper review system and used the model
to create a noise-free event log, called h, which contains 54 event classes, 71,800
events, and 2500 traces. we ran the miner as mentioned above on this event log,
and we compared both the resulting petri nets (both the end result as the result
of thecalgorithm) and the execution times.
thecilp miner took 1300 seconds. from the resulting petri net, 30 pas-
sages were derived of which the largest passage contains 7 event classes. in total,
ltering the log for every passage, running the pilp miner for every resulting
sublog, and synthesizing all 30 subnets into a single petri net took 140 seconds,
and resulted in the same petri net. this clearly shows that the passage-enhanced
4the mine petri net using passages plug-in from the passage package with
cset to flower and ilp miner with proper completion andpset to
ilp miner with proper completion .4 h.m.w. verbeek and w.m.p. van der aalst
event log event classes events traces
a 720154,966 24
b 36262,200 13,087
c 615 53,874 2713
d 96124,862 130
e 255 67,271 2076
f 5415 612,340 2246
g 15119,021 14,279
table 1. characteristics for the dierent event logs
key value
computer dell precision t5400
processor intel rxeon rcpu, e5430 @ 2.66ghz (2 processors)
installed memory (ram) 16.0 gb
system type 64-bit windows 7 enterprise sp 1
jre 64-bit jdk1.6.0 24
vm arguments -ea -xmx4g
table 2. basic information on the system used
event log run time
in seconds
a -
b 4600
c -
d 45,000
e 110,000
f -
g 56
table 3. run times obtained for the
standard ilp minerevent log run time
in seconds
a 11,000
b 320
c 650
d 420
e 650
f -
g 85
table 4. run times obtained for
the passage-enhanced ilp miner, re-
stricted to 20 event classes
event log run time passages largest passage run time largest passage
in seconds # in event classes in seconds
a 220,000 382 641 210,000
b 290 16 13 92
c 300,000 113 337 230,000
d 15,000 36 45 14,000
e 16,000 94 83 15,000
f - - - -
g 84 2 16 72
table 5. run times (and other characteristics) obtained for the passage-enhanced ilp
mineran experimental evaluation of passage-based process discovery 5
ilp miner can produce the same petri net as the standard ilp miner, but using
only a fraction of the time.
4 a possible relaxation
obviously, large passages can pose as much as a problem as a large collection
of event classes in a log can. however, we could use the fact that we know how
many event classes there will be before we start the ilp miner on a passage.
in case we think that the collection of event classes is still too large (641 for
a), we can simply decide not to use the ilp miner for such a passage, but
just to return a petri net that contains a transition for every event class. this
means that we overgeneralize the behavior of large passages, as we allow for any
combination of the transitions present in large passage. intuitively, one could
argue that these large passages correspond to dicult causal structures that are
hard to comprehend in the rst place, so why would the user want to see these
complex structures? instead, it just might be better for the user to see the more
simple structures, which can be easily obtained by running the ilp miner only
on those passages that are small enough.
please note that the standard ilp miner does not oer this possibility: either
the collection of event classes in the event log is small enough and we will get
a connected petri net, or the collection is too big and we will get a petri net
containing only transitions. the fact that the passage-enhanced ilp miner can
check the number of event classes per passage is obviously useful here.
for this reason, we have extended the experiment with a maximum passage
size of 20: a passage-enhanced ilp miner that only uses the ilp miner in case
the passage at hand contains less than 20 event classes (based on the earlier
experiments, 20 seems to be still reasonable)5. possibly, this miner results in
a petri net that is disconnected, but it is very likely that it will also contain
connected parts, and it will still t the original event log perfectly. table 4
shows the results. fstill contains too many event classes to be handled, while
acontains a trace that results in more than 10,0000 events for some passages,
which explains the exceptional long run time for this log. the other run times
are quite acceptable: in a matter of minutes, the process is discovered.
5 conclusions
in this paper, we showed that passages can help the ilp miner in nding a
petri net that perfectly ts a given event log. for two logs ( aandc), the
passage-enhanced ilp miner nds a petri net, where the standard ilp miner did
not. for three logs ( b,d, ande), the passage-enhanced ilp miner performed
5the mine petri net using passages plug-in from the passage package with c
set to heuristics miner (relative-to-best set to 0 and dependency set to 100),
pset to ilp miner , and max size set to 20.6 h.m.w. verbeek and w.m.p. van der aalst
way better than the standard ilp miner. for one log ( f), both the passage-
enhanced ilp miner and the standard ilp miner ran out of memory because
of the huge number of event classes. for one log ( g), the passage-enhanced ilp
miner performed worse than the standard ilp miner. this is explained by the
fact that size of the largest passage exceeds the size of the original net, which is
possible as the passage technique requires the addition of a unique start event
and a unique end event.
we also showed that by adding a restriction on the size of the passages,
the run times of the passage-enhanced ilp miner can even be reduced further,
although his typically results in disconnected petri nets. in some cases, this can
be regarded as positive, as the disconnected parts might oer the domain expert
the information he needs. as a result, there seems to be a possible trade-o
between run time and precision, while keeping the tness at a perfect level: the
further we restrict the number of event classes in passages (which means that
passages that exceed this restriction will not be mined for a petri net), the more
disconnected (and the less precise) the resulting petri net will be, but the faster
the ilp miner will nish. we could even think of extending the passage-enhanced
ilp miner with a certain time limit: it will only consider the smallest passages,
and while the time limit still permits, it will also consider the smallest of the
unconsidered passages as well.
another option for future research is to remove causal relations while turn-
ing the causal structure into passages. for example, if the removal of a single,
infrequent, causal relation would cause the largest passage to break apart into
multiple passages, then it might be worthwhile to indeed remove this relation.
to do so, we can consider the causal structure produced by the heuristics miner,
which provides such frequencies.
references
1. aalst, w.m.p.v.d.: process mining: discovery, conformance and enhancement of
business processes. springer (2011)
2. aalst, w.m.p.v.d., weijters, a.j.m.m., maruster, l.: workow mining: discovering
process models from event logs. ieee transactions on knowledge and data
engineering 16(9) (2004) 1128{1142
3. werf, j.m.e.m.v.d., dongen, b.f.v., hurkens, c.a.j., serebrenik, a.: process dis-
covery using integer linear programming. fundam. inform. 94(3-4) (2009) 387{412
4. aalst, w.m.p.v.d.: decomposing process mining problems using passages. in had-
dad, s., pomello, l., eds.: applications and theory of petri nets 2012. volume 7347
of lecture notes in computer science., springer-verlag, berlin (2012) 72{91
5. verbeek, h.m.w., aalst, w.m.p.v.d.: an experimental evaluation of passage-based
process discovery. bpm center report bpm-12-14, bpmcenter.org (2012)
6. dongen, b.f.v.: bpi challenge 2012. dataset.
http://dx.doi.org/10.4121/uuid:3926db30-f712-4394-aebc-75976070e91f (2012)