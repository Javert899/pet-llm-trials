a declarative approach for flexible business
processes management
m. pesic and w.m.p. van der aalst
department of technology management, eindhoven university of technol ogy,
p.o.box 513, nl-5600 mb, eindhoven, the netherlands.
m.pesic@tm.tue.nl, w.m.p.v.d.aalst@tm.tue.nl
abstract. management of dynamic processes in an important issue in
rapidly changing organizations. workﬂow management systems are sys-
tems that use detailed process models to drive the business pro cesses.
current business process modelling languages and models are of imper-
ative nature – they strictly prescribe how to work. systems that al-
low users to maneuver within the process model or even change the
model while working are considered to be the most suitable for dynami c
processes management. however, in many companies it is not realistic
to expect that end-users are able to change their processes. moreov er,
the imperative nature of these languages forces designer to over-spec ify
processes, which results in frequent changes. we propose a fundam en-
tal paradigm shift for ﬂexible process management and propose a more
declarative approach. declarative models specify what should be done
without specifying how it should be done. we propose the condec lan-
guage for modelling and enacting dynamic business processes. condec is
based on temporal logic rather than some imperative process modelling
language.
key words : workﬂow management, declarative model speciﬁcation, dynamic work-
ﬂow, ﬂexibility, temporal logic.
1 introduction
companies need to adapt to rapid changes in their environment. in order to
maintain agility at a competitive level, business processes are subjected to f re-
quent changes. as software products that are used in companies for automatic
driving of the business processes, workﬂow management systems (wfmss) [2,
10] should be able to support the dynamics of business processes.
workﬂow management systems are generic information systems which can
be implemented in variety of organizations to manage the ﬂow of work. in tr adi-
tional wfmss, every change of such a business process model is a time consum-
ing and complex endeavor. therefore, these systems are not suitable for rapidly
evolving processes. the rigid nature of today’s systems results from the way they
model and enact the business process. a business process model can be seen asa scheme which deﬁnes the ‘algorithm’ of the process execution. during the ex-
ecution of the model, the system uses the business process model as a ‘recipe’
to determine the sequence (order) of tasks to be executed. since the enactment
of the model highly depends of the modelling technique and the modelling lan-
guage, the later two play a determining role in the way the prescribed process
can be executed. the weaker this prescription is, the easier it is to deviate from
the prescribed process. however, most process models enforce the prescribed pro-
cedure without deviations. flexible wfmss should allow users to deviate from
the prescribed execution path [12]. for example, traditional systems have the
reputation to be too rigid because they impose a strictly predeﬁned execution
procedure.
thecase-handling paradigm is usually considered as ‘a more ﬂexible ap-
proach’ [5] because users work with whole cases and can modify to some extent
the predeﬁned process model. an example of such a system is flower, which
oﬀers the possibility to open or skip work items that are not enabled yet, sk ip
or execute enabled work items and redo executed or skipped items.
systems for dynamic process management emerge as a necessity to enable dy-
namic changes in workﬂow management systems [12, 6]. as response on demand
for dynamic business process management, a new generation of adaptive work-
ﬂow management systems is developed [20, 17, 15]. when working with adaptive
systems, users can change execution paths (e.g., in adept users can insert,
delete or move tasks in process models [17]).
both in traditional, case-handling and adaptive systems, process models are
presented in a process modelling language (e.g., petri nets [18] ,pi calculus [16],
etc.), which deﬁnes the ‘algorithm’ for the process execution. based on this
algorithm, the system decides about the order of the task execution. because
process modelling languages like petri nets and pi calculus precisely prescribe
the algorithm to be executed, the resulting models are imperative . although case-
handling and adaptive workﬂow systems allow for deviations/changes of models
written in imperative languages, the result remains an imperative model. t his
can result in many eﬀorts to implement various changes over and over again.
to abandon the imperative nature of contemporary wfmss, we propose a
paradigm shift by using a declarative language. in this paper we propose con-
decas a declarative language for modelling business processes. unlike imperative
languages, declarative languages specify the “what” without determining of the
“how”. when working with such a model, the users are driven by the system to
produce required results, while the manner in which the results are produced de-
pends on the preferences of users. figure 1 characterizes the diﬀerences between
classical imperative languages and condec. figure 1(a) illustrates that co n-
dec speciﬁes the “what” by starting from all possibilities and using constrai nts
to approximate the desired behavior (outside-to-inside).
imperative languages start from the inside by explicitly specifying the proce-
dure (the “how”) and thus over-specifying the process. to illustrate this, consider
the condec constraint shown in figure 1 (b). this constraint implies that the
only requirement is that for a given case not both aandbare executed, i.e.,/bnzrforbidden
behavior
deviations from
the prescribed
modelimperative
model
/bnzr/bnzr/bnzr
/bnzr/bnzr
/bnzr/bnzr/bnzr/bnzrcondeccondec
condec
condec
(a) declarative condec vs. imperative languagesa b
(b) a and b should not happen both
a
bxc1
c2
(c) over-specification in an
imperative language
fig. 1. a shift from imperative to declarative languages.
it is possible to execute aonce or more times as long as bis not executed and
vice versa. it is also possible that none of them is executed. in an imperative
language one tends to over-specify this as shown in figure 1 (c). unlike fig-
ure 1 (b), now a decision activity is introduced – x. this activity needs to be
executed at a particular time and requires rules (e.g. conditions c1andc2) to
make this decision. moreover, implicitly it is assumed that a or b is executed
only once. hence, there is an over-speciﬁcation of the original requirement and
as a result (1) changes are more likely and (2) people have less choice when using
the system.
in this paper we ﬁrst introduce condec, a new language for modelling dy-
namic business processes (section 2). in section 2.1 we show an illustrative
example of a condec model. section 2.2 shows how a condec model can be en-
acted by a process management system. related work is presented in section 3.
section 4 concludes the paper and proposes future work.
2 declarative business process models
condec is a declarative language that can be used to build a wide range of
models: from very ‘strict’ models that deﬁne the process in detail to very ‘relaxed’
models that state only what work should be done, without specifying how it
should be done. taking an optimistic approach, the simplest model to make in
condec is a model specifying which tasks are possible. users can execute such
a model in their own preference – they can choose which tasks to execute and
how many times, and in which order to execute tasks. however, such a simple
too-relaxed model can be too ‘anarchic’ – there are often some rules that should
be followed while working. these rules can also be added to a condec model -
thus making it more rigid if desired. as an ‘strict’ extreme, a condec model can
be supplied with such rules, that it behaves as an imperative model during the
execution: the process is strictly prescribed and followed.
initially, a condec model consists of a number of tasks, which are the poss ible
tasks that can be executed. the notion of a task is the smallest unit of work,like in any other workﬂow language. in an extreme case, a model consisting
only of tasks can be instantiated and enacted. when working on such a process
instance, users would be able to execute whichever tasks in whatever order. the
next step in developing a condec model is to deﬁne the relations between tasks.
the notion of relations between tasks in condec is considerably diﬀerent than
in a petri net and other traditional workﬂow models. relations between tasks
in a petri net describe the order of execution, i.e, howthe ﬂow will be executed.
we refer to the relations between tasks in condec as constraints . a constraint
represents a policy (or a business rule). at any point in time during the execution
of the model, each constraint has a boolean value ‘true’ or ‘false’, and this v alue
can change during the execution. if a constraint has the value ‘true’, the referring
policy is fulﬁlled and vice versa – if a constraint has the value ‘false’, the p olicy is
violated. at every moment during the execution of a process model, the model
is evaluated to be correct or not. the execution of a model is correct at one
moment of time if all its constraints have the value ‘true’ at that moment of
time. since some constraints can evaluate to ‘false’ at the very beginning of the
execution, a constraint which has the value ‘false’ during the execution is not
considered an error. consider an example of a constraint that speciﬁes that, each
execution of task ais eventually followed by task b. initially (before any task
is executed), this constraint expression evaluates to true. after executing athe
constraint evaluates to falseand this value remains falseuntilbis executed.
this illustrates that a constraints may be temporarily violated. howev er, the
goal is to end the execution of a condec model in a state where all constraints
evaluate to true.
we use linear temporal logic (ltl) [14] for declarative modelling of re-
lations between tasks – constraints. in addition to the basic logical oper ators,
temporal logic includes temporal operators: nexttime ( /circlecopyrtf), eventually ( 3f),
always ( 2f), and until ( f⊔g). however, ltl formulas are diﬃcult to read
due to the complexity of expressions. therefore, we deﬁne a graphical syntax
for some typical constraints that can be encountered in workﬂows. the combi-
nation of this graphical language and the mapping of this graphical language to
ltl forms the declarative process modelling language - condec. we propose
condec for speciﬁcation of dynamic processes.
because ltl expressions can be complex and diﬃcult to create for non-
experts, we introduce constraint templates for creating constraints. each tem-
plate consists of a formula written in ltl and a graphical representation of the
formula. an example is the “response constraint” which is denoted by a special
arc connecting two activities aandb. the semantics of such an arc connecting a
andbare given by the ltl expression 2(a−→3b), i.e., any execution of ais
eventually followed by b. users use graphical representation of the templates to
develop constraints in the condec model. every template has an ltl expression
of the constraint. it is the ltl expression and not the graphical representation
that is used for the enactment (execution) of the model.
we have developed a starting set of more than twenty constraint templates.
constraint templates deﬁne various types of dependencies between activities atan abstract level. once deﬁned, a template can be reused to specify constraints
between activities in various condec models. it is fairly easy to change, remo ve
and add templates, which makes condec an ‘open language’ that can evolve
and be extended according to the demands from diﬀerent domains. currently,
there are three groups of templates: (1) “existence”, (2) “relation”, and (3)
“negation” templates. because a template assigns a graphical representation to
an ltl formula, we can refer to such a template as a formula. presentation of
all templates is not necessary for the demonstration of the language. for a full
description of the developed templates, we refer the reader to the report [4].
figure 2 shows an illustrative condec model consisting of three tasks: a,b, and
c. tasksaandbare tagged with a constraint specifying the number of times the
task should be executed. these are the so-called “existence formulas” that specify
how many times a task can be executed within one case. since task cdoes not
have a constraint on the number of executions, it can be executed zero or multiple
times (0..*). the arc between aandbis a relation formula and corresponds to
the ltl expression for “response” discussed before: 2(a−→3b). the response
constraint is satisﬁed if task bis executed after task a, but not necessarily as
the next task after a. this constraint allows that some other tasks are executed
after task aand before task b. the connection between candadenotes the
“co-existence” relation formula: ( 3c−→3a )∧(3a−→3c ). according
to this constraint, if cis executed at least once, ais also executed at least once
and vice versa. this constraint allows any order of the execution of tasks cand
a, and also an arbitrary number of tasks between tasks canda. note that it is
not easy to provide a classical procedural model (e.g., a petri net) that allows
for all behavior modelled figure 2.
 [](a -> <> b), 
i.e., every a is 
eventually 
followed by b b is executed 
twice a can be 
executed at 
most once 
cif a is executed 
at least once, c 
is  executed at 
lest once and 
vice versa.
b2
a0..1
fig. 2. an simple example of a condec model.
note that a condec model can be developed as an imperative model when
using the right constraints. for example, we developed a constraint template
“chain succession” [4] that can be used to specify a direct succession between
two activities.
we use an illustrative example to explain the concept of declarative languages
and advantages of declarative process models. first, we develop a petri net model
of a simple example of on-line book purchasing. next, we show how to develop a
condec model for the same example. this will show how condec speciﬁes the
relations between tasks in a more natural and reﬁned way.figure 3 shows a petri net model of a simple proces for on-line book pur-
chasing. a petri net consists of places (represented by circles) and transitions
(represented by rectangles). transitions and places are connected with directed
arcs – a transition has its input and output places. initially, there is a token
in the place start . a transition is enabled when there is a token in each of its
input places. if a transition is enabled, it ﬁres by consuming a token from each
of its input places and producing a token in each of its output places. in our
example, the transition order is enabled and will ﬁre the ﬁrst by consuming and
producing one token. the produced token will enable transitions accepted and
declined . if the order is not accepted, the transition declined will ﬁre by con-
suming a token from the input place and producing a token in its output place
–end. this process execution would end with the initial order being declined
and the book would not be purchased. if the order is accepted, the transition
accepted ﬁres by consuming one token and producing two. this will result in
transitions receive book andreceive bill being enabled. we assume that
the book and the bill arrive separately, because it is possible that the book ar-
rives from the shipper and the bill from the bookstore. when the book arrives
the transition receive book ﬁres, and transition receive bill ﬁres when the
bill arrives. only after these two transitions ﬁre and produce tokens in two input
places of the transition pay, the book will be payed by ﬁring this transition, and
thus ending the process of book purchasing.
start
orderaccepted
declinedendreceive
book
receive
billpay
fig. 3. petri net - purchasing a book
2.1 declaring a business process in condec
in this section, we develop a condec model for the book purchasing example
and explain the concept of constraints using this model. figure 4 shows a con-
dec model for the purchasing book example. we ﬁrst deﬁne the same tasks like
in the petri net model in figure 3. however, instead of deﬁning the relations
with petri net arcs, we create a number of constraints, based on templates pre-
sented in [4]. first we develop a number of unary “existence” constraints. these
constraints deﬁne how many times a task can be executed – the cardinality of a
task. the graphical representation of these constraints indicates the cardinalit y
for each task. task order has the “existence” constraint “exactly 1” [4]. this
constraint can be seen as the cardinality symbol ‘1’ above the task order , andit speciﬁes that this task will be executed exactly once. all other tasks have the
“existence” constraint “absence 2” [4]. the graphical representation for this con-
straint is the cardinality symbol ‘0..1’ and it speciﬁes that the task can ex ecute
at most one time. in this example, the book will be ordered exactly once, and
this is why the task order has the cardinality ‘1’. the order can be accepted
or not. similarly, the order can be declined or not. this is why these two tasks
have the cardinalities ‘0..1’. the book, the bill and the payment will not be ex -
ecuted more that one time. however, due to the possible declining of the order
and errors, it might happen that these tasks do not execute at all. therefore,
tasksreceive book ,receive bill andpayhave cardinality ‘0..1’.
fig. 4. condec - purchasing a book
next, we deﬁne relations between tasks. several “relation” and “negation” [4]
constrains are added to describe dependencies between tasks in the condec model
in figure 4. there is a branched response from the task order . it has two
branches: one to the task accepted and the other to the task declined . some
binary “relation” and “negation” constraints can be extended with branches . the
branched response in figure 4 speciﬁes that, after every execution of order , at
least one of the tasks accepted ordeclined will eventually be executed. how-
ever, it is now possible that both tasks are executed, and to prevent this we add
thenot co-existence constraint between tasks accepted anddeclined . so
far, we have managed to make sure that after the task order only one of the ac-
tivitiesaccepted anddeclined will execute in the model. one problem remains
to be solved – we have to specify that both tasks accepted anddeclined can
be executed only after the task order was executed. we achieve this by creating
twoprecedence constraints: (1) one between the tasks order andaccepted
making sure that the task accepted can be executed only after the task order
was executed, and (2) one between tasks order anddeclined makes sure that
the taskdeclined can be executed only after the task order was executed.
further, we specify the relation between the activities accepted andreceive
book. in the petri net model we had a strict sequence between these two activi-
ties. however, due to some problems or errors in the bookstore it might happ en
that, although the order was accepted (the task accepted is executed), the book
does not arrive (the task receive book is not executed). however, we assumethat the book will not arrive before the order was accepted – the constraint
precedence between the activities accepted andreceive book speciﬁes that
the task receive book cannot be executed until the task accepted was exe-
cuted.
the original petri net speciﬁes that if the bill arrives also the book will arr ive,
and vice versa. this may not be always true. the condec model in figure 4
accepts the situation when the bill arrives even without the book being sent. this
could happen in the case of an error in the bookstore when a declined order was
archived as accepted, and the bill was sent without the shipment of the book.
however, we assume that every bookstore that delivers a book, also sends a bil l
for the book. we specify this with the responded existence constraint between
thereceive book task and the receive bill task. this constraint forces that
if the task receive book is executed, then the task receive bill must have
been executed before or will be executed after the task receive book . thus, if
the execution of the task receive book exists, then also the execution of the
taskreceive bill exists.
the constraint precedence between the tasks receive bill andpaymeans
that the payment will be done after the bill was received. however, after the bill
was received the customer does not necessarily pay, like in the petri net model.
it might happen that the received book was not the one that was ordered or it
was damaged. in these cases, the customer can decide not to pay the bill. note
that the condec model in figure 4 allows users to pay even before the book has
arrived. if the order was accepted, then the book can be received. the bill can
be paid as soon as the bill is received, and the bill can be received before the
book. this allows for the execution of the model where the book arrives after
the received bill had been paid.
note that in this section we used a petri net model as a starting point and
showed the corresponding condec model after some relaxations. for real-life
processes we propose notto do this. starting with a classical process model may
lead to the introduction of unnecessary constraints that limit users and ﬂexibilit y.
because of a (potential) large number of diﬀerent (types of) relations betw een
activities, condecmodel can become to complex. therefore, we recommend a
careful selection of a small number of relations (constraints) that are appro priate
for the desired condec model.
2.2 enacting declarative models
while the graphical notation of constraint templates enables a user-friendly in-
terface and masks the underlying formula, the formula written in ltl captures
the semantics of the constraint. a ‘raw’ condec model consists of a set of tas ks
and a number of ltl expressions that should all evaluate to trueat the end of
the model execution. condec models can be executed due to the fact that they
are based on ltl expressions, and every ltl formula can be translated into
an automaton [14, 11]. the possibility to translate an ltl expressio n into an
automaton and the algorithms to do so, have been developed for and extensively
used in the ﬁeld of model checking [14]. the spin tool [13] uses an automatatheoretic approach for the simulation and exhaustive formal veriﬁcation of sys-
tems, and as a proof approximation system. spin can verify the correctness of
requirements, which are written as ltl formulas, in a system model writt en in
promela (process meta language) [13]. a more detailed explanation about
the automata theory and the creation of the buchi automatons from ltl for-
mulas is out of scope of this article and we refer the interested readers to [13,
14].
we can execute a condec model [4] by constructing an automaton [11] for
each of the ltl expressions or constructing a single automaton for the whole
model (i.e., construct an automaton for the conjunction of all ltl expressions).
figure 5 shows a simple condec model and the corresponding automaton1. this
model consists of tasks curse ,pray, andbless and the constraint response
between tasks curse andpray. with this constraint in the model, when a person
curses (p2is not an accepting state), (s)he should eventually pray after this ( p1
is an accepting state). because there are no “existence” constraints in this model,
all three activities can be executed an arbitrary number of times.
(a)  model (b) automatonp2p1 p2bless
praypraycursecurse,bless
curse pray
blessresponse
fig. 5. a simple condec model.
using automata for the execution of models with constraints allows for the
guidance of people, e.g., it is possible to show whether a constraint is in an
accepting state or not. moreover, if the automaton of a constraint is not in a n
accepting state, it is possible to indicate whether it is still possible to reac h an
accepting state. this way we can color the constraints green (in accepting state),
yellow (accepting state can still be reached), or red(accepting state can not be
reached anymore). using the buchi automaton some engine could even enforce
a constraint.
3 related work
although many business processes can be characterized as dynamic processes,
traditional rigid wfmss can not cope with frequent changes. the ﬂexibility of
wfmss can be seen as the ability to change or deviate from the business process
and plays an important role in the extend to which such systems can support
1note that the generated buchi automaton is a non-deterministic automaton. for
simplicity we use a deterministic automaton yielding the same beh avior.dynamic processes [12]. the nature of the modelling language itself determines
the usability and ﬂexibility of the system [3].
case-handling systems have the reputation to be more ﬂexible and more
appropriate for dynamic business processes [5]. in such systems, users can open
a whole case, and work on that case, while in traditional wfmss, users work
with multiple cases. when allowing users to work on whole cases, the system
has the privilege to allow for much more maneuver in the process (e.g., opening,
skipping and re-doing tasks in flower).
the most advanced solution for dynamic processes management is a class of
wfmss that oﬀers the possibility to change the business process model at run-
time [20, 17, 15]. when working with adaptive wfmss, it is possible to change
the business process model on the general level (i.e., the change is applied for all
business process instances), or on the instance level (i.e., the change is applied
only on one instance). systems like adept [17] develop very complex workﬂow
engines [19] that are able to handle inserting, deleting and moving tasks at run-
time.
declarative properties are used to check whether the model matches the
modelled system in [7]. in this approach, causal runs of a petri net model are
generated by means of simulation. process nets representing causal runs are
analyzed with respect to speciﬁed properties. the three groups of properties
are: facts (the property should always hold) [9], causal chains (immediate causal
dependency ) and goals (the property eventually holds). while this approach
validates petri net process models, our approach is used to generate and enact
the model.
4 conclusions and future work
flexibility of wfmss is tremendously inﬂuenced by their perception of the no-
tion of a business process. in current systems, the model of a business process
is seen as an imperative prescription of the procedure that should be followed
during work. the present solutions for dynamic process management lie in a
ﬂexible execution of the model (i.e., case handling systems such as flower),
and in the possibility to change the model during the execution (i.e., adaptive
systems such as adept [17]). however, the approach and the model still rema in
the same: an imperative prescription of howthe solution should be reached.
condec is a declarative language for modelling business processes. it speciﬁes
what should be done, and users can decide how they will do it. we take an
optimistic approach where, in principle, anything is possible. that is, anythi ng
is possible unless we specify some constraints . constraints represent policies that
should not be violated. in a way, constraints specify what not to do instead of
specifying how to work. this leaves a lot of room for the maneuver of users, who
can make decisions and work in various ways with the same condec model.
using automata theory and linear temporal logic, condec models can be
executed by an engine. developing a system for management of condec mod-
els brings various challenges. we are currently developing a prototype of sucha system. up to now, we have developed an editor where constraint templates
can be deﬁned and used to build a condec model. the condec model for the
purchasing book example is developed in this tool (cf. figure 6). the next
challenge is to develop a complete workﬂow management system. this sys-
tem will be used together with the yawl system ( www.yawl-system.com ),
where the yawl language [1] deals with the structured workﬂows at a higher
level. moreover, the system will be linked to our process mining tool prom [8]
(www.processmining.org ). this allows for the monitoring of condec ﬂexible
processes. actually, prom already oﬀers an ltl checker for checking the con-
dec constraints afterexecution.
yawl
prom
interface b
fig. 6. the condec system with yawl and prom.
references
1. w.m.p. van der aalst, l. aldred, m. dumas, and a.h.m. ter hofstede . design
and implementation of the yawl system. in a. persson and j. stirna, ed itors,
advanced information systems engineering, proceedings of the 16th international
conference on advanced information systems engineering , volume 3084 of lecture
notes in computer science , pages 142–159. springer-verlag, berlin, 2004.
2. w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
3. w.m.p. van der aalst and s. jablonski. dealing with workﬂow change: id entiﬁca-
tion of issues and solutions. international journal of computer systems, science,
and engineering , 15(5):267–276, 2000.
4. w.m.p. van der aalst and m. pesic. specifying, discovering, and
monitoring service ﬂows: making web services process-aware. bp m
center report bpm-06-09, bpm center, bpmcenter.org, 2006.
http://is.tm.tue.nl/staﬀ/wvdaalst/bpmcenter/reports/2006/bpm-06-09.pdf.
5. w.m.p. van der aalst, m. weske, and d. gr¨ unbauer. case handling: a n ew
paradigm for business process support. data and knowledge engineering ,
53(2):129–162, 2005.6. f. casati, s. ceri, b. pernici, and g. pozzi. workﬂow evolution. in er ’96:
proceedings of the 15th international conference on conceptual mod eling, pages
438–455. springer-verlag, 1996.
7. j. desel. validation of process models by construction of process n ets. in business
process management, models, techniques, and empirical studies , pages 110–128,
london, uk, 2000. springer-verlag.
8. b. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters, and
w.m.p. van der aalst. the prom framework: a new era in process minin g tool
support. in g. ciardo and p. darondeau, editors, application and theory of petri
nets 2005 , lecture notes in computer science, pages 444–454. springer-verlag,
berlin, 2005.
9. h. j. genrich and g. thieler-mevissen. the calculus of facts. mathematical foun-
dations of computer science 1976 , pages 588–595, 1976.
10. d. georgakopoulos, m. hornick, and a. sheth. an overview of workﬂow manage -
ment: from process modeling to workﬂow automation infrastructure .distributed
and parallel databases , 3:119–153, 1995.
11. r. gerth, d. peled, m.y. vardi, and p. wolper. simple on-the-fl y automatic
veriﬁcation of linear temporal logic. in proceedings of the fifteenth ifip wg6.1
international symposium on protocol speciﬁcation, testing and veriﬁc ation xv ,
pages 3–18, london, uk, 1996. chapman & hall, ltd.
12. p. heinl, s. horn, s. jablonski, j. neeb, k. stein, and m. teschke . a compre-
hensive approach to ﬂexibility in workﬂow management systems. in wacc ’99:
proceedings of the international joint conference on work activiti es coordination
and collaboration , pages 79–88, new york, ny, usa, 1999. acm press.
13. g.j. holzmann. the spin model checker: primer and reference manual.
addison-wesley, boston, massachusetts, usa, 2003.
14. e.m. clarke jr., o. grumberg, and d.a. peled. model checking . the mit press,
cambridge, massachusetts and london, uk, 1999.
15. p.j. kammer, g.a. bolcer, r.n. taylor, a.s. hitomi, and m. bergman. techniques
for supporting dynamic and adaptive workﬂow. comput. supported coop. work ,
9(3-4):269–292, 2000.
16. r. milner. communicating and mobile systems: the pi-calculus . cambridge
university press, cambridge, uk, 1999.
17. m. reichert and p. dadam. adeptﬂex: supporting dynamic changes of
workﬂow without loosing control. journal of intelligent information systems ,
10(2):93–129, 1998.
18. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
19. s. rinderle, m. reichert, and p. dadam. correctness criteria for dynamic
changes in workﬂow systems: a survey. data and knowledge engineering ,
50(1):9–34, 2004.
20. m. weske. formal foundation and conceptual design of dynamic adaptations in
a workﬂow management system. in hicss ’01: proceedings of the 34th annual
hawaii international conference on system sciences , volume 7, page 7051, wash-
ington, dc, usa, 2001. ieee computer society.