business processmanagementdemystiﬁed:
atutorial on models,systemsand standards for
workﬂow management
wilm.p. van der aalst
department oftechnology management
eindhoven universityoftechnology
p.o.box 513,nl-5600mbeindhoven, thenetherlands
w.m.p.v.d.aalst@tm.tue.nl
abstract. overthelastdecadetherehasbeenashiftfrom“data-aware”informa-
tion systems to “process-aware” information systems. to support business pro-
cesses an enterprise information system needs to be aware of these processes
and their organizational context. business process management (bpm) includesmethods, techniques, and tools to support the design, enactment, management,
andanalysisofsuchoperationalbusinessprocesses.bpmcanbeconsideredasan
extension of classical workﬂow management (wfm) systems and approaches.this tutorial introduces models, systems, and standards for the design, analysis,
and enactment of workﬂow processes. petri nets are used for the modeling and
analysisofworkﬂows.usingpetrinetsasaformalbasis,contemporarysystems,languages, and standards for bpm and wfm are discussed. although it is clear
that petri nets can serve as a solid foundation for bpm/wfm technology, in re-
ality systems, languages, and standards are developed in an ad-hoc fashion. toillustrate this xpdl, the “lingua franca” proposed by the workﬂow manage-
ment coalition (wfmc), is analyzed using a set of 20 basic workﬂow patterns.
this analysis exposes some of the typical semantic problems restricting the ap-plication ofbpm/wfmtechnology.
keywords: businessprocessmanagement,workﬂowmanagement,workﬂowmanage-
ment systems, workﬂow patterns, xml process deﬁnition language (xpdl), work-
ﬂow veriﬁcation.
1 introduction
this section provides some context for the topics addressed in this tutorial. first, we
identify some trends and put them in a historical perspective. then, we focus on thebpm life-cycle and discuss the basic functionality of a wfm system. finally, we out-
line the remainder of thistutorial.
1.1 historical perspective
to show the relevance of business process management (bpm) systems, it is interest-
ingtoputtheminahistoricalperspective.considerfigure1,whichshowssomeoftheongoing trends in information systems. this ﬁgure shows that today’s information sys-
tems consist of a number of layers. the center is formed by the operating system, i.e.,the software that makes the hardware work. the second layer consists of generic ap-
plications that can be used in a wide range of enterprises. moreover, these applications
are typically used within multiple departments within the same enterprise. examplesof such generic applications are a database management system, a text editor, and a
spreadsheet program. the third layer consists of domain speciﬁc applications. these
applications are only used within speciﬁc types of enterprises and departments. exam-ples are decision support systems for vehicle routing, call center software, and human
resource management software. the fourth layer consists of tailor-made applications.
these applications are developed forspeciﬁc organizations.
operating
systemtrends in information systems:
1. from programming to assembling.2. from data orientation to process
orientation.
3. from design to redesignand organic growth.generic
applications
domain specific
applications
tailor-made
applications
fig.1.trendsrelevant forbusinessprocessmanagement.
in the sixties the second and third layer were missing. information systems were
builtontopofasmalloperatingsystemwithlimitedfunctionality.sincenogenericnor
domain speci ﬁc software was available, these systems mainly consisted of tailor-made
applications. since then, the second and third layer have developed and the ongoing
trend is that the four circles are increasing in size, i.e., they are moving to the out-
side while absorbing new functionality. today ’s operating systems offer much more
functionality. database management systems that reside in the second layer offer func-
tionality which used to be in tailor-made applications. as a result of this trend, theemphasis shifted from programming to assembling of complex software systems. the
challenge no longer is the coding of individual modules but orchestrating and gluing
together pieces of software fromeach of the four layers.
another trend is the shift from data to processes. the seventies and eighties were
dominated by data-driven approaches. the focus of information technology was onstoring and retrieving information and as a result data modeling was the starting point
for building an information system. the modeling of business processes was often ne-
glectedandprocesseshadtoadapttoinformationtechnology.managementtrendssuchas business process reengineering illustrate the increased emphasis on processes. as a
result,system engineers are resorting to a more process driven approach.
the last trend we would like to mention is the shift from carefully planned designs
to redesign and organic growth. due to the omnipresence of the internet and its stan-
dards, information systems change on-the- ﬂy. as a result, fewer systems are built from
scratch.inmanycasesexistingapplicationsarepartlyusedinthenewsystem.although
component-based software development still has it problems, the goal is clear and it is
easy to see that software development has become more dynamic.
the trends shown in figure 1 provide a historical context for bpm. bpm systems
are either separate applications residing in the second layer or are integrated compo-
nentsinthedomainspeci ﬁcapplications,i.e.,thethirdlayer.notableexamplesofbpm
systems residing in the second layer are workflow management (wfm) systems [12,
38,48,55,57,58,61] such as staffware, mqseries, and cosa, and case handling sys-
tems such as flower. note that leading enterprise resource planning (erp) systemspopulating the third layer also offer a wfm module. the work ﬂow engines of sap,
baan, peoplesoft, oracle, and jd edwards can be considered as integrated bpm sys-
tems. the idea to isolate the management of business processes in a separate compo-
nent is consistent with the three trends identi ﬁed. bpm systems can be used to avoid
hard-codingtheworkprocessesintotailor-madeapplicationsandthussupporttheshiftfromprogrammingtoassembling.moreover,processorientation,redesign,andorganic
growth are supported. for example, today ’s wfm systems can be used to integrate
existing applications and support process change by merely changing the work ﬂow di-
agram. given these observations, the practical relevance of bpm is evident. although
bpm functionality is omnipresent and often hidden in larger enterprise information
systems, for clarity we will often restrict the discussion to clear cut “process-aware ”
information systemssuch as wfm systems(cf. section 1.3).
to put the topic of this tutorial in a historical perspective it is worthwhile to con-
sider the early work on of ﬁce information systems. in the seventies, people like skip
ellis [32], anatol holt [45], and michael zisman [78] already worked on so-called
ofﬁce information systems, which were driven by explicit process models. it is inter-
esting to see that the three pioneers in this area independently used petri-net variantstomodel of ﬁce procedures. duringthe seventies and eightiesthere wasgreatoptimism
about the applicability of of ﬁce information systems. unfortunately, few applications
succeeded.asaresultoftheseexperiences,boththeapplicationofthistechnologyand
researchalmoststoppedforadecade.consequently,hardlyanyadvancesweremadein
the eighties. in the nineties, there again was a huge interest in these systems. the num-ber of wfm systems developed in the past decade and the many papers on work ﬂow
technologyillustratetherevivalofof ﬁceinformationsystems.todaywfmsystemsare
readilyavailable[12,38,48,55,57,58,61].however,theirapplicationisstilllimitedtospeciﬁc industries such as banking and insurance. as was indicated by skip ellis it is
important to learn from these ups and downs [33]. the failures in the eighties can be
explained by both technical and conceptual problems. in the eighties, networks wereslowornotpresentatall,therewerenosuitablegraphicalinterfaces,andproperdevel-
opment software was missing. however, there were also more fundamental problems:
a uniﬁed way of modeling processes was missing and the systems were too rigid to beused by people in the workplace. most of the technical problems have been resolved
by now. however, the more conceptual problems remain. good standards for businessprocessmodelingarestillmissingandeventoday ’swfmsystemsenforceunnecessary
constrains on the process logic (e.g., processes are made more sequential).
1.2 bpm life-cycle
as indicated before, business process management (bpm) includes methods, tech-
niques, and tools to support the design, enactment, management, and analysis of oper-ational business processes . it can be considered as an extension of classical work ﬂow
management (wfm) systems and approaches. before discussing the differences be-
tween wfm and bpm, letus consider the bpm life-cycle .
the bpm life-cycle has four phases:
–process design
any bpm effort requires the modeling of an existing ( “as-is”) or desired ( “to-be”)
process, i.e., a process design . during this phase process models including vari-
ous perspectives (control- ﬂow, data-ﬂow, organizational, sociotechnical, and oper-
ational aspects) are constructed. the only way to create a “process-aware ”enter-
prise information system is to add knowledge about the operational processes at
hand.
–system conﬁguration
basedonaprocessdesign,theprocess-awareenterpriseinformationsystemisreal-
ized. in the traditional setting the realization would require a time-consuming and
complex software development process. using software from the second and thirdlayer shown in figure 1, the traditional software development process is replaced
by a conﬁguration or assembly process. therefore, we use the term system conﬁg-
urationforthe phase in-between process design and enactment.
–process enactment
theprocess enactment phase is the phase where the process-aware enterprise in-
formation system realized in the systemcon ﬁguration phase isactually used.
–diagnosis
process-aware enterprise information system have to change over time to improve
performance, exploit new technologies, support new processes, and adapt to an
ever changing environment. therefore, the diagnosis phase is linking the process
enactment phase to the a new design phase.
likeinsoftwarelife-cyclemodels,thefourphasesareoverlapping(cf.waterfallmodel)
and the whole process isiterative (cf.spiral model).
as is illustrated in figure 2, the bpm life-cycle can be used to identify different
levels of maturity when it comes to developing process-aware enterprise informationsystems.in the earlynineties and before, mostinformation systemsonly automated in-
dividual activities and where unaware of the underlying process. for the systems that
were process-aware, the process logic was hard-coded in the system and not supportedin a generic manner. despite the early work on of ﬁce automation, the ﬁrst commercial
wfm systems became only practically relevant around 1993 (see figure 2(a)). the fo-
cusofthesesystemswason “gettingthesystemtowork ”andsupportforenactmentandprocess
design
system
configurationprocess
enactmentdiagnosis
(a) 1993process
design
system
configurationprocess
enactmentdiagnosis
(b) 1998
process
design
system
configurationprocess
enactmentdiagnosis
(c) 2003process
design
system
configurationprocess
enactmentdiagnosis
(d) 2008
fig.2.thebpmlife-cycle isusedtoindicate the maturityofbpmtechnology overtime.
designwaslimited.inthemid-ninetiesthissituationchangedandby1998manywfm
systems had become readily available (see figure 2(b)). in these systems there was ba-
sic support for enactment and design. in the last ﬁve years these systems have been
further extended allowing for more support during the design and enactment phases
(see figure 2(c)). for example, a case-handling system like flower [22] allows for
much more ﬂexibility during the enactment phase than the traditional wfm systems.
today‘s systems provide hardly any support for the diagnosis phase. although most
bpm software logs all kinds of events (e.g., wfm systems like staffware log the com-
pletionofactivitiesanderpsystemslikesaplogtransactions),thisinformationisnot
used to identify problems or opportunities for improvement. in the next ﬁve years this
situationwillprobablychangewhenprocessmining[17,19]techniquesbecomereadilyavailable (see figure 2(d)).
the bpm life-cycle shown in figure 2 can also be used to de ﬁne the difference
between wfm and bpm. wfm focusses on the lower half of the bpm life-cycle (i.e.,“getting the system to work ”) while bpm also includes to upper half of the life-cycle.
therefore, bpm also focusses on diagnosis, ﬂexibility, human-centric processes, goal-
driven process design, etc. gartner expects that business process analysis (bpa), i.e.,
software to support the diagnosis phase, will become increasingly important [39]. it
is expected that the bpa market will continue to grow. note that bpa covers aspects
neglected by traditional wfm products (e.g., diagnosis, simulation, etc.). business ac-
tivity monitoring (bam) is one of the emerging areas in bpa. the goal of bam tools
is to use data logged by the information system to diagnose the operational processes.
an example is the aris process performance manager (ppm) of ids scheer [47].aris ppm extracts information from audit trails (i.e., information logged during the
execution of cases) and displays this information in a graphical way (e.g., ﬂow times,
bottlenecks, utilization, etc.). bam also includes process mining, i.e., extracting pro-
cessmodelsfromlogs[17].bamcreatesanumberofscienti ﬁcandpracticalchallenges
(e.g.,whichprocessescanbediscoveredandhowmuchdataisneededtoprovideusefulinformation).
1.3 work ﬂow management (systems)
the focus of this tutorial will be on wfm rather than bpm. the reason is that wfm
serves as a basis for bpm and in contrast to bpm it is a mature area with well-de ﬁned
concepts and widely used softwareproducts.
the work ﬂow management coalition (wfmc)de ﬁnes workﬂow as:“the automa-
tion of a business process, in whole or part, during which documents, information or
tasks are passed from one participant to another for action, according to a set of proce-dural rules. ”[55]. a work ﬂow management system (wfms) is de ﬁned as:“a system
that deﬁnes, creates and manages the execution of work ﬂows through the use of soft-
ware, running on one or more work ﬂow engines, which is able to interpret the process
deﬁnition,interactwithwork ﬂowparticipantsand,whererequired,invoketheuseofit
tools and applications. ”[55]. note that both de ﬁnitions emphasize the focus on enact-
ment, i.e.,the use of software to support the execution of operational processes.
when considering these de ﬁnitions in more detail it is evident that wfm is highly
relevantforanyorganization.however,atthesametimefeworganizationsusea “real”
wfm system. to explain thiswe identify four categories of wfm support:
–pure wfm systems
at this point in time many wfm systems are available and used in practise. ex-
amples of systems include staffware process suite, filenet bpm suite, i-flow,
flower, websphere mq work ﬂow (formerly known as mqseries work ﬂow),
tibco inconcert, etc.
–wfm components embedded in other systems
many software packages embed a generic work ﬂow component whose function-
ality is comparable to the pure wfm systems. for example, most erp systems
provideawork ﬂowcomponent.sapwebflowisthework ﬂowcomponentofsap
offeringallthefunctionalitytypicallypresentintraditionalstand-alonewfmprod-ucts.
–custom-made wfm solutions
manyorganizations,e.g.,banksandinsurancecompanies,havechosennottousea
commercially available wfm solution but build an organization-speci ﬁc solution.
these solutions typically only support a subset of the functionality offered by the
ﬁrst two categories. nevertheless, these systems support the de ﬁnition and execu-
tion of different work ﬂows.
–hard-coded wfm solutions
the last category refers to the situation were the processes are hard-coded in the
applications,i.e.,thereisnogenericwork ﬂowsupportbutapplicationsarecoupled
insuchawaythataspeci ﬁcprocessissupported.theonlywaytochangeaprocessis to change the applications themselves, i.e., unlike the ﬁrst three categories there
is no component that is process-aware. note that in these hard-coded system anexplicit orchestration layer ismissing.
at this point in time the majority of business processes are still supported by solutions
residing in the third and fourth category. however, the percentage of processes sup-
portedbythe ﬁrsttwocategoriesisincreasing.moreover,softwaredevelopersbuilding
solutions for the third and fourth category are using the concepts and insights providedby theﬁrst two categories. in this context it is interesting to refer to recent develop-
ments in the web services domain [68]. the functionality of web service composition
languages (also referred to as “web service orchestration ”) like bpel4ws, bpml,
wsci, wswsfl, xlang, etc. is very similar to traditional work ﬂow languages [6,
77].
1.4 outline and intended audience
the goal of this tutorial is to introduce the reader to the theoretical foundations of
bpm/wfmusingapetri-netbasedapproach.however,atthesametimecontemporary
systems and languages are presented to provide a balanced view on the application
domain.
section 2 shows the application of petri nets to work ﬂow modeling. for this pur-
pose, the class of workflow nets (wf-nets) is introduced, but also some “syntactical
sugaring”isgiventofacilitatethedesignofwork ﬂows.section3discussestheanalysis
of workﬂow models expressed in terms of petri nets. the focus will be on the veri ﬁ-
cation of wf-nets using classical analysis techniques. section 4 discusses the typical
architecture of a wfm system and discusses contemporary systems. the goal of this
section is to show that the step from design to enactment, i.e., the con ﬁguration phase
(cf.figure2),isfarfromtrivial.insection5,20work ﬂowpatternsareusedtoevaluate
the xml process de ﬁnition language (xpdl), the standard proposed by the work-
ﬂow management coalition (wfmc). this evaluation illustrates the typical problems
workﬂowdesignersandimplementersarefacedwithwhenapplyingcontemporarylan-
guages and standards. section 6 provides an overview of related work. clearly, only
a small subset of the many books and papers on bpm/wfm can be presented, but
pointers are given to ﬁnd relevant material. finally, section 7 concludes the tutorial by
discussing the role of petrinets in the bpm/wfm domain.
notethatpartsofthistutorialarebasedonearlierwork(cf.[2 –6,12,15]).formore
material the interested reader is referred to [12] and two www-sites: one presentingcourse material (slides, animations, etc.) http://www.workflowcourse.com
and one on work ﬂow patterns http://www.workflowpatterns.com .
this tutorial is intended for people having a basic understanding of petri nets and
interested in the application of petri nets to problems in the bpm/wfm domain. sec-
tions 2 and 3 are focusing more on the petri-net side of things while sections 4 and 5
are focusing more on the application domain.2 work ﬂowmodeling
inthissection,weshowhowtomodelwork ﬂowsintermsofpetrinets.first,weintro-
ducethebasicwork ﬂowconceptsanddiscussthevariousperspectives.then,wede ﬁne
some basic petri net notation followed by an introduction to a subclass of petri nets
tailored towards work ﬂow modeling. we conclude thissection with an exercise.
2.1 work ﬂow concepts and perspectives
workﬂowprocessesare case-driven ,i.e.,tasksareexecutedforspeci ﬁccases.approv-
ing loans, processing insurance claims, billing, processing tax declarations, handlingtrafﬁc violations and mortgaging, are typical case-driven processes which are often
supported by a wfm system. these case-driven processes, also called workﬂows, are
marked by three dimensions: (1) the control- ﬂow dimension, (2) the resource dimen-
sion, and (3) the case dimension (see figure 3). the control- ﬂow dimension is con-
cerned with the partial ordering of tasks, i.e., the work ﬂowprocess. the tasks which
need to be executed are identi ﬁed and the routing of cases along these tasks is de-
termined. conditional, sequential, parallel and iterative routing are typical structures
speciﬁedinthecontrol- ﬂowdimension.tasksareexecutedbyresources.resourcesare
human(e.g.,employee)and/ornon-human(e.g.,device,software,hardware).inthere-
source dimension these resources are classi ﬁed by identifying roles (resource classes
based on functional characteristics) and organizational units (groups, teams or depart-ments). both the control- ﬂow dimension and the resource dimension are generic, i.e.,
theyarenottailoredtowardsaspeci ﬁccase.thethirddimension ofawork ﬂow iscon-
cerned with individual cases which are executed according to the process de ﬁnition
(ﬁrstdimension) by the proper resources (second dimension).
case dimensioncontrol-flow dimensionresource dimension
task
casework itemactivityresource
fig.3.thethreedimensionsofwork ﬂow.
the primary task of a wfm system is to enact case-driven business processes by
joiningseveralperspectives.thefollowingperspectivesarerelevantforwork ﬂowmod-
elingandwork ﬂowexecution:(1) controlﬂow(orprocess)perspective,(2) resource(ororganization) perspective, (3) data(or information) perspective, (4) task(or function)
perspective,(5) operation (orapplication)perspective.theseperspectivesaresimilarto
theperspectivesgivenin[48]andthecontrol ﬂowandresourceperspectivescorrespond
totheﬁrsttwodimensionsshowninfigure3.thethirddimensionre ﬂectsthefactthat
workﬂows are case-driven and does not correspond to one ofthe ﬁve perspectives.
in the control- ﬂow perspective, workﬂow process de ﬁnitions(workﬂow schemas)
are deﬁned to specify which tasksneed to be executed and in what order (i.e., the rout-
ing or control ﬂow). a task is an atomic piece of work. work ﬂow process de ﬁnitions
areinstantiatedforspeci ﬁccases(i.e.,work ﬂowinstances).sinceacaseisaninstantia-
tion of a process de ﬁnition, it corresponds to the execution of concrete work according
to the speci ﬁed routing. in the resource perspective, the organizational structure and
its population are speci ﬁed. the organizational structure describes relations between
roles (resource classes based on functional aspects) and groups (resource classes based
on organizational aspects). thus clarifying organizational issues such as responsibil-ity, availability, and authorization. resources, ranging from humans to devices, form
the organizational population and are allocated to roles and groups. the data perspec-
tive deals with controlandproduction data . control data are data introduced solely
forwfmpurposes,e.g.,variablesintroducedforroutingpurposes.productiondataare
information objects (e.g., documents, forms, and tables) whose existence does not de-
pend onwfm.thetaskperspective describestheelementary operations performedby
resources while executing a task for a speci ﬁc case. in the operational perspective the
elementary actions are described. these actions are often executed using applicationsrangingfromatexteditortocustombuildapplicationstoperformcomplexcalculations.
typically, these applications create, read, or modify control and production data in the
information perspective.
thefocusofthistutorialwillbeonthecontrol- ﬂowperspective.clearly,thisisthe
mostdominantperspective.moreover,petrinetscancontributemosttothisperspective.
2.2 petri nets
this section introduces the basic petri net terminology and notations. readers familiar
with petrinets can skip thissection.
1
theclassicalpetrinetisadirectedbipartitegraphwithtwonodetypescalled places
andtransitions . the nodes are connected via directed arcs. connections between two
nodesofthesametypearenotallowed.placesarerepresentedbycirclesandtransitions
by rectangles.
deﬁnition 1 (petri net). a petri net isa triple (p, t, f ):
-pisaﬁnite setof places,
-tisaﬁnite setof transitions ( p∩t=∅),
-f⊆(p×t)∪(t×p)isa set of arcs ( ﬂow relation)
1note that states are represented by weighted sums and note the de ﬁnition of (elementary)
(conﬂict-free)paths.a place pis called an input place of a transition tiff there exists a directed arc from
ptot. place pis called an output place of transition tiff there exists a directed arc
from ttop. we use •tto denote the set of input places for a transition t. the notations
t•,•pandp•have similar meanings, e.g., p•is the set of transitions sharing pas an
input place. note that we do not consider multiple arcs from one node to another. inthe context of work ﬂow procedures it makes no sense to have other weights, because
places correspond to conditions.
at any time a place contains zero or more tokens, drawn as black dots. the state,
oftenreferredtoasmarking,isthedistributionoftokensoverplaces,i.e., m∈p→in.
wewillrepresentastateasfollows: 1p
1+2p2+1p3+0p4isthestatewithonetokenin
place p1, two tokens in p2, one token in p3and no tokens in p4. we can also represent
thisstateasfollows: p1+2p2+p3.tocomparestateswede ﬁneapartialordering.for
any two states m1andm2,m1≤m2iffforall p∈p:m1(p)≤m2(p)
the number of tokens may change during the execution of the net. transitions are
the active components in a petri net: they change the state of the net according to the
following ﬁring rule:
(1) a transition tis said to be enablediff each input place poftcontains at least one
token.
(2) anenabledtransitionmay ﬁre.iftransition tﬁres,then tconsumes onetokenfrom
each input place poftandproduces one token foreach output place poft.
given a petri net (p, t, f )and a state m1,we have the following notations:
-m1t→m2:transition tisenabledinstate m1andﬁringtinm1resultsinstate m2
-m1→m2:there isa transition tsuch that m1t→m2
-m1σ→mn: theﬁring sequence σ=t1t2t3...t n−1leads from state m1to state
mnvia a (possibly empty) set of intermediate states m2, ...m n−1, i.e., m1t1→
m2t2→...tn−1→mn
a state mnis called reachable from m1(notation m1∗→mn) iff there is a ﬁring
sequence σsuch that m1σ→mn. note that the empty ﬁring sequence is also allowed,
i.e.,m1∗→m1.
we use (pn,m )to denote a petri net pnwith an initial state m. a state m/primeis a
reachable state of(pn,m )iffm∗→m/prime.
let us de ﬁne some standard properties for petri nets. first, we de ﬁne properties
related to the dynamics ofa petrinet, then we give some structural properties.
deﬁnition 2 (live). a petri net (pn,m )is live iff, for every reachable state m/primeand
every transition tthere isa state m/prime/primereachable from m/primewhich enables t.
a petri net is structurally live if there exists an initial state such that the net islive.
deﬁnition 3 (bounded, safe). a petri net (pn,m )is bounded iff for each place p
there is a natural number nsuch that for every reachable state the number of tokens in
pis less than n. the net is safe iff for each place the maximum number of tokens does
not exceed 1.a petri net is structurally bounded ifthe net isbounded for any initiallystate.
deﬁnition 4 (well-formed). a petri net pnis well-formed iff there is a state msuch
that (pn,m )islive and bounded.
paths connect nodes by a sequence of arcs.
deﬁnition 5 (path,elementary,con ﬂict-free). let pnbeapetrinet.apath cfrom
a node n1to a node nkis a sequence /angbracketleftn1,n2,...,n k/angbracketrightsuch that /angbracketleftni,ni+1/angbracketright∈ffor
1≤i≤k−1.cis elementary iff, for any two nodes niandnjon c, i/negationslash=j⇒
ni/negationslash=nj.cis conﬂict-free iff, for any place njoncand any transition nionc,
j/negationslash=i−1⇒nj/negationslash∈•ni.
forconvenience,weintroducethealphabetoperator αonpaths.if c=/angbracketleftn1,n2,...,n k/angbracketright,
thenα(c)={n1,n2,...,n k}.
deﬁnition 6 (stronglyconnected). apetrinetisstronglyconnectediff,foreverypair
of nodes (i.e.,places and transitions) xandy,there isa path leading from xtoy.
deﬁnition 7 (free-choice). apetrinetisafree-choicepetrinetiff,foreverytwotran-
sitions t1andt2,•t1∩•t2/negationslash=∅implies •t1=•t2.
deﬁnition 8 (state machine). a petri net is state machine iff each transition has ex-
actly one input and one output place.
deﬁnition 9 (s-component). a subnet pn s=(ps,ts,fs)is called an s-component
ofapetrinet pn =(p, t, f )ifps⊆p,ts⊆t,fs⊆f,pn sisstronglyconnected,
pn sisastatemachine,andforevery q∈psandt∈t:(q,t)∈f⇒(q,t)∈fsand
(t, q)∈f⇒(t, q)∈fs.
deﬁnition 10 (s-coverable). a petri net is s-coverable iff for any node there exist an
s-component which contains thisnode.
see [30,63] for a more elaborate introduction to these standard notions.
2.3 wf-nets
in figure 3 we indicated that a work ﬂow has (at least) three dimensions. the control-
ﬂow dimension is the most prominent one, because the core of any work ﬂow system
is formed by the processes it supports. in the control- ﬂow dimension building blocks
such as the and-split, and-join, or-split, and or-join are used to model sequen-
tial, conditional, parallel and iterative routing [55]. clearly, a petri net can be used to
specify the routing of cases. tasksare modeled by transitions and causal dependencies
are modeled by places and arcs. in fact, a place corresponds to a condition which can
be used as pre- and/or post-condition for tasks. an and-split corresponds to a transi-
tion with two or more output places, and an and-join corresponds to a transition withtwo or more input places. or-splits/or-joins correspond to places with multiple out-
going/ingoing arcs. moreover, in [2] it is shown that the petri net approach also allows
foruseful routing constructs absent inmany wfm systems.
a petri net which models the control- ﬂow dimension of a work ﬂow, is called a
workflownet (wf-net).itshouldbenotedthatawf-netspeci ﬁesthedynamicbehav-
iorof a single case in isolation.deﬁnition 11 (wf-net). a petri net pn =(p, t, f )is a wf-net (work ﬂow net) if
and only if:
(i) there isone source place i∈psuch that •i=∅.
(ii) there isone sink place o∈psuch that o•=∅.
(iii) every node x∈p∪tison a path from itoo.
a wf-net has one input place ( i) and one output place ( o) because any case handled
by the procedure represented by the wf-net is created when it enters the wfm systemand is deleted once it is completely handled by the system, i.e., the wf-net speci ﬁes
the life-cycle of a case. the third requirement in de ﬁnition 11 has been added to avoid
“danglingtasksand/orconditions ”,i.e.,tasksandconditionswhichdonotcontributeto
the processing of cases.
given the de ﬁnition of a wf-net itiseasy derive the following properties.
proposition 1 (properties of wf-nets). let pn =(p, t, f )be petri net.
–ifpnis wf-net with source place i, then for any place p∈p:•p/negationslash=∅orp=i,
i.e.,iisthe only source place.
–ifpniswf-netwithsinkplace o,thenforanyplace p∈p:p•/negationslash=∅orp=o,i.e.,
oisthe only sink place.
–ifpnis a wf-net and we add a transition t
∗topnwhich connects sink place o
with source place i(i.e.,•t∗={o}andt∗•={i}), then the resulting petri net is
strongly connected.
–ifpnhas a source place iand a sink place oand adding a transition t∗which
connects sink place owith source place iyields a strongly connected net, then
every node x∈p∪tison a path from itooinpnand pnisa wf-net.
figure4showsanexampleofanorderhandlingprocessmodeledintermsofawf-
net. as indicated before cases are represented by tokens and in figure 4 the token in
startcorresponds to an order. task registeris represented by a transition bearing the
same name. from a routing point of view it acts as a so-called and-split (two out-
going arcs) and is enabled in the state shown. if a person executes this task, the token
is removed from place startand two tokens are produced: one for c0and one for c2.
then, in parallel, two tasks are enabled: checkavailability andsendbill. depending
on the eagerness of the workers executing these two tasks either checkavailability or
sendbillis executed ﬁrst. suppose checkavailability is executed ﬁrst. based on the
outcome of this task a choice is made. this is re ﬂected by the fact that three arcs are
leavingc1. if the ordered goods are available, they can be shipped, i.e., ﬁringinstock
enablestask shipgoods.iftheyarenotavailable,eitherareplenishmentorderisissued
ornot.firing outofstockreplenablestask replenish.firingoutofstocknoreplskips
taskreplenish. note that checkavailability , placec1and the three transitions instock,
outofstockrepl, andoutofstocknorepltogether form a so-called or-split:as a re-
sult of this construct one token is produced for either c3,c4,o rc5. suppose that not
all ordered goods are available, but the appropriate replenishment orders were alreadyissued. a token is produced for c3and taskupdatebecomes enabled. suppose that at
this point in time task send
billis executed, resulting in the state with a token in c3
andc6. the token in c6is input for two tasks. however, only one of these tasks can bestart register
send_billreceive_paymentarchiveship_goodscheck_availability
replenishupdate
reminderendc1
c2c3
c4
c5
c6c7
c8c0out_of_stock_no_repl
out_of_stock_repl
in_stock
fig.4.wf-net.
executed and in this state only receivepaymentis enabled. task receivepaymentcan
beexecutedthemomentthepaymentisreceived.task reminder isanand-join/and-
split and is blocked until the bill is sent and the goods have been shipped. however, itis only possible to send a reminder if the goods have been actually shipped. assume
that in the state with a token in c3andc6taskupdateis executed. this task does not
require human involvement and is triggered by a message of the warehouse indicatingthat relevant goods have arrived. again check
availability is enabled. suppose that this
taskisexecutedandtheresultispositive,i.e.,thepathvia instockistaken.intheresult-
ing stateshipgoodscan be executed. now there is a token in c6andc7thus enabling
taskreminder. executing task reminder enables the task sendbillfor the second time.
a new copy of the bill is sent with the appropriate text. it is possible to send several
reminders by alternating reminder andsendbill. however, let us assume that after the
ﬁrst loop the customer pays resulting in a state with a token in c7andc8. in this state,
the and-join archiveis enabled and executing this task results in the ﬁnal state with a
token inend.
figure4showssomeofthelimitationsofwf-nets.firstofall,theconstructinvolv-
ingcheckavailability ,placec1andthethreetransitions instock,outofstockrepl,and
outofstocknoreplis rather complex for a simple concept as a choice out of three
alternatives. second, the diagram does not show whythings are happening. the text
suggests that some of the tasks are executed by people while others are triggered by
external entities or temporal conditions. unfortunately, this information is missing in
figure 4. finally, the wf-net does not show the other perspectives. the ﬁrst two prob-
lemscanbesolvedusingsome “syntacticalsugaring ”(cf.figure5).thethirdproblem
willnotbeaddressed inthistutorial.hereweabstractfromtheotherperspectives. the
interested reader isreferred to [12] for modeling the resource perspective.start register
send_billreceive_paymentarchiveship_goods check_availabilityreplenish
update
reminderendc1
c2c3
c4
c5
c6c7
c8
fig.5.wf-net extended with some “syntactical sugaring ”to denote and/or-splits/joins and
triggers.
figure 5 shows the same process as the one depicted in figure 4. however, every
task can be an and/or-join - and/or-split. the semantics of a transition is and-
join - and-split. choices can be modeled using places with multiple outgoing arcs.
however, the intuition of a task resulting in a choice is better re ﬂected by the nota-
tion used in figure 5: the construct involving checkavailability , placec1and the three
transitions instock,outofstockrepl, andoutofstocknoreplis replaced by a single
taskcheckavailability using the notation for an or-split. note that any wf-net with
or-splits can be automatically translated into standard wf-net (i.e., a classical petri
net). figure 5 also shows three triggers symbols: (1) an arrow denoting a user trigger,
(2) an envelope denoting an external trigger, and (3) a clock denoting a time trigger.these three triggers symbols denote that the corresponding tasks need a trigger to be
executed, e.g., the tasks bearing an arrow symbol require a user to perform the corre-
sponding activity. task receive payment canonly beexecuted afterthepayment trigger
arrives. task reminder can only be executed after a speci ﬁed period. although triggers
areextremelyimportant,wewillnotformalizetheconcept.forthereaderinterestedin
the topic we refer to [28,34] fora discussion on the reactive nature of wfm systems.
the very simple wf-net shown in figure 5 shows some of the routing constructs
relevant for business process modeling. sequential, parallel, conditional, and iterativerouting are present in this model. there are also more advanced constructs such as
the choice between receive
paymentandreminder. this is a so-called deferred choice
(also referred to as implicit choice) since it is not resolved by the system but by theenvironment of the system. the moment the bill is sent, it is undetermined whether
receive
payment orreminder will be the next step in the process. another advanced
constructisthefactthattask reminder isblockeduntilthegoodshavebeenshipped.thelatter construct is a so-called milestone . the reason that we point out both constructs is
thatmanysystemshaveproblemssupportingtheseratherfundamentalprocesspatterns.in section 5.1 we willdiscuss these patterns in more detail.
2.4 exercise: modeling a complaints handling process in terms of a wf-net
toconcludethissection,wegiveasmallexercise.modelthecomplaintshandlingwork-
ﬂowofatravelagencyintermsofawf-net,i.e.,constructadiagramsimilartofigure5.
each year the travel agency has to process many customer complaints. there is a
special department for the processing of complaints (department c). there is also aninternal department called logistics (department l) which takes care of the registra-
tion of incoming complaints and the archiving of processed complaints. the following
procedure isused to handle these complaints.
anemployeeofdepartmentl ﬁrstregisterseveryincomingcomplaint.afterregis-
tration a form is sent to the customer with questions about the nature of the complaint.this is done by an employee of department c. there are two possibilities: the cus-
tomer returns the form within two weeks or not. if the form is returned, it is processed
automatically resulting in a report which can be used for the actual processing of thecomplaint. if the form is not returned on time, a time-out occurs resulting in an empty
report. note that this does not necessarily mean that the complaint is discarded. af-
ter registration, i.e., in parallel with the form handling, the preparation for the actualprocessing isstarted.
first, the complaint is evaluated by a complaint manager of department c. evalua-
tion shows that either further processing is needed or not. note that this decision does
not depend on the form handling. if no further processing is required and the form is
handled, the complaint is archived. if further processing is required, an employee ofthecomplaintsdepartmentexecutesthetask “processcomplaint ”(thisistheactualpro-
cessing where certain actions are proposed if needed). for the actual processing of the
complaint, the report resulting from the form handling is used. note that the report canbe empty. the result of task process complaint is checked by a complaint manager. if
theresultisnotok,taskprocesscomplaintisexecutedagain.thisisrepeateduntilthe
resultisacceptable.iftheresultisaccepted,anemployeeofthedepartmentcexecutesthe proposed actions. after this the processed complaint is archived by an employee of
department l.
give the wf-net, i.e., model the work ﬂow by making a process de ﬁnition in terms
of a petri net. for the solution to this exercise we refer to [12] or the corresponding
wwwsite with course material: http://www.workflowcourse.com .
3 work ﬂowanalysis
one of the advantages of using petri nets for work ﬂow modeling is the availability of
many petri-net-based analysis techniques. in this section, we focus on the veri ﬁcation
of wf-nets. the correctness criterion used is the so-called soundness property .w e
will show how this property can be checked and discuss a veri ﬁcation tool speci ﬁcally
designed forwork ﬂow analysis.3.1 veri ﬁcation, validation, and performance analysis
the correctness, effectiveness, and ef ﬁciency of the business processes supported by
the wfm system are vital to the organization. a work ﬂow process de ﬁnition which
contains errors may lead to angry customers, back-log, damage claims, and loss ofgoodwill.flawsinthedesignofawork ﬂowdeﬁnitionmayalsoleadtohighthroughput
times, low service levels, and a need for excess capacity. this is why it is important to
analyzea workﬂow process de ﬁnition before it is put into production. basically, there
are three types of analysis:
–validation , i.e.,testing whether the work ﬂow behaves as expected,
–veriﬁcation, i.e.,establishing the correctness of a work ﬂow, and
–performanceanalysis ,i.e.,evaluatingtheabilitytomeetrequirementswithrespect
to throughput times,service levels, and resource utilization.
validation can be done by interactive simulation: a number of ﬁctitious cases are fed
to the system to see whether they are handled well. for veri ﬁcation and performance
analysis more advanced analysis techniques are needed. fortunately, many powerful
analysistechniqueshavebeendevelopedforpetrinets([30,63]).linearalgebraictech-niques can be used to verify many properties, e.g., place invariants, transition invari-
ants, and (non-)reachability. coverability graph analysis, model checking, and reduc-
tion techniques can be used to analyze the dynamic behavior of a petri net. simulationand markov-chain analysis can be used for performance evaluation (cf. [59,63]). the
abundanceofavailableanalysistechniquesshowsthatpetrinetscanbeseenasasolver
independent medium between the design of the work ﬂow process de ﬁnition and the
analysis of the resulting work ﬂow.
3.2 veri ﬁcation of the control- ﬂow perspective
in this tutorial we restrict ourselves to workﬂow veriﬁcation, i.e., we will not discuss
techniques for validation and performance analysis. moreover, we restrict ourselves to
thecontrolﬂowperspective .althougheachoftheperspectivesmentionedinsection2.1
is relevant, the general focus of this tutorial is on control ﬂow perspective, i.e., we use
wf-nets as a starting point and demonstrate that petri-net-based analysis techniques
can be used toverify the correctness of a work ﬂow process.
weabstractfromthe resourceperspective because,giventoday ’sworkﬂowtechnol-
ogy, at any time there is only one resource working on a task which is being executed
for a speci ﬁc case. in today ’s wfm systems it is not possible to specify that several
resources are collaborating in executing a task. note that even if multiple persons are
executing one task, e.g., writing a report, only one person is allocated to that task from
theperspectiveofthewfmsystem:thisisthepersonthatselectedtheworkitemfromthe in-basket (i.e., the electronic worktray). since a person is working on one task at a
timeandeachtaskiseventuallyexecutedbyoneperson(althoughitmaybeallocatedto
agroup apeople),itissuf ﬁcienttocheck whether allresourceclasseshave atleastone
resource. in contrast to many other application domains such a ﬂexible manufacturing
systems, anomalies such as a deadlock resulting from locking problems are not possi-
ble.therefore,fromtheviewpointofveri ﬁcation,i.e.,analyzingthelogicalcorrectnessofawork ﬂow, itisreasonable toabstractfromresources.however, ifinthefuturecol-
laborativefeaturesareexplicitlysupportedbythework ﬂowmanagementsystem(i.e.,a
tightintegrationofgroupwareandwork ﬂowtechnology),thentheresourceperspective
should be taken into account.
we partly abstract from the data perspective . the reason we abstract from produc-
tion data is that these are outside the scope of the wfm system. these data can be
changedatanytimewithoutnotifyingthewfmsystem.infacttheirexistencedoesnot
even depend upon the work ﬂow application and they may be shared among different
workﬂows,e.g.,thebill-of-materialinmanufacturingissharedbyproduction,procure-
ment, sales, and quality control processes. the control data used by the wfm system
toroutecasesaremanagedbythewfmsystem.however,someofthesedataaresetorupdatedbyhumansorapplications.forexample,adecisionismadebyamanagerbased
on intuition or a case is classi ﬁed based on a complex calculation involving production
data. clearly, the behavior of a human or a complex application cannot be modeled
completely. therefore, some abstraction is needed to incorporate the data perspective
when verifying a given work ﬂow. the abstraction used in this section is the following.
since control data (i.e., work ﬂow attributes such as the age of a customer, the depart-
ment responsible, or the registration date) are only used for the routing of a case, we
incorporate the routing decisions but not the actual data. for example, the decision toacceptortorejectaninsuranceclaimistakenintoaccount,butnottheactualdatawhere
this decision is based on. therefore, we consider each choice to be a non-deterministic
one.thereareotherreasonsforabstractingfromthework ﬂowattributes.ifweareable
to prove soundness (i.e., the correctness criterion used in this section) for the situation
without work ﬂow attributes, it will also hold for the situation with work ﬂow attributes
(assuming certain fairness properties). last but not least, we abstract from triggers andworkﬂow attributesbecause itallows ustouse ordinary petri nets(i.e.,p/t nets)rather
than high-level petri nets. from an analysis point of view, this is preferable because of
the availability of ef ﬁcient algorithms and powerful analysis tools.
for similar reasons we (partly) abstract from the taskandoperation perspectives .
we consider tasks to be atomic and abstract from the execution of operations inside
tasks. the wfm system can only launch applications or trigger people and monitorthe results. it cannot control the actual execution of the task. therefore, from the view-
point of veri ﬁcation, it is reasonable to focus on the control- ﬂow perspective. in fact, it
sufﬁces to consider the life cycle of one case in isolation. the only way cases interact
directly is through the competition for resources and the sharing of production data.
(note that control data are strictly separated.) therefore, if we abstract from resourcesand data, it suf ﬁces to consider one case in isolation. the competition between cases
forresources isonly relevant forperformance analysis.
3.3 soundness
in this section we summarize some of the basic results for wf-nets presented in [1,3,
4].
the three requirements stated in de ﬁnition 11 can be veri ﬁed statically, i.e., they
onlyrelatetothestructureofthepetrinet.however,thereisanotherrequirementwhich
should be satis ﬁed:forany case, theprocedure willterminate eventually and the moment the pro-
cedureterminatesthereisatokeninplaceoandalltheotherplacesareempty.
moreover, there should be no dead tasks, i.e., it should be possible to execute an arbi-
trary task by following the appropriate route though the wf-net. these two additional
requirements correspond to the so-called soundness property .
deﬁnition 12 (sound). aproceduremodeledbyawf-net pn =(p, t, f )issoundif
and only if:
(i) for every state mreachable from state i, there exists a ﬁring sequence leading
from state mto state o.formally:2
∀m(i∗→m)⇒(m∗→o)
(ii) state ois the only state reachable from state iwith at least one token in place o.
formally:
∀m(i∗→m∧m≥o)⇒(m=o)
(iii) there are no dead transitionsin (pn,i). formally:
∀t∈t∃m,m/primei∗→mt→m/prime
note that the soundness property relates to the dynamics of a wf-net. the ﬁrst re-
quirement in de ﬁnition 12 states that starting from the initial state (state i), it is always
possible to reach the state with one token in place o(stateo). if we assume a strong
notion of fairness, then the ﬁrst requirement implies that eventually state ois reached.
strong fairness means in every in ﬁniteﬁring sequence, each transition ﬁres inﬁnitely
often. the fairness assumption is reasonable in the context of wfm: all choices are
made(implicitlyorexplicitly)byapplications,humansorexternalactors.clearly,they
should not introduce an in ﬁnite loop. note that the traditional notions of fairness (i.e.,
weaker forms of fairness with just local conditions, e.g., if a transition is enabled in-
ﬁnitely often, it will ﬁre eventually) are not suf ﬁcient. see [3,53] for more details. the
secondrequirementstatesthatthemomentatokenisputinplace o,alltheotherplaces
shouldbeempty.thelastrequirementstatesthattherearenodeadtransitions(tasks)in
the initial state i.
the wf-net shown in figure 5 is sound. this can be veri ﬁed by checking the three
requirementsstatedinde ﬁnition12.notethatfigure5showstriggersandusessyntac-
ticsugaring.forveri ﬁcationwewillabstractfromthisandconsiderthepurewf-netas
shown in figure 4.
figure 6 shows a wf-net which is not sound. there are several de ﬁciencies. if
timeout1andprocessing 2ﬁre ortimeout2andprocessing 1ﬁre, the wf-net will
notterminateproperlybecauseatokengetsstuckin c4orc5.iftimeout1andtimeout2
ﬁre, then the task processing nokwill be executed twice and because of the presence
of two tokens in othe moment oftermination isnot clear.
2note that there is an overloading of notation: the symbol iis used to denote both the place i
andthestatewithonly onetoken inplace i(seesection2.2).i register
processing_okprocessing_nok processing_1c1
c2c3time_out_1
o
processing_2time_out_2c4
c5
fig.6.another wf-net fortheprocessingofcomplaints.
given a wf-net pn =(p, t, f ), we want to decide whether pnis sound. in
[1] we have shown that soundness corresponds to liveness and boundedness. to linksoundness to liveness and boundedness, we de ﬁne an extended net
pn =(p,t,f).
pnis the petri net obtained by adding an extra transition t∗which connects oandi.
the extended petri net pn =(p,t,f)is deﬁned as follows: p=p,t=t∪{t∗},
andf=f∪{ (o, t∗),(t∗,i)}. in the remainder we will call such an extended net
theshort-circuited net of pn. the short-circuited net allows for the formulation of the
following theorem.
theorem 1. a wf-net pnissound ifand only if (pn,i)islive and bounded.
proof.see [1]. /intersectionsq/unionsq
this theorem shows that standard petri-net-based analysis techniques can be used to
verify soundness.
in literature there exist many variants of the “classical”notion of soundness used
here.julianedehnert usesthenotionofrelaxed soundness where propertermination is
possiblebutnotguaranteed[28,34].themainideaisthattheschedulerofthework ﬂow
system should avoid problems like deadlocks etc. in [54] ekkart kindler et al. de ﬁne
variants of soundness tailored towards interorganizational work ﬂows. kees van hee et
al. [44] de ﬁne a notion of soundness where multiple tokens in the source place are
considered. a wf-net is k-sound if it “behaves well ”when there are ktokens in place
i, i.e., no deadlocks and in the end there are ktokens in place o. robert van der toorn
uses the same concept in [71]. in [18,7] stronger notions of soundness are used and
places have to be safe. another notion of soundness is used in [51,52] where there isnotasinglesinkplacebutpotentiallymultiplesinktransitions.see[71]fortherelation
between these variants of the same concept. other references using (variants of) thesoundnesspropertyinclude[41,60].forsimplicitywerestrictourselvestotheclassical
notion of soundness de ﬁned in de ﬁnition 12.
3.4 structural characterization of soundness
theorem 1 gives a useful characterization of the quality of a work ﬂow process de ﬁni-
tion. however, there are a number ofproblems:
–foracomplexwf-netitmaybeintractabletodecidesoundness.(forarbitrarywf-
nets liveness and boundedness are decidable but also expspace-hard, cf. cheng,esparza and palsberg [26].)
–soundnessisaminimalrequirement.readabilityandmaintainabilityissuesarenot
addressed by theorem 1.
–theorem1doesnotshowhowanon-soundwf-netshouldbemodi ﬁed,i.e.,itdoes
not identify constructs which invalidate the soundness property.
these problems stem from the fact that the de ﬁnition of soundness relates to the dy-
namics of a wf-net while the work ﬂow designer is concerned with the static structure
of the wf-net. therefore, it is interesting to investigate structural characterizations of
sound wf-nets. for this purpose we introduce three interesting subclasses of wf-nets:
free-choice wf-nets ,well-structured wf-nets , ands-coverable wf-nets .
free-choice wf-nets most of the wfm systems available at the moment, abstract
from states between tasks, i.e., states are not represented explicitly. these wfm sys-
tems use building blocks such as the and-split, and-join, or-split and or-join to
specify work ﬂow procedures. the and-split and the and-join are used for parallel
routing. the or-split and the or-join are used for conditional routing. because these
systems abstract from states, every choice is made insidean or-split building block.
if we model an or-split in terms of a petri net, the or-split corresponds to a num-
ber of transitions sharing the same set of input places. this means that for these wfm
systems,awork ﬂowprocedurecorrespondstoafree-choicepetrinet(cf.de ﬁnition7).
itiseasytoseethataprocessde ﬁnitioncomposedofand-splits,and-joins,or-
splits and or-joins is free-choice. if two transitions t
1andt2share an input place
(•t1∩•t2/negationslash=∅), then they are part of an or-split, i.e., a “free choice ”between a
number of alternatives. therefore, the sets of input places of t1andt2should match
(•t1=•t2). figure 6 shows a free-choice wf-net. the wf-net shown in figure 4 is
not free-choice; archiveandreminder share an input place but the two corresponding
input sets differ.
we have evaluated many wfm systems and only some of these systems (e.g.,
cosa [66]) allow for a construct which is comparable to a non-free choice wf-net.therefore,itmakessensetoconsiderfree-choicepetrinetsinmoredetail.clearly,par-
allelism, sequential routing, conditional routing and iteration can be modeled without
violatingthefree-choiceproperty.anotherreasonforrestrictingwf-netstofree-choicepetri nets is the following. if we allow non-free-choice petri nets, then the choice be-
tweencon ﬂictingtasks maybeinﬂuencedbytheorderinwhichtheprecedingtasksare
executed. the routing of a case should be independent of the order in which tasks are
executed. a situation where the free-choice property is violated is often a mixture of
parallelism and choice. figure 7 shows such a situation. firing transition t1introduces
parallelism. although there is no real choice between t2andt5(t5is not enabled), the
parallel execution of t2andt3results in a situation where t5is not allowed to occur.
however,iftheexecutionof t2isdelayeduntil t3hasbeenexecuted,thenthereisareal
choicebetween t2andt5.inouropinionparallelismitselfshouldbeseparatedfromthe
choice between two or more alternatives. therefore, we consider the non-free-choice
construct shown in figure 7 to be improper. in literature, the term confusion is often
used to referto the situation shown in figure 7.
t2
t3it4
t5t1
oc1
c2c3
c4
fig.7.anon-free-choice wf-net containing a mixtureofparallelismand choice.
free-choice petri nets have been studied extensively [30,29,35,43], because they
seemtobeagoodcompromisebetweenexpressivepowerandanalyzability.itisaclass
of petri nets for which strong theoretical results and ef ﬁcient analysis techniques exist.
forexample,thewell-knownranktheorem[30]enablesustoformulatethefollowing
corollary.
corollary 1. the following problem can be solved in polynomial time.
given a free-choice wf-net, to decide if itissound.
proof.let pnbeafree-choicewf-net.theshort-circuitednet pnisalsofree-choice.
therefore, the problem of deciding whether (pn,i)is live and bounded can be solved
inpolynomialtime(ranktheorem[30]).bytheorem1,thiscorrespondstosoundness.
/intersectionsq/unionsq
corollary 1 shows that, for free-choice nets, there are ef ﬁcient algorithms to decide
soundness. moreover, a sound free-choice wf-net is guaranteed to be safe (given an
initialstate with justone token in i).
lemma 1. a sound free-choice wf-net issafe.
proof.let pnbe a sound free-choice wf-net. pnis the petri net pnextended with
a transition connecting oandi.pnis free-choice and well-formed. hence, pnis s-
coverable[30],i.e.,eachplaceispartofanembeddedstronglyconnectedstate-machine
component.sinceinitiallythereisjustonetoken (pn,i)issafeandsois (pn,i)./intersectionsq/unionsqsafenessisadesirableproperty,becauseitmakesnosensetohavemultipletokensina
place representing a condition. a condition iseither true (1 token) or false (no tokens).
although most wfm systems only allow for free-choice work ﬂows, free-choice
wf-nets are not a completely satisfactory structural characterization of “good”work-
ﬂows. on the one hand, there are non-free-choice wf-nets which correspond to sen-
sible work ﬂows (cf. figure 4). on the other hand there are sound free-choice wf-nets
which make no sense. nevertheless, the free-choice property is a desirable property. if
a workﬂow can be modeled as a free-choice wf-net, one should do so. a work ﬂow
speciﬁcationbasedonafree-choicewf-netcanbeenactedbymostwork ﬂowsystems.
moreover,afree-choicewf-netallowsforef ﬁcientanalysistechniquesandiseasierto
understand. non-free-choice constructs such as the construct shown in figure 7 are apotential source of anomalous behavior (e.g.,deadlock) which isdif ﬁcult to trace.
well-structured wf-nets another approach to obtain a structural characterization
of“good”workﬂows, is to balance and/or-splits and and/or-joins. clearly, two
parallelﬂows initiated by an and-split, should not be joined by an or-join. two al-
ternative ﬂows created via an or-split, should not be synchronized by an and-join.
as shown in figure 8, an and-split should be complemented by an and-join and an
or-splitshould be complemented by an or-join.
and-split and-join and-split
and-join or-split or-joinor-join
or-split
fig.8.good and bad constructions.
one of the de ﬁciencies of the wf-net shown in figure 6 is the fact that the and-
splitregisteris complemented by the or-join c3or the or-join o. to formalize the
concept illustrated in figure 8 we give the following de ﬁnition.
deﬁnition 13 (well-handled). apetrinet pniswell-handlediff,foranypairofnodes
xandysuchthatoneofthenodesisaplaceandtheotheratransitionandforanypair
ofelementarypaths c1andc2leadingfrom xtoy,α(c1)∩α(c2)={x, y}⇒ c1=
c2.
note that the wf-net shown in figure 6 is not well-handled. well-handledness can
be decided in polynomial time by applying a modi ﬁed version of the max- ﬂow min-
cut technique. a petri net which is well-handled has a number of nice properties, e.g.,
strong connectedness and well-formedness coincide.lemma 2. a strongly connected well-handled petri net iswell-formed.
proof.let pnbe a strongly connected well-handled petri net. clearly, there are no
circuits that have pt-handles nor tp-handles [36]. therefore, the net is structurally
bounded (see theorem 3.1 in [36]) and structurally live (see theorem 3.2 in [36]).hence, pniswell-formed. /intersectionsq/unionsq
clearly, well-handledness is a desirable property for any wf-net pn. moreover, we
also require the short-circuited
pnto be well-handled. we impose this additional re-
quirement for the following reason. suppose we want to use pnas a part of a larger
wf-net pn/prime.pn/primeis the original wf-net extended with an “undo-task ”. see figure 9.
transition undocorrespondstotheundo-task,transitions t1andt2havebeenaddedto
make pn/primeawf-net.itisundesirablethattransition undoviolatesthewell-handledness
property of the original net. however, pn/primeis well-handled iff pnis well-handled.
therefore, we require pnto be well-handled. we use the term well-structured to refer
to wf-nets whose extension iswell-handled.
i ot2 t1undo
pnpn’:
fig.9.thewf-net pn/primeiswell-handled iff pniswell-handled.
deﬁnition 14 (well-structured). awf-net pniswell-structurediff pniswell-han-
dled.
well-structured wf-nets have a number of desirable properties. soundness can be ver-
iﬁed in polynomial time and a sound well-structured wf-net is safe. to prove these
properties we use some of the results obtained for elementary extended non-self con-
trolling nets .
deﬁnition 15 (elementary extended non-self controlling). a petri net pnis ele-
mentaryextendednon-selfcontrolling(ensc)iff,foreverypairoftransitions t1andt2
such that •t1∩•t2/negationslash=∅, there does not exist an elementary path cleading from t1to
t2such that •t1∩α(c)=∅.
theorem 2. let pnbe a wf-net. if pnis well-structured, then pnis elementary
extended non-self controlling.
proof.assume that pnis not elementary extended non-self controlling. this means
that there is a pair of transitions t1andtksuch that •t1∩•tk/negationslash=∅and there exist an
elementarypath c=/angbracketleftt1,p2,t2,...,p k,tk/angbracketrightleadingfrom t1totkand•t1∩α(c)=∅.letp1∈•t1∩•tk.c1=/angbracketleftp1,tk/angbracketrightandc2=/angbracketleftp1,t1,p2,t2,...,p k,tk/angbracketrightare paths
leading from p1totk. (note that c2is the concatenation of /angbracketleftp1/angbracketrightandc.) clearly, c1is
elementary. we will also show that c2is elementary. cis elementary, and p1/negationslash∈α(c)
because p1∈•t1. hence, c2is also elementary. since c1andc2are both elementary
paths, c1/negationslash=c2andα(c1)∩α(c2)={p1,tk}, we conclude that pnis not well-
handled. /intersectionsq/unionsq
t3 t5 t1t2 t4
oic2c1
c3c4
fig.10.awell-structured wf-net.
consider for example the wf-net shown in figure 10. the wf-net is well-structured
and, therefore, also elementary extended non-self controlling. however, the net is not
free-choice. nevertheless, it is possible to verify soundness for such a wf-net very
efﬁciently.
corollary 2. the following problem can be solved in polynomial time.
given a well-structured wf-net, to decide ifitissound.
proof.let pnbe a well-structured wf-net. the short-circuited net pnis elemen-
tary extended non-self controlling (theorem 2) and structurally bounded (see proof oflemma 2). for bounded elementary extended non-self controlling nets the problem of
deciding whether a given marking is live, can be solved in polynomial time (see [23]).
therefore, the problem of deciding whether (
pn,i)is live and bounded can be solved
in polynomial time.by theorem 1, thiscorresponds tosoundness. /intersectionsq/unionsq
lemma 3. a sound well-structured wf-net issafe.
proof.let pnbe the net pnextended with a transition connecting oandi.pnis
extended non-self controlling. pnis covered by state-machines (s-components), see
corollary 5.3 in [23]. hence, pnissafe and so is pn(see proof of lemma 1). /intersectionsq/unionsq
well-structuredwf-netsandfree-choicewf-netshavesimilarproperties.inbothcases
soundness can be veri ﬁed very ef ﬁciently and soundness implies safeness. in spite of
these similarities, there are sound well-structured wf-nets which are not free-choice(figure 10) and there are sound free-choice wf-nets which are not well-structured.
in fact, it is possible to have a sound wf-net which is neither free-choice nor well-
structured (figures 4 and 7).s-coverablewf-nets whataboutthesoundwf-netsshowninfigure4andfigure7?
the wf-net shown in figure 7 can be transformed into a free-choice well-structuredwf-netbyseparatingchoiceandparallelism.thewf-netshowninfigure4cannotbe
transformedintoafree-choiceorwell-structuredwf-netwithoutyieldingamuchmore
complex wf-net. place c7acts as some kind of milestone which is tested by the task
reminder. traditional wfm systems which do not make the state of the case explicit,
are not able to handle the work ﬂow speciﬁed by figure 4. only wfm systems such
as cosa [66] have the capability to enact such a state-based work ﬂow. nevertheless,
itisinteresting toconsider generalizations of free-choice and well-structured wf-nets:
s-coverable wf-nets can be seen as such a generalization.
deﬁnition 16 (s-coverable). a wf-net pnis s-coverable if the short-circuited net
pniss-coverable.
the wf-nets shown in figure 4 and figure 7 are s-coverable. the wf-net shown in
figure6isnots-coverable.thefollowingtwocorollariesshowthats-coverabilityisa
generalization of the free-choice property and well-structuredness.
corollary 3. a sound free-choice wf-net iss-coverable.
proof.the short-circuited net pnis free-choice and well-formed. hence, pnis s-
coverable (cf.[30]). /intersectionsq/unionsq
corollary 4. a sound well-structured wf-net iss-coverable.
proof. pnis extended non-self controlling (theorem 2). hence, pnis s-coverable
(cf.corollary 5.3 in [23]). /intersectionsq/unionsq
all the sound wf-nets presented in this tutorial are s-coverable. every s-coverable
wf-netissafe.theonlywf-netwhichisnotsound,i.e.,thewf-netshowninfigure6,
is not s-coverable. these and other examples indicate that there is a high correlationbetween s-coverability and soundness. it seems that s-coverability is one of the basic
requirements any work ﬂow process de ﬁnition should satisfy. from a formal point of
view,itispossibletoconstructwf-netswhicharesoundbutnots-coverable.typically,these nets contain places which do not restrict the ﬁring of a transition, but which are
not in any s-component. (see forexample figure 65 in [62].)from a practical point of
view, these wf-nets are to be avoided. wf-nets which are not s-coverable are dif ﬁcult
tointerpretbecausethestructuralanddynamicalpropertiesdonotmatch.forexample,
these nets can be live and bounded but not structurally bounded. there seems to be nopracticalneedforusingconstructswhichviolatethes-coverabilityproperty.therefore,
we consider s-coverability to be a basic requirement any wf-net should satisfy.
another way of looking at s-coverability is the following interpretation: s-com-
ponents corresponds to document ﬂows. to handle a work ﬂow several pieces of infor-
mation are created, used, and updated. one can think of these pieces of information
as physical documents, i.e., at any point in time the document is in one place in thewf-net. naturally, the information in one document can be copied to another docu-
ment while executing a task (i.e., transition) processing both documents. initially, all
documents are present but a document can be empty (i.e., corresponds to a blank piecepaper).itiseasytoseethatthe ﬂowofonesuchdocumentcorrespondsastatemachine
(assumingtheexistenceofatransition t∗).thesedocument ﬂowssynchronizeviajoint
tasks. therefore, the composition of these ﬂows yields an s-coverable wf-net. one
can think of the document ﬂows as threads. consider for example the short-circuited
net of the wf-net shown in figure 4. this net can be composed out of the followingtwo threads: (1) a thread corresponding to logistic subprocess (places start,c0,c1,c3,
c4,c5,c7,and end)and(2)athreadcorrespondingtotheactualprocessingofthecom-
plaint (places start,c2,c6,c8, and end). note that the tasks registerandarchiveare
used in both threads.
although a wf-net can, in principle, have exponentially many s-components, they
are quite easy to compute for work ﬂows encountered in practice (see also the above
interpretation of s-component as document ﬂows or threads). note that s-coverability
onlydependsonthestructureandthedegreeofconnectednessisgenerallylow(i.e.,the
incidencematrixofawf-nettypicallyhasfewnon-zeroentries).unfortunately,ingen-
eral,itisnotpossibletoverifysoundnessofans-coverablewf-netinpolynomialtime.the problem of deciding soundness for an s-coverable wf-net is pspace-complete.
for most applications this is not a real problem. typically, the number of tasks in one
workﬂow process de ﬁnition is less than 100 and the number of states is less than half
a million. tools using standard techniques such as the construction of the coverability
graph have no problems in coping with these work ﬂow process de ﬁnitions.
using the three structural characterizations the three structural characterizations
(free-choice, well-structured and s-coverable) turn out to be very useful for the analy-sis of work ﬂow process de ﬁnitions. based on our experience, we have good reasons to
believe that s-coverability is a desirable property any work ﬂow deﬁnition should sat-
isfy. constructs violating s-coverability can be detected easily and tools can be buildto help the designer to construct an s-coverable wf-net. s-coverability is a general-
ization of well-structuredness and the free-choice property (corollary 3 and 4). both
well-structuredness and the free-choice property also correspond to desirable proper-ties of a work ﬂow. a wf-net satisfying at least one one of these two properties can be
analyzedveryef ﬁciently.however,wehaveshownthattherearework ﬂowsthatarenot
free-choice and not well-structured. consider for example figure 4. the fact that task
registertestswhetherthereisatokenin c5,preventsthewf-netfrombeingfree-choice
orwell-structured.althoughthisisaverysensiblework ﬂow,mostwfmsystemsdonot
supportsuchanadvancedroutingconstruct.evenifoneisabletousestate-basedwork-
ﬂows (e.g., cosa) allowing for constructs which violate well-structuredness and the
free-choiceproperty,thenthestructuralcharacterizationsarestilluseful.ifawf-netisnot free-choice or not well-structured, one should locate the source which violates one
of these properties and check whether it is really necessary to use a non-free-choice or
anon-well-structuredconstruct.ifthenon-free-choiceornon-well-structuredconstructis really necessary, then the correctness of the construct should be double-checked, be-
causeitisapotentialsourceoferrors.thiswaythereadabilityandmaintainabilityofa
workﬂow process de ﬁnition can be improved.3.5 woﬂan
few tools aiming at the veri ﬁcation of work ﬂow processes exist. wo ﬂan [73,72] and
flowmake [64] are two notable exceptions. we have been working on wo ﬂan since
1997. figure 11 shows a screenshot of wo ﬂan. woﬂan combines state-of-the-art sci-
entiﬁc results with practical applications [73,72]. wo ﬂan can interface with leading
wfmsystemssuchasstaffware,mqserieswork ﬂowandcosabutalsopnml[24].
it can also interface with bpr-tools such as protos. work ﬂow processes designed us-
ing any of these tools can be veri ﬁed for correctness. it turns out that the challenge
is not to decide whether the design is sound or not. the real challenge is to provide
diagnostic information that guides the designer to the error. wo ﬂan also supports the
inheritance notions mentioned before. given two work ﬂow designs, wo ﬂan is able to
decidewhetheroneisasubclassoftheother.toolssuchaswo ﬂanillustratethebene ﬁts
of a more fundamental approach.
fig.11.a screenshotshowingthe veri ﬁcation and validation capabilities ofwo ﬂan.
3.6 exercise
consider the solution of the exercise given in section 2.4. verify whether the wf-net
is sound and make sure that there is an s-cover. a simple veri ﬁcation“web service ”is
provided via http://is.tm.tue.nl/research/woflan/ . this web service
uses woﬂan to verify whether a given process model is sound. use this web service or
download wo ﬂan to check the correctness of your solution.4 work ﬂowmanagementsystems
inthissectionweprovideinsightintothefunctionalityofexistingwfmsystems.first
we provide an overview of the work ﬂow market. then we introduce the typical archi-
tecture of a wfm system, followed by an example of a concrete system. again, we
conclude the section with an exercise.
4.1 overview
in section 1 we put wfm in a historical perspective and using figure 2 we discussed
the maturity of the bpm market. at this point in time hundreds of wfm/bpm prod-uctsareavailable.toillustratethisweusetwodiagramsofmichaelzurmuehlen[61].
figure12givesahistoricoverviewofof ﬁceautomationandwork ﬂowprototypes[61].
figure13providesahistoricoverviewofcommercialwfmsystems.thesetwo ﬁgures
showthat:(1)work ﬂowmanagementisnotsomethingthatstartedintheninetiesbutal-
readyintheseventieswiththeworkofellis( ofﬁcetalk,[32])andzisman( scoop,[78])
and(2)thenumberofcommercialsystemshasconsiderablygrowninrecentyears.notethatgiventhedynamicsofthework ﬂowmarket,itisdif ﬁculttokeepdiagramslikethe
one shown in figure 13 up-to-date. for example, figure 13 does not show recent sys-
tems like flower [22]. moreover, systems are often named different for commercialreasons.forexample,ibm ’smqserieswork ﬂow(formerlyknownasflowmark)was
recently renamed into websphere mq work ﬂow.
office automation prototypes scientific workflow systems
1980 1985 1990 1995 2000scoopbacktalk
daisyofficetalk-zero
meteormobilewidecrossflow
wasa wasa2officetalk-p
mentor
wiseinca
trams
panta rheiadome
worcosmariflow
apricotmelmac
worcraft
poise polymer d-polymer polyflowoval objectlens
wamodominoofficetalk-d
freeflowprominand
(esprit)
fig.12.historicoverview ofearly systemsandresearch prototypes(taken from[61]).
unfortunately, ﬁgures12and13donotshowtheincreasedmaturityofwfm/bpm
products. it also does not show that products target at different types of processes. a
well-knowclassi ﬁcationofwfmsystemsisgivenin[40]wheretheauthorsdistinguishcommercial workflow systems
1980 1985 1990 1995 2000exotica i - iii
flowmark mqseries workflowjflow
staffwarepavone
onestone domino workflowbea picarnotviewstar
digital proc.flo. altavista proc.flow
actionworkflowsni workpartyadminflow changengine workmanageropenpm flowjetverve versata
action coordinator
actionworks metro davincifilenet workflo visual workflo
filenet ensemblepanagon workflo
xerox inconcert tib/inconcertplexus floware banctec flowarencr processitnetscape pmms2 accelerate
teamware flowfujitsu iflowbeyond beyondmaildst awd
iabg prominanddec linkworkscosa baan ley cosa
fujitsu regattapegasus
leubanyan beyondmail
olivetti x_workfloworacle workflow digital  objectflowimageplus fms/fafvisualinfo
dst awdcontinuum
recognition int.wang sigmaeastmanwang workfloweistreamlucent mosaix
bluecross
blueshield
jcals
iplanet
fig.13.historicoverview ofcommercial work ﬂow management systems(taken from[61]).between ad-hoc, administrative, and production work ﬂows and discuss the continuum
from human-oriented to system-oriented wfm systems. however, we prefer to use themore recent classi ﬁcation shown in figure 14 todescribe the “workﬂow spectrum ”.
explicitly
structured
implicitly
structured
ad-hoc
structured
unstructured
data-driven process-drivenad-hoc workflow
groupwareproduction
workflow
case handling
fig.14.classiﬁcationofsystemsto supportwork processes.
figure 14 shows four types of systems: groupware, production work ﬂow, ad-hoc
workﬂow,andcase-handlingsystems.thesesystemsarecharacterizedintermsoftheir
“focus”(data-driven,processdriven,orboth)andtheir “degreeofstructuredness ”.tra-
ditional groupware products like lotos notes and ms exchange and production work-ﬂow systems like staffware and mqseries work ﬂow form two ends of a spectrum. as
figure 14 shows, traditional groupware products are data-driven (focus on the shar-
ing of information rather than the process) and support only unstructured processes.note that lotus notes and exchange are not “process-aware ”(unless components like
domino work ﬂow are added). production work ﬂow systems are process-aware and
aim at structured processes. in order to enact a work ﬂow using a production work ﬂow
system one needs to explicitly specify all possible routes. if something is not explic-
itly speciﬁed at design time, it is not possible. ad-hoc wfm systems like inconcert
(tibco), ensemble (filenet), and teamware flow (teamware group) allow for
thecreationandmodi ﬁcationofwork ﬂowprocessesatexecutiontime.eachcasehasa
private process model and therefore the traditional problems encountered when chang-ing a work ﬂow speciﬁcation can be avoided. ad-hoc wfm systems allow for a lot of
ﬂexibility.thewfmsysteminconcertevenallowstheusertoinitiateacasehavingan
emptyprocessmodel.whenthecaseishandled,thework ﬂowmodelisextendedtore-
ﬂect the work conducted. another possibility is to start using a template. the moment
a case is initiated, the corresponding process model is instantiated using a template.
after instantiation, the case has a private copy of the template, which can be modi ﬁed
while the process is running. inconcert also supports “workﬂow design by discovery ”:
the routing of any completed work ﬂow instance can be used to create a new template.
this way actual work ﬂow executions can be used to create work ﬂow process de ﬁni-tions. figure 14 shows that ad-hoc work ﬂow management systems like inconcert are
process-driven and ad-hoc structured. case-handling systems like flower and vectuscan be positioned in-between groupware, production work ﬂow, and ad-hoc work ﬂow.
unlike in ad-hoc work ﬂow systems the end-users are not expected to change or create
process models. instead the following paradigms are used for case handling [8]:
–avoidcontexttunnelingbyprovidingallinformationavailable(i.e.,presentthecase
asa whole rather than showing just bitsand pieces),
–decide which activities are enabled on the basis of the information available rather
than the activities already executed,
–separate work distribution from authorization and allow for additional types of
roles,not just the execute role,
–allowworkerstoviewandadd/modifydatabeforeorafterthecorrespondingactiv-
itieshavebeenexecuted(e.g.,informationcanberegisteredthemomentitbecomes
available).
for more information on case handling we refer to [8,22]. clearly the classi ﬁcation
of systems is not as clear-cut as figure 14 may suggest. lotus notes can be extendedwith domino work ﬂow to join groupware and production work ﬂow functionalities.
staffware case handler and the cosa activity manager are extensions of production
workﬂowsystemsinthedirectionofcasehandling(botharebasedonthegenericsolu-
tion of bpi).
in this tutorial we focus on the classical production work ﬂow systems. however, it
is important to understand that they are part of a spectrum and that their application is
limited to a speci ﬁc type of processes (process-driven and explicitly structured).
4.2 architecture
as indicated by figure 14, wfm systems target at different processes. therefore, it is
not surprising that there is not one architecture that “ﬁts all systems ”. therefore, we
presenttheso-called referencemodel ofthework ﬂowmanagementcoalition(wfmc)
[38,55].figure15showsanoverviewofthisreferencemodel.thereferencemodelde-
scribes the major components and interfaces within a work ﬂow architecture. the core
of any work ﬂow system is the workﬂow enactment service . the work ﬂow enactment
service provides the run-time environment which takes care of the control and exe-
cution of the work ﬂow. for technical or managerial reasons the work ﬂow enactment
service may use multiple workﬂow engines . a workﬂow engine handles selected parts
of the work ﬂow and manages selected parts of the resources. the process de ﬁnition
toolsareusedtospecifyandanalyzework ﬂowprocessde ﬁnitionsand/orresourceclas-
siﬁcations. these tools are used at design time. in most cases, the process de ﬁnition
tools can also be used as a bpr-toolset. most wfm systems provide three process
deﬁnition tools: (1) a tool with a graphical interface to de ﬁne workﬂow processes, (2)
a tool to specify resource classes (organizational model), and (3) a simulation tool to
analyze a speci ﬁed workﬂow.
3the end-user communicates with the work ﬂow system
3in many cases simulation is offered through some export to a standard simulation tool, e.g.,
cosasupportssimulationthrough anexport toexspect.viatheworkﬂowclientapplications .anexampleofawork ﬂowclientapplicationisthe
well-known in-basket.viasuchanin-basketworkitemsareofferedtotheenduser.by
selecting a work item, the user can execute a task for a speci ﬁc case. if necessary, the
workﬂowengineinvokesapplicationsviainterface3.the administrationandmonitor-
ing toolsare used to monitor and control the work ﬂow. these tools are used to register
the progress of cases and to detect bottlenecks. moreover, these tools are also used to
set parameters, allocate people and handle abnormalities. via interface 4 the work ﬂow
system can be connected to other work ﬂow systems. to standardize the ﬁve interfaces
showninfigure15,thewfmcaimsatacommon workﬂowapplicationprogramming
interface (wapi).thewapiisenvisagedasacommonsetofapicallsandrelatedin-
terchangeformatswhichmaybegroupedtogethertosupporteachofthe ﬁveinterfaces
(cf. [55]). in section 5.2 we will describe xpdl, the xml-based language suggested
bythewfmctoexchangeprocessde ﬁnition(i.e.,aconcretelanguageforinterface1).
fig.15.reference modelofthe work ﬂow management coalition(wfmc).
4.3 example of a wfm system: staffware
as indicated in section 4.1, many wfm systems are available. in this tutorial we only
showonesysteminmoredetail.staffwareisoneofthemostwidespreadwfmsystems
in the world. in 1998, it was estimated by the gartner group that staffware has 25percent of the global market [25]. staffware provides the functionality described in the
referencemodelshowninfigure15.figure16showssomescreenshotsofthestaffware
product. the top window shows the design tool of staffware while de ﬁning a simpleworkﬂowprocess.workisofferedthroughso-calledworkqueues.oneworkercanhave
multipleworkqueues andone workqueue can besharedamong multipleworkers.thewindow in the middle shows the set of available work queues (left) and the content of
one of these work queues (right). the bottom window shows an audit trail of a case.
the three windows show only some of the capabilities offered by staffware. it is fairlystraightforward to map these windows onto the architecture shown in figure 15.
fig.16.thegraphical work ﬂow deﬁner, work queue, and audit trailofstaffware.
let us now consider the modeling language used by staffware. in staffware, tasks
are called steps. there are several kinds of steps: automatic steps (offered to an appli-
cation instead of an end-user), normal steps (executed by an end-user), and event steps
(triggered by some external event). the semantics of a step are or-join/and-split,
i.e.,a step becomes enabled ifone ofthe preceding stepsiscompleted and the comple-tionofstepwilltriggerallsubsequentsteps.sincetheor-join/and-splitsemanticsis
ﬁxed, two additional building blocks are needed: the wait step and thecondition . the
wait step can be used to synchronize ﬂows and has and-join/and-split semantics.
to model choices, i.e., or-splits, the condition building block can be used. staffware
only allows for binary choices, i.e., just two possible outcomes (e.g., yes and no).
staffware processes always start with a start step which is denoted by a symbol rep-resenting a traf ﬁc light. termination in staffware is implicit, i.e., it is possible to start
multiple parallel threads which end concurrently. therefore, there is no need to haveone sink node representing the completion of a case. the end of a thread is denoted
by a stop symbol. conditions are modeled by diamond shaped symbols. wait steps are
modeled by symbols in the shape of a sand timer. the basic semantics of a step, acondition, and a wait are shown in figure 17.
4
 
step a a 
c wait 
condition c 
fig.17.thesemantics ofsomeofthestaffware constructs(left)expressed inpetrinets(right).
usingthistranslationshowninfigure17,itisstraightforwardtomapthestaffware
model shown in figure 16 onto a wf-net. the result isshown in figure 18.
start register
receive_parchive endc1shipgoods
c2c3
c4
fig.18.thestaffware modelshown infigure16expressed intermsofawf-net.
letusconsidernowalargerstaffwaremodelalsoincludingadvancedconceptslike
time triggers and multiple ending points. for this purpose, we use the model shownin figure 19. it models a simpli ﬁed workﬂow in a travel agency. to organize a trip, a
travelagencyexecutesseveraltasks.firstthecustomerisregistered.thenanemployee
searchesforopportunitieswhicharecommunicatedtothecustomer.thenthecustomerwill be contacted to ﬁnd out whether she or he is still interested in the trip of this
4note that the semantics of staffware steps include a number of particularities not included in
themapping, cf. [72].agency and whether more alternatives are desired. there are three possibilities: (1) the
customer is not interested at all, (2) the customer would like to see more alternatives,and (3) the customer selects an opportunity. if the customer selects a trip, the trip is
booked. in parallel one or two types of insurance are prepared if they are desired. a
customer can take insurance for trip cancellation or/and for baggage loss. note thata customer can decide not to take any insurance, just trip cancellation insurance, just
baggage loss insurance, or both types of insurance. two weeks before the start date
of the trip the documents are sent to the customer. a trip can be cancelled at any timeaftercompletingthebookingprocess(includingtheinsurance)andbeforethestartdate.
note that customers who are not insured for trip cancellation can cancel the trip (but
will get no refund). most of the model is self-explanatory. the two or-join symbolsrepresent “dummy tasks ”, i.e., staffware steps not implementing any real task. for the
cancellation two steps with a time-out are used: cancel andcancel2 . the clock
symbol is used to indicate steps with a time-out. in such as step, the lower branch is
taken if the step is not executed within a given period. for simplicity we did not model
all triggersand simpli ﬁed the choice for both types of insurances.
 
fig.19.the work ﬂow ofatravel agency modeled intermsofthe staffwarelanguage.
let us now translate the model shown in figure 19 into a wf-net. we do not use
the staffware names but the names used in the original description (staffware only
allowsnamesofup-to8characters).thewf-netshowninfigure20,likeanywf-net,
has a source place which serves as the start condition (i.e., case creation) and a sinkplacewhichservesastheendcondition(i.e.,casecompletion).first,thetasks register,
search,communicate , andcontact
custare executed sequentially. task contactcustis
an or-split with three possible outcomes: (1) the customer is not interested at all, i.e.,start register c2 search c3 communicate c4 contact_custend
and_splitc5
c6
c7book c8
insurance1? insurance1c9 c11
insurance2? insurance2c10 c12and_join send_documents c14cancel
start_trip
c13
fig.20.thetravel agency ’s workﬂowexpressed intermsofawf-net.
a token is put into end, (2) the customer would like to see more alternatives, i.e., a
token is put into c2, and (3) the customer selects an opportunity, i.e., a token is put
intoc15to initiate the booking. tasks andsplitandandjoinhave just been added
for routing purposes. these routing tasks enable the parallel execution of the booking
and insurance tasks. the task bookcorresponds to the actual booking of the trip. tasks
insurance1 andinsurance2 correspond to handling both types of insurance. since both
types of insurance are optional, there is a bypass for each of these tasks. the or-split
insurance1? allows for a bypass of task insurance1 by putting a token in c11. after
handling the booking and optional insurances the and-join puts a token in c13. the
remainder of the process is, from the viewpoint of triggers, very interesting. note thatall tasks executed before this point are either tasks that require a resource trigger or
automatic tasks added for routing purposes only. the downward facing arrows denote
the resource triggers. if the case is in c13, then the normal ﬂow of execution is to ﬁrst
executetask send
documents andthenexecute starttrip.notethattask senddocuments
requires both a resource trigger and a time trigger. these two triggers indicate that two
weeks before the beginning of the trip a worker sends the documents to the customer.taskstart
triphasbeenaddedforroutingpurposesandrequiresatimetrigger.without
taskstarttrip, i.e., putting the token in endafter sending the documents, it would have
beenimpossibletocancelthetripaftersendingthedocuments.task cancelisanexplicit
or-join and requires both a resource trigger and an external trigger. this task is only
executed if it is triggered by the customer. task cancel can only be executed if the case
is inc13orc14, i.e., after handling the booking and insurance related tasks and before
the trip starts.
it is interesting to compare ﬁgures 19 and 20. although the wf-net has more sym-
bolsbecauseoftheexplicitmodelingofstates(i.e.,places),itseemstobeamoredirect
and more elegant way to model the process.4.4 exercises
to conclude thissection, we provide two smallexercises.
–considerthestaffwareprocessshowninfigure21.translatethisstaffwaremodel
into a wf-net.
–consider the wf-net shown in figure 5. translate this wf-net into a staffware
model, i.e., provide a diagram like the one shown in figure 21 for the order pro-
cessing process given in section 2.3.
 
fig.21.exercise:translate thisstaffware processintoawf-net.
a solution of the ﬁrst exercise is given in [12]. a solution for the second exercise is
not given and is also far from trivial given the fact that staffware does not support the
milestone and deferred choice patterns (cf. section 5.1 and [15]).
5 work ﬂow standards: an evaluation of xpdl based on its
supportforwork ﬂowpatterns
there are many languages and standards in the wfm/bpm domain. it is impossible
to discuss all of these in any detail. instead we focus on a single standard. xpdl isnot the most important standard but it is typical for many other standards and propri-
ety languages of work ﬂow vendors. for a critical evaluation of xpdl, we use the set
of workﬂow patterns described in [15]. the remainder of this section is structured as
follows. first, we introduce the 20 work ﬂow patterns used to evaluate xpdl. then,
in section 5.2, we provide an overview of the xpdl language. in section 5.3 the lan-
guageisanalyzedusingthe20work ﬂowpatterns.section5.4discussesoneofthecore
semantical problems: the join construct. finally, section 5.5 concludes the section by
comparing xpdl with wfm systems and other standards such as uml activity dia-
grams, bpel4ws, bpml, wsfl, xlang, and wsci.basic control flow patterns
• pattern 1 (sequence)
 pattern 2 (parallel split)
 pattern 3 (synchronization)
 pattern 4 (exclusive choice)
 pattern 5 (simple merge)advanced branching and
synchronization patterns
 pattern 6 (multi -choice)
 pattern 7 (synchronizing merge)
 pattern 8 (multi -merge)
 pattern 9 (discriminator)
structural patterns
 pattern 10 (arbitrary cycles)
 pattern 11 (implicit termination)
state-based patterns
 pattern 16 (deferred
choice)
pattern 17 (interleaved
parallel routing)
 pattern 18 (milestone)patterns involving multiple instances
 pattern 12 (multiple instances without
synchronization)
 pattern 13 (multiple instances with a priori
design time knowledge)
 pattern 14 (multiple instances with a priori
runtime knowledge)
 pattern 15 (multiple instances without a priori
runtime knowledge)cancellation patterns
 pattern 19 (cancel activity)
 pattern 20 (cancel case)
fig.22.overview ofthe 20work ﬂow patternsdescribed in[15].
5.1 work ﬂow patterns
since 1999 we have been working on collecting a comprehensive set of work ﬂow pat-
terns[15].theresultshavebeenmadeavailablethroughthe “workﬂowpatternswww
site”http://www.workflowpatterns.com .thepatternsrangefromverysim-
ple patterns such as sequential routing (pattern 1) to complex patterns involving com-plex synchronizations such as the discriminator pattern (pattern 9). in this tutorial, we
restrict ourselves to the 20 most relevant patterns. these patterns can be classi ﬁed into
sixcategories:
1.basic control- ﬂow patterns. these are the basic constructs present in most work-
ﬂow languages to model sequential, parallel and conditional routing.
2.advanced branching and synchronization patterns. these patterns transcend the
basic patterns to allow for more advanced types of splitting and joining behavior.an example is the synchronizing merge (pattern 7) which behaves like an and-
join or xor-join depending on the context.
3.structural patterns. in programming languages a block structure which clearly
identiﬁes entry and exit points is quite natural. in graphical languages allowing for
parallelism such a requirement is often considered to be too restrictive. therefore,we have identi ﬁed patterns that allow fora lessrigid structure.
4.patternsinvolvingmultipleinstances. withinthecontextofasinglecase(i.e.,work-
ﬂowinstance)sometimespartsoftheprocessneedtobeinstantiatedmultipletimes,
e.g., within the context of an insurance claim, multiple witness statements need to
be processed.5.state-basedpatterns. typicalwork ﬂowsystemsfocusonlyonactivitiesandevents
and not on states. this limits the expressiveness of the work ﬂow language because
it is not possible to have state dependent patterns such as the milestone pattern
(pattern 18).
6.cancellation patterns. the occurrence of an event (e.g., a customer canceling an
order) may lead to the cancellation of activities. in some scenarios such events can
even cause the withdrawal of the whole case.
figure 22 shows an overview of the 20 patterns grouped into the six categories. a
detailed discussion of these patterns is outside the scope of this tutorial. the interested
reader isreferred to [15] and http://www.workflowpatterns.com .
we have used these patterns to compare the functionality of numerous wfm sys-
tems.theresultofthisevaluationrevealsthat(1)theexpressivepowerofcontemporary
systems leaves much to be desired and (2) the systems support different patterns. note
thatwedonotusetheterm “expressiveness ”inthetraditionalorformalsense.ifoneab-
stractsfromcapacityconstraints,anywork ﬂowlanguageisturingcomplete.therefore,
it makes no sense to compare these languages using formal notions of expressiveness.
instead we use a more intuitive notion of expressiveness which takes the modeling ef-
fort into account. this more intuitive notion is often referred to as suitability. see [51,
52] for a discussion on the distinction between formal expressiveness and suitability.
the observation that the expressive power of the available wfm systems leaves
muchtobedesired,triggeredthequestion: howaboutxpdlasawork ﬂowlanguage?
5.2 xpdl: xml process de ﬁnition language
the work ﬂow management coalition (wfmc) was founded in august 1993 as a in-
ternational non-pro ﬁt organization. today there are about 300 members ranging from
workﬂow vendors and users to analysts and university/research groups. the mission of
thewfmcistopromoteanddevelop theuseofwork ﬂowthroughtheestablishmentof
standards for work ﬂow terminology, interoperability and connectivity between work-
ﬂowproducts.thewfmc ’sreferencemodelidenti ﬁesﬁveinterfaces,asshowninsec-
tion 4.2. one of the main activities since 1993 has been the development of standardsfor these interfaces. interface 1 is the link between the so-called “process de ﬁnition
tools”and the“enactment service ”(cf. figure 15). the process de ﬁnition tools are
used to design work ﬂows while the enactment service can execute work ﬂows. the
primary goal of interface 1 is the import and export of process de ﬁnitions. the wfmc
deﬁnesaprocessde ﬁnitionas“therepresentationofabusinessprocessinaformwhich
supports automated manipulation, such as modeling, or enactment by a wfm system.
theprocessde ﬁnitionconsistsofanetworkofactivitiesandtheirrelationships,criteria
toindicatethestartandterminationoftheprocess,andinformationabouttheindividualactivities, such as participants, associated it applications and data, etc. ”[55]. clearly,
there is a need for process de ﬁnition interchange. first of all, within the context of a
single work ﬂow management system there has to be a connection between the design
tool and the execution/run-time environment. second, there may be the desire to use
another design tool, e.g., a modeling tool like aris or protos. third, for analysis pur-
posesitmaybedesirabletolinkthedesigntooltoanalysissoftwaresuchassimulationandveriﬁcationtools.fourth,theuseofrepositorieswithwork ﬂowprocessesrequiresa
standardized language. fifth, there may be the need to transfer a de ﬁnition interchange
fromone engine toanother.
to support the interchange of work ﬂow process de ﬁnitions, there has to be a stan-
dardized language [12,38,48,55,57,58]. the wfmc started working on such a lan-guagesoonafteritwasfounded.thisresultedinthework ﬂowprocessde ﬁnitionlan-
guage (wpdl) [74] presented in 1999. although many vendors claimed to be wfmc
compliant, few made a serious effort to support this language. at the same time, xmlemerged as a standard for data interchange. since wpdl was not xml-based, the
wfmc started working a new language named xml process de ﬁnition language
(xpdl).thestartingpointforxpdlwaswpdl.however,xpdlshouldnotbecon-sidered the xml version of wpdl. several concepts have been added/changed and
the wfmc remains fuzzy about the exact relationship between xpdl and wpdl. in
october 2002, the wfmc released a “final draft ”of xpdl [75].
in [75], the authors state “more complex transitions, which cannot be expressed
using the simple elementary transition and the split and join functions associated with
the from- and to- activities, are formed using dummy activities, which can be speci ﬁed
as intermediate steps between real activities allowing additional combinations of split
and/or join operations. using the basic transition entity plus dummy activities, routing
structures of arbitrary complexity can be speci ﬁed.since several different approaches
totransitioncontrolexistwithintheindustry,severalconformanceclassesarespeci ﬁed
within xpdl. these are described later in the document. ”the sentence “using the
basictransitionentityplusdummyactivities,routingstructuresof arbitrarycomplexity
can be speci ﬁed.”triggered us to look into the expressive power of xpdl.
xpdl[75]usesanxml-basedsyntax,speci ﬁedbyanxmlschema.themainel-
ementsofthelanguageare: package ,application ,workﬂowprocess ,activity,tran-
sition,participant ,datafield , anddatatype . thepackage element is the container
holding the other elements. the application element is used to specify the applica-
tions/toolsinvokedbythework ﬂowprocessesde ﬁnedinapackage.theelement work-
ﬂowprocess is used to de ﬁne workﬂow processes or parts of work ﬂow processes. a
workﬂowprocess is composed of elements of type activityandtransition . theac-
tivityelement is the basic building block of a work ﬂow process de ﬁnition. elements of
typeactivityare connected through elements of type transition . there are three types
ofactivities: route,implementation ,andblockactivity .activitiesoftype routeare
dummy activities just used for routing purposes. activities of type blockactivity are
usedtoexecutesetsofsmalleractivities.element activityset referstoaselfcontained
set of activities and transitions. a blockactivity executes such an activityset . activi-
tiesoftype implementation arestepsintheprocesswhichareimplementedbymanual
procedures ( no), implemented by one of more applications ( tool), or implemented by
another work ﬂow process ( subﬂow). theparticipant element is used to specify the
participants in the work ﬂow, i.e., the entities that can execute work. there are 6 types
of participants: resourceset ,resource ,role,organizationalunit ,human, and
system. elements of type datafield anddatatype are used to specify work ﬂow rel-
evant data. data is used to make decisions or to refer to data outside of the work ﬂow,
and ispassed between activities and sub ﬂows.in this section, we focus on the control- ﬂow perspective. therefore, we will not
consider functionality related to the package ,application , andparticipant elements.
moreover, we will only consider work ﬂow relevant data from the perspective of rout-
ing. appendix a shows selected parts of the xpdl schema [75] relevant for this tu-
torial. the listing shows the elements activity,transitionrestriction ,transitionre-
strictions ,join,split,transition andcondition . an activity may have one of more
“transition restrictions ”to specify the split/join behavior. if there is a transition restric-
tion of type join, the restriction is either set to andor toxor. the wfmc de ﬁnes
the semantics of such a restriction as follows: “and: join of (all) concurrent threads
within the process instance with incoming transitions to the activity: synchronization
isrequired.thenumberofthreadstobesynchronizedmightbedependentontheresultof the conditions of previous and split(s). ”and“xor: join for alternative threads:
nosynchronizationisrequired. ”[75].similarly,therearetransitionrestrictionsoftype
splitthat are set to either andorxorwith the following semantics: “and: de ﬁnes
a number of possible concurrent threads represented by the outgoing transitions of
this activity. if the transitions have conditions the actual number of executed parallelthreads is dependent on the conditions associated with each transition, which are eval-
uated concurrently. ”and“xor: list of identi ﬁers of outgoing transitions of this ac-
tivity, representing. alternatively executed transitions. the decision as to which singletransition route is selected is dependent on the conditions of each individual transition
astheyareevaluatedinthesequencespeci ﬁedinthelist.ifanunconditionaltransition
is evaluated or transition with condition otherwise this ends the list evaluation. ”
[75]. appendix a also shows the de ﬁnition of element transition . a transition con-
nectstwoactivitiesasindicatedbythe fromandtoﬁeldandmaycontaina condition
element.
thewfmcacknowledgesthefactthatwork ﬂowlanguagesusedifferentstylesand
paradigms. to accommodate this, xpdl allows for vendor speci ﬁc extensions of the
language. in addition, xpdl distinguishes three conformance classes: non-blocked,loop-blocked, and full-blocked. these conformance classes refer to the network struc-
tureofaprocessde ﬁnition,i.e.,thegraphofactivities(nodes)andtransitions(arcs).for
conformance class non-blocked there are no restrictions. for conformance class loop-blocked the network structure has to be acyclic and for conformance class full-blocked
there has to be a one-to-one correspondence between splits and joins of the same type.
these conformance classes correspond to different styles of modeling. graph based
workﬂow languages like cosa and staffware correspond to conformance class non-
blocked. languages such as mqseries, wsfl, and bpel4ws correspond to confor-mance class loop-blocked and block-structured languages such as xlang are full-
blocked.
a detailed introduction to xpdl is beyond the scope of this tutorial. for more
details we refer to [75].
5.3 the work ﬂow patterns in xpdl
in this section, we consider the 20 work ﬂow patterns discussed in section 5.1, and we
showhowandtowhatextentthesepatternscanbecapturedinxpdl.inparticular,we
indicatewhetherthepatternisdirectlysupportedbyaxpdlconstruct.ifthisisnotthecase,wesketchaworkaround solution.mostofthesolutionsarepresentedinasimpli-
ﬁed xpdl notation which is intended to capture the key ideas of the solutions while
avoiding coding details. in other words, the fragments of xpdl de ﬁnitions provided
here are not “ready to be run ”.
wp1 sequence an activity in a work ﬂow process is enabled after the completion of
anotheractivityinthesameprocess. example: aftertheactivity orderregistration the
activitycustomer noti ﬁcationisexecuted.
solution,wp1 thispatternisdirectlysupportedbythexpdlasillustratedininlist-
ing1.withintheprocess sequence twoactivities aandbarelinkedthroughtransition
ab.
listing1(sequence)
1<workflowprocess id="sequence">
2 <processheader durationunit="y"/>
3 <activities>
4 <activity id="a">
5 ...
6 </activity>
7 <activity id="b">
8 ...
9 </activity>
10 </activities>
11 <transitions>
12 <transition id="ab" from="a" to="b"/>
13 </transitions>
14</workflowprocess>
wp2 parallel split a point in the process where a single thread of control splits into
multiplethreadsofcontrolwhichcanbeexecutedinparallel,thusallowingactivitiestobe executed simultaneously or in any order [55,37]. example: after activity new cell
phone subscription order the activity insert new subscription in home location reg-
istryapplicationand insertnewsubscription inmobileanswerapplicationareexecuted
in parallel.
wp3 synchronization a point in the process where multiple parallel branches con-
verge into one single thread of control, thus synchronizing multiple threads [55]. it
is an assumption of this pattern that after an incoming branch has been completed, itcannotbecompletedagainwhilethemergeisstillwaitingforotherbranchestobecom-
pleted.also,itisassumedthatthethreadstobesynchronizedbelongtothesameglobal
processinstance(i.e.,tothesame “case”inworkﬂowterminology). example: activity
archiveisexecutedafterthecompletionofbothactivity sendtickets andactivity receive
payment.obviously,thesynchronizationoccurswithinasingleglobalprocessinstance:
thesend tickets andreceive payment mustrelate tothe same client request.listing2(parallelsplit/synchronization)
1<workflowprocess id="parallel">
2 <processheader durationunit="y"/>
3 <activities>
4 <activity id="a">
5 ...
6 <transitionrestrictions>
7 <transitionrestriction>
8 <split type="and">
9 <transitionrefs>
10 <transitionref id="b"/>
11 <transitionref id="c"/>
12 </transitionrefs>
13 </split>
14 </transitionrestriction>
15 </transitionrestrictions>
16 </activity>
17 <activity id="b">
18 ...
19 </activity>
20 <activity id="c">
21 ....
22 </activity>
23 <activity id="d">
24 ...
25 <transitionrestrictions>
26 <transitionrestriction>
27 <join type="and"/>
28 </transitionrestriction>
29 </transitionrestrictions>
30 </activity>
31 </activities>
32 <transitions>
33 <transition id="ab" from="a" to="b"/>
34 <transition id="ac" from="a" to="c"/>
35 <transition id="bd" from="b" to="d"/>
36 <transition id="cd" from="c" to="d"/>
37 </transitions>
38</workflowprocess>solutions, wp2 & wp3 this pattern directly supported by the xpdl. this is illus-
tratedbytheexampleshowninlisting2.withintheprocess parallelfouractivitiesare
linked trough four transitions. transitions abandaclink the initial activity ato the
two parallel activities bandc. note that the split in activity ais of typeandand no
transition conditions are speci ﬁed. transitions bdandcdlink the two parallel activi-
tiesbandcto theﬁnal activity d. note that the join in activity dis of typeandand
again no transition conditions are speci ﬁed.
wp4exclusivechoice apointintheprocesswhere,basedonadecisionorwork ﬂow
control data, one of several branches is chosen. example: the manager is informed if
an order exceeds $600, otherwise not.
wp5 simple merge a point in the work ﬂow process where two or more alternative
branchescometogetherwithoutsynchronization.itisanassumptionofthispatternthat
none of the alternative branches is ever executed in parallel with another one (if it is
notthecase,thenseethepatternsmultimergeanddiscriminator). example: afterthe
payment isreceived or the credit isgranted the car is delivered to the customer.
solutions, wp4 & wp5 xpdl can address the exclusive choice pattern (wp4) in
two ways. in both cases, an activity has a split and multiple outgoing transitions. one
way is to use a split of type xor, i.e., the ﬁrst transition which as no condition or a
condition which evaluates to true is taken. another way is to use split of type and
and deﬁne mutual exclusive transition conditions. listing 3 shows a solution using the
ﬁrst alternative. listing 4 shows a solution using the second alternative. in the second
solutiontransitions abandachaveacondition.inthe ﬁrstsolutiontransitions aband
acdo not have a condition which effectively implies that always the ﬁrst one (ab)i s
taken. besides normal conditions based on work ﬂow relevant data, it is also possible
to use conditions of type otherwise (for the default branch to be taken if all other
conditionsevaluatetofalse)andoftype exception (forspecifyingthebranchtobe
taken after an exception was raised). listings 3 and 4 also show the direct support forthe simple merge (wp5).
wp6 multi-choice a point in the process, where, based on a decision or control data,
a number of branches are chosen and executed as parallel threads. example: after ex-
ecuting the activity evaluate damage the activity contactﬁre department or the activity
contact insurance company is executed. at least one of these activities is executed.
however, itisalso possible that both need to be executed.
solution,wp6 xpdlprovidesdirectsupportforthemulti-choicepatternasshownin
listing 5. depending on the value of amountactivityband/orcis/are executed, e.g.,
ifthevalue of amountis8both activitiesare executed, otherwise just b(amount >5)
orc(amount <10).
wp7synchronizingmerge apointintheprocesswheremultiplepathsconvergeinto
one single thread. some of these paths are “active”(i.e. they are being executed) and
some are not. ifonly one path isactive, the activity after the merge istriggered as soonlisting3(exclusivechoice/simple merge)
1<workflowprocess id="choice1">
2 <processheader durationunit="y"/>
3 <activities>
4 <activity id="a">
5 ...
6 <transitionrestrictions>
7 <transitionrestriction>
8 <split type="xor">
9 <transitionrefs>
10 <transitionref id="ab"/>
11 <transitionref id="ac"/>
12 </transitionrefs>
13 </split>
14 </transitionrestriction>
15 </transitionrestrictions>
16 </activity>
17 <activity id="b">
18 ...
19 </activity>
20 <activity id="c">
21 ...
22 </activity>
23 <activity id="d">
24 ...
25 <transitionrestrictions>
26 <transitionrestriction>
27 <join type="xor"/>
28 </transitionrestriction>
29 </transitionrestrictions>
30 </activity>
31 </activities>
32 <transitions>
33 <transition id="ab" from="a" to="b"/>
34 <transition id="ac" from="a" to="c"/>
35 <transition id="bd" from="b" to="d"/>
36 <transition id="cd" from="c" to="d"/>
37 </transitions>
38</workflowprocess>listing4(exclusivechoice/simple merge)
1<workflowprocess id="choice2">
2 <processheader durationunit="y"/>
3 <activities>
4 <activity id="a">
5 ...
6 <transitionrestrictions>
7 <transitionrestriction>
8 <split type="and">
9 <transitionrefs>
10 <transitionref id="ab"/>
11 <transitionref id="ac"/>
12 </transitionrefs>
13 </split>
14 </transitionrestriction>
15 </transitionrestrictions>
16 </activity>
17 <activity id="b">
18 ...
19 </activity>
20 <activity id="c">
21 ...
22 </activity>
23 <activity id="d">
24 ...
25 <transitionrestrictions>
26 <transitionrestriction>
27 <join type="xor"/>
28 </transitionrestriction>
29 </transitionrestrictions>
30 </activity>
31 </activities>
32 <transitions>
33 <transition id="ab" from="a" to="b">
34 <condition type="condition">
35 choice == "b" </condition>
36 </transition>
37 <transition id="ac" from="a" to="c">
38 <condition type="condition">
39 choice == "c" </condition>
40 </transition>
41 <transition id="bd" from="b" to="d"/>
42 <transition id="cd" from="c" to="d"/>
43 </transitions>
44</workflowprocess>listing5(multichoice/synchronizing merge)
1<workflowprocess id="multi-choice">
2 <processheader durationunit="y"/>
3 <activities>
4 <activity id="a">
5 ...
6 <transitionrestrictions>
7 <transitionrestriction>
8 <split type="and">
9 <transitionrefs>
10 <transitionref id="ab"/>
11 <transitionref id="ac"/>
12 </transitionrefs>
13 </split>
14 </transitionrestriction>
15 </transitionrestrictions>
16 </activity>
17 <activity id="b">
18 ...
19 </activity>
20 <activity id="c">
21 ...
22 </activity>
23 <activity id="d">
24 ...
25 <transitionrestrictions>
26 <transitionrestriction>
27 <join type="and"/>
28 </transitionrestriction>
29 </transitionrestrictions>
30 </activity>
31 </activities>
32 <transitions>
33 <transition id="ab" from="a" to="b">
34 <condition type="condition">
35 amount &gt; 5 </condition>
36 </transition>
37 <transition id="ac" from="a" to="c">
38 <condition type="condition">
39 amount &lt; 10 </condition>
40 </transition>
41 <transition id="bd" from="b" to="d"/>
42 <transition id="cd" from="c" to="d"/>
43 </transitions>
44</workflowprocess>as this path completes. if more than one path is active, synchronization of all active
pathsneedstotakeplacebeforethenextactivityistriggered.itisanassumptionofthispattern that a branch that has already been activated, cannot be activated again while
the merge is still waiting for other branches to complete. example: after either or
bothoftheactivities contactﬁredepartment andcontactinsurancecompany havebeen
completed (depending on whether they were executed at all), the activity submit report
needs to be performed (exactly once).
solutions, wp7 according to [75] xpdl provides direct support for the synchroniz-
ing merge pattern. recall the de ﬁnition of the and restriction: “and: join of (all)
concurrentthreadswithintheprocessinstancewithincomingtransitionstotheactivity:
synchronization is required. the number of threads to be synchronized might be de-
pendent on the result of the conditions of previous and split(s). ”[75] which suggests
directsupportforthesynchronizing mergepattern.ifthisisindeedthecase,thenlist-
ing5indeedshowsanexamplewhereactivity deithermergesorsynchronizesthetwo
ingoing transitions depending on the number of threads activated by activity a. unfor-
tunately, few work ﬂow systems that claim to support xpdl have indeed this behavior.
moreover, xpdl allows formultiple interpretations as discussed in section 5.4.
wp8 multi-merge a point in a process where two or more branches reconverge with-
out synchronization. if more than one branch gets activated, possibly concurrently, theactivity following the merge is started for every action of every incoming branch. ex-
ample:sometimes two or more branches share the same ending. two activities audit
application andprocess applications are running in parallel which should both be fol-
lowed by an activity close case , which should be executed twice if the activities audit
application andprocess applications are both executed.
solution, wp8 xpdl only allows for two types of joins: andandxor. the seman-
ticsofthesetwojoinsisnotcompletelyclear.ajoinoftype xorwillofferthesimple
mergepattern.recallthatthesimplemergeassumesthatpreciselyoneoftheincoming
transitions will occur. however, xpdl allows for situations where the more incoming
transitions will or may occur. consider listing 6. both bandcare executed. since
activitydhasajoinoftype xoritcanalreadyoccurwhenoneofthesetwohavebeen
executed. however, it is not clear how many times activity dwill occur (and when).
in [75] is is stated that “the xor join initiates the activity when the transition condi-
tions of any (one) of the incoming transitions evaluates true. ”. since it is not speci ﬁed
what should happen if multiple incoming transitions evaluate to true at the same time,
we conclude that xpdl does not support the multi-merge (wp8). see [15] for typicalwork-arounds.
wp9discriminator apointinthework ﬂowprocessthatwaitsforoneoftheincoming
branches to complete before activating the subsequent activity. from that moment on
it waits for all remaining branches to complete and “ignores”them. once all incoming
branches have been triggered, it resets itself so that it can be triggered again (which is
important otherwise it could not really be used in the context of a loop). example: to
improve query response time a complex search is sent to two different databases overlisting6(multi-merge?)
1<workflowprocess id="parallel">
2 <processheader durationunit="y"/>
3 <activities>
4 <activity id="a">
5 ...
6 <transitionrestrictions>
7 <transitionrestriction>
8 <split type="and">
9 <transitionrefs>
10 <transitionref id="b"/>
11 <transitionref id="c"/>
12 </transitionrefs>
13 </split>
14 </transitionrestriction>
15 </transitionrestrictions>
16 </activity>
17 <activity id="b">
18 ...
19 </activity>
20 <activity id="c">
21 ....
22 </activity>
23 <activity id="d">
24 ...
25 <transitionrestrictions>
26 <transitionrestriction>
27 <join type="xor"/>
28 </transitionrestriction>
29 </transitionrestrictions>
30 </activity>
31 </activities>
32 <transitions>
33 <transition id="ab" from="a" to="b"/>
34 <transition id="ac" from="a" to="c"/>
35 <transition id="bd" from="b" to="d"/>
36 <transition id="cd" from="c" to="d"/>
37 </transitions>
38</workflowprocess>the internet. the ﬁrst one that comes up with the result should proceed the ﬂow. the
second resultisignored.
solution,wp9 xpdlallowsforsituationswheremultipleincomingtransitionswillor
may occur. however, the precise semantics of a join of type xoris not speci ﬁed and,
similarto wp8, we conclude that the discriminator (wp9) isnot supported.
wp10arbitrarycycles apointwhereaportionoftheprocess(includingoneormore
activitiesandconnectors)needstobe “visited”repeatedly withoutimposingrestrictions
onthenumber,location,andnestingofthesepoints.notethatblock-orientedlanguagesand languages providing constructs such as “while do”,“repeat until ”typically impose
such restrictions,e.g., itis not possible to jump fromone loop into another loop.
solution, wp10 xpdl distinguishes three conformance classes: non-blocked, loop-
blocked,andfull-blocked.conformanceclass “non-blocked ”directlysupportsthispat-
tern.notethatthetransitionsbasicallyde ﬁnearelationandallowforanygraphinclud-
ingcyclicones.fortheotherconformanceclassesthisisnotallowed.forconformance
class loop-blocked the network structure has to be acyclic and for conformance classfull-blockedtherehastobeaone-to-onecorrespondencebetweensplitsandjoinsofthe
same type.
wp11 implicit termination a given subprocess is terminated when there is nothing
left to do, i.e., termination does not require an explicit termination activity. the goal ofthis pattern is to avoid having to join divergent branches into a single point of termina-
tion.
solution, wp11 xpdl, assuming conformance class “non-blocked ”, allows for arbi-
trary graph-like structures. as a result it is possible to have multiple activities without
inputtransitions(i.e.,sourceactivities)andmultipleactivitieswithoutoutputtransitions(sink activities). the latter suggests direct support for wp11. unfortunately, [75] does
notclarifythesemanticsofxpdlinthepresenceofmultiplesourceandsinkactivities,
e.g., do all source activities need to be executed or just one? although xpdl does not
specify the expected behavior in such cases, we give it the bene ﬁt of the doubt. note
that this illustrates that conformance is still ill-de ﬁned in [75] since it refers to syntax
rather than semantics.
wp12 mi without synchronization within the context of a single case, multiple in-
stancesofanactivitymaybecreated,i.e.thereisafacilityforspawningoffnewthreads
of control, all of them independent of each other. the instances might be created con-
secutively,buttheywillbeabletoruninparallel,whichdistinguishesthispatternfromthepatternforarbitrarycycles. example: whenbookingatrip,theactivity bookﬂight
isexecuted multiple timesifthe tripinvolves multiple ﬂights.
solution, wp12 an activity may be re ﬁned into a sub ﬂow. the sub ﬂow may be exe-
cutedsynchronouslyorasynchronously.incaseofasynchronousexecution,theactivityis continued after an instance of the sub ﬂow is initiated. this way it is possible to
“spawn-off ”subﬂows and thus realizing wp12.
wp13-wp15 mi with synchronization a point in a work ﬂow where a number of
instances of a given activity are initiated, and these instances are later synchronized,before proceeding with the rest of the process. in wp13 the number of instances to be
started/synchronized is known at design time. in wp14 the number is known at some
stageduringruntime,butbeforetheinitiationoftheinstanceshasstarted.inwp15thenumberofinstancestobecreatedisnotknowninadvance:newinstancesarecreatedon
demand,untilnomoreinstancesarerequired. exampleofwp15: whenbookingatrip,
the activity bookﬂightis executed multiple times if the trip involves multiple ﬂights.
once all bookings are made, an invoice is sent to the client. how many bookings are
made is only known at runtime through interaction with the user (or with an external
process).
solutions, wp13-wp15 if the number of instances to be synchronized is known at
design time (wp13), a simple solution is to replicate the activity as many times as itneedstobeinstantiated,andrunthereplicasinparallel.therefore,wp13issupported.
however, it is clear that there is no direct support for wp14 and wp15 because any
solution will involve explicit bookkeeping of the number of active instances. in fact in[75] is is stated that “synchronization with the initiated sub ﬂow, if required, has to be
done by other means such as events, not described in this document. ”when describing
the functionality of asynchronous sub ﬂows. therefore, we conclude that there is no
support for wp14 and wp15. again we refer to [15] fortypical workarounds.
wp16 deferred choice a point in a process where one among several alternative
branches is chosen based on information which is not necessarily available when this
point is reached. this differs from the normal exclusive choice, in that the choice isnot made immediately when the point is reached, but instead several alternatives are
offered, and the choice between them is delayed until the occurrence of some event.
example: when a contract is ﬁnalized, it has to be reviewed and signed either by the
director or by the operations manager, whoever is available ﬁrst. both the director and
the operations manager would be noti ﬁed that the contract is to be reviewed: the ﬁrst
one who isavailable willproceed with the review.
solution,wp16 xpdlonlyallowsforchoicesresultingfromconditionsontransitions.
hence each choice is directly-based on work ﬂow relevant data and it is not possible
offer the choice to the environment. xpdl does not allow for the de ﬁnition of states
(likeplacesinapetrinet)norconstructslikethe choiceconstructinbpmlandwsci
andthepickconstructinxlangandbpel4ws.thereisnosimplework-aroundfor
thisomissionsinceitisnotpossibletoshiftthemomentofdecisionfromtheendofan
activity to the start of an activity. moreover, xpdl does not allow for the speci ﬁcation
of triggersand/or external events.
wp17interleavedparallelrouting asetofactivitiesisexecutedinanarbitraryorder.
each activity in the set is executed exactly once. the order between the activities isdecidedatrun-time:itisnotuntiloneactivityiscompletedthatthedecisiononwhatto
do next is taken. in any case, no two activities in the set can be active at the same time.example: at the end of each year, a bank executes two activities for each account:
addinterest andchargecreditcardcosts .theseactivitiescanbeexecutedinanyorder.
however,sincetheybothupdatetheaccount,theycannotbeexecutedatthesametime.
solution, wp17 since xpdl does not allow for the de ﬁnition of states, it is not pos-
sible to enforce some kind of mutual exclusion. hence there is no support for wp17.
even the work-arounds described in [15] are dif ﬁcult, ifnot impossible, to apply.
wp18 milestone a given activity can only be enabled if a certain milestone has been
reached which has not yet expired. a milestone is de ﬁned as a point in the process
where a given activity has ﬁnished and another activity following it has not yet started.
example: afterhavingplacedapurchaseorder,acustomercanwithdrawitatanytime
before the shipping takes place. to withdraw an order, the customer must completea withdrawal request form, and this request must be approved by a customer service
representative. the execution of the activity approve order withdrawal must therefore
follow the activity request withdrawal , and can only be done if: (i) the activity place
orderiscompleted, and (ii)the activity ship order has not yet started.
solution, wp18 xpdl does not provide a direct support for capturing this pattern.
therefore, a work-around solution has to be used. again it is dif ﬁcult to construct so-
lutions inspired by the ideas in [15]. since other patterns like wp16 and wp19 are not
supported, potential solutions lead to complex process de ﬁnitions for simply checking
the state in a parallel branch.
wp19 cancel activity & wp20 cancel case a cancel activity terminates a running
instanceofanactivity,whilecancelingacaseleadstotheremovalofanentirework ﬂow
instance. example of wp19: a customer cancels a request for information. example
of wp20: a customer withdraws his/her order.
solutions, wp19 & wp20 xpdl does not provide explicit constructs for wp19 and
wp20. the concept of exceptions seems to be related, but like many other concepts
ill-deﬁned. the only construct in xpdl that can raise an exception is the deadline el-
ement.deadlinesareusedtoraiseanexceptionupontheexpirationofaspeci ﬁcperiod
of time. a deadline can be raised synchronously or asynchronously: “if the deadline
is synchronous, then the activity is terminated before ﬂow continues on the exception
path.”and“ifthedeadlineisasynchronous,thenanimplicitand-splitisperformed,
and a new thread of processing is started on the appropriate exception transition. ”[75].
an exception may trigger a transition but cannot be used to cancel activities or cases.hence, xpdl does not support wp19 and wp20.
5.4 many ways to join
inthissection,weevaluatedxpdlwithrespecttothepatterns.amoredetailedanaly-
sisrevealsthat,notonlydoesxpdlhaveproblemswithrespecttoseveralpatterns,thesemanticsofmanyconstructsisunclear.toillustratethiswefocusontransitionrestric-
tionsoftype join.therestrictioniseithersetto andortoxorandthewfmcde ﬁnes
these settings as follows: “and: join of (all) concurrent threads within the process in-
stance with incoming transitions to the activity: synchronization is required. the num-
ber of threads to be synchronized might be dependent on the result of the conditions ofprevious and split(s). ”and“xor: join for alternative threads: no synchronization is
required.”[75].todemonstratethatthesedescriptionsdonotfullyspecifytheintended
behavior, figure 23 shows seven possible interpretations each expressed in terms of apetri net (some extended with inhibitor arcs, cf. [63]). note that petri nets have formal
semantics, and thus, figure 23 fully speci ﬁes the behavior of each construct. also note
that we restrict ourselves to local constructs, i.e., the there are no dependencies otherthan on the activities directly connected to the join.
theﬁrst two constructs correspond to the most straightforward interpretations of
the and-join (figure 23(a)) and xor-join (figure 23(b)). in figure 23(a), activitycalways synchronizes aandb, i.e., ifais never executed, cis never executed.
5in
figure23(b),activity cisexecutedonceforeachoccurrenceof aandb.althoughfig-
ure 23(a) and figure 23(b) seem to correspond to straightforward interpretations of theand-join and xor-join, few wfm systems actually exhibit this behavior. the other
constructs in figure 23 show other interpretations for both the and-join and/or xor-
join encountered in contemporary systems. figure 23(c) shows the situation where ac-tivityais blocked if cwas not executed since the last occurrence of a. similarly,
activitybisblockedif cwasnotexecutedsincethelastoccurrenceof b.notethatthis
construct uses two inhibitor arcs (i.e., the two connections involving a small circle).
unlike a normal directed arc in petri net, an inhibitor arc models the requirement that
a place has to be empty, i.e., ais only enabled if the input place (not shown) contains
a tokenandthe output place is empty. figure 23(d) shows a similar construct but now
for the xor-join, i.e., both activity aand activity bare blocked if cwas not executed
since the last occurrence of aorb. the wfm system cosa [67] uses this interpreta-
tion for the and-join and xor-join. figures 23 (c) and (d) use inhibitor arcs to make
sure that activity cis only enabled once. this is realized by blocking the preceding
activitiesifneeded.analternativeapproachistosimplyremoveadditionaltokens.fig-ure 23(e) shows an approach where csynchronizes both ﬂows if both aandbhave
beenexecuted.ifonlyoneofthemhasbeenexecuted,thereisnosynchronization.note
that there are three instances of c: one for the situation where only awas executed,
one for situation where both aandbhave been executed, and one where only bwas
executed. the two inhibitor arcs make sure that the two ﬂows are synchronized if pos-
sible. figure 23(f) shows a similar, but slightly different, approach where simply everyattempttoenable cforthesecondtimeisignored.if cisalreadyenabled,thentheright
transitionwilloccur,otherwisetheleftone.considerthescenariowhere aoccurstwice
before execution c. in figure 23(e), cwill be executed twice, while in figure 23(f) c
will be executed only once. many systems have a behavior similar to figure 23(e)/(f),
e.g., a normal step in staffware [69] behaves as indicated by figure 23(f). (see [72]for a more detailed analysis of staffware steps.) although widely supported, the inter-
pretation given in figure 23(e)/(f) is not very desirable from a modeling point of view
5note thatthisisnotthe case inxpdl.a b
ca b
ca b
ca b
c
a b
cc ca b
ca b
c(a) (b) (c) (d)
(f) (e) (g)
fig.23.seven frequently used ways to join two ﬂows (expressed in terms of petri nets with
inhibitorarcs[63]).since it introduces “race conditions ”, e.g., the number of times cis executed depends
on the interleaving of a,b, andcactivities. figure 23(g) gives yet another interpreta-
tion of the and/xor-join. cis enabled immediately after the ﬁrst occurrence of aor
b,butafteritoccursitisblockeduntiltheotheractivityhasalsobeenexecuted,i.e.,the
construct is reset once each of a,b, andchas occurred. note that this interpretation
corresponds to wp9 (discriminatorpattern).
figure23showsthattherearemanywaystojointwo ﬂows.infact,therearemany
more interpretations. an example is the so-called “wait step”in staffware [69] which
only synchronizes the ﬁrst time if it is put in a loop (see [72] for more details). an-
other example is the join in ibm ’s mqseries work ﬂow [46], bpel4ws [27], and
wsfl (web services flow language, [56]) which decides whether it has to synchro-
nizeornotbasedontheso-called “dead-path-elimination(dpe) ”[57].giventhequote
“and: join of (all) concurrent threads within the process instance with incoming tran-
sitions to the activity: synchronization is required. the number of threads to be syn-
chronizedmightbedependentontheresultoftheconditionsofpreviousandsplit(s). ”
in [75], the latter interpretation seems to be closest to xpdl. unfortunately, other than
ibm-inﬂuenced products and standards, no other vendors are using nor supporting this
interpretation since itdoes not allow for arbitrary cycles (wp10) [9].
thedilemmaofjoiningmixturesofalternativeorparallel ﬂowshasbeendiscussed
inscientiﬁcliterature.see[9]forpointerstorelatedpapersandanelaboratediscussion
in the context of event-driven process chains (epc ’s).
thefactthattherearemanywaystojoinandthatin[75]thewfmcleavesroomfor
multiple interpretations, brings us to the issue of conformance . in [75] it is stated that
“a product that claims conformance must generate valid, syntactically correct xpdl,
and must be able to read all valid xpdl. ”. unfortunately, this quote, but also the rest
of [75], does not address the issue of semantics. note that it is rather easy to generateand read valid xpdl ﬁles. the dif ﬁcult part is to be able to interpret xpdl generated
by another tool and execute the work ﬂow as intended.
5.5 comparing xpdl with other languages and standards
thus far, we provided a critical evaluation of xpdl based on a set of 20 basic work-
ﬂowpatterns.toconcludethissection,wecomparexpdlwithotherstandardsand15
workﬂow products.
table1showsanevaluationofxpdlandsixotherstandards.ifastandarddirectly
supports the pattern through one of its constructs, it is rated +. if the pattern is not
directlysupported, it is rated +/-. any solution which results in spaghetti diagrams or
6although the description of the and-join suggests support for wp7, xpdl does not specify
itsprecisebehavior.infact,forconformanceclass “non-blocked ”,itisunclearhowwp7could
besupported
7for conformance class “non-blocked ”, arbitrary graph-like structures are allowed, including
arbitrarycycles. fortheother conformance classesthisisexplicitly excluded.
8for all conformance classes there may be multiple source and/or sink activities. hence, froma syntactical point of view wp11 is supported. unfortunately, no semantics are given for this
construct.pattern standard
xpdl umlbpel4ws bpml xlang wsfl wsci
1(seq) + + + + + + +
2(par-spl) + + + + + + +
3(synch) + + + + + + +
4(ex-ch) + + + + + + +
5(simple-m) + + + + + + +
6(m-choice) + - + - - + -
7(sync-m) +6- + - - + -
8(multi-m) - - - +/- - - +/-
9(disc) - - - - - - -
10(arb-c) +7- - - - - -
11(impl-t) +8- + + - + +
12 (mi-no-s) + - + + + + +
13(mi-dt) + + + + + + +
14(mi-rt) - + - - - - -
15(mi-no) - - - - - - -
16(def-c) - + + + + - +
17(int-par) - - +/- - - - -
18(milest) - - - - - - -
19(can-a) - + + + + + +
20(can-c) - + + + + + +
table 1. a comparison of xpdl with other standards such as uml activity diagrams,
bpel4ws,bpml,xlang, wsfl,and wsci.
coding, is considered as giving no direct support and is rated -. the rating of xpdl is
as explained in thissection.
uml activity diagrams [42] are intended to model both computational and orga-
nizational processes. increasingly, uml activity diagrams are also used for work ﬂow
modeling. therefore, it is interesting to analyze their expressiveness using the set of
basic work ﬂow patterns asshown in the table. formore information see [31].
the recently released bpel4ws (business process execution language for web
services, [27]) speci ﬁcation builds on ibm ’s wsfl (web services flow language,
[56])andmicrosoft ’sxlang[70].xlangisablock-structuredlanguagewithbasic
controlﬂow structures such as sequence, switch (for conditional routing), while (for
looping), all (for parallel routing), and pick (for race conditions based on timing orexternal triggers). in contrast to xlang, wsfl is not limited to block structures and
allowsfordirectedgraphs.thegraphs canbenestedbutneedtobeacyclic. iterationis
only supported through exit conditions, i.e., an activity/subprocess is iterated until itsexitconditionismet.thecontrol ﬂowpartofwsflisalmostidenticaltothework ﬂow
languageusedbyibm ’smqserieswork ﬂow.see[76,77]formoreinformationabout
the evaluation of bpel4ws, xlang, and wsfl using the patterns.
bpml (business process modeling language, [21]) is a standard developed and
promoted by bpmi.org (the business process management initiative). bpmi.org is
supported by several organizations, including intalio, sap, sun, and versata. the web
service choreography interface (wsci, [20]) submitted in june 2002 to the w3c bybeasystems,bpmi.org,commerceone,fujitsulimited,intalio,iona,oraclecor-
poration,sapag,seebeyondtechnologycorporation,andsunmicrosystems.thereisasubstantialoverlapbetweenbpmlandwsci.see[11]formoreinformationabout
the evaluation of bpml and wsci using the patterns.
in addition to comparing xpdl to other standards, it is interesting to compare
xpdl with contemporary wfm systems. tables 2 and 3 summarize the results of
the comparison of 15 wfm systems in terms of the selected patterns. these tablesare taken from [15] and have been added to compare contemporary work ﬂow products
with xpdl.
pattern product
staffware cosainconcert eastman flower domino meteor mobile
1(seq) + + + + + + + +
2(par-spl) + + + + + + + +
3(synch) + + + + + + + +
4(ex-ch) + + +/- + + + + +
5(simple-m) + + +/- + + + + +
6(m-choice) - + +/- +/- - + + +
7(sync-m) -+/- + + - + - -
8(multi-m) - - - + +/- +/- + -
9(disc) - - - + +/- -+/- +
10(arb-c) + + - + - + + -
11(impl-t) + - + + - + - -
12 (mi-no-s) -+/- - + + +/- + -
13(mi-dt) + + + + + + + +
14(mi-rt) - - - - + - - -
15(mi-no) - - - - + - - -
16(def-c) - + - -+/- - - -
17(int-par) - + - -+/- - - +
18(milest) - + - -+/- - - -
19(can-a) + + - -+/- - - -
20(can-c) - - - -+/- + - -
table 2. the main results for staffware, cosa, inconcert, eastman, flower, lotus domino
workﬂow, meteor, and mobile.
from the comparison it is clear that no tool supports all of the selected patterns. in
fact, many of these tools only support a relatively small subset of the more advancedpatterns (i.e., patterns 6 to 20). speci ﬁcally the limited support for the discriminator,
the state-based patterns (only cosa), the synchronization of multiple instances (only
flower) and cancellation (esp.of activities), isworth noting.
please apply the results summarized in tables 1, 2 and 3 with care. first of all, the
organization selecting a wfm system/standard should focus on the patterns most rele-vant for the work ﬂow processes at hand. since support for the more advanced patterns
islimited,oneshouldfocusonthepatternsmostneeded.second,thefactthatapattern
is not directly supported by a product does not imply that it is not possible to supportpattern product
mqseries fort´everve vis.wf changeng. i-flow sap/r3
1(seq) + + + + + + +
2(par-spl) + + + + + + +
3(synch) + + + + + + +
4(ex-ch) + + + + + + +
5(simple-m) + + + + + + +
6(m-choice) + + + + + + +
7(sync-m) + - - - - - -
8(multi-m) - + + - - - -
9(disc) - + + - + - +
10(arb-c) - + + +/- + + -
11(impl-t) + - - - - - -
12 (mi-no-s) - + + + - + -
13(mi-dt) + + + + + + +
14(mi-rt) - - - - - - +/-
15(mi-no) - - - - - - -
16(def-c) - - - - - - -
17(int-par) - - - - - - -
18(milest) - - - - - - -
19(can-a) - - - - - - +
20(can-c) - + + - + - +
table3.themainresultsformqseries,fort ´econductor,verve,visualworkflo,changengine,
i-flow,and sap/r3work ﬂow.
the construct at all. as indicated in [15], many patterns can be supported indirectly
throughmixturesofmorebasicpatternsandcoding.third,thepatternsreportedinthis
tutorial only focus on the process perspective (i.e., control ﬂow or routing). the other
perspectives (e.g.,organizational modeling) should also be taken into account.
tables 1, 2 and 3 allow for an objective comparison of the 7 standards and 15 wfm
systems. when comparing xpdl to the 6 other standards, it is remarkable to see that
xpdl seems to be less expressive than web service composition languages such asbpel4ws and bpml. an important pattern like the deferred choice (wp16) is sup-
ported by most standards and is vital for practical application of wfm. nevertheless,
it is not even mentioned in [75]. compared to the 15 wfm systems, xpdl is not asexpressive as one would expect. many systems offer functionality (e.g., the deferred
choice and the cancel activity patterns), not supported by xpdl. it almost seems that
xpdl offers the intersection rather than the union of the functionality offered by con-temporary systems. this may have been the initial goal of xpdl. however, if this is
the case, two important questions need to be answered.
1. ifxpdlofferstheintersectionratherthantheunionofthefunctionalityofexisting
systems, then how to use xpdl in practice? should work ﬂow designers that want
to be able to export only use a subset of the functionality offered by the system?
if so, users would not be able to use powerful concepts like the deferred choice
(wp16) and the cancel activity (wp19) patterns.2. why does xpdl support the synchronizing merge (wp7) while it is only sup-
ported by a few systems. widely-used systems like staffware do not support thispattern,andtherefore,willbeunabletointerprettheand-joinasindicatedin[75].
note that the issues raised cannot be solved satisfactorily. if xpdl offers the inter-
section of the functionality of existing systems, it is less expressive than many of the
existingtoolsandstandards.ifxpdlofferstheunionofavailablefunctionality,itmay
become impossible to import a process de ﬁnition into a concrete system and interpret
it correctly. (recall that no system supports all patterns.) unfortunately, this dilemma
isnotreallyaddressedbythewfmc[75].theintroductionofextendedattributes(i.e.,
extensions of xpdl for a speci ﬁc product) and conformance classes (i.e., restrictions
to allow the use of speci ﬁc products) are no solution and only complicate matters.
there have been several comparisons of some of the languages mentioned in this
tutorial. these comparisons typically do not use a framework and provide an opinion
rather than a structured analysis. a positive example is [65] where xpdl, bpml and
bpel4ws are compared by relating the concepts used in the three languages. unfor-tunately, the paper raisesmore questions than itanswers.
besides the dilemma that xpdl is either not expressive enough or too expressive,
there is the problem of semantics. in [75] the wfmc does not give unambiguous spec-
iﬁcation of all the elements in the language. as a result, many vendors can claim to be
compliant while interpreting constructs in a different way. in section 5.4, we demon-strated that there are many interpretations of seemingly basic constructs like the and-
join and xor-join. the lack of semantics restricts the application of xpdl and does
not allow for a meaningful realization of the topic of conformance. as indicated be-fore, [75] de ﬁnes conformance as follows: “a product that claims conformance must
generate valid, syntactically correct xpdl, and must be able to read all valid xpdl. ”.
clearly, this inadequate and will not stimulate further standardization in the work ﬂow
domain. as a result, web service composition languages like bpml and bpel4ws
may take over the role of xpdl [6].
6 relatedwork
there is a lot of literature on wfm and wfm systems. only some of the bookson wfm are referred to in this tutorial [12,37,38,48,55,57,58,61]. there are also
many publications reporting on the application of petri nets to wfm. in this tuto-rial we mainly referred to papers using wf-nets and soundness (or variants thereof)
[1,3,4,28,44,52,54]. for the evaluation of xpdl we relied heavily on the work on
workﬂow patterns. see [15,77] or http://www.workflowpatterns.com for
more information. the two springer lecture notes in computing science volumes
on bpm can serve as a starting point for ﬁnding the state-of-the-art results in this
domain [10,16]. clearly, it is impossible to be complete. please use the referencesgiven in this tutorial for ﬁnding more material. finally, we would like to point out
http://www.workflowcourse.com as a resource for all kinds of learning ma-
terialranging fromslides to interactive animations.7 conclusion
the goal of this tutorial is to introduce the wfm/bpm domain from a petri-net point-
of-view. the focus of the ﬁrst part of the tutorial was on the application of petri nets in
this domain. sections 2 and 3 showed how wf-nets can be used to model and analyze
workﬂow processes. the focus of the second part was more on the application domain
itself. sections 4 and 5 provided information on systems, languages, and standards.
to illustrate things we presented a detailed analysis of xpdl using a set of work ﬂow
patterns.
to conclude this tutorial we re ﬂect on the role of petri nets in the wfm/bpm do-
main. there are at least three good reasons for using petri nets for work ﬂow modeling
and analysis ([2]):
1.formal semantics despite the graphical nature
on the one hand, petri nets are a graphical language which allows for the mod-
eling of the work ﬂow primitives identi ﬁed by the wfmc. on the other hand, the
semantics of petri nets (including most of the extensions) have been de ﬁned for-
mally.manyoftoday ’savailablewfmsystemsprovidead-hocconstructstomodel
workﬂow procedures. moreover, there are wfm systems that impose restrictions
onmanyofthework ﬂowpatternsdiscussed.somewfmsystemsalsoprovideex-
oticconstructswhosesemanticsarenot100%clear,cf.thejoinconstructinxpdland many other languages. because of these problems it is better to use a well-
established design language with formal semantics as a solid basis.
2.state-based instead of event-based
in contrast to many other process modeling techniques, the state of case can be
modeled explicitly in a petri net. process modeling techniques ranging from in-
formal techniques such as data ﬂow diagrams to formal techniques such as process
algebra’s areevent-based , i.e., transitions are modeled explicitly and the states be-
tween subsequent transitions are only modeled implicitly. today ’s wfm systems
aretypicallyevent-based,i.e.,tasksaremodeledexplicitlyandstatesbetweensub-
sequent tasks are suppressed. the distinction between an event-based and a state-
based description may appear to be subtle, but patterns like the deferred choice(wp16) and the milestone (wp18) show that this is of the utmost importance for
workﬂow modeling.
3.abundance of analysis techniques
petri nets are marked by the availability of many analysis techniques. clearly, this
isagreatassetinfavorofapetrinets.inthistutorial,wefocusedontheveri ﬁcation
of wf-nets. we have seen that petri-net-based analysis techniques can be used to
determinethecorrectnessofawork ﬂowprocessde ﬁnition.theavailabilityofthese
techniques illustrates that petri-net theory can be used to add powerful analysiscapabilities tothe next generation of wfm systems.
however, as indicated in[13] there are also problems when modeling work ﬂows in
terms of a petri nets. for the more advanced routing constructs it is necessary to resortto high-level nets [49,50]. moreover, a straightforward application of high-level petri
nets does not always yield the desired result. there seem to be three problems relevant
formodeling work ﬂow processes:1. high-level petri nets support colored tokens, i.e., a token can have a value. al-
thoughitispossibletousethistoidentifymultipleinstancesofasubprocess,thereis no speci ﬁc support for patterns involving multiple instances and the burden of
keeping track, splitting,and joining of instances iscarried by the designer.
2. sometimestwo ﬂowsneedtobejoinedwhileitisnotclearwhethersynchronization
is needed, i.e., if both ﬂows are active an and-join is needed otherwise an xor-
join. such advanced synchronization patterns are difﬁcult to model in terms of a
high-level petri net because the ﬁring rule only supports two types of joins: the
and-join (transition)or the xor-join (place).
3. theﬁring of a transition is always local, i.e., enabling is only based on the tokens
intheinputplacesand ﬁringisonlyaffectingtheinputandoutputplaces.however,
some events in the work ﬂow may have an effect which is not local, e.g., because
of an error tokens need to be removed from various places without knowing where
the tokens reside. everyone who has modeled such a cancellation pattern (e.g., a
global timeout mechanism) in terms of petri nets knows that it is cumbersome tomodelaso-called “vacuumcleaner ”removingtokensfromselectedpartsofthenet.
comparedtoexistingwfmlanguageshigh-levelpetrinetsarequiteexpressivewhenit
comestosupportingthework ﬂowpatterns.recallthatweusetheterm “expressiveness ”
notintheformalsense.high-levelpetrinetsareturingcomplete,andtherefore,candoanything we can de ﬁne in terms of an algorithm. however, this does not imply that the
modelingeffortisacceptable.high-levelnets,incontrasttomanywork ﬂowlanguages,
have no problems dealing with state-based patterns. this is a direct consequence ofthe fact that petri nets use places to represent states explicitly. although high-level
petri nets outperform most of the existing languages when it comes to modeling the
controlﬂow,theresultisnotcompletelysatisfactorysincethethreeproblemsindicated
hamper the application in the wfm/bpm domain. this triggered the development of
yawl (yet another work ﬂow language) . yawl is based on petri nets but extended
with additional features to facilitate the modeling of complex work ﬂows [13,14]. see
http://www.citi.qut.edu.au/yawl/ for more information or to download
the yawl system.
acknowledgments. the author would like to thank lachlan aldred, alistair barros,
twanbasten,marlondumas,bartekkiepuszewski,keesvanhee,akhilkumar,arthur
ter hofstede, hajo reijers, eric verbeek, ton weijters, and petia wohed for their col-
laborative work on the topics discussed in this tutorial.
disclaimer. the author and the associated institutions assume no legal liability or re-
sponsibility for the accuracy and completeness of any information about xpdl or any
of the other standards/products mentioned in this tutorial. however, all possible efforts
have been made to ensure that the results presented are, to the best of our knowledge,up-to-date and correct.
references
1. w.m.p. van der aalst. veri ﬁcation of work ﬂow nets. in p. az ´ema and g. balbo, editors,
application and theory of petri nets 1997 , volume 1248 of lecture notes in computer
science, pages 407 –426. springer-verlag, berlin,1997.2. w.m.p.vanderaalst. chapter10:threegoodreasonsforusingapetri-net-basedwork ﬂow
managementsystem.int.wakayama,s.kannapan,c.m.khoong,s.navathe,andj.yates,
editors,informationandprocessintegrationinenterprises:rethinkingdocuments ,volume
428 ofthe kluwer international series in engineering and computer science , pages 161 –
182.kluwer academic publishers,boston,massachusetts,1998.
3. w.m.p.vanderaalst. theapplicationofpetrinetstowork ﬂowmanagement. thejournal
ofcircuits,systemsand computers ,8(1):21–66, 1998.
4. w.m.p. van der aalst. work ﬂow veriﬁcation: finding control-flow errors using petri-net-
based techniques. in w.m.p. van der aalst, j. desel, and a. oberweis, editors, business
process management: models, techniques, and empirical studies , volume 1806 of lecture
notesincomputerscience , pages 161 –183. springer-verlag, berlin,2000.
5. w.m.p. van der aalst. making work flow: on the application of petri nets to business
process management. in j. esparza and c. lakos, editors, application and theory of petri
nets2002 ,volume2360of lecturenotesincomputerscience ,pages1–22.springer-verlag,
berlin,2002.
6. w.m.p.vanderaalst. don ’tgowiththe ﬂow:webservicescompositionstandardsexposed.
ieeeintelligentsystems , 18(1):72 –76,2003.
7. w.m.p. van der aalst and t. basten. inheritance of work ﬂows: an approach to tackling
problemsrelatedtochange. theoretical computerscience , 270(1-2):125 –203, 2002.
8. w.m.p. van der aalst and p.j.s. berens. beyond work ﬂow management: product-driven
casehandling. ins.ellis,t.rodden,andi.zigurs,editors, internationalacmsiggroup
conference on supporting group work (group 2001) , pages 42 –51. acm press, new
york, 2001.
9. w.m.p.vanderaalst,j.desel,ande.kindler. onthesemanticsofepcs:aviciouscircle.
in m. n¨uttgens and f.j. rump, editors, proceedings of the epk 2002: business process
management using epcs , pages 71 –80, trier, germany, november 2002. gesellschaft f ¨ur
informatik,bonn.
10. w.m.p. van der aalst, j. desel, and a. oberweis, editors. business process management:
models, techniques, and empirical studies , volume 1806 of lecture notes in computer
science. springer-verlag, berlin,2000.
11. w.m.p. van der aalst, m. dumas, a.h.m. ter hofstede, and p. wohed. pattern-based anal-
ysisofbpml(andwsci). quttechnicalreport,fit-tr-2002-05,queenslanduniversity
oftechnology, brisbane,2002.
12. w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods, and
systems. mitpress,cambridge, ma,2002.
13. w.m.p.vanderaalstanda.h.m.terhofstede. work ﬂowpatterns:ontheexpressivepower
of (petri-net-based) work ﬂow languages. in k. jensen, editor, proceedings of the fourth
workshop on the practical use of coloured petri nets and cpn tools (cpn 2002) , volume
560ofdaimi,pages1–20, aarhus,denmark, august 2002.university ofaarhus.
14. w.m.p. van der aalst and a.h.m. ter hofstede. yawl: yet another work ﬂow language.
qut technical report, fit-tr-2002-06, queensland university of technology, brisbane,
2002.
15. w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. barros. work ﬂow
patterns. distributedand paralleldatabases ,14(1):5–51, 2003.
16. w.m.p. van der aalst, a.h.m. ter hofstede, and m. weske, editors. busines process man-
agement,volume2678of lecturenotesincomputerscience .springer-verlag,berlin,2003.
17. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and a.j.m.m.
weijters. work ﬂow mining: a survey of issues and approaches. data and knowledge
engineering ,47(2):237 –267, 2003.18. w.m.p. van der aalst, k.m. van hee, and r.a. van der toorn. component-based soft-
ware architectures: a framework based on inheritance of behavior. science of computer
programming ,42(2-3):129 –171, 2002.
19. w.m.p.vanderaalstanda.j.m.m.weijters,editors. processmining ,specialissueofcom-
putersinindustry,volume 53,number 3. elsevierscience publishers,amsterdam, 2004.
20. a. arkin, s. askary, s. fordin, and w. jekel et al. web service choreography interface
(wsci)1.0. standardspropsalbybeasystems,intalio,sap,andsunmicrosystems,2002.
21. a.arkinet al. businessprocessmodeling language (bpml),version 1.0,2002.22. pallas athena. case handling with flower: beyond work ﬂow. pallas athena bv, apel-
doorn,thenetherlands, 2002.
23. k. barkaoui, j.m. couvreur, and c. dutheillet. on liveness in extended non self-
controlling nets. in g. de michelis and m. diaz, editors, application and theory of petri
nets1995 ,volume935of lecturenotesincomputerscience ,pages25 –44.springer-verlag,
berlin,1995.
24. j.billingtonandet.al.thepetrinetmarkuplanguage:concepts,technology,andtools.in
w.m.p.vanderaalstande.best,editors, applicationandtheoryofpetrinets2003 ,volume
2679oflecture notesin computerscience , pages 483 –506. springer-verlag, berlin,2003.
25. r.casonato. gartnergroupresearchnote00057684,production-classwork ﬂo w:av ie w
of the market. http://www.gartner.com, 1998.
26. a. cheng, j. esparza, and j. palsberg. complexity results for 1-safe nets. in r.k. shyama-
sundar,editor, foundationsofsoftwaretechnologyandtheoreticalcomputerscience ,volume
761oflecture notesincomputer science , pages 326 –337. springer-verlag, berlin,1993.
27. f. curbera, y. goland, j. klein, f. leymann, d. roller, s. thatte, and s. weerawarana.
business process execution language for web services, version 1.0. standards propsal
bybeasystems,internationalbusinessmachinescorporation,andmicrosoftcorporation,2002.
28. j. dehnert. a methodology for work ﬂow modeling: from business process modeling to-
wardssoundwork ﬂowspeciﬁcation. phdthesis,tuberlin,berlin,germany, 2003.
29. j. desel. a proof of the rank theorem for extended free-choice nets. in k. jensen, edi-
tor,application and theory of petri nets 1992 , volume 616 of lecture notes in computer
science, pages 134 –153. springer-verlag, berlin,1992.
30. j.deselandj.esparza. freechoicepetrinets ,volume40of cambridgetractsintheoret-
icalcomputerscience . cambridge universitypress,cambridge, uk, 1995.
31. m. dumas and a.h.m. ter hofstede. uml activity diagrams as a work ﬂow speciﬁcation
language. inm.gogollaandc.kobryn,editors, proc.ofthe4thint.conferenceontheuni-
ﬁed modeling language (uml01) , volume 2185 of lncs, pages 76 –90, toronto, canada,
october 2001.springerverlag.
32. c.a. ellis. information control nets: a mathematical model of of ﬁce information flow.
inproceedings of the conference on simulation, measurement and modeling of computer
systems,pages225 –240, boulder,colorado,1979. acmpress.
33. c.a. ellis and g. nutt. work ﬂow: the process spectrum. in a. sheth, editor, proceedings
of the nsf workshop on work ﬂow and process automation in information systems , pages
140–145, athens,georgia, may 1996.
34. r. eshuis and j. dehnert. reactive petri nets for work ﬂow modeling. in w.m.p. van der
aalst and e. best, editors, application and theory of petri nets 2003 , volume 2679 of lec-
turenotesincomputer science , pages 295 –314. springer-verlag, berlin,2003.
35. j. esparza. synthesis rules for petri nets, and how they can lead to new results. in j.c.m.
baetenandj.w.klop,editors, proceedingsofconcur1990 ,volume458of lecturenotes
incomputerscience , pages182 –198. springer-verlag, berlin,1990.36. j. esparza and m. silva. circuits, handles, bridges and nets. in g. rozenberg, editor,
advancesinpetrinets1990 ,volume483of lecturenotesincomputerscience ,pages210 –
242.springer-verlag, berlin,1990.
37. l. fischer, editor. workﬂow handbook 2001, work ﬂow management coalition . future
strategies,lighthousepoint,florida, 2001.
38. l. fischer, editor. workﬂow handbook 2003, work ﬂow management coalition . future
strategies,lighthousepoint,florida, 2003.
39. gartner. gartner ’s application development and maintenance research note m-16-8153,
the bpa market cathes another major updraft. http://www.gartner.com, 2002.
40. d. georgakopoulos, m. hornick, and a. sheth. an overview of work ﬂow management:
from process modeling to work ﬂow automation infrastructure. distributed and parallel
databases ,3:119–153, 1995.
41. r.j. van glabbeek and d.g. stork. query nets: interacting work ﬂow modules that ensure
global termination. in w.m.p. van der aalst, a.h.m. ter hofstede, and m. weske, editors,international conference on business process management (bpm 2003) , volume 2678 of
lecturenotesincomputerscience , pages184 –199. springer-verlag, berlin,2003.
42. object management group. omg uni ﬁed modeling language 2.0 proposal, re-
vised submission to omg rfps ad/00-09-01 and ad/00-09-02, version 0.671 . omg,
http://www.omg.com/uml/, 2002.
43. m.h.t. hack. analysis production schemata by petri nets. master ’s thesis, massachusetts
instituteoftechnology, cambridge, mass.,1972.
44. k. van hee, n. sidorova, and m. voorhoeve. soundness and separability of work ﬂow nets
in the stepwise re ﬁnement approach. in w.m.p. van der aalst and e. best, editors, appli-
cation and theory of petri nets 2003 , volume 2679 of lecture notes in computer science ,
pages335 –354. springer-verlag, berlin,2003.
45. a. w. holt. coordination technology and petri nets. in g. rozenberg, editor, advances
in petri nets 1985 , volume 222 of lecture notes in computer science , pages 278 –296.
springer-verlag, berlin,1985.
46. ibm. ibm mqseries work ﬂow - getting started with buildtime . ibm deutschland en-
twicklung gmbh, boeblingen, germany, 1999.
47. idsscheer. arisprocessperformancemanager(arisppm). http://www.ids-scheer.com,
2002.
48. s. jablonski and c. bussler. workﬂow management: modeling concepts, architecture, and
implementation . international thomsoncomputerpress,london,uk, 1996.
49. k.jensen. colouredpetrinets:ahighlevellanguageforsystemdesignandanalysis. in
g.rozenberg,editor, advancesinpetrinets1990 ,volume483of lecturenotesincomputer
science, pages 342 –416. springer-verlag, berlin,1990.
50. k. jensen. coloured petri nets. basic concepts, analysis methods and practical use. vol-
ume 1. eatcs monographs on theoretical computer science. springer-verlag, berlin,
1997.
51. b. kiepuszewski. expressiveness and suitability of languages for control flow modelling
in workﬂows. phd thesis, queensland university of technology, brisbane, australia, 2003.
available viahttp://www.tm.tue.nl/it/research/patterns.
52. b.kiepuszewski,a.h.m.terhofstede,andw.m.p.vanderaalst. fundamentalsofcontrol
flowinwork ﬂows.actainformatica ,39(3):143 –209, 2003.
53. e. kindler and w.m.p. van der aalst. liveness, fairness, and recurrence. information
processingletters ,70(6):269 –274, june1999.
54. e. kindler, a. martens, and w. reisig. inter-operability of work ﬂow applications: local
criteria for global soundness. in w.m.p. van der aalst, j. desel, and a. oberweis, editors,
businessprocessmanagement:models,techniques,andempiricalstudies ,volume1806of
lecturenotesincomputerscience , pages235 –253. springer-verlag, berlin,2000.55. p. lawrence, editor. workﬂow handbook 1997, work ﬂow management coalition . john
wiley andsons,new york, 1997.
56. f.leymann. web servicesflow language, version 1.0,2001.
57. f. leymann and d. roller. production work ﬂow: concepts and techniques . prentice-hall
ptr,upper saddle river,new jersey,usa,1999.
58. d.c. marinescu. internet-based work ﬂow management: towards a semantic web , vol-
ume 40 of wiley series on parallel and distributed computing . wiley-interscience, new
york, 2002.
59. m. ajmone marsan, g. balbo, and g. conte et al. modelling with generalized stochastic
petrinets . wiley seriesinparallel computing. wiley, new york, 1995.
60. a.martens. oncompatibilityofweb services. petrinetnewsletter ,65:12–20, 2003.
61. m.zurmuehlen. workﬂow-basedprocesscontrolling:foundation,designandapplication
ofworkﬂow-drivenprocessinformationsystems . logos,berlin,2004.
62. w. reisig. petri nets: an introduction , volume 4 of eatcs monographs in theoretical
computerscience . springer-verlag, berlin,1985.
63. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models , volume 1491
oflecturenotesincomputerscience . springer-verlag, berlin,1998.
64. w. sadiq and m.e. orlowska. analyzing process models using graph reduction tech-
niques.informationsystems ,25(2):117 –134, 2000.
65. r. shapiro. a comparison of xpdl, bpml and bpel4ws (version 1.4).
http://xml.coverpages.org/shapiro-xpdl.pdf, 2002.
66. software-ley. cosausermanual . software-leygmbh, pullheim, germany, 1998.
67. software-ley. cosa3.0usermanual . software-ley gmbh, pullheim,germany, 1999.
68. s. staab, w. van der aalst, v.r. benjamins, a. sheth, j. miller, c. bussler, a. maedche,
d. fensel, and d. gannon. web services: been there, done that? (trends and controver-
sies).ieeeintelligent systems ,18(1):72 –85, 2003.
69. staffware. staffware2000/gwdusermanual . staffwareplc,berkshire,unitedkingdom,
2000.
70. s.thatte. xlang web servicesforbusinessprocessdesign,2001.
71. r. van der toorn. component-based software design with petri nets: an approach based
on inheritance of behavior . phd thesis, eindhoven university of technology, eindhoven,
thenetherlands, 2004.
72. h.m.w.verbeek. veriﬁcationandenactmentofwork ﬂowmanagementsystems(submitted) .
phdthesis,eindhoven universityoftechnology, eindhoven, thenetherlands, 2004.
73. h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing work ﬂow processes
usingwo ﬂan.thecomputerjournal , 44(4):246 –279, 2001.
74. wfmc. work ﬂow management coalition work ﬂow standard: interface 1 –process de ﬁ-
nitioninterchange processmodel(wfmc-tc-1016). technical report, work ﬂow manage-
mentcoalition,lighthouse point,florida,usa, 1999.
75. wfmc. work ﬂow management coalition work ﬂow standard: work ﬂow process de ﬁni-
tion interface –xml process de ﬁnition language (xpdl) (wfmc-tc-1025). technical
report,work ﬂow management coalition,lighthousepoint,florida, usa,2002.
76. p.wohed,w.m.p.vanderaalst,m.dumas,anda.h.m.terhofstede. pattern-basedanaly-
sis of bpel4ws. qut technical report, fit-tr-2002-04, queensland university of tech-
nology, brisbane,2002.
77. p. wohed, w.m.p. van der aalst, m. dumas, and a.h.m. ter hofstede. analysis of web
services composition languages: the case of bpel4ws. in i.y. song, s.w. liddle, t.w.ling, and p. scheuermann, editors, 22nd international conference on conceptual modeling
(er 2003) , volume 2813 of lecture notes in computer science , pages 200 –215. springer-
verlag, berlin,2003.78. m.d. zisman. representation, speci ﬁcation and automation of of ﬁce procedures . phd
thesis,university ofpennsylvania, warton school ofbusiness,1977.
a xpdlschema
the listing below shows selected parts of the xpdl schema given in [75] relevant for
thistutorial.
1<xsd:element name="activity">
2<xsd:complextype>
3 <xsd:sequence>
4 <xsd:element ref="xpdl:description" minoccurs="0"/>
5 <xsd:element ref="xpdl:limit" minoccurs="0"/>
6 <xsd:choice>
7 <xsd:element ref="xpdl:route"/>
8 <xsd:element ref="xpdl:implementation"/>
9 <xsd:element ref="xpdl:blockactivity"/>
10 </xsd:choice>
11 <xsd:element ref="xpdl:performer" minoccurs="0"/>
12 <xsd:element ref="xpdl:startmode" minoccurs="0"/>
13 <xsd:element ref="xpdl:finishmode" minoccurs="0"/>
14 <xsd:element ref="xpdl:priority" minoccurs="0"/>
15 <xsd:element ref="xpdl:deadline" minoccurs="0"
16 maxoccurs="unbounded"/>
17 <xsd:element ref="xpdl:simulationinformation" minoccurs="0"/>
18 <xsd:element ref="xpdl:icon" minoccurs="0"/>
19 <xsd:element ref="xpdl:documentation" minoccurs="0"/>
20 <xsd:element ref="xpdl:transitionrestrictions" minoccurs="0"/>
21 <xsd:element ref="xpdl:extendedattributes" minoccurs="0"/>
22 </xsd:sequence>
23 <xsd:attribute name="id" type="xsd:nmtoken" use="required"/>
24 <xsd:attribute name="name" type="xsd:string"/>
25</xsd:complextype>
26</xsd:element>
27...
28<xsd:element name="transitionrestriction">
29<xsd:complextype>
30 <xsd:sequence>
31 <xsd:element ref="xpdl:join" minoccurs="0"/>
32 <xsd:element ref="xpdl:split" minoccurs="0"/>
33 </xsd:sequence>
34</xsd:complextype>
35</xsd:element> <xsd:element name="transitionrestrictions">
36<xsd:complextype>
37 <xsd:sequence>38 <xsd:element ref="xpdl:transitionrestriction" minoccurs="0"
39 maxoccurs="unbounded"/>
40 </xsd:sequence>
41</xsd:complextype>
42</xsd:element>
43...
44<xsd:element name="join">
45<xsd:complextype>
46 <xsd:attribute name="type">
47 <xsd:simpletype>
48 <xsd:restriction base="xsd:nmtoken">
49 <xsd:enumeration value="and"/>
50 <xsd:enumeration value="xor"/>
51 </xsd:restriction>
52 </xsd:simpletype>
53 </xsd:attribute>
54</xsd:complextype>
55</xsd:element>
56...
57<xsd:element name="split">
58<xsd:complextype>
59 <xsd:sequence>
60 <xsd:element ref="xpdl:transitionrefs" minoccurs="0"/>
61 </xsd:sequence>
62 <xsd:attribute name="type">
63 <xsd:simpletype>
64 <xsd:restriction base="xsd:nmtoken">
65 <xsd:enumeration value="and"/>
66 <xsd:enumeration value="xor"/>
67 </xsd:restriction>
68 </xsd:simpletype>
69 </xsd:attribute>
70</xsd:complextype>
71</xsd:element>
72...
73<xsd:element name="transition">
74<xsd:complextype>
75 <xsd:sequence>
76 <xsd:element ref="xpdl:condition" minoccurs="0"/>
77 <xsd:element ref="xpdl:description" minoccurs="0"/>
78 <xsd:element ref="xpdl:extendedattributes" minoccurs="0"/>
79 </xsd:sequence>
80 <xsd:attribute name="id" type="xsd:nmtoken" use="required"/>
81 <xsd:attribute name="from" type="xsd:nmtoken" use="required"/>
82 <xsd:attribute name="to" type="xsd:nmtoken" use="required"/>83 <xsd:attribute name="name" type="xsd:string"/>
84</xsd:complextype>
85</xsd:element>
86...
87<xsd:element name="condition">
88<xsd:complextype mixed="true">
89 <xsd:choice minoccurs="0" maxoccurs="unbounded">
90 <xsd:element ref="xpdl:xpression"/>
91 </xsd:choice>
92 <xsd:attribute name="type">
93 <xsd:simpletype>
94 <xsd:restriction base="xsd:nmtoken">
95 <xsd:enumeration value="condition"/>
96 <xsd:enumeration value="otherwise"/>
97 <xsd:enumeration value="exception"/>
98 <xsd:enumeration value="defaultexception"/>
99 </xsd:restriction>
100 </xsd:simpletype>
101 </xsd:attribute>
102</xsd:complextype>
103</xsd:element>