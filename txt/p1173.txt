a python extension to simulate petri nets in
process mining?
m. pourbafrani1, sandhya vasudevan2, faizan zafar2,yuan xingran2,
ravikumar singh2and wil m. p. van der aalst1
1chair of process and data science, rwth aachen university, germany
fmahsa.bafrani,wvdaalst g@pads.rwth-aachen.de
2rwth aachen university fsandhya.vasudevan,
faizan.zafar,xingran.yuan,ravikumar.singh g@rwth-aachen.de
abstract. the capability of process mining techniques in providing ex-
tensive knowledge and insights into business processes has been widely
acknowledged. process mining techniques support discovering process
models as well as analyzing process performance and bottlenecks in
the past executions of processes. however, process mining tends to be
\backward-looking" rather than "forward-looking" techniques like simu-
lation. for example, process improvement also requires "what-if" analy-
ses. in this paper, we present a python library which uses an event log
to directly generate a simulated event log, with additional options for
end-users to specify duration of activities and the arrival rate. since the
generated simulation model is supported by historical data (event data)
and it is based on the discrete event simulation (des) technique, the
generated event data is similar to the behavior of the real process.
keywords: process mining, simulation, discrete event simulation, event
log, automatic simulation model generation.
1 introduction
process mining tools provide unique capabilities to diagnose business processes
existing within organizations (e.g., in transaction logs or audit trails) including
discovering the running processes, as well as deviations and bottlenecks that oc-
cur or exist in the current state of the processes [1]. in all of the proposed tools
for simulation in process mining, interaction with the user and user knowledge
is an undeniable requirement for designing and running the simulation models.
moreover, most of the approaches are dependent on external simulation tools.
for instance, in [2], the proposed business process simulation technique is based
on the bpmn model. all the simulation parameters with the bpmn model are
put into a simulation tool such as bimp for the simulation step. [3] provides
a comprehensive platform for modeling stochastic petri nets, however, the con-
nection to process mining is missing. the in [4], the created simulation model is
?acknowledgments funded by the deutsche forschungsgemeinschaft (dfg, german research
foundation) under germany's excellence strategy{exc-2023 internet of production { 390621612.
we also thank the alexander von humboldt (avh) stiftung for supporting our research.arxiv:2102.08774v1  [cs.se]  16 feb 20212 mahsa pourbafrani et al.
based on the cpn tool which requires users to have knowledge of discrete event
simulation as well as standard machine language (sml) to dene functions and
capture the output as an event log [5]. in [6] an external tool, i.e., adonis for
simulating the discovered model and parameters are used. it should be noted
generating the simulated log 
process mining 
discrete event simulation
event log
calculate arrival 
rate 
(statistical analysis )
process discovery
(petri net )
performance 
analysis
(activity duration ) 
generate new cases
generate the possible flow 
(trace , next possible 
activity )
process the possible 
activity
capture the events 
for the case and 
activity 
convert the 
simulation clock 
time to the 
timestamp
simulated 
event log
fig. 1: the general framework for discrete event simulation in process mining. the automatic gener-
ation of simulation models and the corresponding simulated event logs is possible by starting with an
event log, extracting the process model and the performance information, generating random cases,
and nally converting the processed activities in the form of events. the user annotations indicate
the options for the user to simulate the process with user-dened parameters.
that oftentimes the user does not need to have in-depth knowledge of the pro-
cess so as to simulate it which holds for the most of commercial tools such as
protos ,any logic andarena . for instance, when the user only needs to know
how the process will behave if the average arrival rate increases to 5 minutes,
i.e., every 5 minutes a new case arrives.
in process mining, the above-mentioned requirements can be addressed by the
concept of discrete event simulation (des) [7]. des for business processes has
been developed in java as a plugin of prom [8]. however, custom options such
as the ability to change the duration of activities for future performance analyses
are missing. approaches such as in [9] uses the same idea in java, including some
drawbacks, e.g., a xed duration for case generation step. the generated cases
do not have any time overlap, which is not the case in reality. work such as
[10] tries to generate a business simulation model for business processes which
relies on the user domain knowledge. [11] describes a range of modeling tasks
that should be considered when creating a realistic business process simulation
model.
existing process mining tools provide users with a visual representation of
process discovery and performance analyses using event data in the form of event
logs. therefore, an approach is needed to play out reality and generate the exact
behavior which makes further analyses in process mining possible. moreover,
the option to extend the library as an open-source tool is easily provided. user
options to add capacity to the activities and to extend the case production for
dierent times of the day and week can be implemented.
research work such as [12] and [13] use aggregated simulation which is useful
for what-if analyses in a high-level decision-making scenario [14]. the pmsd tool
represents the aggregated approach and generates a simulation model at a higher
level of detail [15].
in this paper, we introduce an easy-to-use open-source python-based appli-
cation that connect the provided process mining environment in python pm4pya python extension to simulate petri nets in process mining 3
[16] to the general simulation techniques in python, simpy3. the latter library
is used for discrete event simulation and handles the required system clock in
des. the automatically designed simulation model can be congured with user-
dened duration for the activities and arrival rate. the nal output is an event
log based on the given number of cases that can be used further for process
mining analyses. the designed framework of the tool is shown in fig. 1. it is
designed on the basis of three main modules; process mining, simulation, and
transformation of the generated events into an event log.
2 pnsim
event logs comprise events where each event refers to a case (process instance),
anactivity , atimestamp , and any number of additional attributes (e.g., costs,
resources, etc.). a set of events forms an event log which can be used in process
mining analyses. as shown in fig. 1, our approach starts with applying pro-
cess mining techniques on the original event log. therewith a process model is
discovered in the form of a petri net which presents possible ows of activities
for the cases. subsequently, performance analyses provide the case arrival rate
including the business hours and the average duration of the activities. this
information makes the automatic generation of process instances based on the
past executions of processes possible.
start
user 
configuration provided ?
start simulating yes
no
discover process model 
(petri net ) 
discover arrival rate and 
activity duration 
generate a case 
noend
pick an available 
marking from petri net
capture the event (case 
id, activity , timestamp )
required cases
 generated ?
import event log
update changes
simulate the 
corresponding activity 
yes
is it the final marking ? yesno
fig. 2: the owchart of the integrated discrete
event simulation of the processes using process
mining. each activity runs if it is available and
the clock of the simulation gets updated for every
new event. new events are a newly arrived case,
the end of processing an activity for a case, or the
start of the processing of an activity for a case.we aim to provide a simulation
model and the corresponding simu-
lated event log as close to reality as
possible. to do so, we perform the fol-
lowing preprocessing steps in the pro-
cess mining module:
{process discovery:
maximum length of traces :
the presence of loops in the
process models (petri nets)
makes the generation of long
unrealistic traces possible. by
identifying and replacing the
maximum length of traces, we
limit the possibility of the ex-
ecution of unrealistic loops for the simulated cases.
{performance analyses:
arrival rate calculation : the business hours are considered by default in
calculating the average arrival rate. moreover, we learn the inter-arrival
time distribution from the actual arrival times. the detected distribution
is used in the simulation step.
3https://simpy.readthedocs.io4 mahsa pourbafrani et al.
activity duration : by removing outliers from the set of duration for each
activity, we provide more robust values for the duration of activities.
using the distribution of activities' duration, we implicitly consider the average
duration of resources' time without extracting the resource pool. this aggregated
calculation includes the behavior of resources for handling each activity.
next is the simulation module in which we generate new cases. in extracting
the arrival rate of cases, i.e., the duration of time for a new case to arrive, we
include the business hours in the calculation of the arrival rate to obtain an
accurate value. the next step is to discover how the cases are handled in the
process w.r.t. the service time of each activity and the possible ow of activi-
ties that each case can take. based on the presence of the start and complete
timestamps, the value of the average duration of each activity is captured. the
discovered petri net also is used for generating a possible ow of activities. the
provided user options to interact with and modify the simulation process are the
following functions:
{activity duration generates the random values based on the extracted values
for each activity and the corresponding distribution. the user is able to
change the parameters of the distribution .
{arrival rate uses a normal distribution for generating new cases and the user
is able to change the average arrival rate for the simulated log.
{case generator produces random cases based on the provided number of
cases by the user. it determines the terminating point of the simulation.
the nal module is designed to transform the simulated events for the generated
cases into event logs. the discrete event simulation clock is converted to the real
timestamp and each activity is recorded for the cases in the real timestamp. the
ow chart of the simulation module of our tool is shown in fig. 2. after each new
generated case, it checks the condition whether the number of cases provided by
the user is met. accordingly, it follows up with processing the picked marking
from the petri net. either the provided outputs by the process mining module
or user parameters are used to start the simulation. by selecting the available
activity from the petri net, the simulation module checks whether the previous
process of the activity has nished. in the last step, after performing each possible
event (generating a new case or processing of an activity) the simulation clock
gets updated and the data is captured. since the simulation technique considers
the capacity of each activity, the concept of queuing is implicitly covered in the
simulated event log. when an activity with full capacity, i.e., processing other
cases, is selected for the current case, the case is in the waiting state which is
shown in the performance analyses of the event log.
3 tool maturity
the source code of our tool, a tutorial, and a screen-cast are publicly avail-
able.4the tool has been used in multiple academic projects to simulate a
4https://github.com/mbafrani/automaticprocesssimulationa python extension to simulate petri nets in process mining 5
check ticket
decide
examine casually examine thoroughlypay compensation register request reinitiate request reject request1
case end check ticket
decideexamine casually examine thoroughlypay compensation register request reinitiate request reject request1
fig. 3: the discovered process model of the example event log using petri net notation. it includes
8 unique activities and represents the process of handling requests in an organization (a).the dis-
covered process model of the simulated event log using petri net notation. our tool generates the
simulated event log directly from the original event log, which captures both time and activity ow
features of the original process (b).
process model in dierent situations and generate dierent event logs. for in-
stance, for the purpose of time series analyses, dierent arrival rates for the
same process have been selected and the tool event logs are generated. we
use a sample case study to demonstrate the steps and usability of our tool.
fig. 4: part of the simulated event log for the ex-
ample event log which is generated in the .csvfor-
mat. it includes the main attributes of an event
log, case id, activity, and timestamp.figure 3(a) shows a sample process
model of the example event log in the
form of a petri net. we use the sam-
ple event log and simulate the process
for 1000 cases. using the same pro-
cess discovery algorithm for the sim-
ulated event log result in the same
model including concurrences in the
model as shown in fig. 3(b). the dis-
covered model shows that our tool is
able to mimic the process and simu-
late the model including the time aspects of the process. part of the simulated
log is shown in fig. 4. the simulated event log has the main attributes of an
event log. it captures the case id which is increased incrementally to the dened
number by the user, activity names, and the corresponding complete time as
timestamp .
4 conclusion
techniques for past analyses of processes in organizations are well-supported in
existing academic and commercial process mining tools. however, future analyses
for business processes are not fully covered in the current tools. commonly
used options either need knowledge of simulation techniques and modeling, high
interaction with users or are not accurate enough since they are not supported
by real event data. in this paper, we presented the tool which directly uses the
event data of a process in the form of an event log and simulates the process
with the automatically extracted values as well as user-dened input. the tool6 mahsa pourbafrani et al.
is designed to simulate the processes in dierent scenarios. since the simulation
module is based on the discrete event simulation technique, the simulated event
log includes the same behavior as the real event log.
references
1. w. m. p. van der aalst, process mining - data science in action, second edition .
springer, 2016.
2. m. camargo, m. dumas, and o. g. rojas, \simod: a tool for automated discovery
of business process simulation models," pp. 139{143, 2019.
3. s. baarir, m. beccuti, d. cerotti, m. de pierro, s. donatelli, and g. franceschinis,
\the greatspn tool: recent enhancements," sigmetrics performance evaluation
review , vol. 36, pp. 4{9, 03 2009.
4. a. rozinat, r. s. mans, m. song, and w. m. p. van der aalst, \discovering
simulation models," inf. syst. , vol. 34, no. 3, pp. 305{327, 2009.
5. a. v. ratzer, l. wells, h. m. lassen, m. laursen, j. f. qvortrup, m. s. stissing,
m. westergaard, s. christensen, and k. jensen, \cpn tools for editing, simulating,
and analysing coloured petri nets," in applications and theory of petri nets 2003,
24th international conference, icatpn 2003, eindhoven, the netherlands, june
23-27, 2003, proceedings , pp. 450{462, 2003.
6. b. gawin and b. marcinkowski, \how close to reality is the as-is business process
simulation model?," organizacija , vol. 48, no. 3, pp. 155 { 175, 2015.
7. w. m. p. van der aalst, \process mining and simulation: a match made in heaven!,"
inproceedings of the 50th computer simulation conference, summersim 2018,
bordeaux, france, july 09-12, 2018 , pp. 4:1{4:12, acm, 2018.
8. b. f. van dongen, a. k. a. de medeiros, h. verbeek, a. weijters, and w. m.
van der aalst, \the prom framework: a new era in process mining tool support,"
ininternational conference on application and theory of petri nets , pp. 444{454,
springer, 2005.
9. a. rogge-solti and m. weske, \prediction of business process durations using non-
markovian stochastic petri nets," inf. syst. , vol. 54, pp. 1{14, 2015.
10. l. pufahl and m. weske, \extensible bpmn process simulator," in proceedings of
the bpm demo track and bpm dissertation award co-located with 15th interna-
tional conference on business process modeling (bpm) , 2017.
11. n. martin, b. depaire, and a. caris, \the use of process mining in business process
simulation model construction - structuring the eld," bus. inf. syst. eng. , vol. 58,
no. 1, pp. 73{87, 2016.
12. m. pourbafrani, s. j. van zelst, and w. m. p. van der aalst, \scenario-based
prediction of business processes using system dynamics," in on the move to mean-
ingful internet systems: otm 2019 conferences - confederated international con-
ferences: coopis, odbase, c&tc 2019, rhodes, greece, october 21-25, 2019,
proceedings , pp. 422{439, 2019.
13. m. pourbafrani, s. j. van zelst, and w. m. p. van der aalst, \supporting auto-
matic system dynamics model generation for simulation in the context of process
mining," in business information systems - 23rd international conference, bis
2020, colorado springs, co, usa, june 8-10, 2020, proceedings , pp. 249{263,
2020.
14. m. pourbafrani, s. j. van zelst, and w. m. p. van der aalst, \supporting deci-
sions in production line processes by combining process mining and system dy-
namics," in intelligent human systems integration 2020 - proceedings of the 3rda python extension to simulate petri nets in process mining 7
international conference on intelligent human systems integration (ihsi 2020):
integrating people and intelligent systems, february 19-21, 2020, modena, italy ,
pp. 461{467, 2020.
15. m. pourbafrani and w. m. p. van der aalst, \pmsd: data-driven simulation in
process mining," in proceedings of the dissertation award, doctoral consortium,
and demonstration track at bpm 2020 co-located with 18th international confer-
ence on business process management, bpm 2020 , 2020.
16. a. berti, s. j. van zelst, and w. m. p. van der aalst, \process mining for
python (pm4py): bridging the gap between process- and data science," corr ,
vol. abs/1905.06169, 2019.