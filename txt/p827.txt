compliance monitoring in business processes:
functionalities, application, and tool-support
linh thao lya, fabrizio maria maggib, marco montalic, stefanie rinderle-mad, wil
m.p. van der aalste
aulm university
buniversity of tartu
cfree university of bozen-bolzano
duniversity of vienna, faculty of computer science
eeindhoven university of technology
abstract
in recent years, monitoring the compliance of business processes with relevant regula-
tions, constraints, and rules during runtime has evolved as major concern in literature
and practice. monitoring not only refers to continuously observing possible compli-
ance violations, but also includes the ability to provide ﬁne-grained feedback and to
predict possible compliance violations in the future. the body of literature on business
process compliance is large and approaches speciﬁcally addressing process monitor-
ing are hard to identify. moreover, proper means for the systematic comparison of
these approaches are missing. hence, it is unclear which approaches are suitable for
particular scenarios. the goal of this paper is to deﬁne a framework for compliance
monitoring functionalities (cmf) that enables the systematic comparison of existing
and new approaches for monitoring compliance rules over business processes during
runtime. to deﬁne the scope of the framework, at ﬁrst, related areas are identiﬁed and
discussed. the cmfs are harvested based on a systematic literature review and ﬁve
selected case studies. the appropriateness of the selection of cmfs is demonstrated
in two ways: (a) a systematic comparison with pattern-based compliance approaches
and (b) a classiﬁcation of existing compliance monitoring approaches using the cmfs.
moreover, the application of the cmfs is showcased using three existing tools that are
applied to two realistic data sets. overall, the cmf framework provides a powerful
means to position existing and future compliance monitoring approaches.
keywords: business process compliance; compliance monitoring; operational
support
i
email addresses: thao.ly@uni-ulm.de (linh thao ly), f.m.maggi@ut.ee (fabrizio maria
maggi), montali@inf.unibz.it (marco montali), stefanie.rinderle-ma@univie.ac.at
(stefanie rinderle-ma), w.m.p.v.d.aalst@tue.nl (wil m.p. van der aalst)
preprint submitted to elsevier february 5, 20151. introduction
business process compliance emerged as hot topic in research during the last years.
in essence, several approaches have been developed to formally and (semi-) automat-
ically prove that business processes comply with relevant constraints such as regula-
tions, laws, or guidelines. an example constraint from the medical domain would be
“the patient has to be informed about the risks of a surgery before the surgery takes
place”. in practice, compliance checks are often conducted manually and hence per-
ceived as a burden [1], although their importance is undoubted.
the need to check for compliance of business processes based on a set of con-
straints may emerge in different phases of the process life cycle [2, 3]. during design
time, the compliance of a process model with a set of constraints is checked. at run-
time, the progress of a potentially large number of process instances is monitored to
detect or even predict compliance violations. for this, typically, terms such as compli-
ance monitoring or online auditing are used. finally, processes can be diagnosed for
compliance violations in a post mortem or ofﬂine manner, i.e., after process instance
execution has been ﬁnished.
this paper is dedicated to compliance monitoring as this is crucial for the timely
detection and prediction of compliance violations as well as for the provision of re-
active and pro-active countermeasures on compliance violations [4, 5, 6]. further, in
realistic settings, the existence of a complete process model for compliance checks
cannot always be assumed. in fact, business processes are often implemented in a
rather implicit manner and executed over different information systems (e.g., enter-
prise resource planning (erp) or customer relationship management (crm) tools)
as depicted in figure 1. although there are similarities between design time / post
mortem analysis and compliance monitoring (see also section 3.1.5), this paper will
focus on the latter in order to provide a clear scope.
compliance requirements (laws, regulations, standards, …)interpretationspeciﬁcation
compliance objectives
compliance rules / constraints
monitoring engine
visualization / reportingeventsresults
crm
erp
wfms
…process execution
figure 1: compliance monitoring for business processes: general approach
typically, compliance requirements on business processes stem from different sources
such as laws, regulations, or guidelines that are often available as textual descriptions.
an important task towards compliance monitoring is the interpretation of these require-
ments as compliance objectives and the subsequent speciﬁcation as compliance rules
or constraints (note that, in this paper, we will use both terms interchangeably). as
2shown in figure 1, the speciﬁed compliance rules will be veriﬁed over the process ex-
ecution events. the results of compliance monitoring can be visualized and reported
back to users in different ways, ranging from notiﬁcations on violations to ﬁne-grained
feedback on reasons for violations, or even the prediction of possible and unavoidable
future violations.
in general, compliance monitoring approaches are driven by two factors: (1) the
compliance rule language that is used to specify the compliance requirements and (2)
theevent format the compliance checks are based on. due to the possible heterogeneity
of the data sources employed, an integrated target event format is desirable.
1.1. problem statement
there is a overwhelming body of literature on business process compliance. the
approaches address different phases of the process life cycle and often propose different
languages. these are used to formally represent the constraints to be checked on the
business processes. overall, it is hard to oversee and compare the already existing
approaches and hence, the decision of which approach could be utilized for which kind
of problem is hampered.
hence, the main challenge tackled in this paper is to provide proper means for
comparing approaches for compliance monitoring in business processes in a systematic
way. this challenge will be addressed by the following four research questions. the
ﬁrst one refers to the challenge of identifying approaches for compliance monitoring
and to distinguish them from approaches that provide design time compliance checks,
post-mortem conformance checking, compliance checking architectures, or mention
compliance monitoring as an important building block
(7!research question 1 (rq1): how to identify compliance monitoring approaches? ).
this is important to provide the study with a clear focus.
the second research question fosters the derivation of a set of typical functionalities
required in compliance monitoring approaches and practice
(7!research question 2 (rq2): what are functionalities that are essential for compli-
ance monitoring approaches in business processes? ).
rq2 meets the challenge of granularity and coverage.
the challenge of how to demonstrate the appropriateness of the identiﬁed function-
alities is picked up by the third research question
(7!research question 3 (rq3): how can we demonstrate the appropriateness of the
identiﬁed compliance monitoring functionalities? ).
the fourth research question asks for the applicability of the functionalities
(7!research question 4 (rq4): how can the compliance monitoring functionalities
be applied in existing tools? ).
section 1.2 discusses the applied methodology and gives an overview on how rq1
to rq4 will be tackled in this paper.
1.2. research methodology
the goal of this paper is to deﬁne a framework for compliance monitoring func-
tionalities (cmf) that enables the systematic comparison of existing and new ap-
proaches for monitoring compliance rules over business processes during runtime.
3speciﬁc challenges for eliciting the cmfs are the multitude of existing approaches
in the area of business process compliance and the decision of which functionalities
are required in real-world scenarios. in order to address these challenges, we apply the
methodology depicted in figure 2.
definition 
selection
criteriasystematic
literature
review
case study
analysis+ +design 
cmf 
frameworkclassification 
of existing 
approaches
application of 
cmfs in existing 
tools+ +phase 1: cmf elicitation phase 2:
cmf designphase 3: cmf realization
pattern -
based
comparison
figure 2: methodology for the elicitation, design, and realization of cmfs (in bpmn notation)
the methodology consists of three phases, i.e., elicitation ,design , and realization
of the cmf framework.
phase 1–elicitation: the elicitation phase follows the research methodology de-
scribed in the context of elicitation of process change and time patterns [13, 14]. first
of all, selection criteria are deﬁned that scope the research done in this paper ( 7!rq1
and rq2). as overarching selection criteria, we focus on:
1.functionalities that are relevant for process compliance monitoring , i.e., the ob-
servation and enforcement of compliance constraints that are imposed over busi-
ness processes during runtime , and
2.constraints that are imposed at the process level , i.e., we exclude, for example,
integrity constraints [15].
the elicitation phase includes a systematic literature review described in section 3.1
and an analysis of ﬁve case studies from different domains introduced in section 3.2.
the cmf identiﬁcation is based on the results of the systematic literature review and
the case study analysis ( 7!rq2) and possibly illustrated by additional examples.
phase 2–design: the cmf design itself is presented in section 4. each cmf is
described using a cmf template and illustrated by examples taken from literature or
case studies (7!rq2).
phase 3–realization: in order to demonstrate the appropriateness of the cmf de-
sign, existing approaches are classiﬁed along their support for the cmfs (cf. section 4).
moreover, constraint patterns as suggested by the literature are compared to the cmfs
proposed in this paper ( 7!rq3). finally, to illustrate the application of the cmf
framework, compliance rules are extracted from two realistic and publicly available
data sets. based on the extracted rules and the data sets we showcase the application
of compliance monitoring for business processes in existing tools (cf. section 5.3) ( 7!
rq4). note that the data sets for cmf application are different from the case studies
utilized for cmf elicitation.
41.3. contribution
in this paper, we address research questions rq1 to rq4 as stated section 1.1. the
core of the approach is a framework of functionalities that are relevant in the context
of compliance monitoring. these compliance monitoring functionalities are denoted
ascmfs for short. the cmf framework (cmff for short) shall enable a system-
atic comparison of existing as well as new approaches on compliance monitoring in
business processes. in summary, the main contributions of this paper are:
a systematic literature review on compliance monitoring approaches in business
processes and analysis of selected projects from different domains ( 7!rq1 and
rq2).
a framework (cmff) based on 10 compliance monitoring functionalities de-
scribed in a systematic way ( 7!rq2).
a comparative survey of typical compliance rule patterns found in the literature
highlighting the importance of the selected cmfs ( 7!rq3).
a detailed analysis and discussion of compliance monitoring approaches based
on the cmff (7!rq3).
the application of the cmff using existing tools and two realistic data sets ( 7!
rq4).
theandannotations of selected contributions highlight the extensions made on
the previous edoc 2013 conference paper [10]. here,means that the contribution is
based on [10], andmeans an extension of the particular contribution when compared
to [10]. contributions without annotations are entirely new.
the remainder of the paper is structured as follows. in section 2, a short introduc-
tion to compliance monitoring in the context of process mining is provided. section 3
describes the research methodology followed and discusses approaches that are closely
related to compliance monitoring. section 4 describes our cmff composed of ten
cmfs. in section 5, we focus approaches to concretely support cmfs. first of all,
a comparison of the cmff with pattern-based approaches is presented. furthermore,
existing compliance monitoring approaches are classiﬁed using the cmfs. finally, the
application of the cmff based on two realistic data sets within three selected tools is
showcased. section 6 concludes the paper.
2. compliance monitoring in the context of process mining
the basic idea behind process mining is to discover, monitor and improve processes
by extracting knowledge from data that is available in today’s systems [99]. the start-
ing point for process mining is an event log . xes (extensible event stream) [7, 8]
has been developed as the standard for storing, exchanging and analyzing event logs.
each event in a log refers to an activity (i.e., a well-deﬁned step in some process) and
is related to a particular case (i.e., a process instance). the events belonging to a case
are ordered. hence, a case can be viewed as a sequence of events (i.e., a trace). event
5logs may store additional information about events such as the resource (i.e., person or
device) executing or initiating the activity, the timestamp of the event, or data elements
recorded with the event.
the reference framework presented in [99] gives an overview of the process mining
spectrum. the event logs are partitioned into two kinds: pre mortem andpost mortem .
pre mortem logs refer to current process instances that are ongoing; post mortem logs
refer to historical process instances that have completed. the framework also distin-
guishes two types of models: de jure andde facto . ade jure model is normative, i.e., it
speciﬁes how things should be done or handled. a de facto model is descriptive and its
goal is not to steer or control reality; instead, de facto models aim at capturing reality.
moreover, ten process mining related activities are identiﬁed in [99], which can be
grouped into three categories: cartography including discover, enhance, and diagnose;
auditing including detect, check, compare, and promote; navigation including explore,
predict, and recommend.
compliance monitoring corresponds to the detect activity as deﬁned in [99]: the
de jure models would serve as representations of the compliance constraints and are
hence used to analyze the pre mortem logs. diagnostics are provided to the user if the
behavior in the logs is in some way different from the one speciﬁed in the models, i.e.,
detects deviations at runtime (auditing) [99]. an enabling technology for the detect
activity is conformance checking . conformance checking and related techniques are
introduced in section 3.1.5 together with a discussion on their differences to compli-
ance monitoring approaches.
3. compliance monitoring functionality (cmf) elicitation
the elicitation of the cmfs corresponds to phase 1 depicted in figure 2. to this
end, we systematically reviewed literature (section 3.1) and analyzed ﬁve case studies
(section 3.2).
3.1. literature review
after deﬁning the selection criteria, the ﬁrst input for the elicitation of cmfs is
compiled from a systematic literature review. with some adaptations, we follow the
procedures for systematic literature reviews as proposed in [16].
3.1.1. research identiﬁcation
the search for the primary literature is driven by rq1: how to identify compliance
monitoring approaches? (cf. section 1). rq1 can be met by deﬁning the following
selection criteria for the search: a) compliance monitoring on business processes and
b) constraints that refer to process activities. this will be reﬂected in the keywords
searches as well as in processing the literature found.
3.1.2. selection of primary works (horizontal search):
the search was conducted using scholar.google.com (last access 20 feb
2014). in a ﬁrst step, keywords were searched in the titles of the papers, excluding
patents and citations. table 1 summarizes the results of the horizontal search. it states
6table 1: literature review: horizontal search
keywords for search #hits #selected selection criteria
process compliance monitoring 13 8 refers to business processes
compliance monitoring 813 8 refers to business processes
compliance checking 139 11 refers to business processes and runtime
compliance audit[ing] 299+137 3 + 0 refers to business processes and runtime
online auditing 37 2 refers to business processes and compliance
runtime compliance 3 2 refers to business processes
conformance checking 159 5 refers to business processes, compliance and runtime
business process compliance 121 28 refers to runtime, monitoring
monitoring business constraints 4 3 refers to processes and compliance
results horizontal search: 1605 70 http://www.wst.univie.ac.at/
communities/common/
added papers 1[17] clear focus on process compliance monitoring
removed papers 18 design time, no language requirements, not referring
to process constraints
results vertical/backward search:
added papers 9[18, 19, 20, 21, 22,
23, 24, 25, 26, 27]
overall: 60
the searched keywords in the ﬁrst column, the number of hits in the second, the number
of selected papers of the primary search in the third, and the criteria for selecting these
papers in the fourth column. if, for example, a paper containing keywords compliance
monitoring in its title was found, we checked whether this paper refers to business
processes as well. overall, we aimed at ﬁnding all papers that combine the aspects
business process ,compliance , and monitoring . this was important to guide the hor-
izontal literature search while keeping a clear focus. note that more keywords and
combinations were checked than stated in table 1, however, these keywords and the
resulting references are only displayed if at least one paper was found and selected.
overall, the horizontal literature search resulted in 70references out of 1;605hits.
the respective list of references is available at http://www.wst.univie.ac.
at/communities/common/ .
3.1.3. processing of primary literature list
the list of references resulting from the horizontal search was evaluated in a ﬁrst
round excluding papers that
1. are clearly geared towards design time aspects;
2. do not refer to requirements on the compliance speciﬁcation language;
3. do not refer to constraints at the business process level, but to more low level
integrity constraints such as service level agreements (slas) or calculating
key performance indicators (kpis).
obviously, the ﬁrst ﬁlter criterion led us to loose design-time approaches that can be
potentially lifted to runtime analysis. this is the case, for example, of [79]. on the one
hand, we wanted to isolate as sources for our investigation only those approaches that
are natively developed for dealing with compliance monitoring. on the other hand, we
believe that the cmf framework here presented can serve as the basis for assessing
which design-time approaches are indeed apt to be used at runtime.
7for the backward search, the reference lists of the papers presenting a compli-
ance monitoring approach for business processes were analyzed. moreover, we iden-
tiﬁed papers that provide surveys on business process compliance approaches such as
becker et al. [28] and validated our search results against these articles by compar-
ing the references. this resulted in adding one reference, namely [18]. moreover,
the backward search led to interesting references in the context of web services, i.e.,
[19, 20, 24, 25, 29]. here it is important to distinguish approaches that concentrate
on slas (and are not further considered) and approaches that apply compliance mon-
itoring at a process level (i.e., based on a web service orchestration) that should be
considered. finally, the backward search resulted in replacing primary paper [30] by
more speciﬁc papers, i.e., [26, 27] as well as primary paper [29] by [21, 22, 23]. this
step was conducted using the name of the provided tools (monpoly in case of [30]
and dynamo in case [29]) and by going through the papers of the authors. in summary,
we extended the primary list by 6 2 + 5 = 9 references.
the systematic literature analysis resulted in 60papers. they were analyzed and
synthesized as described in the next section.
3.1.4. data synthesis
the results from the ﬁrst and second round of the literature review were analyzed
in two rounds; ﬁrst of all, by assigning each paper to a researcher, followed by a group
discussion on all 60papers. for each paper, it was checked whether it
1. provides a compliance monitoring approach for business processes [17, 18, 21,
22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42],
2. includes studies on process compliance patterns [43, 44, 45, 46],
3. provides enabling technologies and related techniques for process compliance
monitoring, e.g., conformance checking [47, 48, 49, 50, 51],
4. provides frameworks for compliance monitoring infrastructure [52, 53, 54] or
contract monitoring [55, 56], or
5. features domain-speciﬁc approaches such as from health care, providing require-
ments, examples, and case studies [57, 58].
categories 1–5 are processed in the course of the paper as follows (if none of the
categories applied then the paper was discarded from further processing):
1. the “core” compliance monitoring approaches in business processes were care-
fully analyzed and classiﬁed using the deﬁned cmfs (see table 7).
2. the compliance pattern approaches are compared to the cmff (see tables 4, 5,
and 6).
3. enabling technologies and related techniques are discussed in section 3.1.5.
4. frameworks for compliance monitoring infrastructure are discussed in section 3.1.6
5. domain-speciﬁc approaches are analyzed examples and discussed in section 3.1.7.
in the remainder we ﬁrst discuss categories 3–5, before describing the cfms. this
helps to position our work.
83.1.5. enabling technologies and related techniques
we brieﬂy survey research approaches that, although not directly focused on com-
pliance monitoring, can be used either as enabling technologies or as techniques for
tackling this problem.
a ﬁrst, relevant line of research is concerned with conformance checking . although
the usage of the two terms of conformance andcompliance is not homogeneous in the
literature, in the business process management (bpm) setting conformance checking
is typically understood as the problem of comparing an existing process model with
an event log, so as to understand how far the event log reﬂects the behavior set out
by the process model and, in case of discrepancies, to measure to what extent they di-
verge. a number of approaches have been proposed to tackle this problem, see, e.g.,
[47, 48, 49]. the two main differences between conformance checking and compliance
monitoring are: the kind of model used to analyze the logs (conformance checking
usually involves a complete model of the process), and the tackled phase in the pro-
cess lifecycle (conformance checking is typically applied post-mortem) [45]. despite
these two differences, there is a lot of potential in the interaction between these two
areas. in particular, observe that many of the conformance checking techniques could
be actually lifted to runtime. furthermore, the ﬁne-grained comparison metrics used in
conformance checking to assess how much the input model and log deviate from each
other have the potential to extensively contribute to cmf 10 (cf. section 4.3).
a second group of approaches that are related to compliance monitoring is that
ofstream data management . in broad terms, stream data management focuses on
the management of data received as a continuous, real-time sequence of items [96].
the relevance of stream data management for compliance monitoring covers both the
querying and the event gathering aspects.
as for querying, part of stream data management deals with query languages, tech-
niques, and tools for stream data, to suitably mediate between the expressiveness of
queries and the efﬁciency of answering. since such queries are posed against dynami-
cally acquired data, they usually involve temporal operators that can be used to compare
and correlate data across time. in this light, those approaches that tackle compliance
monitoring by just analyzing the trace of events accumulated so far, without reasoning
on the possible future outcomes, can be seen as a special form of query answering over
stream data, where the data stream delivers data about the monitored cases, while com-
pliance rules are formulated as special queries. we consider the investigation of these
synergies as one of the most interesting lines of research for the future.
as for event gathering, stream data management comes with principles, techniques,
and tools for processing a stream of (raw) data produced by multiple, possibly hetero-
geneous sources, so as to extract, analyze, and infer meaningful events from it. this
speciﬁc area of research is called complex event processing (cep) [95]. cep frame-
works are able to iteratively clean, reﬁne, correlate, and combine low-level events into
abstract, higher-level events. since compliance monitoring focuses on business-level
events, cep can be considered as an enabling technology for compliance monitoring in
all those situations where business-level events are not directly generated by the moni-
tored system, but can be obtained by suitably aggregating low-level events. in addition,
cep can support compliance monitoring in all those large-scale systems where an ex-
9tremely large amount of events must be analyzed with tight real-time requirements
[52, 53, 54].
3.1.6. frameworks for compliance monitoring infrastructure
in this category, we ﬁnd works that do not propose a speciﬁc technical approach for
compliance monitoring, but address the problem of implementing a general architec-
ture or infrastructure for compliance monitoring in the literature. these approaches
particularly address the challenge of bringing different perspectives of compliance
management together. the development of a compliance management architecture
is a focus of the compas project. in [97], mulo et al. propose a systematic method
of realizing a compliance monitoring infrastructure in a process-driven soa. compli-
ance of a business process instance is determined by monitoring controls applied to
the activities of the process. it provides a domain-speciﬁc language that enables the
deﬁnition of single or groups of activities to be monitored. for such activities, con-
ditions for monitoring directives can be deﬁned. the conditions may comprise ﬁlters
to narrow down the amount of particular activity instances that need to be considered
by a monitoring component (e.g., only credit worthiness checks with a loan amount
exceeding a threshold are to be monitored). further, conditions are associated with as-
sertions that specify expected values of monitored data (e.g., a certain role is expected
for credit worthiness checks with a loan amount exceeding a threshold). if assertions
are not fulﬁlled, a compliance control is violated. being model-driven, the framework
further foresees patterns for translating compliance monitoring statements speciﬁed
in the dsl into code, such as queries, that can be processed by speciﬁc compliance
monitoring engines. in their prototype implementation, mulo et al. provide templates
for generating queries for the esper event processing engine. this separates the soa
concerns from the technical compliance monitor and ensures the replaceability of the
cep engine employed. in [52], awad et al. introduce a framework for implementing
an approach addressing compliance monitoring. it is exempliﬁed for separation of
duty (sod) requirements how the framework provides support along the process of
implementing compliance monitoring from the deﬁnition of compliance requirements
in controlled natural language to the translation into checkable constraints. the frame-
work relies on cep for aggregating signiﬁcant process events (e.g., a completed travel
request). such events may trigger constraints. constraints are associated with condi-
tions referring to data, resources or roles to be checked (e.g., checking whether sod is
ensured) and actions to be scheduled when conditions apply (e.g., blocking the process
execution).
3.1.7. domain-speciﬁc approaches
middleton et al. [57] and stevovic et al. [58] address compliance monitoring in the
health care domain. in [57], the authors present requirements on providing compli-
ance monitoring functionalities, but more at a technical level such as a common and
extensible data model. in [58], the authors utilize business processes as a means to de-
ﬁne, implement, and monitor security and privacy policies in sharing electronic health
records (ehr). domain-speciﬁc compliance monitoring approaches are not further
investigated, but analyzed for examples to illustrate the cmfs.
10table 2: case studies
domain project url reference
health care “ebmc2” ebmc2.univie.ac.at [59, 60]
manufacturing adventure www.fp7-adventure.eu [61]
higher education hep www.wst.univie.ac.at/
communities/hep/[62]
maritime safety poseidon [63]
it project manage-
mentseaflows www.seaflows.de [64]
3.2. harvesting compliance functionalities from selected case studies
next to our literature review, we used various case studies to assist in the elicitation
of cmfs. for harvesting compliance functionalities, in a ﬁrst step, we analyzed the
compliance constraints relevant in ﬁve case studies. the case studies were chosen
because they cover a diverse set of different domains and we had access to the project
data. table 2 summarizes the details. the number of harvested compliance constraints
might seem to be low for some projects at ﬁrst sight. however, some of the compliance
constraints are very complex. for example, the european skin cancer guideline in the
“ebmc2” project requires a textual description of more than ten pages and entails
different cmf functionalities in a single guideline.
4. compliance monitoring functionality (cmf) design
this section presents our cmff, i.e., the framework of compliance monitoring
functionalities (cmfs). following the methodology set out in section 3, we derived
cmf candidates from a systematic literature review and ﬁve case studies. based on
several rounds of discussions, these candidates were then cleaned and aggregated into
the ten cmfs proposed in this paper. each cmf is described using the following tem-
plate listing the name , a brief overview on the cmf, a description , guidelines about the
evaluation criteria ,examples , and implementation hints of compliance rules illustrating
their functionality. whenever possible we directly borrow the examples from literature
or the projects. sometimes we also provide new examples to highlight speciﬁc features
of the cmfs.
moreover, the following requirements for cmfs were identiﬁed that also serve
as basis for classifying the ten presented cmfs in the following (cf. table 3). such
requirements tackle the three main dimensions of any cmff: (a) modeling of compli-
ance constraints, (b) analyzing the raw data at runtime, and (c) generating compliance
monitoring results to be returned to the end users.
1.modeling requirements a compliance monitoring approach has to enable the
speciﬁcation of compliance constraints that can be monitored. the cmfs of
this class refer to the ability of compliance monitoring approaches to express
constraints not only on the control ﬂow of a business process, but also on other,
equally important, perspectives. this helps in classifying cmffs with respect to
their modeling capabilities, and to position their adequacy in a speciﬁc domain
with its own compliance constraints to be formalized.
11table 3: cmff: requirements and cmfs
modeling requirements cmf 1: constraints referring to time
cmf 2: constraints referring to data
cmf 3: constraints referring to resources
execution requirements cmf 4: supporting non-atomic activities
cmf 5: supporting activity life cycles
cmf 6: supporting multiple instances constraints
user requirements cmf 7: ability to reactively detect and management
cmf 8: ability to pro-actively detect and manage violations
cmf 9: ability to explain the root cause of a violation
cmf 10: ability to quantify the degree of compliance
2.execution requirements compliance monitoring approaches should deal with
execution-based information attached to the events of the event stream to be
monitored. in general, an event is always related to an activity in a business pro-
cess, but further information can be also provided. for example, an event can be
associated with information related to the activity life cycle or activity data. the
cmfs of this class refer to the ability of compliance monitoring approaches to
process domain-related information at the event level only available at execution
time. as such, even though these requirements are not necessarily tailored to
regulatory compliance, they must nevertheless be considered when developing a
cmff. in fact, they characterize the nature of input data to be processed by the
monitoring component, and if input data are not understood and analyzed prop-
erly, then there is no guarantee about the meaningfulness of the results produced
by the monitoring facility. for instance, if the input data are events tracking the
execution of non-atomic activities, the monitor must be able to reconstruct the
notion of activity properly from the raw, processed events.
3.user requirements the third dimensions focuses on the ability to return the
compliance assessment to the end users. speciﬁcally, advanced diagnostics and
recommendations relate to the ability of a cmff to provide advanced, meaning-
ful information to end users that go beyond violation detection and explanation.
for example, it could be useful for the end-users to not only know why a certain
rule has been violated, but also what they should have done instead in order to
correctly continue the execution. if this kind of analysis is done after a viola-
tion has taken place, then we classify it as a form of advanced diagnostics . if,
instead, the analysis is carried a-priori , to suggest measures for preventing in-
evitable violations, then we talk about pro-active recommendations . clearly,
the latter is particularly relevant when a compliance rule is still in a violable state.
4.1. modeling requirements
the following three cmfs refer to the ability of a compliance monitoring approach
to deal with constraints that address aspects beyond control ﬂow: time, data, and re-
sources.
12cmf 1: constraints referring to time
overview: the bulk of real-world process compliance rules involve a combination of
multiple activities or events in time. hence, time is obviously one of the most important
dimensions that a compliance rule language must tackle.
description: time-related conditions within compliance monitoring constraints may
bequalitative orquantitative (i.e., metric time). this determines how temporal enti-
ties can be related to each other. a qualitative notion of time supports the comparison
between temporal entities without referring to their actual distance. typical qualitative
temporal patterns are “before” and “after”. such temporal relations are utilized, for
example, to capture the fundamental ordering between events constrained by a com-
pliance rule. in contrast to qualitative time constraints, metric (or quantitative) time
constraints specify the distance between time entities. metric constraints typically re-
fer to deadlines, delays and latency constraints in compliance rules [14, 39].
evaluation criteria: to fully support this functionality, the approach must be able to
monitor qualitative andquantitative time-related conditions.
examples:
(qualitative time) for payment runs with amounts beyond e10000, the payment list has
to be signed before being transferred to the bank and has to be ﬁled afterwards for later
audits. [35]
(qualitative time) when an investor receives an amount of money, she becomes in charge
of eventually investing it in bonds or in stocks and she cannot receive money anymore
before the investment. [37]
(quantitative time) for stage 1a patients, an appointment for sonography has to be made
within 12 months. (european skin cancer treatment guideline [60])
(quantitative time) a passenger ship leaving amsterdam has to moor in newcastle within
16 hours. [63]
(quantitative) if employing any electronic storage media other than optical disk tech-
nology (including cd-rom), the member, broker, or dealer must notify its designated
examining authority at least 90 days prior to employing such storage media. [33]
implementation: we brieﬂy discuss the case of atomic timestamps, which are asso-
ciated to a point-based algebra (see cmf 4 for a discussion on durative time entities).
temporal logics such as ltl, ctl* and -calculus [65] all adopt an inherent quali-
tative notion of time. thus, they easily capture qualitative temporal relations such as
“before” or “after”. if not already inherent, such temporal relations can be introduced
to the compliance rule language as the semantics of these relations can be deﬁned over
execution traces (and their linear/branching future). when metric times come into play,
two approaches are typically followed for their representation: an implicit approach,
embedding them inside temporal operators (like in real-time logics such as mtl and
tltl [66]) or an explicit approach, where explicit time variables are introduced and
subject to arithmetic constraints (like in extensions of logic programming such as the
event calculus [67]).
13cmf 2: constraints referring to data
overview: compliance rules often not only deﬁne constraints on activities or events
but also contain conditions on data processed in a business process.
description: data refer to the ability of the compliance rule language to not only target
the control-ﬂow aspect, but also the data aspect . this leads to data-aware compliance
rules that can include constraints, requirements and expectations about data objects and
their values.
for what concerns the constraints’ shape, a major distinction can be drawn between
unary data conditions that just involve a single data object and extended conditions that
possibly relate multiple data objects at the same time. unary data conditions take the
formdv, wheredis some data object, is a comparison operator and vis some
value ofd’s domain. extended data conditions express comparisons between multiple
data objects, e.g., comparing the values of data element temperature measured at two
different activities within a business process. according to the classical data-related
workﬂow patterns [68], we can further distinguish between different sources of data,
namely activity data , i.e., data taken as input or produced by the activities of a business
process and case data , namely data that are associated to a whole process instance and
can be accessed/manipulated by all activity instances executed inside the case.1
evaluation criteria: to fully support this functionality, the approach must be able
to monitor unary data conditions andextended data conditions over activity andcase
data.
examples:
(activity data) if the painscore of patient p is greater than 7and the status is uninitialized
then the status must be changed to initialized and a timer event is generated to treat patient
p within one hour. (this rule is based on a formal description in [57].)
(case data/extended data condition) if a vessel (case) is of type ﬁshing boat, the size of
the boat is above 25 meters (100 tons) and it is located at 54 degrees of latitude and 8.5
degrees of longitude, it cannot be engaged in ﬁshing . [63]
(unary data condition) in case the total number of users permissible on the server has
reached the limit, access privilege to current potential user requires exception approval
from it administrator. [40]
(comparison of multiple data objects) if the ﬁrst test terminates with a particular result
code, then all the consequent executions of the test should return the same result code.
(comparison of multiple data objects) any [lightpathoperation (lpo)] id appearing in
any partition request must be different from any lpo id appearing in any future concate-
nate request. [24]
implementation: data-aware compliance rule languages typically employ variables
to denote data objects and conditions to pose constraints over them. the main differ-
ence lies then in the domains of the data objects, as well as in the “shape” of such
1note that other data patterns like scope and block data are too ﬁne-grained in the compliance monitoring
setting as it is not known, when monitoring a trace, which were the original notions of blocks/scopes.
14constraints. in order to support data-aware compliance rules, the corresponding com-
pliance monitoring approach must be able to evaluate the truth of data conditions. this
necessitates access to respective data sources within the process runtime environment.
cmf 3: constraints referring to resources
overview: compliance constraints often relate to organizational resources involved in
the business process.
description: compliance rules often involve not only the control-ﬂow and the data
perspective but also the organizational perspective of a business process. this is partic-
ularly true for compliance rules stemming from legal sources. resource-related con-
ditions in compliance rules can be considered a special case of data-related constraints
where the data refers to the resources involved. this is because resource-related infor-
mation is often represented as case or activity data. resource-aware compliance rules
include constraints, requirements and expectations on resources (e.g., agents or roles)
associated with activities or events. similarly to data-related constraints, we can distin-
guish between unary resource conditions expressing expectations on speciﬁc resource
properties in isolation and extended resource conditions relating multiple resources.
evaluation criteria: to support this functionality, the approach must be able to moni-
tor unary resource conditions andextended resource conditions.
examples:
(unary resource condition) the bank must verify the identity of each customer, using the
information obtained in accordance with the above requirements, within a reasonable
time after the account is opened . [33]
(unary resource condition) orders of more than 1,000 ecan only be approved by a senior
manager.
(extended resource condition) final approval of the assessment can only be granted by
the manager that requested the assessment.
(extended resource condition) every closed project must be validated by a person who did
not participate in the project . (4-eyes principle , also called separation of duties (sod).)
implementation: depending on the particular event model and the process runtime
environment, constraints on resources may be dealt with in a similar manner as data-
related constraints. clearly, the evaluation of resource-related constraints requires ac-
cess to resource information (such as originators, roles, groups) during process execu-
tion. this is supported by the xes organizational extension [7] (cf. section 1).
4.2. execution requirements
there are several requirements imposed on compliance monitoring approaches by
the domain. the following cmfs enable the assessment whether or not a compliance
monitoring approach meets these requirements.
cmf 4: supporting non-atomic activities
15overview: activities in a process may be non-atomic, i.e., may have a duration.
hence, compliance rule languages must also support non-atomic activities.
description: non-atomic activities are durative activities whose execution spans across
a time interval. while the execution of an atomic activity is associated to just a single
event attesting that an instance of the activity has been “done”, non-atomic activities
are associated to multiple events and to a lifecycle that disciplines the allowed order-
ings among such events. the lifecycle contains at least the two event types start and
complete . moreover, often additional event types such as suspend, resume, abort are
possible [8]. compliance rules dealing with non-atomic activities follow either an ex-
plicit approach, talking about their multiple, atomic constitutive events, or an implicit
approach, where the activities are mentioned as such without referring to their events.
if the approach is explicit, the deﬁnition of compliance rules is similar to what can
be done with atomic activities (now mentioning the atomic constitutive events of each
activity). however, if the approach is implicit it is necessary to match the implicit se-
mantics of the rules with the information provided in the actual data where activities
are distributed over multiple events.
evaluation criteria: to fully support this functionality, the approach must be able to
monitor explicit orimplicit conditions on non-atomic activities.
examples:
(explicit) an order creation cannot be completed until the customer registration is com-
pleted.
(implicit) activity check project can be executed only while the project is under prepara-
tion.
(implicit) activities first medical history andexcision melanoma must not overlap . [59]
implementation: implementations differ depending on whether the explicit or implicit
approach is adopted. with the explicit approach, the monitoring framework must be
able to handle at least two types of information about each event: the activity it refers
to and its type, which must be one of the event types constituting the activity lifecy-
cle (start, complete, suspend, resume, abort, etc.). since the language directly tackles
these constitutive atomic events, it typically relies on a point-based algebra to relate
their relative position in time. the implicit approach directly targets activities and as-
sumes that the time windows corresponding to their (non-atomic) executions can be
reconstructed from the monitored event stream. since the compliance rule language
predicates in this case over durative temporal entities, it relies on an interval algebra
(such as the one by allen [69]) to relate the execution of different activities over time.
see [70] for a survey on temporal reasoning.
cmf 5: supporting activity lifecycles
overview: non-atomic activities are associated with a lifecycle deﬁning the allowed
orderings of the constitutive events. suitable monitoring mechanisms should be pro-
vided to check whether this lifecycle is indeed followed.
description: the activity lifecycle describes the allowed executions of atomic, corre-
lated events that together describe the execution of non-atomic activities over time. in
16particular, the lifecycle lists the states in which an (instance of a) non-atomic activity
can be at a given time, the constitutive events that mark a step in the execution, as well
as in which states such events may happen, and to which state they lead. this latter
aspect implicitly deﬁnes the allowed orderings of the constitutive events. the lifecycle
is therefore mostly captured by a state chart (cf. adept [71] or iupc [72]). in general,
multiple, independent executions of the same activity (i.e., activity instances) can occur
inside a case. each such instance corresponds to an instance of the activity lifecycle. a
proper correlation mechanism is required to correctly manage the progressions of each
lifecycle instance and, in particular, to associate a given event to the right correspond-
ing lifecycle instance. for example, if two starts of some activity and two completions
of the same activity occur during a case, it is necessary to identify to which start event
each completion event refers. from the monitoring point of view, (meta-)rules cap-
turing the activity lifecycle and its instances can be used to check whether the activity
executions contained in a given trace indeed comply with the expected lifecycle con-
straints.
evaluation criteria: to fully support this functionality, the approach under study must
capture the activity lifecycle andimplement a correlation mechanism between events.
note that the correlation of activity instances builds on the correlation of process in-
stances (cases). within the same process instance, there may be multiple instances of
the same activity.
examples:
(activation) a start event creates an activity instance and puts it into the active state
[7, 9].
(completion) each completion event moves its associated activity instance to the com-
pleted state, provided that the instance is currently active [7, 9].
(balance start/complete events) for every activity instance, each start event has a single
corresponding completion or cancelation event [7, 9].
implementation: implementations of this cmf are possible if the compliance rule
language supports:
1. the notion of “state”, and
2. a correlation mechanism between events.
out-of-order events can either be ignored, or managed by putting the corresponding
activity instance into a special “error” state, pointing out that a deviation from the ex-
pected lifecycle has been detected. correlation can be realized by providing a special
parameter used to identify the corresponding activity instance. this way, two events
carrying the same identiﬁer are recognized to be part of the same lifecycle. events
carrying different identiﬁers but referring to the same activity correspond to potentially
parallel lifecycle instances.
cmf 6: supporting multiple-instances constraints
overview: there may be multiple instances of the same compliance rule in a trace due
to multiple, possibly parallel occurrences of the involved activities. monitoring at the
constraint instance level allows for tracking ﬁne-grained compliance rules.
17description: when compliance rules are able to express requirements about time
(cmf 1), data (cmf 2), and/or resources (cmf 3), the same compliance rule can
be activated multiple times, as multiple events referring to the activities targeted by the
rule occur, each with its own timestamp, data and resource information. in fact, each
of such events provides a speciﬁc “context” for the compliance rule. this context is
then used to instantiate the temporal/data/resource conditions possibly associated with
the compliance rule. consider, for example, the rule stating that every time an order
ois closed by the client, then order omust be eventually delivered by the warehouse .
clearly, the constraint is instantiated for each speciﬁc closed order and each instance
has its own evolution depending on events speciﬁc for this order. for example, it could
happen that two orders are closed but only one is delivered. in this case, two instances
of the compliance rule should be generated by the monitoring framework, then judging
one of them as satisﬁed and the other one as violated. a more detailed discussion on
multiple instances handling can be found in [35, 39].
evaluation criteria: to support this functionality, the approach must be able to mon-
itor multiple instances, where the notion of instance is substantiated using temporal
and/or data and/or resource-based conditions.
examples:
(multiple instances based on timestamps) every ﬁnal submission has to be corrected
within 6 weeks. here, every submission cycle termination creates an instance of the com-
pliance rule determined by its time stamp t; the instance then checks that the correction
occurs between tandt+ 6, assuming a granularity of weeks. [62]
(multiple instances based on data and resources) the carbon footprint of a supplier must
not exceed a value of x. depending on the number of suppliers modeled as resources, the
constraint is instantiated multiple times. if suppliers can be added during runtime, the
number of constraint instantiations will increase accordingly. (the carbon footprint is
one of the non-functional optimization parameters in the adventure project [98]. the
rule can be derived from the combination of optimization of multiple process instances
with dynamic selection of partners as provided in adventure).
implementation: supporting multiple instances of a compliance rule requires mech-
anisms to discriminate between different rule activations. this can be achieved by
precisely characterizing which information (time, data, resources) contributes to deﬁne
the “context” of the rule (see the examples below) and which are the events that create
separate instances of the rule by ﬁlling this context with speciﬁc values. each observed
rule instance has to be associated with a separate compliance state in order to assess
compliance at the rule-instance level.
4.3. user requirements
the cmfs described in this section refer to the ability of a compliance monitoring
approach to address user requirements.
cmf 7: ability to reactively detect and manage compliance violations
overview: if a violation is detected by the compliance monitoring approach, it could
simply report it and provide no further support. once the behavior is non-compliant
18and this is irreversible, the monitor may take the viewpoint that no further support
is needed. however, a compliance monitoring approach may accommodate a variety
of additional advanced features (besides detection) to continue the monitoring after a
violation takes place, give feedback to the user and suggest compensation actions.
description: in the context of reactive detection and management of compliance vi-
olations, these factors can be exploited to characterize the degree of support provided
by a compliance monitoring approach:
detection , the ability to detect compliance violations.
feedback , the ability to provide detailed compliance reports (see cmfs 9 and
10).
continuous monitoring , the ability to continue monitoring after a violation.
recovery and compensation mechanisms, used to react to a violation with proper
countermeasures.
evaluation criteria: to support this functionality, ﬁrst of all, the approach must be
able to detect a compliance violation and provide an intelligible compliance report.
in addition, the approach should be able to guarantee continuous monitoring, i.e.,
it should be able to continue the compliance monitoring after the violation has hap-
pened. this can be supported, for example, by implementing recovery and compensa-
tion mechanisms in case of compliance violations. this can comprise automatic and
semi-automatic treatment of violations.
examples:
(continuous monitoring) generally, the patient has to formally conﬁrm that she has been
informed about risks prior to invasive treatments. if this is not the case (e.g., in emergency
cases), this has to be documented and the patient has to be informed about the treatment
risks afterwards ( contrary-to-duty obligation). this constraint requires the ability of con-
tinuing the monitoring, even after the compliance constraint has been violated by not
informing the patient prior to the invasive treatment.
if the painscore of patient p is greater than 7and the status has not been initialized yet,
then the status must be changed to initialized and a timer event is generated to treat patient
p within one hour. if there is no response within one hour, a response warning is sent and
another timer event for one hour is set. (this rule is based on a formal description in
[57]). the example shows that even if the compliance constraint is violated for the ﬁrst
time, a strategy for continuing the monitoring is deﬁned.)
implementation: as for recovery and compensation, an added feature of the compli-
ance rule language is the ability of dealing with violations. an event violating a rule can
be used to contextualize it, making the rule active only when some violation takes place.
this kind of rule represents a form of recovery or compensation, which introduces fur-
ther constraints/requirements upon a violation. this can be realized, for example, by
introducing notions like contrary-to-duty operators [73] or reparation chains [79] in the
compliance rule language. approaches that query the partial execution trace for certain
19event patterns, such as [42, 35], typically do not have difﬁculties with continuing after
detecting a violation. however, continuous monitoring can be a challenge for logic-
based approaches (e.g., [74]) as the approach must be able to tolerate inconsistencies
to continue monitoring after a violation occurred. in [37], the authors introduce some
recovery capabilities to realize different strategies for continuous monitoring show-
ing that automata-based approach are also able to accommodate sophisticated recovery
mechanisms.
cmf 8: ability to pro-actively detect and manage violations
overview: while recovery and compensation measures may be applied when detecting
a violation, the violation itself cannot be undone. to prevent possibly costly compensa-
tion on non-compliance, a compliance monitoring approach should be able to provide
support to pro-actively detect and manage possible compliance violations.
description: pro-active support includes detecting possible and unavoidable future
violations and mechanisms for preventing violations. future violations are violations
whose source is not yet explicitly contained in the trace. they can be detected by im-
plicit violations caused by currently conﬂicting rules. the presence of conﬂicting rules
identiﬁes violations that cannot be revealed by considering each compliance rule in iso-
lation, but only by merging the contribution of two or more compliance rules. the early
detection of such future compliance violations enables timely preparation of recovery
and compensation actions. support for preventing violations refers to the ability of a
compliance-monitoring framework to provide assistance for complying with imposed
rules before compliance violations become manifest. this comprises, for example,
predictions and recommendations of activities to be executed next in order to preserve
compliance.
evaluation criteria: to support this functionality, the approach must implement mech-
anisms for the early detection of conﬂicting conditions orprovide the user with recom-
mendations about what to do next to avoid violations.
examples:
(early detection of a violation) every time an order is delivered, the warehouse must be
replenished. if the replenishment truck is broken, the warehouse cannot be replenished.
consider an execution where the truck is broken and the order delivered. approaches
able to detect conﬂicts among rules would in this case point out an (implicit) violation:
the ﬁrst constraint requires a replenishment and the second forbids it.
(proactive support to comply) conducting a payment run creates a payment list contain-
ing multiple items that must be transferred to the bank. then, the bank statement must be
checked for payment of the corresponding items. for payment runs with amount beyond
10;000e, the payment list has to be signed before being transferred to the bank and has
to be ﬁled afterwards for later audits. for a concrete payment run with an amount be-
yond 10;000e, the monitoring system can deduce from the constraints that two activities
(namely sign the payment list andﬁle the payment list ) are pending and need to be exe-
cuted to comply. this can be exploited for ensuring that the pending tasks are scheduled
and for preventing the transfer of the payment list to the bank unless it has been signed.
(predictions and recommendations) requests for building permits need to be handled
within 3 months. based on historic information, i.e., comparing a request currently being
20handled with earlier requests, one can predict the remaining processing time. a counter
measure is taken if the predicted remaining processing time is too long.
implementation: future violations as described can be detected when considering the
interaction of all imposed compliance rules. a typical task is evaluating whether the
compliance rules are not conﬂicting a-priori, i.e., that the whole set of rules admits at
least one compliant execution trace.
however, compliance rules that are not conﬂicting in general may still become con-
ﬂicting at some point during the process execution. thus, checking of compliance rules
at design-time or per individual constraint, is not sufﬁcient for detecting all types of fu-
ture violations. it should be noted that supporting such implicit violations can become
quite costly and the cost grows with the amount of rules involved. for expressive com-
pliance rule languages, this becomes even undecidable.2the identiﬁcation of suitable
decidable compliance rule patterns for data- and time-aware compliance rules is still
an open challenge.
to avoid violations in a running process instance, it is also possible to give recom-
mendations about what to do next by exploiting complete cases stored in event logs
(e.g., using process mining techniques [99]) or by analyzing the prevailing obligations
to satisfy compliance rules.
cmf 9: ability to explain the root cause of a violation
overview: key to the practical application of a compliance monitoring approach is its
ability to pinpoint the root cause of a compliance violation beyond providing the coun-
terexample that resulted in the violation. this is particularly true when a compliance
rule can be violated in multiple ways or multiple rules are involved in a violation.
description: root-cause analysis enables to diagnose the root cause of a compliance
violation, e.g., by isolating the responsible event occurrences or the involved compli-
ance rules. note that this kind of analysis is far from trivial and sometimes could lead
to multiple possible explanations or to no explanation at all. consider, for example, the
case of a sequence of events that culminates in the expiration of a deadline: isolating
the responsible events in this case is impossible in general. similarly, as discussed in
[38] there can be multiple sets of compliance rules that are involved in a violation at the
same time and therefore ﬁne-grained analysis is needed to identify the minimal set(s)
of conﬂicting rules. beside the root cause analysis itself, it is also of utmost importance
to provide suitable ways for communicating the result of the analysis to the end users
in a comprehensible and intuitive manner [35].
evaluation criteria: to support this functionality, the approach must implement mech-
anisms for root cause analysis and support their effective communication.
2a precise characterization of which combinations of constructs lead to undecidability of monitoring
is outside from the scope of this work. nevertheless, observe that from the logical point of view, conﬂict
detection requires the ability to check satisﬁability of compliance rules in the presence of a partial execution
trace. hence, as soon as data are properly taken into account, that is, compliance rules adopt ﬁrst-order
logic or relational algebra to query the event data, then satisﬁability is clearly undecidable even without
considering the temporal dimension.
21examples:
(root-cause of a violation within one rule) when a patient is diagnosed with cryptorchidism,
an operation must be performed either through laparoscopy or with an open surgery but
not both. this rule can be violated in two different ways (can have two different root-
causes), i.e., no operation is performed or both laparoscopy and open surgery are per-
formed in the same case.
(root-cause of a violation involving multiple rules) typically each warehouse order un-
dergoes a sequence of three steps: preparation, packaging, transportation via a conveyer
belt. a domain constraint states that when the conveyer belt breaks, it cannot accomplish
the transportation task anymore. even though there is no direct incompatibility between
the “belt broken” event and the preparation of the order, if both occur, this will cause a
violation.
implementation: for future research, efforts should be taken to provide diagnostics
and pro-active recommendations based on the identiﬁcation of the root cause of a vio-
lation. so far this is only supported by few approaches [35, 38, 75].
cmf 10: ability to quantify the degree of compliance
overview: compliance metrics and indicators should be employed by a monitoring
framework to provide aggregated feedback to the users, summarizing the detailed in-
formation computed for each compliance rule.
description: the practical feasibility of a compliance monitoring approach also relies
on its ability to give practitioners a sense of the compliance situation. for that, crisp
approaches associating two possible truth values to each compliance rule, represent-
ing whether it is satisﬁed or violated, is not sufﬁcient. in contrast to crisp compliance
characterization, fuzzy approaches allow for a range of values to capture the “degree
of compliance” of the running trace with respect to a compliance rule. in this respect,
we differentiate between approaches that discretize the possible truth values from ap-
proaches that adopt continuous distributions between 0 (violation) and 1 (satisfaction).
evaluation criteria: to support this functionality, the approach must be able to char-
acterize the “healthiness” of a running trace through metrics. advanced support is
provided by an approach that is able to derive statements about the health of the whole
process/system by evaluating multiple running traces, i.e., by determining the fraction
of deviating traces.
examples:
(metrics) a vessel cannot be not under command, a vessel with one occurrence of not
under command is more “healthy” than a vessel with nine occurrences of not under com-
mand. [63]
(fuzzy) a passenger ship leaving amsterdam has to moor in newcastle within 16 hours.
it is desirable to judge with different degrees of violation a ship arriving in newcastle
after 16 hours and ten minutes and a ship arriving in newcastle after 18 hours. [63].
implementation: a typical approach to quantify the degree of compliance is to “count”
the number of violations and devise meaningful metrics that give a measure about the
22overall compliance degree of a running process instance. this is particularly effec-
tive when multiple instances are managed (cf. cmf 6). more ﬁne-grained metrics can
be devised by using detailed information about individual violations. approaches us-
ing a continuous scale need to calculate a “degree” of compliance, rather than simply
providing a yes/no answer. e.g., in the case of a deadline, a matching function could
assign different noncompliance weights to traces missing the deadline, depending on
the amount of time that passed between the deadline and the (late) event occurrence.
5. compliance monitoring functionality (cmf) realization
this section is concerned with phase 3 cmf realization of the methodology de-
picted in figure 2. phase 3 consists of three building blocks, i.e., a pattern-based com-
parison of cmfs related to language aspects with compliance patterns set out in the
literature (cf. section 5.1), a classiﬁcation of existing monitoring approaches using the
cmf framework (cf. section 5.2), and the application of the cmff in selected tools
(cf. section 5.3).
5.1. common compliance rule patterns and the cmf framework
we provide a brief, comparative survey about some of the most typical compliance
rule patterns found in the literature, so as to concretely substantiate the relevance of the
language-related cmfs, namely cmfs 1–4. it is worth noting that the vast majority of
the literature takes inspiration, for such patterns, on a catalogue of temporal logic spec-
iﬁcations typically employed in model checking [76]. the semantics of such patterns
are not exactly the same, though: while [76] follows the standard inﬁnite-trace seman-
tics for dynamic systems, compliance rule patterns are typically meant to be checked
against a partial trace whose continuation will be ﬁnite.3
speciﬁcally, tables 4 and 5 summarize typical patterns related to the control-ﬂow
dimension of compliance rules. the tables respectively tackle the (co-)occurrence and
relative orderings between activity executions, substantiating the need for qualitative
time constraints (cf. cmf 1). in fact, each of the listed patterns express requirements
on the expected/forbidden execution of atomic activities over time, but without ex-
pressing metric constraints over the corresponding timestamps. extensions of patterns
in table 5 with metric time have been studied in [39, 74, 81, 82], supporting the need
for quantitative time constraints as well (cf. cmf 1 again).
furthermore, it is not surprising that such patterns have been also extended with
non-atomic activities (cf. cmf 4), given how much widespread they are in bpm [80,
74, 39]. data (cf. cmf 2) have been also considered in combination with patterns of
the forms shown in tables 4 and 5, see [39, 83, 84, 85, 86]. differently from data and
non-atomic activities, dedicated resource-related patterns (cf. cmf 3) are mentioned
in [43, 82]. it is interesting to notice that, as argued in cmf 3, not only unary resource
conditions , but also extended resource conditions are present. extended conditions are
3for a detailed discussion on the semantical differences between an inﬁnite-trace and a ﬁnite-trace set-
tings, see, e.g., [77, 78].
23table 4: typical compliance rule patterns dealing with the (co-)occurrence of activities
pattern description references and synonyms
existence of a a must be executed at least once (global scope) existence [43, 81, 88], exists [82]
absence of a a cannot be executed (global scope) absence [43, 81, 88], absent [82]
limitaton acan occur at most ntimes absence n [81, 88], limit repetitions [43],
bounded existence [45]
arequires b ifaoccurs, then also bmust occur responded existence [81, 88], coexists [82], in-
clusive [45]
acoexists with b either aandbboth occur, or none of them does coexistence [81, 88], corequisite [45, 82]
amutex b a andbcannot both occur not coexistence [81, 88], exclusive [82]
choose aorb at least one between aandbmust occur choice [81, 88]
choose axorb either aorbmust occur, but not both exclusive choice [81, 88], mutexchoice [82]
table 5: typical compliance rule patterns dealing with orderings between activities
pattern description references and synonyms
afollowed by b whenever aoccurs, bmust occur afterwards response [81, 88], after scope exis-
tence [43], leadsto [82]
aprecedes b b can occur only if aoccurred before precedence [81, 88], before scope ex-
istence [43], always precedes [43], pre-
cedes [82]
ablocks b whenever aoccurs, bcannot occur after-
wardsnegation succession [81, 88], after scope
absence [43]
ablocks buntilc whenever aoccurs, cmust occur afterwards,
andbis forbidden in betweenalternate response (with b=a) [81, 88], be-
tween scope absence [43]
aimmediately followed by bwhenever aoccurs, bmust occur next chain response [81, 88], xleadsto [82]
table 6: typical compliance rule patterns dealing with resources
pattern description references and synonyms
aperformed by r acan be performed only by users playing role r performedby [82],
asegregated from b a andbmust be performed by different users usegregatedfrom [82],
4-eyes principle [43]
afully segregated from b a andbmust be assigned to different roles, and different users
must perform themsegregatedfrom [82]
abonded with b a andbmust be assigned to the same role, but different users
must perform themrbondedwith [82]
afully bonded with b a andbmust be assigned to the same role, and the same user
must perform thembondedwith [82]
in fact necessary to relate and compare performers of different activities in a compli-
ance rule.4
finally, observe that, from the expressiveness point of view, the resource patterns
in table 6 can be re-expressed using the data-aware extensions of [39, 84, 85, 86].
this can be done by introducing special data slots tracking activity originators, and
adding speciﬁc conditions on them. however, from the modeling perspective data
and resources have a different nature. this is why they are separately tackled by two
different cmfs.
4note that the patterns a fully segregated from b ,a bonded with b , and a fully bonded with b may be
enforced at design time by assigning activities to roles accordingly provided that the process-aware informa-
tion system supports this. however, it is possible to cheat, for example, if different roles are assigned to the
same person [52]. therefore, monitoring these constraints at runtime may still become necessary.
24table 7: classiﬁcation of monitoring approaches using the cmff
approach cmf 1 cmf 2 cmf 3 cmf 4 cmf 5 cmf 6 cmf 7 cmf 8 cmf 9 cmf 10
time data resources non-
atomiclifecycle multi-
instancereactive
mgmtpro-
active
mgmtroot
causecompl.
degree
superv. control theory [17] +/- - + + + - - + - -
ece rules [31] + +/- + + - - + - +/- +
bpath (sebahi) [42] + + + + +/- + + - - +/-
gomez et al. [34] + - - + n.a. +/- + + - -
giblin et al. [33] + n.a. n.a. n.a. n.a. n.a. + n.a. n.a. n.a.
narendra et al. [40] - + + n.a. - + + - - +
thullner et al. [41] + n.a. n.a. n.a. n.a. n.a. + - - n.a.
monpoly [26, 27] + + + +/- +/- + + - - -
halle et al. [24] +/- + +/- n.a. n.a. n.a. + n.a. n.a. n.a.
dynamo [21, 22, 23] + + +/- + n.a. + + - - +/-
namiri et al. [18] +/- + + + - + + - - -
mobuconec [39] + + + + + + + - - +/-
mobucon ltl [36, 37, 38] +/- - - + - - + + + +/-
seaflows [35] +/- +/- +/- + + + + + + +/-
caption: + supported, +implementation publicy available, +/- partly supported, - not supported, n.a. cannot be assessed
5.2. classiﬁcation of compliance monitoring approaches
we classiﬁed compliance monitoring approaches using the ten cmfs presented in
this paper. we focused on compliance monitoring approaches that mainly address com-
pliance checks during the process execution. these approaches are different from other
approaches that can be used in other phases of the process lifecycle such as process de-
sign (e.g., [90]) or compliance constraint modeling (e.g., [1, 91]) and trigger speciﬁc
questions. for example, monitoring is carried out with actual data and by considering
ﬁnite, evolving preﬁxes of event traces.
furthermore, we selected the approaches to be classiﬁed based on the degree of
detail on concepts provided in publications. in fact, a certain degree of detail (for
example, in the used compliance rule languages) is necessary to properly classify the
approaches through our framework.
the results of the classiﬁcation are shown in table 7, where “-”, “+” and “+/-” indi-
cate functionalities that are not supported, supported and partially supported from the
conceptual viewpoint, respectively. a rating of “n.a.” indicates that the cmf cannot be
assessed based on the analyzed literature. the scores shown in bold refer to approaches
where the implementation is publicly available.
the ﬁrst ten approaches as summarized in table 7 are discussed in this section. the
approaches proposed by the authors, namely mobuconec ,mobuconltl , and seaflows ,
will be described in detail in section 5.3 in order to showcase the implementation of
cmfs along two data sets.
the detailed description of the classiﬁcation results starts with the framework de-
scribed in [17] which is based on supervisory control theory. this approach allows
for the deﬁnition of constraints on resources but, in general, it does not support data
conditions. through this approach, it is possible to supervise the process-aware infor-
mation system by “blocking” those events that would lead to a violation. this can be
considered as a very sophisticated form of pro-active violation management, which is
applicable only when the process-aware information system can be (at least partially)
25controlled by the monitor. since violations are prevented, the framework does not
directly consider the problem of reactive management nor violation explanation.
ece rules [31] are a domain-independent approach that was not speciﬁcally tai-
lored for business process monitoring. therefore, functionalities like support for case
data and activity life cycle were simply not investigated (this is matter of ongoing
work). ece rules can deal with both atomic and non-atomic temporal entities, captur-
ing qualitative and metric time constraints, as well as point-based and interval-based
ones. two key features characterize ece rules. first, they support an imperfect (i.e.,
fuzzy and probabilistic) matching between expected and occurred events and hence
deal with several ﬁne-grained degrees of compliance. second, expected events can be
decorated with countermeasures to be taken in case of a violation, hence providing
ﬁrst-class support for compensation mechanisms.
with bpath [42], sebahi proposes an approach for querying execution traces based
on xpath. bpath implements a fragment of ﬁrst-order hybrid logic and enables data-
aware and resource-aware constraints. quantitative time is supported by referring to
and comparing timestamps of events. this enables sophisticated time constraints. due
to the querying nature of this approach, it is able to distinguish between multiple ac-
tivations of the same compliance rule. however, the approach still lacks support for
advanced diagnostics and pro-active compliance management. these issues do not
seem to be in the focus of the work. a compliance degree could be calculated from the
results provided by this approach. the prototypical implementation of bpath is also
presented in [42].
an approach based on constraint programming is provided in [34]. as time aspects
play a crucial role in this approach, cmf 1 is a focal issue in this approach. the
approach also explicitly addresses the duration of activities. the main goal of [34]
is to pro-actively detect compliance violations and to explain the root cause of the
violation. the constraint satisfaction problem for the example provided in the paper has
been implemented. however, there is no prototypical implementation of a compliance-
monitoring framework.
giblin et al. [33] present an approach based on timed propositional temporal
logic for transforming high level regulatory constraints into realm constraints that
can be monitored during process runtime. [33] explicitly elaborates on temporal con-
straints, hence addressing cmf 1. as the main focus of the paper is on the transforma-
tion and correlation, the other cmfs cannot be evaluated upon this paper. the paper
presents architectural considerations and an implementation of the transformation on
the basis of a case study.
narendra et al. [40] address the problem of continuous compliance monitoring, i.e.,
they evaluate the compliance of a process execution with respect to a set of policies at
runtime. in particular, the policies are checked when some speciﬁc tasks are executed,
which are called control points. the authors deﬁne an optimization problem to ﬁnd
the right balance between the accuracy of the compliance checking and the number of
control points (each control point has a veriﬁcation cost). they deﬁne policies in terms
of ﬁrst order clauses and their framework can support data- and resource-based rules.
there is no notion of time. the framework supports a reactive violation management
and not a pro-active violation management. the ability of the framework to detect the
root cause of a violation cannot be assessed based on this paper. the authors, however,
26deﬁne metrics to evaluate the degree of compliance of a process instance.
thullner et al. [41] deﬁne a framework for compliance monitoring able to detect
violation and to suggest possible recovery actions after the violation has occurred. the
framework is focused on the detection of different types of time constraints. a violation
is handled after it has occurred and, in this sense, the framework support cmf 7 but
not cmf 8. the other cmfs cannot be assessed based on this paper.
monpoly [26, 27] is a runtime veriﬁcation framework for security policies, spec-
iﬁed in the logic mfotl, a variant of ltl-fo with metric time. monitorable formulas
are those of the form “always ”, where is a so-called bounded mfotl formula,
i.e., a mfotl formula that can be evaluated within a bounded number of steps in the
future. the high expressiveness of mfotl allows one to express sophisticated com-
pliance rules involving advanced temporal constraints, as well as data- and resource-
related conditions. consequently, even though non-atomic activities and their lifecy-
cle are not explicitly tackled by the approach, they could be properly accommodated.
the monitoring algorithm, described in [27] and implemented in the publicly available
monpoly tool [26], supports continuous monitoring, in that it fetches all the time
points at which a violation is detected. due to the high expressiveness of mfotl, no
advanced features related to pro-active management of violations can be supported.5
halle et al. [24] provide an approach based on ltl-fo+. “ltl-fo+is a lin-
ear temporal logic augmented with full ﬁrst-order quantiﬁcation over the data inside a
trace of xml messages” [24] that focuses on monitoring data-aware constraints over
business processes. the data is part of the messages that are exchanged between the
process activities. the approach can handle unary and binary data conditions. as time
and resources can be handled based on data, the approach is also able to deal with cmf
1 and cmf 3, although these cmfs are not explicitly mentioned in the paper. based
on [24], cmf 4–10 cannot be assessed.
the work by baresi et al. on dynamo [22] constitutes one of the few techniques
and tools dealing with monitoring (bpel) web services against complex rules, going
beyond the analysis of quantitative kpis for service-level agreement. in table 7, we
use (timed) dynamo to identify the combination between dynamo and the following
languages: timed wscol [21] to specify the rules to be monitored, and wsrel to
specify the recovery mechanisms to be put in place when given violations are detected
[23]. (timed) dynamo allows one to model eca-like rules that mix information about
the location (i.e., the target web services and operations), the involved data, and qual-
itative/quantitative temporal constraints. location-related aspects can be considered
as referring to resources in a business context, but since the focus is on interacting
web services, there is no support for more advanced resource-related aspects such
as groups and roles. timed wscol supports the correlation between messages, and is
thus able to deal with non-atomic activities, but being focused on web service message
exchange, no notion of activity lifecycle is considered. dynamo provides continuous,
reactive monitoring facilities based on the messages fetched so far, with sophisticated
recovery and compensation mechanisms based on wsrel. furthermore, the monitor-
5this would require to compute satisﬁability of mfotl formulae, which is already undecidable even
without considering the temporal dimension.
27ing results can be aggregated and reported to the user, providing useful insights that go
beyond a yes/no answer.
in [18], namiri et al. describe an approach that is based on the patterns proposed by
dwyer and corbett [76]. in particular, the authors introduce a set of control patterns.
control patterns are triggered by events (such as the execution of a controlled activity).
when being trigged, conditions associated with the control are evaluated. in order to
provide data for evaluating the associated conditions, namiri et al. introduce a semantic
mirror that is ﬁlled with runtime data of a process instance. for each control, actions
to be carried out if a control fails may be speciﬁed (cmf 7). however, root cause
analysis (cmf 9) and pro-active support (cmf 8) are not addressed. being based
on [76], the approach is restricted to a predeﬁned set of patterns. data (cmf 2) and
resource (cmf 3) constraints are supported as conditions to be evaluated once a control
becomes triggered. this corresponds to evaluating a query on process data. metric time
(cmf 1) is, however, not addressed. furthermore, the approach does not incorporate
a notion of activity lifecycle (cmf 5). as events may occur multiple times within a
process execution, there may be multiple activations of a control (cmf 6). using the
semantic mirror, non-atomic events (cmf 4) can be supported using this approach.
an implementation of the approach is also described in [18]. speciﬁcally, controls are
implemented as eca rules, which are evaluated by drools.
as can be seen from table 7, the majority of approaches focus on time aspects
(cmf 1) and reactive management of compliance violations (cmf 7). this is not
astonishing since time constitutes an important requirement in many application do-
mains. in this paper, we have looked at constraints from the health care, the ﬁnancial,
and the maritime safety domain. however, in many other domains the adherence of
time constraints and their violation is an important matter, e.g., in logistics. intuitively,
each approach should support at least one of cmf 7 and 8, i.e., provide reactive and
/ or proactive management of compliance violations. interestingly, supervisory con-
trol theory [17] is the only approach that supports the proactive management, but not
the reactive management of compliance violations. this is the case since events that
will lead to violations (proactive) are blocked before they actually occur. all other
approaches enable the detection of violations when they occur (reactive).
overall, it can be stated that there are approaches that can deal with modeling
requirements, i.e., incorporate time, data, and resource aspects. when it comes to ex-
ecution requirements such as supporting multiple constraint instances, less approaches
are available that support all of the related cmfs, i.e., cmf 4–6. however, the least
number of approaches addresses user requirements such as cmf 7–10. for example,
only few approaches enable the explanation of the root cause of a compliance violation.
as the user requirements are often of particular importance, e.g., if medical staff has to
react on compliance violations in stressful situations, it would be desirable to put more
research effort on user feedback and support in dealing with compliance violations
during run time.
5.3. application of cmfs in selected tools
in section 5.2, we classiﬁed existing compliance monitoring approaches using the
cmff. this was done based on the information in publications. for approaches as-
signed a ”+“ or ”+/-“ for a cmf, the concrete implementation of this cmf may still
28vary. thus, it will be interesting to also have a look at the application of cmfs in the
tool implementations. the authors of this paper proposed three approaches, namely
mobuconec ,mobuconltl , and seaflows , that make use of different techniques to
enable compliance monitoring. in the following, we showcase the application of the
ten cmfs in these three tools. as these are the tools we know best, it is ensured that we
are able to correctly apply the tools in a case study for discussing the implementation
of cmfs.
in order to analyze tools using the cmfs, a data set consisting of compliance rules
covering the cmfs to be investigated and process instances (or process logs for replay-
ing process instances) are necessary. we selected the business process intelligence
challenge (bpic) data sets from 2011 and 2012. using the process-mining tool prom,6
we were able to derive, from these data sets, a set of compliance rules that covers all
language-related cmfs. to apply the cmfs, we applied the tools to check compliance
of the process instance logs with the set of rules derived the bpic data.
since the bpic data sets contain post-mortem data about complete execution traces,
we used a “log replay” component so as to feed the tools with an evolving stream of
data that recreate the real executions. this technique makes post-mortem data indistin-
guishable from truly runtime data. notice that our aim is to assess the tool function-
alities in relationship with the cmfs, and not to go into the details of non-functional
aspects such as reaction time and performance-related insights. for such details, please
refer to [38, 39].
5.3.1. data set
since 2011, the bpi workshop features an initiative called international business
process intelligence challenge (bpic). the idea is that an event log is provided with
some background information and points of interest. researchers and practitioners
participate in a competition in which they are asked to test, apply or validate whatever
technique or tool they developed using this log. in 2010, the three universities of
technology in the netherlands joined forces in erecting the 3tu datacenter. this
initiative aimed at publicly sharing datasets such that other researchers can beneﬁt from
whatever data can be collected. the bpic aims at making the research community
aware of the existence of these datasets.7
the constraints used for analyzing the tools were extracted from the logs provided
for the bpic 2011 [11] and 2012 [12]. the ﬁrst event log pertains to the treatment of
patients diagnosed with cancer in a large dutch academic hospital. it contains 1;143
cases and 150;291events distributed across 623activities. each case in this event log
is related to a different patient treated in the hospital. the event log contains domain
speciﬁc attributes, e.g., diagnosis code ,treatment code ,producer code ,diagnosis
treatment combination id , and age in addition to the standard xes attributes for
events: concept:name ,lifecycle:transition ,time:timestamp , and org:group [7].
the second event log was recorded for an application process for personal loans
or overdrafts in a dutch ﬁnancial institute. it merges three intertwined sub-processes.
6www.processmining.org
7http://fluxicon.com/blog
29therefore, in each case, events belonging to different sub-processes can occur. the
log contains 262,200 events distributed across 36 activities and includes 13,087 cases.
the amount requested by the customer for a loan is indicated in the case attribute
amount req . in addition, the log contains the standard xes attributes.
5.3.2. methodology
in this section, we illustrate the methodology we have followed to show how the
cmfs have been implemented in the selected tools. we started from the data sets de-
scribed in section 5.3.1. figure 3 illustrates the methodology. we have split the logs
in two parts (log part 1 and log part 2). for the hospital log, in the ﬁrst part, the
ﬁrst 571 cases are considered. in the second part, the rest of the cases (572 cases) are
included. for the ﬁnancial institute log, in the ﬁrst part, the ﬁrst 6,543 cases and, in the
second part, the rest of the cases (6,544 cases) were considered. then, we have mined
log part 1 (training log) to extract a set of compliance rules. to do this, we have used
thedeclare miner component of the process-mining tool prom [92]. this allows us
to automatically discover compliance rules related to control-ﬂow, data and resources
based on the mainstream observed behavior, i.e., frequent behavior is converted into a
collection of declare constraints. declare is a declarative language based on an exten-
sible set of constraints [87, 88, 89]. declare supports most of the modeling constructs
mentioned in tables 4, 5, and 6 and hence a good candidate to evaluate and illustrate
the cfms. the compliance rules have been used as a reference model to monitor a
stream of events coming from the replay of log part 2 (testing log).
event 
log split log in 2 parts s
log part 1 
(training, 
declare miner)
log part 2 
(testing, 
mobucon ec, 
mobucon ltl, 
seaflows )mine log part 1
compliance 
rules
replay log part 2 and 
monitor its compliance 
w.r.t. the compliance 
rules derived from log 
part 1
compliance 
monitoring
results
figure 3: methodology for tool analysis
the compliance rules from the bpic 2011 and 2012 logs are provided next. they
are well suitable for a case study as they nicely cover the cmfs. speciﬁcally, they
involve quantitative and qualitative time, conditions on both case and activity data as
well as on resources. the compliance rules from bpic 2012 also refer to non-atomic
activities and activity lifecycle. furthermore, some of the presented rules can become
conﬂicting for some speciﬁc cases.
30compliance rules discovered from the bpic 2011 log. through the declare maps
miner plug-in of prom, we have extracted, from the training log derived from the
bpic 2011, the following compliance rules:
r1 if “administratief tarief - eerste pol” occurs in a trace, it is always preceded by “vervolgconsult
poliklinisch” and between “administratief tarief - eerste pol” and “vervolgconsult poliklinisch” you
cannot ﬁnd another “administratief tarief - eerste pol”;
r2 if “administratief tarief - eerste pol” or “vervolgconsult poliklinisch” occur in a trace, they always
coexist;
r3 if “aanname laboratoriumonderzoek” occurs in a trace, it is always followed eventually by “order-
tarief” and vice versa if “ordertarief” occurs, it is always preceded by “aanname laboratoriumonder-
zoek”;
r4 if “administratief tarief - eerste pol” or “aanname laboratoriumonderzoek” occur in a trace, they
always coexist;
r5 if “aanname laboratoriumonderzoek” occurs in a trace, it is never followed by “vervolgconsult po-
liklinisch”;
using the timed declare miner plug-in of prom, we have derived:
r6 if “administratief tarief - eerste pol” occurs in a trace, it may be followed by “beademing - anesthesie
- eerste dag” only if from the occurrence of “administratief tarief - eerste pol” at least 30 days and at
most 35 days have passed;
r7 if “hemoglobine foto-elektrisch” or “aanname laboratoriumonderzoek” occur in a trace, they always
coexist and their time distance is at most 1030 days and at least 1 day;
r8 if “telefonisch consult” or “vervolgconsult poliklinisch” occur in a trace, they always coexist and
their time distance is at most 1035 days and at least 1 day;
r9 if “administratief tarief - eerste pol” occurs in a trace, it is always preceded by “vervolgconsult
poliklinisch” and “vervolgconsult poliklinisch” occurs at most 1030 days before “administratief tarief
- eerste pol”;
using the data-aware declare miner plug-in of prom, we have derived:
r10 if “hemoglobine foto-elektrisch” occurs in a trace and case attribute “diagnosis treatment com-
bination id” is equal to “495326”, then “hemoglobine foto-elektrisch” is followed eventually by
“ureum”;
r11 if “natrium vlamfotometrisch” occurs in a trace and the condition (over case attributes) “(age 
71 && treatment code 803 && diagnosis treatment combination id 394725)k(treatment
code == 703ktreatment code == 803))” holds, then “natrium vlamfotometrisch” is not followed
eventually by “calcium”;
r12 if “administratief tarief - eerste pol” occurs in a trace and the condition (over case and event at-
tributes) “(age70 && producer code == siog) k(diagnosis == maligne neoplasma cervix uteri
&& diagnosis code == 106))” holds, then “administratief tarief - eerste pol” is followed eventually
by “albumine”;
r13 if “telefonisch consult” occurs in a trace and the condition (over case and event attributes) “(treat-
ment code == 101) && (producer code == sgal kproducer code == sgna)” holds, then “alkalis-
che fosfatase -kinetisch-” does not occur in the same trace;
the same plug-in was used to extract additional resources rules:
31r14 if event attribute “section” is equal to “section 4” and event attribute “specialism code” is equal to
“86”, the activity is executed by “org:group == general lab clinical chemistry”;
r15 “bacteriologisch onderzoek met kweek -nie” is always executed by “org:group == medical microbi-
ology”;
r16 “cytologisch onderzoek - ectocervix -” and “histologisch onderzoek - biopten nno” are always exe-
cuted by “org:group == pathology”;
compliance rules discovered from the bpic 2012 log. using the training log derived
from the bpic 2012, through the declare maps miner, we have extracted the following
compliance rules:
r17 “a partlysubmitted-complete” occurs exactly once in all the traces;
r18 “a submitted-complete” occurs exactly once in all the traces;
r19 “a partlysubmitted-complete” is always immediately followed by “a submitted-complete”
and, vice versa, “a submitted-complete” is always immediately preceded by “a partlysubmitted-
complete”;
r20 “a submitted-complete” and “a partlysubmitted-complete” are always the ﬁrst two ac-
tivities in a trace;
r21 the lifecycle “w afhandelen leads-schedule”, “w afhandelen leads-start”, “w afhandelen leads-
complete” is always respected;
r22 “w completeren aanvraag-schedule” is always followed eventually by “w completeren aanvraag-
complete” and, vice versa, “w completeren aanvraag-complete” is always preceded by “w completeren
aanvraag-schedule”;
r23 the lifecycle “w beoordelen fraude-schedule”, “w beoordelen fraude-start”, “w beoordelen fraude-
complete” is always respected;
r24 “o selected-complete” is always followed eventually by “o created-complete”, “o created-
complete” is always followed eventually by “o sent-complete” and, vice versa, “o sent-complete”
is always preceded by “o created-complete” and “o created-complete” is always preceded
by “o selected-complete”;
r25 “a cancelled-complete” does not coexist neither with “a activ ated-complete” nor with
“aregistered-complete” nor with “a approved-complete” nor with “a declined-complete”;
r26 “w beoordelen fraude-schedule” does not coexist with “w wijzigen contractgegevens-schedule”;
item “a accepted” and “a declined” do not coexist;
using the timed declare miner plug-in of prom, we have derived:
r27 “a partlysubmitted-complete” occurs at most 22 seconds after “a submitted-complete”;
r28 “w completeren aanvraag-complete” occurs at least 22 seconds and at most 2 days, 18 hours, 29
minutes, and 28 seconds after “w completeren aanvraag-schedule”;
additional rules about resources were derived using the same plug-in:
r29 “a submitted-complete” and “a partlysubmitted-complete” are always performed by the
same actor;
r30 “a accepted” and “a finalized” are always performed by the same actor;
r31 “a submitted” and “a finalized” are never performed by the same actor;
325.3.3. compliance monitoring with mobuconec
mobuconec is a compliance-monitoring framework based on a reactive version
[94] of the event calculus [67]. as described in [39, 84], the approach has been ex-
ploited to formalize the extension of declare described in [74, 84]. this extensions
support:
metric time constraints, which can be directly formalized (together with qualita-
tive time constraints) using the explicit approach to time provided by the event
calculus (cmf 1: +).
data and data-aware conditions, leveraging on the ﬁrst-order nature of the event
calculus (cmf 2: +).
resources, which are considered as special data (cmf 3: +).
non-atomic activities, which can be encoded in the event calculus using ad-
ditional data and dedicated rules, as shown in [39] (cmf 4: +). notably, the
formalization in [39] directly support the possibility of monitoring the lifecycle
of activities (cmf 5: +).
in fact, mobuconec is able to express all compliance rules from r1 to r28; the last
three rules do not correspond to any data-aware declare pattern, so they are not directly
supported, but could be seamlessly modeled as event calculus constraints as well.
due to the presence of data and metric time-related conditions, mobuconec does
not directly monitor the modeled constraints, but expands them in their different in-
stances, each of which grounds the constraint on a particular context [39]. conse-
quently, it provides ﬁne-grained compliance checking by analyzing the evolution of
each constraint instance (cmf 6: +). in particular, at a given time each active instance
could be either satisﬁed, violated, or pending, the last state meaning that the constraint
instance is currently violated, but can still be satisﬁed by properly continuing the exe-
cution of the monitored process (cmf 7: +). in the graphical feedback provided to the
end-user, two visualization modes are correspondingly provided for each constraint: a
“summary view” in which all instances are packed together, or an “expanded view” in
which each single instance is shown separately. these two possibilities are shown in
figure 4.
this ﬁne-grained analysis of violations at the constraint-instance level constitutes
also the basis for quantifying the degree of compliance. for the time being, only simple
aggregation metrics are provided to give an indicator about the “global health” of the
system (cmf 10: +/-).
the high expressiveness of compliance rules in mobuconec has the main drawback
that only reactive management of violations can be tackled: proactive management
would require to reason on the possible future continuations of the current, partial trace
by considering also data and metric timestamps, which is undecidable (cmf 8: -).
another limitation of the approach is that violations are reported to the user without
any additional inference about the corresponding root causes (cmf 9: -).
33figure 4: a compliance summary produced by mobuconec when monitoring a trace from the bpi challenge
2011; some contraints are shown with an expanded view listing the evolution of their instances
34figure 5: compliance monitoring with mobuconltl : bpi challenge 2011
the latest version of the core mobuconec reasoner with case-data support, imple-
mented in prolog, is publicly available.8the integration with the operational support
backbone of prom is still ongoing.
5.3.4. compliance monitoring with mobuconltl
mobuconltl is a compliance-monitoring tool implemented as a provider of the op-
erational support in the process-mining tool prom. it takes as input a reference model
expressed in the form of declare rules. more generally, every business constraint that
can be expressed as an ltl formula can be monitored using mobuconltl . a stream
of events encoded using xes can be monitored with respect to the given ltl speciﬁ-
cation.
mobuconltl [37, 38] deals with a qualitative notion of time (being based on ltl)
but it does not support constraints concerning metric time. in this sense, mobuconltl
partially supports cmf 1 (cmf 1: +/-). therefore, rules expressing qualitative time in-
formation (e.g., r1-r5, r17-r26) can be monitored using mobuconltl . on the other
hand, rules based on a quantitative notion of time (used to deﬁne, e.g., deadlines) can-
not be monitored (e.g., r6-r9, r27-r28).
mobuconltl monitors ﬁnite-trace ltl constraints through deterministic ﬁnite state
automata. therefore, it does not tackle constraints referring to data and resources (rang-
8https://www.inf.unibz.it/ ˜montali/tools.html
35figure 6: compliance monitoring with mobuconltl : bpi challenge 2012
ing over ﬁnite state) because of the state space explosion problem (cmf 2: - and cmf
3: -). therefore, rules involving data and resources cannot be monitored (e.g., r10–
r16, r29–r31). with this approach, it is possible to express rules on non-atomic ac-
tivities (e.g., r17-r26) but it does not fully support the monitoring of activity lifecycle.
indeed, with this approach it is possible to associate an event type to each occurrence
of an activity. however, a correlation mechanism to link different events belonging to
the lifecycle of the same activity cannot be deﬁned (cmf 5: -). this is, again, related
to the impossibility for an automata-based approach of monitoring constraints referring
to data. indeed, the most natural way of implementing such a correlation mechanism
would be to connect events with the same value for a certain data (e.g., an activity id).
figure 5 represents how rules r1-r5 can be used to monitor with mobuconltl a
case replayed from the bpic 2011 testing log. figure 6 shows the monitoring results
obtained for a case from the testing log derived from the bpic 2012 log using the com-
pliance rules r17–r19, r21, r22, and r24. events are displayed on the horizontal
axis. the vertical axis shows the constraints. in particular, each line is labeled with the
declare constraints used to encode the rules mentioned before. five states are possi-
ble for compliance rules: possibly satisﬁed, possibly violated, satisﬁed, violated , and
conﬂict . the ﬁrst state attests that the monitored case is currently compliant with the
rule but can violate the rule in the future. the second state indicates that the compli-
ance rule is currently violated, but it is possible to bring it back to a satisﬁed state by
executing some activity in the future. the third and the fourth states model permanent
violations and satisfactions of the rule. in this way, mobuconltl implements reactive
monitoring (cmf 7: +). it is possible, at runtime, to detect that a state of affairs is
reached such that two or more compliance rules become conﬂicting (conﬂict state); the
36presence of a conﬂict means that no possible future course of execution exists such
that all the involved constraints are satisﬁed. in this sense, mobuconltl also supports
a pro-active management of violations and root cause detection (cmf 8: + and cmf
9: +). for example, in figure 5, when aanname laboratoriumonderzoek occurs some
of the constraints move to a conﬂict state since some of them require the execution of
vervolgconsult poliklinisch to be satisﬁed and for others the execution of this activity
is forbidden.
mobuconltl supports continuous monitoring and allows a case to be monitored
also after a violation or a conﬂict has occurred as shown in figure 5. one trivial way to
implement continuous monitoring is to reset all the automata needed for the monitor-
ing when a violation occurs. other more sophisticated ways to implement continuous
monitoring are presented in [37]. note that, in the visualization in figure 5, different
instances of the same rule are condensed in only one line. after every violation and
conﬂict a new instance of the violated rule is started in the same line.
the automata-based approach allows mobuconltl to provide the user with de-
tailed diagnostics about which activities can be executed and which ones are forbidden
at any point in time during the process execution. this is possible by evaluating which
transitions can be ﬁred from the current state of the automaton and which ones bring
the automaton in an inconsistent state. the tool only supports simple metrics for quan-
tifying the degree of compliance of a case [36] (cmf 10: +/-).
5.3.5. compliance monitoring with seaflows
seaflows is a compliance checking framework that addresses design and runtime
checking. it aims at encoding compliance states in an easily interpretable manner to
provide advanced compliance diagnosis. the core concepts described in [35, 64] were
implemented within the prototype named seaflows toolset . with seaflows , compli-
ance rules are modeled as compliance rule graphs (crg). seaflows enables to monitor
a stream of events encoded in a predeﬁned event format. it further enables the import
of logs in xes standard format.
qualitative time constraints are well-supported by seaflows . in particular, the
crg approach is not restricted to predeﬁned compliance constraint patterns but allows
for constraints that are more complex. however, seaflows does not address quan-
titative time (cmf 1: +/-). hence, constraints using metric time (e.g., r6-r9 and
r27-r28) are not supported.
seaflows only partially supports cmf 2 (cmf 2: +/-). this is because it provides
only limited support for constraints with non-unary data conditions. resource-aware
compliance rules are only supported if the resource conditions can be expressed via the
supported data conditions (cmf 3: +/-). hence, conditions as required for the resource-
related constraints r14-r16 and r29-r30 are not supported. seaflows supports both
atomic as well as non-atomic activities (cmf 4: +) and constraints on the lifecycle of
activities like r21-r23 (cmf 5: +).
for this case study, the logs were automatically replayed and checked against all
modeled rules. for each violation, a violation ﬁle was created. fig. 7 illustrates how
compliance with r5 is monitored by replaying the log of a speciﬁc case. as compliance
with a crg is checked by executing it against the event trace using well-deﬁned rules,
37figure 7: monitoring with seaflows : detection of two violable activations of a compliance rule
the compliance state is represented through markings of the crg. when a violation is
observed, it is reﬂected in the markings of the crg.
seaflows supports ﬁne-grained compliance checking by analyzing the individual
constraint instances that occur during the process execution (cmf 6: +). in fig. 7, two
instances of r5 were identiﬁed by the monitor (state violable in the check result
panel in the screenshot). the states of these instances are represented by the marked r5
shown in the main panel in fig. 7. from this state representation, it is possible to derive
information for providing pro-active support in terms of guiding the process execution
to avoid violations (cmf 8: +). how this can be done is described in [64]. in the
example, activity vervolgconsult poliklinisch is associated with an absence node that is
next to being executed. hence, this activity is prohibited and must not be executed as
its execution would lead to a violation.
when the last event of the case, i.e., vervolgconsult poliklinisch , is executed, both
instances become violated as shown in fig. 8. the marked crg serves as basis for
deriving explanations for violations (cmf 9: +). in the example, clearly r5 is violated
because vervolgconsult poliklinisch was executed even though it was prohibited after
aanname laboratoriumonderzoek . that is the reason why the corresponding node is
marked with red color. once violated, the instance of a compliance rule cannot be-
come satisﬁed in the further process execution. this is because the violation is already
manifest in the log. however, monitoring can still be continued for the compliance rule
38figure 8: monitoring with seaflows : detection of compliance violations
(i.e., future possible violations of the rule in the process instance can also be detected).
thus, seaflows supports reactive compliance management (cmf 7: +).
as the compliance monitor of seaflows was implemented as a proof-of-concept for
the concepts described in [64], it does not put emphasis on sophisticated visualization
and reporting features for compliance monitoring. although the compliance states of
multiple compliance rule instances can be aggregated to provide an overall compliance
level, the framework does not support a more detailed analysis of the individual metrics
(cmf 10: +/-). in addition, seaflows does not detect violations caused by the interplay
of two or more constraints. hence, the conﬂicts among some of the rules in the case
study (cf. section 5.3.4) remain undetected.
6. conclusion
this paper presents a framework for the systematic comparison of compliance mon-
itoring approaches in the business process management area. the framework consists
often compliance monitoring functionalities (cmfs) and includes requirements for
the constraint modeling notation (e.g., supporting time and data), requirements with
respect to the execution (e.g., supporting multiple constraint instances), and user re-
quirements (e.g., providing ﬁne-grained feedback). the cmfs are harvested based on
39a systematic literature review as well as from ﬁve case studies from different domains
(health care, manufacturing, and maritime safety).
the appropriateness of the cmff is shown in two ways. first of all, the cmf
framework is compared with existing compliance patterns in the business process man-
agement area. secondly, existing compliance monitoring approaches are classiﬁed
based on their support for the cmfs. the comparison with compliance patterns sup-
ports the importance of the four constraint-related cmfs, i.e., those cmfs that relate to
language and expressiveness aspects in the constraint speciﬁcation. the classiﬁcation
of existing approaches pointed out that none of them supports more than seven cmfs
and most approaches are not supported by publicly available software tools. here we
have to note that for some approaches several of the cmfs could not be evaluated based
on the literature. it seems that several approaches focus on a speciﬁc language aspect
rather than integral monitoring support. less attention has been devoted to user re-
quirements, i.e., the provision of ﬁne-grained feedback or even the proactive indication
of compliance violations. nevertheless, it is crystal clear that users play an important
role in compliance monitoring, e.g., to interpret deviations.
in order to demonstrate the applicability of our cmf framework, two realistic data
sets from the bpic 2011 and 2012 were applied using three compliance monitoring
tools, i.e., mobuconltl ,mobuconec , and seaflows . the data sets consisting of pro-
cess execution logs from patient treatment and the ﬁnancial domain were divided into
training and testing data sets. compliance constraints were harvested based on the
training set, implemented within the three tools, and monitored over the testing data
set. the application of concrete tools to these data sets nicely illustrates how com-
pliance monitoring works in practice and shows what the interaction with users looks
like.
let us now reﬂect on the four research questions described in the introduction.
rq1: how to identify compliance monitoring approaches? the systematic liter-
ature search and complementary case studies helped us to identify typical func-
tionalities required in compliance monitoring.
rq2: what are functionalities that are essential for compliance monitoring ap-
proaches in business processes? we identiﬁed three essential classes of monitor-
ing functionality, i.e., modeling, execution, and user requirements. however, the
cmff is meant to be extensible, i.e., additional cmfs could become relevant
and hence added or existing cmfs might be split or merged. one candidate is
cmf 6: supporting multiple-instances constraints, which refers to the multiple
instantiation of constraints, but might be also applied to multiple instances of the
underlying process (i.e., covering inter-instance constraints as dealt with in, for
example, [100]).
rq3: how can we demonstrate the appropriateness of the identiﬁed compliance
monitoring functionalities? real event data have been used to illustrate and test
the cmff. however, a real-life case study involving real-time monitoring is still
missing. to address this research question better, we need to ﬁnd a case study
where we can embed our monitoring tools in an operational information system.
40rq4: how can the compliance monitoring functionalities be applied in exist-
ing tools? three tools were used to demonstrate the practical realization of our
cmff. the choice of the tools was motivated by availability and experience with
the tools. a more comprehensive demonstration using additional tools (realizing
different approaches) would be useful and balance the viewpoint on the cmff.
for this, the bpi data sets ([11, 12], download via dois) together with the con-
straints provided in this paper constitute an available data set that could be used
to benchmark compliance monitoring approaches and tools. for a further eval-
uation of the cmff, studies with experts from practice are envisaged, e.g., by
brainstorming sessions or interviews to assess the appropriateness of the cmff.
the work can be further extended in several directions, e.g., to cross-organizational
or conﬁgurable processes. an interesting area of adaptation/extension of the cmf
framework here presented naturally arises when there is the need of a comprehensive
compliance evaluation not just within, but also across process cases. traditionally,
business processes are monitored in a case-by-case manner. however, compliance rules
may span across cases, e.g., because they focus on resources independently from the
speciﬁc case in which they operate, or because they need to compare and combine data
produced inside different cases.
acknowledgment
the work presented in this paper has been partly funded by the eu fp7 ip project
optique ( scalable end-user access to big data ), grant agreement n. fp7-318338, and
by the austrian science fund (fwf):i743 ( c3pro: change and compliance for col-
laborative processes ).
references
[1] s. sadiq, g. governatori, k. naimiri, modeling control objectives for business
process compliance, int’l conf. on business process management, pp. 149–164,
2007.
[2] l. t. ly, s. rinderle-ma, k. g ¨oser, p. dadam, on enabling integrated process
compliance with semantic constraints in process management systems, informa-
tion systems frontiers 14 (2):195–219 (2012)
[3] s. sadiq, a roadmap for research in business process compliance, business in-
formation systems workshops, pp. 1–4, 2011
[4] f. caron, j. vanthienen, b. baesens, comprehensive rule-based compliance
checking and risk management with process mining, decision support systems
54 (3):1357–1369 (2013)
[5] m. e. kharbili, s. stein, i. markovic, e. pulverm ¨uller, towards a framework for
semantic business process compliance management, int’l workshop on gover-
nance, risk and compliance - applications in information systems (grcis’08),
pp. 1–15, 2008
41[6] a. kogan, e. f. sudit, m. a. vasarhelyi, continuous online auditing: a program
of research, journal of information systems 13 (2):87–103 (1999)
[7] ieee task force on process mining, xes standard deﬁnition, www.
xes-standard.org (2013)
[8] h. m. w. verbeek, j. c. a. m. buijs, b. f. van dongen, w. m. p. van der aalst,
xes, xesame, and prom 6, information systems evolution, lnbip 72, pp. 60–
75, 2011
[9] m. weske, business process management: concepts, languages, architectures.
springer (2007)
[10] l. t. ly, f. m. maggi, m. montali, s. rinderle-ma, w. m. p. van der aalst, a
framework for the systematic comparison and evaluation of compliance monitor-
ing approaches, ieee enterprise distributed object computing conference, pp.
7–16, 2013
[11] 3tu data center, bpi challenge 2011 event log, doi:10.4121/uuid:d9769f3d-
0ab0-4fb8-803b-0d1120ffcf54
[12] b. van dongen, bpi challenge 2012 event log, doi:10.4121/uuid:3926db30-
f712-4394-aebc-75976070e91f
[13] b. weber, m. reichert, s. rinderle-ma, change patterns and change support
features - enhancing ﬂexibility in process-aware information systems, data &
knowledge engineering 66 (3):438–466 (2008)
[14] a. lanz, b. weber, m. reichert, workﬂow time patterns for process-aware infor-
mation systems, business process modeling, development, and support, lnbip
50, pp. 94–107, 2010
[15] s. rinderle-ma, j. mangler, integration of process constraints from heteroge-
neous sources in process-aware information systems, int’l emisa workshop, pp.
51–64, 2011
[16] b. kitchenham, procedures for performing systematic reviews, technical report,
keele university (2004).
[17] e. a. p. santos, r. francisco, a. d. vieira, e. d. f. r. loures, m. a. busetti,
modeling business rules for supervisory control of process-aware information
systems, business process management workshops, pp. 447–458, 2012
[18] k. namiri, n. stojanovic, pattern-based design and validation of business process
compliance, on the move to meaningful internet systems, pp. 59–76, 2007
[19] r. v. ammon, t. ertlmaier, o. etzion, a. kofman, t. paulus, integrating complex
events for collaborating and dynamically changing business processes, service-
oriented computing workshops, pp. 370–384, 2010
42[20] f. barbon, p. traverso, m. pistore, m. trainotti, run-time monitoring of instances
and classes of web service compositions, int’l conf. on web services, pp. 63–71,
2006
[21] l. baresi, d. bianculli, c. ghezzi, s. guinea, p. spoletini, a timed extension of
wscol, int’l conf. on web services, pp. 663–670, 2007
[22] l. baresi, s. guinea, dynamo: dynamic monitoring of ws-bpel processes,
int’l conf. on service-oriented computing, pp. 478–483, 2005
[23] l. baresi, s. guinea, l. pasquale, self-healing bpel processes with dynamo and
the jboss rule engine, int’l workshop on engineering of software services for
pervasive environments, pp. 11–20, 2007
[24] s. halle, r. villemaire, runtime monitoring of message-based workﬂows with
data, int’l ieee enterprise distributed object computing conference, pp. 63–
72, 2008
[25] l. khaluf, c. gerth, g. engels, pattern-based modeling and formalizing of busi-
ness process quality constraints, int’l conf. on advanced information systems
engineering, pp. 521–535, 2011
[26] d. a. basin, m. harvan, f. klaedtke, e. zalinescu, monpoly: monitoring usage-
control policies, int’l conf. on runtime veriﬁcation, pp. 360–364, 2012
[27] d. a. basin, f. klaedtke, s. m ¨uller, b. pﬁtzmann, runtime monitoring of met-
ric ﬁrst-order temporal properties, iarcs annual conference on foundations of
software technology and theoretical computer science (fsttcs 2008), v ol. 2
of lipics, schloss dagstuhl - leibniz-zentrum fuer informatik, pp. 49–60, 2008
[28] j. becker, p. delfmann, m. eggert, s. schwittay, generalizability and appli-
cability of model- based business process compliance-checking approaches – a
state-of-the-art analysis and research roadmap, business research 5 (2):221–247
(2012)
[29] l. baresi, s. guinea, towards dynamic monitoring of ws-bpel processes, int’l
conf. on service-oriented computing, pp. 269–282, 2005
[30] d. basin, f. klaedtke, s. marinovic, e. zalinescu, monitoring compliance poli-
cies over incomplete and disagreeing logs, int’l conf. on runtime veriﬁcation,
pp. 151–167, 2013
[31] s. bragaglia, f. chesani, p. mello, m. montali, d. sottara, fuzzy conformance
checking of observed behaviour with expectations, int’l conf. ai*ia 2011: arti-
ﬁcial intelligence around man and beyond, pp. 80–91, 2011
[32] f. chesani, p. mello, m. montali, f. riguzzi, m. sebastianis, storari, compli-
ance checking of execution traces to business rules: an approach based on logic
programming, business process management workshops, pp 134–145, 2008
43[33] c. giblin, s. m ¨uller, b. pﬁtzmann, from regulatory policies to event monitoring
rules: towards model-driven compliance automation, technical report rz 3662,
2006
[34] m. gomez-lopez, r. gasca, s. rinderle-ma, explaining the incorrect tempo-
ral events during business process monitoring by means of compliance rules
and model-based diagnosis, enterprise distributed object computing conference
workshops, pp. 163–172, 2013
[35] l. t. ly, s. rinderle-ma, d. knuplesch, p. dadam, monitoring business process
compliance using compliance rule graphs, on the move to meaningful internet
systems, pp. 82–99, 2011
[36] f. m. maggi, m. montali, w. m. p. van der aalst, an operational decision sup-
port framework for monitoring business constraints, int’l conf. on fundamental
approaches to software engineering, pp. 146–162, 2012
[37] f. m. maggi, m. montali, m. westergaard, w. m. p. van der aalst, monitoring
business constraints with linear temporal logic: an approach based on colored
automata, int’l conf. on business process management, pp. 132–147, 2011
[38] f. m. maggi, m. westergaard, m. montali, w. m. p. van der aalst, runtime ver-
iﬁcation of ltl-based declarative process models, int’ conf. on runtime veriﬁ-
cation, pp. 131–146, 2012
[39] m. montali, f. m. maggi, f. chesani, p. mello, w. m. p. van der aalst, monitoring
business constraints with the event calculus, acm transactions on intelligent
systems and technology 5 (1), 2013
[40] n. narendra, v . varshney, s. nagar, m. vasa, a. bhamidipaty, optimal con-
trol point selection for continuous business process compliance monitoring, int’l
conf. on service operations and logistics, and informatics, pp. 2536–2541, 2008
[41] r. thullner, s. rozsnyai, j. schiefer, h. obweger, m. suntinger, proactive busi-
ness process compliance monitoring with event-based systems, ieee enterprise
distributed object computing conference workshops, pp. 429–437, 2011
[42] s. sebahi, business process compliance monitoring: a view-based approach,
ph.d. thesis, liris (2012).
[43] w. m. p. van der aalst, k. van hee, j. m. van der werf, a. kumar, m. verdonk,
conceptual model for online auditing, decision support systems 50 (3):636–647
(2011)
[44] a. awad, m. weidlich, m. weske, consistency checking of compliance rules,
int’l conf. on business information systems, pp. 106–118, 2010
[45] e. ramezani, d. fahland, w. m. p. van der aalst, where did i misbehave? di-
agnostic information in compliance checking, int’l conf. on business process
management, pp. 262–278, 2012
44[46] e. ramezani, d. fahland, j. m. van der werf, p. mattheis, separating compliance
management and business process management, business process management
workshops, pp. 459–464, 2012
[47] w. m. p. van der aalst, a. de medeiros, process mining and security: detect-
ing anomalous process executions and checking process conformance, electronic
notes in theoretical computer science 121:3–21 (2005)
[48] w. m. p. van der aalst, a. adriansyah, b. van dongen, replaying history on
process models for conformance checking and performance analysis, wiley in-
terdisciplinary reviews: data mining and knowledge discovery 2 (2):182–192
(2012)
[49] r. accorsi, t. stocker, on the exploitation of process mining for security audits:
the conformance checking case, annual acm symposium on applied comput-
ing, pp. 1709–1716, 2012
[50] q. he, detecting runtime business process compliance with artifact lifecycles,
service-oriented computing workshops, pp. 426–432, 2013
[51] m. harvan, d. basin, g. caronni, s. ereth, f. klaedtke, h. mantel, checking
system compliance by slicing and monitoring logs*, technical report, eth, de-
partment of computer science, institute of information security (2013).
[52] a. awad, e. pascalau, m. weske, towards instant monitoring of business process
compliance, emisa forum 30 (2):10–24 (2010)
[53] e. mulo, u. zdun, s. dustdar, domain-speciﬁc language for event-based compli-
ance monitoring in process-driven soas, service oriented computing and ap-
plications 7 (1):59–73 (2013)
[54] e. mulo, u. zdun, s. dustdar, monitoring web service event trails for business
compliance, int’l conf. on service-oriented computing and applications, pp.
1–8, 2009
[55] m. strano, contract speciﬁcation for compliance checking of business interac-
tions, ph.d. thesis, newcastle university (2010).
[56] m. strano, c. molina-jimenez, s. shrivastava, a model for checking contrac-
tual compliance of business operations, technical report, university of newcastle
(2008).
[57] g. middleton, l. peyton, c. kuziemsky, b. eze, a framework for continuous
compliance monitoring of ehealth processes, world congress on privacy, secu-
rity, trust and the management of e-business, pp. 152–160, 2009
[58] j. stevovic, j. li, h. r. motahari-nezhad, f. casati, g. armellin, business pro-
cess management enabled compliance-aware medical record sharing, int’l journal
of business process integration and management 6 (3):201–223 (2013)
45[59] m. binder, w. dorda, g. duftschmid, r. dunkl, k. a. fr ¨oschl, w. gall, w. gross-
mann, k. harmankaya, m. hronsky, s. rinderle-ma, c. rinner, s. weber, on
analyzing process compliance in skin cancer treatment: an experience report
from the evidence-based medical compliance cluster (ebmc2), int’l conf. on
advanced information systems engineering, pp. 398–413, 2012
[60] c. garbe, k. peris, a. hauschild, p. saiag, m. middleton, a. spatz, j. grob,
j. malvehy, j. newton-bishop, a. stratigos, et al., diagnosis and treatment
of melanoma: european consensus-based interdisciplinary guideline, european
journal of cancer 46 (2):270–283 (2010)
[61] adventure project consortium, d7.1.2 use case speciﬁcation, http://
www.fp7-adventure.eu/resources/ (2012).
[62] l. t. ly, c. indiono, j. mangler, s. rinderle-ma, data transformation and seman-
tic log purging for process mining, int’l conf. on advanced information systems
engineering, pp. 238–253, 2012
[63] f. m. maggi, a. j. mooij, w. m. p. van der aalst, analyzing vessel behavior
using process mining, poseidon book, pp. 133–148, 2013
[64] l. t. ly, seaﬂows – a compliance checking framework for supporting the process
lifecycle, ph.d. thesis, university of ulm (2013)
[65] e. m. clarke, o. grumberg, d. a. peled, model checking, the mit press, cam-
bridge, 1999.
[66] r. alur, t. a. henzinger, real-time logics: complexity and expressiveness, in-
formation and computation 104:35–77 (1993)
[67] r. a. kowalski, m. j. sergot, a logic-based calculus of events, new generation
computing 4 (1):67–95 (1986)
[68] n. russell, a. h. m. ter hofstede, d. edmond, w. m. p. van der aalst, work-
ﬂow data patterns: identiﬁcation, representation and tool support, int’l conf. on
conceptual modeling, pp. 353–368, 2005
[69] j. f. allen, maintaining knowledge about temporal intervals, communications
of the acm 26 (11):832–843 (1983)
[70] f. a. schreiber, is time a real time? an overview of time ontology in infor-
matics, real time computing f 127, pp. 283–307, 1994
[71] m. reichert, p. dadam, adept ﬂex - supporting dynamic changes of workﬂows
without losing control, journal of intelligent information systems 10 (2):93–129
(1998)
[72] j. mangler, s. rinderle-ma, rule-based synchronization of process activities,
int’l conf. on e-commerce, pp. 121–128, 2011
46[73] h. prakken, m. j. sergot, contrary-to-duty obligations, studia logica 57 (1):91–
115 (1996)
[74] m. montali, speciﬁcation and veriﬁcation of declarative open interaction mod-
els – a logic-based approach, lnbip 56, 2010.
[75] e. a. p. santos, r. francisco, a. d. vieira, e. f.r. loures, m. a. busetti, model-
ing business rules for supervisory control of process-aware information systems,
business process management workshops, pp. 447–458, 2012
[76] m. dwyer, g. avrunin, j. corbett, patterns in property speciﬁcations for ﬁnite-
state veriﬁcation, int’l conf. on software engineering, pp. 411 –420, 1999
[77] g. de giacomo, m. y . vardi, linear temporal logic and linear dynamic logic on
ﬁnite traces, int’l joint conf. on artiﬁcial intelligence, pp. 854–860, 2013
[78] g. de giacomo, r. de masellis, m. montali, reasoning on ltl on finite traces:
insensitivity to inﬁniteness, aaai conf. on artiﬁcial intelligence, pp. 1027–
1033, 2014
[79] g. governatori, ict support for regulatory compliance of business processes,
world continuous auditing and reporting symp. (29wcars), 2013
[80] m. pesic, constraint-based workﬂow management systems: shifting controls
to users, ph.d. thesis, beta research school for operations management and
logistics, eindhoven (2008).
[81] m. montali, m. pesic, w. m. p. van der aalst, f. chesani, p. mello, s. storari,
declarative speciﬁcation and veriﬁcation of service choreographies, acm trans-
actions on the web 4(1) (2010)
[82] o. turetken, a. elgammal, w.-j. van den heuvel, m. papazoglou, capturing
compliance requirements: a pattern-based approach, ieee software 29 (3): 28–
36 (2012)
[83] a. awad, m. weidlich, m. weske, speciﬁcation, veriﬁcation and explanation of
violation for data aware compliance rules, int’l conf. on service oriented com-
puting, pp. 500–515, 2009.
[84] m. montali, f. chesani, p. mello, f. m. maggi, towards data-aware constraints in
declare, annual acm symposium on applied computing, pp. 1391–1396, 2013
[85] f. m. maggi, m. dumas, l. garc ´ıa-ba ˜nuelos, m. montali, discovering data-
aware declarative process models from event logs, int’l conf. on business process
management, pp. 81–96, 2013
[86] d. knuplesch, m. reichert, l. t. ly, a. kumar, s. rinderle-ma, visual modeling
of business process compliance rules with the support of multiple perspectives,
int’l conf. on conceptual modeling, pp. 106–120, 2013
47[87] w. m. p. van der aalst and m. pesic. decserflow: towards a truly declarative
service flow language. in m. bravetti, m. nunez, and g. zavattaro, editors,
international conference on web services and formal methods (ws-fm 2006) ,
volume 4184 of lecture notes in computer science , pages 1–23. springer-verlag,
berlin, 2006.
[88] m. pesic, h. schonenberg, w. m. p. van der aalst, declare: full support
for loosely-structured processes, ieee enterprise distributed object computing
conference, pp. 287–300, 2007
[89] w. m. p. van der aalst, m. pesic, and h. schonenberg. declarative workﬂows:
balancing between flexibility and support. computer science - research and
development , 23(2):99–113, 2009.
[90] g. governatori, z. milosevic, s. sadiq, compliance checking between business
processes and business contracts, ieee enterprise distributed object computing
conference, pp. 221–232, 2006
[91] m. hashmi, g. governatori, m. t. wynn, business process data compliance, int’l
symposium rules on the web: research and applications, pp. 32–46, 2012
[92] f. m. maggi, declarative process mining with the declare component of prom,
business process management demos, 2013.
[93] m. pesic, w. m. p. van der aalst, a declarative approach for ﬂexible business
processes management, business process management workshops, pp. 169–180,
2006
[94] s. bragaglia, f. chesani, p. mello, m. montali, p. torroni, reactive event calcu-
lus for monitoring global computing applications, logic programs, norms and
action, lncs 7360, 2012.
[95] d. luckham, the power of events: an introduction to complex event processing
in distributed enterprise systems, springer, 2008.
[96] n. a. chaudhry, k. shaw, m. abdelguerﬁ, stream data management, springer,
2005.
[97] e. mulo, u. zdun, s. dustdar, domain-speciﬁc language for event-based compli-
ance monitoring in process-driven soas, service oriented computing and ap-
plications 7 (1):59–73 (2013)
[98] d. schuller, r. hans, s. z ¨oller, r. steinmetz, on optimizing collaborative man-
ufacturing processes in virtual factories, workshop on ict services and inter-
operability for manufacturing, pp. 66-74, 2014
[99] w.m.p. van der aalst, discovery, conformance and enhancement of business
processes. springer (2011)
[100] m. leitner, j. mangler, s. rinderle-ma: deﬁnition and enactment of instance-
spanning process constraints web information systems engineering, pp. 652-658
(2012)
48