markings in perpetual free-choice nets are fully
characterized by their enabled transitions
wil m.p. van der aalst
process and data science (pads), rwth aachen university, germany.
wvdaalst@pads.rwth-aachen.de
abstract. a marked petri net is lucent if there are no two different reachable
markings enabling the same set of transitions, i.e., states are fully characterized
by the transitions they enable. this paper explores the class of marked petri nets
that are lucent and proves that perpetual marked free-choice nets are lucent. per-
petual free-choice nets are free-choice petri nets that are live and bounded and
have a home cluster, i.e., there is a cluster such that from any reachable state
there is a reachable state marking the places of this cluster. a home cluster in a
perpetual net serves as a ‚Äúregeneration point‚Äù of the process, e.g., to start a new
process instance (case, job, cycle, etc.). many ‚Äúwell-behaved‚Äù process models fall
into this class. for example, the class of short-circuited sound workÔ¨Çow nets is
perpetual. also, the class of processes satisfying the conditions of the algorithm
for process discovery falls into this category. this paper shows that the states in
a perpetual marked free-choice net are fully characterized by the transitions they
enable, i.e., these process models are lucent. having a one-to-one correspondence
between the actions that can happen and the state of the process, is valuable in
a variety of application domains. the full characterization of markings in terms
of enabled transitions makes perpetual free-choice nets interesting for workÔ¨Çow
analysis and process mining. in fact, we anticipate new veriÔ¨Åcation, process dis-
covery, and conformance checking techniques for the subclasses identiÔ¨Åed.
1 introduction
structure theory is a branch in petri nets [8, 20‚Äì23] that asks what behavioral properties
can be derived from it structural properties [10, 12, 13]. many different subclasses have
been studied. examples include state machines, marked graphs, free-choice nets, asym-
metric choice nets, and nets without tp and pt handles. structure theory also studies
local structures such as traps and siphons that may reveal information about the behav-
ior of the petri net and includes linear algebraic characterizations of behavior involving
the matrix equation or invariants [12, 13, 20].
in this paper, we focus on the following fairly general question: what is the class
of petri nets for which each marking is uniquely identiÔ¨Åed by the set of enabled tran-
sitions? we call such nets lucent . a lucent marked petri net cannot have two different
reachable markings that enable the same set of transitions.
consider, for example, the petri net shown in figure 1. there are four reachable
markings. marking [p1;p2]enablesft1;t2g. marking [p1;p3]enablesft3g. marking
[p2;p4]enablesft4g. marking [p3;p4]enablesft3;t4g. hence, the marked net is lu-
cent, because each of the four markings is uniquely identiÔ¨Åed by a particular set of2 wil van der aalst
t2p1
p4
p3
t3t1
p2t4
fig. 1. a perpetual marked free-choice net (i.e., live, bounded, and having a home cluster) that is
lucent (each reachable marking is unique in terms of the transitions it enables).
enabled transitions. the petri net shown in figure 2 is not lucent. after Ô¨Åring either
transitiont1ort2onlyt3is enabled, i.e., the two corresponding [p2;p5]and[p2;p6]
markings enable the same set of transitions. the choice between t4andt5is controlled
by a token in p5orp6, and this state information is not ‚Äúvisible‚Äù when only t3is en-
abled. as illustrated by figure 2, it is easy to construct non-free-choice nets that are not
lucent. moreover, unbounded petri nets cannot be lucent. these examples trigger the
question: which classes of marked petri nets are guaranteed to be lucent?
in this paper, we will show that perpetual marked free-choice nets are always lu-
cent. these nets are live and bounded and also have a so-called home cluster . a home
cluster serves as a ‚Äúregeneration point‚Äù, i.e., a state where all tokens mark a single clus-
ter. the property does not hold in general. liveness, boundedness, the existence of a
home cluster, and the free-choice requirement are all needed. we will provide various
counterexamples illustrating that dropping one of the requirements is not possible.
free-choice nets are well studied [11, 12, 15, 25]. the deÔ¨Ånite book on the structure
theory of free-choice nets is [13]. also, see [12] for pointers to literature. therefore,
it is surprising that the question whether markings are uniquely identiÔ¨Åed by the set of
enabled transitions (i.e., lucency) has not been explored in literature. most related to the
results presented in this paper is the work on the so-called blocking theorem [17, 26].
blocking markings are reachable markings which enable transitions from only a single
cluster. removing the cluster yields a dead marking. figure 1 has three blocking mark-
ings ( [p1;p2],[p1;p3], and[p2;p4]). the blocking theorem states that in a bounded and
live free-choice net each cluster has a unique blocking marking. we will use this result,
but prove a much more general property. note that we do not look at a single cluster
and do not limit ourselves to blocking markings. we consider all markings including
states (partially) marking multiple clusters.
we expect that the theoretical results presented in this paper will enable new anal-
ysis techniques in related Ô¨Åelds such as business process management [14], workÔ¨Çow
management [24], and process mining [4]. lucency is a natural assumption in many
application domains and should be exploited. for example, the worklists of a work-
Ô¨Çow management system show the set of enabled actions. hence, lucency allows us to
reason about the internal state of the system in terms of the actions it allows. we alsomarkings in perpetual free-choice nets 3
p1
t2t1
t3t4t6
t5p2 p3 p4
p6p5
fig. 2. a perpetual marked non-free-choice net that is not lucent because there are two reachable
markings ( [p2;p5]and[p2;p6]) enabling the same set of transitions ( ft3g).
anticipate that lucency can be exploited in workÔ¨Çow veriÔ¨Åcation, process discovery, and
conformance checking [5]. event logs used in process mining only reveal the actions
performed and not the internal state [3, 4]. moreover, the class of perpetual marked
free-choice nets considered in this paper is quite large and highly relevant in many
application domains. the existence of a ‚Äúregeneration point‚Äù (home cluster) is quite
general, and liveness and boundedness (or soundness) are often desirable. for example,
the class of short-circuited sound workÔ¨Çow nets is perpetual. processes that are cyclic,
often have a home cluster. non-cyclic process often have a clear start and end state
and can be short-circuited thus introducing a home cluster. for example, the represen-
tational bias of the algorithm (i.e., the class of process models for which rediscovery
is guaranteed) corresponds to a subclass of perpetual marked free-choice nets [9].
the remainder of this paper is organized as follows. section 2 introduces prelim-
inaries and known results (e.g., the blocking theorem). section 3 deÔ¨Ånes lucency as
a (desirable) behavioral property of marked petri nets. section 4 introduces perpetual
nets and important notions like partial p-covers and local safeness. these are used to
prove the main theorem of this paper showing that markings are unique in terms of the
transitions they enable. section 5 concludes the paper.
2 preliminaries
this section introduces basic concepts related to petri nets, subclasses of nets (e.g.,
free-choice nets and workÔ¨Çow nets), and blocking markings.
2.1 petri nets
multisets are used to represent the state of a petri net. b(a)is the set of all multisets
over some set a. for some multiset b2b(a),b(a)denotes the number of times element
a2aappears inb. some examples: b1= [ ] ,b2= [x;x;y ],b3= [x;y;z ],b4=
[x;x;y;x;y;z ], andb5= [x3;y2;z]are multisets over a=fx;y;zg.b1is the empty
multiset,b2andb3both consist of three elements, and b4=b5, i.e., the ordering of
elements is irrelevant and a more compact notation may be used for repeating elements.4 wil van der aalst
the standard set operators can be extended to multisets, e.g., x2b2,b2]b3=b4,
b5nb2=b3,jb5j= 6, etc.fa2bgdenotes the set with all elements afor whichb(a)
1.[f(a)ja2b]denotes the multiset where element f(a)appearsp
x2bjf(x)=f(a)b(x)
times.
=ha1;a2;:::;ani2xdenotes a sequence over xof lengthn.hiis the empty
sequence. sequences can be concatenated using ‚Äú ‚Äù, e.g.,ha;bihb;ai=ha;b;b;ai. it
is also possible to project sequences: ha;b;b;a;c;difa;cg=ha;a;ci.
deÔ¨Ånition 1 (petri net). a petri net is a tuple n= (p;t;f )withpthe non-empty
set of places, tthe non-empty set of transitions such that p\t=;, andf(p
t)[(tp)the Ô¨Çow relation such that the graph (p[t;f)is connected.
deÔ¨Ånition 2 (marking). letn= (p;t;f )be a petri net. a marking mis a multiset
of places, i.e., m2b(p).(n;m )is a marked net.
for a subset of places xp:mx= [p2mjp2x]is the marking projected
on this subset.
a petri netn= (p;t;f )deÔ¨Ånes a directed graph with nodes p[tand edges
f. for anyx2p[t,nx=fyj(y;x)2fgdenotes the set of input nodes
andxn=fyj(x;y)2fgdenotes the set of output nodes. the notation can be
generalized to sets:nx=fyj9x2x(y;x)2fgandxn=fyj9x2x(x;y)2fg
for anyxp[t. we drop the superscript nif it is clear from the context.
a transition t2tisenabled in markingmof netn, denoted as (n;m )[ti, if each
of its input placestcontains at least one token. en(n;m ) =ft2tj(n;m )[tigis
the set of enabled transitions.
an enabled transition tmay Ô¨Åre, i.e., one token is removed from each of the input
placestand one token is produced for each of the output places t. formally:m0=
(mnt)]tis the marking resulting from Ô¨Åring enabled transition tin markingm
of petri netn.(n;m )[ti(n;m0)denotes that tis enabled in mand Ô¨Åringtresults in
markingm0.
let=ht1;t2;:::;tni2tbe a sequence of transitions. (n;m )[i(n;m0)
denotes that there is a set of markings m0;m 1;:::;mn(n0) such thatm0=m,
mn=m0, and (n;mi)[ti+1i(n;mi+1)for0i < n . a marking m0isreachable
frommif there exists a Ô¨Åring sequence such that (n;m )[i(n;m0).r(n;m ) =
fm02b(p)j92t(n;m )[i(n;m0)gis the set of all reachable markings.
figure 3 shows a marked petri net having 8 places and 7 transitions. transitions t3
andt6are enabled in the initial marking m= [p3;p6].r(n;m ) =f[p3;p6];[p6;p7];
[p3;p8];[p7;p8];[p1;p2];[p3;p4];[p5;p6];[p4;p7];[p5;p8]g. for example, the Ô¨Åring se-
quenceht3;t6;t7ileads to marking [p1;p2], i.e.,(n;[p3;p6])[ht3;t6;t7ii(n;[p1;p2]).
apath in a petri net n= (p;t;f )is a sequence of nodes =hx1;x2;:::;xni
such that (xi;xi+1)2ffor1i < n .is an elementary path if xi6=xjfor
1i<jn.
next, we deÔ¨Åne a few, often desirable, behavioral properties: liveness, boundedness,
and the presence of (particular) home markings.markings in perpetual free-choice nets 5
t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8
fig. 3. a perpetual marked free-choice net [13]. the net is live, bounded, and has so-called ‚Äúhome
clusters‚Äù (e.g., fp7;p8;t7g). the net is also lucent.
deÔ¨Ånition 3 (liveness and boundedness). a marked net (n;m )isliveif for every
reachable marking m02r(n;m )and every transition t2tthere exists a marking
m002r(n;m0)that enables t. a marked net (n;m )isk-bounded if for every reach-
able marking m02r(n;m )and everyp2p:m0(p)k. a marked net (n;m )is
bounded if there exists a ksuch that (n;m )isk-bounded. a 1-bounded marked net is
called safe. a petri netnisstructurally bounded if(n;m )is bounded for any marking
m. a petri net nisstructurally live if there exists a marking msuch that (n;m )is
live. a petri net niswell-formed if there exists a marking msuch that (n;m )is live
and bounded.
the marked petri net shown in figure 3 is live and safe. hence, it is also well-
formed.
deÔ¨Ånition 4 (home marking). let(n;m )be a marked net. a marking mhis a home
marking if for every reachable marking m02r(n;m ):mh2r(n;m0).(n;m )is
cyclic ifmis a home marking.
the marked petri net shown in figure 3 has 8 home markings: f[p6;p7];[p3;p8];
[p7;p8];[p1;p2];[p3;p4];[p5;p6];[p4;p7];[p5;p8]g. however, the net is not cyclic be-
cause [p3;p6]is not a home marking.
2.2 subclasses of petri nets
for particular subclasses of petri net there is a relationship between structural properties
and behavioral properties like liveness and boundedness [12]. in this paper, we focus
on free-choice nets [13].
deÔ¨Ånition 5 (p-net, t-net, and free-choice net). letn= (p;t;f )be a petri net.
nis an p-net (also called a state machine) if jtj=jtj= 1 for anyt2t.nis a
t-net (also called a marked graph) if jpj=jpj= 1for anyp2p.nis free-choice
net if for any for any t1;t22t:t1=t2ort1\t2=;.nis strongly connected6 wil van der aalst
if the graph (p[t;f)is strongly connected, i.e., for any two nodes xandythere is a
path leading from xtoy.
an alternative way to state that a net is free-choice is the requirement that for any
p1;p22p:p1=p2orp1\p2=;. the petri net shown in figure 3 is free-choice.
the petri net shown in figure 2 is not free-choice because t4andt5shared an input
place (p3) but have different sets of input places.
deÔ¨Ånition 6 (siphon and trap). letn= (p;t;f )be a petri net and rpa
subset of places. ris a siphon ifrr.ris a trap ifrr. a siphon (trap) is
called proper if it is not the empty set.
any transition that adds tokens to a siphon also takes tokens from the siphon. there-
fore, an unmarked siphon remains unmarked. any transition that takes tokens from a
trap also adds tokens to the trap. therefore, a marked trap remains marked.
deÔ¨Ånition 7 (cluster). letn= (p;t;f )be a petri net and x2p[t. the cluster
of nodex, denoted [x]cis the smallest set such that (1) x2[x]c, (2) ifp2[x]c\p,
thenp[x]c, and (3) ift2[x]c\t, thent[x]c.[n]c=f[x]cjx2p[tgis
the set of clusters of n.
note that [n]cpartitions the nodes in n. the petri net shown in figure 3 has 6
clusters: [n]c=ffp1;p2;t1;t2g;fp3;t3g;fp4;t4g;fp5;t5g;fp6;t6g;fp7;p8;t7gg.
deÔ¨Ånition 8 (cluster notations). letn= (p;t;f )be a petri net and c2[n]ca
cluster.p(c) =p\care the places in c,t(c) =t\care the transitions in c,
andm(c) = [p2p(c)]is the smallest marking fully enabling the cluster.
deÔ¨Ånition 9 (subnet, p-component, t-component). letn= (p;t;f )be a petri
net andxp[tsuch thatx6=;.nx= (p\x;t\x;f\(xx))is the
subnet generated by x.nxis ap-component ofnifnp[pn xforp2x\p
andnxis a strongly connected p-net. nxis at-component ofnifnt[ntx
fort2x\tandnxis a strongly connected t-net. pcomp (n) =fxp[tj
nxis a p-componentg.tcomp (n) =fxp[tjnxis a t-componentg.
the petri net shown in figure 3 has four p-components and two t-components (see
figure 4). these components cover all nodes of the net.
deÔ¨Ånition 10 (p-cover, t-cover). letn= (p;t;f )be a petri net. nhas a p-cover if
and only ifspcomp (n) =p[t.1nhas a t-cover if and only ifstcomp (n) =
p[t.
since the early seventies, it is known that well-formed free-choice nets have a p-
cover and a t-cover (Ô¨Årst shown by michel hack).
theorem 1 (coverability theorem [13]). letn= (p;t;f )be a well-formed free-
choice net.spcomp (n) =stcomp (n) =p[t.
moreover, for any well-formed free-choice net nand marking m:(n;m )is live
if and only if every p-component is marked in m(theorem 5.8 in [13]).
1sq=s
x2qxfor some set of sets q.markings in perpetual free-choice nets 7
t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8
(d) p-component x 4t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8
(e) t-component x 5t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8
(f) t-component x 6t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8
(a) p-component x 1t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8
(b) p-component x 2t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8
(c) p-component x 3
fig. 4. the petri net shown in figure 3 has four p-components and two t-components.
2.3 workÔ¨Çow nets
in the context of business process management, workÔ¨Çow automation, and process min-
ing, often a subclass of petri nets is considered where each net has a unique source place
iand a unique sink place o[1].
deÔ¨Ånition 11 (workÔ¨Çow net). letn= (p;t;f )be a petri net. nis a workÔ¨Çow
net if there are places i;o2psuch thati=;,o=;, and all nodes p[t
are on a path from itoo. given a workÔ¨Çow net n, the short-circuited net is n=
(p;t[ftg;f[f(t;i);(o;t)g).
the short-circuited net is strongly connected. different notions of soundness have
been deÔ¨Åned [6]. here we only consider classical soundness [1].
deÔ¨Ånition 12 (sound). letn= (p;t;f )be a workÔ¨Çow net with source place i.nis
sound if and only if (n;[i])is live and bounded.
note that soundness implies that starting from the initial state (just a token in place
i), it is always possible to reach the state with one token in place o(marking [o]). more-
over, after a token is put in place o, all the other places need to be empty. finally, there
are no dead transitions (each transition can become enabled).
figure 5 shows a sound workÔ¨Çow net. by adding transition tthe net is short-
circuited. the short-circuited net is live, safe, and cyclic.
2.4 uniqueness of blocking markings in free-choice nets
ablocking marking is a marking where all transitions in a particular cluster are en-
abled while all others are disabled. for example, in figure 3, [p3;p6]is not a blocking
marking, but [p3;p8],[p6;p7], and [p7;p8]are examples of blocking markings.8 wil van der aalst
t1
t2t3
t4
t5
t6t7p7 p1
p2p3
p4
p5
p6p8t8t*t0
p9start
complete
fig. 5. the free-choice net without transition tis a workÔ¨Çow net. the short-circuited net is
perpetual, i.e., live, bounded, and having a home cluster (e.g., fstart;t0g). the short-circuited
net is also lucent.
deÔ¨Ånition 13 (blocking marking). let(n;m )be a marked net and c2[n]ca clus-
ter. a blocking marking forcis a marking mb2r(n;m )such that en(n;mb) =
t(c), i.e., all transitions in the cluster are enabled, but no other transitions.
in [18] genrich and thiagarajan showed that unique blocking markings exist for
all clusters in live and safe marked graphs. this was generalized by gaujal, haar, and
mairesse in [17] where they showed that blocking markings exist and are unique in live
and bounded free-choice nets. note that in a free-choice net all transitions in the cluster
are enabled simultaneously (or all are disabled). there is one unique marking in which
precisely one cluster is enabled. moreover, one can reach this marking without Ô¨Åring
transitions from the cluster that needs to become enabled. a simpliÔ¨Åed proof was given
in [26] and another proof sketch was provided in [12].
theorem 2 (existence and uniqueness of blocking markings [17]). let(n;m )live
and bounded free-choice net and c2[n]ca cluster. there exists a unique blocking
marking for creachable from (n;m ), denoted by bc
(n;m ). moreover, there exists a
Ô¨Åring sequence 2(tnc)such that (n;m )[i(n;bc
(n;m )).
the free-choice net in figure 6 is live and bounded. hence, each cluster has a unique
blocking marking. the unique blocking marking of the cluster fp2;t2gis[p2;p5]. the
unique blocking marking of the cluster fp6;p7;t6gis[p6;p7;p8].
the free-choice net in figure 1 has three clusters. the three blocking markings
are[p1;p2],[p1;p3], and [p2;p4]. marking [p3;p4]is not a blocking marking because
transitions from different clusters are enabled.
figure 7 illustrates that the free-choice property is essential in theorem 2. cluster
c1=fp1;t1ghas two reachable blocking markings m1= [p1;p3]andm2= [p1;p4].
clusterc2=fp5;t4galso has two reachable blocking markings m3= [p3;p5]and
m4= [p4;p5].markings in perpetual free-choice nets 9
t2
t1t4
t3 t5t6p1
p2
p3p4
p8 p9p6
p7 p5
fig. 6. a live and safe marked free-choice net that is not locally safe and not perpetual. neverthe-
less, the net is lucent.
t1t2
t3t4p1
p2p4 p3
p5
fig. 7. a live and locally safe non-free-choice net. cluster fp1;t1ghas two reachable blocking
markingsm1= [p1;p3]andm2= [p1;p4]. also cluster fp5;t4ghas two reachable blocking
markingsm3= [p3;p5]andm4= [p4;p5].
3 lucency
this paper focuses on the question whether markings can be uniquely identiÔ¨Åed based
on the transitions they enable. given a marked petri net we would like to know whether
each reachable marking has a unique ‚Äúfootprint‚Äù in terms of the transitions it enables.
if this is the case, then the net is lucent .
deÔ¨Ånition 14 (lucent). let(n;m )be a marked petri net. (n;m )is lucent if and
only if for any m1;m 22r(n;m ):en(n;m 1) =en(n;m 2)impliesm1=m2.
the marked petri net in figure 1 is lucent because each of the four reachable mark-
ings has a unique footprint in terms of the set of enabled transitions. the marked petri
net shown in figure 2 is not lucent because there are two markings m1= [p2;p5]
andm2= [p2;p6]with en(n;m 1) = en(n;m 2) =ft3gandm16=m2. the
marked petri nets in Ô¨Ågures 3, 5, and 6 are lucent. the non-free-choice net in figure 7
is not lucent (markings [p3;p5]and[p4;p5]enablet4, and [p1;p3]and[p1;p4]enable
t1). figure 8 shows a free-choice net that is also not lucent (markings [p3;p7;p8]and
[p3;p5;p7]both enableft1;t4g).
lemma 1. let(n;m )be a lucent marked petri net. (n;m )is bounded and each
cluster has at most one blocking marking.10 wil van der aalst
t2
t6p1
t5t3
t8 t7p2
p8p3 p6p5
p4 p7t1 t4
fig. 8. a live and locally safe free-choice net that is not lucent because reachable markings
[p3;p7;p8]and[p3;p5;p7]both enablet1andt4.
proof. assume that (n;m )is both lucent and unbounded. we will show that this leads
to a contradiction. since (n;m )is unbounded, we can Ô¨Ånd markings m1andm2and
sequences0andsuch that (n;m )[0i(n;m 1)[i(n;m 2)andm2is strictly larger
thanm1. this implies that we can repeatedly execute getting increasingly larger
markings: (n;m 2)[i(n;m 3)[i(n;m 4)[i(n;m 5):::. at some stage, say at mk,
the set of places that are marked stabilizes. however, the number of tokens in some
places continues to increase in mk+1,mk+2, etc. hence, we Ô¨Ånd markings that enable
the same set of transitions but that are not the same. for example, mk+16=mk+2and
en(n;mk+1) =en(n;mk+2). hence, the net cannot be lucent.
take any cluster cand assume that (n;m )has two different reachable blocking
markingsm1andm2. this means that en(n;m 1) =en(n;m 2) =c\t. hence,
(n;m )could not be lucent, yielding a contradiction again. u t
we would like to Ô¨Ånd subclasses of nets that are guaranteed to be lucent based
on their structure. theorem 2 and the fact that lucency implies the existence unique
blocking markings, suggest considering live and bounded free-choice nets. however, as
the example in figure 8 shows, this is not sufÔ¨Åcient.
4 characterizing markings of perpetual free-choice nets
theorem 2 only considers blocking markings, but illustrates that the free-choice prop-
erty is important for lucency. consider for example figure 7. m1= [p1;p3]and
m2= [p1;p4]both enable t1.m3= [p3;p5]andm4= [p4;p5]both enable t4.
obviously, the property does not hold for non-free-choice nets even when they are live,
safe, cyclic, etc. however, as figure 8 shows, the property also does not need to hold
for free-choice nets even when they are live, safe, and cyclic. yet, we are interested in
the class of nets for which all reachable markings have a unique ‚Äúfootprint‚Äù in terms of
the transitions they enable. therefore, we introduce the class of perpetual nets . these
nets have a ‚Äúregeneration point‚Äù involving a so-called ‚Äúhome cluster‚Äù.markings in perpetual free-choice nets 11
4.1 perpetual marked nets
ahome cluster is a cluster corresponding to a home marking, i.e., the places of the
cluster can be marked over and over again while all places outside the cluster are empty.
deÔ¨Ånition 15 (home cluster). let(n;m )be a marked net with n= (p;t;f )and
c2[n]ca cluster ofn.cis ahome cluster of(n;m )ifm(c)is a home marking,
i.e., for every reachable marking m02r(n;m ):m(c)2r(n;m0).
consider the marked net in figure 1. there are three clusters: c1=fp1;p2;t1;t2g,
c2=fp3;t3g, andc3=fp4;t4g.c1is a home cluster because m(c1) = [p1;p2]is a
home marking. c2is not a home cluster because m(c2) = [p3]is not a home marking.
c3is also not a home cluster because m(c3) = [p4]is not a home marking.
the marked net in figure 7 also has three clusters: c1=fp1;t1g,c2=fp2;p3;p4;
t2;t3g, andc3=fp5;t4g. since [p1],[p2;p3;p4], and[p5]are not home markings, the
net has no home clusters.
nets that are live, bounded, and have at least one home cluster are called perpetual .
deÔ¨Ånition 16 (perpetual marked net). a marked net (n;m )is perpetual if it is live,
bounded, and has a home cluster.
the marked petri nets in Ô¨Ågures 1, 2, 3, and 5 are perpetual. the nets in Ô¨Ågures 6, 7,
and 8 are not perpetual. home clusters can be viewed as ‚Äúregeneration points‚Äù because
the net is always able to revisit a state marking a single cluster.
lemma 2 (sound workÔ¨Çow nets are perpetual). letnbe a sound workÔ¨Çow net
with source place i. the short-circuited marked net (n;[i])is perpetual.
proof. soundness implies that (n;[i])is live and bounded. moreover, [i]is a home
cluster. it is always possible to enable and Ô¨Åre tdue to liveness. after Ô¨Åring t, place
iis marked and there can be no other tokens because otherwise (n;[i])would be un-
bounded. hence, [i]is a home marking. fig[iis a cluster because the transitions in
icannot have additional input places (otherwise they would be dead). u t
next to workÔ¨Çow nets, there are many classes of nets that have a ‚Äúregeneration
point‚Äù (i.e., home cluster). for example, process models discovered by discovery algo-
rithms often have a well-deÔ¨Åned start and end point. by short-circuiting such nets, one
gets home clusters.
4.2 local safeness
it is easy to see that non-safe petri nets are likely to have different markings enabling
the same set of transitions. in fact, we need a stronger property that holds for perpetual
marked free-choice nets: local safeness . local safeness is the property that each p-
component is safe (i.e., the sum of all tokens in the component cannot exceed 1).
deÔ¨Ånition 17 (locally safe). let(n;m )be a marked p-coverable net. (n;m )is
locally safe if all p-components are safe, i.e., for any p-component x2pcomp (n)
and reachable marking m02r(n;m ):p
p2x\pm0(p)1.12 wil van der aalst
note that a safe marked p-coverable net does not need to be locally safe. con-
sider for example the marked net in figure 6. the net is safe, but the p-component
fp1;p3;p5;p8;p6;t1;t3;t4;t5;t6ghas two tokens. however, all perpetual marked free-
choice nets are locally safe.
lemma 3 (perpetual marked free-choice nets are locally safe). let(n;m )be
a perpetual marked free-choice net. (n;m )is locally safe.
proof. since (n;m )is perpetual, therefore it is live, bounded, and has a home cluster
c.nis well-formed and therefore has a p-cover. a bounded well-formed free-choice
net is only live if every p-component is initially marked (see theorem 5.8 in [13]).
hence, also in home marking m(c)the p-components are marked (the number of to-
kens is invariant). therefore, in any p-component one of the places in p(c)appears.
there cannot be two places from cluster cin the same p-component (this would vio-
late the requirement that transitions in a p-component have precisely one input place).
hence, each p-component is marked with precisely one token and this number is invari-
ant for all reachable markings. hence, (n;m )is locally safe. u t
the nets in Ô¨Ågures 1, 3, and 5 are free-choice and perpetual and therefore also
locally safe. the net in figure 2 is locally safe and perpetual, but not free-choice. the
marked petri net in figure 6 is not perpetual and also not locally safe. figure 8 shows
that there are free-choice nets that are live and locally safe, but not perpetual.
4.3 realizable paths
free-choice nets have many interesting properties showing that the structure reveals
information about the behavior of the net [13]. tokens can basically ‚Äúdecide where to
go‚Äù, therefore such nets are called free-choice.
the following lemma from [19] shows that tokens can follow an elementary path in
a live and bounded free-choice net where the initial marking marks a single place and
that is a home marking.
lemma 4 (realizable paths in cyclic free-choice nets [19]). let(n;m )be a live,
bounded, and cyclic marked free-choice net with m= [ph]. letm0be a reach-
able marking which marks place qand lethp0;t1;p1;t2;:::;tn;pniwithp0=qand
pn=phbe an elementary path in n. there exists a Ô¨Åring sequence such that
(n;m0)[i(n;m )and each of the transitions ft1;:::tngis executed in the given or-
der and none of the intermediate markings marks ph.
proof. see [19]. u t
note that lemma 4 refers to a subclass of perpetual marked free-choice nets. a
similar result can be obtained for p-components in a perpetual marked free-choice net.
lemma 5 (realizable paths within p-components). let(n;m )be a perpetual mark-
ed free-choice net with home cluster c. letx2pcomp (n)be the nodes of some p-
component and m02r(n;m )an arbitrary reachable marking. for any elementary
pathhp0;t1;p1;t2;:::;tn;pni2xinnwithp02m0andpn2p(c): there exists
a Ô¨Åring sequence such that (n;m0)[i(n;m (c))andx=ht1;t2;:::;tni.markings in perpetual free-choice nets 13
proof. let(px;tx;fx)be the p-component corresponding to x. note that p0is
the only place of pxthat is marked in m0. moreover, elements in hp0;t1;p1;t2;:::
;tn;pni2xare unique because the path is elementary. in fact, the places in fp0;p1;
:::;pngpxbelong to different clusters because a p-component cannot have multi-
ple places of the same cluster. as a result also ft1;t2;:::tngtxbelong to different
clusters.
ifp0=pn, then the lemma holds because pn2p(c)is marked and we can also
mark the other places in p(c). theorem 2 can be applied such that all places in p(c)
can be marked without Ô¨Åring any transitions in t(c). in fact, there exists a sequence b
such that (n;m0)[bi(n;m (c))andbx=hi.bdoes not involve any transitions
intx, becauset(c)transitions are not needed and all other transitions in txare
blocked because pnis the only place in pxthat is marked. when all places in p(c)
are marked, then all other places need to be empty, otherwise (n;m )is not bounded
(see lemma 2.22 in [13]). hence, bleads indeed to m(c).
ifp06=pn, then there is a Ô¨Åring sequence removing the token from p0(because
m(c)is a home marking and p062m(c)). let (n;m0)[1i(n;m 1)be the sequence
enabling a transition that removes the token from p0(for the Ô¨Årst time). in m1, transition
t12p0is enabled (because nis free-choice all transitions in p0are enabled). 1can-
not Ô¨Åre any transitions in tx, becausep0is the only place of pxthat is marked. there-
fore, transitions in [p0]cneed to be enabled Ô¨Årst. let m0
1be the marking after Ô¨Åring t1
((n;m0)[1i(n;m 1)[t1i(n;m0
1)). note thatp1is the only place of pxmarked inm0
1.
let(n;m0)[2i(n;m 2)be the sequence enabling a transition that removes the token
fromp1. transitiont2is enabled in the marking reached after 2:(n;m 2)[t2i(n;m0
2).
again2cannot involve any transitions in txand enables all transitions in p1.m0
2
marks place p2as the only place in px. by recursively applying the argument it is
possible to construct the Ô¨Åring sequence 0=1t12t2:::ntnwhich
markspn. from the resulting marking one can Ô¨Åre bleading to marking m(c). for
the casep0=pnwe explained that such a bexists. this shows that we can construct
=0bsuch that (n;m0)[i(n;m (c))andx=ht1;t2;:::;tni.u t
4.4 partial p-covers
hack‚Äôs coverability theorem (theorem 1) states that well-formed free-choice nets have
a p-cover. our proof that markings are distinguishable based on their enabled transitions
exploits this. in fact, we will construct nets using subsets of p-components. therefore,
we deÔ¨Åne a notion of a q-projection.
deÔ¨Ånition 18 (partial p-cover and projection). let(n;m )be a marked p-coverable
petri net. any qpcomp (n)withq6=;is a partial p-cover of n.nsqis the
q-projection of n.(nsq;msq)is the marked q-projection of (n;m ).
aq-projection inherits properties from the original net (free-choice and well-formed)
and theq-projection is again p-coverable.
lemma 6. letn= (p;t;f )be a p-coverable petri net, qa partial p-cover of
n, andnsq= (pq;tq;fq)theq-projection of n.sq=pq[tq,q
pcomp (nsq)pcomp (n), andnsqhas a p-cover.14 wil van der aalst
proof. letq=fx1;x2;:::xngbe p-components of n,pi=xi\p,ti=xi\t,
for1in.nsq= (pq;tq;fq)such thatpq=s
ipiandtq=s
iti. hence,
by deÔ¨Ånitionsq=pq[tq.
each p-component xiis fully described by pi, because in any p-component, place
pis always connected to the transitions innpandpn. all the original components in
qused to form the partial p-cover of nare also components of nsq, because the
subsets of places are in pqand all surrounding transitions are included and no new tran-
sitions have been added. however, new combinations may be possible (covering subsets
of the places in pq). hence,qpcomp (nsq).pcomp (nsq)pcomp (n)
because a partial p-cover cannot introduce new p-components. nsqhas a p-cover,
becausespcomp (nsq) =pq[tq. u t
lemma 7. letn= (p;t;f )be a well-formed free-choice net and qa partial p-
cover ofn. theq-projection of n(i.e.,nsq) is a well-formed free-choice net.
proof. letnsq=nq= (pq;tq;fq).nqis free-choice because nis free-choice
and for any added place p2pqall surrounding transitions p[pare also added.
hence, for any p1;p22pq:p1=p2orp1\p2=;.
nqis structurally bounded because it is covered by p-components (lemma 6). the
number of tokens in a p-component is constant and serves as an upper bound for the
places in it.
to show that nqis structurally live we use commoner‚Äôs theorem [13]: ‚Äúa free-
choice marked net is live if and only if every proper siphon includes an initially marked
trap‚Äù. places in nandnqhave identical pre and post-sets, hence, for any rpq:
nr=nqrandrn=rnq. hence,rcannot be a siphon in nand not innq
(or vice versa).nrrnif and only ifnqrrnq. also,rcannot be a trap in
nand not innq(of vice versa). rn nrif and only if rnq nqr. take any
proper siphon rinnq. this is also a proper siphon in n.rcontains a proper trap r0
inn. clearly,r0pqand is also a proper trap in nq. by initially marking all places,
r0is also marked and the net is (structurally) live. therefore, nqis well-formed. u t
a partial p-cover of nmay remove places. removing places can only enable more
behavior. transitions are only removed if none of the input and output places are in-
cluded. therefore, any Ô¨Åring sequence in the original net that is projected on the set of
remaining transitions is enabled in the net based on the partial p-cover.
lemma 8. let(n;m )be a live and locally safe marked free-choice net (with n=
(p;t;f )),qa partial p-cover of n, and (nq;mq)the marked q-projection of
(n;m )(withnq= (pq;tq;fq)). for any sequence 2tthat is executable
in(n;m )(i.e.,(n;m )[i(n;m0)), the projected sequence q=tqis also exe-
cutable in the marked q-projection and ends in marking m0sq(i.e.,(nq;mq)[qi
(nq;m0sq)).
proof. let(nq;mq)be the marked q-projection of (n;m ).nqhas fewer places.
removing places can only enable more behavior and never block behavior. therefore, 
is still possible after removing the places not part of any of the included p-components.markings in perpetual free-choice nets 15
after removing these places, transitions not in any included p-component become dis-
connected and can occur without any constraints. hence, can be replayed and re-
sults in the projected marking ( m0sq). removing these transitions from the sequence
(q=tq) corresponds to removing them from the net. therefore, (nq;mq)[qi
(nq;m0sq). u t
by combining the above insights, we can show that the q-projection of a perpetual
marked free-choice net is again a perpetual marked free-choice net.
lemma 9. let(n;m )be a perpetual marked free-choice net and qa partial p-cover
ofn. the marked q-projection of (n;m )(i.e., (nsq;m sq)) is a perpetual
marked free-choice net.
proof. letnsq=nq= (pq;tq;fq)andmq=msq.nqis a well-formed
free-choice net (see lemma 7). to prove that (nq;mq)is perpetual, we need to show
that it is live, bounded, and has a home cluster.
letcbe a home cluster of (n;m ). every p-component of nincludes precisely one
place ofp(c)and holds precisely one token in any reachable state. any p-component
innqis also a p-component in n(lemma 6) and therefore also has one token in any
reachable state. hence, (nq;mq)is locally safe.
every p-component of nqis marked in mand also inmq. (lemma 6 shows that
pcomp (nsq)pcomp (n). this implies that all components of nqare also
components of nand thus initially marked.) hence, we can apply theorem 5.8 in [13]
to show that the net is live.
cq=c\(pq[tq)is a home cluster of (nq;mq)because the transitions in
cq\tqare live and when they are enabled only the places in p(cq)are marked.
hence,m(cq)is a home marking. u t
4.5 characterization of markings in perpetual free-choice nets
we have introduced perpetual free-choice nets because it represents a large and relevant
class of models for which the enabling of transitions uniquely identiÔ¨Åes a marking, i.e.,
these nets are lucent. in such process models, there can never be two different markings
enabling the same set of transitions. note that this result is much more general than the
blocking marking theorem which only refers to blocking markings and a single cluster.
theorem 3 (characterization of markings in perpetual free-choice nets). let
(n;m )be a perpetual marked free-choice net. (n;m )is lucent.2
2the original proof published in ‚Äúwil m. p. van der aalst: markings in perpetual free-choice
nets are fully characterized by their enabled transitions. petri nets 2018: 315-336‚Äù con-
tains an error that can be repaired, but this makes the proof overly complex. one needs to
consider a sequence of disagreeing p-components. here, a simpler, and more direct, proof
is given that does not require some of the intermediate results presented before. the earlier
results are still valid and meaningful. the proof now looks more involved, because it is self-
contained and does not use any intermediate results. interestingly, the proof can be extended
beyond live free-choice nets, but this is out of scope for this corrected proof.16 wil van der aalst
proof. let(n;m )be a perpetual marked free-choice net, i.e., (n;m )is live, bounded,
and has a home cluster c. for anym1;m 22r(n;m )such that en(n;m 1) =
en(n;m 2), we need to prove that m1=m2. we assume that this is not the case,
and show that this leads to a contradiction.
letmc
1andmc
2be such that en(n;mc
1) =en(n;mc
2)andmc
16=mc
2. let us
consider the tokens in both markings and partition these into three classes: -tokens,
1-tokens, and 2-tokens.-tokens are tokens where mc
1andmc
2agree. these can be
found by taking the maximal submarking contained in both. -tokens are also called
‚Äúagreement tokens‚Äù. 1-tokens are the tokens in mc
1, but notmc
2.2-tokens are the
tokens inmc
2, but notmc
1. hence,mc
1is composed of-tokens and 1-tokens, and
mc
2is composed of-tokens and 2-tokens. 1- and 2-tokens are also called ‚Äúdis-
agreement tokens‚Äù. we will use this notation throughout the proof. because (n;m )is
safe, each place can have only one of these -,1-,2-tokens. for example, if a place
contains both a 1-token and 2-token, then it has a -token instead.
starting from both mc
1andmc
2, we synchronously execute transitions using only
-tokens. since we are not using 1or2-tokens, we can do this synchronously. in
this process, each place remains safe (at most one -,1-,2-token). if we try to
move the-tokens closer to the home cluster c, there is a point at which this is no
longer possible (use liveness and the free-choice property, and move towards the home
markingm(c)). hence, we end up in two new markings m1andm2, where all enabled
transitions in m1need to consume both - and 1-tokens, and all enabled transitions
inm2need to consume both - and 2-tokens. in none of the markings, a transition is
enabled based on only ‚Äúagreement tokens‚Äù or only ‚Äúdisagreement tokens‚Äù. compared
tomc
1andmc
2only-tokens were moved.
in the remainder, we only consider the markings m1andm2just constructed. in
both of these markings, only clusters containing ‚Äúagreement tokens‚Äù and ‚Äúdisagreement
tokens‚Äù are enabled, i.e., an enabled cluster has either - and 1-tokens (enabled in
m1), or - and 2-tokens (enabled in m2).
pick an arbitrary cluster enabled in marking m1. we refer to this cluster as c1. all
places in this cluster are marked with - and 1-tokens, but the cluster is not enabled in
m2. however, there must be a Ô¨Åring sequence starting in m2, putting a token in one of
the places in c1. take a shortest Ô¨Åring sequence sstarting inm2and putting a token in
one of the empty places in c1. this sequence must start with an enabled cluster having
only- and 2-tokens. we refer to this cluster as c2. note thatc,c1, andc2should
be different. ( c1andc2have ‚Äúdisagreement tokens‚Äù and cannot be the same. ccannot
be the same as c1, becausecwould be enabled in m1while having still tokens in c2.
etc.)
letpmrkbe a place in c2having a-token. based on s, we can construct a path
sin the petri net starting in c2leading to one of the unmarked places in c1. this path
s‚Äúfollows a token‚Äù from c2toc1using only transitions in s. just ‚Äúcolor‚Äù the token
inpmrkand all it descendants to see that such a path exists (also note that to reach
m(c)the agreement tokens in c1need to be removed). next, we ‚Äúcompact‚Äù path s
into another path 1which visits each cluster only once. this is possible because if s
visits a cluster multiple times, we can create a short-cut and immediately jump to themarkings in perpetual free-choice nets 17
last occurrence of the cluster (in a cluster all places are connected to all transitions due
to the free-choice property).
to explain the mechanism of compacting the path, assume s=hps
0;ts
1;ps
1;:::;
ps
k 1;ts
k;ps
kiwithps
0=pmrkandps
k2c1. we inspect the path from left to right using
a pointeriwith0ik. initially,i= 0. if placeps
iis an element of c1, then we
remove the rest of sbecause we have already reached the target cluster c1. if placeps
i
is not inc1, but there is a later place ps
jbelonging to the same cluster, then we remove
the subsequencehts
i+1;ps
i+1;:::;ts
j;ps
jifromsand setitoj. in this case, we take jto
be maximal, i.e., the latest visit of sto the cluster. (note that ps
iis also an input place
ofts
j+1, because both belong to the same cluster. hence, the path remains connected.)
if placeps
iis the only place of a cluster on the path, then we keep ps
iandts
i+1and seti
toi+ 1(i.e., move to the next place). this process can be repeated until we reach c1.
the resulting path is 1and is a subsequence of s, but still a path of n.
using the above construction, we can construct a path 1=hpmrk;t1;p1;:::;pn 1;
tn;pconnileading from pmrk2c2to some place pconn2c1such that the path con-
tains a subset of the transitions in sand does not visit the same cluster twice, i.e., each
place inp1=fpmrk;p1;:::;pn 1;pconngcorresponds to a unique cluster.
there is also a path from pconnto the home cluster cbecause the net is strongly
connected. intuitively, we can also ‚Äúfollow a token‚Äù from c1toc. also this path can
be compacted into another path 2which starts pconnand ends in some place pend2c
and visits each cluster only once. we use the same principle as before: if a cluster
is visited multiple times along the path, we jump immediately to the last occurrence
(using the fact that in a cluster all places are connected to all transitions). therefore,
we can construct a path 2=hpconn;tn+1;pn+1;:::;pm 1;tm;pendileading from
pconn2c1to some place pend2cvisiting each cluster at most once, i.e., each place
inp2=fpconn;pn+1;:::;pm 1;pendgcorresponds to a unique cluster.
next to1=hpmrk;t1;p1;:::;pn 1;tn;pconniand2=hpconn;tn+1;pn+1;:::
;pm 1;tm;pendi, we create two more paths: 1+2=hpmrk;t1;p1;:::;pn 1;tn;pconn;
tn+1;pn+1;:::;pm 1;tm;pendiand20=hpalt;tn+1;pn+1;:::;pm 1;tm;pendiwith
palt2c1having a-token (i.e., marked in both m1andm2). also in the paths 1+2
and20, each cluster appears at most once. for 20this is obvious, because paltand
pconnare in the same cluster and for the rest 20and2are identical.
to see that also in 1+2each cluster appears at most once, assume there is a cluster
c0that appears at least twice in 1+2. this implies there is a place p0
12p1\c0and
a placep0
22p2\c0. if one of these places is pconn, then this is impossible, because
clusterc0did not appear twice in the shorter sequences 1and2. moreover, also when
both are different from pconn, this is still not possible. consider a transition t02s
that consumed a token from p0
1while executing s. due to the free-choice property,
transitiont0also consumed a token from p0
2. transition t0occurred before the cluster
c1got enabled, i.e., there was still a -token inpalt. however, this implies that there
is a marking m0in which the places p0
1,p0
2, andpaltare marked at the same time.
now consider path 20=hpalt;tn+1;pn+1;:::;pm 1;tm;pendiin the marking m0
just described. at least two places on this path contain a token ( p0
2andpalt). starting
from this marking m0, move these two tokens along the path 20towards place pend.
because the net is free-choice, we can control the clusters visited on this path and each18 wil van der aalst
t1p1
t2
p2p3
t3
p4p5
t4
p6
fig. 9. a live and locally safe marked free-choice net that is not perpetual. the model is also not
lucent since there are two reachable markings m1= [p1;p3;p6]andm2= [p1;p4;p6]that
both enablet1andt4.
transition in one of these clusters consumes precisely one token from path 20, and
produces at least one token for path 20. hence, the number of tokens on the path does
not decrease. since the net has a home cluster containing pend, we can continue to do
this until there are multiple tokens in pendor until one of the transitions in cÔ¨Åres. if a
transition on the path is enabled, we Ô¨Åre it. if no transition on the path is enabled and
we did not reach the home marking m(c)yet, we can execute transitions towards the
home marking m(c). by following this process, we can put two tokens in pendor Ô¨Åre
a transition from cluster cwhile there are still tokens in the rest of the net. this leads to
a contradiction (the net is safe and cannot have two tokens in a place or reach markings
strictly larger than m(c)). therefore, also 1+2has the property that each cluster is
visited at most once (like 1,2, and20).
now consider the status of path 1+2=hpmrk;t1;p1;:::;pn 1;tn;pconn;tn+1;
pn+1;:::;pm 1;tm;pendi(which visits clusters at most once) in marking m1. in this
marking,pmrkandpconnare marked. pmrkhas a-token andpconna1-token.
hence, at least two places on path 1+2contain a token and all places on the path
belong to different clusters. therefore, we can use again the strategy to move tokens
along the path towards place pend. each transition in 1+2consumes precisely one to-
ken from the path and produces at least one token for the path. as long as none of the
transitions in coccurs, we can ensure that the number of tokens on the path does not
decrease and move tokens towards pend. this leads to a contradiction the moment there
are two tokens in pendor the transitions in care enabled while having additional tokens
(the net is safe). since 1+2cannot exist, also m1andm2cannot exist.
m1andm2were constructed using mc
1andmc
2. hence, there cannot be mc
1and
mc
2be such that en(n;mc
1) =en(n;mc
2)andmc
16=mc
2. hence, the initial assump-
tion leads to a contradiction, showing that the net must be lucent. u t
for the class of perpetual marked free-choice nets, markings are uniquely identiÔ¨Åed
by the set of enabled transitions. as shown before, the free-choice property is needed
and liveness and boundedness are not sufÔ¨Åcient. the above theorem also does not hold
for live and locally safe marked free-choice nets (see for example figure 8). the re-
quirement that the net has a home cluster seems essential for characterizing marking in
terms of enabled transitions.markings in perpetual free-choice nets 19
table 1. overview of the examples used: marked pn = Ô¨Ågure showing a marked petri net, frec
= free-choice, live = live, boun = bounded, safe = safe, locs = locally safe, pc= number of p-
components, hclu = net has at least one home cluster, perp = perpetual, unbm = net has unique
blocking marking for each cluster, lucent = lucent, pls= number of places, trs= number of
transitions, and rm= number of reachable markings.
marked pn frec live boun safe locs pchclu perp unbm lucent plstrsrm
figure 1 yes yes yes yes yes 2yes yes yes yes 444
figure 2 no yes yes yes yes 2yes yes no no 666
figure 3 yes yes yes yes yes 4yes yes yes yes 879
figure 5 yes yes yes yes yes 6yes yes yes yes 111011
figure 6 yes yes yes yes no 5no no yes yes 968
figure 7 no yes yes yes yes 2no no no no 546
figure 8 yes yes yes yes yes 3no no yes no 8812
figure 9 yes yes yes yes yes 3no no yes no 648
consider for example the live and locally safe marked free-choice net in figure 9.
there are three p-components: fp1;p2;t1;t2g,fp3;p4;t2;t3g, andfp5;p6;t3;t4g.
these always contain precisely one token. however, there are two reachable markings
m1= [p1;p3;p6]andm2= [p1;p4;p6]that both enable t1andt4. this can be
explained by the fact that the net is not perpetual. there are four clusters, but none of
these clusters is a home cluster. note that the counter-example in figure 9 is actually
a marked graph. this illustrates that the home cluster requirement is also essential for
subclasses of free-choice nets.
5 conclusion and implications
we started this paper by posing the question: ‚Äúwhat is the class of petri nets for which
the marking is uniquely identiÔ¨Åed by the set of enabled transitions?‚Äù. this led to the
deÔ¨Ånition of lucency . the main theorem proves that markings from perpetual marked
free-choice nets are guaranteed to be lucent. moreover, we showed that all requirements
are needed (in the sense that dropping any of the requirements yields a counterexample).
table 1 provides an overview of the examples used in this paper. for example, even live
and safe free-choice nets may have multiple markings having the same set of enabled
transitions.
other characterizations may be possible. an obvious candidate is the class of petri
nets without pt and tp handles [16]. as shown in [2] there are many similarities be-
tween free-choice workÔ¨Çow nets and well-structured (no pt and tp handles) work-
Ô¨Çow nets when considering notions like soundness and p-coverability. moreover, it
seems possible to relax the notion of a regeneration point by considering simultane-
ously marked clusters.
structure theory aims to link structural properties of the petri net to its behavior. the
connection between lucency and home clusters in free-choice nets could be relevant for
veriÔ¨Åcation and synthesis problems. the ability to link the enabling of transitions to
states (i.e., lucency) is particularly relevant when observing running systems or pro-
cesses, e.g., in the Ô¨Åeld of process mining [4] where people study the relationship be-20 wil van der aalst
tween modeled behavior and observed behavior. if we assume lucency, two interesting
scenarios can be considered:
‚Äìscenario 1: the system‚Äôs interface or the event log reveals the set of enabled ac-
tions. at any point in time or for any event in the log, we know the internal state
of the system or process. this makes it trivial to create an accurate process model
(provided that all states have been visited).
‚Äìscenario 2: the system‚Äôs interface or the event log only reveals the executed ac-
tions. the internal state of the system is unknown, but we know that it is fully
determined by the set of enabled actions (some of which may have been observed).
it is easy to create a discovery algorithm for the Ô¨Årst scenario. the second scenario is
more challenging. however, the search space can be reduced considerably by assuming
lucency (e.g., learning perpetual marked free-choice nets). hence, theorem 3 may lead
to new process mining algorithms or help to prove the correctness and/or guarantees of
existing algorithms.
assume that each event in the event log is characterized by e= (pref;a; post)
whereprefis the preÔ¨Åx (activities that happened before e),ais the activity executed,
andpostis the postÔ¨Åx (activities that happened after e). the result of applying a process
discovery algorithm can be seen as a function state()which maps any event eonto a
state state(e), i.e., the state in which eoccurred (see [5, 7] for explanations). hence,
eventse1ande2satisfying state(e1) =state(e2)occurred in the same state and can
be viewed as ‚Äúequivalent‚Äù. this way discovery is reduced to Ô¨Ånding an equivalence
relation on the set of events in the log. given such an equivalence relation, we can
apply the approach described under scenario 1. viewing process discovery as ‚ÄúÔ¨Ånding
an equivalence relation on events‚Äù provides an original angle on this challenging and
highly relevant learning task.
references
1. w.m.p. van der aalst. the application of petri nets to workÔ¨Çow management. the journal
of circuits, systems and computers , 8(1):21‚Äì66, 1998.
2. w.m.p. van der aalst. workÔ¨Çow veriÔ¨Åcation: finding control-flow errors using petri-net-
based techniques. in w.m.p. van der aalst, j. desel, and a. oberweis, editors, business
process management: models, techniques, and empirical studies , volume 1806 of lecture
notes in computer science , pages 161‚Äì183. springer-verlag, berlin, 2000.
3. w.m.p. van der aalst. mediating between modeled and observed behavior: the quest for
the ‚Äúright‚Äù process. in ieee international conference on research challenges in informa-
tion science (rcis 2013) , pages 31‚Äì43. ieee computing society, 2013.
4. w.m.p. van der aalst. process mining: data science in action . springer-verlag, berlin,
2016.
5. w.m.p. van der aalst, a. adriansyah, and b. van dongen. replaying history on process
models for conformance checking and performance analysis. wires data mining and
knowledge discovery , 2(2):182‚Äì192, 2012.
6. w.m.p. van der aalst, k.m. van hee, a.h.m. ter hofstede, n. sidorova, h.m.w. verbeek,
m. v oorhoeve, and m.t. wynn. soundness of workÔ¨Çow nets: classiÔ¨Åcation, decidability,
and analysis. formal aspects of computing , 23(3):333‚Äì363, 2011.markings in perpetual free-choice nets 21
7. w.m.p. van der aalst, v . rubin, h.m.w. verbeek, b.f. van dongen, e. kindler, and c.w.
g¬®unther. process mining: a two-step approach to balance between underÔ¨Åtting and over-
Ô¨Åtting. software and systems modeling , 9(1):87‚Äì111, 2010.
8. w.m.p. van der aalst and c. stahl. modeling business processes: a petri net oriented
approach . mit press, cambridge, ma, 2011.
9. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workÔ¨Çow mining: discovering
process models from event logs. ieee transactions on knowledge and data engineering ,
16(9):1128‚Äì1142, 2004.
10. e. best. structure theory of petri nets: the free choice hiatus. in w. brauer, w. reisig,
and g. rozenberg, editors, advances in petri nets 1986 part i: petri nets, central models
and their properties , volume 254 of lecture notes in computer science , pages 168‚Äì206.
springer-verlag, berlin, 1987.
11. e. best, j. desel, and j. esparza. traps characterize home states in free-choice systems.
theoretical computer science , 101:161‚Äì176, 1992.
12. e. best and h. wimmel. structure theory of petri nets. in k. jensen, w.m.p. van der aalst,
g. balbo, m. koutny, and k. wolf, editors, transactions on petri nets and other models
of concurrency (topnoc vii) , volume 7480 of lecture notes in computer science , pages
162‚Äì224. springer-verlag, berlin, 2013.
13. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts in theoret-
ical computer science . cambridge university press, cambridge, uk, 1995.
14. m. dumas, m. la rosa, j. mendling, and h. reijers. fundamentals of business process
management . springer-verlag, berlin, 2013.
15. j. esparza. reachability in live and safe free-choice petri nets is np-complete. theoreti-
cal computer science , 198(1-2):211‚Äì224, 1998.
16. j. esparza and m. silva. circuits, handles, bridges and nets. in g. rozenberg, editor,
advances in petri nets 1990 , volume 483 of lecture notes in computer science , pages 210‚Äì
242. springer-verlag, berlin, 1990.
17. b. gaujala, s. haar, and j. mairesse. blocking a transition in a free choice net and what it
tells about its throughput. journal of computer and system science , 66(3):515‚Äì548, 2003.
18. h. j. genrich and p. s. thiagarajan. a theory of bipolar synchronization schemes. theo-
retical computer science , 30(3):241‚Äì318, 1984.
19. b. kiepuszewski, a.h.m. ter hofstede, and w.m.p. van der aalst. fundamentals of control
flow in workÔ¨Çows. acta informatica , 39(3):143‚Äì209, 2003.
20. t. murata. petri nets: properties, analysis and applications. proceedings of the ieee ,
77(4):541‚Äì580, april 1989.
21. w. reisig. petri nets: modeling techniques, analysis, methods, case studies . springer-
verlag, berlin, 2013.
22. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models , volume 1491
oflecture notes in computer science . springer-verlag, berlin, 1998.
23. w. reisig and g. rozenberg, editors. lectures on petri nets ii: applications , volume 1492
oflecture notes in computer science . springer-verlag, berlin, 1998.
24. n. russell, w.m.p. van der aalst, and a. ter hofstede. workÔ¨Çow patterns: the deÔ¨Ånitive
guide . mit press, cambridge, ma, 2016.
25. p.s. thiagarajan and k. v oss. a fresh look at free choice nets. information and control ,
61(2):85‚Äì113, 1984.
26. j. wehler. simpliÔ¨Åed proof of the blocking theorem for free-choice petri nets. journal of
computer and system science , 76(7):532‚Äì537, 2010.