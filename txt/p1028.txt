the performance spectrum miner: visual analytics for
fine-grained performance analysis of processes
vadim denisov1, elena belkina, dirk fahland1, and wil m.p. van der aalst1;2
1eindhoven university of technology, the netherlands,
2department of computer science, rwth aachen, germany,
v.denisov@tue.nl ,e.belkina@hotmail.com ,d.fahland@tue.nl ,
wvdaalst@pads.rwth-aachen.de
abstract. we present the performance spectrum miner, a prom plugin, which
implements a new technique for Ô¨Åne-grained performance analysis of processes.
the technique uses the performance spectrum as a simple model, that maps all
observed Ô¨Çows between two process steps together regarding their performance
over time, and can be applied for event logs of any kinds of processes. the tool
computes and visualizes performance spectra of processes, and provides rich
functionality to explore various performance aspects. the demo is aimed to make
process mining practitioners familiar with the technique and tool, and engage them
into applying this tool for solving their daily process mining-related tasks.
keywords: process mining, performance analysis, performance spectrum
1 introduction
process mining brings together traditional model-based process analysis and data-centric
analysis techniques by using event data to obtain process-related information [ 2] for
various goals, for example, answering performance-oriented questions [ 1]. performance
analysis is an important element in process management relying on precise knowledge
about actual process behavior and performance to enable improvements [ 4]. within
process mining, performance analysis is one of the main types of model-based analysis
of business processes, it is typically focused on performance indicators of the time
dimension, such as the lead-, service- and waiting time and, as the name implies, is
based on a process model. many commercial and free process mining tools allow to
do such analysis3. despite all the beneÔ¨Åts, model-based performance analysis has two
signiÔ¨Åcant drawbacks: 1) the commonly used model notations are not designed to project
the time dimension on the model, i.e. changes over time cannot be represented in a
comprehensible way and 2) process performance is always distorted by projection to a
model, because no ideal models exist. the latter can be unacceptable for performance
problems investigations, where inaccuracy in the obtained performance information may
lead to wrong conclusions. performance analysis based on models is limited, dotted
chart [5] shows seasonal patterns and arrival rates, but no details on performance
of process steps. recently introduced performance spectrum [3] maps all observed
3for example, the prom framework and fluxicon disco allow such analysis.
f. casati et al. (eds.): proceedings of the dissertation award and demonstration, industrial track at bpm 2018,
ceur-ws.org, 2018. copyright c2018 for this paper by its authors. copying permitted for private and academic purposes.
this volume is published and copyrighted by its editors.
vadim denisov, elena belkina, dirk fahland, wil m.p. van der aalst
(1)
(2)z1
time axisz2
z3
z4
z5
z6
fig. 1. the main window of the psm with the main panel (1) and control panel (2).
Ô¨Çows between two process steps together regarding their performance over time. our
tool generates performance spectra of processes, assigns a class to each observed Ô¨Çow
between two process steps ( segments ), according to a chosen performance classiÔ¨Åer ,
samples the obtained data into bins,aggregates the data in bins and visualizes all the data
over time . a user can explore a process performance spectrum by showing and hiding
itsdetailed (i.e. non-aggregated) and aggregated parts, by scrolling and zooming, by
Ô¨Åltering, aggregating and sorting segments, searching and highlighting required pieces of
performance spectrum elements and so on, thereby enabling process mining practitioners
with a new approach for performance analysis. the rest of this work is organized as
follows. in sect. 2, we explain a concept of the performance spectrum by example, in
sect. 3 we review the tool architecture, followed by extracts from our tool evaluation in
sect. 4, including scalability aspects of the psm.
2 tool
the tool has been developed as an interactive prom plugin the performance spectrum
miner (psm ) in package ‚Äúperformance spectrum‚Äù4with an option to run as a stand-alone
desktop application. in the remainder, we focus on key functionality of the psm5.
the main windows of the psm is shown in fig. 1. it consists of two parts: the
scrollable main panel (1) and the control panel (2). during an analysis session in the
psm, a user Ô¨Årst imports and pre-processes an event log, providing pre-processing
4source code available at https://github.com/processmining-in-logistics/psm
5watch a brief introduction to the psm here: https://www.dropbox.com/sh/
yz214lpasw5ovu8/aaborhjyqddbpcrs_-kyfaa1a?dl=0the performance spectrum miner: visual analytics for fine-grained performance
analysis of processes
z2
z3a
b
ca
b
c
tw1 tw2 tw3(1)
ta tb tc(2)create fine:send fine /6764
send fine:
insert fine notification /4275create fine:send fine /6764
send fine :
insert fine notification /4275z2
z3a) b)
fig. 2. examples of a detailed (a) and aggregated (b) performance spectrum.
parameters, which are explained further in this section, then analyzes an obtained
performance spectrum in the main panel. a performance spectrum consists of segments,
that represent observed Ô¨Çows between two process steps over the time axis. it can be
detailed, aggregated or combined. a detailed performance spectrum shows information
about individual traces. for instance, in fig. 2 a) segment z2represents a step between
activities create fine andsend fine , and has name create fine:send fine . each spectrum
line within the segment, e.g. highlighted line ab, represents occurrences of create
fine that are followed by send fine . occurrences of activities in points aandbhave
timestamps taandtbcorrespondingly. similarly, within z3, line bcrepresents a case
that has activity send fine , which is directly followed by activity insert fine notiÔ¨Åcation ,
which has timestamp tc. angles of lines indicate duration of steps: vertical lines show
instant execution, while sloping lines indicate slower execution. the colors of lines show
performance classes, assigned by a selected classiÔ¨Åer. available classiÔ¨Åers and the legend
for the colors are shown in fig. 4. while a detailed performance spectrum provides insight
about individual cases, it does not directly visualize any quantiÔ¨Åed information. therefore
an aggregated performance spectrum serves for that purpose: within it, segments are
split vertically into time windows, or bins, of a given duration, as shown in fig. 2 b).
aggregation 
functionexampleresult 
for bins
cases pending (1, 1, 1, 1)
cases start ed (1, 0, 0, 0)
cases stopped (0, 0, 0, 1)
fig. 3. aggregation functions .each bin contains a histogram that shows aggre-
gated information about lines of the detailed per-
formance spectrum that start, stop or intersect this
bin. besides the histograms, exact numbers are also
available for users. supported aggregation functions
are presented in fig. 3. in fig. 2 b) bars in bins
show aggregation by cases pending function. for
instance, line abis counted within corresponding
dark blue bars (i.e. for class 0-25% ) in time win-
dows tw1-tw3 ofz2. additionally, parameter maximal observed throughput is shown
within each segment (see fig. 2 b) (2)). it shows the maximal observed value of the
aggregation function within bins of the segment. the size of time windows, performance
classiÔ¨Åer and aggregation function are conÔ¨Ågured before pre-processing of an event log.
classifier blue light -blue yellow orange
quartile -based 0-25% 26-50% 51-75% 76-100%
median -based < 1.5*median <2*median < 3*median >= 3*median
fig. 4. available in the psm performance classiÔ¨Åers and their color codes.vadim denisov, elena belkina, dirk fahland, wil m.p. van der aalst
xes event log
pre-processingperformance 
spectrum
configuration
file i/o
caching
aggregation
filtering
model
controller
viewengine viewer
fig. 5. the decoupled architecture of the psm: the engine and viewer interacting via Ô¨Åles on disk.
3 architecture
the psm architecture consists of two decoupled parts, as shown in fig. 5: the pre-
processing engine and the viewer . the engine processes an event log, represented in
memory as an openxes xlog object, computes a process performance spectrum, using
user-deÔ¨Åned parameters, and export it to disk. an exported performance spectrum
consist of two sets of Ô¨Åles: one set contains bins with the aggregated performance
information, and another one contains classiÔ¨Åed traces of the initial event log, which
are stored on disk in a way e cient for load-on-demand . the aggregation function and
performance classiÔ¨Åer are selected by a user before the pre-processing step. the viewer
has a traditional model-view-controller architecture, where the model serves as a data-
source that hides many implementation details, such as a data storage type, Ô¨Åle formats, a
caching strategy, segments aggregation, Ô¨Åltering and sorting. the controller implements
the business logic of the viewer, using high-level apis of the model and view. export of
a computed performance spectrum to disk allows to avoid repetitions of the event log pre-
processing phase for every session of analysis and decouples the engine and viewer. the
engine, model and controller are implemented in the scala programming language and
based on the scala collections , which allow extremely compact readable code and enable
utilization of multi-core hardware architectures out of the box. the chosen architecture
allows to replace easily an implementation of the engine, model or gui without touching
other components, for example, for switching to a high-performance storage or another
pre-processing algorithm that takes some domain-speciÔ¨Åc event attributes into account.
4 interactive exploration of performance spectra
here we focus on interactive features, evaluation and scalability aspects of the psm. a
user has a rich toolset to explore a performance spectrum: 1) regular expression based
Ô¨Åltering of segments by names, 2) Ô¨Åltering by throughput boundaries, 3) searching for
traces in a performance spectrum by specifying their ids, 4) providing various segment
sorting orders. additionally, a user can Ô¨Ålter in particular performance classes, for
instance, compare the spectrum in fig. 6 a), where only segments of classes 51-75% and
76-100% are shown, with the original spectrum in fig. 2 a). another feature of the psm
allows to highlight all segments of cases that in the performance spectrum have lines
that start in particular bins . for instance, in fig. 6 b) by selecting bin tw3we highlight
traces inside triangles abc ,cde : they form a clearly distinguishable ‚Äúhourglass‚Äù pattern
within z2-z3 , which shows that the traces are synchronized by activity send fine in point
c. interestingly, in fig. 1 we observe more ‚Äúhourglass‚Äù patterns within z2-z3 , together
with other patterns, for example, strictly parallel lines of z4or spreading lines of z6. bythe performance spectrum miner: visual analytics for fine-grained performance
analysis of processes
a) b)ab
c
d
ecreate fine:
send fine /6764
send fine:insert fine notification /4275create fine:
send fine /6764
send fine:insert fine notification /4275z2
z3z2
z3
tw3
fig. 6. the psm features: Ô¨Åltering by performance classes (a) (see the original spectrum in
fig. 2 a)), and highlighting traces that have segments starting within selected bin tw3(b).
default the psm sorts segments alphabetically, and to work with multi-segment patterns
a user should sort them manually. automatic sorting of segments is the subject of future
work. aforementioned features of the psm allow to conduct extensive performance
analysis of processes, including their performance patterns [3].
we applied our tool on 12 real-life event logs from business processes (bpi12, bpi14,
bpi15(1-5), bpi17, bpi18, hospital billing, rf) and on one real-life log from a baggage
handling system (bhs) provided by vanderlande. we illustrated how the performance
spectrum provides detailed insights into performance for rf; for bhs we report on
a case study for identifying performance problems; and we summarize performance
characteristics of the 11 business process logs. our analysis revealed a large variety of
distinct patterns of process performance, which we organized into a taxonomy. we refer
to [3] for discussion of the results.
scalability of the psm is dierent for its components. applicability of the engine
is limited by amount of ram available for representation of an event log together with
its performance spectrum. the required amount of ram is proportional to an initial
event log size and a chosen number of bins. on average a log with 1.000.000 events can
be easily processed on a laptop with 16gb of ram. the viewer in the load-on-demand
mode requires as little as amount of memory required for representation of one bin of
each segment and allows to work with huge event logs ( >10.000.000 events) on laptops
with 16gb of ram. a faster all-in-memory mode requires roughly the same amount
of memory as the engine. the engine‚Äôs limitations can be eliminated by switching
to a big-data platform, e.g. the apache spark , and the viewer‚Äôs performance in the
load-on-demand mode can be increased by moving to a high-performance data storage.
references
1. process mining in practice. http://processminingbook.com/ , accessed: 2018-06-04
2.van der aalst, w.m.p.: process mining - data science in action, second edition. springer
(2016)
3.denisov, v ., fahland, d., van der aalst, w.m.p.: unbiased, Ô¨Åne-grained description of processes
performance from event data. in: bpm 2018. lncs, springer (2018)
4.maruster, l., van beest, n.r.t.p.: redesigning business processes: a methodology based on
simulation and process mining techniques. knowl. inf. syst. 21(3), 267‚Äì297 (2009)
5.song, m., van der aalst, w.m.: supporting process mining by showing events at a glance. in:
proceedings of the 17th annual workshop on information technologies and systems (wits).
pp. 139‚Äì145 (2007)