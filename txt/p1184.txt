free-choice nets with home clusters are lucent*
wil m.p. van der aalst
process and data science (pads)
rwth aachen university, germany
wvdaalst@pads.rwth-aachen.de
abstract. a marked petri net is lucent if there are no two different reachable markings enabling
the same set of transitions, i.e., states are fully characterized by the transitions they enable. char-
acterizing the class of systems that are lucent is a foundational and also challenging question.
however, little research has been done on the topic. in this paper, it is shown that all free-choice
nets having a home cluster are lucent. these nets have a so-called home marking such that it is
always possible to reach this marking again. such a home marking can serve as a regeneration
point or as an end-point. the result is highly relevant because in many applications, we want
the system to be lucent and many “well-behaved” process models fall into the class identiﬁed in
this paper. unlike previous work, we do not require the marked petri net to be live and strongly-
connected. most of the analysis techniques for free-choice nets are tailored towards well-formed
nets. the approach presented in this paper provides a novel perspective enabling new analysis
techniques for free-choice nets that do not need to be well-formed. therefore, we can also model
systems and processes that are terminating and/or have an initialization phase.
keywords: petri nets, free-choice nets, lucent process models
1. introduction
petri nets can be used to model systems and processes. many properties have been deﬁned for petri
nets that describe desirable characteristics of the modeled system or process [1, 2, 3]. examples
include deadlock-freeness (the system is always able to perform an action), liveness (actions cannot
get disabled permanently), boundedness (the number is states is ﬁnite), safeness (objects cannot be
at the same location at the same time), soundness (a case can always terminate properly) [4], etc. in
this paper, we investigate another foundational property: lucency . a system is lucent if it does not
have different reachable states that enable the same actions, i.e., the set of enabled actions uniquely
characterizes the state of the system [5]. think of an information system that has a user interface
showing what the user can do. in this example, lucency implies that the offered actions fully determine
the internal state and the system will behave consistently from the user’s viewpoint. if the information
system would not be lucent, the user could encounter situations where the set of offered actions is the
*this paper was submitted to fundamenta informaticae on 9-8-2020 and accepted on 2-6-2021.2 w.m.p . van der aalst /free-choice nets with home clusters are lucent
same, but the behavior is very different. another example is the worklist of a workﬂow management
system that shows the workitems that can or should be executed. lucency implies that the state of a
case can be derived based on the workitems offered for it.
in a petri net setting, lucency can be deﬁned as follows. a marked petri net is lucent if there
are no two different reachable markings enabling the same set of transitions, i.e., markings are fully
characterized by the transitions they enable.
p1
t2t1
t3t4
t5p2 p3 p4
figure 1. (n1;m 1)is a free-choice net that is lucent, has a home cluster, but is not perpetual.
figure 1 shows a marked petri net that is lucent. each of the four reachable markings has a
different set of enabled transitions. figure 2 shows a marked petri net that is not lucent. initially, one
of the transitions t1ort2can occur, leading to two different states (the markings [p2;p5]and[p2;p6])
that cannot be distinguished. only transition t3is enabled, but the internal state matters. t1is always
followed by t4andt2is always followed by t5.
p1
t2t1
t3t4
t5p2 p3 p4
p6p5
figure 2. (n2;m 2)is a non-free-choice net that is not lucent because the markings [p2;p5]and[p2;p6]enable
the same set of transitions (just t3), thereby hiding the internal state.
although we focus on petri nets, lucency is a general notion that is independent of the modeling
language used. even though lucency is an easy to deﬁne and foundational property, it was not inves-
tigated until recently [5, 6]. as described in [6], lucent process models are easier to discover from
event data. when the underlying process has states that are different, but that enable the same set of
activities, then it is obviously not easy to learn these “hidden” states. commercial process mining
systems mostly use the so-called directly-follows graph (dfg) as a process model. here the “state”
is considered to be the last activity executed. dfgs have problems dealing with concurrent processes
and tend to produce imprecise and “spaghetti-like” models because of that. more advanced processw.m.p . van der aalst /free-choice nets with home clusters are lucent 3
discovery techniques are able to discover concurrent process models [7], but need to “guess” the state
of the process after each event. when using, for example, region theory, the state is often assumed
to be the preﬁx of activities (or the multiset of activities already executed), leading to overﬁtting and
incompleteness problems (one needs to see all possible preﬁxes). for lucent process models, this
problem is slightly easier because the state is fully determined by the set of enabled activities. see [6]
for more details about the discovery of lucent process models using translucent event logs.
given the examples in figures 1 and 2, there seems a natural connection between the well-known
free-choice property [8] and lucency. in a free-choice net, choice and synchronization can be sep-
arated. however, as illustrated by figure 3, it is not enough to require that the net is free-choice.
(n3;m 3)shown in figure 3 is free-choice. it is actually a marked graph since there are no choices
(i.e., places with multiple output arcs). the model in figure 3 satisﬁes most of the (often considered
desirable) properties deﬁned for petri nets. (n3;m 3)is deadlock-free, live, bounded, safe, well-
formed, free-choice, all markings are home markings, etc. however, surprisingly (n3;m 3)is not
lucent because the two reachable markings [p1;p3;p6]and[p1;p4;p6]enable the same set of transi-
tions (t1andt4). this example shows that lucency does not coincide with any (or a combination) of
the properties normally considered.
t1p1
t2
p2p3
t3
p4p5
t4
p6
figure 3. (n3;m 3)is a marked graph that is not lucent because the markings [p1;p3;p6]and[p1;p4;p6]
enable the same set of transitions ( t1andt4), thereby hiding the internal state.
the notion of lucency was ﬁrst introduced in [5]. the paper uses the example shown in figure 3
to demonstrate that even nets that are free-choice, live, and safe may not be lucent. therefore, an
additional requirement was added. in [5], the class of perpetual nets is introduced in an attempt to
relate well-known petri net properties to lucency. perpetual free-choice nets are free-choice petri nets
that are live and bounded and have a home cluster, i.e., there is a cluster such that from any reachable
state, there is a reachable state marking the places of this cluster. such a home cluster in a perpetual
net serves as a “regeneration point” of the process, e.g., to start a new process instance (case, job,
cycle, etc.). any perpetual marked free-choice net is lucent. however, there are many lucent systems
that are not perpetual because they are terminating or have an initialization phase (and are therefore
not live).
this paper extends the work presented in [5] which focused exclusively on perpetual marked
free-choice nets. for example, (n1;m 1)in figure 1 is not perpetual. actually, most of the work
done on free-choice nets is limited to well-formed nets, i.e., nets that have a marking that is live and4 w.m.p . van der aalst /free-choice nets with home clusters are lucent
bounded. this is a structural property allowing for many interesting and advanced forms of analysis
and reasoning [9, 2, 8]. such nets are automatically strongly-connected and do not have source and
sink places to model the start and the end of the process.
however, in many applications, such nets are not suitable. for example, it is impossible to model
systems and processes that can terminate. in some cases, one can apply a trick and “short-circuit” the
actual net to make it well-formed (see, for example, the analysis of soundness for workﬂow nets [10]).
however, this distracts from the essence of the property being analyzed. this paper proves this point
by showing that liveness is irrelevant for ensuring lucency. for example, the petri net in figure 1 is
lucent, but not well-formed.
in this paper, we show that all free-choice nets having a home cluster are lucent . this signiﬁcantly
extends the class perpetual marked free-choice nets and also includes non-well-formed nets such as
(n1;m 1)in figure 1.
to do this, we provide a direct proof that is notbuilding on the traditional stack of results for well-
formed free-choice nets. in [5], we need to use the coverability theorem and the blocking marking
theorem. moreover, the proof in [5] turned out to be incomplete and the repaired proof is even more
involved. the approach used to prove the correctness of the main result provides a novel perspective
enabling new analysis techniques for free-choice nets that do not need to be well-formed. novel
concepts like “expediting transitions”, “rooted disentangled paths”, and “conﬂict-pairs” can be used
to prove many other properties free-choice nets having a home cluster. this paper also relates the
novel concepts and techniques presented in this paper to results based on short-circuiting nets that
are non-live and not strongly-connected (section 6). this relation is used to show that we can check
whether there is a home cluster in polynomial time for free-choice nets (whether they are live and
strongly-connected or not).
the remainder is organized as follows. section 2 brieﬂy discusses related work. section 3 in-
troduces petri nets and some of the basic notations. lucent petri nets are deﬁned in section 4. in
section 5 we show that free-choice nets having a home cluster are indeed lucent. to do this, we intro-
duce new notions such as (rooted) disentangled paths and conﬂict-pairs. section 6 relates the work to
perpetual marked free-choice nets and our earlier paper [5]. section 7 concludes the paper.
2. related work
this paper extends the work presented in [5]. there are no other papers on the analysis of lucency
(which is surprising). hence, we can only point to more indirectly related work.
for more information about petri nets, we refer to [11, 3, 12, 1, 13]. within the ﬁeld of petri nets
“structure theory” plays an important role [9, 2, 8]. free-choice nets are well studied [14, 2, 15, 16].
the deﬁnite book on the structure theory of free-choice nets is [8]. also, see [2] for pointers to
literature. therefore, it is surprising that the question of whether markings are uniquely identiﬁed by
the set of enabled transitions (i.e., lucency) has not been explored in literature. lucency is unrelated to
the so-called “frozen tokens” [17]. a petri net has a frozen token if there exists an inﬁnite occurrence
sequence never using the token. it is possible to construct live and bounded free-choice nets that are
lucent while having frozen tokens. conversely, there are live and bounded free-choice nets that do not
have frozen tokens and are not lucent.w.m.p . van der aalst /free-choice nets with home clusters are lucent 5
the results presented in this paper are also related to the blocking theorem [18, 19]. blocking
markings are reachable markings that enable transitions from only a single cluster. removing the
cluster yields a dead marking. the blocking theorem states that in a bounded and live free-choice net
each cluster has a unique blocking marking. lucency is broader than blocking markings since multiple
clusters and concurrent transitions are considered. actually, lucency can be seen as a generalization
of unique blocking markings. moreover, [18, 19] only consider live petri nets.
in [20], we propose a framework based on sequences of t-induced t-nets and p-induced p-nets to
convert free-choice nets into t-nets and p-nets while preserving properties such as well-formedness,
liveness, lucency, pc-safety, and perpetuality. the framework allows for systematic proofs that “peel
off” non-trivial parts while retaining the essence of the problem (e.g., lifting properties from t-nets
and p-nets to free-choice nets).
a major difference between the work reported in this paper and the extensive body of knowledge
just mentioned is that we do notrequire the petri net to be well-formed. liveness assumes that the
system is cyclic and actions are always still possible in the future. this does not align well with
the standard “case notion” used in business process management (bpm), workﬂow management
(wfm), and process mining (pm) [10, 7, 4]. process instances have a clear start and end. for
example, process discovery algorithms from the ﬁeld of pm all generate process models close to the
workﬂow nets. the languages used for bpm and wfm, e.g., bpmn and uml activity diagrams,
are very different from well-formed petri nets and closer to workﬂow nets. the work presented in this
paper supports both views. the process models may be well-formed or not. therefore, we signiﬁcantly
generalize over the work presented in [5] and also present results that could be used for other questions.
3. preliminaries
this section introduces concepts related to petri nets and some basic notations.
3.1. multisets, sequences, and functions
b(a)is the set of all multisets over some set a. for some multiset b2 b(a),b(a)denotes the
number of times element a2aappears inb. some examples: b1= [ ] ,b2= [x;x;y ],b3= [x;y;z ],
b4= [x;x;y;x;y;z ], andb5= [x3;y2;z]are multisets over a=fx;y;zg.b1is the empty multiset,
b2andb3both consist of three elements, and b4=b5, i.e., the ordering of elements is irrelevant
and a more compact notation may be used for repeating elements. the standard set operators can be
extended to multisets, e.g., x2b2,b2]b3=b4,b5nb2=b3,jb5j= 6, etc.fa2bgdenotes the set
with all elements afor whichb(a)1.b(x) =p
a2xb(x)is the number of elements in bbelonging
to setx, e.g.,b5(fx;yg) = 3 + 2 = 5 .bb0ifb(a)b0(a)for alla2a. hence,b3b4and
b26b3(becauseb2has twox’s).b < b0ifbb0andb6=b0. hence,b3< b 4andb46< b 5(because
b4=b5).
=ha1;a2;:::;ani2xdenotes a sequence overxof lengthjj=n.i=aifor1
ijj.hiis the empty sequence. 12is the concatenation of two sentences, e.g., hx;x;yi
hx;zi=hx;x;y;x;zi. the notation [a2]can be used to convert a sequence into a multiset.
[a2hx;x;y;x;zi] = [x3;y2;z].6 w.m.p . van der aalst /free-choice nets with home clusters are lucent
3.2. petri nets
figures 1, 2, and 3 already showed examples of marked petri nets. to reason about such processes
and to formalize lucency, we now provide the basic formalizations [11, 3, 12, 1, 13].
deﬁnition 3.1. (petri net)
apetri net is a tuplen= (p;t;f )withpthe non-empty set of places, tthe non-empty set of
transitions such that p\t=;, andf(pt)[(tp)the ﬂow relation such that the graph
(p[t;f)is (weakly) connected.
figure 1 has four places ( p1;p2;p3;p4), ﬁve transitions ( t1;t2;t3;t4;t5), and ten arcs. the initial
marking contains just one token located in place p1.
deﬁnition 3.2. (marking)
letn= (p;t;f )be a petri net. a markingmis a multiset of places, i.e., m2b(p).(n;m )is a
marked net.
a petri net n= (p;t;f )deﬁnes a directed graph with nodes p[tand edgesf. for any
x2p[t,x=fyj(y;x)2fgdenotes the set of input nodes and x=fyj(x;y)2fgdenotes
the set of output nodes. the notation can be generalized to sets: x=fyj9x2x(y;x)2fgand
x=fyj9x2x(x;y)2fgfor anyxp[t.
a transition t2tisenabled in markingmof netn, denoted as (n;m )[ti, if each of its input
placestcontains at least one token. en(n;m ) =ft2tj(n;m )[tigis the set of enabled
transitions.
an enabled transition tmay ﬁre, i.e., one token is removed from each of the input places tand
one token is produced for each of the output places t. formally:m0= (mnt)]tis the marking
resulting from ﬁring enabled transition tin markingmof petri net n.(n;m )[ti(n;m0)denotes
thattis enabled in mand ﬁringtresults in marking m0.
let=ht1;t2;:::;tni 2tbe a sequence of transitions. (n;m )[i(n;m0)denotes that
there is a set of markings m1;m 2;:::;mn+1(n0) such thatm1=m,mn+1=m0, and
(n;mi)[tii(n;mi+1)for1in. a marking m0isreachable frommif there exists a ﬁring
sequencesuch that (n;m )[i(n;m0).r(n;m ) =fm02b(p)j92t(n;m )[i(n;m0)gis
the set of all reachable markings. (n;m )[idenotes that the sequence is enabled when starting in
markingm(without specifying the resulting marking).
for the marked net in figure 2: r(n2;m 2) =f[p1];[p2;p5];[p2;p6];[p3;p5];[p3;p6];[p4]g.
note that en(n2;[p2;p5]) = en(n2;[p2;p6]) =ft3g.
3.3. liveness, boundedness, and home markings
next, we deﬁne some of the standard behavioral properties for petri nets: liveness, boundedness, and
the presence of home markings.
deﬁnition 3.3. (live, bounded, safe, dead, deadlock-free, well-formed)
a marked net (n;m )isliveif for every reachable marking m02r(n;m )and for every transition
t2tthere exists a marking m002r(n;m0)that enables t. a marked net (n;m )isk-bounded ifw.m.p . van der aalst /free-choice nets with home clusters are lucent 7
for every reachable marking m02r(n;m )and everyp2p:m0(p)k. a marked net (n;m )
isbounded if there exists a ksuch that (n;m )isk-bounded. a 1-bounded marked net is called safe.
a placep2pisdead in(n;m )when it can never be marked (no reachable marking marks p). a
transitiont2tisdead in(n;m )when it can never be enabled (no reachable marking enables t). a
marked net (n;m )isdeadlock-free if each reachable marking enables at least one transition. a petri
netnisstructurally bounded if(n;m )is bounded for any marking m. a petri net nisstructurally
liveif there exists a marking msuch that (n;m )is live. a petri net niswell-formed if there exists
a markingmsuch that (n;m )is live and bounded.
deﬁnition 3.4. (home marking)
let(n;m )be a marked net. a marking mhis ahome marking if for every reachable marking
m02r(n;m ):mh2r(n;m0).
note that home markings do not imply liveness or boundedness, i.e., a petri net may be non-well-
formed and still have home markings. (n1;m 1)in figure 1 is not live and has one home marking
[p4].(n3;m 3)in figure 3 is live and all of its reachable markings are home markings.
3.4. clusters
clusters play a major role in this paper. a cluster is a maximal set of connected nodes, only considering
arcs connecting places to transitions.
deﬁnition 3.5. (cluster)
letn= (p;t;f )be a petri net and x2p[t. the cluster of nodex, denoted [x]cis the smallest
set such that (1) x2[x]c, (2) ifp2[x]c\p, thenp[x]c, and (3) ift2[x]c\t, thent[x]c.
[n]c=f[x]cjx2p[tgis the set of clusters of n.
note that [n]cpartitions the nodes in n. the petri net in figure 1 has four clusters: c1=
fp1;t1;t2g,c2=fp2;t3g,c3=fp3;t4;t5g, andc4=fp4g. the petri net in figure 3 also has
four clusters: c1=fp1;t1g,c2=fp2;p3;t2g,c3=fp4;p5;t3g, andc4=fp6;t4g.
deﬁnition 3.6. (cluster notations)
letn= (p;t;f )be a petri net and c2[n]ca cluster. pl(c) =p\care the places in c,
tr(c) =t\care the transitions in c, and mrk(c) = [p2pl(c)]is the smallest marking fully
enabling the cluster.
3.5. structural properties
as deﬁned before, we require petri nets to be weakly connected.nisstrongly connected if the graph
(p[t;f)is strongly-connected, i.e., for any two nodes xandythere is a path leading from xtoy.
various subclasses of petri nets have been deﬁned based on the network structures they allow.
state machines, also called p-nets, do not allow for transitions with multiple input or output places.
marked graphs, also called t-nets, do not allow for places with multiple input or output transitions. in
this paper, we focus on free-choice nets that are proper .8 w.m.p . van der aalst /free-choice nets with home clusters are lucent
deﬁnition 3.7. (free-choice net)
letn= (p;t;f )be a petri net. nisfree-choice net if for anyt1;t22t:t1=t2ort1\t2=;.
in free-choice nets, choice and synchronization can be separated. (n2;m 2)in figure 2 is not a
free-choice net, because the choice between t4andt5is controlled by the places p5andp6.
deﬁnition 3.8. (proper petri net)
a petri netn= (p;t;f )isproper if all transitions have input and output places, i.e., for all t2t:
t6=;andt6=;.
well-formed petri nets are strongly-connected and therefore also proper. workﬂow nets are
not strongly-connected, but by deﬁnition proper. for the main results in this paper, we consider
proper petri nets instead of enforcing stronger structural or behavioral requirements such as strongly-
connectedness, liveness, and boundedness.
4. lucent petri nets
this paper focuses on lucent process models whose states are uniquely identiﬁed based on the activ-
ities they enable. lucency is a generic property that can be formulated in the context of petri nets.
given a marked petri net, we would like to know whether each reachable marking has a unique “foot-
print” in terms of the transitions it enables. if this is the case, then the petri net is lucent .
deﬁnition 4.1. (lucent petri nets)
let(n;m )be a marked petri net. (n;m )islucent if and only if for any m1;m 22r(n;m ):
en(n;m 1) =en(n;m 2)impliesm1=m2.
(n1;m 1)depicted in figure 1 is lucent. (n2;m 2)and(n3;m 3)in figures 2 and 3 are not lucent.
(n4;m 4)depicted in figure 4 is also not lucent. both [p3;p5;p7]and[p3;p7;p8]are reachable from
the initial marking and enable the same set of transitions.
unbounded marked petri nets are, by deﬁnition, not lucent. however, the examples illustrate that
the reverse does not hold.
proposition 4.2. (boundedness of lucent petri nets)
any lucent marked petri net is bounded.
proof:
a marked net with n=jtjtransitions cannot have more than 2npossible sets of enabled transitions.
lucency implies that each set of enabled transitions corresponds to a unique marking. hence, there
cannot be more than 2nreachable markings (implying boundedness). u t
we would like to ﬁnd subclasses of nets that are guaranteed to be lucent based on their structure.
at ﬁrst, one is tempted to think that bounded free-choice nets are lucent. however, as figure 3 and
figure 4 show, this is not sufﬁcient.
lucency is related to the notion of transparency, i.e., all tokens are in the input places of enabled
transitions and therefore not “hidden”.w.m.p . van der aalst /free-choice nets with home clusters are lucent 9
t2
t6p1
t5t3
t8 t7p2
p8p3 p6p5
p4 p7t1 t4t0p0
figure 4. (n4;m 4)is a marked free-choice petri net that is not lucent: [p3;p5;p7]and[p3;p7;p8]enablet1
andt4.
deﬁnition 4.3. (transparent marking)
let(n;m )be a marked petri net. marking mis atransparent marking ofnif and only if m=
[p2pj9t2en(n;m )p2t].(n;m )is fully transparent if and only if each reachable marking is
transparent.
full transparency implies lucency, but the reverse does not hold. actually, full transparency does
not allow for synchronization and concurrency and is therefore very limiting.
proposition 4.4. let(n;m )be a marked petri net. if (n;m )is fully transparent, then (n;m )is
lucent. the reverse does not hold.
figure 5 shows a marked free-choice petri net that is lucent but not fully transparent. consider,
for example, the reachable marking [p4;p7]enablingt5. there is only one reachable marking which
enables only t5. however, marking [p4;p7]is not transparent since the token in p7is “hidden”.
5. free-choice nets with home clusters are lucent
in [5], we deﬁned the class of perpetual nets in an attempt to identify a large class of lucent petri nets.
here, we aim to substantially extend the class of petri nets that is guaranteed to be lucent. like in [5]
we use the notion of home clusters , but drop the liveness and boundedness requirements. actually,
none of the petri nets shown in this paper is perpetual, including the two lucent nets (n1;m 1)and
(n5;m 5).
deﬁnition 5.1. (home clusters)
let(n;m )be marked petri net. cis ahome cluster of(n;m )if and only if c2[n]c(i.e.,cis
a cluster) and mrk(c)is a home marking of (n;m ). if such acexists, we say that (n;m )has a
home cluster.10 w.m.p . van der aalst /free-choice nets with home clusters are lucent
t1
t3t4
t5
t6
t7t8p7 p1
p2p3
p4
p5
p6p8t2
figure 5. (n5;m 5)is a marked free-choice petri net that is lucent but not fully transparent.
note that a home marking may be dead, but then it should be unique, i.e., a clear termination point .
if the initial marking is a home marking, it can be seen as a regeneration point .
a mentioned before, the key results in this paper apply only to proper petri nets where all transi-
tions have input and output places. it is always possible to add a self-loop place to ensure this (without
changing the behavior). moreover, a petri net having a transition without any input places and at least
one output place, is unbounded for any initial marking and therefore non-lucent. transitions without
output places make most sense in unbounded nets (which are non-lucent). adding a self-loop place to
make the petri net proper, typically results in a model that has no home cluster. however, such models
tend to be unbounded and therefore non-lucent anyway.
note that in literature most authors consider well-formed petri nets. these are strongly-connected
and therefore also proper. here, we consider a substantially larger class of models. for example, the
marked nets (n1;m 1),(n2;m 3),(n4;m 4), and(n5;m 5)are not well-formed, but proper. actually,
(n3;m 3)in figure 3 is the only well-formed net in this paper (and therefore also proper). this paper
shows that we can drop the well-formedness requirement and still ensure lucency.
5.1. properties of home clusters
we ﬁrst explore some of the essential properties of home clusters in marked proper free-choice nets.
first, we show that there are two types of clusters: (1) just an isolated end place or (2) a set of places
sharing one or more output transitions.
proposition 5.2. (two types of clusters)
let(n;m )be a marked proper petri net having a home cluster c. if there is a reachable marking
m02r(n;m )that is dead, then m0=mrk(c),jpl(c)j= 1, and tr(c) =;. if(n;m )is
deadlock-free, then tr(c)6=;.
proof:
from any reachable marking, one can reach mrk(c). hence, if there is a dead marking, then mrk(c)w.m.p . van der aalst /free-choice nets with home clusters are lucent 11
can be the only reachable dead marking. if not, mrk(c)would not be reachable from this alternative
dead marking. if all places in pl(c)are marked, all transitions tr(c)must be enabled. hence,
tr(c) =;(otherwise pl(c)cannot be dead). if tr(c) =;, then the cluster must be a singleton, i.e.,
c=fpcg(transitions are needed to enlarge the cluster, see deﬁnition 3.5). if (n;m )is deadlock-
free,mrk(c)can be reached and should not be dead. hence, tr(c)6=;. u t
most of the results for home markings only apply to well-formed free-choice nets, e.g., s-coverability
theorem, t-coverability theorem, rank theorem, duality theorem, completeness of reduction
rules theorem, existence of home markings theorem, blocking marking theorem, and home
marking theorem [9, 2, 8]. we focus on proper free-choice nets and do notrequire liveness to ensure
boundedness, as is shown next.
deﬁnition 5.3. (expedite a transition in a transition sequence)
letn= (p;t;f )be a free-choice net, m2 b(p),=ht1;t2;:::;ti;:::;tj;:::;tni 2t,
(n;m )[i(i.e., the sequence is enabled), and 1i<jn.exp(n;m )(;i;j ) =true if and only
if
•(n;m )[ht1;t2;:::;ti 1;tjii(i.e., it is possible to execute the preﬁx involving the ﬁrst i 1
transitions followed by tj), and
•[tk]c6= [tj]cfor allk2fi;:::;j 1g(i.e.,tjis the ﬁrst transition of the respective cluster after
ti 1).
exp(n;m )(;i;j )denotes that the j-th transition can be expedited by movingtjto positioni.i j=
ht1;t2;:::;ti 1;tj;ti;:::;tj 1;tj+1:::;tniis the corresponding transition sequence where the j-th
transition is moved to the i-th position.
exp(n;m )()tis the subset of all transition sequences that can be obtained by repeatedly
expediting transitions, i.e., exp(n;m )()is the smallest set such that:
•2exp(n;m )()and
•0
i j2exp(n;m )()if02exp(n;m )(),1i<jj0j, and exp(n;m )(0;i;j).
any02exp(n;m )()is a permutation of and, as we will show next, is enabled if is enabled.
i jmoves thej-th transition to the i-th position and is enabled at that position. consider (n5;m 5)in
figure 5 and =ht2;t5;t6;t8;t8i,2 3=ht2;t6;t5;t8;t8iand2 4=2 5=ht2;t8;t5;t6;t8i.
2 32exp(n5;m5)(), becauseht2;t6iis possible and t6is the ﬁrst transition of the respective
cluster.2 462exp(n5;m5)(), becauseht2;t8iis not possible ( t8is not enabled yet). next, we show
that expediting transitions is possible and leads to the same marking.
lemma 5.4. (expediting transitions is safe)
letn= (p;t;f )be a free-choice net, m;m02b(p), and2tsuch that (n;m )[i(n;m0).
for any02exp(n;m )():(n;m )[0i(n;m0).
proof:
assumen= (p;t;f )is a free-choice net and m,m0, andare such that (n;m )[i(n;m0).
exp(n;m )()is deﬁned as the smallest set such that (1) 2exp(n;m )()and (2)0
i j2exp(n;m )()
if02exp(n;m )(),1i < jjj, and exp(n;m )(0;i;j). we provide a proof using induction
based on the iterative construction of exp(n;m )().12 w.m.p . van der aalst /free-choice nets with home clusters are lucent
(1) the base step 0=obviously holds, because 2exp(n;m )()and(n;m )[i(n;m0).
(2) for the inductive step, it sufﬁces to prove that (n;m )[0
i ji(n;m0)assuming that 0=
ht1;:::;tni2exp(n;m )(),1i < jn,exp(n;m )(0;i;j), and (n;m )[0i(n;m0). we need
to prove that 0
i j=ht1;t2;:::;ti 1;tj;ti;:::;tj 1;tj+1:::;tniis indeed enabled and leads to the
same ﬁnal marking, i.e., (n;m )[0
i ji(n;m0). letm00be the marking after ﬁring the ﬁrst i 1
transitions, i.e., (n;m )[ht1;t2;:::;ti 1ii(n;m00).tj2en(n;m00)because exp(n;m )(0;i;j)(see
ﬁrst condition). the transitions ti;:::;tj 1do not consume any tokens from [tj]c(use the second
condition in exp(n;m )(0;i;j)stating that [tk]c6= [tj]cfor allk2fi;:::;j 1g) and therefore
can still be executed ( tjonly consumed tokens from places in [tj]c). the marking reached after
ht1;t2;:::;ti 1;tj;ti;:::;tj 1iis the same as reached after preﬁx ht1;t2;:::;ti 1;ti;:::;tj 1;tji.
moreover, the same subsequence of transitions htj+1:::;tniremains. hence, (n;m )[0
i ji(n;m0)
thus completing the proof. u t
note that for any 02exp(n;m )():[t20] = [t2](i.e.,0andare permutations of the same
multiset) and the order per cluster does not change, i.e., transitions can only “overtake” transitions of
other clusters. lemma 5.4 shows that expediting transitions does not jeopardize the ability to execute
the remainder of an enabled ﬁring sequence. this can be used to show that it is impossible to have a
marking dominating the home marking (i.e., one cannot reach a strictly larger marking).
theorem 5.5. (no dominating markings in free-choice nets with a home cluster)
let(n;m )be a marked proper free-choice net having a home cluster c. for allm02r(n;m ): if
m0mrk(c), thenm0=mrk(c).
proof:
consider a marked proper free-choice net (n;m )having a home cluster c. assume there exists a
reachable marking m02r(n;m )such thatm0>mrk(c). we show that this is impossible , thereby
proving the theorem.
first, we assume that (n;m )has a deadlock and show that this leads to a contradiction. using
proposition 5.2, we know that mrk(c)is the only reachable dead marking and tr(c) =;. however,
m0>mrk(c)is reachable and the token in ccannot be removed anymore if tr(c) =;. since
the net is proper, any marking reachable from m0will have at least one extra token next to the token
inmrk(c). therefore, mrk(c)cannot be reached, contradicting that cis a home cluster. hence,
(n;m )must be deadlock-free.
since (n;m )is deadlock-free, tr(c)6=;(use proposition 5.2), i.e., the home cluster has at least
one transition. all transitions in tr(c)live, because we can always reach the home marking mrk(c)
again and again.
without loss of generality, we can assume that m02r(n;m )is such that the distance to the
home marking mrk(c)isminimal . letsbe a shortest path fromm0tomrk(c)having lengthjsj.
in other words, (n;m0)[si(n;mrk(c)), and for all malt2r(n;m )andalt2tsuch that
malt>mrk(c)and(n;m alt)[alti(n;mrk(c)):jaltjjsj. obviously,jsj1(otherwise
m0=mrk(c)contradicting our initial assumption).
exp(n;m0)(s)contains all permutations of the shortest sequence sthat are obtained by expedit-
ing transitions. let 1and2be such that 122exp(n;m0)(s),(n;mrk(c))[1i(n;m00), andw.m.p . van der aalst /free-choice nets with home clusters are lucent 13
en(n;m00)\ft22g=;.1contains the transitions in sthat can also be executed starting from
the home marking. this leads to marking m00. in this marking, none of the remaining transitions in s
(i.e., the transitions in 2) can be executed. in other words, starting from we mrk(c), we try to exe-
cute as much of sas possible by expediting transitions (as described in deﬁnition 5.3). 1is the part
that can be executed (leading to m00) and2is the remaining part of s.2only contains transitions
that are not enabled in m00. obviously, there always exist 1and2such that these requirements are
met (exp(n;m0)(s)6=;and we can add transitions to 1until this is no longer possible). moreover,
1can also be executed starting in m0because it is the preﬁx of an expedited sequence. let m000be
the corresponding marking, i.e., (n;m0)[1i(n;m000). from this marking, we can reach the home
marking by executing 2(because122exp(n;m0)(s)and lemma 5.4).
figure 6. sketch of the construction used in theorem 5.5. the solid arrows denote ﬁring sequences and the
dashed lines indicate multiset domination. sis a ﬁring sequence of minimal length leading from a marking
m0(which is larger than mrk(c)) tomrk(c). firing sequence 12is a permutation of ssuch that the
transitions also enabled when starting from mrk(c)are expedited leading to ﬁring sequence 1. the remaining
transitions in 2are not enabled when starting from mrk(c).
to summarize, 122exp(n;m0)(s),(n;mrk(c))[1i(n;m00),(n;m0)[1i(n;m000),
(n;m000)[2i(n;mrk(c)), and en(n;m00)\ft22g=;. moreover, because m0>mrk(c)
alsom000> m00andjsj1. figure 6 shows the relations between the different markings. to
complete the proof we consider two cases ( 1=hiand16=hi):
• assume1=hi. this implies that m000=m0,m00=mrk(c),2=s,en(n;m00) =
tr(c), and tr(c)\ft2sg=;. hence, when executing sstarting from m0the home
cluster remains fully marked. however, there is at least one additional token in m0that cannot
“disappear” when executing s(the net is proper) leading to a contradiction.
• assume16=hi. this implies that m0006>mrk(c), otherwise there would be a shorter
sequence than s, namely2. (recall that we selected m0andssuch that there is no shorter
sequence leading to the home marking.) there must exist an enabled cluster ceinm00(the
net cannot be dead), i.e., tr(ce)en(n;m00).tr(ce)\ft22g=;. ifce=c,
then we ﬁnd a contradiction because this implies m000>mrk(c). ifce6=c, then there is
a placepe2pl(ce)outside of the home cluster cthat is marked in m00and alsom000, but
pe62mrk(c). the token in peis never removed by the transitions in 2. however, after14 w.m.p . van der aalst /free-choice nets with home clusters are lucent
executing2, placepeshould be empty because only places in care marked, thus leading to a
contradiction.
hence, in all cases we ﬁnd a contradiction, proving that m0mrk(c). u t
theorem 5.5 implies boundedness. later, we show that marked proper free-choice nets having a
home cluster are also safe.
corollary 5.6. (boundedness)
let(n;m )be a marked proper free-choice net having a home cluster c. for allm1;m 22r(n;m ):
m16>m 2. hence, (n;m )is also bounded.
proof:
assumem1;m 22r(n;m )such thatm1> m 2(ﬁrst marking is strictly larger). there exists a 
such that (n;m 2)[i(n;mrk(c)). sincem1> m 2there must be another reachable marking m3
such that (n;m 1)[i(n;m 3)andm3>mrk(c). however, theorem 5.5 says this is impossible,
leading to a contradiction. u t
5.2. rooted disentangled paths
we will now reason about the numbers of tokens on speciﬁc paths in the petri net. therefore, we ﬁrst
provide some standard deﬁnitions and then introduce the new notion of rooted disentangled paths .
deﬁnition 5.7. (elementary paths and circuits)
apath in a petri net n= (p;t;f )is a non-empty sequence of nodes =hx1;x2;:::;xnisuch that
(xi;xi+1)2ffor1i < n . hence,xi 12xifor1< inandxi+12xifor1i < n .
paths (n)is the set of all paths in n.is an elementary path ifxi6=xjfor1i<jn(i.e., no
element occurs more than once). an elementary path is called is a circuit ifx12xn.
next, we focus on paths that start and end with a place and that visit a cluster at most once.
consider (n5;m 5)in figure 5.ht8;p7;t8;p8iis a path that is not elementary. this implies that also
a cluster is visited multiple times. hp1;t1;p3;t4;p7iis a so-called disentangled path since each place
on the path belongs to a different cluster.
deﬁnition 5.8. ((rooted) disentangled paths)
letn= (p;t;f )be a petri net. =hp1;t1;p2;:::;tn 1;pniis adisentangled path ofnif and
only ifis a path ofn(2paths (n)),p12p,pn2p, and for all 1i < jn:[pi]c6= [pj]c
(i.e.,starts and ends with a place and does not contain elements that belong to the same cluster). a
disentangled path is q-rooted ifpn2q.
disentangled paths are elementary, but not all elementary paths are disentangled. consider n3
in figure 3. 1=hp5;t3;p3;t2;p4iis elementary, but not disentangled because [p5]c= [p4]c.
2=hp5;t3;p3;t2;p1iis elementary and disentangled. 2isq-rooted where qcan be any subset of
places that includes p1.
in the remainder of this subsection, we reason about the existence of disentangled paths and the
number of tokens on them.w.m.p . van der aalst /free-choice nets with home clusters are lucent 15
lemma 5.9. (existence of rooted disentangled paths)
letn= (p;t;f )be a free-choice net, ca cluster ofn,p2p, andq2c\p. ifnhas a path
2paths (n)starting inpand ending in q, then there also exists a c-rooted disentangled path starting
inp.
proof:
let=hp1;t1;p2;:::;tn 1;pni2paths (n)be the path connecting p=p1andq=pn.can be
converted into a q-rooted disentangled path starting in p. this is done by removing parts of the path
through shortcuts that can be taken when the same cluster is visited multiple times. let i2f1;:::;ng
be a pointer pointing to place piin. we start with i= 1(i.e.,ipoints to the ﬁrst place p1) and move
towards the end of the path i=n.
• if pointer ipoints to place piandpi2c, we can ignore the rest of the sequence because we
already reached cvia a unique sequence of clusters. (note that if p=p1is already in c, we
have a sequence of length 1.)
• ifpi62c, theni<n becauseq=pn2c. hence, there still exists an output transition tiwith
output place pi+1in.
–if none of the pjwithj > i is in the same cluster as pi, then we keep piandti, and
continue with pi+1(i.e, increment i).
–if there is a pjwithj > i that is in the same cluster as pi, then we take the largest j
for which this holds. also j < n , becausepj62c(herepiandpjare in the same clus-
ter). hence, there exists a tjandpj+1.piandpjmay refer to the same place or not.
however,fpi;pjgtj(both are in the same cluster and all transitions in the cluster
consume from all places in the cluster). since pi2tj, we can remove the subsequence
hti;pi+1;:::;tj 1;pjiand directly connect pitotj. sequenceh:::;pi;tj;pj+1;:::;tn 1;
pniconstitutes a path in the petri net and we continue with pj+1(i.e, seti=j+1). in sum-
mary,hp1;:::;pi;ti;ti+1;:::;pj;tj;pj+1;:::;tn 1;pniis transformed into hp1;:::;pi;
ti;ti+1;:::;pj;tj;pj+1;:::;tn 1;pniand continues with i=j+ 1.
we repeat this process until we reach c. each of the elements in the resulting path is connected to the
previous one and we never visit the same cluster twice. we also keep the initial place p. therefore,
the resulting path is a c-rooted disentangled path starting in p. u t
consider the path =hp6;t4;p5;t3;p3;t2;p4;t3;p3;t2;p1iin figure 3. the path ends in the
clusterc=fp1;t1g. using the approach used in the proof of lemma 5.9, this path is converted into
thec-rooted disentangled path hp6;t4;p5;t3;p3;t2;p4;t3;p3;t2;p1i=hp6;t4;p5;t3;p3;t2;p1i.
we can construct a c-rooted disentangled path starting in any place pthat is not dead, i.e., a place
marked in at least one of reachable markings.
corollary 5.10. (existence of rooted disentangled paths from marked places)
let(n;m )be a marked proper free-choice net having a home cluster c. for any non-dead place
p2p, there exists a c-rooted disentangled path starting in p.
proof:
take an arbitrary place pthat can be marked in some reachable marking m0. ifp2c, then=hpi16 w.m.p . van der aalst /free-choice nets with home clusters are lucent
is ac-rooted disentangled path. if p62c, then there must be a path from pto one of the places in
c(sayq). this follows from the fact that the net is proper, i.e., for all t2t:t6=;andt6=;.
therefore, a token can not simply disappear and must end up in c. to see this, color the token in p
red and then execute a ﬁring sequence ending in mrk(c). when executing a transition with at least
one red token, make all produced tokens also red. because we cannot consume a red token without
producing at least one new red token, we know that at least one red token will end up in mrk(c). this
proves that there is a path starting inpand ending in some q2c\p(follow back one red token
inmrk(c)). since there is such a path , there also exists a c-rooted disentangled path starting in p
(apply lemma 5.9). u t
dead places do not change the behavior and can be removed together with the output transitions
if desired (but do not have to be removed, since they remain empty anyway). the next lemma plays a
key role in our analysis of nets having a home cluster c:c-rooted disentangled paths are safe, i.e., at
any time allplaces on ac-rooted disentangled path together contain at most one token.
lemma 5.11. (rooted disentangled paths are safe)
let(n;m )be a marked proper free-choice net having a home cluster c. for any reachable marking,
m02r(n;m )andc-rooted disentangled path =hp1;t1;p2;:::;tn 1;pni:m0(fp1;p2;:::;png)
1.
proof:
assume (n;m )is a marked proper free-choice net, cis a home cluster, and =hp1;t1;p2;:::;tn 1;
pniis ac-rooted disentangled path. let p=fp1;p2;:::;pngandt=ft1;t2;:::;tn 1g.
assume that the lemma does not hold, i.e., is not safe and m0(p)>1for somem02r(n;m ).
we show that this leads to a contradiction.
consider the tokens (at least two) in the places p. we try to move these tokens towards pn2c.
each placepi2pcorresponds to a unique cluster cibecause the path is disentangled. this combined
with the free-choice property, allows us to fully control the trajectories of the tokens in p.
first, we look a the case where chas a transition, say tc(i.e., there are no dead markings, see
proposition 5.2). we start in marking mc=m0. if one of the transitions in tis enabled, then we
ﬁre this transition (in any order and perhaps also multiple times) and update the current marking mc.
this cannot decrease the number of tokens, i.e., we still have mc(p)>1. note that a transition
intconsumes precisely one token “from the path” and produces at least one token “on the path”
(disentangled paths are elementary). if tcis enabled, then mcmrk(c). however, given the
second token in pthis implies mc>mrk(c). this leads to a contradiction using theorem 5.5. if
none of the transitions in t[ftcgis enabled in mc, then we must be able to ﬁre a sequence of other
transitions enabling a transition in t[ftcg.cis a home cluster and there are no deadlocks, so we
can always walk towards a marking enabling one of the transitions in t[ftcg. the moment one of
the transitions in tis enabled, we can again control the choices involved. hence, we can continue to
move tokens along the path until we ﬁnd a contradiction.
next, we look a the case where cdoes not have a transition (i.e., the home marking is is a deadlock,
see proposition 5.2). we can use exactly the same strategy to move the tokens towards pn(there one
case less to consider). the moment a token reaches pnthere is at least one additional token in pandw.m.p . van der aalst /free-choice nets with home clusters are lucent 17
this one can also be moved to pnleading to a contradiction (apply theorem 5.5 to show that there
cannot be two tokens in pn). u t
the previous results can be combined to show that the class of marked petri nets considered is
safe.
corollary 5.12. (marked proper free-choice net having a home cluster are safe)
let(n;m )be a marked proper free-choice net having a home cluster c.(n;m )is safe.
proof:
follows directly from lemma 5.11 and corollary 5.10. if a place pis dead, then it will never have a
token and thus safe. if a place pis not dead, then there exists a c-rooted disentangled path (corol-
lary 5.10) starting in p, and this path must be safe due to lemma 5.11. hence, all places are safe. u t
5.3. conﬂict-pairs
if a marked petri net is not lucent, then there must be two different markings enabling the same set of
transitions. we will convert such a pair of markings into a conﬂict-pair . by showing that these do not
exist, we can prove lucency.
deﬁnition 5.13. (conﬂict-pair)
let(n;m )be a marked petri net. (m1;m 2)is called a conﬂict-pair for(n;m )if and only if
•m1andm2are reachable markings of (n;m )(i.e.,m1;m 22r(n;m )),
•m1andm2are not dead (i.e., en(n;m 1)6=;anden(n;m 2)6=;),
•en(n;m 1)\en(n;m 2) =;(no transition is enabled in both markings),
• for allt2en(n;m 1):m2(t)1, and
• for allt2en(n;m 2):m1(t)1.
consider (n3;m 3)figure 3 and markings m1= [p2;p3;p5]andm2= [p2;p4;p5].m1can be
reached by ﬁring t1andt4.m2can be reached by ﬁring t1,t2,t1, andt4.en(n;m 1) =ft2g,
en(n;m 2) =ft3g,en(n;m 1)\en(n;m 2) =;,m2(t2) = 11, andm1(t3) = 11.
to better understand the above deﬁnition, let us split each of the two markings in the conﬂict-
pair(m1;m 2)in an “agreement” and a “disagreement” part. magreeis the maximal marking such
thatmagreem1andmagreem2. now we can write m1=magree]mdisagree
1 andm2=
magree]mdisagree
2 . obviously, all three submarkings magree,mdisagree
1 , andmdisagree
2 are non-
empty. this allows us to speak about “agreement tokens” (tokens in magree) and “disagreement
tokens” (tokens in mdisagree
1 ormdisagree
2 ). form1= [p2;p3;p5]andm2= [p2;p4;p5], we have
magree= [p2;p5],mdisagree
1 = [p3], andmdisagree
2 = [p4].
bothm1andm2should enable at least one transition, but there cannot be a transition enabled by
both. this means that en(n;magree) =;. the last two requirements in deﬁnition 5.13 state that
transitions enabled in m1andm2should also consume at least one agreement token. hence, for any
t12en(n;m 1):t162en(n;m 2),t162en(n;magree),magree(t1)1, andmdisagree
1 (t1)1.
similarly, for any t22en(n;m 2):t262en(n;m 1),t262en(n;magree),magree(t2)1, and
mdisagree
2 (t2)1.18 w.m.p . van der aalst /free-choice nets with home clusters are lucent
next, we show that the absence of conﬂict-pairs implies lucency. later, we show that a marked
proper free-choice net with a home cluster cannot have a conﬂict-pair. hence, such nets are guaranteed
to be lucent.
t1p1
t2
p21p3
2t3
p4p5
t4
p6t1p1
t2
p21p3
2t3
p4p5
t4
p6
figure 7. example showing how two markings that have the same “footprint” (left) in terms of enabling can
be converted into a conﬂict-pair (right). the left-hand side shows markings m1= [p1;p3;p6]andm2=
[p1;p4;p6]. the right-hand side shows markings m0
1= [p2;p3;p5]andm0
2= [p2;p4;p5]. the “agreement
tokens” are depicted as black dots (denoted by ), the “disagreement tokens” are shown as 1(only inm1and
m0
1) or 2(only inm2andm0
2).
to show that the absence of conﬂict-pairs implies lucency for free-choice nets having a home
cluster, lemma 5.14 shows that it is possible to convert two markings m1andm2that have the same
“footprint” in terms of enabling (i.e., en(n;m 1) =en(n;m 2)) into a conﬂict-pair (m0
1;m0
2). to
illustrate the construction, we consider the free-choice net n3in figure 3 which does nothave a home
cluster (we can ﬁnd two markings having the same “footprint” because of this). the left-hand side
of figure 7 shows the markings m1= [p1;p3;p6]andm2= [p1;p4;p6].m1is the initial marking
andm2can be reached by ﬁring t1andt2. tokens in m1but not inm2are represented by 1and
tokens inm2but not inm1are represented by 2. tokens in both markings are denoted by .m1
andm2demonstrate that the net is notlucent because en(n3;m 1) =en(n3;m 2) =ft1;t4g. to
move to the conﬂict-pair (m0
1;m0
2)withm0
1= [p2;p3;p5]andm0
2= [p2;p4;p5]on the right-hand
side of figure 7, we do not “touch” the disagreement tokens denoted by 1and 2. this implies
that no transitions in the corresponding clusters can ﬁre and that these disagreement tokens do not
move. hence, we can only ﬁre transitions that only consume agreement tokens. these are depicted
as normal black dots in figure 7. in the example, we can ﬁre t1andt4involving only agreement
tokens. such transitions consume and produce agreement tokens. since the net is guaranteed to be
safe, no agreement tokens can be produced for places that have disagreement tokens (i.e., p3andp4
in figure 7). hence, the 1and 2tokens cannot disappear in the process.
the main idea of lemma 5.14 is to ﬁre transitions that are enabled by agreement tokens until
this is no longer possible. this leads to markings like m0
1= [p2;p3;p5]andm0
2= [p2;p4;p5]in
figure 7. in such markings, all enabled transitions have a mix of agreement and disagreement tokens
in their input places. for example, t2is enabled in m0
1by atoken inp2and a 1token inp3, andt3
is enabled in m0
2by atoken inp5and a 2token inp4. lemma 5.14 shows that it is always possible
to reach such markings using the fact that the home marking mrk(c)is always reachable. later, we
will show that free-choice nets having a home cluster cannot have conﬂict-pairs. therefore, figure 7
need to use an example that does not have a home cluster.w.m.p . van der aalst /free-choice nets with home clusters are lucent 19
the proof of lemma 5.14 can be summarized as follows. start from two different markings m1
andm2that enable the same set of transitions. the tokens of both markings are split into “agreement
tokens” denoted by and “disagreement tokens” marked by 1or2(as shown in figure 7). next,
we ﬁre transitions that consume only tokens. it is possible to do this in such a way that the process
stops and there are no such transitions enabled anymore (just try to move tokens closer to the home
marking, this must stop at some stage because the disagreement tokens are needed). the 1and 2
tokens do not move and enabled transitions require at least one “disagreement token” ( ). this way
we can construct a conﬂict-pair (m0
1;m0
2). hence, if there are no conﬂict-pairs, there cannot be two
markingsm1andm2that enable the same set of transitions, thus proving lucency.
lemma 5.14. (nets without conﬂict-pairs are lucent)
let(n;m )be a marked proper free-choice net having a home cluster. if (n;m )has no conﬂict-pairs,
then(n;m )is lucent.
proof:
let(n;m )be a marked proper free-choice net having a home cluster c. we need to prove that if
n= (p;t;f )has no conﬂict-pairs, then nis lucent. this can be rewritten to the logically equivalent
contrapositive “if nis not lucent, then nhas a conﬂict-pair”. we will construct such a conﬂict-pair.
assumenisnotlucent. there must be two markings m1;m 22r(n;m )such that en(n;m 1) =
en(n;m 2)andm16=m2. we will show that, based on these markings, we can construct a conﬂict-
pair(m0
1;m0
2).
the only dead reachable marking is mrk(c). since en(n;m 1) =en(n;m 2)andm16=m2,
we conclude that en(n;m 1) = en(n;m 2)6=;,m16=mrk(c), andm26=mrk(c)(use see
proposition 5.2).
since (n;m )is safe (see corollary 5.12), we can partition the tokens into three groups based on
the places where they reside: p=fp2pjp2m1^p2m2g,p1=fp2pjp2m1^p62m2g,
andp2=fp2pjp62m1^p2m2g. tokens in pare shared by both markings (i.e., the
“agreement tokens” mentioned before). tokens in p1andp2exist in only one of the two markings
(i.e., the “disagreement tokens” mentioned before). none of these three sets can be empty. because
en(n;m 1) =en(n;m 2)6=;, transitions enabled in both markings must agree on the marked input
places. hence, p6=;. becausem16=m2and one cannot be strictly larger than the other one
(corollary 5.6), p16=;andp26=;. we also create three groups of transitions: t1=ft2tj
t\p16=;g,t2=ft2tjt\p26=;g, andtrest=tn(t1[t2) =ft2tjt\(p1[p2) =;g.
note thatt1andt2may overlap in principle, but do not overlap with tresti.e.,(t1[t2)andtrest
partitiont. each subset (i.e., t1,t2ort) includes all transitions of a cluster or none (i.e., clusters
agree on membership).
after introducing these notations, we pick a ﬁring sequence starting inm1and ending in the
home marking, i.e., (n;m 1)[i(n;mrk(c)). such aexists, because cis a home cluster.
like in the proof of theorem 5.5 we split into1and2.exp(n;m 1)()contains all per-
mutations of ﬁring sequence that are obtained by expediting transitions. let 1and2be such that
122exp(n;m 1)(),(n;m 1)[1i(n;m0
1),12trest, and en(n;m0
1)\trest\ft22g=;. in
other words, we expedite transitions from trest, until this is no longer possible. given exp(n;m 1)()
it is always possible to ﬁnd such 1,2, andm0
1. suppose that en(n;m0
1)\trest\ft22g6=;,20 w.m.p . van der aalst /free-choice nets with home clusters are lucent
then we take the ﬁrst transition in 2that is in this set and move it to 1(see construction in def-
inition 5.3). since 1does not ﬁre transitions possibly consuming disagreement tokens (recall that
trest=ft2tj t\(p1[p2) =;g),1is also enabled in m2. letm0
2be the marking
reached after ﬁring 1inm2, i.e., (n;m 2)[1i(n;m0
2). also, (n;m0
1)[2i(n;mrk(c))(because
122exp(n;m 1)()and lemma 5.4). figure 8 summarizes the different entities involved and
their relationships.
figure 8. sketch of the construction used in lemma 5.14. the elements satisfy the following rela-
tions: (n;m 1)[i(n;mrk(c)),122exp(n;m 1)(),(n;m 1)[1i(n;m0
1),(n;m 2)[1i(n;m0
2),
(n;m0
1)[2i(n;mrk(c)),12trest, and en(n;m0
1)\trest\ft22g=;.
m1(p) =m0
1(p)andm2(p) =m0
2(p)for anyp2p1[p2, i.e., the disagreement places are
unaffected by 1because the t1andt2transitions did not ﬁre and 1cannot add tokens to p1orp2,
because the net is safe (see corollary 5.12). 1only produces “agreement tokens” and putting such a
token in a disagreement place violates the safety property in the sequence starting in m1orm2. also
m1(p) =m2(p)andm0
1(p) =m0
2(p)for anyp2pn(p1[p2). this also holds for intermediate
markings when ﬁring the transitions in 1. hence, the collection of 1and 2tokens does not change
(no disagreement tokens are removed and no new disagreement tokens are created). moreover, there
is a non-empty set of agreement tokens (denoted by ) because the net is proper ( m0
1andm0
2agree on
these and each transition in 1produces at least one such token).
next, we prove that (m0
1;m0
2)is indeed a conﬂict-pair for n. we check the required properties
listed in deﬁnition 5.13:
•m0
1andm0
2are indeed reachable markings of (n;m )becausem1;m 22r(n;m ),(n;m 1)
[1i(n;m0
1)and(n;m 2)[1i(n;m0
2),
•m0
1contains at least one “disagreement token” 1and one “agreement token” (see above).
m0
1cannot be dead, because the only reachable marking that may be dead is mrk(c)having a
single token (apply again proposition 5.2). m0
2also contains at least one “disagreement token”
2and one “agreement token” . hence, neither m0
1norm0
2can be dead.
• next, we show that t0=en(n;m0
1)\en(n;m0
2) =;using the following observations:
–t0trest, because the transitions in t1andt2cannot be enabled in both m0
1andm0
2(no
tokens were added to a place in p1[p2by1).
–en(n;m0
1)\trest\ft22g=;was used as a criterion when splitting into1and
2.
–combining the above implies t0\ft22g=;. hence, the input places of the transitions
int0are still marked after executing 2inm0
1.w.m.p . van der aalst /free-choice nets with home clusters are lucent 21
–since (n;m0
1)[2i(n;mrk(c)), the input places of t0must be marked in mrk(c).
hence,t0c.
–this implies that the transitions in the home cluster are enabled in both m0
1andm0
2. this
is only possible if m0
1=m0
2leading to a contradiction, i.e., en(n;m0
1)\en(n;m0
2) =;.
note that in m0
1andm0
2all enabled transitions need to consume at least one “disagreement
token”. hence, no transition can be enabled in both m0
1andm0
2. if a transition would be
enabled in both, then 1could have been extended.
• for allt2en(n;m0
1):m0
2(t)1, because each transition enabled in m0
1must have an
“agreement token” produced by 1and a “disagreement token” in p1. if a transition twould
be enabled based on “disagreement tokens” only, these would have been there in m1already
(recall thatm1(p) =m0
1(p)for anyp2p1) leading to a contradiction because en(n;m 1) =
en(n;m 2). hence, any transition tenabled inm0
1must have an “agreement token” produced
by1on one of it input places. this token is also there in m0
2. hence,m0
2(t)1.
• for allt2en(n;m0
2):m0
1(t)1. here the same arguments apply. a transition cannot be
enabled based on “disagreement tokens” only, since these would have been there in m2already
(m2(p) =m0
2(p)for anyp2p2).
hence, (m0
1;m0
2)is indeed a conﬂict-pair and thus completes the contrapositive proof. u t
5.4. home clusters ensure lucency in free-choice nets
now we can prove the main result of this paper: marked proper free-choice nets having a home cluster
are lucent. we use the notions of rooted disentangled paths and conﬂict-pairs. the basic idea is to
show that a conﬂict-pair implies that there is an unsafe rooted disentangled path which is impossible.
the absence of conﬂict-pairs implies lucency.
2c2
21c1
1pickt1c
mrkppickt2
path connecting c2 and 
c1  can be converted 
into a c1-rooted 
disentangled path .path connecting  c1 and 
c  can be converted 
into a c-rooted 
disentangled path .
the two paths can be 
concatenated into a c-
rooted disentangled 
path starting from a 
marked place in c2.
figure 9. visualization of the three clusters considered in the proof of theorem 5.15. cis the home cluster.
c1is a cluster enabled in m1but not inm2.c2is a cluster enabled in m2but not inm1. the places labeled
1or2contain a token in the respective marking (just in m1or just inm2). the paths connecting c2and
c1andc1andcare converted into rooted disentangled paths. these two rooted disentangled paths can be
concatenated to create a c-rooted disentangled path starting in pmrk. the proof shows that at least one of these
rooted disentangled paths is not safe, proving that the net has no conﬂict-pairs and thus must be lucent.
theorem 5.15 shows that there cannot be a conﬂict-pair (m1;m 2)in a marked proper free-choice
net having a home cluster. figure 9 sketches the main idea of the proof. first, we assume that there22 w.m.p . van der aalst /free-choice nets with home clusters are lucent
exists a conﬂict-pair (m1;m 2). we identify, next to the home cluster c, two additional clusters c1
andc2based on the conﬂict-pair (m1;m 2).c1is enabled in marking m1andc2is enabled in
markingm2.c1can be any cluster enabled in marking m1.c2is a cluster enabled in marking m2
that contributes to the enabling of cluster c1which is disabled in marking m2. as figure 9 shows c1
has a 1input token and c2has a 2input token.
based on the selected c1andc2clusters, we create two rooted disentangled paths: 0is ac1-
rooted disentangled path connecting c2toc1and00is ac-rooted disentangled path connecting c1
toc. these two rooted disentangled paths are combined into a path 000running from c2tocvia
c1. if000is not ac-rooted disentangled path (i.e., the same cluster is visited multiple times along
the path), then it is possible to reach a marking starting from m2which puts a token on 00(the path
connectingc1toc) while having an agreement token in c1. hence, there is a c-rooted disentangled
path connecting c1tochaving at least two tokens (see proof for details). using lemma 5.11 this
leads to a contradiction. hence, 000must be ac-rooted disentangled path. however, considering
m1(rather than a marking reached from m2) path000has at least two tokens. this also leads to a
contradiction using lemma 5.11. therefore, there cannot be a conﬂict-pair (m1;m 2). the approach
presented using figure 9 is detailed in the proof below.
theorem 5.15. (home clusters ensure absence of conﬂict-pairs)
let(n;m )be a marked proper free-choice net having a home cluster. (n;m )has no conﬂict-pairs.
proof:
let(n;m )be a marked proper free-choice net having a home cluster c. we assume that (n;m )has
a conﬂict-pair (m1;m 2)and show that this leads to a contradiction.
useful notations: p,p;,p1, andp2.based on the conﬂict-pair (m1;m 2), we partition the set
of placespinto four sets p=fp2pjp2m1^p2m2g,p;=fp2pjp62m1^p62m2g,
p1=fp2pjp2m1^p62m2g, andp2=fp2pjp62m1^p2m2g. transitions
enabled inm1have input places from pandp1.en(n;m 1) =ft2tjt\p6=;^t\p;=
; ^ t\p16=; ^ t\p2=;g. transitions enabled in m2have input places from pandp2.
en(n;m 2) =ft2tjt\p6=;^t\p;=;^t\p1=;^t\p26=;g. this follows
directly from deﬁnition 5.13.
selecting clusters c1andc2.pick an arbitrary transition enabled in m1:tpick
12en(n;m 1).
call the corresponding cluster c1(i.e.,tpick
12c1). clusterc1is fully marked in m1, but has at least
one unmarked place in m2.punmrk=c1\p1is the non-empty set of such places. to reach the
home marking from m2, we need to execute a transition in cluster c1because it is partially enabled.
hence, there needs to be a ﬁring sequence that marks the places in punmrk. letenbe a shortest ﬁring
sequence starting in m2and marking a place in punmrk.enstarts with a transition enabled in m2
and ends with a transition putting the ﬁrst token in punmrk(the transition may also mark other places
inpunmrk). lettpick
22en(n;m 2)be the ﬁrst transition in this shortest sequence en. given this
ﬁring sequence we can “follow a token” from tpick
2to a place in punmrk. this provides a path starting
intpick
2and ending in the ﬁrst place marked in punmrk. this path contains a subset of transitions in
en. obviously, such a path must exist, but there may be many candidates. the cluster where this path
starts is called c2(i.e.,tpick
22c2). there exists a place pmrk2c2\pin this cluster that is markedw.m.p . van der aalst /free-choice nets with home clusters are lucent 23
in bothm1andm2(tpick
2is enabled in m2and at least of the input places must also have a token in
m1, since (m1;m 2)is a conﬂict pair).
selecting two rooted disentangled paths 0and00.we use the three clusters c,c1, andc2to
prove the contradiction. there is a path from c2toc1and a path from c1toc. note thatc1and
c2need to be different due to the disagreement tokens. also cis different from both c1andc2,
since it is not possible to mark the home cluster completely and still have tokens in other places (use
corollary 5.6). due to lemma 5.9 there must be a c1-rooted disentangled path starting in pmrk. let
us call this path 0=hp0
1;t0
1;p0
2;:::;t0
n 1;p0
ni.p0
1=pmrkandp0
nis a place in cluster c1. assume
that the construction described in lemma 5.9 is used, i.e., all transitions in 0also appear in en(but
the reverse does not need to hold since we follow a token and take shortcuts to ensure that each cluster
appears only once). for clarity, we refer to the end place of 0aspconn, i.e.,pconn=p0
n. due to
corollary 5.10 there must also be a c-rooted disentangled path starting in pconn(pconnis non-dead
in(n;m )). let us call this path 00=hp00
1;t00
1;p00
2;:::;t00
m 1;p00
mi.p00
1=pconnandp00
mis a place in
clusterc. for clarity, we refer to this place as pend, i.e.,pend=p00
m.
hence, we have a c1-rooted disentangled path 0starting inpmrkand ending in pconnand ac-
rooted disentangled path 00starting inpconnand ending in pend.
creating another rooted disentangled path 000by combining 0and00.consider now the path
000=hpmrk;t0
1;p0
2;:::;t0
n 1;pconn;t00
1;p00
2;:::;t00
m 1;pendi, i.e., the concatenation of the paths 0and
00. we will show that 000is ac-rooted disentangled path starting in pmrkand ending in pend.
obviously,000is also a path of n. however, we also need to show that 000does not contain
elements that belong to the same cluster. if this is not the case there must be a place p0
iin0with
1i < n and a place p00
jin00with1jmthat belong to the same cluster. (note that 0and
00do not visit the same cluster twice when considered separately, and p0
n=pconn=p00
1is in both so
should not be compared with itself.) however, this is impossible. assume there would be a cluster
c0withp0
i2c0andp00
j2c0. then a transition of this cluster should appear in en. recall that we
assume that the construction described in lemma 5.9 is used to create 0, i.e., all transitions in 0also
appear inen.t02c0is such a transition appearing in enand0and consuming tokens from both
p0
iandp00
j. when starting in marking m2and executing en, transitiont0occurs before any transition
inc1. consider the marking m0just beforet0occurs, i.e., starting in m2a preﬁx ofenis executed
enablingt0without executing any transition in c1. there exists a place palt2c1\p, becausec1is
fully marked in m1and partially marked in m2. in marking m0, bothp00
jandpaltare marked. p00
jis
marked because t0is enabled.paltis marked because no transition in c1ﬁred yet. however, there is
also ac-rooted disentangled path starting in palt, namelyalt=hpalt;t00
1;p00
2;:::;p00
j;:::t00
m 1;pendi
(we can start in an arbitrary place in c1and still meet all requirements, note that compared to 00,
pconnis replaced by palt). lemma 5.11 shows that it is impossible to have two marked places p00
jand
paltin thec-rooted disentangled path alt, leading to a contradiction. therefore, 000does not visit
the same cluster multiple times (if so, 00would not be a c-rooted disentangled path). hence, 000is a
c-rooted disentangled path starting in pmrkand ending in pend.
the combined rooted disentangled path 000is not safe leading to a contradiction. now con-
sider the just constructed c-rooted disentangled path 000and marking m1. the places pmrkandpconn
are both marked in m1and must be different. recall that pmrk2c2\p(i.e., also marked in m1)
andpconn2c1(all places in c1are marked in m1). again we apply lemma 5.11, which shows that24 w.m.p . van der aalst /free-choice nets with home clusters are lucent
it is impossible to have two marked places in the c-rooted disentangled path 000. therefore, we ﬁnd
another contradiction, showing that the conﬂict-pair (m1;m 2)cannot exist. u t
our goal was to show that marked proper free-choice nets having a home cluster are lucent and
this follows directly from the previous results.
corollary 5.16. (home clusters ensure lucency)
let(n;m )be a marked proper free-choice net having a home cluster. (n;m )is lucent.
proof:
this follows directly from lemma 5.14 and theorem 5.15. a marked proper free-choice net having a
home cluster has no conﬂict-pairs (theorem 5.15) and, therefore, must be lucent (lemma 5.14). u t
(n1;m 1)in figure 1 and (n5;m 5)in figure 5 are examples of free-choice nets having a home
cluster and these are indeed lucent. (n4;m 4)depicted in figure 4 is not lucent and indeed has no
home cluster.
6. relation to perpetual nets
this paper signiﬁcantly extends the results for perpetual marked free-choice nets presented in [5].
these nets need to be live, bounded, and have a home cluster, whereas in this paper, we only require
the latter (but boundedness is implied). moreover, unlike [5] the setting is not limited to strongly-
connected nets, e.g., we allow for workﬂow nets and other types of petri nets typically used in process
mining, workﬂow management, and business process management.
deﬁnition 6.1. (perpetual marked nets [5])
a marked petri net (n;m )is perpetual if and only if it is live, bounded, and has a home cluster.
in this paper, we focus on marked proper free-choice nets having a home cluster. since bound-
edness is implied, the essential difference is the liveness requirement that we dropped. none of the
lucent petri nets shown in this paper is live, showing that this is a substantial generalization. for
example, (n1;m 1)in figure 1 and (n5;m 5)in figure 5 are lucent but not perpetual. lemma 5.14
and theorem 5.15 (combined in corollary 5.16) can be used to show that (n1;m 1)and(n5;m 5)are
lucent.
theorem 3 in [5] states that any perpetual marked free-choice net is lucent. corollary 5.16 gener-
alizes this statement, as shown in table 1. in the remainder of this section, we relate both settings.
proposition 6.2. (perpetual nets are a subclass of free-choice nets having a home cluster)
let(n;m )be a marked free-choice net. if (n;m )is perpetual, then (n;m )is proper and has a
home cluster.
proof:
a marked free-choice net (n;m )is a perpetual net if and only if it is live, bounded, and has a home
cluster. hence, we only need to show that (n;m )is proper. this follows directly from the fact that
well-formed nets are strongly-connected (theorem 2.25 in [8]). u tw.m.p . van der aalst /free-choice nets with home clusters are lucent 25
class of nets for which lucency
is proven to holdmarked proper free-
choice nets having a
home cluster (this paper)perpetual nets (free-
choice, live, bounded, and
having home cluster) [5]
structural proper x x(implied)
properties strongly-connected - x(implied)
dynamic bounded x(implied) x
properties live - x
table 1. corollary 5.16 extends the results in [5] to nets that may be non-live and not strongly-connected
(requirements are denoted by x).
the reverse does not need to hold, as is demonstrated by ﬁgures 1 and 5. the proof of theorem 3
in [5] is also incomplete. the proof in [5] can be repaired, but this requires reasoning over a stacked
array of p-components, making things overly complicated. it is also possible to use a different ap-
proach using a so-called t-reduction showing the absence of conﬂict pairs, see theorem 6 in [20].
in a t-reduction proper t-induced t-nets are “peeled off” until a t-net (i.e., marked graph) remains
(this is related to the notion of cp-nets used in [8]). the reduction preserves liveness, boundedness,
perpetuality, pc-safeness, and other properties. starting from a perpetual well-formed free-choice net
and a t-reduction, it can be shown that lucency is preserved in the “upstream” direction. since for
marked graphs it is easy to show lucency, this implies that any perpetual marked free-choice net is
lucent.
selected results from section 5 can also be used to repair the proof in [5] in a more direct man-
ner without using existing results for well-formed free-choice nets. in this more limited setting, our
approach can be further simpliﬁed by exploiting safeness and liveness.
for strongly-connected marked free-choice nets, having a home cluster implies perpetuality (i.e.,
liveness and boundedness are implied). moreover, such nets are also safe.
proposition 6.3. (properties of strongly-connected free-choice nets having a home cluster)
a strongly-connected marked free-choice net (n;m )having a home cluster cis live, safe, and lucent.
proof:
let(n;m )be a strongly-connected marked free-choice net having a home cluster c.nis proper
becausenis strongly-connected. hence, we can apply corollary 5.12 to show that (n;m )is safe.
corollary 5.16 can be used to show that (n;m )is lucent. any transition tis on a path from starting
inc. it is possible to create a ﬁring sequence starting in mrk(c)enablingtby following this path.
this is due to the free-choice property and the fact that we cannot “get stuck on the way” (it is always
possible to return to mrk(c)). see the proof of lemma 5.11 for a similar reasoning. hence, (n;m )
is live. u t
to explore the relationship between both settings in more detail, we take a proper petri net with a
safe initial marking mand a selected cluster c. we add a transition tcthat extends the cluster and
that marks all places in m, i.e.,tc=c\pandtc=fp2mg.tcshort-circuits the original26 w.m.p . van der aalst /free-choice nets with home clusters are lucent
net in an attempt to make it strongly-connected. to achieve this, we also need to remove the nodes for
which there is no path from the initially marked places.
deﬁnition 6.4. (short-circuited cleaned nets)
letn= (p;t;f )be proper petri net having a cluster cand an initial marking mthat is safe.
•conn(n;m ) =fxnjhx1;x2;:::;xni2paths (n)^x12mgare all nodes that are on a
path starting in an initially marked place.
•clean (n;m ) = (p0;t0;f0\((p0t0)[(t0p0)))withp0=p\conn(n;m ), and
t0=t\conn(n;m )is the net containing all places and transitions on paths starting in an
initially marked place.
•short circ(n;c;m ) = (p;t[ftcg;f[(pl(c)ftcg)[(ftcgfp2mg))is the short-
circuited net (adding a “fresh” transition tc62twithtc=c\pandtc=fp2mg).
•nc;m=short circ(clean (n;m );c;m )applies the two operations in sequence.
•^c=c\ftcgis used to denote the extended cluster (note that this is only a cluster of nc;m if
cconn(n;m )).
in an attempt to create a strongly-connected net, we ﬁrst remove all “dead nodes” and then short-
circuit the net by connecting a selected cluster to the initially marked places. if all nodes of care on
a path starting in an initially marked place, then ^c=c\ftcgis indeed a cluster of nc;m (otherwise
not).
proposition 6.5. (short-circuited cleaned nets are strongly-connected)
let(n;m )be a safely marked proper free-choice net having a cluster csuch thatcconn(n;m ).
the short-circuited cleaned net nc;m=short circ(clean (n;m );c;m )is strongly-connected and
free-choice, and ^c=c\ftcg2[nc;m]c(i.e., ^cis indeed a cluster of nc;m).
proof:
all nodes in clean (n;m )are reachable from an initially marked place (including the nodes in c
becausecconn(n;m )). hence,tcis also reachable from an initially marked place and tcis
connected to this place. therefore, the net is strongly-connected. adding tccannot destroy the free-
choice property. if there is a transition t2c, thent=tc. if not, then chas just one place.
therefore,nc;m is free-choice and has a new cluster ^c=c\ftcg. u t
under the assumption that cluster cis preserved when short-circuiting the net, cis a home cluster
of(n;m )if and only if ^cis a home cluster of (nc;m;m). moreover, this is equivalent to (nc;m;m)
being live and bounded, and can be used to decide whether a free-choice net has a home cluster in
polynomial time.
theorem 6.6. (relating both settings)
let(n;m )be a safely marked proper free-choice net having a cluster csuch thatcconn(n;m ).
the following three statements are equivalent:
(1)cis a home cluster of (n;m ),
(2)^cis a home cluster of (nc;m;m), and
(3)(nc;m;m)is live and bounded.w.m.p . van der aalst /free-choice nets with home clusters are lucent 27
proof:
letn= (p;t;f )be a proper free-choice net having a cluster cand an initial marking mthat
is safe.nc;m=short circ(clean (n;m );c;m )andtcis the short-circuiting transition. c
conn(n;m ), i.e., all cluster nodes are reachable from an initially marked place.
first, we show that (1) )(2). assume that cis a home cluster of (n;m ). under this assumption,
we consider the reachable markings of (nc;m;m). these include the markings of (n;m ), but
nothing more. the moment all places in care marked, the other places are empty. in (nc;m;m)
there is an additional transition tcthat is enabled if all places in ^care enabled. if tcﬁres in mrk(c) =
mrk(^c), then we reach the initial state magain. hence, the set of reachable markings is the same
and^cis a home cluster of (nc;m;m).
second, we show that (2) )(3).^cbe a home cluster of (nc;m;m). proposition 6.5 shows that
nc;m is strongly-connected and free-choice. using proposition 6.3 this implies that (nc;m;m)is
live and safe (i.e., also bounded).
finally, we show that (3) )(1). let (nc;m;m)be live and bounded. this implies that also tc
is live and can be repeatedly be enabled. when tcis enabled, the places in ^care marked, i.e., tccan
only be enabled in a marking m0such thatm0mrk(c). it is impossible that m0>mrk(c). if
so, it would be possible to reach a marking larger than the initial marking yielding an unbounded net
by ﬁringtc. hence,m0=mrk(c)is the only reachable marking enabling tc. therefore, the set
of reachable markings of (nc;m;m)and(n;m )are the same. as a result, mrk(c)can be reached
from any reachable marking starting in (n;m ). this implies that cis a home cluster of (n;m ).
combining (1))(2), (2))(3), and (3))(1) shows that the three statements are equivalent. u t
we can apply theorem 6.6 to all clusters of the net. therefore, the problem of deciding whether
marked proper free-choice net has a home cluster can be converted into a liveness and boundedness
question, allowing us to solve the problem in polynomial time.
corollary 6.7. (complexity of home cluster detection)
the following problem is solvable in polynomial time: given a marked proper free-choice net, to
decide whether there is a home cluster.
proof:
let(n;m )be a marked proper free-choice net with n= (p;t;f ). there are at most jpjclusters.
for each cluster c, we check whether cis a home cluster of (n;m ). this is the same as checking
whethercconn(n;m )and(nc;m;m)is live and bounded. the former requirement is merely
a syntactical check to ensure that cluster cis preserved when short-circuiting the net. the latter
requirement is known to be solvable in polynomial time (see, for example, corollary 6.18 in [8]).
hence, deciding whether there is a home cluster can also be solved in polynomial time. u t
the above result is remarkable because it also applies to non-well-formed nets.
7. conclusion
this paper shows that marked proper free-choice nets having a home cluster are lucent.28 w.m.p . van der aalst /free-choice nets with home clusters are lucent
a system is lucent if the set of enabled actions uniquely characterizes the state of the system. the
user interface of an information system or the worklist provided by a workﬂow management system
offers possible actions to its users. if the system is not lucent, the system may behave differently in
seemingly identical situations. the notion of lucency was introduced in [5] and, given its foundational
nature, it is surprising that this was not investigated before.
the paper focuses on marked proper free-choice nets having a home cluster and uses novel con-
cepts such as rooted disentangled paths andconﬂict-pairs to reason about the behavior of such models.
most of the work on free-choice nets is restricted to well-formed nets. however, the liveness require-
ment is unsuitable for many application domains. many systems and processes are terminating and/or
have an initialization phase. these are excluded by most of the existing work. as shown in this paper,
we can often short-circuit the net and apply existing techniques. however, the approach used in this
paper is direct without using any results for well-formed free-choice nets.
future work aims to extend the class of systems for which lucency can be proven. however, this
will not be easy since unbounded nets or nets with long-term dependencies are inherently non-lucent.
more promising is the further investigation of petri nets with home clusters. ideas such as rooted
disentangled paths and conﬂict-pairs have a broader applicability and may be used to generalize some
of the results known for well-formed (free-choice) petri nets. for example, is it possible to create
reduction and synthesis rules?
the idea to look into lucency originated from challenges in the ﬁeld of process mining (where
observed behavior without state information is converted into process models that have states). what
if event logs would not only show the actions executed, but also what was possible, but did not happen?
in [6] the notion of translucent event logs is introduced, and a baseline discovery algorithm is given.
given such information, it is much easier to discover process models. another direction for future
research is to create process mining techniques tailored towards discovering a marked proper free-
choice net having a home cluster from a standard event log. current approaches often aim to discover
workﬂow nets that are (relaxed) sound. heuristic approaches do not ensure soundness. region-based
techniques tend to create unreadable models. inductive mining techniques tend to produce underﬁtting
models. therefore, there is room for exploring alternative representational biases in process mining.
acknowledgements : the author thanks the alexander von humboldt (avh) stiftung for supporting
our research. special thanks go to the persistent anonymous reviewer for providing detailed comments
that helped to improve the readability of the proofs.
references
[1] reisig w, rozenberg g (eds.). lectures on petri nets i: basic models, volume 1491 of lecture notes in
computer science . springer-verlag, berlin, 1998. doi:10.1007/3-540-65306-6.
[2] best e, wimmel h. structure theory of petri nets. in: jensen k, van der aalst w, balbo g, koutny
m, wolf k (eds.), transactions on petri nets and other models of concurrency (topnoc vii), volume
7480 of lecture notes in computer science . springer-verlag, berlin, 2013 pp. 162–224. doi:10.1007/
978-3-642-38143-0 5.w.m.p . van der aalst /free-choice nets with home clusters are lucent 29
[3] murata t. petri nets: properties, analysis and applications. proceedings of the ieee , 1989. 77(4):541–
580. doi:10.1109/5.24143.
[4] van der aalst w, van hee k, ter hofstede a, sidorova n, verbeek h, v oorhoeve m, wynn m. sound-
ness of workﬂow nets: classiﬁcation, decidability, and analysis. formal aspects of computing , 2011.
23(3):333–363. doi:10.1007/s00165-010-0161-4.
[5] van der aalst w. markings in perpetual free-choice nets are fully characterized by their en-
abled transitions. in: khomenko v , roux o (eds.), applications and theory of petri nets 2018, vol-
ume 10877 of lecture notes in computer science . springer-verlag, berlin, 2018 pp. 315–336. doi:
10.1007/978-3-319-91268-4 16.
[6] van der aalst w. lucent process models and translucent event logs. fundamenta informaticae , 2019.
169(1-2):151–177. doi:10.3233/fi-2019-1842.
[7] van der aalst w. process mining: data science in action. springer-verlag, berlin, 2016. doi:10.1007/
978-3-662-49851-4.
[8] desel j, esparza j. free choice petri nets, volume 40 of cambridge tracts in theoretical computer
science . cambridge university press, cambridge, uk, 1995. doi:10.1017/cbo9780511526558.
[9] best e. structure theory of petri nets: the free choice hiatus. in: brauer w, reisig w, rozenberg
g (eds.), advances in petri nets 1986 part i: petri nets, central models and their properties, volume
254 of lecture notes in computer science . springer-verlag, berlin, 1987 pp. 168–206. doi:10.1007/
978-3-540-47919-2 8.
[10] van der aalst w. the application of petri nets to workﬂow management. the journal of circuits,
systems and computers , 1998. 8(1):21–66. doi:10.1142/s0218126698000043.
[11] van der aalst w, stahl c. modeling business processes: a petri net oriented approach. mit press,
cambridge, ma, 2011. doi:10.7551/mitpress/8811.003.0001.
[12] reisig w. understanding petri nets: modeling techniques, analysis, methods, case studies. springer-
verlag, berlin, 2013. doi:10.1007/978-3-642-33278-4.
[13] reisig w, rozenberg g (eds.). lectures on petri nets ii: applications, volume 1492 of lecture notes in
computer science . springer-verlag, berlin, 1998. doi:10.1007/3-540-65307-4.
[14] best e, desel j, esparza j. traps characterize home states in free-choice systems. theoretical computer
science , 1992. 101:161–176. doi:10.1016/0304-3975(92)90048-k.
[15] esparza j. reachability in live and safe free-choice petri nets is np-complete. theoretical computer
science , 1998. 198(1-2):211–224. doi:10.1016/s0304-3975(97)00235-1.
[16] thiagarajan p, v oss k. a fresh look at free choice nets. information and control , 1984. 61(2):85–113.
doi:10.1016/s0019-9958(84)80052-2.
[17] wehler j. free-choice petri nets without frozen tokens, and bipolar synchronization systems. funda-
menta informaticae , 2010. 98(2-3):283–320. doi:10.3233/fi-2010-228.
[18] gaujal b, haar s, mairesse j. blocking a transition in a free choice net and what it tells about
its throughput. journal of computer and system science , 2003. 66(3):515–548. doi:10.1016/
s0022-0000(03)00039-4.
[19] wehler j. simpliﬁed proof of the blocking theorem for free-choice petri nets. journal of computer and
system science , 2010. 76(7):532–537. doi:10.1016/j.jcss.2009.10.001.30 w.m.p . van der aalst /free-choice nets with home clusters are lucent
[20] van der aalst w. reduction using induced subnets to systematically prove properties for free-
choice nets. in: buchs d, carmona j (eds.), applications and theory of petri nets 2021, vol-
ume 12734 of lecture notes in computer science . springer-verlag, berlin, 2021 pp. 208–229. doi:
10.1007/978-3-030-76983-3 11.