interactive process improvement using
simulation of enriched process trees
mahsa pourbafrani and wil m. p. van der aalst
chair of process and data science, rwth aachen university, germany
fmahsa.bafrani, wvdaalst g@pads.rwth-aachen.de
abstract. event data provide the main source of information for an-
alyzing and improving processes in organizations. process mining tech-
niques capture the state of running processes w.r.t. various aspects, such
as activity-ow and performance metrics. the next step for process own-
ers is to take the provided insights and turn them into actions in order to
improve their processes. these actions may be taken in dierent aspects
of a process. however, simply being aware of the process aspects that
need to be improved as well as potential actions is insucient. the key
step in between is to assess the outcomes of the decisions and improve-
ments. in this paper, we propose a framework to systematically compare
event data and the simulated event data of organizations, as well as
comparing the results of modied processes in dierent settings. the
proposed framework could be provided as an analytic service to enable
organizations in easily accessing event data analytics. the framework is
supported with a simulation tool that enables applying changes to the
processes and re-running the process in various scenarios. the simulation
step includes dierent perspectives of a process that can be captured au-
tomatically and modied by the user. then, we apply a state-of-the-art
comparison approach for processes using their event data which visually
reects the eects of these changes in the process, i.e., evaluating the
process improvement. our framework also includes the implementation
of the change measurement module as a tool.
keywords: process mining, business process improvement, process sim-
ulation, earth mover's distance, performance spectrum.
1 introduction
process owners use data-driven process mining techniques to improve their pro-
cesses. the discovered process models, their performance states, and hidden
problems, such as deviations and bottlenecks, are critical to process improve-
ment. the process mining techniques in the process discovery and conformance
checking areas are widely used to illustrate the current states of processes and
their potential problems [1]. however, before taking any action based on process
mining diagnostics, one wants to have an estimation of the impact. to do so, it
is required to play out the processes with the process owners' adjustments and
then assess the eects of the actions. to improve processes in an evidence-basedarxiv:2201.07755v1  [cs.oh]  18 jan 20222 m. pourbafrani and wil m. p. van der aalst
manner, forward-looking process mining techniques such as prediction and sim-
ulation are needed. they enable what-if and scenario-based analyses of business
processes. however, the validity of the generated results, as well as their clear
interpretation, are two determining factors when employing these techniques.
the model's reliability can be improved by incorporating process mining in-
sights, e.g., the designed simulation model is derived directly from the process's
historical event data [2].
techniques such as generating cpn models [22,12,14] and bpmn models
[3] have been proposed for generating simulation models of processes based on
event logs. simulation approaches in process mining are also useful for other
applications. in [23], for example, process model simulations are used to esti-
mate the alignment value. the gap that we aim to ll is not only providing
a platform for users to easily re-run their processes using the automatically
generated simulation models but also a more accurate technique for measuring
improvement/changes w.r.t. the process owners' interactions with the process.
the conventional comparison of two processes includes conformance checking
between the event logs and the corresponding process models. in addition, for
the purpose of performance comparison, general performance metrics are usually
considered. most of the current approaches are not detailed enough in both as-
pects, i.e., conformance checking and performance analysis. these techniques do
not measure and reect the eect of changes at the detailed level. for instance,
the existing conformance checking techniques only return a value such as the
tness of two event logs, or one event log and the corresponding process model
[4]. these techniques also neglect the importance of the frequency of process in-
stances. the detailed distance between the original event log and the regenerated
event log is critical for determining their similarity [19].
in this paper, we propose an approach to systematically compare the event
data of a process with its simulated event data to assess the reliability of the
simulation model, i.e., the accuracy of the simulation. as a result, the simulated
processes in dierent settings can be compared. the simulation module is imple-
mented as a new software capturing dierent process perspectives, in which the
event logs are used to enrich the process models (trees) with existing aspects.
the enriched process trees generate process behaviors in the form of event logs
with/without applied changes to the process. the state-of-the-art comparison
framework is then applied to the results of the simulation. it measures the ef-
fects of changes using detailed conformance and performance techniques. to
demonstrate a proof of concept of the framework, we use a sample process as an
example to illustrate the approach steps. then, we employ a real-life event log
to evaluate the approach.
the remainder of this paper is structured as follows. we present the related
work in section 2. in section 3, we introduce background concepts and notations.
in section 4, we present our main approach. we evaluate the approach in section
5 by designing simulation models, and section 6 concludes this work.interactive process improvement 3
2 related work
process mining enables designing data-driven simulation models of processes
[2]. authors in [22] use dierent aspects of a process using its event data, e.g.,
process models, resource pooling, and performance metrics, and automatically
generate simulation models. this work as a pioneer in the data-driven simulation
in process mining translates insights from event data into the process simulation
parameters. other simulation approaches in process mining follow the same di-
rection. for instance, [21] uses stochastic petri nets to simulate processes and
determine the duration of instances in business processes. in [18] a business sim-
ulation model is generated which is based on the user domain knowledge. tools
based on protos try to reduce modeling eorts by introducing the reference pro-
cess models [24]. [9] discusses how process mining insights can be exploited in
the business process simulation context. as an example, the proposed tool in [3]
presents the idea of combining bpmn and process mining for simulation pur-
poses, where indicators for measuring the accuracy of the simulation results are
also introduced.
in [11,15], dierent levels of simulating processes are proposed where all the
aspects of a process are extracted at dierent levels, i.e., not only instance level
but also higher-level, e.g., describing processes per day quantitatively. the exam-
ples of high-level simulations are presented in [16,17] with the use of the designed
tool for the modeling and data extraction steps in [10]. in our approach, the en-
riched process models, e.g., process trees, accuracy of the performance-related
aspects, eortless interaction with users, and social network analysis (resource
aspects) are the main criteria for designing simulation models.
on the other side, visualization techniques are powerful tools in process min-
ing analysis in both descriptive and predictive analyses. there are a couple of
visualization techniques that are able to represent the process w.r.t. dierent pro-
cess aspects for providing visual inspection or process comparison. for instance,
the performance spectrum [5] represents the process performance behaviors in
detail between every two sets of activities in the process. i.e., process segments.
the stochastic conformance checking method used in [20] considers the frequency
of the traces in two event logs while comparing their dierences. the idea of us-
ingearth mover's distance for conformance checking and comparing two event
logs, or event logs and process models enables assessing the dierence of two
processes w.r.t. their behaviors in detail.
we provide a platform for regenerating a process in dierent settings and
measure the eects of changes/results using our designed modules based on the
presented ideas. the presented tool in [13] is the simulation approach taken in
the current work as the intermediate tool for regenerating the process behaviors.
the process trees are automatically generated and enriched with the probability
and performance information and allow us to change the processes w.r.t. the
activity-ow and performance aspects.4 m. pourbafrani and wil m. p. van der aalst
table 1: a part of a sample event log. each row represents an event.
case id activity resource timestamp
e1 1 register request pete 12/30/2010 11:02
e22 register request mike 12/30/2010 11:32
3 register request pete 12/30/2010 14:32
... 1 examine thoroughly sue 12/31/2010 10:06
2 decide sara 1/5/2011 11:22
1 decide sara 1/6/2011 11:18
1 reject request pete 1/7/2011 14:24
en ... ... ... ...
3 preliminaries
in this section, we establish the basic notations for events, event logs, and process
trees which are used in the framework.
denition 1 (event). letabe the universe of activities, tbe the universe
of timestamps,rbe the universe of resources, and cbe the universe of case
identier. an event e is a tuple e=(c;a;r;t )where activity aat timetfor case
cis performed by resource r.e=cart is the universe of events. for
eache2e,d(e)projectseon the attribute from domain d, e.g.,a(e)=a.
denition 2 (trace). letebe the universe of events, a trace 2eis a -
nite sequence of events. for each =he1;:::;eni,ei2happens at most once and
for eachei;ej2;c(ei)=c(ej)^t(ei)t(ej);if1i < jn. for
=he1;:::;eni2e,d() =hd(e1);d(e2);:::;d(en)iis the projection of trace
on the attribute from domain d, e.g.,a() =ha(e1);a(e2);:::;a(en)i.
denition 3 (event log). letebe the universe of events and ebe the set
of possible traces, we dene an event log las a set of traces, i.e., le.
we denote la=[a()j2l] as the multiset of traces projected on the
activity attribute. furthermore, fla=f2lagis the set of unique traces (vari-
ants) projected on the activity attribute in the event log l. we refer to flaas
the set of process behaviors presented in l.
fig. 1: a part of the discovered process tree for
the sample event log.table 1 represents a part of a sam-
ple event log, where each row indi-
cates an event, e.g., considering the rst
row ase1,c(e1) = 1 and a(e1) =
register request . process mining uti-
lizes such event logs to discover running
processes inside organizations. the pro-
cess models are the representative ways of the discovered running processes. the
process tree notation is one of the common approaches to present a process,
where the nodes of trees are operators and leaves are activities in the process.
a part of the process tree representing the example process is shown in
figure 1. for example, there is a choice, i.e., xor () as a node between
activityreject request andpay compensation indicating that in the processinteractive process improvement 5
either a request is rejected or the compensation is paid. the root node ( !)
indicates that activity registerrequest is always followed by a loop ( ). a loop
represents a redo of works between its children, i.e., activities in the leaves of
a loop node may happen multiple times in a trace. furthermore, the notation
ofis for silent activities which are not visible in the process but used for the
representation of process trees.
denition 4 (process tree). letlbe an event log, al=fa2j2flagbe
the set of activities in landop=f!;;;+gbe the set of process operators.
ifa2al[fg, thenq=ais a process tree. if n1,q1;q2;q3;:::;qnare
process trees, and op2f!;;+g, thenq=op(q1;q2;:::;qn)is a process tree.
ifn2andq1;q2;q3;:::;qnare process trees, then q=(q1;q2;:::;qn)is
a process tree. for a process tree q, we denote qaandqopas the set of activities
and the set of operators in q.
for a given process tree q,qw=qopqais the set of edges connecting
operators to activities. for instance, ( !;register request ) is an edge in the
example process tree in figure 1 where registerrequest is child of the tree under
parent!. note that a process tree may also contain edges from an operator to
an operator, which is not relevant in the implementation of our framework.
4 approach
our framework enables interactive process improvement inside organizations for
designing/improving process models. the current behaviors of processes cap-
tured in the form of an event log serve as the starting point for any improve-
ment. to enrich the discovered process models, process discovery, performance
analysis, and social network analysis (resource perspective) techniques are used.
we use the discrete event simulation (des) technique as a tool to play out
the process with the current states, which results in an event log as shown in
figure 2. the original behavior of the event log w.r.t. activity-ow (process be-
havior) and performance metrics are compared to ensure that the automatically
designed simulation model is reliable and behaves close to reality, improvement
measurement module in figure 2. this step allows the user to change the process
parameters and re-run the process to generate the new behavior and measure
the process improvement, depicted by the dotted lines in figure 2. these mea-
surements are presented in a numerical format as well as in a detailed graphical
format. the detailed comparative visualization increases the interaction between
the framework and the user. first, we explain the automatic generation of the
simulation results, including process mining techniques and enriching the process
model, and continue with the improvement measurement module.
4.1 simulating process trees
enriching process trees the inductive miner algorithm [7] is used to dis-
cover the process model since it is capable of capturing all the behaviors in a6 m. pourbafrani and wil m. p. van der aalst
improvement measurement
performance analysis , e.g., 
performance spectrumevent logenrich the 
process treesimulate the 
processsimulated 
event log
compare behavior , e.g., 
emd measurement
similar 
behavior
yesno
change the process 
(tree , performance ,. ..)simulate the 
processsimulated 
event log
fig. 2: the overview of the framework to improve the processes interactively. the straight lines show
the path to assess the quality of the regenerated behavior by the simulation model w.r.t. activity-
ow and performance metrics. the dotted lines illustrate the path that the user is able to change
the process and measure and observer the improvement, i.e., the eect of changes, in the process.
process in the form of a process model. the generated process tree by the induc-
tive miner algorithm is able to represent the traces in the event log. the process
tree's limited number of operators as dened in denition 4 allows for easy un-
derstanding and modication of the process. to play out the process accurately,
i.e., applying the new changes in the process, more information than the ow of
activities provided by the process tree is required.
the tree should be enriched with the probability of activity-ows, perfor-
mance information of the activities, and the corresponding resource information,
e.g., organizations of the resources, the number of resources in each organiza-
tion, and hand-over of activities between resources, for each activity from the
real process. therefore, the probability of the choices and the possible number
of loops should be taken into account for regenerating a similar event log. fur-
thermore, for a process tree qand the edge w= (op;a)2qw,warepresents
the probability of occurrence of activity ain a generated trace from the process
tree. for the edge w= (op;a)2qw, ifop2f!;+;g, thenwa= 1. note that
to avoid the generation of innite traces due to the loops in the process tree, we
limit the execution of loops in the simulation with the probability of the number
of occurrences of a loop on average in a trace and the maximum times that a
loop happens in a trace. for all activities a2qa, there is a binding performance
metric, i.e., the average duration of each activity. moreover, the activities are
assigned to the existing automatically discovered organizations and the capacity
of the resources.
for the example process shown in figure 1, a part of the automatically en-
riched tree with the activity-ow, performance, and resource information is pre-
sented in figure 3. for instance, for the process edge w= (;reject request ),
wrej= 0:5, and the shown loop in the process can be executed at most 2 times
in a trace and the probability of its occurrence is 30% which is derived from
the event log. activity register request takes on average 43000 seconds to beinteractive process improvement 7
->
register request
...reject request
reinitiate requestx
pay compensationduration : 
n(43000 , 4047 )
𝑤𝑟𝑒𝑔=1 
𝑤𝑟𝑒𝑗=0.5 
𝑤𝑝𝑐=0.5 
𝑤𝑟𝑒𝑟=1 
duration : 
n(109620 , 105289 )customer 
service
inspector max :2,p:0.3
...1.5
0.5
fig. 3: enriched tree with the probability information, resource allocation, and duration of each activ-
ity. the enriched process tree can be simulated. the hand-over of resources is shown (left) to provide
more accurate simulation results (event logs) w.r.t. the resource allocation in the organizations.
table 2: the general list of automatically discovered insights using process mining techniques to
form process simulations. the top row shows what is discovered from event data. the bottom row
shows what can be set or change by the user.
process miningsimulation execution
parameters
process
model
(tree)arrival
rateactivity
duration,
deviationactivities
capacityactivities unique
resources
(shared
resources)waiting
timebusiness
hoursactivity-ow
probabilityprocess
capacity
(cases)interruption
(process, cases,
activities)start time
of simulationnumber
of cases
automatically
discovered+ + + + + + + + + + - -
changeable
by user+ + + + + + + + + + + +
performed, and the average is used for simulating its duration using a nor-
mal distribution. also, register request andreinitiate request belong to the
customer service organization where the resources in this organization hand
over tasks to the inspector organization.
the information extracted from event logs is shown in table 2. this infor-
mation, along with the discussed information for enriching process trees are the
required simulation parameters. moreover, the changeable aspects for process
improvement by the user in the simulation step are specied in detail. the dis-
covery and design of the simulation models including generating event logs as a
result of the simulation models are represented in detail in [13].
4.2 measuring the process improvement
to measure the changes in the newly generated process represented with an
event log, we have to compare two event logs. for comparing two processes, i.e.,
event logs, two major aspects of the processes should be considered, activity-
ow which generates the behaviors, and the performance aspects. note that the
intermediate regenerator tool can be dierent from the one that we use in our
framework, and yet the measuring the process improvement module can be used
for measuring the eect of changes in two event logs.8 m. pourbafrani and wil m. p. van der aalst
table 3: a sample example of emd measurement for two event logs [19]. the reallocation function
allocates the 49 traces in lto 49 traces with activity-ow ha;e;c;diand 1 remaining trace to
ha;b;c;diinl0. the sum of the value of the table indicates the general emd value, i.e., the dierence
between the two event logs. each cell represents the minimum cost to map its corresponding trace
in the original event log (row) into the traces in the simulated event log (column).
lal0
aha;b;c;diha;c;b;diha;e;c;di49ha;e;b;di49
ha;b;c;di50 1
100000:549
1000:2500:5
ha;c;b;di5000:51
100000:549
1000:25
activity-ow behaviors the fact that process trees include silent transitions,
loops, and xor operators makes generating more behavior (new traces) than
the existed ones in the original log possible. therefore, the similarity of behaviors
is one of the main indicators in the comparison step.
given two event logs, the original event log land the simulated event log l0,
we show the presented behaviors in each event log using their set of unique traces,
i.e.,ela,el0a. the new generated behaviors in the simulated event log, i.e., not
existing in the original event log, and the removed behaviors from the original
process are calculated as el0anela, andelanel0a, respectively. therefore,jfl0anelaj
jela[fl0aj
andjelanfl0aj
jela[fl0ajare the fraction of the new and removed behaviors, respectively.
these metrics represent the pairwise dierence between two event logs. they
evaluate whether the simulation of the original log is close to reality, as well
as capturing any dierent behavior added/removed due to the changes in a
process tree (ow of activities). in the example process presented in figure 1,
after regenerating the process without any change multiple times, on average
22% of the generated variants (unique traces) in the simulated logs are newly
generated. the sample event log for further experiments with the tools is publicly
available1. furthermore, the precise comparison of two event logs should be
based on their behavior, taking into account the frequency of the behavior. to
determine the dierence between the original and the simulated event logs, we
employ a stochastic conformance checking approach.
earth mover's distance conformance checking to accurately compare
two event logs' behaviors, we use the probability distance of each two traces
in two event logs based on earth mover's distance (emd). to calculate the
emd measurement between two event logs, we use the conformance techniques
presented in [6]. for every trace in the original log, we calculate the movement
of its frequency to all the traces in the simulated event log using the reallocation
function. as the next step, the cost of the movement is considered using the
trace distance function.
reallocation letlandl0be the original and the simulated event logs, respec-
tively. function r2elael0a![0;1] returns the relative frequency of 2ela
1https://github.com/mbafrani/visualcomparison2eventlogsinteractive process improvement 9
fig. 4: the detailed comparison of two event logs for the sample process, i.e., the results of emd
measurement. it is the results of the emd reallocation and trace distance functions in the form of a
table such as table 3. the points are the proportional cost of moving every trace in one event log to
the simulated event log. each row (color) indicates a trace in the original event log. the black points
are similar traces in both event logs. the sizes of the points are the relative costs of movement for
each variant (unique traces) in the original event logs.
that should be transformed to 02el0a, i.e.,r(;0). note that for all 2ela,
la()
jlaj=p
02fl0ar(;0), i.e., the frequency of each 2elais considered prop-
erly. the same should be considered for each 02el0a.
trace distance the distance between each two traces in the original log and the
simulated logs is calculated based on normalized string edit distance (levenstein)
[8]. function d2aa![0;1] calculates the distance between two traces,
where for two similar traces the value is 0 and d(;0)=d(0;).
to represent the algorithm clearly, we reduced the sample process and pre-
sented a couple of traces in table 3. the emd measurement of the two event logs
isemd (la;l0
a) = min
r2rr:d=p
2elap
02fl0ar(;0)d(;0) whereris the
universe of reallocation functions. table 3 represents a sample emd measure-
ment for two sample event logs landl0. for instance, for ha;b;c;di50inland
ha;e;c;di49inl0, the trace distance value is 0 :25 given the dierences between
two traces using normalized string edit distance (levenstein). the reallocation
value is 0:49, i.e., 49 of 100 traces in lare reallocated to 49 traces with the se-
quenceha;e;c;diinl0. therefore, the minimum eort of mapping the one trace
to the second one is 0 :490:25 = 0:122. besides the emd value of two event logs
that indicates how two event logs are dierent, we are interested in the required
eort for every trace in the original event log to be mapped/transformed into
the simulated event log for accurate comparison of the simulation results.
applying the designed emd measurement to the complete sample process
and its simulated event log without any changes, figure 4 illustrates the result.
the unique traces in the original event log and the unique traces in the sim-10 m. pourbafrani and wil m. p. van der aalst
ulated event log are depicted using the x-axis and the y-axis, respectively. if
we assume that in our example, r2ris the reallocation function, the cost of
emd (eort of mapping) for each point of figure 4 shows the relative eort,
i.e.,2elaand for each 0
i2el0a,eortla;la(;0
i) =d(;0
i):r(;0
i)p
02fl0d(;0):r(;0). the
most frequent trace in the original event log (rst row) will be converted to the
(74:98%;0;0;0;0;0;0;25:02%), i.e., points in the rst row. the values indicate
that to map the rst trace in the original event log (most frequent one) to the
simulated event log 74 :98% of the eort is to map it to the rst (most frequent
trace) in the simulated event log, i.e., eortla;la(1;0
1) = 75%. also, each row
illustrates the minimum required eort to map/transform the traces into the
simulated event log.
performance behaviors performance is the second factor to consider when
assessing improvement/changes. however, because the times are abstracted from
the real data in prediction and simulation techniques, exact measurements are
impossible. it is worth noting that in many cases, time-related parameters such
as the duration of simulation events are generated using a random function, e.g.,
normal distribution in our case. general performance kpis at a high level of
aggregation, e.g., the average waiting time of traces, or average service time are
too abstract to represent the eects of the changes in the process. therefore,
besides the usual metrics, we use the performance spectrum, which relies on the
structure of the process and directly reects the eects of changes in specic
parts of the process on others. for instance, changing the current service time
of the activity examine thoroughly in the example process has an impact not
only on the overall metrics but also on the duration of the later activities in the
traces, e.g., decide orreinitiate request .
aggregated performance spectrum performance spectrum is a concept intro-
duced to visualize the performance of process steps at the detailed level. a
process segment in event log lis a step from activity ato activity b, i.e.,
(a;b)2alalis a process segment in lwhereal=fa2j2elag. each oc-
currence of a segment in a trace allows measuring the time between occurrences of
aandb[5]. we dene the set of all tuples of events that are directly followed in the
traces inlassegl=f(ei;ei+1)j9=he1;e2;:::;eni2lei;ei+12g. the projection
of the events in seglon their activity attribute provides the multiset of pro-
cess segments, i.e., segl
a= [(a(e1);a(e2))j(e1;e2)2segl]. for instance,
[(examinethoroughly;decide )17;(examinethoroughly;reinitiaterequest )20] is
the part of the multiset of segments in our example.
we consider two aspects for representing a process segment in an event
log: average time of the segment and frequency of the segment. for seg=
(a;b)2segl
a, functionps(seg;l ) = (avgtime (seg;l );freq (seg;l )) rep-
resents the frequency of the process segment segand the corresponding av-
erage time dierence for the segment. for seg = (a;b)2segl
a, we de-
neavgtime (seg;l ) =avg(ft(e2) t(e1)j(e1;e2)2segl^a(e1)=a^
a(e2)=bg) andfreq (seg;l )=segl
a((a;b)).interactive process improvement 11
𝑠𝑒𝑔𝑚𝑒𝑛𝑡
=𝑟𝑒𝑔𝑖𝑠𝑡𝑒𝑟 𝑟𝑒𝑞𝑢𝑒𝑠𝑡,𝑒𝑥𝑎𝑚𝑖𝑛𝑒 𝑡ℎ𝑜𝑟𝑜𝑢𝑔ℎ𝑙𝑦
𝑃𝑆𝑠𝑒𝑔𝑚𝑒𝑛𝑡,𝐿=(124.497,0.5)blue
𝑃𝑆𝑠𝑒𝑔𝑚𝑒𝑛𝑡 ,𝐿′=126.875,0.85yellow
the segment (examine casually, decide ) 
exists in both event logs (gray) with 
different duration (red point inside ).
a new generated segment 
(yellow) with low frequency 
in the simulated event log.
fig. 5: part of the performance measurement for the example process based on the aggregated per-
formance spectrum. each event log is represented by a dierent color, i.e., blue for the original and
yellow for the simulated one. overlapping segments are represented by the gray color (same duration
between segments). each point's transparency and size indicate the frequency and duration of the
segment in the event logs.
figure 5 is the result of the introduced performance measurement ( ps) for
the example process and the regenerated event log. in order to represent dierent
aspects of the results, e.g., new/eliminated segments and dierent duration, we
performed the simulation based on the changed process. for instance, given l
andl0as the original and simulated event logs, each segment's colors refer to
an event log, the size refers to the average time dierence between the segments,
and the transparency indicates the frequency (darker means more frequent).
the gray color represents the overlapped segment in two event logs with similar
performance metrics, and the yellow points represent the new segment generated
in the simulated event log as a result of process tree choices. the implementation
also includes the option to display only the dierence (red points).
5 evaluation
a real event log representing the process of taking loans by customers inside
a nancial company, known as the bpi challenge 2012 , is used in this section.
first, we simulate a similar process with dierent congurations and assess how
close they are to the original event log. following that, we alter the activity-ow
of the process model in order to improve the process and evaluate the eect
of the applied changes. having both simulated and original behaviors of the
process (with or without modications) the possibility of comparing between two
processes is easily provided. to do so, we used our tool simpt2for simulating
2https://github.com/mbafrani/simpt-simulatingprocesstrees12 m. pourbafrani and wil m. p. van der aalst
29.870.1
30
25.173
27.678.9
3181.4
020406080100
emd measurement simulated traces not in the event log traces in the event log not simulated%simulated 25% of # cases with no changes simulated 50% of # cases with no changes
simulated 75% of # cases with no changes simulated 100% of # cases with no changes
fig. 6: the comparison of the generated event logs using simulating a specic number of traces in
the original event log (bpi challenge 2012). the emd measurement indicates, how the original and
the simulated event logs are dierent.
the process, and our developed modules for comparing two event logs w.r.t.
the detailed performance and control ow aspects3. the provided tools make it
possible to evaluate the framework for the interactive improvement of dierent
processes for dierent event logs.
we start with automatically discovering and enriching the underlying pro-
cess tree before regenerating the process, where the similarity of the two event
logs indicates the possibility of using the simulation models for further investiga-
tion. therefore, we simulated the event log multiple times without applying any
changes. as shown in figure 6, we took a specic percentage of the total number
of traces in the process for each round of simulation of the original process. as
expected, when the number of simulated traces is small, there is a chance of
missing specic process behaviors, e.g., using 25% of the number of traces, we
lost 30% of the behaviors (unique traces). on the other hand, increasing the
number of simulated traces increases the number of new behaviors. since the
generation of the traces (activity-ow) is based on probability and the process
tree includes both xor choices and silent transitions, the new behaviors are
expected to be generated.
afterward, in the process tree of the original process, we changed the optional
activity preaccepted to be a mandatory activity for all the traces that are going
to be accepted in figure 7. the structure of the process tree (activity-ow) is
changed from!(submitted;partlysubmitted; (;preaccepted );(;accepted );
(;finalized );(declined;cancelled )) to!(submitted;partlysubmitted; (;!
(preaccepted;accepted ));(;finalized );(declined;cancelled )).note that these
changes are possible in dierent aspects of the process such as the process model,
performance metrics, e.g., activity duration, arrival rate of the traces, or capacity
of the resources.
based on the shown results of simulating the original event log without any
changes in figure 8, we simulated the changed process model with 50% of orig-
inal traces. in the proposed scenario (changed process tree), 63 :6% of generated
behaviors (unique traces) are new. however, it is less than the behaviors in the
3https://github.com/mbafrani/visualcomparison2eventlogsinteractive process improvement 13
->
submitted
x
preaccpetedpartlysubmitted x
acceptedx
finalized->
submitted x
preaccpetedpartlysubmittedx
finalized
->
acceptedx
cancelled declinedx
cancelled declinedmodified
𝜏 
𝜏 
𝜏 
𝜏 
𝜏 
fig. 7: the process tree for handling application in the bpi challenge 2012 event logs (left). to
evaluate the approach, the optional activity preaccepted is changed to be mandatory in the ow of
activities for all the traces (right) in the process. dotted lines indicate the parts of the tree that
have changed.
frequent unique traces (original event log)
earth mover distance frequent unique traces (original event log)100.0 
diff: {finalize, cancelled, preaccepted , accepted, declined}
(submitted, partiallysubmitted , declined)
(submitted, partiallysubmitted , preaccepted , accepted, finalized, cancelled)
0 2 4 6 8 10 120123456
compared frequency of unique tracesmost frequent traces in the original event logoriginal event log simulated event log
(submitted, partiallysubmitted , preaccepted , accepted, cancelled)
fig. 8: the detailed comparison of the changed process and the original process model. the detailed
emd diagram (left) shows the dierences of the two event logs w.r.t. the activity-ow and the
comparing frequent chart (right) represents the preserved and removed behavior in the simulated
process as the eect of the applied changes.
simulated event log without any modications, since we removed one of the xor
choices limiting the possibilities of producing new behaviors. on the other hand,
23% of the behaviors due to the change in the process tree are eliminated, i.e.,
the traces that skipped the activity preaccepted in the original process. also,
in figure 6, the pairwise comparison of the traces (right), as well as the de-
tailed emd companions for the cost of the mapping of two event logs (left)
after the changes, are shown. the applied changes in the process model not only
aected the process behavior but also these changes aected the performance
of the later segments in the process, e.g., the duration for the process segment
accepted and nalized increased while activity nalized was not changed. the
provided detailed comparison along with the intermediate simulation tool en-
ables the possibility of capturing these types of unexpected insights. note that
the reliability of the simulation techniques such as the presented ones in section 2
can be assessed using the measurement modules.14 m. pourbafrani and wil m. p. van der aalst
6 conclusion
process mining supports organizations in nding running processes, as well as
identifying challenges or possible areas for improvement. the process improve-
ment should be supported with process knowledge. we use process mining in-
sights and simulation models as an intermediate method to regenerate processes
in various scenarios. the framework begins with an event log, discovers a process
tree, and enriches it with all the knowledge needed to regenerate the process.
the similarity of the simulated results and the original process behavior in the
form of an event log is then measured in the next step. the degree of similarity
reects the accuracy of our model. as a result, the improvement of the change
in the process can be played out, and the impact of changes can be tracked
using the same measurement module in both the activity-ow and performance
aspects of the process. the advantage of our framework in both generating sim-
ulation models and enriching them based on event logs automatically, and the
new representation of the comparing of the event logs. furthermore, the inter-
mediate simulation technique described in this paper can be replaced with other
simulation techniques capable of generating event logs for the specied changes.
acknowledgments funded by the deutsche forschungsgemeinschaft (dfg,
german research foundation) under germany's excellence strategy{exc-2023
internet of production { 390621612. we also thank the alexander von humboldt
(avh) stiftung for supporting our research.
references
1. van der aalst, w.m.p.: process mining - data science in action, second edition.
springer (2016)
2. van der aalst, w.m.p.: process mining and simulation: a match made in heaven!
in: computer simulation conference. pp. 1{12. acm press (2018)
3. camargo, m., dumas, m., rojas, o.g.: simod: a tool for automated discovery of
business process simulation models pp. 139{143 (2019)
4. carmona, j., van dongen, b.f., solti, a., weidlich, m.: conformance checking -
relating processes and models. springer (2018)
5. denisov, v., fahland, d., van der aalst, w.m.p.: unbiased, ne-grained description
of processes performance from event data. in: business process management. pp.
139{157. springer international publishing (2018)
6. leemans, s., syring, a., van der aalst, w.m.p.: earth movers' stochastic confor-
mance checking. pp. 127{143 (07 2019)
7. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured
process models from incomplete event logs. in: application and theory of petri
nets and concurrency. pp. 91{110 (2014)
8. levenshtein, v.i.: binary codes capable of correcting deletions, insertions, and
reversals. in: soviet physics doklady. vol. 10, pp. 707{710. soviet union (1966)
9. martin, n., depaire, b., caris, a.: the use of process mining in business pro-
cess simulation model construction. business & information systems engineering
58(1), 73{87 (2016)interactive process improvement 15
10. pourbafrani, m., van der aalst, w.m.p.: pmsd: data-driven simulation in process
mining. in: proceedings of the demonstration track at bpm 2020 co-located with
18th international conference on business process management, bpm. pp. 77{81
(2020), http://ceur-ws.org/vol-2673/paperdr03.pdf
11. pourbafrani, m., van der aalst, w.m.p.: extracting process features from event
logs to learn coarse-grained simulation models. in: advanced information systems
engineering - 33rd international conference, caise 2021, proceedings. vol. 12751,
pp. 125{140. springer (2021). https://doi.org/10.1007/978-3-030-79382-1 8
12. pourbafrani, m., balyan, s., ahmed, m., chugh, s., van der aalst, w.m.p.:
gencpn: automatic generation of cpn models for processes (2021)
13. pourbafrani, m., jiao, s., van der aalst, w.m.p.: simpt: process improve-
ment using interactive simulation of time-aware process trees. in: 15th inter-
national conference, rcis 2021, proceedings. vol. 415, pp. 588{594 (2021).
https://doi.org/10.1007/978-3-030-75018-3 40
14. pourbafrani, m., vasudevan, s., zafar, f., xingran, y., singh, r., van der aalst,
w.m.p.: a python extension to simulate petri nets in process mining. corr
abs/2102.08774 (2021)
15. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: semi-automated time-
granularity detection for data-driven simulation using process mining and system
dynamics. in: conceptual modeling - 39th international conference, er 2020,
proceedings. vol. 12400, pp. 77{91. springer (2020). https://doi.org/10.1007/978-
3-030-62522-1 6
16. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting automatic
system dynamics model generation for simulation in the context of process mining.
in: 23rd international conference, bis 2020, proceedings. pp. 249{263 (2020).
https://doi.org/10.1007/978-3-030-53337-3 19
17. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting decisions in
production line processes by combining process mining and system dynamics. in:
proceedings of the 3rd international conference on intelligent human systems
integration (ihsi). pp. 461{467 (2020). https://doi.org/10.1007/978-3-030-39512-
472
18. pufahl, l., weske, m.: extensible bpmn process simulator. in: proceedings of the
bpm demo track and bpm dissertation award co-located with 15th international
conference on business process modeling (bpm) (2017)
19. raei, m., van der aalst, w.m.p.: towards quantifying privacy in process mining.
in: process mining workshops - icpm 2020 international workshops. vol. 406, pp.
385{397 (2020). https://doi.org/10.1007/978-3-030-72693-5 29
20. raei, m., schnitzler, a., van der aalst, w.m.p.: pc4pm: a tool for pri-
vacy/condentiality preservation in process mining. in: proceedings of the demon-
stration track at bpm co-located with 19th international conference on business
process management (bpm). vol. 2973, pp. 106{110. ceur-ws.org (2021)
21. rogge-solti, a., weske, m.: prediction of business process durations using non-
markovian stochastic petri nets. inf. syst. 54, 1{14 (2015)
22. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation
models. inf. syst. 34(3), 305{327 (2009)
23. sani, m.f., gonzalez, j.j.g., van zelst, s.j., van der aalst, w.m.: conformance
checking approximation using simulation. in: 2020 2nd international conference
on process mining (icpm). pp. 105{112 (2020)
24. verbeek, e., van hattem, m., reijers, h., de munk, w.: protos 7.0: simulation
made accessible. in: ciardo, g., darondeau, p. (eds.) applications and theory of
petri nets 2005. pp. 465{474. springer berlin heidelberg, berlin, heidelberg (2005)