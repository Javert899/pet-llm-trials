kpi-based activity planning for people
working in flexible processes
maikel l. van eck?, natalia sidorova, and wil m.p. van der aalst
eindhoven university of technology, the netherlands
fm.l.v.eck,n.sidorova,w.m.p.v.d.aalst g@tue.nl
abstract. planning human activities within business processes often
happens based on the same methods and algorithms as are used in the
area of manufacturing systems. however, human resources are more com-
plex than machines. their performance depends on a number of factors,
including stress, personal preferences, etc. in this paper we describe an
approach for planning activities of people that takes into account busi-
ness rules and optimises the schedule with respect to one or more kpis.
taking a task list, a set of rules or constraints and a kpi calculation
model as input, we automatically create an executable model that cap-
tures all the possible scheduling scenarios. the state space of this exe-
cutable model is explored to nd an optimal schedule.
1 introduction
scheduling is a well-known type of optimisation problem that occurs in many
dierent contexts, e.g. exible manufacturing systems, transportation and per-
sonnel planning [2,4,9]. scheduling problems exist in many variations, but often
a number of jobs or activities have to be performed by a set of resources while
obeying certain constraints. the goal is to divide the activities over the resources
and time so that their execution optimises one or more performance measures.
in general, scheduling is complex and np-hard. dierent approaches have been
developed to deal with this complexity, providing both exact optimal solutions
and heuristic approximations.
an aspect that is often not taken into account when planning human ac-
tivities is that, unlike machines, human performance changes depending on a
number of factors [4]. for example, when a person has too much stress, their
performance is decreased [5]. by changing for example the lunch time, the per-
formance might be improved or deteriorated. planning too many challenging
activities after each other can also inuence the performance.
it has been shown that there are strong relations between work-related stress
and deterioration of productivity, absenteeism and employee turnover [3, 5].
stress and the associated health issues are a big nancial burden for both organ-
isations and society in general, with the european commission estimating the
total yearly nancial cost at e25 billion. fortunately, new technological advances
?this research was performed in the context of the tu/e impuls project.activity caseid time employee stress
problem intake 1 09:00-10:00 john 2
problem intake 2 10:00-11:00 john 3
repair product 1 11:00-12:00 john 4
repair product 2 12:00-13:00 john 6
break - 13:00-14:00 john 5
document issue 1 14:00-15:00 john 6
document issue 2 15:00-16:00 john 8
(a) john's workday of 7 hours, with a max-
imal stress level of 8.activity caseid time employee stress
problem intake 3 09:00-10:00 anna 2
repair product 3 10:00-11:00 anna 3
document issue 3 11:00-12:00 anna 4
break - 12:00-13:00 anna 2
problem intake 4 13:00-14:00 anna 3
document issue 4 14:00-15:00 anna 4
break - 15:00-15:30 anna 3
repair product 4 15:30-16:30 anna 4
(b) anna's workday of 7.5 hours, with a
maximal stress level of 4.
fig. 1: a scheduled workday for two employees, each with a personal schedule.
and smart sensor technologies enable people to unobtrusively monitor their per-
sonal stress levels and become more aware of sources of stress at work and stress
patterns [8]. in this paper, we explore how the planning of daily activities can
be performed with the goal to better manage stress for the employees involved.
as an example, fig. 1 shows a scheduled workday for two employees work-
ing in a hardware maintenance process, whose stress is being monitored. both
employees have each been assigned to work on two cases, but the activities have
been scheduled dierently. john's schedule in fig. 1a results in a shorter workday,
while anna's schedule in fig. 1b results in less stress. which personal schedule
is better depends on the desired tradeo between time and stress. of course, due
to the eect of stress on performance, the last two activities in john's schedule
may actually take longer than usual, so this information also has to be taken
into account in the planning.
in this paper we present an activity planning approach to nd optimal sched-
ules with respect to one or more key performance indicators (kpis), e.g. stress
or workday length. we focus on exible environments, where planning can be
adjusted to people's needs.
the structure of the rest of this paper is as follows: in sect. 2 we explain
our planning approach. then we discuss our rst implementation in sect. 3 and
evaluate it in sect. 4. finally, in sect. 5 we conclude the paper and state several
areas for future work.
2 conceptual approach
a graphical overview of our approach is shown in fig. 2. we rst discuss the
input required and then we describe the approach itself.
2.1 required inputs
we take a task list, the time period in which the activities should take place, a
constraint model and a kpi calculation model as input.
thetask list tells us what activities should be scheduled together with the
available resources to divide the activities over. instead of listing planned activ-
ities, the task list can also be extracted from a historical event log. this can bekpi calculation model  stress ùë°=stress ùë°‚àí1+ 
 effect (activity ùë°, 
       stress (ùë°‚àí1)) hardware maintenance  
  (x4 cases, 8 hours)  
‚Ä¢problem intake  
‚Ä¢repair product  
‚Ä¢document issue  
 
resources  
‚Ä¢anna  
‚Ä¢john  optimised schedule  
1. build 
executable 
model  2. find 
optimal 
schedule  
if casetype = complex then  
repair product before  document issue  constraint model  task list  
planning approach  
fig. 2: an overview of the activity planning approach.
done to see how to improve on a previous execution according to one or more
given kpis. the task list denes the size of the scheduling problem.
the constraint model is a collection of rules that have to be upheld for a
schedule to be viable. they may describe the order in which activities are exe-
cuted, specify which people may do what activities, or impose other restrictions
on activity executions, e.g. an activity can only be done at a certain location or
time. an example of such a rule is \for complex cases, repair product has to
be done before document issue ". therefore, the schedule in fig. 1b is only valid
if case 4 is a simple case. rules can even specify that additional activities, not
mentioned in the task list, have to be executed. for example, if two activities
from the task list are scheduled to be executed sequentially by the same person
but at dierent locations, then that person will need to travel between the loca-
tions. to specify which people may do what activities the constraint model can
dene each employee's skills and the competencies needed for each activity [4].
the constraint model also species the durations of activities, which may vary
depending on dierent factors. parameters such as stress levels may inuence
these durations and the constraint model can describe how, based on patterns
found by mining personal historical logs obtained with smart technologies [1,8].
the kpi calculation model denes the quality metrics for schedules. it spec-
ies how the value of one or more specic kpis can be calculated for a given
(part of a) schedule. examples of kpis are the length of a working day of people
involved, the maximal stress level, and the stress level at the end of the working
day. if more than one kpi is specied then a tradeo needs to be made. this
can be done by giving each kpi an importance weight and normalising the kpi
values, or by constructing a pareto front of schedules and allowing the end-user
to make the tradeo [2].
2.2 planning approach
the goal of the planning approach is to take the input described above to produce
an optimal schedule, or a set of optimal schedules. this approach should ideallynot require the end-user to have scheduling expertise or to provide additional
input.
simply generating all permutations of activities divided over time and re-
sources is not practically feasible because there are too many possibilities, while
most result in invalid schedules due to violated constraints. a common scheduling
technique is to use integer programming, which explores the solution space with-
out explicitly enumerating all possible schedules. however, setting up an integer
program is a complex task, especially because of history-dependent variables
such as the location of a person, stress level and stress-dependent performance.
therefore, we propose a planning approach consisting of two stages. first,
an executable model that generates valid schedules is automatically constructed
from the input described above. second, this model is used to nd the optimal
schedule(s).
this approach is similar to the ones in [7,9] on scheduling in exible manu-
facturing systems (fms) and on compliance checking of interrelated compliance
rules. in [9], an fms is modelled as a petri net (pn), after which a schedule
is generated by analysing the state space of the pn. however, the construction
of the pn is done manually and the fms modelling constructs are not as ex-
ible as the rules in the constraint model described above. in [7], a compliance
checking framework is described where compliance rules are specied using a
formal language and the resulting constructs are translated to coloured petri
nets (cpns) [6]. a collection of such cpns is then composed into one executable
model on which the compliance of a given sequence of activities with the rules
is checked. however, time is not explicitly modelled and activities that occur in
multiple rules occur multiple times in the composed cpn, so it is not possible
to use the composed cpn to generate activity schedules.
3 approach implementation
we have created a preliminary implementation of the proposed activity planning
approach as a plug-in in the process mining tool prom [11]. in this section we
discuss how we construct the executable model, specied as a cpn, and how
the state space of the executable model is explored to nd the optimal schedule.
3.1 building an executable model
the executable model is created by combining the inputs described in sect. 2.
it represents the search space of schedules, which is then the input for nding
the optimal schedule. to create an executable model, the rules of the constraint
model have to be combined and translated to the representation of the executable
model.
there are many dierent ways to express rules or constraints in constraint
models [7, 10] we can describe rules in a natural language or use formalisms
like ltl. it is also possible to use process models that precisely dene what is
or is not allowed when executing relevant activities [1]. these models can be(a)problem intake occurs before repair
product &document issue .
(b) if the casetype iscomplex , then repair
product occurs before document issue .
fig. 3: two rules from a constraint model expressed as cpns.
constructed either by hand or mined from event data related to the involved
processes. another option is to represent each rule as a pattern in a process
modelling language, as a mix between creating one big model and describing
each rule using a formal rule language.
we choose to model the individual rules of the constraint model as cpns.
one reason for this choice is that cpns are expressive, but single rules are easier
to model than entire processes. another reason is that cpns provide us directly
with executable models, so we only need to combine them. two examples of
constraints modelled as cpns are shown in fig. 3. activities can be supplied
with guards that restrict the conditions relevant to the activity execution, e.g.
casetype referring to the complexity of a case. when combing rules and creating
the schedules we also take into account these guards.
combining the rules in the constraint model is done using an adapted form of
the synchronous product dened for pns [12]. the adapted synchronous product
matches activities by name and then merges not only their dependencies and
relations, but also their guards. guards are merged by taking the conjunction of
the guards of the merged activities. initially, the task list is used to create a basic
pn that can execute all required activities exactly as often as needed, which is
then sequentially composed with each rule using the synchronous product. the
executable model obtained after this step is enhanced with the modelling of
resources and time. this results in a single executable model that captures all
the rules from the constraint model, as shown by fig. 4
in our implementation we choose to merge the kpi calculation model with
the executable model. each kpi is tracked separately and their value is updated
upon each activity execution. this makes measuring the kpi explicit, even for
partial schedules, which helps when nding an optimal schedule. however, the
main reason for merging the kpi calculation is that some kpis, like stress, need
to be modelled anyway because they aect the duration of activities.
3.2 finding an optimal schedule
the state space of the executable model described above contains all valid sched-
ules as a nal state. the state space is nite, due to the limitation on the numberfig. 4: an automatically constructed executable model in prom.
of activities that need to be scheduled as well as the bound on the available time
to schedule them in. therefore, one way to nd the optimal schedule is to use
existing state space exploration techniques to nd all nal states or deadlocks [9].
due to the explicit tracking of kpis and time in each state of the exe-
cutable model, both constructing a schedule and nding the optimal schedule are
straightforward. given a set of nal states, the optimal schedule is the one with
the best kpi score or the best tradeo between kpis, shown to the user e.g. by
creating a pareto front. constructing the schedule for a state means traversing
the explored state space back to the initial state and recording which activities
were executed at what time.
4 evaluation
we have performed a limited experimental evaluation for the implementation of
our approach. a stress monitoring scenario was created, where two employees
work at two possible locations on a simple hardware maintenance process. a
model explaining the eect of executing activities on the stress of the employees
was assumed to be known. our implementation automatically combined the
business rules of the scenario, modelled as cpns, and scheduled a number of
activities, searching for a good tradeo between stress levels and working time.
two versions of the scenario were tested, one where activity duration did not
depend on the stress level and one where stress levels aected performance.
the experimental results are shown in fig. 5. it is clear from fig. 5a and
fig. 5b that the number of possible schedules increases exponentially with an
increasing number of activities to plan. this also means that the time needed
to explore the state space increases exponentially and it quickly reaches a point
where the optimal schedule cannot be found within reasonable time. however,
it should be noted that the current state space exploration implementation isnr. of cases shortest nr. of valid computation
(activities) work time schedules time
1 (3) 3 hours 18 0.5 min.
2 (6) 6 hours 160 12.5 min.
3 (9) 7.5 hours 1001 8 hours
4 (12) ? ? 24 hours
(a) planning results with uniform activity
durations. the shortest work time is the
smallest possible workday length in which
all activities can be executed.
nr. of cases shortest nr. of valid computation
(activities) work time schedules time
1 (3) 3 hours 18 0.5 min.
2 (6) 6 hours 130 12 min.
3 (9) 9 hours 396 7 hours
4 (12) ? ? 24 hours
(b) planning results when the eects of
stress on performance are considered.
(c) the pareto front of optimal schedules
with 3 cases. the shaded solutions are only
valid with uniform activity durations.
fig. 5: the results of the experimental evaluation.
not very ecient. another observation is that considering the eects of stress on
performance imposes additional restrictions on the solutions, so the state space
is smaller and the number of valid schedules is reduced. this also means that
the computational complexity of nding the optimal schedule is lower.
fig. 5c contains a pareto front of optimal schedules when planning 3 cases.
the pareto front shows that a tradeo can be made in terms of dividing the
work over the available people, as well as the available time. performing the
required work in less time causes higher stress levels. the shaded points indicate
schedules that are infeasible if the eect of stress on performance is considered.
5 conclusion
in this paper we have described an activity planning approach that can nd
an optimal schedule with respect to one or more kpis. the approach takes a
task list, a set of rules or constraints, and a kpi calculation model to create an
executable model that can generate schedules. the state space of this executable
model is explored to nd an optimal schedule.
unfortunately, evaluation has shown that the current implementation is not
suitable for practical purposes. the implementation allows for a lot of freedom in
the types of constraints that can be specied and it can automatically construct
an executable model out of these constraints. however, exploring the state space
of the resulting executable model is very expensive. due to the large number
of possible ways to schedule activities, the state space becomes too big to ex-
plore. there are still multiple areas of future work that can make the suggested
approach suitable for practical purposes.
one direction of future work is the use of heuristics during the state space
exploration. as the stress of people is highly variable and dependent on manyfactors, it is dicult to model and predict. searching for an optimal schedule on
a awed stress model will probably not result in an optimal schedule in practice,
so a focus on nding good instead of optimal schedules may be more suitable.
the use of state space reduction techniques could also speed up the exploration.
another direction of future work is the use of a dierent method to nd the
optimal schedule. the executable model represents the space of valid schedules,
and it might be more ecient to translate this model to a dierent formalism,
e.g. a constraint program. while dening a constraint program directly might
be error-prone and challenging, the translation is possible, and would enable the
use of many optimisation techniques that exist in constraint programming.
additionally, more research is needed on learning personalised models that
predict people's stress in practical situations and how that aects performance.
references
1. van der aalst, w.m.p.: process mining: discovery, conformance and enhancement
of business processes. springer (2011)
2. deb, k.: multi-objective optimization using evolutionary algorithms, vol. 16. john
wiley & sons (2001)
3. eu-osha: calculating the cost of work-related stress and psychosocial
risks (2014), https://osha.europa.eu/en/publications/literature_reviews/
calculating-the-cost-of-work-related-stress-and-psychosocial-risks
4. hartmann, s., briskorn, d.: a survey of variants and extensions of the resource-
constrained project scheduling problem. european journal of operational research
207(1), 1{14 (2010)
5. jamal, m.: job stress and job performance controversy: an empirical assessment.
organizational behavior and human performance 33(1), 1{21 (1984)
6. jensen, k.: coloured petri nets. in: petri nets: central models and their properties,
pp. 248{299. springer (1987)
7. jiang, j., aldewereld, h., dignum, v., tan, y.h.: compliance checking of orga-
nizational interactions. acm transactions on management information systems
(tmis) 5(4), 23 (2014)
8. kocielnik, r., sidorova, n., maggi, f.m., ouwerkerk, m., westerink, j.h.d.m.:
smart technologies for long-term stress monitoring at work. in: computer-based
medical systems (cbms), 2013 ieee 26th international symposium on. pp. 53{
58. ieee (2013)
9. lee, d.y., dicesare, f.: scheduling exible manufacturing systems using petri
nets and heuristic search. robotics and automation, ieee transactions on 10(2),
123{132 (1994)
10. ramezani, e., fahland, d., van der aalst, w.m.p.: where did i misbehave? diag-
nostic information in compliance checking. in: business process management, pp.
262{278. springer (2012)
11. verbeek, h.m.w., buijs, j.c.a.m., van dongen, b.f., van der aalst, w.m.p.:
xes, xesame, and prom 6. in: information systems evolution, pp. 60{75.
springer (2011)
12. winskel, g.: petri nets, morphisms and compositionality. in: rozenberg, g. (ed.)
advances in petri nets 1985, lecture notes in computer science, vol. 222, pp.
453{477. springer berlin heidelberg (1986)