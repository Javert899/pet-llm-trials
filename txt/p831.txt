know what you stream: generating event streams
from cpn models in prom 6
s.j. van zelst and b.f. van dongen
department of mathematics and computer science
eindhoven university of technology, the netherlands
fs.j.v.zelst,b.f.v.dongen g@tue.nl
abstract. the ﬁeld of process mining is concerned with supporting the analy-
sis, improvement and understanding of business processes. in recent years the
ﬁeld has matured and several promising techniques have been proposed within
different area’s such as process discovery and conformance checking. however,
some recent trends, originally stemming from the area of data mining, have only
been little exposed in context of process mining. the incorporation of data stream
mining techniques w.r.t. process mining has received little attention in particular.
in this paper we present new developments that build on top of previous work
related to the integration of data streams within the process mining framework
prom. we have developed means to use coloured petri net (cpn) models as a
basis for event stream generation. the newly introduced functionality greatly en-
hances the use of event streams in context of process mining as it allows us to be
actively aware of the originating model of the event stream under analysis.
keywords: process mining, event streams, coloured petri nets, prom, cpn tools
1 introduction
we assume the reader to be familiar with the basics of process mining and refer to [1]
for a detailed overview of the ﬁeld.
streams of events have only been a limited subject of study within the ﬁeld of pro-
cess mining. given the current state of art in computer science we are able to store
huge quantities of information related to business process execution. however, classi-
cal analysis techniques are not able to cope with these quantities of data, i.e. within
the prom framework [2]1it is currently impossible to analyze an event log which size
exceeds the computer’s physical memory. moreover, some business processes owners
simply do not gain anything from static posteriori analysis. as an example, a chip man-
ufacturer is interested in process deviation detection upon production of a batch of chips
rather than after shipment of the batch to a customer. thus, treating business process
data as a dynamic sequence of events rather than a static event log is a natural next step.
in [4] we presented a standardized approach that extends the prom framework with
basic support for handling streaming data. the approach allows us to connect dynamic
and volatile sources of data to the prom framework. although a preliminary imple-
mentation of a connection to an external source was provided, the framework has not
1http://www.promtools.org/2
boosted the integration of stream based analysis within the process mining community.
a potential cause of this could be explained by the lack of existing quality metrics
for process models learned over streams. in this paper we present the integration of
coloured petri nets [5], as implemented by cpn tools [6]2, with the existing stream
framework within prom. the connection to cpn tools provides great ﬂexibility w.r.t.
generating streams, and, allows us to generate streams of which the actual process
model is known. this in turn can greatly help in further development of established
quality metrics for stream based process mining.
the contents of this paper are organized as follows. in section 2 we brieﬂy touch
upon the architecture and implementation of the newly developed integration. in sec-
tion 3 we demonstrate the use of the integration by means of an explanatory case study.
section 4 concludes the paper and provides pointers to interesting topics for future
work. additionally, we have recorded a screen-cast in which we discuss the integration
in more detail, based on the case study3.
2 architecture and implementation
the core of the integration of cpn tools with the prom stream framework is an author
entity [4] that generates events and emits these onto a designated stream. the underlying
connection to cpn tools, i.e. for the purpose of simulation of a cpn model, is handled
by the access/cpn framework [7, 8].
in order to generate events, the author entity needs a cpn model , aninitial marking
of the cpn model, a simulator object and a parameters object . the parameters object
speciﬁes certain parameters of the author. using the parameters object we can specify
the following properties:
–the total number of times that the model should be executed starting from the initial
marking, denoted by rmax.
–the maximum number of steps within a single execution, denoted by smax.
–the emission rate of the author by specifying a delay in between the emission of
two consecutive packets, denoted by er.
–thecase identiﬁcation technique . this property speciﬁes which transitions will be
emitted on the stream upon ﬁring and how the corresponding events are identiﬁed.
currently we have implemented two approaches being repetition based andcpn
variable based .
–event decoration. we can choose whether we want to emit all variables associated
to the ﬁring of a transition within a data packet or only the core elements, being the
trace identiﬁer and the event name.
in the repetition based case, each repetition of an execution of the cpn model
is used as a basis for identifying a case. thus all transitions ﬁred in the ﬁrst repeti-
tion will have 1as a case identiﬁer, all transitions ﬁred in the second repartition will
2http://www.cpntools.org/
3the screen-cast is published at https://svn.win.tue.nl/repos/prom/packages/
eventstream/tags/publications/screen_captures/2015_bpm_demo_streams_cpn/2015_
demo_cpn_tools_screen_capture.tar.gz3
(a) cpn model suitable for repetition based case
identiﬁcation technique.
(b) cpn model suitable for cpn variable based
case identiﬁcation technique.
fig. 1: two cpn model fragments representing different examples of case identiﬁcation
technique.
have 2as a case identiﬁer etc. in this identiﬁcation technique, every transition that is
ﬁred will be emitted as an event where the transition name acts as an event name. as
an example of a cpn model suitable for a repetition based case identiﬁcation tech-
nique, consider figure 1a. within the cpn model we have deﬁned two variables of
type int, i.e. var i,j: int; . a possible stream originating from the cpn model,
where rmax; smax2, including event decoration could be sr=hftrace=1,
concept:name=t1, i=1 g,ftrace=1, concept:name=t2, j=1 g,ftrace=2,
concept:name=t1, i=1 g,ftrace=2, concept:name=t2, j=1 g,:::i. note that
within the repetition based case, ﬁrst all events related to trace 1are emitted before
events related to trace 2are emitted, i.e. cases do not run concurrently.
in the cpn variable based approach, the user speciﬁes a speciﬁc variable present
within the cpn model to act as a case identiﬁer. in this case, only those transitions
that ﬁre and that have the speciﬁed variable associated will be emitted to the event
stream. consider figure 1b which depicts a cpn model suitable for cpn variable based
case identiﬁcation. again we have deﬁned two variables, i.e. var i,j: int; . if we
deﬁne variable ias the trace identiﬁcation variable, given rmax1,smax3,
a possible stream originating from the cpn model could be sv=hftrace=1,
concept:name=t1, i=1 g,ftrace=2, concept:name=t1, i=2 g,ftrace=3,
concept:name=t1, i=3 g,:::i. note that using cpn variable based case identiﬁca-
tion allows us to hide certain transitions present within the model from the stream.
all graphical components w.r.t. the author entity are inherited from the streaming
framework presented in [4]. the only new graphical component of the stream/cpn
integration framework is the author conﬁguration screen which provides of means to
select rmax,smax,er, the case identiﬁcation technique and the event decoration. for an
impression of the ui of the plug-in we refer to the screen-cast accompanying this paper.
3 case study
as an explanatory case we have designed a hierarchical cpn model that is used as a
basis for stream generation. the model consists of one root model and two sub models.
the root model is depicted in figure 24. the cpn model consists of two variables,
i.e.var trace, ignore: int . the initial marking of the root model is one token of
colset int , i.e. 1‘1, in place source . the transition labeled start is connected to
4the cpn model can be found at: https://svn.win.tue.nl/repos/prom/packages/
eventstream/tags/publications/data/2015_bpm_demo_streams_cpn/demo1.tar.gz4
fig. 2: root cpn model of the hierarchical model used within the case study
(a) cpn sub-model executed in case of a token
with an even int value.
(b) cpn sub-model executed in case of a to-
ken with an odd int value.
fig. 3: two cpn sub-models used within the case study
place source and acts as a token generator. in its binding it uses the trace variable. if
transition source ﬁres, it produces a token with the value of trace in place p1and it
produces a token with value trace + 1 in place source . all tokens with an even int
value will be routed to the sub-model named subeven whereas all tokens with an odd
intvalue will be routed to the sub-model named subodd.in routing to the sub-models
the variable ignore is used. the two sub-models are depicted in figure 3.
after importing the hierarchical model in the prom framework, we conﬁgure an
event stream with the following parameters: rmax = 1,smax =1,er= 50 ms:, case
identiﬁcation = cpn variable with value trace and event decoration is true . after
the event stream object is created we connect a stream based implementation of the
inductive miner [9]. after receiving a total of 1905 events, the stream based inductive
miner returns the petri net depicted in figure 4.
although the stream based miner is not able to discovery hierarchy the resulting
model aligns rather acceptable with the input model, i.e., from a control-ﬂow perspec-
tive it exactly describes all possible traces that are emitted onto the event stream.
fig. 4: result of applying a stream based implementation of the inductive miner to the
event stream generated by the hierarchical cpn model.5
4 conclusion
the newly presented cpn extension of the stream framework within prom enhances
researchers, business users and developers to experiment with the concept of streaming
data within a process mining context. the extension allows the user to import a cpn
model, using any concept present within cpn tools, i.e. time, hierarchy etc., within
prom. the user is able to specify several parameters of the accompanying stream such
as, emission rates, event decoration and trace identiﬁcation technique.
an interesting direction for future work concerns support for the use of multiple
case identiﬁcation variables. this allows to discover multiple perspectives of the model
under study. another interesting direction is the development of a stream evaluation
framework which allows us to manipulate certain elements of the stream, e.g. case ar-
rival rates, throughput time, etc., in order to investigate the impact of these parameters
w.r.t. the stream-based algorithm under study.
references
1. aalst, w.v.d.: process mining: discovery, conformance and enhancement of business pro-
cesses. 1st edn. springer publishing company, incorporated (2011)
2. dongen, b.v., alves de medeiros, a., verbeek, h., weijters, a., aalst, w.v.d.: the prom
framework: a new era in process mining tool support. in ciardo, g., darondeau, p., eds.:
applications and theory of petri nets 2005. v olume 3536 of lecture notes in computer
science. springer berlin heidelberg (2005) 444–454
3. aalst, w.v.d., dongen, b.v., g ¨unther, c., mans, r., alves de medeiros, a., rozinat, a., rubin,
v ., song, m., verbeek, h., weijters, a.: prom 4.0: comprehensive support for real process
analysis. in kleijn, j., yakovlev, a., eds.: petri nets and other models of concurrency –
icatpn 2007. v olume 4546 of lecture notes in computer science. springer berlin heidel-
berg (2007) 484–494
4. van zelst, s.j., burattin, a., van dongen, b.f., verbeek, h.m.w.e.: data streams in prom 6:
a single-node architecture. in: proceedings of the bpm demo sessions 2014 co-located with
the 12th international conference on business process management (bpm 2014), eindhoven,
the netherlands, september 10, 2014. (2014) 81
5. jensen, k., kristensen, l.m.: coloured petri nets - modelling and validation of concurrent
systems. springer (2009)
6. jensen, k., kristensen, l.m., wells, l.: coloured petri nets and cpn tools for modelling and
validation of concurrent systems. sttt 9(3-4) (2007) 213–254
7. westergaard, m., kristensen, l.m.: the access/cpn framework: a tool for interacting with
the cpn tools simulator. in: applications and theory of petri nets, 30th international con-
ference, petri nets 2009, paris, france, june 22-26, 2009. proceedings. (2009) 313–322
8. westergaard, m.: access/cpn 2.0: a high-level interface to coloured petri net models. in:
applications and theory of petri nets - 32nd international conference, petri nets 2011,
newcastle, uk, june 20-24, 2011. proceedings. (2011) 328–337
9. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured process
models from event logs - a constructive approach. in: application and theory of petri nets
and concurrency - 34th international conference, petri nets 2013, milan, italy, june 24-
28, 2013. proceedings. (2013) 311–329