journal title 0 (0) 1 1
submitted to ios press
generating time-based label reÔ¨Ånements to
discover more precise process models
niek taxa,*, emin alasgarovb, natalia sidorovaa, reinder haakmac, and wil m.p. van der aalsta
aeindhoven university of technology, eindhoven, the netherlands
e-mails: n.tax@tue.nl, n.sidorova@tue.nl, w.m.p.v.d.aalst@tue.nl
bbol.com, utrecht, the netherlands
e-mail: ealasgarov@bol.com
cphilips research, eindhoven, the netherlands
e-mail: r.haakma@philips.com
abstract. process mining is a research Ô¨Åeld focused on the analysis of event data with the aim of extracting insights related
to dynamic behavior. applying process mining techniques on data from smart home environments has the potential to provide
valuable insights into (un)healthy habits and to contribute to ambient assisted living solutions. finding the right event labels
to enable the application of process mining techniques is however far from trivial, as simply using the triggering sensor as the
label for sensor events results in uninformative models that allow for too much behavior (i.e., the models are overgeneralizing).
reÔ¨Ånements of sensor level event labels suggested by domain experts have been shown to enable discovery of more precise
and insightful process models. however, there exists no automated approach to generate reÔ¨Ånements of event labels in the
context of process mining. in this paper we propose a framework for the automated generation of label reÔ¨Ånements based on
the time attribute of events, allowing us to distinguish behaviourally different instances of the same event type based on their
time attribute. we show on a case study with real-life smart home event data that using automatically generated reÔ¨Åned labels in
process discovery, we can Ô¨Ånd more speciÔ¨Åc, and therefore more insightful, process models. we observe that one label reÔ¨Ånement
could have an effect on the usefulness of other label reÔ¨Ånements when used together. therefore, we explore four strategies to
generate useful combinations of multiple label reÔ¨Ånements and evaluate those on three real-life smart home event logs.
keywords: knowledge discovery for smart home environments, circular statistics, process mining
1. introduction
process mining is a fast growing discipline that
combines knowledge and techniques from data min-
ing, process modeling, and process model analysis [1].
process mining techniques analyze events that are
logged during process execution. today, such event
logs are readily available and contain information on
what was done, by whom, for whom, where, when, etc.
events can be grouped into cases (process instances),
e.g., per patient for a hospital log, or per insurance
claim for an insurance company. process discovery
plays an important role in process mining, focusing
*corresponding author. e-mail: n.tax@tue.nl.on extracting interpretable models of processes from
event logs. one of the attributes of the events is usu-
ally used as its label, and its values become transi-
tion/activity labels in the process models generated by
process discovery algorithms.
the scope of process mining has broadened in re-
cent years from business process management to other
application domains, one of them is the analysis of
events of human behavior with data originating from
sensors in smart home environments [2‚Äì7]. table 1
shows an example of such an event log. events in
the event log are generated by, e.g., motion sensors
placed in the house, power sensors placed on appli-
ances, open/close sensors placed on closets and cabi-
nets, etc. particularly challenging in applying process
/0-1900/$ c0 ‚Äì the authors. all rights reservedarxiv:1705.09359v2  [cs.lg]  31 oct 20172 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
mining in this application domain is the extraction of
meaningful event labels that allow for the discovery
of insightful process models. simply using the sensor
that generates an event (the sensor column in table
1) as event label is shown to produce non-informative
process models that overgeneralize the event log and
allow for too much behavior [3]. abstracting sensor-
level events into events at the level of human activ-
ity (e.g., eating ,sleeping, etc. ) using activity recog-
nition techniques helps to discover more behaviorally
constrained and more insightful process models [4, 8].
however, the applicability of this approach relies on
the availability of a reliable diary of human behavior
at the activity level, which is often expensive or some-
times even impossible to obtain.
existing approaches that aim at mining temporal
relations from smart home environment data [9‚Äì14]
do not support the rich set of temporal ordering rela-
tions that are found in the process models [15], which
amongst others include sequential ordering, (exclu-
sive) choice, parallel execution, and loops.
in our earlier work [3], we showed that better pro-
cess models can be discovered by taking the name of
the sensor that generated the event as a starting point
for the event label and then reÔ¨Åning these labels us-
ing information on the time within the day at which
the event occurred. the reÔ¨Ånements used in [3] were
based on domain knowledge, and not identiÔ¨Åed auto-
matically from the data. in this paper, we aim at the
automatic generation of semantically interpretable la-
bel reÔ¨Ånements that can be explained to the user, by
basing label reÔ¨Ånements on data attributes of events.
we explore methods to bring parts of the timestamp in-
formation to the event label in an intelligent and fully
automated way, with the end goal of discovering be-
haviorally more precise and therefore more insightful
process models. initial work on generating label re-
Ô¨Ånements based on timestamp information was started
in [16]. here, we extend the work started in [16] in
two ways. first, we propose strategies to select a set
of time-based label reÔ¨Ånements from candidate time-
based label reÔ¨Ånements. furthermore, add an evalua-
tion of the technique in the form of a case study on a
real-life smart home dataset.
we start by introducing basic concepts and notations
used in this paper in section 2. in section 3, we intro-
duce a framework for the generation of event labels re-
Ô¨Ånements based on the time attribute. in section 4, we
apply this framework on a real-life smart home dataset
and show the effect of the reÔ¨Åned event labels on pro-
cess discovery. in section 5, we address the case ofapplying multiple label reÔ¨Ånements together. we con-
tinue by describing related work in section 6 and con-
clude in section 7.
2. background
in this section, we introduce basic notions related to
event logs and relabeling functions for traces and then
deÔ¨Åne the notions of reÔ¨Ånements and abstractions. we
also introduce some petri net basics.
we use the usual sequence deÔ¨Ånition, and denote
a sequence by listing its elements, e.g., we write
ha1;a2;:::; anifor a (Ô¨Ånite) sequence s:f1;:::; ng!
aof elements from some alphabet a, where s(i) =ai
for any i2 f1;:::; ng;jsjdenotes the length of se-
quence s;s1s2denotes the concatenation of sequences
s1ands2. alanguage lover an alphabet ais a set of
sequences over a.
an event is the most elementary element of an event
log. letibe a set of event identiÔ¨Åers, tbe the time
domain, anda1a nbe an attribute domain
consisting of nattributes (e.g., resource, activity name,
cost, etc.). an event is a tuple e= (i;at;a1;:::; an),
with i2i,at2t , and (a1;:::; an)2a 1
an. the event label of an event is the attribute set
(a1;:::; an). functions id(e),label(e), and time(e)re-
spectively return the id, the event label and the times-
tamp of event e.e=it a 1a nis a
universe of events over a1;:::;an. the rows of ta-
ble 1 are events from an event universe over the event
attributes address ,sensor , and sensor value .
events are often considered in the context of other
events. we call ee anevent set ifedoes not con-
tain multiple events with the same event identiÔ¨Åer. the
events in table 1 together form an event set. a trace
is a Ô¨Ånite sequence formed by the events from an event
setee that respects the time ordering of events,
i.e., for all k;m2n,16k<m6jej, we have:
time((k))6time((m)). we deÔ¨Åne the universe of
traces over event universe e, denoted (e), as the set
of all possible traces over e. we omitein(e)and
use the shorter notation when the event universe is
clear from the context.
often it is useful to partition an event set into smaller
sets in which events belong together according to some
criterion. we might for example be interested in dis-
covering the typical behavior within a household over
the course of a day. in order to do so, we can group
together events with the same address and the same
day-part of the timestamp , as indicated by the horizon-n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models 3
table 1
an example of an event log from a smart home environment.
id timestamp address sensor sensor value
1 03/11/2015 04:59:54 mountain rd. 7 motion sensor - bedroom 1
2 03/11/2015 06:04:36 mountain rd. 7 motion sensor - bedroom 1
3 03/11/2015 08:45:12 mountain rd. 7 motion sensor - living room 1
4 03/11/2015 09:10:10 mountain rd. 7 motion sensor - kitchen 1
5 03/11/2015 09:12:01 mountain rd. 7 power sensor - water cooker 1200
6 03/11/2015 09:15:45 mountain rd. 7 power sensor - water cooker 0
. . . 03/11/2015 . . . mountain rd. 7 . . . . . .
7 03/12/2015 01:01:23 mountain rd. 7 motion sensor - bedroom 1
8 03/12/2015 03:13:14 mountain rd. 7 motion sensor - bedroom 1
9 03/12/2015 07:24:57 mountain rd. 7 motion sensor - bedroom 1
10 03/12/2015 08:34:02 mountain rd. 7 motion sensor - bedroom 1
11 03/12/2015 09:12:00 mountain rd. 7 motion sensor - living room 1
. . . 03/12/2015 . . . mountain rd. 7 . . . . . .
. . . . . . . . . . . . . . .
tal lines in table 1. for each of these event sets, we
can construct a trace; timestamps deÔ¨Åne the ordering
of events within the trace. for events of a trace hav-
ing the same timestamps, an arbitrary ordering can be
chosen within a trace.
anevent partitioning function is a function ep:
e ! tidthat deÔ¨Ånes the partitioning of an arbitrary
set of events e e from a given event universe e
into event sets e1;:::; ej;::: where each ejis the
maximal subset of esuch that for any e1;e22ej,
ep(e1) =ep(e2); the value of epshared by all the ele-
ments of ejdeÔ¨Ånes the value of the trace attribute tid.
note that multidimensional trace attributes are also
possible, i.e., a combination of the name of the per-
son performing the event activity and the date of the
event, so that every trace contains activities of one per-
son during one day. the event sets obtained by apply-
ing an event partitioning can be transformed into traces
(respecting the time ordering of events).
an event log lis a Ô¨Ånite set of traces l(e)
such that82l:8e1;e22:ep(e1) = ep(e2).
ala 1a ndenotes the alphabet of event
labels that occur in log l. the traces of a log are of-
ten transformed before doing further analysis: very de-
tailed but not necessarily informative event descrip-
tions are transformed into some coarse-grained andin-
terpretable labels. for the labels of the log in table 1,
the sensor values could be abstracted to onandoff,
or labels can be redeÔ¨Åned to a subset of the event at-
tributes, e.g., leaving the sensor values out completely.after this relabeling step, some traces of the log can
become identically labeled (the event id‚Äôs would still
be different). the information about the number of oc-
currences of a sequence of labels in an event log is
highly relevant for process mining, since it allows pro-
cess discovery algorithms to differentiate between the
mainstream behavior of a process (i.e., frequently oc-
curring behavioral patterns) and the exceptional behav-
ior.
lete1;e2be event universes. a function l:e1!
e2is an event relabeling function when it satisÔ¨Åes
id(e) = id(l(e))and time(e) = time(l(e))for all
events e2e1. a relabeling function can be used to ob-
tain more useful event labels than the full set of event
attribute values, by lifting those elements of the at-
tribute space to the label that result in strong ordering
relations in the resulting log. we lift lto event logs. let
e;e1;e2be event universes with e;e1;e2being pair-
wise different. let l1:e !e 1andl2:e !e 2be
event relabeling functions. relabeling function l1is a
reÔ¨Ånement of relabeling function l2, denoted by l1
l2, iff8e1;e22e:label(l1(e1)) = label(l1(e2)) =)
label(l2(e1)) = label(l2(e2));l2is then called an ab-
straction ofl1.
the goal of process discovery is to discover a pro-
cess model that represents the behavior seen in an
event log. the activities/transitions in this discovered
process model describe allowed orderings over the la-
bels of the events in the event logs. a frequently used
process modeling notation in the process mining Ô¨Åeld
is the petri net notation [17]. petri nets are directed bi-4 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
p1a
t1p2c
t3b
t2
p3d
t4p4
ft5 p6p5
et6 p7
t7p8
fig. 1. an example petri net.
partite graphs consisting of transitions and places, con-
nected by arcs. transitions represent activities, while
places represent the enabling conditions of transitions.
labels are assigned to transitions to indicate the type
of activity that they model. a special label is used to
represent invisible transitions, which are only used for
routing purposes and not recorded in the log.
alabeled petri net n=hp;t;f;am;`iis a tuple
where pis a Ô¨Ånite set of places, tis a Ô¨Ånite set of
transitions such that p\t=;,f(pt)[(t
p)is a set of directed arcs, called the Ô¨Çow relation,
amis an alphabet of labels representing activities, with
 =2ambeing a label representing invisible events, and
`:t!am[fgis a labeling function that assigns a
label to each transition. for a node n2p[twe use
nandnto denote the set of input and output nodes
ofn, deÔ¨Åned asn=fn0j(n0;n)2fgandn=fn0j
(n;n0)2fg. an example of a petri net can be seen in
figure 1, where circles represent places and rectangles
represent transitions. gray transitions having a smaller
width represent invisible, or , transitions.
a state of a petri net is deÔ¨Åned by its marking m2
npbeing a multiset of places. a marking is graphi-
cally denoted by putting m(p)tokens on each place
p2p. a pair (n;m)is called a marked petri net . state
changes occur through transition Ô¨Årings. a transition t
is enabled (can Ô¨Åre) in a given marking mif each in-
put place p2tcontains at least one token. once a
transition Ô¨Åres, one token is removed from each input
place of tand one token is added to each output place
oft, leading to a new marking. an accepting petri net
is a 3-tuple (n;mi;mf)with na labeled petri net, mi
an initial marking, and mfa Ô¨Ånal marking. visually,
places that belong to the initial marking contain a to-
ken (e.g., p1in figure 1), and places that belong to the
Ô¨Ånal marking are depicted as . many process model-
ing notations, including accepting petri nets, have for-
mal executional semantics and a model deÔ¨Ånes a lan-
guage of accepting traces l. the language of a petri
net consists of all sequences of activities that have a
Ô¨Åring sequence through the petri net that starts in the
initial marking and ends in the Ô¨Ånal marking. for thepetri net in figure 1, the language of accepting traces
isfha;b;d;e;fi;ha;b;d;f;ei;ha;c;d;e;fi;
ha;c;d;f;eig. in words: the process starts with ac-
tivity a, followed by a choice between activity b and
c, followed by activity d, Ô¨Ånally followed by activity
e and f in parallel (i.e., they can occur in any order).
we refer the reader to [17] for a more thorough intro-
duction of petri nets.
for an event log land a process model mwe say
thatlisÔ¨Åtting on process model mifll(m).pre-
cision is related to the behavior that is allowed by a
process model mthat was not observed in the event
logl, i.e.,l(m)nl. the aim of process discovery is
to discover a process model based on and event log
lthat has both high Ô¨Åtness (i.e., it allows for the be-
havior seen in the log) and high precision (i.e., it does
not allow for too much behavior that was not seen
in the log). many process discovery algorithms have
been proposed throughout the years, including tech-
niques based on integer linear programming and the
theory of regions [18], inductive logic programming
[19], maximal pattern mining [20], or based on heuris-
tic techniques [21, 22]. we refer the reader to [1] for
a thorough introduction of several process discovery
techniques.
in process discovery tasks on event logs from the
business process management domain, events are of-
ten simply relabeled to the value of an activity name
attribute, which stores a generally understood name
for the event (e.g., receive loan application , ordecide
on building permit application ). however, event logs
from the smart home environment domain generally
do not contain a single attribute such that relabeling on
that attribute enables the discovery of insightful pro-
cess models [3]. in this paper we explore a strategy to
reÔ¨Åne an event label that is based on the name of the
sensor in a smart home with information about the time
in the day at which the sensor was triggered.
3. a framework for time-based label
reÔ¨Ånements
in this section, we describe a framework to gen-
erate an event label that contains partial information
about the event timestamp, in order to make the event
labels more speciÔ¨Åc while preserving interpretability.
note that by bringing time-in-the-day information to
the event label we aim at uncovering daily routines
of the person under study. we take a clustering-based
approach by identifying dense areas in time-space forn. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models 5
fig. 2. the histogram representation and a gaussian mixture model
Ô¨Åtted to timestamps values of the plates cupboard sensor in the van
kasteren [24] dataset.
each label. the time part of the timestamps consists
of values between 00:00:00 and23:59:59 , equivalent
to the timestamp attribute from table 1 with the day-
part of the timestamp removed. this timestamp can
be transformed into a real number time representation
in the interval [0;24). we chose to apply soft cluster-
ing (also referred to as fuzzy clustering), which has
the beneÔ¨Åt of assigning to each data point a likeli-
hood of belonging to each cluster. a well-known ap-
proach to soft clustering is based on the combination
of the expectation-maximization (em) [23] algorithm
with mixture models, which are probability distribu-
tions consisting of multiple components of the same
probability distribution. each component in the mix-
ture represents one cluster, and the probability of a data
point belonging to that cluster is the probability that
this cluster generated that data point. the em algo-
rithm is used to obtain a maximum likelihood estimate
of the mixture model parameters, i.e., the parameters
of the probability distributions in the mixture.
a well-known type of mixture model is the gaus-
sian mixture model (gmm), where the components
in the mixture distributions are normal distributions.
the data space of time is, however, non-euclidean: it
has a circular nature, e.g., 23:99is closer to 0than to
23. this circular nature of the data space introduces
problems for gmms. figure 2 illustrates the problem
of gmms in combination with circular data by plot-
ting the timestamps of the bedroom sensor events of
the van kasteren [24] real-life smart home event log.
the gmm Ô¨Åtted to the timestamps of the sensor events
consists of two components, one with the mean at 9:05
(in red) and one with a mean at 20(in blue). the
histogram representation of the same data shows thatsome events occurred just after midnight, which on the
clock is closer to 20than to 9:05. the gmm, however,
is unaware of the circularity of the clock, which results
in a mixture model that seems inappropriate when vi-
sually comparing it with the histogram. the standard
deviation of the mixture component with a mean at
9:05is much higher than one would expect based on
the histogram as a result of the mixture model trying
to explain the data points that occurred just after mid-
night. the Ô¨Åeld of circular statistics (also referred to
as directional statistics), concerns the analysis of such
circular data spaces (cf. [25]). in this paper, we use a
mixture of von mises distributions to capture the daily
patterns.
here, we introduce a framework for generating re-
Ô¨Ånements of event labels based on time attributes us-
ing techniques from the Ô¨Åeld of circular statistics. this
framework consists of three stages to apply to the set
of timestamps of a sensor:
data-model pre-Ô¨Åtting stage a known problem with
many clustering techniques is that they return
clusters even when the data should not be clus-
tered. in this stage, we assess if the events of a
certain sensor should be clustered at all, and if so,
how many clusters it contains. for sensor types
that are assessed to not be clusterable (i.e., the
data consists of one cluster), the procedure ends
and the succeeding two stages are not executed.
data-model Ô¨Åtting stage in this stage, we cluster the
events of a sensor type by timestamp using a
mixture consisting of components that take into
account the circularity of the data. the cluster-
ing result obtained in the Ô¨Åtting stage is now a
candidate label reÔ¨Ånement. the label can be re-
Ô¨Åned based on the clustering result by adding the
assigned cluster to the label of the event, e.g.,
open/close fridge can be relabeled into three dis-
tinct labels open/close fridge 1 ,open/close fridge
2, and open/close fridge 3 in case the timestamps
of the fridge where clustered into three clusters.
data-model post-Ô¨Åtting stage in this stage, the qual-
ity of the candidate label reÔ¨Ånements is assessed
from both a cluster quality perspective and a pro-
cess model (event ordering statistics) perspective.
the label is only reÔ¨Åned when the candidate label
reÔ¨Ånement is 1) based on a clustering that has a
sufÔ¨Åciently good Ô¨Åt with the data, and 2) helps to
discover a more insightful process model. if the
candidate label reÔ¨Ånement does not pass one of
the two tests, the label reÔ¨Ånement candidate will6 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
not be applied (i.e., the label will remain to only
consist of the sensor name).
we now proceed with introducing the three stages in
detail.
3.1. data-model pre-Ô¨Åtting stage
this stage consists of three procedures: a test for
uniformity, a test for unimodality, and a method to se-
lect the number of clusters in the data. if the times-
tamps of a sensor type are consider to be uniformly
distributed or follow a unimodal distribution, the data
is considered to not be clusterable, and the sensor type
will not be reÔ¨Åned. if the timestamps are neither uni-
formly distributed nor unimodal, then the procedure
for the selection of number of clusters will decide on
the number of clusters used for clustering.
3.1.1. uniformity check
rao‚Äôs spacing test [26] tests the uniformity of the
timestamps of the events from a sensor around the cir-
cular clock. this test is based on the idea that uni-
form circular data is distributed evenly around the cir-
cle, and nobservations are separated from each other
2
nradii. the null hypothesis is that the data is uniform
around the circle.
given nsuccessive observations f1;:::; fn, either
clockwise or counterclockwise, the test statistics u
for rao‚Äôs spacing test is deÔ¨Åned as u=1
2pn
i=1j
ti j, where=2
n,ti=fi+1 fifor16i6n 1
andtn= (2 fn) +f1.
3.1.2. unimodality check
hartigan‚Äôs dip test [27] tests the null hypothesis that
the data follows a unimodal distribution on a circle.
when the null hypothesis can be rejected, we know
that the distribution of the data is at least bimodal. har-
tigan‚Äôs dip test measures the maximum difference be-
tween the empirical distribution function and the uni-
modal distribution function that minimizes that maxi-
mum difference.
3.1.3. selecting the number of mixture components
the bayesian information criterion (bic) [28] in-
troduces a penalty for the number of model parameters
to the evaluation of a mixture model. adding a com-
ponent to a mixture model increases the number of pa-
rameters of the mixture with the number of parameters
of the distribution of the added component. the likeli-
hood of the data given the model can only increase by
adding extra components, adding the bic penalty re-
sults in a trade-off between the number of componentsand the likelihood of the data given the mixture model.
bic is formally deÔ¨Åned as bic= 2ln(^l)+kln(n),
where ^lis a maximized value for the data likelihood,
nis the sample size, and kis the number of parameters
to be estimated. a lower bic value indicates a better
model. we start with one component and iteratively in-
crease the number of components from ktok+ 1 as
long as the decrease in bic is larger than 10, which is
shown to be an appropriate threshold in [29].
3.2. data-model Ô¨Åtting stage
a generic approach to estimate a probability distri-
bution from data that lies on a circle or any other type
of manifold (e.g., the torus and sphere) was proposed
by cohen and welling in [30]. however, their ap-
proach estimates the probability distribution on a man-
ifold in a non-parametric manner, and it does not use
multiple probability distribution components, making
it unsuitable as a basis for clustering.
we cluster events generated by one sensor using a
mixture model consisting of components of the von
mises distribution, which is the circular equivalent of
the normal distribution. this technique is based on
the approach of banerjee et al. [31] that introduces a
clustering method based on a mixture of von mises-
fisher distribution components, which is a general-
ization of the 2-dimensional von mises distribution
ton-dimensional spheres. a probability density func-
tion for a von mises distribution with mean direc-
tionand concentration parameter is deÔ¨Åned as
pdf(j;) =1
2i0()ecos( ), where mean and
data pointare expressed in radians on the circle, such
that0662;0662; >0.i0repre-
sents the modiÔ¨Åed bessel function of order 0, deÔ¨Åned
asi0(k) =1
2r2
0ecos()d. asapproaches 0, the
distribution becomes uniform around the circle. as 
increases, the distribution becomes relatively concen-
trated around the mean and the von mises distribu-
tion starts to approximate a normal distribution. we Ô¨Åt
a mixture model of von mises components using the
package movmf [32] provided in r, using the number
of components found with the bic procedure of the
pre-Ô¨Åtting stage. a candidate label reÔ¨Ånement is cre-
ated based on the clustering result, where the original
label based on the sensor type is reÔ¨Åned into a new
number of distinct labels, each representing one von
mises component, where each event is relabeled ac-
cording to the von mises component that has the as-
signs the highest likelihood to the timestamp of that
event.n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models 7
3.3. data-model post-Ô¨Åtting stage
this stage consists of two procedures: a statistical
test to assess how well the clustering result Ô¨Åts the data,
and a test to assess whether the ordering relations in the
log become stronger by applying the relabeling func-
tion (i.e., whether it becomes more likely to discover
a precise process model with process discovery tech-
niques).
3.3.1. goodness-of-Ô¨Åt test
after Ô¨Åtting a mixture of von mises distributions
to the sensor events, we perform a goodness-of-Ô¨Åt
test to check whether the data could have been gen-
erated from this distribution. we describe the watson
u2statistic [33], a goodness-of-Ô¨Åt assessment based
on hypothesis testing. the watson u2statistic mea-
sures the discrepancy between the cumulative distribu-
tion function f()and the empirical distribution func-
tionfn()of some sample drawn from some popu-
lation and is deÔ¨Åned as u2=nr2
0h
fn() f() 
r2
0
fn() f()	
df()i2
df().
3.3.2. control Ô¨Çow test
the clustering obtained can be used as a label re-
Ô¨Ånement where we reÔ¨Åne the original event label into
a new label for each cluster. we assess the quality of
this label reÔ¨Ånement from a process perspective us-
ing the label reÔ¨Ånement evaluation method described
in [3]. this method tests whether the log statistics that
are used internally in many process discovery algo-
rithms become signiÔ¨Åcantly more deterministic by ap-
plying the label reÔ¨Ånement. hence, we test whether
the models become more precise after time-based la-
bel reÔ¨Ånement. an example of such a log statistic is
thedirect successor statistic: #+
l;>(b;c)is the number
of occurrences of bin the traces of lthat are directly
followed by c, i.e., in some 2l;i2f1;:::;jjg
we have label([(i)]) = bandlabel([(i+ 1)]) = c,
likewise, # 
l;>(b;c)is the number of occurrences of b
which are not directly followed by c. this control-Ô¨Çow
test [3] outputs a p-value that indicates whether such
log statistics of reÔ¨Åned activities a1;a2;::: of some
activity achange with statistical signiÔ¨Åcance. when
#+
l;>(b;c) = # 
l;>(b;c)the entropy of bbeing directly
followed by cis 1 bit, equal to a coin toss. in addi-
tion to the p-value, the test returns an information gain
value, which indicates the ratio of the decrease in the
total bits of entropy in the log statistics as a result of
applying the label reÔ¨Ånement. information gain can be
used as a selection criterion for label reÔ¨Ånements whenthere are multiple sensor types that can be reÔ¨Åned ac-
cording to the three steps of this framework. while the
entropy of a single log statistic cannot increase by ap-
plying a label reÔ¨Ånement, the information gain of a re-
Ô¨Ånement can still be negative when it is not useful, as it
increases the number activities in the log and therefore
also increases the total number of log statistics.
4. case study
we apply our time-based label reÔ¨Ånements approach
to the real-life smart home dataset described in van
kasteren et al. [24]. the van kasteren dataset consists
of 1285 events divided over fourteen different sensors.
we segment in days from midnight to midnight to de-
Ô¨Åne cases. figure 3a shows the process model discov-
ered on this event log with the inductive miner infre-
quent [34] process discovery algorithm with 20% Ô¨Ål-
tering, which is a state-of-the-art process discovery al-
gorithm that discovers a process model that describes
the most frequent 80% of behavior in the log. note
that this process model overgeneralizes, i.e., it allows
for too much behavior. at the beginning a (possibly
repeated) choice is made between Ô¨Åve transitions. at
the end of the process, the model allows any sequence
over the alphabet of Ô¨Åve activities, where each activity
occurs at least once.
we illustrate the framework by applying it to the
bedroom door sensor. rao‚Äôs spacing test results in a
test statistic of 241:0with152:5being the critical value
for signiÔ¨Åcance level 0:01, indicating that we can re-
ject the null hypothesis of a uniformly distributed set
ofbedroom door timestamps. hartigan‚Äôs dip test re-
sults in a p-value of 3:9510 4, indicating that we can
reject the null hypothesis that there is only one cluster
in the bedroom door data. figure 4 shows the bic val-
ues for different numbers of components in the model.
the Ô¨Ågure indicates that there are two clusters in the
data, as this corresponds to the lowest bic value. ta-
ble 2 shows the mean and parameters of the two clus-
ters found by optimizing the von mises mixture model
with the em algorithm. a value of 02radii equals
midnight. after applying the von mises mixture model
to the bedroom door events and assigning each event
to the maximum likelihood cluster we obtain a time
range of [3.08-10.44] for cluster 1 and a time range
of [17.06-0.88] for cluster 2. the watson u2test re-
sults in a test statistic of 0:368 and0:392 for clus-
ter 1 and 2 respectively with a critical value of 0:141
for a 0:01signiÔ¨Åcance level, indicating that the data is8 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
(a) original event data
(b) relabeled event data
fig. 3. process models discovered on the van kasteren data with sensor-level labels (a) and reÔ¨Åned labels (b) with the inductive miner infrequent
(20% Ô¨Åltering).
likely to be generated by the two von mises distribu-
tions found. the label reÔ¨Ånement evaluation method
[3] Ô¨Ånds statistically signiÔ¨Åcant differences between
the events from the two bedroom door clusters with re-
gard to their control-Ô¨Çow relations with other activities
in the log for 10 other activities using the signiÔ¨Åcance
level of 0:01, indicating that the two clusters are differ-
ent from a control-Ô¨Çow perspective. figure 3b shows
the process model discovered with the inductive miner
infrequent with 20% Ô¨Åltering after applying this label
reÔ¨Ånement to the van kasteren event log. the process
model still overgeneralizes the overall process, but the
label reÔ¨Ånement does help to restrict the behavior, as it
shows that the evening bedroom door events are suc-
ceeded by one or more events of type groceries cup-
board ,freezer ,cups cupboard ,fridge ,plates cupboard ,
orpans cupboard , while the morning bedroom door
events are followed by one or more frontdoor events.it seems that this person generally goes to the bed-
room in-between coming home from work and start-
ing to cook. the loop of the frontdoor events could be
caused by the person leaving the house in the morning
for work, resulting in no logged events until the person
comes home again by opening the frontdoor . note that
in figure 3a bedroom door andfrontdoor events can
occur an arbitrary number of times in any order. figure
3a furthermore does not allow for the bedroom door to
occur before the whole block of kitchen-located events
at the beginning of the net. in the process mining Ô¨Åeld
multiple quality criteria exist to express the Ô¨Åt between
a process model and an event log. two of those cri-
teria are Ô¨Åtness [35], which measures the degree to
which the behavior that is observed in the event log
can be replayed on the process model, and precision
[36], which measures the degree to which the behavior
that was never observed in the event log cannot be re-n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models 9
fig. 4. bic values for different numbers of components in the mix-
ture model.
table 2 estimated parameters for a mixture of von mises
components for bedroom door sensor events.
cluster   (radii)
cluster 1 0.76 2.05 3.85
cluster 2 0.24 5.94 1.56
played on the process model. low precision typically
indicates an overly general process model, that allows
for too much behavior. typically we aim for process
models with both high Ô¨Åtness and precision, therefore
one can consider the harmonic mean of the two, of-
ten referred to as f-score . the bedroom door label re-
Ô¨Ånement described above improves the precision of the
process model found with the inductive miner infre-
quent (20% Ô¨Åltering) [34] from 0:3577 when applied
on the original event log to 0:4447 when applied on
the reÔ¨Åned event log and improves the f-score from
0:5245 to0:6156 .
the label reÔ¨Ånement framework allows for reÔ¨Åne-
ment of multiple activities in the same log. for exam-
ple, label reÔ¨Ånements can be applied iteratively. fig-
ure 5 shows the effect of a second label reÔ¨Ånement
step, where plates cupboard using the same methodol-
ogy is reÔ¨Åned into two labels, representing time ranges
[7.98-14.02] and [16.05-0.92] respectively. this re-
Ô¨Ånement shows the additional insight that the evening
version of the plates cupboard occurs directly before
or after the microwave. generating multiple label re-
Ô¨Ånements, however, comes with the problem that the
control-Ô¨Çow test [3] is sensitive to the order in which
label reÔ¨Ånements are applied. because label reÔ¨Åne-
ments change the event log, it is possible that after
applying some label reÔ¨Ånement a, some other label
reÔ¨Ånement bstarts passing the control-Ô¨Çow test thatdid not pass this test before, or fails the test while it
passed before. additionally, applying one label reÔ¨Åne-
ment can change the information gain of applying an-
other label reÔ¨Ånement afterwards. for example, when
#+
l;>(b;c) = # 
l;>(b;c), i.e., bis followed by c50%
of the time, the entropy of this log statistic is 1, equal
to a coin toss. some label reÔ¨Ånement awhich reÔ¨Ånes
bintob1;b2where b1is always followed by candb2
is never followed by cis a good label reÔ¨Ånement from
an information gain point of view, as it decreases the
entropy of the log statistic to zero. some other label
reÔ¨Ånement b, which reÔ¨Ånes cintoc1;c2such that all
b‚Äôs are directly followed by c1‚Äôs and never by c2‚Äôs also
leads to information gain. however, applying reÔ¨Åne-
ment bafter having already applied reÔ¨Ånement a, does
not lead to any further information gain, since reÔ¨Åne-
ment ahas already made it deterministic whether or
notbis followed by any c. ineffective label reÔ¨Ånements
might even harm process discovery, as each reÔ¨Ånement
decreases the frequencies with which activities are ob-
served, thereby decreasing the amount of evidence for
certain control-Ô¨Çow relations.
5. on the ordering of label reÔ¨Ånements
as shown in section 4, the outcome of the con-
trol Ô¨Çow test test of a label reÔ¨Ånement can depend on
whether other label reÔ¨Ånements that passed the test of
the pre-Ô¨Åtting and post-Ô¨Åtting stages have already been
applied. therefore, in this section, we explore the ef-
fect of the ordering of label reÔ¨Ånements on real-life
event logs. we explore this effect by evaluating four
strategies to select a set of label reÔ¨Ånements to apply to
the event log. each of the strategies assume the desired
number kof label reÔ¨Ånements to be given.
all-at-once in this strategy we naively ignore the in-
Ô¨Çuence of the interplay between label reÔ¨Ånements
on the outcome of the control Ô¨Çow test and se-
lect top klabel reÔ¨Ånements in a single step based
on their information gain that is calculated using
the original event log, to which the other selected
label reÔ¨Ånements are not applied.
greedy search we Ô¨Årst apply the best label reÔ¨Åne-
ment in terms of information gain, then reÔ¨Åne the
event log using this label reÔ¨Ånement, and then it-
erate to Ô¨Ånd the next label reÔ¨Ånement calculating
the information gain using the reÔ¨Åned event log
from the previous step.10 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
toilet 
door
fig. 5. inductive miner infrequent (20% Ô¨Åltering) result after a second label reÔ¨Ånement.
exhaustive search this strategy exhaustively tries all
combinations of label reÔ¨Ånements and searches
for the label reÔ¨Ånement combinations that jointly
lead to the largest information gain. while the la-
bel reÔ¨Ånement combinations that are found with
this strategy are optimal in terms of information
gain, this strategy can quickly become compu-
tationally intractable for event logs that contain
many activities.
beam search in beam search only a predetermined
number b(called the beam size) of best partial so-
lutions are kept as candidates, i.e., only the best
bcombinations in terms of information gain that
were found consisting of nlabel reÔ¨Ånements are
explored to search for a new set of n+ 1 la-
bel reÔ¨Ånements. this is an intermediate strategy
in-between greedy and exhaustive search, with
greedy search being a beam search with b=1 and
exhaustive search being a beam search with b= 1.
we apply these four strategies on three event logs
from the human behavior domain and measure the Ô¨Åt-
ness,precision , and f-score of the model discovered
with the inductive miner infrequent [34] with 20% Ô¨Ål-
tering after each label reÔ¨Ånement. the Ô¨Årst event log
is the van kasteren [24] event log which we intro-
duced in section 4. the other two event logs are two
different households of a smart home experiment con-
ducted by mit [37]. the log household a of the mit
experiment contains 2701 events spread over 16 days,
with 26 different sensors. the household b log con-
tains 1962 events spread over 17 days and 20 different
sensors.
figure 6 shows the results. on all three event logs
the precision can be improved considerably through la-
bel reÔ¨Ånements. note that when applying only one la-
bel reÔ¨Ånement all four strategies are identical. when
reÔ¨Åning a second label the four strategies all select the
same label reÔ¨Ånement on all three logs. therefore thef-score, Ô¨Åtness, and precision for two reÔ¨Åned labels
happen to be identical. figure 6 shows that for the mit
household a data set there are 7 sensor types that can
be reÔ¨Åned, i.e., they passed the statistical tests of the
pre-Ô¨Åtting stage and their obtained clustering passed
the goodness-of-Ô¨Åt test. for the mit household b data
set there are 10 activities that can be reÔ¨Åned and for the
are 8 activities that can be reÔ¨Åned for the van kasteren
data set. however, since the f-score for all strategies
drops again after a few label reÔ¨Ånements, not all of
those label reÔ¨Ånements lead to better process mod-
els. the four strategies perform very similar in terms
of f-score. exhaustive search outperforms the other
strategies for a few reÔ¨Ånements on some logs, how-
ever, such improvements come with considerable com-
putation times. on the mit household b log, which
has 10 possible label reÔ¨Ånements, it takes about 25
minutes on an intel i7 processor to evaluate all pos-
sible combinations of reÔ¨Ånements. on logs with even
more possible reÔ¨Ånements the exhaustive strategy can
quickly become computationally infeasible. the all-
at-once strategy, which is computationally very fast
and only takes milliseconds to compute, shows almost
identical performance for mit household a and van
kasteren. when making six or more reÔ¨Ånements on
the mit household b log, the performance of the all-
at-once strategy lags behind the other strategies, in-
dicating that the label reÔ¨Ånements that were applied
earlier cause the later label reÔ¨Ånements to be less ef-
fective. however, the optimum in f-score for this log
lies at three reÔ¨Ånements, therefore the sixth reÔ¨Åne-
ment, where a performance difference between non-
exhaustive strategies emerges should not be performed
with any of the strategies in the Ô¨Årst place.
since the f-score decreases again when applying
too many label reÔ¨Ånements it is important to have a
stopping criterion that prevents reÔ¨Åning the event log
too much. the dashed line in figure 6 shows the re-n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models 11
)√≠vfruh )lwqhvv 3uhflvlrq mit a mit b vdq.dvwhuhq 
0 1 2 3 4 5 6 7 8 910 0 1 2 3 4 5 6 7 8 910 0 1 2 3 4 5 6 7 8 910 0.00 0.25 0.50 0.75 1.00 
0.00 0.25 0.50 0.75 1.00 
0.00 0.25 0.50 0.75 1.00 
1xpehuri5hilqhg/dehov vdoxh st udwhj\ 
$oo√≠dw√≠rqfh 
%hdpvhdufkvl zh 
([kdxvwl vh
*uhhg\ 
ouljlqdoorj 
fig. 6. fitness, precision, and f-score of the inductive miner infrequent (20% Ô¨Åltering) models obtained from the original and reÔ¨Åned versions
of three event logs.
sults when we only reÔ¨Åne a label when the information
gain of the reÔ¨Ånement is larger than zero. on the mit
households a and b logs this stopping criterion causes
all strategies to stop at the best combination of label re-
Ô¨Ånements in f-score, consists respectively of one and
three reÔ¨Ånements. this indicates that the control Ô¨Çow
test [3] provides a useful stopping criterion for label
reÔ¨Ånements.
all strategies except the exhaustive search strategy
suggest as the fourth reÔ¨Ånement for mit b a reÔ¨Åne-
ment that decreases the f-score sharply, to increase it
again with a Ô¨Åfth reÔ¨Ånement. this is caused by an un-
helpful reÔ¨Ånement being found as the fourth reÔ¨Åne-
ment by those strategies, which causes the frequen-
cies to drop below the Ô¨Åltering threshold of the in-
ductive miner, leading to a model that is less pre-
cise. at the Ô¨Åfth reÔ¨Ånement, the follows statistics of
other activities drop as well, causing the follows statis-
tics that dropped in the fourth reÔ¨Ånement to be rel-
atively higher and above the threshold again. on the
van kasteren log the optimum in f-score is to make
only one reÔ¨Ånement, although the f-score after apply-
ing the second and third reÔ¨Ånement as found by the
exhaustive and beam search is almost identical. the
all-at-once strategy stops after applying only two re-
Ô¨Ånements while the other strategies apply a third re-
Ô¨Ånement. the best reÔ¨Ånement combination found with
the all-at-once strategy using the stopping criterion isidentical to the reÔ¨Ånement combination found with the
other strategies, suggesting that in practice the differ-
ences between the four approaches are small. on real-
life smart home environment event logs the effect that
one label reÔ¨Ånement inÔ¨Çuences the control Ô¨Çow test
outcome of others is limited.
figures 7 and 8 shows the process model that
are discovered with the inductive miner infrequent
with 20% Ô¨Åltering respectively from the original mit
household a event log and the event log obtained af-
ter applying the optimal combination of label reÔ¨Åne-
ments found in the results of figure 6. because of the
silent transitions, the process model discovered from
the original event log allows for almost all orderings
over the sensor types. even though the transition labels
in the process model discovered from the reÔ¨Åned event
log are not readable because of the size, it is clear from
the structure of the process model that it is much more
behaviorally speciÔ¨Åc, containing a mix of sequential
orderings, parallel blocks, and choices over the sensor
types. especially interesting is the part indicated by
the blue dashed ellipse, which contains a parallel block
consisting of a cabinet , the oven andburner , and the
dishwasher , showing a clearly recognizable cooking
routine. furthermore, the part indicated by the red dot-
ted ellipse indicates a sequentially ordered part, con-
sisting of some door sensor registering the opening of12 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
fig. 7. the inductive miner infrequent (20% Ô¨Åltering) process model discovered from the original mit a event log.
washingmachine
refrigerator
fig. 8. the inductive miner infrequent (20% Ô¨Åltering) process model discovered from the reÔ¨Åned mit a event log.
a door, followed by starting the washing machine and
then the laundry dryer .
the time-based label reÔ¨Ånement generation frame-
work as well as the four strategies to generate mul-
tiple label reÔ¨Ånements on the same event log are im-
plemented and publicly available in the process min-
ing toolkit prom [38] as part of the labelreÔ¨Ånements1
package.
6. related work
we classify related work into three categories. the
Ô¨Årst category of related work concerns techniques from
the process mining Ô¨Åeld, speciÔ¨Åcally focusing on tech-
niques that, like our approach, focus on reÔ¨Åning activ-
ity labels. the second category of related work, also
originating from the process mining area, focuses on
the interplay between ordering between process activ-
1https://svn.win.tue.nl/repos/prom/packages/labelreÔ¨Ånements/ities and external information, such as time. the third
category of related work originates from the ambient
intelligence and smart home environments Ô¨Åeld, focus-
ing on work on mining temporal relations between hu-
man activities. we use these three categories to struc-
ture this section.
6.1. label splits and reÔ¨Ånements in process mining
the task of Ô¨Ånding reÔ¨Ånements of event labels in
the event log is closely related to the task of min-
ing process models with duplicate activities, in which
the resulting process model can contain multiple tran-
sitions/nodes with the same label. from the point of
view of the behavior allowed by a process model, it
makes no difference whether a process model is dis-
covered on an event log with reÔ¨Åned labels, or whether
a process model is discovered with duplicate activities
such that each transition/node of the duplicate activ-
ity precisely covers one version of the reÔ¨Åned label.
however, a reÔ¨Åned label may also provide additionaln. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models 13
insights as the new labels are explainable in terms of
time. the Ô¨Årst process discovery algorithm capable of
discovering duplicate tasks was proposed by herbst
and karagiannis in 2004 [39], after which many others
have been proposed, including the evolutionary tree
miner [40], the -algorithm [41], the #-algorithm
[42], the enhancedwfminer [43]. an alternative ap-
proach has been proposed by v√°zques-barreiros [44]
et al., who describe a local search based approach to
repair a process model to include duplicate activities,
starting from an event log and a process model without
duplicate activities. existing work on mining models
with duplicate activities all base their duplicate activ-
ities on how well the event log Ô¨Åts the process model,
and do not try to Ô¨Ånd semantic differences between the
different versions of the activities in the form of at-
tribute differences.
the work that is closest to our work is the work by
lu et al. [45], who describe an approach to pre-process
an event log by reÔ¨Åning event labels with the goal of
discovering a process model with duplicate activities.
the method proposed by lu et al., however, does not
base the relabelings on data attributes of those events
and only uses the control Ô¨Çow context, leaving uncer-
tainty whether two events relabeled differently are ac-
tually semantically different.
6.2. data-aware process mining
another area of related work is data-aware process
mining, where the aim is to discover rules with regard
to data attributes of events that decide decision points
in the process. de leoni and van der aalst [46] pro-
posed a method that discovers data guards for deci-
sion points in the process based on alignments and de-
cision tree learning. this approach relies on the dis-
covery of a behaviorally well-Ô¨Åtting process model
from the original event log. when only overgeneral-
izing process models (i.e., allowing for too much be-
havior) can be discovered from an event log, the cor-
rect decision points might not be present in the dis-
covered process model at all, resulting in this approach
not being able to discover the data dependencies that
are in the event log. our label reÔ¨Ånements use data at-
tributes prior to process discovery to enable the dis-
covery of more behaviorally constrained process mod-
els by bringing parts of the event attribute space to the
event label.6.3. temporal relation mining for smart home
environments
galushka et al. [10] provide an overview of tempo-
ral data mining techniques and discuss their applica-
bility to data from smart home environments. many of
the techniques described in the overview focus on real-
valued time series data, instead of discrete sequences
which we assume as input in this work. for discrete
sequence data, galushka et al. [10] propose the use of
sequential rule mining techniques, which can discover
rules of the form ‚Äú if event aoccurs then event boccurs
with time t‚Äù.
huynh et al. [9] proposed to use topic modeling
to mine activity patterns from sequences of human
events. topic modeling originates from the Ô¨Åeld of nat-
ural language processing and addresses the challenge
to Ô¨Ånd topics in textual documents and assign a dis-
tribution over these topics to each document. how-
ever, the discovered topics do not represent the hu-
man activities in terms of control-Ô¨Çow ordering con-
structs like sequential ordering, concurrent execution,
choices, and loops.
ogale et al. [11] proposed an approach to describe
the temporal relation between human behavior activi-
ties from video data using context-free grammars, us-
ing the human poses extracted from the video as the
alphabet. like petri nets, context-free grammars deÔ¨Åne
a formal language over its alphabet. however, petri
nets have a graphical representation, which is lack-
ing for grammars. furthermore, as shown by peter-
son [12], petri net languages are a subclass of context-
sensitive languages, and some petri net languages are
not context-free. this indicates that some relations
over activities that can be expressed in petri nets can-
not be expressed in a context-free grammar.
one particularly related technique, called temporal
relation discovery of daily activities (tereda) , was
proposed by nazerfard et al. [13]. tereda leverages
temporal association rule mining techniques to mine
ordering relations between activities as well as patterns
in their timestamp and duration. the ordering relations
between activities that are discovered by tereda are
restricted to the form ‚Äú activity afollows activity b‚Äù,
where our proposed approach of modeling the rela-
tions with petri nets allow for modeling of more com-
plex relations between larger number of activities, such
as: ‚Äúthe occurrences of activity bthat are preceded by
activity aare followed by both activity dande, but in
arbitrary order‚Äù . the patterns in the timestamps are
obtained by Ô¨Åtting a gaussian mixture model (gmm)14 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
with the expectation-maximization (em) algorithm,
thereby ignoring problems caused by the circularity of
the 24-hour clock introduced in this paper.
jukkala and cook [14] propose a method to mine
temporal relations between activities from smart home
environments logs where the temporal relation patterns
are expressed in allen‚Äôs interval algebra [47]. allen‚Äôs
interval algebra allows the expression of thirteen dis-
tinct types of temporal relations between two activities
based on both the start andendtimestamps of these
activities. the approach of jukkala and cook [14] is
limited to describing the relations between pairs of ac-
tivities, and more complex relations between three or
higher numbers of activities cannot be discovered. the
aim of mining the patterns in allen‚Äôs interval algebra
representation is to increase the accuracy of activity
recognition systems, while our goal is knowledge dis-
covery. several papers from the process mining area
have focused on mining temporal relations between ac-
tivities from smart home event logs. leotta et al. [5]
postulate three main research challenges for the appli-
cability of process mining technique for smart home
data. one of those three challenges is to improve pro-
cess mining techniques to address the less structured
nature of human behavior as compared to business pro-
cesses. our technique addresses this challenge, as the
time-based label reÔ¨Ånements help in uncovering re-
lations between activities with process mining tech-
niques that could not be found without applying time-
based label reÔ¨Ånements.
dimaggio et al. [6] and sztyler et al. [2, 7] propose
to mine fuzzy models [48] to describe the temporal
relations between human activities. the fuzzy miner
[48], a process discovery algorithm that mines a fuzzy
model from an event log, is a process discovery al-
gorithm that is designed speciÔ¨Åcally for weakly struc-
tured processes. however, fuzzy models, in contrast
to petri nets, do not deÔ¨Åne a formal language over the
activities, and are therefore not precise on what activity
orderings are allowed and which are not. while mining
a fuzzy model description of human activities is less
challenging compared to mining a process model with
formal semantics, it is also limited in the insights that
can be obtained from it.
finally, insights in the human routines can be ob-
tained through the discovery of local process models
[49], which bridges process mining and sequential pat-
tern mining by Ô¨Ånding patterns that include high-level
process model constructs such as (exclusive) choices,
loops, and concurrency. however, local process mod-
els, as opposed to process discovery, only give insightinto frequent subroutines of behavior and do not pro-
vide the global picture of the behavior throughout the
day from start to end.
7. conclusion & future work
we have proposed a framework based on techniques
from the Ô¨Åeld of circular statistics to reÔ¨Åne event la-
bels automatically based on their timestamp attribute.
we have shown on a real-life event log that this frame-
work can be used to discover label reÔ¨Ånements that al-
low for the discovery of more insightful and behav-
iorally more speciÔ¨Åc process models. additionally, we
explored four strategies to search combinations of la-
bel reÔ¨Ånements. we found that the difference between
an all-at-once strategy, which ignores that one label re-
Ô¨Ånement can have an effect on the usefulness of other
label reÔ¨Ånements, and other more computationally ex-
pensive strategies is often limited. an interesting area
of future work is to explore the use of other types of
event data attributes to reÔ¨Åne labels, e.g., power val-
ues of sensors. a next research step would be to ex-
plore label reÔ¨Ånements based on a combination of data
attributes combined. this introduces new challenges,
such as the clustering on partially circular and par-
tially euclidean data spaces. additionally, other time-
based types of circles than the daily circle described in
this paper, such as the week, month, or year circle, are
worth investigating.
references
[1] w.m.p. van der aalst, process mining: data science in action ,
springer science & business media, 2016.
[2] t. sztyler, j. v√∂lker, j. carmona, o. meier and h. stucken-
schmidt, discovery of personal processes from labeled sen-
sor data ‚Äì an application of process mining to personalized
health care, in: proceedings of the international workshop on
algorithms & theories for the analysis of event data , ceur-
ws.org, 2015, pp. 22‚Äì23.
[3] n. tax, n. sidorova, r. haakma and w.m.p. van der aalst,
log-based evaluation of label splits for process models, proce-
dia computer science 96(2016), 63‚Äì72.
[4] n. tax, n. sidorova, r. haakma and w.m.p. van der aalst,
event abstraction for process mining using supervised learning
techniques, in: proceedings of the sai conference on intelli-
gent systems , springer, 2016, pp. 161‚Äì170.
[5] f. leotta, m. mecella and j. mendling, applying process min-
ing to smart spaces: perspectives and research challenges, in:
enterprise, business-process and information systems model-
ing, springer, 2015, pp. 298‚Äì304.n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models 15
[6] m. dimaggio, f. leotta, m. mecella and d. sora, process-
based habit mining: experiments and techniques, in: pro-
ceedings of the ieee international conference on ubiquitous
intelligence & computing , ieee, 2016, pp. 145‚Äì152.
[7] t. sztyler, j. carmona, j. v√∂lker and h. stuckenschmidt, self-
tracking reloaded: applying process mining to personalized
health care from labeled sensor data, in: transactions on petri
nets and other models of concurrency xi , springer, 2016,
pp. 160‚Äì180.
[8] n. tax, n. sidorova, r. haakma and w.m.p. van der aalst,
mining process model descriptions of daily life through
event abstraction, in: intelligent systems and applications ,
springer, 2018, chap. to appear.
[9] t. huynh, m. fritz and b. schiele, discovery of activity pat-
terns using topic models, in: proceedings of the 10th inter-
national conference on ubiquitous computing , acm, 2008,
pp. 10‚Äì19.
[10] m. galushka, d. patterson and n. rooney, temporal data min-
ing for smart homes, in: designing smart homes , springer,
2006, pp. 85‚Äì108.
[11] a. ogale, a. karapurkar and y . aloimonos, view-invariant
modeling and recognition of human actions using grammars,
springer, 2007, pp. 115‚Äì126.
[12] j.l. peterson, petri net theory and the modeling of systems ,
prentice hall, 1981.
[13] e. nazerfard, p. rashidi and d. cook, using association rule
mining to discover temporal relations of daily activities, to-
ward useful services for elderly and people with disabilities
(2011), 49‚Äì56.
[14] v .r. jakkula and d.j. cook, using temporal relations in smart
environment data for activity prediction, in: proceedings of the
icml workshop on the induction of process models , 2007.
[15] w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski
and a.p. barros, workÔ¨Çow patterns, distributed and parallel
databases 14(1) (2003), 5‚Äì51.
[16] n. tax, e. alasgarov, n. sidorova and r. haakma, on gen-
eration of time-based label reÔ¨Ånements, in: proceedings of
the 25th international workshop on concurrency, speciÔ¨Åcation
and programming , 2016.
[17] t. murata, petri nets: properties, analysis and applications,
proceedings of the ieee 77(4) (1989), 541‚Äì580.
[18] j.m.e.m. van der werf, b.f. van dongen, c.a.j. hurkens and
a. serebrenik, process discovery using integer linear program-
ming, fundamenta informaticae 94(3‚Äì4) (2009), 387‚Äì412.
[19] s. goedertier, d. martens, j. vanthienen and b. baesens, ro-
bust process discovery with artiÔ¨Åcial negative events, journal
of machine learning research 10(jun) (2009), 1305‚Äì1340.
[20] v . liesaputra, s. yongchareon and s. chaisiri, efÔ¨Åcient pro-
cess model discovery using maximal pattern mining, in: pro-
ceedings of the international conference on business process
management , springer, 2015, pp. 441‚Äì456.
[21] a. weijters and j. ribeiro, flexible heuristics miner (fhm), in:
proceedings of the ieee symposium on computational intel-
ligence and data mining (cidm) , ieee, 2011, pp. 310‚Äì317.
[22] a. augusto, r. conforti, m. dumas, m. la rosa and g. bruno,
automated discovery of structured process models: discover
structured vs. discover and structure, in: proceedings of the
international conference on conceptual modeling , springer,
2016, pp. 313‚Äì329.[23] a.p. dempster, n.m. laird and d.b. rubin, maximum likeli-
hood from incomplete data via the em algorithm, journal of
the royal statistical society. series b. (1977), 1‚Äì38.
[24] t. van kasteren, a. noulas, g. englebienne and b. kr√∂se, ac-
curate activity recognition in a home setting, in: proceedings of
the 10th international conference on ubiquitous computing ,
acm, 2008, pp. 1‚Äì9.
[25] k.v . mardia and p.e. jupp, directional statistics , v ol. 494,
john wiley & sons, 2009.
[26] j. rao, some tests based on arc-lengths for the circle, sankhy ¬Øa:
the indian journal of statistics, series b (1976), 329‚Äì338.
[27] j.a. hartigan and p.m. hartigan, the dip test of unimodality,
the annals of statistics (1985), 70‚Äì84.
[28] g. schwarz, estimating the dimension of a model, the annals
of statistics 6(2) (1978), 461‚Äì464.
[29] r.e. kass and a.e. raftery, bayes factors, journal of the
american statistical association 90(430) (1995), 773‚Äì795.
[30] t. cohen and m. welling, harmonic exponential families on
manifolds, in: proceedings of the 32nd international confer-
ence on machine learning , jmlr w&cp, 2015, pp. 1757‚Äì
1765.
[31] a. banerjee, i.s. dhillon, j. ghosh and s. sra, clustering
on the unit hypersphere using von mises-fisher distributions,
journal of machine learning research 6(sep) (2005), 1345‚Äì
1382.
[32] k. hornik and b. gr√ºn, movmf: an r package for Ô¨Åtting mix-
tures of von mises-fisher distributions, journal of statistical
software 58(10) (2014), 1‚Äì31.
[33] g.s. watson, goodness-of-Ô¨Åt tests on a circle. ii, biometrika
49(1/2) (1962), 57‚Äì63.
[34] s.j.j. leemans, d. fahland and w.m.p. van der aalst, discov-
ering block-structured process models from event logs contain-
ing infrequent behaviour, in: proceedings of the international
conference on business process management , springer, 2013,
pp. 66‚Äì78.
[35] a. rozinat and w.m.p. van der aalst, conformance checking
of processes based on monitoring real behavior, information
systems 33(1) (2008), 64‚Äì95.
[36] j. munoz-gama and j. carmona, a fresh look at precision
in process conformance, in: proceedings of the international
conference on business process management , springer, 2010,
pp. 211‚Äì226.
[37] e.m. tapia, s.s. intille and k. larson, activity recognition in
the home using simple and ubiquitous sensors, in: proceed-
ings of the international conference on pervasive computing ,
springer, 2004, pp. 158‚Äì175.
[38] b.f. van dongen, a.j.m.m. weijters and w.m.p. van der aalst,
the prom framework: a new era in process mining tool
support, applications and theory of petri nets (2005), 444.
[39] j. herbst and d. karagiannis, workÔ¨Çow mining with in-
wolve, computers in industry 53(3) (2004), 245‚Äì264.
[40] j.c.a.m. buijs, b.f. van dongen and w.m.p. van der aalst,
on the role of Ô¨Åtness, precision, generalization and simplic-
ity in process discovery, in: otm confederated international
conferences "on the move to meaningful internet systems" ,
springer, 2012, pp. 305‚Äì322.
[41] j. li, d. liu and b. yang, process mining: extending -
algorithm to mine duplicate tasks in process logs, in: advances
in web and network technologies, and information manage-
ment , springer, 2007, pp. 396‚Äì407.16 n. tax et al. / generating time-based label reÔ¨Ånements to discover more precise process models
[42] c.-q. gu, h.-y . chang and y . yi, workÔ¨Çow mining: extending
the-algorithm to mine duplicate tasks, in: proceedings of the
international conference on machine learning and cybernet-
ics, v ol. 1, ieee, 2008, pp. 361‚Äì368.
[43] f. folino, g. greco, a. guzzo and l. pontieri, discovering
expressive process models from noised log data, in: proceed-
ings of the international database engineering & applications
symposium , acm, 2009, pp. 162‚Äì172.
[44] b. v√°zquez-barreiros, m. mucientes and m. lama, mining
duplicate tasks from discovered processes, in: proceedings of
the international workshop on algorithms & theories for the
analysis of event data , ceur-ws.org, 2015, pp. 78‚Äì82.
[45] x. lu, d. fahland, f.j.h.m. van den biggelaar and
w.m.p. van der aalst, handling duplicated tasks in process dis-
covery by reÔ¨Åning event labels, in: proceedings of the interna-
tional conference on business process management , springer,
2016, pp. 90‚Äì107.
[46] m. de leoni and w.m.p. van der aalst, data-aware process
mining: discovering decisions in processes using alignments,
in:proceedings of the 28th annual acm symposium on ap-
plied computing , acm, 2013, pp. 1454‚Äì1461.
[47] j.f. allen, maintaining knowledge about temporal intervals,
communications of the acm 26(11) (1983), 832‚Äì843.[48] c. g√ºnther and w.m.p. van der aalst, fuzzy mining‚Äìadaptive
process simpliÔ¨Åcation based on multi-perspective metrics, in:
proceedings of the international conference on business pro-
cess management , springer, 2007, pp. 328‚Äì343.
[49] n. tax, n. sidorova, r. haakma and w.m.p. van der aalst,
mining local process models, journal of innovation in digital
ecosystems 3(2) (2016), 183‚Äì196.
[50] w. reisig and g. rozenberg, lectures on petri nets i: basic
models: advances in petri nets , v ol. 1491, springer science &
business media, 1998.
[51] r core team, r: a language and environment for statistical
computing , r foundation for statistical computing, vienna,
austria, 2013, isbn 3-900051-07-0. http://www.r-project.
org/.
[52] t. benaglia, d. chauveau, d. hunter and d. young, mixtools:
an r package for analyzing Ô¨Ånite mixture models, journal of
statistical software 32(6) (2009), 1‚Äì29.
[53] k. liu, w.k. cheung and j. liu, extracting behavioral mo-
tifs for characterizing human daily activities in smart envi-
ronments, in: proceedings of the acm sigkdd workshop on
health informatics , 2012, pp. 1‚Äì8.