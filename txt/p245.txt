workﬂow mining:
discovering process models from event logs
w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tm.tue.nl
abstract. contemporary workﬂow management systems are driven by explicit process models,
i.e., a completely speciﬁed workﬂow design is required in order to enact a given workﬂow pro-cess. creating a workﬂow design is a complicated time-consuming process and typically thereare discrepancies between the actual workﬂow processes and the processes as perceived by themanagement. therefore, we have developed techniques for discovering workﬂow models. startingpoint for such techniques is a so-called “workﬂow log” containing information about the workﬂow
process as it is actually being executed. we present a new algorithm to extract a process model
from such a log and represent it in terms of a petri net. however, we will also demonstrate thatit is not possible to discover arbitrary workﬂow processes. in this paper we explore a class ofworkﬂow processes that can be discovered. we show that the α-algorithm can successfully mine
any workﬂow represented by a so-called swf-net.
key words : workﬂow mining, workﬂow management, data mining, petri nets.
1 introduction
during the last decade workﬂow management concepts and technology [3, 5, 15, 26, 28]
have been applied in many enterprise information systems. workﬂow management sys-
tems such as staﬀware, ibm mqseries, cosa, etc. oﬀer generic modeling and enact-ment capabilities for structured business processes. by making graphical process def-
initions, i.e., models describing the life-cycle of a typical case (workﬂow instance) in
isolation, one can conﬁgure these systems to support business processes. besides pureworkﬂow management systems many other software systems have adopted workﬂow
technology. consider for example erp (enterprise resource planning) systems such as
sap, peoplesoft, baan and oracle, crm (customer relationship management) soft-ware, etc. despite its promise, many problems are encountered when applying workﬂowtechnology. one of the problems is that these systems require a workﬂow design, i.e.,
a designer has to construct a detailed model accurately describing the routing of work.
modeling a workﬂow is far from trivial: it requires deep knowledge of the workﬂowlanguage and lengthy discussions with the workers and management involved.instead of starting with a workﬂow design, we start by gathering information about
the workﬂow processes as they take place. we assume that it is possible to record events
such that (i) each event refers to a task (i.e., a well-deﬁned step in the workﬂow), (ii)each event refers to a case (i.e., a workﬂow instance), and (iii) events are totally ordered(i.e., in the log events are recorded sequentially even though tasks may be executed in
parallel). any information system using transactional systems such as erp, crm, or
workﬂow management systems will oﬀer this information in some form. note that wedo not assume the presence of a workﬂow management system. the only assumption
we make, is that it is possible to collect workﬂow logs with event data. these workﬂow
logs are used to construct a process speciﬁcation which adequately models the behaviorregistered. we use the term process mining for the method of distilling a structured
process description from a set of real executions.
case identifier task identifier
case 1 task a
case 2 task a
case 3 task a
case 3 task b
case 1 task b
case 1 task c
case 2 task c
case 4 task a
case 2 task b
case 2 task d
case 5 task a
case 4 task c
case 1 task d
case 3 task c
case 3 task d
case 4 task b
case 5 task e
case 5 task d
case 4 task d
table 1. a workﬂow log.
to illustrate the principle of process mining, we consider the workﬂow log shown in
table 1. this log contains information about ﬁve cases (i.e., workﬂow instances). the
log shows that for four cases (1,2,3, and 4) the tasks a, b, c, and d have been executed.for the ﬁfth case only three tasks are executed: tasks a, e, and d. each case starts withthe execution of a and ends with the execution of d. if task b is executed, then also task
c is executed. however, for some cases task c is executed before task b. based on the
information shown in table 1 and by making some assumptions about the completenessof the log (i.e., assuming that the cases are representative and a suﬃcient large subset
2of possible behaviors is observed), we can deduce for example the process model shown
in figure 1. the model is represented in terms of a petri net [39]. the petri net starts
with task a and ﬁnishes with task d. these tasks are represented by transitions. afterexecuting a there is a choice between either executing b and c in parallel or justexecuting task e. to execute b and c in parallel two non-observable tasks (and-split
and and-join) have been added. these tasks have been added for routing purposes
only and are not present in the workﬂow log. note that we assume that two tasks arein parallel if they appear in any order. however, by distinguishing between start events
and end events for tasks it is possible to explicitly detect parallelism. start events and
end events can also be used to indicate that tasks take time. however, to simplify thepresentation we assume tasks to be atomic without losing generality. in fact in our
tool emit [4] we reﬁne this even further and assume a customizable transaction model
for tasks involving events like “start task”, “withdraw task”, “resume task”, “completetask”, etc. [4]. nevertheless, it is important to realize that such an approach only works
if events these are recorded at the time of their occurrence.
aand
-splitb
cand
-join
d
e
fig. 1.a process model corresponding to the workﬂow log.
the basic idea behind process mining, also referred to as workﬂow mining, is to
construct figure 1 from the information given in table 1. in this paper, we will presenta new algorithm and prove its correctness.
process mining is useful for at least two reasons. first of all, it could be used as a tool
to ﬁnd out how people and/or procedures really work. consider for example processessupported by an erp system like sap (e.g., a procurement process). such a system
logs all transactions but in many cases does not enforce a speciﬁc way of working. in
such an environment, process mining could be used to gain insight in the actual process.another example would be the ﬂow of patients in a hospital. note that in such an
3environment all activities are logged but information about the underlying process is
typically missing. in this context it is important to stress that management information
systems provide information about key performance indicators like resource utilization,ﬂow times, and service levels but notabout the underlying business processes (e.g.,
causal relations, ordering of activities, etc.). second, process mining could be used for
delta analysis , i.e., comparing the actual process with some predeﬁned process. note
that in many situations there is a descriptive or prescriptive process model. such a modelspeciﬁes how people and organizations are assumed/expected to work. by comparing
the descriptive or prescriptive process model with the discovered model, discrepancies
between both can be detected and used to improve the process. consider for example theso-called reference models in the context of sap. these models describe how the system
should be used. using process mining it is possible to verify whether this is the case. in
fact, process mining could also be used to compare diﬀerent departments/organizationsusing the same erp system.
an additional beneﬁt of process mining is that information about the way people
and/or procedures really work and diﬀerences between actual processes and predeﬁnedprocesses can be used to trigger business process reengineering (bpr) eﬀorts or toconﬁgure “process-aware information systems” (e.g., workﬂow, erp, and crm systems).
table 1 contains the minimal information we assume to be present. in many appli-
cations, the workﬂow log contains a timestamp for each event and this information canbe used to extract additional causality information. moreover, we are also interested in
the relation between attributes of the case and the actual route taken by a particular
case. for example, when handling traﬃc violations: is the make of a car relevant for therouting of the corresponding traﬃc violations? (e.g., people driving a ferrari always
pay their ﬁnes in time.)
for this simple example, it is quite easy to construct a process model that is able
to regenerate the workﬂow log. for larger workﬂow models this is much more diﬃcult.for example, if the model exhibits alternative and parallel routing, then the workﬂow
log will typically not contain all possible combinations. consider 10 tasks which can
be executed in parallel. the total number of interleavings is 10! = 3628800. it is notrealistic that each interleaving is present in the log. moreover, certain paths through
4the process model may have a low probability and therefore remain undetected. noisy
data (i.e., logs containing rare events, exceptions and/or incorrectly recorded data) can
further complicate matters.
in this paper, we do not focus on issues such as noise. we assume that there is no
noise and that the workﬂow log contains “suﬃcient” information. under these idealcircumstances we investigate whether it is possible to rediscover the workﬂow process,
i.e., for which class of workﬂow models is it possible to accurately construct the model by
merely looking at their logs. this is not as simple as it seems. consider for example theprocess model shown in figure 1. the corresponding workﬂow log shown in table 1 doesnot show any information about the and-split and the and-join. nevertheless, they
are needed to accurately describe the process. these and other problems are addressed
in this paper. for this purpose we use workﬂow nets (wf-nets). wf-nets are a class of
petri nets speciﬁcally tailored towards workﬂow processes. figure 1 shows an example
of a wf-net.
generate workflow log
based on wf-netconstruct wf-net based
on applying workflow
mining techniquesworkflow logwf-net wf-net
wf1wf2
wf1 = wf2 ?
fig. 2.the rediscovery problem: for which class of wf-nets is it guaranteed that wf 2is equivalent to wf 1?
to illustrate the rediscovery problem we use figure 2. suppose we have a log based on
many executions of the process described by a wf-net wf 1. based on this workﬂow log
and using a mining algorithm we construct a wf-net wf 2. an interesting question is
whether wf 1=wf 2. in this paper, we explore the class of wf-nets for which wf 1=
wf 2. note that the rediscovery problem is only addressed to explore the theoretical
limits of process mining and to test the algorithm presented in this paper. we have used
5these results to develop tools that can discover unknown processes and have successfully
applied these tools to mine real processes.
the remainder of this paper is organized as follows. first, we introduce some prelim-
inaries, i.e., petri nets and wf-nets. in section 3 we formalize the problem addressed
in this paper. section 4 discusses the relation between causality detected in the log and
places connecting transitions in the wf-net. based on these results, an algorithm forprocess mining is presented. the quality of this algorithm is supported by the fact that
it is able to rediscover a large class of workﬂow processes. the paper ﬁnishes with an
overview of related work and some conclusions.
2 preliminaries
this section introduces the techniques used in the remainder of this paper. first, we
introduce standard petri-net notations, then we deﬁne the class of wf-nets.
2.1 petri nets
we use a variant of the classic petri-net model, namely place/transition nets. for an
elaborate introduction to petri nets, the reader is referred to [12, 37, 39].
deﬁnition 2.1. (p/t-nets)1an place/transition net, or simply p/t-net, is a tuple
(p,t,f )w h e r e :
1.pis a ﬁnite set of places ,
2.tis a ﬁnite set of transitions such that p∩t=∅,a n d
3.f⊆(p×t)∪(t×p) is a set of directed arcs, called the ﬂow relation .
amarked p/t-net is a pair ( n,s), wheren=(p,t,f ) is a p/t-net and where sis a
bag overpdenoting the marking of the net. the set of all marked p/t-nets is denoted
n.
am a r k i n gi sa bagover the set of places p, i.e., it is a function from pto the natural
numbers. we use square brackets for the enumeration of a bag, e.g., [ a2,b,c3] denotes
the bag with two a-s, oneb, and three c-s. the sum of two bags ( x+y), the diﬀerence
1in the literature, the class of petri nets introduced in deﬁnition 2.1 is sometimes referred to as the class of
(unlabeled) ordinary p/t-nets to distinguish it from the class of petri nets that allows more than one arc
between a place and a transition.
6(x−y), the presence of an element in a bag ( a∈x), and the notion of subbags
(x≤y) are deﬁned in a straightforward way and they can handle a mixture of sets
and bags.
letn=(p,t,f ) be a p/t-net. elements of p∪tare called nodes . a nodexis an
input node of another node yiﬀ there is a directed arc from xtoy(i.e., (x,y)∈f).
nodexis an output node ofyiﬀ (y,x)∈f. for anyx∈p∪t,n•x={y|(x,y)∈f}
andxn•={y|(x,y)∈f}; the superscript nmay be omitted if clear from the context.
figure 1 shows a p/t-net consisting of 8 places and 7 transitions. transition ahas
one input place and one output place, transition and-split has one input place and
two output places, and transition and-join has two input places and one output place.
the black dot in the input place of arepresents a token. this token denotes the initial
marking. the dynamic behavior of such a marked p/t-net is deﬁned by a ﬁring rule .
deﬁnition 2.2. (firing rule) let (n=(p,t,f ),s) be a marked p/t-net. transition
t∈tisenabled , denoted ( n,s)[t/angbracketright,i ﬀ•t≤s.t h e ﬁring rule [/angbracketright⊆n×t×n
is the smallest relation satisfying for any ( n=(p,t,f ),s)∈n and anyt∈t,
(n,s)[t/angbracketright⇒(n,s)[t/angbracketright(n,s−•t+t•).
in the marking shown in figure 1 (i.e., one token in the source place), transition ais
enabled and ﬁring this transition removes the token from the input place and puts atoken in the output place. in the resulting marking, two transitions are enabled: eand
and-split . although both are enabled only one can ﬁre. if and-split ﬁres, one token is
consumed and two tokens are produced.
deﬁnition 2.3. (reachable markings) let (n,s
0) be a marked p/t-net in n.a
markingsisreachable from the initial marking s0iﬀ there exists a sequence of enabled
transitions whose ﬁring leads from s0tos. the set of reachable markings of ( n,s 0)i s
denoted [n,s 0/angbracketright.
the marked p/t-net shown in figure 1 has 8 reachable markings. sometimes it is
convenient to know the sequence of transitions that are ﬁred in order to reach some
given marking. this paper uses the following notations for sequences. let abe some
alphabet of identiﬁers. a sequence of length n, for some natural number n∈in, over
alphabetais a function σ:{0,...,n −1}→a. the sequence of length zero is called
7the empty sequence and written ε. for the sake of readability, a sequence of positive
length is usually written by juxtaposing the function values: for example, a sequence
σ={(0,a),(1,a),(2,b)}, fora,b∈a, is written aab. the set of all sequences of arbitrary
length over alphabet ais written a∗.
deﬁnition 2.4. (firing sequence) let (n,s 0)w i t hn=(p,t,f ) be a marked
p/t net. a sequence σ∈t∗is called a ﬁring sequence of (n,s 0) iﬀ, for some natural
numbern∈in, there exist markings s1,...,s nand transitions t1,...,t n∈tsuch that
σ=t1...t nand, for all iwith 0 ≤i<n ,(n,s i)[ti+1/angbracketrightandsi+1=si−•ti+1+ti+1•.
(note that n= 0 implies that σ=εand thatεis a ﬁring sequence of ( n,s 0).) sequence
σis said to be enabled in marking s0, denoted ( n,s 0)[σ/angbracketright. firing the sequence σresults
in a marking sn, denoted ( n,s 0)[σ/angbracketright(n,s n).
deﬁnition 2.5. (connectedness) an e tn=(p,t,f )i sweakly connected ,o rs i m p l y
connected , iﬀ, for every two nodes xandyinp∪t,x(f∪f−1)∗y,w h e r er−1is the
inverse and r∗the reﬂexive and transitive closure of a relation r.n e tnisstrongly
connected iﬀ, for every two nodes xandy,xf∗y.
we assume that all nets are weakly connected and have at least two nodes. the p/t-net
shown in figure 1 is connected but not strongly connected because there is no directed
path from the sink place to the source place, or from d to a, etc.
deﬁnition 2.6. (boundedness, safeness) am a r k e dn e t( n=(p,t,f ),s)i sbounded
iﬀ the set of reachable markings [ n,s/angbracketrightis ﬁnite. it is safeiﬀ, for any s/prime∈[n,s/angbracketrightand any
p∈p,s/prime(p)≤1. note that safeness implies boundedness.
the marked p/t-net shown in figure 1 is safe (and therefore also bounded) because
none of the 8 reachable states puts more than one token in a place.
deﬁnition 2.7. (dead transitions, liveness) let (n=(p,t,f ),s) be a marked
p/t-net. a transition t∈tisdead in (n,s) iﬀ there is no reachable marking s/prime∈[n,s/angbracketright
such that ( n,s/prime)[t/angbracketright.(n,s)i sliveiﬀ, for every reachable marking s/prime∈[n,s/angbracketrightandt∈t,
there is a reachable marking s/prime/prime∈[n,s/prime/angbracketrightsuch that ( n,s/prime/prime)[t/angbracketright. note that liveness implies
the absence of dead transitions.
none of the transitions in the marked p/t-net shown in figure 1 is dead. however, the
marked p/t-net is not live since it is not possible to enable each transition continuously.
82.2 workﬂow nets
most workﬂow systems oﬀer standard building blocks such as the and-split, and-join,
or-split, and or-join [5, 15, 26, 28]. these are used to model sequential, conditional,
parallel and iterative routing (wfmc [15]). clearly, a petri net can be used to specify therouting of cases. tasks are modeled by transitions and causal dependencies are modeled
by places and arcs. in fact, a place corresponds to a condition which can be used as pre-
and/or post-condition for tasks. an and-split corresponds to a transition with two ormore output places, and an and-join corresponds to a transition with two or more inputplaces. or-splits/or-joins correspond to places with multiple outgoing/ingoing arcs.
given the close relation between tasks and transitions we use the terms interchangeably.
a petri net which models the control-ﬂow dimension of a workﬂow, is called a work-
flow net (wf-net). it should be noted that a wf-net speciﬁes the dynamic behavior
of a single case in isolation.
deﬁnition 2.8. (workﬂow nets) letn=(p,t,f ) be a p/t-net and ¯taf r e s h
identiﬁer not in p∪t.nis a workﬂow net (wf-net) iﬀ:
1.object creation :pcontains an input place isuch that •i=∅,
2.object completion :pcontains an output place osuch that o•=∅,
3.connectedness :¯n=(p,t∪{¯t},f∪{(o,¯t),(¯t,i)}) is strongly connected,
the p/t-net shown in figure 1 is a wf-net. note that although the net is not strongly
connected, the short-circuited net ¯n=(p,t∪{¯t},f∪{(o,¯t),(¯t,i)}) (i.e., the net
with transition ¯tconnecting otoi) is strongly connected. even if a net meets all the
syntactical requirements stated in deﬁnition 2.8, the corresponding process may exhibit
errors such as deadlocks, tasks which can never become active, livelocks, garbage beingleft in the process after termination, etc. therefore, we deﬁne the following correctness
criterion.
deﬁnition 2.9. (sound) letn=(p,t,f ) be a wf-net with input place iand output
placeo.nissound iﬀ:
1.safeness :(n,[i]) is safe,
2.proper completion : for any marking s∈[n,[i]/angbracketright,o∈simpliess=[o],
3.option to complete : for any marking s∈[n,[i]/angbracketright,[o]∈[n,s/angbracketright,a n d
94.absence of dead tasks :(n,[i]) contains no dead transitions.
the set of all sound wf-nets is denoted w.
the wf-net shown in figure 1 is sound. soundness can be veriﬁed using standard petri-
net-based analysis techniques. in fact soundness corresponds to liveness and safeness of
the corresponding short-circuited net [1, 2, 5]. this way eﬃcient algorithms and tools
can be applied. an example of a tool tailored towards the analysis of wf-nets is woﬂan[47].
3 the rediscovery problem
after introducing some preliminaries we return to the topic of this paper: workﬂow
mining . the goal of workﬂow mining is to ﬁnd a workﬂow model (e.g., a wf-net) on
the basis of a workﬂow log . table 1 shows an example of a workﬂow log. note that the
ordering of events within a case is relevant while the ordering of events amongst casesis of no importance. therefore, we deﬁne a workﬂow log as follows.
deﬁnition 3.1. (workﬂow trace, workﬂow log) lettbe a set of tasks. σ∈t
∗is
aworkﬂow trace andw∈p(t∗)i sa workﬂow log .2
the workﬂow trace of case 1 in table 1 is abcd . the workﬂow log corresponding to
table 1 is {abcd,acbd,aed }. note that in this paper we abstract from the identity
of cases. clearly the identity and the attributes of a case are relevant for workﬂow mining.however, for the theoretical results in this paper, we can abstract from this. for similarreasons, we abstract from the frequency of workﬂow traces. in table 1 workﬂow trace
abcd appears twice (case 1 and case 3), workﬂow trace acbd also appears twice (case
2 and case 4), and workﬂow trace aed (case 5) appears only once. these frequencies
are not registered in the workﬂow log {abcd,acbd,aed }. note that when dealing
with noise, frequencies are of the utmost importance. however, in this paper we do not
deal with issues such as noise. therefore, this abstraction is made to simplify notation.for readers interested in how we deal with noise and related issues, we refer to [31, 32,
48–50]
2p(t∗)i st h ep o w e r s e to f t∗, i.e., w⊆t∗.
10to ﬁnd a workﬂow model on the basis of a workﬂow log, the log should be analyzed
for causal dependencies, e.g., if a task is always followed by another task it is likely that
there is a causal relation between both tasks. to analyze these relations we introducethe following notations.
deﬁnition 3.2. (log-based ordering relations) letwbe a workﬂow log over t,
i.e.,w∈p(t
∗). leta,b∈t:
–a>wbiﬀ there is a trace σ=t1t2t3...t n−1andi∈{1,...,n −2}such that σ∈w
andti=aandti+1=b,
–a→wbiﬀa>wbandb/negationslash>wa,
–a#wbiﬀa/negationslash>wbandb/negationslash>wa,a n d
–a/bardblwbiﬀa>wbandb>wa.
consider the workﬂow log w={abcd,acbd,aed }(i.e., the log shown in table 1).
relation>wdescribes which tasks appeared in sequence (one directly following the
other). clearly, a> wb,a> wc,a> we,b> wc,b> wd,c> wb,c> wd,
ande> wd.r e l a t i o n →wcan be computed from >wa n di sr e f e r r e dt oa st h e (direct)
causal relation derived from workﬂow log w.a→wb,a→wc,a→we,b→wd,
c→wd,a n de→wd.n o t et h a t b/negationslash→wcbecausec> wb.r e l a t i o n /bardblwsuggests
potential parallelism. for log wtasksbandcseem to be in parallel, i.e., b/bardblwc
andc/bardblwb. if two tasks can follow each other directly in any order, then all possible
interleavings are present and therefore they are likely to be in parallel. relation # w
gives pairs of transitions that never follow each other directly. this means that thereare no direct causal relations and parallelism is unlikely.
property 3.3. letwbe a workﬂow log over t. for anya,b∈t:a→
wborb→waor
a#wbora/bardblwb. moreover, the relations →w,→−1
w,#w,a n d/bardblware mutually exclusive
and partition t×t.3
this property can easy be veriﬁed. note that →w=(>w\>−1
w),→−1
w=(>−1
w\>w),
#w=(t×t)\(>w∪>−1
w),/bardblw=(>w∩>−1
w). therefore, t×t=→w∪→−1
w∪
#w∪/bardblw. if no confusion is possible, the subscript wis omitted.
to simplify the use of logs and sequences we introduce some additional notations.
3→−1
wis the inverse of relation →w, i.e., →−1
w={(y,x)∈t×t|x→wy}.
11deﬁnition 3.4. ( ∈,ﬁrst,last)letabe a set,a∈a,a n dσ=a1a2...a n∈a∗a
sequence over aof lengthn.∈,ﬁrst,lastare deﬁned as follows:
1.a∈σiﬀa∈{a1,a2,...a n},
2.ﬁrst(σ)=a1,i fn≥1, and
3.last(σ)=an,i fn≥1.
to reason about the quality of a workﬂow mining algorithm we need to make assump-
tions about the completeness of a log. for a complex process, a handful of traces will
not suﬃce to discover the exact behavior of the process. relations →w,→−1
w,#w,a n d
/bardblwwill be crucial information for any workﬂow-mining algorithm. since these relations
can be derived from >w, we assume the log to be complete with respect to this relation.
deﬁnition 3.5. (complete workﬂow log) letn=(p,t,f ) be a sound wf-net,
i.e.,n∈w .wis a workﬂow log of niﬀw∈p(t∗) and every trace σ∈wis a
ﬁring sequence of nstarting in state [ i] and ending in [ o], i.e., (n,[i])[σ/angbracketright(n,[o]).wis
acomplete workﬂow log of niﬀ (1) for any workﬂow log w/primeofn:>w/prime⊆>w,a n d( 2 )
for anyt∈tt h e r ei sa σ∈wsuch that t∈σ.
a workﬂow log of a sound wf-net only contains behaviors that can be exhibited by the
corresponding process. a workﬂow log is complete if all tasks that potentially directly
follow each other in fact directly follow each other in some trace in the log. note thattransitions that connect the input place iof a wf-net to its output place oare “invis-
ible” for>
w. therefore, the second requirement has been added. if there are no such
transitions, this requirement can be dropped as is illustrated by the following property.
property 3.6. letn=(p,t,f ) be a sound wf-net. if wis a complete workﬂow log
ofn,t h e n {t∈t|∃t/prime∈tt>wt/prime∨t/prime>wt}={t∈t|t/negationslash∈i•∩•o}.
proof. consider a transition t∈t.s i n c enis sound there is ﬁring sequence containing
t.i ft∈i•∩•o, then this sequence has length 1 and tcannot appear in >wbecause
this is the only ﬁring sequence containing t.i ft/negationslash∈i•∩•o, then the sequence has
at least length 2, i.e., tis directly preceded or followed by a transition and therefore
appears in >w. ✷
the deﬁnition of completeness given in deﬁnition 3.5 may seem arbitrary but it is not.
note that it would be unrealistic to assume that all possible ﬁring sequences are present
12in the log. first of all, the number of possible sequences may be inﬁnite (in case of loops).
second, parallel processes typically have an exponential number of states and, therefore,
the number of possible ﬁring sequences may be enormous. finally, even if there is noparallelism and no loops but just nbinary choices, the number of possible sequences
may be 2
n. therefore, we need a weaker notion of completeness. if there is no parallelism
and no loops but just nbinary choices, the number of cases required may be as little
as 2. of course for large nit is unlikely that all choices are observed in just 2 cases but
still it indicates that this requirement is considerably less demanding than observing
all possible sequences. the same holds for processes with loops and parallelism. if a
process has nsequential fragments which each exhibit parallelism, the number of cases
needed to observe all possible combinations is exponential in the number of fragments.
using our notion of completeness, this is not the case. one could consider even weaker
notions of completeness, however, as will be shown in the remainder, even this notionof completeness (i.e., deﬁnition 3.5) is in some situations too weak to detect certain
advanced routing patterns.
we will formulate the rediscovery problem introduced in section 1 assuming a com-
plete workﬂow log as described in deﬁnition 3.5. before formulating this problem we
deﬁne what it means for a wf-net to be rediscovered.
deﬁnition 3.7. (ability to rediscover) letn=(p,t,f ) be a sound wf-net, i.e.,
n∈w ,a n dl e tαbe a mining algorithm which maps workﬂow logs of nonto sound
wf-nets, i.e., α:p(t
∗)→w . if for any complete workﬂow log wofnthe mining
algorithm returns n(modulo renaming of places), then αis able to rediscover n.
note that no mining algorithm is able to ﬁnd names of places. therefore, we ignore
place names, i.e., αis able to rediscover niﬀα(w)=nmodulo renaming of places.
the goal of this paper is twofold. first of all, we are looking for a mining algorithm
that is able to rediscover sound wf-nets, i.e., based on a complete workﬂow log thecorresponding workﬂow process model can be derived. second, given such an algorithmwe want to indicate the class of workﬂow nets which can be rediscovered. clearly, this
class should be as large as possible. note that there is no mining algorithm which is able
to rediscover all sound wf-nets. for example, if in figure 1 we add a place pconnecting
transitions aandd, there is no mining algorithm able to detect psince this place is
13implicit, i.e., the addition of the place does not change the behavior of the net and
therefore is not visible in the log.
to conclude we summarize the rediscovery problem : “find a mining algorithm able
to rediscover a large class of sound wf-nets on the basis of complete workﬂow logs.”
this problem was illustrated in the introduction using figure 2.
4 workﬂow mining
in this section, the rediscovery problem is tackled. before we present a mining algorithmable to rediscover a large class of sound wf-nets, we investigate the relation between
the causal relations detected in the log (i.e., →
w) and the presence of places connecting
transitions. first, we show that causal relations in →wimply the presence of places.
then, we explore the class of nets for which the reverse also holds. based on these
observations, we present a mining algorithm.
4.1 causal relations imply connecting places
if there is a causal relation between two transitions according to the workﬂow log, then
there has to be a place connecting these two transitions.
theorem 4.1. letn=(p,t,f ) be a sound wf-net and let wbe a complete workﬂow
log ofn. for anya,b∈t:a→wbimpliesa•∩•b/negationslash=∅.
proof. assumea→wbanda•∩•b=∅. we will show that this leads to a contradiction
and thus prove the theorem. since a>b there is a ﬁring sequence σ=t1t2t3...t n−1
andi∈{1,...,n −2}such that σ∈wandti=aandti+1=b.l e tsbe the state
just before ﬁring a, i.e., (n,[i]) [σ/prime/angbracketright(n,s)w i t hσ/prime=t1...t i−1.l e ts/primebe the marking
after ﬁring bin states, i.e., (n,s)[b/angbracketright(n,s/prime). note that bis enabled in sbecause it is
enabled after ﬁring aanda•∩•b=∅(i.e.,adoes not produce tokens for any of the
input places of b).acannot be enabled in s/prime,o t h e r w i s e b>a and nota→wb.s i n c ea
is enabled in sbut not in s/prime,bconsumes a token from an input place of aand does not
return it, i.e., (( •b)\(b•))∩•a/negationslash=∅.t h e r ei sap l a c e psuch that p∈•a,p∈•b,a n d
p/negationslash∈b•.m o r e o v e r , a•∩•b=∅. therefore, p/negationslash∈a•. since the net is safe, pcontains
precisely one token in marking s. this token is consumed by ti=aand not returned.
14hencebcannot be enabled after ﬁring ti. therefore, σcannot be a ﬁring sequence of n
starting in i. ✷
letn1=({i,p 1,p2,p3,p4,o},{a,b,c,d },{(i,a),(a,p 1),(a,p 2),(p1,b),(b, p 3),
(p2,c),(c,p 4),(p3,d),(p4,d),(d,o)}). (this is the wf-net with bandcin par-
allel, seen1in figure 4.) w1={abcd,acbd }is a complete log over n1.s i n c e
a→w1b, there has to be a place between aandb. this place corresponds to p1in
n1.l e tn2=({i,p 1,p2,o},{a,b,c,d },{(i,a),(a,p 1),(p1,b),(b,p 2),(p1,c),(c,p 2),
(p2,d),(d,o)}). (this is the wf-net with a choice between bandc,s e en2in fig-
ure 4.)w2={abd,acd }is a complete log over n2.s i n c ea→w2b, there has to
be a place between aandb. similarly, a→w2cand therefore there has to be a place
betweenaandc. both places correspond to p1inn1. note that in the ﬁrst example
(n1/w1)t h et w oc a u s a lr e l a t i o n s a→w1banda→w1ccorrespond to two diﬀerent
places while in the second example the two causal relations a→w1banda→w1c
correspond to a single place.
4.2 connecting places “often” imply causal relations
in this subsection we investigate which places can be detected by simply inspecting
the log. clearly, not all places can be detected. for example places may be implicit
which means that they do not aﬀect the behavior of the process. these places remainundetected. therefore, we limit our investigation to wf-nets without implicit places.
deﬁnition 4.2. (implicit place) letn=(p,t,f ) be a p/t-net with initial marking
s.ap l a c ep∈pis called implicit in ( n,s) iﬀ, for all reachable markings s
/prime∈[n,s/angbracketrightand
transitions t∈p•,s/prime≥•t\{p}⇒s/prime≥•t.
figure 1 contains no implicit places. however, as indicated before, adding a place p
connecting transition aanddyields an implicit place. no mining algorithm is able to
detectpsince the addition of the place does not change the behavior of the net and
therefore is not visible in the log.
for the rediscovery problem it is very important that the structure of the wf-net
clearly reﬂects its behavior. therefore, we also rule out the constructs shown in figure 3.
the left construct illustrates the constraint that choice and synchronization should nevermeet. if two transitions share an input place, and therefore “ﬁght” for the same token,
15fig. 3.two constructs not allowed in swf-nets.
they should not require synchronization. this means that choices (places with multiple
output transitions) should not be mixed with synchronizations. the right-hand construct
in figure 3 illustrates the constraint that if there is a synchronization, all preceding
transitions should have ﬁred, i.e., it is not allowed to have synchronizations directlypreceded by an or-join. wf-nets which satisfy these requirements are named structured
workﬂow nets .
deﬁnition 4.3. (swf-net) a wf-net n=(p,t,f )i sa n swf-net (structured
workﬂow net) iﬀ:
1. for all p∈pandt∈twith (p,t)∈f:|p•|>1 implies |•t|=1 .
2. for all p∈pandt∈twith (p,t)∈f:|•t|>1 implies |•p|=1 .
3. there are no implicit places.
at ﬁrst sight the three requirements in deﬁnition 4.3 seem quite restrictive. from a
practical point of view this is not the case. first of all, swf-nets allow for all routing
constructs encountered in practice, i.e., sequential, parallel, conditional and iterativerouting are possible and the basic workﬂow building blocks (and-split, and-join, or-
split and or-join) are supported. second, wf-nets that are not swf-nets are typically
diﬃcult to understand and should be avoided if possible. third, many workﬂow manage-ment systems only allow for workﬂow processes that correspond to swf-nets. the latter
observation can be explained by the fact that most workﬂow management systems use
a language with separate building blocks for or-splits and and-joins. finally, there isa very pragmatic argument. if we drop any of the requirements stated in deﬁnition 4.3,relation>
wdoes not contain enough information to successfully mine all processes in
the resulting class.
the reader familiar with petri nets will observe that swf-nets belong to the class
of free-choice nets [12]. this allows us to use eﬃcient analysis techniques and advanced
16theoretical results. for example, using these results it is possible to decide soundness in
polynomial time [2].
swf-nets also satisfy another interesting property.
property 4.4. letn=(p,t,f ) be an swf-net. for any a,b∈tandp1,p2∈p:i f
p1∈a•∩•bandp2∈a•∩•b,t h e np1=p2.
this property follows directly from the deﬁnition of swf-nets and states that no two
transitions are connected by multiple places. this property illustrates that the structure
of an swf-net clearly reﬂects its behavior and vice versa. this is exactly what we needto be able to rediscover a wf-net from its log.
we already showed that causal relations in →
wimply the presence of places. now
we try to prove the reverse for the class of swf-nets. first, we focus on the relation
between the presence of places and >w.
theorem 4.5. letn=(p,t,f ) be a sound swf-net and let wbe a complete
workﬂow log of n. for anya,b∈t:a•∩•b/negationslash=∅impliesa>wb.
proof. see [6]. ✷
unfortunately a•∩•b/negationslash=∅does not imply a→wb. to illustrate this consider figure 4.
for the ﬁrst two nets (i.e., n1andn2), two tasks are connected iﬀ there is a causal
relation. this does not hold for n3andn4.i nn3,a→w3b,a→w3d,a n db→w3d.
however, not b→w3b. nevertheless, there is a place connecting btob.i nn4,
although there are places connecting btocand vice versa, b/negationslash→w3candb/negationslash→w3c.
these examples indicate that loops of length one (see n3) and length two (see n4)a r e
harmful. fortunately, loops of length three or longer are no problem as is illustrated in
the following theorem.
theorem 4.6. letn=(p,t,f ) be a sound swf-net and let wbe a complete
workﬂow log of n. for anya,b∈t:a•∩•b/negationslash=∅andb•∩•a=∅impliesa→wb.
proof. see [6]. ✷
acyclic nets have no loops of length one or length two. therefore, it is easy to derive
the following property.
17ab
cdab
cd
ab
d
ab
cd
a b
cd
en1
n2
n3
n4
n5
fig. 4.five sound swf-nets.
property 4.7. letn=(p,t,f ) be an acyclic sound swf-net and let wbe a complete
workﬂow log of n. for anya,b∈t:a•∩•b/negationslash=∅iﬀa→wb.
the results presented thus far focus on the correspondence between connecting places
and causal relations. however, causality ( →w) is just one of the four log-based ordering
relations deﬁned in deﬁnition 4.3. the following theorem explores the relation between
the sharing of input and output places and # w.
theorem 4.8. letn=(p,t,f ) be a sound swf-net such that for any a,b∈t:
a•∩•b=∅orb•∩•a=∅and letwbe a complete workﬂow log of n.
1. ifa,b∈tanda•∩b•/negationslash=∅,t h e na#wb.
2. ifa,b∈tand•a∩•b/negationslash=∅,t h e na#wb.
3. ifa,b,t∈t,a→wt,b→wt,a n da#wb,t h e na•∩b•∩ •t/negationslash=∅.
4. ifa,b,t∈t,t→wa,t→wb,a n da#wb,t h e n •a∩•b∩t•/negationslash=∅.
18proof. see [6]. ✷
the relations →w,→−1
w,#w,a n d/bardblware mutually exclusive. therefore, we can derive
that for sound swf-nets with no short loops, a/bardblwbimpliesa•∩b•=•a∩•b=∅.
moreover, a→wt,b→wt,a n da•∩b•∩ •t=∅impliesa/bardblwb. similarly, t→wa,
t→wb,a n d•a∩•b∩t•=∅, also implies a/bardblwb. these results will be used to underpin
the mining algorithm presented in the following subsection.
4.3 mining algorithm
based on the results in the previous subsections we now present an algorithm for mining
processes. the algorithm uses the fact that for many wf-nets two tasks are connected
iﬀ their causality can be detected by inspecting the log.
deﬁnition 4.9. (mining algorithm α)letwb eaw o r k ﬂ o wl o go v e r t.α(w)i s
deﬁned as follows.
1.tw={t∈t|∃σ∈wt∈σ},
2.ti={t∈t|∃σ∈wt=ﬁrst(σ)},
3.to={t∈t|∃σ∈wt=last(σ)},
4.xw={(a,b)|a⊆tw∧b⊆tw∧∀ a∈a∀b∈ba→wb∧∀ a1,a2∈aa1#wa2∧
∀b1,b2∈bb1#wb2},
5.yw={(a,b)∈xw|∀ (a/prime,b/prime)∈xwa⊆a/prime∧b⊆b/prime=⇒(a,b)=(a/prime,b/prime)},
6.pw={p(a,b )|(a,b)∈yw}∪{iw,ow},
7.fw={(a,p (a,b ))|(a,b)∈yw∧a∈a}∪{ (p(a,b ),b)|(a,b)∈yw∧b∈
b}∪ { (iw,t)|t∈ti}∪ { (t,ow)|t∈to},a n d
8.α(w)=(pw,tw,fw).
the mining algorithm constructs a net ( pw,tw,fw). clearly, the set of transitions tw
can be derived by inspecting the log. in fact, as shown in property 3.6, if there are no
traces of length one, twcan be derived from >w. since it is possible to ﬁnd all initial
transitions tiand all ﬁnal transition to, it is easy to construct the connections between
these transitions and iwandow. besides the source place iwand the sink place ow,
places of the form p(a,b )are added. for such place, the subscript refers to the set of
19input and output transitions, i.e., •p(a,b )=aandp(a,b )•=b. a place is added in-
betweenaandbiﬀa→wb. however, some of these places need to be merged in case
of or-splits/joins rather than and-splits/joins. for this purpose the relations xwand
yware constructed. ( a,b)∈xwif there is a causal relation from each member of ato
each member of band the members of aandbnever occur next to one another. note
that ifa→wb,b→wa,o ra/bardblwb,t h e naandbcannot be both in a(orb). relation
ywis derived from xwby taking only the largest elements with respect to set inclusion.
(see the end of this section for an example.)
ab
d
ab
cd(n3)
(n4)
fig. 5.theαalgorithm is unable to rediscover n3andn4.
based onαdeﬁned in deﬁnition 4.9, we turn to the rediscovery problem. is it possible
to rediscover wf-nets using α(w)? consider the ﬁve swf-nets shown in figure 4. if
αis applied to a complete workﬂow log of n1, the resulting net is n1modulo renaming
of places. similarly, if αis applied to a complete workﬂow log of n2, the resulting net is
n2modulo renaming of places. as expected, αis not able to rediscover n3andn4(cf.
figure 5). α(w3) is liken3but without the arcs connecting bto the place in-between
aanddand two new places. α(w4) is liken4but the input and output arc of care
removed.α(w3)i sn o taw f - n e ts i n c e bis not connected to the rest of the net. α(w4)i s
not a wf-net since cis not connected to the rest of the net. in both cases two arcs are
missing in the resulting net. n3andn4illustrate that the mining algorithm is unable
to deal with short loops. loops of length three or longer are no problem. for example
α(w5)=n5modulo renaming of places. the following theorem proves that αis able to
rediscover the class of swf-nets provided that there are no short loops.
20theorem 4.10. letn=(p,t,f ) be a sound swf-net and let wbe a complete
workﬂow log of n. if for all a,b∈ta•∩•b=∅orb•∩•a=∅,t h e nα(w)=n
modulo renaming of places.
proof. letα(w)=(pw,tw,fw). sincewis complete, it is easy to see that t=tw.
remains to prove that every place in ncorresponds to a place in α(w)a n dv i c ev e r s a .
letp∈p. we need to prove that there is a pw∈pwsuch thatn•p=nw•pwand
pn•=pwnw•.i fp=i, i.e., the source place or p=o, i.e., the sink place, then it is easy
to see that there is a corresponding place in α(w). transitions in in•∪n•ocan ﬁre only
once directly at the beginning of a sequence or at the end. therefore, the construction
given in deﬁnition 4.9 involving iw,ow,ti,a n dtoyields a source and sink place
with identical input/output transitions. if p/negationslash∈{i,o},t h e nl e t a=n•p,b=pn•,a n d
pw=p(a,b ).i fpwis indeed a place of α(w), thenn•p=α(w)•pwandpn•=pwα(w)•.t h i s
follows directly from the deﬁnition of the ﬂow relation fwin deﬁnition 4.9. to prove
thatpw=p(a,b )is a place of α(w), we need to show that ( a,b)∈yw.(a,b)∈xw,
because (1) theorem 4.6 implies that ∀a∈a∀b∈ba→wb, (2) theorem 4.8(1) implies that
∀a1,a2∈aa1#wa2, and (3) theorem 4.8(2) implies that ∀b1,b2∈bb1#wb2. to prove that
(a,b)∈yw,w en e e dt os h o wt h a ti ti sn o tp o s s i b l et oh a v e( a/prime,b/prime)∈xsuch that
a⊆a/prime,b⊆b/prime,a n d(a,b)/negationslash=(a/prime,b/prime) (i.e.,a⊂a/primeorb⊂b/prime). suppose that a⊂a/prime.
there is an a/prime∈t\asuch that ∀b∈ba/prime→wband∀a∈aa#wa/prime. theorem 4.8(3) implies
thatan•∩a/primen•∩n•b/negationslash=∅for someb∈b.l e tp/prime∈an•∩a/primen•∩n•b. property 4.4
impliesp/prime=p. however, a/prime/negationslash∈a=n•panda/prime∈n•p/prime, and we ﬁnd a contradiction ( p/prime=p
andp/prime/negationslash=p). suppose that b⊂b/prime.t h e r ei sa b/prime∈t\bsuch that ∀a∈aa→wb/primeand
∀b∈bb#wb/prime. using theorem 4.8(4) and property 4.4, we can show that this leads to a
contradiction. therefore, ( a,b)∈ywandpw∈pw.
letpw∈pw. we need to prove that there is a p∈psuch thatn•p=nw•pwand
pn•=pwnw•.i fpw=iworpw=ow,t h e npwcorresponds to iororespectively. this
is a direct consequence of the construction given in deﬁnition 4.9 involving iw,ow,
ti,a n dto.i fpw/negationslash∈{iw,ow}, then there are sets aandbsuch that ( a,b)∈ywand
pw=p(a,b ).α(n)•pw=aandpwα(n)•=b. remains to prove that there is a p∈p
such thatn•p=aandpn•=b.s i n c e(a,b)∈ywimplies that ( a,b)∈xw, for any
a∈aandb∈bthere is a place connecting aandb(usea→wband theorem 4.1).
21using theorem 4.8, we can prove that there is just one such place. let pbe this place.
clearly,n•p⊆aandpn•⊆b. remains to prove thatn•p=aandpn•=b. suppose that
a/prime∈n•p\a(i.e.,n•p/negationslash=a). select an arbitrary a∈aandb∈b. using theorem 4.6, we
can show that a/prime→wb. using theorem 4.8(1), we can show that a#wa/prime. this holds for
anya∈aandb∈b. therefore, ( a∪{a/prime},b)∈xw. however, this is not possible since
(a,b)∈yw((a,b) should be maximal). therefore, we ﬁnd a contradiction. we ﬁnd
a similar contradiction if we assume that there is a b/prime∈pn•\b. therefore, we conclude
thatn•p=aandpn•=b. ✷
ab
c d
e
fig. 6.another process model corresponding to the workﬂow log shown in table 1.
netsn1,n2andn5shown in figure 4 satisfy the requirements stated in theorem 4.10.
therefore, it is no surprise that αis able to rediscover these nets. the net shown in
figure 1 is also an swf-net with no short loops. therefore, we can successfully rediscover
the net if the and-split and the and-join are visible in the log . the latter assumption
is not realistic if these two transitions do not correspond to real work. given the factthe log shown in table 1 does not list the occurrence of these events, indicates that
this assumption is not valid. therefore, the and-split and the and-join should be
considered invisible. however, if we apply αto this log w={abcd, acbd, aed },
then the result is quite surprising. the resulting net α(w) is shown in figure 6.
to illustrate the αalgorithm we show the result of each step using the log w=
{abcd, acbd, aed }(i.e., a log like the one shown in table 1):
1.t
w={a,b,c,d,e },
2.ti={a},
3.to={d},
224.xw={({a},{b}),({a},{c}),({a},{e}),({b},{d}),({c},{d}),({e},{d}),
({a},{b,e}),({a},{c,e}),({b,e},{d}),({c,e},{d})},
5.yw={({a},{b,e}),({a},{c,e}),({b,e},{d}),({c,e},{d})},
6.pw={iw,ow,p({a},{b,e}),p{a},{c,e}),p({b,e},{d}),p({c,e},{d})},
7.fw={(iw,a),(a,p ({a},{b,e})),(p({a},{b,e}),b)...,(d,o w)},a n d
8.α(w)=(pw,tw,fw)( a ss h o w ni nf i g u r e6 ) .
although the resulting net is not an swf-net it is a sound wf-net whose observable
behavior is identical to the net shown in figure 1. also note that the wf-net shown in
figure 6 can be rediscovered although it is not an swf-net. this example shows that
the applicability is not limited to swf-nets. however, for arbitrary sound wf-nets itis not possible to guarantee that they can be rediscovered.
4.4 limitations of the αalgorithm
as demonstrated through theorem 4.10, the αalgorithm is able to rediscover a large
class of processes. however, we did not prove that the class of processes is maximal, i.e.,that there is not a “better” algorithm able to rediscover even more processes. therefore,
we reﬂect on the requirements stated in deﬁnition 4.3 (swf-nets) and theorem 4.10
(no short loops).
a d
c
en6
b
a d
c
en7
b
fig. 7.the non-free-choice wf-net n6cannot be rediscovered by the αalgorithm.
23an8
bc
d
e
fg
an9
bc
d
e
fg
fig. 8.wf-net n8cannot be rediscovered by the αalgorithm. nevertheless αreturns a wf-net which is
behavioral equivalent.
let us ﬁrst consider the requirements stated in deﬁnition 4.3. to illustrate the ne-
cessity of the ﬁrst two requirements consider ﬁgures 7 and 8. the wf-net n6shown in
figure 7 is sound but not an swf-net since the ﬁrst requirement is violated ( n6is not
free-choice). if we apply the mining algorithm to a complete workﬂow log w6ofn6,w e
obtain the wf-nets n7also shown in figure 7 (i.e., α(w6)=n7). clearly, n6cannot be
rediscovered using α. although n7is a sound swf-net its behavior is diﬀerent from n6,
e.g., workﬂow trace ace is possible in n7but not in n6. this example motivates the
ﬁrst requirement in deﬁnition 4.3. the second requirement is motivated by figure 8. n8
violates the second requirement. if we apply the mining algorithm to a complete work-
ﬂow logw8ofn8, we obtain the wf-net α(w8)=n9also shown in figure 8. although
n9is behaviorally equivalent, n8cannot be rediscovered using the mining algorithm.
although the requirements stated in deﬁnition 4.3 are necessary in order to prove
that this class of workﬂow processes can be rediscovered on the basis of a complete
workﬂow log, the applicability is not limited to swf-nets. the examples given in thissection show that in many situations a behaviorally equivalent wf-net can be derived.
24note that the third requirement stated in deﬁnition 4.3 (no implicit places) can be
dropped thus allowing even more behaviorally equivalent wf-nets. even in the cases
where the resulting wf-net is not behaviorally equivalent, the results are meaningful,e.g., the process represented by n
7is diﬀerent from the process represented by n6(cf.
figure 7). nevertheless, n7is similar and captures most of the behavior.
ab
c e
dn10
ab
c e
dn11
fig. 9.although both wf-nets are not behavioral equivalent they are identical with respect to >.
another requirement imposed by theorem 4.10 is the absence of short loops. we
already showed examples motivating this requirement. however, it is clear that the α
algorithm can be improved to deal with short loops. unfortunately, this is less trivial
than it may seem. we use figure 9 and figure 10 to illustrate this. figure 9 shows two
wf-nets. although both wf-nets have clearly diﬀerent behaviors their complete logswill have identical >relations. note that the two wf-nets are not swf-nets because
of the non-free-choice construct involving e. however, the essence of the problem is the
short loop involving c. because of this short loop the αalgorithm will create for both
n
10andn11the petri net where cis unconnected to the rest of the net. clearly, this
can be improved since for complete logs of n10andn11the following relations hold:
b>c ,c>b ,c>d ,d>c ,b/bardblc,c/bardbld,a n db/bardbld. these relations suggest that b,
c,a n ddare in parallel. however, in any complete log it can be seen that this is not the
case since ais never followed by c. despite this information, no algorithm will be able
to distinguish n10andn11because they are identical with respect to >. figure 10 gives
another example demonstrating that dealing with short loops is far from trivial. n12and
n13are swf-nets that are behavioral equivalent, therefore, no algorithm will be able to
25distinguish n12fromn13(assuming the notion of completeness and not logging explicit
start and end events). this problem may seem similar to figure 8 or examples with and
without implicit places. however, n12andn13are swf-nets while n8or examples with
implicit places are just wf-nets not satisfying the requirements stated in deﬁnition 4.3.
ab
d
cn12
ab
d
cn13
fig. 10. both swf-nets are behavioral equivalent and therefore any algorithm will be unable to distinguish
n12fromn13(assuming a notion of completeness based on >).
despite the problems illustrated by figure 9 and figure 10, it is possible to solve the
problem using a slightly stronger notion of completeness. assume that it is possible to
identify 1-loops and 2-loops. this can be done by looking for patterns aa(1-loop) and
aba (2-loop). then reﬁne relation >into a new relation >+which splits the existing
transitions involved in a short loop into 2 or 3 transitions. tasks involved in a 1-loop
are mapped onto three transitions (e.g., start, execute, and end). tasks involved in a2-loop but not a 1-loop are mapped onto two transitions (e.g., start and end). the goal
of this translation is to make the short loops longer by using additional information
about 1-loops and 2-loops (and while preserving the original properties). this reﬁnedrelation>
+can be used as input for the αalgorithm. this approach is able to deal with
all possible situations except the one illustrated in figure 10. note that no algorithm
will be able to distinguish the logs of the two processes shown in figure 10. however,this is not a real problem since they are behaviorally equivalent. in formal terms: we canreplace the requirement in theorem 4.10 by the weaker requirement that there are no
two transitions having identical input and output places. a detailed description of this
preprocessing algorithm and a proof of its correctness are however beyond the scope ofthis paper.
26besides the explicit requirements stated in deﬁnition 4.3 and theorem 4.10, there
are also a number of implicit requirements. as indicated before, hidden tasks cannot
be detected (cf. the and-split and and-join in figure 1). moreover, our deﬁnition ofa petri net assumes that each transition bears a unique label. instead, we could haveused a labeled petri net [39]. the latter choice would have been more realistic but also
complicate matters enormously. the current deﬁnition of a wf-net assumes that each
task appears only once in the network. without this assumption, every occurrence ofsome task tcould refer to one of multiple indistinguishable transitions with label t.
preliminary investigations show that the problems of “hidden tasks” and “duplicate
tasks” are highly related, e.g., a wf-net with two transitions having the same label t
has a corresponding wf-net with hidden transitions but only one transition labeled t.
moreover, there are relations between the explicit requirements stated in deﬁnition 4.3
and theorem 4.10 and the implicit requirements just mentioned, e.g., in some cases anon-free-choice wf-net can be made free choice by inserting hidden transitions. these
ﬁndings indicate that the class of swf-nets is close to the upper bound of workﬂow
processes that can be mined successfully given the notion of completeness stated indeﬁnition 3.5. to move beyond swf-nets we either have to resort to heuristics or
strengthen the notion of completeness (and thus require more observations).
to conclude this section, we consider the complexity of the αalgorithm. event logs
may be huge containing millions of events. fortunately, the αalgorithm is driven by
relation>. the time it takes to build this relation is linear in the size of the log. the
complexity of the remaining steps in αalgorithm is exponential in the number of tasks.
however, note that the number of tasks is typically less than 100 and does not depend
on the size of the log. therefore, the complexity is not a bottleneck for large-scale
application.
5 related work
the idea of process mining is not new [7, 9–11, 19–24, 31–33, 41–45, 48–50]. cook and
wolf have investigated similar issues in the context of software engineering processes.
in [9] they describe three methods for process discovery: one using neural networks,one using a purely algorithmic approach, and one markovian approach. the authors
27consider the latter two the most promising approaches. the purely algorithmic approach
builds a ﬁnite state machine where states are fused if their futures (in terms of possible
behavior in the next k steps) are identical. the markovian approach uses a mixtureof algorithmic and statistical methods and is able to deal with noise. note that theresults presented in [9] are limited to sequential behavior. related, but in a diﬀerent
domain, is the work presented in [29, 30] also using a markovian approach restricted to
sequential processes. cook and wolf extend their work to concurrent processes in [10].they propose speciﬁc metrics (entropy, event type counts, periodicity, and causality)
and use these metrics to discover models out of event streams. however, they do not
provide an approach to generate explicit process models. recall that the ﬁnal goal ofthe approach presented in this paper is to ﬁnd explicit representations for a broad range
of process models, i.e., we want to be able to generate a concrete petri net rather than
a set of dependency relations between events. in [11] cook and wolf provide a measureto quantify discrepancies between a process model and the actual behavior as registered
using event-based data. the idea of applying process mining in the context of workﬂow
management was ﬁrst introduced in [7]. this work is based on workﬂow graphs, whichare inspired by workﬂow products such as ibm mqseries workﬂow (formerly known as
flowmark) and inconcert. in this paper, two problems are deﬁned. the ﬁrst problem
is to ﬁnd a workﬂow graph generating events appearing in a given workﬂow log. thesecond problem is to ﬁnd the deﬁnitions of edge conditions. a concrete algorithm is givenfor tackling the ﬁrst problem. the approach is quite diﬀerent from other approaches:
because the nature of workﬂow graphs there is no need to identify the nature (and
or or) of joins and splits. as shown in [27], workﬂow graphs use true and false tokenswhich do not allow for cyclic graphs. nevertheless, [7] partially deals with iteration
by enumerating all occurrences of a given task and then folding the graph. however,
the resulting conformal graph is not a complete model. in [33], a tool based on thesealgorithms is presented. schimm [41, 42, 45] has developed a mining tool suitable for
discovering hierarchically structured workﬂow processes. this requires all splits and joins
to be balanced. herbst and karagiannis also address the issue of process mining in thecontext of workﬂow management [21, 19, 20, 23, 24, 22] using an inductive approach. the
work presented in [22, 24] is limited to sequential models. the approach described in [21,
2819, 20, 23] also allows for concurrency. it uses stochastic task graphs as an intermediate
representation and it generates a workﬂow model described in the adonis modeling
language. in the induction step task nodes are merged and split in order to discover theunderlying process. a notable diﬀerence with other approaches is that the same taskcan appear multiple times in the workﬂow model, i.e., the approach allows for duplicate
tasks. the graph generation technique is similar to the approach of [7, 33]. the nature
of splits and joins (i.e., and or or) is discovered in the transformation step, wherethe stochastic task graph is transformed into an adonis workﬂow model with block-
structured splits and joins. in contrast to the previous papers, our work [31, 32, 48–50] is
characterized by the focus on workﬂow processes with concurrent behavior (rather thanadding ad-hoc mechanisms to capture parallelism). in [48–50] a heuristic approach using
rather simple metrics is used to construct so-called “dependency/frequency tables” and
“dependency/frequency graphs”. in [31] another variant of this technique is presentedusing examples from the health-care domain. the preliminary results presented in [31,
48–50] only provide heuristics and focus on issues such as noise. the approach described
in this paper diﬀers from these approaches in the sense that for the αalgorithm it is
proven that for certain subclasses it is possible to ﬁnd the right workﬂow model. in [4] the
emit tool is presented which uses an extended version of αalgorithm to incorporate
timing information. note that in this paper there is no detailed description of the α
algorithm nor a proof of its correctness.
process mining can be seen as a tool in the context of business (process) intelligence
(bpi). in [18, 40] a bpi toolset on top of hp’s process manager is described. the bpi
tools set includes a so-called “bpi process mining engine”. however, this engine doesnot provide any techniques as discussed before. instead it uses generic mining tools such
as sas enterprise miner for the generation of decision trees relating attributes of cases
to information about execution paths (e.g., duration). in order to do workﬂow mining itis convenient to have a so-called “process data warehouse” to store audit trails. such asdata warehouse simpliﬁes and speeds up the queries needed to derive causal relations. in
[13, 34–36] the design of such warehouse and related issues are discussed in the context
of workﬂow logs. moreover, [36] describes the pisa tool which can be used to extractperformance metrics from workﬂow logs. similar diagnostics are provided by the aris
29process performance manager (ppm) [25]. the later tool is commercially available and
a customized version of ppm is the staﬀware process monitor (spm) [46] which is
tailored towards mining staﬀware logs. note that none of the latter tools is extractingthe process model. the main focus is on clustering and performance analysis rather thancausal relations as in [7, 9–11, 19–24, 31–33, 41–45, 48–50].
more from a theoretical point of view, the rediscovery problem discussed in this paper
is related to the work discussed in [8, 16, 17, 38]. in these papers the limits of inductive
inference are explored. for example, in [17] it is shown that the computational problem of
ﬁnding a minimum ﬁnite-state acceptor compatible with given data is np-hard. severalof the more generic concepts discussed in these papers could be translated to the domain
of process mining. it is possible to interpret the problem described in this paper as an
inductive inference problem speciﬁed in terms of rules, a hypothesis space, examples,and criteria for successful inference. the comparison with literature in this domain raises
interesting questions for process mining, e.g., how to deal with negative examples (i.e.,
suppose that besides log wthere is a log vof traces that are not possible, e.g., added
by a domain expert). however, despite the many relations with the work described in
[8, 16, 17, 38] there are also many diﬀerences, e.g., we are mining at the net level rather
than sequential or lower level representations (e.g., markov chains, ﬁnite state machines,or regular expressions).
additional related work is the seminal work on regions [14]. this work investigates
which transition systems can be represented by (compact) petri nets (i.e., the so-calledsynthesis problem). although the setting is diﬀerent and our notion of completeness is
much weaker than knowing the transition system, there are related problems such as
duplicate transitions, etc.
6 conclusion
in this paper we addressed the workﬂow rediscovery problem. this problem was for-mulated as follows: “find a mining algorithm able to rediscover a large class of sound
wf-nets on the basis of complete workﬂow logs.” we presented the αalgorithm that is
able to rediscover a large and relevant class of workﬂow processes (swf-nets). throughexamples we also showed that the algorithm provides interesting analysis results for
30workﬂow processes outside this class. at this point in time, we are improving the min-
ing algorithm such that it is able to rediscover an even larger class of wf-nets. we
have tackled the problem of short loops and are now focusing on hidden tasks, duplicatetasks, and advanced routing constructs. however, given the observation that the classof swf-nets is close to the upper limit of what one can do assuming this notion of
completeness, new results will either provide heuristics or require stronger notions of
completeness (i.e., more observations).
it is important to see the results presented in this paper in the context of a larger eﬀort
[31, 32, 48–50]. the rediscovery problem is not a goal by itself. the overall goal is to be
able to analyze any workﬂow log without any knowledge of the underlying process and inthe presence of noise. the theoretical results presented in this paper provide insights that
are consistent with empirical results found earlier [31, 32, 48–50]. it is quite interesting
to see that the challenges encountered in practice match the challenges encountered intheory. for example, the fact that workﬂow process exhibiting non-free-choice behavior
(i.e., violating the ﬁrst requirement of deﬁnition 4.3) are diﬃcult to mine was observed
both in theory and in practice. therefore, we consider the work presented in this paperas a stepping stone for good and robust process mining techniques.
we have applied our workﬂow mining techniques to two real applications. the ﬁrst
application is in health-care where the ﬂow of multi-disciplinary patients is analyzed. wehave analyzed workﬂow logs (visits to diﬀerent specialists) of patients with peripheral
arterial vascular diseases of the elizabeth hospital in tilburg and the academic hospital
in maastricht. patients with peripheral arterial vascular diseases are a typical exampleof multi-disciplinary patients. we have preliminary results showing that process mining
is very diﬃcult given the “spaghetti-like” nature of this process. only by focusing on
speciﬁc tasks and abstracting from infrequent tasks we are able to successfully mine suchprocesses. the second application concerns the processing of ﬁnes by the cjib (centraaljustitieel incasso bureau), the dutch judicial collection agency located in leeuwarden.
we have successfully mined the process using information of 130136 cases. the process
comprises 99 tasks and has been validated by the cjib. this positive result shows thatprocess mining based on the αalgorithm and using tools like emit and little thumb
31is feasible for at least structured processes. these ﬁndings are encouraging and show the
potential of the αalgorithm presented in this paper.
acknowledgements the authors would like to thank ana karla alves de medeiros
and eric verbeek for proof-reading earlier versions of this paper and boudewijn van
dongen for his eﬀorts in developing emit and solving the problem of short loops.
references
1. w.m.p. van der aalst. veriﬁcation of workﬂow nets. in p. az´ ema and g. balbo, editors, application and
theory of petri nets 1997 , volume 1248 of lecture notes in computer science , pages 407–426. springer-
verlag, berlin, 1997.
2. w.m.p. van der aalst. the application of petri nets to workﬂow management. the journal of circuits,
systems and computers , 8(1):21–66, 1998.
3. w.m.p. van der aalst, j. desel, and a. oberweis, editors. business process management: models, tech-
niques, and empirical studies , volume 1806 of lecture notes in computer science . springer-verlag, berlin,
2000.
4. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance models from timed logs.
in y. han, s. tai, and d. wikarski, editors, international conference on engineering and deployment of
cooperative information systems (edcis 2002) , volume 2480 of lecture notes in computer science ,p a g e s
45–63. springer-verlag, berlin, 2002.
5. w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods, and systems .m i t
press, cambridge, ma, 2002.
6. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: which processes can be
rediscovered? beta working paper series, wp 74, eindhoven university of technology, eindhoven, 2002.
7. r. agrawal, d. gunopulos, and f. leymann. mining process models from workﬂow logs. in sixth
international conference on extending database technology , pages 469–483, 1998.
8. d. angluin and c.h. smith. inductive inference: theory and methods. computing surveys , 15(3):237–269,
1983.
9. j.e. cook and a.l. wolf. discovering models of software processes from event-based data. acm trans-
actions on software engineering and methodology , 7(3):215–249, 1998.
10. j.e. cook and a.l. wolf. event-based detection of concurrency. in proceedings of the sixth international
symposium on the foundations of software engineering (fse-6) , pages 35–45, 1998.
11. j.e. cook and a.l. wolf. software process validation: quantitatively measuring the correspondence of a
process to a model. acm transactions on software engineering and methodology , 8(2):147–176, 1999.
3212. j. desel and j. esparza. free choice petri nets ,v o l u m e4 0o f cambridge tracts in theoretical computer
science. cambridge university press, cambridge, uk, 1995.
13. j. eder, g.e. olivotto, and wolfgang gruber. a data warehouse for workﬂow logs. in y. han, s. tai, and
d. wikarski, editors, international conference on engineering and deployment of cooperative information
systems (edcis 2002) , volume 2480 of lecture notes in computer science , pages 1–15. springer-verlag,
berlin, 2002.
14. a. ehrenfeucht and g. rozenberg. partial (set) 2-structures - part 1 and part 2. acta informatica ,
27(4):315–368, 1989.
15. l. fischer, editor. workﬂow handbook 2001, workﬂow management coalition . future strategies, light-
house point, florida, 2001.
16. e.m. gold. language identﬁcation in the limit. information and control , 10(5):447–474, 1967.
17. e.m. gold. complexity of automaton identiﬁcation from given data. information and control , 37(3):302–
320, 1978.
18. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process quality through exception
understanding, prediction, and prevention. in p. apers, p. atzeni, s. ceri, s. paraboschi, k. ramamoha-
narao, and r. snodgrass, editors, proceedings of 27th international conference on very large data bases
(vldb’01) , pages 159–168. morgan kaufmann, 2001.
19. j. herbst. a machine learning approach to workﬂow management. in proceedings 11th european con-
ference on machine learning , volume 1810 of lecture notes in computer science , pages 183–194. springer-
verlag, berlin, 2000.
20. j. herbst. dealing with concurrency in workﬂow induction. in u. baake, r. zobel, and m. al-akaidi,
editors, european concurrent engineering conference . scs europe, 2000.
21. j. herbst. ein induktiver ansatz zur akquisition und adaption von workﬂow-modellen .p h d t h e s i s ,
universit¨ at ulm, november 2001.
22. j. herbst and d. karagiannis. integrating machine learning and workﬂow management to support
acquisition and adaptation of workﬂow models. in proceedings of the ninth international workshop on
database and expert systems applications , pages 745–752. ieee, 1998.
23. j. herbst and d. karagiannis. an inductive approach to the acquisition and adaptation of workﬂow
models. in m. ibrahim and b. drabble, editors, proceedings of the ijcai’99 workshop on intelligent
workﬂow and process management: the new frontier for ai in business ,pages52–57,stockholm,sweden,
august 1999.
24. j. herbst and d. karagiannis. integrating machine learning and workﬂow management to support ac-
quisition and adaptation of workﬂow models. international journal of intelligent systems in accounting,
finance and management , 9:67–92, 2000.
25. ids scheer. aris process performance manager (aris ppm). http://www.ids-scheer.com, 2002.
3326. s. jablonski and c. bussler. workﬂow management: modeling concepts, architecture, and implementation .
international thomson computer press, london, uk, 1996.
27. b. kiepuszewski. expressiveness and suitability of languages for control flow modelling in work-
ﬂows. phd thesis, queensland university of technology, brisbane, australia, 2002. available via
http://www.tm.tue.nl/it/research/patterns.
28. f. leymann and d. roller. production workﬂow: concepts and techniques . prentice-hall ptr, upper
saddle river, new jersey, usa, 1999.
29. h. mannila and d. rusakov. decomposing event sequences into independent components. in v. kumar
and r. grossman, editors, proceedings of the first siam conference on data mining , pages 1–17. siam,
2001.
30. h. mannila, h. toivonen, and a.i. verkamo. discovery of frequent episodes in event sequences. data
mining and knowledge discovery , 1(3):259–289, 1997.
31. l. maruster, w.m.p. van der aalst, a.j.m.m. weijters, a. van den bosch, and w. daelemans. automated
discovery of workﬂow models from hospital data. in b. kr¨ ose, m. de rijke, g. schreiber, and m.
van someren, editors, proceedings of the 13th b elgium-netherlands conference on artiﬁcial intelligence
(bnaic 2001) , pages 183–190, 2001.
32. l. maruster, a.j.m.m. weijters, w.m.p. van der aalst, and a. van den bosch. process mining: discovering
direct successors in process logs. in proceedings of the 5th international conference on discovery science
(discovery science 2002) , volume 2534 of lecture notes in artiﬁcial intelligence , pages 364–373. springer-
verlag, berlin, 2002.
33. m.k. maxeiner, k. k¨ uspert, and f. leymann. data mining von workﬂow-protokollen zur teilautoma-
tisierten konstruktion von prozemodellen. in proceedings of datenbanksysteme in b¨ uro, technik und
wissenschaft , pages 75–84. informatik aktuell springer, berlin, germany, 2001.
34. m. zur m¨ uhlen. process-driven management information systems combining data warehouses and
workﬂow technology. in b. gavish, editor, proceedings of the international conference on electronic
commerce research (icecr-4) , pages 550–566. ieee computer society press, los alamitos, california,
2001.
35. m. zur m¨ uhlen. workﬂow-based process controlling-or: what you can measure you can control. in
l. fischer, editor, workﬂow handbook 2001, workﬂow management coalition , pages 61–77. future strate-
gies, lighthouse point, florida, 2001.
36. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and controlling - technical and
organizational issues. in r. sprague, editor, proceedings of the 33rd hawaii international conference on
system science (hicss-33) , pages 1–10. ieee computer society press, los alamitos, california, 2000.
37. t. murata. petri nets: properties, analysis and applications. proceedings of the ieee , 77(4):541–580,
april 1989.
3438. l. pitt. inductive inference, dfas, and computational complexity. in k.p. jantke, editor, proceedings
of international workshop on analogical and inductive inference (aii) , volume 397 of lecture notes in
computer science , pages 18–44. springer-verlag, berlin, 1889.
39. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models , volume 1491 of lecture notes
in computer science . springer-verlag, berlin, 1998.
40. m.sayal,f.casati,andm.c.shanu.dayal. businessprocesscockpit. in proceedings of 28th international
conference on very large data bases (vldb’02) , pages 880–883. morgan kaufmann, 2002.
41. g. schimm. process mining. http://www.processmining.de/.42. g. schimm. generic linear business process modeling. in s.w. liddle, h.c. mayr, and b. thalheim,
editors, proceedings of the er 2000 workshop on conceptual approaches for e-business and the world
wide web and conceptual modeling , volume 1921 of lecture notes in computer science , pages 31–39.
springer-verlag, berlin, 2000.
43. g. schimm. process mining elektronischer gesch¨ aftsprozesse. in proceedings e lektronische
gesch¨ aftsprozesse , 2001.
44. g. schimm. process mining linearer prozessmodelle - ein ansatz zur automatisierten akquisition von
prozesswissen. in proceedings 1. konferenz professionelles wissensmana gement, 2001.
45. g. schimm. process miner - a tool for mining process schemes from event-based data. in s. flesca and
g. ianni, editors, proceedings of the 8th european conference on artiﬁcial intelligence (jelia) , volume
2424 of lecture notes in computer science , pages 525–528. springer-verlag, berlin, 2002.
46. staﬀware. staﬀware process monitor (spm). http://www.staﬀware.com, 2002.47. h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing workﬂow processes using woﬂan.
the computer journal , 44(4):246–279, 2001.
48. a.j.m.m. weijters and w.m.p. van der aalst. process mining: discovering workﬂow models from event-
based data. in b. kr¨ o s e ,m .d er i j k e ,g .s c h r e i b e r ,a n dm .v a ns o m e r e n ,e d i t o r s , proceedings of the 13th
belgium-netherlands conference on artiﬁcial intelligence (bnaic 2001) , pages 283–290, 2001.
49. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models from event-based data. in
v. hoste and g. de pauw, editors, proceedings of the 11th dutch-b elgian conference on machine learning
(benelearn 2001) , pages 93–100, 2001.
50. a.j.m.m. weijters and w.m.p. van der aalst. workﬂow mining: discovering workﬂow models from event-
based data. in c. dousson, f. h¨ oppner, and r. quiniou, editors, proceedings of the ecai workshop on
knowledge discovery and spatial data , pages 78–84, 2002.
35about the authors
wil van der aalst is a full professor of information systems and head of the sec-
tion of information and technology of the department of technology management ateindhoven university of technology. he is also a part-time full professor at the com-
puting science faculty at the department of mathematics and computer science at the
same university and an adjunct professor at queensland university of technology. hisresearch interests include information systems, simulation, petri nets, process models,
workﬂow management systems, veriﬁcation techniques, enterprise resource planning sys-
tems, computer supported cooperative work, and interorganizational business processes.
ton weijters is associate professor at the department of technology management of
the eindhoven university of technology (tue), and member of the beta researchgroup. currently he is working on (i) the application of knowledge engineering and
machine learning techniques for planning, scheduling, and process mining (ii) funda-
mental research in the domain of machine learning and knowledge discovering. he isthe author of many scientiﬁc publications in the mentioned research ﬁeld.
laura maruster received her b.s. degree in 1994 and m.s. in 1995, both in computer
science department at west university of timisoara, romania. at present she is aph.d candidate of the department of technology management of eindhoven university
of technology, eindhoven, the netherlands. her research interests include induction of
machine learning and statistical models, process mining and knowledge discovery.
contact information
corresponding authorprof.dr.ir. w.m.p. van der aalsteindhoven university of technology
faculty of technology and management (pav d2)
department of information and technologypo box 513
36nl-5600 mb eindhoven
the netherlands
phone: +31 40 247.4295/2290
fax: +31 40 243.2612e-mail: w.m.p.v.d.aalst@tm.tue.nl
www: http://www.tm.tue.nl/it/staﬀ/wvdaalst/
author 2
dr.ir. a.j.m.m. weijterseindhoven university of technology
faculty of technology and management
department of information and technologypo box 513
nl-5600 mb eindhoven
the netherlands
phone: +31 40 247.3857/2290
fax: +31 40 243.2612
e-mail: a.j.m.m.weijters@tm.tue.nl
www: http://www.tm.tue.nl/it/staﬀ/tweijters
author 3
m.sc. l. maruster
eindhoven university of technologyfaculty of technology and managementdepartment of information and technology
po box 513
nl-5600 mb eindhoventhe netherlands
37phone: +31 40 247.3703/2290
fax: +31 40 243.2612e-mail: l.maruster@tm.tue.nlwww: http://www.tm.tue.nl/it/staﬀ/lmaruster
38