case handling systems as product based workﬂow
design support
irene vanderfeesten, hajo a. reijers, and wil m.p. van der aalst
department of technology management, technische universiteit eindhoven
p.o. box 513, 5600 mb eindhoven, the netherlands
{i.t.p.vanderfeesten,h.a.reijers,w.m.p.v.d.aalst }@tue.nl
abstract. case handling systems offer a solution to the lack of ﬂexibility and
adaptability in workﬂow management systems. because they are data driven they
potentially provide good support for product based workﬂow design (pbwd).
in this paper we investigate to which degree current case handling systems
(flower and activity manager) are able to support pbwd. this is done by
elaborating the design process of a case from industry in both systems. from
this evaluation we concluded that current case handling systems are not yet com-
pletely ready for supporting pbwd. therefore, we recognize that better tool sup-
port is needed to make pbwd more suitable for practical use.
1 introduction
in the past decades, process-orientation has gained a strong foothold in various ﬁelds,
notably in the business management and information systems disciplines. this is illus-
trated by the emergence of process-oriented transformation approaches, like business
process redesign (bpr)[11,16], on the one hand and process-aware information sys-
tems, like workﬂow technology [3], on the other. with this rise, the historic focus on
the data that is being processed within businesses settings - and by information systems
in particular - has blurred. it should be remembered that during the 70s and 80s the
majority of information systems development projects would start with a thorough data
analysis, leading to conceptual data models, while nowadays similar projects typically
start with mapping the business to be supported in the form of process models.
recently, nothing short of a data revival has set in in the business process manage-
ment (bpm) community, bringing back attention for data aspects. this phenomenon can
be distinguished in at least two places. firstly , various problematic issues with workﬂow
and bpm systems are being countered with the introduction of systems that put much
more emphasis on the data that is being handled (e.g. case handling systems [2,7], in
this way moving away from a purely control-ﬂow centric perspective. secondly, inno-
vative bpr approaches are emerging that, rather counter-intuitively, take business data
processing requirements as starting point for generating a new business process de-
sign (e.g. [26,30]). in this paper, we will investigate to what extent synchronous move-
ments towards a higher data awareness in the ﬁelds of (i) workﬂow management and (ii)
business process design can mutually reen force each other. in the recent past, we have
worked on the development and application of the method of product-based workﬂow
j. filipe, j. cordeiro, and j. cardoso (eds.): iceis 2007, lnbip 12, pp. 187–198, 2008.
c/circlecopyrtspringer-verlag berlin heidelberg 2008188 i. vanderfeesten, h.a. reijers, and w.m.p. van der aalst
design (pbwd). this method takes a static description of an (information) product as
a starting point to derive an improved process design. the idea to focus on the product
instead of on an existing process when red esigning a process was introduced by [1]
and is based on a similar approach in manufact uring processes. since its conception,
this method has been worked out in some detail [25,26,27] and has been successfully
applied in industry in over a dozen of occasions. at the same time, the manual appli-
cation of pbwd in practice proves to be a time-consuming and error-prone affair. it is
likely that the absence of automated tools to support the application of pbwd hinders
the wider adoption of the method, despite its successes in bringing back cycle time and
service times of actual business processes with 30% or more [25]. on the road to the
development of pbwd support tools, it seems wise to consider some of the existing
tools that could already deliver (partial) support for the application of pbwd. a no-
table candidate for such support would be current case handling technology. after all,
just like traditional workﬂow management systems, case handling systems operate on
the basis of a pre-deﬁned process model. in contrast to workﬂow technology, however,
case handling systems implement various data management features [7]. the objectives
of the paper can now be formulated as follows: (i) to determine whether the concepts of
pbwd can be translated to the concepts of cu rrent case handling systems, (ii) to estab-
lish to what extent build-time features of case handling systems support the design of
workﬂow models based on pbwd, and (iii) to ﬁnd out how current case handling tools
could be enhanced to support pbwd. fulﬁlling t hese objectives could also be useful to
determine the desirable features of a speciﬁcally tailored support tool for pbwd, i.e.
without using current case handling systems. the structure of this paper is as follows.
in the next two sections, we will shortly review case handling systems and the pbwd
method respectively, forming the fundaments of this paper. in section 4, we will present
our assessment of two existing case handling technologies, i.e. pallas athena’s flower
and bpi’s activity manager. to conclude the paper, we present the major implications
from our assessment and directions for further research.
2 case handling systems
traditional workﬂow and bpm systems are characterized by well-known limitations in
terms of ﬂexibility and adaptability [5]. these limitations can be associated with the
dominant paradigm for process modelling found in these systems, which is almost ex-
clusively activity-centric [12]. the lack of ﬂexibility and adaptability leads to many
problems and inhibits a broader use of w orkﬂow technology. in recent years many au-
thors have discussed the problem [5,9,10,13,17,19,20] and different solution strategies
have been proposed. basically, there ar e three ways to provide more ﬂexibility:
–dynamic change [13,24,28]
–worklets [8,29,33], and
–case handling [2,7].
the basic idea of dynamic change is to allow changes at run-time, i.e., while work
is being performed processes may be adapted [5,13,24,28]. clearly, dynamic change
mechanisms can be used to support ﬂexibility and adaptability. a dynamic change maycase handling systems as product based workﬂow design support 189
refer to a single case (i.e., process instan ce) or multiple cases (e.g., all running instances
of a process). both changes at the instance level and the type level may introduce incon-
sistencies, e.g., data may be missing or activities are unintentionally skipped or executed
multiple times. a well-known problem is th e ”dynamic change bug” which occurs when
the ordering of activities changes or the process is made more sequential [13]. these
issues have been addressed by systems such as adept [24,28]. such a system can
safeguard the consistency of a process. however, an additional complication is that the
people changing the processes should be able to modify process models and truly un-
derstand the effects of a change on the whole process. in real-life applications, with
hundreds of tasks, few people are qualiﬁed to make such changes.
worklets [8] allow for ﬂexibility and adaptability by the late binding of process frag-
ments. activities in a process are not bound to a concrete application or subprocess and
only when they need to be executed a concrete application or subprocess is selected.
yawl [4] is an example of a system that implements this idea. in yawl activities
may be handled by a worklet handler, this handler uses an extensible set of ripple-down
rules to select the right worklet (i.e., a concrete application or subprocess). similar ideas
have been proposed by other authors (e.g., [33]) and even implemented in commercial
systems (cf. the staffware extension that allows for process fragments [29]. although
the worklets mechanism is easier to be used by end-users than most dynamic change
mechanisms, the scope is limited and only particular forms of ﬂexibility and adaptabil-
ity can be supported.
case handling is another paradigm for supporting ﬂexible and knowledge intensive
business processes. the concept of case handling offers a solution to the lack of ﬂexibil-
ity in traditional workﬂow systems [7]. case handling is supporting knowledge inten-
sive business processes and focuses on what can be done instead of on what should be
done. to support this, a case handling system is much more data driven than a workﬂow
system. the central concept for case handling is the case and not the routing of work or
the activities. the case is the product that is manufactured in the process based on the
data that is processed. the core features of case handling are [2,7]:
–to avoid context tunneling by providing all information available (i.e., present the
case as a whole rather than showing just bits and pieces),
–to decide which activities are enabled on the basis of the information available
rather than the activities already executed,
–to separate work distribution from authorization and allow for additional types of
roles, not just the execute role,
–to allow workers to view and add/modify data before or after the corresponding
activities have been executed (e.g., information can be registered the moment it
becomes available).
these core features of case handling are supported by systems such as flower [22].
other systems such as bpi’s activity manager [15] only support some of these features.
unlike dynamic change and worklets, case ha ndling provides implicit ﬂexibility, i.e.,
there is no need to change a process model or t o select a particular worklet. moreover,
as the list of core features suggests, case handling takes a broader perspective by also
incorporating aspects as work distribution and information collection.190 i. vanderfeesten, h.a. reijers, and w.m.p. van der aalst
3p b w d
product based workﬂow design, or in short pbwd, [1,25,26,27] is a revolutionary
approach to workﬂow process design. it is re volutionary because a clean-sheet of paper
is taken to design the complete process from scratch. rather than the activities and the
workﬂow process itself, it takes the processing of data and the workﬂow end product as
the central concepts. this approach has sever al advantages that are described in [25,31].
the most important advantage is that pbwd is rational. in the ﬁrst place because the
product speciﬁcation is taken as the basis for a workﬂow design, each recognized in-
formation element and each production rule can be justiﬁed and veriﬁed with this spec-
iﬁcation. as a consequence there are no unnecessary tasks in the resulting workﬂow.
secondly, the ordering of (tasks with) production rules themselves is completely driven
by the performance targets of the design effort. the workﬂow product is represented by
a product data model (pdm), i.e. a network s tructure of the components of the product.
the approach of pbwd is very similar to the way in which manufacturing processes
are structured. this will be explained in more detail in the remainder of this section.
section 3.1 shortly describes the similar concepts in manufacturing, while section 3.2
subsequently elaborates on the important concepts of pbwd. finally, section 3.3 in-
troduces an industry case as an example of pbwd, which is used throughout the as-
sessment of the two concrete systems, as summarized in section 4.
3.1 bill-of-material (bom)
in manufacturing, often a static representation of the product is used to organise the
assembly lines. figure 1(a) shows such a representation for the assembly of a car. a
car is made of 4 wheels, a chassis, and an engine. the structure of the assembly line
can be derived from the picture as follows: ﬁrst, the four wheels and the chassis are
(a)
 (b)
fig. 1. (a) the bill of material (bom) of a car. (b) the product data model which represents
the decision on the suitability to become a helicopter pilot. the meaning of the elements is as
follows: (a) decision for suitability to become a helicopter pilot, (b) psychological ﬁtness, (c)
physical ﬁtness, (d) latest result of suitability te st in the previous two years, (e) quality of reﬂexes,
(f) quality of eye-sight.case handling systems as product based workﬂow design support 191
put together, resulting in a subassembly pr oduct. next, the ﬁnal assembly takes place
by putting the subassembly product and the engine together. the result is a car. the
representation of the product and its parts is referred to as the bill-of-material (bom)
[21] and is also used in information systems, e.g. mrp- and erp-systems for produc-
tion planning and control. manufacturing and service-oriented processes have a lot in
common [23], e.g. process management in both domains focuses on the routing of work
and the allocation of work to resources. because of these similarities it was considered
worthwhile to explore the applicability of some concepts from the ﬁeld of manufac-
turing to administrative and information intensive processes (referred to as workﬂow
processes). the pbwd method derives a process model from the structure of an (ad-
ministrative) product. this product structure is represented with a pdm, as explained
in the next section.
3.2 product data model (pdm)
the product of a workﬂow process can be an insurance claim, a mortgage request,
a social beneﬁts grant, etc. similar to a bom, a pdm of this product can be made.
however, the building blocks are not the physical parts that have to be assembled, but
the data elements (e.g. name, birth date, amount of salary, type of insurance and register
of holidays) that have to be processed to achieve new data.
figure 1(b) contains a small and simple example, comparable to the simple bom
of the car in figure 1(a). it describes the decision whether an applicant is allowed for
a training to become a helicopter pilot (see also [25]). persons that want to become a
helicopter pilot should meet some requirements: they should be healthy, their eye-sight
should be excellent, they should pass a psychological assessment, and they should not
have been rejected in the previous two years. the ﬁgure shows that the ﬁnal decision
whether a person can become a helicopter pilo t (data element a) is dependent either on
the data elements (b) and (c), or on (f), or on (d ). in reality, these different combinations
reﬂect the different conditions under which certain operations can be executed. in case
there is a result of a recent suitability test (d), this information directly determines the
outcome (a). also, in case the value for the quality of eye-sight of the applicant is bad (f)
this directly leads to a rejection (a). in the other cases, the results of both a psychological
(b) and a physical test (c) are needed. one level lower, the physical test (c) consists of
the results for the quality of reﬂexes (e) and for the quality of eye-sight (f).
the data elements of the pdm are depicted as circles. the operations on these data
elements are represented by arcs. the arcs ar e ‘knotted’ together when the data elements
are all needed to execute the particular opera tion. compare, for instance, the arcs from
(b) and (c) leading to (a) on the one hand, to the arc from (d) leading to (a) on the
other in figure 1(b). in the latter case only one data element is needed to determine the
outcome of (a), while in the case of (b) and (c) both elements are needed to produce (a).
the helicopter pilot example, which we discussed here, is very small. typically, in
industry the pdms are much larger; possibly containing hundreds of data elements.
based on such a pdm, a workﬂow process model can be obtained by grouping data
elements and operations into activities (see also [25,27]), as will be illustrated in the
next section.192 i. vanderfeesten, h.a. reijers, and w.m.p. van der aalst
3.3 the gak case
in this section we introduce a case from industry as a motivating example. this example
is used in the assessment of the two contemporar y case handling systems, as described in
section 4. the subject of the case study is the gak agency (currently known as uwv)
which is responsible for awarding unemployment beneﬁts in the netherlands. the pro-
cess in question deals with the decision that the gak has to make on whether or not
to grant such beneﬁts once a request has been received. the typical factors that should
be taken into account are the reason for the applicant to have become unemployed, the
length of the period that the previous job was held, and the coverage regulations.
the pdm for the gak case is shown in figure 2. a detailed description of the case
and of the data elements can be found in [25]. the next section describes how we have
assessed the process of design in two contemporary case handling systems based on the
gak pdm. for this assessment we have used the process model (figure 3) as it was
manually derived from the pdm in earlier work [25].
designing a process model from a pdm mainly comes down to grouping data el-
ements and operations in a smart way, considering several context constraints and re-
quirements on the structure (e.g. the processing order should be determined such that
fig. 2. the pdm for the gak casecase handling systems as product based workﬂow design support 193
b
j
l mki hg f e d ci37 in i1 not(i9) i37 in i8 i37 in i2 not(i37 in i1) and not(i37 in i2) andnot(i37 in i8) and i9
i10 not defined i10 defined
i17 not(i17)
not(i15) i15(i1, (i25, i37}), (i2, {i25, i37}), (i3, {i33, i37}), (i4, {i33, i37}),
(i5, {i37, i45}), (i6, {i21, i37}), (i7, {i24, i37}), (i8, {i23, i37}),
(i9, {i24, i39}), (i28, {i25, i37})
(i34, {i36, i37, i41}), (i42, {i47}),
(i10, {i13, i14, i34, i37, i42})
(i18, {i1}) (i18, {i2}) (i18, {i8}) (i18, {i9})
(i18, {i10})(i32, {i1, i2, i3, i4, i5, i6, i7, i8, i10, i27, i28}),
(i43, {i39, i49}), (i30, {i32, i37, i43}), (i17,
{i25, i30}), (i29, {i25, i30, i35, i36})
(i16, {i25, i30, i35, i36, i44}),
(i15, {i16, i17})(i15, {i17}),
(i40, {i39, i41}), (i31, {i29, i40, i48}),
(i11, {i31}), (i18, {i9, i11, i15})
(i40, {i39, i41}), (i31, {i29, i40, i48}),
(i11, {i31}), (i18, {i9, i11, i15})
(i18, {i15})
fig. 3. the process model for the gak case
the expected number of additional work at any point in the process is minimized for
the average case). as an illustration, we have indicated in figure 2 the part of the gak
pdm that corresponds to activity g in the resulting process model in figure 3 (i.e. g
contains the data elements id10, id13, id14, id34, id36, id37, id41, id42, and id47 and
their corresponding operations.)
4 assessment
as was explained in the introduction, workﬂow management systems focus on the
control-ﬂow perspective, while case hand ling systems are more data-driven. because194 i. vanderfeesten, h.a. reijers, and w.m.p. van der aalst
of their focus on data, case handling systems may provide support for pbwd. in order
to investigate their possibilities and potential support for pbwd, we have selected two
case handling systems:
–f l o w e r is a case handling system developed by pallas athena [22]. it consists of
a number of components, of which flower studio is the graphical design environ-
ment. flower studio is used at build-time to deﬁne case deﬁnitions consisting of
activities, precedences, data objects, roles and forms.
– activity manager by bpi is an ‘add-on’ that can be used in combination with a
workﬂow management system, such as co sa and staffware [18]. for demonstra-
tion purposes also a stand-alone version can be used. in this research we used this
stand-alone version because it is easier to m anage. activity manager combines the
structure and control of a workﬂow management system with the ﬂexibility of case
handling. it imports the process model from the workﬂow management system via
a database and provides the means to further deﬁne the activities in this model by
elaborating the operations.
when considering the pbwd method in detail, we think a system that supports this
method in a proper way should at least provide for the following:
–a means to deﬁne and view the product structure.
–a way to deﬁne and view the content of each activity (in terms of data elements and
their relationships).
–proper support for the process of designing a process model based on the pdm (for
example, it should give the designer some freedom to play around with different
designs and groupings of operations and data elements).
in [32] we have elaborated in detail on the way in which pbwd can be used to design a
process model in flower and activity manager, describing all steps taken to translate
the pdm into the process model. it is illustrated with a series of screenshots for both
systems [32]. the focus in both assessments is on the process of designing and deﬁning
the process model based on the pdm1. in general, the following steps should be taken
and supported by the system to get from a pdm to a process model:
1. the pdm must be translated to the speci ﬁc system. this means that either the data
elements or the operations (or both) must be mapped on concepts in the system and
subsequently be speciﬁed.
2. the activities must be deﬁned as groups of data elements and/or operations. there
must be an easy way to transfer an operation or data element from one activity to
another, as a way of exploring various designs. also, the correct order of activities
must be deﬁned, because precedence re lationships should be respected.
3. the process model must be ﬁnalized with for instance information on resources,
conditions, or activity duration.
1note that the process of designing and deﬁning a process model based on a pdm is different
from the common way in practice to design a process model. instead of using a subjective
workshop setting (i.e. interviews, observations, etc.) to discover the process model, a more
objective approach is used starting from the product structure.case handling systems as product based workﬂow design support 195
fig. 4. screenshot of the design environment of activity manager. note that on the left-hand side
all activities are summarized and their content is shown. for example, the content of activity
g corresponds to the data elements and operations indicated in figure 1(b). the data elements
are represented by their identiﬁers (e.g. “id29”) and operations are represented by tuples (e.g.
(id1,{id25,i d 37}))with one output element and a set of one or more input elements. for a
more elaborate explanation we refer to [32].
from our evaluation we can conclude that it was not at all straightforward to follow
these general steps in both systems2. therefore, we feel the systems do not match all
requirements that were stated above. for example, they both did not provide a way to
represent the product structure. in both systems it is possible to somehow deﬁne data
elements (in flower this was easier than in activity manager), but the concept of op-
erations and their dependencies is less clear to capture with these systems. since opera-
tions are the main building blocks for activities, the lack of a clear notion of operations
in the tool might hamper the design process.
moreover, activity manager does not provide the means to start with deﬁning the data
elements. first, the order of activities has to be established in this system. this means that
there is less freedom in grouping operations to activities. on the other hand, it was pos-
sible to map all concepts from the standard workﬂow terminology (i.e. process, activity,
operation, and data element) to concepts in activity manager. in principle, this mapping
should allow for a smoother embedding of pbwd within the activity manager.
in comparison, flower could not map all workﬂow concepts (there was no equiva-
lent for an operation), but it was possible to easily deﬁne, view and change the content
of an activity. a more extensive discussion on these two tools can be found in [32].
2a detailed description of the translation of the pdm to a process model in both systems can
be found in [32], including two series of screenshots for the two systems.196 i. vanderfeesten, h.a. reijers, and w.m.p. van der aalst
5 conclusions
in this paper we have investigated to what extent current case handling systems are able
to support pbwd by evaluating flower and activity manager. both systems still put
some emphasis on the control-ﬂow of the process, despite of their innovative focus on
data. however, in flower we really can start reasoning from the pdm (i.e. by starting
with the deﬁnition of data elements and thei r dependencies). thi s provides the oppor-
tunity to really focus on the grouping of da ta elements instead of on the deﬁnition of
activities directly. by putting groups of da ta elements on one form and playing around
with these combinations it is possible to compose activities based on the data and op-
erations of the pdm instead of ﬁrst deﬁning the activities and afterwards determining
what should be done in these activities.
by contrast, bpi’s activity manager is considerably more process driven than data
driven, as it starts from the deﬁnition of a process model. of course, this follows from
the fact that activity manager is ‘added on’ to a workﬂow system, which only allows
activity manager to further specify the proces s structure already given. because of this,
it is not possible to directly design a process model which is purely based on a pdm.
the user needs to have a good understanding of how the activities are organized and
what the content of each activity should be. th is means that the process of designing
a process model based on the pdm should then be done outside the tool, in such a
way that the result (i.e. the activities including their operations) can be implemented in
the system. this violates our third requirement, i.e. that the tool itself should provide
some support in the design process. taking this design perspective we can remark that
flower offered the best assistance in creating a process model based on the product
structure.
looking at the evaluation from a conceptual viewpoint, we can conclude that both
systems do not (yet) provide a facility to display the pdm as a hierarchical structure.
therefore, this would be a nice extension in order to use these systems as pbwd sup-
port tools. however, all concepts of the pdm and pbwd could be mapped to concepts
in activity manager, while flower is able to represent all concepts except for the
operations.
this evaluation shows that current case handling systems, and thus current workﬂow
technology in general, are not yet completely ready for pbwd. the research challenge
now is to develop good support for applying this method in practice. the ﬁrst contri-
bution of this assessment is an overview of how existing systems can be improved to
support pbwd. in close cooperation with suppliers of case handling systems we will
further investigate the opportunities of using their systems. secondly, we have learned
some lessons for the development of speciﬁc tools for pbwd support. it seems to be
important to (i) display and edit the pdm in the tool, and (ii) to somehow circumvent
direct relations from activities to data elements. finally, future work will focus on the
discovery and collection of data elements and their relationships (i.e. the derivation of
a pdm). at this point in time, the prom import framework for process mining [6] al-
ready supports mining based on data elements [14]. on a general level, this research
shows that current workﬂow technology is not neutral towards the kind of process de-
sign. even data-focused technology, such as case handling systems, still needs some
control-ﬂow information right from the start of the design process.case handling systems as product based workﬂow design support 197
acknowledgements. this research is supported by the technology foundation stw,
applied science division of nwo and the technology programme of the dutch ministry
of economic affairs. we gratefully acknowledge the technical assistance from pallas
athena and gyata bpi.
references
1. van der aalst, w.m.p.: on the automatic generation of workﬂow processes based on prod-
uct sstructures. computers in industry 39, 97–111 (1999)
2. van der aalst, w.m.p., berens, p.j.s.: beyond workﬂow management: product-driven case
handling. in: ellis, s., rodden, t., zigurs, i. (eds.) international acm siggroup confer-
ence on supporting group work (group 2001), pp. 42–51. acm press, new york (2001)
3. van der aalst, w.m.p., van hee, k.m.: workﬂow management: models, methods, and sys-
tems. mit press, cambridge (2002)
4. van der aalst, w.m.p., ter hofstede, a.h.m.: yawl: yet another workﬂow language. in-
formation systems 30(4), 245–275 (2005)
5. van der aalst, w.m.p., jablonski, s.: dealing with workﬂow change: identiﬁcation of issues
and solutions. international journal of computer systems, science, and engineering 15(5),
267–276 (2000)
6. van der aalst, w.m.p., van dongen, b.f., herbst, j., maruster, l., schimm, g., weijters,
a.j.m.m.: workﬂow mining: a survey of issues and approaches. data and knowledge
engineering 47(2), 237–267 (2003)
7. van der aalst, w.m.p., weske, m., gr¨ unbauer, d.: case handling: a new paradigm for
business process support. data and knowledge engineering 53(2), 129–162 (2005)
8. adams, m., ter hofstede, a.h.m., edmond, d. , van der aalst, w.m.p.: facilitating flexibil-
ity and dynamic exception handling in workﬂows. in: belo, o., eder, j., pastor, o., falcao,
j. (eds.) caise 2005, pp. 45–50 (2005)
9. agostini, a., de michelis, g.: improving flexibility of workﬂow management systems. in:
van der aalst, w.m.p., desel, j., oberweis, a. (eds.) business process management. lncs,
vol. 1806, pp. 218–234. springer, heidelberg (2000)
10. casati, f., ceri, s., pernici, b., pozzi, g.: workﬂow evolution. data and knowledge engi-
neering 24(3), 211–238 (1998)
11. davenport, t.h.: process innovation: reengineering work through information technology.
harvard business school press, boston (1993)
12. dumas, m., van der aalst, w.m.p., ter hofstede, a.h.m.: process-aware information sys-
tems: bridging people and software through process technology. wiley & sons, chichester
(2005)
13. ellis, c.a., keddara, k.: a workﬂow change is a workﬂow. in: van der aalst, w.m.p.,
desel, j., oberweis, a. (eds.) business process management. lncs, vol. 1806, pp. 201–
217. springer, heidelberg (2000)
14. guenther, c.w., van der aalst, w.m.p.: mining activity clusters from low-level event
logs. bpm center report bpm-06-11 (2006), http://www.bpmcenter.org
15. gyata bpi. gyata bpi (2006) (accessed on november 15),
http://www.gyatabpi.com
16. hammer, m., champy, j.: reengineering the corporation. nicolas brealey publishing, lon-
don (1993)
17. herrmann, t., hoffmann, m., loser, k.u., moysich, k.: semistructured models are surpris-
ingly useful for user-centered design. in: de michelis, g., giboin, a., karsenty, l., dieng,
r. (eds.) designing cooperative systems (coop 2000), pp. 159–174. ios press, amsterdam
(2000)198 i. vanderfeesten, h.a. reijers, and w.m.p. van der aalst
18. kaan, k., reijers, h.a., van der molen, p.: introducing case management: opening work-
ﬂow managements black box. in: dustdar, s., fiadeiro, j.l., sheth, a.p. (eds.) bpm 2006.
lncs, vol. 4102. springer, heidelberg (2006)
19. klein, m., dellarocas, c., bernstein, a. (eds.): proc. of the cscw 1998 workshop towards
adaptive workﬂow systems, seattle, washington (november 1998)
20. klein, m., dellarocas, c., bernstein, a. (eds.): adaptive workﬂow systems. special issue of
the journal of computer supported cooperative work 9 (2000)
21. orlicky, j.a.: structuring the bill of materials for mrp. in: production and inventory man-
agement, pp. 19–42 (december 1972)
22. athena, p.: pallas athena (2006) (accessed on november 15),
http://www.pallasathena.nl
23. platier, e.a.h.: a logistical view on business processes: bpr and wfm concepts. phd
thesis, eindhoven university of technology, eindhoven (1996) (in dutch)
24. reichert, m., dadam, p.: adeptﬂex: supporting dynamic changes of workﬂow without
loosing control. journal of intelligen t information syste ms 10(2), 93–129 (1998)
25. reijers, h.a.: design and control of workﬂow processes. lncs, vol. 2617. springer, hei-
delberg (2003)
26. reijers, h.a., limam mansar, s., van der aalst, w.m.p.: product-based workﬂow design.
journal of management information systems 20(1), 229–262 (2003)
27. reijers, h.a., vanderfeesten, i.t.p.: cohesion and coupling metrics for workﬂow process
design. in: desel, j., pernici, b., weske, m. (eds.) bpm 2004. lncs, vol. 3080, pp. 290–
305. springer, heidelberg (2004)
28. rinderle, s., reichert, m., dadam, p.: correctness criteria for dynamic changes in work-
ﬂow systems: a survey. data and knowledge engineering 50(1), 9–34 (2004)
2 9 . s t a f f w a r e .s t a f f w a r ep r o c e s ss u i t ev e r s i o n2–w h i t ep a p e r .s t a f f w a r ep l c ,m a i d e n h e a d ,
uk (2003)
30. sun, s.x., zhao, j.l.: a data flow approach to workﬂow design. in: proceedings of the
14th workshop on information technology and systems (wits 2004), pp. 80–85 (2004)
31. vanderfeesten, i., van der aalst, w.m.p., reijers, h.a.: modelling a product based workﬂow
system in cpn tools. in: jensen, k. (ed.) proceedings of the sixth workshop on the practical
use of coloured petri nets and cpn tools (cpn 2005) daimi, october 2005, vol. 576, pp.
99–118. university of aarhus, aarhus (2005)
32. vanderfeesten, i., reijers, h.a., van der aalst, w.m.p.: product based workﬂow design
with case handling systems. beta working paper series, wp 189. eindhoven university
of technology, eindhoven (2006)
33. weske, m.: formal foundation and conceptual design of dynamic adaptations in a work-
ﬂow management system. in: sprague, r. (ed.) proceedings of the thirty-fourth annual
hawaii international conference on system science (hicss-34). ieee computer society
press, los alamitos (2001)