multidimensional process mining using
process cubes
alfredo bolt and wil m.p. van der aalst
department of mathematics and computer science, eindhoven university of
technology, eindhoven, the netherlands
{a.bolt,w.m.p.v.d.aalst}@tue.nl
abstract. process mining techniques enable the analysis of processes
using event data. for structured processes without too many variations,
it is possible to show a relative simple model and project performance
and conformance information on it. however, if there are multiple classes
of cases exhibiting markedly dierent behaviors, then the overall pro-
cess will be too complex to interpret. moreover, it will be impossible to
see dierences in performance and conformance for the dierent process
variants. the dierent process variations should be analysed separately
and compared to each other from dierent perspectives to obtain mean-
ingful insights about the dierent behaviors embedded in the process.
this paper formalizes the notion of process cubes where the event data
is presented and organized using dierent dimensions. each cell in the
cube corresponds to a set of events which can be used as an input by
any process mining technique. this notion is related to the well-known
olap (online analytical processing) data cubes, adapting the olap
paradigm to event data through multidimensional process mining . this
adaptation is far from trivial given the nature of event data which can-
not be easily summarized or aggregated, conicting with classical olap
assumptions. for example, multidimensional process mining can be used
to analyze the dierent versions of a sales processes, where each version
can be dened according to dierent dimensions such as location or time,
and then the dierent results can be compared. this new way of looking
at processes may provide valuable insights for process optimization.
keywords: process cube, process mining, olap, comparative pro-
cess mining
1 introduction
process mining can be seen as the missing link between model-based process
analysis (e.g., simulation and verication) and data-oriented analysis techniques
such as machine learning and data mining [1]. it seeks the \confrontation" be-
tween real event data and process models (automatically discovered or hand-
made). classical process mining techniques focus on analysing a process as a
whole, but in this paper we focus on isolating dierent process behaviors (ver-
sions) and present them in a way that facilitates their comparison by approaching
process mining in a multidimensional perspective.2 a. bolt, w.m.p. van der aalst
multidimensional process mining has been approached recently by some au-
thors. the event cube approach described in [2] presents an exploratory view on
the applications of olap operations using events . the process cube approach
is introduced by the second author in [3] with an initial prototype implementa-
tion [4]. the process cube notion was proven useful in case studies [5, 6]. these
approaches have established a conceptual framework for process cubes, however,
they still present some conceptual limitations. one of the limitations of [3] is
related to concurrency issues (e.g. derived properties are created on the event
base which may be used with many process cube structures , which would force all
the dimensions that correspond to a specic property to have exactly the same
meaning and value set. this is an undesired behavior when for example, calcu-
lating in dierent process cube structures a dimension customer type according
to dierent criteria). other limitations are the structure within dimensions (e.g.
there is no composition of attributes and no hierarchies of aggregation, therefore
noroll-up and drill-down directions) and the (lack of) granularity-level deni-
tions (used for dening the cube cells distribution and lter the events in each
cell). in this paper we provide an improved formalization of the process cube
conceptual framework.
the idea is related to the well-known olap multidimensional paradigm
[7]. olap techniques organize the data under multiple combinations of dimen-
sions and typically numerical measures, and accessing the data through dierent
olap operations such as slicing, dicing, rolling up and drilling down. lots of re-
search have been conducted to deal with olap technical issues such as the mate-
rialization process. an extensive overview of such approaches can be found in [8].
the application of olap on non-numerical data is increasingly being explored.
temporal series, graphs and complex event sequences are possible applications
[9{11]. however, there are two signicant dierences between olap and pro-
cess cubes: summarizability and representation. the rst refers to the classic
olap cubes assumption on the summarizability of facts. this allows for pre-
computations of the dierent multidimensional perspectives of the cube, which
provides real-time (on-line) analysis capabilities. some authors have studied
summarizability issues in olap [15, 16] and attempt to solve it by introducing
rules and constraints to the data model. in process cubes, summarizability is
not guaranteed because of the process-oriented nature of the event data used. in
process mining, each event is related to one or more traces, and the relevance of
an event as data is given mostly by its relations with other events within those
traces. one cannot simply merge or split process cube cells as summarizable
olap cells because events are ordered, and any slight change in that ordering
may change the whole representation of the cell where that event is being con-
tained. the second refers to classical olap relying on the aggregation of facts
for reducing a set of values into a single value that can be represented in many
ways. on the other hand, process cubes have to deal with a much more com-
plex representation of data. process cube cells are associated to process models
and not just event data, and both are directly related. observed and modeledmultidimensional process mining 3
behavior can be compared, process models can be discovered from events, and
events can be used to replay behavior into otherwise static process models.
the remainder is organized as follows. in sec 2. we dene the process cube
notion as a means for viewing event data from dierent perspectives. sec 3.
presents our implementation of process cubes. in sec 4. we discuss the experi-
ments and benets that can be achieved through our approach. finally sec 5.
concludes the paper by discussing some challenges and future work.
2 process cubes
in this section we will formalize the notion of a process cube, dening all of its
inner components. a process cube is formed by a structure that describes the
\shape" of the cube (distribution of cells) and by the real data that will be used
as a basis to \ll" those cells.
2.1 event base
normally, event logs serve as the starting point for process mining. these logs
are created having a particular process and a set of questions in mind. an event
log can be viewed as a multiset of traces . each trace describes the life-cycle of
a particular case (i.e., a process instance ) in terms of the activities executed.
often event logs store additional information about events. for example, many
process mining techniques use extra information such as the resource (i.e., person
or machine) executing or initiating the activity, the timestamp of the event, or
data elements recorded with the event.
anevent collection is a set of events that have certain properties, but no
dened cases andactivities . table 1 shows a small fragment of some larger event
collection. each event has a unique id and several properties. for example, event
0001 is an instance of action athat occurred on december 28th of 2014 at 6:30
am, was executed by john, and costed 100 euros. an event collection can be
transformed into an event log by selecting event properties (or attributes) as
case idandactivity id. for example, in table 1, sales order could be the case id
and action could be the activity idof an event log containing all events of the
event collection.
table 1. a fragment of an event collection: each row corresponds to an event.
event idsales order timestamp action resource cost
0001 1 28-12-2014:06.30 a john 100
0002 1 28-12-2014:07.15 b anna
0003 1 28-12-2014:08.45 c john
0004 2 28-12-2014:12.20 a peter 150
0005 1 28-12-2014:20.28 d mike
0006 2 28-12-2014:23.30 c anna
. . . . . . . . . . . . . . . . . .4 a. bolt, w.m.p. van der aalst
for process cubes we consider an event base , i.e., a large collection of events
not tailored towards a particular process or predened set of questions. an event
base can be seen as an all-encompassing event log or the union of a collection of
related event logs. the events in the event base are used to populate the cells in
the cube. throughout the paper we assume the following universes.
denition 1 (universes) uvis the universe of all attribute values (e.g.,
strings, numbers, etc..). us=p(uv)is the universe of value sets. uais the
universe of all attribute names (e.g., year, action, etc...).
note thatv2uvis a single value (e.g., v = 5 ),v2usis a set of values
(e.g., v =feurope, americag),a2uais a single attribute name (e.g., age).
denition 2 (event base) anevent base eb= (e;p; )denes a set of
eventse, a set of event properties p, and a function 2p!(e6!u v).for
any property p2p,(p)(denotedp) is a partial function mapping events into
values. ifp(e) =v, then event e2ehas a property p2pand the value of this
property is v2uv. ife62dom(p), then event e does not have a property p and
we writep(e) =?to indicate this.
an event base is created from an event collection like the one presented
in table 1. if we transform this table into an eb, then the set of events e
consist of all dierent elements of the eventidcolumn of table 1. in this case,
e =f0001,0002,0003,0004,0005,0006,... g. the set of properties pis the set of
column headers of table 1, with the exception of event id. in this case, p =
fsales order, timestamp, action, resource, cost g. the function retrieves the
value of each row (event) and column (property) combination (cell) in table 1.
for example, the value of the property action for the event 0001 is given by
action (0001) =a. in the case that this value is empty in the table, we will use
?to denote it in the eb (e.g., cost(0002) =?).
note that an event identier ( event id)e2edoes not have a meaning, but
it is unique for each event.
2.2 process cube structure
independent of the event base ebwe dene the structure of the process cube.
aprocess cube structure (pcs) is fully characterized by the set of dimensions
dened for it, each dimension having its own hierarchy .
before dening the concepts of hierarchy and dimension, we need to dene
some basic graph properties.
denition 3 (directed acyclic graph) adirected acyclic graph (dag) is
a pairg= (n;e )wherenis a set of nodes and enna set of edges
connecting these nodes, where:multidimensional process mining 5
{n1;n22n;n 16=n2:e1= (n1;n2)2eis adirected edge that starts in n1
and ends in n2,
{a walkw2ewith a length ofjwj1is an ordered list of directed edges
w= (e1;:::;e k)withej2e:ej= (nj;nj+1))ej+1= (nj+1;nj+2);1
j <k2n, and
{8n2n: there is no walk w2ethat starts and ends in n.
note that there cannot be any directed cycles of any length in a dag. for
example, part (1) in fig 1 shows a dag with nodes: fcity,country,etc... g.
denition 4 (dimension) a dimension is a pair d= ((a;h );valueset )where
thehierarchy (a;h )is a dag with nodes au a(attributes) and a set of
directed edges haa, andvalueset2a!u sis a function dening the
possible set of values for each attribute.
the attributes in aare unique. the set of directed edges hdenes the
navigation directions for exploring the dimension. an edge ( a1;a2)2hmeans
that attribute a1can be rolled up to attribute a2(dened in sec 2.5). a dimension
should describe events from a single perspective through any combination of
its attributes (e.g., attributes cityand country can describe a location ) where
attributes describe the perspective from higher or lower levels of detail (e.g., city
describes a location in a more ne-grained level than country ). however, this is
not strict and users can dene dimensions as they want.
an attribute a2ahas avalueset (a) that is the set of possible values and
typically only a subset of those values are present in a concrete instance of
the process cube. for example, valueset (age) =f1;2;:::;120gforage2a.
another example: valueset (cost) =nallows for innitely many possible values.
we introduce the notation adto refer to the set of attributes aof the dimension
d, andudas the universe of all possible dimensions. fig 1. shows some examples
of dimensions, each containing a dag and a valueset function.
denition 5 (process cube structure) a process cube structure is a set of
dimensions pcsud, where for any two dimensions d1;d22pcs;d 16=d2:
ad1\ad2=;.
all dimensions in a process cube structure are independent from each other,
this means that they do not have any attributes in common, so all attributes
are unique, however, their value sets might have common values. we introduce
the notation apcsto refer to the union of all sets of attributess
d2pcsad.
2.3 compatibility
a process cube structure pcs and an event base ebare independent elements,
where thepcs is the structure and the ebis the content of the cube. to make
sure that we can use them together, we need to relate them through a mapping
function and then check whether they are compatible.6 a. bolt, w.m.p. van der aalst
cityprovincecountry
statecontinent
sales
zonesalesh
region dimension:hlocation
attributehdab valuesetdab
saleshregion {northheuropeyheasthasiayhsouthhamericayhetcm}
saleshzone {iberianhpenunsulayhsouthhgermanyyhetcm}
{iberianhpenunsulayhsouthhgermanyyhetcm} continent
province
statecountry
city{netherlandsyhchileyhspainyhetcm}
{noordhbrabantyhandaluciayhsiberiayhetcm}
{californiayhnewhyorkyhetcm}
{eindhovenyhamsterdamyhsantiagoyhmadridyhetcm}
jobhpositionoffice departmentdimension:horganigram
attributehdab valuesetdab
office {bostonyhlondonyheindhovenyhetcm}
department {marketingyhoperationsyhnationalhsalesyhinternationalhsalesyhetcm}
{softwarehengineeryhsaleshexecutiveyhetcm} jobhpositiondxb d1b
fig. 1. example of two dimensions (location, organigram), both conformed by a di-
rected acyclic graph (1) and a valueset function (2).
denition 6 (mapper) a mapper is a triplet m= (pcs;eb;r )wherepcs
is a process cube structure, eb= (e;p; )is an event base and ris a function:
r2apcs!(p(p)(e9uv)). for an attribute a2apcs,r(a) = (p0;ga)
wherep0=fp1;:::;p ng2p (p)is a set of properties and gais a calculation
function mapping events into values used to calculate the value of a, so that
for any event e2ewith8p2p0:e2dom(p), the value of attribute a
for the event eis given by ga(e) =f(p1(e);:::; pn(e)) =v2uv. if for any
p2p0:e62dom(p)then event e does not have the property pand the value of
the attribute acannot be calculated, so we write ga(e) =?to indicate this.
note that each attribute is related to one set of properties which is used to cal-
culate the value of the attribute for any event through a specic calculation func-
tion. for example, an attribute day type =fweekend,weekdaygcan be calculated
using the event properties fday,month,yeargaccording to some specic calendar
rules. another example is an attribute agewhich can be calculated from proper-
tiesfbirthday,timestamp gby the function: gage(e) =timestamp (e) birthday (e).
a set of properties can be used by more than one attributes producing dier-
ent results if the calculation function is dierent. for example, in sales one could
use the set of properties fpurchase amount, purchase num gto classify customers
into an attribute customer type = fgold, silverg(i.e., if purchase amount >50
and purchase num >10, then customer type = silver ) and at the same time to
detect fraud into an attribute fraud risk =fhigh,lowg(i.e., if purchase amount
>100000 and purchase num = 1, then fraud risk = high ).
given a mapper m= (pcs;eb;r ) we say that pcs andebarecompatible
throughr, making all views of pcs also compatible with the eb.multidimensional process mining 7
2.4 process cube view
once a proces cube structure is dened, it does not change. while applying
typical olap operations such as slice, dice, roll up and drill down (dened in
sec 2.5) we only change the way we are visualizing the cube and its content. a
process cube view denes the visible part of the process cube structure.
denition 7 (process cube view) letpcs be a process cube structure. a
process cube view is a triplet pcv = (dvis;sel;gran )such that:
{dvispcs are the visible dimensions,
{sel2apcs!u sis a function selecting a part of the value set of the attributes
of each dimension, such that for any a2apcs:sel(a)valueset (a), and
{gran2dvis!u ais a function dening the granularity for each one of the
visible dimensions.
theselfunction selects sets of values per attribute (including attributes in
not visible dimensions). for example, in the dimension organigram in fig 1, one
could select the job position sales executive , but many departments could have
that same job position, so we could also select the department national sales to
only see the sales executives that work in national sales. on the other hand,
if this selection is done incorrectly, it might lead to empty results. for example
in the dimension location in fig 1. one could select the city eindhoven and the
country spain and this would produce empty results since no event can have
both values. in our approach we made this as exible as possible, so it is up to
the user to check if the selection is done properly.
for each visible dimension, the gran function denes one of its attributes
as the granularity. this will be used to dene the cell set of the cube where
each value of the granularity attribute corresponds to a cell. for example, in the
dimension organigram in fig 1, one could dene the job title as granularity.
many dierent process cube views can be obtained form the same process
cube structure. for example, fig. 2. shows two process cube views obtained from
the same process cube structure.
denition 8 (cell set) letpcs be a process cube structure and pcv =
(dvis;sel;gran )be a view over pcs withdvis=fd1;:::;d ng. the cell set of
pcv is dened as cspcv=avd1:::avdn, where for any di2dvis:avdi=
gran (di)sel(gran (di))is a set of attribute-value sets .
although the term cube suggests a three dimensional object a process cube
can have any number of visible dimensions.
a cell setcsis the set of visible cells of the process cube view. for example,
for a process cube view with visible dimensions location andtime with their
granularity set to: gran (location ) =fcitygandgran (time ) =fyeargand
the selected values of those attributes were: sel(city) =feindhoven, amster-
damgand sel(year) =f2013,2014g, the cube would have the following 4 cells:
f(city, eindhoven ), (year, 2013 )g,f(city, eindhoven ), (year, 2014 )g,f(city,
amsterdam ), (year, 2013 )g, andf(city, amsterdam ), (year, 2014 )g.8 a. bolt, w.m.p. van der aalst
process cube structure (pcs)process cube views (pcv)
fig. 2. example of two pcvs created from the same pcs, both selecting some dimen-
sions, selecting a part of the valuesets, and selecting attributes as granularity for the
selected dimensions.
2.5 process cube operations
next we consider the classical olap operations in the context of our process
cubes.
the slice operation produces a new cube by allowing the analyst to lter
(pick) specic values for attributes within one of the dimensions, while removing
that dimension from the visible part of the cube.
the dice operation produces a subcube by allowing the analyst to lter (pick)
specic values for one of the dimensions. no dimensions are removed in this case,
but only the selected values are considered. fig 3. illustrates the notions of slicing
and dicing. for both operations, the same ltering was applied. in the case of
the slice operation, the location dimension is no longer visible, but in dice one
could still use that dimension for further operations (i.e., drilling down to city)
keeping the same dimensions visible.
fig. 3. slice and dice operationsmultidimensional process mining 9
the roll up anddrill down operations do not remove any dimensions or lter
any values, but only change the level of granularity of a specic dimension. fig 4.
shows the concept of drilling down and rolling up. these operations are intended
to show the same data with more or less detail (granularity). however, this is
not guaranteed as it depends on the dimension denition.
fig. 4. roll up and drill down operations
denition 9 (slice) letpcs be a process cube structure and let pcv =
(dvis;sel;gran )be a view of pcs . we dene slice for a dimension d2dvis:
d= ((a;h );valueset )and a ltering function l2ad!u swhere for any
a2ad:l(a)valueset (a), as:slice d;l(pcv ) = (d0
vis;sel0;gran ), where:
{d0
vis=dvisnfdgis the new set of visible dimensions, and
{sel02apcs!u sis the new selection function, where:
{for anya2ad:sel0(a) =l(a), and
{for anya2apcsnad:sel0(a) =sel(a).
the slice operation produces a new process cube view. note that dis no
longer a visible dimension: d62d0
visbut it will be used for ltering events.
the newsel0function will still be valid as a value set selection function when
ltering. also, note that the gran function remains unaected. for example, for
sales data one could slice the cube for a dimension location for city eindhoven ,
the location dimension is removed from the cube and only sales of the stores in
eindhoven are considered. one could also do more complex slicing. for example,
for a dimension time, one could slice that dimension and select years 2013 and
2014 and months january and february , then the time dimension is removed
from the cube and only sales in january or february of years 2013 or 2014 are
considered.
denition 10 (dice) letpcs be a process cube structure and let pcv =
(dvis;sel;gran )be a view of pcs . we dene dice for a dimension d2dvis:
d= ((a;h );valueset )and a ltering function l2ad!u swhere for any
a2ad:l(a)valueset (a), as:slice d;l(pcv ) = (dvis;sel0;gran ), where:10 a. bolt, w.m.p. van der aalst
{sel02apcs!u sis the new selection function, where:
{for anya2ad:sel0(a) =l(a), and
{for anya2apcsnad:sel0(a) =sel(a).
thedice operation is very similar to the slice operation dened previously,
where the only dierence is that in dicethe dimension is not removed from dvis.
denition 11 (change granularity) letpcs be a process cube structure
andpcv = (dvis;sel;gran )a view ofpcs . we dene chgr for a dimension
d2dvis:d= ((a;h );valueset )and an attribute a2adas:chgr d;a(pcv ) =
(dvis;sel;gran0), wheregran0(d) =a, and for any d02dvisnfdg:gran0(d0) =
gran (d0).
this operation produces a new process cube view and allows us to set any
attribute of the dimension das the new granularity for that dimension, leaving
any other dimension untouched. however, typical olap cubes allow the user to
\navigate" through the cube using roll up and drill down operations, changing
the granularity in a guided way through the hierarchy of the dimension. note
thatdvisand selalways remain unaected when changing granularity. now we
dene the roll up and drill down operation using the previously dened chgr
function.
denition 12 (roll up and drill down) letpcs be a process cube struc-
ture,pcv = (dvis;sel;gran )a view ofpcs with a dimension d2dvis:d=
((a;h );valueset ). we can roll up the dimension d if 9a2ad: (gran (d);a)2
h. the result is a more coarse-grained cube: rollup d;a(pcv ) =chgr d;a(pcv ).
we can drill down the dimension d if 9a2ad: (a;gran (d))2h. the result is
a more ne-grained cube: drilldown d;a(pcv ) =chgr d;a(pcv ).
if there is more than one attribute athat the dimension could be rolled up
ordrilled down to, then any of those attributes can be a valid target, but we
can pick only one each time. for example, for a dimension location described
in fig 1, we could roll up the dimension from city toprovince, state orsales
zone .
2.6 materialized process cube view
once we selected a part of the cube structure, and there is a cell set dened
as the visible part of the cube, now we have to add content to those cells. in
other words, we have to add events to these cells so they can be used by process
mining algorithms.
denition 13 (materialized process cube view) letm= (pcs;eb;r )
be a mapper with pcs being a process cube structure, eb= (e;p; )being an
event base, and let pcv = (dvis;sel;gran )be a view over pcs with a cellmultidimensional process mining 11
setcspcv. the materialized process cube view forpcv andeb is dened as
a function mpcv pcv;eb2cspcv!p (e)that relates sets of events to cells
c2cspcv:mpcv pcv;eb (c) =fe2ej(1)^(2)g, where:
(1)8d2dvis;r(gran (d)) = (p0;ggran (d)) : (gran (d);ggran (d)(e))2c
(2)8a2apcs;r(a) = (p0;ga) :ga(e)2sel(a)
the rst condition (1) relates an event to a cell if the event property values
are related to the (attribute,value) pairs that dene that cell. for example, for
a cell c =f(year,2012 ),(city,eindhoven )gone could relate all events that have
both attribute values to that cell.
the second condition (2) is to check if the events related to each cell are not
ltered out by any other attribute of any dimension of the process cube structure.
note that this condition becomes specially useful when slicing dimensions.
fig 5 shows an example of a materialized process cube view. each of the
selected dimensions conform the cell distribution of the cube, and the events in
the event base are mapped to these cells.
fig. 5. example of a materialized process cube view (mpcv) for an event base (eb)
and a process cube view (pcv). the cells of mpcv contain events.
normally events are related to specic activities or facts that happen in a
process, and they are grouped in cases. in order to transform the set of events of
a cell into an event log, we must dene a case id to identify cases and an activity
idto identify activities. the case id and activity id must be selected from the
available attributes ( caseid;activity id2apcs) where an attribute can be di-
rectly related to an event property without transformations. given a set of events
e0e, we can compute a multiset of traces l2(valueset (activityid))!
valueset (caseid) where each trace 2lcorresponds to a case. for example,
in table 1 if we select sales order as the case id , all events with sales order =
1belong to case 1, which can be presented as ha;b;c;di. similarly, case 2
can be presented as ha;ci. most control-ow discovery techniques [12{14] use
such a simple representation as input. however, the composition of traces can be
done using more attributes of events, such as timestamp, resource or any other
attribute set a0apcs.12 a. bolt, w.m.p. van der aalst
3 implementation
this approach has been implemented as a stand-alone java application (avail-
able in http://www.win.tue.nl/ ~abolt ) named process mining cube (pmc)
(shown in fig 6) that has 2 groups of functionalities: log splitting and results
generation . the rst consists of creating sublogs (cells) from a large event col-
lection using the operations dened in sec 2.5, allowing the user to interactively
explore the data and isolate the desired behavior of an event collection. the
second consists of converting each materialized cell into a process mining re-
sult, obtaining a collection of results visualized as a 2-d grid, facilitating the
comparison between cells. for transforming each materialized cell into a process
mining result we use existing components and plugins from the prom framework
[17] ( www.processmining.org ) which provides hundreds of plug-ins providing a
wide range of analysis techniques.
fig. 6. process mining cube (pmc): implementation of this approach
the plugins and components used to analyze the cube cells in pmc v1.0 are
described in table 2. this plugin list is extendable. we expect to include more
and more plugins for the following versions of pmc.
4 experiments
in order to compare the performance of our implementation ( pmc ) with the
current state of the art ( procube ) which was introduced in [4] (also cited in
[3]), we designed an experiment using a real life set of events: the wabo1 event
log. this log is publicly available in [18] and it is a real-life log that containsmultidimensional process mining 13
table 2. plugins available
plugin name plugin description
alpha miner miner used to build a petri net from an event log. fast, but
results are not always reliable
log visualizer visualization that allow us to get a basic understanding of the
event log that we are processing
inductive miner miner that can provide a petri net or a process tree as output.
good when dealing with infrequent behavior and large event
logs, ensures soundness
dotted chart visualization that represents the temporal distribution of events
fast miner miner based on a directly-follows matrix, with a time limit for
generating it. the output is a directly-follows graph (not a prom
plugin)
38944 events related to the process of handling environmental permit requests of
a dutch municipality from october 2010 to january 2014. each event contains
more than 20 data properties. from this property set, only two of them were
used as dimensions: resource and(case) termname , which produces a 2d cube.
both dimensions were drilled down to its nest-grained level, so every dierent
combination of values from these dimensions creates a dierent cell.
for both approaches, we compared the loading time (e.g. time required to
import the events) and creation time (e.g. time required to create and materi-
alize all cells and visualize them with the log visualizer plugin of prom[17])
using 9 subsets of this log with dierent number of events. the more events we
include in the subset, the larger the value set of a property gets (until the sample
is big enough to contain all original values) and more cells are obtained. the
experiment results for the 9 subsets are presented in table 3.
table 3. performance benchmark for dierent-sized subsets of a log
subset num. sub. 1 sub. 2 sub. 3 sub. 4 sub. 5 sub. 6 sub. 7 sub. 8 sub. 9
number of events 1000 5000 10000 15000 20000 25000 30000 35000 38944
number of cells 48 104 176 187 187 216 216 234 252
procubeload (sec) 2.0 3.0 5.0 8.0 9.0 9.0 9.0 13.0 13.0
create (sec) 25.8 106.5 715.3 868.7 1053.2 1220.0 1399.3 1522.5 2279.3
pmcload (sec) 0.6 0.9 1.2 1.4 1.6 1.9 2.0 2.1 2.5
create (sec) 2.9 6.1 10.1 15.6 21.8 29.5 35.1 41.3 49.6
pmc load speedup 3.3 3.3 4.1 5.7 5.6 4.7 4.5 6.1 5.2
pmc create speedup 8.8 17.4 70.8 55.6 48.3 41.3 39.8 36.8 45.9
these results show that pmc out-performs the current state of the art in ev-
ery measured perspective. all loading andcreation (create) times are measured
in seconds. notice that the speedup ofpmc over procube is quite considerable,
as the average creation speedup is 40.5 (40 times faster). also notice that when14 a. bolt, w.m.p. van der aalst
using the full event log (sub. 9), pmc provides an acceptable response time
by creating 252 dierent process analysis results in less than a minute, some-
thing that would take many hours, even days to accomplish if done by hand.
this performance improvement makes pmc an attractive tool for the academic
community and business analysts.
all the above experiments were performed in a laptop pc with an intel
i7-4600u 2.1ghz cpu with 8gb ram and sata iii ssd in windows 7 (x64).
5 conclusions
as process mining techniques are maturing and more event data becomes avail-
able, we no longer want to restrict analysis to a single all-in-one process. we
would like to analyse and compare dierent variants (behaviors) of the process
from dierent perspectives. organizations are interested in comparative process
mining to see how processes can be improved by understanding dierences be-
tween groups of cases, departments, etc. we propose to use process cubes as a
way to organize event data in a multi-dimensional data structure tailored towards
process mining . in this paper, we extended the formalization of process cubes
proposed in [3] and provided a working implementation with an adequate per-
formance needed to conduct analysis using large event sets. the new framework
gives end users the opportunity to analyze, explore and compare processes inter-
actively on the basis of a multidimensional view on event data. we implemented
the ideas proposed in this paper in our pmc tool, and we encourage the process
mining community to use it. there is a huge interest in tools supporting process
cubes and the practical relevance is obvious. however, some of the challenges
discussed in [3] still remain unsolved (i.e. comparison of cells and concept drift).
we aim to address these challenges using the foundations provided in this paper.
references
1. w.m.p. van der aalst. process mining: discovery, conformance and enhacement
of business processes . springer-verlag, berlin, 2011.
2. j. t. s. ribeiro and a. j. m. m. weijters. event cube: another perspective on
business processes. in proceedings of the 2011th confederated international con-
ference on on the move to meaningful internet systems , volume part i, otm11,
pages 274283, berlin, heidelberg, 2011. springer-verlag.
3. w.m.p. van der aalst. process cubes: slicing, dicing, rolling up and drilling
down event data for process mining. in m.song, m.wynn, j.liu, editors, asia
pacic business process management (ap-bpm 2013) , volume 159 of lecture
notes in business information processing , pages 1-22, springer-verlag, 2013.
4. t. mamaliga. realizing a process cube allowing for the comparison of event
data. master's thesis, eindhoven university of technology, eindhoven, 2013.
5. w.m.p. van der aalst, s. guo, and p. gorissen. comparative process mining in
education: an approach based on process cubes. in j.j. lesage, j.m. faure, j.
cury, and b. lennartson, editors, 12th ifac international workshop on discrete
event systems (wodes 2014) , ifac series, pages pl1.1-pl1.9. ieee computer
society, 2014.multidimensional process mining 15
6. t. vogelgesang and h.j. appelrath. multidimensional process mining: a flexi-
ble analysis approach for health services research. in proceedings of the joint
edbt/icdt 2013 workshops (edbt '13) , pages 17-22, new york, usa, 2013.
acm.
7. s. chaudhuri, u. dayal. an overview of data warehousing and olap technology.
sigmod rec. 26, pages 6574. 1997.
8. j. han, m. kamber. data mining: concepts and techniques. the morgan kaufmann
series in data management systems . elsevier, 2006.
9. c. chen, x. yan, f. zhu, j. han, p.s. yu. graph olap: a multi-dimensional
framework for graph data analysis. knowledge and information systems, vol 21,
pages 41-63, springer, 2009.
10. x. li, j. han. mining approximate top-k subspace anomalies in multi-dimensional
time-series data. in proceedings of the 33rd international conference on very large
data bases (vldb) pages 447-458, vldb endowment, 2007.
11. m. liu, e. rundensteiner, k. greeneld, c. gupta, s. wang, i. ari, a. mehta.
e-cube: multi-dimensional event sequence processing using concept and pattern
hierarchies. in international conference on data engineering , pages 1097-1100,
2010.
12. w.m.p van der aalst, a.j.m.m. weijters, and l. maruster. workow mining: dis-
covering process models from event logs. ieee international enterprise com-
puting conference (edoc 2011) , pages 55-64. ieee computer society, 2011.
13. j.carmona and j.cortadella. process mining meets abstract interpretation. in
j.l. balcazar, editor, ecml/pkdd 210 , vol 6321 of lecture notes in articial
intelligence , pages 184-199. springer-verlag, berlin, 2010.
14. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology , 7(3):
pages 215-249, 1998.
15. t. niemi, m. niinim aki, p. thanisch and j. nummenmaa. detecting summariz-
ability in olap. in data & knowledge engineering , vol 89, pages 1-20, elsevier,
2014.
16. j. maz on, j. lechtenb orger and j. trujillo. a survey on summarizability issues
in multidimensional modeling. in data & knowledge engineering , vol 68, pages
1452-1469, elsevier, 2009.
17. b.f. van dongen, a.k.a. de medeiros, a.j.m.m. weijters and w.m.p. van der
aalst. the prom framework: a new era in process mining tool support. in g.
ciardo, p. darondeau, editors, applications and theory of petri nets 2005 , volume
3536 of lecture notes in computer science , pages 444 - 454, springer, berlin, 2005.
18. j.c.a.m. buijs. environmental permit application process (wabo), coselog
project municipality 1. eindhoven university of technology. dataset. url: http:
//dx.doi.org/10.4121/uuid:c45dcbe9-557b-43ca-b6d0-10561e13dcb5 , 2014.