orgmining 2.0 : a novel framework for
organizational model mining from event logs
jing yanga,, chun ouyanga, wil m.p. van der aalstb,a,
arthur h.m. ter hofstedea, yang yuc
aqueensland university of technology, australia
brwth aachen university, germany
csun yat-sen university, china
abstract
providing appropriate structures around human resources can streamline oper-
ations and thus facilitate the competitiveness of an organization. to achieve
this goal, modern organizations need to acquire an accurate and timely under-
standing of human resource grouping while faced with an ever-changing envi-
ronment. the use of process mining oers a promising way to help address
the need through utilizing event log data stored in information systems. by
extracting knowledge about the actual behavior of resources participating in
business processes from event logs, organizational models can be constructed,
which facilitate the analysis of the de facto grouping of human resources relevant
to process execution. nevertheless, open research gaps remain to be addressed
when applying the state-of-the-art process mining to analyze resource grouping.
for one, the discovery of organizational models has only limited connections
with the context of process execution. for another, a rigorous solution that
evaluates organizational models against event log data is yet to be proposed.
in this paper, we aim to tackle these research challenges by developing a novel
framework built upon a richer denition of organizational models coupling re-
source grouping with process execution knowledge. by introducing notions of
conformance checking for organizational models, the framework allows eective
evaluation of organizational models, and therefore provides a foundation for an-
alyzing and improving resource grouping based on event logs. we demonstrate
the feasibility of this framework by proposing an approach underpinned by the
framework for organizational model discovery, and also conduct experiments on
real-life event logs to discover and evaluate organizational models.
keywords: event log, organizational model, process mining,
conformance checking
corresponding author
email addresses: roy.j.yang@qut.edu.au (jing yang), c.ouyang@qut.edu.au
(chun ouyang), wvdaalst@pads.rwth-aachen.de (wil m.p. van der aalst),
a.terhofstede@qut.edu.au (arthur h.m. ter hofstede), yuy@mail.sysu.edu.cn (yang yu)
preprint submitted to information systems may 13, 2020arxiv:2011.12445v2  [cs.db]  26 nov 20201. introduction
modern organizations are comprised of employees working in various group
settings, often directed by end-to-end business processes towards delivering
valued outcomes to achieve the organizations' goals [1]. faced with an ever-
changing environment, organizations today are required to constantly adapt
their settings in order to respond to various and often dynamic demands. having
exible and proper structures around human resources may facilitate addressing
such a challenge, as evidenced by the organizational structure-related practices
for business process redesign [2]. for this purpose, organizations need to both
obtain and maintain an accurate and timely understanding of human resource
grouping alongside evolving business processes. this, however, can hardly be
achieved by merely having a static \as-is" organizational chart.
a promising way to address the above dynamic need is through utilizing data
related to process execution readily available in many information systems (e.g.,
enterprise resource planning systems) deployed in today's organizations [3].
these data are often stored as event logs. a typical event log often records
some essential information on the execution of a business process, including the
activities occurred, their timestamps, and the corresponding process instance
(e.g., a purchase order). additionally, event logs may also contain human re-
source information, thus reecting how employees carried out their work when
participating in processes. in light of this, event logs may be leveraged for dis-
covering knowledge about the structure, behavior, and performance of human
resource groups, and the potential changes to human resource grouping in the
context of business processes.
process mining [3] oers a growing body of methods to analyze event logs
to extract knowledge about the actual behavior of a process along with other
aspects relevant to process execution, including human resources. in process
mining research, studies that concern human resource grouping are known as
organizational model mining , which aims at nding groups of resources hav-
ing similar characteristics in process execution by utilizing event log data [4].
our research interest lies in applying organizational model mining to support
the analysis and improvement of resource grouping based on event log data.
nonetheless, our review of the literature on the topic reveals certain research
gaps yet to be addressed.
fig. 1 illustrates these open issues. each event in an event log can be viewed
as a data point carrying information on the three key dimensions of process
execution, i.e., activities, cases, and time. however, various methods proposed
in the existing studies for discovering organizational models from event logs,
are mainly based on how resources are similar to or dier from each other in
terms of their originated activities, and how resources are related in terms of
the handover of work between activities. on the other hand, the case and
time dimensions are rarely considered, thus limiting the possibilities of discov-
ering resource groupings which follow patterns relevant to dierent cases (e.g.,
2discover
organizational 
model
evaluate
organizational
model
event log
rq3?
organizational modelresources resource groups
resource groups
 resources
 resource groups
 resources
 resource groupsrq2?rq1?
cases
time
activities
eventevent
figure 1: an illustration of the identied research questions in organizational model mining
addressed in this paper.
specialists group dedicated to specic sort of orders) or dierent time periods
(e.g., employees with the same role but working dierent shifts). moreover,
the discovered organizational models in the literature often describe merely the
clustering of resources, but lack the connections between the identied resource
groups and the process execution dynamics recorded in the event log data. con-
sequently, the missing connections pose a challenge for subsequent analysis of
the behavior and performance of resource groups in the context of process ex-
ecution. last but not least, in terms of evaluating the quality of the discovery
results, the state-of-the-art relies on either domain knowledge or measures spe-
cic to the adopted techniques. however, assessing the quality of a discovered
organizational model by comparing it against the input event log has never
been addressed. in light of these identied issues, we formulate three research
questions (rq):
rq1. how to incorporate event information on multiple dimensions into the
discovery of organizational models from an input event log?
rq2. how to connect resource groups in an organizational model with the process
execution information captured by the input event log?
rq3. how to evaluate a discovered organizational model against the input log?
in this paper, we report our contributions that aim at addressing these re-
search questions. we propose a novel framework built upon a richer denition
of organizational models incorporating multiple dimensions of a business pro-
cess and linking resource groups with process execution (addressing rq1 and
rq2). therefore, more in-depth analyses of resource groupings coupled with a
process context may be enabled. through introducing the notions and measures
3for conformance checking, the proposed framework allows the rigorous evalua-
tion of organizational models with reference to event log data, without being
bound by how the models are constructed (addressing rq3). we present an
approach underpinned by the framework for discovering organizational models,
and conduct a series of experiments on real-life event logs to evaluate the pro-
posed framework and approach in terms of both the discovery and conformance
checking of organizational models. open-source software was developed that
implements the proposals in the paper. we expect that the establishment of
our framework will empower the use of process mining to support analyzing and
improving resource grouping for organizational management.
the remainder of the paper is structured as follows. section 2 provides
more detail about the state-of-the-art process mining research on the topic of
organizational model mining. section 3 elaborates on the novel framework pro-
posed in this paper. subsequently, section 4 presents an approach that realizes
the discovery of organizational models discussed in the framework. section 5
provides information about the related software implementation of our work.
section 6 reports the evaluation of our work through experiments and discusses
the ndings. finally, section 7 summarizes the paper and presents an outlook
for future research topics that can be built upon the current work.
2. related work
process mining research that aims at deriving human-resource-related in-
sights from event log data is known as organizational mining [4]. four topics of
interest can be identied, respectively: (1) organizational model mining, which
aims at discovering knowledge related to organizational structures around hu-
man resources (e.g., [4, 5]); (2) social network mining, which aims at extract-
ing and analyzing the relationships among resources (e.g., [6, 7, 8]); (3) rule
mining, which aims at extracting inherent rules that decide the use of human
resources in process execution, e.g., rules for the assignment of tasks to re-
sources [9, 10, 11, 12], and rules for the composition of resource teams with
various expertise [13]; and (4) behavioral prole mining, which aims at ex-
tracting and analyzing dierent aspects of individual resource behavior as they
participate in process execution (e.g., [14, 15, 16, 17]).
the focus of this paper is on organizational model mining. to review and
evaluate the related work, we establish certain criteria from three perspectives
based on the research questions raised in section 1. the rst perspective con-
cerns the dierent aspects of process execution considered for organizational
model discovery. a typical event log suitable for conducting organizational
model mining often records the minimum information, including activity labels,
resource identiers, case identiers, and timestamps. using the information, the
participation of human resources in process execution can be analyzed from sev-
eral aspects in order to discover organizational models, i.e., how resources carry
out activities (activity), how they are involved in dierent cases (case), how
they work in various time periods (time), and how they interact during process
execution (resource interaction). the second perspective concerns whether or
4not a discovered model species linkage between resource groups and the pro-
cess execution dynamics captured by the input event log. considering the three
key dimensions of process execution, a resource group in a discovered model
may carry out certain activities, get involved in certain cases, and work during
certain time periods. the third perspective concerns how the evaluation of re-
sults is carried out. for this perspective, we take into account several common
practices, including evaluating a discovered model against the input event log,
evaluating a discovered model against relevant prior knowledge, and measuring
the eectiveness of the applied technique.
based on these criteria, table 1 lists the state-of-the-art research on discov-
ering organizational models from event logs.
table 1: the state-of-the-art on discovering organizational models from event logs.
ref.aspects of process execution
links to processevaluation strategy
activity case timeresource prior event technique feasibility
interaction knowledge log eectiveness validation
[4]p p pp
[18]p p
[19]p p p
[20]p p p p
[21]p p pp
[22]p p
[23]p p
[24]p p
[5]p p
[25]p p
[26]p p
[27]p p
[28]p p
1. does the paper consider one or more aspects of process execution for discov-
ering organizational models?
our review of the literature shows that the majority of the proposed methods
utilize information about resources carrying out dierent activities for discov-
ering organizational models. the idea is motivated by the observation that
common resource grouping schemes (e.g., by roles, functional units) often lead
to dierent groups of employees being in charge of executing some particular
activities in a process. some research also exploits the information on the in-
teraction among resources (e.g., handover of work between the execution of
activities) for discovering organizational models, especially those focusing on
describing the reporting relationships [26, 27, 28]. on the other hand, informa-
tion related to cases (i.e., process instances) and time is rarely considered. only
reference [4] attempts to exploit case information in event logs for discovering
organizational models reecting project teams or task force, which consists of
employees with various specialties and assembled for collective tasks. for most
of the current work, the discovery of organizational models takes into account
merely the activity information in event logs. as a consequence, these mod-
els may not be able to capture resource groupings that follow certain patterns
on the case and time dimensions. the various aspects that can be utilized for
characterizing resource participation in process execution are yet to be explored.
52. does a discovered organizational model in the paper specify links to the
execution of the business process captured by the input event log?
all organizational models derived from event logs in the referenced papers
describe the grouping structures around or the reporting relationships among
human resources. yet only a few of them [4, 19, 20, 21] attach a discovered
model to the business process captured by the event log data, which is done
by linking the resource groups with process activities for characterizing the re-
sponsibilities or permissions of the groups. in order to analyze the behavior
and performance of resource groups in a discovered organizational model, it is
necessary to situate the groups in the context of process execution. however,
the issue remains open in the current organizational model mining research.
3. what strategy is employed in the paper for evaluating the results?
with respect to the evaluation part, there exist three typical strategies in
the current research. the rst one is to compare the discovery results with
domain knowledge, such as the ocial organizational structure [4, 18, 21, 5, 25].
it relies on the availability of such knowledge, and may also be awed as there
is no guarantee whether or not the reality (event log data) has deviated from
the referenced domain knowledge. the second solution is to assess the eec-
tiveness of the techniques applied for model discovery, for instance, the quality
of the detected resource communities measured by modularity [22, 24]. such a
solution may be biased since the assessing criteria are often dependent on the
techniques selected. the last one considers evaluation without assessing the
quality of the discovered models, but instead only validates the feasibility of the
proposed methods through implementation and experimentation on synthetic
or real-life event logs [19, 20, 23, 26, 27, 28]. so far, none of the existing studies
on organizational model mining has explicitly considered using the input event
logs as references for evaluating the discovered models.
in this paper, we target these three open issues in the current organizational
model mining research, and address them through proposing a novel framework
consisted of a new denition of organizational models as well as the notions of
conformance checking for organizational models. the next section elaborates
on our proposals.
3. framework
a business process is formed by a set of activities to achieve a business goal
(e.g., to handle an insurance claim). it captures possible alternative ways of
performing the activities to achieve a business goal (e.g., a sequence of activities
required to handle an insurance claim for vip customers is dierent from that for
normal customers). an instance of executing a process is known as a case, and a
collection of cases sharing certain common characteristics may exemplify a type
of case (or a case type ), e.g., cases of handling insurance claims of vip customers
6vs.cases for normal customers. for process execution, many business activities
are performed by resources that may have dierent roles and positions in an
organization and form resource groups that may reect various organizational
entities, e.g., an organizational department or a project team.
in this section, we introduce the notion of a richer organizational model
linking resources via resource groups to activities, case types, and time periods
associated with process execution. building upon this notion, we present a
framework which supports discovering such organizational models from event
logs, and evaluating them by conformance checking with reference to the actual
behavior of resources as recorded in the logs.
3.1. event log
an event log consists of a set of events, and each event is associated with a
range of event attributes capturing the information about carrying out a process
activity. for example, table 2 lists a small fragment of some event log. each
row corresponds to an event, and each column records, for each event, the value
of an event attribute of which the attribute name is shown as the column header.
table 2: a fragment of some event log.
case id activity name timestamp resource customer type
... ... ... ... ...
654423 register request 29-08-2018 15:02 pete normal
654424 register request 29-08-2018 16:08 pete normal
654424 conrm request 29-08-2018 16:12 normal
654423 get missing info 29-08-2018 16:28 ann normal
654423 conrm request 29-08-2018 16:45 normal
654423 check insurance 30-08-2018 09:09 john normal
654424 check insurance 30-08-2018 09:22 sue normal
654425 register request 30-08-2018 10:07 bob vip
654423 accept claim 30-08-2018 11:32 john normal
654424 reject claim 30-08-2018 11:45 sue normal
654423 pay claim 30-08-2018 11:48 normal
654425 conrm request 30-08-2018 12:44 vip
654425 check insurance 30-08-2018 13:32 mary vip
654425 accept claim 30-08-2018 14:09 mary vip
654425 pay claim 30-08-2018 14:14 vip
... ... ... ... ...
we rst dene a general data structure of an event log (see def. 1). an
event log ( el) contains the information of a set of uniquely identiable events
(e), a set of event attribute names ( att), and the corresponding event attribute
values carried by each event (as specied by function ). it is possible that
an event does not carry any value for a given event attribute (e.g., in table 2
several events have no resource information). hence, function maps the set of
eventseto a partial function att6!u valand, as such, given any event ( e2e)
only the attributes that carry a value ( dom((e))) are presented for the event.
denition 1 (event log) .letebe the universe of event identiers, uattbe the
universe of possible attribute names, and uvalthe universe of possible attribute
values. el = (e;att;)withee, attuatt, and2e!(att6!u val)
is an event log. event e2ehas attributes dom ((e)). forx2dom((e)),
x(e) =(e)(x)is the value of attribute xfor evente.
7next, we elaborate on the denition of event attributes that are needed for
storing essential information about process execution (see def. 2). an event
log often records many cases (i.e., process execution instances). each case is
uniquely identiable and consists of a sequence of events corresponding to the
execution of activities at some specic time. as the minimum requirement for
event logs, events have three mandatory attributes [29]: case identier (case
for short), activity name (actfor short), and timestamp (time for short). op-
tionally, each event may have a corresponding resource executing it, and hence
resource (resfor short) is another important attribute. in addition to these
four most common ones, an event log may record other event attributes (such
ascustomer type ,cost,department , etc.), which are usually non-mandatory and
vary between event logs. the event log fragment shown in table 2 is a good
example of an event log that contains the above event attributes.
denition 2 (event attributes) .letc u val,au val,t u valand
ru valdenote the universe of case identiers, the universe of activity names,
the universe of timestamps, and the universe of resource identiers, respectively.
any event log el = (e;att;)has four special attributes: fcase;act;time;resg
att such that for any e2e:
•fcase;act;timegdom((e)), i.e., these attributes are mandatory,
•case(e)2cis the case to which ebelongs,
•act(e)2a is the activity erefers to,
•time(e)2t is the time at which eoccurred, and
•res(e)2r is the resource that executed eif res2dom((e))(this at-
tribute is optional).
hence,eres=fe2ejres2dom((e))gare the events executed by a resource
andenres=fe2ejres62dom((e))gare all other events.
3.2. execution mode
in the context of business processes, the behavior of resources or resource
groups is often closely associated with certain process features. for example,
resources belonging to a certain resource group may perform (only) a specic
type of activity or case. consider the event log fragment in table 2. it records
the execution of an insurance claim process. by grouping the events using
attribute \activity name", we can tell that pete and bob could only \register
(a claim) request", and john, sue, and mary could \check insurance" and then
decide to \accept (or reject a) claim". by grouping the events using attribute
\customer type", we can observe that bob and mary only handled a claim
made by a vip customer, while the other resources are responsible for dealing
with claims of normal customers. based on these observations, we may infer
potential grouping of resources relevant to activity name or customer type. to
reach such ndings in this example, an important step is the classication of the
individual events in an event log into groups of events characterized by relevant
event attribute(s).
8let us rst introduce the concepts of case types ,activity types , and time
types (see def. 3). these are dened with respect to the universe of possible
attribute values for each of the three mandatory event attributes ( case,act, and
time) of an event log, respectively. case types correspond to the classication
of cases and are often informed by relevant case-level event attribute(s) (e.g.,
customer type, cost, urgency). in the above example, there are two types of
cases characterized by dierent types of customers { claims by vip customers
and claims by normal customers. from the data viewpoint, a collection of case
types is related to a way of partitioning the universe of case identiers (uniquely
representing individual cases). it means that each case type corresponds to a
cluster of cases, while each case has only one case type. the same principle
applies to the denition of activity types and time types . examples of activity
types are registration, approval, payment, etc., and examples of time types are
weekdays, weekend, morning, afternoon, etc.
denition 3 (case types, activity types, and time types) .letct,at,
andtt denote the sets of names of case types, activity types, and time types,
respectively. for any ct,at, ortt, there exists an injective function1:
•'case:ct !p (c)2satisfyingsrng('case) =c;8ct1;ct22ct('case(ct1)\
'case(ct2) =?_ct1=ct2);
•'act:at !p (a)satisfyingsrng('act) =a;8at1;at22at('act(at1)\
'act(at2) =?_at1=at2);
•'time:tt !p (t)satisfyingsrng('time) =t;8tt1;tt22tt('time(tt1)\
'time(tt2) =?_tt1=tt2).
i.e., anyct,at, ortt is related to a way of partitioning the corresponding
universe.
we then dene the notion of execution mode (see def. 4). an execution mode
refers to the possible execution of events characterized by the combination of
a case type, an activity type, and a time type. for example, it can be the
execution of a \registration activity" (activity type) in a \case related to vip
customers" (case type) on a \weekday morning" (time type). execution modes
partition the universe of possible events. each execution mode corresponds to
a collection of events, and each event has precisely one execution mode.
denition 4 (execution mode) .(ct;at;tt)2ct at tt is an execu-
tion mode. it refers to the possible execution of event esatisfyingcase(e)2
'case(ct),act(e)2'act(at), andtime(e)2'time(tt). given any event log
el= (e;att;),[e](ct;at;tt)=fe2ejcase(e)2'case(ct)^act(e)2
'act(at)^time(e)2'time(tt)gis the set of events having execution mode
(ct;at;tt)in el.
1a function f:x!yis said to be injective if and only if every element of yis the image
of at most one element of x.
2given a set s,p(s) is the powerset of s, i.e., the set of all subsets of s.x2p(s) if and
only ifxs.
9time
activitiescases
resources
event(a) an event is seen as a dot in the three dimensions of cases,
activities, and time, and may have a resource executing it.
time 
types
activity types resource s
case  types
executionmode
(b) an execution mode is seen as an event cube in the three
dimensions of case types, activity types, and time types, and
may have resources executing the events in the cube.
figure 2: graphical views of (a) events and (b) execution modes and, optionally, the associated
resource information recorded in an event log.
fig. 2 presents two graphical views of events to illustrate the above concepts.
in fig. 2a, events are seen as dots in a three-dimensional space, which repre-
sents the three mandatory event attributes capturing the information of cases ,
activities , and time. in fig. 2b, the values along each of the three dimensions
are partitioned according to the classication by case types, activity types, and
time types, respectively. as a result, the collection of all possible events are
partitioned into a set of execution modes that can be viewed as event cubes
formed by the combination of a case type, an activity type, and a time type.
3.3. resource log
the focus of research is to extract the organizational knowledge about re-
source grouping, given the information recorded in event logs. hence, we are
more interested in viewing event data from the resource perspective . in an event
log, an event may be executed by a resource, and each resource is related to
one or more individual events performed by the resource (see the graphical view
in fig. 2a). consider an event log consisting of a set of execution modes. on
the one hand, an execution mode corresponds to a collection of events and thus
may be associated with one or more resources that have performed the relevant
events. on the other hand, each resource may have executed several events that
10belong to dierent execution modes and thus may be linked to these (multiple)
execution modes (see fig. 2b). in addition, fig. 2b also depicts some potential
grouping of resources, assuming that resources form groups based on case types.
we introduce the term \resource event" to refer to an event executed by
some resource and characterized by the corresponding execution mode. a so-
called resource log consists of a multiset of resource events (see def. 5), i.e.,
it may contain multiple resource events referring to the same resource and the
same execution mode. a resource log can be derived from an event log and
a collection of pre-dened execution modes (via combinations of case types,
activity types, and time types) (see def. 6).
denition 5 (resource log) .letr,ct,at, andttrepresent collections of
resources, case types, activity types, and time types, respectively. (r;ct;at;tt)2
rctattt is a resource event. a resource log rl 2b(rctat
tt)3is a multiset of resource events.
denition 6 (derived resource log) .let el = (e;att;)be an event log
and ct , at , and tt be some dened collections of case types, activity types,
and time types, respectively. the resource log derived from el, ct , at , and
tt is rl (el;ct;at;tt) = [(res(e);ct;at;tt)je2eres^(ct;at;tt)2
ctattt^e2[e](ct;at;tt)]:4
table 3 shows an example of a resource log derived from the sample event log
in table 2 and some dened collections of case types, activity types, and time
types, using the corresponding functions 'case;'act;and'time, respectively (see
def. 3). below we include a more detailed explanation.
•in table 2, the customer type event attribute has two values: normal and
vip. these are used to group cases into two categories and hence the two
case types in table 3. normal cases include those identied as 654423 and
654424, while the vip type contains case 654425. using 'case, we can
writef654423;654424g'case(normal) andf654425g'case(vip).
•four activity types are dened: register ,contact ,check , and decide . the
seven values for activity names in table 2 are classied by these types
as follows (denoted using 'act):f\register request" ;\conrm request" g
'act(register),f\get missing info" ;\pay claim"g'act(contact),
f\check insurance" g 'act(check),f\accept claim" ;\reject claim"g 
'act(decide);
•the working hours of a day are divided into two timeframes, and hence
lead to the two time types dened: morning and afternoon . timestamps
of events recorded in table 2 are classied accordingly, e.g.,
\30-08-2018 09:09" 2'time(morning), \29-08-2018 15:02" 2'time(afternoon).
3given a set s,b(s) is the set of all multisets over s.
4[:::j:::] generates a multiset where for every \binding" on the right-hand side, an element
is added on the left-hand side. for example, [ x+ 1jx2[12;23;54]^x<4] = [22;33].
11each row in table 3 corresponds to a resource event, i.e., an event executed
by some resource and characterized by an execution mode (a combination of
some valid values from the above collections). there may be multiple occur-
rences of the same resource event. for example, event (pete, normal, register,
afternoon) happened twice in table 3, which means that pete executed two
events having the execution mode (normal, register, afternoon).
table 3: a fragment of some resource log (derived from the event log in table 2).
resource case type activity type time type
... ... ... ...
pete normal register afternoon
pete normal register afternoon
ann normal contact afternoon
john normal check morning
sue normal check morning
bob vip register morning
john normal decide morning
sue normal decide morning
mary vip check afternoon
mary vip decide afternoon
... ... ... ...
3.4. organizational model
we dene the concept of an organizational model (see def. 7) by incorpo-
rating the notion of execution modes. as such, the resulting model does not
only dene the grouping of resources ( rgand mem ) as existing organizational
models do, but also species the relationship between the resource groups and
execution modes ( cap). it is important to introduce the latter as a novel com-
ponent of an organizational model, in particular for a model discovered from
event logs, since this component captures the knowledge of process execution
relevant to the grouping of resources in the organization, and thus establish the
linkage between organizational models and processes.
denition 7 (organizational model) .letrbe a set of resources and ct,
at andtt be collections of case types, activity types, and time types. om =
(rg;mem;cap)is an organizational model where rg is a set of resource groups,
mem2rg!p(r)maps each resource group onto its members, cap 2rg!
p(ctattt )maps each resource group onto its possible execution modes.
fig. 3 provides a graphical illustration of the above organizational model.
the many-to-many relationships are used to capture the fact that resource
groups may be overlapping in terms of members or execution modes, i.e., there
may be two distinct groups rg1and rg2such that mem (rg1)\mem (rg2)6=?
orcap(rg1)\cap(rg2)6=?.
fig. 4 shows an example organizational model with six resources as members
of four resource groups, respectively. the capabilities of the rst group (\group
0" with member resources bob and pete) are illustrated as a tree of octagons
with red highlighted texts, which shows that this group is capable of executing
modes (vip, register, morning) and (normal, register, afternoon).
123.5. conformance checking of organizational models
as discussed in our review of the related work, it remains an open issue
that how to evaluate a discovered organizational model against the input event
log. in this section, we address this issue by introducing conformance check-
ingbased on the above richer notion of organizational models. conformance
checking refers to comparing modeled behavior with actual behavior (of process
execution) when both a model and an event log are given, and can be applied
for measuring the eectiveness of model discovery methods. below, we present
theglobal conformance measures for evaluating the degree of conformance be-
tween an organizational model and the corresponding event log, and also the
local diagnostic measures for the purpose of further investigating the reasons
behind discrepancies between a model and an event log.
3.5.1. global conformance measures
these include tness andprecision , which can be used to measure the degree
of commonalities or discrepancies between a model and an event log from two
dierent perspectives.
fitness. given an event log and an organizational model, tness considers the
proportion of behavior in the log possible according to the model. to quantify
tness, we rst introduce the notion of conforming events (def. 8). an event in
a log is regarded as conformed with a given model, if its originating resource is
allowed by the model to execute the event. in light of this, we dene a tness
measure at the event level (def. 9), which yields a value between 0 and 1. note
that only events with resource information ( eres) should be considered.
denition 8 (conforming events) .let el = (e;att;)be an event log
and om = (rg;mem;cap)an organizational model. econf =fe2eresj
9rg2rgres(e)2mem (rg)^9(ct;at;tt)2cap(rg)e2[e](ct;at;tt)gare all conform-
ing events. enconf =eresneconf are all non-conforming events.
denition 9 (fitness) .the tness of an organizational model om w.r.t. an
event log el is tness (el;om) =jeconfj
jeresj.
resources resource groups
 execution modes
case types
activity types
(1)
(2)
figure 3: graphical view of the organizational model specied in def. 7 which has a many-
to-many relationship: (1) between resource groups and resources, and (2) between resource
groups and execution modes.
13figure 4: visualization of an example organizational model related to the sample event data
in table 2 and its derived resource log in table 3. note that for a presentation purpose, only
the capabilities of \group 0" are shown in the gure as octagons with red highlighted texts.
the tness between a model and a log is good when most events in the log
are conformed. tness (el;om) = 1 if resources only performed events in el
that they were allowed to perform according to om.tness (el;om) = 0 if no
event in elwas executed by a resource actually allowed to perform it according
toom. following the denition, all events executed by a resource (see def. 2) in
the example event log are conforming events. hence, the example organizational
model shown in fig. 4 has a tness of 1.
precision. given an event log and an organizational model, precision considers
the extent of behavior allowed by the model with respect to the log. to quantify
precision, we propose the notion of candidate resources (def. 10). for an event
in a given log, its candidate resources with respect to a model refer to those
resources allowed by the model to perform the event. the idea is that a perfectly
precise model would only allow limited behavior and would never go beyond
those recorded in a referenced log. in other words, it is assumed that an event
can only be performed by a few candidate resources.
denition 10 (candidate resources) .let el = (e;att;)be an event log
and om = (rg;mem;cap)an organizational model. cand :e!p (r)maps
an event onto a set of candidate resources (in which an empty set is possible).
for eache2e, cand (e) =fr2rj9 rg2rgr2mem (rg)^9(ct;at;tt)2cap(rg)e2
[e](ct;at;tt)gis the set of candidate resources for event e; and cand (e) =s
e2ecand (e)is the overall set of candidate resources.
we also introduce the notion of allowed events (def. 11). for an event in
a given log, it is regarded as allowed by a model if there exists at least one
candidate resource in the model to perform the event.
14denition 11 (allowed events) .let el = (e;att;)be an event log and
om = (rg;mem;cap)an organizational model. eallowed =fe2eresj
cand (e)6=?gare all allowed events.
based on the above, the precision with respect to a model and an event log
can be measured by considering the fraction of resources allowed by the model
to perform the events in the log (def. 12). like the tness measure, the dened
precision measure also yields a value between 0 and 1.
denition 12 (precision) .the precision of an organizational model om w.r.t.
an event log el is precision (el;om) =1
jeallowedjp
e2econfjcand (e)j jcand (e)j+1
jcand (e)j.
precision (el;om) = 1 if each event in elallowed by om is a conforming
event, and has no other candidate but exactly the resource who executed the
event. on the contrary, precision (el;om) = 0 if none of the allowed events is a
conforming event, i.e., no resource is allowed to perform events which it actually
originated. for instance, according to the organizational model in fig. 4, the
rst event in the example log shown in table 2, which is presented as the row
\654423, register request, 29-08-2018 15:02, pete, normal", has two candidate
resources, bob and pete. also, all the events executed by a resource in the log
are allowed events. the precision value of this model with respect to the log is
0:883, suggesting the model allows some extra behavior to happen, which was
not observed according to the event log data.
3.5.2. local diagnostic measures
while the global conformance measures provide an overall evaluation of the
conformance between a model and an event log, they alone will not suce when
there is a need to investigate the reasons behind non-conformance. another
oering of conformance checking is the local diagnostic analysis, which can reveal
discrepancies in models with reference to the reality recorded by event logs [3].
the results may then inform improvements or corrections to be taken. here, we
introduce four possible measures that can be used to support local diagnostics
on an organizational model given an event log.
•group relative focus (on a given type of work) species how much a re-
source group performed this type of work compared to the overall workload
of the group. it can be used to measure how the workload of a resource
group is distributed over dierent types of work, i.e., work diversication
of the group.
•group relative stake (in a given type of work) species how much of this
type of work was performed by a certain resource group among all groups.
it can be used to measure how the workload devoted to a certain type of
work is distributed over resource groups in an organizational model, i.e.,
work participation by dierent groups.
•group coverage with respect to a given type of work species the propor-
tion of members of a resource group that performed this type of work.
15•group member contribution of a member of a resource group with respect
to a given type of work species how much of this type of work by the
group was performed by the member. it can be used to measure how
the workload of the entire group devoted to a certain type of work is
distributed over the group members.
we refer to the above measures as local diagnostic measures and they can
be formulated precisely in def. 13 to def. 16. note that dierent types of work
can be represented by dierent execution modes. thus, the workload devoted
to a certain type of work can be specied by the number of events capturing
the occurrences of the corresponding execution mode. and the workload of a
resource group can be specied by the total number of events originated by its
group members.
denition 13 (group relative focus) .given event log el = (e;att;)and
organizational model om = (rg;mem;cap), for any resource group rg 2rg,
its relative focus on execution mode (ct;at;tt)can be measured by
relfocus (rg;(ct;at;tt)) =jfe2[eres](ct;at;tt)jres(e)2mem (rg)gj
jfe2eresjres(e)2mem (rg)gj.
denition 14 (group relative stake) .given event log el = (e;att;)and
organizational model om = (rg;mem;cap), for any resource group rg 2rg,
its relative stake in execution mode (ct;at;tt)can be measured by
relstake (rg;(ct;at;tt)) =jfe2[eres](ct;at;tt)jres(e)2mem (rg)gj
j[eres](ct;at;tt)j.
denition 15 (group coverage) .given event log el = (e;att;)and orga-
nizational model om = (rg;mem;cap), for any resource group rg 2rg, the
proportion of the group members covered by execution mode (ct;at;tt)can be
measured by cov (rg;(ct;at;tt)) =fr2mem (rg)j9e2[eres](ct;at;tt)res(e)=rg
jmem (rg)j.
denition 16 (group member contribution) .given event log el = (e;att;)
and organizational model om = (rg;mem;cap), for any resource r2mem (rg)
where rg2rg, its contribution as a member of resource group rg to execution
mode (ct;at;tt)can be measured by
memcontr (r;rg;(ct;at;tt)) =jfe2[eres](ct;at;tt)jres(e)=rgj
jfe2[eres](ct;at;tt)jres(e)2mem (rg)gj.
example. let us revisit the example organizational model presented in fig. 4.
for resource group \group 0" and one of its capabilities (vip, register, morn-
ing), we can calculate these local diagnostic measures as follows.
•relfocus (\group 0" ;(vip, register, morning)) = 0 :333,
•relstake (\group 0" ;(vip, register, morning)) = 1 :0,
•cov(\group 0" ;(vip, register, morning)) = 0 :5, and
•memcontr (bob;\group 0";(vip, register, morning)) = 0,
16•memcontr (pete;\group 0";(vip, register, morning)) = 1 :0.
the measured results imply that resources in \group 0" consumed 33%
of their total workload ( relfocus ) carrying out work related to \registering
requests for vip cases in the morning", and this group is the only group that
contributed to executing this type of work ( relstake ). despite this, it is worth
noting that only half of the group members ( cov) have actually participated in
conducting the work, i.e., resource pete ( memcontr ).
the example above shows how the use of local diagnostics may enable us
to \replay" event data onto an organizational model and thus to study the
actual behavior of resource groups and their members in process execution.
utilizing these diagnostic results, we may explain the non-conformance between
the organizational model and the event log implied by the imperfect model
precision (0 :883). after extending the examination to all resource groups and
their capabilities using the diagnostic measures, we can show that \group 0" is
the only one in the example model that has a comparatively low group coverage
considering all of its capabilities (as all other groups have a 1 :0 coverage over
each of their capabilities). it indicates that the non-conformance is located at
the \group 0" part in the model, which allows both bob and pete to be capable
of executing the two modes. in the meantime, the event log does not provide
any direct evidence showing such sharing of work between the two resources.
nevertheless, note that further interpretation of the conformance checking
results depends on the purpose of the model being whether descriptive or nor-
mative [3]. if the model is intended to be describing the observed event log data,
then the revealed non-conformance may suggest that the model needs improve-
ment, e.g., \revising" the model by dividing \group 0" into two groups and
linking each of them with only one execution mode. on the other hand, if the
model is supposed to be normative, then such dierences may lead to further
analysis on resource performance. for instance, investigating why resource bob
and pete did not process the registering of requests in a general way even when
they are expected to do so.
3.6. organizational model mining framework
based on the notion of organizational models and the relevant conformance
checking measures established above, we propose a framework for organizational
model mining as depicted in fig. 5. the framework supports discovery, con-
formance checking, and extended analysis (e.g., analyzing the performance) of
organizational models using event log data.
as fig. 5 illustrates, taking event log data as input, an organizational model
can be discovered through step (1). this consists of three sub-steps: (1a) learn-
ing execution modes, and (1b) discovering resource groups, and (1c) nding
relationships between groups and execution modes. alternatively, an organiza-
tional model can be constructed manually, or an \ocial" organizational model
is available and can be presented according to the structure proposed in def. 7,
and these constitute step (2). in step (3), the conformance between the event
17enhanced
organizational 
model
resources
 resource groups execution mode s
discover
organizational 
model
conformance 
checking
event logs
organizational model
1
1a
1c
1b
2
3
4“official”
organizational 
model
5
organizational 
analytics
conformance
global analysis
local diagnosticsfigure 5: overview of the framework for organizational model mining.
log and organizational model can be checked using measures from a global per-
spective and a local perspective (as dened in sect. 3.5). the insights drawn
from conformance checking can be used to revise or improve the \as-is" organi-
zational model (i.e., step (4)). meanwhile, dierent organizational models can
be used to simulate \what if?" scenarios (e.g., using relevant process data
from the input event log), and it is also possible to repair a hand-made organi-
zational model mediating between reality (as in the event logs) and the desired
organization. these are referred to as organizational analytics (i.e., step (5)).
in the remaining of the paper, we focus on the discovery (step (1)) and
conformance checking (step (3)) of organizational models. it is worth noting
that the framework proposed herein provides opportunities for addressing new
research questions relevant to organizational model mining, which will be dis-
cussed as part of the future work at the end of the paper.
4. approach
in this section, we introduce an approach underpinned by the framework
proposed in the previous section, with a focus on discovering organizational
models. fig. 6 depicts an overview of the approach. to begin with, an event log
with the mandatory attributes and resource information (see sect. 3.1) is used
as input for learning a set of execution modes (phase 1). this yields as output a
resource log, which is used to discover resource grouping (phase 2). discovered
resource groups are then assigned a corresponding set of execution modes to
describe the capabilities of their group members (phase 3). an organizational
18model is produced as the nal artifact. the following subsections describe the
methods and techniques used in these three phases, respectively.
event 
logresource 
loglearn 
execution 
modesdiscover 
resource 
groupingresource 
groupsassign 
execution 
modesorganizational  
model
figure 6: an overview of the proposed approach.
4.1. learn execution modes
learning execution modes requires identifying case, activity, and time types.
this often depends on the available information recorded in the input event log
as well as the purpose of analysis. for example, if an event log only records dates
without the exact times when the events occurred, then dening time types at
the scale of hours would be meaningless, whereas it may still be possible for a
user to analyze daily or weekly process execution patterns using the same log.
a well-dened collection of execution modes helps organize events at dierent
levels of granularity or dimensions and assists in the analysis of event data [30].
to propose a general method for learning execution modes is a challenging topic
and will not be addressed in this paper. instead, we present two simple methods
as examples to show how execution modes can be derived from an event log.
one method, namely atonly , considers activity types only. when such a
method is applied, there are only one case type for all the cases and only one
time type for all the timestamps recorded in the log, i.e., all events are regarded
as having the same case type and time type. since activity information is usually
mandatory for event logs, atonly can be applied in most situations and can serve
as a starting point towards developing more advanced methods.
the other method, namely ct+at+tt , takes into account all three dimen-
sions, i.e., case, activity, and time dimensions, when building execution modes.
case types may be derived according to dierent variants of cases specied by,
e.g., case-level attributes recorded in event logs. time types may be dened
according to a predened time unit. for example, selecting a time unit that
refers to dierent days of a week (i.e., monday, tuesday, etc.) will result in
seven time types for events recorded in an event log.
table 4 shows the results of applying an example of atonly method and an
example of ct+at+tt method, respectively, to the sample event log in table 2
to obtain the collection of execution modes. for atonly , the simplest solution is
used in which each distinct activity label recorded in the log is considered as a
unique activity type. for ct+at+tt , the case-level attribute \customer type"
is selected, and the time unit is set to weekdays. each event in the original log
is now mapped onto an execution mode in table 4.
once a collection of execution modes has been determined, a resource log
can be derived. compared to the original event log, a resource log provides a
19more focal view on event data from the resource perspective, and uses execution
modes as resource attribute data. a derived resource log will be used as input
to discover resource grouping in the next phase.
4.2. discover resource grouping
we refer to resource groups as the general concept of resource classes [31]
well-accepted in business process management, i.e., members in a resource group
are interchangeable in terms of carrying out similar types of work in process ex-
ecution. such resource groups may correspond to various forms of grouping en-
tities in organizations. for example, employees from the accounting department
in a company share responsibilities in executing tasks related to the payment
and receipt of bills rather than those of manufacturing products. another ex-
ample can be found in the use of customer teams where resources as members
of a team would likely be focusing on specic sorts of cases distinguished by the
customers who initiate the cases.
in this sense, the discovery of resource grouping can be made through cluster-
ing resources with similarities in terms of their behavior captured by a resource
log (derived from the previous phase). to this end, we rst consider building
a set of features to characterize the behavior of each individual resource, and
do so by applying an idea inspired by the notion of \performer-by-activity ma-
trix" [7, 4, 24, 5]. the features of a resource are determined by both the variety
and the event frequency of execution modes that the resource has executed.
using the resource log as input, this will produce a matrix of which each row
corresponds to the feature vector of a resource, and the values correspond to the
frequency of this resource originating dierent execution modes. table 5 shows
the feature matrix resulting from applying the idea on a derived resource log,
table 4: execution modes obtained after applying an atonly method and a ct+at+tt
method, respectively, to the example event log in table 2.
execution modes execution modes
(applying atonly ) (applying ct+at+tt )
... ...
(?, register request, ?)(normal, register request, wednesday)
(?, register request, ?)(normal, register request, wednesday)
(?, conrm request, ?)(normal, conrm request, wednesday)
(?, get missing info, ?)(normal, get missing info, wednesday)
(?, conrm request, ?)(normal, conrm request, wednesday)
(?, check insurance, ?)(normal, check insurance, thursday)
(?, check insurance, ?)(normal, check insurance, thursday)
(?, register request, ?)(vip, register request, thursday)
(?, accept claim,?) (normal. accept claim, thursday)
(?, reject claim,?) (normal, reject claim, thursday)
(?, pay claim,?) (normal, pay claim, thursday)
(?, conrm request, ?)(vip, conrm request, thursday)
(?, check insurance, ?)(vip, check insurance, thursday)
(?, accept claim,?) (vip, accept claim, thursday)
(?, pay claim,?) (vip, pay claim, thursday)
... ...
note:?denotes an undened value on the corresponding dimen-
sion in the execution modes.
20which is related to the execution modes learned using method ct+at+tt , as
shown in the previous example (see table 4).
with a resource feature matrix obtained, the clustering of resources can
be done in a straightforward way employing well-established data mining tech-
niques. some previous studies on organizational model mining address the issue
by adopting cluster analysis [4, 5] or community detection [24, 32] techniques.
cluster analysis aims at grouping a set of data objects into multiple clusters such
that objects within a cluster have high similarity but are dissimilar to those in
other clusters [33]. the idea of applying these cluster analysis techniques is
straightforward with the resource feature matrix as input. community detec-
tion is the discovery of community structures in networks, which refers to the
division of nodes into groups within which the connections are denser compared
to those between groups [34]. for methods employing community detection
techniques, a resource \social network" rst needs to be constructed, and then
a community detection algorithm can be applied to discover communities in the
network forming the resource groups. while building the network, each resource
is considered a node, and the similarity among resource feature vectors in the
matrix is measured to determine the pairwise connection. although a variety
of choices of techniques that can t in the current phase as solutions for discov-
ering resource grouping, their eectiveness may vary from case to case, hence it
is necessary to make a selection based on the characteristics of the input data,
i.e., the resource feature matrix.
finally, we discuss a couple of technical issues concerning the discovery of
resource grouping. the rst one is to determine the number of groups to be
identied, which depends on both the latent structuring of the resources and
the aim of analysis. for most techniques, this is often done by specifying one or
more parameters before running the algorithm, e.g., the number of distributions
used, resolution, etc. in cluster analysis, methods like cross-validation and elbow
method may help determine a suitable conguration of parameters and hence
the number of groups to be identied. another issue concerns whether resource
groups are disjoint from or overlapping each other. in modern organizations, it is
common to have individuals holding multiple roles or positions and thus sharing
membership across organizational groups. to discover a resource grouping in
which a resource can belong to more than one group, overlapping clustering or
overlapping community detection techniques are needed. some existing work
on the topic (e.g., [24, 5]) employs such techniques and supports identifying
table 5: an example 6 7 resource feature matrix obtained, with respect to the execution
modes learned from applying method ct+at+tt (see table 4).
resource features
ann 0 1 0 0 0 0 0
bob 0 0 0 1 0 0 0
john 0 0 1 0 1 0 0
mary 0 0 0 0 0 1 1
pete 2 0 0 0 0 0 0
sue 0 0 1 0 1 0 0
21resource groups with overlaps.
4.3. assign execution modes
to produce a nal organizational model, the capabilities of discovered re-
source groups need to be determined. in the proposed approach, this is achieved
by assigning each resource group a set of relevant execution modes with refer-
ence to the log. we rst consider a simple strategy that assumes each historic
execution carried out by a member of a resource group contributes to the group's
capabilities. we refer to this strategy as method fullrecall . the idea behind
this method is similar to that of entity assignment method in [4].
method (fullrecall) .let rg2rg be a resource group discovered from event
log el, and ctattt be a collection of execution modes derived from el.
the capabilities of resource group rg is cap (rg) =
f(ct;at;tt)2ctatttj9r2mem (rg)(r;ct;at;tt)2rl(el;ct;at;tt)g.
fullrecall assigns an execution mode to a discovered group as long as one
of the group members has originated an event of this mode. as such, it en-
sures that all observed behavior recorded in a log is captured by the resulting
organizational model.
nevertheless, applying such a strategy runs the risk of considering excessive
modes as group capabilities. for example, execution modes carried out by only
a few members would still be regarded as being shared among all resources
within a group. hence, we go a step further to consider distinguishing the most
relevant execution modes from all the executions, and only assign these modes
as group capabilities. this requires measuring the extent of relatedness of a
mode with respect to a group, and we approach it under two assumptions:
•the capabilities of a resource group should be reected by the types of
work in which the group had considerable participation (which can be
measured by group relative stake ), and
•the capabilities of a resource group should be reected by the types of
work which was carried out by most of the group members (which can be
measured by group coverage ).
based on the above, we present the following method, namely overallscore ,
for assigning execution modes. overallscore considers two factors jointly, group
relative stake and group coverage , by using a weighted average which enables a
varying extent of focus to be set for dierent factors.
method (overallscore) .let rg2rg be a resource group discovered from event
log el, and ct attt be a collection of execution modes derived from
el. given a threshold 2(0;1], and weights !1;!22[0;1];!1+!2= 1,
cap(rg) =f(ct;at;tt)2ctatttj!1relstake (rg;(ct;at;tt)) +
!2cov(rg;(ct;at;tt))g.
22table 6: execution mode assignment results obtained for a given resource group of two mem-
bers applying methods fullrecall and overallscore (!1=!2= 0:5;= 0:8), when method
ct+at+tt is used for learning execution modes (see table 4).
membersgroup capabilities group capabilities
(applying fullrecall ) (applying overallscore )
\john", \sue"(normal, check insurance, thursday)
(normal, check insurance, thursday) (normal, accept claim, thursday)
(normal, reject claim, thursday)
as a result, an execution mode will be assigned as part of a group's capa-
bilities only when it is observed in the log that sucient members in the group
have a certain amount of participation in executing the mode. note that other
factors reecting the relatedness between resource groups and execution modes
can be considered and are not necessarily limited to the proposed ones.
table 6 presents an example of applying the proposed methods fullrecall and
overallscore for execution mode assignment considering a group of two resources
(namely john and sue) and the execution modes shown in table 4 as input.
5. implementation
we developed a prototype which implements the presented approach and
the conformance checking measures. the prototype consists of a python library
named orgminer5, and a tool6which allows a user to perform organizational
model mining with a given event log, and to visualize the details of a discovered
model.
orgminer includes modules that provide the functionalities with respect to
dierent phases in the approach. users are allowed to select from several alter-
native methods for each phase, presented as follows.
execution mode learning. three dierent methods are implemented, including
•atonly , which considers only the activity types and neglects the other two
dimensions. activity types are constructed such that each activity label
denes a unique type;
•ct+at+tt (case attribute) , which considers all of the three dimensions.
activity types are built based on activity labels as in atonly , and time
types are built by categorizing events into 7 classes based on the weekday
of the timestamps. users may specify a case-level attribute in a given
event log, for which each distinct value will be recognized as a case type
to be used;
5orgminer library. https://orgminer.readthedocs.io/
6tool for organizational model mining and visualization. https://orgminer.readthedocs.
io/en/latest/examples/infsyst2020yang-arya.html
23•ct+at+tt (trace clustering) , which also considers all the three dimen-
sions, except that the construction of case types is based on the results of
utilizing trace clustering [35]. the case type of an event is determined by
the trace cluster to which it belongs. the context aware trace cluster-
ing [35] technique was adopted for implementation.
resource grouping discovery. two methods proposed in the previous research
on organizational model mining were incorporated into the implementation, i.e.,
ahc [4] and moc [5]. both methods require specifying a proximity measure
(e.g., euclidean distance) and the number of clusters to be derived.
execution mode assignment. the two methods proposed in sect. 4.3 are both
implemented. for method overallscore , users are required to specify the values
for the threshold and the weightings.
these alternative methods can be congured independently, and the nal
output will be obtained by systematically deploying the selected methods. this
design provides exibility when applying the approach and, more importantly,
it supports the extensibility for integrating the implementations of the new
methods in the future.
6. evaluation
we have conducted extensive experiments on real-life event log data to eval-
uate the presented approach for discovering organizational models using the
proposed conformance checking measures. in this section, we introduce the
event log dataset adopted for evaluation, and describe the setup of experiments.
results are then illustrated and analyzed, followed by a discussion of ndings.
6.1. experiment dataset
real-life data sets are adopted for experiments, including one event log
sourced from the coselog project [36] and one from the business process intel-
ligence challenge (bpic). these event log data are publicly available online at
4tu centre for research data7. the rst log (wabo [37]) records data from
the receipt phase of a building permit process in an anonymous dutch munici-
pality as part of the coselog project. the second (bpic17 [38]) contains event
data related to a loan application process in a dutch nancial institute. these
logs satisfy the basic requirements for event attributes as dened in sect. 3.1.
they contain case, activity, time, and resource information, and also carry sev-
eral case-level attributes such as the purpose of a loan application.
to obtain the experiment dataset, a preprocessing step was conducted on
the original logs to remove redundant event data | only events recording the
74tu centre for research data. https://data.4tu.nl/
24read input 
event logat
only
ct, at & tt
(case attribute)ahc
mocfull
recall
evaluate
organizational
modelevaluation
results
overall
scorect, at & tt
(trace clustering)figure 7: an overview of the experiment settings. for an input event log, each path in the
graph species a combination of methods when using the approach to discover an organiza-
tional model.
completion of activities8are kept. the ltering guarantees that one actual exe-
cution of an activity in the process would be counted once only. table 7 reports
some basic statistics of the preprocessed event logs ready for experiments.
table 7: descriptive statistics of the preprocessed event logs for experiments.
log #cases #events #activities #resources
wabo 1,434 8,577 27 48
bpic17 31,509 475,306 24 144
6.2. design and setup
the implemented approach includes several alternative methods at each in-
termediate phase (see sect. 5). in the experiments, we tested all the combi-
nations of the alternatives in terms of model discovery and evaluation. fig. 7
depicts an overview of our experiment settings, where a model is discovered with
an execution mode learning method, a resource grouping discovery method, and
a mode assignment method selected.
the combination of all these alternatives resulted in a considerable number
of organizational models to be discovered and evaluated for the two input logs.
to address the issue and realize such an experiment design, we applied the prin-
ciples of scientic workow to automate the process of experiments by utilizing
scripting and graph visualization software. this facilitated both the setup and
conduct of our experiments while also beneting future research in terms of
sharing, replicating, and modifying the experiments. the conguration of these
methods9in the experiments are presented as follows.
for execution mode learning methods, atonly requires no extra congura-
tion. for ct+at+tt (case attribute) , we selected an attribute recording the
8refer to the standard transaction model for activities in the ieee xes standard [39].
9experiment conguration. https://orgminer.readthedocs.io/en/latest/examples/
infsyst2020yang-replicate.html
25channel of environmental permit application (with 5 possible categorical values)
for log wabo, and the attribute recording the goal of the loan applied for by
customers (with 14 possible categorical values) for log bpic17. for ct+at+tt
(trace clustering) , we followed the original congurations in the paper [35] which
proposes the trace clustering technique that we adopted for implementation (see
sect. 5).
both methods for resource grouping discovery, i.e., ahc and moc , applied
the same conguration. the euclidean distance was selected as the proximity
measure. the issue of deciding the number of resource groups was addressed by
employing the cross-validation technique [33], with the range of the potential
number of groups set to [2 ;10].
as for execution mode assignment methods, fullrecall requires no extra con-
gration. for the parameters used by method overallscore , we performed grid
search with the expected range of weighting values !1;!2set to [0:1;0:9], the
range of threshold value set to [0:1;0:9], and the search step set to 0 :1. the
nal parameter settings were determined by picking the ones that can lead to
discovery results with the best conformance values.
each discovered model was evaluated using the proposed tness and preci-
sion measures, and the f1-score (i.e., harmonic mean) of the two measures was
also calculated as an overall assessment for model conformance. moreover, local
diagnostics were performed on selected models with low precision and f1-score.
all the experiments were conducted on a linux system hosted on a machine
with 3.5ghz intel xeon e5-1650 cpu and 15gb ram, running anaconda
python 4.7.10.
6.3. results and analysis
this subsection presents our results and ndings from the experiments. a
total number of 24 organizational models were discovered and evaluated. table 8
reports the model with the best conformance for each event log, respectively.
table 8: models discovered from the experiment dataset with the best conformance results:
discovery conguration, model statistics, and model conformance.
log congurationmodel statistics conformance
#modes #groups f. p. f1
wabocatmoc os 307 9 :876:577:696(tc)
bpic17catahc os 1884 10 :831:641:724(tc)
1conguration: cat = ct+at+tt , tc = trace clustering ; os = overallscore .
2conformance measures: f. = fitness, p. = precision, f1 = f1-score.
in the following, we rst present a comparative analysis of the models ob-
tained from using dierent settings for model discovery, in order to investigate
how dierent selections of methods impact the quality of the discovered models
in terms of global conformance measures. we then show how the problematic
models (those with poor quality) can be examined by exploiting the proposed
local diagnostic measures.
26table 9: comparison among models resulting from applying dierent execution mode learning
methods: ct+at+tt (trace clustering) ,atonly , and ct+at+tt (case attribute) .
log congurationmodel statistics conformance
#modes #groups f. p. f1
waboat
moc os27 9 :947:407:569only
cat263 9 :843:448:586(ca)
cat307 9:876:577:696(tc)
bpic17at
ahc os24 10 :923:530:673only
cat2020 10 :810:629:708(ca)
cat1884 10 :831:641:724(tc)
1conguration: cat = ct+at+tt , tc = trace clustering , ca = case attribute ; os = overallscore .
2conformance measures: f. = fitness, p. = precision, f1 = f1-score.
6.3.1. global conformance analysis
to conduct the comparative analysis, models with the best conformance as
shown in table 8 were used as baselines. the comparative analysis was per-
formed phase by phase. for each of the three phases in the discovery approach,
we compared the tness and precision between models obtained from using var-
ious alternative methods in that phase, while keeping the selected methods in
the other two phases the same as those in the baseline models.
execution mode learning. (table 9) the selection of execution modes deter-
mines a way that partitions the event log data. the conformance of the model
produced from applying method atonly has a higher tness with respect to the
baseline. this could be explained by the fact that applying atonly leads to a
relatively more coarse collection of execution modes, making the same amount
of events correspond to a much smaller number of execution modes (307 vs.27
and 1884 vs.24 modes), and therefore increases the number of events that could
be tted by correctly assigning an execution mode to a group. in contrast, this
has a negative impact on producing a precise model as the number of candidate
resources associated with an event increased, which explains the observation
that the precision values of models mined using atonly are worse.
on the other hand, comparing models generated from using two dierent
strategies for implementing ct+at+tt , we observe that the one produced
from selecting a single case attribute to derive case types ( ct+at+tt (case
attribute) ), has comparatively lower values in both tness and precision. the
possible reason is that, in terms of classifying business cases to build case types,
the use of a trace clustering technique may lead to more reasonable output,
since it takes into account comprehensive information from an event log instead
of distinguishing cases trivially based on a single case attribute. as a result,
execution modes derived from ct+at+tt (trace clustering) may better capture
the similarity among events at the case dimension, hence lead to organizational
models with better quality.
27table 10: comparison among models resulting from applying dierent resource grouping
discovery methods: moc and ahc.
log congurationmodel statistics conformance
#modes #groups f. p. f1
waboahc
os307 9 :815:595:687cat
(tc)moc 307 9:876:577:696
bpic17ahc
os1884 10 :831:641:724cat
(tc)moc 1884 8 .957 .406 .571
1conguration: cat = ct+at+tt , tc = trace clustering ; os = overallscore .
2conformance measures: f. = fitness, p. = precision, f1 = f1-score.
resource grouping discovery. (table 10) the discovery of resource grouping
identies resource groups of which members have similar characteristics in pro-
cess execution. as for resource group discovery methods, moc produced models
(i.e., the baseline ones) with relatively higher tness but lower precision, in com-
parison with ahc. this is as expected since resource groups mined using moc
could be overlapping whereas the others are disjoint. in a situation where groups
are overlapping, a resource could be in more than one group, which therefore
extends the possible range of execution modes to be assigned as capabilities in
the subsequent phase for all groups it belongs to. the discovered models would
thus be more exible comparatively, hence could potentially t more events
(thus increase tness) while also introduce an excessive number of candidate
resources (thus decrease precision).
execution mode assignment. (table 11) assigning execution modes to discov-
ered resource groups yields the nal organizational models. by using method
fullrecall one may sacrice much precision for perfect tness, as redundant
execution modes would be recognized as group capabilities and thus make a
produced model too exible | in the sense that resources could be allowed to
carry out an excessive number of modes. similar to a \ower" model [3] in
process model discovery, such an organizational model is able to t everything
observed in a log, but may still be inappropriate in terms of modeling the ac-
tual behavior of resources in an organization underlying the log data as it lacks
precision. by comparison, the baseline models resulted from applying method
overallscore gained much better precision while still maintaining a moderate
level of tness.
the analysis of comparing the conformance of organizational models ob-
tained from various settings showcases a useful application of the proposed con-
formance checking measures: evaluating discovery algorithms through measur-
ing the quality of discovered organizational models. this extends the literature
and contributes to future work on organizational model mining, as the eec-
tiveness of a developed discovery method could be evaluated against the input
event log. on the other hand, it could also benet any application of discovering
organizational models from event logs by serving as a reference for conguring
and adjusting the method in use, in order to obtain results of satisfying quality.
28table 11: comparison among models resulting from applying dierent execution mode as-
signment methods: overallscore and fullrecall .
log congurationmodel statistics conformance
#modes #groups f. p. f1
wabo mocfr 307 9 1:000:067:125cat
(tc)os 307 9:876:577:696
bpic17 ahcfr 1884 10 1:000:169:290cat
(tc)os 1884 10 :831:641:724
1conguration: cat = ct+at+tt , tc = trace clustering ; os = overallscore , fr = fullrecall .
2conformance measures: f. = fitness, p. = precision, f1 = f1-score.
6.3.2. local diagnostic analysis
from the presented experimental results, one may notice that some meth-
ods led to models suering unexpectedly low conformance due to the lack of
precision. in addition to investigating the cause from the perspective of the
discovery approach, we also consider the discovered models \as-is" models, and
applied local diagnostic measures to examine the potential reasons behind non-
conformance. we took as an example an organizational model derived from log
wabo during the experiments, since it has a poor precision and comparatively
the lowest f1-scores among all models discovered10, i.e., the model resulting
from applying ct+at+tt (case attribute) -moc -fullrecall , with tness = 1 :0,
precision = 0 :036 and f1-score = 0 :069.
the denition of precision (def. 12) suggests that an organizational model
is likely to be imprecise when it allows an exaggerated number of candidate
resources for an event (especially when the candidates involve those who have
never actually executed the event). from a model point of view, this may be
reected as resource groups having excessive capabilities allowed with respect
to event log data.
in order to reveal such defects in the problematic model, we calculated the
local diagnostic measures for each \group-mode" pair allowed in the model.
we then combined all the obtained scores into a list and sorted all \group-
mode" pairs, which subsequently enabled us to locate group capabilities which
could be causing the non-conformance between the model and the event log. for
illustration purposes, we selected part of the diagnostic results for our discussion.
fig. 8 shows a resource group in the model with 6 members, \group 3",
which is capable of carrying out execution modes across all types of cases. ac-
cording to the model, this group is allowed to carry out a total of 133 execution
modes, yet the diagnostic results show only 46 of them have a group coverage of
over 0:5, implying that in the actual process execution | as recorded in the event
log | the majority of capabilities (87 of 133) of this resource group have been
10note that these refer to the complete set of results from model discovery rather than the
ones presented for the comparative analysis on global conformance.
29carried out by merely one or two members rather than been shared across the
whole group. for instance, as shown in fig. 8, execution mode (\ct.internet",
\t04 determine conrmation of receipt", \tt.6")11was carried out by two of
the group members only, \resource 03" and \resource 20", whereas the other
four members have never participated in the work as observed in the log data.
on the other hand, the results of examining group relative stake scores also
provided us interesting ndings (fig. 9 and fig. 10). for example, there are
two execution modes accounted as the group's capabilities, i.e., (\ct.internet",
\t06 determine necessity of stop advice", \tt.4") and (\ct.internet", \t10
determine necessity of stop indication", \tt.4"), which were executed 286 and
272 times according to the log, however only less than 5% of the total work on
these execution modes was actually committed by members from the group (as
revealed by group relative stake).
the above analysis shows an example of using local diagnostics to locate
the imprecision of an organizational model with respect to a particular resource
group within the model. for the example group selected, we were able to rec-
ognize group capabilities (as execution modes) that are allowed in the model
but seem irrelevant according to actual process execution: either carried out by
only a small proportion of the group (low group coverage), or not involving the
group as a major contributor (low group relative stake). the analysis can also
be conducted for other resource groups to detect imprecision at the local level,
and the combined results may lead to a full picture reecting where the orga-
nizational model does not align with the log data. depending on the intention
of the model, this could inform dierent possible actions for improvement. in
this case, as the diagnosed model was derived from applying a model discovery
approach, a potential further step could be improving the approach to avoid
assigning those less related execution modes as capabilities of groups, thus to
discover more precise models.
11tt.1, tt.2, . . . tt.7 denote the time types corresponded to the seven weekdays respec-
tively used in the current experimental settings (see sect. 6.2).
30t20 print report y to stop indicationt20 print report y to stop indicationt06 determine necessity of stop advicet06 determine necessity of stop advicet10 determine necessity to stop indicationt10 determine necessity to stop indication
10111011
t07-5 draft intern advice aspect 5t07-5 draft intern advice aspect 51616t04 determine confirmation of receiptt04 determine confirmation of receipt
4242
t02 check confirmation of receiptt02 check confirmation of receipt6565
t07-1 draft intern advice aspect 1t07-1 draft intern advice aspect 13131115115
121121t16 report reasons to hold requestt16 report reasons to hold request1818
t11 create document x request unlicensedt11 create document x request unlicensed3333
t05 print and send confirmation of receiptt05 print and send confirmation of receipt8282
151578781717
10341034
153153978978
t03 adjust confirmation of receiptt03 adjust confirmation of receipt37372626t17 check report y to stop indicationt17 check report y to stop indication1919
t12 check document x request unlicensedt12 check document x request unlicensed3737
7177177575
4444t19 determine report y to stop indicationt19 determine report y to stop indication1919
1919t14 determine document x request unlicensedt14 determine document x request unlicensed3636t07-2 draft intern advice aspect 2t07-2 draft intern advice aspect 2
1515confirmation of receiptconfirmation of receipt
195195
955955
t15 print document x request unlicensedt15 print document x request unlicensed3636
t20 print report y to stop indicationt06 determine necessity of stop advicet10 determine necessity to stop indication
1011
t07-5 draft intern advice aspect 516t04 determine confirmation of receipt
42
t02 check confirmation of receipt65
t07-1 draft intern advice aspect 131115
121t16 report reasons to hold request18
t11 create document x request unlicensed33
t05 print and send confirmation of receipt82
157817
1034
153978
t03 adjust confirmation of receipt3726t17 check report y to stop indication19
t12 check document x request unlicensed37
71775
44t19 determine report y to stop indication19
19t14 determine document x request unlicensed36t07-2 draft intern advice aspect 2
15confirmation of receipt
195
955
t15 print document x request unlicensed36
t20 print report y to stop indicationt06 determine necessity of stop advicet10 determine necessity to stop indication
1011
t07-5 draft intern advice aspect 516t04 determine confirmation of receipt
42
t02 check confirmation of receipt65
t07-1 draft intern advice aspect 131115
121t16 report reasons to hold request18
t11 create document x request unlicensed33
t05 print and send confirmation of receipt82
157817
1034
153978
t03 adjust confirmation of receipt3726t17 check report y to stop indication19
t12 check document x request unlicensed37
71775
44t19 determine report y to stop indication19
19t14 determine document x request unlicensed36t07-2 draft intern advice aspect 2
15confirmation of receipt
195
955
t15 print document x request unlicensed36organizational model view
process model viewglobal conformance
local diagnostics
member contribution1.000
fitness0.036
precision0.069
f1-score
group 3
case
typect.internet
activity
typet04 determine confirmation of 
receipt
time
typett.6 (saturday)
0.007
relative 
focus0.385
relative 
stake0.333
coverage6
members128
capabilities1434
originated
events
26
executions
(total)10
executions
(by the group)8
groups
(with candidates)
resource20 70%
resource03 30%
figure 8: local diagnostics example: detecting non-conformance on \group 3" and its capable execution mode (\ct.internet", \t04 determine
conrmation of receipt", \tt.6") of the selected organizational model. note that the activity types of execution modes are projected onto a
corresponding process model discovered as a directly-follows graph where the most frequent edges are shown.
31organizational model view
process model viewglobal conformance
local diagnostics
member contribution1.000
fitness0.036
precision0.069
f1-score
group 3
case
typect.internet
activity
typet06 determine necessity of stop 
advice
time
typett.4 (thursday)
0.008
relative 
focus0.038
relative 
stake0.500
coverage6
members128
capabilities1434
originated
events
286
executions
(total)11
executions
(by the group)9
groups
(with candidates)
resource03 46%
resource18 36% t20 print report y to stop indicationt20 print report y to stop indicationt06 determine necessity of stop advicet06 determine necessity of stop advicet10 determine necessity to stop indicationt10 determine necessity to stop indication
10111011
t07-5 draft intern advice aspect 5t07-5 draft intern advice aspect 51616t04 determine confirmation of receiptt04 determine confirmation of receipt
4242
t02 check confirmation of receiptt02 check confirmation of receipt6565
t07-1 draft intern advice aspect 1t07-1 draft intern advice aspect 13131115115
121121t16 report reasons to hold requestt16 report reasons to hold request1818
t11 create document x request unlicensedt11 create document x request unlicensed3333
t05 print and send confirmation of receiptt05 print and send confirmation of receipt8282
151578781717
10341034
153153978978
t03 adjust confirmation of receiptt03 adjust confirmation of receipt37372626t17 check report y to stop indicationt17 check report y to stop indication1919
t12 check document x request unlicensedt12 check document x request unlicensed3737
7177177575
4444t19 determine report y to stop indicationt19 determine report y to stop indication1919
1919t14 determine document x request unlicensedt14 determine document x request unlicensed3636t07-2 draft intern advice aspect 2t07-2 draft intern advice aspect 2
1515confirmation of receiptconfirmation of receipt
195195
955955
t15 print document x request unlicensedt15 print document x request unlicensed3636
t20 print report y to stop indicationt06 determine necessity of stop advicet10 determine necessity to stop indication
1011
t07-5 draft intern advice aspect 516t04 determine confirmation of receipt
42
t02 check confirmation of receipt65
t07-1 draft intern advice aspect 131115
121t16 report reasons to hold request18
t11 create document x request unlicensed33
t05 print and send confirmation of receipt82
157817
1034
153978
t03 adjust confirmation of receipt3726t17 check report y to stop indication19
t12 check document x request unlicensed37
71775
44t19 determine report y to stop indication19
19t14 determine document x request unlicensed36t07-2 draft intern advice aspect 2
15confirmation of receipt
195
955
t15 print document x request unlicensed36
t20 print report y to stop indicationt06 determine necessity of stop advicet10 determine necessity to stop indication
1011
t07-5 draft intern advice aspect 516t04 determine confirmation of receipt
42
t02 check confirmation of receipt65
t07-1 draft intern advice aspect 131115
121t16 report reasons to hold request18
t11 create document x request unlicensed33
t05 print and send confirmation of receipt82
157817
1034
153978
t03 adjust confirmation of receipt3726t17 check report y to stop indication19
t12 check document x request unlicensed37
71775
44t19 determine report y to stop indication19
19t14 determine document x request unlicensed36t07-2 draft intern advice aspect 2
15confirmation of receipt
195
955
t15 print document x request unlicensed36
resource20 18%
figure 9: local diagnostics example: detecting non-conformance on \group 3" and its capable execution mode (\ct.internet", \t06 determine
necessity of stop advice", \tt.4") of the selected organizational model. note that the activity types of execution modes are projected onto a
corresponding process model discovered as a directly-follows graph where the most frequent edges are shown.
32organizational model view
process model viewglobal conformance
local diagnostics
member contribution1.000
fitness0.036
precision0.069
f1-score
group 3
case
typect.internet
activity
typet10 determine necessity to stop 
indication
time
typett.4 (thursday)
0.008
relative 
focus0.044
relative 
stake0.667
coverage6
members128
capabilities1434
originated
events
272
executions
(total)12
executions
(by the group)9
groups
(with candidates)
resource03 42%
resource18 33% t20 print report y to stop indicationt20 print report y to stop indicationt06 determine necessity of stop advicet06 determine necessity of stop advicet10 determine necessity to stop indicationt10 determine necessity to stop indication
10111011
t07-5 draft intern advice aspect 5t07-5 draft intern advice aspect 51616t04 determine confirmation of receiptt04 determine confirmation of receipt
4242
t02 check confirmation of receiptt02 check confirmation of receipt6565
t07-1 draft intern advice aspect 1t07-1 draft intern advice aspect 13131115115
121121t16 report reasons to hold requestt16 report reasons to hold request1818
t11 create document x request unlicensedt11 create document x request unlicensed3333
t05 print and send confirmation of receiptt05 print and send confirmation of receipt8282
151578781717
10341034
153153978978
t03 adjust confirmation of receiptt03 adjust confirmation of receipt37372626t17 check report y to stop indicationt17 check report y to stop indication1919
t12 check document x request unlicensedt12 check document x request unlicensed3737
7177177575
4444t19 determine report y to stop indicationt19 determine report y to stop indication1919
1919t14 determine document x request unlicensedt14 determine document x request unlicensed3636t07-2 draft intern advice aspect 2t07-2 draft intern advice aspect 2
1515confirmation of receiptconfirmation of receipt
195195
955955
t15 print document x request unlicensedt15 print document x request unlicensed3636
t20 print report y to stop indicationt06 determine necessity of stop advicet10 determine necessity to stop indication
1011
t07-5 draft intern advice aspect 516t04 determine confirmation of receipt
42
t02 check confirmation of receipt65
t07-1 draft intern advice aspect 131115
121t16 report reasons to hold request18
t11 create document x request unlicensed33
t05 print and send confirmation of receipt82
157817
1034
153978
t03 adjust confirmation of receipt3726t17 check report y to stop indication19
t12 check document x request unlicensed37
71775
44t19 determine report y to stop indication19
19t14 determine document x request unlicensed36t07-2 draft intern advice aspect 2
15confirmation of receipt
195
955
t15 print document x request unlicensed36
t20 print report y to stop indicationt06 determine necessity of stop advicet10 determine necessity to stop indication
1011
t07-5 draft intern advice aspect 516t04 determine confirmation of receipt
42
t02 check confirmation of receipt65
t07-1 draft intern advice aspect 131115
121t16 report reasons to hold request18
t11 create document x request unlicensed33
t05 print and send confirmation of receipt82
157817
1034
153978
t03 adjust confirmation of receipt3726t17 check report y to stop indication19
t12 check document x request unlicensed37
71775
44t19 determine report y to stop indication19
19t14 determine document x request unlicensed36t07-2 draft intern advice aspect 2
15confirmation of receipt
195
955
t15 print document x request unlicensed36
resource20 17%
resource21 8%
figure 10: local diagnostics example: detecting non-conformance on \group 3" and its capable execution mode (\ct.internet", \t10 determine
necessity of stop indication", \tt.4") of the selected organizational model. note that the activity types of execution modes are projected onto a
corresponding process model discovered as a directly-follows graph where the most frequent edges are shown.
337. conclusion
this paper contributes to organizational model mining, a subeld of process
mining, by proposing a framework based on a novel denition of organizational
models in the context of business processes. such an organizational model de-
scribes the linkage from human resources via resource groups to the activities,
case types, and time periods of a business process. compared to the state-of-
the-art, the presented denition of organizational models covers not only the
structural (group membership) but also the behavioral (group capabilities) as-
pects of resource grouping, bridging the analysis of human resources and their
organizational structure with process analytics. another novelty of the reported
work lies in the proposal of conformance checking concepts built around the de-
ned organizational models, which enables one to evaluate a model against event
log data in terms of both measuring the degree (by global conformance check-
ing) and examining the reasons (through local diagnostics) for commonalities
or discrepancies between the two. this distinguishes the current work from the
literature as it provides a rigorous means to analyze organizational models with
respect to event logs, which not only satises but can also extend beyond the
purpose of assessing the eectiveness of a discovery method.
we have demonstrated the feasibility of the framework by presenting a model
discovery approach and conducting experiments on real-life event logs to eval-
uate the discovered models. one may notice from the approach how some of
the previous work on organizational model mining can be incorporated into the
current framework. on the other hand, the reported experimental results and
ndings have showcased part of the many potential applications of the proposed
conformance utilities, including comparative analysis of model discovery meth-
ods, and deviation analysis on organizational models with respect to the actual
behavior observed in event logs.
our organizational model mining framework opens up many interesting ques-
tions to be explored in future work. all three standard types of process mining
can be addressed for organizational models within the framework. for instance,
(1) developing more eective methods in order to discover organization models
from event logs with more satisfying conformance, (2) extending the current
set of conformance checking measures to consider dimensions beyond model t-
ness and precision, and (3) repairing organizational models according to local
diagnostic outcomes.
acknowledgments
the reported research is part of a phd project supported by an australian
government research training program (rtp) scholarship. we thank the
alexander von humboldt (avh) stiftung for supporting our research. this
work is also supported by the national natural science foundation of china
(nsfc) under grants no. 61972427 and u1911205.
34references
[1] r. l. daft, j. murphy, h. willmott, organization theory and design, cen-
gage learning emea, 2010.
[2] h. reijers, s. l. mansar, best practices in business process redesign: an
overview and qualitative evaluation of successful redesign heuristics, omega
33 (4) (2005) 283 { 306.
[3] w. m. p. van der aalst, process mining: data science in action (2nd
edition), springer, berlin, heidelberg, 2016.
[4] m. song, w. m. p. van der aalst, towards comprehensive support for
organizational mining, decision support systems 46 (1) (2008) 300 { 317.
[5] j. yang, c. ouyang, m. pan, y. yu, a. h. m. ter hofstede, finding the
\liberos": discover organizational models with overlaps, in: m. weske,
m. montali, i. weber, j. vom brocke (eds.), business process management,
springer international publishing, cham, 2018, pp. 339{355.
[6] w. m. p. van der aalst, m. song, mining social networks: uncovering in-
teraction patterns in business processes, in: j. desel, b. pernici, m. weske
(eds.), proceedings of the 2nd international conference on business pro-
cess management (bpm 2004), springer, 2004, pp. 244{260.
[7] w. m. p. van der aalst, h. a. reijers, m. song, discovering social networks
from event logs, computer supported cooperative work (cscw) 14 (6)
(2005) 549{593.
[8] r. liu, s. agarwal, r. r. sindhgatta, j. lee, accelerating collaboration
in task assignment using a socially enhanced resource model, in: business
process management, springer, 2013, pp. 251{258.
[9] l. t. ly, s. rinderle, p. dadam, m. reichert, mining sta assignment
rules from event-based data, in: c. j. bussler, a. haller (eds.), business
process management workshops (bpm 2005), springer, 2005, pp. 177{190.
[10] s. rinderle-ma, w. m. p. van der aalst, life-cycle support for sta assign-
ment rules in process-aware information systems, technical report 213,
tu eindhoven (2007).
[11] z. huang, x. lu, h. duan, mining association rules to support resource
allocation in business process management, expert systems with applica-
tions 38 (8) (2011) 9483{9490. doi:10.1016/j.eswa.2011.01.146 .
url http://dx.doi.org/10.1016/j.eswa.2011.01.146
[12] s. sch onig, c. cabanillas, s. jablonski, j. mendling, a framework for e-
ciently mining the organisational perspective of business processes, decision
support systems 89 (2016) 87 { 97.
35[13] s. sch onig, c. cabanillas, c. di ciccio, s. jablonski, j. mendling, mining
team compositions for collaborative work in business processes, software
& systems modeling (2016) 1{19.
[14] j. nakatumba, w. m. p. van der aalst, analyzing resource behavior using
process mining, in: international conference on business process manage-
ment, springer, 2009, pp. 69{80.
[15] a. pika, m. leyer, m. t. wynn, c. j. fidge, a. h. m. ter hofstede,
w. m. p. van der aalst, mining resource proles from event logs, acm
trans. manage. inf. syst. 8 (1) (2017) 1:1{1:30.
[16] z. huang, x. lu, h. duan, resource behavior measure and application
in business process management, expert systems with applications 39 (7)
(2012) 6458{6468.
[17] s. suriadi, m. t. wynn, j. xu, w. m. p. van der aalst, a. h. m. ter
hofstede, discovering work prioritisation patterns from event logs, decision
support systems 100 (2017) 77{92.
[18] t. jin, j. wang, l. wen, organizational modeling from event logs, in: in-
ternational conference on grid and cooperative computing (gcc), 2007,
pp. 670{675.
[19] a. baumgrass, deriving current state rbac models from event logs, in:
proceedings of the 6th nternational conference on availability, reliability
and security (ares 2011), 2011, pp. 667{672.
[20] w. zhao, q. lin, y. shi, x. fang, mining the role-oriented process models
based on genetic algorithm, in: y. tan, y. shi, z. ji (eds.), proceedings
of the 3rd international conference on advances in swarm intelligence
(icsi 2012), springer, 2012, pp. 398{405.
[21] a. burattin, a. sperduti, m. veluscek, business models enhancement
through discovery of roles, in: ieee symposium on computational in-
telligence and data mining (cidm), 2013, pp. 103{110.
[22] j. ye, z. li, k. yi, a. abdulrahman, mining resource community and
resource role network from event logs, ieee access 6 (2018) 77685{77694.
[23] z. ni, s. wang, h. li, mining organizational structure from workow logs,
in: proceeding of the international conference on e-education, entertain-
ment and e-management (iceeem 2011), 2011, pp. 222{225.
[24] a. appice, towards mining the organizational structure of a dynamic event
scenario, journal of intelligent information systems 50 (1) (2018) 165{193.
[25] m. li, l. liu, l. yin, y. zhu, a process mining based approach to knowl-
edge maintenance, information systems frontiers 13 (3) (2011) 371{380.
36[26] c. hanachi, w. gaaloul, r. mondi, performative-based mining of work-
ow organizational structures, in: c. huemer, p. lops (eds.), proceedings
of the 13th international conference on e-commerce and web technologies
(ec-web 2012), springer, 2012, pp. 63{75.
[27] r. sellami, w. gaaloul, s. moalla, an ontology for workow organi-
zational model mining, in: proceedings of the 21st ieee international
workshop on enabling technologies: infrastructure for collaborative en-
terprises (wetice 2012), 2012, pp. 199{204.
[28] l. bouzguenda, m. abdelka, an agent-based approach for organizational
structures and interaction protocols mining in workow, social network
analysis and mining 5 (1) (2015) 10:1{10:22.
[29] w. m. p. van der aalst, , t. weijters, l. maruster, workow mining: dis-
covering process models from event logs, ieee transactions on knowledge
and data engineering 16 (9) (2004) 1128{1142.
[30] w. m. p. van der aalst, process cubes: slicing, dicing, rolling up and
drilling down event data for process mining, in: m. song, m. t. wynn,
j. liu (eds.), asia pacic business process management, springer inter-
national publishing, cham, 2013, pp. 1{22.
[31] m. dumas, m. l. rosa, j. mendling, h. a. reijers, fundamentals of busi-
ness process management, 2nd edition, springer publishing company, in-
corporated, 2018.
[32] d. r. ferreira, c. alves, discovering user communities in large event logs,
in: international conference on business process management, 2011, pp.
123{134.
[33] j. han, j. pei, m. kamber, data mining: concepts and techniques, elsevier,
2011.
[34] m. e. j. newman, m. girvan, finding and evaluating community structure
in networks, phys. rev. e 69 (2004) 026113.
[35] r. p. j. c. bose, w. m. p. van der aalst, context aware trace clustering:
towards improving process mining results, in: proceedings of the 2009
siam international conference on data mining, society for industrial and
applied mathematics, 2009, pp. 401{412.
[36] j. buijs, flexible evolutionary algorithms for mining structured process
models, ph.d. thesis, department of mathematics and computer science
(2014).
[37] j. buijs, receipt phase of an environmental permit application process
(`wabo'), coselog project (2014).
url https://data.4tu.nl/repository/uuid:
a07386a5-7be3-4367-9535-70bc9e77dbe6
37[38] van dongen, b.f. (boudewijn), bpi challenge 2017 (2017).
url https://data.4tu.nl/repository/uuid:
5f3067df-f10b-45da-b98b-86ae4c7a310b
[39] ieee, ieee standard for extensible event stream (xes) for achieving
interoperability in event logs and event streams, tech. rep., ieee std
1849-2016 (nov 2016).
38