handling concept drift in process mining
r.p. jagadeesh chandra bose1;2, wil m.p. van der aalst1, indr_ e zliobait_ e1,
and mykola pechenizkiy1
1department of mathematics and computer science, university of technology,
eindhoven, the netherlands
2philips healthcare, veenpluis 5{6, best, the netherlands
fj.c.b.rantham.prabhakara,w.m.p.v.d.aalst,m.pechenizkiy g@tue.nl,
zliobaite@gmail.com
abstract. operational processes need to change to adapt to changing
circumstances, e.g., new legislation, extreme variations in supply and de-
mand, seasonal eects, etc. while the topic of exibility is well-researched
in the bpm domain, contemporary process mining approaches assume
the process to be in steady state. when discovering a process model
from event logs, it is assumed that the process at the beginning of the
recorded period is the same as the process at the end of the recorded pe-
riod. obviously, this is often not the case due to the phenomenon known
asconcept drift . while cases are being handled, the process itself may be
changing. this paper presents an approach to analyze such second-order
dynamics . the approach has been implemented in prom3and evaluated
by analyzing an evolving process.
keywords: process mining, concept drift, exibility, change patterns
1 introduction
in order to retain their competitive advantage in today's dynamic marketplace,
it is increasingly necessary for enterprises to streamline their processes so as to
reduce costs and to improve performance. moreover, today's customers expect
organizations to be exible and adapt to changing circumstances. new legisla-
tion is also forcing organizations to change their processes. it is clear that the
economic success of an organization is highly dependent on its ability to react
to changes in its operating environment. therefore, exibility and change have
been studied in-depth in the context of business process management (bpm).
for example, process-aware information systems have been extended to be able
to exibly adapt to changes in the process. state-of-the-art workow manage-
ment (wfm) and bpm systems provide exibility. moreover, in processes not
driven by wfm/bpm systems there is even more exibility as processes are
controlled by people.
although exibility and change have been studied in-depth in the context of
wfm and bpm systems, existing process mining techniques assume processes
3prom is an extensible framework that provides a comprehensive set of
tools/plugins for the discovery and analysis of process models from event logs. see
http://www.processmining.org for more information and to download prom.to be in steady state . starting point for process mining is an event log contain-
ing a sequence of business events recorded by one or more information systems.
based on such an event log, processes can be discovered. today's process dis-
covery techniques are able to extract meaningful process models from event logs
not containing any explicit process information. using prom, we have analyzed
processes in more than 100 organizations. these practical experiences show that
it is very unrealistic to assume that the process being studied is in steady state:
while analyzing the process, changes can take place. for example, governmen-
tal and insurance organizations reduce the fraction of cases being checked when
there is too much work in the pipeline. in case of a disaster, hospitals and banks
change their operating procedures etc. such changes are indirectly reected in
the event log. moreover, analyzing such changes is of the utmost importance
when supporting or improving operational processes.
in the data mining and machine learning communities, such second-order
dynamics are referred to as concept drift , and has been studied in both super-
vised and unsupervised settings. concept drift has been shown to be important
in many applications and several successful stories have been reported in the lit-
erature [1{3]. however, existing work tends to focus on simple structures such as
changing variables rather than changes to complex artifacts such as process mod-
els describing concurrency, choices, loops, cancelation, etc. in handling concept
drifts in process mining, the following three main problems can be identied:
1.change (point) detection: the rst and most fundamental problem is to
detect concept drift in processes, i.e., detect that a process change has taken
place. if so, the next step is to identify the time periods at which changes
have taken place.
2.change localization and characterization: once a point of change has been
identied, the next step is to characterize the nature of change, and identify
the region(s) of change (localization) in a process. uncovering the nature
of change is a challenging problem that involves both the identication of
change perspective (for example, control-ow, data, resource, sudden, grad-
ual etc.) and the exact change in itself.
3.unravel process evolution: having identied, localized and characterized the
changes, it is necessary to put all of these in perspective. there is a need
for techniques/tools that exploit and relate these discoveries. unraveling the
evolution of a process should result in the discovery of the change process
(describing the second order dynamics).
in this paper, we focus on the rst two problems. we propose features and
techniques to detect changes (drifts), change points, and change localization
in event logs from a control-ow perspective. the techniques proposed in this
paper show signicant promise in handling concept drifts. we further provide
an outlook on some of the topics in concept drift and believe that this niche
area, with its broad scope and relevance, evokes lots of interest in the research
community.
the remainder of this paper is structured as follows. related work is pre-
sented in section 2. section 3 describes the various aspects and nature of change.
section 4 introduces various features and techniques for detecting drifts in event
logs. section 5 describes the eectiveness of the features and techniques proposedin this paper in discovering change points and localization of changes through
a case study. in section 6, we project an outlook on some of the open research
questions and directions in this area. the paper ends with some conclusions in
section 7.
2 related work
over the last two decades many researchers have been working on process ex-
ibility, e.g., making workow systems adaptive. in [4, 5] collections of typical
change patterns are described. in [6, 7] extensive taxonomies of the various exi-
bility approaches and mechanisms are provided. ploesser et al. [8] have classied
business process changes into three broad categories viz., sudden, anticipatory
and evolutionary. this classication is used in this paper, but now in the context
of event logs.
despite that many publications on exibility, most process mining techniques
assume a steady state process. a notable exception is the approach by g unther
et al. [9]. this approach uses process mining to provide an aggregated overview
of all changes happened so far. however, this approach assumes that change
logs are available, i.e., modications of the workow model are recorded. at this
point in time very few information systems provide change logs. therefore, this
paper focuses on concept drift in process mining assuming only an event log as
input. concept drift refers to changes in the target variable(s)/concept induced
by contextual shifts over time [10]. while the topic is well-studied in various
branches of the data mining and machine learning community, the problem of
concept drift has not been studied in the process mining community. while
experiences from data mining and machine learning can be used to investigate
concept drift in process mining, existing techniques cannot be used due to the
complexity of process models and the nature of process change.
3 aspects and nature of change in business processes
three important perspectives in the context of business processes are the control-
ow, data and resource perspective. one or more of these perspectives may be
subjected to a change.
{control-ow/behavioral perspective: this class of changes deals with the
behavioral and structural changes in a process model. just like the design
patterns in software engineering, there exist change patterns capturing the
common control-ow changes [4]. control-ow changes can be classied into
operations such as insertion, deletion, substitution and reordering of process
fragments. for example, an organization which used to collect the fee after
the processing and acceptance of an application can now change their process
to enforce the payment of fee before the processing of an application. here
thereordering change pattern had been applied on the payment and applica-
tion processing process fragments. as another example, with the addition of
new product oerings, a choice construct is inserted into the product devel-
opment process of an organization. in the context of pais, various control-
ow change patterns have been proposed in [4, 5]. most of these control-owchange patterns are applicable to traditional information/workow systems
as well.
sometimes, the control-ow structure of a process model can remain intact
but the behavioral aspects of a model could have been changed. for exam-
ple, consider an insurance agency that classies claims as \high" or \low"
depending on the amount claimed. an insurance claim of e1000 which would
have been classied as high last year is categorized as a low insurance claim
this year due to the organization's decision to increase the claim limit. the
structure of the process remains intact but the routing of cases changes.
{data perspective: this class of changes refer to the changes in the require-
ment, usage, and generation of data in a process. tasks may produce or
require information/data. an example of change in a data perspective is
enabling the execution of a task without the requirement of an otherwise
needed data element d.
{resource perspective: this class deals with the changes in resources, their
roles, and organizational structure, and their inuence on the execution of
a process. for example, there could have been a change pertaining to who
executes an activity in what roles in a process. as another example, certain
execution paths in a process could be enabled (disabled) upon the availabil-
ity (non-availability) of resources. furthermore, resources tend to work in
a particular manner and this bias may change over time. for example, a
resource can have a bias of executing a set of parallel activities in a specic
sequential order. such biases could be more prominent when a limited num-
ber of resources are available; the addition of new resources can remove this
bias.
based on the duration for which a change is active, one can classify changes into
momentary and permanent. momentary changes are short-lived and aect only
a very few cases while permanent changes are persistent and stay for a while
[6]. in this paper, we consider only permanent changes. changes are perceived
to induce a drift in the concept (process behavior). we identify four classes of
drifts as depicted in fig. 1 based on how they manifest.
{sudden drift: this corresponds to a substitution of an existing process m1
with a new process m2as depicted in fig. 1(a). m1ceases to exist from
the moment of substitution. in other words, all cases (process instances)
from the instant of substitution emanate from m2. this class of drifts are
typically seen in scenarios such as emergency response planning. as an ex-
ample, airlines and airports changing their security processes due to a new
regulation.
{recurring drift: this corresponds to the scenario where a set of processes
reappear after some time (substituted back and forth) as depicted in fig. 1(b).
it is quite natural to see such a phenomenon with processes having a seasonal
inuence. for example, a travel agency might deploy a dierent process to
attract customers during christmas period. the recurrence of processes may
be periodic or non-periodic. an example of a non-periodic recurrence is a
deployment of a process subject to market conditions. the point of deploy-
ment and duration of deployment are both dependent on external factors
(here, the market conditions).{gradual drift: this refers to the scenario as depicted in fig. 1(c) where
a current process m1is replaced with a new process m2. unlike the sud-
den drift, here both processes coexist for some time with m1discontinued
gradually. for example, a supply chain organization might introduce a new
delivery process. however, this process is applicable only for orders taken
henceforth. all previous orders still have to follow the older delivery process.
{incremental drift: this refers to the scenario where a substitution of pro-
cessm1withmnis done via smaller incremental changes as depicted in
fig. 1(d). this class of drifts is more pronounced in organizations adopting
agile business process management methodology.
m1m2
tm1m2
tm1m2
tm1m2m3:mn
t....
(a) (b) (c) (d)
fig. 1. dierent types of drifts. (a) sudden drift (b) recurring drift (c) gradual drift
and (d) incremental drift. x-axis indicate time and y-axis indicate process variants.
shaded rectangles depict process instances.
4 approaches to detecting drifts in event logs
we propose approaches to detect potential control-ow changes in a process
manifested as sudden drifts over a period of time by analyzing its event log.
detecting drifts in data and resource perspectives and in the contexts of gradual,
recurring and incremental drifts is beyond the scope of this paper.
4.1 causal footprints
event logs are characterized by the relationships between activities. dependen-
cies between activities in an event log can be captured and expressed using
thefollows (orprecedes ) relationship. for any pair of activities, aand b2,
one can determine whether they exhibit either always ,never , orsometimes fol-
lows/precedes relationship. if bfollows ain all the traces in an event log, then
we say that balways follows a; ifbfollows aonly in some subset of the traces
or in none of the traces, then we say that bsometimes follows a, and bnever
follows arespectively. consider an event log l=facaebfh;ahijebd;aeghijkg
containing three traces dened over =fa,b,c,d,e,f,g,h,i,j,kg. the fol-
lowing relations hold in l:ealways follows a,enever follows b, and bsometimes
follows a. the variants of precedes relation can be dened on similar lines. the
follows/precedes relationship is rich enough to reveal many control ow changes
in a process. in the next section, we exploit this relationship and dene various
features for change detection.4.2 features capturing the manifestation of activity relationships
we distinguish between two classes of features (i) global features and (ii) local
features. global features are dened over an event log while local features can
be dened at a trace level. based on the follows (precedes) relation, we propose
two global features viz., relation type count and relation entropy, and two
local features viz., window count and j-measure. these features are dened as
follows:
{relation type count (rc): the relation type count with respect to follows
(precedes) relation is a function frc:!n3
0dened over the set of
activities.frcof an activity, b2with respect to follows (precedes) relation
over an event log lis a triplehca;cs;cniwhereca;cs;andcnare the number
of activities in that always, sometimes, and never follow (precede) binl
respectively. for the event log lmentioned above, frc(a) =h2;9;0isince
eand halways follows awhile all other activities in nfe;hgsometimes
follows a.frc(i) =h1;4;6isince only jalways follows i;b,d,e, and k
sometimes follows iwhile a,c,f,g,handinever follows i.
for an event log containing jjactivities, this results in a feature vector
of dimension 3jj(if either follows or precedes relation is considered) or
23jj(if both follows and precedes relation are considered).
{relation entropy (re): the relation entropy with respect to follows (pre-
cedes) relation is a function fre:!r+dened over the set of ac-
tivities.freof an activity, b2with respect to follows (precedes) re-
lation is the entropy of the relation type count metric. in other words,
fre(b) = palogpa pslogps pnlogpnwherepa=ca=jj;ps=cs=jj;
andpn=cn=jj.
for the above example event log l,fre(a) = 0:68 (corresponding to frc(a) =
h2;9;0i) andfre(i) = 1:32 (corresponding to frc(i) =h1;4;6i). for an
event log containing jjactivities, this results in a feature vector of dimen-
sionjjor 2jjdepending on whether either or both of follows/precedes
relation is considered.
{window count (wc): the window count with respect to follows (precedes)
relation is a function fwc:!n0dened over the set of activity pairs.
given a trace tand a window of size l, letslbe the set of all subsequences
t(i;i+l 1), such that t(i) =aand there exists a jsuch thati<j <i +l
andt(j) = b. the window count of the relation bfollows ais dened as
the number of sequences of length lin which bfollows a. in other words,
fwc(a;b) =jslj.
for the above example event log l, using a window of size l= 4,fwc(a;b) =
1 for trace acaebfh and 0 for traces ahijebd andaeghijk .
{j-measure: smyth and goodman [11] have proposed a metric called j-
measure based on [12] to quantify the information content (goodness) of
a rule. we adopt this metric as a feature to characterize the signicance of
relationship between activities. the basis lies in the fact that one can con-
sider the relation bfollows aas a rule: \if activity aoccurs, then activity
bwill probably occur". the j-measure with respect to follows (precedes)
relation is a function fj:!r+dened over the set of activity pairs.
letp(a) andp(b) denote the probability of occurrence of activities aandb
respectively in a trace t. letpl(afb) denote the probability that bfollowsawithin a window of size l. then the j-measure is dened as fj(a;b) =
p(a)cel(afb) where ce l(afb) denotes the cross-entropy of aandb(bfol-
lows awithin a window of size l) and is dened as
cel(afb) =pl(afb) logpl(afb)
p(b)
+ (1 pl(afb)) log1 pl(afb)
1 p(b)
thej-measure of bfollows afor trace acaebfh using a window of size l= 4
isfj(a;b) = 0:147.
though local features are dened at a trace level, it is easy to lift them to the
level of an entire event log.
4.3 statistical hypothesis tests to detect drifts
one can consider an event log las a time series of traces (traces ordered on
their arrival time). fig. 2 depicts such a perspective on an event log along with
change points. an event log can be split into sub-logs of straces each. we can
consider either overlapping or non-overlapping windows when creating such sub-
logs. fig. 2 depicts the scenario where two subsequent sub-logs do not overlap.
in this case, we have k=dn
sesub-logs for ntraces. one can estimate the
feature values for each trace separately (local features) or cumulatively over a
subset of traces (local and global features) and generate a dataset dened by a
matrix/vector of feature values over a sub-log/trace. for example, the relation
count feature type will generate a dataset dof sizek3jjwhen either the
follows/precedes relation counts of all activities are considered over l. instead,
if the follows/precedes relation count of an individual activity is considered in
isolation, it generates a dataset of size k3 forl. thej-measure generates a
scalar value for each trace (sub-log) when an activity pair is considered thereby
generating a vector of size n1 ork1 (depending on whether it is measured
over traces or sub-logs) over l. if all activity pairs are considered, then a dataset
of sizenjj2orkjj2is generated.
t1t2: : :tsts+1: : : t2s : : : : : : : : : : : : : : : tnl1 l2: : : : : : lkchange
points
s
fig. 2. an event log and change points
we believe that there should be a characteristic dierence in the manifesta-
tion of feature values in the traces (sub-logs) before and after the change points
with the dierence being more pronounced at the boundaries. the goal of con-
cept drift in process mining is then to detect the change points and the natureof changes given an event log. we propose the use of statistical hypothesis test-
ing to discover these change points. hypothesis testing is a procedure in which
ahypothesis is evaluated on a sample data. one can distinguish between two
classes of hypothesis tests (i) tests on a single population (single-sample tests)
and (ii) tests on two populations (two-sample tests). another classication of
hypothesis tests is concerned with the dimensionality of each data element in
a sample. tests dealing with scalar data elements are called as univariate tests
while those dealing with vector data elements are called as multi-variate tests.
for our problem, two-sample univariate and multi-variate tests are appropriate .
the datasetdof feature values can be considered as a time series as depicted
in fig. 3. each di2d corresponds to a feature value for a trace (or sub-log)
and can be a scalar or a vector. the basic idea is to consider a series of suc-
cessive populations of values (of size w) and investigate if there is a signicant
dierence between the two populations . the premise is that dierences are ex-
pected to be perceived at change points provided appropriate characteristics
of the change are captured as features. a moving window of size wis used
to generate the populations. fig. 3 depicts a scenario where two populations
p1=hd1;d2;:::;dwiandp2=hdw+1;dw+2;:::;d2wiof sizeware considered.
in the next iteration, the populations correspond to p1=hd2;d3;:::;dw+1i
andp2=hdw+2;dw+3;:::;d2w+1i. given a dataset of mvalues, the number of
population pairs will be m 2w+ 1.
d1d2: : : : : : dwdw+1dw+2: : :d2wd2w+1 : : : : : : dmiteration 1 p1 p2iteration 2
fig. 3. dataset of feature values considered as a time series for hypothesis tests. p1
andp2are two populations of size w
we will use the univariate two sample kolmogorov-smirnov test ( kstest) and
mann-whitney u test ( mw test) as hypothesis tests for univariate data, and
the two sample hotellingt2test for multivariate data. the kstest evaluates
the hypothesis \do the two independent samples (populations p1andp2) rep-
resent two dierent cumulative frequency distributions?" while the mw test
evaluates the hypothesis \do the two independent samples have dierent dis-
tributions with respect to the rank-ordering of the values?". the multi-variate
hotellingt2test is a generalization of the t-test and evaluates the hypothesis
\do the two samples have the same mean pattern?". all of these tests yield a
signicance probability assessing the validity of the hypothesis on the samples.
we refer the reader to [13] for a classic introduction to various hypothesis tests.
5 case study and discussion
we illustrate the concepts presented in this paper with an example process. the
process corresponds to the handling of health insurance claims in a travel agency.upon registration of a claim, a general questionnaire is sent to the claimant. in
parallel, a registered claim is classied into a high or low claim. for low claims,
two independent tasks, viz., check insurance and check medical history need
to be executed. for high claims, three tasks need to be executed viz., check
insurance, check medical history, and contact doctor/hospital for verication. if
one of the checks shows that the claim is not valid, then the claim is rejected;
otherwise, it is accepted. an insurance grant and acceptance decision letter is
prepared in cases where a claim is accepted while a rejection decision letter is
created for rejected claims. in both cases, a notication is sent to the claimant.
three modes of notication are supported viz., by email, by telephone (fax) and
by postal mail. the case should be archived upon notifying the claimant. this
can be done with or without the response for the questionnaire. however, the
decision of ignoring the questionnaire can only be made after a notication is
sent. the case is closed upon completion of archiving task.
fig. 4 depicts ve variants of this process represented in yawl [14] notation.
the dashed rectangles indicate regions where a change has been done in the pro-
cess model with respect to its previous variant. the changes can have various
reasons. for example, in fig. 4(a), the dierent checks for high insurance claims
are modeled using a parallel construct. however, a claim could be rejected if
any one of the checks fail. in such cases, the time and resources spent on other
checks go waste. to optimize this process, the agency can decide to enforce an
order on these checks and proceed on checks only if the previous check results
are positive. in other words, the process is modied with a knockout strategy
adopted for high insurance checks as depicted in fig. 4(b). as another exam-
ple, the or-construct pertaining to the sending of notication to claimants in
fig. 4(c) has been modied to an exclusive-or (xor) construct in fig. 4(d).
the organization could have taken a decision to reduce their workforce as a
cost-cutting measure. due to availability of limited resources, they would like to
minimize the redundancy of sending the notication through dierent modes of
communication and restrict it to only one of the modes.
let us denote these process variants as m1;m2;m3;m4andm5. we have
modeled each of these process variants in cpn tools [15] and simulated 1200
traces for each model. we created an event log lof 6000 traces by juxtaposing
each set of the 1200 traces. the event log contains 15 activities or event classes
(i.e.,jj= 15) and 58953 events. given this event log l,our rst objective is to
detect the four change points pertaining to these ve process variants as depicted
in fig. 5.
the ideas presented in this paper have been implemented as the concept drift
plugin in prom. we have considered global features (at sub-log level) and local
features (both at trace and sub-log level) for our analysis. to facilitate this,
we have split the log into 120 sub-logs using a split size of 50 traces. we have
computed the relation type count (rc) of all 15 activities thereby generating a
multi-variate vector of 45 features for each sub-log. we have applied the hotelling
t2hypothesis test on this multi-variate dataset using a moving window of size,
w= 8. for this hypothesis test, we have randomly chosen 6 of the 45 features
with a 10-fold cross validation. fig. 6a depicts the average signicance probability
of the hotelling t2test for the 10 folds on this feature set. the troughs in the
plot signify that there is a change in the distribution of the feature values ina. model, m1
b. model, m2
c. model, m3
d. model, m4
e. model, m5
fig. 4. five variants of an insurance claim process of a travel agency represented in
yawl notation. the dashed rectangles indicate the regions of change from its previous
model.1 1200 2400 3600 4800 6000m1 m2 m3 m4 m5change
points
fig. 5. event log with traces from each of the ve models juxtaposed. also indicated
are change points between models.
the log. in other words, they indicate that there is drift (change) in the concept,
which here corresponds to the process. it is interesting to see that the troughs
are observed around indices 24, 72 and 96 which are indeed the points of change
(remember that we have split the log into 120 sub-logs with the change points at
indices 24, 48, 72 and 96). the change at index 48 corresponding to the transition
fromm2tom3could not be uncovered using this feature set due to the fact
that the relation type counts would be alike for logs generated from these two
process variants.
a b
fig. 6. (a) signicance probability of hotelling t2test on relation counts (b) average
signicance probability (over all activity pairs) of ks-test on j-measure. the event
log is split into sub-logs of 50 traces each. x-axis represents the sub-log index. y-axis
represents the signicance probability of the test. troughs signify change points.
we have computed the j-measure for each sub-log and for every pair of
activities, a,bin(afb,bfollows awithin a window of size 10). the univariate
kolmogorov-smirnov test using a window size of w= 10 is applied on the j-
measure of each activity pair. fig. 6b depicts the average signicance probability
ofks-test on all activity pairs. it could be seen that signicant troughs are
formed at indices 24, 48, 72 and 96 which correspond to the actual change points.
unlike the relation type count feature, the j-measure feature is able to capture
all the four changes in the models. this can be attributed to the fact that the
j-measure uses the probability of occurrence of activities and their relations. in
m2, there could be cases where all the modes of notication are skipped (xor
construct). however in m3at least one of the modes need to be executed (or
construct). this results in a dierence in the distribution of activity probabilities
and their relationship probabilities which is elegantly captured in the j-measure.we have considered the j-measure for each trace separately instead of at
the sub-log level. each activity pair generates a vector of dimension 6000 cor-
responding to the j-measure of that activity pair in each trace. the univariate
kolmogorov-smirnov test using a window size of w= 400 is applied to the
vector corresponding to each activity pair in . fig. 7 depicts the aver-
age signicance probability of ks-test on all activity pairs. it could be seen
that signicant troughs are formed at indices 1200, 2400, 3600 and 4800. these
are indeed the points where the models have been changed. thus the features
and approach proposed in this paper are shown to have signicant promise in
accurately identifying the points of change.
fig. 7. average signicance probability (over all activity pairs) of ks-test on j-
measure estimated for each trace. x-axis represents the trace index. y-axis represents
the signicance probability of the test. troughs signify change points.
the second objective in handling concept drift is that of change localization .
in order to localize the changes (identify the regions of change), we need to con-
sider each activity pair individually or a subset of activity pairs. for example,
the change from m1tom2is localized in the region pertaining to high insur-
ance claim checks. we expect characteristic changes in features pertaining to
these activities and other activities related to these activities. for example, in
m1, the activities `high medical history check' and `contact hospital' always
follow the activity `register' whenever a claim is classied as high. in contrast,
inm2, these activities need not always follow `register' due to the fact that
both these activities are skipped if `high insurance check' fails while `contact
hospital' is skipped if `high medical history check' fails. during simulation, we
have set the probability of success of a check to 90%. we have considered the
window count (wc) feature for the activity relation `contact hospital' follows
`register' on a window size of 10 in each trace separately. fig. 8a depicts the
signicance probability of the univariate ks-test using a window size of w= 200
on this feature. it could be seen that one dominant trough is formed at index
1200 indicating that there exists a change in the region between `register' and
`contact hospital'. no subsequent changes with respect to this activity pair is
noticed which is indeed the case in the models.
as another example, we have considered the activity `prepare notication'
along with all the three `send notication' activities. there exists a change
pertaining to these activities between models m2andm3,m3andm4, anda b
fig. 8. (a) signicance probability of ks-test on wcfeature estimated for the relation,
`contact hospital' follows `register'. trough indicate change point w.r.t this feature.
(b) average signicance probability (over activity pairs) of ks-test on wc feature
estimated for the various modes of `send notication' follows `prepare notication'
relation. troughs indicate change point w.r.t these activities. x-axis represents the
trace index. y-axis represents the signicance probability of the test.
m4andm5. more specically, we have considered the window count feature on
the activity relations `send notication by phone' follows `prepare notication',
`send notication by email' follows `prepare notication' and `send notication
by post' follows `prepare notication'. fig. 8b depicts the average signicance
probability of the univariate ks-tests using a window size of w= 200 on the wc
feature of these three activity pairs. we see three dominant troughs at around
indices 2400, 3600 and 4800 signifying the changes in the models. certain false
alarms (minor troughs) can also be noticed in this plot. one means of alleviating
this is to consider only those alarms with a signicance probability less than a
threshold,. in this fashion, by considering activities (and/or activity pairs) of
interest, one can localize the regions of change. furthermore, one can also get
answers to diagnostic questions such as \ is there a change with respect to activity
ain the process at time period t"?
6 outlook
dealing with concept drifts raises a number of scientic and practical challenges.
in this section, we highlight some of these challenges.
{change-pattern specic features: in this paper, we presented very generic
features (based on follows/precedes relation). these features are neither com-
plete nor sucient to detect all classes of changes. an important direction of
research would be to dene features catering to dierent classes of changes
and investigate their eectiveness. a taxonomy/classication of change pat-
terns and the appropriate features for detecting changes with respect to those
patterns is needed. for example, if we would like to detect changes pertain-
ing to a loop construct (insertion/removal/modication of loops as changes
in process variants), tandem arrays [16] would be an appropriate feature to
consider.
{feature selection: the feature sets presented in this paper result in a large
number of features. for example, the activity relation count feature typegenerates 3jjfeatures whereas the window count and j-measure generate
jj2features (corresponding to all activity pairs). on the one hand, such high
dimensionality makes the computational complexity intractable for most real
life logs. on the other hand, changes being typically concentrated in a small
region of a process makes it unnecessary to consider all features. there is a
need for dimensionality reduction techniques that can eciently select the
most appropriate features.
{holistic approaches: in this paper, we discussed ideas on change detection
and localization in the context of sudden drifts and owing to the control-
ow perspective of a process. however, as mentioned in section 3, data
and resource perspectives are also equally important. so are the contexts of
gradual, recurring and incremental drifts. features and techniques that can
enable the detection of changes in these other perspectives need to be discov-
ered. furthermore, there could be instances where more than one perspective
(e.g., both control and resource) change simultaneously. hybrid approaches
considering all aspects of change holistically need to be developed.
{techniques for drift detection: in this paper, we explored just the hotelling
t2test to deal with multi-variate data. in addition, we have dealt with
multiple features by considering univariate hypothesis tests on each feature
separately and averaging the test results over all features. further investiga-
tion needs to be done on hypothesis tests devised naturally for multi-variate
data. also, determining an appropriate size of the window for hypothesis
tests is nontrivial; this mandates further study on understanding the inu-
ence of window size on the results. alternatives to hypothesis testing that
can uncover drifts and diagnose the changes are a welcome addition to the
repertoire of techniques for handing concept drifts in process mining.
{sample complexity: sample complexity refers to the number of traces (size
of the event log) needed to detect, localize, and characterize changes within
acceptable error bounds. this should be sensitive to the nature of changes,
their inuence and manifestation in traces, and the feature space and al-
gorithms used for detecting drifts. on a broader note, the topic of sample
complexity is relevant to all facets of process mining and is hardly addressed.
for example, it would be interesting to know the lower bound on the number
of traces required to discover a process model with a desired tness.
7 conclusions
this paper introduced the topic of concept drift in process mining, i.e., analyzing
process changes based on event logs. we proposed feature sets and techniques
to eectively detect the changes in event logs and identify the regions of change
in a process. the approach has been implemented in prom and evaluated using
synthetic data. this is a rst step in the direction of dealing with changes in
any process monitoring and analysis eorts. we considered changes only with
respect to the control-ow perspective manifested as sudden drifts. however,
there is much to be done on various other perspectives mentioned in this paper.
moreover, to further validate the approach we plan to conduct extensive case
studies based on real-life event logs.acknowledgments r.p.j.c. bose and w.m.p. van der aalst are grateful to
philips healthcare for funding the research in process mining.
references
1.zliobait_ e, i.: learning under concept drift: an overview. technical report, faculty
of mathematics and informatics, vilnius university: vilnius, lithuania (2009)
2. pechenizkiy, m., bakker, j., zliobait_ e, i., ivannikov, a., k arkk ainen, t.: online
mass flow prediction in cfb boilers with explicit detection of sudden concept
drift. sigkdd explorations 11(2) (2009) 109{116
3. tsymbal, a., pechenizkiy, m., cunningham, p., puuronen, s.: handling local
concept drift with dynamic integration of classiers: domain of antibiotic re-
sistance in nosocomial infections. in: cbms. (2006) 679{684
4. weber, b., rinderle, s., reichert, m.: change patterns and change support
features in process-aware information systems. in: proceedings of the 19th in-
ternational conference on advanced information systems engineering (caise),
springer-verlag (2007) 574{588
5. mulyar, n.: patterns for process-aware information systems: an approach based
on colored petri nets. phd thesis, university of technology, eindhoven (2009)
6. schonenberg, h., mans, r., russell, n., mulyar, n., van der aalst, w.m.p.: process
flexibility: a survey of contemporary approaches. in dietz, j., albani, a., barjis,
j., eds.: advances in enterprise engineering i. volume 10 of lecture notes in
business information processing., springer-verlag, berlin (2008) 16{30
7. regev, g., soer, p., schmidt, r.: taxonomy of flexibility in business processes.
in: proceedings of the 7th workshop on business process modelling, development
and support (bpmds), citeseer (2006)
8. ploesser, k., recker, j.c., rosemann, m.: towards a classication and lifecycle
of business process change. in: proceedings of bpmds. volume 8. (2008)
9. g unther, c.w., rinderle-ma, s., reichert, m., van der aalst, w.m.p.: using pro-
cess mining to learn from process changes in evolutionary systems. international
journal of business process integration and management 3(1) (2008) 61{78
10. widmer, g., kubat, m.: learning in the presence of concept drift and hidden
contexts. machine learning 23(1) (1996) 69{101
11. smyth, p., goodman, r.m.: rule induction using information theory. in: knowl-
edge discovery in databases, aaai press (1991) 159{176
12. blachman, n.m.: the amount of information that ygives about x. ieee
transactions on information theory it-14 (1) (1968) 27{31
13. sheskin, d.: handbook of parametric and nonparametric statistical procedures.
chapman & hall/crc (2004)
14. van der aalst, w.m.p., ter hofstede, a.h.m.: yawl: yet another workow
language. information systems 30(4) (2005) 245{275
15. vinter ratzer, a., wells, l., lassen, h.m., laursen, m., qvortrup, j.f., stissing,
m.s., westergaard, m., christensen, s., jensen, k.: cpn tools for editing, sim-
ulating, and analysing coloured petri nets. in: 24th international conference on
applications and theory of petri nets (icatpn). volume 2679 of lncs., springer
(2003) 450{462
16. bose, r.p.j.c., van der aalst, w.m.p.: abstractions in process mining: a taxon-
omy of patterns. in: proceedings of the 7th international conference on business
process management (bpm). volume 5701 of lncs., springer-verlag (2009) 159{
175