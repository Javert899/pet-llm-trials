life-cycle support for sta® assignment rules
in process-aware information systems?
stefanie rinderle-ma1;2and wil m.p. van der aalst2
1department databases and information systems,
faculty of engineering and computer sciences,
ulm university, 89069 ulm, germany.
2department of technology management,
eindhoven university of technology,
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
stefanie.rinderle@uni-ulm.de, w.m.p.v.d.aalst@tm.tue.nl
abstract. process mining has been proposed as a tool for analyzing
business processes based on events logs. today, most information sys-
tems are logging events in some log and thus provide detailed informa-
tion about the processes they are supporting. this information can be
used for two forms of process mining: conformance checking (comparing
the actual process with some a-priori model) and discovery (deriving a
model from scratch). most of the process mining tools have been focus-
ing on the control-°ow perspective and today it is possible to automat-
ically construct process models that can be used for the con¯guration
ofprocess-aware information systems (paiss). this paper provides an
overview of process mining and focuses on a neglected aspect of paiss:
sta® assignment. we propose an approach for sta® assignment mining
based on decision tree learning, i.e., based on some organizational model
and an event log we try to discover allocation rules. this is useful for
con¯guring new paiss. however, it can also be used to evaluate sta®
assignment rules in some existing pais. based on this, °aws and re-
dundancies within sta® assignment rules (e.g., security holes by o®ering
process activities to non-authorized users in exceptional cases) can be
detected and optimization strategies can be derived automatically. the
approach has been implemented in the context of the prom framework
and di®erent strategies have been evaluated using simulation. altogether,
this work contributes to a complete life-cycle support for sta® assignment
rules.
1 introduction
new trends in information technology and developments at the (e-business) mar-
ket let companies crave for automated business process support. process-aware
?we thank the eit for supporting the research stay of stefanie rinderle-ma at the
department of technology management, eindhoven university of technology, dur-
ing which this work was conducted.information systems (paiss) [25] (e.g., in the form of a work°ow management
system [4]) allow for the explicit de¯nition of the process logic, the execution and
monitoring of processes, the integration of distributed application components,
and the provision of worklists to authorized users.
1.1 problem description
despite the promising perspectives of paiss, their breakthrough with respect to
a broad application in practice has not taken place so far. one reason might be
that, in general, the discovery and the design of business processes are di±cult
tasks: it requires deep knowledge of the business process at hand (i.e., lengthy
discussions with the workers and management ar needed) and the process model-
ing language being used. in this context, process mining technology has brought
up a very promising alternative to classical process modeling approaches. based
on collecting audit trail data of already executed processes it is possible to au-
tomatically derive the process control-°ow (note that in most cases, prior to
the deployment of a pais, the processes are already there). closely monitoring
the events taking place at runtime also enables process diagnosis , i.e., detecting
°aws or discrepancies between the design constructed in the design phase and
the actual execution registered in the enactment phase (cf. figure 1). coupled
with adaptive process management technology [1, 38, 49, 60] a complete support
of the business process life-cycle becomes possible.
by developing a variety of algorithms and implementing them within the
prom framework [22], process mining has become a mature technology in the
last years, in particular with focus on control-°ow mining [11, 6]. however, fur-
ther aspects have to be speci¯ed in order to execute the processes in the sequel.
one important task is to model the related organizational structures capturing
the agents working in the associated domain, their roles and abilities as well as
the organizational units they belong to (e.g., agent 1having role role 1and
belonging to organizational unit ou1). social network mining [8, 7] constitutes
a ¯rst approach for analyzing audit trail data with respect to agents and their
relation between each other (e.g., who hands over work to whom). although this
approach enables us to gain insight into the organizational structures behind
the audit trail data, it does not provide information about how process models
and organizational models are coupled. in today's paiss this is accomplished
by de¯ning sta® assignment rules which link the process activities to elements
of the organizational structures (cf. figure 1). at runtime, the system can de-
termine which agents are authorized to work on certain activities by resolving
the sta® assignment rules over the underlying agent set. accordingly, the system
puts the activities to be processed into work lists of quali¯ed agents. based on
this mechanism the controlled execution of process activities (i.e., by authorized
agents only) is ensured.
as discussed the de¯nition of sta® assignment rules is indispensable for the
execution of business processes. similar to the discovery and de¯nition of busi-
ness processes the speci¯cation of sta® assignment rules might often be a complex
task for users. therefore the automated discovery and design of sta® assignmentou
ou_1
agent_1is  subordinated
rolespecializes specializes specializesou_2 ou_3is  subordinated process templatesbuildtime
process instancesruntimeagent_2 agent_7 agent_5 agent_6belongs to
agent_3belongs to belongs to
role_1 role_2 role_3has has has has hasprocess-aware information system
hasis  subordinatedstaff assignment rules
(life cycle):
create process 
instances
user 
worklistsorganizational model 
t1
r2: role = role_1t2
i_11
i_12r1: orgunit =  ou_2 
and  role = role_2r1: orgunit =  ou_2 
and  role = role_2
process
design
implementation/
configurationprocess
enactmentdiagnosisprocess life cycle:diagnosis
definition enactmentfig. 1. life-cycles in process-aware information systems.
rules could be of high interest in practice. in [39] the problem of mining sta®
assignment rules from audit trail data was addressed for the ¯rst time. based
on existing organizational structures and audit trail data, a decision tree based
algorithm automatically determines the sta® assignment rule for a certain activ-
ity.
analogous to process models, the speci¯cation of sta® assignment rules may
not be stable forever (i.e., deviations from the pre-de¯ned rules may occur rather
frequently). therefore a diagnosis phase is included within the life-cycle of sta®
assignment rules where discrepancies between pre-de¯ned rules and actual be-
havior of agents regarding the execution of process activities is analyzed. con-
sider, for example, figure 2 where activity xis actually performed by a subset
of agents qualifying for the pre-de¯ned sta® assignment rule for x.
however, it is not su±cient to just detect such discrepancies. the diagnosis
phase should also lead to suggestions for optimizing the sta® assignment rules in
the sequel: first of all, the pre-de¯ned sta® assignment rules may contain redun-
dant parts (i.e., the set of agents qualifying for the a®ected sta® assignment rule
does not change if the redundant part is removed). however, at runtime these re-
dundant parts are evaluated as well since the system cannot distinguish between
necessary and unnecessary parts of sta® assignment rules. this, in turn, might
lead to performance losses, in particular when resolving sta® assignment rules
for a large number of running process instances (for large hospitals, for example,audit trail
performers
of xpre-defined staff assignment
rule for activity x
staff assignment miningstaff assignment mining
mined staff assignment rule
for activity xfig. 2. deriving and evaluating sta® assignment rules
10000 process instances may be active at the same time). a second optimiza-
tion for sta® assignment rules is based on the detection of agents which have
executed activities in an exceptional manner (e.g., agents substituting others in
case of holidays or diseases). deriving speci¯cations of substitution assignments
(e.g., the examination of doctor smith is always substituted by doctor black)
would contribute to controlled handling of such exceptional situations (i.e., the
examination is intentionally o®ered to black if smith is not available and not
wrongly to nurse johnson). thirdly, similar to business processes, sta® assign-
ment rules may be speci¯ed in a sub-optimal way, or change over time. in this
case, at least, the system should be able to detect the modeling °aws and report
them to users. for all these reasons an adequate support for discovering, design-
ing, and diagnosing sta® assignment rules during their life-cycle would be very
bene¯ciary for the practical application of paiss.
1.2 contribution
in this paper we provide a framework for the discovery and design as well as for
the diagnosis and optimization of sta® assignment rules. it is based on a decision
tree based approach and a simulation which is evaluated by di®erent plug-ins of
the prom framework1. with these results a comprehensive support of the sta®
assignment life-cycle (cf. figure 1) becomes possible.
first of all, we conduct a complete simulation for an example medical treat-
ment process using cpn tools and promimport [33]. based on the simulation
data, a complete overview of existing process mining techniques is provided
ranging from control-°ow mining [11], social network mining [8, 7], and decision
mining to analysis techniques like conformance checking [50] and property check-
ing [2]. this constitutes a complete overview of existing techniques for process
1this analysis constitutes a substantial extension of the work presented in [39] where
the basic sta® assignment mining concepts have been introduced.life-cycle support. further on we provide formal de¯nitions for organizational
models and for sta® assignment rules as well as the decision tree based mining
approach presented in [39].
after introducing the fundamental de¯nitions the simulation data is evalu-
ated with respect to sta® assignment mining. for the analysis we assume pre-
de¯ned sta® assignment rules and compare them with the mining results. based
on the results, possible relations between original and mined sta® assignment
rules are formalized. in addition, we show how these relations can be used for
deriving optimization suggestions in the sequel. in the following we extend the
simulation scenario by introducing exceptional agent behavior (i.e., agent sub-
stitutions for a certain percentage of process instances). by evaluating the sim-
ulation data we show how substitution rules can be automatically speci¯ed.
altogether the presented approach provides complete life-cycle support for sta®
assignment rules and therefore contributes to the practical applicability of paiss.
the remainder of this paper is organized as follows: in section 2 we provide
an overview of the existing process mining techniques based on simulation data.
section 3 contains background information on de¯ning organizational structures
as well as on the basic sta® assignment mining approach. the evaluation frame-
work for sta® assignment rules including optimization suggestions is presented
in section 4. we discuss related work in section 5 and conclude with a summary
of the presented results and an outlook on future work in section 6.
2 process mining
this section provides an overview of process mining. using a running example,
it shows the di®erent ways to discover and check the various perspectives of a
process based on some event log.
2.1 overview
today's information systems are logging events that are stored in so-called \event
logs". for example, any user action is logged in erp systems like sap r/3,
work°ow management systems like sta®ware, and case handling systems like
flower. classical information systems have some centralized database for log-
ging such events (called transaction log or audit trail). modern service-oriented
architectures record the interactions between web services (e.g., in the form of
soap messages). moreover, today's organizations are forced to log events by
national or international regulations (cf. the sarbanes-oxley (sox) act that is
forcing organizations to audit their processes). as a result of these developments,
there is an abundance of process-related data available. the goal of process min-
ing is to use this data, i.e., enable a ¯ne grained analysis of processes based on
event logs.
figure 3 illustrates the basic idea of process mining. as indicated a wide
variety of operational process are supported by information systems that record
events. crucial for process mining is the existence of an event log showing ininformation
systemoperational
process
modelsevent
logsmodel
discovery
checkingrecords
configuresupports/
controls
process models (e.g.,
petri nets, epcs, uml
activity diagrams, etc.),
social networks,
organizational models,
decision trees, temporal
formulas, gantt charts,
etc.administrative
processes, health care
processes, web
services, auditing
process, e-learning
processes,
procurement
processes, e-
government processesworkflow management
systems, case handling
systems, erp systems,
crm systems, pdm
systems, trading
systems, hospital
information systems,
etc.
...
...<audittrailentry >
<data ><attribute  name  = "bloodvalue ">48 </attribute >
</data ><workflowmodelelement >take blood </workflowmodelelement >
<eventtype >complete </eventtype >
<timestamp >1970-01-05t19:02:00.000+01:00 </timestamp >
<originator >s4</originator >
</audittrailentry >
<audittrailentry >
<workflowmodelelement >examine </workflowmodelelement >
<eventtype >start </eventtype >
<timestamp >1970-01-05t19:05:00.000+01:00 </timestamp >
<originator >c</originator >
</audittrailentry >
<audittrailentry >
<workflowmodelelement >examine </workflowmodelelement >
<eventtype >complete </eventtype >
<timestamp >1970-01-05t19:52:00.000+01:00 </timestamp >
<originator >c</originator >
</audittrailentry >fig. 3. an overview of process mining.chronological order relevant events, e.g., events like \payment for customer or-
der xq665456 is received", \x-ray taken for patient with id 86868", or \building
permit bp085354 is granted". these events are recorded in a so-called event log .
based on such an event log two types of analysis are possible: discovery and
checking . discovery algorithms try to extract models from event logs without any
a-priori information. for example, the ®algorithm [11] is able to discover a petri
net model capturing the control-°ow of a process based on an analysis of the log.
other approaches assume some a-priori model and check whether the log and the
model ¯t together. for example, it is possible to formulate some business rule in
linear temporal logic (ltl) and then check whether the behavior recorded in
the log is consistent with this rule [2]. orthogonal to the dimension distinguishing
discovery (no a-priori model) and checking (some a-priori model is used as a ref-
erence) is the dimension \distinguishing the various perspectives of operational
processes. in this paper, we distinguish the control-°ow ,data, and organizational
perspectives . the control-°ow perspective is mainly concerned with the selection
and ordering of activities. typical languages to describe this perspective are
petri nets, event-driven process chains (epcs), uml activity diagrams, etc.
the data perspective is more concerned with the information related to activities
and cases (i.e., process instances). typical examples of models in this area are
decision trees and data models. the organizational perspective focuses on the
agents (typically people but in principle also other types of resources) executing
the activities. using these two dimensions, we can identify 2*3=6 process mining
classes: discovery/checking and control-°ow/data/organization. the ®algorithm
[11] mentioned earlier is a control-°ow discovery algorithm and ¯ts into one of
these 6 classes. although some process mining approaches cover multiple classes,
most techniques can be positioned in one of the 6 classes.
the focus of this paper is on sta® assignment mining. this ¯ts primarily in
the organizational discovery class. however, before focusing on sta® assignment
mining we provide an overview of process mining using a running example.
2.2 running example
to illustrate various classes of process mining, we use the treatment process
shown in figure 4. first of all, the patient is registered (activity registration )
by his or her name (data element patientname ) which takes approximately 15
minutes. afterwards the examination of the patient (activity examine ) and tak-
ing a blood sample (activity take blood ) can be executed in parallel. both
activities require the patient name as input data. activity take blood writes
data element bloodvalue when completed. the expected duration for activity
examine is 1 hour whereas taking blood takes approximately 15 minutes. after
taking the blood sample and examining the patient an evaluation of the blood
value takes place (activity examine ). if the blood value exceeds 50 units the
patient has to undergo a special therapy with a duration of 4 hours. other-
wise (if the blood values is equal or less 50 units) the patient participates in a
group therapy . the expected duration of the group therapy is 2 hours. if the
patient has undergone either the special or the group therapy a report is written(activity write report ) with an expected duration of 30 minutes. finally, the
rooms for the patient treatment are locked (activity lock rooms ) which takes
approximately 30 minutes.
examinelock 
roomsspecial
therapy
registrationtake
blood
write
report
parallel split
parallel join / 
xor splitevaluate
xor joinpatientnamepatientname bloodvaluebloodvalue
bloodval>50bloodval>50
expdur: 15minexpdur: 15minexpdur: 15minexpdur: 15min
expdur: 1hexpdur: 1hexpdur: 5minexpdur: 5minexpdur: 4hexpdur: 4h
expdur: 30minexpdur: 30min expdur: 30minexpdur: 30min
group
therapy
expdur: 2hexpdur: 2hbloodval
<=50bloodval
<=50
fig. 4. running example represented in adept notation (for details on this notation
see46).
now we assume that we do not know this process, i.e., we can only see events
related to the activities shown in figure 4. these are the events recorded by
the corresponding information system in some event log . a fragment of such an
event log could be:
<workflowlog xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"
...
<process id="treatment process"
description="log contains information on patients">
...
<processinstance id="567"
description="event related to patient john smith">
<audittrailentry>
<workflowmodelelement>registration</workflowmodelelement>
<eventtype >offer</eventtype>
<timestamp>2005-01-01t01:00:00.000+01:00</timestamp>
<originator></originator>
</audittrailentry>
<audittrailentry>
<workflowmodelelement>registration</workflowmodelelement>
<eventtype >start</eventtype>
<timestamp>2005-01-01t01:00:00.000+01:00</timestamp>
<originator>s7</originator>
</audittrailentry>
<audittrailentry>
<data><attribute name = "patientname">john smith </attribute>
</data>
<workflowmodelelement>registration</workflowmodelelement>
<eventtype >complete</eventtype>
<timestamp>2005-01-01t01:16:00.000+01:00</timestamp>
<originator>s7</originator>
</audittrailentry>
...
<audittrailentry>
<data>
<attribute name = "bloodvalue">34 </attribute>
</data>
<workflowmodelelement>take blood</workflowmodelelement>
<eventtype >complete</eventtype>
<timestamp>2005-01-01t01:31:00.000+01:00</timestamp>
<originator>d7</originator>
</audittrailentry>
...
</processinstance>
...
</process>
</workflowlog>
the fragment shows part of an event log stored in the so-called mxml format
[24] that is used by prom [22]. the mxml format is system-independent and
using promimport it is possible to extract logs from a wide variety of systems,
i.e., systems based on products such as sap, peoplesoft, sta®ware, flower,
websphere, etc. and tailor-made systems.
the fragment shows that an mxml log contains information about one or
more processes. per process there can be multiple process instances (i.e., cases) as
shown by the processinstance element. in this example each instance refers to
the treatment of a particular patient. within each process instance there may be
multiple audittrailentry elements each referring to a particular event. within
each audittrailentry element there can be multiple elements describing the
nature and content of the event. the workflowmodelelement element refers to
some \model object", e.g., an activity or a subprocess. note that in the mxml
fragment some of the activity names shown in figure 4 are used. the eventtype
element denotes the transactional property of an event. in the fragment we see
offer ,start , and complete as event types. mxml also supports event types
such as reassign ,withdraw ,autoskip ,manualskip ,suspend ,resume , etc.
note that this information is optional, i.e., in many logs only events of type
complete are present because only the commit of a transaction in the system is
logged. the elements timestamp ,originator , and data are also optional. the
timestamp element refers to the date and time of the event. if no timestamp is
given, it is assumed that the event occurred in the order listed. the originator
element refers to the resource (i.e., person) executing the event. using the dataelement it is possible to add arbitrary data to each event. the same element can
be used to add data to process instances and processes.
although we have a variety of real-life logs in mxml format (e.g., data of
several hospitals), we use an arti¯cially generated log in this paper. the reason
is that it allows us the explain the concepts in a clear way. real-life logs tend to
require domain knowledge and typically refer to processes which are much larger
and complex than the process shown in figure 4.
we have used cpn tools [21] to simulate the process and using promimport
converted the simulation data of 1000 patients into mxml. note that promim-
port allows for the collection and transformation of data from many systems
including cpn tools [33]. we will use this data in the remainder of this paper.
the mxml fragment just discussed is part of this larger event log.
the mxml log will be used to discuss the functionality of prom [22]. since
prom has a good coverage of the 6 classes mentioned before, it is representative
for what is possible with process mining today. moreover, the sta® assignment
miner which we present in this paper has also been implemented in prom and we
will use the same event log to show the application of sta® assignment mining.
2.3 process discovery
process discovery refers to the various techniques for control-°ow discovery.
prom currently o®ers eight plug-ins for discovering processes. these plug-ins
use di®erent \target formats", i.e., di®erent languages to represent the result of
the discovery algorithm (e.g., petri nets, epcs, heuristics nets).
figure 5 shows four process models obtained using various plug-ins for control-
°ow discovery present in prom. figure 5(a) shows the result obtained by ap-
plying the ®algorithm [11] to the log with the full transactional information,
i.e., each activity characterized by three events in the log: offer ,start , and
complete . hence, in the resulting petri-net each activity is represented by three
transitions. figure 5(b) is also generated by the ®algorithm but now by only
considering the complete events. now it is possible see that the ®algorithm is
able to discover the process depicted in figure 4 without any a-priori informa-
tion. figure 5(c) shows the result of applying the multi-phase miner [23]. this
approach ¯rst builds a model for every instance and then starts aggregating
these instance models. the native format of the multi-phase miner is the epc
language. however, the multi-phase miner can also display its results as petri
nets. in fact, in prom any petri net can be converted into an epc, yawl model,
or heuristics net and vice versa. figure 5(d) shows a heuristics net discovered by
the heuristics miner [59]. the format is also used by the genetic miner [6] and
both are able to cope with noise.
2.4 social network mining
most related to the topic of this paper is the social network miner plug-in [7, 8].
both the social network miner and the sta® assignment miner aim to discover
models related to the organization. while the sta® assignment plug-in, presentedfig. 5. based on an analysis of an event log with data on 1000 patients, various mining
plug-ins are able to discover the underlying process.later in section 3, assumes some a-priori information about the organization
(e.g., roles and organization units), the social network miner looks at the infor-
mation in the log only. the key information element in the log is the originator
element that refers to the resource (i.e., person/agent/individual/performer) ex-
ecuting the event. using (1) metrics based on (possible) causality, (2) metrics
based on joint cases, (3) metrics based on joint activities, and (4) metrics based
on special event types, the social network miner attempts to discover the social
relationships and their weight. metrics based on (possible) causality monitor for
individual cases how work moves among performers. one of the examples of such
a metric is handover of work . within a case (i.e., a process instance) there is a
handover of work from individual ito individual jif there are two subsequent
activities where the ¯rst is completed by iand the second by j. this notion
can be re¯ned in various ways as shown in [7, 8]. metrics based on joint cases
ignore causal dependencies but simply count how frequently two individuals are
performing activities for the same case. if individuals work together on cases,
they will have a stronger relation than individuals rarely working together. met-
rics based on joint activities do not consider how individuals work together on
shared cases but focus on the activities they perform. the assumption here is
that people doing similar things have stronger relations than people doing com-
pletely di®erent things. each individual has a \pro¯le" based on how frequent
they conduct speci¯c activities. there are many ways to measure the \distance"
between two pro¯les thus enabling many metrics. metrics based on special event
types consider the event type. for example, if ifrequently delegates work to j
but not vice versa it is likely that iis in a hierarchical relation with j.
based on these metrics one can determine if there is a social relationship
between to individuals, and if so, the importance/weight of this relationship is
established. this is then represented as a social network (i.e., a graph where
each node represents an individual). many notions have been de¯ned for such
networks [57, 53]. if all other individuals are in short distance to a given node
and all geodesic paths (i.e., shortest path in the graph) visit this node, clearly
the node is very central (like a spider in the web). there are di®erent metrics
for this intuitive notion of centrality . the bavelas-leavitt index of centrality is
a well-known example that is based on the geodesic paths in the graph. other
related metrics are closeness (1 divided by the sum of all geodesic distances
to a given resource) and betweenness (a ratio based on the number of geodesic
paths visiting a given node). another interesting metric is the sociometric status
which is determined by the sum of input and output relations. it is also possible
to determine cliques , i.e., groups of connected individuals with few relations to
people outside this group.
figure 6 shows a screenshot of the social network miner plug-in of prom
while analyzing the event log with data on 1000 patients. using the \handover
of work" a social network is built. the current social network miner plug-in of
prom o®ers little support for the analysis of social networks. instead it provides
exports to tools such as agna and netminer.fig. 6. based on an analysis of an event log with data on 1000 patients, the social
network miner constructs a social network that can be analyzed using dedicated sna
tools.
d8 secretary
ss staff nurses4, s7 nurse for night shifts1, s2, s3, s4, s5, s6, s7, s8, s9, s10 nursen night watchmanss lead special therapyd1 leader neurologyc head of departmentd1, d2, d3, d4, d5, d6, d7 doctorsc deputy chiefssa assistant for staff nurseagent role
fig. 7. organizational data containing agents and their assigned roles.before showing some results obtained using the social network miner plug-in
and the social network analysis tool netminer, we return to our running example.
in the mxml log the originator element refers to the person executing the
corresponding activity, e.g., in the fragment shown before some person referred to
ass7executes activity registration for process instance 567(i.e., patient john
smith). in this paper, we will refer to s7as the agent performing the activity.
figure 7 shows the role of each agent. as shown, agent s7is both a nurse and a
nurse for night shift . when we discuss the sta® assignment rules, we will see
that these roles are used for work distribution and authorization. for example,
activity take blood can only be done by agents having the role nurse or the
roledoctor , e.g., nurse s7can take blood but the head of the department head
(agent c) cannot. figure 8 shows some screenshots of netminer while analyzing
fig. 8. screenshots of netminer while analyzing the social network obtained in fig-
ure 6.
the social network obtained using prom. the screenshot on the left shows the
social network when only considering the stronger relationships. (the two nodes
in the middle are cand d1.) the screenshot on the right shows an analysis
of \centrality" using the betweenness metric (as mentioned before, this ratio is
based on the number of geodesic paths visiting a given node). this analysis
clearly shows that the head of the department (agent c) is the most central
person in the social network. as depicted, doctors d1and d4are more central
than the other doctors. doctor d1is also the leader of neurology which puts
her more into the center. doctor d4has the same role as the other doctors, but
has additional abilities. in addition to roles (as shown in figure 7) we will also
consider abilities andorganizational units . however, we will not elaborate on
this now and refer to section 3 instead.
tools such as netminer o®er many techniques to analyze the social network.
for example, based on the mxml log we can analyze the frequencies of ac-
tivities and use the hypothesis that actors with a similar \pro¯le" are close inthe social network. based on this we conduct a correspondence analysis [19] as
shown in figure 9. the screenshot on the left-hand side shows the result of cor-
respondence analysis based on all actors and all activities. in the ¯gure, boxes
represent activities and circles represent agents. closely positioned nodes (both
activities and agents) indicate a strong correspondence while distant nodes are
\more di®erent". (although the distance between both types of nodes should
not be interpreted as an absolute measure [19].) in other words, in the two-
dimensional space shown, similar nodes attract one another while dissimilar
nodes repel one another. the left-hand side of figure 9 shows that the agent n
(the night watchman) is quite di®erent from the other nodes and is only close
to activity lock rooms . this is correct, he is the only person that can execute
activity lock rooms and he is not allowed to execute any other activity. in the
other dimension, agents d1and c, and activity examine are isolated from the
rest of the nodes. again this is a correct conclusion: the head of the department
cand the leader of neurology d1are the only two that are allowed to execute
activity examine . note that correspondence analysis only analyses the actual
execution pro¯le of each actor and is not aware of any sta® assignment rules.
the screenshot on the right-hand side of figure 9 shows the result of corre-
spondence analysis after removing the activities and actors just mentioned, i.e.,
without agents n,d1andc, and activities lock rooms andexamine . again sim-
ilar actors are grouped together and actors and activities that are related are
positioned close to one another.
(a) with agents  n, d1, and  c and
activities  examine  and   lock rooms .(b) without agents  n, d1, and  c and
activities  examine  and   lock rooms .
fig. 9. using correspondence analysis to see how activities and agents ¯t together.
although figure 9 illustrates that correspondence analysis can be used to
discover sta® assignment rules, it is a rather crude mechanism that requires
careful human interpretation. hence, we will use decision trees instead (this will
be explained in section 3).2.5 decision mining
after discussing plug-ins focusing on the control-°ow and organizational perspec-
tives, we now apply a plug-in focusing on the data perspective to the running
example. this is the decision miner , i.e., a plug-in for the analysis of decision
points . note that using an discovery algorithm (e.g., the ®algorithm [11]) it is
possible to discover the control-°ow perspective of a process. in such a discov-
ered process there are decision points, e.g., in a petri net places with multiple
output arcs and in an epc (x)or-split connectors denote such decisions. the
decision miner aims to discover the data in°uencing this decision using decision
trees.
fig. 10. screenshots of the decision miner while analyzing the only decision point in
the running process.
in the running example there is only one decision, i.e., the choice between
special therapy andgroup therapy . this decision is made when completing
activity evaluate . at this point in time, data such as the patient name, blood
value, etc. are known. clearly, the name of the patient is not relevant for the
decision but the blood value is. this is discovered by the decision miner as
shown in figure 10. the two screenshots show that a decision point can be
selected and analyzed. the result is depicted as a decision tree. in this example,
the choice between special therapy andgroup therapy only depends on the
data element bloodvalue (with 50 being the split value).2.6 conformance checking
so far the focus has been on discovery, i.e., discovering a process model, a social
network, or a decision tree. to conclude this section we discuss two plug-ins that
focus on conformance rather than discovery. the ¯rst plug-in we present is the
conformance checker .
fig. 11. screenshot of the conformance checker.
to present we have created an event log containing some deviations. first of
all, for some exceptional cases we inserted a new activity lab test that follows
activity examine . moreover, it is also possible that after taking the blood (ac-
tivity take blood ), the process immediately progresses to write report (again
only for some exceptional cases). now assume that the hospital considers the ini-
tial process as shown in figure 4 to be the desirable process (i.e., the reference
model). using the conformance checker we can compare a real log with some
a-priori model. figure 11 shows the result. the screenshot shows the petri net
model of the initial process and highlights the points where the observed behav-
ior deviates from the desirable behavior. when loading the conformance checker,
a warning is given that activity lab test does not appear in the process model.
after this warning, the conformance checker \replays" the history as recorded
in the mxml log and notes the deviations related to the skipping of activities
evaluate and special/group therapy . as shown in figure 11, there were 76
cases where evaluate was supposed to be executed but instead directly write
report was executed. moreover, the conformance checker measures the ¯tness,
structural appropriateness, and behavioral appropriateness. the ¯tness of the
model is 0.98, i.e., 98 percent of the events in the log can be \explained" by the
model. see [50] for more information about these metrics.
2.7 property checking
the conformance checker assumes some a-priori process model. in some cases,
there is not a complete a-priori process model but merely a set of desirable orundesirable properties. for example, \a request should always be followed by a
response within a time period of 10 days", \under no circumstances both activ-
ities should be executed", or \two speci¯c activities should never be executed
by the same person". such properties, also referred to as business rules , can be
expressed in temporal logic [40]. the prom framework provides an ltl checker
that can check properties expressed in linear temporal logic (ltl) [2]. ltl is
a speci¯c temporal logic and we have extended this on the basis of all possible
information in mxml logs, i.e., in the ltl checker is is easy to refer to data,
timestamps, agents, etc. properties in the ltl checker can be parameterized
and re-used, e.g., the 4-eyes principle (\two speci¯c activities should never be
executed by the same person") is de¯ned once and can be re-used for any event
log and serves as a basis for derived formulas (cf. [2]).
fig. 12. screenshot of the ltl checker plug-in.
like the conformance checker the ltl checker aims at conformance rather
than discovery. therefore, we again use the event log with deviations. using the
ltl checker it is easy to ¯nd both types of deviations. figure 12 shows the
analysis of the property that each person should get therapy, i.e., at least one
of the activities group therapy and special therapy should be executed for
each patient. as figure 12 shows, there are 76 cases where this is not the case
and for patient 131 it is shown that indeed the activities group therapy and
special therapy are skipped because examine is followed by write report .
the ltl checker can also be used to ask questions related to the organiza-
tional perspective. for example, we can investigate whether the 4-eyes principle
applies to activities examine and evaluate . using the ltl checker we discov-ered that for 25 cases, both activities are executed by the same person. by again
applying the ltl checker to these 25 cases we ¯nd that d1 is the only person
violating the 4-eyes principle with respect to activities examine andevaluate .
this shows that the ltl checker is a highly generic tool also useful for inves-
tigating sta® assignment rules. however, using the ltl checker one can only
check rules that have been explicitly formulated by the user of prom. using the
staffassignmentminer presented in the next section, no a-priori model/rule is
needed (only the organizational context and the log are taken as input).
3 mining sta® assignment rules
in this section we provide the basic de¯nitions of organizational models and sta®
assignment rules (cf. section 3.1). they are necessary for introducing the sta®
assignment mining approach in section 3.2 as well as for the evaluation of the
simulation results in section 4.2.
3.1 organizational framework
in the following an (organizational) meta model is presented which is comparable
to existing rbac models (e.g., [27, 47]). it can be used for describing organi-
zational entities and the relations between them (cf. figure 13). in this paper
we restrict our considerations to the basic entity types organizational unit ,
role,ability , and agent , and to the particular relation types existing between
them (e.g., agent a1belongs to organizational unit o1, role r1specializes role
r0, etc.).
org.
unitis subordinated
agentrole
has1(0, n)
ability
has2(0, n)specializes
(0, n) (0, 1)
(0, n) (0, 1)
has3 (0, n) (0, n) (0, n)has4
ability(0, n)
(0, n)
fig. 13. organizational meta modelbased on this meta model, we formalize the notion of organizational models .
we have also developed an xml format for storing such models. since the focus
is on sta® assignment mining rather than on organizational modeling, we do not
consider the cardinalities depicted in figure 13.
de¯nition 1 (organizational model). an organizational model is a tuple
om= (agents ;roles ;abilities ;orgunits ;has1;has2;has3;has4;issubordinated ;
specializes ), where:
{agents is the set of agents (i.e., the people performing activities),
{roles is the set of roles,
{abilities is the set of abilities,
{orgunits is the set of organizational units,
{has1µagents £roles is the relation linking agents to roles,
{has2µagents £abilities is the relation linking agents to abilities,
{has3µagents £orgunits is the relation linking agents to organizational
units,
{has4µabilities £roles is the relation linking abilities to roles,
{issubordinated µorgunits £orgunits de¯nes the organizational hierarchy,
and
{specializes µroles£roles de¯nes the role hierarchy.
as part of the organizational model used in our example we have already
introduced the set of agents and their assigned roles in figure 7. additionally,
the agents may belong to organizational units (e.g., agents sc,c, and nbelong to
organizational unit hospital , cf. figure 14). the roles can be specialized (e.g.,
astaff nurse is anurse ) and the organizational units can be subordinated to
other organizational units (e.g., organizational unit administration is subordi-
nated to organizational unit hospital ) as depicted in figure 14. due to space
restrictions we omit the associations between agents and abilities. moreover, for
simplicity reasons we ignore relation has4. (this relation has only been added
to explicitly check the consistency between the roles and abilities of an agent.)
ss, ssa, s1, s2, s3, 
s4, s5, s7,  s8, s9, d4, 
d5, d6, d7therapys6, s8, s10, d2, d3 special therapyd1, d6 neurologysc, c, n hospitalssa, c, sc, n, d8 administrationagent orgunit
administration, 
special therapy, 
therapyhospitalsubordinated orgunits orgunit
staff nurse nursespecialized role role
fig. 14. organizational data containing organizational units and belonging agents,
specialization relation between roles, and subordinated organizational units.to be able to use the relations mentioned in de¯nition 1, we de¯ne the
following basic notations.
de¯nition 2 (relations and functions). letube some universe of dis-
course and rµu£usome relation. for any u2u:r(u) =fx2uj(u; x)2
rg.r¤is the transitive closure of r. let f2a!bbe a function with domain
aand range b. for any set xµa:f(x) =ff(x)jx2xg.
these notations can be applied to the relations of figure 7, e.g., has1(staff
nurse ) is the set of agents with role staff nurse .issubordinated¤is the transi-
tive closure of the organizational hierarchy. has3(hospital ) is the set of agents
in hospital. these are the agents sc,c, and n. however, the organizational unit
hospital contains other units. using has3(issubordinated¤(hospital )) we ob-
tain people that are indirectly associated to the organizational unit hospital ,
e.g., the agents in therapy . using has1(specializes¤(nurse )) we obtain people
that are indirectly associated to the role nurse , i.e., also people having role
staff nurse .
based on the organizational entities and relations described by om we can
de¯ne sta® assignment rules in order to specify the assignment of agents to
process activities. since the structuring and semantics of the sta® assignment
rules is fundamental for the (semi-)automated derivation of rule adaptations,
we consider this issue in more detail. we distinguish between elementary and
complex sta® assignment rules.
de¯nition 3 (elementary sta® assignment rule). let om be an orga-
nizational model as de¯ned in de¯nition 1. an elementary sta® assignment rule
earon om is de¯ned as follows:
ear´(ear1 ã¡ (role = r))j(ear2 ã¡ (ability = a))j
(ear3 ã¡ (orgunit = o))j(ear4 ã¡ (role+ = r))j
(ear5 ã¡ (orgunit+ = o))j(ear6 ã¡ (agent = ag)).
for each possible elementary sta® assignment rule we de¯ne the set of all agents
that qualify (we call this the valid agent set or vas for short):
{vas(om;ear1) =has1(r)is the set of agents having role r,
{vas(om;ear2) =has2(a)is the set of agents having ability a,
{vas(om;ear3) =has3(o)is the set of agents in organizational unit o,
{vas(om;ear4) =has1(specializes¤(r))is the set of agents (indirectly) hav-
ing role r, and
{vas(om;ear5) =has3(issubordinated¤(o))is the set of agents (indirectly)
in organizational unit o
{vas(om;ear6)=fagg.
in order to enable the de¯nition of more complex sta® assignment rules we
allow for the composition of existing rules (cf. de¯nition 4). for this purpose
the following operators can be used: negation, conjunction, and disjunction.
de¯nition 4 (sta® assignment rule). let om be an organizational model
(cf. de¯nition 1). a sta® assignment rule aris de¯ned recursively:
ar´earjnarjcarjdar, where{earis an elementary sta® assignment rule (cf. de¯nition 3),
{narã¡ (not (ar)) where aris a sta® assignment rule,
{carã¡ (ar1 and ar2) with ar1and ar2are sta® assignment rules, and
{darã¡ (ar1 or ar2) with ar1and ar2are sta® assignment rules.
for each possible elementary sta® assignment rule we de¯ne the set of all agents
that qualify:
{vas(om;ear)is de¯ned in de¯nition 3,
{vas(om;nar) =agents nvas(om;ar)is the set of agents not qualifying
forar,
{vas(om;car) =vas(om;ar1)\vas(om;ar2)is the set of agents qual-
ifying for ar1andar2,
{vas(om;dar) =vas(om;ar1)[vas(om;ar2)is the set of agents qual-
ifying for ar1orar2.
de¯nitions 3 and 4 de¯ne the set of agents qualifying for any sta® assignment
rule. given a sta® assignment rule ar,vas(om;ar) is the set of qualifying
agents.
for more details on the framework for de¯ning and changing organizational
models and sta® assignment rules see [47].
3.2 decision tree learning
in this section we provide background information on sta® assignment mining
based on decision tree learning as introduced in [39]. since sta® assignment
rules are supposed to identify the set of real performers of a given activity x, the
challenge is to determine combinations of properties that distinguish performers
from non-performers. thus, the problem of deriving the rules can be interpreted
as an inductive learning task from positive and negative examples.2unlike with
control-°ow mining negative examples are directly given for our problem: every
non-performer can serve as a negative example. first, we de¯ne the notion of
positive and negative examples for this learning problem.
de¯nition 5 (positive/negative examples). let a be a set of agents and
let x be the total set of activities. then performer is a classi¯cation function
which determines whether a given agent a2ahas worked on any instance of
activity x2xor not: performer :a£x! ftrue;falseg
performer (a; x) =½true if a has performed an instance of x
false otherwise
the triple (x; a;performer (a; x))represents an \example". we further distin-
guish between positive examples, i.e., (x; a; true), and negative examples, i.e.,
2note that we need to assume some notion of completeness, i.e., if an agent is able to
perform an activity, it will be observed. however, this notion of completeness seems
to be realistic and is much weaker than the notions of completeness typically used
for control-°ow mining.(x; a; false ). note that due to this de¯nition, agents performing x multiple times
will be associated with a respective number of examples. for every non-performer
a negative example can be generated.
based on the examples the objective is to derive a hypothesis h(a) which
approximates the classi¯cation function performer (a). this problem belongs to
supervised learning [34] since we have prede¯ned classes. many learning methods
can be applied to solve this problem. we have chosen to adapt decision tree
learning [18].
decision tree learning is one of the most widely-used methods of inductive
inference. it can be employed for attribute-based learning of disjunctive concepts.
this method is simple and explicitly enables graphical representations. this
constitutes an advantage when developing a user-friendly graphical interface for a
respective sta® assignment mining tool. furthermore, decision tree learning also
incorporates methods for handling noise data and continuous attribute values.
all entities of an organizational model can be used as testing attributes in
order to separate the performers from the non-performers of a given task x.
sta® assignment rules can be derived from building decision trees. starting
at the root an attribute is chosen in order to separate the example set. which
attributes are chosen and in which order is discussed in the following. this pro-
cedure is continued recursively for the child nodes until only examples from one
class (indicated by the `+' and the ¡' set are left or no attributes are left).
the `+' set represents the class of performers while the ` ¡' set represents the
class of non-performers. depending on whether they are related to an organi-
zational entity, examples (i.e., agents) are assigned to the \yes"-child-node or
\no"-child-node respectively. note that for every agent it can be determined
whether the agent is related to an organizational entity or not. from a decision
tree if-then-rules or rules in disjunctive normal form (dnf) can be easily de-
rived. the conjunction of attribute values of a path from a leaf-node with the
target class to the root represents the if-part of the if-then rule or a disjunction
element of the dnf.
however, our objective is to mine general pro¯les of performers with as few
conjunction elements as possible. finding decision trees representing minimal
rules is of np-hard complexity [44]. for guiding the search, i.e. chosing an at-
tribute, the metric information gain [45, 44] is used. the information gain met-
rics is based on entropy calculations. the formulas for entropy andinformation
gain are given below. sis an example set, aan attribute, and p+andp¡indicate
the proportion of positive and negative examples respectively. syesandsnoare
the example sets assigned to the \yes"- or the \no"-child of the node belonging
tos, respectively.
the entropy is a metrics for the homogeneity of a set. at every separation step
the attribute with the best information gain value is chosen. thus, the decision
tree algorithm tries to achieve the best split in every step.
entropy (s) =¡p+log2p+¡p¡log2p¡ (1)information gain (s; a) =entropy (s)¡jsyesj
jsjentropy (syes)¡
jsnoj
jsjentropy (sno) (2)
for further information on decision trees and metrics please refer to [45, 44,
41].
generally more than one decision tree can be derived. therefore, it is impor-
tant to o®er alternative rules to the process engineer who then evaluates them.
in order to extract more than one rule backtracking is needed. again, informa-
tion gain can be used in order to chose the suitable attributes. instead of using
only the best separating attribute the k-best attributes can be used, where kis
a con¯gurable parameter.
3.3 implementation within prom
the sta® assignment mining approach based on decision tree learning is realized
as plug-in of the prom framework (called staffassignmentminer ). when this
plug-in is started it imports an organizational model (represented as xml ¯le)
and process execution logs represented within the prom mxml audit trail for-
mat [24]. after the import users can specify certain parameters for the mining
process like the activity for which the sta® assignment rule is to be mined as
well as the number of decision trees to be generated (e.g., parameter \ kbest
attributes", cf. figure 15). the decision trees and the resulting sta® assignment
rules are visualized as depicted in figure 16. for an a-posteriori analysis, it is
possible to specify thresholds for the number of performers / non-performers in
order to prune the decision trees accordingly (cf. figure 15).
4 diagnosis and optimization of sta® assignment rules
using the staffassignmentminer plug-in of the prom framework, the "real"
sta® assignment rules (which are re°ected by the execution logs) can be mined
and compared with the sta® assignment rules de¯ned for the underlying process
afterwards. based on this comparison, possible deviations between existing and
mined sta® assignment rules can be automatically detected (we call this sta®
assignment rules diagnosis). section 4.1 illustrates the diagnosis phase based on
the simulation data for the patient treatment process (cf. figure 4).
however, the results of comparing existing and mined sta® assignment rules
have to be interpreted afterwards. the goals are 1) to either com¯rm the existing
sta® assignment rules or to come up with suggestions for improving them and
2) to learn more about the work practice of the analyzed organization (e.g., to
learn about substitution behavior among colleagues). section 4.1, ¯rst of all,
motivates the di®erent relations between existing and mined sta® assignment
rules by presenting the comparison results for the patient treatment process.fig. 15. sta® assignment plug-in for the prom framework.
then, in section 4.2, the possible syntactical relations between existing and
mined sta® assignment rules are formalized to provide a basis for an automatic
comparison. how these syntactical relations can be interpreted is presented in
section 4.3. the whole approach is ¯nally extended with respect to exceptional
agent behavior in section 4.4.
4.1 simulation-based analysis of sta® assignment mining
table 1 summarizes the original and mined sta® assignment rules for all ac-
tivities of our example treatment process (cf. figure 4). in order to be able to
compare the original and the mined sta® assignment rules we logically remove
those parts from the mined sta® assignment rules which are built by redundant
false branches in the decision tree (i.e., the valid agent set for the sta® assign-
ment rule does not change when removing the part associated with the false
branch). for example, for activity examine sta® assignment mining yields the
following rule:
sarexamine
mined ã¡((role="head of department") or
(role="leader neurology") and not (role="head of department"))) .
since the valid agent sets of rules ear1ã¡(role="head of department") and
ear2ã¡(role="leader neurology") are disjoint over the underlying organi-
zational model, rule ear3ã¡(not (role="head of department")) is redun-
dant. therefore we (logically) remove these parts from the mined sta® assignment
rules in order to provide a suitable basis for the following evaluation.in the remainder of this section we try to conclude certain relations between
original and mined sta® assignment rules which are then formalized in section
4.2. these relations build the basis for suggesting optimizations for the pre-
de¯ned sta® assignment rules in the following.
table 1. original and resulting sta® assignment rules after simulation.
activity x, original and mined sta® assignment rules sarx
original / sarx
mined
x = registration
sarregistration
originalã¡ ((role="secretary") or ((ability="edv") and (ability="english")))
sarregistration
minedã¡ ((ability="edv") and (ability="english"))
x = examine
sarexamine
original ã¡ ((role="head of department") or (role="leader neurology"))
sarexamine
mined ã¡ ((role="head of department") or (role="leader neurology"))
x = take blood
sartakeblood
original ã¡ ((role="doctor") or (role="nurse"))
sartakeblood
mined ã¡ (not (role="assistant for staff nurse")) and (not (orgunit="administration"))
x = evaluate
sarevaluate
original ã¡ ((role="doctor") or (role="nurse"))
sarevaluate
mined ã¡ (not ((role="assistant for staff nurse") and (not (orgunit="administration")))
x = special therapy
sarspecialtherapy
originalã¡ ((role="doctor") or ((role="nurse") and (orgunit="special therapy")))
sarspecialtherapy
minedã¡ ((role="doctor") or (not (role="doctor") and (orgunit="special therapy")))
x = group therapy
sargrouptherapy
originalã¡ ((role="doctor") or role=("assistant for staff nurse") or (role="staff nurse"))
sargrouptherapy
minedã¡ ((role="doctor") or (role="assistant for staff nurse") or
(not (role="doctor") and (ability="pharmaceutic knowledge") and (ability="edv")))
x = write report
sarwritereport
originalã¡ ((role="doctor") or (orgunit="therapy"))
sarwritereport
minedã¡ ((role="doctor") or (orgunit="therapy"))
x = lock rooms
sarlockrooms
original ã¡ (role="night watchman")
sarlockrooms
mined ã¡ (role="night watchman")
from table 1 we can see that for some activities the mined sta® assignment
rule exactly matches the original one (this holds for activities examine ,write
report , and lock rooms ). apparently, an exact match between original and
mined sta® assignment rule is more likely if only a small percentage of all agents
quali¯es for them (for activities examine ,write report , and lock rooms the
percentage of qualifying agents ranges from 4% and 17%).
for other activities the mined sta® assignment rules di®er from the orginal
ones. this is, for example, the case for activity registration as depicted in
figure 16. the ¯rst separating attribute is given by ability edv, the second oneby ability english . the resulting sta® assignment rule is
sarregistration
minedã¡((ability="edv") and (ability="english"))
which corresponds to the second part of the original sta® assignment rule (cf.
table 1). the other part (i.e., role="secretary" ), however, is redundant since
it does not in°uence the valid agent set. therefore it is not taken into account
by the mining algorithm, even if we select more than k= 1 best attributes for
analysis. in this case the sta® assignment mining ¯lters out redundant parts of
the sta® assignment rule and therefore re¯nes the original sta® assignment rule.
fig. 16. decision tree and sta® assignment rule for activity registration .
for the remaining activities sta® assignment mining results in so-called com-
plementary sta® assignment rules; i.e., the valid agent set for the original and for
the mined sta® assignment rules are the same. however, the mined sta® assign-
ment rules are (partially) build up by negating (elementary) sta® assignment
rules of the original rules. one example is the mined sta® assignment rule for
activity evaluate (cf. figure 17). the resulting sta® assignment rule
sarevaluate
mined ã¡ (not (role="assistant for staff nurse")) and
(not (orgunit="administration"))
excludes all agents which do not have role doctor or role nurse . this, however,
exactly corresponds to the negation of original sta® assignment rule
sarevaluate
original ã¡ ((role="nurse") or (role="doctor")) .
when analzing simulation data we observe that complementary sta® assignment
rules are derived if a high percentage of all agents quali¯es for the original sta®assignment rule (i.e., 78 ;3% for
sarevaluate
original ã¡ ((role="nurse") or (role="doctor")) ).
fig. 17. mining results for activity evaluate .
4.2 syntactical comparison of sta® assignment rules
in the previous section, di®erent relations between original and mined sta® as-
signment rules have been observed, comprising exact match, re¯nement, and
complement. in this section, we provide a formalization based on the valid agent
sets of original and mined sta® assignment rules (cf. de¯nitions 3 and 4). in
general, the following relations may occur as depicted in figure 18. first of all,
the valid agent sets may be equal for original and mined sta® assignment rule
(a). we denote this as agent match . in case (b) the mined sta® assignment rule
speci¯es a subset of the valid agent set of the original rules. since only a subset of
the agents qualifying for the original sta® assignment rule actually works on the
a®ected activity, this may indicate some kind of re¯nement (therefore we denote
this as agent re¯nement ). consequently, the mining result can be suggested as
optimization for the pre-de¯ned rule. contrary, the mined sta® assignment rules
may also specify a superset of the valid agent sets of the original sta® assignment
rules (i.e.,
vas (om, sar original )½vas (om, sar mined ), cf. figure 18(c)). this happens if
agents have exceptionally worked on the a®ected activity, for example, as substi-
tutes. this case is denoted as agent expansion . case (d) (called agent mismatchwith overlap ) constitutes a mixture of re¯nement as in case (b) and expansion
as in case (c). finally, for case (e) none of the qualifying agents has worked on
the related activity and therefore the valid agent sets of original and mined sta®
assignment rule are disjoint (therefore we denote this case as agent mismatch
without overlap ).
the interesting question is how the mining results together with the relations
between original and mined sta® assignment rules based on their valid agent sets
above can be used for optimizing the original rules.
compare valid agent sets of saroriginal åæ sarmined:
(a) vas(om, sa rorigi
vas(om’, sarnal) =
mined)(b) vas(om, sar original)
vas(sar mined)(c) vas(om, sar origi
vas(om’, sarnal)
mined)
(d) vas(om’, sar original)
vas(om, sar mined)z(e) vas(om’, sar original)
vas(om, sar mined) = 
agent mismatch 
with overlapagent matchvas(om, sa roriginal): vas(om’, sa rmined):
agent mismatch 
without overlapagent expansion agent refinement
fig. 18. possible relations between valid agent sets of original and mined sta® assign-
ment rules.
4.3 evaluation framework
in this section we interpret the mining results in case of agent match, agent
re¯nement, and agent expansion (cf. figure 18 (a), (b), and (c)). as it can be
seen from the following examples, often a pure agent set based evaluation is
too vague. we obtain, for example, an agent match for activities registration ,
examine , and evaluate . however, the interpretation of having an agent match
is di®erent for each activity. first of all, for activity registration
vas (om, sarregistration
mined ) =vas (om, sarregistration
original ) =
fss, ssa, s3, s5, s7, s10, d4, d6, d8 gholds (corresponding to the num-
ber of performers depicted in the associated decision tree, cf. figure 16). as dis-
cussed in section 4.1 the mined sta® assignment rule itself "re¯nes" the original
one. reason for this is that within the original sta® assignment rule elementary
ruleearã¡(role="secretary") is redundant since it does not provide any further
seperation information (compared to the mined sta® assignment rule). by con-
trast, for activity examine not only the agent sets are equal, also the original and
mined sta® assignment rules completely match. finally, for activity evaluate
also the valid agent sets match but the mined sta® assignment rule seems to be
a complement of the original one (cf. section 4.1). by summarizing these obser-
vations we obtain the following sub-cases and related intepretations for an agent
match between original and mined sta® assignment rules for a certain activity x:
(a) agent match (i.e., vas (om, sarx
mined )=vas (om, sarx
original )):
{arule match (i.e., sarx
mined ´sarx
original ) is on hand if all elementary sta®
assignment rules and all logical connectors between the (elementary) sta®
assignment rules contained in sarx
mined and sarx
original are equal (only the
order between the contained sta® assignment rules may di®er).
evaluation: apparently, a rule match con¯rms the original sta® assignment
rule since during the actual process executions agents only work on activi-
ties they are qualifying for according to the original sta® assignment rule.
therefore the quality of the original sta® assignment rule has been proven
by the sta® assignment mining and does not have to be adapted for further
process execution.
{arule re¯nement between sarx
mined andsarx
original is on hand if sarx
original
equals a concatenation of sarx
mined and some additional rule srin a disjunc-
tive way (i.e., sarx
original ´sarx
mined or sr3).
evaluation: sarx
mined provides the same information as the original sta® as-
signment rule does. thus the original sta® assignment rule can be replaced
by the mined sta® assignment rule. one advantage of doing so is that the
redundant parts do not longer have to be evaluated when the sta® assign-
ment rule is resolved. for a pais controlling thousands of running instances
this can be a noticeable optimization.
{in all other cases we obtain a total or partial rule complement .
evaluation: a mined sta® assignment rule which is complementary to the
original one may indicate that a high percentage of all agents quali¯es for
the original sta® assignment rule. the evaluation of this (i.e., whether the
original sta® assignment rule is maybe too unspeci¯c) has to be done by
the user. in any case, the original sta® assignment rule must not be re-
placed by the mined sta® assignment rule automatically since this might
lead to incorrect sta® assignment resolutions afterwards. assume, for exam-
ple, that the assistant for staff nurse is reassigned from organizational
unit administration to organizational unit therapy . wrongly, the assistant
would then qualify for activity evaluation in the sequel.
(b) agent re¯nement (i.e., vas (om, sarx
mined )½vas (om, sarx
original )):
evaluation: in this case only agents contained in vas (om, sarx
mined )have ac-
tually performed activity x. thus mined rule sarx
mined is more speci¯c than
3maybe some reordering of sarx
original orsarx
mined is necessary in advance.sarx
original and may therefore replace the original rule (after being checked by,
for example, the process designer).
table 2 evaluates the relations between the original and the mined sta® as-
signment rules based on the basic simulation data and the interpretation possi-
bilities presented above (note that all original and mined sta® assignment rules
match with respect to their valid agent set). furthermore, some optimization
suggestions based on the analysis results are provided.
(c) agent expansion (i.e., vas (om, sarx
original )½vas (om, sarx
mined )):
evaluation: it is possible to suggest substitution rule srbased on sta® assignment
mining if the mining result sarx
mined equals a concatenation of original rule
sarx
original and additional rule srin a disjunctive way
(i.e., sarx
mined ´sarx
original or sr ). then the valid agent set of srcomprises all
agents which are contained in the di®erence set between the valid agent sets of
mined and original sta® assignment rule
(i.e., vas (om, sr) =vas (om, sarx
mined )nvas (om, sarx
original )).
in order to illustrate the evaluation of case (c) we have to extend the basic
simulation towards exceptional agent behavior data. the respective scenarios
and the resulting substitution rules are presented in section 4.4.
for cases (d) and (e) depicted in figure 18 there are signi¯cant deviations
regarding the set of agents having worked on the analyzed activity from the
speci¯ed one. this fact is re°ected by mined sta® assignment rules strongly or
even totally di®ering from the original ones. in this case, often it is reasonable to
suggest a replacement of the original sta® assignment rules by the mined rules
(possibly after evaluation by the process designer).
4.4 mining deviations from sta® assignment rules
as already mentioned deviations from the speci¯ed sta® assignment rules usually
occur in practice, for example, if an agent is substituted by a colleague who
actually does not qualify for the associated rule (e.g., due to vacation, disease,
etc). it would be helpful if such substitution rules which have not been speci¯ed
so far but are re°ected within the logs could be detected using sta® assignment
mining. in order to analyze this question we adapt our simulation scenario as
follows:
1. for activity examine with original sta® assignment rule
sarexamine
original ã¡ ((role="head of department") or (role="leader neurology"))
we include a substitution by agent d4(i.e., by adding rule r1ã¡(agent="d4") )
for 5% of the executed instances. practical background could be that in some
cases the head of the department as well as the leader of the neurology are
busy such that one of the doctors (i.e., d4) takes over to examine the patient.
2. exceptionally, the report after therapy (activity write report with
sarwritereport
originalã¡((role="doctor") and (orgunit="therapy")) )
might be also written by the sta® nurse (i.e., we add rule
r2ã¡(role="staff nurse") for 5% of the simulated instances).table 2. evaluation of the simulation results
activity x relation between sarx
original and sarx
mined
(note that 8x: actor match between sarx
original and sarx
mined )
x = registration rule re¯nement
evaluation: sarregistration
minedre¯nes the original sta® assignment rule,
i.e., sarregistration
mined´saroriginal
minedor sr with srã¡ (role="secretary") =)
the set of sta® assignment rules can be optimized by replacing sarregistration
originalbysarregistration
mined
x = examine rule match
evaluation: sarexamine
original is not adapted since its validity is supported by the mining results
x = take blood rule complement
evaluation: mined rule sartakeblood
mined is completely complementary to sartakeblood
original
based on the underlying organizational model; sartakeblood
original must not be replaced by sartakeblood
mined
result may indicate that sartakeblood
original is too unspeci¯c and therefore should be reviewed.
x = evaluate rule complement
evaluation: mined rule sarevaluate
mined is completely complementary to sarevaluate
original
based on the underlying organizational model; sarevaluate
original must not be replaced by sarevaluate
mined
result may indicate that sartakeblood
original is too unspeci¯c and therefore should be reviewed.
x = special therapy rule complement
evaluation: mining ¯nds matching parts and partially complementary parts;
sarspecialtherapy
originalmust not be replaced by sarspecialtherapy
mined
sarspecialtherapy
originalmay contain unspeci¯c parts which might be reviewed.
x = group therapy rule complement
evaluation: mining ¯nds matching parts and partially complementary parts;
sargrouptherapy
originalmust not be replaced by sargrouptherapy
mined
sargrouptherapy
originalmay contain unspeci¯c parts which might be reviewed.
x = write report rule match
evaluation: sarwritereport
originalis not adapted since its validity is supported by the mining results
x = lock rooms rule match
evaluation: sarlockrooms
original is not adapted since its validity is supported by the mining resultsfigure 19 shows the mining results for the ¯rst scenario where activity
examine is executed by agent d4in 5% of the cases. for the best attribute
ability="latin" (followed by ability="edv" ) the mined sta® assignment rule
sarexamine
mined k=1totally di®ers from the original rule. reason is that it describes
the set of valid agents by their common properties (i.e., properties which agents
with role head of department orleader neurology have in common with
agent d4). however, this ¯rst mining result does not help in order to derive the
additional substitution part. by contrast, the other mining result for k= 3 de-
picted in figure 19 is more suitable. here the original rule is still present but
the mined rule sarexamine
mined k=3contains an additional rule
sr1ã¡ ((role="doctor") and
(ability="pharmaceutic knowledge) and (ability="edv")
and (not (role="head of department") and not (role="leader neurology")))
with:
sarexamine
mined ´sarexamine
original or sr1
the valid agent set of sr1contains agent d4and is disjoint with the valid
agent set of sarexamine
original . consequently, sr1complements the valid agent set of
sarexamine
original by substitution agent d4. therefore sr1can be used to specify a
substitution rule for sarexamine
original .
fig. 19. mining result for activity examine with 5% deviation.after mining the simulation logs for the second scenario (activity write
report ) we observe that the mined sta® assignment rule for the best attribute
sarwritereport
mined k=1contains additional rule
sr2ã¡(not (role="doctor") and
(ability="pharmaceutic knowledge") and (ability="edv"))
(cf. figure 20) with sarwritereport
mined k=1´sarwritereport
originalor sr2 .
for the valid agent set of sr2,vas (om, sr2) =fssgholds. ss, in turn, is the
only agent having role staff nurse over organizational model om(as speci¯ed
for exceptional execution of write report in our example). therefore rule sr2
can be suggested as substitution rule for original rule sarwritereport
original.
fig. 20. mining result for activity write report with 5% deviation
when comparing substitution rule sr2to the associated original substitu-
tion rule r2we observe that sr2is complementary to r2(cf. section 4.3). since
the existence and speci¯cation of r2are just assumptions of the simulation sce-
nario, it makes sense to suggest complementary substitution rules to users as
well (contrary to the evaluation suggestions presented in section 4.3 where com-
plementary rules must not replace the original ones). to prove their quality an
a-posteriori analysis based on ltl-checking can be applied (i.e., we can check
whether the agents have followed the substitution rules in exceptional cases or
not). a still open question is how to specify the substitution rules within a sta®
assignment rule by emphasizing their exceptional character. if the substitutionrule is simply connected to the original sta® assignment rule in a disjunctive way,
the resulting rule may be too unspeci¯c afterwards. therefore the de¯nition of
sta® assignment rules should be extended with respect to capture \standard"
rules as well as substitution parts. however, this topic is outside the scope of
this paper.
5 related work
in this section we discuss related work on process mining (cf. section 5.1) followed
by approaches in the ¯eld of organizational aspects in paiss (cf. section 5.2).
5.1 process mining
since the early nineties, work°ow technology has matured [29] and several text-
books have been published, e.g., [4, 25]. a wide variety of languages has been
proposed typically focusing on the control-°ow and ranging from petri nets [4,
25] to bpel [14] (cf. the work on work°ow patterns [5] where di®erent languages
are compared). many authors point out that °exibility is an important issue [12,
46, 48]. as indicated in [26] coupling °exibility and mining promises interesting
perspectives towards and intelligent user support (e.g., for discovery and de¯-
nition of changes). therefore, we have implemented a link between the change
logs in adept [46, 48] and prom [22].
this paper builds on earlier work on process mining. classically, the focus of
process mining has been on control-°ow discovery. many algorithms have been
proposed, e.g., [11, 13, 20, 35]. few people have been focusing on the mining of the
organizational perspective, except the work done in [8, 7]. here social networks
are constructed on the basis of mxml logs. similarly, little work has been done
on the data perspective. the decision miner is a notable exception [51], it can
discover the rules for decision points. when it comes to check a log with respect
to some a-priori model, the conformance checker [50] and the ltl checker [2]
are two examples. it is impossible to give a complete overview of process mining
here. therefore, we refer to a special issue of computers in industry on process
mining [10] and a survey paper [9].
process mining can also be seen in the broader context of business (process)
intelligence (bpi) and business activity monitoring (bam). in [31, 32, 52] a bpi
toolset on top of hp's process manager is described. the bpi toolset includes
a so-called \bpi process mining engine". in [42] zur muehlen describes the
pisa tool which can be used to extract performance metrics from work°ow
logs. similar diagnostics are provided by the aris process performance manager
(ppm) [36]. the latter tool is commercially available and a customized version
of ppm is the sta®ware process monitor (spm) [54] which is tailored towards
mining sta®ware logs. interestingly, process mining is also getting attention in
the domain of web services. in [30], dustdar et al. discuss the concept of web
services mining and envision various levels (web service operations, interactions,
and work°ows) and approaches. in [43] a tool named the web service navigatoris presented to visualize the execution of web services based on soap messages.
in [3] we applied the conformance checking techniques described in [50] to web
services logs.
5.2 organizational aspects
the provision of adequate access control mechanism is indispensable for any co-
operative information system. in the literature many approaches deal with cor-
responding issues (e.g., [15, 58, 61]). most of them use role-based access control
(rbac) models for de¯ning and managing user privileges [15, 27, 28] (e.g., for
ensuring the controlled access to business documents when using document man-
agement technology or for resolving the set of agents that qualify for a certain
task de¯ned by a sta® assignment rule in a work°ow management system [17, 16,
56, 61, 58]). in addition, dynamic constraints (e.g., separation of duties) [16, 56]
and the evolution of organizational structures [37, 47, 55] have been considered.
however, the mentioned approaches neither show how to obtain organizational
structures and related sta® assignment rules automatically nor how to evaluate
their quality during their life-cycle.
the theoretical background for sta® assignment mining has been presented
in [39] and is extended in several directions within this paper. first of all, the
basic concepts have been implemented as a plug-in in the context of the prom
framework and tested based on an extensive simulation study. from this, we
derived and formalized evaluation criteria for the mined sta® assignment rules
based on which the original sta® assignment rules can be optimized. furthermore
it was shown how to detect deviations from the original sta® assignment rules
and formalize them by so-called substitution rules.
6 summary and outlook
user support in de¯ning and optimizing all aspects of business processes is key
ingredient for the practical applicability of future paiss. together with our pre-
vious work on process mining, business process evolution, and dynamic process
change [9, 46, 49] the presented concepts contribute to a powerful platform en-
abling the user-friendly realization of °exible and adaptive information systems.
in this paper we have developed a framework for the complete life-cycle sup-
port for sta® assignment rules. our approach for sta® assignment mining is based
on audit trail data, knowledge about organizational structures, and a decision
tree learning method [39]. it has been implemented as a plug-in in the context
of the prom framework. based on the simulation of an example clinical process
using cpn tools and promimport, the sta® assignment mining approach has
been evaluated with respect to the quality of the pre-de¯ned sta® assignment
rules. we de¯ned and investigated the possible relations between original and
mined sta® assignment rules. in addition, it has been shown how these rela-
tions can be used to derive optimization strategies afterwards. furthermore, the
simulation example has been extended by capturing exceptional agent behavioras well. after analyzing the corresponding data using sta® assignment mining
we have shown how substitution rules can be speci¯ed. using this approach all
phases of the sta® assignment life-cycle can be supported in an adequate way.
there are many other challenging issues that can be linked to the de¯ni-
tion and evolution of sta® assignment rules. first of all, we intend to ana-
lyze exceptional agent behavior in connection with conditions imposed on the
process. assume that in the treatment process (cf. figure 4), for example, ac-
tivity special therapy is executed by the sta® nurse but only if the blood
value has exceeded 100, i.e., only for exceptional cases a speci¯c sta® assign-
ment takes place. using this information we could come to even more pre-
cise de¯nitions of sta® assignment rules. furthermore, the discovery and anal-
ysis of dependent sta® assignment rules (i.e., rules which are dynamically re-
solved during runtime) is interesting from a practical point of view. an exam-
ple for a dependent sta® assignment rule could be sardep(write report) ã¡
role=samerole(evaluate) where samerole implies that activity write report
is to be executed by an agent having the same role as the agent having executed
activity evaluate .
altogether, a seamless import of sta® assignment optimizations becomes pos-
sible when integrating sta® assignment mining with our work on the controlled
evolution of organizational models [47]. in [47] we have shown how sta® as-
signment rules are a®ected after changes of the organizational model. currently
we are working on the question how the set of valid agents is in°uenced af-
ter changing sta® assignment rules. this could be also used for directly applying
sta® assignment changes based on the mining and evaluation approach presented
in this paper within the pais.
acknowledgment: the staffassignmentminer plug-in of the prom frame-
work was implemented within a student project at the department dbis at ulm
university. we thank martin bader for the implementation work and linh thao
ly for the co-supervision of this project.
references
1. w.m.p. van der aalst and t. basten. inheritance of work°ows: an approach
to tackling problems related to change. theoretical computer science , 270(1-
2):125{203, 2002.
2. w.m.p. van der aalst, h.t. de beer, and b.f. van dongen. process mining and
veri¯cation of properties: an approach based on temporal logic. in r. meers-
man and z. tari et al., editors, on the move to meaningful internet systems
2005: coopis, doa, and odbase: otm confederated international conferences,
coopis, doa, and odbase 2005 , volume 3760 of lecture notes in computer sci-
ence, pages 130{147. springer-verlag, berlin, 2005.
3. w.m.p. van der aalst, m. dumas, c. ouyang, a. rozinat, and h.m.w. verbeek.
choreography conformance checking: an approach based on bpel and petri
nets (extended version). bpm center report bpm-05-25, bpmcenter.org, 2005.
4. w.m.p. van der aalst and k.m. van hee. work°ow management: models, methods,
and systems . mit press, cambridge, ma, 2002.5. w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. barros.
work°ow patterns. distributed and parallel databases , 14(1):5{51, 2003.
6. w.m.p. van der aalst, a.k. alves de medeiros, and a.j.m.m. weijters. genetic
process mining. in g. ciardo and p. darondeau, editors, applications and theory
of petri nets 2005 , volume 3536 of lecture notes in computer science , pages
48{69. springer-verlag, berlin, 2005.
7. w.m.p. van der aalst, h.a. reijers, and m. song. discovering social networks
from event logs. computer supported cooperative work , 14(6):549{593, 2005.
8. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in j. desel, b. pernici, and m. weske, editors,
international conference on business process management (bpm 2004) , volume
3080 of lecture notes in computer science , pages 244{260. springer-verlag, berlin,
2004.
9. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. work°ow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237{267, 2003.
10. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining , special
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
11. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
12. w.m.p. van der aalst, m. weske, and d. grä unbauer. case handling: a new
paradigm for business process support. data and knowledge engineering ,
53(2):129{162, 2005.
13. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
°ow logs. in sixth international conference on extending database technology ,
pages 469{483, 1998.
14. t. andrews, f. curbera, h. dholakia, y. goland, j. klein, f. leymann, k. liu,
d. roller, d. smith, s. thatte, i. trickovic, and s. weerawarana. business process
execution language for web services, version 1.1. standards proposal by bea
systems, international business machines corporation, and microsoft corpora-
tion, 2003.
15. e. bertino. data security. data & knowledge engineering , 25(1{2):199{216, march
1998.
16. e. bertino, e. ferrari, and v. alturi. the speci¯cation and enforcement of au-
thorization constraints in wfms. acm transactions on information and system
security , 2(1):65{104, 1999.
17. r.a. botha and j.h.p. elo®. a framework for access control in work°ow systems.
information management and computer security. , 9(3):126{133, 2001.
18. l. breslow and d. aha. simplifying decision trees: a survey. knowledge engineering
review , 12(1):1{40, 1997.
19. s. e. clausen. applied correspondence analysis: an introduction . sage publica-
tions, 1998.
20. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215{249, 1998.
21. cpn group, university of aarhus, denmark. cpn tools home page.
http://wiki.daimi.au.dk/cpntools/, 2006.22. b. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters, and
w.m.p. van der aalst. the prom framework: a new era in process mining tool
support. in g. ciardo and p. darondeau, editors, application and theory of petri
nets 2005 , volume 3536 of lecture notes in computer science , pages 444{454.
springer-verlag, berlin, 2005.
23. b.f. van dongen and w.m.p. van der aalst. multi-phase process mining: building
instance graphs. in p. atzeni, w. chu, h. lu, s. zhou, and t.w. ling, editors, in-
ternational conference on conceptual modeling (er 2004) , volume 3288 of lecture
notes in computer science , pages 362{376. springer-verlag, berlin, 2004.
24. b.f. van dongen and w.m.p. van der aalst. a meta model for process mining
data. in j. casto and e. teniente, editors, proceedings of the caise'05 workshops
(emoi-interop workshop) , volume 2, pages 309{320. feup, porto, portugal,
2005.
25. m. dumas, w.m.p. van der aalst, and a.h.m. ter hofstede. process-aware infor-
mation systems: bridging people and software through process technology . wiley
& sons, 2005.
26. s. dustdar, t. ho®mann, and w.m.p. van der aalst. mining of ad-hoc business
processes with teamlog. data and knowledge engineering , 55(2):129{158, 2005.
27. d. f. ferraiolo, d. r. kuhn, and r. chandramouli. role-based access control .
artech house, 2003.
28. d.f. ferraiolo, r. sandhu, s. gavrila, d.r. kuhn, and r. chandramouli. proposed
nist standard for role-based access control. acm transactions on information
and system security , 4(3):224{274, 2001.
29. d. georgakopoulos, m. hornick, and a. sheth. an overview of work°ow manage-
ment: from process modeling to work°ow automation infrastructure. distributed
and parallel databases , 3:119{153, 1995.
30. r. gombotz and s. dustdar. on web services mining. in m. castellanos and
t. weijters, editors, first international workshop on business process intelligence
(bpi'05) , pages 58{70, nancy, france, september 2005.
31. d. grigori, f. casati, m. castellanos, u. dayal, m. sayal, and m.c. shan. business
process intelligence. computers in industry , 53(3):321{343, 2004.
32. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,
p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors, proceedings of 27th international conference on very large data bases
(vldb'01) , pages 159{168. morgan kaufmann, 2001.
33. c.w. guenther and w.m.p. van der aalst. modeling the case handling principles
with colored petri nets. in k. jensen, editor, proceedings of the sixth workshop on
the practical use of coloured petri nets and cpn tools (cpn 2005) , volume 576
ofdaimi , pages 211{230, aarhus, denmark, october 2005. university of aarhus.
34. d. hand, h. mannila, and p. smyth. priciples of data mining . mit press, 2001.
35. j. herbst. a machine learning approach to work°ow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183{194. springer-verlag, berlin, 2000.
36. ids scheer. aris process performance manager (aris ppm): measure, ana-
lyze and optimize your business process performance (whitepaper). ids scheer,
saarbruecken, gemany, http://www.ids-scheer.com, 2002.
37. j. klarmann. a comprehensive support for changes in organizational models of
work°ow management systems. in proc. int'l conf. on information systems mod-
eling (ism'01) , hradec nad moravici, czech republic, may 2001.38. k. kochut, j. arnold, a. sheth, j. miller, e. kraemer, b. arpinar, and j. car-
doso. intelligen: a distributed work°ow system for discovering protein-protein
interactions. distributed and parallel databases , 13(1):43{72, 2003.
39. t. ly, s. rinderle, p. dadam, and m. reichert. mining sta® assignment rules
from event-based data. in m. castellanos and t. weijters, editors, first interna-
tional workshop on business process intelligence (bpi'05) , pages 177{190, nancy,
france, september 2005.
40. z. manna and a. pnueli. the temporal logic of reactive and concurrent systems:
speci¯cation . springer-verlag, new york, 1991.
41. t. mitchell. machine learning . mcgraw-hill, 1997.
42. m. zur mä uhlen and m. rosemann. work°ow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1{10. ieee computer society press, los alamitos, california, 2000.
43. w. de pauw, m. lei, e. pring, l. villard, m. arnold, and j.f. morar. web ser-
vices navigator: visualizing the execution of web services. ibm systems journal ,
44(4):821{845, 2005.
44. j. quinlan. c4.5: programs for machine learning . morgan kaufmann publishers,
1993.
45. j. quinlan. learning decision tree classi¯ers. acm computing surveys , 28(1):71{
72, 1996.
46. m. reichert and p. dadam. adept°ex: supporting dynamic changes of
work°ow without loosing control. journal of intelligent information systems ,
10(2):93{129, 1998.
47. s. rinderle and m. reichert. on the controlled evolution of access rules in cooper-
ative information systems. in r. meersman and z. tari et al., editors, on the move
to meaningful internet systems 2005: coopis, doa, and odbase: otm con-
federated international conferences, coopis, doa, and odbase 2005 , volume
3760 of lncs , pages 238{255. springer, 2005.
48. s. rinderle, m. reichert, and p. dadam. correctness criteria for dynamic
changes in work°ow systems: a survey. data and knowledge engineering ,
50(1):9{34, 2004.
49. s. rinderle, m. reichert, and p. dadam. flexible support of team processes by
adaptive work°ow systems. distributed and parallel databases , 16(1):91{116, 2004.
50. a. rozinat and w.m.p. van der aalst. conformance testing: measuring the fit
and appropriateness of event logs and process models. in c. bussler et al., editor,
bpm 2005 workshops (workshop on business process intelligence) , volume 3812
oflecture notes in computer science , pages 163{176. springer-verlag, berlin,
2006.
51. a. rozinat and w.m.p. van der aalst. decision mining in business processes.
bpm center report bpm-06-10, bpmcenter.org, 2006.
52. m. sayal, f. casati, u. dayal, and m.c. shan. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb'02) ,
pages 880{883. morgan kaufmann, 2002.
53. j. scott. social network analysis . sage, newbury park ca, 1992.
54. tibco. tibco sta®ware process monitor (spm). http://www.tibco.com, 2005.
55. w.m.p. van der aalst and s. jablonski. dealing with work°ow change: iden-
ti¯cation of issues an solutions. int'l journal of comp. systems, science and
engineering , 15(5):267{276, 2000.56. j. wainer, p. barthelmess, and a. kumar. w{rbac { a work°ow security model
incorporating controlled overriding of constraints. international journal of col-
laborative information systems , 12(4):455{485, 2003.
57. s. wasserman and k. faust. social network analysis: methods and applications .
cambridge university press, cambridge, 1994.
58. b. weber, m. reichert, w. wild, and s. rinderle. balancing °exibility and se-
curity in adaptive process management systems. in r. meersman and z. tari
et al., editors, on the move to meaningful internet systems 2005: coopis, doa,
and odbase: otm confederated international conferences, coopis, doa, and
odbase 2005 , volume 3760 of lncs . springer, 2005.
59. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering work°ow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.
60. m. weske. formal foundation and conceptual design of dynamic adaptations in
a work°ow management system. in proc. hawaii international conference on
system sciences (hicss-34) , 2001.
61. m. zur muehlen. resource modeling in work°ow applications. in proc. of the 1999
work°ow management conference (muenster) , pages 137{153, 1999.