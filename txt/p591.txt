proclets in healthcare
r.s. mansa,b,, n.c. russella, w.m.p. van der aalsta, p.j.m. bakkerb, a.j.
molemanb, m.w.m. jaspersc
adepartment of information systems, eindhoven university of technology, p.o. box 513,
nl-5600 mb, eindhoven, the netherlands
bacademic medical center, university of amsterdam, department of quality assurance
and process innovation, amsterdam, the netherlands
cdepartment of medical informatics, academic medical center, university of amsterdam,
amsterdam, the netherlands
corresponding author. information for sending proofs: email-address:r.s.mans@tue.nl,
address: eindhoven university of technology, school of industrial engineering, subdepart-
ment of information systems (is), paviljoen k0.03, de lismortel 2, p.o. box 513, 5600 mb
eindhoven, the netherlands, fax: +31 40 243 2612
email addresses: r.s.mans@tue.nl (r.s. mans), n.c.russell@tue.nl (n.c. russell),
w.m.p.v.d.aalst@tue.nl (w.m.p. van der aalst), p.j.bakker@amc.uva.nl (p.j.m. bakker),
a.j.moleman@amc.uva.nl (a.j. moleman), m.w.jaspers@amc.uva.nl (m.w.m. jaspers)
preprint submitted to journal of biomedical informatics march 5, 2010abstract
healthcare processes can be characterized as weakly-connected interacting
light-weight workows coping with dierent levels of granularity. classical work-
ow notations fall short in supporting these kind of processes. although these
notations are able to describe the life-cycle of individual cases and allow for
hierarchical decomposition, they primarily support monolithic processes. how-
ever, they are less suitable for healthcare processes. the proclets framework
is one formalism that provides a solution to this problem. based on a large
case study, describing the diagnostic process of the gynecological oncology care
process at the academic medical center (amc), we identify the limitations of
\monolithic workows". moreover, by using the same case study, we investi-
gate whether healthcare processes can be described eectively using proclets. in
this way, we provide a comparison between the proclet framework and existing
workow languages and identify research challenges.
key words: healthcare, workow execution, business process
1. introduction
in healthcare organizations, such as hospitals, many complex, non-trivial
processes are performed which are lengthy in duration. these processes are
diverse ,exible and often involve several medical disciplines in diagnosis and
treatment. for a group of patients with the same condition, a number of dierent
examinations and treatments may be required and the order in which they are
conducted can vary greatly.
for these healthcare processes, information technology oers new possibili-
ties for quality improvement [1]. however, in order to be able to provide this
support, a distinction needs to be made between two kinds of processes. first of
all,organizational processes capture the organizational knowledge which is nec-
essary to coordinate interoperating healthcare professionals and organizational
units (e.g. reporting of results or preparations for surgery) [1]. based on process
denitions, workow management systems (wfmss) are able to manage the
2ow of work in these processes such that individual workitems are done at the
right time by the proper person [2{5].
conversely, medical treatment processes capture the diagnostic and thera-
peutic procedures to be carried out for a particular patient [1]. in this context,
computer interpretable guidelines (cigs) are used which can be considered
to be frameworks for specifying these kinds of processes and for standardizing
them [6]. languages for capturing cigs facilitate clinical decision-making and
have (often complex) features for standardizing medical concepts, expressing
decision criteria and linking with electronic health records (see e.g. [7{11]).
computer-interpretable task-network models (tnms) dene a network of
tasks that unfold over time [7, 12]. most languages for modeling cigs are
tnms [7, 13]. moreover, most languages for wfmss may also be considered as
a kind of tnm [14]. however, there are important dierences. a cig language
is a tnm for a clinical care process that realizes a clinical/medical goal, for
example increasing doctor's adherence to an evidence-based medical guideline
to optimize decisions concerning disease management. these cig languages
thus contain medical knowledge and evidence, and are decision oriented. in
that way, their primary goal is to provide doctors with a patient-specic advice
concerning diagnostic and therapeutic decisions [1, 6, 15{18]. such computer-
based guideline systems have been developed for a myriad of clinical issues,
including management of heart disease [17], hypertension [18], acute myocardial
infarction [19], and mechanical ventilation of patients [20]. so, such a model
should be seen from the viewpoint of a physician dealing with a patient that
needs to be treated for a certain illness [6]. in contrast, a workow model is a
tnm for a business process that realizes a business objective, for example the
tuning of healthcare (logistic) processes with the aim with the aim of improving
the eciency and quality of the described process. so, such a model should be
seen from the viewpoint of a manager or an analyst [6]. moreover, a workow
model species all allowable process paths and all decision points. however, the
decision points themselves need to be realized using dedicated software (e.g.,
expert systems based on cigs) or medical professionals. or, in other words,
3a workow model is concerned with the logistics of work processes, not with
the contents of individual tasks. clearly, no support is provided with regard to
the selection of process paths unless routing can be done on the basis of data
elements. this is in contrast to guidelines where patient related data is used in
order to make the right clinical decision. in order to provide optimal support for
healthcare processes, we believe that eective support for both organizational
and medical treatment processes is necessary and that both areas can and should
complement each other.
in this paper, we focus on the support of organizational processes by wfmss .
wfmss have been widely and successfully applied in various industries to stream-
line process execution, lower cycle times, and to monitor task completion [21{
25]. although these advantages make the application of this kind of technology
in the healthcare domain interesting, its 'widespread' adoption and dissemina-
tion is the exception rather than the rule [1, 26, 27]. this is probably related to
the fact that contemporary wfmss have diculties dealing with the dynamic
nature of processes [28]. one of the main problems is that they require that the
complete workow is described as onemonolithic overarching workow. this
assumes that a workow process can be modeled by specifying the life-cycle of
a single case in isolation . for real-life healthcare processes this assumption can
not be made. as a result, the control-ow of several cases need to be articially
squeezed into a single model where essential parts of the control-ow are ulti-
mately hidden inside custom-made application software or are not taken into
account at all. as will be demonstrated in this paper, if a complex healthcare
process is described in this way, this results in an unreadable process denition.
this can be illustrated when considering a typical healthcare process for the
diagnosis of patients. in general for a patient this consists of multiple visits to
a hospital in order to meet with doctors and undergo diagnostic tests (e.g. a
lab test). however, there also steps in which several medical specialists meet
in order to discuss the status of patients. clearly, some tasks may operate at
the level of a single patient, whereas other tasks operate at the level of a group
of patients. so, processes may rely on information that is at dierent levels of
4aggregation . note that this is very dierent from the classical notion of hierarchy
in workows as aggregation cuts across multiple cases.
the process of diagnosing a patient typically consists of the execution of
a number of smaller processes that run in conjunction with each other. flex-
ibility in healthcare processes is needed because these small processes can be
instantiated and synchronized at any point in time. for example, at any point
in the process of diagnosing a patient, a doctor may order a lab test. however,
although these process fragments execute independently from each other, a cer-
tain \magnetic force" exists between them. such process fragments can best be
characterized as weakly-connected interacting lightweight workows .
to date, contemporary wfmss do not oer support for weakly-connected
interacting lightweight workows which can deal with information that is at
varying levels of aggregation. an interesting means of solving this issue is pro-
vided by proclets [28, 29]. proclets are a framework modeling and enacting
lightweight workow processes. together with performatives and channels it
is possible to describe how these proclets interact with each other. moreover,
the interaction between these proclets is modeled explicitly using structured
messages, called performatives, which are exchanged via channels.
proclets provide an interesting means of modeling and executing a health-
care process in wfmss, and can assist in realizing the promised benets of
applying wfmss. in this paper we investigate whether organizational health-
care processes can indeed be modeled using this technique and how this compares
to existing workow approaches . in order to do so, we take the following ap-
proach. we focus on the gynecological oncology workow as it is performed at
the academic medical center (amc) in amsterdam, a large academic hospital
in the netherlands, which is considered to be representative of other health-
care processes. the selected healthcare process describes the diagnostic process
for patients visiting the gynecological oncology outpatient clinic and is a large
process consisting of around 325 activities. in earlier work, this healthcare pro-
cess has already been modeled in full using the workow languages, yawl and
flower, and has been partially modeled using the declare and adept1 work-
5ow languages [30]. this allows us to investigate the problems existing workow
approaches face when modeling this type of process . we discuss in detail how the
healthcare process has been modeled using the yawl workow language. for
flower, adept1, and declare, we summarize the issues encountered. this
leads on to a discussion of how the same healthcare process can be modeled us-
ing proclets and how the identied issues can be addressed. it is worth noting
that the reason for implementing a hospital process in the four workow systems
mentioned above was to identify the requirements that need to be fullled by
workow systems in order to be successfully applied in a hospital environment.
these requirements have been discussed in [31].
this paper is structured as follows: section 2 introduces the proclets ap-
proach. in section 3, we introduce the gynecological oncology healthcare process
and discuss how it is modeled using yawl, flower, declare, and adept1.
in section 4, we discuss the modeling of the healthcare process using proclets
and elaborate on how the limitations, mentioned in section 3, are addressed.
related work is outlined in section 5. section 6 discusses the experiences asso-
ciated with modeling healthcare processes using proclets. finally, the paper is
concluded in section 7.
2. introduction to proclets
in this section, we discuss how proclets provide a framework for modeling
workows. the concepts of the framework have already been introduced in
[28, 29]. in this section, we give an introduction to this framework in order to
assist the reader in better understanding the proclet models that will be shown
in the remainder of this document. for complete details we refer the reader to
[28, 29]. at the end of this section, the use and operation of proclets will be
illustrated by a small healthcare example.
in figure 1, a graphical representation of the concepts, which underpin the
framework, is shown. as can be seen, there are ve main concepts each of which
will be discussed below.
61,1
1,1portnaming
service
channel
proclettask
performativefigure 1: graphical representation of the proclet framework.
the framework is centered around a proclet . there is a distinction between
a proclet class and a proclet instance. a proclet class can best be seen as a
process denition which describes which tasks need to be executed and in which
order. for a proclet class, instances can be created and destroyed. one instance
is called a proclet instance . for the denition of a proclet class, a selection can
be made between multiple graphical languages. in this paper, we use a graphical
language based on the yawl language [32]. however, other languages, such
as petri nets [33] or epcs [34], can also be used. with regard to the selection
of a graphical language, some limitations apply. first of all, proclet instances
need to have a state and they need to support the notion of a task. second, a
proclet class needs to be sound [35].
with regard to the communication and collaboration among proclets, so
called channels ,ports , and performatives are important. first of all, proclets
interact with each other via channels . a channel can be used to send a per-
formative to an individual proclet or to a group of proclets. a performative
7is a specic kind of message with several attributes which is exchanged between
one or more proclets. a performative has the following attributes:
time : the moment the performative was created/received.
channel : the medium used to exchange the performative.
sender : the identier of the proclet creating the performative.
set of receivers: the identiers of the proclets receiving the performative,
i.e. a list of recipients.
action : the type of the performative.
content : the actual information that is being exchanged.
the role of the action attribute deserves some special attention. this at-
tribute can be used to specify the illocutionary point of the performative. the
ve illocutionary points identied by searle [36] (assertive, directive, commis-
sive, declarative, expressive) can be used to specify the intent of the perfor-
mative. examples of typed performatives identied by winograd and flores
are request, oer, acknowledge, promise, decline, counter-oer, and commit-to-
commit [37] which each represents a change in the state of a conversation. in
the model no restriction is made to any single classication of performatives (i.e.
a xed set of types). it is important to use the experience and results reported
by researchers working on the language/action perspective [37] as these give an
insight into the broader requirements in this area.
of course, it is possible to add more attributes to a performative. note that
a channel may have dierent properties which aect the sending and receiving
of performatives, e.g. push/pull or synchronous/asynchronous. in order for
proclets to be able to nd each other there is a naming service which keeps
track of existing proclets. a proclet class and instances of it are dened in the
following way:
a proclet class has a unique name . in the same way, an instance of a
proclet class has an unique identier.
8a proclet class has ports . performatives are sent and received via these
ports in order for a proclet to be able to interact with other proclets. ev-
ery port, either incoming or outgoing, is connected to one task. moreover,
a port has two attributes.
first, the cardinality species the number of recipients of performatives
exchanged via the port. an denotes an arbitrary number of recipients,
+ at least one recipient, 1 precisely one recipient, and ? denotes no or just
one recipient. note that by denition an input port has cardinality 1.
second, the multiplicity species the number of performatives exchanged
via the port during the lifetime of an instance of the class. in a similar
fashion to the cardinality, an denotes that an arbitrary number of per-
formatives are exchanged, + at least one, 1 precisely one, and ? denotes
that either one or no performatives are exchanged. note that by denition
an input port has a multiplicity of 1 or ?.
a proclet instance has its own knowledge base . knowledge in the knowl-
edge base can be used to make routing decisions . this knowledge can range
from simple data to beliefs about other proclets. building a good knowl-
edge base is not a trivial task. first of all, there has to be an ontology to
characterize the intended meaning of terms and concepts. then, the scope
and knowledge acquisition process have to be identied. when dening
the knowledge base, well known notions from the medical domain can be
used. for example, notions from the open knowledge base connectivity
(okbc) knowledge model can be used [38].
here, we use a more restrictive denition of a knowledge base (unlike
the original denition in [28, 29]). each proclet instance has its own
knowledge base for storing performatives that are received and sent. parts
of the knowledge base can be public or private. the public part is identical
for all instances of the class, i.e. this part resides at the class level even
though it holds information about instances. the private part resides
exclusively at the instance level.
9*,1
1,*1,1
1,1
1,?
1,?
1,?*,1
*,1lab visit lab test
1,*order system
his
(a) two proclet classes conne cted through two channelslab visit
lab test
(b) class diagram containing 
the two proclet classes1..1
1..*requires
(c) example of a performative time channel sender receivers action content scope direction 
11:00 order 
system lab 
visit - 
john lab test – 
hgb 
john create can you 
perform a hgb 
test for john? private out order 
entry
take 
blood 
sample
receive 
result
judge 
results
everythin
g finedo tests 
again
receive 
updated 
result
send 
reportperform 
test
make 
report
finish 
lab test
perform 
test 
again
provide 
updated 
reportdoctor chemical
analyst
lab 
assistantchemical
analyst
chemical
analyst
chemical
analystlab 
assistant
lab 
assistantfigure 2: example of two proclet classes.
the knowledge base can be queried by tasks. a task may have a precondi-
tionbased on the information that can be found in the knowledge base. a
task can only re if (1) the task in the net itself is enabled, (2) each input
port contains a performative, and (3) the precondition evaluates to true.
note that for the yawl language, as can be seen in figure 2, multiple
ports can be connected to an input condition. in this case, an instance is
created on the receival of each performative.
a task connected to an output port may have a postcondition . the post-
condition species for the output ports, the number of performatives gen-
erated and their content. the postcondition may also depend upon infor-
mation that can be found in the knowledge base.
in order to illustrate the framework, we use the small healthcare-related
10example shown in figure 2(a). the example shows an organizational process
which deals with the process in which a doctor orders a selection of lab tests
for a patient. afterwards, the patient visits the lab where a blood sample is
taken. for the sample, several lab tests are performed and the nal outcomes
of the tests are reconciled in a report. there are two proclet classes. the
proclet class \lab visit" is instantiated for every patient who visits the lab for
whom a blood sample is taken. proclet class \lab test" is instantiated for every
lab test that needs to be performed on the blood sample. hence, there is an
one-to-many relationship between \lab visit" and \lab test" as shown by the
relationship requires in the class diagram in figure 2(b). note that the white
colored tasks are executed by a human resource and the grey colored tasks are
executed automatically. for the white colored tasks it is indicated which role is
required when performing the task.
for the \lab visit" proclet, rst a doctor orders a lab examination for a
patient and indicates which tests are required (\order entry" task). when a
patient visits the lab, a blood sample is taken by a lab assistant (\take blood
sample" task). upon completion of the task, a trigger for each required lab test
is initiated, so that for every lab test a single instance of the proclet class \lab
test" is created. consequently, the cardinality of the outgoing port of the \take
blood sample" is . moreover, the multiplicity is 1 which means that during
the lifetime of an instance of the class \lab visit" exactly one performative is
sent via this port. the creation performative is sent via the lab order system,
which explains why the name of the channel is \order system". the input port
connected to the input port of the \lab test" proclet class has cardinality 1 and
multiplicity 1 as an instance can only be created once. figure 2(b) shows an
example of a performative that is sent by a \lab visit" proclet to a \lab test"
proclet. from the gure, we can see that at 11 'o clock a performative is sent
by the \lab visit" proclet for patient john in order to create an instance of the
\lab test" proclet called \lab test - hgb john". more specically, an instance
of a \lab test" proclet class is created so that a hemoglobin (hgb) blood test
can be performed. the performative is stored in the private knowledge base of
11the \lab visit" proclet.
after an instance of the \lab test" proclet class has been created, a chemical
analyst performs a test on the blood sample (\perform test" task) followed by
the creation of a report which contains the result of the test (\make report").
note that the performance for a specic lab test could be, for example, based
on a link to a code from a controlled medical terminology. as a consequence
of performing the \make report" task, a performative is sent to the instance of
the initiating proclet class \lab visit". note that each instance of \lab test"
sends performatives via the hospital information system (his). the results of
the individual lab tests are received by the \receive result" task. the input
port of task \receive result" has cardinality 1 and multiplicity , indicating
that reports of multiple tests may be received. each performative received is
stored in a knowledge base. the \lab visit" proclet inspects this knowledge
base continuously to determine whether a report for each initiated lab test has
been received so that the \judge results" task can be performed. this means
that for this task a precondition has been dened which evaluates to true once
a report has been received for each lab test that was initiated.
based on the reports received, a lab assistant decides whether any of the lab
tests need to be performed again or that everything is ne (i.e. were valid results
obtained or did any exceptions occur). if the tests do not need to be done again,
the \everything ne" task is performed after which all instances of the \lab
test" proclet class are destroyed via the \finish lab test" task. in the situation
where the tests need to be done again, a performative is sent via the \do tests
again" task to the \perform test again" task to all \lab test" proclet instances
to indicate that the lab test needs to be redone. note that the cardinality of
the output port of both the \do tests again" and \everything ne" tasks is ,
i.e., in a single step all \lab test" proclets are informed whether the tests need
to be redone or not. moreover, the ports connected to the \perform test again"
task and \finish lab test" task both have cardinality 1 (i.e. one recipient)
and multiplicity ? (one performative is sent via one of the two ports). after
that a chemical analyst performs the test again, the \provide updated report"
12task is performed which sends the updated report to the \lab visit" proclet
instance where all of the results are collected via the \receive updated result"
task. finally, the doctor, who requested the lab examination, is informed via
the \send report" task after which the \lab visit" proclet instance is destroyed.
the example in figure 2 is rather simplistic and hides many details. for
example, the two proclet classes are not general enough in the sense that they
do not handle the problems that may relate to the results of tests. however,
it compactly illustrates the main features of proclets. for full details on the
formalism we refer the reader to [28, 29]. note that as the example shows
an organizational process, it does not contain any logic / data for making a
clinical decision. so, for the \order entry" and \judge results" tasks there is
respectively no guidance in the selection of lab tests and whether to do the tests
again or not. however, we foresee that cigs could provide guidance in such a
decision process.
3. limitations of monolithic workows
in this section, we identify the problems that existing monolithic workow
approaches are facing when dealing with the dynamic nature of processes. in
order to do this, we take the following approach. first, we examine the gyne-
cological oncology workow as it is performed at the academic medical center
(amc) in amsterdam which is considered to be representative of other health-
care processes. in previous work this process has been modeled in full using
two workow languages, yawl and flower [30], and has been partially mod-
eled using the declare and adept1 workow languages [30]. we discuss the
selected healthcare process in detail by elaborating on how it has been modeled
using the yawl workow language and identify the issues that arose when
doing so. for flower, adept1, and declare, we also discuss the issues that
arose when implementing the process although we do not elaborate on specic
implementation details. in doing so, we exemplify the problems existing work-
ow approaches are facing. subsequently, in section 4, we discuss how the same
13healthcare process is modeled using proclets and how the issues identied can
be addressed using our approach.
the gynecological oncology workow is a large process, consisting of over 325
activities, and is performed at the gynecological oncology outpatient department
at the amc hospital. the amc is the most prominent medical research center
in the netherlands and one of the largest hospitals in the country. the health-
care process deals with the diagnosis of patients suering from cancer once they
are referred to the amc hospital for treatment. the care process can be con-
sidered to be non-trivial and illustrative of other healthcare processes, both at
the amc and in other hospitals.
the healthcare process under consideration consists of two distinct parts.
the rst is depicted in figure 3 and shows the top page of the yawl model.
the process describes all of the steps that may be taken with a patient up to the
point where they are diagnosed. the process starts with the \referral patient
and preparations for rst visit" composite activity. this subprocess deals with
the steps that need to be taken for the rst visit of the patient to the outpatient
clinic. the next step in the process is the \visit outpatient clinic" composite
activity where the patient visits the outpatient clinic for a consultation with
a doctor. such a consultation can also be done by telephone (\consultation
by telephone" composite activity). during a visit or consultation, the patient
discusses their medical status with the doctor and it is decided whether any
further steps need to be taken, e.g., diagnostic tests.
the execution of the tests that may be needed are modeled by the \exami-
nations" multiple instance task which allows for the concurrent instantiation of
a number of dierent tests for a patient. however, for each patient there are also
other steps that may be taken. these are modeled by the \ask for gynecology
data", \ask for radiology data", and \examination under anesthetic" composite
tasks and the \ask for pathology slides" and \take tissue sample" tasks. for
example, the \ask for pathology slides" and \take tissue sample" tasks model
the situation where a pathology examination is required after which the refer-
ring hospital is requested to send their pathology slides to the amc or a tissue
14figure 3: general overview of the gynecological oncology healthcare process.
sample is taken at the amc.
looking at the overall process we see that while the patient is visiting the
outpatient clinic (shown in the top part of figure 3) it is possible for a series of
subprocesses to run concurrently (as shown in the lower part of the gure). as
the execution of these subprocesses can be complex and time consuming, there is
no guarantee that all of them will be nished before the start of the next patient
consultation, e.g. the result of a certain test might be delayed. consequently,
these subprocesses should be seen as separate inter-twined life-cycles running
15figure 4: visit of the patient to the outpatient clinic.
at dierent speeds rather than as one workow covering dierent but related
cases. however, if we want to denote that there is in fact a connection between
these related cases, we need to model them in one monolithic workow. for the
flower, declare, and adept1 workow languages, these observations also
apply. therefore, we can conclude that for existing workow approaches cases
need to be straightjacketed into a monolithic workow despite the fact that it is
more natural to view processes as inter-twined loosely-coupled object life-cycles.
in figure 4, the subprocess underlying the \visit outpatient clinic" compos-
ite task is shown which describes the visit of a patient to the outpatient clinic.
during such a consultation, the medical status of the patient is discussed and a
decision is made about the next steps to be taken (\make diagnosis" task). at
dierent stages during the process, several administrative tasks, such as handing
out brochures (task \additional information with brochures"), and producing
a patient card (task \make patient card") may be necessary. as a result of the
execution of the \make diagnosis" task, subsequent steps in the process need to
be triggered, such as further diagnostic tests or a pathology examination. these
subsequent steps are depicted in the top page of the yawl model (see figure 3).
as a consequence, they can only be enabled when the process modeled in figure
164 is already nished. it would be more natural if these kind of processes were
instantiated at the moment that it is known that they need to be created, i.e.
immediately after execution of the \make diagnosis" task. in general, for each
of the subprocesses modeled in figure 3, no direct interaction can take place
during their execution. this is due to the fact that in yawl there is no way of
modeling interactions between (sub)processes. the same observation holds for
flower, adept1, and declare as well. consequently, facilitating interactions
between (sub)processes is far from trivial. where these need to be supported,
they are typically hidden in application logic or in custom built applications or
even not taken into account at all. another option would be to model the whole
process in one diagram (so, no hierarchical decomposition) with the necessary
interactions being modeled via case data. however, this would result in a large
unreadable process model which does still not show the interactions between
(sub)processes.
note that business process notations exist which support interactions be-
tween processes. for example, the business process modeling notation (bpmn)
allows the ow of messages between two entities to be shown via the message
ow construct [39]. in general, we can conclude that as most workow languages
do not provide support for interaction between (sub)processes, it is dicult to
model interactions between processes .
in figure 5, the second part of the gynecological oncology healthcare process
is shown. this involves meetings between gynecological oncology doctors and
other medical specialists. first, the participants from the dierent medical
disciplines prepare themselves for these meetings (\prepare radiology, pathology,
and mdo meeting" composite task). during the radiology meeting (composite
task \radiology meeting"), the doctors from gynecological oncology discuss with
a radiologist the results of the radiology tests that have been performed for
various patients during last week. the same holds for the \pathology meeting"
composite task for the pathology examinations that have been performed during
the last week. finally, during the mdo meeting (\mdo meeting") the medical
status of patients is discussed and a decision is made about their nal diagnosis
17figure 5: meetings which are held on monday afternoons to discuss the medical status of
patients.
before the treatment phase is started. finally, as a result of these meetings,
several subsequent steps may need to be initiated for individual patients. these
steps are modeled at the right-hand side of figure 5. for example, for some
patients, existing tissue may need to be re-examined whereas for others, the
referring hospital may need to be asked to send their pathology material to the
amc for investigation (\ask for tissue" task).
however, most importantly, compared to the two models discussed earlier,
we are dealing with a group of patients instead of a single patient. obviously,
compared to the two previous models, we are dealing with a dierent level
ofgranularity and one instance aggregates information about several other in-
stances. due to this dierence, the workows executed for a single patient,
shown in figure 3, and the workow executed for a group of patients, shown
in figure 5, are modeled separately. consequently, the two models are com-
pletely disconnected whereas in reality (examinations for) patients need to be
registered for these meetings, which can be initiated from dierent places in
the process described in figure 3. for example, a patient can be registered
during the initial phases of the process and also during a visit to the outpatient
clinic. should these workows, operating at dierent levels of aggregation, need
to be described in a single model, a decision needs to be made about what is
18considered to be the unit of modeling. so, is the \case" a service executed for
a single patient, the illness a patient is suering from, or a group of patients
suering from a certain illness. all of these are at dierent levels of granularity.
the selection of a particular type of case at one of the aggregation levels causes
problems because the process cannot be \straightjacketed" into a single case
concept.
for the modeling of the healthcare process using the flower, adept1,
and declare workow languages, the same problem applies. we are not aware
of any workow language which is able to deal with dierent levels of granularity.
consequently, models often need to be articially attened as they are unable
to account for the mix of dierent granularities that co-exist . note that the
dierent units of modeling which are possible when modeling a workow do not
necessarily need to be aggregations of each other. proclets can be in a \parent-
child" (\one-to-many") relationship, but also in more complex relationships
like \brother-sister", \many-to-many". therefore, we use the term granularity
instead of aggregation.
furthermore, the fact that multiple patients can be registered for the afore
mentioned meetings (even from dierent points in the process) indicates that
one-to-many relationships may exist between entities in a workow. for ex-
ample, during a visit to the outpatient clinic, a patient can be registered for
discussion during an mdo meeting. this means that a one-to-many relation-
ship exists between the entity \mdo meeting" and the \visit outpatient clinic"
entity. however, as models are unable to account for dierent granularities
that co-exist in a workow this also means that it is impossible to capture one-
to-many and many-to-many relationships that may exist between entities in a
workow. although, it is impossible to capture the fact that one-to-many and
many-to-many relationships exist between entities in a workow, such relation-
ships are common as can be seen in any data/object model .
we have discussed problems that we are faced with when modeling the gy-
necological oncology healthcare process using the yawl, flower, adept1,
and declare workow languages. in summary, we may conclude that existing
19workow approaches currently exhibit the following problems:
issue 1: models need to be articially attened and are unable to account
for the mix of granularities that co-exist in real-life processes.
issue 2: cases need to be straightjacketed into a monolithic workow even
though it is more natural to see processes as inter-twined loosely-coupled
object life-cycles.
issue 3: it is impossible to capture the fact that one-to-many andmany-
to-many relationships exist between entities in a workow, yet such rela-
tionships are common as can be seen in any data/object model.
issue 4: it is dicult to model interactions between processes, i.e., inter-
action is not a rst-class citizen in most process notations.
proclets, as introduced earlier, have been developed to specically address
these problems.
4. realization of the gynecological oncology workow using pro-
clets
in this section, we elaborate on how the gynecological oncology healthcare
process is modeled using proclets. first, in section 4.1, we discuss which entities
can be identied in the workow and how they relate to each other. in section
4.2, a selection of proclet classes will be discussed, illustrating how the entire
healthcare process is modeled using proclets. however, most importantly, it will
be explained how the issues identied in section 3 are addressed using proclets.
4.1. overview
the class diagram in figure 6 gives an overview of the entities that exist
within the healthcare process and the relationships between them. the dark-
grey colored classes correspond to concrete proclet classes. the inheritance
relations show which proclet classes have common features, i.e., the light-grey
20input: additional 
information , mdm , tests
output: visit, additional 
information , mdms , 
testsinput: tests
output: visit, 
mdms , tests, 
pathology
visit
input: request
output: result input: request, 
conclusion
output: preliminary 
result, final result
additional 
information
input: request, 
additional 
information,
output: conclusion, 
additional info , 
mdms , final result     input: request, test, 
additional information , 
output: conclusion, 
tests , additional 
information ,
mdms , final result
multi-disciplinary 
meeting 
(mdm)      input: request, 
mdms , tests
output: mdms , tests , 
additional information , 
final resultinput: request
output: preliminary 
result, 
final resultinput: request
output: final resultinput: request, 
conclusion
output: preliminary 
resultinput: request
output: final result
external: tests
testvisit outpatient 
clinicexamination under 
anesthetic
obtain gynecology 
dataradiology revision pathology
radiology meeting mdo meeting pathology meetingpre-assessment lab ecgctmrix-ray
follows_80..*follows_1
preceding_11..1
0..*
0..*1..1
follows_2
preceding_20..*
0..*0..1
0..1
testsfollows_3
preceding_30..* 0..*
0..10..1follows_5preceding_50..*
0..*
0..1
0..1follows_4
preceding_4 0..*0..10..1
follows_6preceding_6
0..*0..*
0..*
0..*follows_70..1 0..1
t1 t2 t3 t4
a1 a2
m1 m2 m3initial phase
input:
output: visit, 
additional 
information, 
mdms, tests
0..*
0..1
preceding_8preceding_7figure 6: class diagram outlining the concepts that exist within the healthcare process and
their relationships.
and white colored classes can be seen as abstract classes used to group and
structure proclets. the associations show the relationships that exist between
proclet classes together with their multiplicity.
starting with the white colored classes, we see that four main entities exist
within the healthcare process. these dierent entities have been identied by
looking from a high level viewpoint at the gynecological oncology healthcare
process. by taking this viewpoint, four dierent kinds of (sub)processes can be
identied which together constitute the entire gynecological oncology healthcare
21process. more specically, for the (sub)processes that belong to a main entity,
process related similarities can be identied. these similarities relate to the
general purpose for which these (sub)processes are executed (e.g. a test for
a single patient or a meeting to discuss a group of patients). moreover, these
similarities also related to the medical departments that are responsible for these
(sub)processes and whether the presence of the patient is necessary. below, these
four main entities will be discussed together with an explanation of the rationale
for dening them.
visit: a patient can visit a hospital multiple times to see a doctor. the
gynecological oncology department is responsible for the complete process
of such a visit. a visit can either be at the outpatient clinic where the doc-
tor examines the patient (\visit outpatient clinic" class), or an examina-
tion under anesthetic (\examination under anesthetic" class). moreover,
also related to a visit are the initial stages of the process (\initial phase")
in order to prepare for the rst visit of the patient to the outpatient clinic.
test: a gynecological oncology doctor can select multiple diagnostic tests
that need to be conducted for a patient. these tests are performed at var-
ious medical departments (other than the gynecological oncology depart-
ment). the tests that can be chosen range from medical imaging (\mri",
\ct", and \x-ray" classes) to a lab test (\lab" class), an ecg (\ecg"
class), and a pre-assessment (\pre-assessment" class). for all of these,
the presence of the patient is required. note that in principle many more
diagnostic tests can be selected by a doctor. in the class diagram we only
model the tests that are selected most frequently.
additional information: a gynecological oncology doctor might require
additional information in order to come to a nal diagnosis. this may
involve requesting the hospital, that referred their patient to the amc
for treatment, to send their data to the amc hospital so that it can
be reviewed. they can be requested to send patient les (class \obtain
22gynecology data"), to send pathology slices (\pathology" class), or to send
radiology data (\radiology revision" class). however, the \pathology"
proclet class also involves (re)examining patient tissue which has been
collected at the amc. for all of these processes, the patient does not
need to be present.
multi-disciplinary meeting: every monday afternoon multiple meet-
ings are organized for discussing the status of patients and/or the outcome
of examinations. for each of these meetings, the gynecological oncology
department is involved. in addition, these meetings involve the depart-
ments of radiology (\radiology meeting" class), pathology (\pathology
meeting" class) and a multidisciplinary meeting (\mdo meeting" class)
involving the departments of radiotherapy, and internal medicine (in order
to give chemotherapy). for these meetings, the patient does not need to
be present.
the entity types mentioned above are very general. in principle, they gener-
alize very well to other healthcare processes in which these entities may apply.
for the four main entity types, proclets are instantiated a variable number
of times and interact in dierent ways with each other. for these interactions
between proclets, a single proclet might require multiple inputs and outputs
from other existing proclets. for example, a lab test can be triggered during a
visit to the outpatient clinic and also during the initial phases of the process or
during an mdo meeting.
to make these interaction related commonalities explicit, the light-grey col-
ored classes in figure 6, outline these interaction characteristics in terms of
inputs and outputs. the items depicted in bold italics indicate that an inter-
action is optional whereas an item written in normal text indicates that an
interaction is mandatory. in this way, the light-grey colored classes explicitly
identify (at a high level) the interface that exists for a specic (group of) pro-
clet(s). note that not all proclet classes have the same level of aggregation.
the multi-disciplinary meeting related proclet classes all deal with a group of
23patients whereas the other proclet classes are related to a single patient.
we will now elaborate on the four main types of proclet classes that have
been identied and examine their interaction with other proclet classes. first,
we focus on the \test" and \additional information" entities in isolation. then,
we focus on the \visit" and the \multi-disciplinary meeting (mdm)" entities
and elaborate on the associations with other entities. in general, an association
with the name \follows" indicates that, seen from the viewpoint of the \visit"
and the \multi-disciplinary meeting (mdm)" entities, an action is initiated
(e.g. a lab test). similarly, an association with name \preceding" indicates
that a specic action serves as input to either the \visit" or \multi-disciplinary
meeting (mdm)" entity (e.g. the result of a lab test is required for a visit to
the outpatient clinic).
as indicated before, in the class diagram, we only modeled the tests that are
selected most frequently. for each of these selected tests, the patient is required
to be present. next, for them three dierent ways can be distinguished in which
a test is requested and ultimately the result is communicated. note that a
result is always communicated although a test might fail or that no results are
obtained.
one possibility is that a test is requested and the outcome of the test is
immediately reported (\t1"), another possibility is that a test is requested,
a preliminary result is communicated, followed by a nal result (\t2") at a
later time. the third alternative is that a test is requested and a preliminary
result is communicated to either the requester or a nominated group of medical
specialists. they in turn decide whether an amendment is needed (\t3"). a
somewhat special case is \t4" which is similar to \t1". in addition to \t1",
proclet classes of this type may also request additional diagnostic tests for a
patient in order to come to a decision. for example, for a pre-assessment test,
the anesthetist might require that a lung function test is completed or a con-
sultation with an internist. the act of requesting additional tests in order to
come to a nal decision are also modeled by the \follows 1" and \preceding 1"
associations. these associations indicate that during a pre-assessment multiple
24tests can be triggered, i.e. the multiplicity is 0 ::, but also that results of mul-
tiple tests may be required as input for an examination, i.e. the multiplicity is
0::. note that the requester only initiates an examination and might not be
aware of the fact that additional tests need to be performed in order to arrive
at an outcome.
a doctor might decide that additional information is required to reach the
nal diagnosis for a patient. two dierent ways can be distinguished in which a
request for additional information can be made and the result is delivered to the
requester. these are: (1) additional information is requested and the requested
information is immediately communicated (\a1"), (2) additional information is
requested and a preliminary result is communicated to either the requester or a
group of medical specialists. they in turn advise whether further investigation is
required (\a2"). note that the way in which additional information is requested,
and the result communicated, is very similar to the way tests are requested and
the result communicated.
during a visit to the hospital, the patient is examined either at the outpa-
tient clinic or during a procedure under anesthetic. for a visit of the patient
at the outpatient clinic (which can also be a consultation by telephone), several
inputs might be required. these can be the results of preceding tests, i.e. the
multiplicity attached to the \test" class of association \previous 2" is 0 ::, or
additional information that needs to be available, i.e. the multiplicity attached
to the \visit" class of association \previous 4" is 0 ::. note that the results of
tests and additional information may also be required as input to a multidis-
ciplinary meeting. therefore, the multiplicity attached to the \visit" class of
associations \previous 2" and \previous 4" is 0 ::1. moreover, as the status of a
patient might be discussed during the mdo multi-disciplinary meeting (\mdo
meeting"), the patient may be informed about the discussion afterwards, i.e.
the multiplicity attached to \visit outpatient clinic" and \mdo meeting" of
association \previous 6" is 0 ::and 0 ::1, respectively.
during a visit by a patient to the hospital, a doctor might require a sub-
sequent visit, i.e. the multiplicity of associations \follows 7" is 0 ::1, or that a
25patient needs to be registered for one or more multidisciplinary meetings, i.e.
the multiplicity attached to the \multi-disciplinary meeting (mdm)" class of
association \follows 6" is 0 ::.
moreover, a doctor might also request additional information, i.e. the multi-
plicity attached to the \additional information" class of association \follows 4"
is 0 ::, or that tests are triggered for a patient, i.e. the multiplicity attached to
the \test" class of association \follows 2" is 0 ::. note that tests and additional
information may also be triggered for a patient during a multidisciplinary meet-
ing. therefore, the multiplicity attached to the \visit" class for associations
\follows 4" and \follows 2" is 0 ::1.
finally, there are the multidisciplinary meetings to discuss the status of
multiple patients, to review the outcome of selected diagnostic tests, and to ex-
amine additional information that has been requested. although for a certain
meeting distinct inputs and outputs might exist, several commonalities can be
identied. as inputs to a meeting, additional information (\previous 5"), tests
(\previous 3"), and the outcome of other multidisciplinary meetings (\previ-
ous8") might be required for multiple patients. furthermore, as outputs, it
might be necessary to request additional information (\follows 5"), order fur-
ther tests for a patient (\follows 3"), or to initiate a multidisciplinary meeting
(\follows 8"). this is done for multiple patients. note that for the above men-
tioned associations, the reasoning for the multiplicities is similar to those for
the \visit" class.
as already indicated earlier, the dark-grey colored classes in figure 6 corre-
spond to concrete proclet classes. note that there is a strong correspondence
between classes in a class diagram and proclets carrying the same name. a class
in a class diagram outlines the data a proclet class carries with it and its rela-
tionship with other proclets. through the use of object constraint language
(ocl) expressions [40] it is possible to access data of dierent proclets.
note that the class diagram presented in figure 6 is one possible solution
to group and structure proclets. depending on the context in which the to-
be modeled process is executed, a dierent (and perhaps more advanced) class
26diagram can be constructed (e.g. based on the hl7 reference information
model (rim)) [41].
4.2. proclets
as already indicated earlier, the dark-grey colored classes in figure 6 corre-
spond to concrete proclet classes. in total 15 proclet classes have been identied
for the gynecological oncology workow.
the 15 proclet classes identied are connected to other proclet classes via
the port and channel concepts. figure 7 shows a high-level view of the inter-
connection structure together with the cardinality and multiplicity of the ports.
in total, there are 86 possible interactions between the proclet classes which
illustrates the complexity of the process.
by using proclets the relationships between dierent entities can be de-
scribed in their own process denition. so, it is more natural to dene processes
as intertwined loosely-coupled object life-cycles . as can be seen in section 3,
when using existing workow languages, it is necessary to atten this structure
into a monolithic workow model, which is potentially very dicult or even in-
tractable in practice. by using proclets, the second issue mentioned in section
3 can be solved.
of the 15 proclet classes, we discuss the \visit outpatient clinic", \pathol-
ogy", and \pathology meeting" proclet classes in detail. the other proclet
classes are discussed in detail in [42]. when discussing the proclets, we will show
how the limitations of monolithic workows can be addressed by using a proclets
approach. furthermore, we elaborate on the interaction of an individual proclet
with other proclets, i.e. the interface of a proclet. as can be seen in figure 7,
there can be many interactions between proclets and even multiple interactions
between the same proclets. in order to show the kind of interactions between
two proclets, the following naming strategy is chosen for a port, consisting
of several distinct parts: sending proclet .task name sending proclet .[name ].s/r.
\sending proclet " refers to the proclet class which sends the performative, task
name sending proclet refers to the specic task (or composite task) in the pro-
27examination 
under
anestheticobtain 
gynecology 
data
radiology 
revision
pathology
radiology meeting mdo meeting pathology meetingpre-
assessment
lab
ecgctmrix-ray
initial phase
visit outpatient 
clinic1,?
1,?
1,1
1,?
1,?
1,?1,?
1,?1,11,1
1,?
1,?
1,?1,?1,1
1,?1,?
1,11,?1,?1,?
1,11,?
1,?1,1
1,?1,?
1,?
1,?1,1
1,11,?
1,?1,?
1,?
1,?1,1
1,11,?
1,?
1,?1,?
1,?1,?1,?
1,?1,?
1,?
1,?
1,?1,?
1,?1,?
1,?1,?
1,?
1,?1,?1,?
1,?*,1
1,**,1
*,1
*,11,*
1,*1,*1,*1,*1,1
*,1
1,*1,*
1,*1,*
*,1*,1
*,1*,1
1,*1,*
*,1
*,1
*,1 *,11,1
1,*
1,*
1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?1,?1,?1,?1,?1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?
1,?1,?
1,?
1,*
*,1
1,*
*,1
1,**,1
*,1
*,1
*,1
*,1
*,1*,1
*,1
*,1
*,1
*,1
1,1
1,11,*
1,*
1,*
1,*1,?1,?
*,1figure 7: the proclet classes that are dened for the healthcare process and all of the possible
interactions between them.
clet class that sends the performative, \ s/r" indicates whether a performative
is sent via the port or is received via the port. \ [name] " refers to a specic
(optional) identier that is added when the naming chosen for the other parts
does not lead to a unique name. note that by using this naming strategy each
port will have a unique name. moreover, each port can only send a performative
to one other port and each port can only receive one performative from another
port.
the healthcare process involves multiple medical departments, such as ra-
diology and pathology. in order to clearly identify the resource perspective for
each task in a proclet class, it is indicated for each task which department
28gynecological oncology
(go)radiology pathology anesthesia
nurse
doctor
fellowradiologist
radiology assistantpathologist anesthesiologist
administrative stafforganizational diagramfigure 8: the organizational model for the healthcare process.
and which role is required. the corresponding organizational model is shown
in figure 8. for example, we can see that for the \gynecological oncology de-
partment", the roles \doctor" and \nurse" have been dened, and that for the
\radiology" department the roles \radiologist" and \radiology assistant" have
been dened.
note that the proclet classes discussed below are somewhat simplied in
comparison to the models produced for the yawl, flower, adept1, and
declare systems. first of all, the proclet classes do not model all of the tasks
that are relevant for a specic workow. clearly, our main motivation for den-
ing the proclet classes are to show the interactions between these proclets as
this is the core focus of the proclet approach. obviously, by modeling these
interactions, information is included which is typically not present in a single
monolithic workow.
4.2.1. visit outpatient clinic
we now analyze in detail the \visit outpatient clinic" proclet class that
can be seen in figure 9. this proclet class deals with a visit by a patient to
the outpatient clinic of gynecological oncology in order to see a doctor. the
contents of this subprocess has already been discussed in detail in section 3.
a visit of a patient can be requested at dierent parts of the process con-
sequently triggering the creation of the respective proclet. this is indicated by
29meet with
patientsyncgive 
information
and brochuresinform patient
about tests
register 
patientcheck patient
data and make
cardgo,nursego,
administrative staff go,doctor
go,nursego,nursevisit oc gynecological oncology
visit_outpatient_clinic.
output_vists.
visit_oc.r
examination_under
_anesthetic.
output_visits.
visit_oc.r
mdo_meeting.
output_visits.
visit_oc.rinitial_phase.output_visits.
visit_oc.r
go_data.
finish_go_data.
visit oc.recg.
finish_ecg.
visit_oc.rpre_assessment.
send_report.
visit_oc.rlab.
preliminary_
result.
visit_oc.rlab.
finish_lab.
visit_oc.r
mdo_meeting.
output_tests.visit_oc.rvisit_oc.
output_additional_information.
go_data.svisit_oc.output_additional
_information.radiology_
revision.svisit_oc.output_additional
_information.pathology.
tissue_taken_of.svisit_oc.
output_visits.
examination_under_
anesthetic.svisit_oc.
output_visits.
visit_oc.s
visit_oc.
output_tests.
ecg.svisit_oc.
output_tests.
lab.svisit_oc.
output_tests.
x_ray.svisit_oc.
output_tests.
mri.svisit_oc.
output_tests.
ct.svisit_oc.
output_tests.
pre_
assessment.svisit_oc.
output_mdms.
pathology_
meeting.svisit_oc.
output_mdms.
radiology_
meeting.svisit_oc.
output_mdms.
mdo_
meeting.svisit_oc.output_additional
_information.pathology.
receive_fax.s
1,?
1,?
1,?
1,?1,?1,?
1,?1,? 1,?1,?1,?1,?1,?1,?1,?1,?1,?1,?1,?
1,?
1,?
1,?
1,?
1,?end visit
create visit
outpatient clinicreceive 
gynecology 
data
receive mdo 
meeting result
1,?receive report 
ecgreceive pre-
assessment 
result
receive final 
lab resultreceive 
preliminary lab 
result
request 
registration for 
pathology 
meetingrequest 
registration for 
mdo meetingrequest 
registration for 
radiology 
meetinginitiate visit to 
outpatient clinicinitiate 
examination 
under anestheticrequest 
gynecology 
datarequest 
radiology 
revisionrequest 
pathology 
examinationrequest 
pathology slices 
referring hospital
request ecg
request lab 
testrequest x-ray request mri request ctrequest pre-
assessment
go,doctor go,doctor go,doctorgo,doctor
go,doctor go,doctor go,doctor go,doctorgo,doctorgo,doctor go,doctor go,doctor go,doctor go,doctor go,doctorfigure 9: the \visit outpatient clinic" proclet class.
the cardinality 1 and multiplicity ? of the ports connected to the input condi-
tion. for example, a visit is requested during the initial stages of the healthcare
process and also during a visit itself or during the mdo meeting. the next few
tasks in the proclet class deal with the meeting of the patient with the doc-
tor (\meet with patient" task). directly related to such a meeting is the fact
that the results of multiple tests (\receive preliminary lab result", \receive
nal lab result", \receive report ecg" tasks, \receive pre-assessment result"
tasks), additional information (\receive gynecology data" task), and the result
of a mdo meeting (\receive mdo meeting result" task) might be required as
inputs. the fact that only a selection of them might be required is indicated
by the cardinality 1 and multiplicity ? of the associated ports. for example, as
input, the outcome of an mri and lab test might be necessary along with the
data received from the referring hospital.
note that the tasks, required for the receipt of all the necessary inputs for
a patient meeting, are modeled using a loop. each performative received is
stored in a knowledge base. the proclet continuously inspects this knowledge
base and continues with the next step (\register patient" task) if all required
performatives have been received.
during a visit to the doctor, it may be decided that several subsequent
30steps need to be taken in order to diagnose the patient. in general, a doc-
tor can request that additional information is required (\request gynecology
data", \request radiology revision", \request pathology examination", \re-
quest pathology slices referring hospital" tasks), that tests need to be undergone
by a patient (\request ecg", \request lab test", \request x-ray", \request
mri", \request ct", \request pre-assessment" tasks), and that the patient
needs to be discussed during a multidisciplinary meeting (\request registration
for pathology meeting", \request registration for radiology meeting", \request
registration for mdo meeting" tasks). moreover, a subsequent visit by the
patient might be necessary (\initiate visit to outpatient clinic", \initiate exam-
ination under anesthetic" tasks). a doctor makes a selection of each of these
steps as necessary. so, either a step is selected once or not at all. this is also
indicated by cardinality 1 and multiplicity ? of the associated ports. note that
during the selection of the subsequent steps, it can be that a given proclet needs
to receive information about the dierent inputs that need to be received by the
respective proclet. for example, during a visit of the patient to the outpatient
clinic, a doctor may decide that for the next visit of the patient an mri and
x-ray are required. in this way, when creating a new instance of a \visit out-
patient clinic" proclet the content of the performative needs to indicate that
for the next visit the result of both an mri and x-ray is required.
note that in this proclet, the communication with other proclets is made
explicit, i.e. communication is a rst-class citizen . in comparison to figure
4, interaction with other processes is possible. for example, after the meeting
with the doctor, subsequent steps can immediately be triggered (e.g. a lab test),
whereas in figure 4, the subprocess rst needs to nish. furthermore, in figure
4,subprocess dependencies are hidden in the data perspective . for example,
in figure 4 it is not visible that during the performance of task \meet with
patient", data elds are set, which after the completion of the subprocess, cause
any subsequent subprocesses to be triggered. in this way, by using proclets, the
fourth issue mentioned in section 3 can be resolved.
note that at run-time information held by proclets might need to be updated
31or may need to be canceled. for example, as input to a meeting with a doctor,
the result of a lab test might be necessary. however, the result of the lab test
may not be available at the moment the meeting should take place. an option
is to either cancel the whole proclet involving the lab test or to \relink" the
result of the lab test to the next meeting with the patient. at the moment, the
models do not cater for the fact that proclets can be updated or even canceled.
4.2.2. pathology
the \pathology" proclet class, shown in figure 10, describes the process in
which (1) patient tissue needs to be investigated by a pathologist, (2) a request
is made to review pathology material from another hospital, or (3) a request is
made to reinvestigate pathology material. analysis shows that a proclet class
can be used to represent a workow process which can handle multiple types of
cases . the resulting model reuses as much of the existing process as possible,
i.e. no duplication of process parts is necessary or creation of separate proclet
classes.
for each type of case, specic ports are connected to the input condition in
the net. for example, ports with names ending \tissue taken of" are used to
create a proclet instance where patient tissue needs to be investigated. directly
connected to the input condition is the light-grey colored, automatic, \addi-
tional investigation / receive fax / tissue taken of" task. depending on the
performative received, the correct path is taken for each type of case. note that
as a dierent path needs to be taken on the basis of the performative received,
this illustrates the need for a knowledge base.
in the situation where a request is raised asking another hospital to send
its pathology material for investigation, the \send fax" task is performed which
requires a fax to be sent. after this, either the material is received (\receive
material" task) or the other hospital needs to be reminded to send the rele-
vant material to the amc (\reminder" task). when the material is received,
it can be investigated by a pathologist (\investigate" task) who prepares a
report (\make report" task) that is discussed during the relevant pathology
32send faxreceive 
material
receive tissueput on other pa 
meetingreminderinvestigate
make report
make 
amendmentpathology, 
administrative staffpathology, 
administrative staff
pathology, 
administrative staffpathology, 
administrative staffpathology, pathologist
pathology, pathologist
pathology, pathologist
pathology, 
administrative staffpathology
visit_oc.output_
additional_information.
pathology.
receive_fax.rinitial_phase.
output_
additional_information.
pathology.
receive_fax.rmdo_meeting.
output_additional_information.
pathology.
additional_investigation.r
pathology.
send_report.
pathology_meeting.spathology_meeting.
output_make_conclusion.
pathology.spathology_meeting.
output_additional_
information.
pathology.
receive_fax.rmdo_meeting.
output_additional_
information.
pathology.
receive_fax.r
visit_oc.output_
additional_information.
pathology.
tissue_taken_of.rexamination_under_
anesthetic..
output_additional_
information.
tissue_taken_of.rpathology_meeting.
output_additional_information.
pathology.
additional_investigation.r
1,?1,?1,?1,?1,?1,?
1,1
1,11,?
1,?send reportreceive 
conclusionadditional 
investigation / 
receive fax / 
tissue taken of
pathology, pathologistfigure 10: the \pathology" proclet class.
meeting (\send report" task). after discussion at this meeting, a performa-
tive is returned (\receive conclusion" task) which indicates whether any nal
amendments need to be made (\make amendment") or not.
an alternate situation involves a request where a tissue sample taken at the
amc needs to be investigated. after receipt of the tissue (\receive tissue"),
the process follows the same course as in the previous situation, starting from
the \investigate" task.
finally, another possible alternative involves a request where existing sam-
ples need to be reinvestigated, e.g. additional colorings might be necessary.
after the request is received, the same steps are taken as for the two previous
situations, starting from the \investigate" task.
33prepare pathology 
meetingpathology meetingpathology,
administrative staffpathology,
pathologistgo, doctorpathology meeting
visit_oc.
output_mdms.
pathology_meeting.r
initial_phase.
output_mdms.
pathology_meeting.r
mdo_meeting.
output_mdms.
pathology_meeting.r
pathology_meeting.
output_mdms.
radiology_meeting.rexamination_
under_
anesthetic.
output_mdms.
pathology_meeting.r
pathology.send_report.pathology_
meeting.spathology_meeting.
output_make_conclusion.
pathology.s
pathology_meeting.
output_additional_
information.
pathology.
receive_fax.spathology_meeting.
output_additional_information.
pathology.
additional_investigation.spathology_meeting.
output_mdms.
pathology_
meeting.spathology_meeting.
end_pathology_
meeting.
mdo_meeting.s
1,*
1,*
1,*
1,*
1,*
1,*
*,1
*,1*,1*,1
1,1
create pathology 
meeting
receive pathology 
reportregister for meeting
(via ex. under 
anesthetic proclet)
register for meeting
(via visit outpatient 
clinic proclet)
register for meeting
(via initial phase 
proclet)
register for meeting
(via mdo meeting 
proclet)
register for meeting
(via radiology 
meeting proclet)end pathology 
meetingmake conclusion
request registration 
for pathology 
meetingrequest pathology 
slidesrequest additional 
coloringsgo, doctor go, doctor go, doctorfigure 11: the \pathology meeting" proclet class.
4.2.3. pathology meeting
the \pathology meeting" proclet class, shown in figure 11, describes the
weekly meeting in which the gynecological oncology doctors and a pathologist
discuss the samples that have been examined by a pathologist and need further
review. during this meeting, samples from multiple patients are discussed. for
each weekly meeting, a separate proclet is created (\create pathology meeting"
task). in order to discuss a patient sample, it rst needs to be registered (tasks
starting with \register for meeting"). this can be done at dierent points in
the process which explains why there are multiple tasks starting with \register
for meeting" each connected to a single port. however, as is indicated by the
cardinality 1 and multiplicity * of the associated ports, multiple patients can be
registered using the same port. furthermore, as a consequence of the registra-
tion for the \pathology meeting" proclet, a separate instance of the \pathology"
proclet is created so that the sample can be investigated by a pathologist. the
result of this proclet is received via the \receive pathology report" task. conse-
quently, there exists a tight coupling between one \pathology meeting" proclet
and multiple \pathology" proclets.
note that both the tasks for the registration for the meeting and the cor-
34responding receipt of the results are modeled using a loop. by using a loop,
multiple performatives can be received, one at a time, as indicated by cardi-
nality 1 and multiplicity * of the associated ports. the \pathology meeting"
proclet constantly inspects this knowledge base in order to decide whether all
necessary performatives have been received and the process may continue, i.e.
the \prepare pathology meeting" task may be performed in which a pathologist
prepares themselves for the pathology meeting that is held afterwards (\pathol-
ogy meeting" task).
during this meeting, it might be decided that several subsequent steps need
to be taken. for each of the samples that are discussed during the pathology
meeting, the corresponding \pathology" proclet needs to be informed whether
an amendment is required or not. this involves sending a performative to each
corresponding \pathology" proclet (\make diagnosis") as is indicated by the
cardinality * of the accompanying port. moreover, new pathology examinations
might be required (\request pathology slides", \request additional colorings"
tasks) which subsequently need to be discussed at a later pathology meeting
(\request registration for pathology meeting" task). here also performatives
need to be sent to multiple proclets as indicated by the cardinality * of the
accompanying ports. finally, before destroying the instance, the results of the
discussion are transferred to the mdo meeting so that the patient can be dis-
cussed during this meeting (\end pathology meeting" task).
as becomes clear from this analysis, in this proclet class we are dealing
with a dierent level of aggregation (i.e. a group of patients) than the previous
proclet classes, and performatives are received from proclet classes which are
at a lower level of aggregation (a specic service delivered for a patient) . us-
ing proclets we can easily handle these dierences in the level of aggregation
whereas most workow management systems force one to depict the process
at an arbitrarily chosen level and to describe them in terms of one monolithic
workow. obviously, issue number one, mentioned in section 3, can be solved
using proclets.
moreover, for this proclet several one-to-many relationships exist within the
35\pathology" proclet. for example, using task \request additional colorings",
it can be requested that existing samples be reinvestigated for multiple patients.
the output port of this task has cardinality , indicating that the performative
is sent to potentially multiple recipients. in the class diagram of figure 6,
this relationship is also indicated by the \follows 5" association. clearly, using
proclets it can easily be captured that there are one-to-many and many-to-many
relationships between entities in a workow, whereas this is impossible to capture
using existing workow approaches . so, issue number three, identied in section
3, can be addressed.
5. related work
the rst wfmss were developed in the early 1970's. see for example the
ocetalk system of skip ellis [43], an oce automation system based on petri
nets. however, only in the late nineties did these systems became more mature
and more widely used in practice. currently, there are several hundred wfmss
and workow technology has become an integral part of numerous products,
including enterprise resource planning (erp) (e.g. sap/r3), product data
management (pdm), and customer relationship management (crm) systems.
currently, administrative processes, which tend to be rather rigid, can be
well supported by wfmss. however, as indicated in [26, 44], so called \careow
systems", systems used for supporting care processes in hospitals, have special
demands with regard to workow technology. successful implementations of
workow systems in healthcare do exist [1, 16, 25, 45, 46], for example, [25]
describes how workow technology can support the execution of recurrent tasks
in a medical department. furthermore, zai et al. [46] recently reported on a
combined workow-informatics system for diabetes management providing each
healthcare team member with just in time knowledge so that they could perform
their specic tasks.
currently, the focus of research in the eld of healthcare is shifting towards
describing and modeling workow in order to design healthcare technology that
36provides improved support for the management of diseases. nevertheless, the
healthcare domain is still behind in adopting wfmss for tuning healthcare or-
ganizational processes. in that way, \widespread" adoption and dissemination
of workow technology is the exception rather than the rule [27]. one of the
problems that must be dealt with in order to eectively support healthcare pro-
cesses using wfmss is that more process exibility needs to be provided by the
system [47, 48]. unfortunately, current workow systems fall short in this area,
an observation often reported in the literature [49{52].
one of the problems related to exibility is that for a given patient a num-
ber of concurrent processes need to run in conjunction with each other [1, 53].
when complex care needs to be delivered, co-operation between various clin-
icians across dierent medical specialties and departments is needed [54], e.g.
by having multidisciplinary meeting in which doctors from several medical dis-
ciplines discuss the status of a patient. in this paper, these processes can be
characterized by weakly-connected interacting lightweight workows in which
communication and collaboration between instances of these processes is of par-
ticular importance.
contemporary languages and systems provide limited support for the execu-
tion of lightweight interacting workows. instead, one is forced to squeeze real-
life processes into a single \monolithic overarching workow" which describes
how an individual case is handled in isolation. in doing this, the modeler looses
the overview, the natural structure of work is lost, and the required exibility
cannot be oered to the medical professionals. this issue has been recognized
in literature [28, 29, 55{57] and is not limited to the healthcare domain. it
also applies in other areas, e.g. the automotive domain [57], or when reviewing
papers for a conference [29].
when applied to lightweight interacting workows, the proclet approach
supports the following considerations: (1) dierent processes interacting with
each other, (2) processes operating at dierent levels of aggregation, and (3)
batch-oriented tasks. there are a limited range of alternate approaches to deal
with some of these issues [56].
37the corepro framework [57, 58] allows for automatic generation and coordi-
nation of individual processes, operating at dierent levels of aggregation, based
on their underlying data structure. the initial number of process instances cre-
ated is decided at run-time. however, the creation of new instances at runtime
is possible, but requires an ad-hoc change to the related data structures. for
the proclet approach, the number of process instances created is based on post-
conditions, evaluated at runtime.
in [59{61], a two-tier, goal-driven model for workow processes in the health-
care domain is presented. a goal-ontology, presented as a directed acyclic graph,
is utilized to represent the business model at the upper level and is decomposed
into an extended petri-net model for the lower level workow schema. a map-
ping is dened from the goal-graph to (sub)processes and activities such that
each of the (sub)processes is designed in a way that achieves one of the upper
level goals. this approach leads to a hierarchy of process models with a number
of the top-level goals being implemented through subprocesses. however, there
is no interaction between subprocesses in contrast to the classical way in which
hierarchical processes communicate with each other in a top-down fashion.
in [55, 62, 63], the concept of artifacts is used to distinguish dierent levels
of aggregation. however, the content of one or more artifacts can only be
changed by the execution of an activity. consequently, aggregation issues are
only addressed at the activity level instead of at the process level.
batch-oriented tasks are tasks that are based on groupings of lower aggre-
gation elements. the concept of a batch-oriented task was already introduced
in [64] in order to allow for a task that is executed for multiple instances at the
same time. in [65], the problem is dened and deliberations are provided on the
technology support required to deal with the issue.
finally, in [66, 67], worklets are presented which can be seen as micro work-
ows. specic activities in a process are linked to a repertoire of possible actions.
based on the properties of the case and other context information, the required
action is chosen. the selection process is based on a set of rules. during en-
actment it is also possible to add new actions to the repertoire. however, in
38contrast to the proclets framework, these actions can only be enacted at spe-
cic parts of the process which needs to be decided at design-time. moreover,
no interactions between these worklets are possible.
6. discussion
in this paper, we have studied the gynecological oncology healthcare process
and how it can be modeled more eectively by using the proclet framework.
due to the increased emphasis on interaction-related aspects of workows, it is
possible to model interactions between processes which otherwise would have
been hidden in application logic or not been taken into account at all. at run-
time, once it is known that interactions have to take place, this can be monitored
leading to an improved quality of the processes that are ultimately executed. in
the healthcare domain where resources are scarce and limited and often work
is handed over from one resource to another, this is of the utmost importance.
currently it might be the case that a participant in a certain process is not
aware of the fact that a participant in another process is waiting for input. for
example, a pathologist does not start working on a report which is needed by a
medical specialist a day later, but rather is working on a report which is needed
two weeks later.
for the gynecological oncology healthcare process, once supported by the
proclet framework, several benets can potentially be realized. currently, for
the radiology and pathology meetings, patients that need to be discussed must
be registered for the respective meeting. however, in practice, for both meet-
ings it happens that around 10% of the patients can not be discussed because
preparatory work in the corresponding radiology and pathology processes has
not taken place. moreover, for scheduled meetings where a patient sees a doctor
it is sometimes the case that a doctor nds out during the actual appointment
that some results from required diagnostic tests are missing. consequently,
this leads to ineciencies as a new appointment needs to be scheduled. in the
proclet models dened for the gynecological oncology healthcare process these
39interactions have been captured. once these are monitored, these issues can be
avoided.
for the proclet classes described, there is also a link with our calendar-based
scheduling support described in [68]. today's wfmss oer work-items to users
through specic work-lists in which participants select the work-items they will
perform. however, no calendar-based scheduling is oered for these work-items.
in [68] it is investigated how a wfms can be augmented with scheduling facili-
ties such that appointments can be scheduled for these kinds of tasks. moreover,
these appointments are scheduled in the calendars of the participants involved
in the actual performance of the task in order to ensure that they occur at a
precise pre-agreed time suitable for all of the participants involved. clearly, in
several proclet classes, we can also nd tasks for which a concrete appointment
involving specic resources needs to be made. for example, the \meet with
patient" task in the \visit outpatient clinic" proclet class is a task which needs
to be scheduled for both a doctor and a patient. furthermore, the \pathology
meeting" task in the \pathology meeting" proclet class is also a task which
needs to be scheduled as a pathologist and several gynecological oncology doc-
tors need to be available at the same time. when linking the proclets framework
with the work described in [68], also these scheduling aspects can be taken into
consideration leading to better scheduling and organization of resources.
although the proclets framework oers various advantages, several chal-
lenges in regard to the design and implementation of the proclet framework
still remain. these challenges are discussed below.
in this paper, we only focus on the support of organizational processes by
the proclets framework. however, as mentioned in section 1, for healthcare pro-
cesses a distinction can be made between organizational processes and medical
treatment processes. for the optimal support of medical treatment processes
by it, exibility needs to be oered by cig languages in order to eectively
model cigs [7, 26, 69, 70]. as exibility is oered by the proclets framework,
we believe that the framework provides benets in the modeling and execution
40of cigs as well. in addition to this, until now not many studies have been
devoted to the integration of cigs and workow languages [7, 14]. future work
can investigate the usage of the proclets framework for providing such an inte-
grated solution. in this way, optimal support for healthcare processes can be
provided.
a limitation of our approach is that we only refer to a specic healthcare
process from the gynecological oncology department within one institution, the
amc, as a test bed for the proclets. other healthcare processes, in particular
those concerning the management of chronically ill patients, may dier in their
complexity, include many more diagnostic or treatment subprocesses and more
healthcare team members as part of the patient care process over a long period
of time. however we consider the gynecological oncology healthcare process to
be representative of other healthcare processes as it deals with the diagnosis of
patients suering from cancer, an area in which the amc serves as a reference
center. as such, we are dealing with complex diagnosis and treatment processes
where multiple (sub)processes may run in conjunction with each other.
another related aspect is that within the proclets framework, interaction
is considered to be a rst-class citizen. consequently, when discussing the ad-
vantages, our main focus is on interaction-related aspects rather than on or-
ganizational aspects. nevertheless, it should be noted that in healthcare the
allocation of responsibilities to resources is much more dynamic than in other
elds. with this in mind, future work should ensure that the dynamic and
volatile nature of roles and the organization in these processes is fully taken
into account. a signicant achievement in this context is the work done on the
so-called workow resource patterns [71]. independent from specic workow
technologies and modeling languages, the various ways in which resources are
utilized in workows are delineated and described in detail.
by promoting interaction to a rst-class citizen, the proclets framework,
allows for modeling complex workows in a more natural manner. however,
this increased emphasis on the interaction side of workows requires a dierent
modeling approach, and, hence modelers trained in this new style of modeling.
41most existing modeling approaches require that a process is captured in terms
of one or more complex models. by increasing the emphasis on interaction-
related aspects of workows, the proclet framework supports the division of
complex entangled processes into simple fragments. this can be achieved by
rst constructing a class diagram which models the concepts that exist within
a process and their relationships (e.g. as in figure 6). afterwards, the dierent
proclet models and their interactions can be modeled based on the concepts
identied in the class diagram and the relationships between them. obviously
this approach allows for a separation of concerns. in this way, we believe that
less modeling errors are made.
note that in regard to avoiding modeling errors, several methods are avail-
able for verication, given the modeling language that is used. for example,
for the yawl language, which is used for the proclet models in this paper,
dedicated techniques are available for verifying syntactic correctness [72]. how-
ever, this verication abstracts away from interactions and will not discover
deadlocks due to inter-process communication. hence, to adequately support
proclet-based verication, additional research is needed.
another issue associated with promoting interactions to rst-class citizens is
that it is dicult to see how a series of proclets unfolds over time. this might
raise issues in communicating them to domain experts and in validating them.
in order to alleviate this problem, we believe that one should rst start with
communicating the single proclet models. there are several methods available
which ease the communication of process models to domain experts and their
validation. for example, in [30, 73, 74], a process model is validated by domain
experts by means of animation. while the model is executed, the animation is
updated. another approach is discussed in [75] in which semi-formal models are
used in order to elicit requirements for a socio-technical system to be built.
a colored petri net (cpn) [76] model of the gynecological oncology health-
care process has been validated by means of animation as discussed in [30].
based on these experiences we believe that animations are benecial in commu-
nicating a process model to domain experts. therefore, we propose to commu-
42nicate proclet models in a similar fashion which is perhaps even easier because
proclet models are small process fragments.
once the content of the proclet models is clear to the domain experts, as a
second step the possible interactions between these models need to be commu-
nicated. for these interactions, we also propose the use animations for commu-
nicating these to domain experts. by splitting up the process of communicating
the proclet models and their interactions into two explicit steps, a separation of
concerns is achieved and information overload is avoided. however, future work
is needed to discover how the possible interactions between proclet models can
best be communicated or validated.
with regard to the execution of proclets, it should be noted that currently
there does not exist an engine for the enactment of proclets. however, given
the fact that proclets have a clear semantics, such an engine can be designed
and built straightaway. a related issue in this context is that for the diagnosis
and treatment of a patient it can not be decided beforehand which proclets and
how many will need to be instantiated for the patient and the way in which they
will interact with each other. this only becomes clear at run-time. in this way,
for proclets to nd each other, this requires the denition of complex knowledge
bases for them which is a far from trivial task. next to building an engine for the
enactment of proclets, future work needs to nd more natural ways to \connect"
proclets at run-time. it is important that a proclet is aware of performatives
that it will receive. if these can not be handled eciently, escalation actions
need to be taken (e.g. continue without waiting for the performative that needs
to be received or cancelation of a proclet).
finally, with regard to the successful usage of a wfms in healthcare it is
essential that the medical professionals can enter for every task dened in a pro-
cess model, the inputs required for that task. to date, wfmss provide a wealth
of advanced features for integration with existing software systems. so, the
tasks that need to be done by a wfms can well be integrated with the applica-
tions that medical professionals already use in their usual work. by integrating
a wfms in this way into the current work practices of medical practitioners,
43there is the advantage that the acceptance of the system is increased.
moreover, several other interesting issues have been identied. in the gy-
necological oncology healthcare process many dierent tests can be needed by
patients. these tests can be instantiated via dierent proclets and the results
can be received by dierent proclets. clearly, for each distinct point that such a
test can be created or the result may be received a specic task with an outgoing
or incoming port is required. in the future new diagnostic tests might become
available which need to be included in the respective proclets. therefore, we
see an interesting link with the worklet approach described in the related work
section. using the worklet approach, it may be possible to invoke tasks with
input or output ports dynamically in proclets instead of needing to model them
explicitly.
today's information systems record many of the events relevant to a business
process. obviously, there is an abundance of event data, and new and powerful
techniques such as process mining [77, 78] provide many opportunities to analyze
and improve business processes. in this context, for all process instances that are
related to a given case, events are logged. future work should focus on collecting
and correlating information about tasks that were executed for dierent process
instances, but between which a certain relationship exists.
7. conclusion
in this paper, we have studied the gynecological oncology healthcare process
and showed how it can be modeled using existing workow languages, such as
yawl, flower, declare, and adept1. moreover, we have examined how the
same process can be modeled using the proclet framework. if we compare the
proclet framework with existing workow languages, the following dierences
can be observed.
real-life healthcare care processes are often fragmented and composed
of separate but inter-twined life-cycles running at dierent speeds. these
44processes can be eectively described using proclets, with interaction con-
sidered as a rst-class citizen, instead of straightjacketing them into one
monolithic workow.
real-life healthcare processes often operate at dierent levels of granu-
larity. existing workow languages cannot take these dierences into ac-
count, however, by using proclets this is easily supported. moreover,
one-to-many and many-to-many relationships that exist between entities
in a workow, can be captured.
in healthcare, for a given patient, a lot of concurrent organizational processes
can run in conjunction with each other. these processes can be created at any
point in time and can also be terminated at any point in time. moreover, these
processes interact in dierent ways with each other. we have characterized
these kinds of processes as weakly-connected interacting lightweight workows .
steps in such a process may either operate at the level of a single patient or at
the level of a group of patients. in other words, these processes may rely on
information that resides at dierent levels of aggregation.
in order to successfully apply proclets in the healthcare domain, future work
related to the verication, validation, and enactment of proclets is necessary.
however, once these issues are handled, we believe that the extension of existing
workow technology with proclet functionality can greatly assist in the modeling
and enactment of care processes.
[1] r. lenz, m. reichert, it support for healthcare processes - premises,
challenges, perspectives, data and knowledge engineering 61 (2007) 49{
58.
[2] w. van der aalst, k. van hee, workow management: models, methods,
and systems, mit press, cambridge, ma, 2002.
[3] m. dumas, w. van der aalst, a. ter hofstede, process-aware information
systems: bridging people and software through process technology, wiley
& sons, 2005.
45[4] m. weske, business process management: concepts, languages, architec-
tures, springer-verlag, berlin, 2007.
[5] a. ter hofstede, w. van der aalst, m. adams, n. russell (eds.), mod-
ern business process automation: yawl and its support environment,
springer-verlag, 2010.
[6] p. terenziani, a hybrid multi-layered approach to the integration of
workow and clinical guideline approaches, in: s. rinderle-ma, s. sadiq,
f. leymann (eds.), bpm 2009 international workshops, ulm, germany,
september 7-10, 2009, revised papers, 2009.
[7] n. mulyar, w. van der aalst, m. peleg, a pattern-based analysis of clinical
computer-interpretable guideline modeling languages, jamia 14 (6) (2007)
781{787.
[8] p. de clercq, j. blom, h. korsten, a. hasman, approaches for creating
computer-interpretable guidelines that facilitate decision support, articial
intelligence in medicine 31 (2004) 1{27.
[9] d. wang, m. peleg, s. tu, a. boxwala, r. greenes, v. patel, e. shortlie,
representation primitives, process models and patient data in computer-
interpretable clinical practice guidelines: a literature review of guideline
representation models, international journal of medical informatics 68
(2002) 59{70.
[10] k. kaiser, s. miksch, modeling treatment processes using information ex-
traction, in: h. yoshida, a. jain, a. ichalkaranje, l. jain, n. ichalkaranje
(eds.), advanced computational intelligence paradigms in healthcare 1,
vol. 48 of studies in computational intelligence (sci), springer berlin /
heidelberg, 2007, pp. 189{224.
[11] k. kaiser, s. miksch, modeling computer-supported clinical guidelines
and protocols: a survey, vienna university of technology, rep. asgaard-
tr-2005-2 (2005).
46[12] m. peleg, s. tu, j. bury, p. ciccarese, j. fox, r. greenes, r. hall, p. john-
son, n. jones, a. kumar, s. miksch, s. quaglini, a. seyfang, e. short-
lie, m. stefanelli, comparing computer-interpretable guideline models:
a case-study approach, journal of the american medical informatics as-
sociation 10 (1) (2003) 52{68.
[13] p. de clercq, k. kaiser, a. hasman, computer-based medical guidelines
and protocols: a primer and current trends, vol. 139 of studies in health
technology and informatics, ios press, 2008, ch. computer-interpretable
guideline formalisms, pp. 22{43.
[14] j. fox, e. black, i. chronakis, r. dunlop, v. patkar, m. south, r. thom-
son, computer-based medical guidelines and protocols: a primer and
current trends, vol. 139 of studies in health technology and informat-
ics, ios press, 2008, ch. from guidelines to careows: modelling and
supporting complex clinical processes, pp. 44{62.
[15] m. field, k. l. (eds.), institute of medicine. clinical practice guidelines:
directions for a new program, national academy press, washington, dc,
1990.
[16] k. unertl, m. weinger, k. johnson, n. lorenzi, describing and modelling
work ow and information ow in chronic disease care, journal of the amer-
ican medical informatics association 16 (2009) 826{836.
[17] w. tierney, j. overhage, m. murray, l. harris, x.-h. zhou, g. eckert,
f. smith, n. nienaber, c. mcdonald, f. wolinski, eects of computerized
guidelines for managing heart disease in primary care, journal of general
internal medicine: a randomized, controlled trial 18 (2003) 967{976.
[18] a. montgomery, t. fahey, t. peters, c. macintosh, d. sharp, evalua-
tion of computer based clinical decision support system and risk chart for
management of hypertension in primary care; randomized controlled trial,
britisch medical journal 320 (686-690).
47[19] a. ozdas, t. spero, l. r. waitman, j. ozbolt, j. butler, r. miller,
integrating \best of care" protocols into clinicians' workow via care
provider order entry: impact on quality-of-care for acute myocardial
infarction, journal of the american medical informatics association 13
(2006) 188{196.
[20] t. east, l. heermann, r. b. et al., ecacy of computerized decision sup-
port for mechanical ventilation: results of a prospective multi-center ran-
domized trial, in: n. lorenzi (ed.), proceedings amia annual symposium,
1999, pp. 251{255.
[21] n. doherty, i. perry, the uptake and application of work ow manage-
ment systems in the uk nancial services sector, journal of information
technology 14 (2) (1999) 149{160.
[22] j. liu, s. zhang, j. hu, a case study of an inter-enterprise workow-
supported supply chain management system, information and management
42 (3) (2005) 441{454.
[23] h. reijers, s. poelmans, re-conguring workow management systems to
facilitate a \smooth ow of work", international journal of cooperative
information systems 16 (2) (2007) 155{175.
[24] h. reijers, w. van der aalst, the eectiveness of workow management
systems: predictions and lessons learned, international journal of infor-
mation management 56 (5) (2005) 457{471.
[25] m. reichert, p. dadam, r. mangold, r. kreienberg, computer-based sup-
port of clinical work processes - concepts, technologies, and their applica-
tion, zentralbl gynakol 122 (1) (2000) 56{70, in german.
[26] s. quaglini, m. stefanelli, g. lanzola, v. caporusso, s. panzarasa, flex-
ible guideline-based patient careow systems, articial intelligence in
medicine 22 (1) (2001) 65{80.
48[27] m. murray, strategies for the successful implementation of workow sys-
tems within healthcare: a cross case comparison, in: r. sprague (ed.),
proceedings of the 36th annual hawaii international conference on sys-
tem sciences, ieee computer society press, los alamitos, ca, 2003, pp.
166{175.
[28] w. van der aalst, p. barthelmess, c. ellis, j. wainer, workow modeling
using proclets, in: o. etzion, p. scheuermann (eds.), 7th international
conference on cooperative information systems (coopis 2000), vol. 1901
of lecture notes in computer science, springer-verlag, berlin, 2000, pp.
198{209.
[29] w. van der aalst, p. barthelmess, c. ellis, j. wainer, proclets: a frame-
work for lightweight interacting workow processes, international journal
of cooperative information systems 10 (4) (2001) 443{482.
[30] r. mans, w. van der aalst, n. russell, p. bakker, a. moleman, k. lassen,
j. jorgensen, transactions on petri nets and other models of concurrency
iii, vol. 5800 of lecture notes in computer science, springer-verlag berlin
heidelberg, 2009, ch. from requirements via colored workow nets to
an implementation in several workow systems, pp. 25{49.
[31] r. mans, w. van der aalst, n. russell, p. bakker, flexibility schemes for
workow management systems, in: lecture notes in business information
processing, vol. 17, 2009, pp. 361{372.
[32] w. van der aalst, a. hofstede, yawl: yet another workow language,
information systems 30 (4) (2005) 245{275.
[33] w. van der aalst, verication of workow nets, in: p. az ema, g. balbo
(eds.), application and theory of petri nets 1997, vol. 1248 of lecture
notes in computer science, springer-verlag, berlin, 1997, pp. 407{426.
[34] w. van der aalst, formalization and verication of event-driven process
chains, information and software technology 41 (10) (1999) 639{650.
49[35] w. van der aalst, business process management demystied: a tutorial
on models, systems and standards for workow management, in: j. desel,
w. reisig, g. rozenberg (eds.), lectures on concurrency and petri nets,
vol. 3098 of lecture notes in computer science, springer-verlag, berlin,
2004, pp. 1{65.
[36] j. searle, speech acts, cambridge university press, cambridge, 1969.
[37] t. winograd, f. flores, understanding computers and cognition: a new
foundation for design, ablex, norwood, 1986.
[38] v. chaudhri, a. farquhar, r. fikes, p. karp, open knowledge base connec-
tivity 2.0, technical report ksl-09-06, stanford university ksl (1998).
[39] s. white, introduction to bpmn, bptrends.
[40] o. m. g. (omg), ocl 2.0 specication, omg document ptc/2005-06-06
(june 2005).
[41] hl7 reference information model (rim),
http://www.hl7.org/implement/standards/rim.cfm.
[42] r. mans, n. russell, w. van der aalst, p. bakker, a. moleman, proclets
in healthcare, bpm center report bpm-09-05, bpmcenter.org (2009).
[43] c. ellis, information control nets: a mathematical model of oce infor-
mation flow, in: proceedings of the conference on simulation, measure-
ment and modeling of computer systems, acm press, boulder, colorado,
1979, pp. 225{240.
[44] s. quaglini, m. stefanelli, a. cavallini, g. micieli, c. fassino, c. mossa,
guideline-based careow systems, articial intelligence in medicine 20 (1)
(2000) 5{22.
[45] k. kuhn, j. warren, t.-y. leong (eds.), improving compliance to guide-
lines through workow technology:implementation and results in a stroke
unit, no. 129 in studies in health technology and informatics, 2007.
50[46] a. zai, r. grant, g. estey, w. lester, c. andrews, r. yee, e. mort,
h. chueh, lessons from implementing a combined workowinformatics sys-
tem for diabetes management, journal of the american medical informatics
association 15 (2008) 524{533.
[47] l. maruster, w. van der aalst, a. weijters, a. van den bosch, w. daele-
mans, automated discovery of workow models from hospital data, in:
c. dousson, f. h oppner, r. quiniou (eds.), proceedings of the ecai
workshop on knowledge discovery and spatial data, 2002, pp. 32{36.
[48] m. stefanelli, knowledge and process management in health care orga-
nizations, methods inf med 43 (2004) 525{535.
[49] w. van der aalst, s. jablonski, dealing with workow change: identica-
tion of issues and solutions, international journal of computer systems,
science, and engineering 15 (5) (2000) 267{276.
[50] w. van der aalst, m. weske, d. gr unbauer, case handling: a new
paradigm for business process support, data and knowledge engineer-
ing 53 (2) (2005) 129{162.
[51] c. ellis, k. keddara, g. rozenberg, dynamic change within workow
systems, in: n. comstock, c. ellis, r. kling, j. mylopoulos, s. kaplan
(eds.), proceedings of the conference on organizational computing sys-
tems, acm sigois, acm press, new york, milpitas, california, 1995, pp.
10 { 21.
[52] m. klein, c. dellarocas, a. bernstein (eds.), adaptive workow systems,
special issue of computer supported cooperative work, 2000.
[53] p. dadam, m. reichert, k. kuhn, clinical workows - the killer ap-
plication for process-oriented information systems?, in: w. abramowicz,
m. orlowska (eds.), bis2000 - proc. of the 4th international conference
on business information systems, springer-verlag, poznan, poland, 2000,
pp. 36{59.
51[54] r. mans, w. van der aalst, n. russell, a. moleman, p. bakker, m. jaspers,
modern business process automation: yawl and its support environ-
ment, springer verlag, 20009, ch. yawl4healthcare, pp. 543{566.
[55] k. bhattacharya, c. gerede, r. hull, r. liu, j. su, towards formal anal-
ysis of artifact-centric business process models, in: g. alonso, p. dadam,
m. rosemann (eds.), international conference on business process man-
agement (bpm 2007), vol. 4714 of lecture notes in computer science,
springer-verlag, berlin, 2007, pp. 288{304.
[56] v. k unzle, m. reichert, towards object-aware process management sys-
tems: issues, challenges, benets, in: t. halpin, j. krogstie, s. nurcan,
e. proper, r. schmidt, p. soer, r. ukor (eds.), proc. 10th int'l workshop
on business process modeling, development, and support (bpmds'09),
vol. 29 of lecture notes in business information processing, springer-
verlag, berlin, 2009, pp. 197{210.
[57] d. m uller, m. reichert, j. herbst, a new paradigm for the enactment and
dynamic adaptation of data-driven process structures, in: r. meersman,
z. tari (eds.), advanced information systems engineering, vol. 5074 of
lecture notes in computer science, springer-verlag, berlin, 2008, pp. 48{
63.
[58] d. m uller, m. reichert, j. herbst, data-driven modeling and coordination
of large process structures, in: z. bellahs ene, m. l eonard (eds.), on
the move to meaningful internet systems 2007: coopis, doa, odbase,
gada, and is, vol. 4803 of lecture notes in computer science, springer-
verlag, berlin, 2007, pp. 131{149.
[59] e. browne, m. schre, j. warren, a two tier, goal-driven workow
model for the healthcare domain, in: proceedings of the 5th international
conference on enterprise information systems (iceis 2003), 2003, pp.
32{39.
52[60] e. browne, m. schre, j. warren, activity crediting in distributed work-
ow environments, in: proceedings of the 6th international conference on
enterprise information systems (iceis 2004), 2004.
[61] e. browne, m. schre, j. warren, goal-focused self-modifying workow
in the healthcare domain, in: proceedings of the 37th annual hawaii
international conference on system sciences (hicss-37 2004) - track 6,
ieee computer society press, 2004.
[62] k. bhattacharya, n. caswell, s. kumaran, a. nigam, f. wu, artifact-
centered operational modeling: lessons from customer engagements, ibm
systems journal 46 (4) (2007) 703{721.
[63] a. nigam, n. caswell, business artifacts: an approach to operational spec-
ication, ibm systems journal 42 (3) (2003) 428{445.
[64] p. barthelmess, j. wainer, workow systems: a few denitions and a few
suggestions, in: n. comstock, c. ellis (eds.), proceedings of the con-
ference on organizational computing systems - coocs'95, acm press,
milpitas, california, 1995, pp. 138{147.
[65] s. sadiq, m. orlowska, w. sadiq, k. schulz, when workows will not
deliver: the case of contradicting work practice, in: w. abramowicz (ed.),
proc. bis'05, 2005.
[66] m. adams, a. ter hofstede, d. edmond, w. van der aalst, facilitating
flexibility and dynamic exception handling in workows, in: o. belo,
j. eder, o. pastor, j. falcao e cunha (eds.), proceedings of the caise'05
forum, feup, porto, portugal, 2005, pp. 45{50.
[67] m. adams, a. ter hofstede, d. edmond, w. van der aalst, worklets: a
service-oriented implementation of dynamic flexibility in workows, in:
r. meersman, z. tari (eds.), proceedings the 14th international confer-
ence on cooperative information systems (coopis'06), vol. 4275 of lecture
notes in computer science, springer-verlag, 2006, pp. 291{308.
53[68] r. mans, n. russell, w. van der aalst, a. moleman, p. bakker, schedule-
aware workow management systems, in: d. moldt (ed.), proceedings
of the international workshop on petri nets and software engineering
(pnse09), 2009, pp. 81{96.
[69] k. lyng, t. hildebrandt, r. mukkamala, from paper based clinical prac-
tice guidelines to declarative workow management, in: d. ardagna,
m. mecella, j. yang (eds.), business process management workshops:
bpm 2008 international workshops, milano, italy, september 1-4, 2008.
revised papers, vol. 17 of lecture notes in business information process-
ing, springer-verlag berlin heidelberg, 2009, pp. 336{347.
[70] n. mulyar, m. pesic, w. van der aalst, m. peleg, declarative and proce-
dural approaches for modelling clinical guidelines: addressing flexibility
issues, in: a. ter hofstede, b. benatallah, h.-y. paik (eds.), business
process management workshops: bpm 2007 international workshops,
bpi, bpd, cbp, prohealth, refmod, semantics4ws, brisbane, australia,
september 24, 2007, revised selected papers, vol. 4928 of lecture notes in
computer science, springer-verlag berlin heidelberg, 2008, pp. 335{346.
[71] n. russell, w. van der aalst, a. ter hofstede, d. edmond, workow re-
source patterns: identication, representation and tool support, in: ad-
vanced information systems engineering, vol. 3520 of lecture notes in
computer science, 2005, pp. 216{232.
[72] m. wynn, h. verbeek, w. van der aalst, a. ter hofstede, business process
verication: finally a reality!, business process management journal 15 (1)
(2009) 74{92.
[73] j. jorgensen, s. tjell, j. fernandes, formal requirements modelling with
executable use cases and coloured petri nets, innovations in systems and
software engineering 5 (1) (2009) 13{25.
[74] j. jorgensen, k. lassen, w. van der aalst, from task descriptions via
colored petri nets towards an implementation of a new electronic patient
54record workow system, international journal on software tools for tech-
nology transfer (sttt) 10 (1) (2008) 15{28.
[75] t. herrmann, handbook of research on socio-technical design and social
networking systems, idea group publishing, 2009, ch. systems design
with the socio-technical walkthrough., pp. 336{351.
[76] k. jensen, l. kristensen, coloured petri nets: modelling and validation
of concurrent systems, springer, 2009.
[77] w. van der aalst, h. reijers, a. weijters, b. van dongen, a. a.
de medeiros, m. song, h. verbeek, business process mining: an industrial
application, information systems 32 (5) (2007) 713{732.
[78] a. de medeiros, w. van der aalst, a. weijters, workow mining: cur-
rent status and future directions, in: r. meersman, z. tari, d. schmidt
(eds.), on the move to meaningful internet systems 2003: coopis, doa,
and odbase, vol. 2888 of lecture notes in computer science, springer-
verlag, berlin, 2003, pp. 389{406.
55