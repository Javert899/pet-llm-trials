interactive process improvement using
simulation of enriched process trees
mahsa pourbafrani(b)and wil m. p. van der aalst
chair of process and data science, rwth aachen university, aachen, germany
{mahsa.bafrani,wvdaalst }@pads.rwth-aachen.de
abstract. event data provide the main source of information for ana-
lyzing and improving processes in organizations. process mining tech-
niques capture the state of running processes w.r.t. various aspects, suchas activity-ﬂow and performance metrics. the next step for process own-
ers is to take the provided insights and turn them into actions in order to
improve their processes. these actions may be taken in diﬀerent aspectsof a process. however, simply being aware of the process aspects that
need to be improved as well as potential actions is insuﬃcient. the key
step in between is to assess the outcomes of the decisions and improve-ments. in this paper, we propose a framework to systematically compare
event data and the simulated event data of organizations, as well as
comparing the results of modiﬁed processes in diﬀerent settings. the
proposed framework could be provided as an analytic service to enable
organizations in easily accessing event data analytics. the framework issupported with a simulation tool that enables applying changes to the
processes and re-running the process in various scenarios. the simula-
tion step includes diﬀerent perspectives of a process that can be capturedautomatically and modiﬁed by the user. then, we apply a state-of-the-art
comparison approach for processes using their event data which visually
reﬂects the eﬀects of these changes in the process, i.e., evaluating theprocess improvement. our framework also includes the implementation
of the change measurement module as a tool.
keywords: process mining
·business process improvement ·process
simulation ·earth mover’s distance ·performance spectrum
1 introduction
process owners use data-driven process mining techniques to improve their pro-
cesses. the discovered process models, their performance states, and hiddenproblems, such as deviations and bottlenecks, are critical to process improve-
ment. the process mining techniques in the process discovery and conformance
checking areas are widely used to illustrate the current states of processes andtheir potential problems [ 1]. however, before taking any action based on process
mining diagnostics, one wants to have an estimation of the impact. to do so,
it is required to play out the processes with the process owners’ adjustments
c/circlecopyrtspringer nature switzerland ag 2022
h. hacid et al. (eds.): icsoc 2021 workshops, lncs 13236, pp. 61–76, 2022.https://doi.org/10.1007/978-3-031-14135-5
_562 m. pourbafrani and w. m. p. van der aalst
and then assess the eﬀects of the actions. to improve processes in an evidence-
based manner, forward-looking process mining techniques such as prediction and
simulation are needed. they enable what-if and scenario-based analyses of busi-
ness processes. however, the validity of the generated results, as well as their
clear interpretation, are two determining factors when employing these tech-niques. the model’s reliability can be improved by incorporating process mining
insights, e.g., the designed simulation model is derived directly from the process’s
historical event data [ 2].
techniques such as generating cpn models [ 12,14,22] and bpmn models
[3] have been proposed for generating simulation models of processes based on
event logs. simulation approaches in process mining are also useful for otherapplications. in [ 23], for example, process model simulations are used to esti-
mate the alignment value. the gap that we aim to ﬁll is not only providing
a platform for users to easily re-run their processes using the automatically
generated simulation models but also a more accurate technique for measuring
improvement/changes w.r.t. the process owners’ interactions with the process.the conventional comparison of two processes includes conformance checking
between the event logs and the corresponding process models. in addition, for
the purpose of performance comparison, general performance metrics are usu-ally considered. most of the current approaches are not detailed enough in both
aspects, i.e., conformance checking and performance analysis. these techniques
do not measure and reﬂect the eﬀect of changes at the detailed level. for instance,the existing conformance checking techniques only return a value such as the ﬁt-
ness of two event logs, or one event log and the corresponding process model
[4]. these techniques also neglect the importance of the frequency of process
instances. the detailed distance between the original event log and the regener-
ated event log is critical for determining their similarity [ 19].
in this paper, we propose an approach to systematically compare the event
data of a process with its simulated event data to assess the reliability of the
simulation model, i.e., the accuracy of the simulation. as a result, the simu-
lated processes in diﬀerent settings can be compared. the simulation module
is implemented as a new software capturing diﬀerent process perspectives, in
which the event logs are used to enrich the process models (trees) with exist-ing aspects. the enriched process trees generate process behaviors in the form of
event logs with/without applied changes to the process. the state-of-the-art com-
parison framework is then applied to the results of the simulation. it measuresthe eﬀects of changes using detailed conformance and performance techniques.
to demonstrate a proof of concept of the framework, we use a sample process as
an example to illustrate the approach steps. then, we employ a real-life eventlog to evaluate the approach.
the remainder of this paper is structured as follows. we present the related
work in sect. 2. in sect. 3, we introduce background concepts and notations. in
sect.4, we present our main approach. we evaluate the approach in sect. 5by
designing simulation models, and sect. 6concludes this work.interactive process improvement 63
2 related work
process mining enables designing data-driven simulation models of processes
[2]. authors in [ 22] use diﬀerent aspects of a process using its event data, e.g.,
process models, resource pooling, and performance metrics, and automaticallygenerate simulation models. this work as a pioneer in the data-driven simulation
in process mining translates insights from event data into the process simula-
tion parameters. other simulation approaches in process mining follow the samedirection. for instance, [ 21]u s e s stochastic petri nets to simulate processes and
determine the duration of instances in business processes. in [ 18] a business sim-
ulation model is generated which is based on the user domain knowledge. toolsbased on protos try to reduce modeling eﬀorts by introducing the reference pro-
cess models [ 24]. [9] discusses how process mining insights can be exploited in
the business process simulation context. as an example, the proposed tool in [ 3]
presents the idea of combining bpmn and process mining for simulation pur-
poses, where indicators for measuring the accuracy of the simulation results arealso introduced.
in [11,15], diﬀerent levels of simulating processes are proposed where all
the aspects of a process are extracted at diﬀerent levels, i.e., not only instancelevel but also higher-level, e.g., describing processes per day quantitatively. the
examples of high-level simulations are presented in [ 16,17] with the use of the
designed tool for the modeling and data extraction steps in [ 10]. in our approach,
the enriched process models, e.g., process trees, accuracy of the performance-
related aspects, eﬀortless interaction with users, and social network analysis
(resource aspects) are the main criteria for designing simulation models.
on the other side, visualization techniques are powerful tools in process min-
ing analysis in both descriptive and predictive analyses. there are a couple of
visualization techniques that are able to represent the process w.r.t. diﬀerent pro-cess aspects for providing visual inspection or process comparison. for instance,
the performance spectrum [ 5] represents the process performance behaviors in
detail between every two sets of activities in the process. i.e., process segments.
the stochastic conformance checking method used in [ 20] considers the frequency
of the traces in two event logs while comparing their diﬀerences. the idea of usingearth mover’s distance for conformance checking and comparing two event logs,
or event logs and process models enables assessing the diﬀerence of two processes
w.r.t. their behaviors in detail.
we provide a platform for regenerating a process in diﬀerent settings and
measure the eﬀects of changes/results using our designed modules based on the
presented ideas. the presented tool in [ 13] is the simulation approach taken in
the current work as the intermediate tool for regenerating the process behaviors.
the process trees are automatically generated and enriched with the probability
and performance information and allow us to change the processes w.r.t. theactivity-ﬂow and performance aspects.64 m. pourbafrani and w. m. p. van der aalst
table 1. a part of a sample event log. each row represents an event.
case id activity resource timestamp
e11 register request pete 12/30/2010 11:02
e22 register request mike 12/30/2010 11:32
3 register request pete 12/30/2010 14:32
... 1 examine thoroughly sue 12/31/2010 10:06
2 decide sara 1/5/2011 11:22
1 decide sara 1/6/2011 11:18
1 reject request pete 1/7/2011 14:24
en... ... ... ...
3 preliminaries
in this section, we establish the basic notations for events, event logs, and process
trees which are used in the framework.
deﬁnition 1 (event). letabe the universe of activities, tbe the universe
of timestamps, rbe the universe of resources, and cbe the universe of case
identiﬁer. an event e is a tuple e=(c,a,r,t )where activity aat time tfor case
cis performed by resource r.e=c×a×r×t is the universe of events. for
eache∈e,πd(e)projects eon the attribute from domain d, e.g., πa(e)=a.
deﬁnition 2 (trace). letebe the universe of events, a trace σ∈e∗is a ﬁnite
sequence of events. for each σ=/angbracketlefte1,...,e n/angbracketright,ei∈σhappens at most once and
for each ei,ej∈σ, πc(ei)=πc(ej)∧πt(ei)≤πt(ej),if1≤i<j≤n.f o r σ=
/angbracketlefte1,...,e n/angbracketright∈e∗,πd(σ)=/angbracketleftπd(e1),πd(e2),...,π d(en)/angbracketrightis the projection of trace σ
on the attribute from domain d, e.g., πa(σ)=/angbracketleftπa(e1),πa(e2),...,π a(en)/angbracketright.
deﬁnition 3 (event log). letebe the universe of events and e∗be the set
of possible traces, we deﬁne an event log las a set of traces, i.e., l⊆e∗.
we denote la=[πa(σ)|σ∈l] as the multiset of traces projected on the
activity attribute. furthermore, /tildewiderla={σ∈la}is the set of unique traces
(variants) projected on the activity attribute in the event log l. we refer to /tildewiderla
as the set of process behaviors presented in l.
fig. 1. a part of the discovered process
tree for the sample event log.table 1represents a part of a sam-
ple event log, where each row indi-cates an event, e.g., considering the ﬁrst
row as e
1,πc(e1)=1a n d πa(e1)=
register request . process mining utilizes
such event logs to discover running pro-
cesses inside organizations. the process
models are the representative ways ofthe discovered running processes. the
process tree notation is one of the common approaches to present a process,
where the nodes of trees are operators and leaves are activities in the process.interactive process improvement 65
a part of the process tree representing the example process is shown in
fig.1. for example, there is a choice, i.e., xor (×) as a node between activ-
ityreject request andpay compensation indicating that in the process either a
request is rejected or the compensation is paid. the root node ( →) indicates that
activity register request is always followed by a loop ( /clockwise). a loop represents a redo
of works between its children, i.e., activities in the leaves of a loop node may hap-
pen multiple times in a trace. furthermore, the notation of τis for silent activities
which are not visible in the process but used for the representation of process trees.
deﬁnition 4 (process tree). letlbe an event log, al={a∈σ|σ∈/tildewiderla}be
the set of activities in landop={→,×,/clockwise,+}be the set of process operators.
ifa∈al∪{τ}, then q=ais a process tree. if n≥1,q1,q2,q3,...,q nare
process trees, and op∈{ →,×,+}, then q=op(q1,q2,...,q n)is a process tree.
ifn≥2andq1,q2,q3,...,q nare process trees, then q=/clockwise(q1,q2,...,q n)is
a process tree. for a process tree q, we denote qaandqopas the set of activities
and the set of operators in q.
for a given process tree q,qw=qop×qais the set of edges connecting
operators to activities. for instance, ( →,register request ) is an edge in the
example process tree in fig. 1where register request is child of the tree under
parent →. note that a process tree may also contain edges from an operator to
an operator, which is not relevant in the implementation of our framework.
4 approach
our framework enables interactive process improvement inside organizations for
designing/improving process models. the current behaviors of processes cap-tured in the form of an event log serve as the starting point for any improve-
ment. to enrich the discovered process models, process discovery, performance
analysis, and social network analysis (resource perspective) techniques are used.we use the discrete event simulation (des) technique as a tool to play out
the process with the current states, which results in an event log as shown in
fig.2. the original behavior of the event log w.r.t. activity-ﬂow (process behav-
ior) and performance metrics are compared to ensure that the automatically
designed simulation model is reliable and behaves close to reality, improvement
measurement module in fig. 2. this step allows the user to change the process
parameters and re-run the process to generate the new behavior and measure the
process improvement, depicted by the dotted lines in fig. 2. these measurements
are presented in a numerical format as well as in a detailed graphical format. the
detailed comparative visualization increases the interaction between the frame-
work and the user. first, we explain the automatic generation of the simulationresults, including process mining techniques and enriching the process model,
and continue with the improvement measurement module.
4.1 simulating process trees
enriching process trees. the inductive miner algorithm [ 7]i su s e dt od i s -
cover the process model since it is capable of capturing all the behaviors in66 m. pourbafrani and w. m. p. van der aalst
fig. 2. the overview of the framework to improve the processes interactively. the
straight lines show the path to assess the quality of the regenerated behavior by the
simulation model w.r.t. activity-ﬂow and performance metrics. the dotted lines illus-trate the path that the user is able to change the process and measure and observer
the improvement, i.e., the eﬀect of changes, in the process.
a process in the form of a process model. the generated process tree by the
inductive miner algorithm is able to represent the traces in the event log. theprocess tree’s limited number of operators as deﬁned in deﬁnition 4allows for
easy understanding and modiﬁcation of the process. to play out the process
accurately, i.e., applying the new changes in the process, more information thanthe ﬂow of activities provided by the process tree is required.
the tree should be enriched with the probability of activity-ﬂows, perfor-
mance information of the activities, and the corresponding resource information,e.g., organizations of the resources, the number of resources in each organiza-
tion, and hand-over of activities between resources, for each activity from the
real process. therefore, the probability of the choices and the possible number
of loops should be taken into account for regenerating a similar event log. fur-
thermore, for a process tree qand the edge w=(op,a)∈q
w,warepresents
the probability of occurrence of activity ain a generated trace from the process
tree. for the edge w=(op,a)∈qw,i fop∈{ →,+,/clockwise}, then wa= 1. note that
to avoid the generation of inﬁnite traces due to the loops in the process tree, welimit the execution of loops in the simulation with the probability of the number
of occurrences of a loop on average in a trace and the maximum times that a
loop happens in a trace. for all activities a∈q
a, there is a binding performance
metric, i.e., the average duration of each activity. moreover, the activities are
assigned to the existing automatically discovered organizations and the capacity
of the resources.
for the example process shown in fig. 1, a part of the automatically enriched
tree with the activity-ﬂow, performance, and resource information is presented
in fig. 3. for instance, for the process edge w=(×,reject request ),wrej=
0.5, and the shown loop in the process can be executed at most 2 times in a
trace and the probability of its occurrence is 30% which is derived from the
event log. activity register request takes on average 43000 s to be performed,interactive process improvement 67
fig. 3. enriched tree with the probability information, resource allocation, and dura-
tion of each activity. the enriched process tree can be simulated. the hand-over of
resources is shown (left) to provide more accurate simulation results (event logs) w.r.t.the resource allocation in the organizations.
table 2. the general list of automatically discovered insights using process mining
techniques to form process simulations. the top row shows what is discovered from
event data. the bottom row shows what can be set or change by the user.
process mining simulation executionparameters
processmodel(tree)arrivalrate activityduration,deviationactivitiescapacity activities uniqueresources (sharedresources)waitingtime businesshours activity-ﬂowprobabilityprocesscapacity(cases)interruption(process, cases,activities)start time ofsimulation numberof cases
automaticallydiscovered + + + + + + + + + + − −
changeableby user + + + + + + + + + + + +
and the average is used for simulating its duration using a normal distribution.
also, register request andreinitiate request b e l o n gt ot h e customer service
organization where the resources in this organization hand over tasks to the
inspector organization.
the information extracted from event logs is shown in table 2. this infor-
mation, along with the discussed information for enriching process trees are the
required simulation parameters. moreover, the changeable aspects for processimprovement by the user in the simulation step are speciﬁed in detail. the dis-
covery and design of the simulation models including generating event logs as a
result of the simulation models are represented in detail in [ 13].
4.2 measuring the process improvement
to measure the changes in the newly generated process represented with an
event log, we have to compare two event logs. for comparing two processes, i.e.,
event logs, two major aspects of the processes should be considered, activity-
ﬂow which generates the behaviors, and the performance aspects. note that theintermediate regenerator tool can be diﬀerent from the one that we use in our
f r a m e w o r k ,a n dy e tt h e measuring the process improvement module can be used
for measuring the eﬀect of changes in two event logs.68 m. pourbafrani and w. m. p. van der aalst
table 3. a sample example of emd measurement for two event logs [ 19]. the real-
location function allocates the 49 traces in lto 49 traces with activity-ﬂow /angbracketlefta, e, c, d /angbracketright
and 1 remaining trace to /angbracketlefta, b, c, d /angbracketrightinl/prime. the sum of the value of the table indicates the
general emd value, i.e., the diﬀerence between the two event logs. each cell represents
the minimum cost to map its corresponding trace in the original event log (row) into
the traces in the simulated event log (column).
la l/prime
a
/angbracketlefta, b, c, d /angbracketright/angbracketlefta, c, b, d /angbracketright/angbracketlefta, e, c, d /angbracketright49/angbracketlefta, e, b, d /angbracketright49
/angbracketlefta, b, c, d /angbracketright50 1
100×00×0.549
100×0.250×0.5
/angbracketlefta, c, b, d /angbracketright500×0.51
100×00×0.549
100×0.25
activity-flow behaviors. the fact that process trees include silent transi-
tions, loops, and xor operators makes generating more behavior (new traces)
than the existed ones in the original log possible. therefore, the similarity of
behaviors is one of the main indicators in the comparison step.
given two event logs, the original event log land the simulated event log l/prime,
we show the presented behaviors in each event log using their set of unique traces,
i.e.,/tildewidela,/tildewidel/primea. the new generated behaviors in the simulated event log, i.e., not
existing in the original event log, and the removed behaviors from the original
process are calculated as /tildewidel/primea\/tildewidela,a n d/tildewidela\/tildewidel/primea, respectively. therefore,|/tildewiderl/primea\/tildewidela|
|/tildewidela∪/tildewiderl/primea|
and|/tildewidela\/tildewiderl/primea|
|/tildewidela∪/tildewiderl/primea|are the fraction of the new and removed behaviors, respectively.
these metrics represent the pairwise diﬀerence between two event logs. they
evaluate whether the simulation of the original log is close to reality, as well as
capturing any diﬀerent behavior added/removed due to the changes in a process
tree (ﬂow of activities). in the example process presented in fig. 1, after regen-
erating the process without any change multiple times, on average 22% of the
generated variants (unique traces) in the simulated logs are newly generated.the sample event log for further experiments with the tools is publicly avail-
able
1. furthermore, the precise comparison of two event logs should be based on
their behavior, taking into account the frequency of the behavior. to determinethe diﬀerence between the original and the simulated event logs, we employ a
stochastic conformance checking approach.
earth mover’s distance conformance checking. to accurately compare
two event logs’ behaviors, we use the probability distance of each two traces
in two event logs based on earth mover’s distance (emd). to calculate theemd measurement between two event logs, we use the conformance techniques
presented in [ 6]. for every trace in the original log, we calculate the movement
of its frequency to all the traces in the simulated event log using the reallocationfunction. as the next step, the cost of the movement is considered using the
trace distance function.
1https://github.com/mbafrani/visualcomparison2eventlogs .interactive process improvement 69
fig. 4. the detailed comparison of two event logs for the sample process, i.e., the results
of emd measurement. it is the results of the emd reallocation and trace distance
functions in the form of a table such as table 3. the points are the proportional cost
of moving every trace in one event log to the simulated event log. each row (color)
indicates a trace in the original event log. the black points are similar traces in bothevent logs. the sizes of the points are the relative costs of movement for each variant
(unique traces) in the original event logs.
reallocation. letlandl/primebe the original and the simulated event logs, respec-
tively. function r∈/tildewidela×/tildewidel/primea→[0,1] returns the relative frequency of σ∈/tildewidela
that should be transformed to σ/prime∈/tildewidel/primea, i.e., r(σ, σ/prime). note that for all σ∈/tildewidela,
la(σ)
|la|=/summationtext
σ/prime∈/tildewiderl/primear(σ, σ/prime), i.e., the frequency of each σ∈/tildewidelais considered prop-
erly. the same should be considered for each σ/prime∈/tildewidel/primea.
trace distance. the distance between each two traces in the original log and the
simulated logs is calculated based on normalized string edit distance (levenstein)
[8]. function d∈a∗×a∗→[0,1] calculates the distance between two traces,
where for two similar traces the value is 0 and d(σ, σ/prime)=d(σ/prime,σ).
to represent the algorithm clearly, we reduced the sample process and pre-
sented a couple of traces in table 3. the emd measurement of the two event
logs is emd (la,l/prime
a) = min
r∈rr.d=/summationtext
σ∈/tildewidela/summationtext
σ/prime∈/tildewiderl/primear(σ, σ/prime)d(σ, σ/prime) where ris
the universe of reallocation functions. table 3represents a sample emd mea-
surement for two sample event logs landl/prime. for instance, for /angbracketlefta,b,c,d /angbracketright50in
land/angbracketlefta,e,c,d /angbracketright49inl/prime, the trace distance value is 0 .25 given the diﬀerences
between two traces using normalized string edit distance (levenstein). the real-
location value is 0 .49, i.e., 49 of 100 traces in lare reallocated to 49 traces with
the sequence /angbracketlefta,e,c,d /angbracketrightinl/prime. therefore, the minimum eﬀort of mapping the one
trace to the second one is 0 .49∗0.25 = 0 .122. besides the emd value of two
event logs that indicates how two event logs are diﬀerent, we are interested in the
required eﬀort for every trace in the original event log to be mapped/transformed
into the simulated event log for accurate comparison of the simulation results.70 m. pourbafrani and w. m. p. van der aalst
applying the designed emd measurement to the complete sample process
and its simulated event log without any changes, fig. 4illustrates the result. the
unique traces in the original event log and the unique traces in the simulated event
log are depicted using the x-axis and the y-axis, respectively. if we assume that in
our example, r∈ris the reallocation function, the cost of emd (eﬀort of map-
ping) for each point of fig. 4shows the relative eﬀort, i.e., σ∈/tildewidelaand for each σ/prime
i∈
/tildewidel/primea,eﬀortla,la(σ, σ/prime
i)=d(σ,σ/prime
i).r(σ,σ/prime
i)/summationtext
σ/prime∈/tildewiderl/primed(σ,σ/prime).r(σ,σ/prime). the most frequent trace in the orig-
inal event log (ﬁrst row) will be converted to the (74 .98%,0,0,0,0,0,0,25.02%),
i.e., points in the ﬁrst row. the values indicate that to map the ﬁrst trace in the
original event log (most frequent one) to the simulated event log 74 .98% of the
eﬀort is to map it to the ﬁrst (most frequent trace) in the simulated event log,i.e.,eﬀort
la,la(σ1,σ/prime
1) = 75%. also, each row illustrates the minimum required
eﬀort to map/transform the traces into the simulated event log.
performance behaviors. performance is the second factor to consider when
assessing improvement/changes. however, because the times are abstracted from
the real data in prediction and simulation techniques, exact measurements are
impossible. it is worth noting that in many cases, time-related parameters suchas the duration of simulation events are generated using a random function, e.g.,
normal distribution in our case. general performance kpis at a high level of
aggregation, e.g., the average waiting time of traces, or average service time aretoo abstract to represent the eﬀects of the changes in the process. therefore,
besides the usual metrics, we use the performance spectrum, which relies on the
structure of the process and directly reﬂects the eﬀects of changes in speciﬁcparts of the process on others. for instance, changing the current service time
of the activity examine thoroughly in the example process has an impact not
only on the overall metrics but also on the duration of the later activities in thetraces, e.g., decide orreinitiate request .
aggregated performance spectrum. performance spectrum is a concept intro-
duced to visualize the performance of process steps at the detailed level. a
process segment in event log lis a step from activity ato activity b, i.e., ( a,b)∈
a
l×alis a process segment in lwhere al={a∈σ|σ∈/tildewidela}. each occurrence
of a segment in a trace allows measuring the time between occurrences of aand
b[5]. we deﬁne the set of all tuples of events that are directly followed in the
traces in lassegl={(ei,ei+1)|∃σ=/angbracketlefte1,e2,...,e n/angbracketright∈lei,ei+1∈σ}. the projection
of the events in seglon their activity attribute provides the multiset of pro-
cess segments, i.e., segl
a=[ (πa(e1),πa(e2))|(e1,e2)∈segl]. for instance,
[(examine thoroughly,decide )17,(examine thoroughly,reinitiate request )20]i s
the part of the multiset of segments in our example.
we consider two aspects for representing a process segment in an event
log:average time of the segment and frequency of the segment. for seg=
(a,b)∈segl
a, function ps(seg,l )=( avgtime (seg,l ),freq (seg,l )) rep-
resents the frequency of the process segment segand the corresponding aver-
age time diﬀerence for the segment. for seg=(a,b)∈segl
a, we deﬁneinteractive process improvement 71
fig. 5. part of the performance measurement for the example process based on the
aggregated performance spectrum. each event log is represented by a diﬀerent color,i.e., blue for the original and yellow for the simulated one. overlapping segments are
represented by the gray color (same duration between segments). each point’s trans-
parency and size indicate the frequency and duration of the segment in the event logs.(color ﬁgure online)
avgtime (seg,l )=avg({πt(e2)−πt(e1)|(e1,e2)∈segl∧πa(e1)=a∧
πa(e2)=b})a n d freq(seg,l )=segl
a((a,b)).
figure 5is the result of the introduced performance measurement ( ps)f o r
the example process and the regenerated event log. in order to represent diﬀerent
aspects of the results, e.g., new/eliminated segments and diﬀerent duration, we
performed the simulation based on the changed process. for instance, given l
andl/primeas the original and simulated event logs, each segment’s colors refer to
an event log, the size refers to the average time diﬀerence between the segments,
and the transparency indicates the frequency (darker means more frequent).the gray color represents the overlapped segment in two event logs with similar
performance metrics, and the yellow points represent the new segment generated
in the simulated event log as a result of process tree choices. the implementationalso includes the option to display only the diﬀerence (red points).
5 evaluation
a real event log representing the process of taking loans by customers inside
a ﬁnancial company, known as the bpi challenge 2012 , is used in this section.
first, we simulate a similar process with diﬀerent conﬁgurations and assess howclose they are to the original event log. following that, we alter the activity-ﬂow
of the process model in order to improve the process and evaluate the eﬀect
of the applied changes. having both simulated and original behaviors of the72 m. pourbafrani and w. m. p. van der aalst
fig. 6. the comparison of the generated event logs using simulating a speciﬁc num-
ber of traces in the original event log (bpi challenge 2012). the emd measurement
indicates, how the original and the simulated event logs are diﬀerent.
process (with or without modiﬁcations) the possibility of comparing between two
processes is easily provided. to do so, we used our tool simpt2for simulating
the process, and our developed modules for comparing two event logs w.r.t.
the detailed performance and control ﬂow aspects3. the provided tools make it
possible to evaluate the framework for the interactive improvement of diﬀerentprocesses for diﬀerent event logs.
we start with automatically discovering and enriching the underlying pro-
cess tree before regenerating the process, where the similarity of the two eventlogs indicates the possibility of using the simulation models for further investiga-
tion. therefore, we simulated the event log multiple times without applying any
changes. as shown in fig. 6, we took a speciﬁc percentage of the total number
of traces in the process for each round of simulation of the original process. as
expected, when the number of simulated traces is small, there is a chance ofmissing speciﬁc process behaviors, e.g., using 25% of the number of traces, we
lost 30% of the behaviors (unique traces). on the other hand, increasing the
number of simulated traces increases the number of new behaviors. since thegeneration of the traces (activity-ﬂow) is based on probability and the process
tree includes both xor choices and silent transitions, the new behaviors are
expected to be generated.
afterward, in the process tree of the original process, we changed the optional
activity preaccepted to be a mandatory activity for all the traces that are going
to be accepted in fig. 7. the structure of the process tree (activity-ﬂow) is
changed from
→(submitted, partlysubmitted, ×(τ, preaccepted ),×(τ, accepted ),
×(τ,finalized ),×(declined, cancelled )) to →(submitted, partlysubmitted, ×(τ,
→(preaccepted, accepted )),×(τ,finalized ),×(declined, cancelled )).note that these
changes are possible in diﬀerent aspects of the process such as the process
model, performance metrics, e.g., activity duration, arrival rate of the traces, or
capacity of the resources.
based on the shown results of simulating the original event log without any
changes in fig. 8, we simulated the changed process model with 50% of original
2https://github.com/mbafrani/simpt-simulatingprocesstrees .
3https://github.com/mbafrani/visualcomparison2eventlogs .interactive process improvement 73
fig. 7. the process tree for handling application in the bpi challenge 2012 event logs
(left). to evaluate the approach, the optional activity preaccepted is changed to be
mandatory in the ﬂow of activities for all the traces (right) in the process. dotted lines
indicate the parts of the tree that have changed.
fig. 8. the detailed comparison of the changed process and the original process model.
the detailed emd diagram (left) shows the diﬀerences of the two event logs w.r.t. the
activity-ﬂow and the comparing frequent chart (right) represents the preserved andremoved behavior in the simulated process as the eﬀect of the applied changes.
traces. in the proposed scenario (changed process tree), 63 .6% of generated behav-
iors (unique traces) are new. however, it is less than the behaviors in the simulated
event log without any modiﬁcations, since we removed one of the xor choices lim-
iting the possibilities of producing new behaviors. on the other hand, 23% of thebehaviors due to the change in the process tree are eliminated, i.e., the traces that
skipped the activity preaccepted in the original process. also, in fig. 6, the pair-
wise comparison of the traces (right), as well as the detailed emd companions forthe cost of the mapping of two event logs (left) after the changes, are shown. the
applied changes in the process model not only aﬀected the process behavior but
also these changes aﬀected the performance of the later segments in the process,e.g., the duration for the process segment accepted andﬁnalized increased while
activity ﬁnalized was not changed. the provided detailed comparison along with
the intermediate simulation tool enables the possibility of capturing these types ofunexpected insights. note that the reliability of the simulation techniques such as
the presented ones in sect. 2can be assessed using the measurement modules.74 m. pourbafrani and w. m. p. van der aalst
6 conclusion
process mining supports organizations in ﬁnding running processes, as well as
identifying challenges or possible areas for improvement. the process improve-
ment should be supported with process knowledge. we use process mining
insights and simulation models as an intermediate method to regenerate pro-cesses in various scenarios. the framework begins with an event log, discovers
a process tree, and enriches it with all the knowledge needed to regenerate the
process. the similarity of the simulated results and the original process behav-
ior in the form of an event log is then measured in the next step. the degree
of similarity reﬂects the accuracy of our model. as a result, the improvementof the change in the process can be played out, and the impact of changes can
be tracked using the same measurement module in both the activity-ﬂow and
performance aspects of the process. the advantage of our framework in both gen-erating simulation models and enriching them based on event logs automatically,
and the new representation of the comparing of the event logs. furthermore, the
intermediate simulation technique described in this paper can be replaced withother simulation techniques capable of generating event logs for the speciﬁed
changes.
acknowledgments. funded by the deutsche forschungsgemeinschaft (dfg, ger-
man research foundation) under germany’s excellence strategy-exc-2023 internet
of production - 390621612. we also thank the alexander von humboldt (avh) stiftungfor supporting our research.
references
1. van der aalst, w.m.p.: process mining - data science in action, 2nd edn. springer,
heidelberg (2016). https://doi.org/10.1007/978-3-662-49851-4
2. van der aalst, w.m.p.: process mining and simulation: a match made in heaven!
in: computer simulation conference, pp. 1–12. acm press (2018)
3. camargo, m., dumas, m., rojas, o.g.: simod: a tool for automated discovery of
business process simulation models, pp. 139–143 (2019)
4. carmona, j., van dongen, b.f., solti, a., weidlich, m.: conformance checking -
relating processes and models. springer, cham (2018). https://doi.org/10.1007/
978-3-319-99414-7
5. denisov, v., fahland, d., van der aalst, w.m.p.: unbiased, ﬁne-grained description
of processes performance from event data. in: weske, m., montali, m., weber, i.,
vom brocke, j. (eds.) bpm 2018. lncs, vol. 11080, pp. 139–157. springer, cham
(2018). https://doi.org/10.1007/978-3-319-98648-7 9
6. leemans, s.j.j., syring, a.f., van der aalst, w.m.p.: earth movers’ stochas-
tic conformance checking. in: hildebrandt, t., van dongen, b.f., r¨ oglinger, m.,
mendling, j. (eds.) bpm 2019. lnbip, vol. 360, pp. 127–143. springer, cham
(2019). https://doi.org/10.1007/978-3-030-26643-1 8
7. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured
process models from incomplete event logs. in: ciardo, g., kindler, e. (eds.)
petri nets 2014. lncs, vol. 8489, pp. 91–110. springer, cham (2014). https://
doi.org/10.1007/978-3-319-07734-5 6interactive process improvement 75
8. levenshtein, v.i.: binary codes capable of correcting deletions, insertions, and
reversals. in: soviet physics doklady, vol. 10, pp. 707–710. soviet union (1966)
9. martin, n., depaire, b., caris, a.: the use of process mining in business process
simulation model construction. bus. inf. syst. eng. 58(1), 73–87 (2016). https://
doi.org/10.1007/s12599-015-0410-4
10. pourbafrani, m., van der aalst, w.m.p.: pmsd: data-driven simulation in process
mining. in: proceedings of the demonstration track at bpm 2020 co-located with
18th international conference on business process management, bpm, pp. 77–81
(2020). http://ceur-ws.org/vol-2673/paperdr03.pdf
11. pourbafrani, m., van der aalst, w.m.p.: extracting process features from event
logs to learn coarse-grained simulation models. in: la rosa, m., sadiq, s., teniente,e. (eds.) caise 2021. lncs, vol. 12751, pp. 125–140. springer, cham (2021).
https://doi.org/10.1007/978-3-030-79382-1
8
12. pourbafrani, m., balyan, s., ahmed, m., chugh, s., van der aalst, w.m.p.:
gencpn: automatic generation of cpn models for processes (2021)
13. pourbafrani, m., jiao, s., van der aalst, w.m.p.: simpt: process improvement
using interactive simulation of time-aware process trees. in: cherﬁ, s., perini, a.,nurcan, s. (eds.) rcis 2021. lnbip, vol. 415, pp. 588–594. springer, cham (2021).
https://doi.org/10.1007/978-3-030-75018-3
40
14. pourbafrani, m., vasudevan, s., zafar, f., xingran, y., singh, r., van der aalst,
w.m.p.: a python extension to simulate petri nets in process mining. corr
abs/2102.08774 (2021)
15. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: semi-automated time-
granularity detection for data-driven simulation using process mining and system
dynamics. in: dobbie, g., frank, u., kappel, g., liddle, s.w., mayr, h.c. (eds.)
er 2020. lncs, vol. 12400, pp. 77–91. springer, cham (2020). https://doi.org/
10.1007/978-3-030-62522-1 6
16. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting automatic
system dynamics model generation for simulation in the context of process mining.in: abramowicz, w., klein, g. (eds.) bis 2020. lnbip, vol. 389, pp. 249–263.
springer, cham (2020). https://doi.org/10.1007/978-3-030-53337-3
19
17. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting decisions in
production line processes by combining process mining and system dynamics. in:
ahram, t., karwowski, w., vergnano, a., leali, f., taiar, r. (eds.) ihsi 2020.
aisc, vol. 1131, pp. 461–467. springer, cham (2020). https://doi.org/10.1007/
978-3-030-39512-4 72
18. pufahl, l., weske, m.: extensible bpmn process simulator. in: proceedings of the
bpm demo track and bpm dissertation award co-located with 15th internationalconference on business process modeling (bpm) (2017)
19. raﬁei, m., van der aalst, w.m.p.: towards quantifying privacy in process mining.
in: leemans, s., leopold, h. (eds.) icpm 2020. lnbip, vol. 406, pp. 385–397.
springer, cham (2021). https://doi.org/10.1007/978-3-030-72693-5
29
20. raﬁei, m., schnitzler, a., van der aalst, w.m.p.: pc4pm: a tool for pri-
vacy/conﬁdentiality preservation in process mining. in: proceedings of the demon-
stration track at bpm co-located with 19th international conference on business
process management (bpm), vol. 2973, pp. 106–110. ceur-ws.org (2021)
21. rogge-solti, a., weske, m.: prediction of business process durations using non-
markovian stochastic petri nets. inf. syst. 54, 1–14 (2015)
22. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation
models. inf. syst. 34(3), 305–327 (2009)76 m. pourbafrani and w. m. p. van der aalst
23. sani, m.f., gonzalez, j.j.g., van zelst, s.j., van der aalst, w.m.: conformance
checking approximation using simulation. in: 2020 2nd international conference
on process mining (icpm), pp. 105–112 (2020)
24. verbeek, e., van hattem, m., reijers, h., de munk, w.: protos 7.0: simula-
tion made accessible. in: ciardo, g., darondeau, p. (eds.) icatpn 2005. lncs,
vol. 3536, pp. 465–474. springer, heidelberg (2005). https://doi.org/10.1007/
11494744 27