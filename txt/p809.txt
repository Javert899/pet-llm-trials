software and systems modeling manuscript no.
(will be inserted by the editor)
business process management as the \killer
app" for petri nets
w.m.p. van der aalst
department of mathematics and computer science, eindhoven university of
technology, eindhoven, the netherlands;
business process management discipline, queensland university of technology,
brisbane, australia; and
international laboratory of process-aware information systems, national re-
search university higher school of economics, moscow, russia.
e-mail: w.m.p.v.d.aalst@tue.nl
received: date / revised version: date
abstract since their inception in 1962, petri nets have been used in
a wide variety of application domains. although petri nets are graphical
and easy to understand, they have formal semantics and allow for analysis
techniques ranging from model checking and structural analysis to process
mining and performance analysis. over time petri nets emerged as a solid
foundation for business process management (bpm) research. the bpm
discipline develops methods, techniques, and tools to support the design,
enactment, management, and analysis of operational business processes.
mainstream business process modeling notations and workow manage-
ment systems are using token-based semantics borrowed from petri nets.
moreover, state-of-the-art bpm analysis techniques are using petri nets as
an internal representation. users of bpm methods and tools are often not
aware of this. this paper aims to unveil the seminal role of petri nets in
bpm.
key words business process management { petri nets { process modeling
{ process mining
1 introduction
concurrent to the development of petri-net theory, there has been a re-
markable shift from \data-aware" information systems to \process-aware"
information systems [4,6]. to support business processes an enterprise in-
formation system needs to be aware of these processes and their organiza-
tional context. whereas conventional information systems evolved around2 w.m.p. van der aalst
a centralized database system, today's systems are distributed and process-
oriented. the growing importance of business process management (bpm)
illustrates these developments [2,5,9]. bpm includes methods, techniques,
and tools to support the design, enactment, management, and analysis of
such operational business processes. bpm can be considered as an extension
of classical workow management (wfm) systems and approaches.
most of the contemporary bpm notations and systems use token-based
semantics adopted from petri nets [8]. petri nets were proposed by carl
adam petri (1926-2010) in 1962. this was the rst formalism able to model
concurrency. concurrency is very important for bpm as in business pro-
cesses many things may happen in parallel. thousands of cases may be
handled at the same time and even within a case there may be various
activities enabled or running concurrently. therefore, bpm notations, tech-
niques, and systems should support concurrency natively.
a
start
a = register request
b = request additional information
c = examine file
d = reinitiate request 
e = check ticketc
efh
id
endc1
c2c3
c4c5
t1g
t4
t5
t7t9 t6t8t10
t11
t12t13
c6c7 c8
c9
b
t3b
t2
f = decide
g = send acceptance letter
h = pay compensation
i = send rejection letter
fig. 1 a sound workflow net (wf-net) modeling the life-cycle of a request for
compensation. a transition may carry a label referring to some activity. transi-
tions without a label are \silent".
figure 1 shows a petri net modeling an operational process consisting of
nine activities. the transitions have labels referring to these activities. for
example, transition t1 has label areferring to the activity of registering a
request for compensation. there are two transitions having a blabel: both t2
andt3 represent a request for more information. transition t4 has no label
and corresponds to a \silent activity", i.e., an internal step not visible when
it is executed. the petri net shown in figure 1 is a so-called workflow net
(wf-net, [3]) because there is a unique source place start , a unique sink
place end, and all nodes are on a path from start toend. a wf-net models
the life-cycle of process instances , commonly referred to as cases . the token
instart refers to such a case. there can be multiple tokens referring to
the same case, e.g., the tokens in places c1 and c4 after registration ( a)
and checking the ticket ( e). however, tokens of dierent cases cannot getbusiness process management as the \killer app" for petri nets 3
\mixed" in a wf-net. in other words, the wf-net describes the life-cycle of
a case in isolation. the same assumption can be found in other notations for
business process modeling (bpmn, uml activity diagrams, bpel, epcs,
etc.). the wf-net in figure 1 is sound because cases cannot get stuck
before reaching the end (termination is always possible) and all parts of the
process can be activated (no dead segments) [3].
figure 1 only models the control-ow perspective . more sophisticated
petri nets are needed to also model the resource (or organization) perspec-
tive, the data (or information) perspective, the interaction (or communi-
cation) perspective, or the time perspective [4,6]. elementary nets having
only \black untimed dots" as tokens are not suitable for modeling these ad-
ditional perspectives. therefore, one needs to resort to petri nets extended
with color (i.e., data), time, and hierarchy [4,7].
as asserted in the remainder of this paper, there are at least three good
reasons for using petri nets for business process modeling, analysis, and
enactment:
{formal semantics despite the graphical nature : on the one hand, petri
nets are a graphical language and even simple elementary nets allow for
the modeling of the basic workow primitives [6]. on the other hand,
the semantics of petri nets (including most of the extensions) have been
dened formally. many of today's available bpm systems and notations
provide ad-hoc constructs to model business processes. especially when
it comes to mixtures of concurrency and choice, semantics are not always
clear and dicult to operationalize. because of these problems it is better
to use a well-established design language with formal semantics as a solid
basis. note that this does not imply that petri nets should be used to
visualize processes. petri nets may be \hidden" by using higher-level or
more colorful notations, as long as a direct mapping is possible.
{state-based instead of event-based : in contrast to some other process
modeling techniques, the state of a case can be modeled explicitly in a
petri net. process modeling techniques ranging from informal techniques
such as dataow diagrams to formal techniques such as process algebras
areevent-based , i.e., transitions are modeled explicitly and the states
between subsequent transitions are only modeled implicitly. however,
internally, processes and systems have states and these are of utmost
importance for enactment and analysis. when analyzing or supporting
the ow of work one should not only consider activities, but also the
stages in-between activities. typically most time passes by when cases
are in-between activities and various workow patterns (e.g., milestones
and deferred choices) cannot be expressed without explicitly modeling
states [6]. therefore, states need to be \rst-class citizens" for business
process modeling.
{abundance of analysis techniques : petri nets are characterized by the
availability of many analysis techniques. general analysis techniques
ranging from model checking to simulation can be applied to petri nets
due to their concise operational semantics. moreover, petri-net-specic4 w.m.p. van der aalst
notions such as traps, siphons, place invariants, transition invariants,
coverability graphs, regions, and distributed runs [8] can be used for
analysis. for example, various process mining algorithms exploit these
notions when discovering a process model or when aligning modeled and
observed behavior [1].
the remainder is organized as follows. first, we elaborate on the role of
petri nets in the bpm life-cycle (section 2). then, in section 3, we discuss
the impact of petri nets on the bpm discipline. finally, we philosophize
about the relation between models and reality inspired by carl adam petri's
adagium that process models should be in accordance with the laws of
physics (section 4).
2 playing the token game in business process management
to explain the role of petri nets in the bpm discipline, we start by discussing
thebpm life-cycle [2,4] shown in figure 2. in the (re)design phase , a process
model is designed. this model is transformed into a running system in the
implementation/conguration phase . if the model is already in executable
form and a wfm or bpm system is already running, this phase may be very
short. however, if the model is informal and needs to be hard-coded using
some conventional programming language, this phase may take substantial
time. after the system supports the designed processes, the run&adjust
phase starts. in this phase, the process is enacted and adjusted when needed.
in the run & adjust phase, the process is not redesigned and no new software
is created; only predened controls are used to adapt or recongure the
process. figure 2 shows two types of analysis: model-based analysis anddata-
based analysis . while the system is running, event data are collected. these
data can be used to analyze running processes, e.g., discover bottlenecks,
waste, and deviations. this is input for the redesign phase. during this
phase process models can be used for analysis. for example, simulation is
used for what-if analysis or the correctness of a new design is veried using
model checking.
petri nets may play an important, but sometimes hidden, role in all
three phases shown in figure 2. in the remainder, we detail the purpose of
petri nets when it comes to modeling ,analysis and enactment .
2.1 modeling
the old adagium \a picture is worth a thousand words" succinctly explains
the powerful role petri nets can play when describing or designing business
processes. the simple wf-net in figure 1 can serve as input for discussions,
e.g., dierent process redesigns can be explored and ideas can be structured.
an important feature of petri nets is that one can play the so-called \token
game", i.e., the process can be animated and dierent scenarios can be
explored by using a simple set of rules.business process management as the \killer app" for petri nets 5
(re)design
implement/configurerun & adjustdata-based 
analysismodel-based analysis
fig. 2 the bpm life-cycle consisting of three phases: (1) (re)design , (2) imple-
ment/congure and (3) run&adjust .
as indicated before, figure 1 only models the control-ow perspective ,
i.e., the ordering of activities. often one would also like to model the resource
perspective , i.e., the involvement of people, departments, rooms, machines,
and other resources. this is sometimes referred to as the organizational
perspective. for example, one may want to model relations between roles
(resource classes based on functional aspects) and groups (resource classes
based on organizational aspects), and clarify organizational issues such as
responsibility, availability, and authorization. resources, ranging from hu-
mans to devices, form the organizational population and are allocated to
roles and groups.
the data perspective deals with control and production data. control
data are case attributes introduced solely for routing purposes. production
data are information objects (e.g., documents, forms, and tables) whose
existence does not depend on routing only. activities often require particular
input data and produce particular output data, e.g., a person needs to ll
out a form with pre-lled data. moreover, decisions in the process may be
based on such data.
the interaction perspective is concerned with all interrelations among
dierent processes and cases. for example, activities for orders, orderlines,
and deliveries are interrelated but cannot be straightjacketed into a single
monolithic wf-net, bpmn, epc, or uml model. moreover, processes may
need to communicate across organizational boundaries.
the time perspective deals with ow times, deadlines, timeouts, waiting
times, service times, and response times. for example, one may model that
a claim needs to be rejected if it is not processed within two weeks. one
can also model that the average time needed to make a decision is 2 hours.
whether all of these perspectives need to be modeled in detail, depends
on the model's purpose . for example, if the model is used for simulating
\what-if scenarios" it is important to model service times and the avail-6 w.m.p. van der aalst
ability of resources, but it may be less relevant to model all data elements.
conversely, if the model is used for enactment there is no need to model
service times (as these will emerge automatically), but it is crucial to model
the input and output data of all activities.
the wf-net shown in figure 1 is an elementary net, i.e., tokens are
\black dots" that cannot be distinguished and carry no data. to adequately
model all perspectives, one can use petri nets extended with color (i.e.,
data), time, and hierarchy [4,7]. however, when using such extended petri
nets, one may still want to analyze the process based on abstractions cor-
responding to elementary nets.
2.2 analysis
when using informal models, it is impossible to use them for process analy-
sis. fortunately, for petri nets a broad range of analysis techniques is avail-
able. figure 3 classies these techniques using two dimensions. first of all,
one can analyze a process using just a hand-made model or one can use
actual event data (referred to as data-based analysis in figure 2). secondly,
one can focus on the functional properties or also incorporate non-functional
properties.
model-based analysis analysis based on 
data and model
functional 
properties 
(e.g. deadlocks)
non-functional 
properties
(e.g. performance)verification, model 
checking, soundness 
checking, etc.process mining (e.g., 
process discovery and
conformance checking)
simulation, markovian 
analysis, optimization, 
etc.process mining (e.g., 
model extension and 
prediction)
fig. 3 a basic characterization of process-based analysis techniques.
traditionally, the bulk of petri net research focused on model-based anal-
ysis. moreover, the largest proportion of model-based analysis techniques is
limited to functional properties . generic techniques such as model checking
can be used to check whether a petri net has particular properties, e.g., free
of deadlocks. petri-net-specic notions such as traps, siphons, place invari-
ants, transition invariants, and coverability graphs are often used to verify
desired functional properties, e.g., liveness or safety properties [8]. consider
for example the notion of soundness dened for wf-nets [3]. a wf-net is
sound if and only if the following three requirements are satised: (1) option
to complete : for each case it is always still possible to reach the state which
just marks place end, (2) proper completion : if place endis marked all other
places are empty (for a given case), and (3) no dead transitions : it should bebusiness process management as the \killer app" for petri nets 7
possible to execute an arbitrary activity by following the appropriate route
through the wf-net. the wf-net in figure 1 is sound and as a result cases
cannot get stuck before reaching the end (termination is always possible)
and all parts of the process can be activated (no dead segments). obviously,
soundness is important in the context of bpm. fortunately, there exist nice
theorems connecting soundness to classical petri-net properties. for exam-
ple, a wf-net is sound if and only if the corresponding short-circuited petri
net is live and bounded. hence, proven techniques and tools can be used to
verify soundness. soundness is just one of many properties one may want to
investigate. questions like \can the same resource execute activities cand
ffor a request involving a transatlantic ight?" can only be checked using
more sophisticated techniques.
model-based analysis may also focus on non-functional properties such
as ow times, response times, costs, risks, utilization, and availability. such
properties are of the utmost importance for bpm. for particular classes
of petri nets one can use markovian analysis, e.g., stochastic petri nets
with negative exponential delay distributions can be translated into markov
chains that can be analyzed to determine ow times, likelihoods, etc. for
more sophisticated process models and questions, one often needs to resort
to simulation. therefore, there are many bpm tools that allow for some
form of simulation [4].
in recent years, more and more researchers started to investigate the
right-hand side of figure 3. the interest in data-based analysis is fueled by
the increasing availability of event data and the interest of organizations in
fact-based analysis (evidence-based bpm). the term process mining is used
to refer to techniques that extract knowledge from event logs [1]. process
mining techniques form a family of a-posteriori analysis techniques exploit-
ing the information recorded in audit trails, transaction logs, databases,
etc. process mining includes (automated) process discovery (i.e., extract-
ing process models from an event log as shown in figure 4(c-d)), confor-
mance checking (i.e., monitoring deviations by comparing model and log),
social network/organizational mining, automated construction of simulation
models, model extension, model repair, case prediction, and history-based
recommendations.
the growing importance of process mining for anyone interested in pro-
cess analysis can be illustrated as follows. consider a typical 1 tb hard disk
purchased in 2010. the disk can store 1012bytes (i.e., one terabyte). ac-
cording to idc, the entire \digital universe" was 1 :2 zettabyte (1 :21021
bytes) at that time.1hence, the 1 tb disk needs to grow 230:16=1:21021
1012
times. based on the average growth rate of hard disks over the last decades
and an extrapolation of moore's law, we assume that hard disks indeed
double every 1 :56 years. this implies that in 30 :161:56 = 47 :05 years a
standard hard disk may contain the whole \digital universe" of 2010. this
1estimate taken from idc's annual report, \the digital universe decade: are
you ready?", may 2010.8 w.m.p. van der aalst
includes the entire internet, all computer les, transaction logs, movies,
photos, music, books, databases, etc. this simple calculation exemplies
the incredible growth of event data in the next decennia. business processes
will generate more and more event data that can be used for analysis. de-
tailed transaction data and sensor data (cf. rfid tags) will enable new
process mining applications replacing traditional analysis based on hand-
made models [1].
2.3 enactment
petri nets have executable semantics, i.e., they can be used to generate
behavior. the core of any wfm/bpm system is the so-called \workow
engine". such an engine is basically playing the \token game" while in-
teracting with its environment. most engines use token-based semantics.
after completing an activity for a particular case, the corresponding state
(marking in petri net terms) is updated and the newly enabled activities
are oered to the environment.
3 inuence of petri nets on languages and systems
there seems to be a never ending stream of new process modeling notations.
some of these notations are foundational and have been around for decades
(e.g., petri nets). other notations are vendor specic, incremental, or are
only popular for a short while. it seems that ongoing discussions on the
various competing notations often conceal more foundational issues.
notations range from languages aiming to provide a formal basis (e.g.,
nite state machines, petri nets, and process algebras) to vendor specic
notations (e.g., the dierent workow languages used by bpm vendors).
industry standards such as bpel (business process execution language)
and bpmn (business process modeling notation) are typically only par-
tially adopted; vendors support just subsets of these standards and users
tend to use only a tiny fraction of the concepts oered [6]. obviously, there
is little consensus on the modeling language to be used. this resulted in
the \tower of babel of process languages": a plethora of similar but sub-
tly dierent languages inhibiting eective and unied process support and
analysis.
despite the \bpm tower of babel", petri nets played an important role
in de development of the eld. almost all business process modeling lan-
guages and bpm/wfm systems use token-based semantics inspired by the
petri-net \token game". although petri nets are often hidden, there are also
examples of bpm/wfm systems and tools showing petri nets directly to
the user. cosa , one of the leading wfm tools in the 90-ties, is completely
based on petri nets: the cosa modeler, cosa engine, and cosa simula-
tor all use petri nets. baan , the main erp (enterprise resource planning)business process management as the \killer app" for petri nets 9
register 
requestadd extra 
insurance
check driver’s 
licenceinitiate 
check-in
startselect
car
charge credit 
cardprovide car
end
(a)   bpmn (business process modeling notation) model
startregister 
requestxoradd extra 
insurance
xorinitiate 
check-inandcheck 
driver’s 
licenceselect
car
charge 
credit cardand provide car no needneeded addedready to 
be 
selected
ready to 
be 
checked
ready to 
be 
chargedready for 
check-indone
(b)   epc (event-driven process chain) model
badd extra 
insurance
initiate 
check-ine
check driver’s 
license
f
charge credit 
cardd
select car
provide 
carina c g
out register 
request
(c)   petri net abcdefg
acedfg
acfedg
abcdfeg
abcfdeg
acdef
...
(d)   event log 
fig. 4 three types of models describing the same process: (a) bpmn, (b) epc,
and (c) petri net. the event log (d) shows possible traces of this model using the
short activity names provided by the petri net.
competitor of sap in the mid 90-ties, was famous for its dynamic enter-
prise modeler (dem). baan's dem used petri nets to model processes and
was used to align and implement the baan erp system in the organiza-
tional architecture of the end-user company. cosa and dem inuenced
many later bpm/wfm/erp systems. see for example today's business
operations platform (bop) of cordys and oracle's bpm suite.
another remarkable example is the protos modeler developed by pal-
las athena. this modeler uses petri nets as a modeling notation. in 2010
more than 250 out of 441 dutch municipalities were actively using protos
as a modeling tool. protos also supports simulation and is internally using
the exspect simulation tool. exspect was originally developed at eind-
hoven university of technology (tu/e) as a prototyping and simulation
tool. today, protos is part of perceptive's bpmone platform, a bpm suite
to discover, design, execute and improve business processes.
of course there are also many open-source/academic bpm systems and
tools prominently using petri nets. some examples are: yawl (wfm sys-
tem), woped andyasper (business process modeling and simulation), and
prom (process mining). moreover, when going back in history, one can
nd many examples of petri-net based tools for process automation, e.g.,
ocetalk at xerox parc in the late 70-ties, scoop (system for com-
puterizing of oce processes) developed by michael zisman (late 1970s),
income workow by promatis in the 90-ties, etc.10 w.m.p. van der aalst
in spite of the many examples of interesting bpm systems and tools
exposing their users to petri nets, the actual impact of petri nets on bpm
is concealed behind the colorful notions typically used in industry. figure 4
shows the same process using three dierent notations. the business process
modeling notation (bpmn) uses activities, events, and gateways to model
the control-ow. in figure 4(a) two types of gateways are used: exclusive
gateways are used to model xor-splits and joins and parallel gateways are
used to model and-splits and joins. bpmn also supports other types of
gateways corresponding to inclusive or-splits and joins, deferred choices,
etc. [5,6,9]. event-driven process chains (epcs) use functions, events, and
connectors to model the control-ow (cf. figure 4(b)). connectors in epcs
are similar to gateways in bpmn. there are or, xor, and and connec-
tors. events in epcs are similar to places in petri nets, e.g., just like places
and transitions, events and functions need to alternate along any path in an
epc. however, events cannot have multiple successor nodes, thus making
it impossible to model deferred choices [6]. uml activity diagrams (uml
ads) { not shown in figure 4 { are similar to bpmn when it comes to the
basic control-ow constructs.
bpmn, epcs, uml ads, and many other business process modeling
notations have in common that they all use token-based semantics. there-
fore, there are many techniques and tools to convert petri nets to bpmn,
bpel, epcs and uml ads, and vice versa. as a result, the core concepts
of petri nets are often used indirectly, e.g., to enable analysis, to enact
models, and to clarify semantics.
4 the true fabric of business processes
two maxims put forward by carl adam petri are \concurrency should be
incorporated as a starting point rather than an afterthought (locality of ac-
tions)" and \a modeling technique should obey the laws of physics". petri
nets were the rst model to adequately capture concurrency. of course con-
currency plays an important role in business processes, e.g., there may be
many resources (people, machines, etc.) working concurrently and at any
point in time there may be many running process instances. petri was in-
terested in the relationship between process modeling and physics (e.g., the
nite and invariant velocity of light and heisenberg's uncertainty principle).
in the context of bpm one should also pay attention to the relation be-
tween process models and the actual characteristics of business processes.
business processes tend to be highly concurrent and non-monolithic. there-
fore, sequential models are inadequate [4]. moreover, one cannot restrict
attention to a single process instance in isolation (as is the case in bpmn,
epcs, etc.). for example, there may be complex many-to-many relation-
ships between orders, order lines, and deliveries. one order may consist of
multiple order lines, there may be multiple deliveries related to the same
order, and a delivery may refer to order lines of dierent orders. traditionalbusiness process management as the \killer app" for petri nets 11
modeling approaches have problems dealing with such complex dependen-
cies whereas practical experiences with process mining show that interac-
tions between artifacts are essential for process analysis [1].
the empirical nature of process mining helps managers, consultants,
and process analysts to better understand the \fabric of real business pro-
cesses" and, thus, also see the limitations of conventional process modeling
languages [1]. the challenge is to link elegant succinct formal models like
petri nets to behavior actually observed in reality.
references
1. w.m.p. van der aalst. process mining: discovery, conformance and enhance-
ment of business processes . springer-verlag, berlin, 2011.
2. w.m.p. van der aalst. business process management: a comprehensive sur-
vey. isrn software engineering , 2012 (in print).
3. w.m.p. van der aalst, k.m. van hee, a.h.m. ter hofstede, n. sidorova,
h.m.w. verbeek, m. voorhoeve, and m.t. wynn. soundness of workow
nets: classication, decidability, and analysis. formal aspects of computing ,
23(3):333{363, 2011.
4. w.m.p. van der aalst and c. stahl. modeling business processes: a petri net
oriented approach . mit press, cambridge, ma, 2011.
5. m. dumas, m. la rosa, j. mendling, and h. reijers. fundamentals of business
process management . springer-verlag, berlin, 2013.
6. a.h.m. ter hofstede, w.m.p. van der aalst, m. adams, and n. russell. modern
business process automation: yawl and its support environment . springer-
verlag, berlin, 2010.
7. k. jensen and l.m. kristensen. coloured petri nets . springer-verlag, berlin,
2009.
8. w. reisig. petri nets: modeling techniques, analysis, methods, case studies .
springer-verlag, berlin, 2013.
9. m. weske. business process management: concepts, languages, architectures .
springer-verlag, berlin, 2007.