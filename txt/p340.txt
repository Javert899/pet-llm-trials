process mining and monitoring processes and
services: workshop report
wil van der aalst (editor)
eindhoven university of technology, p.o.box 513, nl-5600 mb, eindhoven, the
netherlands.
w.m.p.v.d.aalst@tm.tue.nl
abstract. in a service-oriented architecture, but also in classical en-
treprise systems, a variety of events (e.g., messages being sent and re-
ceived) are being logged. this information can be used for process mining
purposes, i.e., based on some event log it is possible to discover processes
or to check conformance . the goal of process discovery is to build mod-
els without a-priori knowledge, i.e., based on sequences of events one can
look for the presence or absence of certain patterns and deduce some pro-
cess model from it. for conformance checking there has to be an initial
model. one can think of this model as a \contract" or \speci¯cation" and
it is interesting to see whether the parties involved stick to this model.
using conformance checking it is possible to quantify the ¯t (fewer de-
viations result in a better ¯t) and to locate \problem areas" where a lot
of deviations take place.
one of the four workshops organized within the context of the dagstuhl
seminar on the role of business processes in service oriented architec-
tures (seminar 06291, 16.07.2006-21.07.2006) was a workshop on process
mining and monitoring processes and services. in this paper, we report
on the results of the workshop.
1 introduction
for an overview of process mining techniques, the reader is referred to [4] and [3].
process mining can be seen in the broader context of business process intelli-
gence (bpi) and business activity monitoring (bam). the need for monitoring
web services has been identi¯ed by many users, software developers and re-
searchers. for example, several research groups have been experimenting with
adding monitor facilities via soap monitors in axis. [11] introduces an assertion
language for expressing business rules and a framework to plan and monitor the
execution of these rules. [6] uses a monitoring approach based on bpel. moni-
tors are de¯ned as additional services and linked to the original service compo-
sition. another framework for monitoring the compliance of systems composed
of web-services is proposed in [13]. this approach uses event calculus to specify
requirements. [12] is an approach based on ws-agreement de¯ning the crona
framework for the creation and monitoring of agreements. in [9, 8], dustdar et
al. discuss the concept of web services mining and envision various levels (webservice operations, interactions, and work°ows) and approaches. our approach
¯ts in their framework and shows that web-services mining is indeed possible.
in [14] a tool named the web service navigator is presented to visualize the
execution of web services based on soap messages. the authors use message
sequence diagrams and graph-based representations of the system topology. in
[1] to the monitoring of web services is discussed and concrete techniques based
on bpel and soap messages in the context of prom are presented in [2].
to goal of the workshop was to discuss the various forms of process mining
both from a technological (is it possible to log the right events? are there mature
techniques available?) and a requirements (which types of process mining are
particularly useful?) point of view.
2 questions
within the context sketched above and practical experiences with the monitoring
and analysis of logs from a variety of systems (e.g., sap and websphere), the
following questions were raised:
1.how to obtain useful audit trails/event logs?
2.how to deal with correlation?
3.how to design for monitoring?
4.how to classify the various techniques for process mining/bam/bpi/... ?
5.which are the most relevant questions/techniques?
6.how to present management information (cf. business cockpits, abstraction,
viz. etc.)?
7.does the "i" in "bpi" stand for "intelligence" or "ignorance"?
these questions were discussed in detail and the main ¯ndings are reported in
the remainder.
3 obtaining event logs
based on a discussion of various systems, the conclusion was that there are
basically two types of systems: those that are process-aware and those that
are not. in process-aware information systems the right event logs are available
or can be obtained easily . process-aware systems are systems that driven by
process models, e.g., work°ow management systems, case handling systems, and
the various execution/choreography engines in the context of webservices. in
systems that are not process aware, i.e., an explicit process model is missing, it
may be more di±cult to obtain the right logs. for example, erp systems like
sap and peoplesoft have not been designed around explicit processes. instead,
these systems are built around a large set of database tables. information about a
purchase order may be scattered around various tables recording di®erent aspects
at di®erent levels. typically, extensive domain knowledge is needed to link thesetables to concrete processes. hence, it is often di±cult and labor-intensive to
collect the right event logs. sometimes, however, it is easier to collect logs in
systems that are not process-aware, e.g., in a hospital information systems it is
often easy to link things together using the id of the patient.
despite problems with existing systems (e.g., erp systems), it seems rel-
atively easy to add the right logging functions when building a new systems.
moreover, many systems are being built on a process layer, making logging at
the right level a standard functionality. we would even like to claim that log-
ging should be ¯rst class citizen for any system that is used to support business
processes! this is also the case in the context of auditing; without the right logs
it is di±cult to measure compliance and the see how processes really unfolded.
new legislation (e.g., sox and other laws enforcing minimal standards for au-
diting) will probably force software vendors and user organizations to devote
more attention to the logging of events.
during the workshop it was noted that the topic of event logs is closely re-
lated to the correlation of (soap) messages. just like an engine needs to know
which messages are relevant for a particular process instance, process mining is
only possible if events are linked to the right corresponding process instances.
it was also noted that it may be useful to consider trees of process instance
id's, i.e., a process instance may consist of smaller process instances and this
structure may be used for process mining. for example, a purchase order may
consist of multiple order lines and multiple shipments. the id's of an order line
or shipment needs to be linked to a unique purchase order. clearly, these id's
are logical identi¯ers rather than physical id's. for example, in bpel one can
de¯ne so-called \correlation sets" for each conversation. clearly, higher level con-
cepts should be identi¯ed here to avoid an ah-hoc bookkeeping of dependencies
between the di®erent id's. note that simplifying issues related to correlation is
both relevant for the enactment or processes and the monitoring of processes
(i.e., generating meaningful event logs).
4 classi¯cation of process mining techniques
after establishing the way in which process logs can be obtained, the work-
shop focussed on a classi¯cation of the various process mining techniques. the
following dimensions were discussed:
1.the presence of an a-priori model:
{discovery : there is no a-priori model, i.e., based on an event log some
model is constructed. for example, using the alpha algorithm [5] a pro-
cess model can be discovered based on low-level events.
{conformance : there is an a-priori model. this model is used to check
if reality conforms to the model. for example, there may be a process
model indicating that purchase orders of more than 1 million euro require
two checks. another example is the checking of the four-eyes principle.
conformance checking may be used to detect deviations, to locate and
explain these deviations, and to measure the severity of these deviations.{extension : there is an a-priori model. this model is extended with a
new aspect or perspective, i.e., the goal is not to check conformance but
to enrich the model. an example is the extension of a process model with
performance data, i.e., some a-priori process model is used to project the
bottlenecks on.
2.functional/non-functional:
{functional : questions related to \how?", \what?", and \who?" are
considered, i.e., the focus is on the structuring of the various perspectives.
{non-functional : questions related to \how often?" and \how frequent?",
i.e., the focus is on the way the functional properties are realized.
3.the functional/non-functional properties under investigation may be further
classi¯ed into perspectives:
{functional perspectives:
²control-°ow perspective : the ordering of activities.
²data perspective : the data relevant for the handling of process in-
stances.
²resource/organizational perspective : the resources, i.e., people or
other capacitated resources, involved in the process.
²...
{non-functional perspectives:
²performance/time perspective : typical key performance indicators
such as °ow time, utilization, service level, etc.
²quality perspective : non-functional properties not linked to classical
key performance indicators but to quality measures, e.g., the number
of failures, near-failures, customer satisfaction, etc.
²...
4.number of process instances (i.e., cases) involved:
{single instance : the focus is on a single process instance, e.g., construct-
ing a model for only one instance.
{multiple instances : the focus is on a selected group of process instances,
e.g., checking the conformance of all purchase orders handled by a par-
ticular employee.
{all instances : the focus is on all instances of a given process.
5.time period considered:
{history : a particular time period in the past is considered, e.g., all
recorded events in the last year.
{real-time : the focus is on the current situation. note that in this case
still historic information may be used, e.g., to compute averages or to
reconstruct the current state. however, the goal is to analyze the current
situation and not the \typical" behavior of the process.
6.result type:
{inform : the analysis is merely used to inform the people involved (e.g.,
managers and decision makers), i.e., the ¯ndings are not used to auto-
matically take action. note that managers and decision makers may use
this information to control the process di®erently or to even redesign
the process. note that process mining results may be used for an \intel-
ligent" redesign of the process, i.e., computer-assistent redesign driven
by redesign rules and diagnostic information.{act: based on the ¯ndings an action is performed, e.g., allocating re-
sources to a process with a degrading service level or reducing the number
of checks in case of fewer violations. note that we only consider actions
related to the management and control of the process being analyzed.
the execution of operational activities in this process is not the task of
process mining.
of the six dimensions given, the third is clearly a re¯nement of the second
one. hence we will only consider dimensions 1 and 3-6. these ¯ve dimensions
are orthogonal, for each combination it is possible to come up with meaningful
examples. some examples are given below.
the alpha algorithm [5] constructs a process model expressed in term of a
petri net. this can be classi¯ed using the ¯ve dimensions: discovery ,control-
°ow perspective ,all instances (ormultiple instances ),history , and inform .
the conformance checker in prom [7] \replays" a log in a given process model
and detect and measures the violations. the checker can also be classi¯ed using
the ¯ve dimensions: conformance ,control-°ow perspective ,all instances (or
multiple instances ),history , and inform .
the social network analyzer in prom [7] tries to establish relationships be-
tween the various actors in the process (e.g., how many times does one employee
pass on work to another employee). the social network analyzer can character-
ized as: discovery ,resource/organizational perspective ,all instances (ormulti-
ple instances ),history , and inform .
the performance analysis plug-in of prom [7] projects performance data (°ow
times, waiting times, service times, etc.) on a given process model. the plug-in
can characterized as: extension ,performance/time perspective ,all instances (or
multiple instances ),history , and inform .
the prediction engine of sta®ware [15] tries to predict when a process in-
stance (i.e., case) is ¯nished by combining historic information with the cur-
rent state of the work°ow. the feature can characterized as: extension ,perfor-
mance/time perspective ,single instance ,real-time , and inform .
most of the functionality of aris ppm [10] is related to performance anal-
ysis based on historic information using an a-priori process model. this basic
functionality can characterized as: extension ,performance/time perspective ,all
instances (ormultiple instances when drilling down), history , and inform .
none of the examples given can be classi¯ed as act. however, it is easy to
think of scenarios where the information generated is actually used to automate
actions related to process management. it appears that the ¯ve dimensions (di-
mensions 1 and 3-6) are orthogonal. this leads to at least 3*5*3*2*2 = 180
di®erent classes of process mining techniques. although not explored in detail,
it seems that each of these 180 classes is potentially meaningful and useful. this
illustrates the broadness of the process mining domain.5 conclusion
during the workshop we concluded that it is desirable and possible to generate
high-quality event logs. these event logs can be used to enable many di®erent
process mining techniques. using ¯ve dimensions, 180 di®erent classes of process
mining techniques have been identi¯ed. clearly, most of the existing commercial
systems support merely a few of these 180 di®erent classes. moreover, process
mining is a relatively immature research domain. therefore, research and devel-
opment should aim at a better coverage of the 180 classes. this is really needed
because some vendors claim to have tools that support \business process intelli-
gence (bpi)" while their tools are not always very intelligent. in fact, one could
even say that bpi stands for \business process ignorance" when considering
current practise.
references
1.w.m.p. van der aalst, m. dumas, a.h.m. ter hofstede, n. russell, h.m.w. ver-
beek, and p. wohed. life after bpel? in m. bravetti, l. kloul, and g. zavattaro,
editors, ws-fm 2005 , volume 3670 of lecture notes in computer science , pages
35{50. springer-verlag, berlin, 2005.
2.w.m.p. van der aalst, m. dumas, c. ouyang, a. rozinat, and h.m.w. verbeek.
choreography conformance checking: an approach based on bpel and petri
nets (extended version). bpm center report bpm-05-25, bpmcenter.org, 2005.
3.w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. work°ow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237{267, 2003.
4.w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining , special
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
5.w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
6.l. baresi, c. ghezzi, and s. guinea. smart monitors for composed services. in
icsoc '04: proceedings of the 2nd international conference on service oriented
computing , pages 193{202, new york, ny, usa, 2004. acm press.
7.b. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters, and
w.m.p. van der aalst. the prom framework: a new era in process mining tool
support. in g. ciardo and p. darondeau, editors, application and theory of petri
nets 2005 , volume 3536 of lecture notes in computer science , pages 444{454.
springer-verlag, berlin, 2005.
8.s. dustdar, r. gombotz, and k. baina. web services interaction mining. technical
report tuv-1841-2004-16, information systems institute, vienna university of
technology, wien, austria, 2004.
9.r. gombotz and s. dustdar. on web services mining. in m. castellanos and
t. weijters, editors, first international workshop on business process intelligence
(bpi'05) , pages 58{70, nancy, france, september 2005.
10.ids scheer. aris process performance manager (aris ppm): measure, ana-
lyze and optimize your business process performance (whitepaper). ids scheer,
saarbruecken, gemany, http://www.ids-scheer.com, 2002.11.a. lazovik, m. aiello, and m. papazoglou. associating assertions with business
processes and monitoring their execution. in icsoc '04: proceedings of the 2nd
international conference on service oriented computing , pages 94{104, new york,
ny, usa, 2004. acm press.
12.h. ludwig, a. dan, and r. kearney. crona: an architecture and library for
creation and monitoring of ws-agreements. in icsoc '04: proceedings of the
2nd international conference on service oriented computing , pages 65{74, new
york, ny, usa, 2004. acm press.
13.k. mahbub and g. spanoudakis. a framework for requirents monitoring of ser-
vice based systems. in icsoc '04: proceedings of the 2nd international con-
ference on service oriented computing , pages 84{93, new york, ny, usa, 2004.
acm press.
14.w. de pauw, m. lei, e. pring, l. villard, m. arnold, and j.f. morar. web ser-
vices navigator: visualizing the execution of web services. ibm systems journal ,
44(4):821{845, 2005.
15.sta®ware. sta®ware process suite version 2 { white paper . sta®ware plc,
maidenhead, uk, 2003.