process flexibility: a survey of contemporary
approaches
m.h. schonenberg, r.s. mans, n.c. russell, n.a. mulyar
and w.m.p. van der aalst
eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
{m.h.schonenberg,r.s.mans,n.c.russell,nmulyar,w.m.p.v.d.aalst}@tue.nl
abstract. business processes provide a means of coordinating interac-
tions between workers and organisations in a structured way. however
the dynamic nature of the modern business environment means these
processes are subject to a increasingly wide range of variations and mus t
demonstrate ﬂexible approaches to dealing with these variations if th ey
are to remain viable. the challenge is to provide ﬂexibility and oﬀer pro-
cess support at the same time. many approaches have been proposed in
literature and some of these approaches have been implemented in ﬂex i-
ble workﬂow management systems. however, a comprehensive overvi ew
of the various approaches has been missing. in this paper, we take a
deeper look into the various ways in which ﬂexibility can be achiev ed
and we propose an extensive taxonomy of ﬂexibility. this taxonomy is
subsequently used to evaluate a selection of systems and to discus s how
the various forms of ﬂexibility ﬁt together.
keywords: taxonomy, ﬂexibility, design, change, deviation, underspec-
iﬁcation.
1 introduction
in order to retain their competitive advantage in today’s dynamic marketpl ace,
it is increasingly necessary for enterprises to streamline their processes so as to
reduce costs and to improve performance. moreover, it is clear that the economic
success of an organisation is highly dependent on its ability to react to changes
in its operating environment.
to this end, process-aware information systems (paiss) are an desirable
technology as these systems support the business operations of an enterprise
based on models of both the organisation and its constituent processes. paiss
encompass a broad range of technologies ranging from systems which rigidly
enforce adherence to the underlying process model, e.g., workﬂow systems or
tracking systems, to systems which are guided by an implied process model but
do nothing to ensure that it is actually enforced, e.g., groupware systems.
typically, these systems utilise an idealised model of a process which may be
overly simplistic or even undesirable from an operational standpoint. furt her-
more the models on which they are based tend to be rigid in format and are notable to easily encompass either foreseen or unforeseen changes in the context or
environment in which they operate. up to now, there have not been any broadly
adopted proposals or standards oﬀering guidance for developing ﬂexible process
models able to deal with these sorts of changes. instead most standards focus
on a particular notation (e.g., xpdl, bpel, bpmn, etc.) and these notatio ns
typically abstract from ﬂexibility issues.
process ﬂexibility can be seen as the ability to deal with both foreseen and
unforeseen changes, by varying or adapting those parts of the business process
that are aﬀected by them, whilst retaining the essential format of those parts
that are not impacted by the variations. or, in other words, ﬂexibility is as
much about what should stay the same in a process as what should be allowed
to change[15]. diﬀerent kinds of ﬂexibility are needed during the bpm life cycle
of a process. based on an extensive survey of literature and ﬂexibility support
oﬀered by existing tools1, a range of approaches to achieve process ﬂexibility have
been identiﬁed. these approaches have been described in the form of a taxonomy
which provides a comprehensive catalogue of process ﬂexibility approaches for
the control-ﬂow perspective.
the remainder of this paper is organised as follows. section 2 presents the
taxonomy for process ﬂexibility. in section 3, we use the taxonomy to evalu-
ate the support of process ﬂexibility in several contemporary paiss, namely
adept1, yawl, flower and declare. in section 4 we discuss related work.
finally, we conclude the paper and identify opportunities for future work in
section 5.
2 taxonomy of flexibility
in this section, we present a comprehensive description of four distinct ap-
proaches that can be taken to facilitate ﬂexibility within a process. all of t hese
strategies improve the ability of business processes to respond to changes in their
operating environment without necessitating a complete redesign of the under-
lying process model, however they diﬀer in the timing and manner in which they
are applied. moreover they are intended to operate independently of each other.
these approaches are presented in the form of a taxonomy which aims to deﬁne
each of them in detail. the taxonomy is applicable to both classical (imperat ive)
and constraint-based (declarative) speciﬁcations.
2.1 speciﬁcation approaches
generally, process behaviour depends on the structure of a process, which can be
deﬁned in an imperative or a declarative way. an imperative approach focuses on
the precise deﬁnition of how a given set of tasks has to be performed (i.e., the ta sk
order is explicitly deﬁned). in imperative languages, constraints on the execution
order are described either via links (or connectors) between tasks and/or data
1see [10] for full details of the approach pursued and the literature and to ols examined.fig. 1. execution variances between imperative and declarative approaches.
conditions associated with them. a declarative approach focuses on whatshould
be done instead of how. it uses constraints to restrict possible task execution
options. by default all execution paths are allowed, i.e., allowing all executions
that do not violate the constraints. in general, the more constraints are deﬁned
for a process, the less execution paths are possible, i.e., constraints limit pr ocess
ﬂexibility. in declarative languages, constraints are deﬁned as relations between
tasks. mandatory constraints are strictly enforced, while optional constra ints
can be violated, if needed. figure 1 provides an example of both approaches.
for both of them, a set of possible execution paths are illustrated. note that a
declarative approach oﬀers many more execution paths.
2.2 flexibility types in detail
in this section we discuss the individual ﬂexibility types. each of them is de-
scribed in detail using a standard format including: a motivation, deﬁnition,
scope, realisation options, i.e., the situations and domains to which the ﬂexi bil-
ity type applies, an example and discussion.
flexibility by design .
motivation when a process operates in a dynamic environment it is desirable
to incorporate support for the various execution alternatives that may aris e
within the process model. at runtime, the most appropriate execution path can
be selected from those encoded in the design time process model.
deﬁnition flexibility by design is the ability to incorporate alternative exe-
cution paths within a process model at design time allowing the selection of
the most appropriate execution path to be made at runtime for each process
instance.
scope flexibility by design applies to any process which may have more than
one distinct execution trace.
realisation options the most common options for realisation of ﬂexibility by
design are listed below. it is not the intention of the authors to give a com plete
overview of all options.
–parallelism – the ability to execute a set of tasks in parallel;
–choice – the ability to select one or more tasks for subsequent execution from
a set of available tasks;a b c
fig. 2. flexibility by design: a choice of execution paths is speciﬁed.
–iteration – the ability to repeatedly execute a task2;
–interleaving – the ability to execute each of a set of tasks in any order such
that no tasks execute concurrently;
–multiple instances – the ability to execute multiple concurrent instances of
a task; and
–cancellation – the ability to withdraw a task from execution now or at any
time in the future.
the notions above are thoroughly described by the workﬂow patterns [20]
and have been widely observed in a variety of imperative languages. we argue
that these concepts are equally applicable in a declarative setting which has
a much broader repertoire of constraints that allow for ﬂexibility by design.
note that both approaches really diﬀer with respect to ﬂexibility. to increase
ﬂexibility in an imperative process, more execution paths have to be modeled
explicitly, whereas increasing ﬂexibility in declarative processes is accomplished
by reducing the number of constraints, or weakening existing constraints.
example figure 2 exempliﬁes a choice construct in an imperative model. the
ﬁgure depicts that after executing a, it is possible to either execute b, followed
byc, or to execute cdirectly. using the choice construct, the notion of skipping
tasks can be predeﬁned in the process model.
discussion realisation options can be implemented diﬀerently in diﬀerent ways.
for example there are diﬀerent variants of the choice construct, such as exclusiv e
choice and deferred choice, which can be eﬀected in diﬀerent ways. interested
readers are referred to the workﬂow patterns [20].
describing all possible execution paths in a process model completely at design-
time may be either undesirable from the standpoint of model complexity or
impossible due to an unknown or unlimited number of possible execution paths.
the following three ﬂexibility types provide alternative mechanisms for proces s
ﬂexibility.
flexibility by deviation .
motivation some process instances need to temporarily deviate from the exe-
cution sequence described by the associated process model in order to accommo-
date changes in the operating environment encountered at runtime. for example,
it may be appropriate to swap the ordering of the register patient andperform
2note that iteration can be seen as a particular type of choice, where the j oin precedes
the splittriage tasks in an emergency situation. the overall process model and its con-
stituent tasks remain unchanged.
deﬁnition flexibility by deviation is the ability for a process instance to deviate
at runtime from the execution path prescribed by the original process without
altering its process model. the deviation can only encompass changes to the
execution sequence of tasks in the process for a speciﬁc process instance, it does
not allow for changes in the process model or the tasks that it comprises.
scope the concept of deviation is particularly suited to the speciﬁcation of pro-
cess models which are intended to guide possible sequences of execution rather
than restrict the options that are available (i.e., they are descriptive rather than
prescriptive). these speciﬁcations contain the preferred execution of the process,
but other scenarios are also possible.
realisation options the manner in which deviation is achieved depends on
the speciﬁcation approach utilised. deviation can be seen as varying the actual
tasks that will be executed next, from those that are implied by the current
set of enabled tasks in the process instance. in imperative languages this can be
achieved by applying deviation operations. for declarative approaches, deviati on
basically occurs through violation of optional constraints. the followi ng set of
operations characterise support for deviation by imperative languages:
–undo task a : moving control to the moment before the execution of task
a. one point to consider with this operation is that it does not imply that
the actions of the task are undone or reversed. this may be an issue if the
task uses and changes data elements during the course of its execution. in
such situations, it may also be desirable to roll-back or compensate for t he
consequences of executing the task in some way, although it is not always
possible to do so, e.g., the eﬀects of sending a letter can not be reversed.
–redotask a : executing a disabled, but previously executed task a again,
without moving control. this operation provides the ability to repeat a pre-
ceding task. one possible use for the operation is to allow incorrectly entered
data during task execution to be entered again. for example after register-
ing a patient in a hospital and undertaking some examinations, the registra-
tion task can be repeated to adjust outdated or incorrect data. note that
updating registration data should not require medical examinations to be
performed again.
–skiptask a : passing the point of control to a task subsequent to an en-
abled task a . there is no mechanism to compensate for the skipped task
by executing it at a later stage of the execution. this operation is useful
for situations, where a (knowledgeable) user decides that it is necessary to
continue execution, even though some preceding actions have not been per-
formed. for example, in life threatening situations it should be possible to
start surgery immediately, whereas normally the patient’s health status is
evaluated before commencing surgery.
–create additional instance of task a : creating an additional instance of a
task that will run in parallel with those instances created at the momentb) after "skip b"a c
a) before "skip b"a c
trace = [ a ] trace = [ a, "skip b" ]b b
fig. 3. flexibility by deviation: the point of control is moved.
of task instantiation. it should be possible to limit the maximal num ber of
task instances running in parallel. for example, a travel agency making trip
arrangements for a group of people has to do the same arrangements if the
number of travelling people increase (i.e., a separate reservation has to be
done for each person).
–invoke task a : allows a task in the process model that is not currently
enabled, and has not yet been executed, to be initiated. this task is initiated
immediately. for example, when reviewing an insurance claim, it is suspected
that the information given may be fraudulent. in order to determine how to
proceed, the next task to be executed is deferred and a detailed investigation
task (which normally occurs later in the process) is invoked. the execution
of the investigation task does not aﬀect the thread of control in the process
instance and upon completion of the invoked task, execution continues from
this point. should the thread of control reach a previously invoked task at
a later time in a process instance, it may be executed again or skipped on a
discretionary basis.
note that although we deﬁne deviation operations for imperative approaches
only, this does not mean that there is no notion of these deviations in declarative
approaches. consider for example constraint “a precedes b” , which is deﬁned as
an optional constraint. by executing bbefore any occurrence of a,ais actually
skipped by violating the optional precedence constraint. in this paper we clearly
make a distinction between deviation for imperative and declarative approac hes,
due to the subtle diﬀerence in the act of deviating. providing a full mapping of
deviation operations to declarative constraints is beyond the scope of this paper.
example figure 3 exempliﬁes ﬂexibility by deviation by applying a skip oper-
ation. in figure 3(a) task bis enabled. after applying skip b (figure 3(b)), it
is possible to execute a (currently not enabled) successor of an enabled task b.
discussion deviation operations can be implemented in diﬀerent ways, but
for process mining purposes it should be possible to identify where deviations
occurred during process execution. furthermore additional requirements for the
operators can be given, e.g., the “undo a” operation only has any eﬀect when
taskahas been executed previously. when undoing task a, it may be recorded in
one of two possible ways in the execution trace: either the undo task is explicitly
marked as an execution action, or the occurrence of task abeing undone is
removed from the trace.flexibility by underspeciﬁcation .
motivation when specifying a process model it might be foreseen that in the
future, during run-time execution, more execution paths are needed which must
be incorporated within the existing process model. furthermore, often only dur-
ing the execution of a process instance does it become clear what needs to be
done at a speciﬁc point in the process. when all execution paths cannot be de-
ﬁned in advance, it is useful to be able to execute an incomplete process model
and dynamically add process fragments expressing missing scenarios to it.
deﬁnition flexibility by underspeciﬁcation is the ability to execute an incom-
plete process model at run-time, i.e., one which does not contain suﬃcient infor-
mation to allow it to be executed to completion. note that this type of ﬂexibil ity
does not require the model to be changed at run-time, instead the model needs
to be completed by providing a concrete realisation for the undeﬁned parts.
scope the concept of underspeciﬁcation is mostly suitable for processes where
it is clearly known in advance that the process model will have to be adjusted
atspeciﬁc points , although the exact content at this point is not yet known (and
may not be known until the time that an instance of the process is executed).
this approach to process design and enactment is particularly useful where dis-
tinct parts of an overall process are designed and controlled by diﬀerent work
groups, but the overall structure of the process is ﬁxed. in this situation, it al-
lows each of them to retain some degree of autonomy in regard to the tasks tha t
are actually executed at runtime in their respective parts of the process, whilst
still complying with the overall process model.
realisation options an incomplete process model is deemed to be one which
is well-formed but does not have a detailed deﬁnition of the ultimate realisation
of every task. an incomplete process model contains one or more so-called place-
holders . placeholders are nodes which are marked as underspeciﬁed (i.e., their
content is unknown) and whose content is speciﬁed during the execution of these
placeholders. we distinguish two types of placeholder enactment :
•late binding : where the realisation of a placeholder is selected from a set
of available process fragments. note that to realise a placeholder one pro-
cess fragment has to be selected from an existing set of predeﬁned process
fragments. this approach is limited to selection, and does not allow a new
process fragment to be constructed.
•late modelling : where a new process fragment is constructed in order to
realise a given placeholder. not only can a process fragment be constructed
from a set of currently available process fragments, but also a new process
fragment can be developed from scratch3. therefore late binding is encom-
passed by late modelling. some approaches [21] limit the construction of new
models by (declarative) constraints.
for both approaches, the realisation of a placeholder can occur at a num-
ber of distinct times during process execution. here, two distinct moments for
realisation are recognised:
3however, this can only be done by highly skilled personsa) before realisationc a a xn c x1
b) after realisation
fig. 4. flexibility by underspeciﬁcation: realisation of a placeholder.
•before placeholder execution : the placeholder is realised at commencement
of a process instance or during execution before the placeholder has been
executed for the ﬁrst time.
•at placeholder execution : the placeholder is realised when it is executed.
placeholders can be either realised once, or for every subsequent execution
of the placeholder. we distinguish two distinct realisation types :
•static realisation , where the process fragment chosen to realise the place-
holder during the ﬁrst execution is used to realise the placeholder for every
subsequent execution.
•dynamic realisation , where the realisation of a placeholder can be chosen
again for every subsequent execution of the placeholder.
example figure 4(a) shows an incomplete process model with a placeholder
task between aandc. figure 4(b) illustrates the realisation of the placeholder,
by a process fragment from a linked repository of process fragments. this ﬁg ure
shows the realisation as a sequence of self-looping tasks, but it can be realised
by any well-formed process fragment.
discussion the process fragments available for placeholder realisation can be
stored in a so called repository. a repository can be available for one or more
processes, just for a particular task or a set of tasks.
flexibility by change .
motivation in some cases, events may occur during process execution that were
not foreseen during process design. sometimes these events cannot be addressed
by temporary deviations from the existing process model, but require the addi-
tion or removal of tasks or links from the process model on a permanent basis .
this may necessitate changes to the process model for one or several process in-
stances; or where the extent of the change is more signiﬁcant, it may be necessary
to change the process model for all currently executing instances.
deﬁnition flexibility by change is the ability to modify a process model at run-
time such that one or all of the currently executing process instances are migrated
to a new process model. unlike the previously mentioned ﬂexibility types the
model constructed at design time is modiﬁed and one or more instances need to
be transferred from the old to the new model.
scope flexibility by change allows processes to adapt to changes that are iden-
tiﬁed in the operating environment. changes may be introduced both at thelevel of the process instance and also at that of the process model (also known
as change at instance level, and type or model level respectively).
realisation options for ﬂexibility by change we distinguish the following vari-
ation points, which are partly based on [2].
eﬀect of change deﬁnes whether changes are performed on the level of a process
instance or on the level of the process model, and what the impact of the change
on the new process instances is.
•momentary change : a change aﬀecting the execution of one or more selected
process instances. the change performed on a given process instance does
not aﬀect any future instances.
•evolutionary change : a change caused by modiﬁcation of the process model,
aﬀecting all new process instances.
moment of allowed change speciﬁes the moment at which changes can be intro-
duced in a given process instance or a process model.
•entry time : changes can be performed only at the moment the process in-
stance is created. after the process instance has been created, no further
changes can be introduced to the given process instance. momentary changes
performed at entry time aﬀect only a given process instance. the result of
evolutionary changes performed at entry time is that all new process in-
stances have to be started after the change of the process model has been
performed, and no existing process instances are aﬀected (they continue ex-
ecution according to the process model with which they are associated).
•on-the-ﬂy : changes can be performed at any time during process execution.
momentary changes performed on-the-ﬂy correspond to customisation of a
given process instance during its execution. evolutionary changes performed
on-the-ﬂy impact both existing and new process instances. the new process
instances are created according to the new process model, while the existing
process instances may need to migrate from the existing process model to
the new process model.
migration strategy deﬁnes what to do with running process instances that are
impacted by an evolutionary change.
•forward recovery : aﬀected process instances are aborted.
•backward recovery : aﬀected process instances are aborted (compensated if
necessary) and restarted.
•proceed : changes introduced are ignored by the existing process instances.
existing process instances are handled the old way, and new process instances
are handled the new way.
•transfer : the existing process instances are transferred to a corresponding
state in the new process model.b) after "delete b"a c a
a) before "delete b"b c
fig. 5. flexibility by change: a task is deleted.
example in figure 5(a) we show a process model that is changed into the
process model depicted in figure 5(b) by removing task b. the eﬀect of this
change is that instances of the new process model will skip task bpermanently.
discussion a very detailed description of change operations can be found in
[24]. the authors propose using high level change patterns rather than low level
change primitives and give full descriptions for the identiﬁed patterns. based
on these change patterns and features, they provide a detailed analysis and
evaluation of selected systems from both academia and industry.
3 evaluation of contemporary oﬀerings
in this section, we apply the taxonomy presented in section 2 to evaluate a se-
lection of paiss, namely, adept1 [17], yawl4(version 8.2b) [1, 5, 4], flower
(version 3.0) [3] and declare (version 1.0) [11, 12]. this evaluation provides an
insight into the manner and extent to which the individual ﬂexibility types are
actually implemented in practice. the selection of paiss has been based on the
criterion of supporting process ﬂexibility, which excludes classical workﬂow sys -
tems and most commercial systems. moreover, the selected systems cover distinct
areas of the pais technology spectrum, such as adaptive workﬂow (adept1),
case handling (flower) and declarative workﬂow (declare).
although we focus on the evaluation of ﬂexibility support, it is worthwhile
mentioning that there is a huge diﬀerence in the maturity of the selected oﬀer-
ings. flower has been widely used in industry where its ﬂexible approach to
case handling has proven to be extremely eﬀective for a variety of purposes (e.g.,
insurance claim handling). adept1 has also been successfully applied in dif-
ferent areas, such as health care [17]. throughout its development lifetime, the
designers of adept [16] have focussed on supporting various forms of change
[16, 19, 24]. the intention of the next version (adept2) is to provide f ull sup-
port for changes, including transfer. yawl is a more recent initiative based
on formal foundations that shows signiﬁcant promise in the support of a num-
ber of distinct ﬂexibility approaches. declare is the most recent of the oﬀerings
examined and its declarative basis provides a number of ﬂexibility features. in-
terestingly, it supports transfer of existing process instances to the new process
model. in the declarative setting, transfer is easily supported because it is not
necessary to ﬁnd a matching state in the new process for each instance [12].
the evaluation results are depicted in table 1, which shows whether a system
provides full (+), partial (+/–) or no support (–) for an evaluation criterio n. for
4the evaluation of yawl includes the so-called worklet service.table 1. product evaluations
adept1 yawl flower declare
flexibility by design
parallelism + + + +
choice + + + +
iteration + + + +
interleaving – + +/– +
multiple instances – + + +
cancellation – + – +
flexibility by deviation
deviation operations (imperative languages)
undo – – +
redo – – +
skip – – +
create additional instance – – +/–
invoke task – – +
deviation operations (declarative languages)
violation of constraints +
flexibility by underspeciﬁcation
late binding – + – –
late modelling – + – –
static, before placeholder – – – –
dynamic, before placeholder – – – –
static, at placeholder – – – –
dynamic, at placeholder – + – –
flexibility by change
eﬀect of change
momentary change + – – +
evolutionary change – + – +
moment of allowed change
entry time + – – +
on–the–ﬂy + + – +
migration strategies for evolutionary change
forward recovery – + – –
backward recovery – + – –
proceed – – – +
transfer – + – +
the full description of the evaluation criteria and the detailed evaluations for
each of the oﬀerings, we refer readers to the associated technical report [10]. t he
remainder of this section discusses the evaluation results.
flexibility by design can be provided in several ways. parallelism, choice and
iteration are fully supported by all systems. interleaving, multiple ins tances and
cancellation are not supported by all systems, but they are all supported by
yawl and declare, although in diﬀerent ways. due to the nature of declara-
tive languages, the designer is encouraged to leave choices to users at run-time.flexibility by deviation is similarly supported by both flower and declare de-
spite their distinct conceptual foundations. flower achieves this by supporting
almost all of the deviation operations, whereas declare allows for viol ation of op-
tional constraints. flexibility by underspeciﬁcation is only supported by yawl
(through its worklet service). flexibility by change is supported by adept1,
yawl and declare. adept1 supports momentary change, which is allowed
both at entry-time and on-the-ﬂy. as mentioned earlier, the adept develop-
ers have undertaken comprehensive research into the issue of dynamic process
change and it will be interesting to see this incorporated in the next release
(adept2) when it becomes available. evolutionary change is supported by
yawl and declare, but unlike declare, yawl only supports changes to the
process model. for this reason, yawl does not support momentary change, en-
try time change and a proceed strategy. declare supports changes for process
instances and for the process model and oﬀers proceed and transfer strategies.
transfer will be applied to those instances for which the execution trace does not
violate the new process model, otherwise the proceed strategy will be applied,
see [12] for details.
none of the evaluated systems provides the full range of ﬂexibility alterna-
tives. yawl focusses on providing ﬂexibility by design and underspeciﬁcation,
adept1 on ﬂexibility by change, flower on ﬂexibility by deviation and de-
clare provides ﬂexibility in several diﬀerent areas: design, deviation, and change.
4 related work
the need for process ﬂexibility has long been recognised [8, 18] in the workﬂow
and process technology communities as a critical quality of eﬀective business
processes in order for organisations to adapt to changing business circumstances.
it ensures that the “ﬁt” between actual business processes and the technologies
that support them are maintained in changing environments. the notion of
ﬂexibility is often viewed in terms of the ability of an organisation’s pro cesses
and supporting technologies to adapt to these changes [22, 7]. an alternate view
advanced by regev and wegmann [13] is that ﬂexibility should be considered
from the opposite perspective i.e., in terms of what stays the same not wha t
changes. indeed, a process can only be considered to be ﬂexible if it is possible
to change it without needing to replace it completely [14]. hence ﬂexibility is
eﬀectively a balance between change and stability that ensures that the identity
of the process is retained [13].
there have been a series of proposals for classifying ﬂexibility, both in ter ms
of the factors which motivate it and the ways in which it can be achieved wi thin
business processes. snowdon et al. [22] identify three causal factors: type ﬂexibil-
ity (arising from the diversity of information being handled), volume ﬂexibil ity
(arising from the amount of information types) and structural ﬂexibility (arising
from the need to operate in diﬀerent ways). soﬀer [23] diﬀerentiates between
short-term ﬂexibility, which involves a temporary deviation from the sta ndard
way of working, and long-term ﬂexibility, which involves changes to the usualway of working. kumar and narasipuram [9] distinguish pre-designed ﬂexibil-
ity which is anticipated by the designer and forms part of the process deﬁnition
and just-in-time responsive ﬂexibility which requires an “intelligent process m an-
ager” to deal with the variation as it arises at runtime. carlsen et al. [ 6] identify
a series of desirable ﬂexibility features for workﬂow systems based on an exami -
nation of ﬁve workﬂow oﬀerings using a quality evaluation framework. heinl et
al. [8] propose a classiﬁcation scheme with distinct approaches – ﬂexibility b y
selection, where a variety of alternative execution paths are designed into a pro-
cess, and ﬂexibility by adaption, where a workﬂow is “adapted” (i.e., modiﬁed)
to meet with the new requirements. two distinct approaches to achieving each
of these approaches are recognised: ﬂexibility by selection can be implemented
either by advance modelling (before execution time) or late modelling (during
execution time) where as ﬂexibility by adaption can be handled either by type or
instance adaption. van der aalst and jablonski [2] adopt a similar strategy f or
supporting ﬂexibility. moreover they propose a scheme for classifying workﬂo w
changes in detail based on six criteria: (1) reason for change, (2) eﬀect of change,
(3) perspectives aﬀected, (4) kind of change, (5) when are changes allowed and
(6) what to do with existing process instances. regev et al. [14] provide an ini-
tial attempt at deﬁning a taxonomy of the concepts relevant to business process
ﬂexibility. this taxonomy has three orthogonal dimensions: the abstraction lev el
of the change, the subject of the change and the properties of the change. whilst
it incorporates elements of the research initiatives discussed above, it is not com-
prehensive in form and does not describe the relationships that exist between
these concepts or link them to possible realisation approaches.
the individual ﬂexibility types discussed in this paper are informed by a
multitude of research initiatives in the workﬂow and bpm ﬁelds. it is not poss ible
to discuss these in detail in the conﬁnes of this paper, however there is a detailed
literature review of the area in [10].
5 conclusion
in this paper we have proposed a comprehensive taxonomy of ﬂexibility ap-
proaches achieved based on an extensive survey of contemporary oﬀerings and
literature in the ﬁeld. the four distinct ﬂexibility types, that make up the pro-
posed taxonomy, diﬀer with respect to the moment and the manner in which
both foreseen and unforeseen behaviour can be handled in a process. on the
basis of this taxonomy, we have evaluated the support for ﬂexibility provided
by various commercial and research oﬀerings (these were the only oﬀerings that
demonstrated any sort of ﬂexibility features).
the evaluation process revealed varying approaches to ﬂexibility support in
the selected oﬀerings. moreover, individual oﬀerings tended to exhibit a degree of
specialisation in their approach to process ﬂexibility. such a strict speciali sation
limits the use of oﬀerings in practice, since they are not capable of accommo-
dating foreseen and unforeseen behaviours in processes during diﬀerent phases
of the bpm cycle. we hope that insights provided in this paper might triggerthe enhancement of existing tools and/or development of new ones with a view
for providing a greater support for ﬂexibility.
a logical future step in researching the process ﬂexibility is the establish-
ment of a formal taxonomy/ontology for process ﬂexibility, which would allow
realisations of each of the ﬂexibility types to be compared in an objective a nd
language-independent way. furthermore, another interesting line of research is
to assess the extent of ﬂexibility that current processes demand with a view to
determining which of the ﬂexibility approaches are of most use in practice.
in this paper we concentrated on the control-ﬂow perspective of a business
process, other perspectives addressing data, resources and applications used in
a process are also subject to change. thus, it would be worthwhile to extend
the taxonomy in order to incorporate these perspectives. additionally, there a re
some interesting process mining challenges presented by systems that support
deviation or change operations, as in these oﬀerings there is the potential f or
individual process instances to execute distinct process models.
references
1. w.m.p. van der aalst and a.h.m. ter hofstede. yawl: yet another wor kﬂow
language. information systems , 30(4):245–275, 2005.
2. w.m.p. van der aalst and s. jablonski. dealing with workﬂow change: id entiﬁca-
tion of issues and solutions. international journal of computer systems, science,
and engineering , 15(5):267–276, 2000.
3. w.m.p. van der aalst, m. weske, and d. gr¨ unbauer. case handling: a n ew
paradigm for business process support. data and knowledge engineering ,
53(2):129–162, 2005.
4. m. adams, a.h.m. ter hofstede, w.m.p. van der aalst, and d. edmond. dynamic,
extensible and context-aware exception handling for workﬂows. in f . curbera,
f. leymann, and m. weske, editors, proceedings of the otm conference on co-
operative information systems (coopis 2007) , volume 4803 of lecture notes in
computer science , pages 95–112. springer-verlag, berlin, 2007.
5. m. adams, a.h.m. ter hofstede, d. edmond, and w.m.p. van der aalst. worklets:
a service-oriented implementation of dynamic flexibility in wor kﬂows. in
r. meersman and z. tari et al., editors, proceeding of the otm conference on
cooperative information systems (coopis 2006) , volume 4275 of lecture notes in
computer science , pages 291–308. springer-verlag, berlin, 2006.
6. s. carlsen, j. krogstie, a. slvberg, and o.i. lindland. evaluating ﬂ exible work-
ﬂow systems. in proceedings of the thirtieth hawaii international conference on
system sciences (hicss-30) , maui, hawaii, 1997. ieee computer society press.
7. f. daoudi and s. nurcan. a benchmarking framework for methods to desi gn
ﬂexible business processes. software process improvement and practice , 12:51–63,
2007.
8. p. heinl, s. horn, s. jablonski, j. neeb, k. stein, and m. teschke . a compre-
hensive approach to ﬂexibility in workﬂow management systems. in wacc ’99:
proceedings of the international joint conference on work activiti es coordination
and collaboration , pages 79–88, new york, ny, usa, 1999. acm.
9. k. kumar and m. m. narasipuram. deﬁning requirements for business process
ﬂexibility. in workshop on business process modeling, design and support (bp-
mds06), proceedings of caise06 workshops , pages 137–148, 2006.10. n.a. mulyar, m.h. schonenberg, r.s. mans, n.c. russell and w.m.p . van der
aalst. towards a taxonomy of process flexibility (extended version ). bpm
center report bpm-07-11, bpmcenter.org, 2007.
11. m pesic and w.m.p. van der aalst. a declarative approach for ﬂexible bu siness
processes management. in business process management workshops , pages 169–
180, 2006.
12. m. pesic, m. h. schonenberg, n. sidorova, and w.m.p. van der aalst. c onstraint-
based workﬂow models: change made easy. in f. curbera, f. leymann, and
m. weske, editors, proceedings of the otm conference on cooperative information
systems (coopis 2007) , volume 4803 of lecture notes in computer science , pages
77–94. springer-verlag, berlin, 2007.
13. g. regev, i. bider, and a. wegmann. deﬁning business process ﬂex ibility with the
help of invariants. software process improvement and practice , 12:65–79, 2007.
14. g. regev, p. soﬀer, and r. schmidt. taxonomy of ﬂexibility in busine ss processes.
inproceedings of the 7th workshop on business process modelling, development
and support(bpmds’06) , 2006.
15. g. regev and a. wegmann. a regulation-based view on business process an d
supporting system ﬂexibility. in workshop on business process modeling, design
and support (bpmds05), proceedings of caise05 workshops , pages 35–42, 2005.
16. m. reichert and p. dadam. adeptﬂex: supporting dynamic changes of
workﬂow without loosing control. journal of intelligent information systems ,
10(2):93–129, 1998.
17. manfred reichert, stefanie rinderle, and peter dadam. adept work ﬂow man-
agement system. in wil m. p. van der aalst, arthur h. m. ter hofstede , and
mathias weske, editors, business process management, international conference,
bpm 2003, eindhoven, the netherlands, june 26-27, 2003, proceed ings, volume
2678 of lecture notes in computer science , pages 370–379. springer, 2003.
18. h.a. reijers. workﬂow ﬂexibility: the forlorn promise. in 15th ieee international
workshops on enabling technologies: infrastructures for colla borative enterprises
(wetice 2006), 26-28 june 2006, manchester, united kingdom , pages 271–272.
ieee computer society, 2006.
19. s. rinderle, m. reichert, and p. dadam. correctness criteria for dynamic
changes in workﬂow systems: a survey. data and knowledge engineering ,
50(1):9–34, 2004.
20. n. russell, a.h.m. ter hofstede, w.m.p. van der aalst, and n. mul yar. workﬂow
control-ﬂow patterns: a revised view. technical report bpm-06-22, 2006. http:
//www.bpmcenter.org .
21. s.w. sadiq, w. sadiq, and m.e. orlowska. pockets of ﬂexibility in workﬂow speciﬁ-
cation. in er ’01: proceedings of the 20th international conference on concept ual
modeling , pages 513–526, london, uk, 2001. springer-verlag.
22. r.a. snowdon, b.c. warboys, r.m. greenwood, c.p. holland, p.j. kawalek, and
d.r. shaw. on the architecture and form of ﬂexible process support .software
process improvement and practice , 12:21–34, 2007.
23. p. soﬀer. on the notion of ﬂexibility in business processes. in workshop on busi-
ness process modeling, design and support (bpmds05), proceedings of caise05
workshops , pages 35–42, 2005.
24. b. weber, s.b. rinderle, and m.u. reichert. change support in pr ocess-aware in-
formation systems - a pattern-based analysis. technical report techn ical report
tr-ctit-07-76, issn 1381-3625, centre for telematics and information technol-
ogy, university of twente, enschede, 2007. http://eprints.eemcs.utwente.nl/
11331/ .