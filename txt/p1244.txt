conformance checking
over uncertain event data
marco pegoraro 1, merih seran uysal1, and wil m.p. van der aalst1
1chair of process and data science (pads), department of computer science,
rwth aachen university, aachen, germany
fpegoraro, uysal, vwdaalstg@pads.rwth-aachen.de
abstract
the strong impulse to digitize processes and operations in companies and enter-
prises have resulted in the creation and automatic recording of an increasingly large
amount of process data in information systems. these are made available in the
form of event logs. process mining techniques enable the process-centric analysis
of data, including automatically discovering process models and checking if event
data conform to a given model. in this paper, we analyze the previously unex-
plored setting of uncertain event logs. in such event logs uncertainty is recorded
explicitly, i.e., the time, activity and case of an event may be unclear or imprecise.
in this work, we de/f._i/i.dotlessne a taxonomy of uncertain event logs and models, and we
examine the challenges that uncertainty poses on process discovery and confor-
mance checking. finally, we show how upper and lower bounds for conformance
can be obtained by aligning an uncertain trace onto a regular process model.
keywords: process mininguncertain datapartial order.
m. pegoraro, m.s. uysal, and w.m.p. van der aalst. conformance checking over uncertain event
data. information systems, 102:101810, 2021.c/o.sc/l.sc/o.sc/p.sc/h.sc/o.sc/n.sc
this work is licensed under a creative commons “attribution-noncommercial 4.0 in-
ternational” license.
©the authors. some rights reserved.
this document is an author accepted manuscript (aam) corresponding to the following scholarly paper:
pegoraro, marco, merih seran uysal, and wil m. p. van der aalst. “conformance checking over uncertain event data”.
in:information systems 102 (2021), p. 101810. /i.sc/s.sc/s.sc/n.sc : 0306-4379. /d.sc/o.sc/i.sc :10.1016/j.is.2021.101810
please, cite this document as shown above.
publication chronology:
•2020-11-23: full text submitted to elsevier information systems
•2021-01-29: major revision requested
•2021-03-30: revised version submitted
•2021-05-26: noti/f._i/i.dotlesscation of acceptance
•2021-06-01: published
the published version referred above is ©elsevier.
correspondence to:
marco pegoraro, chair of process and data science (p ads), department of computer science,
r wth aachen university, ahornstr. 55, 52074 aachen, germany
w ebsite: http://mpegoraro.net/ email: pegoraro@pads.rwth-aachen.de orcid: 0000-0002-8997-7517
content: 52 pages, 12 /f._i/i.dotlessgures, 10 tables, 42 references. t ypeset with pdfl atex, biber, and bibl atex.
please do not print this document unless strictly necessary.m. pegoraro et al. conformance checking over uncertain event data
1 introduction
over the last decades, the concept of process has become more and more central in for-
mally describing the activities of businesses, companies and other similar entities, struc-
tured in speci/f._i/i.dotlessc steps and phases. a process is thus de/f._i/i.dotlessned as a well-structured set of
activities, potentially performed by multiple actors ( resources ), which contribute to the
completion of a speci/f._i/i.dotlessc task or to the achievement of a speci/f._i/i.dotlessc goal. in this context, a
very important notion is the concept of case, that is, a single instance of a process. for
example, in a healthcare process, a case may be a single hospitalization of a patient, or
the patient themself; if the process belongs to a credit institution, a case may be a loan
application from a customer, and so on. the case notion allows us to de/f._i/i.dotlessne a process as
a procedure that de/f._i/i.dotlessnes the steps needed to handle cases from inception to completion.
aprocess model de/f._i/i.dotlessnes such a procedure, and can be expressed in a number of di/f._fferent
formalisms (transition systems, petri nets, bpmn and uml diagrams, and many more).
consequently, the study and adoption of analysis techniques speci/f._i/i.dotlesscally customized to
deal with process data and process models has enabled the bridging of business admin-
istration and data science and the development of dedicated disciplines like business in-
telligence andbusiness process management (bpm).
the processes that govern the innards of business companies are increasingly sup-
ported by sof/t.f_ware tools. performing speci/f._i/i.dotlessc activities is both aided and recorded by
process-aware information systems (p aiss), which support the de/f._i/i.dotlessnition and manage-
ment of processes. the information regarding the execution of processes can then be
extracted from p aiss in the form of an event log , a database or /f._i/i.dotlessle containing the dig-
ital footprint of the operations carried out in the context of the execution of a process
and recorded as events . event logs can vary in form, and contain di/f._fferently structured
information depending on the information system that enacted data collection in the
organization. although many di/f._fferent event attributes can be recorded, it is typically
assumed that three basic features of an event are available in the log: the time in which
the event occurred, the activity that has been performed, and the case identi/f._i/i.dotlesser to which
the event belong. this last attribute allows to group events in clusters belonging to the
same case, and these resulting clusters (usually organized in sequences sorted by times-
tamp) are called process traces . the discipline of process mining is concerned with the
automatic analysis of event logs, with the goal of extracting knowledge regarding e.g. the
structure of the process, the conformity of events to a speci/f._i/i.dotlessc normative process model,
the performance of the agents executing the process, the relationships between groups
of actors in the process.
in this paper, we will consider the analysis of a speci/f._i/i.dotlessc class of event logs: logs that
contain uncertain event data . uncertain events are recordings of executions of speci/f._i/i.dotlessc
activities in a process which are enclosed with an indication of uncertainty in the event
attributes. speci/f._i/i.dotlesscally, we consider the case where the attributes of an event are not
3 / 52m. pegoraro et al. conformance checking over uncertain event data
recorded as a precise value but as a range or a set of alternatives.
uncertain event data are common in practice, but uncertainty is of/t.f_en not explicit.
the process mining manifesto [5] describes a fundamental property of event data as
trustworthiness , the assumption that the recorded data can be considered correct and ac-
curate. in a general sense, uncertainty—as de/f._i/i.dotlessned here—is an explicit absence of trust-
worthiness, with an indication of uncertainty recorded together with the event data. in
the taxonomy of event data proposed in the manifesto, the logs at the two lower levels
of quality frequently lack trustworthiness, and thus can be uncertain. this encompasses
a wide range of processes, such as event logs of document and product management sys-
tems, error logs of embedded systems, worksheets of service engineers, and any process
recorded totally or partially on paper. there are many possible causes of uncertainty:
•incorrectness . in some instances, the uncertainty is simply given by errors that
occurred while recording the data themselves. faults of the information system,
or human mistakes in a data entry phase can all lead to missing or altered event
data that can be subsequently modeled as uncertain event data.
•coarseness . some information systems have limitations in their way of recording
data - of/t.f_en tied to factors like the precision of the data format - such that the event
data can be considered uncertain. a typical example is an information system that
only records the date, but not the time, of the occurrence of an event: if two events
are recorded in the same day, the order of occurrence is lost. this is an especially
common circumstance in the processes that are, partially or completely, recorded
on paper and then digitalized. another factor that can lead to uncertainty in the
time of recording is the information system being overloaded and, thus, delaying
the recording of data. this type of uncertainty can also be generated by the limited
sensibility of a sensor.
•ambiguity . in some cases, the data recorded is not an identi/f._i/i.dotlesser of a certain event
attribute; in these instances, the data needs to be interpreted, either automatically
or manually, in order to obtain a value for the event attribute. uncertainty can
arise if the meaning of the data is ambiguous and cannot be interpreted with pre-
cision. examples include data in the form of images, text, or video.
these factors cause the presence of implicit uncertainty in the event log. it is important
to note that, in order to be analyzed, these indications of imprecision or incorrectness
have to be translated into explicit uncertainty. explicit uncertainty is contained directly
in the event log in the form of event attributes. it is possible to think of explicit uncer-
tainty as metadata complementing the information regarding events. this metadata de-
scribes the type and magnitude of the imprecision a/f._ffecting some event attributes, which
might be part of the control-/f._asc/l.f_ow perspective or an additional data perspective present
in the event log.
4 / 52m. pegoraro et al. conformance checking over uncertain event data
aside from the possible causes, we can individuate other types of uncertain event
logs based on the frequency of uncertain data. uncertainty can be infrequent , when a
speci/f._i/i.dotlessc attribute is only seldomly recorded together with explicit uncertainty; the un-
certainty is rare enough that uncertain events can be considered outliers. conversely,
frequent uncertain behavior of the attribute is systematic, pervasive in a high number
of traces, and thus not to be considered an outlier. the uncertainty can be considered
part of the process itself. these concepts are not meant to be formal, and are laid out
to distinguish between logs that are still processable regardless of the uncertainty, and
logs where the uncertainty is too invasive to analyze them with existing process mining
techniques.
in some contexts, the causes of uncertainty in event data can be resolved at the source,
by acting directly on the process and on the tools supporting operations within it. for
instance, a natural way to eliminate uncertainty in data recording is to automate tasks
within the process as much as possible. this is a popular solution in applications like
industry and manufacturing, where the actual tasks already involve machinery or au-
tomated systems. while we discuss the possibility of employing automation tools in
processes where the majority of agents are humans in section 7.2, supporting a process
with automation or auditing sof/t.f_ware that oversees and records the actions of agents is
very challenging, for both technical and ethical reasons. automatically recording data
across di/f._fferent platforms, formats, and information systems by di/f._fferent producers and
hosted by di/f._fferent service providers is of/t.f_en unfeasible, and there are legal reasons that
might prevent it, such as breaches of con/f._i/i.dotlessdentiality. in some jurisdictions, legally valid
documents must be on paper, making real-time automatic data recording outright im-
possible. for these reasons, while eliminating uncertainties through automation is an
advisable choice, analyzing data containing a description of such uncertainties is some-
times the only analysis technique that can deliver approximate but trustworthy results.
the diagram in figure 1 shows an overview of the main elements of process mining
over uncertainty. the schema shows some additional elements with respect to classical
process mining: we can see that we can combine raw process data from information
systems (containing implicit uncertainty) with domain knowledge provided by a process
expert to obtain an uncertain event log, which contains explicit uncertainty. the data
in an uncertain event log can be abstracted in a graph representation, which enables the
inspection of its causes. lastly, the graph representations also allows to perform the tasks
of process discovery and conformance checking on uncertain event data.
in this paper, we propose a taxonomy of the di/f._fferent types of explicit uncertainty
in process mining, together with a formal, mathematical formulation. as an example
of practical application, we will consider the case of conformance checking [15], and we
will apply it to uncertain data by assessing what are the upper and lower bounds on the
conformance score for possible values of the attributes in an uncertain trace.
the main drivers behind this work is to provide the means to treat uncertainty as
5 / 52m. pegoraro et al. conformance checking over uncertain event data
agentsprocess
domain 
knowledgeraw data
uncertain
event loggraph 
representationprocess modelrecords
abstractsprocess
discovery
conformance
checking
figure 1: the overall schema for process mining over uncertain event data.
a relevant part of a process; thus, we aim not to /f._i/i.dotlesslter it out but to model and explain
it. in conclusion, there are two novel aspects regarding uncertain data that we intend to
address in this work. the /f._i/i.dotlessrst novelty is the explicitness of uncertainty : we work with
the underlying assumption that the actual value of the uncertain attribute, while not
directly provided, is described formally. this is the case when meta-information about
the uncertainty in the attribute is available, either deduced from the features of the in-
formation system(s) that record the logs or included in the event log itself. note that, as
opposed to all previous work on the topic, the fact that uncertainty is explicit in the data
means that the concept of uncertain behavior is completely separated from the concept
of infrequent behavior. the second novelty is the explicit modeling of uncertainty : we
consider uncertainty part of the process. instead of /f._i/i.dotlessltering or cleaning the log, we intro-
duce the uncertainty perspective in process mining by extending the currently available
techniques to incorporate it.
in summary, the paper aims to discuss the following research questions:
•what is uncertainty, and in which ways can it manifest within event data?
•how can uncertain event data be processed to retain all information contained
within it?
•how can we exploit this representation to solve classical process mining tasks,
such as conformance checking?
6 / 52m. pegoraro et al. conformance checking over uncertain event data
the rest of this paper is organized as follows. section 2 proposes a taxonomy of the
di/f._fferent possible types of uncertain process data. section 3 contains the formal de/f._i/i.dotlessni-
tions needed to manage uncertainty. section 4 presents the main contribution of this
paper, a framework able to describe an array of types and classi/f._i/i.dotlesscations of uncertain be-
havior. section 5 describes a practical application of process mining over uncertain event
data, the case of conformance checking through alignments. section 6 shows experi-
mental results on computing conformance checking scores for synthetic uncertain data,
as well as a case of application on real-life data. section 7 discusses previous and related
work on the management of uncertain data and on the topic of conformance checking.
finally, section 8 concludes the paper and discusses future work.
2 a taxonomy of uncertain event data
the goal of this section of the paper is to propose a categorization of the di/f._fferent types
of uncertainty that can appear in process mining. in process management, a central con-
cept is the distinction between the data perspective (the event log) and the behavioral
perspective (the process model). the /f._i/i.dotlessrst one is a static representation of process in-
stances, the second summarizes the behavior of a process. both can be extended with
a concept of explicit uncertainty: this concept also implies an extension of the process
mining techniques that have currently been implemented.
in this paper, we will focus on uncertainty in event data, rather than applying the
concept of uncertainty to models. speci/f._i/i.dotlesscally, we will consider computing the confor-
mance score of uncertain process data on classical models, extending the approach shown
in [29]. an application of process discovery in the setting of uncertain event data has
been presented in [31].
w e can individuate two di/f._fferent notions of uncertainty:
•strong uncertainty : the possible values for the attributes are known, but the prob-
ability that the attribute will assume a certain instantiation is unknown or unob-
servable.
•w eak uncertainty : both the possible values of an attribute and their respective
probabilities are known.
in the case of a discrete attribute, the strong notion of uncertainty consists on a set
of possible values assumed by the attribute. in this case, the probability for each possi-
ble value is unknown. vice-versa, in the weak uncertainty scenario we also have a dis-
crete probability distribution de/f._i/i.dotlessned on that set of values. in the case of a continuous
attribute, the strong notion of uncertainty can be represented with an interval for the
variable. notice that an interval does not indicate a uniform distribution; there is no in-
formation on the likelihood of values in it. vice-versa, in the weak uncertainty scenario
7 / 52m. pegoraro et al. conformance checking over uncertain event data
weak uncertainty strong uncertainty
discrete datadiscrete probability distribution
/zero.lnum /five.lnum /one.lnum/zero.lnum /one.lnum/five.lnum /two.lnum/zero.lnum/zero.lnum/one.lnum/zero.lnum/two.lnum/zero.lnum/three.lnum/zero.lnum/four.lnum/zero.lnum/five.lnum/zero.lnumset of possible values
fx,y,z,...g
continuous dataprobability density function
 /two.lnum /one.lnum /zero.lnum /one.lnum /two.lnum /three.lnum/zero.lnum/zero.lnum./two.lnum/zero.lnum./four.lnum/zero.lnum./six.lnum/zero.lnum./eight.lnuminterval
fx2rjaxbg
t able 1: the four di/f._fferent types of uncertainty.
we also have a probability density function de/f._i/i.dotlessned on a certain interval. t able 1 summa-
rizes these concepts. this leads to very simple representations of explicit uncertainty.
in this paper, we consider only the control /f._asc/l.f_ow and time perspective of a process—
namely, the attributes of the events that allow us to discover a process model. these are
the unique identi/f._i/i.dotlesser of a process instance (case id), the timestamp (of/t.f_en represented
by the distance from a /f._i/i.dotlessxed origin point, e.g. the unix epoch ), and the activity identi/f._i/i.dotlesser
of an event. case ids and activities are values chosen from a /f._i/i.dotlessnite set of possible values;
they are discrete variables. timestamps, instead, are represented by numbers and thus
are continuous variables.
t able 2: an example of a strongly uncertain trace. for the sake of clarity, the timestamp /f._i/i.dotlesseld only reports
dates.
case id timestamp activity indet. event
fid327, id412g 2011-12-05 a !
id327 2011-12-07fb, c, dg !
id327 [2011-12-06, 2011-12-10] d ?
id327 2011-12-09 fa, cg !
fid327, id412, id573 g 2011-12-11 e ?
w e will also describe an additional type of uncertainty, which lies on the event level
8 / 52m. pegoraro et al. conformance checking over uncertain event data
t able 3: an example of a weakly uncertain trace. for the sake of clarity, the timestamp /f._i/i.dotlesseld only reports
dates.
case id timestamp activity indet. event
fid313:0.9, id370:0.1 g 2011-12-05 a !
id313 2011-12-07fb:0.7, c:0.3g !
id313 /n.sw(2011-12-08, 2) d ?:0.5
id313 2011-12-09fa:0.2, c:0.8g !
fid313:0.4, id370:0.6 g 2011-12-11 e ?:0.7
t able 4: summary of the types of uncertainty that can a/f._ffect a log over the attributes of its events. the last
column provides an encoding for each type of uncertainty.
attribute attribute type uncertainty type encoding
event
(indeterminacy)discretew eak [e]w
strong [e]s
case discretew eak [c]w
strong [c]s
activity discretew eak [a]w
strong [a]s
timestamp continuousw eak [t]w
strong [t]s
other attributediscretew eak [atd]w
strong [atd]s
continuousw eak [atc]w
strong [atc]s
rather than the attribute level:
•indeterminate event : the event may have not taken place even though it was recorded
in the event log. indeterminate events are indicated with a ? symbol, while deter-
minate (regular) events are marked with a ! symbol.
examples of strongly and weakly uncertain traces are shown in t ables 2 and 3 respec-
tively. additionally, we present a time diagram of the trace in t able 2: this representation
shows the time relationship between events in the trace in absolute scale. this diagram
is shown in figure 2
the taxonomy presented in this section is summarized in t able 4. this table encodes
all types of uncertainty illustrated here. through this taxonomy, we can indicate the
types of uncertainty that might a/f._ffect an uncertain event log.
9 / 52m. pegoraro et al. conformance checking over uncertain event data
06-12-2011 00:00:00 07-12-2011 00:00:00 08-12-2011 00:00:00 09-12-2011 00:00:00 10-12-2011 00:00:00 11-12-2011 00:00:00ab, c, dda, ce
figure 2: time diagram of the trace in t able 2. this diagram shows the time information of an uncertain
trace in an absolute scale. note that some types of uncertainty (namely, indeterminate events and uncer-
tainty on case ids) are not depicted.
more types of uncertainty can be combined to describe an uncertain event log. for
example, an event log with strong uncertainty on events, activities and timestamps would
be an [e, a, t]s-type log. an uncertain log can also be characterized by di/f._fferent types
of uncertainty on di/f._fferent attributes: a log with strong uncertainty on events and weak
uncertainty on activities is a [e]s[a]w-type log.
in the next section, we will describe these di/f._fferent types of uncertainty in a mathe-
matical framework that will, in turn, enable process mining analyses on uncertain event
data.
3 preliminaries
let us introduce some preliminary de/f._i/i.dotlessnitions in order to describe uncertainty in pro-
cess mining in a formal way. these de/f._i/i.dotlessnitions will provide the means to represent the
behavior contained in uncertain data, and enable process mining tasks such as process
discovery and conformance checking.
10 / 52m. pegoraro et al. conformance checking over uncertain event data
3.1 basic de/f._i/i.dotlessnitions
firstly, we will de/f._i/i.dotlessne some basic mathematical structures.
deﬁnition 1 (power set ).the power set of a setais the set of all possible subsets of
a, and is denoted with /p.sw(a)./p.swne(a)denotes the set of all the non-empty subsets of a:
/p.swne(a) =/p.sw(a)nf;g .
deﬁnition 2 (multiset ).amultiset is an extension of the concept of set that keeps
track of the cardinality of each element. /b.sw(a)is the set of all multisets over some set
a. multisets are denoted with square brackets, e.g. b/one.lnum= [ ] (the empty multiset), b/two.lnum=
[a,a,b ],b/three.lnum= [a,b,c ],b/four.lnum= [a,b,c,a,a,b ]are all multisets over a=fa,b,cg. in
multiset the order of representation of the elements is irrelevant, and they can also be
denoted with the cardinality of their elements, e.g. b/four.lnum= [a,b,c,a,a,b ] = [a/three.lnum,b/two.lnum,c]. w e
denote withb(x)the cardinality of element x2ainb, e.g.b/four.lnum(a) = /three.lnum ,b/four.lnum(c) = /one.lnum , and
b/four.lnum(d) = /zero.lnum .
w e can extend to multiset standard set operators such as membership (e.g. a2b/two.lnumand
c /2b/two.lnum), union (e.g.b/two.lnum]b/three.lnum=b/four.lnum), diﬀerence (e.g. b/four.lnumnb/three.lnum=b/two.lnum) and total cardinality (e.g.
jb/four.lnumj= /six.lnum).
deﬁnition 3 (sequence, subsequence and permutation ).given a setx, a /unifb01nite
sequence overxof lengthnis a functions2x:f/one.lnum,...,ng!x, and it is written
ass=hs/one.lnum,s/two.lnum,...,sni. w e denote withhithe empty sequence, the sequence with no
elements and of length 0. over the sequence swe de/unifb01nejsj=n,s[i] =siandx2s,
9/one.lnumins=si. the concatenation between two sequences is denoted with hs/one.lnum,s/two.lnum,...,sni
hs0
/one.lnum,s0
/two.lnum,...,s0
mi=hs/one.lnum,s/two.lnum,...,sn,s0
/one.lnum,s0
/two.lnum,...,s0
mi. given two sequences s=hs/one.lnum,s/two.lnum,...,sniand
s0=hs0
/one.lnum,s0
/two.lnum,...,s0
mi,s0is asubsequence ofsif and only if there exists a sequence of strictly
increasing natural numbers hi/one.lnum,i/two.lnum,...,imisuch that8/one.lnumjmsij=s0
j. w e indicate this
withs0s. a permutation of the setxis a sequencex/s.swthat contains all elements of x
without duplicates: x/s.sw2x,x2x/s.sw, and for all /one.lnumijx/s.swjand for all /one.lnumjjx/s.swj,
x/s.sw[i] =x/s.sw[j]!i=j. w e denote with /s.swxall such permutations of set x.
deﬁnition 4 (sequence projection ).letxbe a set andqxone of its sub-
sets.q:x!qis the sequence projection function and is de/unifb01ned recursively: hiq=hi
and forσ2xandx2x:
(hxiσ)q=(
σq ifx62q
hxiσqifx2q
for example,hy,z,yifx,yg=hy,yi.
11 / 52m. pegoraro et al. conformance checking over uncertain event data
deﬁnition 5 (applying functions to sequences ).letf:x6!ybe a par-
tial function.fcan be applied to sequences of xusing the following recursive de/unifb01nition:
f(hi) =hiand forσ2xandx2x:
f(hxiσ) =(
f(σ) ifx62dom (f)
hf(x)if(σ)ifx2dom (f)
next, so as to manage the possible di/f._fferent orders between events in a trace with
uncertain timestamps, we introduce formalisms to denote strict partial orders.
deﬁnition 6 (transitive relation and correct evaluation order ).letxbe a
set of objects and rbe a binary relation rxx.ristransitive if and only if for
allx,x0,x002xwe have that (x,x0)2r^(x0,x00)2r)(x,x00)2r. a correct
evaluation order is a permutation s2/s.swxof the elements of the set xsuch that for all
/one.lnumi<jjsjwe have that (s[j],s[i])62r.
deﬁnition 7 (strict partial order ).letsbe a set of objects. let s,s02s. a strict
partial orderoversis a binary relation that satis/unifb01es the following properties:
•irre/unifb02exivity:ssis false.
•transitivity: see de/unifb01nition 6.
•antisymmetry:ss0implies thats0sis false. implied by irre/unifb02exivity and
transitivity [22].
deﬁnition 8 (directed graph ).adirected graphgis a tuple (v,e )wherevis the
set of vertices and evvis the set of directed edges. the set /u.swgis the graph universe .
apath in a directed graph g= (v,e )is a sequence of vertices p2vsuch that for all
/one.lnum<i<jpj /one.lnumwe have that (pi,pi+/one.lnum)2e. w e denote with pgthe set of all such possible
paths over the graph g. given two vertices v,v02v, we denote withpg(v,v0)the set of all
paths beginning in vand ending inv0:pg(v,v0) =fp2pgjp[/one.lnum] =v^p[jpj] =v0g.v
andv0areconnected (andv0isreachable fromv), denoted byvg7!v0, if and only if there
exists a path between them in g:pg(v,v0)6=;. conversely,vg
67!v0,pg(v,v0) =;. w e
omit the superscript gif it is clear from the context. a directed graph gisacyclic if there
exists no pathp2pgsatisfyingp[/one.lnum] =p[jpj].
deﬁnition 9 (topological sorting ).letg= (v,e )2/u.swgbe an acyclic directed
graph. a topological sorting [25] og2/s.swvis a permutation of the vertices of gsuch that
for all /one.lnumi<jjogjwe have thatog[j]67!og[i]. w e denote with /o.swg/s.swvall such
possible topological sortings over g.
12 / 52m. pegoraro et al. conformance checking over uncertain event data
deﬁnition 10 (transitive reduction ).atransitive reduction of a graph g=
(v,e )2/u.swg[10]is the functionρ:/u.swg!/u.swgsuch that for the graph ρ(g) = (v,er)
we haveereand every pair of vertices connected in ρ(g)is not connected by any other
path: for all (v,v0)2er,pg(v,v0) =fhv,v0ig.ρ(g)is the graph with the minimal num-
ber of edges that maintain the reachability between edges of g. the transitive reduction
of a directed acyclic graph always exists and is unique [10].
3.2 process mining de/f._i/i.dotlessnitions
let us now de/f._i/i.dotlessne the basic artifacts needed to perform process mining.
deﬁnition 11 (universes ).let/u.swibe the set of all the event identi/f._i/i.dotlessers . let/u.swcbe
the set of all the case id identi/f._i/i.dotlessers . let/u.swabe the set of all the activity identi/f._i/i.dotlessers . let
/u.swtbe the totally ordered set of all the timestamp identi/f._i/i.dotlessers .
deﬁnition 12 (events and event logs ).let us denote with /e.swc=/u.swi/u.swc/u.swa
/u.swtthe universe of certain events . a certain event log is a set of eventslc/e.swcsuch
that every event identi/unifb01er in lcis unique.
deﬁnition 13 (simple certain traces and logs ).letf(e/one.lnum,c/one.lnum,a/one.lnum,t/one.lnum),(e/two.lnum,c/two.lnum,a/two.lnum,t/two.lnum),
..., (en,cn,an,tn)glcbe a set of certain events such that c/one.lnum=c/two.lnum= =cnand
t/one.lnum<t /two.lnum<<tn. a simple certain trace is the sequence of activities ha/one.lnum,a/two.lnum,...,ani2
/u.swainduced by such a set of events. /t.sw=/u.swadenotes the universe of certain traces.
l2/b.sw(/t.sw)is a simple certain log . w e will drop the quali/unifb01er “simple” if it is clear from
the context.
as a preliminary application of process mining over uncertain event data, we will
consider conformance checking. starting from an event log and a process model, con-
formance checking veri/f._i/i.dotlesses if the event data in the log conforms to the model, providing
a diagnostic of the deviations. conformance checking serves many purposes, such as
checking if process instances follow a speci/f._i/i.dotlessc normative model, assessing if a certain exe-
cution log has been generated from a speci/f._i/i.dotlessc model, or verifying the quality of a process
discovery technique.
the conformance checking algorithm that we are applying in this paper is based on
alignments . introduced by adriansyah [7], conformance checking through alignments
/f._i/i.dotlessnds deviations between a trace and a petri net model of a process by creating a corre-
spondence between the sequence of activities executed in the trace and the /f._i/i.dotlessring of the
transitions in the petri net. the following de/f._i/i.dotlessnitions are partially from [3].
deﬁnition 14 (petri net ).a petri net is a tuple n= (p,t,f )withpthe set of
places,tthe set of transitions, p\t=;, andf(pt)[(tp)the /unifb02ow relation.
a petri netn= (p,t,f )de/unifb01nes a directed graph (v,e )with verticesv=p[tand
edgese=f. a markingm2/b.sw(p)is a multiset of places.
13 / 52m. pegoraro et al. conformance checking over uncertain event data
a marking de/f._i/i.dotlessnes the state of a petri net, and indicates how many tokens each place
contains. for any x2p[t,nx=fx0j(x0,x)2fgdenotes the set of input nodes
andxn=fx0j(x,x0)2fgdenotes the set of output nodes. w e omit the superscript
nif it is clear from the context.
a transitiont2tisenabled in markingmof netn, denoted as (n,m )[ti, if each
of its input placestcontains at least one token. an enabled transition tmay /unifb01re, i.e.,
one token is removed from each of the input places tand one token is produced for each
of the output places t. formally:m0= (mnt)]tis the marking resulting from
/f._i/i.dotlessring enabled transition tin markingmof petri netn.(n,m )[ti(n,m0)denotes
thattis enabled inmand /f._i/i.dotlessringtresults in marking m0.
letσt=ht/one.lnum,t/two.lnum,...,tni2tbe a sequence of transitions. (n,m )[σti(n,m0)
denotes that there is a set of markings m/zero.lnum,m /one.lnum,...,mnsuch thatm/zero.lnum=m,mn=m0,
and (n,mi)[ti+/one.lnumi(n,mi+/one.lnum)for/zero.lnumi<n . a markingm0isreachable frommif there
exists aσtsuch that (n,m )[σti(n,m0).
deﬁnition 15 (labeled petri net ).a labeled petri net n= (p,t,f,l )is a petri
net(p,t,f )with labeling function l:t6!/u.swawhere/u.swais some universe of activity
labels. letσ=ha/one.lnum,a/two.lnum,...,ani2/u.swabe a sequence of activities. (n,m )[σb(n,m0)
if and only if there is a sequence σt2tsuch that (n,m )[σti(n,m0)andl(σt) =σ.
ift /2dom (l), it is called invisible . t o indicate invisible transitions, we use the place-
holder symbolτ /2/u.swa; for any invisible transition twe de/f._i/i.dotlessnel(t) =τ. an occurrence
of visible transition t2dom (l)corresponds to observable activity l(t).
deﬁnition 16 (system net ).a system net is a triplet sn = (n,m init,m /unifb01nal)where
n= (p,t,f,l )is a labeled petri net, minit2/b.sw(p)is the initial marking, and m/unifb01nal2
/b.sw(p)is the /unifb01nal marking. /u.swsnis the universe of system nets . over a system net we de/unifb01ne
the following:
•tv(sn) =dom (l)is the set of visible transitions insn,
•av(sn) =rng(l)is the set of corresponding observable activities insn,
•tu
v(sn) =ft2tv(sn)j8t02tv(sn)l(t) =l(t0))t=t0gis the set of unique
visible transitions in sn(i.e., there are no other transitions having the same visible
label),
•au
v(sn) =fl(t)jt2tu
v(sn)gis the set of corresponding unique observable
activities in sn,
•ϕ(sn) =fσj(n,m init)[σb(n,m /unifb01nal)gis the set of visible traces starting in
minitand ending inm/unifb01nal, and
14 / 52m. pegoraro et al. conformance checking over uncertain event data
•ϕf(sn) =fσtj(n,m init)[σti(n,m /unifb01nal)gis the corresponding set of complete
/unifb01ring sequences.
figure 3 shows a system net with initial and /f._i/i.dotlessnal markings minit = [start ]and
m/unifb01nal = [end]. given a system net, ϕ(sn)is the set of all possible visible activity
sequences, i.e., the labels of complete /f._i/i.dotlessring sequences starting in minitand ending in
m/unifb01nal projected onto the set of observable activities. given the set of activity sequences
ϕ(sn)obtainable via complete /f._i/i.dotlessring sequences on a certain system net, we can de/f._i/i.dotlessne
a perfectly /f._i/i.dotlesstting event log as a set of traces which activity projection is contained in
ϕ(sn).
3.3 conformance checking de/f._i/i.dotlessnitions
the task of conformance checking consist in comparing an event log and a model, in
order to assess the deviations of event data with respect to the expected behavior of the
process. this is usually done to verify if the process conforms to a de iure model designed
by process experts, which describes how the process should ideally run. w e will now
describe a conformance checking technique, in order to extend it to the uncertain setting.
deﬁnition 17 (perfectly fitting log ).letl2/b.sw(/t.sw)be a certain event log and let
sn = (n,m init,m /unifb01nal)2/u.swsnbe a system net.lis perfectly /unifb01tting snif and only if
fσ2lgϕ(sn).
the de/f._i/i.dotlessnitions described so far allow us to build alignments in order to compute
the /f._i/i.dotlesstness of trace on a certain model. an alignment is a correspondence between a
sequence of activities (extracted from the trace) and a sequence of transitions with the
relative labels (/f._i/i.dotlessred in the model while replaying the trace). the /f._i/i.dotlessrst sequence indicates
the “moves in the log” and the second indicates the “moves in the model”. if a move in
the model cannot be mimicked by a move in the log, then a “ ” (“no move”) appears in
the top row; conversely, if a move in the log cannot be mimicked by a move in the model,
then a “” (“no move”) appears in the bottom row.“no moves” not corresponding to
invisible transitions point to deviations between the model and the log. a move is a pair
(x,(y,t))where the /f._i/i.dotlessrst element refers to the log and the second element to the model.
a “” in the /f._i/i.dotlessrst element of the pair indicates a move on the model, while a “ ” in the
second element indicates a move on the log.
deﬁnition 18 (legal moves ).letl2/b.sw(/t.sw)be a certain event log, let a/u.swa
be the set of activity labels appearing in the event log, and let sn = (n,m init,m /unifb01nal)2
/u.swsnbe a system net with n= (p,t,f,l ).alm =f(x,(x,t))jx2a^t2
t^l(t) =xg[f (,(x,t))jt2t^l(t) =xg[f (x,)jx2agis the set of
legal moves .
15 / 52m. pegoraro et al. conformance checking over uncertain event data
figure 3: example of alignments on a system net. the alignment γ/one.lnumshows that the trace ha,d,b,e,hiis
perfectly /f._i/i.dotlesstting the net. the alignment γ/two.lnumshows that the traceha,b,d,b,e,hiis misaligned with the net in
one point, indicated by “ ”. partially from [3].
an alignment is a sequence of legal moves such that af/t.f_er removing all “ ” symbols,
the top row corresponds to a trace in the log and the bottom row corresponds to a /f._i/i.dotlessring
sequence starting in minitand ending inm/unifb01nal. notice that ift /2dom (l)is an invisible
transition, the activation of tis indicated by a “” on the log in correspondence of t
and the placeholder label τ. hence, the middle row corresponds to a visible path when
ignoring theτsteps. figure 3 shows a system net with two examples of alignments, σ/one.lnumof
a /f._i/i.dotlesstting trace and σ/two.lnumof a non-/f._i/i.dotlesstting trace.
deﬁnition 19 (alignment ).letσ2lbe a certain trace and σt2ϕf(sn)a
complete /unifb01ring sequence of system net sn. an alignment ofσandσtis a sequence
γ2almsuch that the projection on the /unifb01rst element (ignoring “ ”) yieldsσand the
projection on the last element (ignoring “ ” and transition labels) yields σt.
a trace and a model can have several possible alignments. in order to select the most
appropriate one, we introduce a function that associates a cost to undesired moves - the
ones associated with deviations.
deﬁnition 20 (cost of alignment ).cost functionδ:alm! i nassigns costs
to legal moves. the cost of an alignment γ2almis the sum of all costs: δ(γ) =p
(x,y)2γδ(x,y).
moves where log and model agree have no costs, i.e., δ(x,(x,t)) = /zero.lnum for allx2a.
moves on model only have no costs if the transition is invisible, i.e., δ(,(τ,t)) = /zero.lnum
16 / 52m. pegoraro et al. conformance checking over uncertain event data
ifl(t) =τ.δ(,(x,t))>/zero.lnumis the cost when the model makes an “ xmove” without a
corresponding move of the log (assuming l(t) =x6=τ).δ(x,)>/zero.lnumis the cost for an
“xmove” only on the log. in this paper, we of/t.f_en use a standard cost function δsthat
assigns unit costs: δs(x,(x,t)) = /zero.lnum ,δs(,(τ,t)) = /zero.lnum , andδs(,(x,t)) =δs(x,) = /one.lnum
for allx2a.
deﬁnition 21 (optimal alignment ).letl2/b.sw(/t.sw)be a certain event log and let
sn2/u.swsnbe a system net with ϕ(sn)6=;.
•forσ2l, we de/unifb01ne: γσ,sn=fγ2almj9σt2ϕf(sn)γis an alignment of
σandσtg.
•an alignmentγ2γσ,snisoptimal for traceσ2land system net snif for any
γ02γσ,sn:δ(γ0)δ(γ).
•λsn:/t.sw!almis a deterministic mapping that assigns any trace σto an opti-
mal alignment, i.e., λsn(σ)2γσ,snandλsn(σ)is optimal.
•costs (l,sn,δ) =p
σ2lδ(λsn(σ))are the misalignment costs of the whole event
log.
σ2lis a (perfectly) /unifb01tting trace for the system net snif and only ifδ(λsn(σ)) = /zero.lnum .l
is a (perfectly) /unifb01tting event log for the system net snif and only if costs (l,sn,δ) = /zero.lnum .
the technique to compute the optimal alignment [7] is as follows. firstly, it creates
anevent net , a sequence-structured system net able to replay only the trace to align. the
transitions in the event net have labels corresponding to the activities in the trace. then,
aproduct net should be computed. a product net is the union of the event net and the
model together, with synchronous transitions added. these additional transitions are
paired with transitions in the event net and in the process model that have the same label.
then, they are connected with arcs from the input places and to the output places of
those transitions. the product net is able to represent moves on log, moves on model and
synchronous moves by means of /f._i/i.dotlessring transitions. in fact, the transitions of the event net
correspond to moves on log, the transitions of the process model correspond to moves
on model, the added synchronous transitions correspond to synchronous moves. the
union of the initial and /f._i/i.dotlessnal markings of the event net and the process model constitute
respectively the initial and /f._i/i.dotlessnal marking of the product net, while every complete /f._i/i.dotlessring
sequence on the product net corresponds to a possible alignment. lastly, the product
net is translated to a state space, and a state space exploration via the aalgorithm is
performed in order to /f._i/i.dotlessnd the complete /f._i/i.dotlessring sequence that yields the lowest cost.
let us de/f._i/i.dotlessne formally the construction of the event net and the product net:
deﬁnition 22 (event net ).letσ2/t.swbe a certain trace. the event net en:/t.sw!
/u.swsnofσis a system net en (σ) = (p,t,f,l,m init,mfinal)such that:
17 / 52m. pegoraro et al. conformance checking over uncertain event data
•p=fpij/one.lnumijσj+ /one.lnumg,
•t=ftij/one.lnumijσjg,
•f=s
/one.lnumijσjf(pi,ti),(ti,pi+/one.lnum)g
•l:t!/u.swasuch that for all /one.lnumijσj,l(ti) =σ[i],
•minit= [p/one.lnum],
•mfinal = [pjpj].
note that the labeling function lof an event net is a total function: no invisible
transitions are contained in an event net, since for each event we generate a transition
labeled with the corresponding activity label.
deﬁnition 23 (product of two petri nets [41]).lets/one.lnum= (p/one.lnum,t/one.lnum,f/one.lnum,l/one.lnum,minit /one.lnum,mfinal /one.lnum)
ands/two.lnum= (p/two.lnum,t/two.lnum,f/two.lnum,l/two.lnum,minit /two.lnum,mfinal /two.lnum)be two system nets. the product net ofs/one.lnumand
s/two.lnumis the system net s=s/one.lnum
s/two.lnum= (p,t,f,l,m init,mfinal)such that:
•p=p/one.lnum[p/two.lnum,
•t(t/one.lnum[fgt/two.lnum[fg )such thatt=f(t/one.lnum,)jt/one.lnum2t/one.lnumg[f (,t/two.lnum)j
t/two.lnum2t/two.lnumg[f (t/one.lnum,t/two.lnum)2(t/one.lnumt/two.lnum)jl/one.lnum(t/one.lnum) =l/two.lnum(t/two.lnum)6=τg,
•f(pt)[(tp)such that
f=f(p/one.lnum,(t/one.lnum,))jp/one.lnum2p/one.lnum^t/one.lnum2t/one.lnum^(p/one.lnum,t/one.lnum)2f/one.lnumg[
f((t/one.lnum,),p/one.lnum)jt/one.lnum2t/one.lnum^p/one.lnum2p/one.lnum^(t/one.lnum,p/one.lnum)2f/one.lnumg[
f(p/two.lnum,(t/two.lnum,))jp/two.lnum2p/two.lnum^t/two.lnum2t/two.lnum^(p/two.lnum,t/two.lnum)2f/two.lnumg[
f((t/two.lnum,),p/two.lnum)jt/two.lnum2t/two.lnum^p/two.lnum2p/two.lnum^(t/two.lnum,p/two.lnum)2f/two.lnumg[
f(p/one.lnum,(t/one.lnum,t/two.lnum))jp/one.lnum2p/one.lnum^(t/one.lnum,t/two.lnum)2t\(t/one.lnumt/two.lnum)^(p/one.lnum,t/one.lnum)2f/one.lnumg[
f(p/two.lnum,(t/one.lnum,t/two.lnum))jp/two.lnum2p/two.lnum^(t/one.lnum,t/two.lnum)2t\(t/one.lnumt/two.lnum)^(p/two.lnum,t/two.lnum)2f/two.lnumg[
f((t/one.lnum,t/two.lnum),p/one.lnum)jp/one.lnum2p/one.lnum^(t/one.lnum,t/two.lnum)2t\(t/one.lnumt/two.lnum)^(t/one.lnum,p/one.lnum)2f/one.lnumg[
f((t/one.lnum,t/two.lnum),p/two.lnum)jp/two.lnum2p/two.lnum^(t/one.lnum,t/two.lnum)2t\(t/one.lnumt/two.lnum)^(t/two.lnum,p/two.lnum)2f/two.lnumg
•l:t!/u.swasuch that for all (t/one.lnum,t/two.lnum)2t,l((t/one.lnum,t/two.lnum)) =l/one.lnum(t/one.lnum)ift/two.lnum=,l((t/one.lnum,t/two.lnum)) =
l/two.lnum(t/two.lnum)ift/one.lnum=, andl((t/one.lnum,t/two.lnum)) =l/one.lnum(t/one.lnum)otherwise,
•minit=minit /one.lnum]minit /two.lnum,
•mfinal =mfinal /one.lnum]mfinal /two.lnum.
18 / 52m. pegoraro et al. conformance checking over uncertain event data
4 uncertainty in process mining
in this section, we will extend the de/f._i/i.dotlessnitions of event, trace, and event log to the uncer-
tain case. let us /f._i/i.dotlessrst de/f._i/i.dotlessne the identi/f._i/i.dotlessers necessary to express event indeterminacy.
deﬁnition 24 (determinate and indeterminate event qualiﬁers ).let/u.swo=
f!,?g, where the “!” symbol denotes determinate events , and the “?” symbol denotes
indeterminate events .
for strong uncertainty, attribute values are replaced by a set of possible values. in the
case of weak uncertainty, a continuous function fprovides the probability density for
the combinations of attribute values in the uncertain event. notice that the total mass
of probabilities described by fmight be lower than 1: this is so we can aptly represent
the case of an indeterminate event.
deﬁnition 25 (uncertain events ).let/e.sws=/u.swi/p.swne(/u.swc)/p.swne(/u.swa)
/p.swne(/u.swt)/u.swodenote the universe of strongly uncertain events ./e.sww=f(ei,f)2
/u.swi((/u.swc/u.swa/u.swt)6![/zero.lnum,/one.lnum])jp
(c,a,t )2dom (f)f(c,a,t )/one.lnumgis the universe of
weakly uncertain events1.
the probability of a weakly uncertain event of having been recorded but not hap-
pening in reality is equal to /one.lnum p
(c,a,t )2dom (f)f(c,a,t ).
now that the de/f._i/i.dotlessnitions of strongly and weakly uncertain events are given, let us
aggregate them in uncertain event logs.
deﬁnition 26 (uncertain event logs ).astrongly uncertain event log is a set of
eventsls/e.swssuch that every event identi/unifb01er in lsis unique. a weakly uncertain
event log is a set of eventslw/e.swwsuch that every event identi/unifb01er in lwis unique.
for a strongly uncertain event e= (ei,cs,as,ts,o)2lswe de/unifb01ne the following pro-
jection functions: πlsc(e) =cs2/p.swne(/u.swc),πlsa(e) =as2/p.swne(/u.swa),πlst(e) =ts2
/p.swne(/u.swt)andπlso(e) =o2/u.swo.
a weakly uncertain event log lw/e.swwhas a corresponding strongly uncertain
1w e assume here that dom (f)is /f._i/i.dotlessnite. it is easy to generalize to the in/f._i/i.dotlessnite case by employing an integral.
19 / 52m. pegoraro et al. conformance checking over uncertain event data
event loglw=ls/e.swssuch that
ls=f(ei,cs,as,ts,o)2/e.swsj9 (ei0,f)2lwei=ei0^
cs=fc2/u.swcj9a,t(c,a,t )2dom (f)^f(c,a,t )>/zero.lnumg^
as=fa2/u.swaj9c,t(c,a,t )2dom (f)^f(c,a,t )>/zero.lnumg^
ts=ft2/u.swtj9c,a(c,a,t )2dom (f)^f(c,a,t )>/zero.lnumg^
(o= !,x
(c,a,t )2dom (f)f(c,a,t ) = /one.lnum)^
(o= ?,x
(c,a,t )2dom (f)f(c,a,t )</one.lnum)g.
notice that representing the density of probability for combinations of values of
case id, time and activity with a single function fis an approximation that assumes
probabilistic independence between event attributes.
deﬁnition 27 (realization of an event log ).lc/e.swcis arealization ofls/e.sws
if and only if:
•for all (ei,c,a,t )2lcthere is a distinct (ei0,cs,as,ts,o)2lssuch thatei=ei0,
c2cs,a2asandt2ts;
•for all (ei,cs,as,ts,o)2lswitho= !there is a distinct (ei0,c,a,t )2lcsuch that
ei=ei0,c2cs,a2asandt2ts.
/r.swl(ls)is the set of all such realizations of the log ls.
note that these de/f._i/i.dotlessnitions allow us to transform a weakly uncertain log into a strongly
uncertain one, and a strongly uncertain one in a set of certain logs.
in this paper, we focus on three types of uncertainty:
•strong uncertainty on the activity;
•strong uncertainty on the timestamp;
•strong uncertainty on indeterminate events.
all three can happen concurrently. following the taxonomy presented in section 2, this
setting corresponds to a [e, a, t]s-type log. it is worth noting that the speci/f._i/i.dotlessc case of
uncertainty on the case id causes a problem; since an event can have many possible case
ids, it can belong to di/f._fferent traces. in data format where the events are already aggre-
gated into traces, such as the very common xes standard, this means that the informa-
tion related to a trace can be non-local to the trace itself, but can be stored in some other
20 / 52m. pegoraro et al. conformance checking over uncertain event data
points of the log. w e will focus on the problem of uncertainty on the case id attribute
in future work.
firstly, we will lay down some simpli/f._i/i.dotlessed notation in order to model the problem at
hand in a more compact way.
deﬁnition 28 (simple uncertain events, traces and logs ).letei2/u.swi,as2
/p.swne(/u.swa),tmin2/u.swt,tmax2/u.swtando2/u.swosuch thattmin< tmax.es
u=
(ei,as,tmin,tmax,o)is asimple uncertain event . let us denote with /e.sws
u/u.swi/p.swne(/u.swa)
/u.swt/u.swt/u.swothe universe of all simple uncertain events. σu/e.sws
uis a simple un-
certain trace if all the event identi/unifb01ers in σuare unique. /t.swudenotes the universe of
simple uncertain traces. lu2/p.sw(/t.swu)is asimple uncertain log if all the event identi/unifb01ers
inluare unique. for σu2luandes
u= (ei,as,tmin,tmax,o)2σuwe de/unifb01ne the
following projection functions: πlua(es
u) =as2/p.swne(/u.swa),πlutmin(es
u) =tmin2/u.swt,
πlutmax(es
u) =tmax2/u.swtandπluo(es
u) =o2/u.swo.
in a simple uncertain event es
u= (ei,as,tmin,tmax,o), the true activity label of the
event is one of the labels contained in the set as, the true timestamp is one of the values
contained in the closed interval [tmin,tmax], while the indeterminacy symbol oindicates
whether the event has certainly occurred, or if it is possible that it did not occur even
though it has been recorded in an event log.
simple uncertain events are best illustrated with a running example. let us consider
the following process instance, a simpli/f._i/i.dotlessed version of anomalies that are actually occur-
ring in processes of the healthcare domain. an elderly patient enrolls in a clinical trial
for an experimental treatment against myeloproliferative neoplasms, a class of blood can-
cers. the enrollment in this trial includes a lab exam and a visit with a specialist; then,
the treatment can begin. the lab exam, performed on the 8th of july, /f._i/i.dotlessnds a low level
of platelets in the blood of the patient, a condition known as thrombocytopenia (tp).
at the visit, on the 10th of july, the patient self-reports an episode of night sweats on
the night of the 5th of july, prior the lab exam: the medic notes this, but also hypothe-
sized that it might not be a symptom, since it can be caused not by the condition but by
external factors (such as very warm weather). the medic also reads the medical records
of the patient and sees that, shortly prior to the lab exam, the patient was undergoing a
heparine treatment (a blood-thinning medication) to prevent blood clots. the throm-
bocytopenia found with the lab exam can then be primary (caused by the blood cancer)
or secondary (caused by other factors, such as a drug). finally, the medic /f._i/i.dotlessnds an en-
largement of the spleen in the patient (splenomegaly). it is unclear when this condition
has developed: it might have appeared at any moment prior to that point. the medic
decides to admit the patient in the clinical trial, starting 12th of july. these events are
collected and recorded in the trace shown in t able 5 in the information system of the
hospital. for readability, the timestamp /f._i/i.dotlesseld only indicates the day of the month. this
21 / 52m. pegoraro et al. conformance checking over uncertain event data
t able 5: the uncertain trace of an instance of healthcare process used as a running example. for sake of
clarity, we have further simpli/f._i/i.dotlessed the notation in the timestamps column, by showing only the day of the
month.
case id event id timestamp activity indet. event
id192e/one.lnum 5 nightsweats ?
id192e/two.lnum 8fprtp ,sectpg !
id192e/three.lnum [4, 10] splenomeg !
id192e/four.lnum 12 adm !
trace includes all types of uncertainty contained in a [e, a, t]s-type log, the setting we
are considering for the application of conformance checking.
in the notation of de/f._i/i.dotlessnition 28, the trace σuin t able 5 is denoted as:
σu=f(e/one.lnum,fnightsweatsg,/five.lnum,/five.lnum,?),(e/two.lnum,fprtp,sectpg,/eight.lnum,/eight.lnum,!),
(e/three.lnum,fsplenomegg,/four.lnum,/one.lnum/zero.lnum,!),(e/four.lnum,fadmg,/one.lnum/two.lnum,/one.lnum/two.lnum,!)g.
w e can also draw the time diagram of this example of uncertain trace, which can be
seen in figure 4.
05-07-2011 00:00:00 06-07-2011 00:00:00 07-07-2011 00:00:00 08-07-2011 00:00:00 09-07-2011 00:00:00 10-07-2011 00:00:00 11-07-2011 00:00:00 12-07-2011 00:00:00nightsweatprtp, sectpsplenomegadm
figure 4: time diagram of the trace in t able 5.
in the remainder of the paper, when de/f._i/i.dotlessning simple uncertain traces and events,
22 / 52m. pegoraro et al. conformance checking over uncertain event data
we always assume that these belong to a corresponding simple uncertain log. thus, for
simplicity, we will omit the quali/f._i/i.dotlesser “ lu” when denoting the corresponding projection
functions.
these simpli/f._i/i.dotlessed traces and logs can be related to the more general framework de-
scribed in the previous section through the following transformation: let ls/e.swsbe a
strongly uncertain log and let g:/u.swi6!/u.swcbe a function mapping event identi/f._i/i.dotlessers onto
cases such thatdom (g) =feij(ei,cs,as,ts,u)2lsgand for all (ei,cs,as,ts,u)2ls,
g(ei)2cs. thus, forc2rng(g),g /one.lnum(c) =fei2/u.swijg(ei) =cg. the simple uncertain
event log de/f._i/i.dotlessned by gonlsis given aslu=ff(ei,πlsa(e),min (πlst(e)),max (πlst(e)),
πlso(e))jei2g /one.lnum(c)^πls
i(e) =eigjc2rng(g)g.
in order to more easily work with timestamps in simple uncertain events, let us frame
their time relationship as a strict partial order.
deﬁnition 29 (strict partial order over simple uncertain events ).lete,e02
/e.sws
ube two simple uncertain events. /e.swis a strict partial order de/unifb01ned on the universe of
strongly uncertain events /e.sws
uas:
e/e.swe0,πtmax(e)<πtmin(e0)
proposition 1 (/e.swis a strict partial order ).
proof. all properties characterizing strict partial orders are ful/f._i/i.dotlesslled by /e.sw. for alle,e0,
e002/e.sws
uwe have:
•irre/f._asc/l.f_exivity: this property is always veri/f._i/i.dotlessed, since πtmax(e)<πtmin(e)is false (see
de/f._i/i.dotlessnition 25).
•transitivity: since πtmax(e)<πtmin(e0)πtmax(e0)<πtmin(e00)and/u.swtis totally
ordered, we have that πtmax(e)<πtmin(e00)and this property is always veri/f._i/i.dotlessed.
lemma 1 (uncomparable events share possible timestamp values ).lete,e02
/e.sws
ube two strongly uncertain events. eande0are uncomparable with respect to the strict
partial order/e.sw(i.e., neithere/e.swe0nore0/e.sweare true) if and only if eande0share
some possible values of their timestamp.
proof.
())from de/f._i/i.dotlessnition 29, it follows that two events e,e02/e.sws
uare comparable if and only
if eitherπtmax(e)< πtmin(e0)orπtmax(e0)< πtmin(e). if both are false, then πtmin(e0)
πtmax(e)andπtmin(e)πtmax(e0). if we assume that πtmin(e)πtmin(e0)thenπtmin(e)
πtmin(e0)πtmax(e), while ifπtmin(e)>πtmin(e0)thenπtmin(e0)<πtmin(e)πtmax(e0). in
both cases, there are values common to both uncertain timestamps.
23 / 52m. pegoraro et al. conformance checking over uncertain event data
(()if the two events share timestamp values, it follows that at least one of the extremes
of one event is encompassed by the extremes of the other. assume that eencompasses
at least one of the extremes of e0(the other case is symmetric): then either πtmin(e)
πtmin(e0)πtmax(e)orπtmin(e)πtmax(e0)πtmax(e). in the /f._i/i.dotlessrst case, considering
that/u.swtis totally ordered and that πtmin(e0)πtmax(e0), we have that both πtmin(e0)
πtmax(e)andπtmin(e)πtmax(e0)are true, andeande0are uncomparable. the second
case is proved analogously.
deﬁnition 30 (realizations of simple uncertain traces ).letσu2/t.swube a
simple uncertain trace. an order-realization σo2/s.swσuis a permutation of the events in
σusuch that for all /one.lnumi<jjσojwe have thatσo[j]/e.swσo[i], i.e.,σois a correct
evaluation order for σuover/e.sw, and the (total) order in which events are sorted in σo
is a linear extension of the strict partial order /e.sw. w e denote with /r.swo(σu)the set of all
such order-realizations of the trace σu.
given an order-realization σo2/r.swo(σu), the sequenceσ=ha/one.lnum,a/two.lnum,...,ani2/u.swa
is a realization ofσoif there exists a total function f:f/one.lnum,/two.lnum,...,ng!σosuch that:
•for all /one.lnumin,ai2πa(f(i)),
•hf(/one.lnum),f(/two.lnum),...,f (n)iis a subsequence of σo,
•for alle2σowithπo(σo) = ! there exists /one.lnuminsuch thatf(i) =e.
w e denote with /r.sw0(σo)/u.swathe set of all such realizations of the order-realization
σo. w e denote with /r.sw(σu)/u.swathe union of the realizations obtainable from all
the order-realizations of σu:/r.sw(σu) =s
σo2/r.swo(σu)/r.sw0(σo).
let us see some examples of realizations of uncertain traces. let σube the uncertain
trace shown in t able 5. w e then have that σuhas three order-realizations:
/r.swo(σu) =fhe/three.lnum,e/one.lnum,e/two.lnum,e/four.lnumi,he/one.lnum,e/three.lnum,e/two.lnum,e/four.lnumi,he/one.lnum,e/two.lnum,e/three.lnum,e/four.lnumig
w e can then compute the realizations of one of the order-realizations of σu:
/r.sw0(he/one.lnum,e/two.lnum,e/three.lnum,e/four.lnumi) =fhnightsweats,prtp,splenomeg,admi,
hnightsweats,sectp,splenomeg,admi,
hprtp,splenomeg,admi,
hsectp,splenomeg,admig
simple uncertain traces and logs carry less information than their certain counter-
parts. nevertheless, it is possible to extend existing process mining algorithms to extract
the information in a simple uncertain log to design a process model that describes its
possible behavior, or verify that it conforms to a given normative model.
24 / 52m. pegoraro et al. conformance checking over uncertain event data
5 conformance checking on uncertain event data
depending on the possible values for as,tmin,tmax, anduthere are multiple possible re-
alizations of a trace. this means that, given a model, a simple uncertain trace could be
/f._i/i.dotlesstting for certain realizations, but non-/f._i/i.dotlesstting for others. the question we are interested
in answering is: given a simple uncertain trace and a petri net process model, is it possible
to /f._i/i.dotlessnd an upper and lower bound for the conformance score? usually we are interested
in the optimal alignments (the ones with the minimal cost). however, we are now inter-
ested in the minimum and maximum cost of alignments in the realization set of a simple
uncertain trace.
deﬁnition 31 (upper and lower bound on alignment cost for a trace ).
letσu2/t.swube a simple uncertain trace, and let sn2/u.swsnbe a system net. the
upper bound for the alignment cost is a functionδmax:/t.swu!nsuch thatδmax(σu) =
maxσ2/r.sw(σu)δ(λsn(σ)). the lower bound for the alignment cost is a functionδmin:
/t.swu!nsuch thatδmin(σu) = minσ2/r.sw(σu)δ(λsn(σ)).
a simple way to compute the upper and lower bounds for the cost of any uncertain
trace is using a brute-force approach: enumerating the possible realizations of the trace,
then searching for the costs of optimal alignments for all the realizations, and picking
the minimum and maximum as bounds. w e now present a technique which improves
the performance of calculating the lower bound for conformance cost with respect to a
brute-force method.
w e will produce a version of the event net that embeds the possible behaviors of
the uncertain trace. w e de/f._i/i.dotlessne a behavior net , a petri net that can replay all and only the
realizations of an uncertain trace. as an intermediate step in order to obtain such a petri
net, we /f._i/i.dotlessrst build the behavior graph , a dependency graph representing the uncertain
trace. this graph contains a vertex for each uncertain event in the trace and contains
an edge between two vertices if the corresponding uncertain events happen one directly
af/t.f_er the other in at least one realization of the uncertain trace.
deﬁnition 32 (behavior graph ).letσu2/t.swube a simple uncertain trace. a
behavior graphβ:/t.swu!/u.swgis the transitive reduction of a directed graph ρ(g), where
g= (v,e )2/u.swgis de/unifb01ned as:
•v=fe2σug,
•e=f(v,w)jv,w2v^v/e.swwg.
the behavior graph provides a structured representation of the uncertainty on the
timestamp: when a speci/f._i/i.dotlessc vertex has two or more outbound edges, the events corre-
sponding to the destination vertices can occur in any order, concurrently with each other.
w e can see the result on the example trace in figures 5 and 6.
25 / 52m. pegoraro et al. conformance checking over uncertain event data
nightsweats
e/one.lnumfprtp, sec tpg
e/two.lnum
splenomeg
e/three.lnumadm
e/four.lnum
figure 5: the graph of the trace in t able 5 before ap-
plying the transitive reduction. all the nodes in the
graph are pairwise connected based on precedence
relationships; pairs of nodes for which the order is
unknown are not connected. the dashed node rep-
resents an indeterminate event.nightsweats
e/one.lnumfprtp, sec tpg
e/two.lnum
splenomeg
e/three.lnumadm
e/four.lnum
figure 6: the behavior graph of the trace in t a-
ble 5. the transitive reduction removed the arc be-
tweene/one.lnumande/four.lnum, since they are reachable through e/two.lnum.
this graph has a minimal number of arcs while con-
serving the same reachability relationship between
nodes.
theorem 1 (correctness of behavior graphs ).letσu2/t.swube a simple uncertain
trace andbg(σu) = (v,e )be its behavior graph. the behavior graph bg(σu)is acyclic;
additionally, the set of all topological sortings of the behavior graph corresponds to the set
of order-realizations of σu:/o.swbg(σu)=/r.swo(σu).
proof. from proposition 1 we know that /e.swis a strict partial order. let p=hp/one.lnum,p/two.lnum,...,
pmi2pbgbe a path in the behavior graph: if pwas a cycle, that means that according
to de/f._i/i.dotlessnition 32 we have p/one.lnum/e.swp/two.lnum/e.sw /e.swpm/e.swp/one.lnum. since/e.swis transitive, we
have thatp/one.lnum/e.swpmandpm/e.swp/one.lnum, which would violate the antisymmetry property in
de/f._i/i.dotlessnition 7 and would contradict proposition 1. thus the behavior graph is necessarily
acyclic.
the result /o.swbg(σu)=/r.swo(σu)immediately follows from de/f._i/i.dotlessnitions 9, 30 and 32,
and from proposition 1.
lemma 2 (semantics of behavior graphs ).events connected by paths in a given
behavior graph have a precedence relationship; events not connected by any paths share
possible values for their timestamps and thus might have happened in any order.
proof. immediately follows from proposition 1, theorem 1, and from lemma 1.
w e then obtain a behavior net by replacing every vertex in the behavior graph with
one or more transitions in an xor con/f._i/i.dotlessguration, each representing an activity con-
tained in theπaset of the corresponding uncertain event. every edge of the behavior
graph becomes a place in the behavior net, connected from and to the transitions corre-
sponding to, respectively, its source and target nodes in the graph.
deﬁnition 33 (behavior net ).letσu2/t.swube a simple uncertain trace, and let
bg(σu) = (v,e )be the corresponding behavior graph. a behavior netbn:/t.swu!/u.swsn
is a system netbn(σu) = (p,t,f,l,m init,mfinal)such that:
26 / 52m. pegoraro et al. conformance checking over uncertain event data
(/s.sc/t.sc/a.sc/r.sc/t.sc,e/one.lnum)nightsweats(e/one.lnum,nightsweats )
nightsweats(e/one.lnum,τ)(e/one.lnum,e/two.lnum)prtp(e/two.lnum,prtp )
sec tp(e/two.lnum,sectp )(e/two.lnum,e/four.lnum)
(/s.sc/t.sc/a.sc/r.sc/t.sc,e/three.lnum)(e/three.lnum,e/four.lnum)
splenomeg(e/three.lnum,splenomeg )adm(e/four.lnum,adm ) (e/four.lnum,/e.sc/n.sc/d.sc )
figure 7: the behavior net corresponding to the uncertain trace in t able 5. the labels show the objects in-
volved in the construction of de/f._i/i.dotlessnition 33. the initial marking is displayed; the gray “token slot” represents
the /f._i/i.dotlessnal marking.
•p=e[
f(/s.sc/t.sc/a.sc/r.sc/t.sc,v)jv2v^@v02v(v0,v)2eg[
f(v,/e.sc/n.sc/d.sc )jv2v^@v02v(v,v0)2eg,
•t=f(v,a)jv2v^a2πa(v)g[f (v,τ)jv2v^πo(v) = ?g,
•f=f((/s.sc/t.sc/a.sc/r.sc/t.sc,v/one.lnum),(v/two.lnum,a))2etjv/one.lnum=v/two.lnumg[
f((v/one.lnum,a),(v/two.lnum,w))2tejv/one.lnum=v/two.lnumg[
f((v,w /one.lnum),(w/two.lnum,a))2etjw/one.lnum=w/two.lnumg[
f((v/one.lnum,a),(v/two.lnum,/e.sc/n.sc/d.sc ))2tejv/one.lnum=v/two.lnumg,
•l=f((v,a),a)j(v,a)2t^a6=τg,
•minit= [(/s.sc/t.sc/a.sc/r.sc/t.sc,v)2pjv2v],
•m/unifb01nal = [(v,/e.sc/n.sc/d.sc )2pjv2v].
in figure 7, we can see the behavior net corresponding to the uncertain trace in t a-
ble 5. it is important to note that every set of edges in the behavior graph with the same
source vertex generates an and split in the behavior net, and a set of edges with the
same destination vertex generates an and join. at the same time, the transitions whose
labels correspond to di/f._fferent possible activities in an uncertain event will appear in an
xor construct inside the behavior net.
thus, in the behavior net, every set of events which timestamps share some possible
values will be represented by transitions inside an and construct, and will then be able
to execute in any order allowed by their uncertain timestamp attributes. in the same
fashion, an event with uncertainty on the activity will be represented by a number of
27 / 52m. pegoraro et al. conformance checking over uncertain event data
transitions in an xor construct. this allows replaying any possible choice for the activ-
ity attribute. it follows that, by construction, for a certain simple uncertain trace σuwe
have thatϕ(bn(σu)) =/r.sw(σu).
w e can use the behavior net of an uncertain trace σuin lieu of the event net to com-
pute alignments with a model sn2/u.swsn; the search algorithm returns an optimal
alignment, a sequence of moves (x,(y,t))withx2/u.swa,y2/u.swaandttransition of the
model sn. af/t.f_er removing all “ ” symbols, the sequence of /f._i/i.dotlessrst elements of the moves
will describe a complete /f._i/i.dotlessring sequence σbnof the behavior net. since σbnis complete,
σbn2ϕ(bn(σu))and, thus,σbn2/r.sw(σu). it follows thatσbnis a realization of σu, and
the search algorithm ensures that σbnis a realization with optimal conformance cost for
the model sn:δ(λsn(σbn)) = minσ2/r.sw(σu)λsn(σ) =δmin(σu).
theorem 2 (correctness of behavior nets ).letσu2/t.swube a simple uncer-
tain trace and let bg(σu) = (v,e )be its behavior graph. the corresponding behavior
netbn(σu) = (p,t,f,l,m init,mfinal)can replay all and only the realizations of σu:
ϕ(bn(σu)) =/r.sw(σu).
proof. let (v,v0)2ebe an edge of the behavior graph, which also de/f._i/i.dotlessnes a place in
the behavior net: (v,v0) =pv,v02p. let us denote with tvthe set of transitions in the
behavior net generated from the vertex v:tv=f(v0,a)2tjv0=vg.
()letσ=ha/one.lnum,a/two.lnum,...,ani2ϕ(bn(σu))be any certain trace accepted by bn(σu). let
σt=ht/one.lnum,t/two.lnum,...,tni 2ϕf(bn(σu))be a complete /f._i/i.dotlessring sequence of bn(σu)yielding
σ, i.e.,l(σt)/u.swa=σ. lethv/one.lnum,v/two.lnum,...,vnibe a sequence of vertices in bg(σu)such that
t/one.lnum= (v/one.lnum,a/one.lnum),t/two.lnum= (v/two.lnum,a/two.lnum),...,tn= (vn,an)andt/one.lnum2tv/one.lnum,t/two.lnum2tv/two.lnum,...,tn2tvn. let/v.sw
be the set of all such sequences; by the /f._asc/l.f_ow relation in de/f._i/i.dotlessnition 33 there must exist a
sequenceσo=hv/one.lnum,v/two.lnum,...,vni2/v.swsuch that ((v/one.lnum,a/one.lnum),(v/one.lnum,v/two.lnum))2f,((v/one.lnum,v/two.lnum),(v/two.lnum,a/two.lnum))2
f,((v/two.lnum,a/two.lnum),(v/two.lnum,v/three.lnum))2f,((v/two.lnum,v/three.lnum),(v/three.lnum,a/three.lnum))2f,..., ((vn /one.lnum,an /one.lnum),(vn /one.lnum,vn))2f,
((vn /one.lnum,vn),(vn,an))2f. this implies that (v/one.lnum,v/two.lnum)2e,(v/two.lnum,v/three.lnum)2e,..., (vn /one.lnum,vn)2
e. from de/f._i/i.dotlessnition 32 we then have that v/one.lnum/e.swv/two.lnum/e.sw/e.swvn. furthermore, since
there exist atvfor allv2vand for all /one.lnuminexactly one transition ti2tvi
has to /f._i/i.dotlessre to complete the /f._i/i.dotlessring sequence, we have that for all v2v,v2σoand is
unique. thus,σo2/s.swvis a permutation of the vertices in bg(σu). because all vertices in
σoare sorted by a linear extension of /e.sw, we also have that σo2/o.swbg(σu)is a topological
sorting of the vertices in bg(σu). by de/f._i/i.dotlessnition 32, we then have that σois an order-
realization ofσu:σo2/r.swo(σu). since, by construction, l(ti)2πa(vi)ifπo(vi) = !
andl(ti)2πa(vi)[fτgifπo(vi) = ? , we have thatσ=l(σt)/u.swa2/r.sw(σu). since
this construction is valid for any σ2ϕ(bn(σu)), every complete /f._i/i.dotlessring sequence of the
behavior net is a realization of σu:ϕ(bn(σu))/r.sw(σu).
()letσo2/r.swo(σu)be any order-realization of σu, and letn=jσuj. sinceσo[/one.lnum]/e.sw
28 / 52m. pegoraro et al. conformance checking over uncertain event data
σo[/two.lnum]/e.sw /e.swσo[n](by de/f._i/i.dotlessnition 30), there exists a path p2pbg(σu)such thatp=
hv/one.lnum,v/two.lnum,...,vni=hσo[/one.lnum],σo[/two.lnum],...,σo[n]i(by theorem 1). let p/one.lnum,/two.lnum= (v/one.lnum,v/two.lnum),p/two.lnum,/three.lnum=
(v/two.lnum,v/three.lnum), and so on. lett/one.lnum2tv/one.lnum,t/two.lnum2tv/two.lnum,...,tn2tvnand letσt=ht/one.lnum,t/two.lnum,...,tni. by
the construction in de/f._i/i.dotlessnition 33, in bn(σu) =nwe have that
(n,m init)[t/one.lnumi(n,m /one.lnum,/two.lnum)[t/two.lnumi(n,m /two.lnum,/three.lnum)[t/three.lnumi,..., [tn /one.lnumi(n,mn /one.lnum,n)[tni(n,m /unifb01nal)
where:
m/one.lnum,/two.lnum= (mstartn[(start,v/one.lnum)])][p/one.lnum,/two.lnum]
m/two.lnum,/three.lnum= (m/one.lnum,/two.lnumn[p/one.lnum,/two.lnum])][p/two.lnum,/three.lnum]
...
mn /one.lnum,n= (mn /two.lnum,n /one.lnumn[pn /two.lnum,n /one.lnum])][pn /one.lnum,n]
m/unifb01nal = (mn /one.lnum,nn[pn /one.lnum,n])][(vn,end)]
this construction implies that (n,m init)[σtb(n,m /unifb01nal)and thereforeσt2ϕf(bn(σu)).
the de/f._i/i.dotlessnition of the labeling function in the behavior net is such that, for all /one.lnum
in, we have that (vi,a)2tvi,a2πa(vi). by de/f._i/i.dotlessnition 30, the labeling of the
sequenceht/one.lnum,t/two.lnum,...,tniprojected on the universe of activities is then a realization of the
uncertain traceσuobtained from the possible activity labels of σo:l(σt)/u.swa=/r.sw(σu).
since this construction is valid for any σo2/r.swo(σu), the behavior net can replay any
realization ofσu:/r.sw(σu)ϕ(bn(σu)).
theorem 3 (correctness of uncertain alignments ).letσu2/t.swube a simple
uncertain trace and let sn2/u.swsnbe a system net. computing an alignment using the
product net between snand the behavior net bn(σu)yields the alignment with the lowest
cost among all realizations of σu:δ(λsn(σbn)) = minσ2/r.sw(σu)λsn(σ) =δmin(σu).
proof. recall from de/f._i/i.dotlessnition 21 that λsn:/t.sw!almis a deterministic mapping
that assigns any trace σto an optimal alignment. adriansyah [7] details how to compute
such a function λsnthrough a state-based asearch over a state space de/f._i/i.dotlessned by the
reachable markings of the product net sn
en(σ)between a reference system net sn
and the event net a certain trace σ2/t.sw. as per de/f._i/i.dotlessnition 19, this search retrieves an
alignment which is optimal with respect to a certain cost function δand, ignoring “”,
is composed by a complete /f._i/i.dotlessring sequence of the system net σt2ϕf(sn)and the only
complete /f._i/i.dotlessring sequence of the event net en(σ), which corresponds to σby construc-
tion. given a system net sn2/u.swsn, an uncertain trace σu2/t.swuand its respective
behavior netbn(σu), the same search algorithm for λsnover sn
bn(σu)yields an
optimal alignment containing a complete /f._i/i.dotlessring sequence for the reference system net
29 / 52m. pegoraro et al. conformance checking over uncertain event data
σt2ϕf(sn)and a complete /f._i/i.dotlessring sequence for the behavior net of the uncertain trace
σ2ϕ(bn(σu)). sinceλsnminimizes the cost and σ2/r.sw(σu)is a valid realization of
σdue to theorem 2, the resulting alignment has the minimal cost possible over all the
possible realizations of the uncertain trace.
6 experiments
the framework for computing conformance bounds for uncertain event data illustrated
in this paper raises some research questions that need to be addressed in a practical and
empirical manner. the questions that we aim to answer are:
•q1: how do conformance bounds behave when computed on uncertain data?
•q2: what is the impact of di/f._fferent deviating behavior and di/f._fferent types of un-
certain behaviors on the conformance score of uncertain event logs?
•q3: what is the impact on the e/f._f/f._i/i.dotlessciency of computing uncertain alignments uti-
lizing the behavior net as opposed to the baseline method of enumerating and
aligning all realizations?
•q4: what is the impact on the e/f._f/f._i/i.dotlessciency of computing uncertain alignments uti-
lizing the behavior net on di/f._fferent types of uncertain behavior?
•q5: how do trace length and the amount of uncertain events impact the intrinsic
variability (i.e., the number of realizations) of uncertain event data?
•q6: is it possible to apply uncertain alignments to real-life data to obtain a best-
and worst-case scenario for the execution of process instances?
the technique to compute conformance for strongly uncertain traces and to create
the behavior net hereby described has been implemented in the python programming
language, thanks to the facilities for log importing, model creation and manipulation,
and alignments provided by the library pm4py [13]. uncertainty has been represented
in the xes standard through meta-attributes and constructs such as lists, such that any
xes importer can read an uncertain log /f._i/i.dotlessle. the algorithm was designed to be fully
compatible with any event log in the xes format (both including and not including
uncertainty); the meta-attributes for uncertainty were designed to be backward com-
patible with other process mining algorithms—meta-attributes describing the possible
values for an uncertain activity or the interval of an uncertain timestamp can also specify
a “fallback value” which other process mining sof/t.f_ware will read as (certain) activity or
timestamp value.
30 / 52m. pegoraro et al. conformance checking over uncertain event data
6.1 qualitative and quantitative experiments on synthetic data
the /f._i/i.dotlessrst four research questions listed above have been addressed by tests on synthetic
uncertain event logs. t o this end, we implemented the following sof/t.f_ware components
necessary to the experiments:
•anoise generator , to introduce deviations in a controlled way in an event log. this
component allows to alter the activity label, swap the order of events or add re-
dundant events to an event log with a given probability or frequency.
•anuncertainty generator , to alter the xes attributes present in the log by append-
ing additional meta-information which is then interpreted as uncertainty. the
component introduces uncertainty information in an event log, with the possi-
bility to add any of the strongly uncertain attributes described in the taxonomy
of section 2. this also allows for exporting the generated uncertain event log
through the xes exporter of the pm4py library.
•a number of smaller extensions to pm4py functionalities, also useful for other
process mining applications. examples are the generation of all possible process
variants (language) of a pm4py petri net, and a memoized version of alignments,
which allows to trade o/f._ff space in memory in order to speed up the computation
of the conformance of an event log and a model.
the synthetic data generation and the sof/t.f_ware tools necessary to compute confor-
mance bounds on uncertain event data are available within the process mining ov er
uncertain data (proved) project [30]. a speci/f._i/i.dotlessc branch of the repository hosting
the project is dedicated to the experiments presented in this paper, making them readily
reproducible2.
in order to answer q1andq2, we set up an experiment with the goal to inspect the
quality of bounds for conformance scores as increasingly more uncertainty is added to an
event log. w e ran the tests on synthetic event logs where we added simulated uncertainty.
in this way, we can control the amounts and types of uncertainty in event data.
every iteration of this experiment is as follows:
1. w e generate a random petri net with a /f._i/i.dotlessxed dimension ( n= 10 transitions) through
the prom plugin “generate block-structured stochastic petri nets” .
2. w e play out an event log consisting of 100 traces generated from the petri net.
3. w e randomly alter the activity label of a speci/f._i/i.dotlessc percentage daof events, swapping
it with another label sampled from the universe of activities.
2https://github.com/proved-py/proved-core/tree/conformance_checking_over_
uncertain_event_data
31 / 52m. pegoraro et al. conformance checking over uncertain event data
4. w e randomly swap a speci/f._i/i.dotlessc percentage dsof events with their successor. for
each event sampled for the swap, we randomly select either the predecessor or the
successor (with 50/percent.sc probability each), and we swap the timestamps of the two
events, e/f._ffectively inverting their order. w e skip the selection of the swap direction
if we select the /f._i/i.dotlessrst event in a trace (which is swapped with the second) or the last
event in a trace (which swaps with the second to last).
5. w e randomly duplicate a speci/f._i/i.dotlessc percentage ddof events. for each event selected
for duplication, we create a new event in the trace with identical case id and ac-
tivity label, and with timestamp equal to the average between the timestamp of
this selected event and the timestamp of the following event. if we select the last
event in a trace for duplication, we simply add a /f._i/i.dotlessxed delta to the timestamp of
the duplicate.
6. w e randomly introduce uncertainty in activity labels for a speci/f._i/i.dotlessc percentage ua
of events. each event selected for uncertainty on activity labels receives one addi-
tional activity label, di/f._fferent from the one it already has, sampled from the uni-
verse of activity labels.
7. w e randomly introduce uncertainty in timestamps for a speci/f._i/i.dotlessc percentage utof
events. for each event sampled for timestamp uncertainty we randomly choose ei-
ther the predecessor or the successor (with 50/percent.sc probability each); the timestamp
of the sampled event becomes an interval which extremes are the original times-
tamp and the timestamp of the predecessor or successor, e/f._ffectively causing them
to mutually overlap. in case the sampled event is the /f._i/i.dotlessrst (resp., last) event in a
trace, we skip the selection of the predecessor or successor and we directly consider
the successor (resp., predecessor) for the extremes of the uncertain timestamp.
8. w e randomly transform a speci/f._i/i.dotlessc percentage uiof events in indeterminate events.
t o these sampled events, we add the “?” attribute, in order to mark them as inde-
terminate.
9. w e measure upper and lower bounds for conformance score with increasing per-
centagepof uncertainty.
all sampling operations mentioned in the previous list are performed over a uniform
probability distribution over the possible values.
in terms of amount of deviation to be considered in each con/f._i/i.dotlessguration, we aimed
at recreating a situation where there is signi/f._i/i.dotlesscant deviating behavior with respect to the
normative model; for each kind of deviation considered, we introduced anomalous be-
havior in 30/percent.sc of events. thus, we consider four di/f._fferent settings for the addition of de-
viating behavior to events logs: activity labels =fda= /three.lnum/zero.lnum%,ds= /zero.lnum%,dd= /zero.lnum%g,swaps
32 / 52m. pegoraro et al. conformance checking over uncertain event data
=fda= /zero.lnum%,ds= /three.lnum/zero.lnum%,dd= /zero.lnum%g,extra events =fda= /zero.lnum%,ds= /zero.lnum%,dd= /three.lnum/zero.lnum%gand
all =fda= /three.lnum/zero.lnum%,ds= /three.lnum/zero.lnum%,dd= /three.lnum/zero.lnum%g.
w e consider four di/f._fferent settings for the addition of uncertain behavior to events
logs: activities =fua=p,ut= /zero.lnum%,ui= /zero.lnum%g,timestamps =fua= /zero.lnum%,ut=p,ui=
/zero.lnum%g,indeterminate events =fua= /zero.lnum%,ut= /zero.lnum%,ui=pgandall =fua=p,ut=
p,ui=pg. w e test all four di/f._fferent con/f._i/i.dotlessgurations of deviation against each of the
four con/f._i/i.dotlessgurations of uncertainty, with increasing values of p, for a total of 16 separate
experiments.
figure 8 summarizes our /f._i/i.dotlessndings. the plots on this /f._i/i.dotlessgure represent the average of
10 runs as described above.
w e can observe that, in general, all plots show the expected behavior: the upper and
lower bound for conformance coincide at percentage of uncertain events p= 0 for all
experiments, to then diverge while pincreases. a number of additional observations can
be made looking at individual con/f._i/i.dotlessgurations for deviation or uncertainty, or at speci/f._i/i.dotlessc
scatter plots. when only uncertainty on activity labels is added to the event log, we see a
deterioration of the upper bound for conformance cost, but the lower bound does not
improve—in fact, it is essentially constant. this can be attributed to the fact that, since
to generate uncertainty on activity label we sample from the set of labels randomly, the
chances of observing a realization of a trace where an uncertain activity label matches the
alteration introduced by the deviations are small. uncertainty on timestamps makes the
lower bound decrease only when the introduced deviations are swaps: as expected, the
possibility of changing the order of pairs of events does not have a sensible improvement
in the lower bound for deviation when extra events are added or activity labels of existing
events are altered.
conversely, the possibility to “skip” some critical events has a positive e/f._ffect on the
lower bound of all possible con/f._i/i.dotlessgurations for deviations: in fact, when marking some
events as indeterminate in a log where extra events were added as deviations, the average
conformance cost drops by 30.61/percent.sc at p= 16/percent.sc, the largest drop among all the experiments.
the experiment with all three types of uncertainty and extra events as deviations essen-
tially displays the same e/f._ffect (improvement in lower bound is slightly lower, but not
signi/f._i/i.dotlesscantly, with a decrease in deviation of 29.38/percent.sc at p= 16/percent.sc).
for the experiments where all types of deviations were added at once, we can see
that, as could be anticipated, the di/f._fferences in deviation scores on the two bounds be-
come smaller in relative terms (because of the very high amount of deviations at p= 0/percent.sc),
but larger in absolute terms. as per the previous experiments, the largest contributor
in decreasing the conformance cost of the lower bound is the addition of indeterminate
events, which by itself decreases the deviation cost by 13.92/percent.sc at p= 16/percent.sc. in general, the
vast variability in measuring the conformance of an uncertain log shows that, if all types
of uncertainty can occur with high frequency in a process, the business owner should
act on the uncertainty sources, since they will be a major obstacle in obtaining accurate
33 / 52m. pegoraro et al. conformance checking over uncertain event data
400500600700800activity labels
99.85 98.83 98.54 98.23108.35116.95125.48133.97
99.83 99.73 99.65 99.17104.49110.29115.13120.93
97.8795.0792.8890.99104.93108.89113.63118.7
96.6493.8990.9687.12117.8132.8147.08159.5
300400500600700swaps
99.8 99.89 99.78 99.64113.06126.29139.37152.82
97.3792.51 89.93 87.11108.64114.32123.52131.82
96.5693.3489.99 87.19106.8113.7120.3126.79
92.7985.8280.8275.87127.71149.8175.42196.36
200300400500600700extra events
100.0 100.0 100.0 100.0118.15138.28159.56177.06
100.0 100.0 100.0 100.0115.7130.39144.08159.78
91.6884.877.0669.39108.79118.87127.4136.51
92.1183.8377.3170.72140.66180.48221.68255.38
0.000 0.025 0.050 0.075 0.100 0.125 0.150
activities80090010001100all
99.21 98.81 98.14 97.46102.24104.44106.92109.61
0.000 0.025 0.050 0.075 0.100 0.125 0.150
timestamps99.31 98.71 98.2197.18101.21102.28103.37 104.31
0.000 0.025 0.050 0.075 0.100 0.125 0.150
indeterminate events96.38
92.89
89.35
86.08101.2102.55103.62105.16
0.000 0.025 0.050 0.075 0.100 0.125 0.150
all94.73
90.57
85.95
80.28104.55109.86113.24117.49
uncertainty (type and percentage)conformance cost
figure 8: upper (red, dashed) and lower (blue, dotted) bound for conformance cost for synthetic event logs with increasing uncertainty. every plot shows a
di/f._fferent con/f._i/i.dotlessguration of deviation added to the log and types of uncertainty simulated in the event data. the x-axis shows the percentage of uncertainty padded
to the logs; the y-axis shows the amount of deviations, computed with alignments. the labels inside the graph indicate the relative change in deviation score with
respect top= 0, as a percentage. the gray continuous lines indicate the amounts of deviations at p= 0 as a reference.
34 / 52m. pegoraro et al. conformance checking over uncertain event data
10 20activities
10−1100101102mean time (seconds)baseline
beh. net
10 20timestamps
10 20indeterminate events
10 20all
net size (number of transitions)
figure 9: e/f._ffect on the time performance of calculating the lower bound for conformance cost with the
brute-force method (blue, dotted) vs. the behavior net (red, dashed) on four di/f._fferent con/f._i/i.dotlessgurations for
uncertain events.
measurements of process conformance. vice versa, in the case of limited occurrences
of uncertainty in event data, the algorithm here proposed is able to provide actionable
bounds for conformance score, together with descriptions of best- and worst-case sce-
narios of process conformance for a given trace.
the second experiment we set up aims to answer questions q3andq4, and is con-
cerned with the performance of calculating the lower bound of the cost via the behavior
net versus the brute-force method of listing all the realizations of an uncertain trace, eval-
uating all of them through alignments, then picking the best value. w e used a constant
percentage of uncertain events of p= 5/percent.sc and logs of 100 traces for this test, with progres-
sively increasing values of n. w e ran 4 di/f._fferent experiments, each with one of the four
con/f._i/i.dotlessgurations for uncertain behavior activities ,timestamps ,indeterminate events and
all illustrated above.
figure 9 summarizes the results. as the diagram shows, the di/f._fference in time be-
tween the two methods tends to diverge quickly even on a logarithmic scale. the largest
model we could test was n= 20, a petri net with 20 transitions, which is comparatively
35 / 52m. pegoraro et al. conformance checking over uncertain event data
20 40activities
102103104number of realizations
20 40timestamps
20 40indeterminate events
20 40all
net size (number of transitions)
figure 10: number of realizations (average per log over 10 randomly generated logs of 100 traces) in an un-
certain event log in function of the size of the petri net used to generate it. the logs are generated through
simulation with 10 di/f._fferent and randomly wired petri nets of increasing size. four di/f._fferent con/f._i/i.dotlessgurations
for uncertainty are shown: on activities, timestamps, indeterminate events, and all three combined. uncer-
tainty is introduced in the events within the log in a /f._i/i.dotlessxed proportion of 5/percent.sc.
tiny in practical terms; however, even at these small scales the brute-force method takes
roughly 3 orders of magnitude more than the time needed by the behavior net, when all
the types of uncertainty are added with p= 5/percent.sc.
this shows a very large improvement in the computing time for the lower bound
computation; thus, the best-case scenario for the conformance cost of an uncertain trace
can be obtained e/f._f/f._i/i.dotlessciently thanks to the structural properties of the behavior net. this
graph also shows the dramatic impact on the number of realizations of a behavior net—
and thus, the time needed to perform a brute-force computation of alignments—when
the e/f._ffects of di/f._fferent kinds of uncertainty are compounded.
let us now answer q5. in order to assess the impact of uncertainty on the variability
of event data and, consequently, on the performance of uncertain process mining tech-
niques, we computed the total number of realizations in an uncertain event log of 100
traces. figure 10 shows the change in number of realizations with the increase in size of
the petri net used to generate the log, while the percentage of uncertain events is con-
stant (5/percent.sc). conversely, figure 11 shows the change in the number of realizations with
the increase in percentage of uncertain events, while the size of the petri nets is /f._i/i.dotlessxed (10
transitions).
36 / 52m. pegoraro et al. conformance checking over uncertain event data
0.0 0.1activities
102103104number of realizations
0.0 0.1timestamps
0.0 0.1indeterminate events
0.0 0.1all
uncertainty (percentage)
figure 11: number of realizations (average per log over 10 randomly generated logs of 100 traces) in an
uncertain event log in function of the percentage of uncertain events within the log. the logs are generated
through simulation with 10 di/f._fferent and randomly wired petri nets with a /f._i/i.dotlessxed size of 10 transitions. four
di/f._fferent con/f._i/i.dotlessgurations for uncertainty are shown: on activities, timestamps, indeterminate events, and all
three combined.
figures 10 and 11 justify the results of the experiments on performance shown in fig-
ure 9: there is a clear exponential relation between the number of realizations resulting
from an uncertain event log and both trace length and percentage of uncertain events in
the log. both factors, when increasing, induce an exponential increase in the total num-
ber of realizations even when considered separately. speci/f._i/i.dotlesscally, the comparison of fig-
ures 9 and 10 highlights the cause of the ine/f._f/f._i/i.dotlessciency of computing alignments for every
realization of an uncertain trace, evidently showing the linear relationship between the
number of realizations in an uncertain log and the time expenditure of the brute-force
alignments approach.
6.2 applications on real-life data
as illustrated in section 1, uncertainty in event data can originate from a number of dif-
ferent causes in real-world applications. one prominent source of uncertainty is missing
data: attribute values not recorded in an event log can on occasions be described by un-
certainty, through domain knowledge provided by process owners or experts. then, as
described in this paper, it is possible to obtain a detailed analysis of the deviations of a
best- and worst-case scenario for the conformance to a process model.
37 / 52m. pegoraro et al. conformance checking over uncertain event data
accesst/one.lnum
triage
t/two.lnum
r1t/three.lnum
r2t/four.lnum
r3t/five.lnum
r4t/six.lnum
laboratoryt/seven.lnumvisitt/eight.lnum
consultancybegint/nine.lnum
consultancyendt/one.lnum/zero.lnum
consultancyt/one.lnum/one.lnum
laboratory - begint/one.lnum/two.lnum
laboratory - endt/one.lnum/three.lnum
laboratoryt/one.lnum/four.lnumdismissal
t/one.lnum/five.lnumexitt/one.lnum/six.lnum
figure 12: the petri net that models the process related to the treatment of patients in the icu ward of an
italian hospital. the activities r1 through r4 are abbreviations for the four phases of a radiology exam:
respectively, radiolo/g_y - submitted request ,radiolo/g_y - accepted request ,radiolo/g_y - exam ,radiolo/g_y -
results .
t o seek to answer research question q6through a direct application of conformance
checking over uncertainty, let us consider a process related to the medical procedures
performed in the intensive care unit (icu) of a hospital. figure 12 shows a ground
truth model for the process.
an execution log containing events that concern this icu process is available. through-
out the process, some anomalies with attribute values can be spotted—namely, a number
of anomalies a/f._ffecting the timestamp attributes. this is a [e]s-type uncertain log.
the alterations on the timestamps in this event log happen for a number of reasons.
the domain experts reported that human error is a frequent source of anomaly, which
is worsened by the fact that operators of/t.f_en do not input data in real-time, but the in-
formation is recorded af/t.f_er a certain delay (e.g., at the end of a shif/t.f_). moreover, the
information systems of the icu ward and other wards (such as radiology, for instance)
do not allow for automatic transmission of data between one another, so in some oc-
currences the timestamp of visits by specialists is not recorded in the icu information
system.
t ables 6 and 7 show two examples of traces with anomalous timestamp behavior. w e
can see that in the trace of t able 6 the event triage has an imprecise timestamp—only
38 / 52m. pegoraro et al. conformance checking over uncertain event data
t able 6: events related to one case of the icu process. the timestamp of the “triage” event is imprecise:
through domain knowledge, we are able to represent this uncertainty in an explicit way within the event
attributes in the log.
event id raw timestamp preprocessed timestamp activity
e/one.lnum 2017-02-20 23:59:31 2017-02-20 23:59:31 access
e/two.lnum 2017-02-21 00:02:58 2017-02-21 00:02:58 visit
e/three.lnum 2017-02-21 00:06:30 2017-02-21 00:06:30 consultancybegin
e/four.lnum 2017-02-21 00:29:12 2017-02-21 00:29:12 r1
e/five.lnum 2017-02-21 00:41:00 2017-02-21 00:41:00 r2
e/six.lnum 2017-02-21 00:41:00 2017-02-21 00:41:00 r3
e/seven.lnum 2017-02-21 01:02:00 2017-02-21 01:02:00 r4
e/eight.lnum 2017-02-21 01:56:26 2017-02-21 01:56:26 consultancyend
e/nine.lnum 2017-02-21 02:01:37 2017-02-21 02:01:37 dismissal
e/one.lnum/zero.lnum 2017-02-21 02:02:36 2017-02-21 02:02:36 exit
e/one.lnum/one.lnum 2017-02-21 [2017-02-21 00:00:00, 2017-02-21 23:59:59] triage
t able 7: events related to one case of the icu process. some of the timestamp attributes are missing:
through domain knowledge, we are able to represent them with uncertainty within a small interval of time.
the timestamps in bold and italic of the “raw timestamp” column are used to set the interval boundaries
for uncertain timestamps.
event id raw timestamp preprocessed timestamp activity
e/one.lnum 2017-08-27 11:47:46 2017-08-27 11:47:46 access
e/two.lnum 2017-08-27 11:47:53 2017-08-27 11:47:53 triage
e/three.lnum 2017-08-27 12:14:25 2017-08-27 12:14:25 visit
e/four.lnum 2017-08-27 12:33:24 2017-08-27 12:33:24 r1
e/five.lnum 2017-08-27 13:04:11 2017-08-27 13:04:11 consultancybegin
e/six.lnum 2017-08-27 13:04:53 2017-08-27 13:04:53 dismissal
e/seven.lnum 2017-08-27 13:08:07 2017-08-27 13:08:07 exit
e/eight.lnum null [2017-08-27 11:47:53 , 2017-08-27 13:04:53 ]consultancyend
e/nine.lnum null [2017-08-27 11:47:53 , 2017-08-27 13:04:53 ] r2
e/one.lnum/zero.lnum null [2017-08-27 11:47:53 , 2017-08-27 13:04:53 ] r3
e/one.lnum/one.lnum null [2017-08-27 11:47:53 , 2017-08-27 13:04:53 ] r4
the day has been recorded. this can be modeled with an uncertain timestamp encom-
passing a range of 24 hours. the column preprocessed timestamp shows the results of
this preprocessing step.
some of the events in the trace of t able 7 are missing the timestamp value entirely.
in this case, we can resort to domain knowledge provided by the process owners: it is
known that events related to the radiolo/g_y exams happen af/t.f_er the triage event, and be-
fore the dismissal event. this allows the representation of the timestamps with ranges
of possible values. notice that such a small interval of time, obtainable from the domain
39 / 52m. pegoraro et al. conformance checking over uncertain event data
t able 8: a valid alignment for both traces of t ables 6 and 7. this alignment has a deviation cost equal to
0, and corresponds to a best-case scenario for conformance between the process model and both uncertain
traces.
access triage visit consultancybegin r1 r2 r3 r4 consultancyend dismissal exit
access triage visit consultancybegin r1 r2 r3 r4 consultancyend τ dismissal exit
t/one.lnumt/two.lnumt/eight.lnumt/nine.lnumt/three.lnumt/four.lnumt/five.lnumt/six.lnumt/one.lnum/zero.lnumt/one.lnum/four.lnumt/one.lnum/five.lnumt/one.lnum/six.lnum
t able 9: a valid alignment for the trace of t able 6. this alignment has a deviation cost equal to 2 (1 move on
log and 1 move on model), and corresponds to a worst-case scenario for conformance between the process
model and the uncertain trace.
access visit consultancybegin r1 r2 r3 r4 consultancyend dismissal exit triage
access triage visit consultancybegin r1 r2 r3 r4 consultancyend τ dismissal exit
t/one.lnumt/two.lnumt/eight.lnumt/nine.lnumt/three.lnumt/four.lnumt/five.lnumt/six.lnumt/one.lnum/zero.lnumt/one.lnum/four.lnumt/one.lnum/five.lnumt/one.lnum/six.lnum
knowledge available, is preferable to larger possible intervals (e.g., 2017-08-27 00:00:00
to 2017-08-27 23:59:59), since it minimizes the amount of possible overlaps in time with
other events in the trace. in turn, this means that the number of possible realizations
of the uncertain trace is smaller, granting a faster conformance checking. as before, the
results of modeling timestamp uncertainty are shown in the column preprocessed times-
tamp .
once uncertainty is made explicit using the event log formally de/f._i/i.dotlessned in this paper,
it is possible to apply conformance checking over uncertainty. the technique of align-
ments illustrated here provides two results, corresponding to the lower and upper bound
for the conformance score. the traces shown in t ables 6 and 7 have a best-case scenario
alignment in common, which is shown in t able 8; aligning through the behavior net of
these traces has allowed the algorithm to select a value for the uncertain timestamps of
the traces (translated in a speci/f._i/i.dotlessc ordering) such that the deviations between data and
model is the smallest possible. for both traces, the best-case scenario has a cost equal to
0, thus, no deviations occur in that case.
let us now look at the worst-case scenarios. one of the alignments with the worst
possible score for the trace in t able 6 is shown in t able 9. in this scenario, the deviations
are one move on model (the triage activity should have occurred af/t.f_er the access but
did not), and one move on log (the activity triage occurs in the data at an unexpected
moment in the process).
a worst-case scenario for the trace in t able 7 is illustrated in t able 10. in this case,
the deviation is equal to 6, given by the wrong order of the event related to the radiolo/g_y
exam. note that, in this example, we assume that every deviation has a unit cost, but
the alignment technique allows to de/f._i/i.dotlessne di/f._fferent costs for di/f._fferent types of deviations
based on impact in the process. for example, a patient that exits the hospital without
o/f._f/f._i/i.dotlesscial dismissal might have a worse impact than an unauthorized laboratory exam. for
simplicity, in this case, we assume that all types of deviation have a unit cost.
uncertain alignments provide novel insights, not obtainable through existing con-
40 / 52m. pegoraro et al. conformance checking over uncertain event data
t able 10: a valid alignment for the trace of t able 7. this alignment has a cost equal to 6 (3 moves on log
and 3 moves on model), and corresponds to the worst-case scenario for conformance between the process
model and the uncertain trace.
access triage visit consultancybegin r4 r3 r2 r1 consultancyend dismissal exit
access triage visit consultancybegin r1 r2 r3 r4τττ consultancyend τ dismissal exit
t/one.lnumt/two.lnumt/eight.lnumt/nine.lnumt/three.lnumt/four.lnumt/five.lnumt/six.lnum t/one.lnum/zero.lnumt/one.lnum/four.lnumt/one.lnum/five.lnumt/one.lnum/six.lnum
formance techniques. the process owner can utilize these results to gain insights and
decide actions in regard of the process. in situations where quanti/f._i/i.dotlessed uncertainty is
present or can be uncovered using domain knowledge in a pre-processing step, the po-
tential violation shown in the worst-case scenario for traces such as the one in t able 6 can
be investigated, as well as the source of said uncertainty; the process owner can, further-
more, decide whether the consequences and the likelihood of the worst-case scenario are
indicative of a need for a process restructuration, or whether the risk of such potential
violation of the normative process model are not critical for the process execution. con-
versely, if uncertainty in the event log remains non-quanti/f._i/i.dotlessed and the a/f._ffected trace is
treated as a regular process trace, the subsequent analysis will only consider one possi-
ble realization of the uncertain trace, possibly sampled at random. in this case, taking
process management decisions that account for the best- and worst-case scenarios is not
possible.
lastly, it is important to notice an additional implication of the qualitative experi-
ment described in this section. for the events e/eight.lnumthroughe/one.lnum/one.lnumof the trace in t able 7 we
determined suitable bounds for uncertain timestamps through domain knowledge. in
absence of such domain knowledge, it is still possible to apply process mining techniques
for uncertain data to traces with missing timestamps: the lower (resp., upper) bound of
such timestamps can be set to be smaller (resp., larger) than any other timestamp ap-
pearing in the uncertain trace. this models an event that, in the real process, might have
occurred in any point in the trace. thus, the resulting pre-processed event will be able to
be considered by process mining techniques operating on uncertain events such as the
alignment technique presented in this paper3. an analogous pre-processing procedure
can be utilized on events with a missing activity label, by assigning an uncertain label
containing all labels appearing in the event log. while these pre-processing techniques
allow to apply process mining techniques to traces and events with missing attributes,
it is important to bear in mind the consequences this might have in terms of perfor-
mance. as demonstrated by the results of quantitative performance experiments shown
in figure 11, a small percentage of uncertain events in a log induces a large amount of
realizations. thus, modeling missing timestamps or activity labels through uncertainty
3this is limited to techniques that only consider the control-/f._asc/l.f_ow perspective of event data. ad-
ditional perspectives might not be modeled by this pre-processing technique (namely, in this case, the
time/performance perspective).
41 / 52m. pegoraro et al. conformance checking over uncertain event data
without restricting them with domain knowledge might be unfeasible when applied to
substantial amounts of event data.
7 related work
this section discusses existing literature relevant to the problem of computing a con-
formance score between historical event data and a process model, as well as research
addressing types of anomalies in recorded data similar to the notion of uncertainty pre-
sented in this paper.
7.1 conformance checking
the discipline of conformance checking, a sub/f._i/i.dotlesseld of process mining, is concerned with
de/f._i/i.dotlessning metrics to compare how well an event log matches a given process model. the
input for this task consists of an execution log and a process model (most commonly a la-
beled petri net) and the output is a measurement of the distance—that is, the deviation—
between the model and the log, or the traces that compose the log. the two main goals
of conformance checking are measuring the quality of a process discovery algorithm by
comparing the discovered process model with the source event log, to verify the extent to
which the model /f._i/i.dotlessts the log; and comparing an execution log with a normative process
model (of/t.f_en de/f._i/i.dotlessned partially or completely by hand) in order to verify the deviations
between the rules governing the process and the tasks carried out in reality. of/t.f_en, the
conformance measure de/f._i/i.dotlessned between logs (or traces) and models includes not only a
distance in absolute terms, but also an indication of where and what deviated from the
norm in the process. conformance checking was introduced by rozinat and v an der
aalst [35], who obtained a conformance measure by tracking counts of tokens during
replay of traces in a petri net. despite the elevated computational complexity, state-of-
the-art approaches are mostly based on alignments, introduced by adriansyah et al. [8].
the topic of conformance checking includes previous work that examines concepts
connected to probability on the model side. the stochastic petri net is an important
extension of the petri net model which probabilistically describes the time distance be-
tween the activation of transitions. richter et al. [34] utilize these models to extend
conformance checking so the conformance score of event data can be /f._i/i.dotlessnely tuned to ac-
count for deviations in the time dimension with respect to a reference stochastic petri
net. another formalism involving probabilities is the fork/join network, a scheduling
model that can represent the actions of resources in a process, complete with proba-
bilities. more recently, leemans et al. [26] devised a conformance checking technique
able to measure deviations between stochastic petri nets and event logs. their method
hinges on converting both the stochastic model and the event log in a so-called stochas-
tic language, i.e., a probability distribution over process variants. they then employ the
42 / 52m. pegoraro et al. conformance checking over uncertain event data
earth movers’ distance (emd) to compute the di/f._fference between stochastic languages
in term of distance between probability distributions. this allows to account for routing
probabilities in the model, improving the reliability of conformance scores.
senderovich et al. [36] show how to discover fork/join networks from an event log
and a corresponding schedule for the process—i.e., a description of the tasks involved
in a process and an assignment between agents and tasks—and utilize them to perform
conformance checking. this allows to measure the predictive capabilities of the reference
schedule—or, alternatively, to quantify the deviation from the schedule present in an
historical event log. additionally, the authors complement this conformance checking
approach on schedules with a process improvement algorithm that shortens the expected
delay between tasks in the process.
it is important, however, to note that stochastic conformance checking is a concept
that fundamentally di/f._ffers from uncertainty as presented in this paper. it is essential to
understand that strong uncertainty involves non-determinism, and the behavior con-
tained in a strongly uncertain trace is completely probability-agnostic. moreover, exist-
ing approaches for stochastic conformance checking assume the presence of probability
information on the reference model, which is then compared with classic process traces;
conversely, uncertainty speci/f._i/i.dotlesscally considers anomalies within recorded data, regardless
of the nature or the semantics of the corresponding process model.
7.2 event data uncertainty
as mentioned, the occurrence of data containing uncertainty—in a broad sense—is com-
mon both in more classic disciplines like statistics and data mining [24] and in process
mining [5]; and logs that show an explicit uncertainty in the control /f._asc/l.f_ow perspective
can be classi/f._i/i.dotlessed in the lower levels of the quality ranking proposed in the process min-
ing manifesto.
t o historically position the topic of uncertain data, let us mention some previous
work in the domain of data mining. a survey work o/f._ffering a panoramic view of min-
ing uncertain data is the one by aggarwal and philip [9], which focuses with particular
attention on the problem of uncertain data querying. such data is represented on the
basis of probabilistic databases [38], a foundational notion in the setting of uncertain
data mining. a branch of data mining particularly related to process mining is frequent
itemsets mining: an e/f._f/f._i/i.dotlesscient algorithm to search for frequent itemsets over uncertain
data, the u-apriori, have been presented by chui et al. [16].
within process mining, there exist various techniques to deal with a kind of un-
certainty di/f._fferent, albeit closely related, from the one that we analyze here: missing or
incorrect data. this can be considered as a form of non-explicit uncertainty: no measure
or indication on the nature of the uncertainty is given in the event log. the work of
suriadi et al. [39] provides a taxonomy for such issues in event logs, laying out a series
43 / 52m. pegoraro et al. conformance checking over uncertain event data
of data patterns that model errors in process data. in these cases, and if this behavior
is infrequent enough to allow the event log to remain meaningful, the most common
way for existing process mining techniques to deal with missing data is by /f._i/i.dotlessltering out
the a/f._ffected traces and performing discovery and conformance checking on the resulting
/f._i/i.dotlessltered event log. a case study illustrating such situation is, e.g., the work of benevento
et al. [12]. while /f._i/i.dotlessltering out missing values is straightforward, various methodologies
of event log /f._i/i.dotlessltering have been proposed in the past to solve the problem of incorrect
event attributes: the /f._i/i.dotlessltering can take place thanks to a reference model, which can be
given as process speci/f._i/i.dotlesscation [40], or from information discovered from the frequent
and well-formed traces of the same event log; for example extracting an automaton from
the frequent traces [17], computing conditional probabilities of frequent sequences of
activities [20], or discovering a probabilistic automaton [42]. in the latter cases, the noise
is identi/f._i/i.dotlessed as infrequent behavior.
some previous work attempt to repair the incorrect values in an event log. conforti
et al. [18] propose an approach for the restoration of incorrect timestamps based on a log
automaton, that repairs the total ordering of events in a trace based on correct frequent
behavior. fani sani et al. [21] de/f._i/i.dotlessne outlier behavior as the unexpected occurrence of
an event, the absence of an event that is supposed to happen, and the incorrect order of
events in the trace; then, they propose a repairing method based on probabilistic anal-
ysis of the context of an outlier (events preceding or following the anomalous event).
again, both of these methods de/f._i/i.dotlessne anomalous/incorrect behavior on the basis of the
frequency of occurrence.
the de/f._i/i.dotlessnition of uncertainty on activity labels as de/f._i/i.dotlessned in the taxonomy of sec-
tion 2 has not been, to the best of our knowledge, previously employed in the /f._i/i.dotlesseld of
process mining. there are, however, related examples of anomalies or uncertainties on
activity labels of events: for instance, the problem of matching event identi/f._i/i.dotlessers to nor-
mative activity labels [11]. in this case, an event is associated with only one activity la-
bel, but this association is not known. there are a number of techniques to estimate
the correct association, included some that consider the data perspective, together with
the control /f._asc/l.f_ow perspective [36]. using this setting, v an der aa et al. [1] proposed a
technique to estimate bounds of conformance scores for event logs with unknown or
partially known event-to-activity mapping. another related domain is the many-to-one
abstraction from low-level events to a higher order of activity labels, which can be per-
formed via clustering events in minimal con/f._asc/l.f_ict groups [23] or representing low-level
patterns with data petri nets which then discovers high-level activities by matching pat-
terns through alignments [28].
a kind of anomaly in event data which is even more related to uncertainty as dis-
cussed in this paper is incompleteness in the order of events in a trace. this occurs when
total ordering among events is lost or not available, and only a partial order is known.
in the /f._i/i.dotlesseld of concurrent and distributed systems, the absence of a total order among
44 / 52m. pegoraro et al. conformance checking over uncertain event data
logged activities has historically been relevant by virtue of being both caused by, and a
necessary condition for, the presence of concurrency in a system (refer e.g. to beschast-
nikh et al. [14]). an important concept at the base of this paper is the representation of
uncertainties in the timestamp dimension through directed acyclic graphs, which express
these partial orders. this intuition was /f._i/i.dotlessrst presented by lu et al. [27], also in the con-
text of conformance checking, in order to produce partially ordered alignments. more
recently, v an der aa et al. [2] proposed a technique to resolve such order uncertainty,
through estimates based on probabilistic inference aided by a normative process model.
in process mining, a notion well known for a long time is the fact that in many cases
the de/f._i/i.dotlessnition of the case is not part of the normative information immediately accessi-
ble to the process analyst, so there needs to be a decision on which attribute or attributes
constitutes the case of the process. in some cases, multiple de/f._i/i.dotlessnitions of cases are pos-
sible and analysis on a subset of them is desirable. this speci/f._i/i.dotlessc setting, which can be
interpreted as uncertainty on the case notion, has a long history both in terms of mathe-
matical formalization and in terms of implementation and de/f._i/i.dotlessnition of data standards.
for an introduction to this sub/f._i/i.dotlesseld of process mining we refer to [van2019object].
this paper presents an extended version of the preliminary analysis on uncertain
event data in process mining shown in [4], in which we presented a preliminary descrip-
tion of uncertain event data and their taxonomy, as well as a description of an approach
to /f._i/i.dotlessnd upper and lower bound for the conformance score of an uncertain process trace
through alignments. w e elaborate on this previous work adding an extended formaliza-
tion, proving theorems on uncertainty in process mining, and reporting on new experi-
ments. the framework for uncertain data proposed in this paper has also been expanded
by providing an algorithm capable of process discovery on uncertain event data through
the de/f._i/i.dotlessnition of directly-follows relationship in uncertain settings and the computation
of an uncertain directly-follows graph, which enables process discovery techniques [31].
on the topic of e/f._f/f._i/i.dotlesscient uncertain data management, we presented an improved algo-
rithm that allows to preprocess uncertain traces into behavior graphs in quadratic time,
enabling fast uncertainty analysis [32]. the exploration of uncertain event data can also
be facilitated by a memory-e/f._f/f._i/i.dotlesscient representation method and the de/f._i/i.dotlessnition of the con-
cept of uncertain process variants [33].
lastly, it is important to mention some of the technological advancements that de-
crease the likelihood of the presence of uncertainty in the data. as discussed in section 1,
some of the most prominent causes of uncertainty are the human factor involved in the
process, and the intrinsic limitations of legacy information systems. besides more classi-
cal concepts like work/f._asc/l.f_ow automation [37] and the deployment of process-aware infor-
mation systems [19], a recent innovation that aims to mitigate both problems is robotic
process automation (rp a) [6], a technology that aids user operations in processes by
learning repeated patterns of actions, and subsequently automate them, while interact-
ing with human operators through the same guis they are utilizing. introducing a high
45 / 52m. pegoraro et al. conformance checking over uncertain event data
level of automation within the process naturally helps towards the accurate recording
of process data, especially if such automation assists the human agents involved in the
process.
8 conclusion
as the need to quickly and e/f._ffectively analyze process data has arisen in the recent past
and is growing to this day, many new types of information regarding events are recorded;
this calls for new techniques able to provide an adequate interpretation of the new data.
not only more and more event data is available to the analyst, but these data are acces-
sible in association with a wealth of information and meta-information about the pro-
cess, the resources that executed activities, data about the outcome of those actions, and
many other types of knowledge about the nature of events, activities, and the process
as a whole. in this paper, we presented a new paradigm for process mining applied to
event data: explicit uncertainty. w e described the possible form it can assume, building
a taxonomy of di/f._fferent types of uncertainty, and we provided examples of how uncer-
tainty can originate in a process, and how uncertainty information can be inferred from
the available data and from domain knowledge provided by process experts. w e then
designed a framework to de/f._i/i.dotlessne the various /f._asc/l.f_avors of uncertainty shown in the taxon-
omy. then, in order to assess the practical applications of the uncertainty framework,
we applied it to a well-consolidated technique for conformance checking: aligning data
to a reference petri net. this application of uncertainty analysis is integrated by theo-
rems that prove the correctness of the techniques developed and illustrated here within
the framework previously described. the results can provide insights on the possible vi-
olations of process instances recorded with uncertainty against a normative model. the
behavior net provides an e/f._f/f._i/i.dotlesscient way to compute the lower bound for the conformance
cost—i.e., the best-case scenario for conformity of uncertain process data—with a large
improvement in time performance with respect to a brute-force procedure.
the approaches shown here can be extended in a number of ways. from a perfor-
mance perspective, to improve the usability of alignments over uncertainty the computa-
tion of the upper bound of the conformance cost should either be optimized, or replaced
by an approximate algorithm. another direction for future work is extending the con-
formance checking technique to logs with weak uncertainty, weighting the deviation by
means of the probability distributions attached to activities, timestamps and indeter-
minate events. this includes the case in which probability distributions contained in
weakly uncertain events are not necessarily independent, or where the assumption of
independence is unrealistic for the process being analyzed. furthermore, a limitation
a/f._ffecting the techniques presented in this paper is that using a graphical representation
in lieu of process traces requires to process the entire trace. this implies that uncertain
46 / 52m. pegoraro et al. conformance checking over uncertain event data
alignments can only be applied to data available in batches, while they do not support
event data in streams. future research might include the development of graphless (i.e.,
not reliant on graph structures) representations towards online process mining over un-
certain event data.
additionally, investigation on real-life data is an important milestone for this line
of research, and it is vital to analyze in depth a complete use case in real life of process
mining in the presence of uncertain event data.
acknowledgements
w e thank the alexander von humboldt (avh) stif/t.f_ung for supporting our research in-
teractions. w e acknowledge elisabetta benevento for her valuable input.
references
[1] van der aa, han, henrik leopold, and hajo a. reijers. “e/f._f/f._i/i.dotlesscient process con-
formance checking on the basis of uncertain event-to-activity mappings”. in:
ieee transactions on knowledge and data engineering 32.5 (2020), pp. 927–
940./d.sc/o.sc/i.sc :10.1109/tkde.2019.2897557 .
[2] van der aa, han, henrik leopold, and matthias w eidlich. “partial order resolu-
tion of event logs for process conformance checking”. in: decision support sys-
tems 136 (2020), p. 113347. /d.sc/o.sc/i.sc :10.1016/j.dss.2020.113347 .
[3] van der aalst, wil m. p. “decomposing petri nets for process mining: a generic
approach”. in: distributed parallel databases 31.4 (2013), pp. 471–507. /d.sc/o.sc/i.sc :10.
1007/s10619-013-7127-5 .
[4] van der aalst, wil m. p. “object-centric process mining: dealing with diver-
gence and convergence in event data”. in: so/f_tware engineering and formal
methods - 17th international conference, sefm 2019, oslo, norway, september
18-20, 2019, proceedings . ed. by ¨olveczky, peter csaba and gwen sala ¨un. v ol. 11724.
lecture notes in computer science. springer, 2019, pp. 3–25. /d.sc/o.sc/i.sc :10.1007/
978-3-030-30446-1_1 .
[5] van der aalst, wil m. p., arya adriansyah, ana karla alves de medeiros, et al.
“process mining manifesto”. in: business process management w orkshops - bpm
2011 international w orkshops, clermont-ferrand, france, august 29, 2011, re-
vised selected papers, part i . ed. by daniel, florian, kamel barkaoui, and schahram
dustdar. v ol. 99. lecture notes in business information processing. springer,
2011, pp. 169–194. /d.sc/o.sc/i.sc :10.1007/978-3-642-28108-2_19 .
47 / 52m. pegoraro et al. conformance checking over uncertain event data
[6] van der aalst, wil m. p., martin bichler, and armin heinzl. “robotic process
automation”. in: business information systems engineering 60.4 (2018), pp. 269–
272./d.sc/o.sc/i.sc :10.1007/s12599-018-0542-4 .
[7] adriansyah, arya. “aligning observed and modeled behavior”. phd thesis. eind-
hoven university of t echnology, 2014. /d.sc/o.sc/i.sc :10.6100/ir770080 .
[8] adriansyah, arya, boudewijn f. van dongen, and wil m. p. van der aalst. “t o-
wards robust conformance checking”. in: business process management w ork-
shops - bpm 2010 international w orkshops and education track, hoboken, nj,
usa, september 13-15, 2010, revised selected papers . ed. by zur muehlen, michael
and jianwen su. v ol. 66. lecture notes in business information processing. springer,
2010, pp. 122–133. /d.sc/o.sc/i.sc :10.1007/978-3-642-20511-8_11 .
[9] aggarwal, charu c. and philip s. yu. “a survey of uncertain data algorithms
and applications”. in: ieee transactions on knowledge data engineering 21.5
(2009), pp. 609–623. /d.sc/o.sc/i.sc :10.1109/tkde.2008.190 .
[10] aho, alfred v ., m. r. garey, and je/f._ffrey d. ullman. “the transitive reduction
of a directed graph”. in: siam journal on computing 1.2 (1972), pp. 131–137.
/d.sc/o.sc/i.sc :10.1137/0201008 .
[11] baier, thomas and jan mendling. “bridging abstraction layers in process min-
ing by automated matching of events and activities”. in: business process man-
agement - 11th international conference, bpm 2013, beijing, china, august 26-
30, 2013. proceedings . ed. by daniel, florian, jianmin w ang, and barbara w eber.
v ol. 8094. lecture notes in computer science. springer, 2013, pp. 17–32. /d.sc/o.sc/i.sc :
10.1007/978-3-642-40176-3_4 .
[12] benevento, elisabetta, prabhakar m. dixit, mohammadreza fani sani, et al. “eval-
uating the e/f._ffectiveness of interactive process discovery in healthcare: a case
study”. in: business process management w orkshops - bpm 2019 international
w orkshops, vienna, austria, september 1-6, 2019, revised selected papers . ed. by
di francescomarino, chiara, remco m. dijkman, and uwe zdun. v ol. 362. lec-
ture notes in business information processing. springer, 2019, pp. 508–519. /d.sc/o.sc/i.sc :
10.1007/978-3-030-37453-2_41 .
[13] berti, alessandro, sebastiaan j. van zelst, and wil m. p. van der aalst. “process
mining for python (pm4py): bridging the gap between process- and data sci-
ence”. in: icpm demo track (ceur 2374) . 2019, pp. 13–16. /u.sc/r.sc/l.sc :http://
ceur-ws.org/vol-2374/paper4.pdf .
[14] beschastnikh, ivan, yuriy brun, michael d. ernst, et al. “mining temporal invari-
ants from partially ordered logs”. in: acm sigops operatin systems review
45.3 (2011), pp. 39–46. /d.sc/o.sc/i.sc :10.1145/2094091.2094101 .
48 / 52m. pegoraro et al. conformance checking over uncertain event data
[15] carmona, josep, boudewijn f. van dongen, andreas solti, et al. conformance
checking - relating processes and models . springer, 2018. /i.sc/s.sc/b.sc/n.sc : 978-3-319-99413-
0./d.sc/o.sc/i.sc :10.1007/978-3-319-99414-7 .
[16] chui, chun-kit, ben kao, and edward hung. “mining frequent itemsets from
uncertain data”. in: advances in knowledge discovery and data mining, 11th
paci/unifb01c-asia conference, pakdd 2007, nanjing, china, may 22-25, 2007, pro-
ceedings . ed. by zhou, zhi-hua, hang li, and qiang y ang. v ol. 4426. lecture
notes in computer science. springer, 2007, pp. 47–58. /d.sc/o.sc/i.sc :10.1007/978-
3-540-71701-0_8 .
[17] conforti, ra/f._ffaele, marcello la rosa, and arthur h. m. ter hofstede. “filtering
out infrequent behavior from business process event logs”. in: ieee trans-
actions on knowledge and data engineering 29.2 (2017), pp. 300–314. /d.sc/o.sc/i.sc :10.
1109/tkde.2016.2614680 .
[18] conforti, ra/f._ffaele, marcello la rosa, arthur h. m. ter hofstede, et al. “au-
tomatic repair of same-timestamp errors in business process event logs”. in:
business process management - 18th international conference, bpm 2020, seville,
spain, september 13-18, 2020, proceedings . ed. by fahland, dirk, chiara ghidini,
j¨org becker, et al. v ol. 12168. lecture notes in computer science. springer, 2020,
pp. 327–345. /d.sc/o.sc/i.sc :10.1007/978-3-030-58666-9_19 .
[19] dumas, marlon, wil m. p. van der aalst, and arthur h. m. ter hofstede, eds.
process-aware information systems: bridging people and so/f_tware through pro-
cess t echnolo/g_y . wiley, 2005. /i.sc/s.sc/b.sc/n.sc : 978-0-471-66306-5. /d.sc/o.sc/i.sc :10.1002/0471741442 .
[20] fani sani, mohammadreza, sebastiaan j. van zelst, and wil m. p. van der aalst.
“improving process discovery results by filtering outliers using conditional
behavioural probabilities”. in: business process management w orkshops - bpm
2017 international w orkshops, barcelona, spain, september 10-11, 2017, revised
papers . ed. by t eniente, ernest and matthias w eidlich. v ol. 308. lecture notes in
business information processing. springer, 2017, pp. 216–229. /d.sc/o.sc/i.sc :10.1007/
978-3-319-74030-0_16 .
[21] fani sani, mohammadreza, sebastiaan j. van zelst, and wil m. p. van der aalst.
“repairing outlier behaviour in event logs”. in: business information systems
- 21st international conference, bis 2018, berlin, germany, july 18-20, 2018,
proceedings . ed. by abramowicz, witold and adrian paschke. v ol. 320. lecture
notes in business information processing. springer, 2018, pp. 115–131. /d.sc/o.sc/i.sc :10.
1007/978-3-319-93931-5_9 .
[22] fla ˇska, v ´aclav, jaroslav je ˇzek, t om ´aˇs kepka, et al. “transitive closures of binary
relations. i.” in: acta universitatis carolinae. mathematica et physica 48.1 (2007),
pp. 55–69.
49 / 52m. pegoraro et al. conformance checking over uncertain event data
[23] g ¨unther, christian w . and wil m. p. van der aalst. mining activity clusters from
low-level event logs . beta, research school for operations management and lo-
gistics, 2006. /u.sc/r.sc/l.sc :https://www.persistent- identifier.nl/urn:
nbn:nl:ui:25-5e7c14a5-bcb7-42a9-ab4d-25b41b1fb6c3 .
[24] han, jiawei, micheline kamber, and jian pei. data mining: concepts and t ech-
niques, 3rd edition . morgan kaufmann, 2011. /i.sc/s.sc/b.sc/n.sc : 978-0123814791. /u.sc/r.sc/l.sc :http:
//hanj.cs.illinois.edu/bk3/ .
[25] kalvin, alan d. and y aakov l. v arol. “on the generation of all t opological
sortings”. in: journal of algorithms 4.2 (1983), pp. 150–162. /d.sc/o.sc/i.sc :10 . 1016 /
0196-6774(83)90042-1 .
[26] leemans, sander jj, wil mp van der aalst, t obias brockho/f._ff, et al. “stochastic
process mining: earth movers’ stochastic conformance”. in: information systems
(2021), p. 101724. /d.sc/o.sc/i.sc :10.1016/j.is.2021.101724 .
[27] lu, xixi, dirk fahland, and wil m. p. van der aalst. “conformance checking
based on partially ordered event data”. in: business process management w ork-
shops - bpm 2014 international w orkshops, eindhoven, the netherlands, septem-
ber 7-8, 2014, revised papers . ed. by fournier, fabiana and jan mendling. v ol. 202.
lecture notes in business information processing. springer, 2014, pp. 75–88.
/d.sc/o.sc/i.sc :10.1007/978-3-319-15895-2_7 .
[28] mannhardt, felix, massimiliano de leoni, hajo a. reijers, et al. “from low-
level events to activities - a pattern-based approach”. in: business process man-
agement - 14th international conference, bpm 2016, rio de janeiro, brazil, septem-
ber 18-22, 2016. proceedings . ed. by rosa, marcello la, peter loos, and oscar pas-
tor. v ol. 9850. lecture notes in computer science. springer, 2016, pp. 125–141.
/d.sc/o.sc/i.sc :10.1007/978-3-319-45348-4_8 .
[29] pegoraro, marco and wil m. p. van der aalst. “mining uncertain event data in
process mining”. in: international conference on process mining, icpm 2019,
aachen, germany, june 24-26, 2019 . ieee, 2019, pp. 89–96. /d.sc/o.sc/i.sc :10.1109/
icpm.2019.00023 .
[30] pegoraro, marco, merih seran uysal, and wil m p van der aalst. “proved: a
t ool for graph representation and analysis of uncertain event data”. in: inter-
national conference on application and theory of petri nets and concurrency .
springer. 2021.
[31] pegoraro, marco, merih seran uysal, and wil m. p. van der aalst. “discovering
process models from uncertain event data”. in: business process management
w orkshops - bpm 2019 international w orkshops, vienna, austria, september
1-6, 2019, revised selected papers . ed. by francescomarino, chiara di, remco
50 / 52m. pegoraro et al. conformance checking over uncertain event data
m. dijkman, and uwe zdun. v ol. 362. lecture notes in business information
processing. springer, 2019, pp. 238–249. /d.sc/o.sc/i.sc :10.1007/978-3-030-37453-
2_20 .
[32] pegoraro, marco, merih seran uysal, and wil m. p. van der aalst. “e/f._f/f._i/i.dotlesscient con-
struction of behavior graphs for uncertain event data”. in: business informa-
tion systems - 23rd international conference, bis 2020, colorado springs, co,
usa, june 8-10, 2020, proceedings . ed. by abramowicz, witold and gary klein.
v ol. 389. lecture notes in business information processing. springer, 2020, pp. 76–
88./d.sc/o.sc/i.sc :10.1007/978-3-030-53337-3_6 .
[33] pegoraro, marco, merih seran uysal, and wil m. p. van der aalst. “e/f._f/f._i/i.dotlesscient time
and space representation of uncertain event data”. in: algorithms 13.11 (2020),
p. 285. /d.sc/o.sc/i.sc :10.3390/a13110285 .
[34] richter, florian, janina sontheim, ludwig zellner, et al. “tade: stochastic con-
formance checking using t emporal activity density estimation”. in: business
process management - 18th international conference, bpm 2020, seville, spain,
september 13-18, 2020, proceedings . ed. by fahland, dirk, chiara ghidini, j ¨org
becker, et al. v ol. 12168. lecture notes in computer science. springer, 2020,
pp. 220–236. /d.sc/o.sc/i.sc :10.1007/978-3-030-58666-9_13 .
[35] rozinat, anne and wil m. p. van der aalst. “conformance checking of processes
based on monitoring real behavior”. in: information systems 33.1 (2008), pp. 64–
95./d.sc/o.sc/i.sc :10.1016/j.is.2007.07.001 .
[36] senderovich, arik, andreas rogge-solti, avigdor gal, et al. “the road from
sensor data to process instances via interaction mining”. in: advanced infor-
mation systems engineering - 28th international conference, caise 2016, ljubl-
jana, slovenia, june 13-17, 2016. proceedings . ed. by nurcan, selmin, pnina so/f._ffer,
marko bajec, et al. v ol. 9694. lecture notes in computer science. springer, 2016,
pp. 257–273. /d.sc/o.sc/i.sc :10.1007/978-3-319-39696-5_16 .
[37] stohr, edward a. and j. leon zhao. “w ork/f._asc/l.f_ow automation: overview and re-
search issues”. in: information systems frontiers 3.3 (2001), pp. 281–296. /d.sc/o.sc/i.sc :
10.1023/a:1011457324641 .
[38] suciu, dan, dan olteanu, christopher r ´e, et al. probabilistic databases . synthe-
sis lectures on data management. morgan & claypool publishers, 2011. /d.sc/o.sc/i.sc :
10.2200/s00362ed1v01y201105dtm016 .
[39] suriadi, suriadi, robert andrews, arthur h. m. ter hofstede, et al. “event log
imperfection patterns for process mining: t owards a systematic approach to clean-
ing event logs”. in: information systems 64 (2017), pp. 132–150. /d.sc/o.sc/i.sc :10.1016/
j.is.2016.07.011 .
51 / 52m. pegoraro et al. conformance checking over uncertain event data
[40] w ang, jianmin, shaoxu song, xuemin lin, et al. “cleaning structured event logs:
a graph repair approach”. in: 31st ieee international conference on data en-
gineering, icde 2015, seoul, south korea, april 13-17, 2015 . ed. by gehrke, jo-
hannes, w olfgang lehner, kyuseok shim, et al. ieee computer society, 2015,
pp. 30–41. /d.sc/o.sc/i.sc :10.1109/icde.2015.7113270 .
[41] winskel, glynn. “petri nets, algebras, morphisms, and compositionality”. in:
information and computation 72.3 (1987), pp. 197–238. /d.sc/o.sc/i.sc :10.1016/0890-
5401(87)90032-0 .
[42] van zelst, sebastiaan j., mohammadreza fani sani, alireza ostovar, et al. “fil-
tering spurious events from event streams of business processes”. in: advanced
information systems engineering - 30th international conference, caise 2018,
t allinn, estonia, june 11-15, 2018, proceedings . ed. by krogstie, john and hajo a.
reijers. v ol. 10816. lecture notes in computer science. springer, 2018, pp. 35–
52./d.sc/o.sc/i.sc :10.1007/978-3-319-91563-0_3 .
52 / 52
view publication statsview publication stats