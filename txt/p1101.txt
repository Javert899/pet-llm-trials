 available online at www.sciencedirect.com  
sciencedirect  
procedia computer science 00 (20 19) 000 –000  
www.elsevier.com/locate/procedia  
 
1877 -0509  © 2019 the authors. published by elsevier b.v.  
this is an open access article under the cc by -nc-nd license ( http://creativecommons.org/licenses/by -nc-nd/4.0/ )  
peer-review under responsibility of the scientific committee of the centeris -  international conference on enterprise information systems / 
projman – international conference on project management / hcist -  international conference on health and social care information 
systems and technologies   
centeris -  international conference on enterprise information systems / projman -  
international conference on project management / hcist  - international conference on health 
and social care information systems and technologies  
a practitioner's guide to process mining:  
limitations of the directly -follows graph 
wil m.p. van der aalsta,b* 
aprocess and data science (pads), rwth aachen univers ity, aachen, germany 
bfraunhofer institute for applied information technology, sankt augustin, germany   
abstract  
process mining techniques use event data to show what people, machines, and organizations are really doing. process mining 
provides novel insig hts that can be used to identify and address performance and compliance problems. in  recent years, the adoption 
of process mining in practice increased rapidly. it is interesting to see how ideas first developed in open-source tools like prom, 
get transfer red to the dozens of available commercial process mining tools. however, these tools still resort to  producing directly -
follows graphs (dfgs)  based on event data rather than using more sophisticated notations also able to capture concurrency.  
moreover, to tackle complexity , dfgs are seamlessly simplified by removing nodes and edges based on frequency thresholds. 
process -mining practitioners tend to use such simplified dfgs actively . despite their simplicity, these dfgs may be misleading 
and users need to kn ow how these process models are generated before interpreting them . in this paper,  we discuss the pitfalls of 
using  simple dfgs generated  by commercial tools. practitioners  conduc ting a process -mining project  need to understand the risks 
associated with the (incorrect) use of dfgs and frequency -based simplification. therefore, we put these risks in the spotlight.  
 
© 2019 the authors. published by elsevier b.v.  
this is an open access article under the cc by -nc-nd license ( http://creativecommons.org/licenses/by -nc-nd/4.0/ ) 
peer-review under responsibility of the scientific committee of the centeris -  international conference on enterprise 
information systems / projman – international conferen ce on project management / hcist -  international conference on health 
and social care information systems and technologies  
 
keywords:  process mining, process discovery, directly- follows graphs, conformance checking  
 
 
* corresponding author. tel.: +49 241 80 21901  e-mail address:  wvdaalst@pads.rwth -aachen.de  2 wil m.p. van der aalst/ procedia computer science 00 ( 2019) 000 –000 
 
1. introduction  
process mining starts from event data , as shown in table 1. input for process mining is an event log . an event log 
views a process from a particular angle. each event in the log refers to (1) a particular process instance (called case ), 
(2) an activity , and (3) a timestamp . there may be additional event attributes referring to resources, people, costs, etc., 
but these are optional. with some effort, such data can be extracted from any information system supporting 
operational processes. process mining  uses these  event data to a nswer a variety of process -related questions.  process 
mining techniques such as process discovery, conformance checking, model enhancement, and operational support 
can be used to improve performance and compliance  [1]. 
     table 1. small fragment of a lar ger event log capturing the purchase -to-pay (p2p)  process.  
case id (here an order)  activity  timestamp  resource  costs  customer  
… … … … … .. 
2019 -88201  create purchase requisition  25-07-2019:09.15  john  €20.20  9950  
2019 -88201  create purchase order  25-07-2019:09.35  mary  €48.30  9950  
2019 -88201  approve purchase order  25-07-2019:09.55  sue €30.70  9950  
2019 -88202  create purchase requisition  25-07-2019:10.15  john  €28.20  9955  
2019 -88202  create purchase order  25-07-2019:10.25  mary  €29.30  9955  
2019 -88202  approve purchase order  25-07-2019:10.40  sue €37.60  9955  
2019 -88201  receive order confirmation  25-07-2019:11.50  mary  €42.10  9950  
2019 -88201  receive goods  27-07-2019:09.35  peter  €50.20  9950  
2019 -88202  receive order confirmation  27-07-2019:09.45  mary  €42.30  9955  
2019 -88202  receive invoice  28-07-2019:10.10  sue €44.90  9955  
2019 -88201  receive invoice  28-07-2019:10.20  sue €30.80  9950  
2019 -88201  pay invoice  29-07-2019:11.05  sue €30.70  9950  
2019 -88202  receive goods  29-07-2019:11.35  peter  €51.30  9955  
2019 -88202  pay invoice  29-07-2019:12.15  sue €29.20  9955  
… .. … … … … 
 
table 1 only shows a small fragment of a larger event log with events related to the so -called  purchase -to-pay (p2p) 
process . the p2p process includes all  business activities related to purchase orders, e.g., requesting (requisitioning), 
purchasing, receiving, paying for and accounting for goods and services.  the first three columns show the mandatory 
event attributes: case (i.e., process instance), activity, and  timestamp.  additional i nformation such as the resource 
performing the activity is  optional.  
event data can be used to discover process models automatically . process models can be expressed using different 
formalisms ranging from directly- follows graphs (dfgs) and ac cepting automata to petri nets, bpmn diagrams, and 
uml activity diagrams.  fig. 1 shows three process  model s that could have been discovered based on the events in 
table 1.  
  wil m.p. van der aalst  / procedia computer science 00 ( 2019) 000 –000  3 
create purchase 
requisition
create purchase 
order
approve purchase 
order
receive order 
confirmation
receive goods
pay invoice
receive invoice
create purchase 
requisition
create purchase 
order
approve purchase 
order
receive order 
confirmation
receive goods
pay invoice
receive invoice
create purchase 
requisition
create purchase 
order
approve purchase 
order
receive order 
confirmation
receive goods
pay invoice
receive invoice
(a) petri net (b) bpmn model (c) dfg  
fig. 1. three process models discovered for the purcha se-to-pay (p2p)  process considering only the frequent "happy paths". the petri net model 
(a) and the business process model and notation (bpmn)  model (b) specify  the same behavior. the directly -follows graph  (dfg ) (c) allows 
for trace s not allowed in the p etri net and bpmn model (e.g., a loop involving the activities receive goods  and receive invoice ). 
the process models in fig. 1 are very simple since they only consider the mainstream behavior also referred to as 
the "happy paths". for  real p2p processes o f larger organizations , there will be thousands of observed unique traces  
(also known as process variants). the frequency distribution of traces in an event log typically follows a power law 
where a small fraction of all variants accounts for most of the cases. for example, more than 80 percent of all cases 
can be described by less than 20 percent of all process variants  (pareto principle ). for such processes,  it is easy to 
create a simplified process model covering mainstream behavior. however, the cases not covered by such a simplified 
model are typically very diverse and account for most of the process variants . these non-mainstream cases are also 
likely to cause most of the performance and compliance problems.  conformance checking can be used to check if 
reality, as recorded in the event log, conforms to the model and vice versa. the process model may have been made 
by hand or learned using process discover (based on the frequent process variants).  
for a comprehensive introduction  to process mining , we refer to [1].  process mining extends far beyond process 
discovery and conformance checking. for example, it is possible to predict performance and compliance problems 
and recommend process interventions.  however, these more advanced techniques are out of s cope in this paper .    
in march 1968, edsger dijkstra's letter "go to statement considered harmful"  was published in the 
communications of the acm [4]. in his letter,  dijkstra  criticized the excessive use of the goto statement in 
programming languages of the day and advocated structured programming instead.  analogously, this paper could have 
been called "directly -follows graphs (dfgs) considered harmful" because dfgs  are often used and wrongly 
interpreted. currently, there are more than 30 commercial offer ings of process mining software (e.g., celonis, disco, 
processgold, myinvenio, pafnow, minit, qpr, mehrwerk, puzzledata, lanalabs, stereologic, everflow, 
timelinepi, signavio, and logpickr).  they all start from dfgs for discovery. however, as shown in this  paper, there  
are several possible problems related  to the naïve use of dfgs:  
• activities that have a flexible ordering (e.g., due to concurrency) lead to spaghetti -like dfgs with loops 
even when activities are executed at most once.  4 wil m.p. van der aalst/ procedia computer science 00 ( 2019) 000 –000 
• dfgs can be simplified using frequency- based thresholds. however, this may lead to all kinds of 
interpretation problems due to "invisible gaps" in the model.  
• performance information mapped onto dfgs can be misleading, e.g., the average  time reported between 
two activities is con ditional (only the situations where they directly follow each other are considered).  
the remainder of this paper is organized  as follows. section 2 shows the dangers of naï vely using directly- follows 
graphs (dfgs) . this is relevant for practitioners since  dfgs are the " de fact o standard " in commercial process mining 
tools. section 3  concludes the paper  and provides some pointers for further reading.  
2. beyond directly follows graphs  
we first introduce directly -follows graphs (dfgs)  and show how they can be discovered from event data. then,  
we discuss the problems mentioned in the introduction.  
2.1. creating a directly -follows graph (dfg ) 
there are many possible process -modeling notations. fig. 1 shows three examples. most of the commercial process 
mining tools us e dfgs  as a first means to explore the event data. the basic idea is very simple, but first,  we introduce 
some terms to explain the construction of a dfg. an 𝑎𝑎 -event is an event  that corresponds to activity 𝑎𝑎 . a trace  (also 
called process variant ) 𝜎𝜎=〈𝑎𝑎1,𝑎𝑎2,𝑎𝑎3,…,𝑎𝑎𝑛𝑛〉  is a sequence of activities .  #𝐿𝐿(𝜎𝜎) is the number of cases  in event log 
𝐿𝐿 that correspond to trace 𝜎𝜎. note that many cases may have the same trace. #𝐿𝐿(𝑎𝑎) is the number of  𝑎𝑎-events in event 
log 𝐿𝐿. #𝐿𝐿(𝑎𝑎,𝑏𝑏) is the number of times  an 𝑎𝑎-event is directly followed by a 𝑏𝑏-event within the same case. without loss 
of generality,  we assume that each case starts with a start event (denoted ►) and end with an end event (denoted ∎). 
if such start and end activities do not exist,  they can be added to the start and end of each case. hence, traces (process 
variants) are of the form 𝜎𝜎=〈►,𝑎𝑎2,𝑎𝑎3,…,𝑎𝑎𝑛𝑛−1,∎〉 where the start and events only appear at the start and end.  
a dfg is a graph with nodes that correspond to activities and direc ted edges  that corresponds to directly -follows 
relationships. there are three parameters , i.e., 𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣, 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎, and  𝜏𝜏𝑑𝑑𝑑𝑑, that define threshold s for th e minimal number of 
traces for each variant included  (based on #𝐿𝐿(𝜎𝜎)), the minimal number of even ts for each activity included  (based on 
#𝐿𝐿(𝑎𝑎)), and the minimal number of direct succession s for each relation included  (based on # 𝐿𝐿(𝑎𝑎,𝑏𝑏)). 
1. input: event log 𝐿𝐿 and parameters  𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣, 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎, and  𝜏𝜏𝑑𝑑𝑑𝑑. 
2. remove all cases from 𝐿𝐿  having a trace with  a frequency lower than 𝜏𝜏 𝑣𝑣𝑣𝑣𝑣𝑣, i.e., keep a ll cases with a trace 
𝜎𝜎 such that #𝐿𝐿(𝜎𝜎)≥ 𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣. the new event log is 𝐿𝐿′. note that the number of cases  may have be reduced 
considerably, but the retained cases remain unchanged . 
3. remove all events from 𝐿𝐿′ corresponding to activities with a frequency lower than 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎, i.e., keep events 
for which the corresponding activity 𝑎𝑎 meets the requirement #𝐿𝐿′(𝑎𝑎)≥𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎. the new event log is 𝐿𝐿′′. 
note that the number of cases did not change , but the number of ev ents may be much lower.  
4. add a node for each activity remaining in the filtered event log 𝐿𝐿 ′′. 
5. connect the nodes that meet the 𝜏𝜏𝑑𝑑𝑑𝑑 threshold, i.e., activities 𝑎𝑎 and 𝑏𝑏 are connected if and only if  
#𝐿𝐿′′(𝑎𝑎,𝑏𝑏)≥𝜏𝜏𝑑𝑑𝑑𝑑. 
6. output the resulting graph. nodes a re decorated with the activity frequency #𝐿𝐿′′(𝑎𝑎) and edges are 
decorated with the directly -follows frequency # 𝐿𝐿′′(𝑎𝑎,𝑏𝑏).  
nodes and edges can also be decorated with timing information. note that an edge connecting activities 𝑎𝑎 and 𝑏𝑏 
corresponds to # 𝐿𝐿′′(𝑎𝑎,𝑏𝑏) observations of activity 𝑎𝑎 being followed by activity 𝑏𝑏. it is easy to compute the sum, mean, 
median, minimum, maximum, and standard deviation over these #𝐿𝐿′′(𝑎𝑎,𝑏𝑏) observations.  
2.2. misleading diagnostics  
all commercial process -mining  tools support the  above algorithm ( or a variant of  it). however, n ote that for 
performance reasons , most tools implement the third step differently and do no create a new event log 𝐿𝐿′′ where low 
frequent activities are removed. instead, edges are filtered on the overall d fg while  removing low frequent activities . 
this may lead to misleading results. consider the trace 〈𝑎𝑎,𝑏𝑏,𝑐𝑐〉 and assume that that 𝑏𝑏  is a low frequent activity with 
#𝐿𝐿(𝑏𝑏)<𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎. after removing activity 𝑏𝑏 , trace 〈𝑎𝑎,𝑏𝑏,𝑐𝑐〉 becomes  trace 〈𝑎𝑎,𝑐𝑐〉 and 𝑎𝑎 is directly followed by 𝑐𝑐 . filtering  wil m.p. van der aalst  / procedia computer science 00 ( 2019) 000 –000  5 
edges based on the graph will miss that 𝑎𝑎 is directly followed by 𝑐𝑐 after removing 𝑏𝑏. as a result, removed activities 
are not shown  in the model , but still influence the statistics.  even when 𝜏𝜏𝑑𝑑𝑑𝑑 is set to 0, the frequency of a selected  
node may be different from the sum of the frequencies of the input edges and both  may be different from the sum of 
the frequencies of the output edges.  
 
a (1000 )
b (500)
c (1000 )500 (1 day)
500 (10 days )
500 (1 day)
(a) dfg with all activities 
showing both frequencies 
and times
a (1000 )
c (1000 )1000 (6 days )
(f) correct dfg with only 
the two most frequent 
activities (b was removed )
a (1000 )
c (1000 )500 (10 days )
(g) incorrect dfg with only 
the two most frequent 
activities (b was removed )(b) dfg with all 
activities in disco 
showing frequencies(d) dfg with all 
activities in celonis 
showing frequencies(c) dfg with all 
activities in disco 
showing times(e) dfg with all 
activities in celonis 
showing times
(h) dfg generated by disco for 
only the most frequent activities 
and showing frequencies(i) dfg generated by disco 
for only the most frequent 
activities and showing times
 
fig. 2. different dfgs generated for a simple artificial event log 𝐿𝐿 =[〈𝑎𝑎,𝑏𝑏,𝑐𝑐〉500,〈𝑎𝑎,𝑐𝑐〉500] showing frequencies and times. the example shows 
that it is easy to misinterpret dfgs. one needs to understand the way these models are derived from event data to correctly interpret the results.  
let us consider a simple artificial event log 𝐿𝐿=[〈𝑎𝑎,𝑏𝑏,𝑐𝑐〉500,〈𝑎𝑎,𝑐𝑐〉500] to illustrate the subtle but important 
differences between alternative dfg computations. event log 𝐿𝐿 has 1000 cases and two variants: 500 cases follow 
trace 〈𝑎𝑎,𝑏𝑏,𝑐𝑐〉 and 500 cases follow trace 〈𝑎𝑎,𝑐𝑐〉. the time in -between activities 𝑎𝑎 and 𝑏𝑏 and the time in -between 
activities 𝑏𝑏 and 𝑐𝑐 in the first variant is always precisely one day (i.e., two days in total). the time in -between activities 
𝑎𝑎 and 𝑐𝑐 in the second variant is always precisely 10 days.  fig. 2 shows various dfgs generated for this event log. fig. 
2(a) shows the dfg with low values for the thresholds 𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣, 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎, and  𝜏𝜏𝑑𝑑𝑑𝑑. as a result,  all variants, all activities, and 
all directly -follows relations are included.  fig. 2(b -e) show the corresponding dfgs generated by disco  (from 
fluxicon, version 2.2.1, www. fluxicon.com ) and celonis (from celonis, version 4.4, www.celonis.com ) showing 
frequencies and mean times. now assume that 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎 is set to a value in -between 500 and 1000. as a result, activity 𝑏𝑏 is 
removed. applying the algorithm provided above, we obtain the dfg in fig. 2(f). this dfg correctly shows that all 
1000 𝑎𝑎-event s are followed by a 𝑏𝑏-event  with on average a delay of 6 days. however, when removing activity 𝑏𝑏 
without creating a new log without 𝑏𝑏 -event s we obtain the dfg in fig. 2(g). this dfg suggests that activity 𝑎𝑎  is not 
always followed by activity 𝑐𝑐 (only 50%) and that the delay between both is 10 days. howev er, activity 𝑎𝑎 is always 
followed by activity 𝑐𝑐 and the total flow time is just 6  days.  fig. 2(h -i) show the corresponding dfgs generated by 6 wil m.p. van der aalst/ procedia computer science 00 ( 2019) 000 –000 
disco. these dfgs match the misleading dfg in fig. 2(g). note that this is not specific for disco. most commercia l 
process mining tools generate the same dfgs. this illustrates that one should be very careful when interpreting dfgs.  
 
send request
pay with credit 
card
pay via bank 
transfer
confirm 
request
send 
information
notify about 
change
+
+
 x
x
 x
x
archive
 
fig. 3. process model used to generate an event log with 10,000 cases. 
one could argue that the misleading results in fig. 2 stem from an incorrect implementation of the dfg algorithm. 
however, also correctly generated dfgs have the problem that different interleavings of the same set of activities 
automatically leads to loop s even when things are executed only once. consider , for example , the process model shown 
in fig. 3. the process starts with activity send request  and ends with activity archive. in -between these two activities 
there are three independent parallel branches : (1) a choice between activity pay with credit card and activity pay via 
bank transfer , (2) activity confirm request , and (3) a possible loop involving activities send information and notify 
about change . we used cpn tools to simulate the process and gene rated 10,000 cases following the process in fig. 
3. in total, the event log has 117,172 events and 7 unique activities. the 10,000 cases correspond to 1159 process 
variants. the most frequent variant occurs 96 times. 30% of all variants occurred only once.  80% of the cases are 
described by 31% of the variants.  
 
(a) dfg generated by disco(b) dfg generated by celonis 
fig. 4. dfgs generated by disco and celonis without any filtering (i.e., the lowest possible values were used for the thresholds 𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣, 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎, 
and 𝜏𝜏𝑑𝑑𝑑𝑑). apart from layout differences, both tools produce the same process model. the diagrams are not intended to be readable, but aim to 
show the many loops. the dfgs are almost fully connected, not showing the underlying process structure.   wil m.p. van der aalst  / procedia computer science 00 ( 2019) 000 –000  7 
fig. 4 shows two dfgs create d for the event log just described. one dfg was generated by disco and the other 
dfg was generated by celonis. the two dfgs are identical apart from their layout. due to the different ways in which 
activities can be ordered, the  dfg has many edges and thes e edges form loops also among activities that are executed 
at most once.  activity pay with credit card and activity pay via bank transfer  form a length -two loop with confirm 
request  although none of these activities were executed multiple times for the same  case. to address the complexity  
and remove loops , one is tempted to simplify the dfg by increasing the thresholds 𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣, 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎, and  𝜏𝜏𝑑𝑑𝑑𝑑. increasing the 
value for threshold 𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣 is quite harmless because it is clear that the resulting process model only applies to the most 
frequent variants. however, also in the most frequent process variants  activities do not need to occur in a fixed order. 
in an attempt to remove the loops one may also increase the value for thresholds 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎 and 𝜏𝜏𝑑𝑑𝑑𝑑 leading to new problems.  
 
(a) dfg generated by disco(b) dfg generated by celonis
 
fig. 5. dfgs generated by disco and celonis using the highest possible threshold for  𝜏𝜏𝑑𝑑𝑑𝑑 allowed by the software while retaining all activities 
and variants (i.e., the lowest possible values are us ed for the thresholds 𝜏𝜏𝑣𝑣𝑣𝑣𝑣𝑣 and 𝜏𝜏𝑣𝑣𝑎𝑎𝑎𝑎). 
fig. 5 shows two additional dfgs generated by disco and celonis . to simpl ify the models as much as possible , 
we removed as many edges as allowed by the software. due to the different implementations of the dfg algorithm, 
the two resulting process models are different. moreover , both are misleading. at first glance, the  dfg generated by 
disco (fig. 5(a)) seems closest to the process model in fig. 3. however, the connection between confirm request  and 
notify about  change  does not make any sense. also , the routing logic (and/xor -split/join) is missing and the 
numbers are very  misleading. for example, send request  is 10,000 times followed by confirm request  and not  just 
2,530  times . the dfg generated by celonis (fig.  5(b)) has even more problems. the loops involving the two payment 
types are counter -intuitive. also , it is odd that payment seems to require activity confirm request  and activity send 
information  (whereas in the real process payments often precede these t wo activities) . it is also quite disturbing that 
two tools generate t wo completely different dfgs allowing for contradictory conclusions .  
the dfgs in fig. 5 can also be used to analyze the bottlenecks in the process. however, most of the traces cannot 
be replayed on the dfg and the reported  times  between two activities are conditional . for example, t he average time 
between send request  and confirm request  is 3.5 days (set in simulation model), but disco and celonis both report 1.5 
days (considering only 2, 530 of 10,000 cases). hence, one cannot rely on dfg -based performance diagnostics.  
fig. 6 shows that one can use other representations that do not have the problems just mentioned. the three process 
models in fig. 6 were discovered using three different pr ocess discovery techniques implemented in prom [1]. all 
three models are behaviorally equivalent  to the original process model that was used to generate the event log. 
comparing fig. 6 with the dfgs depicted in fig. 4 and fig. 5 illustrates the limited expressiveness of dfgs and the 
risks of simplifying dfgs using thresholds.   
 8 wil m.p. van der aalst/ procedia computer science 00 ( 2019) 000 –000 
(a) c-net generated by prom ’s heuristic miner (hm) (b) petri net generated by prom ’s alpha miner (am)
(c) process tree generated by prom ’s inductive miner (im)  
fig. 6. three process models created by three different mining algorithms implemented in prom  (hm, am, and im) and using three different 
representations (c -nets, petri nets, and process trees). all three models are behaviorally equivalent to the original process model in fig. 3.  
3. conclusion  
the p rocess mining  discipline is maturing. this is  not on ly  reflected by the uptake in industry , but also by  the 
success of the  inaugural international conference on process mining (icpm) in aachen in june 2019. icpm 2019 
attracted over 400 participants and the number of new scientific papers on process mining is increasing every year. 
however, most practitioners are still using very basic approaches generating simple directly -follows graphs (dfgs) . 
this paper showed that dfg s can be very misleading and that practitioners need to understand the way that process 
models are discovered. dfgs are often wrongly interpreted and can be generated in different ways leading to very 
different conclusions . also , bottleneck information may be deceiving, especially after model simplification.  
for more information, we refer to  [1]. in [2] we also discuss the role of using different abstractions  (dfgs being 
one of them). in [3] we discuss another topic highly relevant for process mining practitioners: the selection of an 
appropriate set of case notions.  often multiple case notio ns are intertwined.  in [5] various practical hints are given to 
deal with recurring problems such as data quality.  
acknowledgments  
we thank the alexander von humboldt (avh) stiftung for supporting our research.  
references  
[1] aalst, wil van der . proces s mining: data science in a ction. springer -verlag, berlin, 2016.  
[2] aalst, wil van der. process discovery from event data: relating models and logs through abstractions. wiley interdisciplinary reviews: data 
mining and knowledge discovery , 8(3) 2018.  
[3] aalst, wil van der. object -centric process mining: dealing with divergence and convergence in event d ata. proceedings of the 17th international 
conference on software engineering and formal methods  (sefm 2019), lncs, springer -verlag, berlin,  2019.  
[4] dijkstra , edsger. go to statement considered harmful. communications of the acm , 11(3):147 -148, 1968 .  
[5] fluxicon. process mining in p ractice, http://processminingbook.com , 2018.  