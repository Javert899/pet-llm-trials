interoperability in the prom framework
h.m.w. verbeek1, b.f. van dongen1, j. mendling2, and w.m.p. van der aalst1
1department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
fh.m.w.verbeek,b.f.v.dongen,w.m.p.v.d.aalst g@tm.tue.nl
2vienna university of economics and business administration
augasse 2-6, 1090 vienna, austria
jan.mendling@wu-wien.ac.at
abstract. originally the prom framework was developed as a platform for
process mining , i.e., extracting process models from event logs. however,
in recent years the scope of the framework has become broader and now
includes process veri¯cation, social network analysis, conformance checking,
veri¯cation based on temporal logic, etc. moreover, the framework supports a
wide variety of process models, e.g., petri nets, event-driven process chains
(epcs), heuristics nets, yawl models, etc. and is plug-able, i.e., people
can add plug-ins without changing the framework itself. (currently, there
are more than 70 plug-ins!) this makes the prom framework an interesting
environment for model interoperability . for example, people can take trans-
action log from ibm's websphere, transform it to mxml using prom import ,
discover a process model in terms of a heuristics net, automatically convert
the heuristics net to a petri net for analysis, load an epc de¯ned using the
aris toolset, verify the epc and convert it to a petri net, determine the
¯tness of the aris model given the transaction log from websphere, and
¯nally convert both models to a yawl speci¯cation that is exported. such
application scenarios are supported by prom and demonstrate true model
interoperability. in this paper, we present prom's interoperability capabili-
ties using a running example.
1 introduction
information technology has changed business processes within and between enter-
prises. more and more work processes are being conducted under the supervision of
information systems that are driven by process models [10]. examples are work°ow
management systems such as sta®ware, enterprise resource planning systems such
as sap and baan, and recently also web services composition languages such as
bpel4ws and bpml. unfortunately, there is little consensus on the language to
be used. existing languages are typically vendor or tool speci¯c and do not have
formal semantics. this has resulted in the \tower of babel of process languages":
a plethora of similar but subtly di®erent languages inhibiting e®ective process sup-
port. despite the many results in concurrency theory, it is not realistic to assume
that the situation will improve in the near future [15]. hence there is a need to be
able to convert models from one notation to another.
similarly, even within one organization there may be many models. for example,
an organization may have process models developed using aris, simulation models
developed using arena, and sta®ware models to con¯gure the work°ow system.
even if these models describe the same process, they focus on di®erent aspects and
use di®erent notations. therefore, it is useful to convert models from one notation
into the other.
given the existence of a wide variety of process modeling languages and the
fact that within organizations di®erent models (e.g., for simulation, for decisionmaking, for enactment, etc.) are being made for the same process, (process) model
interoperability is a relevant topic.
in this paper, the focus is on interoperability in the context of the prom (process
mining) framework [7]. prom has been developed as a platform for process mining
algorithms and tools. process mining aims at extracting information from event logs
to capture the business process as it is being executed. process mining is particularly
useful in situations where events are recorded but there is no system enforcing people
to work in a particular way. consider for example a hospital where the diagnosis
and treatment activities are recorded in the hospital information system, but where
health-care professionals determine the \care°ow". many process mining algorithms
have developed [3{6, 11{14] and currently a variety of these techniques are supported
by prom.
although the initial focus of prom was on process mining, over time the function-
ality of prom was extended to include other types of analysis, model conversions,
model comparison, etc. this was enabled by the plug-able architecture of prom (it
is possible to add new functionality without changing the framework itself) and the
fact that prom supported multiple modeling formalisms right from the start. by
applying prom in several case studies, we got a lot of practical experiences with
model interoperability. this paper reports on these experiences using the running
example depicted in figure 1. this example will be used to provide a guided tour
of the prom framework.
figure 1 shows an epc (event-driven process chain) [17, 19] describing a review
process. in principle each paper should be reviewed by three people. however, re-
viewers may be tardy resulting in time-outs. after a while the reviews are collected
and based on the result: a paper is rejected, a paper is accepted, or an additional
reviewer is invited. in the epc each activity is represented by a function (shown
as a rectangle), states in-between activities are events (shown as hexagons), and
to model the splitting and joining of °ows connectors are used (shown as circles).
events and functions alternate (even in the presence of connectors). connectors
may be split or join connectors and we distinguish between xor, or, and and
connectors. for example, in figure 1 the connector following function \invite re-
viewers complete" is an or-split connector. the last connector joining two °ows
after \accept" and \reject" is an xor-join connector.
the epc shown in figure 1 could have been imported into prom from aris [21],
aris ppm [16], or epc tools [18]. (note that each of these tools uses a di®erent
format.) moreover, the epc could have been discovered using some process mining
plug-in or be the result of some conversion (e.g., translating petri nets into epcs).
once a model such as the epc shown in figure 1 is in the prom framework, it
can be used as a starting point for analysis and model conversion. for example,
the epc could be translated to a petri net for analysis or to a yawl diagram for
enactment. in this paper, we show that such model interoperability possible. clearly,
information can be lost in the conversions. however, it is de¯nitely possible to
support mature forms of interoperability by following the rather pragmatic approach
used in prom.
the remainder of this paper is organized as follows. section 2 brie°y introduces
the prom framework. for a more detailed introduction we refer to [7]. section 3
shows an example of a process discovery, i.e., based on a log ¯le a petri net model
is constructed. section 4 takes this petri net, and analyses to what extent another
log corresponds to it. section 5 converts the petri net to both an epc and a yawl
model. section 6 exports the resulting yawl model to a yawl engine ¯les, and
shows that we can upload this ¯le into a running yawl engine where the process
can be enacted. section 7 concludes the paper.decide
completecollect reviews
completeget review 1
completeget review 2
complete
accept
completeinvite reviewers
complete
get review 3
complete
reject
completeget review x
completeinvite additional reviewer
complete
status change to accept
completestatus change to get review 3
complete
status change to reject
completex
status change to get review x
complete
status change to invite additional reviewer
completev
status change to collect reviews
complete
xx
xstatus change to decide
complete
pendstatus change to get review 2
completestatus change to get review 1
completevstatus change to invite reviewers
completefig. 1. the example review process model.
2 the prom framework
figure 2 shows an overview of the functionality the prom framework. the ¯gure
shows that prom can interact with a variety of existing systems, e.g., work°ow man-agement systems such as sta®ware, oracle bpel, eastman work°ow, websphere,
inconcert, flower, caramba, and yawl, simulation tools such as aris, epc
tools, yasper, and cpn tools, erp systems like peoplesoft and sap, analysis tools
such as agna, netminer, viscovery, alphaminer, and aris ppm. we have used
more than 20 systems to exchange process models and/or event logs with prom. as
figure 2 shows there are ways to directly import or export models or to load logs.
external
toolsmodels
mining plug-insimport plug-insexport plug-ins conversion plug-ins
analysis plug-ins mxml logsstaff-
waresap
in-
concertflow-
erepcs petri netsyawl
modelsheur.
netsmodel files
epcpetri
netyawl
modelheur.
net
visualizationsepc
tools
cpn
tools
aris
net-
miner
staff-
ware
sap
in-
concert
flow-
erevent
taskt
pfunctionprom
prom-
import
fig. 2. overview the prom framework.
as indicated in the introduction, prom was initially developed for process min-
ing, i.e., extracting models from logs. hence, we have developed a facility named
prom import to convert logs from di®erent systems (including organization spe-
ci¯c software) to our mxml format [8]. the mxml format provides a system-
independent format for storing event logs and in [8] we discuss the translation of
system-speci¯c logs (e.g., in a work°ow management system like sta®ware) to our
mxml format.
although prom is open source and people can change or extend the code, in
addition we o®er the so-called \plug-in" concept. plug-ins allow for the addition
of new functionality by adding a plug-in rather than modifying the source code.
without knowing all details of the framework, external parties can create (and have
created) their own plug-ins with ease. currently there are more than 70 plug-ins.
prom supports ¯ve kinds of plug-ins:
mining plug-ins typically take a log and produce a model,
import plug-ins typically import a model from ¯le, and possibly use a log to
identify the relevant objects in the model,
export plug-ins typically export a model to ¯le,conversion plug-ins typically convert one model into another, and
analysis plug-ins typically analyse a model, eventually in combination with a
log.
in the paper, we cannot show each of the more than 70 plug-ins in detail. instead
we focus on our running example (cf. figure 1).
3 mining
mining plug-ins like the alpha algorithm [4] and social network analyzer [2] extract
models from even logs. most mining plug-ins discover process models represented
in terms of petri nets, epcs, etc. however, some mining plug-ins also address other
perspectives such as the data or organizational perspective.
reject
completeget review x
completetime-out x
complete
invite additional reviewer
complete
decide
completecollect reviews
complete
time-out 3
completetime-out 1
completeget review 2
complete
invite reviewers
complete
get review 1
complete
accept
completetime-out 2
complete
get review 3
complete
fig. 3. the petri net model resulting from applying the alpha algorithm on some event
log.
fig. 4. a social network derived by prom based the same event log (smaller windows show
analysis results in netminer)starting point for our running example is a log containing events related to the
reviewing of papers. based on such events we can automatically crate a process
model as shown in figure 3. this model has been created using the ®-algorithm [4].
using the same log, we can also construct and analyze a social network as shown
in figure 4.
4 analysis
after obtaining a process model using process mining or by simply loading the
model from another tool, we can analyse it using one of the available analysis plug-
ins. because the process model is a petri net, we can only start a petri-net analysis
plug-in. the framework is capable of determining at runtime which plug-ins can
handle the current model, and it will only o®er plug-ins that can handle the current
model to the user. in addition to classical analysis tools such as a veri¯cation tool,
prom also o®er a conformance checker and an ltl checker as described below.
4.1 conformance checker
as an example, and to show how versatile prom is, we can analyse to what extent
another log ¯ts the mined review process model. for this reason, we open another
log, and start a conformance checker [20] plug-in and link it to the combination of
the process model and the log. figure 5 shows a view on the results. from these
results, we learn that (for example):
{the log does not ¯t the model entirely, as the ¯tness ¼0:89 (if the log would
¯t the model, the ¯tness would be 1).
{in 65 out of 100 cases, the process ended just before the \decide" task.
{in 29 out of the remaining 35 cases, the \decide" task was executed successfully.
{in the remaining 6 cases, an execution of the \decide" task had to be inserted
to allow logged successors (like \accept" and \reject") to execute.
fig. 5. the results of the conformance checker.4.2 ltl checker
another interesting analysis plug-in is the ltl-checker [1]. using this plug-in, we
can for example check whether in all cases the `four-eyes principle' was satis¯ed,
using the following ltl expressions:
subformula execute( p : person, a : activity ) :=
{is a specific activity executed by a specific person?}
<> ( (activity == a /\ person == p ) ) ;
formula four_eyes_principle(a1:activity,a2:activity) :=
{two specific activities should not be executed by the same person.}
forall[p:person |(!(execute(p,a1)) \/ !(execute(p,a2)))];
figure 6 shows that this is not the case for the tasks \get review 2" and \get review
3": \john" has done both reviews.
fig. 6. a violation of four-eyes principle is discovered using the prom ltl checker.
5 conversion
after we have analyzed the process model (a petri net), we can convert it into other
process models. for example, we can convert it into an epc or a yawl model.
however, before doing so, we declare the four \time-out" transitions in figure 3
to be invisible. figure 7 shows the result. the four \time-out" transitions did not
correspond to any real activities in the process, i.e., they were only there for routing
purposes (to bypass the \get review" tasks. when converting one model to another
we can use such information.
5.1 from a petri net to an epc
first, we convert the petri net shown in figure 7 into an epc. figure 1 shows
the resulting epc. of course, after converting the petri net to an epc, di®erentreject
completeget review x
completeinvite additional reviewer
complete
decide
completecollect reviews
completeget review 2
complete
invite reviewers
completeget review 1
complete
accept
complete
get review 3
completefig. 7. the petri net with the \time-out" transition made invisible.
plug-ins may be applied to the process model. for example, we could check the
correctness of the resulting epc using the plug-ins described in [9]. figure 8 shows
the result: the epc is trivially correct.
fig. 8. the veri¯cation result of the epc of figure 1
5.2 from a petri net to a yawl model
figure 9 shows the result from converting the petri net into a yawl model. note
that, in this case, the conversion plug-in is able to remove all routers (i.e., the
invisible transitions in figure 7) from the resulting process model. removing the
invisible transitions introduces an or-join and an or-split, moreover conditions
(corresponding to petri net places) are only introduced when needed. clearly, such
as \smart" translation is far from trivial. similarly, there are innovative conversions
from epcs to yawl and conversions from heuristics nets (used for genetic mining)
to petri nets.get review 1
complete
taskaccept
complete
taskget review 3
complete
taskreject
complete
taskget review x
complete
taskinvite additional reviewer
complete
task
decide
complete
taskcollect reviews
complete
taskget review 2
complete
task
invite reviewers
complete
taskp7true [0][default]true [0]
true [0][default]true [1]fig. 9. the mined review process model converted to a yawl model.
fig. 10. the yawl model uploaded to a yawl server.
fig. 11. a worklist for the uploaded yawl model.
6 export
of course, we can also export any model to ¯le. for example, we can export the
converted yawl model to a yawl engine ¯le, which can be uploaded right-away
by a yawl engine. figure 10 shows the result after we've uploaded the ¯le: a
yawl model with id \wfnet28922354" has been uploaded. note that most ¯elds
(speci¯cation id, speci¯cation name, documentation, . . . ) are generated by prom.
figure 11 shows a work list for the uploaded process. currently, three work items
are available in the work list: one for the task \invite reviewers", one for \decide",
and one for \collect reviews".
note that sometimes a model type in prom (e.g., petri net or epc) can have
multiple export and import formats. for example, prom supports three epc for-
mats: the aris markup language (aml) used by the aris toolset, the aris
graph format used by aris ppm, and the epc markup language (epml) used
by epc tools. for petri nets even four di®erent formats are supported: pnml,
tpn, pnk, and cpn tools.7 conclusions
this paper described the many models types and associated plug-ins that exist
inside the prom framework. although the initial focus of prom was on process
mining, the current functionality of the tool makes prom also interesting from a
model interoperability point of view. to demonstrate this, we have used a running
example. figure 12 provides an overview of the di®erent ways be have used prom
external
toolsmodels
mining plug-insimport plug-insexport plug-ins conversion plug-ins
analysis plug-insmxml logs
cpn
tools3epcs petri netsyawl
models
 algorithm3
ltl checkerpetri net
to epcpetri net to 
yawlyawl export
4.1model fi lesyawl
model6
visualizations6
cpn
toolsevent
taskt
pfunctionprom
prom-
importconf. checker4.2
4.1
4.25.25.2
5.1 5.16yawl
engine
1
3-6
5.1
epc verifier
fig. 12. an overview of the way we have used prom to discover, analyze, convert, import,
and export model related to the running example (number on edges refer to sections).
regarding this example. the numbers on the edges refer to the sections where the
edges were used. prior to the paper, we used cpn tools to generate both logs (the
one we used for the mining and the one we used for the analysis), and we used
prom import to convert the generated logs to the common mxml format. after
having mined one log for the review process model (see section 3), we analyzed it
in combination with the second log (see section 4) to check (i) to what extent the
process model and the other log ¯t (conformance checker) and (ii) whether the log
adheres to some additional properties one would want to hold for the review process
(ltl checker). next, we converted the discovered petri net into an epc (which
was used in section 1) and a yawl model (see section 5). finally, we exported the
yawl model (see section 6) and uploaded the resulting yawl engine ¯le into a
running yawl engine.
it is important to note that in the process described figure 12 we only partially
used the broad functionality of prom. at the moment, prom contains 10 import
plug-ins, 13 mining plug-ins, 19 analysis plug-ins, 9 conversion plug-ins, and 19 ex-
port plug-ins. it is noteworthy to mention, that some of these plug-ins have beenmade by other parties. although we could only show a fraction of the model inter-
operability o®ered by prom, figure 12 nicely demonstrates how versatile the prom
framework is, and how it can link di®erent external tools together.
the development and practical applications of prom and experiences in the
babel project [15] helped us to get a deeper understanding of model interoper-
ability. one of the important lessons is that it is fairly easy to convert one model
into another model if one is willing to accept some loss of information or precision.
for example, there exist many interpretations of the semantics of epcs (cf. the
\vicious circle" discussion in [19]). nevertheless, rough translations from epcs to
yawl and petri nets can be very useful because they are correct in most practical
cases. moreover, operations such as epc reduction and veri¯cation can be applied
without selecting one particular semantical interpretation [9]. therefore, we advo-
cate a pragmatic approach which is based on simply testing model interoperability
by implementing this in an environment like the prom framework and by applying
it to a wide variety of real-life models. for example, at this point in time we are
converting all epcs in the sap r/3 reference model (approximately 1200 process)
to yawl for the purpose of veri¯cation.
acknowledgements and relation to interop
we thank interop for supporting this work that has been conducted in the
context of the interop work package \domain ontologies for interoperability"
and the interop-sig \contract and webservices execution monitoring through
conformance testing". we also thank eit, stw, and nwo for supporting the de-
velopment of the prom framework, cf. www.processmining.org. the authors would
also like to thank ton weijters, ana karla alves de medeiros, anne rozinat, chris-
tian gä unter, minseok song, lijie wen, laura maruster, huub de beer, peter van
den brand, andriy nikolov, et al. for developing parts of prom.
references
1.w.m.p. van der aalst, h.t. de beer, and b.f. van dongen. process mining and
veri¯cation of properties: an approach based on temporal logic. in r. meersman
and z. tari et al., editors, on the move to meaningful internet systems 2005: coopis,
doa, and odbase: otm confederated international conferences, coopis, doa,
and odbase 2005 , volume 3760 of lecture notes in computer science , pages 130{
147. springer-verlag, berlin, 2005.
2.w.m.p. van der aalst, h.a. reijers, and m. song. discovering social networks from
event logs. computer supported cooperative work , 14(6):549{593, 2005.
3.w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. work°ow mining: a survey of issues and approaches. data and
knowledge engineering , 47(2):237{267, 2003.
4.w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining: dis-
covering process models from event logs. ieee transactions on knowledge and data
engineering , 16(9):1128{1142, 2004.
5.r. agrawal, d. gunopulos, and f. leymann. mining process models from work°ow
logs. in sixth international conference on extending database technology , pages
469{483, 1998.
6.j.e. cook and a.l. wolf. discovering models of software processes from event-based
data. acm transactions on software engineering and methodology , 7(3):215{249,
1998.
7.b. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters, and
w.m.p. van der aalst. the prom framework: a new era in process mining tool
support. in g. ciardo and p. darondeau, editors, application and theory of petri nets
2005, volume 3536 of lecture notes in computer science , pages 444{454. springer-
verlag, berlin, 2005.8.b.f. van dongen and w.m.p. van der aalst. a meta model for process mining data.
in j. casto and e. teniente, editors, proceedings of the caise'05 workshops (emoi-
interop workshop) , volume 2, pages 309{320. feup, porto, portugal, 2005.
9.b.f. van dongen, w.m.p. van der aalst, and h.m.w. verbeek. veri¯cation of epcs:
using reduction rules and petri nets. in o. pastor and j. falcao e cunha, edi-
tors, proceedings of the 17th conference on advanced information systems engineer-
ing (caise'05) , volume 3520 of lecture notes in computer science , pages 372{386.
springer-verlag, berlin, 2005.
10.m. dumas, w.m.p. van der aalst, and a.h.m. ter hofstede. process-aware infor-
mation systems: bridging people and software through process technology . wiley &
sons, 2005.
11.w. gaaloul, s. bhiri, and c. godart. discovering work°ow transactional behavior
from event-based log. in r. meersman, z. tari, w.m.p. van der aalst, c. bussler,
and a. gal et al., editors, on the move to meaningful internet systems 2004: coopis,
doa, and odbase: otm confederated international conferences, coopis, doa,
and odbase 2004 , volume 3290 of lecture notes in computer science , pages 3{18,
2004.
12.g. greco, a. guzzo, g. manco, and d. saccµ a. mining and reasoning on work°ows.
ieee transaction on knowledge and data engineering , 17(4):519{534, 2005.
13.d. grigori, f. casati, m. castellanos, u. dayal, m. sayal, and m.c. shan. business
process intelligence. computers in industry , 53(3):321{343, 2004.
14.j. herbst. a machine learning approach to work°ow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183{194. springer-verlag, berlin, 2000.
15.a.h.m. ter hofstede, m. dumas, and w.m.p. van der aalst. unraveling
the babel of process support: on the expressiveness and exchange of busi-
ness process execution languages (babel). project proposal arc discovery,
http://www.bpm.¯t.qut.edu.au/projects/babel/, 2003.
16.ids scheer. aris process performance manager (aris ppm): measure, analyze and
optimize your business process performance (whitepaper). ids scheer, saarbruecken,
gemany, http://www.ids-scheer.com, 2002.
17.g. keller and t. teufel. sap r/3 process oriented implementation . addison-wesley,
reading ma, 1998.
18.e. kindler. on the semantics of epcs: a framework for resolving the vicious circle.
in j. desel, b. pernici, and m. weske, editors, international conference on business
process management (bpm 2004) , volume 3080 of lecture notes in computer science ,
pages 82{97. springer-verlag, berlin, 2004.
19.e. kindler. on the semantics of epcs: a framework for resolving the vicious circle.
data and knowledge engineering , 56(1):23{40, 2006.
20.a. rozinat and w.m.p. van der aalst. conformance testing: measuring the fit and
appropriateness of event logs and process models. in c. bussler et al., editor, bpm
2005 workshops (workshop on business process intelligence) , volume 3812 of lecture
notes in computer science , pages 163{176. springer-verlag, berlin, 2006.
21.a.w. scheer. aris: business process modelling . springer-verlag, berlin, 2000.