multi-instance mining: discovering
synchronisation in artifact-centric processes
maikel l. van eck1;?, natalia sidorova1, and wil m.p. van der aalst2;1
1eindhoven university of technology, the netherlands
fm.l.v.eck,n.sidorova g@tue.nl
2rwth aachen university, germany
wvdaalst@pads.rwth-aachen.de
abstract. in complex systems one can often identify various entities
or artifacts. the lifecycles of these artifacts and the loosely coupled
interactions between them dene the system behavior. the analysis of
such artifact system behavior with traditional process discovery techniques
is often problematic due to the existence of many-to-many relationships
between artifacts, resulting in models that are dicult to understand and
statistics that are inaccurate. the aim of this work is to address these
issues and enable the calculation of statistics regarding the synchronisation
of behaviour between artifact instances. by using a petri net formalisation
with step sequence execution semantics to support true concurrency, we
create state-based artifact lifecycle models that support many-to-many
relations between artifacts. the approach has been implemented as an
interactive visualisation in prom and evaluated using real-life public data.
1 introduction
process discovery is the automated creation of process models that explain the
behaviour captured in event data [1]. over the years, various algorithms and
tools have been developed that support process discovery. however, traditional
process discovery techniques are not always suitable for every type of process.
in processes where we can identify artifacts , key entities whose lifecycles
and interactions dene the overall process [6], traditional process discovery
techniques often fail [4,7,8,11,12]. such artifact-centric processes form naturally
in business environments supported by information systems based on entity-
relationship models and databases [3], e.g. a procurement process with sales
orders, invoices and deliveries. they can also occur in complex environments, e.g.
a medical procedure with surgeons, nurses and medical systems. additionally,
software is often developed according to object-oriented programming paradigms,
so processes describing the behaviour of such software systems can also be
decomposed into artifacts representing the software objects and components.
the existence of many-to-many relationships [3,13] between process artifacts is
an important reason why traditional process discovery approaches have diculties
?this research was performed in the context of the impuls collaboration project of
eindhoven university of technology and philips: \mine your own body".fig. 1: partial lifecycle models showing the possible states and transitions between
states of three types of artifacts involved in a hospital process: doctors, nurses
and patients.
with artifact-centric processes [7,8]. these relationships make it dicult to identify
a unique process instance notion to group related events. enforcing a at grouping
leads to data convergence and divergence problems when calculating statistics
related to event occurrences and causal relations between events [8,13].
recently, artifact-centric process discovery approaches have been developed
that aim to discover models that are not aected by data convergence and
divergence issues [7,8]. however, these approaches have diculties identifying
synchronisation points and exible interactions between loosely coupled artifacts.
examples of synchronisation points in artifact lifecycles are milestone patterns,
e.g. the payment of all invoices before a delivery, and collaborative eorts, e.g.
several people meeting to create a project plan.
consider the example of a simplied artifact-centric hospital process involving
doctors, nurses and patients, all modelled as artifacts with their lifecycles shown
in fig. 1. this example process has several possible synchronisation points where
people interact: while preparing patients two nurses are needed to lift the patient
onto the operating table, and the patient can only start recovering if the surgeon
has nished performing surgery . however, the interaction is exible: the nurses
preparing a patient are not necessarily the same as those discharging the patient,
a doctor can be supervising multiple surgeries in a single day while doing other
things in between, and not every surgery has an additional doctor supervising.
such loosely coupled interactions are dicult to analyse using existing process
discovery techniques, e.g. because statistics and relations from the viewpoint of
individual doctors are not the same as from the viewpoint of individual patients.
therefore, we have developed an approach to provide accurate statistics and
insights in complex artifact-centric processes.in this paper we describe a process discovery approach suitable for the analysis
of synchronous artifact behaviour. this approach builds on ideas presented in [4]
for the discovery of state-based models for artifact-centric processes. the state
machine formalisation in that work supports the analysis of synchronous artifact
behaviour, but only for relations between pairs of artifact instances. we show
that by using a petri net formalisation with step sequence execution semantics
to support true concurrency, we can create state-based models that support
many-to-many relations between artifacts. this approach has been implemented
as a plug-in for the prom process mining framework and we have evaluated it
using the public datasets of the bpi challenge of 2017.
2 artifact system modelling
our goal is to analyse situations where the process of interest involves a number
of artifacts interacting. in such an artifact system context we distinguish between
artifact types , e.g. doctors or sales orders, and artifact instances , e.g. a specic
person working as a doctor. for a given artifact type there is a set of type states ,
i.e. the possible states that artifacts of this type can have. an artifact lifecycle
model is a graphical representation of an artifact type, its states and the possible
transitions between states. the conceptual representation of artifact systems is
shown as a class diagram in fig. 2a.
there exist various modelling languages to describe operational processes [1].
in this work we aim to explicitly analyse the states of artifacts and their inter-
actions. therefore, we model artifact lifecycles as state machines , building on
ideas from [4]. state machines are a subclass of petri nets with the property that
each transition has exactly one incoming and one outgoing edge, enabling choice
but not concurrency [9]. in a state machine artifact lifecycle model the places
represent the type states and a token represents the current state of an artifact
instance. to model the beginning and nishing of a lifecycle, we use interface
transitions [10] that represent connections to the environment. for simplicity, we
represent transitions in lifecycle models using only edges, as in fig. 1.
denition 1. astate machine artifact lifecycle model ais a petri net tuple
(tc;tb;tf;p;e ), wheretcis a set of transitions to change states, tbis a set
of input interface transitions, tfis a set of output interface transitions, pis a
nite set of places, e((tc[tb)p)[(p(tc[tf))is a set of directed edges
between transitions and places, with 8t2(tc[tb) :fp2pj(t;p)2eg= 1,
and8t2(tc[tf) :fp2pj(p;t)2eg= 1.
we discover artifact lifecycle models based on process execution data con-
taining state instances , i.e. moments in time where a specic artifact instance
obtains a certain state. in fig. 2b each row is a state instance updating the state
of a specic instance of an artifact in the example hospital process. a mapping
of instances to artifact types for this execution data is given in fig. 2c.(a)
 (b)
 (c)
fig. 2: (a) class diagram providing a conceptual representation of an artifact
system (b) a list of state instances from execution data of the artifact-centric
example process (c) a mapping of artifact instances to types
denition 2. a log of process execution datalis a tuple (s;i;a;s;t;itype),
where sis a set of state instances, iis a set of artifact instances, ais a set of
artifact types, sis a set of type states, tis a time domain, and itype :i!ais
a mapping from instances to types.
each state instance &2sis a tuple (;s;;i ), where2i is the primary
artifact instance that obtains state s2sat time2t, andii is the set
of secondary artifact instances for which it is relevant. the end time of &is an
attribute derived by ordering all state instances for by their timestamp. we
assume that802i;02t:f(;s;;i )2sj=0^=0g1.
each state instance can be relevant for a number of secondary artifact in-
stances, which means it can be used to determine synchronisation points or
calculate interaction statistics from the perspective of the secondary artifact
lifecycles. as shown in fig. 2, performing surgery involves a patient and nurses,
so this state instance can be used to determine per nurse what doctors they
work with and for how long. on the other hand, writing reports only concerns
one doctor, so it is not relevant from the perspective of other artifact instances.
note that this relation is not necessarily symmetric, e.g. the patient s. hall is
waiting while doctor d. jones is planning the surgery, but the waiting time is
not considered relevant for the doctor's artifact lifecycle.
by modelling artifact lifecycles as state machines there can be no concurrency
in the state of a single artifact instance. however, in the context of an artifact
system there are multiple interacting artifact instances that each concurrently
have a certain state. therefore, we dene a composite state machine (csm)
petri net modelling the behaviour of an artifact system as the composition of the
lifecycle models of a number of artifact types. tokens in this petri net represent
artifact instance states, so the combined state of the artifact system is the total
marking of the petri net. the sets of transitions, places, and edges of the csm
are the union of the respective sets of the individual artifact type state machines.fig. 3: the overall approach for multi-instance mining of csms.
denition 3. acomposite state machine mis a petri net representing the
product of a set of nstate machinesa1;:::;an.m= (tc
m;tb
m;tf
m;pm;em),
wheretc
m=s
i2f1;:::;ngtc
iis the set of transitions representing possible state
changes,tb
m=s
i2f1;:::;ngtb
iis the set of transitions where lifecycles begin, tf
m=s
i2f1;:::;ngtf
iis the set of transitions where lifecycles nish, pm=s
i2f1;:::;ngpi
is the set of places, em=s
i2f1;:::;ngeiis the set of edges,
there is no explicit modelling of synchronisation points in the csm denition
above. therefore, we model synchronous behaviour by adopting step execution
semantics [2,10] instead of the common atomic ring of transitions. intuitively, a
nite multiset of transitions, a step, may re if the artifact instances represented
by petri net tokens can change their state at the same moment in time.
denition 4. given a petri net with transitions t, placesp, edgeseand a
current state s(or marking) as a multiset of tokens s2np, then a stepf2nt
is reable i8p2p:p
ft2tj(p;t)2egf(t)s(p), i.e. all input places contain
enough tokens. firing the multiset of transitions in step fresults in the state s0
where8p2p:s0(p) =s(p) p
ft2tj(p;t)2egf(t) +p
ft2tj(t;p)2egf(t)
the use of step execution semantics results in petri net behaviour with true
concurrency, instead of interleaving of transitions [2]. this means that artifact
instances can change states independently from each other, but simultaneous
state changes can also be analysed to nd synchronisation points.
3 multi-instance mining approach
an overview of the process discovery approach to enable the multi-instance
mining of composite state machines (csms) is shown in fig. 3.
3.1 state instance creation
the executions of many processes are recorded in the form of event logs [1]. to use
these logs in our approach they need to be transformed into the format describedin denition 2. this involves choosing a state representation and determining
the set of artifact instances for which a state instance is relevant.
for a given log of process event traces, every position in a trace corresponds
to a state of the process [1]. a state representation is a function that, given a
sequence of events and a number, produces the process state after the specied
number of events in the sequence have occurred. examples of state representation
functions are e.g. the last event executed, the set of events executed, or the
full ordered list of events executed. we assume that similar artifact type state
representations have been chosen as a preprocessing step, to transform sequences
of artifact instance lifecycle events into sequences of state instances.
by linking related artifact instances it is possible to determine the set of
relevant secondary artifact instances for a state instance. such information,
relating e.g. doctors to patients or sales orders to deliveries, can be found in
relational databases in enterprise settings [3], in erp systems [8] or in the event
log itself [11]. using domain knowledge, some state instances may get a dierent
set of relevant instances, e.g. they only aect the primary artifact instance.
3.2 composite state machine creation
given process execution data, we create a time-ordered sequence per artifact
instance of all state instances where this artifact is the primary artifact instance.
this sequence represents the lifecycle of the given artifact instance.
individual state machine lifecycle models can be discovered per artifact type
by grouping all sequences from instances of the same type and applying the
discovery approach described in [4]. the creation of the csm describing the
system is the union of these models, as described in denition 3.
3.3 multi-instance mining statistics
we use the notion of a primary instance to group related state instances and
calculate accurate sojourn time and co-occurrence statistics in the presence of
many-to-many relations. for each artifact instance, we create a time-ordered
sequence of state instances where the artifact is either the primary or a secondary
instance. that is, given execution data l= (s;i;a;s;t;itype) and instance
02iwe create a sequence from f(;s;;i )2sj0=_02ig. state instances
with the same timestamp represent co-occurring transitions, i.e. they are part of
a step in the execution of the mined csm. for example, given the data in fig. 2b,
for artifact instance s. hall there is a transition to in surgery co-occurring with
a transition from d. jones to performing surgery. this enables us to calculate
conditional co-occurrence statistics similar to those presented in [5], which we map
to states and transitions in the lifecycle model of the primary artifact instance.
when the primary instance transitions to a new state, the related instances
have a certain state depending on their last known state instance relevant for
the primary instance. together with the related transitions occurring in the
same step, this forms a partial view of the system state that we consider as the
changing marking of the csm co-occurring with the primary transition. fromthis, we calculate probability estimates conditional on the primary transition:
the probability of observing a specic marking or multiset of transitions given
the execution of the primary transition, and the probability of having a specic
number of instances in a given state when the primary transition is executed.
similarly, during a system step of related instances not including the primary
artifact instance there is a changing partial system marking. from this, we
calculate probability estimates for the time spent in certain states co-occurring
with the current state of the primary artifact. for example, if the surgery in
fig. 2b had one nurse present for the entire procedure and one nurse present only
for the rst half hour then based on this the estimated conditional probability
for other patients in surgery would be that 25% of the time is spent with two
nurses in the state assisting surgeon and 75% with one nurse. if the second nurse
was e.g. preparing another patient during the later part of the surgery then this
is not relevant from the point of view of the current primary patient instance. in
this way, the presence of many-to-many relations does not aect the calculation
of the conditional co-occurrence statistics.
4 implementation and evaluation
in this section we discuss the implementation and evaluation of the multi-instance
miner, a plug-in1in the open-source process mining framework prom.
4.1 multi-instance miner
a screenshot of the interactive visualisation of the multi-instance miner is shown
in fig. 4. for each artifact type, a lifecycle model is shown with its type states
and transitions. the user can click on states and transitions, which cause the
tool to highlight the other states and transitions that can co-occur with the
selected element. moving the mouse to one of the highlighted elements creates
a pop-up window that shows how often or for what duration the co-occurrence
was observed. below the main visualisation is a table that provides a detailed
list of the statistics mentioned in sect. 3.3. the user can select what type of
co-occurrence relation they want to investigate and lter the results.
4.2 case study
the multi-instance miner has been used to analyse the bpi challenge 2017 data
set [14]. this real-life event log concerns a loan application process at a dutch
nancial institute.
the event log contains information on the status and the activities performed
for all loan applications led in a single year at the institute. there are 31509
applications, with between 1 and 10 oers related to each application for a
1contained in the miminer package of the prom 6 nightly build, available at
http://www.promtools.org/ .fig. 4: the interactive visualisation of a discovered csm. the selected state is
circled in red and its co-occurring states and transitions are marked in orange.
total of 42995 oers in the dataset. we ltered out 98 ongoing applications that
did not have a nal application status and their related oers and workow
activities. there are 26 distinct activity types, divided into three categories:
application state changes (a), oer state changes (o), and workow activities
(w). we consider each category as an artifact type, with application and oer
ids referring to specic instances.
the three lifecycle models are shown in fig. 4. the application lifecycle
includes its creation, complete delivery of the required information, a validation
and one of three nal results: accepted and pending payment, denied by the
institute or cancelled by the customer. the oer lifecycle involves their creation,
the sending to and return from the customer, and equivalent nal results as for
the application. the workow lifecycle concerns the manual activities performed,
so it represents the state of the employee currently working on the application.
these activities are changes made to the applications and oers and calls made
to contact the customer e.g. regarding missing les. the application and oer
models are simple, with the application model containing only a single cycle and
the oer model being acyclic. the workow model is more complex, as workow
activities can be suspended and resumed multiple times before completion.
explorative analysis revealed that there are many synchronisation points
between the dierent artifacts in this process, which is observable by looking at
transitions that are executed in step at the same point in time. for example,
fig. 5 shows the transitions that can co-occur with a transition to the oaccepted
state in an oer instance. as expected, if the customer accepts the oer then the
application has a simultaneous transition to the apending state from either the
aincomplete (28:7%) or the avalidating (71:3%) state. however, there are also
5797 transitions from related oers that are cancelled at the same time. furtherfig. 5: the transitions that co-occur with a transition to oaccepted .
(a)
 (b)
fig. 6: (a) sojourn time of applications in state acomplete (b) sojourn time of
the workow in state wvalidate application+suspend
study showed this corresponds to the situation where the customer asked for more
than one oer. a logical follow-up analysis would be to check if there are oer
characteristics that lead customers to accept one oer over another, in order to
potentially make the process more ecient. this shows that explorative analysis
can lead to new research questions and possibly ideas for process improvement.
during the challenge, the company was also asking analysts to answer several
dierent business-relevant questions. two questions we can answer with our
tool that they asked were: (1) what are the throughput times per part of the
process? and (2) how many customers ask more than one oer, either in a single
conversation or subsequently, and how does this aect conversion?
splitting the log into sequences of state instances for dierent artifact types
separates the events related to employee activities from events related to input
by the applicant. as a result, we can determine throughput times that show the
dierence between the time spent in the company's systems waiting for processing
by an employee and the time spent waiting on the applicant. for example, in
fig. 6a there are on average 15 days between the point where an oer is rst
sent to the customer and the return of a response. by contrast, in fig. 6b there
is on average 1 day and 3 hours between a suspension of the validation due to
incomplete les and the rst subsequent action e.g. to contact the customer.table 1: a count of applications by the number of related oers.
oers 1 2 3 45678910
count 22900 6549 1337 43812529161232
fig. 7: a partial view of the state markings that co-occur with a transition to
ocreated , showing that applications had multiple oers created simultaneously.
customers can ask for more than one oer, sometimes in the same conversation
and sometimes as a result of follow-up calls by the institute. a count of the number
ofocreated state instances per application is shown in tab. 1. to determine
whether customers ask multiple oers in one conversation or sequentially, we can
look at the state marking for all related artifact instances at the time of an oer
creation. this view is given in fig. 7, showing e.g. that there are 11464 oer
creations while the related application is in state aaccepted and the related
workow is in state wcomplete application+start . from this, we can calculate
that given a total of 31411 applications there are at most 3602 applications
(31411 11464 9244 5441 1660) where the customer initially asked for more
than one oer. this information can also be used to determine the conditions
under which a subsequent oer is created, e.g. 690 oers were created after the
initial oer was returned with insucient information and 641 oers were created
after two initial oers and a follow-up call.
using the same view it is possible to calculate how the presence of multiple
oers and their current state aect the conversion of the application. however,
it is dicult to dierentiate between oers made simultaneously and those
that are created sequentially at later points in the process, as this requires a
state abstraction that takes creation history into account. alternatively, the
information on the simultaneous co-occurrences of the oer creation transitions
may be used to split the log into applications with simultaneous and applications
with sequential oer creations.
5 related work
as mentioned in the introduction, several discovery approaches have been devel-
oped that can be applied in the context of artifact-centric processes.
initially, work focussed on enabling the discovery of lifecycles of individual
artifact types [12]. these techniques provided lifecycle models and information on
which specic artifact instances are related. they did not discover interaction orsynchronisation between artifact instances, which is needed to determine how the
lifecycle progression of one instance inuences the lifecycle of another instance.
in [11] work was presented to discover synchronisation conditions between
artifacts. these synchronisation conditions specify the number of instances of a
given type that need to be in a specic state to enable a transition to a specic
state for a related instance of another type. as such, the synchronisation points
are only discovered for pairs of artifact types, the technique produces no lifecycle
models, and the synchronisation conditions do not cover simultaneous state
changes in dierent artifact types.
in [8] an approach was presented to discover causal relations between events
for artifact instances related through many-to-many relations from e.g. erp
tables. the resulting lifecylce models show clear causal relations between events
from dierent artifact types, but in settings with loosely coupled artifacts this can
result in graphical models with a large number of arcs between the models. this
approach does not identify the synchronous execution of activities in dierent
artifacts and unfortunately there is no publicly available implementation.
in [4] we presented a state-based approach for the discovery of artifact
interactions. however, the artifact interactions were limited to pairs of artifact
instances and only suitable for processes with one-to-one relations between artifact
types instead of one-to-many or many-to-many relationships.
in [7] a technique is presented to discover declare-like constraints with cardi-
nalities on the number of artifact instances involved. this approach supports the
calculation of statistics unaected by convergence or divergence problems and
shows many-to-many relations between instances. however, for real-life processes
the number of constraints discovered is large and not easy to explore.
6 conclusion
this paper presented a multi-instance mining approach to discover lifecycle models
and their interactions in the context of artifact-centric processes with many-to-
many relations between artifact types. in this approach state machine petri net
lifecycle models are discovered from process execution data and combined into a
composite state machine with true concurrency support through step sequence
execution semantics. for the calculation of co-occurrence statistics that identify
synchronisation points we used the notion of a primary artifact instance to map
state instances onto the lifecycle models.
the developed multi-instance miner supports interactive exploration that
allows the user to point at a lifecycle state or transition and see what can
happen with a certain estimated probability while an artifact instance is in the
selected state or executing the specied transition. it also provides a list of all
co-occurrence statistics for more detailed analysis. during the evaluation on the
public bpi challenge 2017 data we were able to answer business-relevant analysis
questions and provide starting points for more detailed investigations.
the correlation based statistics are more suitable for loosely coupled artifacts
than strict interaction rules, but the list of correlations can grow large. therefore,a major challenge remains with visualising the co-occurrence results, e.g. by
highlighting the most important results in the models. we also aim to use the
approach to analyse the artifact-centric bpi challenge 2018 data.
references
1.van der aalst, w.m.p.: process mining - data science in action, second edition.
springer (2016)
2.best, e., devillers, r.r.: sequential and concurrent behaviour in petri net theory.
theor. comput. sci. 55(1), 87{136 (1987)
3.chen, p.p.: the entity-relationship model - toward a unied view of data. acm
trans. database syst. 1(1), 9{36 (1976)
4.van eck, m.l., sidorova, n., van der aalst, w.m.p.: discovering and exploring state-
based models for multi-perspective processes. in: business process management -
14th international conference, bpm 2016, rio de janeiro, brazil, september 18-22,
2016. proceedings. pp. 142{157 (2016)
5.van eck, m.l., sidorova, n., van der aalst, w.m.p.: guided interaction exploration
in artifact-centric process models. in: 19th ieee conference on business informatics,
cbi 2017, thessaloniki, greece, july 24-27, 2017, volume 1: conference papers.
pp. 109{118 (2017)
6.hull, r., damaggio, e., de masellis, r., fournier, f., gupta, m., iii, f.f.t.h.,
hobson, s., linehan, m.h., maradugu, s., nigam, a., sukaviriya, p.n., vacul n,
r.: business artifacts with guard-stage-milestone lifecycles: managing artifact inter-
actions with conditions and events. in: proceedings of the fifth acm international
conference on distributed event-based systems, debs 2011, new york, ny, usa,
july 11-15, 2011. pp. 51{62 (2011)
7.li, g., de carvalho, r.m., van der aalst, w.m.p.: automatic discovery of object-
centric behavioral constraint models. in: business information systems - 20th
international conference, bis 2017, poznan, poland, june 28-30, 2017, proceedings.
pp. 43{58 (2017)
8.lu, x., nagelkerke, m., van de wiel, d., fahland, d.: discovering interacting
artifacts from erp systems. ieee trans. services computing 8(6), 861{873 (2015)
9.murata, t.: petri nets: properties, analysis and applications. proceedings of the
ieee 77(4), 541{580 (1989)
10.nielsen, m., priese, l., sassone, v.: characterizing behavioural congruences for
petri nets. in: concur '95: concurrency theory, 6th international conference,
philadelphia, pa, usa, august 21-24, 1995, proceedings. pp. 175{189 (1995)
11.popova, v., dumas, m.: discovering unbounded synchronization conditions in
artifact-centric process models. in: business process management workshops -
bpm 2013 international workshops, beijing, china, august 26, 2013, revised
papers. pp. 28{40 (2013)
12.popova, v., fahland, d., dumas, m.: artifact lifecycle discovery. int. j. cooperative
inf. syst. 24(1) (2015)
13.raichelson, l., soer, p., verbeek, e.: merging event logs: combining granularity
levels for process ow analysis. inf. syst. 71, 211{227 (2017)
14.van dongen, b.: bpi challenge 2017 (2017), https://data.4tu.nl/repository/
uuid:5f3067df-f10b-45da-b98b-86ae4c7a310b