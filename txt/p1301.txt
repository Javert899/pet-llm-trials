software impacts 14 (2022) 100438
contents lists available at sciencedirect
software impacts
journal homepage: www.journals.elsevier.com/software-impacts
original software publication
ocpa: a python library for object-centric process analysis
jan niklas adams∗, gyunam park, wil m.p. van der aalst
process and data science, rwth aachen university, ahornstraße 55, 52074 aachen, germany
a r t i c l e i n f o
keywords:
process mining
object-centric process mining
object-centric petri net
predictive process monitoring
conformance checking
performance analysisa b s t r a c t
ocpais a python library supporting object-centric process mining. traditional process mining generates insights
for one single process. however, many real-life processes are composed of multiple interacting subprocesses
and events may involve multiple objects. object-centric process mining provides techniques for analyzing
multiple interacting processes by generalizing process mining techniques. ocpacontains algorithms for object-
centric event log management, process discovery, conformance checking, enhancement, and predictive process
monitoring. ocpa is easily integrable with existing solutions as it supports existing object-centric event log
standards, provides extensive documentation, and is installable through the python package installer.
code metadata
current code version 1.0.0
permanent link to code/repository used for this code version https://github.com/softwareimpacts/simpac-2022-211
permanent link to reproducible capsule https://codeocean.com/capsule/7687700/tree/v1
legal code license gpl-3.0
code versioning system used git
software code languages, tools, and services used python
compilation requirements, operating environments & dependencies pandas, numpy, pm4py, networkx, graphviz
if available link to developer documentation/manual https://ocpa.readthedocs.io/
support email for questions niklas.adams@pads.rwth-aachen.de
1. introduction
process mining offers techniques and algorithms to analyze pro-
cesses based on the event data these processes generated. in the tra-
ditional view, each execution of the process generates a sequence of
events describing conducted activities and associated data. an event
log collects event sequences of different process executions. starting
from the event log, one can uncover different insights typically grouped
into four areas: (1)process discovery: learning a model that covers
the possible sequences of activities in the event log [1]. (2)confor-
mance checking: testing whether the event sequences conform to given
rules or exhibit deviations [2]. (3)process enhancement: equipping
a process model with additional information about performance, de-
cisions, or resources [3]. (4)predictive process monitoring: extracting
features from the event log and learning predictive models for different
targets [4].
the code (and data) in this article has been certified as reproducible by code ocean: (https://codeocean.com/). more information on the reproducibility
badge initiative is available at https://www.elsevier.com/physical-sciences-and-engineering/computer-science/journals.
∗corresponding author.
e-mail addresses: niklas.adams@pads.rwth-aachen.de (j.n. adams), gnpark@pads.rwth-aachen.de (g. park), wvdaalst@pads.rwth-aachen.de
(w.m.p. van der aalst).one central assumption underlying all of the developed techniques
is the following: one execution of the process is a sequence of events.
however, this assumption does not hold in many real-life situations:
for example, when analyzing multiple processes and their interactions
or a process composed of multiple subprocesses [5]. one example of
such a process encountered in reality is a production process where
many individual parts are produced in subprocesses and assembled
later. another example is an erp system supporting business processes
where one process execution consists of multiple documents associated
with different actions. in these situations, each subprocess produces
one sequence of events. since events are shared between sequences, the
behavior takes the form of a graph rather than a sequence. currently,
the only way to apply process mining techniques in such situations
isflattening , i.e., enforcing a sequentiality for events. flattening intro-
duces problems of duplicated events ,incorrect dependency constraints , and
disappearing events [6–8].
https://doi.org/10.1016/j.simpa.2022.100438
received 26 september 2022; received in revised form 15 october 2022; accepted 26 october 2022
2665-9638/ ©2022 the author(s). published by elsevier b.v. this is an open access article under the cc by license
(http://creativecommons.org/licenses/by/4.0/).j.n. adams, g. park and w.m.p. van der aalst software impacts 14 (2022) 100438
fig. 1. overview for the functionalities contained in ocpa.
object-centric process mining addresses the limitations of traditional
process mining techniques by removing the assumption of a sequential
event structure and allowing for a more general, graph-based event
structure encountered in reality. specifically, an event can be related
to multiple objects . each object represents the instantiation of a sub-
process. since one event can be associated with multiple objects, it can
represent an interaction point between subprocesses.
recently, techniques to solve the four process mining tasks for
object-centric processes have been introduced: object-centric process
discovery [9], object-centric conformance checking [10], object-centric
performance analysis [11], and object-centric predictive process mon-
itoring [12]. so far, no unified platform for object-centric process
mining exists. ocpabundles all the proposed techniques into one single
comprehensive python library (cf. fig. 1). this library has two main
implications: first, enabling practitioners to quickly deploy object-
centric process mining to analyze federated processes or complex sys-
tems composed of multiple subprocesses. second, equipping researchers
with fully implemented state-of-the-art techniques that may be used to
propose new and advance existing techniques.
in the remainder of this paper, we will first introduce an overview of
ocpa’s functionality and, subsequently, discuss its foundation in research
and impact on future research and practical deployment.
2. software overview
ocpa is provided as a github repository1and through the package
installer pip.2we provide the core code framework accompanied by
example data and example scripts for the integration of our library.
extensive documentation can be found on readthedocs .3the docu-
mentation provides a set of examples for each algorithm. the core
code framework is split into an event log management, algorithm, and
visualization submodule.
2.1. event log management submodule
the event log management submodule contains all functionality
to store and access object-centric event data. we allow the import of
object-centric event logs in one of three formats: csv, jsonocel, and
xmlocel4. when importing a csv file, information on the column
mapping must be provided. the data contained in the object-centric
event log can be accessed through the ocel class, forming the central
1https://github.com/ocpm/ocpa
2https://pypi.org/project/pip/
3https://ocpa.readthedocs.io
4both have been defined in the ocel standard www.ocel-standard.org.data storage object of this library. a user can access event and object
values, as well as trigger more elaborate derivatives of the event log,
such as process executions, variants, and various statistics on these
objects. to enable to intercompatability with other tools ocpasupports
the export of an ocel object to jsonocel format. users can use this
functionality to convert csv to jsonocel.
2.2. algorithm submodule
the algorithm submodule comprises the main algorithms and tech-
niques introduced in object-centric process mining over the last years.
starting from an object-centric event log, different algorithms of object-
centric process discovery, conformance checking, process enhance-
ment, and predictive monitoring are available.
object-centric process discovery. ocpa enables the investigation of the
control-flow in object-centric processes by two ways: process discovery
andvariant analysis . first, process models can be discovered as object-
centric petri nets following the general approach by van der aalst and
berti [9]. second, the user can discover control-flow variants following
the algorithm of adams et al. [13]. in contrast to activity sequences in
traditional process mining, each variant is a directed, acyclic graph of
activities.
object-centric conformance checking. two main conformance checking
techniques are supported by ocpa:evaluation metrics and constraint
monitoring . evaluation metrics include precision and fitness of object-
centric petri nets with respect to object-centric event logs [10]. fitness
is the share of replayable events, while precision quantifies the share
of possible model behavior contained in the event log. constraint
monitoring evaluates the violation of user-defined business constraints
by analyzing object-centric event logs [14]. such constraints include
control-flow constraints (e.g., activity place order is directly followed
bysend invoice for an object order ), object involvement constraints
(e.g., the execution of activity clear invoice should involve an order
along with an invoice and goods receipt), and performance constraints
(e.g., the synchronization time of clear invoice , i.e., the time for prepar-
ing all orders, invoices, and goods receipts, should be less than three
days).
object-centric process enhancement. ocpa supports object-centric perfor-
mance analysis of both temporal and non-temporal performance mea-
sures. the temporal performance measures include object-centric
performance measures ( flow time ,synchronization time ,pooling time ,
and lagging time ) as well as traditional performance measures ( waiting
time,service time , and sojourn time ). to compute such measures for
each activity, we take the model-based approach presented in [11].
2j.n. adams, g. park and w.m.p. van der aalst software impacts 14 (2022) 100438
the approach discovers an object-centric petri net from an object-
centric event log, replays the log in the model, and computes the
aforementioned performance measures. the non-temporal performance
measures include object count ,object type count , etc.
object-centric predictive process monitoring. ocpa provides a foundation
for object-centric predictive process monitoring through three main
components: feature extraction, preprocessing, and feature encoding.
feature extraction and encoding have been introduced in [12]. features
are extracted based on the graph structure of the object-centric event
log, i.e., the feature values accurately depict reality (for example,
while feature extraction based on a flat event log provides only one
value for a preceding activity, object-centric feature extraction provides
one value for each object’s preceding activity). extracted features can
be preprocessed by normalizing and splitting the data into training
and testing sets. these can be encoded in three ways: as a table,
sequences, or graphs. all encodings maintain a different level of the
object-centric event data’s structure, whereas graph encoding preserves
the most structural information. the encodings can be used for different
predictive models, e.g., regression (table), lstm [15] (sequences), or
graph neural networks [16] (graphs).
2.3. visualization submodule
the visualization submodule offers support for the visualization of
different objects in the library. the visualization of object-centric petri
nets is supported through the graphviz library.5next to the layouting
through graphviz, opcaalso offers the export and storage of petri net
visualizations.
variant graphs can become complex, including activity labels, ob-
ject types, and objects. therefore, dedicated variant visualization tech-
niques have been proposed [13]. ocpaincludes the proposed layouting
algorithm for variants. the algorithm provides a two-dimensional lay-
outing of activity labels and colors that is an extension of traditional
variant visualization.
3. impact overview
ocpasummarizes several contributions of object-centric process min-
ing, enabling researchers and practitioners to pursue new research
questions and applications.
research foundations of ocpa. the main functionality included in ocpa
has been introduced in research over the last two years. starting
from object-centric event logs and their management [6,17], these
contributions cover the discovery of object-centric petri nets [9] and
variants [13,18], object-centric evaluation metrics [10] and constraint
monitoring [14], object-centric performance analysis [11], and object-
centric feature extraction and encoding [12]. while ocpa implements
the functionalities of the previously listed research papers, other re-
search contributions are also partly supported in ocpa. the philosophy
of graph-structured event data which is present in [5,7,8] forms the
core philosophy in ocpa. it also easily integrates into proposed solutions
for extracting and creating object-centric event logs from information
systems or traditional event logs [19,20].
impact of ocpa to current research. ocpa delivers functionalities that
consider the graph-based structure of object-centric event data for all
process mining tasks. therefore, it enables the pursuit of new research
questions by translating traditional process mining techniques into the
object-centric setting by applying a graph setting. with an existing
event log management, process execution extraction, process discovery,
model quality metrics, performance analysis, and feature extraction and
encoding, many new techniques can be explored. these include, but are
not limited to: how to cluster object-centric event data? which models
5https://graphviz.org/are best suited for object-centric predictive process monitoring? what
are alternative conformance checking techniques?
ocpa itself has already functioned as a foundation for the develop-
ment of several tools, e.g., oc 𝜋[18], opera [11], and dtween [21].
these tools provide generalized use cases for analyzing any object-
centric process, either w.r.t. frequent executions, performance issues, or
reacting to violated constraints. therefore, ocpa’s role in object-centric
process mining is similar to pm4py’s [22] role in traditional process
mining: both function as a basis for tool developments (e.g., pmtk6
is developed using pm4py) and enabling the quick implementation of
new algorithms in an existing environment.
impact of ocpa to applied process mining. process mining has been ap-
plied to analyzing business processes in various industry segments [23]:
finance (e.g., banks and insurance companies) [24], manufacturing
(e.g., pharmaceuticals and automobile companies) [25], and service
(e.g., healthcare, government, and telecommunication) [26]. process
mining application has been accompanied by the tremendous com-
mercial success of process mining vendors like celonis ,minit (now
microsoft), signavio (now sap), or myinvenio (now ibm).
object-centricity is an omnipresent property in real-life business
processes [27]. thus, various object-centric process mining techniques
supported by ocpa can support the application of process mining in
different industry segments. one can, e.g., analyze the ensemble of pro-
cesses interacting throughout the end-to-end order processing within
companies [28]. furthermore, object-centric process mining can be
applied to production processes where different production components
are represented by objects [29,30]. leading vendors already prepare
support for object-centric event data, e.g., celonis (with the recently
introduced processsphere) or mehrwerk process mining .
4. conclusion
this paper introduced ocpa. this python library offers extensive
support for object-centric event data without converting them to tradi-
tional event data. hence, ocpaoffers more accurate process analytics for
object-centric event data. the comprehensive support of all four process
mining tasks and ocpa’s easy integrability through python enables the
pursuit of many future research questions and process analyses.
funding
we thank the alexander von humboldt (avh) stiftung for support-
ing our research (grant no. 1191945).
declaration of competing interest
the authors declare that they have no known competing finan-
cial interests or personal relationships that could have appeared to
influence the work reported in this paper.
references
[1] adriano augusto, raffaele conforti, marlon dumas, marcello la rosa, fab-
rizio maria maggi, andrea marrella, massimo mecella, allar soo, automated
discovery of process models from event logs: review and benchmark, ieee trans.
knowl. data eng. 31 (4) (2019) 686–705, http://dx.doi.org/10.1109/tkde.2018.
2841877.
[2] josep carmona, boudewijn f. van dongen, andreas solti, matthias wei-
dlich, conformance checking - relating processes and models, springer, isbn:
978-3-319-99413-0, 2018, http://dx.doi.org/10.1007/978-3-319-99414-7.
[3] massimiliano de leoni, foundations of process enhancement, in: process mining
handbook, in: lecture notes in business information processing, vol. 448,
springer, 2022, pp. 243–273, http://dx.doi.org/10.1007/978-3-031-08848-3_8.
[4] fabrizio maria maggi, chiara di francescomarino, marlon dumas, chiara ghi-
dini, predictive monitoring of business processes, in: caise, in: lecture notes
in computer science, vol. 8484, springer, 2014, pp. 457–472, http://dx.doi.org/
10.1007/978-3-319-07881-6_31.
6https://pmtk.fit.fraunhofer.de/
3j.n. adams, g. park and w.m.p. van der aalst software impacts 14 (2022) 100438
[5] dirk fahland, process mining over multiple behavioral dimensions with event
knowledge graphs, in: process mining handbook, in: lecture notes in business
information processing, vol. 448, springer, 2022, pp. 274–319, http://dx.doi.
org/10.1007/978-3-031-08848-3_9.
[6] wil m.p. van der aalst, object-centric process mining: dealing with divergence
and convergence in event data, in: sefm, springer, 2019, pp. 3–25, http:
//dx.doi.org/10.1007/978-3-030-30446-1_1.
[7] stefan esser, dirk fahland, multi-dimensional event data in graph databases, j.
data semant. 10 (1) (2021) 109–141, http://dx.doi.org/10.1007/s13740-021-
00122-1.
[8] philipp waibel, lukas pfahlsberger, kate revoredo, jan mendling, causal pro-
cess mining from relational databases with domain knowledge, 2022, corr
abs/2202.08314, arxiv:2202.08314.
[9] wil m.p. van der aalst, alessandro berti, discovering object-centric petri nets,
fundam. informaticae 175 (1–4) (2020) 1–40, http://dx.doi.org/10.3233/fi-
2020-1946.
[10] jan niklas adams, wil m.p. van der aalst, precision and fitness in object-centric
process mining, in: icpm, ieee, 2021, pp. 128–135, http://dx.doi.org/10.1109/
icpm53251.2021.9576886.
[11] gyunam park, jan niklas adams, wil m.p. van der aalst, opera: object-centric
performance analysis, in: er, springer, 2022, pp. 281–292, http://dx.doi.org/10.
1007/978-3-031-17995-2_20.
[12] jan niklas adams, gyunam park, sergej levich, daniel schuster, wil m.p.
van der aalst, a framework for extracting and encoding features from object-
centric event data, corr abs/2209.01219 (2022) http://dx.doi.org/10.48550/
arxiv.2209.01219.
[13] jan niklas adams, daniel schuster, seth schmitz, günther schuh, wil m.p.
van der aalst, defining cases and variants for object-centric event data, corr
abs/2208.03235 (2022) http://dx.doi.org/10.48550/arxiv.2208.03235.
[14] gyunam park, wil m.p. van der aalst, monitoring constraints in business
processes using object-centric constraint graphs, corr (2022) http://dx.doi.org/
10.48550/arxiv.2210.12080.
[15] sepp hochreiter, jürgen schmidhuber, long short-term memory, neural comput.
9 (8) (1997) 1735–1780, http://dx.doi.org/10.1162/neco.1997.9.8.1735.
[16] franco scarselli, marco gori, ah chung tsoi, markus hagenbuchner, gabriele
monfardini, the graph neural network model, ieee trans. neural netw. 20 (1)
(2009) 61–80, http://dx.doi.org/10.1109/tnn.2008.2005605.
[17] anahita farhang ghahfarokhi, gyunam park, alessandro berti, wil m.p. van der
aalst, ocel: a standard for object-centric event logs, in: adbis 2021 short
papers, doctoral consortium and workshop, vol. 1450, in: communications in
computer and information science, springer, 2021, pp. 169–175, http://dx.doi.
org/10.1007/978-3-030-85082-1_16.
[18] jan niklas adams, wil m.p. van der aalst, oc 𝜋: object-centric process insights,
in: petri nets, springer, 2022, pp. 139–150, http://dx.doi.org/10.1007/978-
3-031-06653-5_8.[19] adrian rebmann, jana-rebecca rehse, han van der aa, uncovering object-
centric data in classical event logs for the automated transformation from xes
to ocel, in: bpm, springer, 2022, pp. 379–396, http://dx.doi.org/10.1007/978-
3-031-16103-2_25.
[20] alessandro berti, gyunam park, majid rafiei, wil m.p. van der aalst, an event
data extraction approach from sap erp for process mining, in: icpm workshops,
vol. 433, springer, 2021, pp. 255–267, http://dx.doi.org/10.1007/978-3-030-
98581-3_19.
[21] gyunam park, wil m.p. van der aalst, realizing a digital twin of an organization
using action-oriented process mining, in: icpm, ieee, 2021, pp. 104–111, http:
//dx.doi.org/10.1109/icpm53251.2021.9576846.
[22] alessandro berti, sebastiaan j. van zelst, wil m.p. van der aalst, process mining
for python (pm4py): bridging the gap between process- and data science, 2019,
corr abs/1905.06169, arxiv:1905.06169.
[23] rafael accorsi, julian lebherz, a practitioner’s view on process mining adoption,
event log engineering and data challenges, in: process mining handbook, in:
lecture notes in business information processing, vol. 448, springer, 2022, pp.
212–240, http://dx.doi.org/10.1007/978-3-031-08848-3_7.
[24] jochen de weerdt, annelies schupp, an vanderloock, bart baesens, process
mining for the multi-faceted analysis of business processes - a case study
in a financial services organization, comput. ind. 64 (1) (2013) 57–67, http:
//dx.doi.org/10.1016/j.compind.2012.09.010.
[25] mahendrawathi er, noval arsad, hanim maria astuti, renny pradina
kusumawardani, rivia atmajaningtyas utami, analysis of production planning
in a global manufacturing company with process mining, j. enterp. inf. manag.
31 (2) (2018) 317–337, http://dx.doi.org/10.1108/jeim-01-2017-0003.
[26] ronny mans, wil m.p. van der aalst, rob j.b. vanwersch, process min-
ing in healthcare - evaluating and exploiting operational healthcare pro-
cesses, in: springer briefs in business process management, springer, isbn:
978-3-319-16070-2, 2015, http://dx.doi.org/10.1007/978-3-319-16071-9.
[27] david cohn, richard hull, business artifacts: a data-centric approach to mod-
eling business operations and processes, ieee data eng. bull. 32 (3) (2009)
3–9.
[28] günther schuh, andreas gützlaff, seth schmitz, wil m.p. van der aalst, data-
based description of process performance in end-to-end order processing, cirp
ann. 69 (1) (2020) 381–384, http://dx.doi.org/10.1016/j.cirp.2020.03.013.
[29] tobias brockhoff, merih seran uysal, isabelle terrier, heiko göhner, wil m.p.
van der aalst, analyzing multi-level bom-structured event data, in: icpm
workshops, vol. 433, springer, 2021, pp. 47–59, http://dx.doi.org/10.1007/978-
3-030-98581-3_4.
[30] rafael lorenz, julian senoner, wilfried sihn, torbjørn h. netland, using process
mining to improve productivity in make-to-stock manufacturing, int. j. prod. res.
59 (16) (2021) 4869–4880, http://dx.doi.org/10.1080/00207543.2021.1906460.
4