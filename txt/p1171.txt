removing operational friction using process mining
challenges provided by the internet of production (iop)
wil m.p. van der aalst1;2, tobias brockhoff1, anahita farhang ghahfarokhi1, mahsa
pourbafrani1, merih seran uysal1, and sebastiaan j. van zelst1;2
1process and data science (informatik 9), rwth aachen university, aachen, germany
2fraunhofer-institut f ¨ur angewandte informationstechnik, sankt augustin, germany
wvdaalst@rwth-aachen.de
abstract. operational processes in production, logistics, material handling, main-
tenance, etc., are supported by cyber-physical systems combining hardware and
software components. as a result, the digital and the physical world are closely
aligned, and it is possible to track operational processes in detail (e.g., using sen-
sors). the abundance of event data generated by today’s operational processes
provides opportunities and challenges for process mining techniques supporting
process discovery, performance analysis, and conformance checking. using ex-
isting process mining tools, it is already possible to automatically discover pro-
cess models and uncover performance and compliance problems. in the dfg-
funded cluster of excellence “internet of production” (iop), process mining is
used to create “digital shadows” to improve a wide variety of operational pro-
cesses. however, operational processes are dynamic, distributed, and complex.
driven by the challenges identiﬁed in the iop cluster, we work on novel tech-
niques for comparative process mining (comparing process variants for differ-
ent products at different locations at different times), object-centric process min-
ing (to handle processes involving different types of objects that interact), and
forward-looking process mining (to explore “what if?” questions). by address-
ing these challenges, we aim to develop valuable “digital shadows” that can be
used to remove operational friction.
keywords: process mining · internet of production · operations management.
1 introduction
data are collected about anything, at any time, and at any place. of course, operational
processes in production, logistics, material handling, and maintenance are no excep-
tion. in [5] the term internet of events (ioe) was introduced to reﬂect that machines,
products, vehicles, customers, workers, and organizations are increasingly connected to
the internet and that our capabilities to track and monitor these entities advanced in a
spectacular manner. notions such as the internet of things (i.e., all physical objects that
are able to connect to each other and exchange data) and industry 4.0 (i.e., the fourth
industrial revolution enabled by smart interconnected machines and processes), reﬂect
our abilities to monitor operational processes.
the dfg-funded cluster of excellence “internet of production” (iop) joins the
efforts of over 200 engineers and computer scientists with the goal to fundamentally2 w. van der aalst et al.
transform the way industrial production takes place by using data-driven techniques
(www.iop.rwth-aachen.de). a key concept within iop is the notion of a digital shadow,
i.e., automatically generated models that can be used to control and improve production
processes. although iop also considers novel production technologies and materials
science and engineering, the lion’s share of iop activities is devoted to improving pro-
duction processes. this position paper focuses on operational processes that involve
physical objects (products, machines, etc.) and have discrete process steps. one of the
main goals of iop is to remove operational friction in such processes. much like physi-
cal friction, operational friction refers to phenomena that consume additional effort and
energy and lead to less-than-optimal results. examples of operational friction are un-
necessary rework, delays, waste, deviations, fraud, missing products, unresponsiveness,
and communication loops.
process mining can be used to remove operational friction by making conformance
and performance problems visible in such a way that it becomes clear what the root-
causes of such problems are [5]. starting point for process mining are the event data
mentioned before. events may take place inside a production facility, inside a trans-
portation system, inside a product, or inside an enterprise information system. events
may be triggered by people, machines, or organizations. process discovery techniques
use event data to create process models describing the operational processes in terms
of their key activities. these process models reveal the actual processes and can be
extended to show bottlenecks and outlier behavior. conformance checking techniques
compare observed behavior (i.e., event data) with modeled behavior (i.e., process mod-
els). these techniques can be used to show deviations, i.e., behaviors different from
what is expected or desired. process models may also include probabilities, time dis-
tributions, and business rules. therefore, process mining also includes a range of tech-
niques enabling predictive and prescriptive analytics.
the process models created and used by process mining techniques form the digital
shadows that are intended to manage, control, and improve operational processes. the
notion of a digital shadow is at the core of iop. the notion of a digital shadow is closely
related to the notion of a digital twin [30]. digital twins are complex models providing
digital counterparts to physical production artifacts (i.e., the physical twins), e.g., de-
tailed simulation models that update and change as their physical counterparts change.
the digital shadow concept is broader and includes the traces of the actual production
processes, i.e., digital shadows based on process mining include both process models
and actual event data. for example, when analyzing a bottleneck, it is possible to use
the process model to drill-down into event data that caused the problem. moreover, the
process model and event data can be used to predict the trajectory of current process
instances and anticipate the effect of interventions. this makes process mining a key
ingredient of iop.
the process mining discipline emerged around 20 years ago [5], and today there are
over 35 commercial process mining tools (e.g., celonis, disco, uipath/processgold,
myinvenio, pafnow, minit, qpr, mehrwerk, puzzledata, lanalabs, stereologic, ev-
erﬂow, timelinepi, signavio, and logpickr). many of the larger organizations (espe-
cially in europe) have adopted this technology. for example, within siemens over 6000
employees are using celonis process mining to remove operational friction and increaseremoving operational friction using process mining 3
automation. despite the widespread adoption of process mining and the availability of
easy-to-use commercial tools, the process mining discipline is relatively young and
there are still many open challenges. in this position paper, we focus on three questions
particularly relevant for iop:
–how to compare different process variants (over time, over locations, over different
case types)? the same production process may be performed at different locations.
it is valuable to understand why operational friction is less at some of these loca-
tions. also, the performance may not be constant over time and we may see drifts,
e.g., bottlenecks are shifting. therefore, we need to support comparative process
mining [2, 3, 17, 25]
–how to deal with processes involving different interacting objects? traditionally,
each event refers to a single case (e.g., an order). this is made possible by ﬂatten-
ing event data. this may lead to convergence and divergence problems. the same
event may be replicated for multiple cases or unrelated events may appear to be
related. this leads to misleading diagnostics. moreover, depending on the question
at hand, the event data need to be extracted differently from systems such as sap,
oracle, and microsoft dynamics. therefore, we need to support object-centric pro-
cess mining techniques that are able to handle different types of objects (i.e., case
notions) in one model [7].
–how to improve the process using forward-looking techniques? the initial focus
of process mining was on diagnosing historical event data. however, the ultimate
goal is to improve processes and remove operational friction. therefore, we need
process mining techniques that are forward-looking and that provide actionable
results, e.g., automated alerts, interventions, reconﬁgurations, policy changes, and
redesign. to anticipate the effect of process interventions, a tighter integration with
simulation is needed [1, 6, 39, 46].
the remainder of this position paper is organized as follows. section 2 introduces
an overview of process mining techniques. section 3 introduces a running example
based on which we discuss the potentials and challenges of applying process mining
to operational processes from a research and process owner’s perspective. section 4
uses the running example to illustrate the capabilities of existing process mining tools.
section 5 discusses the need for comparative process mining and presents some of the
initial capabilities to support process cubes, concept drift, and process comparison using
advanced concepts such as the earth mover’s distance. section 6 presents the problems
related to convergence and divergence in processes due to events that refer to multiple
objects. initial support for object-centric process mining techniques based on process
cubes is presented. in section 7, we advocate a shift from backward-looking process
mining to more forward-looking forms of analysis combining simulation and process
mining. next to traditional discrete event simulation with models generated from event
data, we also need simulation approaches operating at a higher abstraction level. for
this purpose, we propose to combine process mining and system dynamics. section 8
concludes the paper.4 w. van der aalst et al.
2 process mining: removing friction in operational processes
to help organization to remove operational friction, process mining reveals unnecessary
rework, delays, waste, deviations, fraud, missing products, lost responses, etc. this is
not so easy. as an example, take the order-to-cash (o2c) process of a large multina-
tional that processes over 30 million ordered items per year. these 30 million cases (i.e.,
instances of the o2c process) generate over 300 million events per year. over 60 dif-
ferent activities may occur. although the o2c process is fairly standard, over 900,000
process variants can be observed in one year! these variants describe different ways of
executing this process. in such processes, often 80% of all cases are described by just
20% of the process variants. however, the remaining 20% of the cases generate 80%
of the process variants and are often responsible for a disproportional part of an orga-
nization’s operational friction. such problems cannot be tackled by traditional process
modeling or workshops, because these focus on the dominant 20% of the process vari-
ants. process mining aims to provide insights into real-life operational processes using
the event data at hand.
performance 
analysisinformation 
systems /real-life 
processes
process 
discovery
event logs
(real)
process models
(descriptive /
non-simulatable )
process models
(descriptive /
simulatable )
simulation 
(“what if ?”)
performance 
diagnostics
conformance 
checking
process models
(normative )
conformance 
diagnostics
fig. 1: an overview of process mining showing how event logs, process models, and
diagnostics relate.
the starting point for traditional process mining is an event log extracted from the
information system(s). each event in such a log refers to an activity possibly executed
by a resource at a particular time and for a particular case [5]. an event may have
many more attributes, e.g., transactional information (e.g., start, complete, and abort),
costs, customer, location, and unit. typical challenges are data quality and ﬁnding aremoving operational friction using process mining 5
suitable case notion. a typical data quality problem is the granularity of the times-
tamps in the event log. some events may only have a date (e.g., 29-9-2020) and are
manually recorded, whereas other events may have a millisecond precision (e.g., 29-9-
2020:15.36.45.567) and are captured fully automatic. as a result, the precise ordering
is unknown or uncertain. events are grouped into traces using the selected case notion.
however, as detailed in section 6, this is not always easy. one event may refer to one
order, ten parts, two machines, one person, and a location. different events may share
objects and one event may refer to many objects.
as figure 1 shows, event data are used for process discovery, conformance anal-
ysis, and performance analysis [5]. process discovery techniques automatically learn
process models based on an event log. a process model can be represented using differ-
ent modeling languages, e.g., petri nets, bpmn models, uml activity diagrams, dfgs,
automata, and process trees. such a process model speciﬁes how a case can be handled.
the simplest model is a so-called directly follows graph (dfg). the nodes in such a
model are the activities and two special nodes: the start and end of the process. the arcs
describe how the process transitions from one node to another. arcs can be decorated
with frequencies and mean durations. for example, 500 times activity “send invoice”
was followed by activity “make payment” and the average time between both activities
was 2.45 days. dfgs are simple and can be constructed efﬁciently, also for huge events
logs. however, dfgs fail to capture concurrency and often lead to spaghetti-like un-
derﬁtting models. petri nets, bpmn models, uml activity diagrams, and process trees
are able to express concurrency and there are many process discovery algorithms to dis-
cover such models. here, we abstract from the actual representation of process models
and focus on the more general concepts.
conformance checking techniques take as input both a process model and an event
log. the event log is replayed on the model to uncover discrepancies between the ob-
served and modeled behavior. it may be the case that an activity occurs although this is
not possible according to the model, or an activity should have occurred according to
the model, but did not happen in reality. it is also possible to see that behavior allowed
by the process model never happens. if the process model is extended with temporal or
resource constraints, conformance checking may reveal that something takes too long
or is performed by the wrong person.
by replaying the event data on the model, it is also possible to show performance
problems. since events have timestamps, it is possible to measure delays, next to routing
probabilities. even when the event data do not completely ﬁt the model, it is possible to
“squeeze” the data into to model using alignment computations. process models with
performance information can be used to analyze bottlenecks and other performance
problems. moreover, by combining stochastic models learned from historic event data
with event data from running cases, it is possible to predict performance and compliance
problems.
although existing process mining techniques and tools have proven to be a powerful
means to remove operational friction, several challenges remain. in the context of our
cluster of excellence “internet of production” (iop), we address the three challenges
already mentioned in the introduction. figure 2 sketches these challenges and corre-
sponding solution directions. to compare different process variants (over time, over6 w. van der aalst et al.
time (days , 
weeks , years )location (plant , 
department , etc.)case type (product , 
supplier , etc. )
process cube storing event data
comparative 
process mining
object -centric event data
object -centric 
process mining
forward -looking process mining
events may refer to any 
number of objectsprocess models cover 
multiple obejct types in a 
holistic manner
different forms of data -driven 
simulation , including system 
dynamics
fig. 2: different research directions relevant for the improvement of operational pro-
cesses: comparative process mining, object-centric process mining, and forward-
looking process mining.
locations, over different case types) we use process cubes and novel techniques to com-
pare subsets of events (see section 5). process cubes store event data using any number
of dimensions. novel techniques based on the earth mover’s distance (emd) notion
are used to compare two different event logs (or a log and model) while also consid-
ering time and resources (also detailed in section 5). to deal with processes involving
different interacting objects, we use object-centric event logs and corresponding pro-
cess mining techniques (detailed in section 6). traditional process mining techniques
require the selection of a single case notion and each event refers to precisely one case.
however, for the types of processes we have in mind, this is often too restrictive. each
event may refer to any number of objects and the case notion is just a view on the pro-
cess. objects may refer to physical products (raw materials, end products, intermediate
products, etc.), resources, or information. resources include machines, people, space,
etc. to make process mining more forward-looking, we support different types of sim-
ulation. this allows us to anticipate the effects of process interventions and use process
models as highly informative digital shadows. next to traditional discrete event simu-
lation (des), we also support system dynamics (sd) techniques that view the process
at a higher aggregation level (see section 7). for sd models, we do not simulate the in-
dividual events, but use aggregated steps representing different time periods (e.g., days
or weeks).
3 running example
various types of operational processes can be found in industry. automotive produc-
tion lines are a common type of production lines that are used to execute operational
processes. automotive production lines are highly structured and activities therein are
tightly coupled. in a simple production line, multiple assembly lines are coordinated
in order to join in a single major assembly line. due to the variability of activities in
the automotive production lines and the strong dependencies between them, they are
suitable for process mining analysis. therefore, in order to illustrate process mining
techniques for operational processes, this section introduces an extendable automotive
production line model. the model is based on a production line at e.go mobile ag, a
local car manufacturer located in aachen. due to reasons of conﬁdentiality, we resortremoving operational friction using process mining 7
ga 0ga 1ga 2 ...ga 
020ga 
030
ga 
080ga 13ga 14ga 15ga 16ga 17… ga 26ga 27ga 28sa 9sa 8 ...sa 1
sa 3 sa 2
fig. 3: a part of the simulated model of the production line, used for designing the sim-
ulation model. the production line includes one general assembly line with 28 stations
and 33 sub-assembly stations.
to simulated data and present our results without utilizing the real data of e.go. a frag-
ment of the simulated model is shown in figure 3. it shows the production line is built
around a sequence of general assembly stations where some stations depend on addi-
tional sequential sub-assembly stations. for example, the station sa9 is a prerequisite
for the general assembly station ga17. each station can have at most one car at a time,
during which the human operators execute speciﬁc tasks before the car proceeds to the
next station. a car can only move along the general assembly line if the subsequent sta-
tion is empty. we consider 28 stations in the general assembly line and 33 stations in the
sub-assembly line. several activities are executed at one station and most of the time the
order of activities at the stations does not matter. the production line is active between
8:00-17:00 o’clock and 5 days a week. in the following sections we demonstrate how
process mining is able to help a company to steer and evolve their operational process.
to this end, we extend the basic model in order to illustrate the challenges mentioned
in the introduction. in section 5, we present comparative process mining techniques to
answer the following questions:
–how to compare performance-related factors of two different factories in two dif-
ferent locations?
–how to investigate resource allocation in two different factories?
in section 6, we discuss object-centric process mining approaches to answer following
questions:
–how to deal with real-life data of the car factory extracted from information sys-
tems such as erp systems in process mining?
–how to address challenges arising from having multiple interacting objects, e.g.,
order, products, and customers in processes?8 w. van der aalst et al.
in section 7, we present forward-looking process mining methods to answer following
questions:
–how to increase the monthly production rate of cars?
–does a temporary queuing station for the cars help to increase the overall produc-
tion rate?
whereas the emphasis of this paper is on advanced process mining techniques, we
ﬁrst present a few common process mining techniques, e.g., basic approaches for pro-
cess discovery and conformance checking. these examples diagnostics also help us to
obtain an overview of the process used throughout this paper.
4 applying existing process mining techniques
process mining provides a wide variety of techniques for process analysis [5]. exam-
ples of process mining techniques include process discovery algorithms that are able
to ﬁnd process models that describe the event log, conformance checking algorithms
that compare process models with the event logs, and model enhancement algorithms
that enrich the process model with additional information extracted from the event log.
to gain more insights about the process, we apply standard process mining techniques
(see [5] for a comprehensive introduction). first, in section 4.1, we perform an ex-
plorative analysis by means of process visualization techniques, i.e., the dotted chart.
in section 4.2, we discover a process model of the generated data. in section 4.3, we
highlight deviations between the discovered process model and the event log by ap-
plying conformance checking techniques. in section 4.4, we address the performance
problems in the production line through bottleneck analysis.
4.1 exploring event data
explorative process analysis is a common starting point in order to obtain an overview
of the execution of the process. a widely adopted tool that interactively visualizes mul-
tiple perspectives of an event log is the dotted chart [49]. figure 4 presents the dotted
chart for the generated data where each event is shown by a dot, colored according to
the station it originated from. the x-axis and y-axis show time and the car id respec-
tively. there are different ways of sorting the events in the dotted chart. however, in
this dotted chart, events are sorted based on the case duration. as indicated in the ﬁg-
ure, there are gaps between events that show the period in which no event occurs such
as nights and weekends. we can observe 80/20 rule, also known as the pareto principle
in the dotted chart. approximately 20% of the cases last exceptionally long. following
the pareto principle, 80% of the performance problems (e.g., delay in the production
line) are caused by 20% of the cases. clearly, these 20% of all the process instances are
interesting cases for further analysis.
even though process visualization by means of a dotted chart helps the analysis,
most of the analysis by using the dotted chart is empirical and not quantiﬁed. thus,
other process mining techniques such as process discovery and conformance checking
techniques are required to ﬁnd actionable results for improving operational processes.removing operational friction using process mining 9
stations are 
not active 
during nights . 
there is no 
activity at the 
weekends .
20% of the cases 
lasted longer than 
average . 
fig. 4: dotted chart for the generated event log. working hours and working days are
demonstrated in the dotted chart. besides, we observe a big gap between events in 20%
of the cases, lasted longer than normal.
4.2 process discovery
although the visualization approach, discussed in section 4.1, provides an overview of
the event data, it does not show the relationship between different activities. process
discovery techniques take an event log as an input and generate a process model that
captures the relation between activities and abstracts the observed behavior in the event
log.
there are various techniques for process discovery, e.g., the alpha-algorithm [12],
the inductive miner [26], region-based approaches [5], and the heuristics miner [51].
for the resulting models, there are multiple different notations, e.g., petri nets [14],
bpmn [21], yawl [24], uml [11], etc. figure 5 shows a fragment of the bpmn
model for the example log by applying inductive miner. as the model shows, the gen-
eral assembly stations are sequential and some of them have prerequisites, i.e., sub-
assembly stations. for example, we start triggering the execution of activities at the
station ga14, when execution of activities at the stations sa1andga13 have been ﬁn-
ished. another aspect, captured by bpmn model, is concurrency. while the execution
of the activities at the stations ga0, ga1, ..., and ga13 is sequential, they are all in
parallel with the execution of the activities at the station sa1. therefore, in addition to
the sequential relations, this discovery reveals the concurrency in activity executions.
note that in this discovery, we focused on the control-ﬂow perspective. however, pro-
cess discovery is not limited to the control ﬂow perspective and it can also be applied
to other perspectives of the process, such as the organizational perspective [5].10 w. van der aalst et al.
+ ga 0 ga 1 ga 13 ga 14 ga 15 ga 16 ga 2 ... +sa 1
+sa 2 sa 3 sa 4
sa 6 sa 7 sa 8 sa 5ga 17 ga 28 ... +
sa 9sub-assembly stations
general assembly stations
fig. 5: an example process model of the production line using bpmn notation [21].
the ﬂow of activities for cars during the production line is shown. activities at general
assembly stations are always executed in a sequence. also, activities at sub-assembly
stations, required for a speciﬁc general assembly station, are executed sequentially.
+ + +ga 0
(1000 /0)ga 1
(1000 /0)ga 2
(1000 /0) ...ga 13
(1000 /0)ga 14
(1000 /0)ga 15
(1000 /0)ga 16
(1000 /0)sa 1
(992/8)sa 2
(1000 /0)sa 3
(1000 /0)sa 4
(973/27)
sa 5
(1000 /0)sa 6
(1000 /0)sa 7
(999/1)sa 8
(1000 /0)
fig. 6: a part of the detected deviations in the process. activities with red square show
deviations while activities with green square show that there was no deviation in that
activity.
4.3 conformance checking
given a process model, conformance checking assesses the similarity of the behavior
described by the model and the real behavior as recorded in the event log. therefore,
conformance checking techniques [13] are used to identify deviations of the production
plan. since the event data used originate from an idealized simulation model, there
are no deviations in the initial setting. however, we manipulate the simulation model
such that for some stations deliberately deviations are injected. one of the common
techniques, used in conformance checking, are alignments. in alignments, we check the
synchronization between the behavior in the event log and behavior according to the
model [8]. an example of alignments is depicted in figure 6 which shows a fragment of
the mined bpmn model with the results of conformance checking. as this ﬁgure shows,
using conformance checking, deviations of the example process from the previously
mined model are easily detected and visualized. two numbers in parenthesis, below the
name of the station, clarify the number of deviations. for instance, for 27 cars, activities
at the station sa4have not been executed before activities at the station ga16 and after
the activities at the station sa3. these cars have skipped the station sa4 and they may
cause quality problems after the production. accordingly, identifying these types of
deviations in the production line can help the production line managers to control the
quality and steps of the process accurately.
figure 7 shows the results of conformance checking using the alignments-based
technique. in alignments, we check for a car, whether the behavior of the model and
the behavior of the events related to that car match with each other or not. we have tworemoving operational friction using process mining 11
sa 
7sa 
8sa 
6sa 
7ga 
22ga 
21
fig. 7: an alignment for a speciﬁc car. a car ideally passes 61 stations. however, there
are mismatches between the discovered model and the event log, captured in the align-
ment by different colors.
types of misalignment which are model move and log move. in model move, a move in
the log cannot be mimicked by a move in the model. in figure 7, there are two model
moves (purple color). for example, based on the model, we need the station sa7 in the
event log between the stations sa6 andsa8. however, it is missed in this case. in log
move, a move in the model cannot be mimicked by a move in the log. in figure 7, there
is a log move (yellow color). based on the event log, this car moves from the station
ga21 to the station sa7 and from the station sa7 to the station ga22. however, it
cannot happen according to the model. typically, by capturing such misstatements, we
can discover the deviations that affect the quality of the ﬁnal product. however, in order
to increase the performance of the production line we need to analyze the performance
of the stations to ﬁnd the bottlenecks.
4.4 performance analysis
the performance of production lines is one of the important metrics which needs to
be observed and improved continuously [8]. after verifying the suitability of the given
model using conformance checking, this section assesses the performance of the pro-
cess by means of bottleneck analysis. in figure 8, we depict a projection of performance
diagnostics, on top of the discovered process model. within the ﬁgure, the darker colors
of the stations show performance problems and bottlenecks in the process. for instance,
the dark red color of the stations ga3, ga4, and ga5 indicates the long service times
at these stations (i.e., the time actually worked on the car). most of the time, improving
the performance of bottlenecks such as the station ga6 improves the overall perfor-
mance of the process. in general, process mining bottleneck analysis reveals this kind
of problems and subsequent actions can be taken accordingly. in this performance anal-
ysis, we considered service time of the stations. however, it is possible to analyze the
performance based on the waiting times for the different stations (i.e., the time that a
car is waiting for the station to become available).
5 comparative process mining
the techniques presented in section 4 capture the current state of the process using
the complete event log. in this analysis, we do not consider variability in the processes12 w. van der aalst et al.
ga 1
(3.87 hours )ga 2
(3.72 hours )ga 4
(4.25 hours )ga 3
(4.35 hours )ga 6
(2.25 hours )ga 5
(4.40 hours )
station  ga3 lasted longer than other stations and it is a bottleneck .
fig. 8: snapshot of the performance view of the general assembly line. the average
service times of the stations are shown.
information 
systems /real-life 
processesevent logs
(real)process cubes
select a point for 
applying an operation , 
e.g., slice , and dice .
concept drift 
detectionapply an operation , e.g., 
slice , and dice .
 process comparison
...sublog 1
sublog 2
sublog n
fig. 9: process cubes are built on the event logs extracted from information systems. we
detect the change point in the regular patterns of the process by concept drift detection.
therefore, based on the change point, we apply process cube operations such as slice.
the output of such process cube operations are sublogs, used for process comparison.
which can be derived from the heterogeneity of demand in different seasons. in order
to isolate process variations, process comparison, which systematically investigates the
presence and absence of systematic differences, has recently gained interest. the appli-
cation is not limited to a single process instance but can also consider multiple instances
of similar processes. for example, suppose that we have two car factories in two dif-
ferent locations, implementing the production lines described in section 3. comparing
performance-related metrics of these two factories with each other or even compar-
ing the performance metrics of a single company in different time windows of a year
is valuable from the business perspective. characteristics related to the performance,
such as the duration of the underlying production process for the comparison of the
two factories, are of importance in operational management. this comparison can be
addressed by splitting event data into process variants by using existing process mining
approaches in a way that differences between variants are exposed. to provide better
insights into current approaches for process comparison, we ﬁrst show how event data
can be organized considering different dimensions of variability, which enables basic
process comparison in section 5.1. while the former method assumes prior knowledge
about the expected variability, section 5.2 assesses how this can naturally be comple-
mented by process change detection approaches and the emerging challenges for op-
erational processes. finally, in section 5.3, given the methods to organize the data, weremoving operational friction using process mining 13
color
silver          blue         whiteamsterdam   eindhoven   brusselslocation (city)
a sublog extracted 
from a cell
conformance /performance 
diagnosis
a process modelprocess 
discovery
conformance 
checking
fig. 10: an example of a three-dimensional process cube. the selected cell contains all
events related to white cars produced in brussels in 2017.
introduce a challenging process comparison scenario, which motivates further research
on performance-oriented operational process comparison.
5.1 process cubes
classical process mining techniques focus on analyzing a process through processing
its corresponding event log as a whole. however, there may exist variability in the
process. to consider this variability in the process, we use process cubes which isolate
the different processes. as shown in figure 10, a process cube consists of multiple
dimensions that refer to the properties of the event log, e.g., time, color, and location.
each cell in this process cube refers to all events related to the cars with a speciﬁc
color, in a speciﬁc region, and in a particular time window. to gain more insights about
the speciﬁc cell, process mining techniques, e.g., process discovery and conformance
checking techniques can be applied to a collection of events extracted from the cells of
the process cube [17].
the notion of process cubes is inspired by application of online analytical pro-
cessing (olap) in process mining [44]. olap is a well-known concept in business
intelligence (bi) that facilitates data discovery and management reporting. first, olap
considers simple numerical analysis, e.g., plotting car production duration in a factory
against the months of the year. in [20, 29, 31], olap operations, i.e., slice, dice, drill-
down, and roll-up were also applied to non-numerical data. although the idea of the
process cube is related to olap, there are signiﬁcant differences between olap and
process cubes. we can not use olap for process data directly, because, for example,
as a design choice in a process cube, cells are associated with both process models and
event data. in a process cube, event data and process models are directly related. we can
discover models from event data extracted from cells of the cube and compare observed
and modeled behavior [2]. different implementations of process cubes are provided
in [16, 33]. in these implementations, we can apply olap operations such as slice,14 w. van der aalst et al.
color
silver          blue         whiteamsterdam   eindhoven     berlinlocation (city)color
silver          blue         whiteamsterdam   eindhoven     berlinlocation (city)
color
blue          whiteamsterdam   eindhoven     berlinlocation (city)
fig. 11: example of slicing anddicing operations in process cubes. a slice of the cube
for the time dimension and diceof the cube for the time andcolor dimensions are shown.
dice, roll-up, and drill-down on the event data. assume we are interested in discovering
the model of cars produced in the years 2017 and2018. as shown in figure 11, we can
slice the cube for the time dimension, for the years 2017 and2018 and ﬁnd the process
model of the remaining events. in fact, through slicing the cube, we zoom into a slice
of the data and remove that dimension from the cube. however, by dicing, we apply a
ﬁlter on multiple dimensions. assume we are interested in discovering the model for
cars with white and blue color produced in years 2017 and2018. as shown in fig-
ure 11, we can dice the cube for dimensions color, and time and discover the model of
the remained events.
roll-up anddrill-down operations, show the cube with different levels of granular-
ity. an example is shown in figure 12. we can drill down the location dimension from
country tocity. roll-up is the opposite of drill-down operation. it performs aggregation
on a dimension. as shown in figure 12, we can roll up the location dimension from city
tocountry.
a brief example of the application of process cube operations for the generated data
is shown in figure 13. in this ﬁgure, the models of two different slices corresponding
to two different seasons of a year are compared to each other. we can compare perfor-
mance of the stations with each other through performance analysis. as indicated in theremoving operational friction using process mining 15
color
silver          blue         whiteamsterdam   eindhoven     brusselslocation (city) roll up : location (city to country )
  drill down : location (country to city )color
silver          blue         whitenetherlands  belgiumlocation (country )
this cell contains all the events related to silver cars 
produced in either eindhoven or amsterdam , in 2017 . 
fig. 12: example of rolling up anddrilling down operations in process cubes.
ga 3
(2.92 hours )ga 4
(2.37 hours )ga 6
(1.92  hours )ga 5
(2.08 hours )ga 7
(1.75 hours )
ga 3
(4.03 hours )ga 4
(4.24 hours )ga 6
(2.23 hours )ga 5
(5.28 hours )ga 7
(2.34 hours )
the execution of the activities at the station ga5 in the second season takes 
longer in comparison with the first season . 
fig. 13: example of comparing the company in two different time windows.
ﬁgure, the average time of execution of activities at the station ga5 has increased in the
second season of the year.
although there are several implementations of process cubes, some challenges re-
main. in olap, we reduce a set of values into a single summarized value such as the
average. however, process cubes deal with event data and we cannot simply reduce
many events into one event. the ways that are used for summarizing the events affect
the performance of the process cube. consequently, deﬁning a way for summarizing the
events in the process cube with high performance is an open issue.
5.2 concept drift
even though operational processes should ideally be stable, complex internal and exter-
nal dependencies will typically lead to continuous changes of the process. the resulting
variability is, on the one hand, problematic for traditional process mining techniques,
which implicitly assume steady behavior. on the other hand, changes can also require
an immediate adaptation by the process managers. in principle, we can attribute the
aforementioned changes to external factors, e.g., suppliers, market demand, or political
regulations, and internal factors, e.g., operators, minor changes of the bill-of-material16 w. van der aalst et al.
(bom), or machines. while the former are under limited control of the company, eval-
uating their effect by means of comparative process mining can support mid- and long-
term decision making. in addition, controlling the latter, in particular, has the potential
to continuously improve and steer the operational process. therefore, concept drift de-
tection, as a ﬁeld of research that is concerned with detecting systematic changes in
processes, is important for monitoring operational processes and providing entry points
for further analysis.
a general challenge for methods that systematically assess changes in the execution
of a process arises from the different natures of occurrence and duration [18]. for ex-
ample, sudden drifts are caused by rapid process changes and might require instant ac-
tion while gradual drifts describe slowly changing processes where different behaviors
overlap. concerning the long-term development of the process, sequences of multiple
changes, i.e., incremental drifts andrecurring drifts, which describe periodical behavior
changes, can be distinguished. on the one hand, detecting them is essential in order to
understand the overall process evolution. on the other hand, being aware of recurring,
e.g., seasonal changes enable process owners to anticipate and adapt while also setting
the context for additional analyses.
while existing work focuses on the data [25] and especially the control-ﬂow per-
spective [32, 18, 19], it neglects time, such as waiting times or activity service times, as
a factor of major concern in operational processes. as in many operational processes
activities are highly structured and tightly coupled, the impact of small delays can ac-
cumulate causing a signiﬁcant decrease in the overall performance. for instance, in our
running example delays at sub-assembly stations can temporarily stop signiﬁcant parts
of the entire production line. however, changes such as a battery shortage do not change
the ground truth control ﬂow but increase the sojourn times at affected stations making
time-aware drift detection essential. for example, consider the rolling mean sojourn
times over the last ten vehicles for a selected number of stations that are depicted in
figure 14. while it shows two increases for the stations ga4 andga5 after the ﬁrst
350 and 600 vehicles, respectively, the mean sojourn times for station ga6 are not af-
fected. this indicates a concept drift that worsens the situation at the bottleneck station
ga5 blocking the preceding stations and, therefore, increasing their sojourn times. us-
ing additional background knowledge, this drift can be attributed to problems with the
battery supply and, later on, a severe battery shortage. in general, detecting time drift
and its causes becomes especially challenging if changes are not local to a station but
distributed over the production line.
in addition to the time perspective, change point detection methods that generally
allow for different perspectives on the operational process are essential in order to in-
corporate domain knowledge, e.g., from the bom. consequently, this enables the user
to focus the sensitivity of the detection method on speciﬁc parts of the process while
reducing the sensitivity for irrelevant changes. for example, the user might focus on
changes of important quality metrics and changing impacts of preceding production
steps on the former instead of detecting changes in operator-dependent activity order-
ings. apart from the change identiﬁcation, a good visualization showing the nature of
the change [18] is crucial to make changes actionable. while change characterization ofremoving operational friction using process mining 17
/uni00000013 /uni00000015/uni00000013/uni00000013 /uni00000017/uni00000013/uni00000013 /uni00000019/uni00000013/uni00000013 /uni0000001b/uni00000013/uni00000013 /uni00000014/uni00000013/uni00000013/uni00000013
/uni00000039/uni00000048/uni0000004b/uni0000004c/uni00000046/uni0000004f/uni00000048/uni00000056/uni00000013/uni0000001d/uni00000013/uni00000013/uni0000001d/uni00000013/uni00000013/uni00000018/uni0000001d/uni00000016/uni00000016/uni0000001d/uni00000015/uni00000013/uni00000014/uni00000014/uni0000001d/uni00000013/uni00000019/uni0000001d/uni00000017/uni00000013/uni00000014/uni00000019/uni0000001d/uni00000017/uni00000013/uni0000001d/uni00000013/uni00000013/uni00000015/uni00000015/uni0000001d/uni00000014/uni00000016/uni0000001d/uni00000015/uni00000013/uni00000014/uni00000003/uni00000047/uni00000044/uni0000005c/uni0000000f/uni00000003/uni00000016/uni0000001d/uni00000017/uni00000019/uni0000001d/uni00000017/uni00000013/uni00000014/uni00000003/uni00000047/uni00000044/uni0000005c/uni0000000f/uni00000003/uni0000001c/uni0000001d/uni00000015/uni00000013/uni0000001d/uni00000013/uni00000013/uni00000014/uni00000003/uni00000047/uni00000044/uni0000005c/uni0000000f/uni00000003/uni00000014/uni00000017/uni0000001d/uni00000018/uni00000016/uni0000001d/uni00000015/uni00000013/uni00000030/uni00000048/uni00000044/uni00000051/uni00000003/uni00000056/uni00000052/uni0000004d/uni00000052/uni00000058/uni00000055/uni00000051/uni00000003/uni00000057/uni0000004c/uni00000050/uni00000048
/uni00000036/uni00000057/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051
/uni0000002a/uni00000024/uni00000003/uni00000017
/uni0000002a/uni00000024/uni00000003/uni00000018
/uni0000002a/uni00000024/uni00000003/uni00000019
fig. 14: mean sojourn time for stations ga4, ga5, and ga6 over the last ten vehicles.
it shows two drifts for ga4 andga5 after 350 and 600 cars, respectively.
the control ﬂow has been addressed in [36, 37], change characterization of operational
processes should acknowledge additional perspectives.
consequently, in order to address these challenges and unravel the process dynam-
ics, holistic and especially time-aware change point detection approaches with a multi-
perspective view on the operational process are needed.
5.3 comparison
applying the concepts from sections 5.1 and 5.2, allows us to organize the data into
process cubes, potentially reﬁned by concept drift detection results. subsequently, this
organization provides us a framework and entry points for process comparison along
the dimensions of variability which can be challenging even in case of a stable con-
trol ﬂow. depending on the inter-activity dependencies, pairwise activity comparison
between two process variants can be insufﬁcient and activity relations, i.e., the process
knowledge need to be incorporated.
in order to illustrate the challenges for time-centered process comparison intro-
duced by inter-activity dependencies, we complement the baseline model by a human
factor, which expresses in operator-dependent service times, and compare two factories
of the same car manufacturing company at different locations. similar to the workforce
assignment in the underlying real-world process of the electric vehicle manufacturer,
we divide the production pipeline into multiple sections. each section has a separate
pool of operators from which free operators are assigned to the manufacturing tasks.
moreover, we also model operator preferences for certain stations. accordingly, when
a vehicle arrives at an assembly station, a free operator is randomly assigned based on
the current list of preferences in the pool. we generate events for two factories located
in the netherlands and in belgium and store them in a process cube.
the process owner is interested in comparing the two implementations of his man-
ufacturing process in order to identify possibilities for improvement. to this end, we
ﬁrstslice anddice the process cube in order to generate a sublog for each location. as
we show next, comparison methods should consider the inter-activity dependencies in18 w. van der aalst et al.
/uni0000002a/uni00000024/uni00000003/uni00000017 /uni0000002a/uni00000024/uni00000003/uni00000018 /uni0000002a/uni00000024/uni00000003/uni00000019
/uni00000036/uni00000057/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051/uni00000013/uni0000001d/uni00000014/uni00000019/uni0000001d/uni00000017/uni00000013/uni00000013/uni0000001d/uni00000015/uni00000018/uni0000001d/uni00000013/uni00000013/uni00000013/uni0000001d/uni00000016/uni00000016/uni0000001d/uni00000015/uni00000013/uni00000013/uni0000001d/uni00000017/uni00000014/uni0000001d/uni00000017/uni00000013/uni00000013/uni0000001d/uni00000018/uni00000013/uni0000001d/uni00000013/uni00000013/uni00000013/uni0000001d/uni00000018/uni0000001b/uni0000001d/uni00000015/uni00000013/uni00000037/uni0000004c/uni00000050/uni00000048/uni00000003/uni00000044/uni00000057/uni00000003/uni00000056/uni00000057/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051/uni0000002f/uni00000052/uni00000046/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051
/uni00000031/uni00000048/uni00000057/uni0000004b/uni00000048/uni00000055/uni0000004f/uni00000044/uni00000051/uni00000047/uni00000056
/uni00000025/uni00000048/uni0000004f/uni0000004a/uni0000004c/uni00000058/uni00000050
(a) activity-wise comparison.
/uni0000002a/uni00000024/uni00000017 /uni0000002a/uni00000024/uni00000018 /uni0000002a/uni00000024/uni00000019
/uni00000036/uni00000057/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051/uni00000013/uni0000001d/uni00000014/uni00000019/uni0000001d/uni00000017/uni00000013/uni00000013/uni0000001d/uni00000015/uni00000018/uni0000001d/uni00000013/uni00000013/uni00000013/uni0000001d/uni00000016/uni00000016/uni0000001d/uni00000015/uni00000013/uni00000013/uni0000001d/uni00000017/uni00000014/uni0000001d/uni00000017/uni00000013/uni00000013/uni0000001d/uni00000018/uni00000013/uni0000001d/uni00000013/uni00000013/uni00000013/uni0000001d/uni00000018/uni0000001b/uni0000001d/uni00000015/uni00000013/uni00000037/uni0000004c/uni00000050/uni00000048/uni00000003/uni00000044/uni00000057/uni00000003/uni00000056/uni00000057/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051/uni00000037/uni0000004c/uni00000050/uni00000048/uni00000003/uni0000002a/uni00000024/uni00000003/uni00000018
/uni0000002f/uni00000052/uni00000051/uni0000004a
/uni00000036/uni0000004b/uni00000052/uni00000055/uni00000057
(b) relations between the station durations in
the netherlands.
/uni0000002a/uni00000024/uni00000017 /uni0000002a/uni00000024/uni00000018 /uni0000002a/uni00000024/uni00000019
/uni00000036/uni00000057/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051/uni00000013/uni0000001d/uni00000014/uni00000019/uni0000001d/uni00000017/uni00000013/uni00000013/uni0000001d/uni00000015/uni00000018/uni0000001d/uni00000013/uni00000013/uni00000013/uni0000001d/uni00000016/uni00000016/uni0000001d/uni00000015/uni00000013/uni00000013/uni0000001d/uni00000017/uni00000014/uni0000001d/uni00000017/uni00000013/uni00000013/uni0000001d/uni00000018/uni00000013/uni0000001d/uni00000013/uni00000013/uni00000013/uni0000001d/uni00000018/uni0000001b/uni0000001d/uni00000015/uni00000013/uni00000037/uni0000004c/uni00000050/uni00000048/uni00000003/uni00000044/uni00000057/uni00000003/uni00000056/uni00000057/uni00000044/uni00000057/uni0000004c/uni00000052/uni00000051/uni00000037/uni0000004c/uni00000050/uni00000048/uni00000003/uni0000002a/uni00000024/uni00000003/uni00000018
/uni0000002f/uni00000052/uni00000051/uni0000004a
/uni00000036/uni0000004b/uni00000052/uni00000055/uni00000057(c) relations between the station durations in
belgium.
fig. 15: a comparative analysis of the times spent in the different stations in both the
netherlands and belgium.
order to provide a holistic analysis to the company. activity-wise comparison, as de-
picted in figure 15a, yields that the station duration distributions for the station ga6
are similar to each other, while the distributions differ for the stations ga4 andga5.
for the station ga5, the station duration distribution has a longer tail in the dutch fac-
tory, which indicates inefﬁciencies for the dutch location. considering station ga4,
the distribution for the netherlands has two peaks(but not for the location in belgium)
suggesting that it is possible to considerably improve processing times at this station.
however, a process-oriented view, as shown in figures 15b and 15c, that considers
additional context information, yields a different conclusion. the ﬁgures show the rela-
tions between subsequent stations where traces are colored according to their time at the
station ga5. figure 15b shows that the time improvement for the station ga4 correlates
with an increased duration at the station ga5. quick but imprecise work at this station
that requires additional rework increases the overall effort. process comparison reveals
this process insight and the absence of this relation in the belgian factory. furthermore,
the modes of station ga5 in the belgian factory seem to be uncorrelated with the time
for station ga4 suggesting the existence of an additional latent variable. comparison
with figure 15b and the absence of a corresponding pattern in figure 15c, further sug-
gest that this latent variable is not inherent in the baseline process, but related to theremoving operational friction using process mining 19
location. for example, different operators working at different speeds could cause this
behavior rather than imprecisely ﬁtting parts, causing problems in the next step.
this example shows that, although simple comparison approaches can provide in-
sights into the differences between the processes, they might not consider all the rele-
vant context information. this motivates the use of ﬂexible comparison methods such
as the earth mover’s distance (emd) [23, 47]. on the one hand, these methods should
be sensitive to the frequency of the occurring patterns and thus to their relevance. on
the other hand, they should also allow for different perspectives on the process.
by considering the car as the case identiﬁer, we examined the process using gen-
eral process mining techniques (e.g., process discovery, and conformance checking)
and process comparison approaches. however, in reality, the data extracted from the
information system of a car factory contains other case identiﬁers, e.g., orders, and cus-
tomers. therefore, in our analysis, we need to provide a more holistic vision of the
process by considering multiple case notions, as is discussed next.
6 object-centric process mining
object-centric process mining is an emerging branch of process mining aiming to ap-
ply process mining techniques on event logs which are closer to the data extracted from
information systems. multiple objects such as customers, orders, and deliveries are in-
volved in the car factory, described in section 3. analyzing the processes covering all
these aspects is addressed in object-centric process mining.
companies record their information in information systems such as the erp (enter-
prise resource planning) systems of sap, which do not have the structure of traditional
event logs. in traditional event logs, each event refers to a single case notion (i.e., a pro-
cess instance), an activity, a timestamp, and any number of additional attributes (e.g.,
costs, resources, etc.). however, in operational processes with many interactions (i.e.,
an event is related to multiple objects), it may be problematic to create and analyze
traditional event logs with a single case notion [7]. information systems that support
production, such as sap, store information in the related tables of a database. in the
production planning module of sap, multiple objects (e.g., planned order, supplier,
product, component, and delivery) are involved. each planned order consists of many
products, each comprising a range of components (e.g., based on the bom a car is com-
posed of the frame, engine, battery, etc.). accordingly, we are able to study the process
from multiple different angles and dimensions. extracted event logs from sap systems
usually suffer from convergence anddivergence [7]. these two problems are of high
importance to discuss, because they cause challenges in applying process mining tech-
niques, e.g., process discovery, on these event logs. to illustrate these two problems, as
an example, consider the simpliﬁed process of production planning shown in figure 16
with three case notions (i.e., planned order, component, and product) and three activities
(i.e., place order, conﬁrm products, check the inventory), respectively. the mentioned
problems in this process are:
–convergence: events referring to multiple objects of the selected type are repli-
cated, possibly leading to unintentional duplication [7]. for example, an order may20 w. van der aalst et al.
contain many products and each product may contain different components. as-
sume that there is an order comprising 10 products, e.g., cars. in order to apply
classical process mining techniques, we need to ﬂatten the event data by picking a
case notion. if we select the product as a case notion, then this leads to 10 replica-
tions of the same place order event. the duplication of events for different cases
may lead to an explosion of the number of events. moreover, when time and costs
are associated to events, this may lead to very misleading insights in object-centric
event logs, an event may contain references to many objects of the same case no-
tion, thus avoiding the duplication problem.
–divergence: events referring to different objects of a type not selected as the case
notion are considered to be causally related but are executed independently [7].
assume that we pick order as a case notion (to avoid convergence problems). a
single order may contain multiple products and each product may contain differ-
ent components. however, there are activities executed for a single product or a
single component, e.g., check inventory. many check inventory events may refer to
the same order although they actually independent and refer to different objects.
since we picked order as a case notion, these events cannot be disentangled, typ-
ically leading to spaghetti models. things that happen in a strict order for both
components and products become blurred when using a coarser case notion.
 planned order
(100)1…*
place planned order
(100)product
(1000 )
confirm product
(1000 )check  inventory
(10000 )component
(10000 )1
1
1 11
111 1…*
1
11…*
1...* 11 1…*
1…*
fig. 16: overview of the relationship among case notions (i.e., planned order, product,
andcomponent ) and activities (i.e., place planned order, conﬁrm product, and check
inventory). for example, there is one-to-one relationship between planned order and
place planned order and one-to-many relationship between planned order andproduct.
object-centric process mining aims to provide a solution for the aforementioned
challenges. the interest in this subdiscipline is rapidly increasing, because organiza-
tions are in need of a more holistic way to interact with event logs extracted from in-
formation systems [15, 34, 28]. several techniques were developed to deal with object-
centric event logs for process analysis:
–extracting object-centric event logs from information systems: this includes sev-
eral contributions related to the storage format and some work on the extraction
from sap logs or erp systems in general [15, 34, 48].removing operational friction using process mining 21
place planned 
order
check inventory
confirm products
pay planned orderga 0ga 1ga 2 create a delivery
track the shipment
complete deliveryplanned 
order   product
                 component
planned 
ordercomponent
 productdelivery
delivery
fig. 17: directly-follows multigraph for the case notions order, product, component,
and delivery. a fragment of the production line is captured that consists of the stations
ga1, ga2, and ga3.
–discovering process models from object-centric event logs: artifact-centric mod-
eling is an approach to model processes with multiple case notions by combining
process and data [22, 35]. the techniques proposed based on the artifact-centric
process modeling do not show the process as a whole. therefore, in [27] a dis-
covery algorithm was proposed to discover object-centric behavioral constraints
(ocbc) models from object-centric event logs. these models show interactions
between the data and behavioral perspectives on the attribute level in one diagram.
the main challenge of ocbc is scalability and complexity, which led to the devel-
opment of mvp (multiple viewpoint) models. mvp models are directly-follows
graphs (dfg) with colored arcs annotated by frequency and performance infor-
mation. mvp models show the process model without omitting any of the case
notions [15]. mvp models cannot capture concurrency well and the diagnostics
may be misleading. this led to the development of techniques to discovered col-
ored petri nets. object-centric petri nets are another type of object-centric process
models that can be extracted from object-centric event logs and provide the execu-
tion semantics [9].
a baseline discovery model for object-centric processes is the directly-follows
multigraph, inspired by dfgs [7]. dfgs are graphs where the nodes represent activi-
ties or events in the event log. nodes are connected through edges if there is at least one
case in the event log where the source event or activity is followed by the target event or
activity [5]. for generating directly-follows multigraph, we merge the dfgs that are22 w. van der aalst et al.
generated for each case notion into an overall dfg where the arcs with different colors
correspond to different case notions. in figure 17, a directly-follows multigraph for
the extended model of the car factory with multiple case notions (e.g., planned order,
products, component, and delivery), is shown. following the green arcs, the order goes
through place planned order, check inventory, conﬁrm products, and pay order. the
product and component enter the production line which consists of the stations ga0,
ga1, and ga2. the component leaves the production line at the last station (ga2),
while the last step for any product is complete delivery.
using object-centric process models such as directly-follows multigraph shown in
figure 17, we gain insights into object-centric processes. however, techniques devel-
oped for object-centric process mining can still focus on single location, time period,
or process variant. there may exist multiple variants of the same process, which moti-
vates the use of process comparison techniques such as process cubes, supporting the
analysis of object-centric event logs. to adapt the concept of process cube operations
to object-centric process mining is not trivial since an event may refer to any number
of objects. slicing for dimensions related to case notions may lead to convergence and
divergence problems. for example, events related to a speciﬁc component also contain
other components. dicing suffers from the same problem. therefore, traditional pro-
cess cubes cannot handle object-centric event logs and it is worthwhile to bridge the
gap between process comparison approaches and object-centric process mining. this
needed to compare the processes in a more holistic setting.
7 forward-looking process mining
the value of process mining in analyzing the past is clear and widely accepted. how-
ever, just diagnosing the past is not a goal in itself. the actual goal is to continuously
improve processes and respond to changes. operational processes are subject to many
changes, e.g., a sudden increase in the number of orders, and therefore the managers
require an extended vision of the future in order to deal with changes in the process.
due to the high cost of operational processes, in the face of deliberate changes in or-
der to improve the operational processes performance or unexpected changes, having
the ability to look forward is of paramount importance. simulation is capable of en-
abling process mining to look forward. at the same time, data-driven support provided
by process mining, e.g., past executions of the process and process model, can make
the simulation models more realistic. in order to answer forward-looking questions re-
garding the future of processes using process mining, the ﬁrst step is to demonstrate
how process mining and simulation can complement each other. the knowledge gained
about the process (including the discovered process model and the current performance
of the process) can be used to predict future states of the running cases (e.g., the re-
maining ﬂow time) under the assumption of a stable process, i.e., no changes in the pro-
cess. however, process mining is backward looking and cannot be used for “what if?”
questions. hence, process mining and simulation perfectly complement each other [6].
among the different simulation techniques, we consider two different approaches: dis-
crete event simulation or system dynamics simulation. these techniques are both able toremoving operational friction using process mining 23
model the operational processes at different levels of detail by capturing process events
and variables.
7.1 discrete event simulation
one of the well-known simulation techniques which can be used for simulating oper-
ational processes is discrete event simulation (des). des uses predeﬁned rules ac-
cording to which the simulation process generates events. whenever an event occurs,
the state of the system changes and the new state is recorded. each state enables new
events. each possible way is described by a simulation run which shows the result of
the play-out of the model [6]. tools such as coloured petri nets (cpns) can be used for
simulating a process including all the details of a process, e.g., number of resources for
each activity and duration of each activity [43]. predeﬁned key performance indicators
such as average waiting time for each process instance can be calculated and compared
in different situations by redesigning the simulation models and experiments [6]. de-
spite the capable simulation tools along with the provided forward-looking approaches,
the real-life application of simulation is limited [4]. detailed simulation models like
des may be very time-consuming to build. interpreting simulation results is not an
easy task and often models need to be tuned to behave similar to the real process (coffee
breaks, visits to the toilet, holidays, illness, etc. lead to lower performance than expected
based on the initial simulation model). furthermore, simulation models tend to capture
only some aspects of a process or use an oversimpliﬁed model of reality [1]. therefore,
organizations try to use the evidence-based approaches in which the previously cap-
tured state of the organization can be used for more accurate simulation models [6]. in
order to achieve more realistic results using simulation techniques, different approaches
have been proposed [45, 46].
discrete event simulation (des) requires considerable domain knowledge of the
process. for instance, to answer the forward-looking question for our example produc-
tion line, we need to implement all the details of the production line to see the effect of
inventory options for one of the stations on the overall production line. also, it is not
easy to consider the context in which the simulation is running [10]. incorporating ef-
fects of external factors in the models, e.g., human behaviors or environmental variables
are other aspects that are missing from current simulation techniques in processes [39].
moreover, selecting the right level of abstraction and avoiding too much detail are other
important aspects of creating a simulation model and performing simulation. unfortu-
nately, the inherently required level of detail in these types of approaches does not allow
for high-level modeling and long-term predictions. as opposed to the existing simula-
tion techniques, system dynamics (sd) allows us to assess the impact of changes in
the process from a global perspective as well as the effects of external factors. using
different levels of granularity in the modeling, we can address the major drawbacks of
discrete event simulation techniques. therefore, the goal is to assess and predict the
future behavior of operational processes including the effects of potential changes as
well as the roles of external factors, e.g., human behavior at an aggregated level.24 w. van der aalst et al.
number of cars
in the production
line
 arrival
rate
production
rateaverage production
duration
fig. 18: a sample stock-ﬂow diagram for the running example. the value of the stock
number of cars in the production line is calculated from the value of arrival rate and
production rate as ﬂows per time step, e.g., per day. also, the value of the production
rateis affected by the value of average production duration.
information 
systems /real-life 
processes
event logs
(real)
simulation 
(“what -if?”)
feature 
extraction 
system dynamics logs
system 
dynamics logs 
generator
preprocessing
system 
dynamics model 
generator
simulation 
/validation
performance 
diagnostics
fig. 19: a general framework for using process mining and simulation for improving
operational processes. using event logs and transforming them to system dynamics
logs (sd-logs) along investigating the relations between different parameters in the
process over time, the simulation regarding answering “what if?” questions is possible.
7.2 system dynamics
system dynamics (sd) techniques are used to model dynamic systems and their rela-
tions with their environment. using system dynamics, the factors affecting a system’s
behavior are captured [50]. stocks, ﬂows and variables are fundamental elements in
modeling a system as a stock-ﬂow diagram, i.e., one of the main system dynamics dia-
grams. figure 18 shows a simple stock-ﬂow diagram for the running example in which
arrival rate andproduction rate as ﬂows add/remove to/from the values of number of
cars in the production line as stock, also, average production duration (a variable) af-
fects production rate. system dynamics provide the opportunity to add exogenous fac-
tors, e.g., variables in stock-ﬂow diagrams as well to capture the hidden relationships
among the players in the operational processes [39]. as shown in figure 1, different
executions of operational processes that are stored in the information systems can be
captured in the form of event logs. the provided event logs for operational processes
can be transformed in other formats to be used as inputs for simulation techniques.
these transformed event logs include the performance metrics of the processes over
different time steps, e.g., arrival rate, average service time and the number of waiting
items over steps of time in the process [41].
the authors in [42] exploit the general proposed approach in [39], i.e., a simulation
approach for the business process using system dynamics and process mining tech-removing operational friction using process mining 25
fig. 20: a sample stock-ﬂow diagram generated based on the production line event log.
the purpose of the model is to simulate the effect of adding an inventory option to the
doors sub-assembly on the ﬁnal production rate of the production line at an aggregated
level, e.g., per month.
niques, which is designed for the speciﬁc purpose of simulating the production lines
w.r.t performance metrics. therefore, as shown in figure 19, for operational processes,
the simulation model in the form of a system dynamics model using trained variables
based on event logs can be generated. we use system dynamics and process mining
together to answer “what if?” questions, e.g., what will happen if we add one more
resource to one of the stations? we transform the generated event log into a system
dynamics log (sd-log) which describes the values of a collection of variables of the
process over time using the time window selection technique in [40]. then, we use
the calculated values of the variables to detect the relationships between metrics and
generating a stock-ﬂow diagram which is used for simulation [41].
7.3 forward-looking in production lines
as indicated in section 3, the stations in the base model do not have an inventory or
queuing option. as a simpliﬁed example, consider the station ga24, at which the cars
at this station require the doors prepared in sa7, i.e., a door preparation sub-assembly
station. therefore, in the production line, there can be situations in which a car is at
the station ga24 and cannot leave the station because it is waiting for the doors to be
prepared. one of the scenarios to improve the above-mentioned situation is to prepare
the doors for each car beforehand and keep them at the sub-assembly station. the pos-
sibility of having a temporary queue, especially for sub-assembly stations, is one of the
possible actions which potentially leads to an improved production rate of the whole
production line. the question to be answered is: how does the temporary queue for the
door assembly stations affect the overall production line? using the approach presented
in [38], we can measure the effect of adding an inventory option to only one of the sub-
assembly stations at the production rate of the whole production line. we do not need
to consider the details required by des approaches.
we also populate the generated simulation model, i.e., the stock-ﬂow diagram, with
the values generated from the event log of the current status of the production line.
we use the data generated in a regular situation in which there is no inventory option26 w. van der aalst et al.
100110120130140150160170180
jun jul aug sep octnumber of produced cars per monthsimulation results
the effect of inventory option on the production rate
pr (without inventory) cpr (with inventory)
fig. 21: a comparison between the actual production rate (pr) and the simulated pr
using our approach along actually changed production rate (cpr) and simulated cpr
for adding an inventory to the doors sub-assembly, e.g., in august 3 more cars will be
produced.
for the sub-assembly station, and after transforming it to the system dynamic log, we
generate the model using the proposed approach in figure 19. the result of simula-
tion after adding the inventory option is shown in figure 21. as expected, the whole
production rate has increased and the production line manager can decide whether to
invest in adding the possibility to keep inventory for the door preparation sub-assembly
station. the described scenario shows the potential of using a combination of process
mining and sd-based simulation in order to improve operational processes. using pro-
cess mining and simulation techniques we are able to answer “what if?” questions in
the operational processes.
8 conclusion
in this paper, we discussed how process mining can be used to remove operational fric-
tion(e.g., rework, delays, waste, and deviations). we discussed the capabilities provided
by existing tools and highlighted some of the main challenges addressed in the dfg-
funded cluster of excellence “internet of production” (iop). process mining is widely
used to improve standard processes like the order-to-cash (o2c) and the purchase-to-
pay (p2p). however, in other areas (e.g., in production, materials handling, and logis-
tics) process mining is not yet widely used. we believe that by addressing the challenges
discussed in this paper, adoption can be accelerated.
we highlighted three important research directions: comparative process mining,
object-centric process mining, and forward-looking process mining.
comparative process mining aims to visualize and show root causes for differences
over time or between different organizational units (e.g., two factories producing the
same or similar products). it is valuable to identify differences and generate insights.
these may help to detect problems early (e.g., using concept-drift detection) and estab-removing operational friction using process mining 27
lish so-called “best practices” (i.e., routines that are considered to be correct or most
effective).
object-centric process mining addresses one of the main limitations of today’s pro-
cess mining tools. in many applications it is not reasonable to assume a single case
notion. consider for example the bill of materials (bom) in an assembly process. a
single car has about 2000 parts (or even up to 50,000 parts, counting every part down
to the smallest screws). when an engine is produced it may not be clear in what type
of car it will end up. both the car and the engine have unique identiﬁers are are related
somewhere in the process. this example shows that assuming a single case notion au-
tomatically leads to a particular view on the process. such views are valuable, but at the
same time incomplete and potentially misleading. object-centric process mining can
be used to provide a more holistic view, also avoiding the convergence and divergence
problems described.
forward-looking process mining techniques aim to not only diagnose performance
and compliance problems in the past, but to predict and change processes. we are par-
ticularly interested in answering “what if?” questions. therefore, simulation plays an
important role. next to traditional discrete event simulation (des), we also proposed
the use of system dynamics (sd). sd tools simulate the process at a higher abstrac-
tion level (i.e., the steps are days or weeks rather than individual events). to learn sd
models we need to convert traditional event logs to sd-logs. this is far from trivial,
but allows extending the model with contextual factors that are not directly related to
individual events.
we strongly believe that progress in comparative process mining, object-centric pro-
cess mining, and forward-looking process mining will assist in the creation of realistic
digital shadows that can be used to manage, control, and improve operational processes.
digital shadows based on process mining include both process models and actual event
data. the combination of process models and actual event data allows us to drill-down
into the actual process when a problem emerges, predict the trajectory of current process
instances, and anticipate the effects of interventions (e.g., adding resources or reorder-
ing production steps).
acknowledgments funded by the deutsche forschungsgemeinschaft (dfg, german
research foundation) under germany’s excellence strategy–exc-2023 internet of
production – 390621612. we also thank the alexander von humboldt (avh) stiftung
for supporting our research.
references
1. van der aalst, w.m.p.: business process simulation revisited. in: enterprise and organiza-
tional modeling and simulation. lecture notes in business information processing, vol. 63,
pp. 1–14. springer-verlag berlin heidelberg (2010)
2. van der aalst, w.m.p.: process cubes: slicing, dicing, rolling up and drilling down event
data for process mining. in: asia paciﬁc business process management. pp. 1–22. springer
international publishing (2013)28 w. van der aalst et al.
3. van der aalst, w.m.p.: how people really (like to) work. in: human-centered software
engineering. lecture notes in computer science, vol. 8742, pp. 317–321. springer-verlag
berlin heidelberg (2014)
4. van der aalst, w.m.p.: business process simulation survival guide. in: handbook on busi-
ness process management 1, pp. 337–370. international handbooks on information systems,
springer-verlag berlin heidelberg (2015)
5. van der aalst, w.m.p.: process mining: data science in action. springer-verlag berlin hei-
delberg, 2 edn. (2016)
6. van der aalst, w.m.p.: process mining and simulation: a match made in heaven! in: pro-
ceedings of the 50th computer simulation conference. pp. 4:1–4:12. summersim ’18, so-
ciety for computer simulation international (2018)
7. van der aalst, w.m.p.: object-centric process mining: dealing with divergence and con-
vergence in event data. in: software engineering and formal methods. lecture notes in
computer science, vol. 11724, pp. 3–25. springer international publishing (2019)
8. van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on process
models for conformance checking and performance analysis. wires data mining and
knowledge discovery 2(2), 182–192 (2012)
9. van der aalst, w.m.p., berti, a.: discovering object-centric petri nets. fundamenta infor-
maticae 175(1-4), 1–40 (2020)
10. van der aalst, w.m.p., dustdar, s.: process mining put into context. ieee internet comput-
ing16(1), 82–86 (2012)
11. van der aalst, w.m.p., kumar, a., verbeek, h.: organizational modeling in uml and xml
in the context of workﬂow systems. in: sac ’03: proceedings of the 2003 acm sympo-
sium on applied computing. pp. 603–608. association for computing machinery (2003)
12. van der aalst, w.m.p., weijters, t., maruster, l.: workﬂow mining: discovering process
models from event logs. ieee transactions on knowledge and data engineering 16(9),
1128–1142 (2004)
13. adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: towards robust conformance
checking. in: business process management workshops. lecture notes in business infor-
mation processing, vol. 66, pp. 122–133. springer-verlag berlin heidelberg (2011)
14. badouel, e., bernardinello, l., darondeau, p.: petri net synthesis. texts in theoretical com-
puter science. an eatcs series, springer berlin heidelberg (2015)
15. berti, a., van der aalst, w.m.p.: extracting multiple viewpoint models from relational
databases. in: data-driven process discovery and analysis. lecture notes in business in-
formation processing, vol. 379, pp. 24–51. springer international publishing (2019)
16. bolt, a., van der aalst, w.m.p.: multidimensional process mining using process cubes. in:
enterprise, business-process and information systems modeling. lecture notes in business
information processing, vol. 214, pp. 102–116. springer international publishing (2015)
17. bolt, a., de leoni, m., van der aalst, w.m.p., gorissen, p.: exploiting process cubes, an-
alytic workﬂows and process mining for business process reporting: a case study in ed-
ucation. in: data-driven process discovery and analysis. ceur workshop proceedings,
vol. 1527, pp. 33–47. ceur-ws.org (2015)
18. bose, r.p.j.c., van der aalst, w.m.p., zliobaite, i., pechenizkiy, m.: handling concept drift
in process mining. in: advanced information systems engineering. lecture notes in com-
puter science, vol. 6741, pp. 391–405. springer-verlag berlin heidelberg (2011)
19. bose, r.p.j.c., van der aalst, w.m.p., zliobaite, i., pechenizkiy, m.: dealing with concept
drifts in process mining. ieee transactions on neural networks and learning systems
25(1), 154–171 (2014)
20. chen, c., yan, x., zhu, f., han, j., yu, p.s.: graph olap: a multi-dimensional framework
for graph data analysis. knowledge and information systems 21(1), 41–63 (2009)removing operational friction using process mining 29
21. chinosi, m., trombetta, a.: bpmn: an introduction to the standard. computer standards
and interfaces 34(1), 124–134 (2012)
22. cohn, d., hull, r.: business artifacts: a data-centric approach to modeling business op-
erations and processes. ieee data engineering bulletin 32(3), 3–9 (2009)
23. dobrushin, r.l.: deﬁnition of a system of random variables by conditional distributions.
teoriya veroyatnostei i ee primeneniya 15, 469–497 (1970)
24. ter hofstede, a.h.m., van der aalst, w.m.p., adams, m., russell, n. (eds.): modern busi-
ness process automation: yawl and its support environment. springer-verlag berlin hei-
delberg (2010)
25. hompes, b., buijs, j.c.a.m., van der aalst, w.m.p., dixit, p.m., buurman, h.: detecting
change in processes using comparative trace clustering. in: data-driven process dis-
covery and analysis. ceur workshop proceedings, vol. 1527, pp. 95–108. ceur-ws.org
(2015)
26. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured process
models from incomplete event logs. in: application and theory of petri nets and con-
currency. lecture notes in computer science, vol. 8489, pp. 91–110. springer international
publishing (2014)
27. li, g., de carvalho, r.m., van der aalst, w.m.p.: object-centric behavioral constraint
models: a hybrid model for behavioral and data perspectives. in: proceedings of the 34th
acm/sigapp symposium on applied computing. pp. 48–56. sac ’19, association for
computing machinery (2019)
28. li, g., de murillas, e.g.l., de carvalho, r.m., van der aalst, w.m.p.: extracting object-
centric event logs to support process mining on databases. in: information systems in
the big data era. lecture notes in business information processing, vol. 317, pp. 182–199.
springer international publishing (2018)
29. li, x., han, j.: mining approximate top-k subspace anomalies in multi-dimensional
time-series data. in: proceedings of the 33rd international conference on very large data
bases. pp. 447–458. vldb ’07 (2007)
30. liebenberg, m., jarke, m.: information systems engineering with digital shadows: con-
cept and case studies. in: advanced information systems engineering. lecture notes in
computer science, vol. 12127, pp. 70–84. springer international publishing (2020)
31. liu, m., rundensteiner, e.a., greenﬁeld, k., gupta, c., wang, s., ari, i., mehta, a.: e-cube:
multi-dimensional event sequence processing using concept and pattern hierarchies. in:
ieee 26th international conference on data engineering. pp. 1097–1100. ieee computer
society (2010)
32. maaradji, a., dumas, m., rosa, m.l., ostovar, a.: fast and accurate business process drift
detection. in: business process management. lecture notes in computer science, vol. 9253,
pp. 406–422. springer international publishing (2015)
33. mamaliga, t.: realizing a process cube allowing for the comparison of event data. mas-
ter’s thesis, eindhoven university of technology, eindhoven (2013)
34. de murillas, e.g.l., reijers, h.a., van der aalst, w.m.p.: case notion discovery and recom-
mendation: automated event log building on databases. knowledge and information systems
62(7), 2539–2575 (2020)
35. narendra, n.c., badr, y ., thiran, p., maamar, z.: towards a uniﬁed approach for business
process modeling using context-based artifacts and web services. in: 2009 ieee interna-
tional conference on services computing. pp. 332–339. ieee computer society (2009)
36. ostovar, a., leemans, s.j.j., rosa, m.l.: robust drift characterization from event streams
of business processes. acm transactions on knowledge discovery from data 14(3), 30:1–
30:57 (2020)30 w. van der aalst et al.
37. ostovar, a., maaradji, a., la rosa, m., ter hofstede, a.h.m.: characterizing drift from
event streams of business processes. in: advanced information systems engineering. pp.
210–228. springer international publishing (2017)
38. pourbafrani, m., van der aalst, w.m.p.: pmsd: data-driven simulation using system dy-
namics and process mining. in: bpm 2020 best dissertation award, doctoral consortium,
and demonstration & resources track. pp. 77–81. ceur-ws.org (2020)
39. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: scenario-based prediction of busi-
ness processes using system dynamics. in: on the move to meaningful internet systems.
otm 2019 conferences. pp. 422–439. springer international publishing (2019)
40. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: semi-automated time-granularity
detection for data-driven simulation using process mining and system dynamics. in: con-
ceptual modeling - 39th international conference, er (2020)
41. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting automatic system dy-
namics model generation for simulation in the context of process mining. in: business
information systems. pp. 249–263. springer international publishing (2020)
42. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting decisions in production
line processes by combining process mining and system dynamics. in: intelligent human
systems integration 2020. advances in intelligent systems and computing, vol. 1131, pp.
461–467. springer international publishing (2020)
43. ratzer, a.v ., wells, l., lassen, h.m., laursen, m., qvortrup, j.f., stissing, m.s., wester-
gaard, m., christensen, s., jensen, k.: cpn tools for editing, simulating, and analysing
coloured petri nets. in: applications and theory of petri nets 2003. lecture notes in com-
puter science, vol. 2679, pp. 450–462. springer-verlag berlin heidelberg (2003)
44. ribeiro, j.t.s., weijters, a.j.m.m.: event cube: another perspective on business processes.
in: on the move to meaningful internet systems: otm 2011. lecture notes in computer
science, vol. 7044, pp. 274–283. springer-verlag berlin heidelberg (2011)
45. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation models.
information systems 34(3), 305–327 (may 2009)
46. rozinat, a., wynn, m.t., van der aalst, w.m.p., ter hofstede, a.h.m., fidge, c.j.: work-
ﬂow simulation for operational decision support. data & knowledge engineering 68(9),
834–850 (sep 2009)
47. rubner, y ., tomasi, c., guibas, l.j.: the earth mover’s distance as a metric for image
retrieval. international journal of computer vision 40(2), 99–121 (2000)
48. simovi ´c, a.p., babarogi ´c, s., panteli ´c, o.: a domain-speciﬁc language for supporting
event log extraction from erp systems. in: 7th international conference on computers
communications and control. pp. 12–16. ieee (2018)
49. song, m., van der aalst, w.m.p.: supporting process mining by showing events at a glance.
in: wits 2007 - proceedings, 17th annual workshop on information technologies and
systems. pp. 139–145 (december 2007)
50. sterman, j.d.: business dynamics: systems thinking and modeling for a complex world.
mcgraw-hill (2002)
51. weijters, a.j.m.m., van der aalst, w.m.p.: rediscovering workﬂow models from event-
based data using little thumb. integrated computer-aided engineering 10(2), 151–162
(apr 2003)