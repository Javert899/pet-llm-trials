towards reliable business process simulation:
a framework to integrate erp systems
gyunam park and wil m.p. van der aalst 
process and data science group (pads), department of computer science,
rwth aachen university, aachen, germany
{gnpark ,wvdaalst}@pads.rwth-aachen.de
summary. a digital twin of an organization (dto) is a digital replica-
tion of an organization used to analyze weaknesses in business processes
and support operational decision-making by simulating diﬀerent scenar-
ios. as a key enabling technology of dto, business process simulation
provides techniques to design and implement simulation models that
replicate real-life business processes. existing approaches have been fo-
cusing on providing highly ﬂexible design tools and data-driven evidence
to improve the accuracy of simulation models. provided with such tools
and evidence, business analysts are required to reﬂect comprehensive as-
pects of reality with subjective judgments, including the design of erp
systems and the organizational interaction with the system. however,
given the complexity of erp systems, it is infeasible and error-prone to
manually incorporate the business logic and data restrictions of the sys-
tem into simulation models, impeding the faithfulness and reliability of
the following analysis. in this work, we propose a framework to integrate
erp systems in business process simulation to overcome this limitation
and ensure the reliability of the simulation results. the framework is
implemented in prom using the sap erp system and cpn tools.
key words: digital twin, business process simulation, erp systems,
business process improvement, process mining
1 introduction
a digital twin of an organization (dto) is a digital representation of business
processes and assets across an organization. by simulating this mirrored repre-
sentation, business analysts can identify operational frictions in the organization
with data-based analytics like process mining [ 1] and evaluate the eﬃciency of
the decisions that are too expensive or dangerous to experiment with, e.g., as-
signing more resources to a task and increasing the capacity of machines.
business process simulation is a key enabling technology of dtos. a simula-
tion model represents reality in a simpliﬁed manner and generates hypothetical
instances of the business process, enabling the simulation of various scenarios
and “what-if” analysis. many tools have been developed to support the design
and implementation of simulation models, including arena and cpn tools [ 2].2 gyunam park and wil m.p. van der aalst
the successful implementation of dtos using business process simulation re-
lies on how accurately the simulation model represents reality. especially, given
the increasing relevance of enterprise resource planning (erp) systems in or-
ganizations, it is essential to accurately model the business logic and data re-
striction of erp systems (e.g., sap, salesforce, and microsoft dynamics).
traditional simulation approaches left them to the subjective judgments by
domain experts, focusing on providing easy-to-use design tools with high ﬂexi-
bility in the implementation. despite the ﬂexible design tools, it is infeasible and
error-prone to design and implement simulation models reﬂecting the complex
design of erp systems, making the simulation results unconvincing and unre-
liable [ 3]. for instance, the sap erp system may produce over 2,821 diﬀerent
errors for violations of the business logic and data restrictions.
the violations mainly happen in two formats: omission andcommission [3].
the former occurs when simulation models fail to reﬂect the behaviors required
by the system. for instance, in the sap erp system, each material has a dif-
ferent warehouse management policy, thus having diﬀerent control ﬂows (i.e.,
sequences of tasks). although diﬀerent control ﬂows should be modeled depend-
ing on the policy, simulation models often omit it, resulting in a huge diﬀerence
in the simulated behaviors. on the other hand, the commission problem oc-
curs when simulation models simulate the behaviors not allowed in the system.
for instance, erp systems are established upon data restrictions, limiting arbi-
trary creations, deletions, and updates of data. for instance, price changes (i.e.,
updates of price information) are not allowed for speciﬁc types of items, even
though simulation models often ignore this data restriction.
in this work, we propose a framework to integrate erp systems to business
process simulation to 1) eﬀectively incorporate the complex design of the sys-
tem into simulations without modeling it in simulation models and 2) provide
simulated event data without the omission and commission issues. figure 1 con-
ceptually describes how the proposed framework integrates erp systems into
business process simulation and how it realizes dtos.
fig. 1: a conceptual overview of integrating erp systems in business process simu-
lation
as shown in figure 1 , erp systems consist of three layers: representation,
application, and database layers. in reality, human resources interact with the
system through the representation layer. the commands by human resources aretowards reliable business process simulation 3
processed according to the business logic deﬁned in the application layer, whose
records are stored in the database layer. event data, e.g., object-centric event
logs (ocel)1, are extracted from the database layer and used for analysis, e.g.,
process discovery and root-cause analysis.
in the proposed framework, simulation models, designed by analyzing inter-
actions in the presentation layer, produce commands replicating the behaviors
of human resources. we execute the commands directly in the application layer
of the erp system, ensuring the non-existence of the omission and commission
problems. the simulated event data are extracted from the database layer in the
same manner that real-life event data are extracted. the simulated data may
provide feedback to improve the design of the simulation model and adapt the
model to changing circumstances.
since the simulated and real-life data are extracted from the same database
in the same manner, they can be analyzed using the same process mining tool.
besides, they support action-oriented process mining [ 4], which transforms in-
sights from diagnostics to actions, by monitoring the undesired behaviors using
real-life data and evaluating the eﬀects of actions using simulated data (e.g.,
a/b testing between diﬀerent actions).
to show the eﬀectiveness of the proposed framework, we implement it us-
ing the sap erp system and cpn tools. we have tested the implementation
by simulating common scenarios in the order-to-cash process of the sap erp
system and extracting process-centric insights from simulated event data.
the remainder is organized as follows. we discuss the related work in sect. 2 .
next, we present the framework for integrating erp systems into business pro-
cess simulation and its implementation in sect. 3 andsect. 4 , respectively. sect. 5
presents the validation of the framework and sect. 6 concludes the paper.
2 related work
simulation has been adopted for analyzing business processes since the seven-
ties [ 5]. nowadays, various simulation tools are available to design and imple-
ment simulation models. in [ 6], the simulation tools are classiﬁed into two types:
simulation language andsimulation package . the former is a programming lan-
guage supporting the implementation of simulation models, including simula
and gpss [ 7]. the latter is a tool providing graphical building blocks to enable
the rapid creation of simulation models such as arena and cpn tools [ 8].
data-driven approaches have been proposed to provide conceptual guidance
to design simulation models. martin et al. [ 9] identify modeling tasks (e.g., mod-
eling gateways, modeling activities, etc.) and present the relevant process mining
techniques to support each of the modeling tasks. in [ 10], authors utilize the
process model discovered using process mining techniques as the reference for
the current state of the process and design simulation models with re-engineered
1http://ocel-standard.org/4 gyunam park and wil m.p. van der aalst
business processes by manually identifying the possible improvement points from
the reference model.
furthermore, several techniques have been suggested to automatically dis-
cover simulation models from event data. rozinat et al. [ 11] discover simula-
tion models based on colored petri nets (cpns) in a semi-automated manner.
carmargo et al. [ 12] propose a method to optimize the accuracy of the simula-
tion models discovered from an event log. it searches the space of all possible
conﬁgurations in the simulation model to maximize the similarity between the
discovered simulation model and the event log.
the existing approaches have focused on improving the accuracy by support-
ing business analysts to better reﬂect reality in simulation models using domain
knowledge and data-driven insights. however, the question still remains: is the
simulated behavior the one that can be supported (accepted) by the underlying
erp systems? since the approaches do not explicitly involve the system in sim-
ulations, business analysts are left to ensure it with their subjective judgments.
in this work, we tackle this question by proposing a framework to integrate erp
systems in the course of business process simulation.
3 a framework for the integration of erp systems
the proposed framework consists of three major components: erp system ,sim-
ulation engine and transformation engine . the erp system creates, updates,
and deletes objects in object model based on executions . the simulation engine
simulates organizational behaviors in business processes and produces commands
describing the behaviors. the transformation engine translates the commands
into the executions according to which the system updates the object model.
the behavior of the simulation may again depend on the updated object model.
in the following, we explain the framework with formal deﬁnitions and examples.
3.1 erp system
in this work, we deﬁne erp systems in a narrow sense, focusing on its book-
keeping purpose (i.e., creating, updating, and deleting database tables based on
transactions). to this end, we ﬁrst abstract databases in the system as object
models .
fig. 2: we use object models to mimic the databases in erp systemstowards reliable business process simulation 5
as described in figure 2 , an object model contains objects (e.g., o1,o2, and
i1) with diﬀerent types (e.g., order ,item, and delivery ). also, the objects have
relationships (e.g., o1is related to i1). besides, each object involves attribute
values (e.g., order has doctype andcustomer information). we formally deﬁne
object models as follows:
deﬁnition 1 (object model). letuobe the universe of object identiﬁers, uot
the universe of object types, uattrthe universe of attribute names, and uvalis
the universe of attribute values. an object model is a tuple om = (o, ot, or,
otyp, oval )where
–o⊆uois a set of object identiﬁers,
–ot⊆uotis a set of object types,
–or⊆o×ois a set of object relationships,
–otyp∈o→otassigns precisely one object type to each object identiﬁer, and
–oval :o→(uattr↛ u val)is the function associating an object to its attribute
value assignments. we denote oval(o)(attr) =⊥ifattr /∈dom(oval(o))for
anyo∈o.
uomdenote the set of all possible object models.
for instance, om 1= (o, ot, or, otyp, oval )describes the object model de-
scribed in figure 2 , where o={o1, o2, i1, . . .},ot={order, item, delivery },
or={(o1, i1),(o1, i2),(i1, d1), . . .},otyp(o1) =order ,otyp(i1) =item,oval(o1)
(doct ype ) =standard ,oval(o1)(customer ) =christine , etc.
deﬁnition 2 (transaction). letupval⊆uattr↛ u valbe the universe of
parameter value assignments. a transaction tr∈uom×upval→uomis a
function that modiﬁes object models based on parameter value assignments. utr
denotes the set of all possible transactions.
for instance, po∈utris a transaction that places an order. assume that
pval 1∈upvalis a parameter value assignment such that pval 1(customer ) =
marco ,pval 1(doct ype ) = quoted ,pval 1(item ) = ip ad ,pval 1(quantity ) = 1 ,
etc.po(om 1, pval 1) = ( o′, ot, or′, otyp′, oval′)such that o3, i5∈o′,(o3, i5)∈
or′,otyp′(o3) =order ,otyp′(i5) =item,oval′(o3)(customer ) =marco , etc.
an execution speciﬁes a transaction to be executed in the system along with
the execution time, responsible resource, and parameter value assignment.
deﬁnition 3 (execution). leturesbe the universe of resources and utime the
universe of timestamps. an execution exec∈utr×ures×utime×upvalis a
tuple of a transaction, a resource, timestamp, and a parameter value assignment.
uexecdenotes the set of all possible executions.
for instance, exec 1= (po, adams, 10:00 23.02.2021 , pval 1)describes the order
placement by adams at10:00 23.02.2021 with the parameter pval 1.
deﬁnition 4 (erp system). an erp system sys∈uom×uexec→uom
updates object models according to executions.
for instance, sys(om 1, exec 1) = ( o′, ot, or′, otyp′, oval′)such that o3, i5∈
o′,oval′(o3)(timestamp ) = 10:00 23.02.2021 ,oval′(o3)(resource ) =adams , etc.6 gyunam park and wil m.p. van der aalst
3.2 simulation engine
a simulation engine aims at producing commands describing which activity is
done by whom at what time with what information. we formally deﬁne com-
mands as follows:
deﬁnition 5 (commands). letuactbe the universe of activities. a command
cmd∈uact×ures×utime×upvalis a tuple of an activity, resource, timestamp,
and information value assignment. ucmdis the set of all possible commands.
for instance, cmd 1= (place_order ,adams ,10:00 23.02.2021 , ival 1)∈ucmd,
where ival 1(customer ) = marco and ival 1(price ) =e100, clones the behav-
ior of adams who places an order of e100 by marco at10:00 23.02.2021 .
since simulating behaviors of human resources (i.e., generating commands)
share commonalities to simulating events of business processes (e.g., placing
order occurred at 10:00 23.02.2021 byadams ), we can deploy techniques for business
process simulation to generate commands.
as presented in sect. 2 , various simulation tools are available for this pur-
pose such as cpn tools and arena. remaining tool-independent, we focus on
explaining essential components of simulation models to produce commands. in
sect. 4 , we explain how these components are designed and implemented using
cpn tools.
fig. 3: core components of business process simulation [ 6]
figure 3 explains the core ingredients of business process simulation includ-
ingcontrol-ﬂows ,resource assignments ,arrival processes , and activity duration ,
object assignments and object value assignments . below is the explanation of
each component:
–activities represent the behaviors that human resources do to serve business
processes (e.g., place order, send invoice, etc.).
–control-ﬂows determine the sequence of activities. for instance, the process
model in figure 3 describes one sequence of activities, i.e., send_quotation ,towards reliable business process simulation 7
place_order ,create_delivery ,pack_items ,create_invoice , and clear_invoice
in order.
–object requirements explain the required objects for the execution of activ-
ities. each activity may involve multiple objects in its execution. for instance,
the execution of create_delivery involve an order and a delivery since the order
information is required to create the delivery.
–value assignment speciﬁes how the execution of activities updates infor-
mation of the involved objects. for instance, the execution of place_order
updates the document and customer information of the order.
–resource assignments deﬁne who is eligible to perform activities in the
business process. for instance, place_order can be performed by the resources
from a sales department.
–arrival processes andactivity duration deﬁne the inter-arrival time be-
tween arrivals and the duration required for the execution of activities, respec-
tively.
3.3 transformation engine
the goal of the transformation engine is to convert the commands to the exe-
cutable formats supported in the underlying erp system (i.e., executions). to
this end, we need two components: transaction mapping and parameter map-
ping. first, the transaction mapping translates the activity in commands to the
transaction deﬁned in erp systems.
deﬁnition 6 (transaction mapping). a transaction mapping µtr∈uact→
utrrelates transactions to activities.
assume place_order incmd 1corresponds to po∈utrin an erp system. a
transaction mapping µ′
trconnects them, i.e., µ′
tr(place_order ) =po.
next, parameter mapping connects the parameters in commands to the
system-deﬁned parameters in erp systems.
deﬁnition 7 (parameter mapping). a parameter mapping µpr∈uattr→
uattrrelates system-deﬁned parameters of an erp system to parameters in com-
mands.
assume dom(ival 1) ={doct ype, customer }where (place_order ,adams , t1,
ival 1)∈ucmdand doc_type and part_numb are the corresponding parameters
deﬁned in the system. a parameter mapping µ′
prconnects the parameters, i.e.,
µ′
pr(doctype ) = doc_type andµ′
pr(customer ) = part_numb .
given transaction and parameter mapping, a transformation engine trans-
forms commands to executions by translating transactions and parameters. pro-
duces the executions. note that we assume that the resource/timestamp in com-
mands is compatible with the one in executions.
deﬁnition 8 (transformation engine). letµtrbe a transaction mapping
andµpra parameter mapping. a transformation engine maps executions onto
commands, i.e., for any cmd=(act, res, time, ival )∈ucmd,trans (µtr, µpr)(cmd)
= (µtr(act), res, time, pval )s.t.∀attr∈dom (ival )pval(µpr(attr)) = ival(attr).8 gyunam park and wil m.p. van der aalst
4 implementation
in this section, we implement the proposed framework using the sap erp sys-
tem as the underlying erp system. we design and implement simulation models
using cpn tools2. the transformation engine is implemented as a plug-in in
prom3and translates commands into executions in the sap erp system given
a transaction and parameter mapping.
4.1 erp system: sap erp ecc 6.0
the sap erp system is the most widely-adopted erp system, supporting more
than 400,000 businesses worldwide. in the implementation, we utilize sap erp
ecc 6.04supporting global bike inc., an imaginary enterprise producing and
distributing bicycle products where all relevant sap solutions are represented.
fig. 4: a screenshot of the user interface in the sap erp ecc 6.0 (place an order)
figure 4 shows the user interface in the representation layer where sales
staﬀ places orders. given the inputs such as customer, delivery date, and items
(i.e., parameters) by users (i.e., resources), the transactions in the application
layer (e.g., bapi_salesorder_createfromdat2 ) are executed to update the
database supported by oracle database management system (i.e., object mod-
els).
2https://cpntools.org/
3http://www.promtools.org
4https://www.sap.com/towards reliable business process simulation 9
4.2 simulation engine: cpn tools
cpn tools is a toolset providing support for editing, simulating, and analyzing
colored petri nets (cpns). for the detailed information of cpn tools , we refer
readers to [ 8].
in the following, we explain how cpn tools is used to implement the core
ingredients of business process simulation introduced in subsect. 3.2 with the
example described in figure 3 . note that there exist various design choices re-
sulting in diﬀerent executable models in cpn tools .
fig. 5: a schematic overview of the cpn used to implement our simulation framework
figure 5 shows the overall composition consisting of multiple cpn pages,
i.e.,overview page ,environment page ,process page , and activity pages .
the overview page connects the environment page, process page, and resource
pool. the environment page describes the arrival process implemented as a
negative exponential distribution. a simulation instance is generated according
to the arrival process and passed into the process page.
in the process page, relevant objects for the simulation instance are gener-
ated by transition “generate object” . in our example, each simulation instance
associates an order, a delivery, and an invoice. the transitions, including “po”,
“cd”, “pi”, and “si”, represent activities in the process.
theobject requirement for the execution of an activity is indicated with
the incoming arcs from the places representing object types to the corresponding
transition. for instance, “create delivery” involves an order and a delivery (i.e.,10 gyunam park and wil m.p. van der aalst
incoming arcs from the place for order type (i.e., o1) and the place for delivery
(i.e., d1) to “create delivery”).
control-ﬂows are represented using the semantics of cpns, i.e., a transition
is triggered by consuming tokens from its input places and producing tokens to
its output places. in our example, place_order is triggered ﬁrst by consuming a
token at o1and producing a token at o2. next, “create delivery” is triggered by
consuming tokens from o2andd1and producing tokens at o3andd2.
each transition has a sub-page (i.e., activity page) where resource assign-
ments andvalue mappings are modeled. first, in each execution of the tran-
sition, a resource is selected from the resource pool based on the role. next,
the relevant information for the execution of the activity (e.g., the customer
and document type in place_order ) is passed by the tokens from the connected
places.
activity duration is implemented as the timed property of cpn tools .
the activity duration is inscribed on the transition. for instance, the duration
of the place_order activity is populated from a normal distribution.
we generate commands using the designed cpns. below is an example of the
commands in xml-based cmd formats. in (act, res, time, ival )∈ucmd, lines
4-6 correspond to act,res, and time, while lines 7-12 specify ival.
listing 1: an example of cmd format
1 <?xml version ="1.0" encoding="utf −8"?>
2 <commands>
3 <command>
4 <a c t i v i t y >place_order </a c t i v i t y >
5 <resource >adams</resource >
6 <timestamp >2021 −02−23 10:00:00 </ timestamp>
7 <orderid >500004312</ orderid>
8 <customer >1032</customer>
9 <doctype> ta </doctype>
10 <salesorg >1000</salesorg>
11 <materiallist >p −101,p−103</materiallist >
12 <quantitylist >6,5</ quantitylist >
13 </command>
14 . . .
15 </commands>
4.3 transformation engine: prom plug-in
the transformation engine is implemented as a plug-in of prom , an open-source
framework for the implementation of process mining tools. our new plug-in is
available in a new package named erpsimulator in the nightly build of prom .
the main input objects of the plug-in are transaction mapping, parameter map-
ping, and commands, whereas the outputs are sap executions.
the transaction mapping is stored as an xml-based amap format, storing
relations between activities and transactions. below is an example of the transac-
tion mapping for the commands generated by the simulation engine described in
figure 5 . four activities in the simulation engine are assigned to corresponding
transactions deﬁned in the sap erp system.towards reliable business process simulation 11
listing 2: an example of amap format
1 <?xml version ="1.0" encoding="utf −8"?>
2 <transactionmapping>
3 <s t r i n g key="place_order " value="bapi_salesorder_createfromdat2"/>
4 <s t r i n g key=" create_delivery " value="bapi_outb_delivery_create_sls
"/>
5 <s t r i n g key="pack_items " value="l_to_create_dn"/>
6 <s t r i n g key=" create_invoice " value="bapi_billingdoc_createmultiple
"/>
7 </transactionmapping>
the parameter mapping is stored as an xml-based pmap format, storing
relations between the parameter in commands and the system-deﬁned parameter.
below is an example of the parameter mapping for the commands produced
by the simulation engine described in figure 5 . in line 3-4, “doctype” and
“customer” are matched into doc_type and partn_numb in the sap erp
system.
listing 3: an example of pmap format
1 <?xml version ="1.0" encoding="utf −8"?>
2 <parametermapping>
3 <s t r i n g key="doctype " value="doc_type"/>
4 <s t r i n g key="customer " value="partn_numb"/>
5 <s t r i n g key="orderid " value="salesdocumentin"/>
6 <s t r i n g key="salesorg " value="sales_org"/>
7 . . .
8 </parametermapping>
given the transaction and parameter mapping, the transformation engine
translates commands in cmd format into sap remote function calls (rfcs)
that can be directly executed in the system. the sap rfc is an sap interface
protocol managing the communication between the sap erp system and any
external system. for instance, the command in listing 1 is translated to the rfc
specifying bapi_salesorder_createfromdat2 , as deﬁned in listing 2 , with
the parameters such as doc_type and partn_numb , as described in listing 3 .
5 proof of concept
in this section, we validate the feasibility of the proposed framework in gen-
erating simulated event data that contain no omission and commission prob-
lems (i.e., reliable) and have the same view as the real-life event data (i.e.,
realistic) without having to manually model the complex design of erp sys-
tems in simulation models. to this end, we simulate common business chal-
lenges in the order-to-cash (o2c) process using the implementation presented
insect. 4 . the cpn ﬁles and commands are publicly available via https:
//github.com/gyunamister/erpsimulator , as well as the user manual.
5.1 experimental design
the o2c process deals with customer orders. first, customers send inquiries and,
in return, the company sends corresponding quotations. sales staﬀ converts the12 gyunam park and wil m.p. van der aalst
quotations into orders if the customers conﬁrm them. afterward, deliveries are
prepared by picking up and packing the items of the orders. next, invoices are
sent to customers and the corresponding payments are collected.
in the following, we simulate common business challenges in the o2c process
using the implementation presented in sect. 4 , i.e., 1) low conversion rate, 2)
frequent price change, and 3) order cancellation. in each scenario, we evaluate
if simulated data have omission and commission problems by measuring the
number of executions with errors using the error handling module in the sap
system. besides, we apply process mining techniques, such as process discovery
and root-cause analysis, to simulated event data to show that they have the
same view as real-life event data, containing insightful knowledge.
5.2 scenario 1: low conversion rate
the low conversion rate from quotations to orders is not desired because not only
of the lost revenue but also of the waste of resources. we design and implement
the simulation model where quotations are not converted to orders mostly due to
the late response to the corresponding inquiry using cpn tools . 288 commands
are generated by the simulation model and transformed into 288 rfcs using the
prom plug-in. among the 288 rfcs, 288 are successfully executed in the system.
as a result, 286 objects of 8 diﬀerent object types, including inquiry, quotation,
order, etc., are created, updating more than 11 tables in the database.
fig. 6: (a) a discovered process model of the o2c process in bpmn notation, (b) a low
conversion from quotations to orders (53.4%), (c) a box plot showing the correlation
between the response time and (un)successful conversions
we analyze the behaviors in the business process using the inductive visual
miner in prom [13].figure 6 -(a) describes the process model in bpmn nota-
tion. as shown in figure 6 -(b), only 34 out of 73 quotations from the company
are converted to orders, showing the conversion rate of 46.6%. we deﬁne the
response time as the time diﬀerence between the completion of “create inquiry”
and “create quotation” . figure 6 -(c) shows the diﬀerence in the response timetowards reliable business process simulation 13
between the successful and unsuccessful conﬁrmed orders. especially, the quo-
tations that are responded to later than 10 days are all rejected, showing the
correlation between the response time and unsuccessful conversion.
5.3 scenario 2: manual price changes
due to diﬀerent reasons (e.g., outdated pricing policy in the system), manual
changes in prices are carried out. we design this scenario in cpn tools and
produce 4,249 commands that are transformed into 4,249 rfcs by the prom
plug-in. all of the 4,249 rfcs are successfully executed in the system without
errors, creating 4,093 objects and updating more than 15 tables in the database.
fig. 7: (a) a discovered process model, (b) manual price changes required for 113
orders, (c) a pie chart describing the ratio of price changes to total orders per products
figure 7 -(a) depicts the process model discovered using the process discovery
technique. as shown in figure 7 -(b), for 113 orders out of 402 orders, the manual
price change occurred. figure 7 -(c) describes manual price changes per product
(e.g., p-100 andp-101 ). the outer pie indicates the total number of orders per
product, while the red part in the inner pie represents the proportion of the
changes for each product. for instance, p-109 is included in 138 orders and 79%
of them require manual changes.
5.4 scenario 3: frequent cancellation of orders
for the frequent cancellation of orders, we ﬁrst generate 4,540 commands using
cpn tools and transform them into 4,540 sap rfcs using the prom plug-in.
we successfully execute the 4,540 rfcs without errors and, accordingly, 4,384
objects of 8 diﬀerent object types are created.
figure 8 shows the process model discovered with the process discovery tech-
nique. as shown in figure 8 -(b), 97 out of 562 orders are canceled in the process.
we conduct further analysis on these canceled orders by analyzing the reasons
for the cancellation. figure 8 -(c) shows the pie chart explaining the proportion
of diﬀerent reasons. the most frequent reason is the delivery date set too late.14 gyunam park and wil m.p. van der aalst
fig. 8: (a) a discovered process model, (b) order cancellations (97 out of 462 orders),
(c) a pie chart depicting the frequency of reasons for the order cancellation
the second most frequent reason is that the order exceeds the quantity limit of
one of its items, followed by the high price of the order.
6 conclusion
in this paper, we proposed the framework for integrating erp systems into
business process simulation to realize dtos. the framework is composed of three
components: the erp system, simulation engine, and transformation engine.
commands are generated by the simulation engine and translated to system-
executable formats by the transformation engine. the executions are applied
to the system to update the object model in the system. the framework is
implemented using the sap erp system as the underlying erp system, cpn
tools as the simulation engine, and a prom plug-in as the transformation engine.
by integrating erp systems, we can eﬀectively reﬂect the complex design of
the system into simulation models. moreover, the resulting simulated data have
no omission and commission issues, ensuring the reliability of simulation results.
also, having the same data structure as the real-life event data, the simulated
event data can be analyzed by existing analysis techniques. furthermore, it sup-
ports action-oriented process mining by providing a digital twin where diﬀerent
actions can be implemented and tested.
as future work, we plan to improve the implementation to support the feed-
back loop between the simulated data and simulation engine. in addition, we
plan to deploy the implementation to the techniques for action-oriented process
mining to evaluate the eﬃciency of actions. in the proposed framework, we as-
sume a one-to-one relationship between activities (i.e., human behaviors) and
transactions. however, in real-life business processes, a single human behavior
may involve multiple transactions and vice versa. in this work, we resolve thetowards reliable business process simulation 15
issue in the implementation by manually aligning the level of simulated human
behaviors to the level of transactions. future work should present a method to
support the resolution of the many-to-many relationship.
acknowledgements we thank the alexander von humboldt (avh) stiftung
for supporting our research.
references
1.van der aalst, w.m.p.: data science in action. in: process mining. springer,
heidelberg (2016)
2.dumas, m., la rosa, m., mendling, j., reijers, h.a.: fundamentals of business
process management. springer berlin heidelberg (2018)
3.rashid, a., tjahjono, b.: achieving manufacturing excellence through the integra-
tion of enterprise systems and simulation. production planning & control 27(10)
(2016) 837–852
4.park, g., van der aalst, w.m.p.: a general framework for action-oriented pro-
cess mining. in del río ortega, a., et al., eds.: business process management
workshops, springer international publishing (2020) 206–218
5.shannon, r., johannes, j.d.: systems simulation: the art and science. ieee
transactions on systems, man, and cybernetics smc-6 (10) (1976) 723–724
6.van der aalst, w.m.p.: business process simulation survival guide. in vom brocke,
j., rosemann, m., eds.: handbook on business process management. springer
berlin heidelberg (2015) 337–370
7.dahl, o.j., nygaard, k.: simula: an algol-based simulation language. commun.
acm 9(9) (september 1966) 671678
8.jensen, k., kristensen, l.m., wells, l.: coloured petri nets and cpn tools for
modelling and validation of concurrent systems. international journal on software
tools for technology transfer 9(3) (2007) 213–254
9.martin, n., depaire, b., caris, a.: the use of process mining in business pro-
cess simulation model construction: structuring the ﬁeld. business & information
systems engineering 58(1) (2016) 73–87
10.mruter, l., van beest, n.r.t.p.: redesigning business processes: a methodology
based on simulation and process mining techniques. knowledge and information
systems 21(3) (2009-12) 267–297
11.rozinat, a., mans, r., song, m., van der aalst, w.: discovering simulation models.
information systems 34(3) (2009) 305–327
12.camargo, m., dumas, m., gonzález-rojas, o.: automated discovery of business
process simulation models from event logs. decision support systems 134 (2020)
113284
13.leemans, s., fahland, d., aalst, van der, w.: process and deviation exploration
with inductive visual miner. in limonad, l., weber, b., eds.: bpm demo sessions.
(2014) 46–50