discovering social networks from event logs
wil m.p. van der aalst1,h a j oa .r e i j e r s1, minseok song2,1
1department of technology management, eindhoven university of technology,
p.o.box 513, nl-5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tm.tue.nl, h.a.reijers@tm.tue.nl
2dept. of industrial engineering, pohang university of science and technology, san
31 hyoja-dong, nam-gu, pohang, 790-784, south korea. mssong@postech.ac.kr
abstract. process mining techniques allow for the discovery of knowl-
edge based on so-called “event logs”, i.e., a log recording the execution
of activities in some business process. many information systems pro-vide such logs, e.g., most wfm, erp, crm, scm, and b2b systems
record transactions in a systematic way. process mining techniques typ-
ically focus on performance and control-ﬂow issues. however, event logstypically also log the performer , e.g., the person initiating or completing
some activity. this paper focuses on mining social networks using this
information. for example, it is possible to build a social network basedon the hand-over of work from one performer to the next. by combin-
ing concepts from workﬂow management and social network analysis, it
is possible to discover and analyze social networks. this paper deﬁnesmetrics, presents a tool, and applies these to a real event log within the
setting of a large dutch organization.
key words : process mining, social network analysis, business process management,
workﬂow management, data mining, petri nets.
1 introduction
this paper builds on concepts from business process management (workﬂow
management in particular) and sociometry (social network analysis in particu-
lar).
business process management is concerned with process-aware information
systems , i.e., systems supporting the design, analysis, and enactment of opera-
tional business processes. typical examples of such process-aware systems are
workﬂow management systems where the process is driven by an explicit process
model. however, in many other process-aware information systems the processmodel is less explicit and users can deviate from the “normal ﬂow”, i.e., these
systems allow for more ﬂexibility.
sociometry, also referred to as sociography, refers to methods presenting data
on interpersonal relationships in graph or matrix form [12, 43, 46]. the term so-
ciometry was coined by jacob levy moreno who conducted the ﬁrst long-range
sociometric study from 1932-1938 at the new york state training school forgirls in hudson, new york [34]. as part of this study, moreno used sociomet-
ric techniques to assign residents to various residential cottages. he found thatassignments on the basis of sociometry substantially reduced the number of run-
aways from the fac ility. many more sociometric studies have been conducted
since then by moreno and others. in most applications of sociometry, the as-sessment is based on surveys (also referred to as sociometric tests). with the
availability of more electronic data, new ways of gathering data are enabled
[18]. by analyzing the history of a user’s e-mail interactions, personal networkscan be extracted. one of the ﬁrst social-networked tools developed for this pur-
pose is contactmap [36]. buddygraph (www.buddygraph.com) and metasight
(www.metasight.co.uk) are other examples. by using logs on e-mail traﬃc as astarting point, meaningful organizational patterns can be distinguished (see e.g.,
[9, 16, 17, 21, 36, 38]). similarly, information on the web can be used for the anal-
ysis of social networks. for example, usenet data has been used to characterize
the “authority” of individuals based on posting patterns [44].
for the analysis of social networks around business processes such approaches
are less useful, since they are based on unstructured information. for example,when analyzing e-mail it is diﬃcult, but also crucial, to distinguish between e-
mails corresponding to particular activities within a business process (e.g., the
decision with respect to a loan request) and e-mails representing less relevantoperational details (e.g., scheduling a meeting). fortunately, many enterprise
information systems store relevant events in a more structured form. for ex-
ample, workﬂow management systems typically register the enabling, start andcompletion of activities [2, 20, 30, 31]. erp systems like sap log all transactions,
e.g., users ﬁlling out forms, changing documents, etc. business-to-business (b2b)
systems log the exchange of messages with other parties. call center packagesbut also general-purpose crm systems log interactions with customers. these
examples show that many systems have some kind of event log often referred to
as “history”, “audit trail”, “transaction ﬁle”, etc. [4, 7, 25, 41].
when people are involved in events, logs will typically contain information
on the person executing or initiating the event. we only consider events both
referring to an activity and a case[4]. the case (also named process instance)
is the “thing” which is being handled, e.g., a customer order, a job applica-
tion, an insurance claim, a building permit, etc. the activity (also named task,
operation, action, or work-item) is some operation on the case, e.g., “contactcustomer”. an event may be denoted by ( c,a,p) where cis the case, ais the
activity, and pis the person. events are ordered in time allowing the inference of
causal relations between activities and the corresponding social interaction. forexample, if ( c,a
1,p1) is directly followed by ( c,a2,p2), there is some handover of
work from p1top2(note that both events refer to the same case). if this pattern
(i.e., there is some handover of work from p1top2) occurs frequently but there
is never a handover of work from p1top3although p2andp3have identical roles
in the organization, then this may indicate that the relation between p1andp2
is stronger than the relation between p1andp3. using such information it ispossible to build a social network expressed in terms of a graph (“sociogram”)
or matrix.
social network analysis (sna) refers to the collection of methods, techniques
and tools in sociometry aiming at the analysis of social networks [12, 43, 46].
there is an abundance of tools allowing for the visualization of such networks
and their analysis. a social network may be dense or not, the “social distances”
between individuals may be short or long, etc. an individual may be a so-called
“star” (directly linked to many other individuals) or an “isolate” (not linked toothers). however, also more subtle notions are possible, e.g., an individual who
is only linked to people having many relationships is considered to be a more
powerful node in the network than an individual having many connections toless connected individuals.
the work presented in this paper applies the results from sociometry, and
sna in particular, to events logs in today’s enterprise information systems. the
main challenge is to derive social networks from this type of data. this paperpresents the approach, the various metrics that can be used to build a social net-
work, our tool mison (mining social networks), and a case study. the paper
extends the results presented in [3] by providing concrete metrics and demon-
strating these using a case study.
the paper is organized as follows. section 2 introduces the concept of process
mining. section 3 focuses on the mining organizational relations, introducingconcepts from sna but also showing which relations can be derived from event
logs. section 4 deﬁnes the metrics we propose for mining organizational relations.
we propose metrics based on (possible) causality, metrics based on joint cases,metrics based on joint activities, and metrics based on special event types (e.g.,
delegation). then we present our tool mison. section 6 presents a case study
conducted within a dutch national public works department employing about
1,000 civil servants. section 7 presents related work. finally, section 8 concludes
the paper.
2 process mining: an overview
the goal of process mining is to extract information about processes from trans-action logs [4]. we assume that it is possible to record events such that (i) each
event refers to an activity (i.e., a well-deﬁned step in the process), (ii) each event
refers to a case(i.e., a process instance), (iii) each event refers to a performer
(the person executing or initiating the activity), and (iv) events are totally or-
dered. any information system using transactional systems such as erp, crm,
or workﬂow management systems will oﬀer this information in some form [2, 20,30, 31]. an example of an event log is shown in table 1.
note that we do not assume the presence of a workﬂow management system.
the only assumption we make, is that it is possible to collect logs with eventdata. these event logs are used to construct models that explain some aspect
of the behavior registered. the term process mining refers to methods for dis-
tilling a structured process description from a set of real executions [4, 7, 25, 41].the term “structured process description” may be interpreted in various ways,
ranging from a control-ﬂow model expressed in terms of a classical petri net to amodel incorporating organizational, temporal, informational, and social aspects.
in section 7, references to the state-of-the-art using these interpretations are
given. in this paper we focus on the social aspect of mining event logs.
case identifier activity identifier performer
case 1 activity a john
case 2 activity a john
case 3 activity a sue
case 3 activity b carol
case 1 activity b mike
case 1 activity c john
case 2 activity c mike
case 4 activity a sue
case 2 activity b john
case 2 activity d pete
case 5 activity a sue
case 4 activity c carol
case 1 activity d pete
case 3 activity c sue
case 3 activity d pete
case 4 activity b sue
case 5 activity e clare
case 5 activity d clare
case 4 activity d pete
table 1. an event log.
2.1 discovering social networks
when distilling a process model from an event log, the focus is on the vari-
ous process activities and their dependencies. when deriving roles and other
organizational entities, the focus is on the relation between people or groups of
people and the process. another perspective is to focus on the relations amongindividuals (or groups of individuals) acting in the process, in other words: the
social network. consider for example the event log of table 1. although carol
and mike can execute the same activities (b and c), mike is always working
with john (cases 1 and 2) and carol is always working with sue (cases 3 and
4). probably carol and mike have the same role but based on the small sampleshown in table 1 it seems that john is not working with carol and sue is not
working with carol.
1these examples show that an event log can be used to
1clearly the number of events in table 1 is too small to establish these assumptions
accurately. however, for the sake of argument we assume that the things that did
not happen will never happen, cf. section 2.3.derive relations between performers of activities, thus resulting in a sociogram.
for example, it is possible to generate a sociogram based on the transfers of workfrom one individual to another as is shown in figure 1. each node represents one
of the six performers and each arc represents that there has been a transfer of
work from one individual to another. the deﬁnition of “transfer of work from ato b” is based on whether for the same case an activity executed by a is directly
followed by an activity executed by b. for example, both in case 1 and 2 there is
a transfer from john to mike. figure 1 does not show frequencies. however, foranalysis proposes these frequencies can added. the arc from john to mike would
then have weight 2. typically, we do not use absolute frequencies but weighted
frequencies to get relative values between 0 and 1. figure 1 shows that work istransferred to pete but not vice versa. mike only interacts with john and carol
only interacts with sue. clare is the only person transferring work to herself.
john sue
mike
carol peteclare
fig. 1. the sociogram based on the event log shown in table 1.
for a simple network with just a few cases and performers the results may
seem trivial. however, for larger organizations with many cases it may be possible
to discover interesting structures. sociograms as shown in figure 1 can be used
as input for sna tools that can visualize the network in various ways, computemetrics like the density of the network, analyze the role of an individual in the
network (for example the “centrality” or “power” of a performer), and identify
cliques (groups of connected individuals). section 3 will discuss this aspect inmore detail and section 4 will provide concrete metrics to derive sociograms
from event logs.
2.2 other types of mining
table 1 contains the minimal information we assume to be present. using the
information one can also discover other models (i.e., not just sociograms). for
example, we have developed techniques and tools to discover the process model.figure 2 shows the resulting petri net model after applying our α-algorithm [6]
to table 1. the model shows that the process always starts with aand ends
withd. in between these two tasks either eis executed or bandc.band
care concurrent, i.e., they can be executed in any order. given the focus of
this paper, we will not elaborate further on process discovery. see section 7 for
pointers to related work.ab
cd e
fig. 2. a process model based on the event log shown in table 1 discovered by the
α-algorithm [6].
in many applications, the event log contains a time stamp for each event
and this information can be used to extract additional causality information. in
addition, a typical log also contains information about the type of event , e.g., a
start event (a person selecting an activity from a worklist), a complete event (the
completion of a activity), a withdraw event (a scheduled activity is removed), etc.
moreover, we are also interested in the relation between attributes of the caseand the actual route taken by a particular case or allocation of work to workers.
for example, when handling traﬃc violations: is the make of a car relevant for
the routing of the corresponding traﬃc violation? (e.g., people driving a ferrarialways pay their ﬁnes in time.) another example directly related to sna would
be to see whether the sociograms for diﬀerent types of cases (e.g., private and
corporate customers) diﬀer.
the presence of timing information and information on cases/activities allows
for more advanced forms of process mining, e.g., methods trying to explain the
performance indicators like ﬂow times in term of the attributes/performers ofcases. another interesting application of process mining is fraud detection, i.e.,
detecting suspicions patterns that may indicate security violations (cf. four eyes
principle [2]).
2.3 completeness and noise
for this simple example (i.e., table 1), it is quite easy to generate the process
model shown in figure 2 or the sociogram shown in figure 1. for more realistic
situations there are however a number of complicating factors:
–completeness
for larger workﬂow models mining and models exhibiting alternative and
parallel routing, the workﬂow log will typically not contain all possibleroutes. consider 10 activities which can be executed in parallel. the to-
tal number of interleavings is 10! = 3628800. it is not realistic that each
interleaving is present in the log. moreover, certain paths through the pro-cess model may have a low probability and therefore remain undetected.
similar remarks hold for the organizational model and social network. for
example, a person has a role but just by coincidence did not execute someor all activities corresponding to that role. another example is that two in-
dividuals work together frequently but during the data collection period oneof them was on a sabbatical leave. as a result the log is not complete in the
sense that it captures possible and/or typical behavior.
–noise
parts of the log may be incorrect, incomplete, or refer to exceptions. events
can be logged incorrectly because of human or technical errors. events can be
missing in the log if some of the activities are manual or handled by anothersystem/organizational unit. events can also refer to rare or undesired events.
consider for example the workﬂow in a hospital. if due to time pressure the
order of two events (e.g., make x-ray and remove drain) is reversed, thisdoes not imply that this would be part of the regular medical protocol and
should be supported by the hospital’s workﬂow system. also two causally
unrelated events (e.g., take blood sample and death of patient) may happennext to each other without implying a causal relation (i.e., taking a sample
did not result in the death of the patient; it was sheer coincidence). clearly,
exceptions which are recorded only once should not automatically becomepart of the regular workﬂow.
2.4 legal issues
to conclude this section, we point out legal issues relevant when mining event
logs. clearly, event logs can be used to systematically measure the performance
of employees. the legislation with respect to issues such as privacy and pro-
tection of personal data diﬀers from country to country. for example, dutch
companies are bound by the personal data protection act (wet bescherming
persoonsgegeven) which is based on a directive from the european union. thepractical implications of this for the dutch situation are described in [14, 28, 40].
event logs are not restricted by these laws as long as the information in the log
cannot be traced back to individuals. if information in the log can be tracedback to a speciﬁc employee, it is important that the employee is aware of the
fact that her/his activities are logged and the fact that this logging is used to
monitor her/his performance. note that in a log we can deliberately abstractfrom information about the workers executing activities and still mine the pro-
cess, organizational, and social structures (simply hide identities). therefore, it is
possible to avoid collecting information on the productivity of individual workersand legislation such as the personal data protection act does not apply. never-
theless, the logs of most workﬂow systems contain information about individual
workers, and therefore, this issue should be considered carefully. moreover, touse social network analysis as an operational tool to improve work processes,
employees should approve and it is vital not to misuse the information gathered.
3 mining organizational relations
in the previous section, we provided an overview of process mining. in this
section, we focus on the main topic of this paper: mining organizational relationsas described in section 2.1. the goal is to generate a sociogram that can be used
as input for standard software in the sna (social network analysis) domain. inthis section we ﬁrst introduce the fundamentals of sna and then focus on the
question how to derive sociograms from event logs.
3.1 social network analysis
applications of sna range from the analysis of small social networks to large
networks. for example, the tool inflow (www.orgnet.com) has been used to an-alyze terrorist network surrounding the september 11th 2001 events. however,
such tools could also be used to analyze the social network in a classroom. in
literature, researchers distinguish between sociocentric (whole) and egocentric
(personal) approaches. sociocentric approaches consider interactions within a
deﬁned group and consider the group as a whole. egocentric approaches con-
sider the network of an individual, e.g., relations among the friends of a givenperson. from a mathematical point of view both approaches are quite similar. in
both cases the starting point for analysis is graph where nodes represent people
and the arcs/edges represent relations. although this information can also be
represented as a matrix, we use the graph notation. the graph can be undirected
or directed, e.g., a may like b but not vice versa. moreover, the relations maybe binary (they are there or not) or weighted (e.g., “+” or “-”, or a real num-
ber). the weight is used to qualify the relation. the resulting graph is named a
sociogram .
in a mathematical sense such a sociogram is a graph ( p,r) where pis the
set of individuals (in the context of process mining referred to as performers)
andr⊆p×p. if the graph is undirected, ris symmetric. if the graph is
weighted, there is an additional function wassigning a value to all elements of
r. when looking at the graph as a whole there are notions like density , i.e., the
number of elements in rdivided by the maximal number of elements, e.g., in a
directed graph there are n
2possible connections (including self loops) where n
is the number of nodes. for example the density of the graph shown in figure 1
is 8/(6∗6) = 0 .22. other metrics based on weighted graphs are the maximal
geodesic distance in a graph. the geodesic distance of two nodes is the distance
of the shortest path in the graph based on randw.
when looking at one speciﬁc individual (i.e., a node in the graph), many
notions can be deﬁned. if all other individuals are in short distance to a given
node and all geodesic paths (i.e., shorted path in the graph) visit this node,clearly the node is very central (like a spider in the web). there are diﬀerent
metrics for this intuitive notion of centrality . the bavelas-leavitt index of cen-
trality is a well-known example that is based on the geodesic paths in the graph[8]. let ibe an individual (i.e., i∈p)a n d d
j,kthe geodesic distance from an
individual jto an individual k. the bavelas-leavitt index of centrality is de-
ﬁned as bl(i)=(/summationtext
j,kdj,k)/(/summationtext
j,kdj,i+di,k). note that the index divides the
sum of all geodesic distances by the sum of all geodesic distances from and to
a given resource. other related metrics are closeness (1 divided by the sum of
all geodesic distances to a given resource) and betweenness (a ratio based on thenumber of geodesic paths visiting a given node) [12, 22, 23, 43, 46]. other notions
include the emission of a resource (i.e.,/summationtext
jwi,j), the reception of a resource
(i.e.,/summationtext
jwj,i), and the determination degree (i.e.,/summationtext
jwj,i−wi,j) [12, 43, 46].
another interesting metric is the sociometric status which is determined by the
sum of input and output relations, i.e.,/summationtext
jdj,i+di,j. all metrics can be nor-
malized by taking the size of the social network into account (e.g., divide by
the number of resources). using these metrics and a visual representation of the
network one can analyze various aspects of the social structure of an organiza-tion. for example, one can search for densely connected clusters of resources and
structural holes (i.e., areas with few connections), cf. [12, 43, 46].
let us apply some of these notions to the sociogram shown in figure 1 where
the arcs indicate (unweighted) frequencies. the sociometric status of clare is
2 (if we include self-links), the sociometric status of pete is 4, the emission of
john is 5, the emission of pete is 0, the reception of pete is 4, the reception
of sue is 2, the determination degree of mike is 0, etc. the bavelas-leavitt
index of centrality of john is 4.33 while the same index for sue is 3.25. thenumbers are unweighted and in most cases these are made relative to allow for
easy comparison. tools like agna, egonet, inflow, kliquefinder, metasight,
netform, netminer, netvis, stocnet, ucinet, and visone are just some ofthe many sna tools available. for more information on sna we refer to [10, 12,
43, 46].
3.2 deriving relations from event logs
after showing the potential of sna and the availability of techniques and tools,
the main question is: how to derive meaningful sociograms from event logs?
to address this question we identify four types of metrics that can be used
to establish relationships between individuals: (1) metrics based on (possible)
causality, (2) metrics based on joint cases, (3) metrics based on joint activities,and (4) metrics based on special event types.
metrics based on (possible) causality monitor for individual cases how work
moves among performers. one of the examples of such a metric is handover of
work. within a case (i.e., process instance) there is a handover of work from
individual ito individual jif there are two subsequent activities where the ﬁrst
is completed by iand the second by j. this notion can be reﬁned in various
ways. for example, knowledge of the process structure can be used to detect
whether there is really a causal dependency between both activities. it is alsopossible to not only consider direct succession but also indirect succession using
a “causality fall factor” β, i.e., if there are 3 activities in-between an activity
completed by iand an activity completed by j, the causality fall factor is β
3.
a related metric is subcontracting where the main idea is to count the number
of times individual jexecuted an activity in-between two activities executed by
individual i. this may indicate that work was subcontracted from itoj. again
all kinds of reﬁnements are possible.
metrics based on joint cases ignore causal dependencies but simply count how
frequently two individuals are performing activities for the same case. if individ-uals work together on cases, they will have a stronger relation than individuals
rarely working together.
metrics based on joint activities do not consider how individuals work to-
gether on shared cases but focus on the activities they do. the assumption hereis that people doing similar things have stronger relations than people doing com-
pletely diﬀerent things. each individual has a “proﬁle” based on how frequent
they conduct speciﬁc activities. there are many ways to measure the “distance”between two proﬁles thus enabling many metrics.
metrics based on special event types consider the type of event. thus far we
assumed that events correspond to the execution of activities. however, there
are also events like reassigning an activity from one individual to another. forexample, if ifrequently delegates work to jbut not vice versa it is likely that i
is in a hierarchical relation with j. from a sna point of view these observations
are particularly interesting since they represent explicit power relations.
the sociogram shown in figure 1 is based on the causality metric handover
of work. in the next section, we will deﬁne the metrics in more detail.
4 metrics
in this section, we deﬁne the metrics we have developed to establish relation-ships between individuals from event logs. we address all types introduced insection 3.2. before we deﬁne these metrics in detail, we introduce a convenient
notation for event logs.
deﬁnition 4.1. (event log) letabe a set of activities (i.e., atomic work-
ﬂow/process objects, also referred to as tasks) and pa set of performers (i.e.,
resources, individuals, or workers). e=a×pis the set of (possible) events, i.e.,
combinations of an activity and a performer (e.g. ( a,p) denotes the execution of
activity aby performer p).c=e
∗is the set of possible event sequences (traces
describing a case). l∈b(c)i sa n event log . note that b(c)i st h es e to fa l l
bags (multi-sets) over c.
note that this deﬁnition of an event slightly diﬀers from the informal notions used
before. first of all, we abstract from additional information such as time stamps,
data, etc. secondly, we do not consider the ordering of events corresponding to
diﬀerent cases. for convenience, we deﬁne two operations on events: πa(e)=a
andπp(e)=pfor some event e=(a,p).
4.1 metrics based on (possible) causality
metrics based on causality take into account both handover of work and sub-
contracting. the basic idea is that performers are related if there is a causalrelation through the passing of a case from one performer to another. for both
situations, three kinds of reﬁnements are applied. first of all, one can diﬀer-
entiate with respect to the degree of causality, e.g., the length of handover. itmeans that we can consider not only direct succession but also indirect succes-
sion. second, we can ignore multiple transfers within one instance or not. third,we can consider arbitrary transfers of work or only consider those where there
is a casual dependency (for the latter we need to know or be able to derive the
process model). based on these reﬁnements, we derive 2
3= 8 variants for both
the handover of work and subcontracting metrics. these variants are all based
on the same event log. before deﬁning the metrics, some of the basic notions
that can be applied to a single case c=(c0,c1,...) are speciﬁed.
deﬁnition 4.2. ( ,)letlbe a log. assume that →denotes some causal-
ity relation derived from the process model. for a1,a2∈a,p1,p2∈p,c=
(c0,c1,...)∈l,a n d n∈in:
–p1n
cp2=∃0≤i<|c|−nπp(ci)=p1∧πp(ci+n)=p2
–|p1n
cp2|=/summationtext
0≤i<|c|−n/braceleftbigg
1i fπp(ci)=p1∧πp(ci+n)=p2
0 otherwise
–p1n
cp2=∃0≤i<|c|−nπp(ci)=p1∧πp(ci+n)=p2∧πa(ci)→πa(ci+n)
–|p1n
cp2|=/summationtext
0≤i<|c|−n⎧
⎨
⎩1i fπp(ci)=p1∧πp(ci+n)=p2∧
πa(ci)→πa(ci+n)
0 otherwise
p1n
cp2denotes the function which returns trueif within the context of case c
performers p1andp2both executed some activity such that the distance between
these two activities is n. for example, for case 1 shown in table 1, john1
cmike
equals 1 (i.e., true) and john3
cpeteequals 1 (i.e., true). in this deﬁnition, if
the value of nequals 1, it refers to direct succession. if nis greater than 1, it
refers to indirect succession. however, it ignores both multiple transfers within
one instance and casual dependencies. |p1n
cp2|denotes the function which
returns the number of times p1n
cp2in the case c. in other words, it considers
multiple transfers within one instance. p1n
cp2and|p1n
cp2|are similar to
p1n
cp2and|p1n
cp2|but in addition they take into account whether there
is a real casual dependency. for example, consider case 1 shown in table 1.the order of events is: a (john), b (mike), c (john), and d (pete). if we
calculate the relationships among activity b, c, and d, mike
1
cjohn equals 1
andmike1
cpeteequals 0. however, mike1
cjohn equals 0, i.e., although an
activity conducted by mike is followed an activity conducted by john there is
not a causal dependency between b and c because both activities are in parallel.
however, there is casual dependency between activity b and d (see figure 2)and, therefore, mike
2
cpete equals 1. the information on causality can be
added if the process model is known. if necessary, this information can also be
derived from the log by using for example the α-algorithm [6].
using such relations, we deﬁne handover of work metrics. based on three
kinds of reﬁnements mentioned before, eight variants are derived as follows.
deﬁnition 4.3. (handover of work metrics) letlbe a log. for p1,p2∈p
and some β(0<β< 1):
–p1lp2=(/summationtext
c∈l|p11
cp2|)/(/summationtext
c∈l|c|−1)–p1˙lp2=(/summationtext
c∈l∧p11
cp21)/|l|
–p1β
lp2=(/summationtext
c∈l/summationtext
1≤n<|c|βn−1|p1n
cp2|)/(/summationtext
c∈l/summationtext
1≤n<|c|βn−1(|c|−n))
–p1˙β
lp2=(/summationtext
c∈l/summationtext
1≤n<|c|∧p1n
cp2βn−1)/(/summationtext
c∈l/summationtext
1≤n<|c|βn−1)
–p1lp2=(/summationtext
c∈l|p11
cp2|)/(/summationtext
c∈l|c|−1)
–p1˙lp2=(/summationtext
c∈l∧p11
cp21)/|l|
–p1β
lp2=(/summationtext
c∈l/summationtext
1≤n<|c|βn−1|p1n
cp2|)/(/summationtext
c∈l/summationtext
1≤n<|c|βn−1(|c|−n))
–p1˙β
lp2=(/summationtext
c∈l/summationtext
1≤n<|c|∧p1n
cp2βn−1)/(/summationtext
c∈l/summationtext
1≤n<|c|βn−1)
p1lp2means dividing the total number of direct successions from p1top2
in a process log by the maximum number of possible direct successions in the
log.p1˙lp2ignores multiple transfers within one instance (i.e., case). for
example, in table 1, johnlmike equals 2/14 and john ˙lmike euqals 2/5.
p1β
lp2andp1˙β
lp2deal with indirect succession by introducing a “causality
fall factor” βin this notation. if within the context of a case there are nevents
in-between two performers, the causality fall factor is βn.p1β
lp2considers all
possible successions, while p1˙β
lp2ignores multiple transfers within one case.
for example, in table 2, if βequals 0.5, then johnlpeteequals 2 .5/19.5a n d
john ˙lpeteequals 2 .5/8.5. if we use a βclose to 1, the eﬀect of the distance
between performers decreased. for example, suppose that only case 1 exists in
table 1, we calculate the handover of metrics from john in activity ato mike,
john in activity b, and pete, according to various values of β. table 2 shows
the results. if the value βincreases in value, the variance of resulting values
decreases.
beta johnβ
lmike johnβ
ljohn johnβ
lpete
0.1 0.3116 (1/3.21) 0.0312 (0.1/3.21) 0.0031 (0.01/3.21)
0.5 0.2352 (1/4.25) 0.1176 (0.5/4.25) 0.0588 (0.25/4.25)
0.9 0.1783 (1/5.61) 0.1604 (0.9/5.61) 0.1444 (0.81/5.61)
table 2. handover of work metrics according to the causality fall factor β.
the remaining four metrics p1lp2,p1˙lp2,p1β
lp2,a n d p1˙β
lp2are
similar to the previous four kinds of metrics, but take into account real casual
dependencies. for example, p1lp2means that the total number of direct
successions from p1top2in a log is divided by the maximum number of possible
direct successions in the log when p1andp2are casually related.
from above deﬁnitions, we derive general formulations of the metrics. the
eight metrics mentioned can be merged into the following four metrics.
deﬁnition 4.4. (general forms of handover of work metrics) letlbe
a log. for p1,p2∈p, some β(0<β≤1) and k∈in.–p1β,k
lp2=(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)βn−1|p1n
cp2|/
(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)βn−1(|c|−n))
–p1˙β,k
lp2=(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)∧p1ncp2βn−1/
(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)βn−1)
–p1β,k
lp2=(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)βn−1|p1n
cp2|/
(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)βn−1(|c|−n))
–p1˙β,k
lp2=(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)∧p1n
cp2βn−1/
(/summationtext
c∈l/summationtext
1≤n≤min(|c|−1,k)βn−1)
in these alternative formulations, we introduce a “calculation depth factor”
k. when we calculate metrics, kspeciﬁes maximum degree of casuality. for
example, if k equals 3, it considers the case of direct succession, one event
in between two performers, and two events in-between two performers. notethat if β=1,k= 1, then p
11,1
lp2=p1lp2,a n di f k>max(|c|), then
p1β,k
lp2=p1β
lp2. this rule is also applied to the other three metrics. fur-
ther, when we calculate the metrics, a suitable value for kis important for the
eﬃciency of calculation. logs are typically very large. therefore considering allpossible successions may be ineﬃcient.
after deﬁning metrics for handover of work we now consider another class of
metrics based on (possible) causality: subcontracting metrics . in the case of sub-
contracting, the three reﬁnements mentioned before can also be applied. however
the concept of direct and indirect succession is changed. direct succession means
there is only one activity in-between two activities executed by one performer.
while indirect succession means, there are multiple activities in-between two
activities executed by one performer. we also introduce causality fall factor β
for indirect succession. for example, assume that there are four activities. both
the ﬁrst and the fourth activity are executed by a performer i, while the second
and third activity are executed by performer jandkrespectively. in this situa-
tion, we can derive two relations which are from a performer ito a performer j
and from a performer ito a performer k. again we use a causality fall factor β.
the second and third reﬁnements are the same as for handover of work. beforedeﬁning metrics, the basic notions applied to a single case c=(c
0,c1,...)a r e
speciﬁed.
deﬁnition 4.5. ( /diamondmath,/diamondmath)letlbe a log. assume that →denotes some causality
relation. in the context of land→, we deﬁne a number of relations. for a1,a2∈
a,p1,p2∈p,c=(c0,c1,...)∈l,|c|>2,n∈in, and n>1:
–p1/diamondmathn
cp2=∃0≤i<j<i +n<|c|πp(ci)=p1∧πp(cj)=p2∧πp(ci+n)=p1
–|p1/diamondmathn
cp2|=/summationtext
0≤i<|c|−n/summationtext
i<j<i +n⎧
⎨
⎩1i fπp(ci)=p1∧πp(cj)=p2∧
πp(ci+n)=p1
0 otherwise
–p1/diamondmathn
cp2=∃0≤i<j<i +n<|c|πp(ci)=p1∧πp(cj)=p2∧πp(ci+n)=p1∧
πa(ci)→πa(cj)→πa(ci+n)–|p1/diamondmathn
cp2|=/summationtext
0≤i<|c|−n/summationtext
i<j<i +n⎧
⎪⎪⎨
⎪⎪⎩1i fπ
p(ci)=p1∧πp(cj)=p2∧
πp(ci+n)=p1∧
πa(ci)→πa(cj)→πa(ci+n)
0 otherwise
p1/diamondmathn
cp2denotes the function which returns trueif performer p2executed an
activity in-between two activities executed by performer p1and distance between
these two activities executed by performer p1isn. for example, for case 1 shown
in table 1, john/diamondmath2
cmike equals 1. however, it ignores both multiple transfers
within one instance and casual dependencies. |p1/diamondmathn
cp2|denotes the function which
returns the number of times p1/diamondmathn
cp2in the case c. in other words, it considers
multiple transfers within one instance. p1/diamondmathn
cp2and|p1/diamondmathn
cp2|are similar to p1/diamondmathn
cp2
and|p1/diamondmathn
cp2|but in addition they take into account whether there is a real casual
dependency. for example, consider case 1 shown in table 1. john/diamondmath2
cmikeequals
0, because activity b and c do not have a casual dependency.
using such relations, we deﬁne subcontracting metrics. again eight variants
are identiﬁed.
deﬁnition 4.6. (in-between metrics) letlbe a log. for p1,p2∈p,c=
(c0,c1,...)∈l,|c|>2, and some β(0<β< 1):
–p1/diamondmathlp2=(/summationtext
c∈l|p1/diamondmath2
cp2|)/(/summationtext
c∈l(|c|−2))
–p1˙/diamondmathlp2=(/summationtext
c∈l∧p1/diamondmath2
cp21)/|l|
–p1/diamondmathβ
lp2=(/summationtext
c∈l/summationtext
2≤n<|c|βn−2|p1/diamondmathn
cp2|)/
(/summationtext
c∈l/summationtext
2≤n<|c|βn−2(|c|−n)(n−1))
–p1˙/diamondmathβ
lp2=(/summationtext
c∈l/summationtext
2≤n<|c|∧p1/diamondmathn
cp2βn−2)/(/summationtext
c∈l/summationtext
2≤n<|c|βn−2)
–p1/diamondmathlp2=(/summationtext
c∈l|p1/diamondmath2
cp2|)/(/summationtext
c∈l(|c|−2))
–p1˙/diamondmathlp2=(/summationtext
c∈l∧r1/diamondmath2
cp21)/|l|
–p1/diamondmathβ
lp2=(/summationtext
c∈l/summationtext
2≤n<|c|βn−2|p1/diamondmathn
cp2|)/
(/summationtext
c∈l/summationtext
2≤n<|c|βn−2(|c|−n)(n−1))
–p1˙/diamondmathβ
lp2=(/summationtext
c∈l/summationtext
2≤n<|c|∧p1/diamondmathn
cp2βn−2)/(/summationtext
c∈l/summationtext
2≤n<|c|βn−2)
p1/diamondmathlp2means dividing the total number of direct subcontracting occurrences
between p1andp2in a process log by the maximum number of possible direct
subcontracting occurrences in the log. p1˙/diamondmathlp2ignores multiple subcontracting
occurrences within one instance (i.e., case). for example, in table 1, john/diamondmathlmike
equals 2/9 and john ˙/diamondmathlmike equals 2/5. p1/diamondmathβ
lp2andp1˙/diamondmathβ
lp2deal with the
situation where the distance between these two activities executed by performer
p1is greater than 2. again we introduce a “causality fall factor” βin a fashion
similar to the handover of work metrics. if within the context of a case there are
nevents in-between two activities executed by the same performer, the causality
fall factor is βn.p1/diamondmathβ
lp2considers all possible subcontracting occurrences, while
p1˙/diamondmathβ
lp2ignores multiple subcontracting within one case. for example, in table
2, ifβequals 0.5, then john/diamondmathlmike equals 2 /13 and john ˙lmike equals 2 /7.
again p1/diamondmathlp2,p1˙/diamondmathlp2,p1/diamondmathβ
lp2,a n dp1˙/diamondmathβ
lp2are similar but take into account realcasual dependencies. for example, p1/diamondmathlp2means that the total number of direct
subcontracting from p1top2in a process log is divided by the maximum number
of possible direct subcontracting in the log when p1andp2are casually related.
as before we can derive more general formulations for the metrics. the eight
metrics mentioned above can be merged into four metrics as shown in the fol-
lowing deﬁnition.
deﬁnition 4.7. (general forms of in-between metrics) letlbe a log.
forp1,p2∈p, some β(0<β≤1) and k∈in (k>1)
–p1/diamondmathβ,k
lp2=(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)βn−2|p1/diamondmathn
cp2|)/
(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)βn−2(|c|−n)(n−1))
–p1˙/diamondmathβ,k
lp2=(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)∧p1/diamondmathn
cp2βn−2)/
(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)βn−2)
–p1/diamondmathβ,k
lp2=(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)βn−2|p1/diamondmathn
cp2|)/
(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)βn−2(|c|−n)(n−1))
–p1˙/diamondmathβ,k
lp2=(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)∧p1/diamondmathn
cp2βn−2)/
(/summationtext
c∈l/summationtext
2≤n≤min(|c|−1,k)βn−2)
again we also introduce a “calculation depth factor” k. when calculating the
metrics, kspeciﬁes maximum distance between two activities executed by one
performer. for example, if kequals 3, it considers the case of one activity in
between two activities executed by one performer and two activities in betweentwo activities executed by one performer. note that if β=1,k= 2, then p
1/diamondmath1,2
l
p2=p1/diamondmathlp2,a n di f k>max(|c|), then p1/diamondmathβ,k
lp2=p1/diamondmathβ
lp2.
4.2 metrics based on joint cases
for this type of metrics we ignore causal dependencies and simply count how
often two individuals are performing activities for the same case.
deﬁnition 4.8. (working together metrics) letlbe a log. for p1,p2∈p:
p11lp2=/summationtext
c∈lp11cp2//summationtext
c∈lg(c,p1)i f/summationtext
c∈lg(c,p1)/negationslash= 0, otherwise p11l
p2= 0, where for c=(c0,c1,...)∈l:p11cp2=1i f ∃0≤i,j<|c|∧i/negationslash=jπp(ci)=
p1∧πp(cj)=p2, otherwise p11cp2=0: g(c,p1)=1i f ∃0≤i<|c|πp(ci)=p1,
otherwise g(c,p1)=0
note that, in this deﬁnition we divide the number of joint cases by the number
of cases in which p1appeared. it is important to use a relative notation. for
example, suppose that p1participates in three cases, p2participates in six cases,
and they work together three times. in this situation, p1always work together
withp2, butp2does not. thus, the value for p11lp2has to be larger than the
value for p21lp1. let us apply this metric to analyze the relationship between
john and pete based in the log shown in table 1. in the log, john appeared
in two cases, pete in four cases, and they work together on two cases. thus,
john1lpete=2/2a n d pete1ljohn=2/4.moreover, alternative metrics can be composed by taking the distance be-
tween activities into account, e.g., use variants like ( p1β
lp2+p2β
lp1)/2o r
(p1˙β
lp2+p2˙β
lp1)/2.
4.3 metrics based on joint activities
to calculate the metrics based on joint activities, ﬁrst we make a “proﬁle” based
on how frequent individuals conduct speciﬁc activities. in this paper, we use
aperformer by activity matrix to represent these proﬁles. this matrix simply
records how frequent each performer executes speciﬁc activities.
deﬁnition 4.9. ( /triangle)letlbe a log. for p1∈p,a1∈a,a n dc=(c0,c1,...)∈l:
–p1/triangleca1=/summationtext
0≤i<|c|/braceleftbigg1i fπa(ci)=a1∧πp(ci)=p1
0 otherwise
–p1/trianglela1=/summationtext
c∈lp1/triangleca1
note that /triangledeﬁnes a matrix with rows pand columns a. table 3 shows the
performer by activity matrix derived from table 1.
performer activity a activity b activity c activity d activity e
john 2 1 1 0 0
sue 3 1 1 0 0
mike 0 1 1 0 0
carol 0 1 1 0 0
pete 0 0 0 4 0
clare 0 0 0 1 1
table 3. the performer by activity matrix.
after creating the matrix, we measure the distance between two perform-
ers by comparing the corresponding row vectors. a simple distance measure
isminkowski distance which can be seen as a generalization of the euclidean
distance. but the minkowski distance only gives good results if performers exe-
cute comparable volumes of work. therefore, we also use the hamming distance
which does not consider the absolute frequency but only whether it is 0 or not.another metric is pearson’s correlation coeﬃcient which is frequently used to
ﬁnd the relationship among cases.
deﬁnition 4.10. ( /triangle
md,n
l,/trianglehd
l,/trianglepc
l)letlbe a log and /trianglelbe a performer
by activity matrix. for p1,p2∈p,n∈{1,2,3,...}:
–p1/trianglemd,n
l p2=(/summationtext
a∈a|(p1/trianglela)−(p2/trianglela)|n)1/n
–p1/trianglehd
lp2=(/summationtext
a∈aδ(p1/trianglela,p2/trianglela))/|a|
where δ(x,y)=/braceleftbigg
0i f(x>0∧y>0)∨(x=y=0 )
1 otherwise–p1/trianglepc
lp2=/summationtext
a∈a(((p1/trianglela)−¯x)((p2/trianglela)−¯y))//radicalbig/summationtext
a∈a((p1/trianglela)−¯x)/summationtext
a∈a((p2/trianglela)−¯y)
where ¯x=/summationtext
a∈a(p1/trianglela)/|a|,¯y=/summationtext
a∈a(p2/trianglela)/|a|
the minkowski distance /trianglemd,n
l has a parameter n:n= 1 is the rectilinear
distance also referred to as manhattan distance, n= 2 is the euclidean distance,
and for large values of nthe metric approximates the chebyshev distance. the
hamming distance /trianglehd
ldoes not have a parameter but could be extended with
some threshold value. in the case of pearson’s correlation coeﬃcient, the result
ranges from +1 to -1. a correlation of +1 means that there is a perfect positive
linear relationship between variables. a correlation of -1 means that there is a
maximal negative linear relationship between variables. in other words, if the
distance between performers is small, the correlation is closer to 1, if it is large,the correlation is closer to -1.
to illustrate the limitations of simple metrics like the minkowski distance we
consider table 3. clearly, from an intuitive point of view the distance between
sue and carol should be smaller than the distance between carol and clare
because carol and clare have no activities in common. the minkowski distance(n= 1) between sue and carol equals 3 and the distance between carol and
clare equals 4. however, if sue would have executed activity b and activity
c also three times, the distance between sue and carol would be 7 and thusincorrectly suggest that carol is closer to clare than sue. the hamming distance
is more robust and would indicate in both cases that carol is closer to sue:
sue/triangle
hd
lcarol equals 1 /5a n d carol /trianglehd
lclare equals 4 /5. if we calculate the
pearson’s correlation coeﬃcient, sue/trianglepc
lcarol equals 0 .2182 and carol /trianglepc
l
clare equals −0.6667. hence, the result of pearson’s correlation leads to the
same conclusion as the hamming distance.
note that if the volume of work varies signiﬁcantly, the metrics are not suit-
able. for example, it is diﬃcult to compare the proﬁle of a part-time worker witha full-time worker. thus, in some cases we ﬁrst apply the log
k(x+ 1) function
on the values of the performer by activity matrix, i.e., use a logarithmic scale
for/trianglel. note that we need to add “+1” to avoid negative values.
4.4 metrics based on special event types
the types of metrics mentioned in previous subsections do not consider event
types. they more or less assume that all events correspond to the completion of
an activity. but events can contain various event types such as schedule ,assign ,
withdraw ,reassign ,start,suspend ,resume ,piabort,ateabort,complete ,autoskip ,
manualskip ,a n dunknown . for example, schedule refers to the enabling of a task
for a speciﬁc case, assign refers to the allocation of such an enabled task to a user,
startrefers to the actual start of a task, and complete refers to the completion
of a task. event types such as withdraw ,reassign ,suspend ,resume ,piabort,a n d
ateabort may refer to exceptions which are interesting from the viewpoint of
sna.in this subsection, we take into account metrics based on special event types.
in particular, we concentrate on the reassign event type. to deﬁne metrics based
on special event types, we suppose that log lines have an event type. for con-
venience, we deﬁne an operation on events: πet(e)=event type for some event
e=(a,p). note that deﬁnition 4.1 could be extended to capture event types
such as used by commercial systems. in the next section we deﬁne an xml
format to capture this information.
before deﬁning metrics, the basic notations used for a single case c=(c0,c1,...)
are speciﬁed as follows.
deﬁnition 4.11. ( follow ,/triangleinv)letlbe a log. for p1,p2∈p,c=(c0,c1,...)∈l,
and some event type event type :
–follow (c,i,j)=πa(ci)=πa(cj)∧∀i<k<jπa(ck)/negationslash=πa(ci), for 0 ≤i<j< |c|
–p1/triangleinvevent type
c p2=∃o≤i<j< |c|follow (c,i,j)∧πp(ci)=p1∧
πet(ci)=event type ∧πp(cj)=p2
–|p1/triangleinvevent type
c p2|=/summationtext
0≤i<|c|⎧
⎨
⎩1i f∃i<j< |c|follow (c,i,j)∧πp(ci)=p1
∧πet(ci)=event type ∧πp(cj)=p2
0 otherwise
in a log, there may be several events that correspond to the same activity. if
the activity ais reassigned from a performer p1to a performer p2, we can ﬁnd
two events ciandcjsuch that ci=(a,p1),πet(ci)=/primereassign/prime,cj=(a,p2),
andπet(cj) is some event type. thus, we need follow to ﬁnd next event which
is related to ci.p1/triangleinvevent type
c p2denotes the function which returns true if
within the context of the case cperformers p1andp2both executed the same
activity and p1was responsible for a speciﬁc type of event and p2is the ﬁrst
performer of some event for the same activity. |p1/triangleinvevent type
c p2|denotes the
function which returns the number of times p1/triangleinvevent type
c p2in the case c.u s i n g
such relations, we deﬁne reassignment metrics. recall that reassign is a special
event type corresponding to the delegation from one performer to another.
deﬁnition 4.12. (reassignment metrics) letlbe a log. for p1,p2∈p:
–p1/triangleinv/primereassign/prime
l p2=(/summationtext
c∈l|p1/triangleinv‘reassign/prime
c p2|)/(/summationtext
c∈l(|c|−1))
–p1˙/triangleinv/primereassign/prime
l p2=(/summationtext
c∈l∧p1/triangleinv‘reassign /prime
c p21)/|l|
p1/triangleinv/primereassign/prime
l p2is obtained by dividing the total number of reassignments from
p1top2in the event log by the maximum number of reassignments in the log.
for example, if there are 10 events in a log and johnhas reassigned an activity
tomikeonce, john/triangleinv/primereassign/prime
l mike equals 1/9. p1˙/triangleinv/primereassign/prime
l p2ignores multiple
reassignment within one instance.
in this section we formalized the metrics introduced in section 3.2. it is important
to note that each of the metrics is derived from some log land the result can
be represented in terms of a weighted graph ( p,r,w ), where pis the set of
performers, ris the set of relations, and wis a function indicating the weightof each relation (see section 3.1). for example, the basic handover of work metric
ldeﬁnes r={(p1,p2)∈p×p|p1lp2/negationslash=0}andw(p1,p2)=p1lp2.
for the hamming distance r={(p1,p2)∈p×p|p1/trianglehd
lp2/negationslash=1}and
w(p1,p2)=1 −(p1/trianglehd
lp2). for the pearson’s correlation coeﬃcient r=
{(p1,p2)∈p×p|p1/trianglepc
lp2≥α}(where αis some threshold value between -1
and 1) and w(p1,p2)=( 1+( p1/trianglepc
lp2))/2. in other words, given an event log
leach metric results in a sociogram that can be analyzed using existing sna
tools.
5 mison
this section introduces our tool mison (mining social networks) . mison has
been developed to discover relationships between individuals from a range ofenterprise information systems including workﬂow management systems such as
staﬀware, inconcert, and mqseries, erp systems, and crm systems. based
on the event logs extracted from these systems mison constructs sociogramsthat can be used as a starting point for sna. the derived relationships can be
exported in a matrix format and used by most sna tools. with such tools, we
can apply several techniques to analyze social networks, e.g., ﬁnd interactionpatterns, evaluate the role of an individual in an organization, etc.
mison has been developed using java including xml-based libraries such as
jaxb and jdom, and provides an easy-to-use graphical user interface. figure 3shows the architecture of mison. the mining starts from a tool-independent
xml format which includes information about processes, cases, activities, event
times, and performers. from enterprise information systems recording event logs,we can export to this xml format.
figure 4 shows the xml schema describing this format. it is an extension of
the dtd suggested in [4]. the schema has the workﬂowlog element as a root
element. it has data,source ,a n dprocess elements. the source element contains
the information about software or system that was used to record the log (e.g.
staﬀware). the process element represents the process where the process log
belongs. note that there may be multiple process elements in a log. each process
element may hold multiple processinstance elements that correspond to cases.
theaudittrailentry element represents a log line, i.e., a single event. it contains
workﬂowmodelelement ,eventtype ,timestamp ,a n d originator elements. for
sna, the workﬂowmodelelement ,eventtype ,a n doriginator elements are most
important. the workﬂowmodelelement refers to the activity (or subprocess) the
event corresponds to. the eventtype speciﬁes the type of the event, e.g., schedule
(i.e., a task becomes enabled for a speciﬁc instance), assign (i.e., a task instance
is assigned to a user), start (the beginning of a task instance), complete (the
completion of a task instance), and reassign (as discussed in section 4.4). in
total, we identify 12 events. last but not least the originator element refers to
the performer. to make the format more expressive, we deﬁne the dataelement
and other elements have it as a sub tags. if users want to specify more information
than the basic elements, they can record the additional information using thestaffware
inconcert
mqseries
...event log
(xml format)
event log manager
mining manager
guiagna
netminer
ucinet
.
..sna tools
matrix translators
(product specific translators)log translators
(product specific translators)relationship
matrixenterprise
information
systems
basic
statisticslog information
mining
policies
mining result
user
fig. 3. the architecture of mison.
dataelement. such information can be used for other types of process mining
such as performance analysis, process knowledge extraction, etc. the complete
xml schema is described in the appendix.
 
fig. 4. mison workﬂow mining format (xml schema).
after reading an event log that conforms to the xml schema, mison provides
functionalities for displaying user statistics and event log statistics. using the
metrics deﬁned in section 4, mison constructs relationships between individuals.when calculating the relationships, the user can select suitable metrics and set
relevant options. the result can be displayed using a matrix representation and
a graph representation, but it can also be exported to sna tools. exported datacontains the number of performers, names of performers, and a relationship
matrix.
to illustrate the mison we have used an event log as generated with staﬀware,
which was converted to the xml format. for this log, we only consider the
“released by” event type to make sociograms. this event corresponds to thecomplete event type in our xml format. we have tested mison with several
metrics mentioned in previous section. figure 5 shows a screenshot of mison
when displaying the mining result of handover of work metrics.
fig. 5. mison screenshot showing a sociogram based on a staﬀware log.
mison can export the mining result using the agna-translator (but also
other tools like ucinet and netminer). agna (cf. www.geocities.com/imbenta/-
agna/) is an sna tool that allows for a wide variety of sociometric analysis tech-
niques. for example, agna supports various notions of centrality including the
bavelas-leavitt index described in section 3.1. john and sue have the highest
bavelas-leavitt index (the value is 4.2), while clare has the smallest value (2.8).figure 6 shows the analysis using the tool agna. it also shows the network
structure of result.
mison can also export the mining result to other sna tools like ucinet
(cf. www.analytictech.com) and netminer (cf. www.netminer.com). in fact, in
the case study described in the next section we will mainly use netminer to
analyze the social network.fig. 6. screenshot of agna when analyzing the input from mison.6 case study
6.1 context
to demonstrate how our metrics can be applied to real workﬂow logs and what
kinds of analysis can be performed, we employed real workﬂow log data andcarried out a case study. the case study we describe here involved one of the
twelve provincial oﬃces of the dutch national public works department, employ-
ing about 1,000 civil servants. for reasons of conﬁdentiality, we cannot disclosethe name of this speciﬁc oﬃce.
the oﬃce’s primary responsibility is the construction and maintenance of the
road and water infrastructure within its provincial borders. for this purpose,it subcontracts various parties such as road construction companies, cleaning
companies, and environmental agencies. also, the provincial oﬃce purchases
services and products to support its construction and maintenance activities on
the one hand (e.g. mechanical tools, fuel, and rasters) and its administrative
activities on the other (e.g. oﬃce supplies).
the process we dealt with concerns the handling of invoices, as received by the
provincial oﬃce in question. in general, the handling of an invoice involves several
validation steps and, if the invoice is approved, it is completed by payment. on ayearly basis, the provincial oﬃce processes some 20,000 invoices from its various
subcontractors and suppliers.
the provincial oﬃce has implemented its own workﬂow management system
to support the processing of invoices. this system records transaction informa-
tion between activities. we extracted a process log and analyzed it. since the
extracted data are also stored in a relational database, we ﬁrst developed a trans-lator which converts the process log in the database to an xml ﬁle using the
format described in the previous section.
the process consists of 17 real activities, aside from logistic steps and splits.
the log data contains 4,988 cases. the number of total log lines (i.e. events) is
33,603 and 43 employees participated in the process execution. the log holdsno information about reassignments. hence, we cannot apply the reassignment
metrics presented in section 4.4. however, all other metrics we discussed in
section 4 have been applied in this case study.
6.2 metrics application
we applied our metrics to the log data and derived several social networks. more-
over, by applying several sna techniques, we tried to ﬁnd the characteristics of
the social network.
figure 7 shows a social network which was derived by applying the handover
of work metrics. the network represents how cases are transferred among per-
formers. as indicated in section 4, there are three reﬁnements possible for thehandover of work metrics. to generate this network, we take into account direct
succession and multiple transfers in a case, but we ignore the real process struc-
ture, i.e., we use the metric 
lintroduced in deﬁnition 4.3. the network has43 nodes and 406 links. the density of network is 0.225 and it has no isolated
nodes.
fig. 7. social network based on the handover of work metric l.
in order to ﬁnd people who are located in the center of the network, we
calculate several centrality values such as betweenness, in and out closeness, andpower [11] of each node. normally, the nodes which are the most central have a
powerful position in the network. table 4 shows the top 10 ranked performers
among the people involved based on (1) betweenness (i.e., the extent to which a
node lies between all other pair of nodes on their geodesic paths), (2) in-closeness
(i.e., the inverse of the sum of distances from all the other nodes to a given node,
which is then normalized by multiplying it by the number of nodes minus 1),(3)out-closeness (i.e., the normalized inverse of the sum of distances from a
node to all the other nodes), and (4) power (i.e., bonacich’s metric based on
the principle that nodes connected to powerful nodes are also powerful [11]). inthis table, we ﬁnd that user1 anduser4 have larger values than others in most
measurements.
2
2note that the real user names are changed into anonymous identiﬁers like user1.
although during our analysis and interaction with the organization real user names
were used, we abstract from the real user names in this paper to ensure privacy and
conﬁdentiality.ranking name betweenness name in-closeness name out-closeness name power
1 user1 0.152 user1 0.792 user23 0.678 user4 4.102
2 user4 0.141 user4 0.792 user1 0.667 user1 2.424
3 user23 0.085 user16 0.75 user4 0.656 user30 1.964
4 user5 0.079 user23 0.689 user5 0.635 user17 1.957
5 user16 0.065 user2 0.667 user13 0.625 user7 1.774
6 user13 0.057 user15 0.618 user18 0.616 user8 1.394
7 user18 0.052 user5 0.609 user2 0.606 user2 1.347
8 user2 0.049 user7 0.592 user16 0.58 user23 1.098
9 user7 0.04 user13 0.568 user7 0.572 user16 1.058
10 user31 0.029 user18 0.568 user17 0.556 user18 0.581
table 4. performers having high values for (1) betweenness, (2) in-closeness, (3) out-
closeness, and (4) power when analyzing the social network shown in figure 7.
when generating a social network related to the handover of metrics, we can
also consider indirect succession using a “causality fall factor” β. by applying
various value of β, we generate several social networks. despite of value of β,
the derived networks have the same structure except the weight of arcs. table 5
shows the sum, average, standard deviation, minimum value, and maximumvalue of the arc weights based on diﬀerent values of β. if we use a small β,t h e
value of arcs between performers who have the relationship of direct succession is
larger than between others. however, if we use a large value of β, these diﬀerences
decrease.
beta sum average standard deviation min. value max. value
0.1 1.000025 0.000541 0.003269 0 0.086734
0.3 1.000091 0.000541 0.002895 0 0.074274
0.5 1.000001 0.000541 0.002631 0 0.065751
0.7 1.000011 0.000541 0.002522 0 0.063232
0.9 0.999979 0.000541 0.002586 0 0.067214
table 5. summary of arc weights for various values of β.
to ﬁnd subcontracting relationships between people, we apply in-between
metrics. figure 8 shows the resulting social network. the network has 43 nodes
and 146 links. the density of network is 0.081 and 8 nodes are isolated from the
network. in this network, the direction of arcs is important. the start node of
an arc represents a contractor, while the end node of an arc represents a sub-contractor. table 6 shows the ten people of highest in-degree and out-degree of
centrality (based on the in-closeness and out-closeness calculated by netminer).
figure 9 shows the social network derived by applying the working together
metrics and the ego network [33] corresponding to user41 . in the ego network,fig. 8. social network based on subcontracting metric.
ranking name in-closeness name out-closeness
1 user4 0.262 user4 0.262
2 user1 0.214 user1 0.214
3 user16 0.214 user7 0.167
4 user18 0.19 user13 0.143
5 user5 0.167 user5 0.167
6 user7 0.167 user16 0.214
7 user13 0.143 user18 0.19
8 user19 0.143 user14 0.095
9 user10 0.119 user23 0.119
10 user17 0.119 user27 0.119
table 6. a list of people having a high degree of in-/out-closeness based on the sub-
contracting network shown in figure 8.the nodes represent the people working together with user4 according to this
metric. note that user41 works together with user1,user4,user23 ,user26 ,a n d
user31 . the average size of ego network of the generated network is 24.698 and
the standard deviation of this value is 9.709. this means that the social network
suggests that an employee on average works with 24 people.
fig. 9. social network based on the working together metric (left) and the ego network
ofuser41 (right).
applying the metrics based on joint activities, we calculate the distance be-
tween people. figure 10 shows the social network which is derived by applying
pearson’s correlation coeﬃcient. from the performer by task matrix, we ﬁrst ap-
plylog10(x+ 1), then calculate the distances between people. we get 5 clusters
and two isolated nodes. the nodes in the same cluster play the same role. in
this case, the bridge node can be interpreted as a person who has multiple roles.
in the network, user8,user28 ,user37 ,a n duser43 have multiple roles.
finally, we explore how cases are transferred among groups. to calculate
case transfers among groups, we combine the handover of work metrics with
a role model. in this case study, we use the results of correspondence analy-
sis [13] as a role model of performers. (of course, we can also use the results
of the metrics based on joint activities.) correspondence analysis is frequently
used in biological science to analyze ecological systems based on species scoresfor speciﬁc locations [24]. in this paper, we apply correspondence analysis to
ﬁnd relationships between activities and performers. we ﬁrst make a performer
by activity matrix from the workﬂow logs. then, by applying correspondenceanalysis to the matrix, we derive the relationship between activities, between
performers, and between activities and performers. figure 11 shows the graph-
ical result of applying correspondence analysis. in the ﬁgure, boxes representactivities and circles represents performers. closely positioned nodes indicate a
strong correspondence from a work handover perspective between the respective
users and/or tasks. (although the distance between user nodes and task nodesfig. 10. social network derived from pearson’s correlation coeﬃcient (threshold value
0.75).
should not be interpreted as an absolute measure.) from this ﬁgure, performers
and activities are classiﬁed into ﬁve groups. table 7 shows the results. in the
remainder we will use these ﬁve groups as a role model.
figure 12(a) shows the social network of handover of work metrics considering
the role model given in table 7. by putting the nodes in the same group closely,we have reconstructed the original network. and by summing up the weight of
arcs between groups we derive the aggregated network shown in figure 12(b).
table 8 shows the information ﬂow of the network according the role model.
it is also derived by summing up the weight of arcs between groups. for example,
the value form group1 togroup2 is calculated by adding up the weights of the
arcs from nodes in group1 to nodes in group2 . based on table 8 we can make
some observations. first, the highest value (1.330) is in the cell from group1
togroup1 . it means that the handover of work within group1 happened most
frequently. second the values from group1 togroup5 (0.895), from group4 to
group1 (0.620), and from group5 togroup4 (0.529) have the high values. it
represents that more handover of work happened between these groups.
the goal of this subsection is not to provide a comprehensive overview of
all the diagrams we developed or to provide very speciﬁc information about the
studied process or organization in question. in the next section, we will reﬂect
on the relevance of the various analyses for the organization in question.fig. 11. graphical result of correspondence analysis.
group performers activities
group1user1, user2, user4, user16, task2, task3, task15, task21,
user23, user30, user35 task22
group2 user3, user24, user25, user40
group3 user5, user13, user32, user43 task8, task19
user6, user8, user9,user12,
group4 user15, user22, user31, task18
user39, user41
user7, user10, user11, user14,
user17, user18, user19, user20, task5, task7, task11, task13
group5 user21, user26, user27, user28, task16, task17, task20
user29, user33, user34, user36,
user37, user38, user42
table 7. the result of correspondence analysis: users are clustered into ﬁve groups.
hhhhhfromtogroup1 group2 group3 group4 group5 sum
group1 1.330 0.058 0.002 0.002 0.895 2.287
group2 0.143 0.014 0.020 0.005 0.028 0.211
group3 0.014 0.005 0.002 0.104 0.030 0.154
group4 0.620 0.000 0.002 0.005 0.004 0.630
group5 0.132 0.135 0.134 0.526 0.617 1.545
sum 2.239 0.212 0.160 0.642 1.574 4.827
table 8. information ﬂow between groups.(a) social network of handover of work
metrics considering roles(b) information flow among roles
fig. 12. social network based on handover of work metric using the ﬁve groups shown
in table 7.
6.3 organizational relevance
prior to our analysis, the involved management did not express any speciﬁc needs
or questions about the invoice handling process. and yet, they indicated that
the handling of invoices is in the center of their attention. there are two main
reasons for this. first of all, it is the single most distributed processes under
the responsibility of the public works department. for example, if invoices are
related to some particular public works project, its project leader must person-ally certify that delivery has taken place before payment may happen. project
leaders, however, may reside at any location within the provincial borders (in
contrast to the performers working at the administrative head oﬃce). the dis-tributed nature of the process increases the probability of hand-over errors and
work getting lost.
the second reason for the attention for the invoice process is the recent dutch
law about penalty interests. parties that send invoices to public organizations
and receive their rightful payment after more than 30 days are entitled to acompensation proportional to the invoice amount. due to the current interest
rate, this compensation exceeds commercial rates. sluggish settlement of invoices
directly aﬀects the public works department’s ﬁnancial position.
both issues have contributed to the decision to introduce workﬂow technology
to support the invoice handling process, as this is expected to increase qualityand decrease process lead time. management expressed a general interest in
results from sna to learn about process execution, behavior of the involved
parties, and potential opportunities for improvement.after we applied our metrics to the log data and derived the social networks as
shown, we presented the managers of the three departments mostly involved ouranalysis results in a joint session. roughly speaking, the three departments are
respectively responsible for the administrative, contractual, and ﬁnancial aspects
of the invoice handling. the goal of this meeting from a research perspective wasthreefold:
1. to validate our understanding of the process.
2. to generate feedback on our analyses.3. to identify further analysis opportunities.
to determine whether we properly understood the process, we discussed the
process model of the invoice handling process and the involved parties for each
of the various steps. this led to no surprising new insights. we will reﬂect on
the other two aims of the meeting in more detail.
feedback on analyses. after we explained the various sna notions we pre-
sented the results from our analyses as presented for a large part in section 6.2.
we started with discussing the top 5 and bottom 5 of the lists of performers
as ordered on their scores on betweenness, in and out closeness, and power inrespectively the social networks of handover, subcontracting, and working to-
gether metrics. note that we used the lists that included the real names of the
actors to facilitate meaningful feedback.
from the responses, we learned that, typically, performers with high scores
(e.g.user1 anduser4 in table 4) work for the administrative department in
supportive functions. this conﬁrms a general insight that highly connected peo-ple often are assistants. because the administrative department is responsible
for both the preparation and completion of the handling of each invoice, its staﬀ
is involved in the handling of each case, giving them strong ties with other per-formers. the managers indicated, however, that not all of the people in these
positions were present in the top of the lists, indicating that having a supportive
function is not suﬃcient in itself to become highly connected.
performers with low scores could be categorized as follows. first of all, project
leaders were highly represented in the bottom of the lists (e.g. user9). as stated
before, they play an isolated role in the handling of invoices, being solely re-
sponsible for certifying that goods have been delivered (and only if an invoice
is related to any project at all). other performers with limited formal veriﬁca-tion responsibilities were identiﬁed as well (e.g. user22 ). the second category
of relatively unconnected performers could be traced back to auxiliary logins
(e.g.user30 ), used by system administrators and management to deal with ex-
ceptional circumstances. an example of an exceptional situation is an invoice
that is being withdrawn while its processing has already started. the isolated
“participation” of this category of users is therefore not very surprising. it did,however, make the managers conscious of the visibility of this type of irregular
interference. one manager remarked: “so, auditors can derive this type of infor-
mation too.” the third category turned out to be more surprising, as it involvedsenior positions in the contractual and ﬁnancial departments (e.g. user41 ). at
least nominally, they are expected to be actively involved in the process. theirlow position could indicate that a large amount of work being executed with
workﬂow technology is delegated to their juniors. also, one of these performers
would retire in a couple of weeks.
after the discussion of the lists of performers, we presented the social network
indicating the distance between people (see figure 10). the relations between
users were readily recognized by the involved managers. for example, the sub-graph of user1,user2,user4 anduser23 concerned the group of highly-connected
assistants at the administrative oﬃce we encountered earlier. then, we took a
closer look at the two isolated nodes. one of them - rather characteristically -
turned out to be the system administrator ( user19 ). the isolated position of
the other node, user16 , led to some excitement. at ﬁrst, the isolation of this
performer was not understood, as she was considered to perform an explicit role
in the contractual handling of invoices. then it occurred to one of the managers
that the involved person was included in another cluster under a diﬀerent user
name as well ( user32 ). the existence of such a situation was a complete surprise
to the managers and considered highly undesirable for compliancy reasons.
the ﬁnal result we obtained feedback on, involved the correspondence anal-
ysis, such as presented in table 7 and figure 11. managers readily recognized
group1 ,group3 ,a n dgroup5 . at the same time, they indicated that they did not
diﬀerentiate themselves between most of the performers in group2 andgroup4 .
this is in line with the observation that some performers from these groups
are closely positioned to each other in figure 10. for example, the positions ofuser25 fromgroup2 anduser31 fromgroup4 nearly coincide. and yet, the strong
correspondence between group4 andtask18 indicates that a degree of performer
specialization has taken place with respect to this speciﬁc invoice check that hadgone unnoticed with the concerned managers.
further analyses. aside from the various surprising aspects of the invoice
handling process, the managers of the provincial oﬃce were most intrigued bythe subcontracting analysis. after some discussion, they expressed their suspicion
about three parts of the process where a similar yet undesirable “back-and-
forth” behavior may take place. speciﬁcally, they meant that a performer (thecontractor) routes a work package to another performer (the subcontractor),
who subsequently routes it back to the contractor or one of the contractor’s
close colleagues, because the subcontractor feels the invoice is received in error.this, for example, takes place when an invoice related to a project is sent for
veriﬁcation to the wrong project leader. each occurrence of this pattern is highly
undesirable, as it slows down the processing of the invoice without making any
progress. from an organizational perspective, it is just as unwelcome when the
work package is routed back to the original contractor as to a colleague with asimilar organizational role.
our initial analysis did not cover this more general kind of subcontracting
pattern, because it focused on the identity of the original contractor only (seedeﬁnition 4.6) . to investigate the expressed suspicions we analyzed the mining
log in various ways, using other than sna techniques as well. therefore, in thecontext of this paper, we will be brief about this additional analysis. it turned
out that in the handling of over 17 % of all invoices, at least once an undesired
subcontracting takes place at either of the three identiﬁed places in the process.the exact distribution is shown in figure 13. as can be seen, there are cases
where 10 or more erroneous routings take place.
as a result of the additional analysis we carried out and discussed again,
management of the provincial oﬃce re-enforced the existing procedure that staﬀ,
when in doubt, should contact the intended next performer by phone ﬁrst. es-
pecially in cases where hand-overs take place between performers at the headand regional oﬃces, management felt that people acted too shy with respect to
this procedure.
0%2%4%6%8%10%12%
percentage of
total invoices
123456789 > 1 0
number of undesired subcontracting occurences within the handling of a 
single invoice
fig. 13. the distribution of undesired generalized subcontracting within the handling
of invoices.
6.4 discussion
in this section, we demonstrated how our metrics can be applied to a real work-
ﬂow log of a dutch organization. based on the metrics deﬁned in section 4, we
derived various sociograms, some of which have been shown in this paper. us-ing the sociograms we applied sna techniques such as betweenness, closeness,
power, and ego network, etc. we also showed the possibility of applying other
analysis techniques such as correspondence analysis to compare users based ontheir “proﬁle”.
next we discussed the organizational relevance of our analyses. as we indi-
cated, many of our ﬁndings corresponded with existing insights of the involvedmanagement, supporting the correctness of our analyses. at various points, our
analyses came as a surprise. these particularly concerned senior performers whodid not seem very connected, the clear visibility of the actions of irregular per-
formers, and a degree of unnoticed performer specialization that had taken place.
in addition, we found it interesting to observe how our analysis results triggeredthe management to identify and deﬁne additional questions. this, in our eyes,
strongly supports the relevance and viability of process mining in an organiza-
tional context, even though our additional analyses extended beyond sna.
as discussed in section 2.4, ethical and legal issues play an important role
in the practical application of process mining in general and sna analysis inparticular. one concern we certainly felt is that the validation and discussion of
our analysis results required us to disclose the identity of the involved performers.
note that a discussion of anonymized sociograms with the involved managementwould not have been less meaningful. we informed the management that it is
illegal to perform actions towards individuals based on the presented results.
because of the clear value of this type of analysis, the managers expressed theirintent to ask for the consent of their employees for the use of future analyses.
note that the re-enforced policy that resulted from our additional analysis was
neither based on information obtained on individual performers, nor did it aﬀect
any individual more than others.
7 related work
related work can be divided in two categories: process mining and sna.
7.1 related work on process mining
the idea of process mining is not new [4, 7, 15] but has been mainly aiming at the
control-ﬂow perspective. the idea of applying process mining in the context of
workﬂow management was ﬁrst introduced in [7]. this work is based on workﬂowgraphs, which are inspired by workﬂow products such as ibm mqseries work-
ﬂow (formerly known as flowmark). cook and wolf have investigated similar
issues in the context of software engineering processes. in [15] they describe three
methods for process discovery: one using neural networks, one using a purely al-
gorithmic approach, and one markovian approach. schimm [42] has developed amining tool suitable for discovering hierarchically structured workﬂow processes.
herbst and karagiannis also address the issue of process mining in the context of
workﬂow management using an inductive approach [27, 26]. they use stochastictask graphs as an intermediate representation and generate a workﬂow model
described in the adonis modeling language. most of the approaches have prob-
lems dealing with parallelism and noise. our work in [1, 6] is characterized by thefocus on workﬂow processes with concurrent behavior (rather than adding ad-
hoc mechanisms to capture parallelism). in [47] a heuristic approach using rather
simple metrics is used to construct so-called “dependency/frequency tables” and“dependency/frequency graphs”. these are then used to tackle the problem of
noise. the approaches described in [1, 6, 47] are based the αalgorithm.
process mining in a broader sense can be seen as a tool in the context of
business (process) intelligence (bpi). in [25, 41] a bpi toolset on top of hp’s
process manager is described. the bpi tools set includes a so-called “bpi pro-
cess mining engine”. however, this engine does not provide any techniques as
discussed before. instead it uses generic mining tools such as sas enterprise
miner for the generation of decision trees relating attributes of cases to informa-tion about execution paths (e.g., duration). in order to do workﬂow mining it
is convenient to have a so-called “process data warehouse” to store audit trails.
such a data warehouse simpliﬁes and speeds up the queries needed to derivecausal relations. in [35] zur muehlen describes the pisa tool which can be used
to extract performance metrics from workﬂow logs. similar diagnostics are pro-
vided by the aris process performance manager (ppm) [29]. the later tool iscommercially available and a customized version of ppm is the staﬀware pro-
cess monitor (spm) [45] which is tailored towards mining staﬀware logs. note
that none of the latter tools is extracting models, i.e., the results do not includecontrol-ﬂow, organizational or social network related diagnostics. the focus is
exclusively on performance metrics.
for more information on process mining we refer to a special issue of com-
puters in industry on process mining [5] and the survey paper [4]. note that
although quite some work has been done on process mining from event logs none
of the approaches known to the authors have incorporated the social dimensionas discussed in this paper.
7.2 related work on sna
since the early work of moreno [34], sociometry, and sna in particular, have
been active research domains. there is a vast amount of textbooks, research pa-
pers, and tools available in this domain [8, 10, 12, 18, 22, 23, 34, 37, 43, 46]. therehave been many studies analyzing organizational activity based on insights from
social network analysis. however, some of these studies typically have an ad-
hoc character and sociograms are typically constructed based on questionnairesrather than using a structured and automated approach as described in this
paper. more structured approaches are often based on the analysis of e-mail
interaction and additional electronic sources. several studies have generated so-ciograms from email logs in organization [16, 17, 19, 36, 38] to analyze the com-
munication structure. such studies have resulted in the identiﬁcation of relevant,
recurrent aspects of interaction in organizational contexts [9, 21]. however, thesestudies are unable to relate the derived social networks to a particular workﬂow
process, as the analyzed data does not reveal to what activity or case it applies.
most tools in the sna domain take sociograms as input. mison is one of
the few tools that generate sociograms as output. the only comparable tools
are tools to analyze e-mail traﬃc, cf. buddygraph (www.buddygraph.com) and
metasight (www.metasight.co.uk/). however, these tools monitor unstructuredmessages and cannot distinguish between diﬀerent activities (e.g., work-related
interaction versus social interaction).
as indicated in the introduction, this paper extends the results presented in
[3]. unlike [3], this paper provides concrete metrics, a more elaborate descriptionof mison, and a case study illustrating the applicability of the approach.
8 conclusions
this paper presents an approach, concrete metrics, and a tool to extract infor-mation from event logs and construct a sociogram which can be used to analyzeinterpersonal relationships in an organization. today many information systems
are “process aware” and log events in some structured way. as indicated in the
introduction, workﬂow management systems register the start and completionof activities, erp systems log all transactions (e.g., users ﬁlling out forms), call
center and crm systems log interactions with customers, etc. these examples
have in common that there is some kind of event log. unfortunately, the infor-mation in these logs is rarely used to derive information about the process, the
organization, and the social network. in this paper we focus on the latter aspect
and present an approach to discover sociograms. these sociograms are based onthe observed behavior and may use events like the transfer of work or delegation
from one individual to another. mison can interface with commercial systems
such as staﬀware and standard sna tools like agna, ucinet and netminer,thus allowing for the application of the ideas presented in this paper.
this paper also presents a case study conducted within a dutch national
public works department. the case study shows that the event logs in real or-
ganizations allow for social network analysis. moreover, in this particular case
the analysis results provide relevant, surprising organizational information. theestablished results and resulting discussions have formed the basis for additional
process mining to deal with managerial concerns, resulting in the re-enforcement
of organizational policies. in the future, we plan to repeat our analysis within the
public works department and apply our approach in many other organizations
as well. it would be interesting to compare the results we obtain on the basisof event logs to results of the analysis of other communication means usage e.g.
e-mail. this would provide an even richer view on organizational interaction and
process improvement opportunities.
we also investigate extensions of the approach using ﬁltering techniques and
more advanced forms clustering. for example, we now abstract from the resultsof activities. if activities or cases can be classiﬁed as successful or unsuccessful,
important or unimportant, standard or special, etc., this information could be
used when building sociograms.
recently, mison has been integrated in the prom framework
3.t h ep r o m
framework allows for various types of process mining, i.e., given a log it is possibleto not only derive sociograms but also process models. the prom framework also
3see www.processmining.org for more information.provides an ltl checker that can check properties expressed in linear temporal
logic (ltl) [32]. this allows for all kinds of questions, e.g., checking the 4-eyesprinciple (two tasks need to be executed by diﬀerent people to avoid fraud).
this ltl checker can be used to ask more detailed questions based in insights
generated from the sna analysis. in the context of the prom framework alsoa prototype of an e-mail analysis tool has been developed. based on a user’s
inbox located on some exchange server, the prototype can translate the e-mails
to the xml format described in this paper. however, since e-mails may referto diﬀerent processes and there are no explicit pointers to tasks and cases, and
heuristics and/or conventions need to be used. therefore, we only consider this
as means to provide more context to the sna analysis based on true event logs.
acknowledgement
minseok song is visiting the department of technology management at eind-hoven university of technology with funding by the bk21 program. he would
like to thank the ministry of education of korea for its ﬁnancial support through
the bk21 program. the authors would also like to thank ton weijters, boudewijnvan dongen, ana karla alves de medeiros, andriy anikolov, laura maruster,
eric verbeek, monique jansen-vullers, michael rosemann, and peter van den
brand for their on-going work on process mining techniques and tools at eind-
hoven university of technology.
references
1. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
models from timed logs. in y. han, s. tai, and d. wikarski, editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
2. w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
3. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in m. weske, b. pernici, and j. desel, editors,
international conference on business process management (bpm 2004) ,l e c t u r e
notes in computer science, springer-verlag, berlin, 2004.
4. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267, 2003.
5. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining ,s p e c i a l
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
6. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128–1142, 2004.
7. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.8. a.a. bavelas. a mathematical model for group structures. human organization ,
7:16–30, 1948.
9. j. begole, j. tang, r. smith, and n. yankelovich. work rhythms: analyzing
visualizations of awareness histories of distributed groups in acm conference
on computer supported cooperative work , pages 334-343, 2002.
10. h.r. bernard, p.d. killworth, c. mccarty, g.a. shelley, and s. robinson. com-
paring four diﬀerent methods for measuring personal social networks. social
networks , 12:179–216, 1990.
11. p. bonacich. power and centrality: a family of measures. american journal of
sociology , 92:1170–1182, 1987.
12. r.s. burt and m. minor. applied network analysis: a methodological introduction .
sage, newbury park ca, 1983.
13. s. e. clausen. applied correspondence analysis: an introduction . sage publica-
tions, 1998.
14. college bescherming persoonsgegevens (cbp; dutch data protection authority).
http://www.cbpweb.nl/index.htm.
15. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
16. s. farnham, s.u. kelly, w. portnoy, and j.l.k. schwartz. wallop: designing social
software for co-located social networks. proceedings of the 37th annual hawaii
international conference on system sciences (hicss’04) , big island, hawaii, jan-
uary 05 - 08, 2004.
17. s. farnham, w. portnoy, and a. turski. using email mailing lists to approximate
and explore corporate social networks. in d.w. mcdonald, s. farnham, andd. fisher, editors, cscw’04 workshop on social networks , chicago, il, november
06 - 10, 2004.
18. m. feldman. electronic mail and weak ties in organizations. oﬃce: technology
and people , 3:83–101, 1987.
19. d. fisher and p. dourish. social and temporal structures in everyday collabo-
ration. in e. dykstra-erickson and m. tscheligi, editors, proceedings of the 2004
conference on human factors in computing systems (chi2004) , pages 551-558.
vienna, austria, april 24 - 29, 2004.
20. l. fischer, editor. workﬂow handbook 2001, workﬂow management coalition .
future strategies, lighthouse point, florida, 2001.
21. d. fischer and p. dourish. social and temporal structures in everyday collob-
oration. in e. dykstra-erickson and m. tscheligi, editors, conference on human
factors in computing systems (chi 200) , pages 551–558, 2004.
22. l.c. freeman. a set of measures of centrality based on betweenness. sociometry ,
40:35–41, 1977.
23. l.c. freeman. centrality in social networks: conceptual clariﬁcation. social
networks , 1:215–239, 1979.
24. h. g. gauch. data analysis in community and landscape ecology . cambridge
university press, 1982.
25. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors, proceedings of 27th international conference on very large data bases
(vldb’01) , pages 159–168. morgan kaufmann, 2001.26. j. herbst. a machine learning approach to workﬂow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
27. j. herbst. ein induktiver ansatz zur akquisition und adaption von workﬂow-
modellen . phd thesis, universit¨ at ulm, november 2001.
28. b.j.p. hulsman and p.c. ippel. personeelsinformatiesystemen: de wet persoon-
sregistraties toegepast. registratiekamer, the hague, 1994.
29. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
30. s. jablonski and c. bussler. workﬂow management: modeling concepts, architec-
ture, and implementation . international thomson computer press, london, uk,
1996.
31. f. leymann and d. roller. production workﬂow: concepts and techniques .
prentice-hall ptr, upper saddle river, new jersey, usa, 1999.
32. z. manna and a. pnueli. the temporal logic of reactive and concurrent systems:
speciﬁcation . springer-verlag, new york, 1991.
33. j.c. mitchell. the concept and use of social networks. in j.c. mitchell, editor,
social networks in urban situations , pages 1–50. manchester university press,
manchester, 1969.
34. j.l. moreno. who shall survive? nervous and mental disease publishing com-
pany, washington, dc, 1934.
35. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1–10. ieee computer society press, los alamitos, california, 2000.
36. b.a. nardi, s. whittaker, e. isaacs, m. creech, j. johnson, and j. hainsworth.
integrating communication and information through contactmap .communications
of the acm , 45(4):89–95, 2002.
37. h. nemati and c.d. barko. organizational data mining: leveraging enterprise
data resources for optimal performance . idea group publishing, hershey, pa,
usa, 2003.
38. h. ogata, y. yano, n. furugori, and q. jin. computer supported social net-
working for augmenting cooperation. computer supported cooperative work ,
10(2):189–209, 2001.
39. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
40. l.b. sauerwein and j.j. linnemann. guidelines for personal data processors:
personal data protection act. ministry of justice, the hague, 2001.
41. m. sayal, f. casati, and m.c. shan u. dayal. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb’02) ,
pages 880–883. morgan kaufmann, 2002.
42. g. schimm. generic linear business process modeling. in s.w. liddle, h.c. mayr,
and b. thalheim, editors, proceedings of the er 2000 workshop on conceptual
approaches for e-business and the world wide web and conceptual modeling ,
volume 1921 of lecture notes in computer science , pages 31–39. springer-verlag,
berlin, 2000.
43. j. scott. social network analysis . sage, newbury park ca, 1992.
44. m. smith. invisible crowds in cyberspace: measuring and mapping the social struc-
ture of usenet . in m. smith and p. kollock, editors, communities in cyberspace.
routledge press, 1999.45. staﬀware. staﬀware process monitor (spm). http://www.staﬀware.com, 2002.
46. s. wasserman and k. faust. social network analysis: methods and applications .
cambridge university press, cambridge, 1994.
47. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151–162, 2003.
appendix
this appendix provides the xml schema described in figure 4.
<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/xmlschema"
elementformdefault="qualified" attributeformdefault="unqualified">
<xs:element name="workflowlog">
<xs:complextype>
<xs:sequence>
<xs:element ref="data" minoccurs="0"/>
<xs:element ref="source" minoccurs="0"/>
<xs:element ref="process" maxoccurs="unbounded"/>
</xs:sequence>
<xs:attribute name="description" type="xs:string"
use="optional"/></xs:complextype>
</xs:element>
<xs:element name="source">
<xs:complextype>
<xs:sequence>
<xs:element ref="data" minoccurs="0"/>
</xs:sequence>
<xs:attribute name="program" type="xs:string"
use="required"/>
</xs:complextype>
</xs:element>
<xs:element name="process">
<xs:complextype>
<xs:sequence>
<xs:element ref="data" minoccurs="0"/>
<xs:element ref="processinstance" minoccurs="0" maxoccurs="unbounded"/>
</xs:sequence><xs:attribute name="id" type="xs:string" use="required"/>
<xs:attribute name="description" type="xs:string" use="optional"/>
</xs:complextype>
</xs:element>
<xs:element name="audittrailentry">
<xs:complextype><xs:sequence>
<xs:element ref="data" minoccurs="0"/><xs:element name="workflowmodelelement" type="xs:string"/>
<xs:element name="eventtype">
<xs:complextype>
<xs:simplecontent>
<xs:restriction base="xs:string">
<xs:enumeration value="schedule"/><xs:enumeration value="assign"/>
<xs:enumeration value="withdraw"/>
<xs:enumeration value="reassign"/><xs:enumeration value="start"/>
<xs:enumeration value="suspend"/>
<xs:enumeration value="resume"/>
<xs:enumeration value="pi_abort"/>
<xs:enumeration value="ate_abort"/><xs:enumeration value="complete"/>
<xs:enumeration value="autoskip"/>
<xs:enumeration value="manualskip"/><xs:enumeration value="unknown"/>
<xs:attribute name="unknowntype" type="xs:string" use="optional"/>
</xs:restriction>
</xs:simplecontent>
</xs:complextype>
</xs:element><xs:element name="timestamp" type="xs:datetime" minoccurs="0"/>
<xs:element name="originator" type="xs:string" minoccurs="0"/>
</xs:sequence>
</xs:complextype>
</xs:element>
<xs:element name="data">
<xs:complextype>
<xs:sequence>
<xs:element name="attribute" maxoccurs="unbounded">
<xs:complextype>
<xs:simplecontent>
<xs:extension base="xs:string">
<xs:attribute name="name" type="xs:string" use="required"/>
</xs:extension>
</xs:simplecontent>
</xs:complextype>
</xs:element>
</xs:sequence>
</xs:complextype>
</xs:element><xs:element name="processinstance">
<xs:complextype>
<xs:sequence>
<xs:element ref="data" minoccurs="0"/>
<xs:element ref="audittrailentry" minoccurs="0" maxoccurs="unbounded"/>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required"/>
<xs:attribute name="description" type="xs:string" use="optional"/>
</xs:complextype>
</xs:element>
</xs:schema>