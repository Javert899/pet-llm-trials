beyond process mining: from the past to
present and future
wil m.p. van der aalst1, maja pesic1, and minseok song2
1department of mathematics and computer science,
eindhoven university of technology,
p.o. box 513, nl-5600 mb, the netherlands
w.m.p.v.d.aalst,m.pesic@tue.nl
2school of technology management
ulsan national university of science and technology,
100 banyeon-ri, ulju-gun, ulsan metropolitan city, 689-798, south korea
minseok.song@gmail.com
abstract. traditionally, process mining has been used to extract mod-
els from event logs and to check or extend existing models. this has
shown to be useful for improving processes and their it support. pro-
cess mining techniques analyze historic information hidden in event logs
to provide surprising insights for managers, system developers, auditors,
and end users. however, thus far, process mining is mainly used in an of-
°ine fashion and not for operational decision support . while existing pro-
cess mining techniques focus on the process as a whole, this paper focuses
on individual process instances (cases) that have not yet completed. for
these running cases, process mining can used to check conformance ,pre-
dict the future , and recommend appropriate actions . this paper presents
a framework for operational support using process mining and details a
coherent set of approaches that focuses on time information. time-based
operational support can be used to detect deadline violations, predict the
remaining processing time, and recommend activities that minimize °ow
times. all of this has been implemented in prom and initial experiences
using this toolset are reported in this paper.
1 introduction
processes are everywhere. organizations have business processes to manufacture
products, provide services, purchase goods, handle applications, etc. also in our
daily lives we are involved in a variety of processes, for example when we use our
car or when we book a trip via the internet. more and more information about
these processes is captured in the form of event logs . contemporary systems,
ranging from copiers and medical devices to enterprise information systems and
cloud infrastructures, record massive amounts of events. these events can be
used to make processes visible. using process mining techniques it is possible
to discover processes [2, 5]. moreover, event logs can be checked to assess con-
formance/compliance with respect to de¯ned processes and process models can
be modi¯ed and extended using process mining techniques. this provides theinsights necessary to manage, control, and improve processes. process mining
has been successfully applied in a variety of domains ranging from healthcare
and e-business to high-tech systems and auditing.
despite the success of process mining, a limitation is that existing techniques
are rarely used in an operational setting. process mining is mainly used in an
o²ine setting where historical information is analyzed without considering the
running cases , i.e., instances of the process that have not completed yet. the goal
of this paper is to demonstrate that process mining techniques can be used for
operational decision support . based on process models, either discovered through
process mining or (partly) made by hand, we can (a) check , (b) predict , and (c)
recommend . we can \replay" a running case on the process model and check
whether the observed behavior ¯ts. the moment the case deviates, an appropri-
ate actor can be alerted. the process model based on historic data can also be
used to make predictions for running cases, e.g., it is possible to estimate the
remaining processing time and the probability of a particular outcome. similarly,
this information can be used to provide recommendations, e.g., proposing the
activity that will minimize the expected costs and time.
this paper presents a general framework for operational decision support.
it shows that process mining is not limited to the \past" but can also be used
for the \present" and \future". to make this concrete, we present a new set
of approaches for time-based operational support implemented in our process
mining tool prom [1]. these approaches center around an annotated transition
system that contains time information extracted from event logs. the annotated
transition system can be used to check (time) conformance while cases are be-
ing executed, predict the remaining processing time of incomplete cases, and
recommend appropriate activities to end users working on these cases.
in the remainder, we ¯rst present our framework for operational decision
support. then we describe a concrete application of the framework aiming at
time-based operational support, its implementation in prom, and some initial
experiences. finally, we discuss related work and conclude the paper.
2 framework for operational support
to position the results presented in this paper, we ¯rst introduce the classical
form of process mining typically done o²ine. starting point for process mining
is the so-called event log . an event log consists of a set of traces . each trace is a
sequence of events corresponding to a particular case. note that a case represents
one process instance, i.e., one run of the process/system. each event refers to
a task and typically also has a timestamp. moreover, additional data elements,
information about resources, event types, etc. may be attached to events. for
example the trace ha10
john; b15
mary; c25
mary; d33
peteicould represent a case for which
four tasks are executed a,b,c, and d. each event also has a timestamp
and a reference to a resource. for example a10
john refers to the execution of a
byjohn at time 10. an example of a log consisting of three cases would be:
2abcd 
acbd 
aed 
acbd 
aed 
abcd discover 
check 
modify/extend event log modelab
cd e
end start fig. 1. overview of classical forms of process mining: discover ,check ,modify , and
extend .
check predict recommend discover check traces/log model focus 
action 
active (“now”)
online, partial traces 
passive (“history”)
offline, full traces 
timecosts…extend modify 
fig. 2. overview of the process mining spectrum distinguishing between the active use
of partial traces and passive use of completed traces.
l=fha10
john; b15
mary; c25
mary; d33
petei;ha12
ivan; c16
joe; c24
mary; b31
johni;ha14
john; e18
chris;
d44
joeig.
as figure 1 shows there are three types of process mining. first of all, there
are various techniques for process discovery [2, 5]. these techniques aim at ex-
tracting models (for example petri nets, epcs, uml ads, bpmn models) from
event logs.3secondly, there are techniques for conformance checking [16]. these
techniques compare the log and the model, measure the \¯t", and highlight de-
viations in the models. in a model with a ¯tness of 0.88, 88% of the events in
traces can be \replayed" using the model while 12% of the events can not be
\replayed" using the model.4in the model, it could be highlighted that a par-
ticular task happened 343 times without being enabled according to the model.
finally, there are techniques to modify orextend the model. based on an analy-
sis of the event log there could be suggestions to change the model, e.g., to make
it better ¯tting. moreover, an existing model just describing the control-°ow
could be extended with temporal aspects extracted from the event log. this way
bottlenecks are highlighted and the extended model can be used for simulation
purposes [17].
the techniques just mentioned have in common that they focus on o²ine
analysis. this means that only full traces are being considered, i.e., completed
cases that were handled in the past are used. moreover, process mining is used
3note that the petri net model shown in figure 1 was obtained by applying the ®-
algorithm [5] to the event log shown on the left-hand side of the ¯gure. this is for
illustration purposes only; in this paper we present a generic approach and do not
favor a particular representation or discovery technique.
4there are various de¯nitions of ¯tness [16], but this conveys the basic idea.
3abcdknown 
past unknown 
future current 
state 
ab ab??abc?
check : b does not fit the 
model (not allowed, too 
late, etc.) predict : some prediction is 
made about the future (e.g. 
completion date or outcome) t=10 
recommend : based on past 
experiences c is recommended 
(e.g., to minimize costs) fig. 3. overview of operational support.
only in a passive manner not directly in°uencing the running cases. as figure 2
shows, one can also use process mining in an online setting. now the focus is
onpartial traces , i.e., cases that are still running and did not yet complete. for
these cases, the active use of process mining is interesting, e.g., to check the last
step executed, to predict the future of a case, and to recommend the next task to
be executed. the right-hand side of figure 2 shows the classical forms of process
mining ( discover ,check ,modify , and extend ) already mentioned in figure 1.
these focus on the model rather than the traces or the log, i.e., the result is
reported as a (partially) new model or annotations of an existing model. the
left-hand side of figure 2 shows other types of analysis focusing on the traces
in the log rather than the model. the third dimension shown in figure 2 shows
the aspect the analysis is focusing on, e.g., time, costs, logic (routing), quality,
etc.
the most likely combinations are highlighted using a 4. note that most
of the passive forms of process mining focus on the model rather than traces.
there is one exception (see the 4in the bottom-left cell). when doing confor-
mance checking one compares a model and an event log. the deviations can be
highlighted in the model as discussed before. however, the deviations can also
be shown in the event log, i.e., parts of completed traces that do not ¯t into the
model are highlighted in the log.
in this paper, we focus on the active use of process mining involving partial
traces corresponding to cases that did not complete yet. as shown in figure 2,
we identify three types of actions related to such running cases: (a) check , (b)
predict , and (c) recommend . we refer to these actions as operational support as
they aim at in°uencing the process while it is running.
figure 3 illustrates the three types of operational support. starting point is
some model and a partial trace. note that the model is typically learned using
classical process mining techniques. the partial trace refers to a case that is
running. the left-hand side of figure 3 shows a partial trace ha; bi. note that
we abstract from timestamps, resources, data, etc. for this case, we know that
aandboccurred, but we do not know its future. suppose now that the partial
traceha; biis not possible according to the model. in this case, the operational
support system would generate an alert. another possibility would be that b
took place three weeks after awhile this should happen within one week. in
such a case another noti¯cation could be sent to the responsible case manager.
such scenarios correspond to the check action mentioned before. figure 3 also
4table 1. a fragment of an event log.
case id task trans. resource timestamp
1 check complete admin 2009-01-01 11:55:25
advertise complete admin 2009-01-15 14:03:18
inspect complete admin 2009-01-28 16:56:53
decide complete admin 2009-02-02 09:08:03
2 check complete admin 2009-01-01 09:36:21
process complete admin 2009-01-15 14:19:59
decide complete admin 2009-01-20 17:47:13
. . . . . . . . . . . . . . .
illustrates the goal of predictions . given the current state of a case, the model
is used to make some kind of prediction. for example, given the ha; bitrace it
could be predicted that the remaining processing time is ten days. this prediction
would be based on historic information both in the partial trace and in the
event log used to learn the model. predictions are not restricted to time, but can
also refer to costs, probability of a particular outcome, resource availability, etc.
closely related to predictions are recommendations . the main di®erence is that
recommendations suggest the next action based on possible continuations of the
case. based on the model, one can try all possible actions and see which one
would lead to the best (predicted) performance. note that recommendations are
not only used for determining the next task, but also for allocating resources to
work-items or for timing a particular action.
the process mining framework prom aims to support the whole spectrum
shown in figure 2. earlier versions of prom focused mainly on passive forms of
process mining [1]. in the new version of prom, we aim to also support operational
decision making in a generic manner . the basic idea is that some operational
system, e.g., a work°ow management system, business process management sys-
tem, or other process-aware information system (pais), sends partial traces to
prom as shown in figure 3. prom then does the appropriate checks, generates
predictions, or sends recommendations while using models derived from event
logs (or alternatively use manually created models).
3 application of the framework to time-based
operational support
to illustrate that process mining is not limited to passive/o²ine analysis, we will
use a small event log of a process for handling requests of citizens for building
permits. using this example, we present new process mining techniques that
cover the whole process mining spectrum. our example process contains ¯ve
tasks: (1) check for checking whether the requested building permit is compliant
to the regulations, (2) advertise for advertising the requested permit in the local
newspaper for a period of 30 days, (3) inspect for inspecting the construction site,
(4)process for handling requests that are not compliant with the regulations,
5prom
eventlogtransition
systemtime
annotation
extending
discoveringchecking
predicting
recommendingpais
process
analyst
time-basedoperational
support(tos)service
time-basedoperational
support(tos)clientelapsedtimeinterval
remainingtime
minimalremainingtime
user
userrequest
(partialtrace,enabledevents)fig. 4. architecture of our system to support users based on time information in logs.
and (5) decide for deciding whether to issue or decline the permit. table 1 shows
a fragment of the log. each line in the event log of this process corresponds to
an event related to one of the ¯ve mentioned tasks. for each event, information
about the task name, event type, resource that triggered the event and the
timestamp is available. moreover, each event is associated to one case, i.e., a
single permit request. for example, table 1 shows events of two cases containing
four and three events, respectively. note that, for the purpose of simplicity, in
the remainder of this paper we will use only the task name to refer to one event.
in the remainder of this section we will use this log to show how process
mining techniques can be used for discovering, extending, checking, predicting
and recommending in the context of execution times of processes. figure 4 shows
this example and the functionalities of the prom tool that we will use in this
paper. we start with describing existing procedures (i.e., prom plugins) for dis-
covering a transition system from an event log [3] and for extending a transition
system with time information from an event log (i.e., time annotations) [4] in
sections 3.1 and 3.2, respectively. the generated transition system and time an-
notations can be used to provide useful information about active processes. for
this purpose, we have implemented the time-based operational support (tos)
client and service. the tos client can be used by any pais to request tem-
poral information about active processes. the tos service uses the transition
system and its time annotations to generate information about active processes
and sends them to the tos client. the tos client sends the partial trace (i.e.,
all events executed until the moment of request) and currently enabled tasks
of the running case when requesting the information from the tos service.
the tos service generates three types of information about the current case.
first, the tos service checks whether the elapsed time of the current case is
61. check,adv,insp,dec 
2. check,insp,adv,dec 
3. check,proc,dec 
4. check,adv,insp,dec 
5. check,adv,insp,dec 
6. check,proc,dec 
7. check,insp,adv,dec 
{} 
1,2,3,4,5,6,7{check}
1,2,3,4,5,6,7{check,adv,insp}
1,2,4,5,7{check,adv,insp,dec}
1,2,4,5,7{check,insp}
2,7
{check,adv}
1,4,5{check,proc}
3,6{check,proc,dec}
3,6fig. 5. a transition system constructed from an event log with seven traces.
within certain temporal boundaries calculated based on elapsed times of earlier
completed cases visiting the same state (cf. section 3.3). second, section 3.4
describes how the tos service can predict the remaining execution time based
on the past processes. finally, in section 3.5 the possibility to recommend the
enabled events that, based on historic information, are most likely to lead to
minimal execution times is described.
3.1 discovering a transition system from history
an approach that uses various abstractions for discovering a transition system
from an event log is described in [3]. the advantage of this process mining tech-
nique is that it is very °exible as it allows for a wide range of abstractions,
i.e., the discovered model can be tailored towards the needs of the analyst. a
transition system is a triplet ( s; e; t ) where sis the set of states, eis the
set of event (transition) labels, and tµs£e£sis the transition relation
describing how the system can move from one state to another. for example,
figure 5 shows a prom screen of a transition system mined from our event log
with seven traces containing events referring to tasks check ,advertise ,inspect ,
process anddecide . the transition system has eight states ( s=fs1; s2; : : : ; s 8g),
¯ve event labels ( e=fcheck ;advertise ;inspect ;decide ;process g) and eight tran-
sitions ( t=f(s1;check ; s2);(s2;advertise ; s3);(s2;inspect ; s6);(s2;process ; s7),
(s3;inspect ; s4);(s6;advertise ; s4);(s7;decide ; s8);(s4;decide ; s5)g).
the transition system in figure 5 is mined from the event log using two
types of abstractions [3]. first, an event abstraction is used when considering
which event information is relevant. for example, the transition system shown
in figure 5 is mined using the event abstraction that considers only the task
name and ignores the event type, resource and timestamp. second, a state ab-
straction is used when it comes to how a sequence of events is `replayed' on
the transition system. for example, the transition system shown in figure 5 is
mined using the \set state abstraction" that considers only which tasks were
executed and ignores the execution order and frequency. the tags connected to
7states in figure 5 show two types of state-related information. first, the set
abstraction for the state is shown in the upper line. for example, state s4refers
to a trace pre¯x that contains tasks check ,advertise andinspect in any order.
second, the bottom line shows which traces are replayed in which state. for ex-
ample, traces 1,2,4,5and7all visit state s4: traces 1,4and5after executing
sequence hcheck ;advertise ;inspect iand traces 2and7after executing sequence
hcheck ;inspect ;advertise i. it is important to note that this state considers all
traces where these three tasks were executed, regardless of the order.
3.2 extending the transition system with time information
event logs can also be used to enrich models with information about past exe-
cutions. an approach for annotating a transition system with time information
from an event log is described in [4]. this procedure starts by replaying each
trace of the event log on the transition system, and collecting three types of
time information extracted from the trace for each visited state. first, the time
elapsed from the beginning of the trace is assigned to the state as the di®erence
between the timestamp of the current event and the timestamp of the ¯rst event
in the trace. second, the remaining time until the end of the trace is assigned to
the state as the di®erence between the timestamp of the last event in the trace
and the timestamp of the current event. finally, the sojourn time , the time that
the trace spent in this state is assigned to the state as the di®erence between
the timestamp of the next event in the trace and the timestamp of the current
event.
figure 6 shows how elapsed, remaining and sojourn times are collected from
the building permits event log and transition system in figure 5. note that the
actual time data extracted from the event log refers to milliseconds, but for the
reasons of simplicity displayed time data is rounded to days. because s1is the
initial state, elapsed and sojourn times for all traces are zero and remaining times
are equal to the total execution times at s1. the elapsed (remaining) times in the
initial state s1correspond to remaining (elapsed) times in the two ¯nal states s5
ands8. this is expected, because the remaining time in the initial state must be
equal to the elapsed time in the ¯nal state for each trace. for example, trace 1
has a total duration time of 68 days. the elapsed, remaining and sojourn times
for this trace are shown as the ¯rst elements for the states that this trace visits:
s1,s2,s3,s4ands5. while the remaining time value decreases from 68 in state
s1to zero in state s5, the elapsed time increases from zero in s1to 68 in state
s5. note that, in each of these states, the sum of elapsed and remaining time is
equal to the trace's total execution time. for example, the sum of elapsed and
remaining times for trace 1in each of the visited states is 68 days. the sum of
sojourn times in all states one trace visits is equal to the total duration of that
trace. for example, the sum of sojourn times for trace 1is 0+6+39+23+0 = 68
days.
the collected time information can be used to annotate each state with statis-
tical data for elapsed, remaining and sojourn times: average, standard deviation,
etc. in this paper we focus on elapsed and remaining time annotations. we have
81. check,adv,insp,dec 
2. check,insp,adv,dec 
3. check,proc,dec 
4. check,adv,insp,dec 
5. check,adv,insp,dec 
6. check,proc,dec 
7. check,insp,adv,dec 
e:[0,0,0,0,0,0,0]
r:[68,32,50,19,14,55,21]
s:[0,0,0,0,0,0,0]e:[0,0,0,0,0,0,0]
r:[68,32,50,19,14,55,35]
s:[6,14,11,14,9,9,9]e:[45,27,29,17,21]
r:[23,5,21,38,14]
s:[23,5,21,38,14]e:[68,32,50,55,35]
r:[0,0,0,0,0]
s:[0,0,0,0,0]
e:[6,14,9]
r:[62,18,26]
s:[39,13,12]e:[11,9]
r:[39,47]
s:[18,8]
e:[14,9]
r:[5,5]
s:[5,5]e:[19,14]
r:[0,0]
s:[0,0]fig. 6. collecting elapsed (e), remaining (r) and sojourn (s) times for the transition
system from figure 5.
used time information in our example event log to annotate the transition system
mined from this log (cf. figure 5). figure 7 shows the prom screen with elapsed
and remaining times in days and hours. for example, the average elapsed time
in state s3is 9 days and 15 hours and average remaining time in state s2is 39
days and 1 hour.
3.3 checking running cases
the elapsed time annotations can be used to check how fast currently running
cases are being executed when compared to past cases. the procedure for check-
ing a particular running case is as follows:
1.replay the partial trace of the case under consideration on the transition
system and identify the current state of the case under consideration.
2.calculate the a time interval for the elapsed time in the current state. the
time interval sets upper and lower bounds. there are many ways to de¯ne
such a time interval. here, three simple approaches are considered:
{all elapsed times seen in the past: [ min; max ],
{a pre-de¯ned deviation from the average elapsed time: [ ¹¡c; ¹+c],
where ¹is the average elapsed time and cis a constant, and
{standard deviation from the average elapsed time: [ ¹¡c¤¾; ¹+c¤¾],
where ¹is the average elapsed time, cis a constant and ¾is the standard
deviation.
3.calculate the elapsed time of the case under consideration as the di®erence
between timestamps of the ¯rst and the last event in its partial trace.
4.check the execution speed of the running case: if the elapsed time of the case
is under, within or above the time interval, then the case is considered to be
slower, as fast as, or faster than processes executed in the past, respectively.
5.alert interested parties (e.g., employees who work on the running case, the
manager, etc) if the case is too fast or too slow.
9(a) elapsed times
(b) remaining times
fig. 7. time annotations based on figure 5 in prom.
consider, for example, a situation where inspectors processing permit re-
quests want to be alerted by their tos clients if it takes them too long to
process a particular request. assume that the time bounds are set by the time
interval [ ¹¡2¤¾; ¹+ 2¤¾]. further, assume that an inspector is currently
working on a request (i.e, running case) with the partial trace hcheck ;advertise i
where tasks check andadvertise were executed on 26/10/2009 and 26/11/2009,
respectively. the procedure for checking the elapsed time based on the annotated
transition system shown in figure 6 is as follows:
1.replaying this partial trace on the transition system leads to state s3.
2.the time interval [ ¹¡2¤¾; ¹+2¤¾] is calculated for the elapsed time in state
s3. as figure 7(a) shows, average elapsed time in this state is ¹= 9 days
and 15 hours and standard deviation is ¾= 4 days and 3 hours. therefore,
the time interval for elapsed times in this state is [1d9h,17d21h].
10fig. 8. checking the elapsed time of a running case with partial trace hcheck ;advertise i.
3.the elapsed time of the current case is 31 days (time between execution of
tasks check andadvertise ).
4.the elapsed time of the active process is above the upper bound set by the
time interval.
5.figure 8 shows the alert popping up in the tos client. the considered case
is substantially slower than cases from the past. in addition to the alert
itself, additional information about the running case and the used statistics
are included to interpret the warning.
3.4 predicting the future of running cases
the remaining time annotations created from past cases can also be used to pre-
dictthe remaining execution time of the running cases. the prediction procedure
for one running case is simple:
1.replay the partial trace of the case under consideration on the transition
system and identify the current state of the case under consideration.
2.take the average or median value of the remaining time annotations in the
current state as the prediction for the remaining execution time of the case
under consideration.
3.notify interested parties about the predicted remaining time.
assume, for example, that the inspectors working on building permits want
to be informed by their tos clients regarding the expected remaining process-
ing time. consider, for example, a situation where a client who submitted a
building permit request (for which the partial trace is hchecki) is interested how
much longer it will take to get the ¯nal decision. by using the remaining time
annotations shown in figure 7(b), the prediction for this running case can be
generated in the following way:
1.replaying this partial trace on the transition system leads to state s2.
11fig. 9. predicting the remaining time of a running case with partial trace hchecki.
2.the predicted remaining execution time based on the average of the remain-
ing times in state s2is 39 days and 1 hour.
3.figure 9 shows how the result presented by the tos client.
3.5 recommending the next step for running cases
the remaining time annotations of a transition system can also be used to rec-
ommend steps that lead to shortest execution times in past cases. in addition to
the partial trace of the running case, this procedure also uses the set of enabled
events in the case to recommend which one of them should be executed:
1.for each enabled event, identify the state in which the transition system
would be if this enabled event would indeed be executed in the running case
using the following two steps: (a) create a new trace by extending the partial
trace of the running case with the enabled event under consideration; and
(b)replay the new trace in the transition system to identify the state to be
assigned to this event.
2.create an ordered list of recommendations by sorting enabled events in the
increasing order of average remaining times annotated to assigned states:
the state assigned to the ¯rst recommended event has a shorter (or equal)
predicted remaining time than the state assigned to the second recommended
event, etc.
3.inform interested parties about the recommendations.
consider, for example, a situation when inspectors working on a building
permit request (i.e., running case) with partial trace hcheckiwould like to get the
recommendation whether to execute events advertise :start orinspect :start next
(i.e., enabled tasks) in order to process this request as quickly as possible. based
on the remaining time annotations shown in figure 7(b), the recommendation
is generated in the following way:
1.transition system states are assigned to enabled events advertise :start and
inspect :start by extending the partial trace of the running case: (a) state
s3is assigned to advertise :start because replaying trace hcheck ;advertise i
on the transition system leads to state s3; and (b) state s6is assigned to
12fig. 10. recommending the next step for a running case with partial trace hchecki.
inspect :start because replaying trace hcheck ;inspect ion the transition system
leads to state s6.
2.the list of recommended events contains advertise :start orinspect :start ,
where advertise :start has higher priority than advertise :start orinspect :start ,
because the state s3has a shorter predicted remaining time (i.e., 35 days
and 6 hours) than the state s6(i.e., 42 days and 16 hours).
3.figure 10 shows how the recommendations are shown by the tos client.
4 related work
lion's share of process mining research has been focusing on passive forms of
process mining such as process discovery [2, 5, 3, 6, 8, 9, 12]. these serve as a
basis for learning good models, but are not the focus of this paper. conformance
checking is typically also done in an o®-line fashion [16] while the extension of
models into full-°edged simulation models is also not used in an operational sense
[17]. see www.processmining.org for more pointers to process mining literature.
there have been some initial attempts to support operational decision mak-
ing using process mining techniques or simulation. in [18] both techniques are
combined in the context of yawl and in [10] non-parametric regression is used
to predict completion times. a recommendation service that uses historic infor-
mation for guiding the user to select the next work item has been implemented
in prom [19] and it is related to case-based reasoning [21]. a recommender for
execution of business processes based on the product data model (pdm) is
presented in [20].
the framework has been tested using a set of plug-ins related to time-based
operational support. this approach is most related to the °exible mining ap-
proach in [3] and the prediction approach in [4]. however, in this paper we
present an overarching approach, and a generic implementation that does not
just support prediction, but also time-based conformance checking and time-
based recommendations.
13there are various approaches to run time support in the context of world wide
web. some examples are monitoring based on business rules [13], bpel [7], event
calculus [14], etc. other examples are the various types of recommender systems
that support users in their decision-making [15, 22]. these systems generate rec-
ommendations based on the user's preferences/behavior and are becoming an
essential part of e-commerce and information seeking activities. similar ques-
tions are also studied in the context of intrusion detection [11].
the main contribution of this paper is that it provides a framework for posi-
tioning the various types of process mining (cf. figure 2 on page 3) and details
the aspect of operational support for running processes in a generic manner.
this view is supported in the new version of prom.
5 conclusions
in this paper, we focus on the application of process mining to operational de-
cision making. we presented a generic framework and described a set of prom
plug-ins for time-based operational support. the approaches are based on tran-
sition systems annotated with time information. these are used to check the
timely execution of cases, predict the completion time of cases, and recommend
the best steps to minimize the overall °ow time. this serves as an example for
a much larger set of possible techniques for operational support. in the future,
we would like to add more techniques (not only related to time, but also costs,
quality, compliance, etc.) and apply them actively in selected domains (most
likely hospitals and municipalities). note that the application of new techniques
requires a tight integration with existing information systems.
references
1.w.m.p. van der aalst, b.f. van dongen et al. prom 4.0: comprehensive sup-
port for real process analysis. in j. kleijn and a. yakovlev, editors, petri nets
2007, volume 4546 of lecture notes in computer science , pages 484{494. springer-
verlag, berlin, 2007.
2.w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b.f. van dongen, a.k.
alves de medeiros, m. song, and h.m.w. verbeek. business process mining: an
industrial application. information systems , 32(5):713{732, 2007.
3.w.m.p. van der aalst, v. rubin, b.f. van dongen, e. kindler, and c.w. gä unther.
process mining: a two-step approach to balance between under¯tting and over-
¯tting. software and systems modeling , 9(1):87{111, 2010.
4.w.m.p. van der aalst, m.h. schonenberg, and m. song. time prediction based
on process mining. bpm center report bpm-09-04, bpmcenter.org, 2009.
5.w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
6.r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
°ow logs. in sixth international conference on extending database technology ,
pages 469{483, 1998.
147.l. baresi, c. ghezzi, and s. guinea. smart monitors for composed services. in
icsoc '04: proceedings of the 2nd international conference on service oriented
computing , pages 193{202, new york, ny, usa, 2004. acm press.
8.j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215{249, 1998.
9.a. datta. automating the discovery of as-is business process models: proba-
bilistic and algorithmic approaches. information systems research , 9(3):275{301,
1998.
10.b.f. van dongen, r.a. crooy, and w.m.p. van der aalst. cycle time prediction:
when will this case finally be finished? in r. meersman and z. tari, editors,
coopis 2008 , volume 5331 of lecture notes in computer science , pages 319{336.
springer-verlag, berlin, 2008.
11.l. feng, x. guan, s. guo, y. gao, and p. liu. predicting the intrusion intentions
by observing system call sequences. computers and security , 23(3):241{252,
2004.
12.d.r. ferreira and d. gillblad. discovering process models from unlabelled event
logs. in business process management (bpm 2009) , volume 5701 of lecture notes
in computer science , pages 143{158. springer-verlag, berlin, 2009.
13.a. lazovik, m. aiello, and m. papazoglou. associating assertions with business
processes and monitoring their execution. in icsoc 2004 , pages 94{104, new
york, ny, usa, 2004. acm press.
14.k. mahbub and g. spanoudakis. a framework for requirents monitoring of ser-
vice based systems. in icsoc 2004 , pages 84{93, new york, ny, usa, 2004.
acm press.
15.p. resnick and h.r. varian. recommender systems. communications of the acm ,
40(3):56{58, 1997.
16.a. rozinat and w.m.p. van der aalst. conformance checking of processes based
on monitoring real behavior. information systems , 33(1):64{95, 2008.
17.a. rozinat, r.s. mans, m. song, and w.m.p. van der aalst. discovering simulation
models. information systems , 34(3):305{327, 2009.
18.a. rozinat, m. wynn, w.m.p. van der aalst, a.h.m. ter hofstede, and c. fidge.
work°ow simulation for operational decision support. data and knowledge en-
gineering , 68(9):834{850, 2009.
19.h. schonenberg, b. weber, b.f. van dongen, and w.m.p. van der aalst. support-
ing flexible processes through recommendations based on history. in interna-
tional conference on business process management (bpm 2008) , volume 5240 of
lecture notes in computer science , pages 51{66. springer-verlag, berlin, 2008.
20.i.t.p. vanderfeesten, h.a. reijers, and w.m.p. van der aalst. product
based work°ow support: dynamic work°ow execution. in z. bellahsene and
m. l¶ eonard, editors, caise'08 , volume 5074 of lecture notes in computer sci-
ence, pages 571{574. springer-verlag, berlin, 2008.
21.b. weber, w. wild, and r. breu. cbrflow: enabling adaptive work°ow manage-
ment through conversational case-based reasoning. in advances in case-based
reasoning , volume 3155 of lecture notes in computer science , pages 434{448.
springer-verlag, berlin, 2004.
22.b. zhou, s.c. hui, and k. chang. an intelligent recommender system using se-
quential web access patterns. in ieee conference on cybernetics and intelligent
systems , pages 393{398, 2004.
15