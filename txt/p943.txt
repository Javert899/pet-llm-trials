object-centric behavioral constraints:
integrating data and declarative process modelling
wil van der aalst1, alessandro artale2, marco montali2and simone tritini2
1eindhoven university of technology, p.o. box 513, 5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tue.nl
2free university of bozen-bolzano, piazza domenicani 3, i-39100, bolzano, italy.
surname@inf.unibz.it
1 introduction
despite the plethora of notations available to model business processes, process mod-
elers struggle to capture real-life processes in meaningful descriptions. notations range
from formal languages like petri nets, automata and process algebras to dedicated mod-
eling languages like business process model and notation (bpmn), event-driven pro-
cess chains (epc) and uml activity diagrams. however, all such mainstream mod-
eling languages suffer from two main issues. first, it is difﬁcult to model interactions
between process instances , which are in fact typically considered in isolation. con-
cepts like lanes, pools, and message ﬂows in conventional languages like bpmn aim to
address this. however, within each (sub)process still a single instance is modeled in iso-
lation. second, it is difﬁcult to model the data-perspective and control-ﬂow perspective
in a uniﬁed and integrated manner . data objects can be modeled, but the more powerful
constructs present in entity relationship (er) models and uml class models cannot
be expressed well in process models. for example, cardinality constraints in the data
model must inﬂuence behavior, but this is not reﬂected at all in today’s process models.
numerous practical applications of process mining [2] clearly show that there is a
mismatch between process models and the data in real enterprise systems from ven-
dors such as sap (s/4hana), microsoft (dynamics 365), oracle (e-business suite),
and salesforce (crm). even though a clear process instance notion is missing in such
systems, mainstream business process modeling notations can only describe the life-
cycle of one type of process instance at a time. to overcome such critical issue and
provide a uniﬁed representation of process and data-related constraints, the object-
centric behavioral constraint (ocbc) model has been recently devised [10]. ocbc
combines ideas from declarative, constraint-based languages like declare [12, 11], and
from data/object modeling techniques (such as er, uml, or orm). cardinality con-
straints are used as a unifying mechanism to tackle data and behavioral dependencies,
as well as their interplay. unlike existing approaches for process modeling, instances
are not considered in isolation and cardinality constraints in the data/object model are
taken into account.
the driving modelling assumption underlying our proposal is that a process and its
composing actions are identiﬁed by a unique instance (a sort of process id). by typing
the process id with (possibly) different actions at (possibly) different points in time wecreate
orderpick
itemwrap
itemdeliver
items
orderorder
linedelivery
product
customer4
5
67
contains 1 * results in 1..* 0..1
is for*
1
belongs to*
1receives
1*creates11
1ﬁlls 21
1prepares3
10..1
refers to1
18
fig. 1. a small object-centric behavioral constraint (ocbc) model.
model the different actions taking place in a given process. the action ﬂows in a process
is constrained using ltl-like axioms. to capture objects manipulated by actions we
use relations whose domain are the actions and the range the object classes. constraints
are added to express possible co-references between objects manipulated by different
actions. the following example shows the main ingredients of our proposal.
example 1. fig. 1 shows an ocbc model for a process composed by four activities
(createorder ,pickitem ,wrapitem anddeliveritems ) and ﬁve object classes
(order ,orderline ,delivery ,product andcustomer ). the top part describes the
ordering of activities and the bottom part the structuring of objects relevant for the
process. the lower part can be read as a standard uml class diagram (e.g., an order
contains zero or more orderline s while each orderline corresponds to precisely one
order , each orderline refers to one product , each order refers to one customer ,
etc.). the top part shows behavioral constraints between the activities of the process
and the middle part relates activities and data. to introduce the main ideas underlying
our proposal, we informally describe the constructs highlighted in fig. 1. 1there
is a one-to-one correspondence between a createorder activity and an order , i.e.,
the execution of a createorder activity creates to a unique order .2every exe-
cution of the pickitem activity refers to a unique orderline and each orderline
can be picked exactly once. 3every execution of the wrapitem activity refers to an
orderline and each orderline can be wrapped at most once. 4each createorder
activity is followed by one or more pickitem activities related to the same order. 5
each pickitem activity is preceded by precisely one createorder activity. 6the
two co-reference constraints (dash dotted lines) impose that when we create an order
instance it will contain an order line eventually associated to a pickitem activity and,
viceversa, to each order line associated to a pickitem activity corresponds an order as
created by the createorder activity. 7each wrapitem activity is preceded by one
or more pickitem activities. 8two co-reference constraints (dash dotted lines) im-
pose that when a pickitem activity fills an order line instance it will be the same as
the one prepared by a wrapitem activity and, viceversa, an orderline prepared by a
wrapitem must coincide with that one ﬁlled by a pickitem activity.a possible model of the ocbc model of fig 1 is the following (we abbreviate
names of activities and classes with their initials):
co(p1; t0);pi(p1; t1);pi(p1; t2);wi(p1; t3);wi(p1; t4);pi(p1; t5);wi(p1; t6);di(p1; t7);di(p1; t8);
creates (p1; o1; t0);contains (o1; ol1; t1);fills (p1; ol1; t1);contains (o1; ol2; t2);fills (p1; ol2; t2);
prepares (p1; ol1; t3);prepares (p1; ol2; t4);contains (o1; ol3; t5);fills (p1; ol3; t5);prepares (p1; ol3; t6);
results in (ol1; d1; t7);results in (ol2; d1; t7);refers to (p11; d1; t7);
results in (ol3; d2; t8);refers to (p11; d2; t8):
note that the deliveritems activity can deliver one or more orderline s and that
theorderline s contained in an order can be scattered over multiple deliver ies.
the process described in the previous example cannot be modeled using conven-
tional process modeling languages, because (a) three different types of instances (of ac-
tivities, classes and also relationships instances) are intertwined in a uniform framework
so that no further coding or annotations are needed, and (b) cardinality constraints and
relations in the object class model inﬂuence the allowed behavior of activities and vicev-
ersa. in the above example, interesting implicit constraints emerge from the interplay of
the temporal constraints between activities and the cardinality constraints on activity-
class and class-class relationships. for example, the temporal ordering of the activities
logically implies that each order will eventually contain at least one orderline .
in this paper, we focus on the formal semantics of the ocbc model, so as to unam-
biguously deﬁne the meaning of ocbc constraints, and in particular how the contribu-
tion of the data and that of the temporal constraints among activities are intertwined. to
do so, we employ ﬁrst-order logic over the ﬂow of time , i.e., ﬁrst-order logic equipped
with a special sort that represents time points and the usual <rigid binary relation. we
then encode the resulting logical theory using temporal description logics , consequently
paving the way towards automated reasoning over ocbc models and the identiﬁcation
of the corresponding boundaries of decidability and tractability.
2 temporal description logics
in this paper we use the temporal description logic tusdl-lite(hn )
bool [6] to capture in a
uniform formalism both the activities and their attached data. it is known from temporal
logic [9] that all the temporal operators used in linear temporal logic (ltl) can be ex-
pressed vias‘since’ andu‘until’. tusdl-lite(hn )
bool is one of the most expressive and
still decidable temporal description logics which uses these two temporal operators. the
language contains concept names cn 0;cn 1;:::,ﬂexible role names p0;p1;:::, and
rigid role names g0;g1;:::.role names s,rolesr,basic concepts band(temporal)
conceptscare given by the following grammar:
s::=pijgi andr::=sjs 
b::=? jcnij qr
c::=bj :cjc1uc2jc1uc2jc1sc2
wheres denotes the inverse of the rolesandqis a positive integer. we use the
standard abbreviations: c1tc2=:(:c1u:c2);>=:?;9r= (1r);qr=:(q+ 1r):atusdl-lite(hn )
bool tbox ,t, is a ﬁnite set of concept inclusion axioms
of the formc1vc2, and of role inclusion axioms of the form r1vr2.
atemporal interpretation is a structure of the form i= ((z;<);i;fi(n)j
n2zg), where (z;<)is the linear model of time, iis a non-empty interpreta-
tion domain andi(n)gives a standard dl interpretation for each time instant n2z:
i(n) = 
i;cni(n)
0;:::;pi(n)
0;:::;gi
0;:::
;assigning to each concept name cni
a subsetcni(n)
ii, to each ﬂexible role name pia binary relation pi(n)
i
ii, while the interpretations gi
iiiof rigid role names are the same
for alln2z. the role and concept constructs are interpreted as follows, where ci(n)
(ri(n)) denotes the extension of c(r) at timen2z:
(p 
i)i(n)=f(y;x)2iij(x;y)2pi(n)
ig;?i=;;
(qr)i(n)=
x2ij]fy2ij(x;y)2ri(n)gq	
;
(:c)i(n)=inci(n);(c1uc2)i(n)=ci(n)
1\ci(n)
2;
(c1uc2)i(n)=[
k>n 
ci(k)
2\\
n<m<kci(m)
1
;
(c1sc2)i(n)=[
k<n 
ci(k)
2\\
n>m>kci(m)
1
where]xdenotes the cardinality of x. thus, for example, x2(c1uc2)i(n)iff
there is a moment k > n such thatx2ci(k)
2 andx2ci(m)
1 , for all moments m
betweennandk. note that the operators sandu(as well as the 2and3operators
to be deﬁned below) are ‘strict’ in the sense that their semantics does not include the
current moment of time. the non-strict operators, which include the current moment,
are obviously deﬁnable in terms of the strict ones. concept and role inclusion axioms
are interpreted iniglobally :
ij=c1vc2iffci(n)
1ci(n)
2 foralln2z;
ij=r1vr2iffri(n)
1ri(n)
2 foralln2z:
with the following restriction on the interaction between role inclusions and cardinali-
ties: no role rcan occur intin both a role inclusion of the form r0vrand a number
restrictionqrorqr withq2.
we calliamodel of a tboxtand writeij=tifisatisﬁes all inclusions in t. a
tboxtissatisﬁable if it has a model. a concept c(roler) issatisﬁable with respect to
tif there are a model ioftandn2zsuch thatci(n)6=;(respectively, ri(n)6=;).
it is readily seen that the concept and role satisﬁability problems are equivalent to tbox
satisﬁability.
we now recall how to capture the other ltl operators (used in this paper) via the
uandsoperators. the operators 3fand3p(‘sometime in the future/past’) can be
expressed as 3fc=>ucand3pc=>sc; the operators 2f(‘always in the future’)
and2p(‘always in the past’) are deﬁned as dual to 3fand3p:2fc=:3f:cand
2pc=:3p:c. the nclusion cv2ccaptures rigid concepts by using the ‘always’
operator 2, that can be expressed as 2c=2f2pc, while the dual operator ‘sometime’
is deﬁned as usual: 3c=:2:c. finally, the temporal operators f(‘next time’) and
p(‘previous time’) can be deﬁned as fc=?ucandpc=?sc.a bresponse
a bunary-response
a bnon-response
x
a bprecedence
a bunary-precedence
a bnon-precedence
x
a bresponded-existence
a bnon-coexistence
x
fig. 2. types of bcm constraints.
reasoning in tusdl-lite(hn )
bool w.r.t. to a tbox is a decidable problem which has
been proven to be pspace-complete in [6], i.e., the complexity of reasoning in ltl.
3 the ocbc model
in this section we present the main results of this paper, a formalization of what we call
the ocbc model, i.e., a model where object classes and behavioral constraints are
both present. in particular, the ocbc model simultaneously accounts for: (i) control-
ﬂow constraints , captured as declarative temporal dependencies between activities, tak-
ing inspiration from the declare language [1]; (ii) data dependencies , captured using
standard data models that account for classes, relationships, and cardinality constraints;
(iii) mutual relationships between activities and classes , so as to link the execution
steps in the process with the data objects they manipulate; (iv) coreference constraints
between instances of the data model associated to activities via the above mentioned
relationships linking activities to data elements.
we proceed as follows: we ﬁrst show how behavioral constraints between activities
(the so called behavioral constraints model, bcm) can be formalized in linear tempo-
ral logic (ltl). as for the data model, we rely on well-established foundational results
showing how standard data models can be suitably formalized in fol and, in turn, en-
coded into suitable dls for reasoning [7, 3, 8]. we ﬁnally enrich the formalization by
accounting for activity-class relationships, and coreference constraints.
3.1 the behavioral constraints model bcm
the bcm captures a set of declarative temporal constraints between (pairs of) activities,
taking inspiration from the relation and negation declare patterns [1]. fig. 2 graphically
renders the repertoire of behavioral constraints considered in this paper (also brieﬂy
sketching their relationship with declare), while their textual representation is deﬁned
next.
deﬁnition 1 (bcm). abcm is a triple: (ua;ubc;bc), where:
–uais the universe of the activities, denoted with capital letters a1;a2;:::;response (a;b )
av3fb if a executes then b must be executed afterwards.
unary -response (a;b )
av:bu(bu2f:b)if a executes then b must be executed exactly once afterwards.
precedence (a;b )
av3pb if a executes then b must have been executed before.
unary -precedence (a;b )
av:bs(bu2p:b)if a executes then b must have been executed exactly once before.
responded -existence (a;b )
av3b if a executes then b must be executed either before or afterwards.
non-response (a;b )
av2f:b if a executes then b will never be executed afterwards.
non-precedence (a;b )
av2p:b if a executes then b was never executed before.
non-coexistence (a;b )
av2:b a and b cannot be both executed.
fig. 3. semantics of control-ﬂow constraints, where a and b are activities
–ubcis the universe of the behavioral constraints that can be expressed between
activities,ubc=fresponded-existence, response, unary-response, precedence,
unary-precedence, non-response, non-precedence, non-coexistence g, as shown in
fig. 2, where each bc 2u bcis a binary relation over activities, i.e., bc uaua;
–bcis the set of control-ﬂow constraints of the form bc (a1;a2), where bc2u bc
anda1;a22ua.
when deﬁning later on the ocbc model we will consider the set u+
bcofpositive behav-
ioral constraints, containing response ,unary-response ,precedence ,unary-precedence ,
andresponded-existence . the formal semantics of control-ﬂow constraints is captured
viatusdl-lite(hn )
bool concept inclusion axioms (ltl-like formulas since roles are ab-
sent), as shown in fig. 3 together with their intuitive meaning.
example 2. fig. 4 shows an example of a bcm describing the process ﬂow of buying
a ticket and its correlated activities. the arrow between selectflight andpayment rep-
resents an unary-precedence constraint, thus when payment is executed there must be a
single execution of selectflight in the past. in case we cancel ticket then sometime in
the past we should have done the payment . we provide also examples of negative be-
havioral constraints, e.g., when a refund is executed then check-in is never executed,
i.e., if we cancel and then refund the ticket we can not do the check-in anymore. the
corresponding tusdl-liten
boolaxioms capturing the bcm of this example are:
paymentv:selectflights(selectflightu2p:selectflight );
paymentv:printticketu(printticketu2f:printticket );
cancelticketv3ppayment;cancelticketv3frefund;
refundv2:check-in:cancel
ticketrefundpayment print ticket select flight
check-in x
fig. 4. bcm example capturing the fragment of a ticket purchase process
3.2 the class model - clam
we assume that data used by the activities conform to the clam data model. in this
paper we consider a data model with basic constructs. for simplicity, we deﬁne here
clam as a simpliﬁed version of uml, with object classes that can be organized along
isahierarchies, binary relationships between object classes and cardinalities expressing
participation constraints of object classes in relationships. more formally we have the
following:
deﬁnition 2 (clam syntax). a conceptual schema in the class model, clam, is a
tuple= (uc;ur;;#src;#tar;isa);where:
–ucis the universe of object classes. we denote object classes as o1;o2;:::;
–uris the universe of binary relationships among object classes. we denote rela-
tionships as r1;r2;:::;
–:ur!u cucis a total function associating a signature to each binary
relationship. if (r) = (o1;o2)theno1is the range ando2thedomain of the
relationship;
–#dom:uruc6!n(n[f1g )is a partial function deﬁning cardinality
constraints of the domain of a relationship. the value #dom(r;o )is deﬁned only
if(r) = (o;o 1);
–#ran:uruc6!n(n[f1g )is a partial function deﬁning cardinality
constraints of the range of a relationship. the value #ran(r;o )is deﬁned only if
(r) = (o1;o);
–isaucucis a binary relation deﬁning the super-class and sub-class hierar-
chy on object classes. if isa(c1;c2)thenc1is said to be a sub-class ofc2while
c2is said to be a super-class ofc1.
as for the formal set-theoretic semantics of clam and its translation to descrip-
tion logics we refer to [7, 3]. in particular, cardinality constraints are interpeted as the
number of times a given instance of the involved object class participates in the given
relationships, while isais interpreted as sub-setting. to better clarify the elements of
clam we show the following example.
example 3. we consider the example shown in fig. 5, modelling a process ﬂow (up-
per part) and its associated data modeled via a clam diagram. concerning the clambuy
tripcheck-indeliver
luggagecancel
flight
security
controlsstart
ﬂight
ticket
travellerboarding
card
luggageflightx
1..* 1..*
1..*11..* 1..*
1..* 1
1..* 11..* 11
1..*1
11
1
11
1..*crefcref
buyassignedto
has linked
ownisassociatedtocreate generatereferred
related
fig. 5. the ocbcm example of an airplane trip scenario.
diagram we have that:
uc=fticket, traveller, boarding-card, luggage, flight g;
ur=fisassociatedto, buy, has, own, linked, assignedto g;
(own ) = ( traveller,luggage );:::
#dom(own,traveller ) = (1;1); # ran(own,luggage ) = (1;1);:::
note that cardinalities are depicted in the diagram in uml style.
3.3 the object centric behavioral constraint model - ocbc
the object centric behavioral constraint model (ocbc) combines the behavioral con-
straints model bcm capturing the process ﬂow (as presented in section 3.1) with the
object classes represented by the clam data model (as presented in section 3.2). the
original proposal in the ocbc model is the way activities and data are related to each
other and the formal underpinning of the model. we now present in details the syntax
of an ocbc model.
deﬁnition 3 (the ocbc syntax). an ocbc model is a tuple:
(bcm;clam;urac;rac;#src;#tar;ucrel)
where:
–bcm is a behavioral constraint model as in deﬁnition 1;
–clam is a conceptual schema as in deﬁnition 2;
–uracis the universe of activity-object relationships being a set of binary relation-
ships;–rac:urac! u aucis a total function associating a signature to each
activity-object relationship. if rac(r) = (a;o )thena2uais the source and
o2ucthetarget of the relationship;
–#src:uracua7 !n(n[f1g )is apartial function deﬁning cardinality con-
straints on activities, i.e., constraints on the participation of activities in activity-
object relationships. the value #src(r;a )is deﬁned only if rac(r) = (a;o );
–#tar:uracuc7 !n(n[f1g )is apartial function deﬁning cardinality
constraints on object classes, i.e., constraints on the participation of object classes
in activity-object relationships. the value #tar(r;o )is deﬁned only if rac(r) =
(a;o );
–ucorefis the universe of coreference constraints being a set of functions, i.e., ucoref=
fcrjcr:bcuracurac!u c[urg.
to better understand the expressive power of the ocbc modelling language we
discuss the scenario of an airplane travel.
example 4. fig. 5 shows how an ocbc diagram captures an airplane trip scenario. the
activities that belong to the process ﬂow and modeled as a bcm diagram are depicted
in the upper part of the ﬁgure. then, in the lower part of the ﬁgure, we have the clam
data model that captures the data manipulated by the activities of the process ﬂow. the
seturacof the activity-object relationships is the following set of binary relationships:
urac=fcreate;generate;referred;receive;relatedg;
connecting an activity with the objects manipulated as an effect of executing the activ-
ity itself. for example, the activity buytrip creates an instance of the object class ticket
when it is executed. cardinality constraints can also be added to activity-object relation-
ships to specify participation constraints either on the activity side or on the object class
side. for example, at any point in the time, an execution of check-in creates exactly one
boardingcard while each boardingcard corresponds to exactly one check-in action.
thus, #src(generate;check-in ) = # tar(generate;boardingcard ) = (1;1). on the
other hand, when we execute buytrip we can buy one or more tickets while a ticket
is associated to a single buytrip action. the coreference constraints (the dashed-dotted
lines denotes as cref in fig. 5) specify constraints on how objects connected to different
activities can be shared. for example, the boardingcard generated by a check-in is the
same used to deliver the luggage. this particular coreference constraint is speciﬁed as:
cref(unary -precedence (deliverluggage ;check-in );referred,generate ) =
boardingcard ;
while the other coreference constraints in fig. 5 is expressed as:
cref(response (buttrip;check-in );create,generate ) =isassociatedto :
in the next section we will present the semantics of ocbc models and we better clarify
the two kinds of coreference constraints that can be involved in an ocbc model.check-indeliver
luggage
boarding
cardcrefgenerate referred
(a)buy
tripcheck-in
ticketboarding
cardcref
isassociatedtocreate generate
(b)
fig. 6. the two kinds of coreference: (a) over an object class, (b) over a relationship.
4 the ocbc formal semantics
this section presents the semantics for ocbc models. in this respect, our effort is to
reconcile the process ﬂow semantics with the data model semantics associating to both
worlds an fol formalization and the corresponding temporal dl axioms.
to capture the temporal nature of the whole framework we use a two sorted fol
with a sort dedicated to the time dimension. thus, in the following, the variable twill
denote a time point to be interpreted as an integer number. fol formulas map activities
and object classes to binary predicates while activity-object relationships and relation-
ships of the data model to ternary relations. more formally,
a2ua[ucis mapped in fol as a(x;t);
r2urac[uris mapped in fol as r(x;y;t ):
as for the semantics of a bcm model, we already gave its meaning in fig. 3 via the
temporal dl translation. concerning the semantic of the clam data model, we inter-
pret it along the temporal semantics presented in [4, 5] for temporal data models. in the
same papers, a mapping from a (temporal) data model to a temporal dl tbox is pre-
sented and used in this paper. it is now crucial to formalize the meaning of coreference
constraints . we proceed by assigning an fol translation and then the corresponding
temporal dl in the form of a tusdl-lite(hn )
bool tbox extended with temporalized roles,
i.e., roles of the form 3pr;3fr;2pr;2fr;pr;fr, with the obvious meaning.
all together, we will show how an ocbc model can be captured via a tbox
intusdl-lite(hn )
bool thus resulting in a uniform representation. according to deﬁni-
tion 3, there are two kinds of coreference constraints: the ones that range over ob-
ject classes and the ones ranging over relationships. we start with the coreference over
object classes as illustrated, e.g., in fig. 6(a).
deﬁnition 4 (semantics of coreference constraints over object classes). let cr2
ucoref, bc2u+
bc,r1;r22urac,a1;a22uaando2ucs.t. bc (a1;a2)2
bc,(r1) = (a1;o),(r2) = (a2;o)and cr (bc(a1;a2);r1;r2) =o. then,
the following fol formula (in brackets the corresponding tusdl-lite(hn )
bool axioms)
captures domain andrange restrictions:
8x;y;t:r 1(x;y;t )!a1(x;t)^o(y;t) (9r1va1;9r 
1vo);(1)
8x;y;t:r 2(x;y;t )!a2(x;t)^o(y;t) (9r2va2;9r 
2vo);(2)while the semantics of the coreference is the following (in case bc is the constraint
response (a1;a2)):
8x;y;t:r 1(x;y;t )!9t0>t:r 2(x;y;t0) (r1v3fr2): (3)
similar formulas hold for other forms of positive behavioral constraints.
we now consider the coreference over relationships as illustrated, e.g., in fig. 6(b).
in this case we need to consider two object classes in the data model that are related
together with a relationship on which the coreference holds. in the dl translation, we
need to use a role chain constructor with the following meaning: (r1r2)i(n)=
f(x;y)2iij9z:(x;z)2ri(n)
1^(z;y)2ri(n)
2g.
deﬁnition 5 (semantics of coreference constraints over relationships). let cr2
ucoref, bc2 u+
bc,r1;r22 u rac,a1;a22 u a,o1;o22 u candr2 u r
a relationships between o1ando2s.t. bc (a1;a2)2bc,(r1) = (a1;o1),
(r2) = (a2;o2)and cr (bc(a1;a2);r1;r2) =r. then, the semantics of domain
andrange restrictions is as in def. 4, while the semantics of the coreference when bc is
a future constraint is the following (in case bc is the constraint response (a1;a2)):
8x;y;t .r1(x;y;t )!9z;t0.t0>t^r2(x;z;t0)^r(y;z;t0) (r1v3f(r2r ));(4)
and when bc is a past constraint then (in case bc is the constraint precedence (a1;a2)):
8x;y;t .9z.r1(x;z;t )^r(z;y;t )!9t0.t0<t^r2(x;y;t0) (r1rv3pr2):(5)
similar formulas hold for other forms of behavioral constraints.
5 considerations on reasoning over ocbc models
the main motivation to provide a mapping to a dl tbox is the possibility offered by
dls to reason over tboxes. as we observed, the temporal description logic used in
this paper, tusdl-lite(hn )
bool , is decidable and pspace-complete. tusdl-lite(hn )
bool is
able to capture bcm diagrams thanks to its temporal capabilities. at the level of data
models, tusdl-lite(hn )
bool captures the main constructs of uml—with the exception
of isa between relationships and n-ary relationships—adding the possibility to express
temporal constraints over both object classes and relationships (see [3, 5] for details).
on the other hand, to fully capture ocbc models we need to go beyond the expres-
sivity of tusdl-lite(hn )
bool . indeed, due to coreference constraints we need the expres-
sivity of temporalised roles (see axiom (3)) or role chains (see axioms (4)-(5)). both
constructors can ruin the decidability of the resulting language. so, while reasoning
over ocbc models without corefence constraints is a pspace-complete problem the
addition of coreferences makes reasoning an undecidable problem.
one possibility to regain decidability, admitting just corefences over object classes,
is to avoid at-most cardinality constraints on activity-object constraints (the undecid-
ability proof in [6] relies on both temporalised roles and on the possibility to represent
functional roles). the case with coreference constraints over relationships is more in-
volved and requires further investigations. indeed, it is well known that role inclusion
axioms with role chains on the right-hand side (i.e., axioms of the form rvr1r2)
make the logic undecidable. it is to be understood whether the special form of role
chains in ocbc models can still encode an undecidable problem.references
1. van der aalst, w.m.p., pesic, m.: decserﬂow: towards a truly declarative service ﬂow lan-
guage. in: the role of business processes in service oriented architectures (2006)
2. van der aalst, w.m.p.: process mining: data science in action. springer (2016)
3. artale, a., calvanese, d., kontchakov, r., ryzhikov, v ., zakharyaschev, m.: reasoning over
extended er models. in: proc. of the 26th int. conf. on conceptual modeling (er’07).
lncs, vol. 4801, pp. 277–292. springer (2007)
4. artale, a., parent, c., spaccapietra, s.: evolving objects in temporal information systems.
annals of mathematics and artiﬁcial intelligence 50(1–2), 5–38 (2007)
5. artale, a., kontchakov, r., ryzhikov, v ., zakharyaschev, m.: complexity of reasoning over
temporal data models. in: proc. of the 29th int. conf. on conceptual modeling (er’10).
lncs, vol. 4801, pp. 277–292. springer (2010)
6. artale, a., kontchakov, r., ryzhikov, v ., zakharyaschev, m.: a cookbook for temporal con-
ceptual data modelling with description logics. acm transaction on computational logic
(tocl) 15(3) (2014)
7. berardi, d., calvanese, d., de giacomo, g.: reasoning on uml class diagrams. artiﬁcial
intelligence 168(1–2), 70–118 (2005)
8. franconi, e., mosca, a., solomakhin, d.: orm2: formalisation and encoding in owl2. in:
int. workshop on fact-oriented modeling (orm’12). pp. 368–378 (2012)
9. gabbay, d., hodkinson, i., reynolds, m.: temporal logic: mathematical foundations and
computational aspects, vol. 1. oxford university press (1994)
10. li, g., montali, m., van der aalst, w.m.p.: object-centric behavioral constraints. corr tech-
nical report, arxiv.org e-print archive (2017)
11. montali, m., pesic, m., van der aalst, w.m.p., chesani, f., mello, p., storari, s.: declarative
speciﬁcation and veriﬁcation of service choreographiess. acm transactions on the web
(tweb) 4(1) (2010)
12. pesic, m., schonenberg, h., van der aalst, w.m.: declare: full support for loosely-
structured processes. in: proc. of the eleventh ieee int. enterprise distributed object com-
puting conference (edoc’07). pp. 287–298. ieee computer society (2007)