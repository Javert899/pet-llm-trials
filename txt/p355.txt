integration of epc-related tools with prom
paul barborka, lukas helm, georg k ¨oldorfer, jan mendling, gustaf neumann
vienna university of economics and business administration
augasse 2-6, a-1090 wien, austria
paul@barborka.com ,lukas.helm@gmx.at
georg.koeldorfer@benet.at ,fjan.mendling|neumann g@wu-wien.ac.at
boudewijn van dongen, eric verbeek, wil van der aalst
eindhoven university of technology
po box 513, nl-5600 mb eindhoven, the netherlands
b.f.v.dongen@tue.nl ,h.m.w.verbeek@tue.nl ,w.m.p.v.d.aalst@tue.nl
abstract: the heterogeneity of different formats for epcs is a major problem for
model interchange between specialized tools in practice. in this paper, we compare
three different formats for storing epcs, in particular, the proprietary formats of mi-
crosoft visio and aris toolset as well as the tool-independent epml format. further-
more, we introduce the prom framework and show using the case of a sales process
model expressed in terms of an epc that prom is able to serve as a mediator between
these formats. beyond that, we demonstrate that the prom framework can be used for
the analysis of epcs and to translate epcs into yawl models for execution or for
further analysis.
1 introduction
heterogeneity of formats, tools, and notations is a notorious problem of business process
management. while the heterogeneity of notations is extensively discussed in literature
(see e.g. [mnn05]), there is only little attention paid to heterogeneity issues related to
a single process modeling language. in this context, the availability of xml-based in-
terchange formats plays an important role to facilitate interchange and conversion. epcs
form an example of heterogeneity issues related to a single language: there are several
tools for modeling, analyzing, transforming, and managing epcs using different repre-
sentations. in order to beneﬁt from specialized functionality, there is a strong need to
exchange models between these tools.
several of these epc-related business process modeling tools support xml as an open
standard for interchange of structured information. such tools include aris toolset of
ids scheer ag, adonis of boc gmbh, visio of microsoft corp., semtalk of semtation
gmbh, or bonapart by pikos gmbh. the heterogeneity problem in this context arises
due to the fact that only some of these tools support the tool-independent epc markup
language (epml) interchange format [mn06]. most of them including e.g. aris andvisio use proprietary formats that stick close to the internal information model of the tool.
in order to facilitate the interchange of epc business process models between these tools
there is a strong need for an open and generic transformation platform.
against this background, this paper aims to demonstrate how such a transformation based
integration of specialized tools can be provided in practice. as an example, we present
a case study that utilizes prom for this purpose. section 2 presents three frequently sup-
ported interchange formats for epcs, i.e., vdx of microsoft visio, aml of aris toolset,
and epml as a tool-independent format. in section 3 we give an overview of prom. in
particular, we introduce the plug-in architecture of prom and highlight which epc-related
plug-ins are already available. section 4 showcases a scenario involving multiple spe-
cialized tools. in this scenario, prom will be used as an integration platform. section 5
summarizes the paper and gives an outlook on future research.
2 epc interchange formats
in this section, we ﬁrst introduce the interchange formats of visio (section 2.1) and aris
(section 2.2). we continue with presenting the tool-independent epml format in section
2.3. after that we compare the three formats in section 2.4.
2.1 visio and vdx
microsoft visio is a general drawing and modeling tool (see e.g. [we03]). it can be cus-
tomized to support any modeling language by deﬁning a language speciﬁc stencil. epcs
are supported by a dedicated stencil that is included in the standard distribution. visio uses
the proprietary vdx xml format to store and read models.
figure 1 gives an overview of the visio metamodel that is the basis for the vdx format.
visiodocument is the root element of a vdx ﬁle. it can contain multiple pages and
masters . apage basically represents a visio model. it is identiﬁed by an idand a
nameu attribute. a page can contain multiple shapes andconnects . ashape describes
a visual object on a visio page. it can be a simple object such as a rectangle or a composite
object such as a grouping of other shapes. a shape is identiﬁed by an idand anameu .
furthermore, it can carry a reference to a master . in visio a master provides the link
between a stencil and a page. the epc stencil deﬁnes a master for each of the epc element
types. via the master attribute, a shape can be related to a logical object such as e.g. an
epc event or an xor-connector. connect elements offer a mechanism to logically link
two shapes by referencing them in fromsheet andtosheet attributes. since arcs are
also shapes in visio, a control ﬂow sequence between two epc elements maps to two
connects: one from the ﬁrst object to the arc shape and another from the arc shape to the
second object.master 
id 
nameu 
shape 
id 
nameu 
master 
connect 
fromsheet 
tosheet visiodocument 
page 
id 
nameu contains contains 
contains defines * *
**
contains *figure 1: visio metamodel.
2.2 aris and aml
aris is a specialized business process management tool that not only supports modeling,
but also offers support for simulation and other types of analysis. epcs are one of the
modeling languages offered by aris. individual models and a whole database of mod-
els can be written to a ﬁle in the proprietary aris markup language xml format. a
complete overview of aml is given in [ids03].
an aml ﬁle starts with an amlelement as the root element. general information like time
of creation, name of the aris database, language, and font style is stored in subelements
ofaml. thegroup element, also a subelement of aml, is a container for all model-related
information. in aris toolset each group element refers to a directory folder of the aris
explorer. a group must have a unique group.id attribute and it may have multiple
attrdef ,objdef ,model or further group subelements as children. when the group
and its related directory have a name, aris toolset stores it in an attrdef (attribute
deﬁnition) subelement whose attrdef.type attribute is set to atname . this is the typ-
ical mechanism used by aml to store model information. every speciﬁc information of
objects is stored in attrdef orattrocc subelements of these objects (see figure 2).
another principle idea of aris toolset , which is reﬂected in aml, is the separation be-
tween deﬁnition and occurrence: each model element is ﬁrst deﬁned in an abstract way and
later referenced as an occurrence in a model. this allows one logical object to be included
as multiple occurrences in models. accordingly, the model element contains objocc (ob-
ject occurrence) elements that refer to objdef (object deﬁnition) elements. the objdef
element provides an abstract deﬁnition of an object. it has a unique objdef.id attributecxndef 
cxndef.id 
cxndef.type 
toobjdef.idref objdef 
objdef.id 
typenum 
linkedmodels.idrefs attrdef 
attrdef.id 
attrdef.type 
objocc 
objocc.id 
objdef.idref 
symbolnum 
size.dx 
size.dy 
pos.x
pos.yattrocc 
attrocc.id 
attrtypenum cxnocc 
cxnocc.id 
cxndef.idref 
toobjocc.idref group 
group.id 
model 
model.id 
model.type groups groups 
has 
has includes defines has 
has defines * *
***
***
*describes 
graphical 
representation*
has aml contains figure 2: aml metamodel.
and atypenum attribute that refers to an object type, like e.g. epc function or epc event.
itslinkedmodels.idrefs attribute provides a list of id-references to linked models.
these can be used e.g. for hierarchical reﬁnement of functions. objdef elements may
have multiple attrdef and multiple cxndef subelements. cxndef elements represent
arcs between objects. each cxndef has a unique cxndef.id attribute, a cxndef.type
attribute, and a toobjdef.idref attribute which represents the target of the arc. depend-
ing on the cxndef.type attribute the arc may represent control ﬂow, information ﬂow, or
different kinds of semantic association between the objects.
amodel has, among others, a unique model.id and amodel.type attribute. the model
type, like e.g. epc, refers to the allowed set of objects. the model element may contain
attrdef elements to store model speciﬁc information and objocc elements to represent
graphical elements in a visual model. an object occurrence has among others a unique
objocc.id attribute and a reference to an object deﬁnition via the objdef.idref at-
tribute. the symbolnum attribute refers to a graphical icon that is used to represent the
object in the visual model. an epc function would be e.g. represented by a green rect-
angle with radiused edges. an objocc element may have subelements that describe its
size and its position in the visual model. furthermore the attrocc element deﬁnes how
information attached via an attrdef is visually represented in a model. it has a unique
attrocc.id attribute and an attrtypenum attribute that refers to its type. this type
provides a syntactical link between an attrocc and anattrdef element of two as-
sociatedobjocc andobjdef elements. similar to object deﬁnitions objocc may also
have multiple cxnocc elements. each of them has a unique cxnocc.id attribute and a
cxndef.idref reference to an arc deﬁnition and a reference to the target of the arc via
anobjocc.idref attribute.2.3 epml
epml is a tool-independent interchange format for epcs [mn06]. mainly academic tools
use epml, but there are also commercial tools like semtalk that provide epml interfaces.
figure 3 gives an overview of epml and its syntax elements. in epml a hierarchy of epc
processes can be organized in directories. a directory element has a name attribute and
it can contain other directories and/or epc models. each epc element is identiﬁed by
anepcid attribute and has a name attribute. the epcid can be referenced by hierarchy
relations attached to functions or process interfaces. since an epc process element might
be used in two or more epc models, there are definitions to establish the link be-
tween elements that are the same from a logical point of view. the attributetypes
element provides a container for the deﬁnition of additional structured information. an
attribute references the type of the attribute and stores its value.
definition 
defid 
name attributetype 
typeid 
description 
<object>
id 
defref 
name attribute 
typeref 
value 
arc 
id 
fromid 
toid directory 
name 
epc 
epcid
name contains contains 
contains defines * *
***epml 
name 
event 
function 
processinterface 
xor and or contains defines 
figure 3: epml metamodel.
in epml each epc element serves as a container for all elements of the model. for
each epc element type there is a dedicated element. all elements no matter of their
type have an idand aname for identiﬁcation purposes, and a defref if the logical el-
ement is included at different places in the model. epml supports event ,function ,
processinterface ,xor,and, andorelement types as well as some elements of ex-
tended epcs (cf. [mn06]). functions and process interfaces can have a reference to a
linked epc via a linktoepcid attribute. all elements of an epc can be connected us-
ingarc elements with the fromid andtoid attribute deﬁning the direction. for further
details on epml the reader is referred to [mn06].table 1: epc interchange formats compared
visio vdx aris aml epml
epc model page model[model.type] epc
model organization pages group directory
function shape[master] objocc[symbolnum] function
event shape[master] objocc[symbolnum] event
xor-connector shape[master] objocc[symbolnum] xor
and-connector shape[master] objocc[symbolnum] and
or-connector shape[master] objocc[symbolnum] or
control ﬂow arc connect cxnocc arc
logical element - objdef definition
2.4 comparing the epc interchange formats
table 1 gives a comparison of the three discussed interchange formats visio vdx, aris
aml, and epml. it illustrates that epml is the only one that directly addresses the meta-
model of epcs. both visio and aris can store arbitrary graphical models; accordingly
the data about whether an element is e.g. an epc function is not stored in the metadata
(as an xml element name), but in element and attribute values. in visio such information
is represented in the master section, in aris it is encoded in typenum andsymbolnum
attributes. beyond that, each of the interchange formats utilizes a different mechanism to
represent arcs between model elements. in visio the arc is a graphical element. the logi-
cal connection between shapes is established by a connect from the ﬁrst shape to the arc,
and from the arc to the second shape. in aris, each arc is a subelement of the source node
holding a reference to the target node. in epml, arcs are ﬁrst class elements having two
references to other elements. epml is also the most compact format of the three. since it
does not include sophisticated layout and visual information, epml ﬁles are much smaller
than the aml and vdx ﬁles of the same model.
in this section, we introduced and compared three different formats to store epcs. in the
next section, we introduce the prom framework, which is capable of reading andwriting
all of these formats. moreover, prom allows for a wide variety of analysis techniques for
epcs (ranging from veriﬁcation to process mining) and prom is able to transform epcs
into various alternative formats and vice versa.
3 the prom framework
in this paper, the focus is on interchanging the different epc formats in the context of
theprom (process m ining) framework [dmv+05]. prom has been developed as a tool
for the process mining domain. process mining aims at extracting information from event
logs to capture the business process as it is being executed. process mining is particularly
useful in situations where events are recorded but there is no system enforcing peopleexternal
toolsmodels
mining plug-insimport plug-insexport plug-ins conversion plug-ins
analysis plug-ins mxml logsstaff-
waresap
in-
concertflow-
ermodel files
epcpetri
netyawl
modelheur.
net
visualizationsepc
tools
cpn
tools
aris
net-
miner
staff-
ware
sap
in-
concert
flow-
erevent
taskt
pfunctionprom
prom
importpetri
netsepcsyawl
modelsheur.
netsfigure 4: overview of the prom framework.
to work in a particular way. consider for example a hospital where the diagnosis and
treatment activities are recorded in the hospital information system, but where health-care
professionals determine the “careﬂow”. many process mining algorithms were developed
[avdh+03, awm04, agl98, cw98, gbg04, ggms05, gcc+04, her00] and currently
a variety of these techniques are supported by prom.
although the initial focus of prom was on process mining, over time the functionality of
prom was extended to include other types of analysis, model conversions, model com-
parison, etc. this was enabled by the plug-able architecture of prom (it is possible to
add new functionality without changing the framework itself) and the fact that prom sup-
ported multiple modeling formalisms right from the start. by applying prom in several
case studies, we got a lot of practical experiences with model interchange.
figure 4 shows an overview of the functionality of the prom framework. the ﬁgure shows
that prom can interact with a variety of existing systems, e.g., workﬂow management
systems such as staffware, oracle bpel, eastman workﬂow, websphere, inconcert,
flower, caramba, and yawl, simulation tools such as aris, epc tools, yasper, and
cpn tools, erp systems like peoplesoft and sap, analysis tools such as agna, net-
miner, viscovery, alphaminer, and aris ppm. we have used more than 20 systems to
exchange process models and/or event logs with prom. as figure 4 shows there are ways
to directly import or export models or to load logs.
prom is open source and people can change or extend the code. moreover, prom offers
the so-called “plug-in” concept. plug-ins allow for the addition of new functionality byadding a plug-in rather than modifying the source code. without knowing all details of the
framework, external parties can create their own plug-ins with ease. currently there are
more than 130 plug-ins. prom supports ﬁve kinds of plug-ins:
mining plug-ins typically take a log and produce a model,
import plug-ins typically import a model from ﬁle, and possibly use a log to identify the
relevant objects in the model,
export plug-ins typically export a model to ﬁle,
conversion plug-ins typically convert one model into another, and
analysis plug-ins typically analyse a model, eventually in combination with a log.
in the paper, we cannot show each of the more than 130 plug-ins. instead we focus on
epcs, using a model for sales price calculation as reported in [bs04, p.427] as a running
example (see figure 5). the process starts with one of alternative start events and leads
to a parallel execution to select articles for calculation, to select organization units, and to
check the sort of the calculation. after that, the relevant calculation is determined. if the
manual calculation is required, the sales price bandwidth is recorded and the sales price
is calculated within that. for both automatic calculation and automatic calculation with
manual conﬁrmation, the sales price is calculated ﬁrst, but in the second case it can be still
subject to change. after these alternative calculations, the sales price is stored. if there is
no listing process required, the price is modiﬁed for those retailers that use pos. finally,
the order set is deﬁned to complete the process.
4 a case study on multiple tool integration with prom
in this section, we take the model as shown in figure 5 in the visio vdx format and show
how we can utilize prom, to enable the reuse of this model in other tools. figure 6 shows
prom as a mediator between several formats that we cover in this case.
to start our guided tour of prom, we take the epc from figure 5, as modelled in visio.
figure 7 shows a screenshot of visio, where the epc is being modelled. after saving the
epc to a visio vdx ﬁle, we loaded the epc in prom, as shown in figure 8. note that
prom loads ﬁles without their layout information. therefore, prom is able to generate
layout information for any imported model. since prom was originally designed as a
framework for discovering models from execution logs where the automatic generation of
a layout is of the utmost importance, this feature has been added.
once the epc is loaded into the framework, many plugins are available for future pro-
cessing of the epc. as an example, we show a tailor-made veriﬁcation approach, ﬁrst
presented in [dv a05]. this veriﬁcation approach assumes that the process owner has
knowledge about the underlying process and therefore is capable of answering questions
about the possible initializations of the process. in our case, the process can be initialized
when either one of the initial events occur. furthermore, we assume that these event cannotxor sales price 
calculation 
required 
xor no breach of 
listing rule listing breach 
cleared v
select articles 
for calculation select 
organization 
units check sort of 
calculation 
articles 
selected organization 
unit selected 
organization 
related 
calcuation article related 
calculation xor 
xor 
check which 
calculation is 
relevant 
manual 
calculation automatic 
calculation automatic 
calculation 
with manual 
confirmation v v
xor 
calculate sales 
price 
sales price 
calculated vv v
v
xor 
check if sales 
price is to be 
changed state sales 
price or 
bandwidth 
sales prices or 
bandwidth 
recorded 
sales price 
calculated calculate sales 
price xor 
sales price 
accepted sales price to 
be changed 
change sales 
price 
sales price is 
changed 
xor 
xor 
store recorded 
sales prices 
sales prices 
recorded 
check if listing 
process 
required 
xor 
listing process 
required no listing 
process 
required 
check if 
retailer uses 
pos 
xor 
article for 
retailer without 
pos is 
calculated article for 
retailer with 
pos is 
calculated 
xor 
definition of 
order set 
order set 
defined figure 5: an epc for sales price calculation taken from [bs04, p.427].ms visio 
epc 
modeling prom framework 
vdx format 
epc 
analysis 
epc 
conversion yawl 
epc 
execution 
yawl 
xml 
format 
epc tools 
epc 
analysis epml aris toolset 
epc 
management aml format figure 6: prom as a mediator between different epc formats and tools.
occur simultaneously, since that would obviously lead to a problem. the result of the epc
veriﬁcation in prom under this assumption is shown in figure 9, where prom indicates
that there are structural errors in the epc and the erroneous part is highlighted.
another option is to export the epc to an epml ﬁle and to do the veriﬁcation with epc
tools [ck04]. epc tools implements epc semantics based on the framework of kindler
[kin03, kin04, kin06] which was deﬁned to ﬁx formal problems of the semantics reported
in [nr02]. it provides a soundness check and interactive simulation capabilities. in right
part of figure 10, there is a red light indicating that the epc is not sound. the modeler
can then propagate process folders in the epc to detect that it will not complete properly
whenever automatic calculation or automatic calculation with manual conﬁrmation is cho-
sen. the error in this model, which was indicated by prom and epc tools, now has to be
repaired. since prom is not a modelling tool (although it does allow the user to change
the type of each connector on the ﬂy), we can now export the epc to visio again, update
the model there and load it back into prom. in fact, repairing the model is not so difﬁcult,
since it only requires us to change the type of one connector: if the and-split after sales
price calculated becomes and xor, prom now no longer indicates an error in the epc.
let us assume that a process designer at this point is satisﬁed with the model and therefore
wants to upload it into the aris toolset. the process for doing so is simple. first, in
prom, we export the epc to the aml format. then, in the aris toolset, we import the
epc to the database. the result of this process is shown in figure 11. note that again the
layout is slightly different since aris provides its own layout algorithms as well.
so far, we have shown that epcs can be imported and exported in several formats. further-figure 7: the example epc modelled in visio.
figure 8: the example epc imported in prom.figure 9: the result of epc veriﬁcation in prom.
figure 10: the result of epc veriﬁcation in epc tools.more, we have shown that prom provides plugins for the analysis of epcs. however, there
is one essential aspect of epcs that we have not addressed yet, namely the execution of
epcs. due to the or-join in an epc, the execution of epcs is not straightforward. how-
ever, epcs can directly be translated to yawl models, which are executable in yawl.
prom again provides a translation of epcs to yawl. these yawl models can then be
loaded in the yawl engine (see [aadh04]). figure 13 shows an activity of the sales
price calculation enabled in the yawl engine for execution. beyond that, yawl mod-
els can also be analyzed using a veriﬁcation tool called wofyawl regarding the relaxed
soundness criterion [dr01]. the corrected example epc is shown as a yawl model
in figure 13. this approach has been used to verify all 604 epcs in the sap reference
model, the results of which can be found in [mmn+06].
figure 11: the corrected epc uploaded into the aris toolset
5 conclusion and future work
the heterogeneity of different formats for epcs is a major hinderance for model inter-
change between specialized tools in practice. in this paper, we compared three different
formats for storing epcs, in particular, the proprietary formats of microsoft visio and
aris toolset as well as the tool-independent epml format. furthermore, we introduced
the prom framework and showed using a realistic example (sales price calculation) that
prom is able to serve as a mediator between these formats. beyond that, we demonstrated
that the prom framework can be used for the analysis of epcs and to translate epcs into
yawl models for execution or for further analysis. in future research, we aim to provide
further epc plug-ins for the prom framework. first, there are several other popular busi-
ness process modeling tools that offer epcs, but whose proprietary interchange formats
are not yet supported. second, we aim to provide additional epc analysis plug-ins, e.g.
for deriving epcs from a conﬁgured c-epc.figure 12: the state sales price or bandwidth activity enabled in the yawl engine.
figure 13: the corrected epc converted to yawl for execution.
references
[aadh04] w.m.p. van der aalst, l. aldred, m. dumas, and a.h.m. ter hofstede. design and
implementation of the yawl system. in a. persson and j. stirna, editors, advanced
information systems engineering, proceedings of the 16th international conference
on advanced information systems engineering (caise’04) , volume 3084 of lecture
notes in computer science , pages 142–159. springer-verlag, berlin, 2004.
[agl98] r. agrawal, d. gunopulos, and f. leymann. mining process models from workﬂow
logs. in sixth international conference on extending database technology , pages
469–483, 1998.
[avdh+03] w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. dataand knowledge engineering , 47(2):237–267, 2003.
[awm04] w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: discov-
ering process models from event logs. ieee transactions on knowledge and data
engineering , 16(9):1128–1142, 2004.
[bs04] j¨org becker and reinhard sch ¨utte. handelsinformationssysteme . moderne industrie,
landsberg/lech, 2nd edition, 2004.
[ck04] n. cuntz and e. kindler. on the semantics of epcs: efﬁcient calculation and simu-
lation. in proceedings of the 3rd gi workshop on business process management with
event-driven process chains (epk 2004) , pages 7–26, 2004.
[cw98] j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology , 7(3):215–
249, 1998.
[dmv+05] b. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters, and
w.m.p. van der aalst. the prom framework: a new era in process mining tool
support. in g. ciardo and p. darondeau, editors, application and theory of petri nets
2005 , volume 3536 of lecture notes in computer science , pages 444–454. springer-
verlag, berlin, 2005.
[dr01] juliane dehnert and peter rittgen. relaxed soundness of business processes. in k. r.
dittrick, a. geppert, and m. c. norrie, editors, proceedings of the 13th international
conference on advanced information systems engineering , volume 2068 of lecture
notes in computer science , pages 151–170, interlaken, 2001. springer.
[dv a05] b.f. van dongen, h.m.w. verbeek, and w.m.p. van der aalst. veriﬁcation of epcs:
using reduction rules and petri nets. in conference on advanced information systems
engineering (caise 2005) , volume 3520 of lecture notes in computer science , pages
372–386. springer-verlag, berlin, 2005.
[gbg04] w. gaaloul, s. bhiri, and c. godart. discovering workﬂow transactional behavior
from event-based log. in r. meersman, z. tari, w.m.p. van der aalst, c. bussler,
and a. gal et al., editors, on the move to meaningful internet systems 2004: coopis,
doa, and odbase: otm confederated international conferences, coopis, doa,
and odbase 2004 , volume 3290 of lecture notes in computer science , pages 3–18,
2004.
[gcc+04] d. grigori, f. casati, m. castellanos, u. dayal, m. sayal, and m.c. shan. business
process intelligence. computers in industry , 53(3):321–343, 2004.
[ggms05] g. greco, a. guzzo, g. manco, and d. sacc `a. mining and reasoning on workﬂows.
ieee transaction on knowledge and data engineering , 17(4):519–534, 2005.
[her00] j. herbst. a machine learning approach to workﬂow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
[ids03] ids scheer ag. xml-export und -import (aris 6 collabo-
rative suite version 6.2 schnittstellenbeschreibung) . ftp://ftp.ids-
scheer.de/pub/aris/helpdesk/export/, juni 2003.
[kin03] e. kindler. on the semantics of epcs: a framework for resolving the vicious cir-
cle (extended abstract). in m. n ¨uttgens, f. j. rump, editor, proc. of the 2nd gi-
workshop on business process management with event-driven process chains (epk
2003), bamberg, germany , pages 7–18, 2003.[kin04] e. kindler. on the semantics of epcs: a framework for resolving the vicious circle.
in j. desel and b. pernici and m. weske, editor, business process management, 2nd
international conference, bpm 2004 , volume 3080 of lecture notes in computer
science , pages 82–97, 2004.
[kin06] ekkart kindler. on the semantics of epcs: resolving the vicious circle. data knowl.
eng., 56(1):23–40, 2006.
[mmn+06] j. mendling, m. moser, g. neumann, h.m.w. verbeek, b.f. van dongen, and w.m.p.
van der aalst. faulty epcs in the sap reference model. in j.l. fiadeiro s. dustdar
and a. sheth, editors, proceedings of bpm 2006 , volume 4102 of lecture notes in
computer science , page 451457, vienna, austria, 2006. springer-verlag.
[mn06] jan mendling and markus n ¨uttgens. epc markup language (epml) - an xml-
based interchange format for event-driven process chains (epc). information sys-
tems and e-business management , 4(3):245 – 263, 2006.
[mnn05] jan mendling, gustaf neumann, and markus n ¨uttgens. workﬂow handbook 2005 ,
chapter a comparison of xml interchange formats for business process modelling,
pages 185–198. future strategies inc., lighthouse point, fl, usa, 2005.
[nr02] m. n ¨uttgens and f. j. rump. syntax und semantik ereignisgesteuerter prozessketten
(epk). in j. desel and m. weske, editor, proceedings of promise 2002, potsdam,
germany , volume 21 of lecture notes in informatics , pages 64–77, 2002.
[we03] mark h. walker and nanette j. eaton. microsoft ofﬁce visio 2003 inside out . mi-
crosoft press, october 2003.