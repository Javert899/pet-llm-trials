prom 4.0: comprehensive support for real
process analysis
w.m.p. van der aalst1, b.f. van dongen1, c.w. g¨ unther1, r.s. mans1, a.k.
alves de medeiros1, a. rozinat1, v. rubin2,1, m. song1, h.m.w. verbeek1,
and a.j.m.m. weijters1
1eindhoven university of technology, eindhoven, the nether lands
{w.m.p.v.d.aalst }@tue.nl
2university of paderborn, paderborn, germany
abstract. this tool paper describes the functionality of prom. version
4.0 of prom has been released at the end of 2006 and this versio n reﬂects
recent achievements in process mining . process mining techniques at-
tempt to extract non-trivial and useful information from so -called “event
logs”. one element of process mining is control-ﬂow discovery , i.e., auto-
matically constructing a process model (e.g., a petri net) d escribing the
causal dependencies between activities. control-ﬂow disc overy is an in-
teresting and practically relevant challenge for petri-ne t researchers and
prom provides an excellent platform for this. for example, t he theory
of regions, genetic algorithms, free-choice-net properti es, etc. can be ex-
ploited to derive petri nets based on example behavior. howe ver, as we
will show in this paper, the functionality of prom 4.0 is not l imited to
control-ﬂow discovery. prom 4.0 also allows for the discove ry of other
perspectives (e.g., data and resources) and supports relat ed techniques
such as conformance checking, model extension, model trans formation,
veriﬁcation, etc. this makes prom a versatile tool for proce ss analy-
sis which is not restricted to model analysis but also includ es log-based
analysis.
1 introduction
the ﬁrst version of prom was released in 2004. the initial goa l of prom was to
unify process mining eﬀorts at eindhoven university of tech nology and other
cooperating groups [4]. traditionally, most analysis tool s focusing on processes
are restricted to model-based analysis , i.e., a model is used as the starting point
of analysis. for example, the alternating-bit protocol can be modeled as a petri
net and veriﬁcation techniques can then be used to check the c orrectness of the
protocol while simulation can be used to estimate performan ce aspects. such
analysis is only useful if the model reﬂects reality . process mining techniques use
event logs as input, i.e., information recorded by systems ranging fro m infor-
mation systems to embedded systems. hence the starting poin t is not a model
but the observed reality. therefore, we use the phrase real process analysis to
position process mining with respect to classical model-ba sed analysis. note thatprom also uses models (e.g., petri nets). however, these mod els (1) are discov-
ered from event logs, (2) are used to reﬂect on the observed re ality (conformance
checking), or (3) are extended based on information extract ed from logs.
process mining is relevant since more and more information a bout processes
is collected in the form of event logs. the widespread use of i nformation systems,
e.g., systems constructed using erp, wfm, crm, scm, and pdm s oftware,
resulted in the omnipresence of vast amounts of event data. e vents may be
recorded in the form of audit trails, transactions logs, or d atabases and may
refer to patient treatments, order processing, claims hand ling, trading, travel
booking, etc. moreover, recently, more and more devices sta rted to collect data
using tcp/ip, gsm, bluetooth, and rfid technology (cf. high -end copiers,
wireless sensor networks, medical systems, etc.).
table 1. comparing prom 1.1 presented in [7] with prom 4.0.
version prom 1.1 prom 4.0
mining plug-ins 6 27
analysis plug-ins 7 35
import plug-ins 4 16
export plug-ins 9 28
conversion plug-ins 3 22
log ﬁlter plug-ins 0 14
total number of plug-ins 29 142
at the petri net conference in 2005, version 1.1 of prom was pr esented [7].
in the last two years prom has been extended dramatically and currently dozens
of researchers are developing plug-ins for prom. prom is ope n source and uses
a plug-able architecture, e.g., people can add new process m ining techniques
by adding plug-ins without spending any eﬀorts on the loadin g and ﬁltering of
event logs and the visualization of the resulting models. an example is the plug-in
implementing the α-algorithm [5], i.e., a technique to automatically derive p etri
nets from event logs. the version of prom presented at the pet ri net conference
in 2005 (version 1.1) contained only 29 plug-ins. version 4. 0 provides 142 plug-
ins, i.e., there are almost ﬁve times as many plug-ins. moreo ver, there have been
spectacular improvements in the quality of mining algorith ms and the scope
of prom has been extended considerably. this is illustrated by table 1 which
compares the version presented in [7] with the current versi on. to facilitate the
understanding of table 1, we brieﬂy describe the six types of plug-ins:
–mining plug-ins implement some mining algorithm, e.g., the α-miner to dis-
cover a petri net [5] or the social network miner to discover a social network
[1].
–export plug-ins implement some “save as” functionality for speciﬁc objects
in prom. for example, there are plug-ins to save petri nets, e pcs, social
networks, yawl, spreadsheets, etc. often also in diﬀerent f ormats (pnml,
cpn tools, epml, aml, etc.).
–import plug-ins implement an “open” functionality for speciﬁc objects, e.g .,
load instance-epcs from aris ppm or bpel models from websphe re.–analysis plug-ins which typically implement some property analysis on some
mining result. for example, for petri nets there is a plug-in which constructs
place invariants, transition invariants, and a coverabili ty graph. however,
there are also analysis plug-ins to compare a log and a model ( i.e., confor-
mance checking) or a log and an ltl formula. moreover, there a re analysis
plug-ins related to performance measurement (e.g., projec ting waiting times
onto a petri net).
–conversion plug-ins implement conversions between diﬀerent data formats,
e.g., from epcs to petri nets or from petri nets to bpel.
–log ﬁlter plug-ins implement diﬀerent ways of “massaging” the log before
applying process mining techniques. for example, there are plug-ins to select
diﬀerent parts of the log, to abstract from infrequent behav ior, clean the log
by removing incomplete cases, etc.
in this paper we do not elaborate on the architecture and impl ementation frame-
work for plug-ins (for this we refer to [7]). instead we focus on the functionality
provided by the many new plug-ins in prom 4.0.
the remainder of this paper is organized as follows. section 2 provides an
overview of process mining and brieﬂy introduces the basic c oncepts. section 3
describes the “teleclaims” process of an australian insura nce company. a log of
this process is used as a running example and is used to explai n the diﬀerent
types of process mining: discovery (section 4), conformanc e (section 5), and
extension (section 6). section 7 brieﬂy mentions additiona l functionality such
as veriﬁcation and model transformation. section 8 conclud es the paper.
2 overview
the idea of process mining is to discover, monitor and improv erealprocesses
(i.e., not assumed processes) by extracting knowledge from event logs. today
many of the activities occurring in processes are either sup ported or monitored
by information systems. consider for example erp, wfm, crm, scm, and
pdm systems to support a wide variety of business processes w hile recording
well-structured and detailed event logs. however, process mining is not limited to
information systems and can also be used to monitor other ope rational processes
or systems. for example, we have applied process mining to co mplex x-ray
machines, high-end copiers, web services, wafer steppers, careﬂows in hospitals,
etc. all of these applications have in common that there is a notion of a process
and that the occurrence of activities are recorded in so-called even t logs.
assuming that we are able to log events, a wide range of process mining
techniques comes into reach. the basic idea of process mining is to learn from
observed executions of a process and can be used to (1) discover new models
(e.g., constructing a petri net that is able to reproduce the observed behavior),
(2) check the conformance of a model by checking whether the modeled behavior
matches the observed behavior, and (3) extend an existing model by projecting
information extracted from the logs onto some initial model (e.g., show bottle-
necks in a process model by analyzing the event log). all thre e types of analysismodels
analyzesrecords
events, e.g., 
messages,
transactions,
etc.specifies
configures
implements
analyzessupports/
controls
people machines
organizationscomponentsbusiness processes
fig.1. overview showing three types of process mining supported by prom: (1) dis-
covery, (2) conformance, and (3) extension.
have in common that they assume the existence of some event log . figure 1 shows
the three types of process mining. each of these is supported by prom through
various plug-ins as will be shown in the remainder using a run ning example.
3 running example
as a working example, we consider the “teleclaims” process o f an australian
insurance company described in [2]. this process deals with the handling of
inbound phone calls, whereby diﬀerent types of insurance cl aims (household, car,
etc.) are lodged over the phone. the process is supported by t wo separate call
centres operating for two diﬀerent organizational entitie s (brisbane and sydney).
both centres are similar in terms of incoming call volume (ap prox. 9,000 per
week) and average total call handling time (550 seconds), bu t diﬀerent in the
way call centre agents are deployed, underlying it systems, etc. the teleclaims
process model is shown in figure 2. the two highlighted boxes at the top show
the subprocesses in both call centres. the lower part descri bes the process in the
back-oﬃce.
this process model is expressed in terms of an event-driven p rocess chain
(epc) (see [8] for a discussion on the semantics of epcs). for the purpose of
the paper it is not necessary to understand the process and ep c notation in
any detail. however, for a basic understanding, consider th e subprocess corre-
sponding to the call centre in brisbane. the process starts w ithevent “phone
call received”. this event triggers function “check if suﬃcient information is
available”. this function is executed by a “call center agen t”. then a choice is
made. the circle represents a so-called connector . the “x” inside the connector
and the two outgoing arcs indicate that it is an exclusive or- split (xor). the
xor connector results in event “suﬃcient information is ava ilable” or event
“suﬃcient information is not available”. in the latter case the process ends. if
the information is available, the claim is registered (cf. f unction “register claim”also executed by a “call center agent”) resulting in event “c laim is registered”.
the call centre in sydney has a similar subprocess and the bac k-oﬃce process
should be self-explaining after this short introduction to epcs. note that there
are three types of split and join connectors: and, xor, and or , e.g., in the
back-oﬃce process there is one and-split ( ∧) indicating that the last part is
executed in parallel.
call centre  brisbane  / 24x7
frequency, weekly:   9,000
phone  call
received
30.00 second(s)check, if
sufficient
informat ion is
available
claims handler
150
paymen t  has
been  initia tedclaims  handler
150call centre
agent
90
0.85sufficient
informat ion is
available
0.80sufficient
inform ation is
not available
0.15
0.20call centre
agent
900.90 0.10
520.00 second(s)register
claim
claim
is registered
20.00 second(s)determine
likeli hood  of
claim
insured
could be liableinsured
could  not be
iable
660.00 second(s) assess  claim
claim  has been
acce ptedclaim  has been
rejected
120.00 second(s)initia te
payment180.00 second(s)advise  claimant
on
reimburs em en t
30.00 second(s)close
claimclaims  handler
150claims  handler
150
claims  handler
150caimant  has
been advised
claim has
been closedfreque ncy, weekly:  9,000
phone call
recei ved
30.00  second(s)check, if
sufficient
informat ion is
availablecall centre
agent
90
sufficie nt
informat ion is
availablesufficient
inform ation is
not available
call centre
agent
900.90 0.10
520.00 second(s)register
claim
claim
is regist eredcall centre  sydney / 5 da ys, 9-5
 
fig.2. insurance claim handling epc [2]....
<processinstance id="3055" description="claim being han dled">
<audittrailentry>
<data><attribute name = "call centre">sydney </attribute >
</data><workflowmodelelement>incoming claim
</workflowmodelelement>
<eventtype >complete</eventtype>
<timestamp>2006-12-01t07:51:05.000+01:00</timestamp >
<originator>customer</originator>
</audittrailentry>
<audittrailentry>
<data><attribute name = "location">sydney </attribute>
</data><workflowmodelelement>check if sufficient
information is available</workflowmodelelement>
<eventtype >start</eventtype>
<timestamp>2006-12-01t07:51:05.000+01:00</timestamp >
<originator>call centre agent sydney</originator>
</audittrailentry>
<audittrailentry>
<data><attribute name = "location">sydney </attribute>
</data><workflowmodelelement>check if sufficient
information is available</workflowmodelelement>
<eventtype >complete</eventtype>
<timestamp>2006-12-01t07:51:25.000+01:00</timestamp >
<originator>call centre agent sydney</originator>
</audittrailentry>
...
<audittrailentry>
<data><attribute name = "outcome">processed </attribute >
<attribute name = "duration">1732 </attribute>
</data><workflowmodelelement>end</workflowmodelelem ent>
<eventtype >complete</eventtype>
<timestamp>2006-12-01t08:19:57.000+01:00</timestamp >
<originator>claims handler</originator>
</audittrailentry>
</processinstance>
...
fig.3. fragment of the mxml log con-
taining 3512 cases (process instances)
and 46138 events (audit trail entries).
figure 3 shows a fragment of the log in mxml format, the format used
by prom. in this case, the event log was obtained from a simula tion using
cpn tools. using promimport one can extract logs from a wide v ariety of sys-
tems, e.g., workﬂow management systems like staﬀware, case handling systems
like flower, erp components like peoplesoft financials, si mulation tools like
aris and cpn tools, middleware systems like websphere, bi to ols like aris
ppm, etc., and it has also been used to develop many organizat ion/system-
speciﬁc conversions (e.g., hospitals, banks, governments , etc.). figure 3 illus-
trates the typical data present in most event logs, i.e., a lo g is composed of
process instances (i.e., cases) and within each instance th ere are audit trail en-
tries (i.e., events) with various attributes. note that it i s not required that sys-
tems log all of this information, e.g., some systems do not re cord transactional
information (e.g., just the completion of activities is rec orded), related data, or
timestamps. in the mxml format only the processinstance (i. e., case) ﬁeld and
the workﬂowmodelelement (i.e., activity) ﬁeld are obligat ory, i.e., any eventfig.4. a petri net discovered using prom based on an analysis of the 3 512 cases.
needs to be linked to a case (process instance) and an activit y. all other ﬁelds
(data, timestamps, resources, etc.) are optional.
for control-ﬂow discovery, e.g., deriving a petri net model from an mxml
ﬁle, we often focus on the ordering of activities within indi vidual cases. in this
context, a single case σcan be described by a sequence of activities, i.e., a trace
σ∈a∗where ais the set of activities. consequently, such an abstraction of the
log can be described by a multiset of traces.
4 discovery
process mining techniques supporting discovery do not assume an a-priori model,
i.e., based on an event log, some model is constructed (cf. fi gure 1). prom 4.0
oﬀers 27 mining plug-ins able to construct a wide variety of m odels. one of the
ﬁrst plug-ins was the α-miner [5] which constructs a petri net model from an
mxml log, i.e., based on an analysis of the log which does not c ontain any
explicit process information (e.g., and/xor-splits/join s), a process model is
derived. however, the α-miner is unable to discover complex process models.
for example, it is unable to correctly discover the teleclaims process illustrated
in figure 2. however, prom 4.0 has several new mining plug-in s that are able
to correctly discover this process using various approache s (regions, heuristics,
genetic algorithms, etc.) and representations (petri nets , epcs, transitions sys-
tems, heuristic nets).
figure 4 shows a petri net discovered by prom. the top window s hows
the overall process while the second window zooms in on the ﬁr st part of the
discovered model. this model is behaviorally equivalent to the epc model infigure 2 and has been obtained using an approach which ﬁrst bu ilds a transition
system (see figure 5) and then uses extensions of the classic al theory of regions
[6] to construct a petri net. prom provides various ways to ex tract transition
systems from logs, a plug-in to construct regions on-the-ﬂy , and an import and
export plug-in for petrify [6] (see [3] for details).
process mining is not limited to process models (i.e., contr ol ﬂow). prom
also allows for the discovery of models related to data, time , transactions, and
resources. as an example, figure 6 shows the plug-in to extra ct social networks
from event logs using the technique presented in [1]. the soc ial network shown in
figure 6 is constructed based on frequencies of work being tr ansferred from one
resource class to another. the diagram adequately shows tha t work is generated
by customers and then ﬂows via the call centre agents to the cl aims handlers in
the back oﬃce.
it is impossible to provide an overview of all the discovery a lgorithms sup-
ported. however, of the 27 mining plug-ins we would like to me ntion the heuris-
tics miner (figure 7) able to discover processes in the prese nce of noise and
the multi-phase miner using an epc representation. both app roaches are more
robust than the region-based approach and the classical α-algorithm. it is also
possible to convert models of one type to another. for exampl e, figure 8 shows
the epc representation of the petri net in figure 4.
5 conformance
conformance checking requires, in addition to an event log, some a-prior i model.
this model may be handcrafted or obtained through process di scovery. what-
ever its source, prom provides various ways of checking whet her reality conforms
to such a model. for example, there may be a process model indi cating that pur-
chase orders of more than one million euro require two checks . another example
is the checking of the so-called “four-eyes principle”. con formance checking may
be used to detect deviations, to locate and explain these dev iations, and to
measure the severity of these deviations. prom 4.0 also supp orts conformance
checking, i.e., comparing an a-priori model with the observ ed reality stored in
some mxml log. for example, we could take the discovered mode l shown in
figure 4 and compare it with the log shown in figure 3 using the conformance
checking plug-in in prom. figure 9 shows the result. this ana lysis shows that the
ﬁtness of the model is 1.0, i.e., the model is able to “parse” a ll cases. the confor-
mance checker also calculates metrics such as behavioral ap propriateness (i.e.,
precision) and structural appropriateness [9] all indicat ing that the discovered
model is indeed a good reﬂection of reality. note that, typic ally, conformance
checking is done not with respect to a discovered model, but w ith respect to
some normative/descriptive hand-crafted model. for examp le, given an event
log obtained from the real teleclaims process it would be int eresting to detect
potential deviations from the process model in figure 2. in c ase that there is not
a complete a-priori process model but just a set of requireme nts (e.g., business
rules), prom’s ltl checker can be used.fig.5. transition system system used to
construct the petri net in figure 4.
fig.6. social network obtained using the
“handover of work” metric.
fig.7. heuristics net obtained by applying
the heuristics miner to the log of figure 3.
fig.8. epc discovered from the log in
figure 3.fig.9. conformance checker.
fig.10. performance analyzer.
6 extension
for model extension it is also assumed that there is an initial model (cf. figure 1 ).
this model is extended with a new aspect or perspective, i.e. , the goal is not
to check conformance but to enrich the model with performanc e/time aspects,
organizational/resource aspects, and data/information a spects. consider for ex-
ample a petri net (either discovered, hand-crafted, or resu lting from some model
transformation) describing a process which is also logged. it is possible to enrich
the petri net using information in the log. most logs also con tain information
about resources, data, and time. prom 4.0 supports for examp le decision mining,
i.e., by analyzing the data attached to events and using clas sical decision tree
analysis, it is possible to add decision rules to the petri ne t (represented as con-
ditions on arcs). information about resources (originator ﬁeld in the mxml log)
can be analyzed and used to add allocation rules to a petri net . figure 10 shows
a performance analysis plug-in which projects timing infor mation on places and
transitions. it graphically shows the bottlenecks and all k inds of performance in-
dicators, e.g., average/variance of the total ﬂow time or th e time spent between
two activities. the information coming from all kinds of sou rces can be stitched
together and exported to cpn tools, i.e., prom is able to turn mxml logs into
colored petri nets describing all perspectives (control-ﬂ ow, data, time, resources,
etc.). cpn tools can then be used to simulate the process with out adding any
additional information to the generated model.
7 additional functionality
it is not possible to give a complete overview of all 142 plug- ins. the ﬁgures
shown in previous sections reﬂect only the functionality of 7 plug-ins. however,
it is important to note that the functionality of prom is not l imited to process
mining. prom also allows for model conversion . for example, a model discovered
in terms of a heuristic net can be mapped onto an epc which can b e converted
into a petri net which is saved as a yawl ﬁle that can be uploade d in the
workﬂow system yawl thereby directly enacting the discover ed model. for
some of the models, prom also provides analysis plug-ins. for example, the basic
petri net analysis techniques (invariants, reachability g raphs, reduction rules, s-
components, soundness checks, etc.) are supported. there a re also interfacesto diﬀerent analysis (e.g., petrify, fiona, and woﬂan) and v isualization (e.g.,
fsmview and diagraphica) tools.
8 conclusion
prom 4.0 consolidates the state-of-the-art of process mini ng. it provides a plug-
able environment for process mining oﬀering a wide variety o f plug-ins for process
discovery, conformance checking, model extension, model t ransformation, etc.
prom is open source and can be downloaded from www.processmi ning.org. many
of its plug-ins work on petri nets, e.g., there are several pl ug-ins to discover petri
nets using techniques ranging from genetic algorithms and h euristics to regions
and partial orders. moreover, petri nets can be analyzed in v arious ways using
the various analysis plug-ins.
acknowledgements the development of prom is supported by eit, nwo-
ew, the technology foundation stw, and the iop program of the dutch min-
istry of economic aﬀairs.
references
1. w.m.p. van der aalst, h.a. reijers, and m. song. discoveri ng social networks
from event logs. computer supported cooperative work , 14(6):549–593, 2005.
2. w.m.p. van der aalst, m. rosemann, and m. dumas. deadline- based escalation
in process-aware information systems. decision support systems , 43(2):492–511,
2007.
3. w.m.p. van der aalst, v. rubin, b.f. van dongen, e. kindler , and c.w. g¨ unther.
process mining: a two-step approach using transition syste ms and regions. bpm
center report bpm-06-30, bpmcenter.org, 2006.
4. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. marust er, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and ap proaches. data
and knowledge engineering , 47(2):237–267, 2003.
5. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128–1142, 2004.
6. j. cortadella, m. kishinevsky, l. lavagno, and a. yakovle v. deriving petri nets
from finite transition systems. ieee transactions on computers , 47(8):859–882,
august 1998.
7. b.f. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a .j.m.m. weijters,
and w.m.p. van der aalst. the prom framework: a new era in proc ess mining
tool support. in g. ciardo and p. darondeau, editors, application and theory of
petri nets 2005 , volume 3536 of lecture notes in computer science , pages 444–454.
springer-verlag, berlin, 2005.
8. e. kindler. on the semantics of epcs: a framework for resol ving the vicious
circle. data and knowledge engineering , 56(1):23–40, 2006.
9. a. rozinat and w.m.p. van der aalst. conformance testing: measuring the fit
and appropriateness of event logs and process models. in c. b ussler et al., editor,
bpm 2005 workshops (workshop on business process intellige nce), volume 3812 of
lecture notes in computer science , pages 163–176. springer-verlag, berlin, 2006.