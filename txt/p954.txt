discovering work prioritisation patterns from event logs
suriadi, s.; wynn, m.t.; xu, j.; van der aalst, w.m.p.; ter hofstede, a.h.m.
published in:
decision support systems
doi:
10.1016/j.dss.2017.02.002
published: 01/08/2017
document version
publisher’s pdf, also known as version of record (includes final page, issue and volume numbers)
please check the document version of this publication:
• a submitted manuscript is the author's version of the article upon submission and before peer-review. there can be important differences
between the submitted version and the official published version of record. people interested in the research are advised to contact the
author for the final version of the publication, or visit the doi to the publisher's website.
• the final author version and the galley proof are versions of the publication after peer review.
• the final published version features the final layout of the paper including the volume, issue and page numbers.
link to publication
citation for published version (apa):
suriadi, s., wynn, m. t., xu, j., van der aalst, w. m. p., & ter hofstede, a. h. m. (2017). discovering work
prioritisation patterns from event logs. decision support systems, 100, 77-92. doi: 10.1016/j.dss.2017.02.002
general rights
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners
and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights.
            • users may download and print one copy of any publication from the public portal for the purpose of private study or research.
            • you may not further distribute the material or use it for any profit-making activity or commercial gain
            • you may freely distribute the url identifying the publication in the public portal ?
take down policy
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the work immediately
and investigate your claim.
download date: 14. jan. 2018decision support systems 100 (2017) 77–92
contents lists available at sciencedirect
decision support systems
journal homepage: www.elsevier.com/locate/dss
discovering work prioritisation patterns from event logs
suriadi suriadia,*, moe t. wynna, jingxin xua, wil m.p. van der aalstb,a, arthur h.m.ter hofstedea,b
aqueensland university of technology, australia
beindhoven university of technology, the netherlands
article info
available online 8february2017
keywords:
resource behaviour miningqueuingprocess miningabstract
business process improvement initiatives typically employ various process analysis techniques, including
evidence-based analysis techniques such as process mining, to identify new ways to streamline current
businessprocesses.whileplentyofprocessminingtechniqueshavebeenproposedtoextractinsightsabout
the way in which activities within processes are conducted, techniques to understand resource behaviourare limited. at the same time, an understanding of resources behaviour is critical to enable intelligent and
effective resource management - an important factor which can signiﬁcantly impact overall process per-
formance. the presence of detailed records kept by today’s organisations, including data about who, how,what, andwhenvariousactivities werecarriedoutbyresources,openupthepossibilityforreal behaviours
of resources to be studied. this paper proposes an approach to analyse one aspect of resource behaviour:
the manner in which a resource prioritises his/her work. the proposed approach has been formalised,implemented,and evaluated usinganumberofsynthetic and real datasets.
© 2017 elsevier b.v. all rights reserved.
1. introduction
business process management (bpm) enables organisations to
improvetheeffectivenessandeﬃciencyoftheirbusinessoperationsby
systematically documenting, managing, automating and optimising
theirbusinessprocesses [1].toachievemorewithless,organisations
needtofocusonprocesseﬃciency,i.e.,howtheirbusinessoperations
couldbeimproved.aplethoraofliteratureandmethodologyexistsonhowonecanimproveprocesseﬃciency,e.g.sixsigma [2].however,as
mostbusinessoperationsrelyonhumanresources,e.g.employees,itis
equallyimportanttoinvestigatewhethertheseresourcescanbeusedinamoreeﬃcientmanner;forexample,howdoemployeesspendtheir
timebetweenproductive(e.g.,waitingtime)andnon-productive(e.g.,
idle time) tasks? are there any opportunities for increased resourceutilisation?
today’s information systems record a wide variety of “events”.
events may be generated by human behaviour (e.g., customers andemployees), machines, and software. by leveraging state-of-the-
art data analytics (including data mining, machine learning, and
*corresponding author.
e-mail addresses: s.suriadi@qut.edu.au (s. suriadi), m.wynn@qut.edu.au
(m.t. wynn), j15.xu@qut.edu.au (j. xu),w.m.p.v.d.aalst@tue.nl (w.m. vander aalst),
a.terhofstede@qut.edu.au (a.h. ter hofstede).statistical techniques), valuable insights about resource behaviour
canbeextractedfromthisdatatonotonlyaddressthequestionsjust
presented,butalso facilitatesmarter resource management.
within business processes, while resources are normally guided
by business rules from the organisation and are constrained by the
associated it systems in terms of how they perform their work,
resources typically have some freedom in prioritising their work,
including the selection of activities (also known as work items)t o
perform and the order in which these activities are carried out. the
way in which resources select the tasks to perform essentially forms
the type of queuing discipline he/she applies. a queuing discipline
refers to “the manner in which customers are selected for service
when a queue is formed” [3]. the most common queuing discipline
used in day-to-day life is the ﬁrst-in-ﬁrst-out style (fifo) where
work items that arrive ﬁrst receive the highest priority, last-in-ﬁrst-
out (lifo) where work items that arrive last receive the highest
priority, and priority-based where priority is determined by somepre-determinedrules.
theversatilityoftheconceptofaqueuehasseenitsapplicationin
manydomains,fromcomputernetworkstobusinessprocesses.stud-ies in the use of queues show that knowledge of queuing disciplinesemployed is important to design effective resource management
strategy for ensuring appropriate staﬃng level [4,5]or performance
stabilization [6,7].furthermore,studiesshowthatqueuingdiscipline
may have a signiﬁcant impact on the overall performance [8–13].
for example, the use of shortest process time ﬁrst discipline has
http://dx.doi.org/10.1016/j.dss.2017.02.002
0167-9236/© 2017 elsevier b.v. all rights reserved.78 s. suriadi et al. / decision support systems 100 (2017) 77–92
been shown to reduce cycle time as compared to fifo in certain
settings [11]. within business processes, one can draw a parallel
in how queuing discipline employed by resources can substantiallyimpact overall process performance. for example, a predominantlylifo work prioritisation behaviour of resources may very likely lead
toalifocasecompletiontrend-aphenomenonthatisnotdesirable
from a customer satisfaction perspective. the interplay between theassignment of work items to resources and their queuing disciplinealso impacts overall process performance. for example, assigning a
work item involving calling customers to a resource who always pri-
oritises the execution of e-mailing customers will easily lead to the
buildingupoflonger(andratherunfair)waitingtimesfortheformertask. this highlights an undesirable situation where the assignment
mechanisms of work items to resources, and the choice of queuingdiscipline of the resources in the process are out of sync.
a clear understanding of resource behaviour can assist organisa-
tions in identifying undesirable (and perhaps unexpected) workingpatterns which will guide them in investigating contextual factors
(e.g. the way in which a list of tasks is presented to users on their
screens) that may inadvertently encourage the expression of suchbehaviours by employees, leading to a clear direction for processimprovement (e.g. changing the default ordering of work items).
as reported in this article, this is precisely one of the insights we
extracted.
the scenarios above clearly demonstrate the importance of
understanding resource behaviour: it allows one to identify individ-ual resource behaviour (which may be problematic) and to under-stand their compound effects on overall process performance. most
importantly, insights about resource behaviour will nicely comple-
ment existing process improvement strategy, enabling intelligentadaptation of the way in which processes are designed (to achieve
thebestprocessoutcomes)tothewayinwhichresourcestackletheir
tasks in theprocesses.
in this article, we present a new data-driven approach to learn-
ing the prioritisation order used by a resource to carry out the work
items(inrelationtoaparticularbusinessprocess).asshownin fig.1
(left-hand-side ﬁgure), a business process is typically guided by a
process model. a process model captures those activities that need
to be performed, the temporal order in which they are to be exe-
cuted (e.g. sequentially or in parallel), and the resource(s) who canexecutethevariousactivitiesintheprocess.theexecutionofvarious
instancesofaprocessisoftenrecordedintransactionalrecords(also
knownas event logs).
event logs typically contain information about the activities (or
work items) that have been executed, the time they occurred, and
the identiﬁers of employees who carried out the activities. by com-bining process analysis and data mining techniques, the emergingdiscipline of process mining provides a collection of novel tech-
niquestoexploitandextractprocess-relatedinsightsfromrawevent
data[14]. research in the domain of process mining has tradition-
ally been focused on process discovery (i.e., automated discovery of
the control ﬂow of a process from data attributes recorded in an
event log), conformance checking (i.e., detection of where and how
deviances in processes occurred by comparing observation seen in
a log with normative process models or business rules), and perfor-
mance analysis (i.e., identifying bottlenecks and extracting process
performance metrics). relatively few research studies have beenconductedthatfocusontheresourceperspective [15–20],andtoour
knowledge,noneoftheseworksfocusondiscoveringresourceswork
prioritisationorder.
our approach makes use of detailed transactional records of executed
processes (i.e. event logs) to determine the queuing discipline employed
by the resources (fig. 1 - right-hand-side). such a data-driven
approachhastheadvantageofobjectivelyexposingtheactualwayin
whichresourceswork,whichmay,andoftendo,contradictanecdotal
wisdom orrecommendedbusinesspractices.itisnotourgoaltomonitorandcontrolthewayinwhichresources
work.thispaperisaboutdiscoveringtheworkprioritisationpatterns
of resources and their effects on the overall process which can be
performed in a privacy-preserving manner (see section 5).
our approach has been implemented as a plug-in for the open-
source process mining tool prom
1. we evaluate the correctness of
ourapproachandimplementationbytestingthetoolusingsynthetic
logs. we demonstrate the usefulness of our approach in a case studywith an australian-based insurance organisation. in particular, our
case study manages to extract useful insights about behaviours of
resources that may be useful for the stakeholders to design a moretargetedactions.
the rest of the paper is organised as follows. section 2 presents
the proposed approach for learning work prioritisation patterns.section 3 discusses a prototype implementation of the approach
within the open-source process mining tool, prom. sections 4 and 5
presentﬁndingsfromtheevaluationoftheproposedapproachusingsynthetic and real-life datasets. section 6 summarises related work
in the areas of organisational mining and queuing theory. section 7
concludes the paper.
2. learning work prioritisation patterns
adescriptiveoverviewofourapproachisprovidedin section2.1,
and formalised in section2.2.
2.1. approach
the proposed approach is illustrated in fig. 2. the log shown at
the top of fig. 2depicts a snippet of the events performed by two
resources: carol and eliza. each row in the log represents an event.
for example, the ﬁrst row of the log records an event capturing theassignment of a work item to the resource named carol. the work
item in this event is deﬁned by the activity ‘create po’ that needs to
be executed for a particular process instance of which the identiﬁeris ‘330’. as a short form, we give an identiﬁer for the work item cap-turedbyeveryeventinthelog(e.g.c1fortheworkitemrepresented
bytheﬁrst eventinthelog).
by observing such an event log, we can build the worklist of a
resource,orderedaccordingtothetimestheworkitemsareassignedto the resource (i.e., the in-list) and the corresponding (partial) list
of work items completed by the resource, ordered according to thetime the work items are completed (i.e., the out-list). for example,
the bottom-left part of fig. 2depicts an in-list for resource carol at a
particular timestamp t
/prime
3(which happened just immediately before t 3)
wherebythreeworkitems(c1,c2,andc3)havebeenassignedtoher.
fromthisin-list,webuildthe expected ordering of work items out-
putattime t3byassumingacertainqueuingdiscipline.forexample,
if we hypothesise that carol works on a fifo basis, then we should
expect the order in which the work items are completed to be the
same as theorderin whichthework itemswere assigned.
the bottom-right side of fig. 2shows the out-list of carol at time
t3, just after the completion of work item c3. whenever we see a
work item being completed, we ﬁrst determine the expected work
item that should be seen at the out-list based on the assumed queu-ingdisciplineandextractthein-listpositionofthatworkitem.next,
we calculate the distance between the in-list position of the expected
work item and the in-list position of the work item that actually
appearsin theout-list. for example, in fig. 1, if carol adoptsthefifo
queuing discipline, the expected work item to be seen at time t
3is
c1 (which assumes the ﬁrst position in carol’s in-list). however, if
carol adopts the lifo discipline, the expected work item to appearin the out-list at time t
3is c3 (which assumes the third position in
1www.promtools.org - resource queue behaviour package.s. suriadi et al. / decision support systems 100 (2017) 77–92 79
“process model”“an outgoing work item”“a worklist (of a resource)”
f[c6, cpo] [c7, cpo] [c2, tpo] [c8, cpo]
[c8, cpo] [c2, tpo] [c7, cpo]incoming
outgoing[c5, mpo] [c3, copo] [c4, mpo] [c3, copo]
[c3, copo] [c5, mpo] [c4, mpo]cincoming
outgoingb[c3, apo] [c1, mpo] [c2, apo] [c1, apo]
[c2, apo] [c1, apo] [c1, mpo]incoming
outgoing
cpo start apo
approve poend
aa
b a
tpo
terminate pompo
modify po
confirm pocopo
create pod
c
fbfc“an incoming work item”fifo
lifo
priority  
fifo“event logs”
fcbinput output analysisdata source
fig. 1.the left-hand side ﬁgure shows an example of a ‘purchase order’ (po) process which is made up of ﬁve activities: create po, approve po, modify po, conﬁrm po, and
terminatepo.theexecutionofaprocessleavestracesthatarerecordedineventlogs.ourapproachusesinformationineventlogstodeterminethepri oritisationorderemployed
by resources in tackling their work items. a work item is represented by the activity name and the case to which the activity belongs (e.g. [c1, apo] represents an ‘approve po’
task that needs to be performed for a case identiﬁed as ‘c1’. resource bemploys a fifo discipline. resource cemploys a lifo discipline. resource femploys a priority fifo queue
because work items with the highest priority are executed ﬁrst. in this case, activity ‘terminate po’ (tpo) has a higher priority than other activitie s, thus are executed ﬁrst, while
work items that share the same priority (allthree work items containing activity ‘create po’ - cpo) areexecuted in fifo manner.
fig. 2.overview of the approach.
carol’s in-list). the actual work item that appears on carol’s out-list
is c3. therefore, the actual work-item is off by twopositions for a
fifoqueuingdiscipline,whileforalifoqueue,thedistanceis zero.2
2notethatthein-list,andthecorrespondingexpectedoutputorderlist,changesas
workitemsareaddedandremovedfromtheselists.asaworkitemisaddedtothein-
list,theexpectedoutputorderislikelytochange(dependingonthequeuingdisciplinebeing analysed). similarly, when a work item appears on the out-list, that work itemshould beremoved from the in-list.it is diﬃcult to learn queuing discipline by just looking at one
distancevalue.whatweneedtoobtaininsteadisthe trendofthedis-
tance values over time. by calculating the distance value every time
aworkitemisaddedtoaresource’sout-listandbyaggregatingthese
values,thetrendintermsoftheﬂuctuation,oritslackthereof,ofthe
distancevaluecanbeobserved.byobservingthistrend,wecanthenpredictthequeuingdisciplineemployedbyresources.
in the remainder of this paper, we use the term resource perspec-
tivetorefertothelearningofqueuingdisciplinefromtheperspective80 s. suriadi et al. / decision support systems 100 (2017) 77–92
of resources, similar to the examples given earlier in this section: a
queue ismade up of work itemsrelated to one particular resource.
we can also learn the prioritisation order from the perspectives
of activity types (referred to as activity perspective ). here, a queue
is made up of a collection of work items of one particular activity .
using the same log shown in fig. 2, the in-list for activity createpo
includec1(attime t0only)andc3(attime t2)(c2relatestoa different
activity,thuscannotbeamemberinthiscase).similarly,foractivitymodifypo, the in-list consists of work items e3 (at time t
12), while
the out-list will consist of the same work item e3 but related to theeventat time t
14.
finally, we can also learn work prioritisation order from the per-
spectiveofacase(referredtoas case perspective ).inthiscase,anin-list
queue is made up of the earliest activity per case, and the out-listqueueismadeupofthelatestactivitypercase.forexample,usingthe
logshownin fig.2,anin-listbuiltfromacaseperspectivewillconsist
ofworkitemsc1(forcase330attime t
0)andc3(forcase663attime
t2)because createpo istheactivitythatsigniﬁesthestartofacaseas
per process model in fig. 1. the out-list corresponding to this in-list
willconsistofworkitemsc8andc9(forcases330and664attime t5
and t6respectively)becausetheyrepresentedpossibleendactivities
of a case. note that for analysis from the case perspective , the pair of
in-list and out-list members are of different work items though they
relate to the same case.
2.2. formalisations
an event log consists of a set of events. each event has a times-
tamp. the timestamp of an event is one of a range of attributes of an
event.these attributescan be mandatoryor optional.
deﬁnition 1 (event, attribute ).let ebe the event universe , i.e., the
set of all possible event identiﬁers. an event may be characterised
by various attributes, e.g., an event has a timestamp, corresponds to
an activity, and belongs to a particular case. let anbe a set of all
possible attribute names. for any event e∈eand an attribute name
a∈an:#a(e)isthevalueofattributenamed aforevent e.ifanevent
edoesnothave an attribute a,thenwewr ite# a(e)= ⊥(null value).
letdcasebe the set of case identiﬁers (case id), dactbe the
set of activities, dtimebe the set of timestamps, dresbe
the set of resources, dtype={schedule, assign, start,resume, suspend,
manual −skip, auto−skip, complete} be the set of event transaction
types, and ddatabe the set of data values (these may have a complex
structure).
for each event e∈e, we deﬁne a number of standard attributes:
#case(e)∈dcase(the case id of e),#act(e)∈dact(the activity of e),
#time(e)∈dtime(thetimestampof e),#res(e)∈dres(theresourcewho
triggered the occurrence of e), and #type(e)∈dtype(the transaction
typeof e).
deﬁnition 2 (event log). an eventlog l⊆eisa setof events.
the timestamps associated with events in lnaturally provide a
partial order of events (it is partial because more than one event can
occuratthesametime).toestablishatotalorderofevents,wedeﬁnean eventorderidentiﬁer.
deﬁnition 3 (event order identiﬁer). let
l⊆ebe an event log. idl:
l→{1,...,|l|}is a bijective function that maps each event e∈l
to a unique natural number whereby for all e1,e2∈l:i f#time(e1)<
#time(e2), then idl(e1)<idl(e2), i.e. function idlprovides a total
order of events.deﬁnition 4 (case). let
l⊆ebe an event log. a ﬁnite sequence of
events over lof length n∈z>0is a mapping a∈{1,2, ...,n}→ l.we represent such a sequence as a string a=/angbracketlefte1,e2,...,en/angbracketrightwhere
a(i)=e ifor 1≤i≤n.
letcid∈dcasebe a case identiﬁer. a casewith cidas its case
identiﬁer (denoted as acid) is a ﬁnite sequence of events over lof
length n∈z>0such that for any i,j∈{1,2, ...,n}(where i<j),
idl(a(i))<idl(a(j)) and #case(a(i)) = #case(a(j)) = cid.
as mentioned in section 1, an activity that is executed within a
caseisreferredtoasa work item.aprocessmayallowthesameactiv-
ity to be repeated within a case. for example, in the process model
shown in fig. 1, the activity modifypo is allowed to be repeated.
infig. 2, we can see that this same activity was assigned twice to
eliza in the case number 1625. therefore, it is possible that two ormore work items within the same case may refer to the same activ-
ity. to uniquely identify multiple instantiations of the same activitywithinthesamecase,weintroducethenotionof work item identiﬁer .
two work items of the same activity executed within the same casehave different work item identiﬁers. for example, in fig. 2, the two
work items related to the activity modifypo for case 1625 have twodifferentwork itemidentiﬁers(e3 and e4).
deﬁnition 5 (work item ).let
l⊆ebe an event log, dwidbe a set
of possible work item identiﬁers, and t:l→dwidbe a function
that assigns a work item identiﬁer to an event such that for any two
events e1,e2∈lwhere idl(e1)/negationslash=idl(e2),e1and e2refertothe same
work item if and only if :#case(e1)=# case(e2)a n d# act(e1)= #act(e2)
and t(e1)= t(e2). awork item can therefore be uniquely identiﬁed
a sat u p l eo f dcase×dact×dwid.
deﬁnition 5 implies that two or more events may refer to the
same work item. this is possible because a work item goes througha number of states. the states and the corresponding transitions
thataworkitemtraversesaredescribedusingadeterministicfiniteautomata [21]diagram as shown in fig. 3. the edges of the ﬁgure
capture the possible transaction types (i.e.
dtype), while the nodes
capture the possible states of work items. the transition of a workitemfromonestatetoanotheriscapturedbyan event,andtheexact
type of the transition is codiﬁed by the value of the transaction type
oftheevent.
we use the notation tp
x⇒tpx/primeto say that tpx/prime∈dtypeis a
transactiontypethatcanbereachedfromanearliertransactiontypetp
x∈dtypeas perfig. 3.
as explained in section 2.1, to learn resource work prioritisation
from various perspectives, corresponding in-lists and out-lists need
executing
concluded suspendedscheduled assignedassign
start
suspend resumemanual-skip auto-skip
completeschedule
fig. 3.possible transaction types and states of work items (based on xes standard
deﬁnition [ 22]).s. suriadi et al. / decision support systems 100 (2017) 77–92 81
tobebuilt.fortheresourceperspectiveandactivityperspective,the
in-lists and out-lists are built based on the transaction types of the
eventsinthelist.forthecaseperspective,thecorrespondingin-lists
and out-lists need to be built based on the ﬁrst and the last event ofa case. for thesepurposes, wedeﬁneevent-typedlog and case log.
deﬁnition 6 (event-typed log). let
l⊆ebe an event log. given
tp∈dtype,ltp={e∈l|#type(e)= tp}is an event-typed log whose
eventsin lhave thesame transaction type.
deﬁnition 7 (case start log, case end log ).letl⊆ebe an event
log,dstartact ⊆dactbe a set of all possible activity names signifying
the start of a case, and dﬁnalact ⊆dactbe a set of all possible activity
names signifyingtheend ofa case.
lﬁrst={e∈l|∄e/prime∈l:(idl(e/prime)<idl(e)∧#case(e)= #case(e/prime)∧
#act(e/prime)∈dstartact)}is the case start log oflwhereby each event in
lﬁrstis the earliest event representing the start of the case to which
the event ebelongs. similarly, llast={e∈l|∄e/prime/prime∈l:(idl(e/prime/prime)>
idl(e)∧#case(e)= #case(e/prime/prime)∧#act(e/prime/prime)∈dﬁnalact)}is the case end log
oflwhereby each event in llastis the latest event representing the
end ofthecase towhichtheevent ebelongs.
to capture the pairing of two events representing the entry of
a particular work item into a queue and its corresponding exit, we
deﬁnetheconceptof segment.
deﬁnition 8 (work item segment). letl⊆ ebe an event log,
tpin,tpout∈dtypebe event transaction types, and ltpin,ltpout⊆lbe
event-typed logs. sltpin,ltpout={(ei,eo)∈ltpin×ltpout|idl(ei)<
idl(eo)∧(#case(ei),#act(ei),t(ei)) = (# case(eo),#act(eo),t(eo))∧tpin⇒
tpout}isasetof work item segments whicharedeﬁnedbypairsoftwo
events(e i,eo)with eimarkingthebeginningofaparticularworkitem
segmentand eomarking theendofthecorrespondingsegment.
aneventlogmaynotcontaininformationforalltransactiontypes
of a work item. deﬁnition 8 only requires that an event log records
two particular transaction types for each work item (e.g. tpin= start
and tpout= complete). a limitation of this requirement is that our
approach may not work when the event log used only records one
particular transaction typeperworkitem.3
deﬁnition 9 (cluster of work item segments ).letl⊆ebe an event
log, tpin,tpout∈dtypebe event transaction types, ltpin,ltpout⊆lbe
event-typed logs, sltpin,ltpoutbe a set of work item segments, a∈an
be an attribute name, dabe the possible values for attribute a,a n d
va∈dabea particularvalue of theattribute a.
we deﬁne sltpin,ltpout/harpoonuprighta
va={(ei,eo)∈sltpin,ltpout|#a(ei)=
#a(eo)= va}a sa cluster of work item segments where all seg-
mentswithintheclustersharethesameattributevalueforthegiven
attribute a.
for example, let res∈anbe an attribute referring to resource
identiﬁer, r1∈dresbe a particular resource identiﬁer value, and
assign,start ∈dtypebetwospeciﬁctransactiontypes. slassign,lstart/harpoonuprightres
r1=
{(ei,eo)∈slassign,lstart|#res(ei)= #res(eo)=r1}refers to a cluster of
work item segments whereby all segments within the cluster share
the same resource identiﬁer value and the transaction types that
signify the entry and exit of a work item to/from a segment are
assign and start respectively.
using deﬁnition 9, we can see that the concept of resource
perspective (mentioned towards the end of section 2.1)i si nf a c t
3nevertheless, through other types of process mining analysis, e.g., [23],i ti sp o s -
sible to derive a new transaction type for a work item form a row event log that only
contains one transaction type.captured by sltpin,ltpout/harpoonuprightres
rifor any ri∈dres. similarly, the con-
cept of activity perspective applies when segments are deﬁned as:
sltpin,ltpout/harpoonuprightacta
ifor any ai∈dactwhere act∈anis an attribute
representingactivityname,and ai∈dactis apossible activityname.
deﬁnition 10 (case segment ).letlbe an event log, lﬁrstbe the
case start log for l,a n d llastbe the case end log of l.slﬁrst,llast=
{(eci,eco)∈lﬁrst×llast|#case(eci)= #case(eco)}isasetof case segments
whicharedeﬁnedbypairsof( eci,eco)with ecimarkingthebeginning
of a particular case segment and ecoan event referring to the same
case marking theend of thecorrespondingsegment.
the concept of case perspective , mentioned towards the end of
section 2.1, thus applies when segments are deﬁned as slﬁrst,llastas
perdeﬁnition10 above.
deﬁnition 11 (collection of segments ).letl⊆ebe an event log,
tpin,tpout∈dtypebe event transaction types, ltpin,ltpout⊆lbe
event-typed logs, lﬁrstbe a case start log, llastbe a case end log,
sltpin,ltpoutbe a set of work item segments, slﬁrst,llastbe a set of case
segments, a∈anbe a particular attribute name, dabe the set of
all possible values for the attribute a,a n d va∈dabe a value of the
attribute a.
sl={sltpin,ltpout}∪{slﬁrst,llast}∪s ltpin,ltpout/harpoonuprightanis the set of all
possible sets of segments that may existin lwhere
•{sltpin,ltpout}isa set oftheset ofall work itemsegments,
•{slﬁrst,llast}isa set of theset of all case segments,and
•sltpin,ltpout/harpoonuprightan=/uniontext
a∈an,va∈da{sltpin,ltpout/harpoonuprighta
va}is a set of the sets of
all possibleclusters of workitemsegments.
having deﬁned the concept of segment, we can now deﬁne the
conceptof in-listand out-list.
deﬁnition 12 (in-list, out-list). letl⊆ebe an event log and sl
be the set of all possible sets of segments that may exist in l.f o r
ag i v e n s/prime∈sl,ls/prime
in={ei∈l|∃eo∈l:(ei,eo)∈s/prime}is an in-list
whosemembersrepresentthestartingeventsofsegmentsseenin s/prime
(henceforth,referred toas the in-list of s/prime).
conversely, ls/prime
out={eo∈l|∃ei∈l:(ei,eo)∈s/prime}is an out-list
whose members represent the ending events of segments seen in s/prime
(henceforth,referred toas the o u t - l i s to fs/prime).
deﬁnition 13 (timed in-list, timed out-list ).letl⊆ebe an event
log,s/prime∈sbe a set of a particular type of segment, ls/prime
inbe the in-list
ofs/prime,a nd ls/prime
outbetheout-list of s/prime.
givena timestamp t∈dtime,
•lt,s/prime
out={eo∈ls/prime
out|#time(eo)≤t}isthe timed out-list ofs/primeattime
twherebyallactivityinstancesorcasescapturedbytheevents
withinthelisthavecompletedtheirsegmentsatorbeforetime t.
•lt,s/prime
in={ei∈ls/prime
in|∃(ei,e/primeo)∈s/prime:#time(ei)≤t∧#time(e/prime
o)>t}is the
timed in-list ofs/primeattime twherebyallactivityinstancesorcases
captured by the events within the list have not yet completed
theirsegmentsat,or before,time t.
deﬁnition 14 (ranking function). letl⊆ebe an event log. ris
a set of bijective functions that rank every event in an event log l
based onsome criteria,i.e. forany ql∈r,q:l→{1,...,|l|}.
forexample,afiforankingfunction ql
fifo∈rwillrankallevents
in an event log lsuch that for any two events ej,ek∈l,ql
fifo(ej)<
ql
fifo(ek)i fa n do n l yi fid l(ej)<idl(ek). a lifo ranking function
ql
lifo∈ris the reverse: ql
lifo(ej)<ql
lifo(ek) if and only if idl(ej)>
idl(ek).
more concretely, given an event log l/prime⊆lthat consists of three
events {e 1,e2,e3}w h e r e idl(e1)<idl(e2)<idl(e3),ql/prime
fifo(e1)=82 s. suriadi et al. / decision support systems 100 (2017) 77–92
1,ql/prime
fifo(e2)=2 ,a n d ql/prime
fifo(e3) = 3. the converse is true for a lifo:
ql/prime
lifo(e1)=3 ,ql/prime
lifo(e2)=2 ,a n d ql/prime
lifo(e3)=1 .
deﬁnition 15 (priority attribute, priority value, priority class ).letl⊆
ebeaneventlog, priority ∈anbea priority attribute name ,dprioritybe
the set of possible priority values, priorityclass ={1,2, ...,|dpriority|}
beasetofpossiblepriorityclasseswith‘1’referringtotheclasswith
the highest priority, and x:dpriority →priorityclass be a function
that maps each value in dpriorityinto a particular priority class. for a
given e∈l,#priority(e)∈dpriorityis the priority value of event e,a n d
x(# priority(e))is thecorresponding priority class.
given an event log l⊆e, a priority ranking function ql
priority∈
rwill rank all events in lsuch that for any two events
ej,ek∈l,ql
priority(ej)<ql
priority(ek) if and only if x(# priority(ej))>
x(# priority(ek)) or x(#priority(ej)) = x(# priority(ek)) and idl(ej)<
idl(ek).
for example, assume an event log l/prime⊆lthat consists of three
events{e 1,e2,e3}whereid l(e1)<idl(e2)<idl(e3),x(# priority(e1)) =
x(# priority(e3))=2,and x(# priority(e2))=1.thepriorityrankingfunc-
tion ql/prime
prioritywill yield the following: ql/prime
priority(e1)=2 ,ql/prime
priority(e2)=1 ,
and ql/prime
priority(e3) = 3. this is because e2has the highest priority class
amongstallevents.furthermore,while e1ande2havethesameprior-
ityclass,theeventorderidentiﬁerfor e1islowerthan e3,thusgiving
e1a higher ranking than e3.
deﬁnition 16 (distance, queue score ).letl⊆ebe an event log,
s/prime∈slbe a set of a particular type of segments that may exist in l,
andls/prime
outbetheout-listof s/prime.givenanoutputevent eo∈ls/prime
out,wecan
determine the following: to(the timestamp of eowhich is #time(eo));
lto,s/prime
in(the timed in-list at time to);ei∈lto,s/prime
in(the corresponding
input event of eosuch that ( ei,eo)∈s/prime);qlto,s/prime
in∈r(a ranking
functionover lto,s/prime
in);and ee∈lto,s/prime
insuchthat ∀ek∈lto,s/prime
in:qlto,s/prime
in(ee)<
qlto,s/prime
in(ek)( i . e .e eis the event representing the work item that is
expected to exit its segment at time to).
we deﬁne distance: lout×p(l)→z≥0as a function that
returns a non-negative integer representing the distance betweene
i,ee∈lto,s/prime
in. the formula of the distance function is as follows:
distance(eo,l)=|idl(ee)−idl(ei)|.
we also deﬁne max_distance:lout×p(l)→z≥0as a function
thatreturnsthemaximumdistancebetweenanytwoeventsin lto,s/prime
in.
the formula for max_ distance function is: max_distance(eo,l)=
idl(emax)−idl(emin)where emin,emax∈lto,s/prime
insuchthat ∀el∈lto,s/prime
in\{emin}:
idl(emin)<idl(el), and ∀el∈lto,s/prime
in\{emax}:idl(emax)>idl(el).
finally queue_score:lout×p(l)→ris a function that estimates
theextenttowhichworkitemsdeviatefromtheexpectedinputandoutput ordering. the formula for the queue_scorefunction is as fol-
lows: queue_score(e
o,l)=1-( distance(eo,l)/max_ distance(eo,l)).
the average queue score for ls/prime
outis the simple mean
of all the queue scores calculated for events in ls/prime
out:/summationtext
eo∈ls/prime
out(queue score(e o,l))/|ls/prime
out|.
to account for the changes in resource behaviour over time, one
could adjust distance values using a forget function. such a function
deliberately gives more weight to events that occurred recently and
lowerweighttoeventsthat occurred furtherin thepast.
deﬁnition 17 (forget function ).letl⊆ebeaneventlog.wedeﬁne
s/prime∈slbe a set of a particular type of segments that may exist in
l,a n d loutbe the out-list of s/prime. furthermore, let tlout={#time(e)∈
dtime|e∈lout},tmin∈tloutwhere∄t/prime
min∈tlout:t/prime
min<tmin,a n dt max∈
tloutwhere∄t/primemax∈tlout:t/prime
max>tmax.we deﬁne a forget function f:tlout→[0,1] that maps the times-
tampofalleventsin louttoarealnumbersuchthat f(t1)<f(t2)iff
t1<t2,f(tmin)=0 ,a n d f(tmax)=1 .
in practice, many cumulative probabilities distribution functions
can beused to representthefunction fdeﬁnedabove.
deﬁnition 18 (adjusted queue score). letl⊆ ebe an event
log. we deﬁne adjusted _queue_score:lout×p(l)→ras a
function that estimates the extent to which activity instances
deviate from the expected input and output ordering, adjusted with
the forget function. the formula for the adjusted _queue_scorefunc-
tion is as follows: adjusted queue score(e o,l)= f(#time(eo))∗[1−
(distance(e o,l)/max distance(e o,l))]. the average adjusted queue
scoreforls/prime
outis the simple meanof all the adjusted queue scores
calculatedfor eventsin ls/prime
out.
3. implementation
the proposed approach has been implemented as a plug-in to
the prom framework.4the input to this plug-in is an event log in
the standard xes format [22], and the output is a panel that consists
of an option panel and a chart panel. the option panel ( fig. 4- left)
provides an interface for users to conﬁgure a number of options,
such as the queue type (i.e., the queuing discipline to test: fifo,lifo, and priority), the analysis perspectives (i.e., resource, activity,
or case perspectives), the transaction types signifying the entry and
exit of an item into a queue, the attribute name that is to be usedfor a priority attribute (if the priority queue type is chosen), and the
type of cumulative probability distribution function that one would
like to use to represent the forget function. our implementationsupportsthefollowingprobabilitycumulativedistributionfunctions:
normal distribution, exponential distribution, poisson distribution,
and logistic distribution.
based on the chosen perspective, the “select items to view” list-
box will be populated with the values corresponding to the chosen“perspective”.forexample,ifauserchooses“activity”asthedesiredperspective,thelistboxdisplaysallpossibleactivitynamesinthelog.users can then reﬁne the results by choosing only those values that
they want to see. by default, the results for all of the values listed in
thelistboxwillbeshown.
ourimplementationalsoallowsusertocustomisehowtheywant
the queue score to be calculated when the number of items in aqueue (i.e. the queue length) being analysed is one. as discussed
in further details in section 4.1, when the length of a queue is
one, it is diﬃcult to distinguish if a resource or if a case works in
eitherfifo,lifo,orpriorityqueuefashion.wethereforeallowusersto customise the calculation in this situation to either (1) ignore
the inclusion of that particular queue score, (2) include it in the
calculation as normal, or (3) give a value of 0.5 (indicating no strongpreferencefor thequeue tofollow eitherqueuing discipline).
the chart panel ( fig. 4- right) can be divided into two parts:
the chart area at the top and the chart legend below the chart area.the chart area displays a time series that shows the trend of thequeue score (y-axis - left) and the queue length (y-axis - right) over a
periodoftime(x-axis).thequeuescoreusedatthey-axiscoordinate(left) is the queue score as deﬁned in section 2. this queue score ( x),
normalised to the range of [0,1], measures the distance between
the actual queue behaviour (as seen in the log) and the expected
queuebehaviour(basedonaparticularqueuingdiscipline).ahigher
4the plug-in is available in the nightly build version of the prom tool http://www.
promtools.org/prom6/nightly/.installationinstructionisavailablefrom https://www.
dropbox.com/s/j4boic9tmmm8clb/resourcequeue_installationinstruction.pdf?dl=0 .s. suriadi et al. / decision support systems 100 (2017) 77–92 83
choose queue discipline to test:
fifo, lifo, priority
analysis perspective: resource,, activity, or case perspective
options to choose the transaction 
types signifying entry (begin) and 
exit (end) of an item to a queue
the possible probability cumulative
distribution function to shape the
forget function
the name of the attribute to 
be used to set the priority of
work items (applicable if priority queue type is chosen)
how queue score is 
to be calculated when 
the queue length is only 1 
refine results to just a few series
options for users to view the type 
of graph to be seen: original score 
graph, adjusted score graph, or 
the moving average graph
(of the adjusted score graph)original queue 
score graph (red)moving average graph of theadjusted queue score graph 
(blue)
queue length (to beinterpreted against the y-axis value on the right)
average queue score
fig. 4.theoption panel.
xscore indicates a greater match between the expected and the
actual queuing behaviours.
graphsforqueuescorescanbedisplayedusingtheoriginalqueue
score values. however, experience shows that original queue scores
are often volatile, resulting in a rather ‘jagged’ graph. we therefore
allowusersto‘smooth’thegraphoutusingthe moving average func-
tion[24]. the numbers shown on the legend area are the average
queue scores calculated over the whole period captured in the event
log. a higher average queue score indicates a closer match between
theexpectedand actual queue behaviours.
4. evaluation using synthetic data
this section presents the evaluation of the proposed approach
using synthetic data sets with known “ground truths” (i.e. expected
queue behaviours). evaluation of our approach using a real-life dataset withan australian insurance company isprovidedin section5.
fifty-ﬁve synthetic data sets were used, each with their spe-
ciﬁc known ‘ground truths’ and queuing disciplines (see table 1for
details). these data sets were generated based on the same businessprocessmodelshownin fig.5.fourlife-cycletransitionsarepresent
in all the dataset: “schedule”, “assign”, “start”, and “complete”. the
event logs contain ﬁnalised cases only. work items in the syntheticdata sets are performed by six resources.
5all cases in these logs are
startedwithina24-weekperiod.intheremainderofthisarticle,each
log is identiﬁedbyitsuniqueidentiﬁerper table1.
we have generated event logs for all the three perspectives
(“activity”, “resource” and “case”), each with fifo and lifo queue
types. for the “resource perspective” logs, we also generated eventlogs with “priority” queue type as the ground truth (log id “37” to
“42”).
in the following discussion, we denote a queue as a “sample”. a
queue with a ground truth equal to the tested queue type is referred
5the synthetic event logs are generated by a java program developed by
the authors. these logs can be downloaded from https://www.dropbox.com/s/
y30fy6e9t2px9ns/syntheticeventlogs_firstrevision.zip?dl=0 .toasa“positivesample”,andaqueuewithagroundtruththatisdif-
ferent from the queue type being tested is referred to as a “negativesample”. forexample,ifwetestforafifo-type queueintheactivityperspective, the event logs “13” to “18” (fifo ground truth) contain
positive samples, while event logs “19” to “24” (lifo ground truth)
containnegativesamples.
the average queue score (seedeﬁnition16)isusedastheprimary
metricforestimatingthestrengthofthetypeofqueuebeingdetected:
a higher score indicates a better agreement between the queuebehaviourexhibitedbyresourcesseeninaneventlogandthetested
queue type. unless speciﬁed otherwise, the “assign” and “start”
transitionsareusedasthe“begin”and“end”transactionaltypesfortheactivityandresourceperspectivestests,andthe“start”and“complete”
transitions are used for the case perspective tests.
due to space limitation, we summarise the results of our
evaluationsusingsyntheticdatasetsandelaboratekeyﬁndingsfrom
theseexercises.
6
4.1. logs with varying workload rates
logs l1 to l42 are used to evaluate the detection of queue styles
under different workload rate (i.e., the number of new cases started
per week). our experiments not only conﬁrm the fact that our
approachanditsimplementation manage to detect the correct queuing
disciplines as per the actual ground truths, but also highlight a num-
ber of interesting phenomena. uncovering such phenomena often
provides valuable information that can be used to improve process
management.
without reﬁnement in our analysis approach, the average queue
scores will be quite high for any queuing discipline if we frequentlysee queues of length 1. for example, the average queue scores forpositive samples (i.e. the tested queuing discipline matches the real
one) in logs l13–l42 are all close to 1; however, the average queue
scores for the negatives samples are also high, ranging from 0.2 to
6details about the evaluations and the results are available in the other ver-
sion of this paper https://www.dropbox.com/s/9na8e0ntt7u28ru/suriadi_et_al_dss_
specialissue_smartbpm_fullversion.pdf?dl=0 .84 s. suriadi et al. / decision support systems 100 (2017) 77–92
table 1
overviewofthesyntheticdatasets.forthe“numberofcases”column,wepresentthetotalnumberofcasesintheformatof x×y,
where xrepresents the number of started cases per week (ranges from 50, 100, 150, 200, 300, and 500), and yis the number of
weeks with started cases.
log id perspective ground truth number of cases noise
l1–l6 ca se fi fo 50×24, 100 ×24...,500 ×24 0 %
l7–l12 case lifo 50 ×24, 100 ×24...,500 ×24 0 %
l13–l18 activity fifo 50 ×24, 100 ×24...,500 ×24 0 %
l19–l24 activity lifo 50 ×24, 100 ×24...,500 ×24 0 %
l25–l30 resource fifo 50 ×24, 100 ×24...,500 ×24 0 %
l31–l36 resource lifo 50 ×24, 100 ×24...,500 ×24 0 %
l37–l42 resource priority 50 ×24, 100 ×24...,500 ×24 0 %
l43 resource fifo 250 ×24 10 %
l44 resource fifo 250 ×24 30 %
l45 resource fifo 250 ×24 50 %
l46 resource fifo 50 ×24 30 %
l47–l53 resource first fifo, then lifo 50 ×24, 100 ×24...,500 ×24 0 %
l54 resource purelyrandom 500 ×24 100 %
l55 resource alternate between fifo and lifo 500 ×24 100 %
over 0.8. this phenomenon can be explained by the fact that the
states of the queues in these logs contain, often, only one element.
thus,whenthisoneelementexitsitsqueue,itsbehaviourisreﬂected
as both a lifo style and a fifo style. in other words, when there isonly one elementin thequeue, fifo behaviouris manifested exactlyas lifo, and viceversa.
as explained in section 3, the implementation of our approach
allows users to handle the situation of a single item queue, such asproviding options for users to ignorethe inclusion of those queue
scorescalculatedfromasingleitemqueue,ortoassignascoreof0.5.
our experiments show that our approach can better decide queuestyles when we ignore those queue scores obtained when the queue
length is 1. in fact, when we ignored queue scores calculated when
thequeuelengthis1,theaveragequeuescoresfornegativesamplesinourexperimentsgodownandapproach0(asexpected).thereare
afewexceptions,however.afterignoringthequeuescoresobtained
when queue length is 1, we do expect queue scores for negativesamples to be close to 0. however, in some of our experiments, theaverage queue scores for some negative samples were still rather
high(sometimesashighas0.35–0.4).wefoundthatthisunexpected
phenomenon is caused by the queue containing items with exactlythe same input or output timestamps. for example, we ﬁnd that
the unexpected high negative sample queue scores for log l13 exist
when many instances of a particular activity are being started atthe same timestamp. this is a limitation of the proposed approach
as there is no mechanism to effectively handle the situation where
thereexist multipleitemswiththesame timestampsin thequeue.
finally, our experiments also demonstrate that a priority queue
ofanylengthcanalsobeinterpretedasafifoqueueoralifoqueue.
for example, suppose a queue contains two items a and b. supposea arrives earlier than b, and a has a higher priority attribute. the
cpostart
apo
approve po
tpo
terminate pompo
modify po
confirm pocopo
create poclose 
po
(artificial end)end
fig. 5.the process model for the synthetic log.expected fifo out-list is “a–b”, which is also the expected order for
priority queue out-list. our experiments using logs l37–l42 (logs
with priority ground truth) show precisely this: the average queue
scores for the negative samples are all over 0.3, with some as highas 0.7.
4.2. logs with noise
our experiments using logs containing noise at varying intensity
(l43tol46)showthattheaveragequeuescoresforthepositivesam-
ples, while still high (above 0.7 in most cases), are generally lower
than our previous experiments (with logs without noise); the scores
for the negative samples (lifo tests) are still low (all below 0.35).furthermore,ataﬁxedworkloadrate(250casesperweek-logsl43,l44, and l45), as the noise level increases, the average queue scores
for positive samples (fifo tests) generally decrease while the scores
for the negative samples (lifo tests) generally increases. for a ﬁxednoise level (30% - logs l44 and l46), we observe that the log with
lower workload rate (l46) produces lower positive samples scores
and higher negative sample scores, as compared with the log withhigherworkload rate (l44).
based on these evaluation results, we can see that our approach
performsasexpectedinthepresenceofnoise:lowernoiselevelleads
to more accurate results, and vice versa. furthermore, we can also
see a positive correlation between the workload rate and the queue
detectionaccuracylevel.again,thisisexpected:thehigherthework-load is, the longer the queue formed, thus allowing one to better seethedifferencesbetweenvarious queuingdisciplines.
when resources randomly pick the next work item to perform
(log l54), our approach shows that resources are more likely to
exhibit lifo behaviour than fifo (fig. 6). this may seem unex-
pected but it is actually unsurprising. assume a worklist of 5 work
items {w
1,w2,w3,w4,w5}with their respective event order identiﬁer
of {1,2,3,4,5} (deﬁnition 3 in section 2.2). at time t1, let’s say the
resource picks the work item located in the second position of the
worklist,i . e .w 2, to execute. the resource is seen as choosing the
second-in-line work item to execute, out of 5 that has been assigned
totheresourcethusfar.thisbehaviourseemstoalignwithfifobet-ter than lifo (because the resource chooses a work item from theﬁrst-half of thequeue).
upon completion of w
2,a tt i m e t2(>t1), the worklist of the
resource is now {w 1,w3,w4,w5}. assume the resource, again, picks
the work item located in the second position of the worklist,i . e .
w3. historically seen, the resource now picks the third-in-line work
item to execute (from fifo perspective) . that is, the resource startsto show preference of executing work items that were assigneds. suriadi et al. / decision support systems 100 (2017) 77–92 85
fig. 6.experimental results for event logs l54 (randomly picking the next task to perform from a set of ordered worklist) and l55 (alternating between pure fifo and pure
lifo behaviour).
later, rather than earlier. at time t3(upon completion of w3), if the
resource also picks the work item located in the second position
of the worklist (which will be w4), the resource is now executing
thefourth-in-line work item to execute. here, a drift towards lifo
behaviourbecomesmoreevidenteventhoughtheresourcestillexe-
cutes work item located in the ﬁrst-half of the worklist. obviously,
such a drift is even more pronounced if the resource were to pick
workitemslocatedonthethirdorhigherpositionsoneachiteration.such a drift will only be neutralised if the resource were to pick thework itemlocatedon theﬁrst positionof theworklist.
when a resource randomly picks the next work item to execute,
each work item at each position in the worklist has an equal proba-
bilitytobeexecuted.however,asdemonstratedabove,itissuﬃcient
for the resource to pick the second or higher position to execute for
the drift towards lifo to become visible. hence, given a worklist of
x-numberofworkitems,thereisa
1
xprobabilitythatthelifodriftis
neutralised(thatis,pickingtheworkitematposition1),whilethere
is 1−1
xprobability that the lifo drift is exacerbated. thus, it is not
diﬃcult to see why a drift towards lifo may be visible even when
resources chooserandomly thenextworkitemto execute.
nevertheless,inasituationwherearesourceisaslikelytobehave
inastrictlyfifomannerasinlifomanner,ourapproachbehavesas
expected:theaveragequeuescoresarecloseto0.5forbothlifoand
fifo assessments forall resources (as shownin fig. 6forlog l55).
4.3. logs with concept drift
event logs l47 to l53 are resource perspective logs generated
with a queue style ground truth that switches from fifo to lifo,thus exhibiting a form of “concept drift” [25]. here, we use the sce-
nariowheretheresourcesstartworkinginthefifostyle,butswitch
to the lifo style after a certain period of time. with the introduc-
tion of concept drift, one cannot rely on average queue scores to
decide the queue style to which a queue belongs as the value takesinto account the behaviour seen for the whole period of the log ,n o t
the behaviour seen at various points in time over which change is
normally detected. therefore, to detect change, we need to plot the
queue scores over time and observe any change in the trend overtime. our experiments with logs l47 to l53 conﬁrm that a change in
thequeuing disciplinescan indeedbe detected.
7
7for details of our experiment results, please refer to the other version of this arti-
cleathttps://www.dropbox.com/s/9na8e0ntt7u28ru/suriadi_et_al_dss_specialissue_
smartbpm_fullversion.pdf?dl=0.5. evaluation using a real-life dataset
havingestablishedthecorrectnessofourapproachanditsimple-
mentation in section 4, this section presents insights gained from
the evaluation of the proposed techniques with a real-life datasetdepicting the claims handling process from an australian insurance
company,nti(nationaltransportinsurance).abriefoverviewoftheclaims handling process is as follows: when a claim notiﬁcation of
loss is received by the company (e.g., after a truck rolls over or is
involved in an accident), an assessment of the claim is started. noti-ﬁcations are also sent to the underwriting, recovery and settlement
teams for processing. after the assessment is ﬁnalised, the claim
is settled and a number of payments are made (including businessinterruptionpayments).
thisdatasetwasusedtodetectthethreedifferentqueuingstyles
at different perspectives. the results were presented to threestake-
holders (national claims manager, business reporting manager andnational business operations manager) to evaluate the applicability
andusefulnessoftheproposedapproachinanorganisationalsetting.
thestakeholdersfromntiarealsointerestedincomparinginsur-
ance claims behaviours across different states. thus, we present notonly analysis results obtained using australia-wide data, but also
comparative analysis results obtained using data from the states ofqld and vic only. the comparative analysis for claims from qld
and vic was carried out for the following reasons: (1) these two
states have the largest number of cases, (2) the number of casesfrom these two states is comparable, but (3) the total number of
events in qld is higher than that for the vic data with slightly
longer mean and median case throughput times - approx. 10% (seetable 2). through comparative analysis, we are interested in deter-mining whether different queuing disciplines could provide insights
intotheseperformance differences.
5.1. dataset pre-processing
basic characteristics of the dataset used are provided in table 2.
there are 129 employees (anonymised) seen in the log, holding a
total of 30 differentorganisational roles.
toevaluate the likelihoodof thepriorityqueuing discipline,each
work item is labelled with a priority attribute whose values include
“highest”,“high”,“normal”and“low”.thislabellingisbasedonthe
stakeholders’input.itisimportanttoknowthattheuserinterfaceofthe claims processing software (that an nti employee uses) displays
tasks in a worklist that is ordered based on task due dates by default
whichcould bein conﬂictwiththepriorityorder of tasks.86 s. suriadi et al. / decision support systems 100 (2017) 77–92
table 2
overview of the datasets (australia vs. qld vs. vic).
australia qld vic
num of events 154,885 43,645 37,008
num of cases 11,995 3110 3043
number of activities 45 45 44
median case duration 71.8days 76.9 days 69.9days
mean case duration 14weeks 14.9 weeks 13.3weeks
time frame 01/07/2012–02/08/2014 03/07/2012–23/07/2014 02/07/2012–11/07/2014
the transaction types “assign” and “complete” are used as the
“begin” and “end” markers in our analysis. queues with lengths of
oneare ignoredwhencalculatingtheaverage queue scores.
this remainder of this section presents the results of our analysis
along with the feedback from stakeholders as appropriate and a fewcaveatsw.r.t. our approach.
5.2. analyses
weperformedthreetypesofanalysisaccordingtothethreeanal-
ysis perspectives that our approach supports: case, resource, and
activityperspectives.
5.2.1. case perspective analysis
fig.7showstheaveragequeuescoresforthefifoandlifostyles.
the average queue score for qld, vic and australia are similar: the
average queue scores for fifo are between 0.2614 and 0.2760 and
the average queue scores for lifo are between 0.7240 and 0.7433(out of 1). these results indicate that most cases did not follow thefifo queue style and that cases seemed to be completed predomi-
nantly in the lifo style. this can perhaps be explained by our earlier
observation (section 4.2) whereby resources who simply pick workitemsat random are likelyto exhibitlifo behaviours.
stakeholders’ feedback. this analysis has extracted an interesting
insight for the stakeholders: it reveals undesirable work prioritisa-
tionstyles(fromthestakeholders’perspective),astheywouldprefer
to see cases that started earlier to be ﬁnished ﬁrst (i.e. a fifo queue
style), whereas our analysis results ( fig. 7) demonstrate that this is
not the case; instead, we found the lifo queue style to be more
dominant.furtheranalysisofresourceprioritisationbehaviourinthe
subsequentsectionsshedssome lighton thisphenomenon.
5.2.2. role/resource perspective analysis
our analysis in the resource perspective is based on the role
attribute as per the request of the stakeholders. a role is occupiedby one or more employees and employees occupying the same
role in different states is expected to carry out the same type
of activities. fig. 8shows the average queue scores for australia-
wide analysis which reveals that 17 out of the total 21 roles were
likely to follow lifo queue. a few roles, however, were detected to
execute work items mainly in the fifo manner (e.g. roles identiﬁed
by numbers 13, 6, and 12). however, even the highest fifo scoreis only 0.729 (role “6”), which is not as high as those scores
obtained from running lifo queue test. interestingly, fig. 8shows
that (1) roles with a maximum queue length of between 4 to 9
tend to exhibit fifo-queue behaviour and (2) lifo-queue behaviour
becomes more dominant as the maximum queue length increases.
fig. 9(top and middle) present our role analysis results for qld
andvicrespectively.inthesetwostates,thelifostyleismoredom-
inantforroleswithhigherfrequencies. fig.9(bottom)showsseveral
roles that behaved very differently between the two states: role “5”
has different priority queue scores between the two states (qld:0.6022; vic: 0.2286). both roles “7” and “16” are detected to use the
lifo style in qld, but not in vic. the fifo scores for role “7” are
0.1644and0.6618inqldandvicrespectively.role“16”hasaprior-ity queue score as high as 0.6667 in vic, while the priority score for
this role is only 0.2296 in qld. role “13” is found to be exclusively
usingthefifo/priority-stylequeueinqld(i.e.,ascoreof1forboth),whereasinvic,thequeuestyleadoptedbythisroleispredominantly
fifo and priority (0.8for both).
interestingly, for roles with high fifo queue score, their priority
queue scores are also high. for all the three datasets (i.e. australia,
qld, and vic), we can observe that, for a role with a fifo score
higher than 0.6, the priority queue score for the same role will also
be higher than 0.6. in addition, role “13” in the qld dataset has boththe fifo and priority queue scores equal to 1 (fig. 9 - top). this indi-
catesthatthefifoorderandthepriorityorderoftheworkitemsfor
thisroleareidenticaltoeachother.byfurtherexaminingthedataset,we found that, role “13” in qld has 77.78% work-items with a prior-
ityattributeof“high”,andtheremainingwork-itemswithapriority
attributeof “normal”.
00.10.20.30.40.50.60.70.80.91
australia qld vicaverage queue score  
fifo
lifo
fig. 7.average queue scores (case perspective).s. suriadi et al. / decision support systems 100 (2017) 77–92 87
00.10.20.30.40.50.60.70.80.91
f=81520f=23569f=19205f=12230 f=4866 f=4092 f=3422 f=1191 f=1119 f=720 f=640 f=530 f=521 f=290 f=263 f=204 f=135 f=134 f=78 f=48 f=47
1 9 3 8 7 27 4 5 10 16 2 23 15 17 18 13 6 11 22 20 12average queue score
f: frequency
role idfifo
lifo
priority
00.10.20.30.40.50.60.70.80.91
l=533 l=265 l=164 l=112 l=93 l=83 l=59 l=47 l=46 l=40 l=27 l=21 l=21 l=17 l=15 l=15 l=12 l=9 l=7 l=6 l=4
1 3 9 8 7 27 4 15 10 5 16 2 17 23 18 11 22 6 20 13 12average queue score
l: maximum queue length
role idfifo
lifo
priority
fig. 8.role perspective results for australia, sorted byfrequency(top) and maximum queue length (bottom).
for completeness, we also conducted resource-perspective
analysisusingtheanonymisedresourceattribute.inthisanalysis,no
particular queuing discipline stands out across resources in qld and
vic. an interesting observation, however, is the fact that the maxi-mumqueuelengthsforresourcesinqldtendtobelongerthanthose
invic.therearenoresourceswithamaximumqueuelengthofover
50invic,whileinqldtherearefourresources(identiﬁedas“fdln”,“diqx”, “pncs” and “zgap”) with maximum queue lengths greateror equal to 100.
stakeholders’ feedback. the stakeholders did expect roles “6”, “13”,
and “12” (see fig. 9- top and middle) to exhibit different queu-
ing behaviours compared to the rest. roles “6” and “13” refer to
managerial/senior roles and the tasks to be completed by role“12” are not driven by speciﬁc deadlines unlike other roles in the
organisation.
the differences in the queue styles in qld and vic for roles “7”
and “16” (see fig. 9- bottom) are interesting to note though the
stakeholders are unable to explain the possible reasons behind the
differences. the stakeholders indicate that role “7” is responsible forcustomer service, whereas the tasks for role “16” require more crit-ical thinking and internal discussion. further investigation into this
matteris neededinorder toexplainthesedifferences.
in relation to the longer queue lengths for resources in qld as
compared to vic, the stakeholders indicated that the organisationhas a high-functioning, long-time, and task-focused team in vic,
whereastheturnoverratefortheemployeesintheqldteamisquitehigh. thus, it is not surprising to see a higher number of items in theworklists of resources in qld.
5.2.3. activity perspective analysis
our analysis in the activity perspective, with a few exceptions,
alsoshowslifotobethedominantqueuingdisciplineforallactivity
typesaustralia-wide, inqld, and in vic.
fig. 10compares queuing disciplines across two states in the
activity perspective. there are only three activities that were dom-inantly executed in the fifo style in both states ( fig. 10- top):
“claim auto notiﬁcation of loss” (fifo score: 0.6638), “claim settle-
ment consultant notiﬁcation” (fifo score: 0.7672), and “follow-upunaccepted assessment” (fifo score: 0.6344). there are 22 activi-
ties executed mainly in the lifo style with the lifo scores ranging
from 0.54 to 1. fig. 10(middle) shows the results of those activities.
interestingly, activities “business interruption settlement payment
due”and “fleetclaim notiﬁcationestimatemovement”wereexclu-
sivelyhandledinthelifomannerinvic,whereasinqld,theyweresometimes processed in the fifo style. most of the activities shown
infig.10(bottom)wereexecutedinarandommanner(assuggested
by average queuescores of around 0.5).
stakeholders’ feedback. the results of our activity perspective
analysisarewell-receivedbythestakeholders.theyfoundthatthese
results conﬁrmed their intuition that the way in which work items
arepresentedtotheemployeesontheircomputerscreensinﬂuencestheir working style. work items of the same activity type are sorted
(from the top to the bottom of the screen) from the most recent88 s. suriadi et al. / decision support systems 100 (2017) 77–92
00.10.20.30.40.50.60.70.80.91
f=23029 f=8068 f=5872 f=1806 f=1 628 f=878 f=841 f=438 f=363 f=336 f=289 f=34 f=27
13897 2 7 45 1 6 1 0 1 7 1 1 1 3average queue score
f: frequency
role idfifo
lifo
priority
00.10.20.30.40.50.60.70.80.91
f=12318 f=10797 f=6086 f=4691 f=1289 f=1070 f=256 f=249 f=51 f=47 f=40 f=32 f=24
1 9 8 3 4 27 5 10 13 12 16 2 7average queue score
f: frequency
role idfifo
lifo
priority
00.10.20.30.40.50.60.70.80.91
5 7 13 16average queue score
role idfifo (qld)
lifo (qld)
priority (qld)
fifo (vic)
lifo (vic)
priority (vic)
fig. 9.results at the roleperspective for qld (top) and vic (middle), sorted by frequency.the bottom ﬁgure compares thequeue scoresfor the two states.
ones to the oldest ones. our analysis results indicate that people in
theorganisationmostlyexecutethetasksthatcomeintotheirvisionﬁrst (which are the most recent ones as they appear at the top of
the screen), rather than scrolling down to the bottom of the screen
to check for all tasks that may have arrived earlier before decidingon thetasks tobe executedﬁrst (i.e.,fifo). furthermore, thebottom
bar chart of fig. 10shows the queue behaviours for some activities
toberandom-nopredominantqueuingdiscipline-asboththefifo
and lifo scores are around 0.5. the stakeholders conﬁrm that thisis expected, and is indeed desirable, for some activities such as the
“assessmenttypechanged”activitytobeprocessednotaccordingto
a strict queuing discipline. therefore, the insight gained here alignswiththestakeholders’expectationsofthose activitytypes.finally, with regards to the exclusively-lifo queue style for the
activities “business interruption settlement payment due” (see the
middlechartin fig.10)and“businessinterruptionprogresspayment
(weekly)”(seethebottomchartin fig.10)seeninthestateofvic,the
stakeholders told us that these activities were about providing pay-ment to clients. detecting an exclusively lifo pattern may indicate
poorcustomerexperienceasthosewhoshouldreceivepaymentsear-
liercouldbemadetowaitlonger.fromthestakeholders’perspective,it is acceptable to conduct these activities based on the needs of thecustomers rather than in a strict time-based order of either fifo or
lifo.therefore,thesomewhatrandomqueuestyledetectedforthese
activitiesinthestateofqld(whereneitherlifoqueuescorenorfifoqueuescoredominatestheanalysisresults)isexpectedanddesirable.s. suriadi et al. / decision support systems 100 (2017) 77–92 89
00.10.20.30.40.50.60.70.80.91
claim auto notification of  loss claim settlement consultant
notificationfollow-up unaccepted
assessmentaverage queue scorefifo (qld
lifo (qld
fifo (vic)
lifo (vic)
00.10.20.30.40.50.60.70.80.91average queue score
fifo (qld)
lifo (qld)
fifo (vic)
lifo (vic)
00.10.20.30.40.50.60.70.80.91
claim
estimate
movement
notificationclaim
recovery
consultant
notificationassessment
reopenedassessment
type
changedvehicle
releasedclaim large
loss
notificationassessment
updatedbusiness
interruption
progress
payment
(weekly)claim review
late
notification
status
changeaverage queue scorefifo (qld)
lifo (qld)
fifo (vic)
lifo (vic)
fig. 10. results in the activity perspective (qld vs. vic). top: activities where fifo values larger than lifo in both states; middle: activities with lifo values larger than fifo in
both states; bottom: the rest. sorted byfrequency.
5.3. discussions and limitations
all three stakeholders found the insights gained from applying
the resource work prioritisation approach to their datasets to be
useful and highly detailed. from the discussions so far, a key revela-tion for the stakeholders is the fact that the lifo styles are popular,
regardless of the perspective of the analysis (i.e., case, role/resource,
and activity perspectives). analysis from the resource perspectiveshows that there are quite a number of employees who prefer
the lifo style. this is a useful insight to the stakeholders as, from
their perspective, a more appropriate prioritisation style is to give
a higher priority to the oldest work-items/cases, while taking intoconsideration the priority attributes and the due-date time where
applicable.
we also found out that the organisation actively monitors the
workload of employees on a daily basis in order to prioritise certain90 s. suriadi et al. / decision support systems 100 (2017) 77–92
00.10.20.30.40.50.60.70.80.91
claim auto notification of loss claim recovery consultant
notificationclaim settlement consultant
notificationassessment type changedaverage queue scorefifo (qld)
lifo (qld)
fifo (vic)
lifo (vic)
fifo (nsw)lifo (nsw)fifo (wa)lifo (wa)
fifo (sa)
lifo (sa)
fifo (australia)
lifo (australia)
fig. 11. comparison of some activities across australia.
activities/cases and to balance the workloads.8an employee records
his/herworklistanditemisesallworkitemsthatareduein2 daysor
areoverdueby2 days.theworklistsarethenreviewedbyamanager
and the tasks are prioritised according to when they are started (the
oldest ﬁrst). the work is then re-distributed around the team wherenecessary. this monitoring and prioritisation activity is not being
performed using any data analysis tool. the stakeholders mentioned
that the monitoring of work prioritisation is a labour-intensive pro-cess and that their current workload/prioritisation analysis is not at
the same level of sophistication as what we have presented to them.
we then asked the stakeholders whether they would ﬁnd this typeof analysis useful. they all believed this type of analysis to be useful
andexpressedtheirinteresttouseourproposedtechniqueonareg-
ular basis (i.e., quarterly/annually) in order to monitor the changesin the work prioritisation styles over time. these insights point tothepracticalusefulnessoftheproposedworkprioritisationdetection
approach.
this case study reveals a caveat in our approach: an activity
that is detected to be fifo when seen separately in each state maybe detected to be handled mainly in lifo when cases from differ-
ent states are combined (i.e. across the whole of australia) - seefig. 11. for example, activity “claim settlement consultant notiﬁ-
cation” is detected to be handled mainly in the fifo style when a
separate analysis for each state is conducted; however, the com-bined analysis result (australia) shows that both the fifo and lifo
queue scores are around 0.5 with the lifo score slightly higher than
the fifo score. the above phenomenon is entirely possible usingour approach. assume an input list consisting of work items fromthree different groups/cohorts a,b,a n d cand each cohort has two
work items. that is, the combined input list is as follows: (a
1,a2,b1,
b2,c1,c2). let the output list be (c 1,b1,a1,c2,b2,a2). then for each
cohort, the output order is fifo, but the output order for the com-
bination of the three cohorts is not fifo. therefore, how one ﬁlters
event logs greatly affects the type of queue detected. in this casestudy, analysing resource behaviour separately within each state
makesmoresenseasworkitemsarenotassignedtoresourcesatthe
nationallevel,but locallywithineachstate.
strictly speaking, our approach is applicable when the event logs
used contain two life-cycle transitions recorded for each work item.in practice, it is not uncommon to see an event log where each workitem only has timestamp information related to just one life-cycle
8the dataset that was used for the analysis is from 2012 to 2014. the discussions
withthestakeholderswereheldinlate2015andtheorganisationhasimplementeda
number ofimprovements to their work prioritisation style since.transition recorded (e.g., the “complete” time). while our approach
cannothandlesuchasituation,throughlogpre-processing,weshould
beabletoovercomethisissue(wecanderiveanewtransactiontimes-tamp using, for example, the event interval analysis approach [23]).
nevertheless, in evaluating our approach using the real-life datasetfrom the nti organisation, we have excluded those work items withonlyonelife-cycletransitiontimestamp.theexclusionofthesework
items may lead to a mismatch between the analysis results and an
employee’s actual work prioritisation behaviour.
finally,ourapproachisyettoimprovethewayithandlesthesit-
uation whereby multiple work items enter and/or exit a queue at
exactlythesame timeas detailedtowards theendof section4.1.
6. related work
in the last decade, a variety of process mining algorithms have
beenproposed [14,26].earlyprocessminingtechniquesweredevel-
opedtodiscover process models fromeventlogs [27].aprocessmodel
captures the control-ﬂow perspective of a process, i.e. the temporal
dependenciesbetweenvarious activitiesinbusiness processes.
recently, process mining algorithms have been expanded to
include techniques to discover models capturing other process per-
spectives,suchasthedata-ﬂowperspective [28](whichcapturesthe
way in which data was consumed and transformed) and the organ-
isational perspective [14,17-19,26,29] (which discovers knowledge
about the involvement of resources within process executions). the
latteris also knownas organisational mining.
research in the domain of organisational mining mainly focused
on addressing issues related to resource performance. for example,
nakatumba and van der aalst investigate the effects of employeeworkloads on service times using regression analysis [18].h u a n g
et al. propose measures for resource preference, availability, com-petence, and cooperation, and showed how they can be discoveredfrom logs [19].k i me ta l . [30]propose a method to construct a deci-
sion tree (constructed from past performances of resources) thatcan be used at run-time to decide the best resource to be assigneda particular work-item given an objective (lowest cost or fastest
completion time). in [20], pika et al. present a general framework
to detect changes in resource behaviour over time by making use
of time series analysis techniques. senderovich et al. present twodifferent approaches, namely, data mining with decision trees and
queuing heuristics to mine resource scheduling protocols for ser-
vicesystems [31].finally,theworkbysuriadietal. [23]manipulates
time intervals between various events to build various pictures of
resource performance, including their throughput, workload, and
idle times. bycontrast, in thispaper, we focus less on understandings. suriadi et al. / decision support systems 100 (2017) 77–92 91
resourceperformance,butmoreonlearningthewayresourcesselect
and prioritise their work. in particular, we propose techniques to
learntheorderinwhichworkitemsarebeingexecutedbyaresource
(i.e., the queuing discipline adopted by resources). we contend thatsuch a queue discovery approach has not been properly addressed
withintheprocess miningdiscipline.
recent work within the process mining community that is quite
closely related to our approach is the work by senderovich et
al.[32–34] whichseekstolearnthequeuelengthsforthepurposeof
online delay prediction, assuming a particular type of queuing disci-pline employed. our work presented in this article is distinct in thatwe want to discover the queuing discipline employed by resources,
instead ofpredictingqueuelengthorwaitingtime.
within business process simulation community, process min-
ing is often applied to learn historical resource behaviour such that
realistic simulation models can be realised (e.g. rozinat et al. [35]
and wynn et al. [36]). appropriately conﬁguring the queuing disci-
pline for each pool of resources is key for business process simu-lation[37,38]. within this context, our work can be positioned as
complementing process simulation research as it allows creators of
business process simulation models to learn from historical data themost appropriatework prioritisationbehaviour.
the work by akhavian and behzadan [39]is closely related to
ours. in this work, a technique to learn the queuing disciplineemployed by resources is proposed. their approach, however, is dif-
ferent in that their starting point of analysis is a collection of sensor
data, instead of aneventloglikeinourapproach.consequently,their
approach does not support the learning of queuing disciplines from
various perspectives (such as resource, activity, and case perspec-
tives), which our approach supports. finally, the approach proposedby akhavian and behzada [39]learns queuing discipline in a batch
fashion whereby assessment of queuing discipline employed hap-pens onceafterentriesinthelogareprocessed.ourapproach,onthe
other hand, operates in a streaming fashion whereby assessment of
the queuing discipline employed by a resource is performed every
time a work item exits a queue. as such, drifts in the queuing dis-
cipline employed by resources over time can be easily captured.furthermore, the streaming nature of our approach also means that
it can be easily adapted to learn the queuing discipline of a resourcein real-time.
while the concept of queue is used heavily in this article, it is
differentfromotherworkconcernedwithqueuingtheoryasﬂowing
from the work by agner krarup erlang [3]and its variants [40–45].
by looking at these literature, one can see that the type of problems
this work addresses is around the issues of capacity planning and
resource optimisation. for example, the work by erlang [3]looks at
the problem of telephone traﬃc congestion and proposed models topredict the behaviour of systems with randomly arising demands.
the work by maghsoudlou et al. [43]also apply queuing theory to
assess the performance of a supply chain network. queuing theory
has also been widely applied in hospital settings to better plan bed
capacity (e.g. shen and wang [44]) or to assess the capacity of an
emergencydepartmentload (e.g.rosen [45]).
examples mentioned above mostly involve the creation of a
model of queues with certain behavioural assumptions, including
the arrival rate of new work items and the mean working time toserveacustomer.thismodelisthenstudiedtopredicthowasystem
behaves under various loads. the work prioritisation approach pro-
posed in this article is therefore different in that we do not attemptto create a top-down model of a queue with certain characteristics;instead, we attempt to detect, from data, howa resource prioritises
thetasksthathe/shehasbeenassignedto,whetherinafifofashion,
lifo style,or throughsome otherprioritisationmechanism.
another stream of research focuses on the impact of the choice
of queuing discipline on the performances of the systems/processesbeing studied. research in this area (for example [46–48]), however,simply assumes a particular type of queuing discipline as a startingpoint.ourworkservesasinputforsuchapproaches.ourworkstarts
withtheassumptionthatwe do not know thequeuingdisciplinethat
exists in the process being investigated; instead, it is the goalof our
approach to detect the queuing discipline being used. furthermore,resource behaviour may change over time: a resource could at some
point follow a fifo queuing discipline and, at a later point in time,
shift
to a priority-based queue. our approach allows one to observe
such changes.
finally, the implementation of our approach currently only sup-
ports three queuing disciplines (fifo, lifo, and priority), whilethere exist many other queuing disciplines (for example, kumar and
sharma [49]). as detailed in section 2, our approach attempts to
determinethequeuingdisciplineofresourcesbylookingatthealign-
ment between ‘expected’ vs. ‘actual’ work items that exit a queue
(givenaparticularqueuingdiscipline).therefore,aslongasitispos-
sible to determine the expected work item to exit a queue from thecurrentstateofaqueue,ourapproachcansupporttheassessmentof
thatparticularqueuingdiscipline.notethatthisholdsforalmostany
queuingdisciplineprovidedtherequiredcontextualdataisavailable.
7. conclusion and future work
thispaperdescribedanovelapproachtodeterminingthedegree
of conformance of the behaviour of a resource to some prescribed
queuing discipline related to the prioritisation of work items. theapproach makes use of transactional data recorded in event logs tolearn the prioritisation orders of resources when undertaking work.
theapproachhasbeengeneralisedtoalsolearntheprioritisationorder
of cases and activities. the approach supports well-known queuingdisciplinesincludingfifo,lifo,andpriority.throughtheevaluation
of our approach, it is also interesting to note that lifo behaviours
may simply be a consequence of resources choosing work items atrandom. the proposed approach has been implemented as a plug-in
of the open-source process mining framework, prom. the approach
was evaluated using a range of synthetic and real life datasets. thepaper also discussed the ﬁndings from a case study conducted at an
australian insurance company which shows the usefulness of our
approach in practice. the main future work in this regard involvesimprovingthewayinwhichscoreforaparticularqueuingdisciplineis calculated to take into account the situation where two or more
work items enter or exit a queue at the same time and where there
is only one transaction lifecycle recorded for each work item (thelimitations of our current approach as mentioned in section 4).
acknowledgements
this work is partly supported by the arc discovery cost-aware
business process managementgrant (dp120101624).
references
[1]m. weske, business process management: concepts, languages, architectures,
springer-verlag, berlin,2007.
[2]t. pyzdek, p.a. keller,the six sigma handbook, mcgraw-hilleducation. 2014.
[3]d. gross, fundamentals ofqueueing theory, john wiley& sons. 2008.
[4]z. feldman, a. mandelbaum, w.a. massey, w. whitt, staﬃng of time-vary-
ing queues to achieve time-stable performance, management 54 (2) (2008)
324–338.
[5]a. li, w. whitt, j. zhao, staﬃng to stabilize blocking in loss models withtime-varying arrival rates, probab. eng. inf. sci. 30 (2) (2016)185–211.
[6]y. liu, w. whitt, stabilizing customer abandonment in many-server queues
with time-varying arrivals, oper. res. 60(6) (2012) 1551–1564.
[7]w. whitt, stabilizing performance in a single-server queue with time-varyingarrival rate, queueing syst. 81(4) (2015) 341–378.
[8]w. mélangea, j. walraevensa, d. claeysa, b. steyaerta, h. bruneela, the impactof a global fcfs service discipline in a two-class queue with dedicated servers,
comp. oper.res. 71(2016) 23–33.92 s. suriadi et al. / decision support systems 100 (2017) 77–92
[9]j.walraevensa,t.maertens,h.bruneel,asemi-preemptivepriorityscheduling
discipline: performance analysis, eur.j. oper. res. 224(2013)324–332.
[10]h.m. asif, e.-s.m. el-alfy, performance evaluation of queuing disciplines formulti-classtraﬃcusingopnetsimulator,mmacte’05, wseas.2005, pp.1–6.
[11]o. rose, the shortest processing time first (sptf) dispatch rule and some
variants in semiconductor manufacturing, winter simulation conference, vol.
2, 2001. pp. 1220–1224.
[12]j. nzouonta, t. ott, c. borcea, impact of queuing discipline on packet deliverylatencyin ad hoc networks, perform. eval. 66(12) (2009) 667–684.
[13]r. rönngren, r. ayani, a comparative study of parallel and sequential priorityqueue algorithms, acm trans.model. comput. simul. 7(2) (1997) 157–209.
[14]w.vanderaalst,processmining:discovery,conformanceandenhancementof
business processes, springer-verlag, berlin,2011.
[15]j. bergs, d. vandijck, o. hoogmartens, p. heerinckx, d.v. sassenbroeck, b.depaire, w. marneffe, s. verelst, emergency department crowding: time to
shifttheparadigmfrompredictingandcontrollingtoanalysingandmanaging,
int. emerg. nurs. 24 (2016)74–77.
[16]c.fernandez-llatas,j.-m.benedi,j.m.garcia-gomez,v.traver,processminingforindividualizedbehaviormodelingusingwirelesstrackinginnursinghomes,sensors 13(11)(2013)15434–15451.
[17]m. song, w. van der aalst, towards comprehensive support for organizationalmining, decis. support. syst. 46(1) (2008) 300–317.
[18]j. nakatumba, w. van der aalst, analyzing resource behavior using processmining, proceedings of bpi’2009, vol. 43of lnbip, springer. 2010, pp. 69–80.
[19]z. huang, x. lu, h. duan, resource behavior measure and application inbusinessprocessmanagement,expertsystemswithapplications39(7)(2012)6458–6468.
[20]a. pika, m. wynn, c. fidge, a. ter hofstede, m. leyer, w. van der aalst, anextensible framework for analysing resource behaviour using event logs,
caise, vol. 8484of lncs, springer. 2014, pp. 564–579.
[21]j.e. hopcroft, introduction to automata theory, language, and computation,addison wesley.2001.
[22]c.w. günther, e. verbeek, xes standard deﬁnition, 2nd ed., eindhoven
university of technology, thenetherlands, march 2014.
[23]s. suriadi, c. ouyang, w. van der aalst, a.h.m. ter hofstede, event intervalanalysis: why do processes take time? decis.support. syst. 79(2015) 77–98.
[24]c. droke, moving averages simpliﬁed, marketplace books. 2001.
[25]j.bose,w.vanderaalst,i.zliobaite,m.pechenizkiy,dealingwithconceptdrifts
inprocessmining,ieeetrans.neuralnetw.learn.sys.25(1)(2014)154–171.
[26]w. van der aalst, m. schonenberg, m. song, time prediction based on process
mining, inf. syst. 36(2) (2011) 450–475.
[27]w. gaaloul, s. alaoui, k. baina, c. godart, mining workﬂow patterns throughevent-data analysis, the 2005 symposium on applications and the internet
workshops, ieee. 2005, pp. 226–229.
[28]m. de leoni, w. van der aalst, data-aware process mining: discovering deci-sions in processes using alignments, sac’13, acm, new york, ny, usa, 2013,
pp. 1454–1461.
[29]w. van der aalst, h. reijers, m. song, discovering social networks from eventlogs, comput. supported coop. work (cscw) 14 (6) (2005) 549–593.
[30]a. kim, j. obregon, j.-y. jung, constructing decision trees from process logs for
performerrecommendation, bpmworkshops lnbip (171)(2014) 224–236.
[31]a. senderovich, m. weidlich, a. gal, a. mandelbaum, mining resourcescheduling protocols, bpmvol. 8659of lncs, springer. 2014, pp. 200–216.
[32]a.senderovich,m.weidlich,a.gal,a.mandelbaum,queuemining-predictingdelaysinserviceprocesses,caise2014,vol.8484oflncs, springer.2014, pp.
42–57.
[33]a.senderovich,s.j.j.leemans,s.harel,a.gal,a.mandelbaum,w.vanderaalst,
discovering queues from event logs with varying levels of information, in:
reichert, m. reijers, h. (eds.) business process management workshops. bpm
2015. lecture notes in business information processing, vol. 256, springer
2016,
[34]a.senderovich,matthiasweidlich,avigdorgal,a.mandelbaum,queueminingfordelaypredictioninmulti-classserviceprocesses,inf.syst.53(2015)278–295.
[35]a.rozinat,r.s.mans,m.song,w.vanderaalst,discoveringsimulationmodels,
inf. syst. 34(3) (2009) 305–327.
[36]m. wynn, a. rozinat, w. der aalst, a.h. ter hofstede, c. fidge, process miningand simulation, modernbusiness processautomation, springer. 2010,
[37]w. van der aalst, business process simulation survival guide, handbook onbusiness process management 1, springer. 2014, pp. 337–370.
[38]n. martin, b. depaire, a. caris, the use of process mining in business process
simulation model construction - structuring the ﬁeld., bus. inf. sys. eng. 58 (1)
(2016)73–87.
[39]r.
akhavian, a.h. behzadan, evaluation of queueing systems for knowl-
edge-based simulation of construction processes, automation in construction47(2014)37–49.
[40] i.adan,j.resing,queueingsystems, eindhoven.2002, http://www.win.tue.nl/
iadan/queueing.pdf .
[41]b. avi-itzhak, h. levy, on measuring fairness in queues, advances in applied
probability36 (3) (2004) 919–936.
[42]b.avi-itzhak,h.levy,d.raz,aresourceallocationqueueingfairnessmeasure:properties and bounds, queueing syst 56(2) (2007) 65–71.
[43]h. maghsoudlou, m.r. kahag, s.t.a. niaki, h. pourvaziri, bi-objectiveoptimization of a three-echelon multi-server supply-chain problem in con-
gested systems: modeling and solution, comput. ind. eng. 99 (2016) 41–62.[44]x. shen, x. wang, improving the health-care delivery process at hospital
emergency services by a better use of inpatient bed information, electron.
commer. res. appl. 14(2015) 14–22.
[45]b.l.p. rosén, measuring effective capacity in an emergency department, j.
health organ. manag. 30 (1) (2016) 73–84.
[46]s. creemers, m. lambrecht, modeling a hospital queueing network, queueing
networks: a fundamental approach, international series in operations
research and management sciences springer. 2011, chap. 18 .
[47]s. saghaﬁan, g. austin, s.j. traub, operations research/management contribu-tionstoemergencydepartmentpatientﬂowoptimization:reviewandresearch
prospects, iie trans. healthcare syst. eng. 5 (2) (2015) 102–123.
[48]l. green, queueing analysis in healthcare, patient flow: reducing delay in
healthcare delivery, springer. 2006. chap. 10
[49]m.kumar,s.c.sharma,priority aware longest job first (pa-ljf) algorithm forutilizationoftheresourceincloudenvironment,indiacom,2016.pp.415–420.
dr. suriadi suriadi is a senior research fellow at queensland university of
technology. before this, from 2014 to 2016, he was a lecturer within the college
of sciences of massey university, new zealand. he obtained his phd degree in thediscipline of information security in late 2010 from the queensland university oftechnology (qut). since 2007, he has been involved in a number of research projects
in the area of information security. from 2011 to late 2014, he was a research fellow
withinthebusinessprocessmanagementdisciplineatqueenslanduniversityoftech-nology,brisbane,australia.heenjoysworkingincollaborative,cross-domainresearchprojects that allow the application of research outcomes to address real-world prob-lems. his main research interests are in the area of process mining and informationsecurity.
dr. moe t. wynn is a senior lecturer in the ﬁeld of business process management
(bpm)withintheschoolofinformationsystemsatqueenslanduniversityoftechnol-
ogy. her research interests include process automation, process mining, comparativeprocess analytics and cost-aware business process management. she has publishedover 60 refereed research papers. her work appeared in well-known journals in theﬁeldincluding information systems, information sciences,dataandknowledgeengi-neering, information and software technology, formal aspects of computing, journal
ofcomputerandsystemsciences,andtransactionsonpetrinetsandothermodelsof
concurrency. her work is supported by over aud $3.3 million in grant funding in thepast ﬁve years.
dr. jingxin xu received his bachelors degree in telecommunications engineering
from xidian university, xian, china, in 2008, masters degree in information technol-
ogy from the queensland university of technology (qut), brisbane, qld, australia,in 2010, and phd degree in signal processing from qut, in 2014. he is currently apostdoctoral research fellow with qut, investigating process mining techniques forbusiness processmanagement.
prof.dr.ir. wil van der aalst is a full professor of information systems at the tech-
nische universiteit eindhoven (tu/e), the netherlands. he is also the academic
supervisor of the international laboratory of process-aware information systems ofthe national research university, higher school of economics in moscow. moreover,since 2003 he has a part-time appointment at queensland university of technol-ogy (qut). at tu/e he is the scientiﬁc director of the data science centre eindhoven(dsc/e). wil van der aalst has published more than 200 journal papers, 20 books
(as author or editor), 450 refereed conference/workshop publications, and 60 book
chapters. many of his papers are highly cited (he is one of the most cited computerscientistsintheworldandhasanh-indexof131accordingtogooglescholar)andhisideas have inﬂuenced researchers, software developers, and standardization commit-tees working on process support. in 2012, he received the degree of doctor honoriscausa from hasselt university. in 2013, he was appointed as distinguished univer-sity professor of tu/e and was awarded an honorary guest professorship at tsinghuauniversity.heisalsoamemberoftheroyalhollandsocietyofsciencesandhumani-ties (koninklijke hollandsche maatschappij der wetenschappen) and the academy of
europe (academia europaea).
prof.dr. arthur ter hofstede is a professor in the information systems school in
the science and engineering faculty, queensland university of technology, brisbane,
australia, where he is head of the business process management discipline. he is
also a professor in the information systems group of the department of industrialengineering of the technische universiteit eindhoven (tu/e). his research interestsare in the areas of business process automation and process mining.