see discussions, st ats, and author pr ofiles f or this public ation at : https://www .researchgate.ne t/public ation/353809980
ocel: a standard for object-centric event logs
conf erence paper  · july 2021
doi: 10.1007/978-3-030-85082-1_16
citations
3reads
237
4 author s, including:
some o f the author s of this public ation ar e also w orking on these r elat ed pr ojects:
conf ormanc e checking appr oximation  view pr oject
prais: pr ocess- and r esour ce-aware inf ormation syst ems view pr oject
gyunam p ark
rwth aachen univ ersity
12 publica tions    62 citations    
see profile
wil v an der aalst
rwth aachen univ ersity
1,357  publica tions    81,806  citations    
see profile
all c ontent f ollo wing this p age was uplo aded b y gyunam p ark on 23 sept ember 2021.
the user has r equest ed enhanc ement of the do wnlo aded file.ocel: a standard for object-centric event
logs
anahita farhang ghahfarokhi1, gyunam park1, alessandro berti1;2, and
wil m.p. van der aalst1;2
1process and data science chair, rwth aachen university, aachen, germany
2fraunhofer institute for applied information technology, sankt augustin, germany
ffarhang,gnpark,a.berti,wdaalst g@pads.rwth-aachen.de
abstract. [14]the application of process mining techniques to real-life
information systems is often challenging. considering a purchase to pay
(p2p) process, several case notions such as order and item are involved,
interacting with each other. therefore, creating an event log where events
need to relate to a single case (i.e., process instance) leads to convergence
(i.e., the duplication of an event related to dierent cases) and divergence
(i.e., the inability to separate events within the same case) problems. to
avoid such problems, object-centric event logs have been proposed, where
each event can be related to dierent objects. these can be exploited
by a new set of process mining techniques. this paper describes ocel
(object-centric event log), a generic and scalable format for the storage
of object-centric event logs. the implementation of the format can use
either json or xml, and tool support is provided.
keywords: object-centric event logs ·object-centric process mining
1 introduction
process mining is a eld of data science bridging the gap between model-based
analysis and data-oriented analysis. process mining techniques include process
discovery techniques to discover process models describing the event log, con-
formance checking algorithms that compare process models with event logs, and
model enhancement methods that enrich the process model with some informa-
tion inferred from the event log [12].
event logs are the starting points to apply process mining techniques. several
approaches have been proposed towards having a standard for event logs that
are summarized in figure 1. the most successful one is xes, which has been
accepted as the ieee standard in 2014 for the storage of (traditional) event
logs [13]. numerous event logs have been recorded using the xes, and several
approaches have focused on extraction of complex data to obtain xes event logs
[3,2,11]. however, although the xes standard can capture the behavior of the
events with a single case notion, in real processes such as o2c (order to cash)
supported by erp systems, multiple case notions are involved, and xes cannot
record that.2 anahita farhang ghahfarokhi et al.
fig. 1. a timeline demonstrating the proposed standards to store event data.
in extracting an event log from some information system, challenges such
as convergence (an event is related to multiple cases) and divergence (repeated
execution of the activities with the same case notion) may occur. these problems
will aect the results of process mining techniques such as process discovery
and lead to not real results. it is not possible to avoid completely from these
problems; however, it is worthwhile to consider them in process mining analysis.
to describe these challenges, consider the example shown in figure 2 where
we have two object types, i.e., order and item, and three activities, i.e., place
order ,check item , and pack item . to apply process mining techniques, we have
two possible case notions (i.e, order anditem). for example, here, there are 100
orders and 1000 items . each item refers to one order andplace order is executed
perorder . so it is executed 100 times.
{convergence : suppose that we want to use item as the case notion and place
order as the activity. the number of items is 1000; therefore, in applying
traditional process mining techniques, we need 1000 times place order instead
of 100. this is related to convergence, where an event includes multiple cases.
{divergence : if we use order as the case notion and consider pack item as an
activity, for the same case notion we will have many pack item events. each
check item should be followed by the pack item . however, we cannot distin-
guish between the dierent items within an order , and random arrangement
may exist between these two activities. this is called divergence challenge,
where the order between two activities is lost.
object-centric event logs have been proposed to address the above challenges
in the extraction of process-related information from information systems. most
of the studies in object-centric process mining is focused on process discovery
such as artifact-centric modeling [4,9]. some studies have been done on the ex-
traction of object-centric event logs from information systems [10,1,5,6]. this
also includes contributions related to the storage format. for example, in [6]
fig. 2. a fragment of the relationships between case notions (i.e., order anditem) and
activities (i.e., place order ,check item ), and pack item .ocel: a standard for object-centric event logs 3
table 1. informal representation of the events of an ocel.
id activity timestamp order item package customer resource price
e1 place order 2020-07-09 08:20:01.527+01:00 fo1gfi1,i2,i3g; fc1galessandro 200.0
e2conrm order 2020-07-10 09:23:01.527+01:00 fo1g ; ; ; anahita 302.0
e3check availability 2020-07-10 17:10:08.527+01:00 fo1gfi1g ; ; gyunam 125.0
::: ... ... ::: ::: ::: ::: ... ...
table 2. informal representation of the objects of an ocel.
id type product color age job
i1item ipod silver
c1customer young teacher
... ... ... ... ... ...
authors propose a meta-model, called openslex, that integrates process and
data perspectives. it can generate dierent views from the database exibly. new
storage formats such as xoc have been proposed as for object-centric event logs
[8,7]. an xoc log contains a list of events. each event is characterized by some
attributes, by a list of related objects, and by the state of the object model.
however, this format suers from performance issues since the size of the event
log scales badly with the number of events and objects related to the process.
moreover, the attributes of an object are replicated with all the events that are
related to such an object.
in this paper, we provide a new format (ocel) to store object-centric event
logs to address these limitations, focusing on its specication, serialization in
json and xml formats, and tool supports. in http://ocel-standard.org/ ,
the formal denition of ocel standard is available along with the detailed
conceptualization and specication.
the rest of the paper is organized as follows. section 2 species the ocel
format. section 3 proposes an implementation, tool support, and a set of event
logs for the ocel format. finally, section 4 concludes the paper.
2 specication
this section introduces the specication of ocel based on its formal denition
introduced in http://ocel-standard.org/ . based on the denition of ocel,
an event log consists of information about events and objects involved in the
events. an event contains an identier, an activity, a timestamp, some additional
attributes, and is related to some objects. the events are ordered based on the
timestamp. the objects can have properties themselves. a sample of the informal
representation of ocel is shown in tables 1 and 2. here, we introduce the meta-
model for the specication of ocel.
the meta-model for the specication of ocel is shown in figure 3 as a uml
class diagram. the log, event, and object classes dene the high-level structure
of logs. the description for each class is as follows:
{ log: the log class contains sets of events and objects. a log contains global
elements such as global log, global event, and global object elements. first,
a global log element contains the version, attribute names, and object types4 anahita farhang ghahfarokhi et al.
that compose the log. second, a global event element species some default
values for the elements of events. finally, a global object element species
some default values for the elements of objects.
{ event: an event represents an execution record of an underlying business
process. it associates multiple elements (e.g., an identier, an activity, a
timestamp, and relevant objects) and possibly optional features (e.g., event
attributes). for example, each row in table 1 shows an event.
{ object: an object indicates the information of an object instance in the
business process. it contains required (e.g., type) and optional (e.g., color
and size) elements. for example, each row in table 2 shows an object.
the element class species the elements of the high-level classes. it is com-
posed of a key and value(s). the key is string-based, whereas the value may be
of type string ,timestamp ,integer ,oat, and boolean .
an element can be nested, i.e., a parent element can contain child elements.
among nested elements we have lists and maps .
we can state some advantages in comparison to the existing formats for the
storage of object-centric event logs:
{in comparison to tabular formats (such as csvs), the information is strongly
typed.
{support to lists and maps elements, in comparison with existing formats
(xoc, tabular formats, openslex) that do not properly support them.
{decoupling of the attributes at the object level from the event level. this
helps to avoid replication of the same information, in comparison to the xoc
format.
in the next section, we will propose the serialization of ocel based on the
denition, which is fully described in the website of ocel and the tool support.
3 serialization and tool support
the specication has been serialized in both the json and xml formats. an
example of json format is shown in listing 1.1. this example shows a part of
fig. 3. the uml class diagram for the complete meta-model for the ocel format.ocel: a standard for object-centric event logs 5
the data, describing event place order and object i1. \invalid " denotes the
default values to be used when activity and type information is missing in event
and object, respectively. furthermore, we provide tool support for the ocel,
for both serializations, for the python3and java programming language4. in
our tool, the user can import and export ocels in both serializations and
validate the json/xml log les according to the serialization schema. some
other features, such as attening ocels into traditional event logs, are also
possible [1]. to show more examples of ocel, we have provided some non-
trivial ocels related to the sap ides system in both formats.
the current implementations load the entire object-centric event log in mem-
ory. this could represent a problem when managing big logs. however, the json
implementation of the standard could be transferred to a document database
such as mongodb or elasticsearch in a straightforward way.
listing 1.1. json-ocel example.
f" o c e l : global −log " : f
" o c e l : v e r s i o n " : "1.0" ,
" o c e l : attribute −names " : [
" re sourc e " , " p r i c e " , " product " , " c o l o r " , " age " ," job " ] ,
" o c e l : object −types " : [
" customer " , " item " , " order " , " package " ]
g,
" o c e l : global −event " : f
" o c e l : a c t i v i t y " : " invalid "
g,
" o c e l : global −object " : f
" o c e l : type " : " invalid "
g,
" o c e l : events " : f
"e1 " : f
" o c e l : a c t i v i t y " : " p l a c e o r d e r " ,
" o c e l : timestamp " : "2020 −07−09 08:20:01.527+01:00" ,
" o c e l : omap " : [ " i 1 " , "o1 " , " i 2 " , " i 3 " , "c1 " ] ,
" o c e l : vmap " : f" res ource " : " alessandro " , " p r i c e " : 200.0 g
g g ,
" o c e l : o b j e c t s " : f
" i 1 " : f
" o c e l : type " : " item " ,
" o c e l : ovmap " : f" c o l o r " : s i l v e r , " product " : ipad g
g,g g
4 conclusion
in this paper, we presented ocel as a format for storing object-centric event
logs, which overcomes the limitations of the previous proposals (e.g., xoc and
parquet). the format is implemented in either json and xml. an object is
mapped to an entity of the log. so, each event log contains a list of objects, and
the properties of the objects are written only once in the log (and not replicated
for each event). furthermore, tool support is provided (python and java).
some challenges remain open. the format does not provide consistency checks
based on advanced constraints (such as the number of objects per event). the
3standalone library; https://github.com/ocel-standard/ocel-support
4prom 6.10 nightly build; package: ocelstandard6 anahita farhang ghahfarokhi et al.
main challenge lies in the adoption of object-centric process mining techniques
such as object-centric process discovery. moreover, the support for streams in
the context of object-centric event logs is missing. furthermore, case studies are
needed to illustrate the usage of ocel in real-world processes.
acknowledgments
we thank the alexander von humboldt (avh) stiftung for supporting our research. funded by the
deutsche forschungsgemeinschaft (dfg, german research foundation) under germany's excellence
strategy{exc-2023 internet of production { 390621612.
references
1. alessandro berti and wil m. p. van der aalst. extracting multiple viewpoint
models from relational databases. in data-driven process discovery and analysis
- 8th ifip wg 2.6 international symposium , volume 379, 2019.
2. diego calvanese, tahir emre kalayci, marco montali, and ario santoso. obda
for log extraction in process mining. in reasoning web summer school , 2017.
3. diego calvanese, marco montali, alifah syamsiyah, and wil m. p. van der aalst.
ontology-driven extraction of event logs from relational databases. in international
conference on business process management , 2016.
4. david cohn and richard hull. business artifacts: a data-centric approach to
modeling business operations and processes. ieee data eng. bull. , 32, 2009.
5. e gonz alez l opez de murillas, ge hoogendoorn, and hajo a reijers. redo log
process mining in real life: data challenges & opportunities. in international con-
ference on business process management , 2017.
6. e gonzalez lopez de murillas. process mining on databases: extracting event
data from real-life data sources. 2019.
7. guangming li, renata medeiros de carvalho, and wil m. p. van der aalst. au-
tomatic discovery of object-centric behavioral constraint models. in international
conference on business information systems , volume 288, 2017.
8. guangming li, eduardo gonz alez l opez de murillas, renata medeiros de car-
valho, and wil m. p. van der aalst. extracting object-centric event logs to support
process mining on databases. in information systems in the big data era - caise
forum , volume 317, 2018.
9. erik hj nooijen, boudewijn f van dongen, and dirk fahland. automatic discov-
ery of data-centric and artifact-centric processes. in international conference on
business process management . springer, 2012.
10. ana pajic simovi c, sladan babarogi c, and ognjen panteli c. a domain-specic
language for supporting event log extraction from erp systems. in international
conference on computers communications and control . ieee, 2018.
11.alvaro valencia-parra, bel en ramos-guti errez, angel jesus varela-vaca, mar a
teresa g omez l opez, and antonio garcia bernal. enabling process mining in air-
craft manufactures: extracting event logs and discovering processes from complex
data. in international conference on business process management , 2019.
12. wil m. p. van der aalst. process mining . springer-verlag berlin heidelberg, 2016.
13. h. m. w. verbeek, joos c. a. m. buijs, boudewijn f. van dongen, and wil m. p.
van der aalst. xes, xesame, and prom. in information systems evolution -
caise forum , volume 72, 2010.ocel: a standard for object-centric event logs 7
14. xinwei zhang, yaoci han, wei xu, and qili wang. hoba: a novel feature engi-
neering methodology for credit card fraud detection with a deep learning architec-
ture. inf. sci. , 557:302{316, 2021.
view publication statsview publication stats