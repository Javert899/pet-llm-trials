perturbing event logs to identify cost reduction opportunities:
a genetic algorithm-based approach
w.z. low, j. de weerdt, m.t. wynn, a.h.m. ter hofstede, w.m.p. van der aalst, and s. vanden broucke
abstract ‚Äî organisations are constantly seeking new ways
to improve operational efÔ¨Åciencies. this research study in-
vestigates a novel way to identify potential efÔ¨Åciency gains
in business operations by observing how they are carried
out in the past and then exploring better ways of executing
them by taking into account trade-offs between time, cost and
resource utilisation. this paper demonstrates how they can be
incorporated in the assessment of alternative process execution
scenarios by making use of a cost environment. a genetic
algorithm-based approach is proposed to explore and assess
alternative process execution scenarios, where the objective
function is represented by a comprehensive cost structure that
captures different process dimensions. experiments conducted
with different variants of the genetic algorithm evaluate the
approach‚Äôs feasibility. the Ô¨Åndings demonstrate that a genetic
algorithm-based approach is able to make use of cost reduction
as a way to identify improved execution scenarios in terms
of reduced case durations and increased resource utilisation.
the ultimate aim is to utilise cost-related insights gained from
such improved scenarios to put forward recommendations for
reducing process-related cost within organisations.
i. i ntroduction
business process improvement is concerned with iden-
tifying process redesign opportunities bearing in mind the
potential impact that these redesign actions may have on
different dimensions such as time, cost, quality and Ô¨Çexibil-
ity [15][16]. by having detailed insights into how business
operations were carried out in the past, it is possible to
explore whether these same operations can be performed
better (e.g., can cases be completed faster?, can operational
cost be reduced?, can the quality of the outcomes be im-
proved?). this paper presents a technique to intelligently
search for alternative business process execution scenarios
with the aim of ‚Äúimproving the history‚Äù. the main objective
is to discover execution scenarios which are cheaper (better)
than the original (baseline) scenario to gain insights for future
redesign activities.
the starting point of our cost-informed process improve-
ment approach is an event log that contains a detailed record
of business operations over a certain time period. a number
of key characteristics of the process are kept the same (such
w.z. low, m.t. wynn, a.h.m. ter hofstede, and w.m.p. van der aalst
are with queensland university of technology (qut), australia (emails:
w4.low@qut.edu.au, m.wynn@qut.edu.au, a.terhofstede@qut.edu.au).
a.h.m. ter hofstede and w.m.p. van der aalst are also with
technische universiteit eindhoven (tu/e), the netherlands (email:
w.m.p.v.d.aalst@tue.nl).
j. de weerdt and s. vanden broucke are with ku
leuven, belgium (emails: jochen.deweerdt@kuleuven.be,
seppe.vandenbroucke@kuleuven.be).
this work is supported by australian research council (arc) discovery
grant with the grant number 120101624as the activities performed and their durations, and the arrival
times of cases), while other elements within the log (such as
resource allocations, ordering and start times of activities) are
adjusted in order to explore different execution scenarios. by
making use of a generic cost structure that assigns cost to
different trade-offs, the cost of various execution scenarios
are computed and compared.
the contribution of this paper is the development of a
genetic algorithm-based approach to facilitate the exploration
of different execution scenarios. optimisation strategies are
deÔ¨Åned to explore cost-optimal execution scenarios that take
into account trade-offs from multiple process dimensions.
the remainder of this paper is organised as follows. the
related work is reviewed and discussed in section ii. in
section iii, a cost-informed process improvement approach is
proposed with the facilitation of a motivating example. next,
the genetic algorithm-based solution approach is discussed
in section iv . section v discusses the experimental results.
section vi concludes this paper and states potential future
work.
ii. r elated work
within the Ô¨Åeld of business process management (bpm),
the concepts of business process redesign (bpr) and im-
provement (bpi) are highly relevant to researchers and prac-
titioners. a number of case studies have looked into creating
a framework to list and classify best practices to facilitate
bpr within organisations [15][17][19]. in [16], a number of
bpr best practices and approaches are provided. bpr has
also been applied and evaluated via case studies carried out in
organisations from various Ô¨Åelds [12][31]. an approach that
uses performance measures to quantify the impact and trade-
offs of business process redesign actions on all dimensions
of workÔ¨Çow performance has also been developed [11].
bpr and bpi have an overlapping interest with operations
research, which is deÔ¨Åned as ‚Äúa scientiÔ¨Åc approach to deci-
sion making that seeks to best design and operate a system,
usually under conditions requiring the allocation of scarce re-
sources‚Äù [26]. this normally involves the use of one or more
mathematical models, where understanding of a situation
could be further promoted by mathematical representations of
an actual situation [26]. an optimisation problem describes
the model that seeks to Ô¨Ånd values of the decision variables
that optimise an objective function. there are a number
of optimisation problem categories, such as shop schedul-
ing problems [10] and resource-constrained (multi-) project
scheduling problems (rcpsp/rcmpsp) [3][6]. these can beaddressed by, but not limited to, techniques such as simulated
annealing [1] and genetic algorithms [2].
as stated by van der aalst [22], scheduling problems are
similar to business process optimisation problems, as both
disciplines aim to optimise the allocation of resources to
tasks. in [25], the topics of business process modelling,
analysis, and optimisation are reviewed. optimisation has
been applied to the design of business processes using genetic
algorithms [24]. the effects that resource behaviours and
relationships have on resource allocations and the business
process have been studied in [8][14]. various methods to
schedule or assign resources based on their properties (for
example, performance, compatibility, skill sets, and many
more) have also been investigated [4][5][13][17][18]. in
addition, [9] uses optimisation techniques as an attempt to
optimise resource allocation in business processes.
optimality of business processes is determined by mul-
tiple, often conÔ¨Çicting objectives [7]. in [20], reduction of
cost and Ô¨Çow time is used as the goal of a business process
optimisation approach. xu et al. looked into a number
of variants where business processes were optimised using
multiple objectives [27][28][29]. in [28], the Ô¨Çow time and
the cost of business processes were optimised separately.
the structural features of business processes is then explored
to enable further utilisation of resources. different heuristic
scheduling strategies that take into account resource avail-
ability constraints such as resource slots, resource capabili-
ties, process task dependencies, and instance deadlines have
also been studied [29]. nonetheless, cost was not taken into
account in this work. two business process resource planning
methods, where deadline and resource utilisation trade-offs
were considered, was provided in [27]. although cost is
taken into account (but is not a priority), resource availability
and eligibility constraints are not taken into account for
optimisation.
in contrast to the works discussed above, this paper:
identiÔ¨Åes the Ô¨Åxed and variable parts of an event log;
identiÔ¨Åes the cost-optimal execution scenarios by chang-
ing process history (event log) and learning from it; and
incorporates different cost-related dimensions into a cost
structure, allowing more sensible cost-based trade-offs
within the genetic algorithm.
iii. c ost-informed logperturbation
the motivation for this research is to identify a more
efÔ¨Åcient execution scenario, where cases Ô¨Ånish earlier and
the utilisation of the resources is more optimal. we apply
the notion of cost towards these time and resource efÔ¨Åciency
measures. alternative execution scenarios are explored where
a scenario with lower cost represents a more efÔ¨Åcient sce-
nario.
in order to explore different execution scenarios, the
identiÔ¨Åcation and separation of Ô¨Åxed and variable parts of
a typical event log is the Ô¨Årst step in this approach. different
execution scenarios are explored by manipulating the variable
parts of the event log. a cost structure is then deÔ¨Ånedas an objective function to determine the Ô¨Åtness of the
execution scenarios in terms of process-related cost, taking
into consideration cost-informed trade-offs between multiple
aspects such as case durations and resource utilisation. the
cost functions within the cost structure can be conÔ¨Ågured,
and further customised by organisations. an execution sce-
nario that is infeasible is deÔ¨Åned as unsafe , for example,
a resource does not have the authority to carry out a task.
aviolation cost is used to penalise the execution scenarios
that are unsafe. execution scenarios that are more cost-
efÔ¨Åcient are then identiÔ¨Åed and analysed. fig. 1 illustrates the
the proposed approach for the generation of cost-informed
alternative scenarios.
fig. 1. overview of the cost-informed process improvement approach.
1) event log: an event log is a data store that records
potentially vast amounts of process events, where event-
related information such as resourcing decisions, timestamp
of the events, or data elements are stored [21][23]. table i
illustrates an event log fragment of the example car insurance
claim process. as we are seeking improvements with regard
to execution time and resource allocation, the historical
event attributes that inÔ¨Çuence timing and resource allocation
are considered as the variable part (i.e. binding). all other
historical attributes, such as case properties are kept Ô¨Åxed,
thus part of what we call the abstract event log.
2) abstract event log: an abstract event log deÔ¨Ånes the
event log attributes that will remain Ô¨Åxed, which include
the collection of cases, activities, tasks, and case or activity
properties. activities are mapped to their corresponding case,
task, and duration. arrival times of cases and the order of
activities within a case are also deÔ¨Åned in the abstract event
log.
3) binding and concrete event log: a binding deÔ¨Ånes
the variable component of an event log, where different exe-
cution scenarios can be generated by modifying information
such as allocation of resources to activities and timestamps
of those activities. a binding consists of a set of resources
and their mapping onto each activity. the start and end times
of activities are part of a binding as well, where:
an activity must start after its case arrival time;
an activity‚Äôs end time must follow after the activity‚Äôs
start time; and
an activity cannot start when its preceding activity is
not completed yet.table i
apossible fragment of the car insurance claim event log in chronological order .
case id activity timestamp transition type resource property (damage type) ...
1 lodge claim 10/06/13 09:31:00 start ic1 windscreen ...
1 lodge claim 10/06/13 09:39:00 complete ic1 windscreen ...
1 review claim 10/06/13 09:42:00 start ic5 - ...
2 lodge claim 10/06/13 09:45:00 start ic1 theft ...
2 lodge claim 10/06/13 09:50:00 complete ic1 theft ...
2 review claim 10/06/13 09:55:00 start ic3 - ...
1 review claim 10/06/13 10:00:00 complete ic5 - ...
2 review claim 10/06/13 10:10:00 complete ic3 - ...
... ... ... ... ... ... ...
table ii
an abstract event log (left )and binding (right )that corresponds to the car insurance claim event log in table i.
abstract event log binding
id case id activity property (damage type) duration preceding activity succeeding activity id start time complete time resource
341 1 lodge claim windscreen 00:08:00 fg f review claim g 341 10/06/13 09:31:00 10/06/13 09:39:00 ic1
342 1 review claim - 00:18:00 flodge claim g f appoint assessor g 342 10/06/13 09:42:00 10/06/13 10:00:00 ic5
343 2 lodge claim theft 00:05:00 fg f review claim g 343 10/06/13 09:45:00 10/06/13 09:50:00 ic1
344 2 review claim - 00:15:00 flodge claim g f appoint assessor g 344 10/06/13 09:55:00 10/06/13 10:10:00 ic3
... ... ... ... ... ... ... ... ... ... ...
the combination of an abstract event log and a binding
forms a concrete event log . table ii illustrates the abstract
event log and the binding that corresponds to the event log
in table i. by changing the information in the bindings,
alternative execution scenarios can be produced.
4) safe bindings: a binding is considered safe iff:
a resource works on at most one activity at one point
in time;
a resource involved in the execution of an activity
must be allowed or authorised to perform it (resource
authorisations are deÔ¨Åned in the cost structure); and
the order of the activities within a case is preserved (ac-
tivities belonging to different cases may be reordered).
aviolation is a breach of any of the rules above. an un-
safe binding contains one or more violations, and a violation
cost function is used to penalise these unsafe bindings.
5) resource utilisation: resource utilisation is deÔ¨Åned as
the time where the resource is busy/working on an activity
within a speciÔ¨Åed time frame. the horizon speciÔ¨Åes the time
frame that is used to compute the resources‚Äô utilisations and
is deÔ¨Åned within the cost structure. if the binding is safe,
all resource utilisations will be between zero and one. the
resources‚Äô cost rates are determined based on their utilisation.
6) cost structure: a cost structure represents a generic
data model that stores a set of cost functions for process-
related cost computations. organisations can deÔ¨Åne functions
to calculate the cost of a case, the cost of an activity, and
the resource utilisation cost. to compute the total cost of a
concrete event log, the cost of cases, activities, and resources
are added together. the properties that contributes to the
three cost functions are listed below:
case costs are computed by taking into account case
durations and other case properties;
activity costs are calculated by aggregating the cost of
properties such as the tasks, the resource-task combi-
nation, the activity-related durations, and the activity-
related properties; and
resource costs are computed based on the cost of
resources, the cost-rate (per duration) of resources, and
the cost-rate of resources for a certain utilisation rate.table iii
tasks and the roles that are allowed to perform them .
roles allowed tasks
insurance clerks (ic) lodge claim, review claim, appoint assessor, request assessment
insurance assessors (iass) assess car, assess customer
insurance managers (im) decide claim (allowed to execute all tasks, although undesired)
insurance accountants (iacc) approve, reject
this cost structure is used as a basis of the objective func-
tion within the proposed genetic algorithm-based solution.
a simpliÔ¨Åed car insurance claim process is used as a
running example. the process is simulated using cpn tools
in order to obtain an event log. fig. 2 depicts a bpmn model
illustrating the car insurance claim process.
fig. 2. a bpmn model illustrating the car insurance claim process.
the process consists of 9 tasks and 14 resources that are
categorised into 4 roles. the cpn model was designed in
such a way that resources do not perform more than one
activity at a time, and each task can only be executed by
certain role(s) (group of resources). table iii describes the
roles that are allowed to perform the respective tasks.
table iv illustrates some examples of the deÔ¨Åned cost
functions which are elaborated below:
the cost of a case is calculated based on its case
properties and its duration. an additional service level
agreement (sla) has been speciÔ¨Åed, in which cases
that ran overtime are penalised.
the cost of an activity is calculated based on each
activity‚Äôs resource allocation. a higher cost is incurred
if an inappropriate/less-desired resource executes that
activity. for example, a manager performing an activity
yields a higher cost than a clerk.
resource costs are calculated based on resource utili-
sation. the per minute cost rate is determined by the
resource utilisation for the speciÔ¨Åed time horizon. anassumption for this example is that the desired resource
utilisation is 0.8. the cost rate is set in such a way that a
resource‚Äôs utilisation between 0.75 and 0.85 within the
hour is cheapest. likewise, under- or over-utilisation of
resources results in a high cost rate.
iv. g enetic algorithms -based optimisation
the aim of this research is to identify less expensive exe-
cution scenarios by exploring different possible bindings for
a given event log. we apply a genetic algorithm to facilitate
the construction and exploration of the massive search space.
genetic algorithms use the principles of evolution to guide
the search. in this case, special-purpose crossover and muta-
tion operators are applied to a population of bindings, which
is subsequently evaluated according to reductions in cost. a
genetic algorithm-based approach was opted for because of
its Ô¨Çexibility and adaptability, along with robust performance
and global search characteristics [25]. we deem these charac-
teristics necessary because the np-hard optimisation problem
at hand is non-linear, high-dimensional, and prone to many
local optima. the non-linear nature discourages the use of
lp or ilp techniques, while the high-dimensionality makes
the use of a brute force or monte carlo-inspired approach
impracticable. furthermore, due to the many local optima,
heuristic approaches and simulated annealing are deemed
less suitable as they tend to be more prone to converge
to such suboptimal solutions [30]. therefore, it is argued
that a genetic algorithm-based approach is the most adequate
technique for our problem.
a. operators
a safe variant and unsafe variant have been designed for
each of the operators. the safe variants ensure that only safe
bindings are produced, whereas the unsafe variants allow
unsafe bindings to be generated and brought forward to the
next generation. the list of operators are:
1)crossover . the crossover operator cross-breeds the
properties (activity start time and resource alloca-
tion) of a selected number of activities between two
bindings. a crossover point is picked randomly from
the parent binding‚Äôs list of activities, and a speciÔ¨Åed
number of activity crossovers ( crossover frequency ) is
applied, where the activity‚Äôs start time and resource
allocation are swapped between two parent bindings.
fig. 3 illustrates how crossovers are performed. for
the safe crossover variant, if the crossover produces
safe bindings, the safe bindings are kept and brought
forward to the next generation. if not, the bindings are
discarded, and the parent bindings are brought forward
to the next generation instead. for the unsafe variant,
the bindings produced are brought forward to the next
generation regardless of whether they are safe or not.
2)time mutation . the time mutation operator changes
the start times of a selected number of activities within
a binding individual. for a number of cases ( case
frequency ), a number of activities ( activity frequency )
are selected to have their start times altered. a new
fig. 3. how crossovers are performed (crossover frequency = 2).
start time is chosen between the activity‚Äôs possible
minimum and maximum start times. the safe time
mutation variant checks the chosen start time for po-
tential violations of the activity order and the resource
allocation authorisation. the activity‚Äôs start time is
mutated if it does not result in violations. if the
mutation will result in an unsafe binding, no mutation
is performed. the unsafe variant mutates the activity‚Äôs
start time regardless of its potential for violations.
3)resource mutation . the resource mutation operator
swaps the resource that is executing an activity. for a
random number of cases ( case frequency ), a random
number of activities ( activity frequency ) are selected
to have their resource allocation mutated. for the
safe resource mutation variant, a different resource is
randomly picked from the pool of idle resources for
mutation. if there is no resource available, no mutation
is performed. the unsafe mutation variant randomly
picks a new resource from the pool of allresources.
4)new heuristic binding . this operator introduces a
new safe binding into the population. although typ-
ically applied with a low probability, this operator
reduces the chance of the algorithm conÔ¨Åning itself
to a local optimum neighbourhood. for each case
(randomly ordered), the earliest possible start time is
proposed for an activity, and the algorithm attempts
to identify a resource that is suitable (allowed to
execute the activity) and available during the activity‚Äôs
proposed execution time frame. if there is a suitable re-
source, the activity is scheduled with the proposed start
time and resource allocation. if no suitable resource
is found, a new start time is proposed again (based
on previously scheduled activities), and the resource
allocation process is repeated. this process is iterated
until all activities have been scheduled. as this operator
ensures the generation of a safe binding, therefore there
is no need for an unsafe variant.
there is a probability that unsafe operators will fail to pro-
duce safe bindings. hence, a repair function was introduced.
unsafe bindings are repaired by re-assigning activity start
times, while preserving activity order and resource allocation.
for each activity in a case, an earliest possible start timetable iv
example of cost functions defined in the cost structure .
cost type property value cost rate
casedamage type & case duration windscreen $4 per minute
case duration -$2000 if it takes more than 3 hours, and
$200 for every subsequent hour after that
activityactivity & resource lodge claim + ic1 $10 per invocation
activity & resource [over-qualiÔ¨Åed resources] $1000 per invocation
resourceresource utilisation between 0 and 0.15 (under-utilised) $45 per minute
resource utilisation between 0.75 and 9.85 (optimum utilisation) $1 per minute
resource utilisation higher than 0.9 (over-utilised) $20 per minute
is proposed and checked. if the resource is already utilised
during the proposed time frame, a new start time for the ac-
tivity is proposed (based on previously scheduled activities),
and the checking process is repeated. all activities in all
cases iteratively undergo this process until all activities have
been scheduled. additional safe-after-repair variants have
been introduced for the crossover, the time mutation, and
the resource mutation operators. this allows more crossovers
and mutations to happen.
the genetic algorithm is sensitive to the frequency of the
operators being applied. the frequencies for the operator
variants can be found in table v. safe crossover has a
really low success rate due to the difÔ¨Åculty in obtaining
safe bindings. although a higher frequency will increase the
number of safe bindings generated, it is kept low for compu-
tational reasons. the time mutation operators are designed in
such a way that activities are rescheduled to start earlier if
there are idle resources. this will have a positive impact
on the cost, therefore the high time mutation frequency.
however, there is a chance of activities being scheduled to
start slightly later as well. this allows more activities to
be scheduled earlier between those ‚Äútime gaps‚Äù, avoiding
the possibility that cases or activities are being delayed
substantially until resources free up. due to the nature of
the roles and resources in the business process used for
the experiment (where insurance managers are underutilised
and the rest of the resources are overutilised), the resource
mutation tends to allocate the managers to perform activities
for which they are overqualiÔ¨Åed. even though this levels
out the utilisation of resources, it results in higher activity
costs. hence, a low resource mutation frequency is enforced.
the application frequency for the ‚Äúnew heuristic binding‚Äù
operator is set fairly low in order to avoid a majority of the
binding population being replaced.
b. genetic algorithm variants
four genetic algorithm variants were put together based
on the developed operators. variants 1 - 3 only produce
safe bindings, whereas variant 4 ignores the safeness of the
bindings. the new heuristic binding operator is used in every
algorithm variant to reduce the probability of the algorithm
conÔ¨Åning itself to a local optimum neighbourhood.
1)variant 1, safe . operators within this variant will
always generate safe bindings. otherwise, unsafe bind-
ings will be discarded or mutations that will result in
violations are skipped. this variant consists of the safe
crossover ,safe time mutation ,safe resource mutation ,andnew heuristic binding operators.
2)variant 2, safe after repair . bindings will be
crossovered or mutated whilst ignoring the safeness re-
quirement. the repair function is then applied to obtain
safe bindings. operators in this variant includes safe
after repair crossover ,safe after repair time mutation ,
safe after repair resource mutation , and new heuristic
binding . this variant is introduced to indirectly allow
a higher success rate of the safe operators.
3)variant 3, heuristic . the heuristic approach only uses
thenew heuristic binding operator. new safe bindings
are generated where activities are scheduled to start as
soon as possible if the authorised resources are idle.
4)variant 4, unsafe . the operators in this variant do
not enforce the safeness requirement of the bindings.
operators in this variant includes unsafe crossover ,
unsafe time mutation ,unsafe resource mutation , and
new heuristic binding . violation costs are introduced
in the Ô¨Åtness function to enable the genetic algorithm
to penalise unsafe bindings, so that they are less likely
to be selected and proceed to the next generation.
v. e xperiments
this section Ô¨Årst describes the experimental setup used
to evaluate the effectiveness of a genetic algorithm-based
approach which is then followed by a detailed discussion
about the experimental results. four genetic algorithm vari-
ants described in the previous section are benchmarked
against a randomised approach where new bindings are
randomly generated with randomised activity start times and
randomised resource allocations. a number of log variants
are also used in this experiment.1 2
1) log variants: three (simulated) log variants of the car
insurance claim process are used to evaluate the performance
of the different algorithm variants (see table vi). the Ô¨Årst
log variant contains 100 cases with an average of 7 to 8
activities per case. the second variant has double the number
of cases (by doubling the case arrival rate) compared to the
Ô¨Årst variant. the third log has double the number of activities
in a case (by repeating the process again) compared to the
Ô¨Årst variant. the goal of the introduction of two alternative
logs is to evaluate the cost optimisation approach against logs
where, 1) the number of cases is higher and the arrival rate is
1qut‚Äôs high performance computing (hpc) facility was used to
run these experiments. http://www.itservices.qut.edu.au/
researchteaching/hpc/hw_catalogue.jsp
2files can be obtained via http://yawlfoundation.org/cost/
logbasedcostanalysisandimprovement.html .table v
frequencies for different operator variants .
operator variants safe operators safe after repair operators unsafe operators
crossover frequency 1% of total activity count poisson (50% of total activity count) poisson (20% of total activity count)
time mutation (case frequency) poisson (100% of total case count) poisson (10% of total case count) poisson (100% of total case count)
time mutation (activity frequency) discrete (0% to 100% of total activity count) discrete (0% to 100% of total activity count) discrete (0% to 100% of total activity count)
resource mutation (case frequency) poisson (10% of total case count) poisson (5% of total case count) poisson (10% of total case count)
resource mutation (activity frequency) discrete (0% to 100% of total activity count) discrete (0% to 100% of total activity count) discrete (0% to 100% of total activity count)
new heuristic binding (chance frequency) 5% of total population count
poisson ( mean ) = pick a random value from a poisson distribution with the stated mean.
discrete ( mintomax) = pick a random value from a discrete uniform distribution between the stated minimum and maximum values.
increased, and 2) the number of activities in a case is higher
while the number of resources remains the same. different
cost structures are also deÔ¨Åned for each log variant.
table vi
characteristics of the three event log variants .
log variant & name no. of cases no. of tasks no. of resources/roles
1 - normal 100 9 14 resources, 4 roles
2 - double cases 200 9 14 resources, 4 roles
3 - double tasks 100 18 14 resources, 4 roles
a. experiment parameters and conÔ¨Ågurations
a number of parameters for this experiment have been
Ô¨Åxed across different log and algorithm variants. the param-
eters are Ô¨Åxed in consideration of the search space and the
experiment‚Äôs feasibility.
population size: 50
time discretisation: yes (true)
time block: 1-minute blocks
elite count: 5% of the total population count
resource utilisation horizon: 1 hour (resource utilisa-
tion rate is calculated for the past hour)
selection strategy: tournament selection (with a 75%
probability that a Ô¨Åtter individual will be selected to
undergo crossover and mutation)
initial population‚Äôs bindings: 100% safe bindings
the experiment parameters above are Ô¨Åxed for all ex-
periment variants except for algorithm variant 4 (unsafe
variant). due to that algorithm variant ignoring the safeness
requirement, the initial population can be generated without
ensuring the safeness of the bindings, reducing computational
time. each violation occurrence within the unsafe bindings
are then penalised with a violation cost to discourage unsafe
execution scenarios. example cost structures and their re-
spective violation costs were developed for the three different
event logs that were generated.
b. result analysis and discussion
statistics gathered from the experiments are summarised
in table vii. a Ô¨Åve-fold average has been computed across
the log variants. all variants discovered cheaper alternative
execution scenarios, although different algorithms achieve
different rates of cost reduction.
in terms of the time taken for each algorithm variant to
complete 500 evolution generations (elapsed time), variant 4
(unsafe) performs the fastest across all log variants. however,
the cost reduction is less evident compared to the rest of
the algorithm variants, especially algorithm variant 1 (safe).also, algorithm variant 1 (safe) is more scalable compared to
other algorithm variants, which can also be observed across
all log variants.
taking a closer look at the overall cost, where a reduction
in cost is indicated with a negative percentage, it can be
observed that the execution scenario identiÔ¨Åed by algorithm
variant 1 (safe variant) has the lowest cost, followed by
algorithm variant 3 (the heuristic variant). this observation
holds across the three log variants. for log variants 2 (double
cases) and 3 (double tasks), the cost improvement realised
by all algorithm variants plateaued between -39% and -46%.
due to the limited number of resources and the high number
of activities, the process can only improve so much, while not
compromising utilisation of the resources. in addition, each
of the algorithm variants successfully reduces cost for the
different cost types. however, the extent of reduction for each
cost type varies. for instance, we can observe that algorithm
variant 3 (heuristic) can reduce resource costs signiÔ¨Åcantly
when compared with other variants. this can be explained
by how the heuristic algorithm works, as it tries to allocate
resources to activities as soon as they are available, lowering
the resource costs.
in addition, several non-cost indicators were used as
measurements. the average waiting time (awt) between
activities within the case is calculated, where a reduction in
awt will result in an increase in resource utilisation and a
reduction of sla breaches, therefore bringing down the cost.
for each log variant, the number of cases that breached the
pre-deÔ¨Åned sla deadlines are aggregated, where a reduction
in sla breach count typically means a reduction in cost. all
algorithm variants not only considerably reduce the average
waiting time and sla breach count, but also increase the
resource utilisation, which in turn reduces overall cost. it
can also be observed that algorithm variant 3 (heuristic), in
particular, performs better in reducing awt and in increasing
the resource utilisation. this is, again, due to the way the
algorithm works ‚Äî by allocating resources to activities as
soon as possible. for the experiments that ran using log
variant 3 (double tasks), only a slight increase and even a
decrease in resource utilisation can be observed. the reason
for this is that only a limited number of resources are
executing a high number of activities, resulting in a situation
where most of the resources are overutilised originally. cost
reductions can be achieved by a slight adjustment of resource
utilisations, where high cost caused by resource under- or
over-utilisation are lowered by mediating the utilisation of
resources. this demonstrates the complexity of cost-basedtable vii
experiment outcomes for all log variants using different algorithm variants
log variants log variant 1 log variant 2 log variant 3
algorithm variantsvariant 1 variant 2 variant 3 variant 4 variant 1 variant 2 variant 3 variant 4 variant 1 variant 2 variant 3 variant 4
(safe) (repair) (heuristic) (unsafe) (safe) (repair) (heuristic) (unsafe) (safe) (repair) (heuristic) (unsafe)
elapsed time 0:48:20 3:30:06 1:08:51 0:38:37 1:46:34 21:27:35 5:44:59 1:37:00 1:13:33 16:28:24 3:33:19 0:55:16
execution cost -31.61% -12.62% -15.15% -12.32% -44.97% -39.56% -41.08% -39.74% -45.87% -41.77% -43.54% -41.88%
case cost (c) -42.97% -41.92% -0.29% -7.83% -33.61% -32.96% -0.13% -7.63% -34.14% -35.52% -0.58% -4.51%
activity cost (a) -51.45% -10.50% -48.67% -15.98% -24.13% -11.15% -48.88% -9.18% -26.00% -15.82% -51.25% -12.70%
resource cost (r) -10.94% -11.78% -67.80% -20.12% -24.73% -14.69% -82.29% -11.54% -21.47% -12.56% -83.07% -12.75%
average waiting times (a wt ) -78.33% -78.19% - 80.71% -79.81% -52.30% -54.88% -54.92% -55.49% -52.11% -53.63% -54.32% -52.06%
sla breach count -85.20% -80.80% -83.20% -84.80% -53.02% -50.79% -47.30% -47.94% -65.92% -65.31% -69.39% -64.49%
resource utilisation 14.33% 20.91% 23.42% 20.95% 16.99% 24.72% 26.67% 21.65% -8.18% 1.85% 5.60% 1.29%
trade-offs. considering the emphasis on cost reduction, and
the balance between all the non-cost indicators and elapsed
time, it can be concluded that algorithm variant 1 (safe)
exhibited the best results.
from an efÔ¨Åciency gain perspective, fig. 4 illustrates the
cost of new bindings generated for log variant 1 (normal)
over 500 evolution generations using algorithm variant 1
(safe). we can observe the reduction in cost across different
cost types as the number of evolutions continues. the new
binding resulted in a cost reduction of $249,550.00 when
compared with the original binding, which has a total cost
of $717,021.00 (a reduction of 34.8%), which indicates that
there is room for efÔ¨Åciency gains if we can learn from the
past to determine how the cost can be reduced.
fig. 4. total cost reduction of log variant 1 (normal) over 500 evolution
generations using algorithm variant 1 (safe).
we now turn our attention to the resource efÔ¨Åciency
metrics. fig. 5 compares the utilisation rate of a resource
- insurance assessor 2 (iass2) within log variant 1 (normal)
using algorithm variant 1 (safe). in the example cost struc-
ture, under/over utilisation of a resource is discouraged and
this is reÔ¨Çected in a higher cost rates for such cases than in
the optimal case. as a result, the graph shows that under- and
overutilisation of iass2 has been discouraged, by increasing
and levelling the utilisation of iass2. the increase in resource
utilisation also resulted in reduced waiting times for cases
and increased process efÔ¨Åciency, reducing the overall log
duration by roughly 30%.
fig. 6 compares the activities‚Äô timestamps, the overall case
duration, and the total waiting time for case number 10,
within log variant 1 (normal) before and after the experiment,
where algorithm variant 1 (safe) was used. it can be observed
that not only the overall case duration has decreased, the
total waiting time has been reduced too, completing the case
before the sla deadline is due. in addition, the total duration
that resources that are utilised between 50% to 85% of the
time during the past hour, has increased.
fig. 5. comparison of utilisation rates of resource insurance assessor 2.
in addition, an approach that explores possible execution
scenarios randomly was run for a week as a benchmark. due
to the huge amount of unsafe candidates in the search space,
the approach failed to identify a better execution scenario
within the given time frame. even worse, in table viii,
cost increases are observed across all log variants. hence,
a randomised approach seems unable to effectively and
efÔ¨Åciently explore execution scenarios that will incur lower
cost due to the complexity and the large search space of this
problem.
table viii
experiment outcomes using the randomised approach on all
log variants for one week .
log variant log variant 1 log variant 2 log variant 3
evolution generations 241291 78696 88112
execution cost 150.27% 279.82% 94.98%
in this section, we discussed the approach undertaken to
evaluate the proposed genetic-algorithm based cost optimisa-
tion environment with different log variants. these prelimi-
nary results show that it is possible to learn from the history
by generating alternative scenarios to satisfy the goal of cost
minimisation. of course, it is not yet possible to generalise
these results across processes with different characteristics
(e.g., the number of activities, case arrival rates, the number
of resources) and with different cost structures.
vi. c onclusion
this paper proposes a novel cost-informed process im-
provement approach that enables the generation and compar-
ison of alternative process execution scenarios while taking
into account trade-offs in terms of cost. this approach is
based on the identiÔ¨Åcation of the Ô¨Åxed and variable partsfig. 6. comparison between the initial execution scenario and a better alternative execution scenario for case 10.
of an event log. on top of this framework, a comprehen-
sive and adaptive cost structure that captures different cost-
related dimensions has been proposed and incorporated as the
objective function. finally, the optimisation is realised with
the implementation of a set of genetic algorithm variants.
observe that in our approach, the overall cost of a business
process (based on the process behaviour represented in a log)
is computed, not the cost of individual cases.
in future work, cost-related insights can be derived by
learning from the improved history and recommendations
for cost reductions can be put forward. it is also possible to
investigate techniques to better visualise the generated out-
comes, alongside potential improvements to the algorithms.
moreover, an actionable methodology for identifying and
advocating for signiÔ¨Åcant business process improvements in
organisations based on concrete cost reduction insights could
be explored.
references
[1] s.p. brooks and b.j.t. morgan. optimization using simulated anneal-
ing. the statistician , 44(2):241‚Äì257, 1995.
[2] d.e. goldberg. genetic algorithms in search, optimization, and
machine learning . addison-wesley professional, 1989.
[3] j.f. gonc ¬∏alves, j.j.m. mendes, and m.g.c. resende. a genetic algo-
rithm for the resource constrained multi-project scheduling problem.
european journal of operational research , 189(3):1171‚Äì1190, 2008.
[4] a. greasley. using business-process simulation within a business-
process reengineering approach. bpm journal , 9(4):408‚Äì420, 2003.
[5] a. greasley and s. barlow. using simulation modelling for bpr:
resource allocation in a police custody process. international journal
of operations & production management , 18(9/10):978‚Äì988, 1998.
[6] s. hartmann and d. briskorn. a survey of variants and extensions
of the resource-constrained project scheduling problem. european
journal of operational research , 207(1):1‚Äì14, 2010.
[7] i. hofacker and r. vetschera. algorithmical approaches to business
process design. computers & operations research , 28(13):1253‚Äì
1275, 2001.
[8] z. huang, x. lu, and h. duan. resource behavior measure and
application in business process management. expert systems with
applications , 39(7):6458‚Äì6468, 2012.
[9] z. huang, w.m.p. van der aalst, x. lu, and h. duan. reinforcement
learning based resource allocation in business process management.
data & knowledge engineering , 70(1):127‚Äì145, 2011.
[10] h.c. hwang and b.k. choi. workÔ¨Çow-based dynamic scheduling of
job shop operations. international journal of computer integrated
manufacturing , 20(6):557‚Äì566, 2007.
[11] m.h. jansen-vullers, p.a.m. kleingeld, m.w.n.c. loosschilder,
m. netjes, and h.a. reijers. trade-offs in the performance of
workÔ¨Çows‚Äìquantifying the impact of best practices. business process
management workshops , 4928:108‚Äì119, 2008.
[12] m.h. jansen-vullers, m. netjes, h.a. reijers, and m.j. stegeman. a
redesign framework for call centers. in business process management ,
pages 306‚Äì321, 2006.[13] akhil kumar, remco m. dijkman, and minseok song. optimal
resource assignment in workÔ¨Çows for maximizing cooperation. in
business process management , pages 235‚Äì250, 2013.
[14] l.j. li, j. gao, k. chen, and h. jiang. the identiÔ¨Åcation of irrationally
allocated resources in business process based on network centrality
analysis. international journal of computer integrated manufacturing ,
24(8):748‚Äì755, 2011.
[15] s.l. mansar and h.a. reijers. best practices in business process
redesign: validation of a redesign framework. computers in industry ,
56(5):457‚Äì471, 2005.
[16] s.l. mansar and h.a. reijers. best practices in business process
redesign: use and impact. business process management journal ,
13(2):193‚Äì213, 2007.
[17] m. netjes. process improvement: the creation and evaluation of
process alternatives . phd thesis, eindhoven university of technology,
2010.
[18] f. niedermann, a. pavel, and b. mitschang. beyond roles: prediction
model-based process resource management. in business information
systems workshops , pages 5‚Äì17. springer, 2011.
[19] h.a. reijers and s.l. mansar. best practices in business process
redesign: an overview and qualitative evaluation of successful redesign
heuristics. omega , 33(4):283‚Äì306, 2005.
[20] h.a. reijers and k.m. van hee. product-based design of business
processes applied within the Ô¨Ånancial services. journal of research
and practice in information technology , 34(2):110‚Äì122, 2002.
[21] a.h.m. ter hofstede, w.m.p. van der aalst, m.adams, and n.russell,
editors. modern business process automation - yawl and its support
environment . springer, 2010.
[22] w.m.p. van der aalst. petri net based scheduling. operations research
spektrum , 18(4):219‚Äì229, 1996.
[23] w.m.p. van der aalst. process mining: discovery, conformance and
enhancement of business processes . springer, 2011.
[24] k. vergidis and a. tiwari. business process design and attribute
optimization within an evolutionary framework. in ieee congress
on evolutionary computation , pages 668‚Äì675. ieee, 2008.
[25] k. vergidis, a. tiwari, and b. majeed. business process analysis and
optimization: beyond reengineering. ieee trans. syst., man, cybern.
c, appl. rev. , 38(1):69‚Äì82, 2008.
[26] w.l. winston and j.b. goldberg. operations research: applications
and algorithms . thomson/brooks/cole belmont, 2004.
[27] j. xu, c. liu, and x. zhao. resource planning for massive number
of process instances. in on the move to meaningful internet systems:
otm 2009 , pages 219‚Äì236. springer, 2009.
[28] j. xu, c. liu, x. zhao, and z. ding. incorporating structural
improvement into resource allocation for business process execution
planning. concurrency and computation: practice and experience ,
2012.
[29] j. xu, c. liu, x. zhao, and s. yongchareon. business process
scheduling with resource availability constraints. in on the move to
meaningful internet systems , pages 419‚Äì427. springer, 2010.
[30] x. yang. introduction to mathematical optimization . cambridge
international science publishing, 2008.
[31] m. zur muehlen and d.t. ho. service process innovation: a case study
of bpmn in practice. in hawaii international conference on system
sciences, proceedings of the 41st annual , pages 372‚Äì372. ieee, 2008.