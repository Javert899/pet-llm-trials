ocπ: object-centric process insights
jan niklas adams1[0000−0001−8954−4925]and wil m.p. van der
aalst1,2[0000−0002−0955−6940]
1process and data science, rwth aachen university, aachen, germany
{niklas.adams, wvdaalst }@pads.rwth-aachen.de
2fraunhofer institute for applied information technology, sankt augustin, germany
abstract. process mining uses event sequences recorded in information
systems to discover and analyze the process models that generated them.
traditional process mining techniques make two assumptions that often
do not find correspondence in real-life event data: first, each event se-
quence is assumed to be of the same type, i.e., all sequences describe an
instantiation of the same process. second, events are assumed to exclu-
sively belong to one sequence, i.e., not being shared between different
sequences. in reality, these assumptions often do not hold. events may
be shared between multiple event sequences identified by objects, and
these objects may be of different types describing different subprocesses.
assuming “unshared” events and homogeneously typed objects leads to
misleading insights and neglects the opportunity of discovering insights
about the interplay between different objects and object types. object-
centric process mining is the term for techniques addressing this more
general problem setting of deriving process insights for event data with
multiple objects. in this paper, we introduce the tool oc π. ocπaims
to make the process behind object-centric event data transparent to the
user. it does so in two ways: first, we show frequent process executions,
defined and visualized as a set of event sequences of different types that
share events. the frequency is determined with respect to the activity
attribute, i.e., these are object-centric variants. second, we allow the user
to filter infrequent executions and activities, discovering a mainstream
process model in the form of an object-centric petri net. our tool is freely
available for download1.
keywords: process mining ·object-centric petri net ·process dis-
covery ·object-centric variants.
1 introduction
process mining is an umbrella term describing techniques to derive data-driven
insights into processes. the data come in an event log, describing the event
sequences of many process executions and their associated data. typically, three
different process mining fields are considered: process discovery, conformance
checking, and process enhancement [1]. techniques from process discovery aim to
1http://ocpi.ai/2 j.n. adams and w.m.p. van der aalst
fig. 1. overview of oc π: the log management is integrated into the toolbar, the
user can further interact with the tool by submitting the desired settings through the
log settings component. petri net and object-centric variants can be explored through
scrolling, zooming and panning.
construct a model from the event log, e.g., a petri net or a bpmn model. such a
model aims to describe the event sequences contained in the event log with only
one comprehensive model. conformance checking deals with quantifying and
describing how well a model corresponds to an event log. process enhancement
aims to deliver data-driven process improvements.
process mining techniques make some assumption about the nature of event
logs and the event sequences event logs contain. most techniques make the fol-
lowing two assumptions: (1)an event log contains process executions related to
individual objects, often called cases. therefore, every event sequence describes
an execution of a single case. each case is of the same case notion. (2)event
sequences for cases are independent of each other, i.e., two cases do not share
events.
in reality, event logs often violate these assumptions. there is often no clear
case notion in an event log. events can be associated with multiple cases [2].
imagine an ordering process: an order of some items is placed in a system.
these items are later delivered. events can refer to a case notion of an order, an
item, or a delivery. furthermore, some events are shared between different cases
of different case notions, e.g., an event that describes the placing of an order of
two items.
in traditional process mining, we cannot derive insights from such event data
as a whole. one case notion would need to be chosen, and events referring to
multiple objects of that notion would need to be duplicated, called flattening
[2]. this procedure removes essential information about interactions between
different case notions and objects. these problems are the motivation for object-ocπ: object-centric process insights 3
centric process mining [3]. by dropping the two mentioned assumptions and
adapting process mining techniques, object-centric process mining aims to deliver
algorithms that are able to exploit event logs with multiple case notions and
shared events fully.
different methods for dealing with multiple case notion processes exist. some,
like artifacts [7,8] and proclets [11], deal with the problem mostly from a model-
ing perspective. object-centric process mining [2] takes the object-centric event
data [12] as a starting point to discover process models and insights. so far, the
discovery of process models in the form of object-centric petri nets [3] has been
introduced. a discussion of sound object-centric workflow nets has recently been
published [14]. furthermore, basic conformance checking techniques for object-
centric petri nets and event logs have been introduced [4]. on the tool side, tools
to extract object-centric petri nets [3] and object-centric directly-follows graphs
[5] as well es storing and querying multiple case notion event data in the form
of graph databases [10] have been introduced. furthermore, object-centric petri
nets have been used to model digital twins of organizations [15].
however, some key ingredients of traditional process mining are, so far, not
available to users. here, we focus on variant visualization and discovering process
models for frequent variants. process executions can be equivalent if they de-
scribe the same execution sequences of event activities. the equivalence classes
they form are commonly known as variants [9]. each variant has a frequency
determined by the number of process executions in this variant. filtering and
exploring frequent variants provides the user with insights into the mainstream
behavior of the underlying process and yields a mainstream model.
therefore, with oc π(cf. figure 1), we provide a tool that augments object-
centric process discovery in the following two ways:
1. we allow the user to filter the least frequent variants of process executions
from the retrieved event log to discover an object-centric petri net that shows
the mainstream behavior of the event log.
2. we provide a variant explorer that allows the user to retrieve and explore
the variants of process executions and their frequencies.
the remainder of this paper is structured as follows. in section 2, we intro-
duce some basic concepts on which this tool is built, i.e., object-centric event
logs, extraction of executions, variants, and object-centric petri nets. we explain
the algorithmic foundations and some concepts relevant for the understanding
and usage of the tool in section 3. we provide an extensive overview of the
functionalities, the implementation and installation requirements in section 4.
we conclude this tool paper in section 5.
2 object-centric process mining
in this section, we introduce some of the basic concepts on which this tool is
built. the tool takes input in the form of an object-centric event log, extracts
process executions from it, determines frequent equivalence classes, i.e., variants,4 j.n. adams and w.m.p. van der aalst
fig. 2. example of an object-centric petri
net. places are colored according to the
object type they belong to; variable arcs
(double lined) can consume a variable
amount of tokens.event activity order item delivery
e1place order o1 i1,i2
e2pick item i2
e3pick item i1
e4fuel car d1
e5pay order o1
e6pack items i1,i2 d1
e7deliver i1,i2 d1
table 1. example of an object-centric
event log. each event can be associated to
multiple objects of different object types.
in this log, order, item and delivery are
the object types.
and discovers and displays an object-centric petri net to the user. therefore, we
give a short formal introduction of these concepts in this section.
an object-centric event log can be seen as an extension to traditional event
logs used in process mining [1] that records multiple case notions (object types)
for each event and allows referencing to multiple cases (objects) of each object
type of an event.
definition 1 (object-centric event log). letuebe the universe of event
identifiers, uotbe the universe of object types, uobe the universe of objects
anduabe the universe of activities. p(x)denotes the power set of a set x.
πot:uo→uotmaps an object to its object type. an object-centric event log
is a tuple l= (e, ot, o, a, π o, πa,≺)consisting of event identifiers e⊆ue,
object types ot⊆uot, objects o⊆uo, activities a⊆ua, a mapping function
from events to objects πo:e→ p (o)and a mapping function from events to
activities πa:e→a. the event identifiers are subject to a total order ≺.
an example of an object-centric event log in table format is given in table 1.
each event has a unique identifier eiand an activity2. furthermore, each event
has reference to a set of objects. each object is associated with one object type of
order, item ordelivery . in traditional process mining, each process execution is
associated with exactly one object, i.e., each process execution is one sequence.
the notion of a process execution can be generalized for object-centric event
data, involving the sequences multiple objects sharing events. an extraction
technique retrieves a set of process executions from an event log.
2we omit the timestamp and additional attributes as they are not relevant for the
capabilities described in this paper.ocπ: object-centric process insights 5
definition 2 (process execution). letl= (e, ot, o, a, π o, πa,≺)be an
object-centric event log. pl={(e′, o′)|e′⊆e∧o′⊆o∧e∈e′⇔πo(e)∩o′̸=∅
∧(o′,{(o, o′)∈o′×o′| ∃e∈e′o, o′∈πo(e)})is a connected graph }is the set of
process executions of an event log. an extraction technique fextract :l→ p(pl)
extracts a subset of all process executions.
for the example of the event log excerpt in table 1, a single process executions
could be all seven events and the four objects. another possible process execution
would be a subset of these objects and their events, e.g., only the order o1 and
the two items i1 and i2. different methods are available to retrieve subsets of
all process executions. the process executions in the extracted subset should
have some similar characteristics to be comparable. we discuss two different
extraction techniques in subsection 3.2.
variants in process mining summarize multiple cases (or process executions)
with the same control-flow behavior. this is translated to the object-centric
setting by determining equivalency of process executions concerning the event
activity attribute and grouping equivalent executions in one class, i.e., variant.
definition 3 (equivalent process executions). letp={p1, p2, . . . p n}be
a set of process executions. an oracle fequiv :p→ {1, . . . , m }maps executions
tom∈nclasses of equivalent executions considering the event’s activity. each
class is one variant vi={pj∈p|fequiv(pj) =i}fori∈ {1, . . . , m }.
we can discover an object-centric petri net from an object-centric event log
[3]. object-centric petri nets borrow from colored petri nets [13] to be able to
model different object types and how they interact.
definition 4 (object-centric petri net). letn= (p, t, f, l )be a petri net
with places p, transitions t, a flow relation f⊆t×p∪p×twitht∩p=∅
and a labelling function l:t↛uaand let ot⊆uotbe a set of object types.
an object-centric petri net ocpn = (n, pt, f var)is a tuple of a petri net n,
a mapping function from places to object types pt:p→otandfvar⊆f
describing a subset of arcs which are variable arcs, i.e., they can consume and
produce more than one token.
an example of an object-centric petri net is given in figure 2. this petri net
describes the process used to generate the event log of table 1. each place has
a color corresponding to one object type. each arc can either be a standard arc
or a variable arc. when playing the token game in such a petri net, a binding
execution of a transition would consume tokens associated with objects in the
input places. these could be multiple tokens in the case of a variable arc. the
consumed tokens are then produced in the output places of the corresponding
object types of the input places.
3 algorithmic concept
the technique to discover an object-centric petri net from an object-centric
event log is described in [3]. we focus on preprocessing the underlying event log6 j.n. adams and w.m.p. van der aalst
fig. 3. overview over the user interaction and the algorithmic steps in oc π.
for process discovery according to some user input. the general signature of the
processing we apply is depicted below.
lfextract− − − − − → { p1, . . . , p n}fequiv− − − − → { v1, . . . , v m} →petri net & variants
the detailed algorithmic concept of our tool is depicted in figure 3. the user
provides an object-centric event log and makes a choice about several settings:
the selected object types, the activity threshold, the variant threshold, and the
technique to extract process executions. based on this, our tool applies different
filtering and algorithmic steps. process executions are extracted from the object-
centric event log, and their equivalence classes, i.e., variants, are calculated.
subsequently, the user can explore the object-centric petri net and the variants,
adjust the input settings, and reiterate until the result is sufficient for the user. in
the following sections, we provide deeper insights into the different algorithmic
steps conducted by our tool that are of importance for the understanding of the
user on how to interpret the results.
3.1 filtering
the filtering possibilities included in our tool, by activity frequency and variant
frequency, both follow the same method: the user selects a threshold between
0 and 1 .0. subsequently, the minimum number of behavioral observations, i.e.,
either activities or variants, is collected such that the cumulative frequency of
these observations exceeds this threshold. the events that are not associated
with these observations are filtered out. for the example of activity filtering, the
relative frequencies of each activity in the event log are calculated. after the
user sets a threshold, the most frequent activities are greedily added to a set
of activities that should be kept in the event log until the threshold is met. all
events with activities not in this set will be discarded.ocπ: object-centric process insights 7
3.2 process execution extraction
the process execution extraction technique determines how process executions
are retrieved from the object-centric event log and is, therefore, important for
the variants retrieved as well as the results of the variant filtering. we provide
two execution extraction techniques: coherent objects andleading object type .
for a brief explanation of these techniques, we use a concept of direct rela-
tions between objects: if two objects share an event, they are directly related.
two objects can be transitively related if a chain of direct relations leads from
one object to the other. the length of the chain is the level of transitivity. co-
herent objects take all objects directly and transitively related into one process
execution. the underlying assumption is that they are all dependent on each
other by sharing events. however, this might lead to process executions that are
too extensive for some logs and some users. imagine the ordering process from
table 1. if multiple items of multiple orders end up in the same delivery, all of
these orders would be one process execution. while they, indeed, all depend on
each other, this might be too extensive for the user who may only be interested
in the execution of an order and the associated objects or a delivery and the
associated objects. because of this, we include leading object type as a tech-
nique for execution extraction. it constructs executions by taking each object
of the leading object type and recursively adding directly related objects until
objects of the same type have already been added on a lower level of transitivity.
these objects are not added anymore, and their directly related objects are not
further traversed. the events of the selected objects are one process execution.
this execution extraction cuts off some dependencies to have more understand-
able and comprehensive process executions. some events may end up in multiple
process executions. our implementation determines the equivalence of process
executions by testing for automorphism between the different execution graphs
given by the process executions.
3.3 variant visualization
each execution is associated with one variant, describing the sequence of activ-
ities for each involved object. we visualize these variants by giving each object
one lane. each object gets a color, dependent on the object type’s base color,
which is slightly altered for each object. we draw a chevron for each event. the
activity is depicted inside the chevron. if an event is shared between objects,
the corresponding chevron is drawn on each lane and colored with all colors
of all involved objects. generally, the chevrons are of the same width. only if
a chevron is placed between two shared chevrons, the width is adjusted to fit
the gap. except for the shared chevrons, the chevron ordering and horizontal
positioning gives information about the time-ordering within one object, not
between objects.8 j.n. adams and w.m.p. van der aalst
fig. 4. the log settings component, the central point of interaction with the users.
4 usage and functionalities
in this section, we introduce the core functionalities of our tool. a complete view
of the tool is depicted in figure 1. our tool is separated into four components:
two for user interaction and two for exploring the output. the user interaction
components are the log management (integrated into the toolbar on top) and
the log settings. the output components are the object-centric petri net explorer
and the variant explorer. we are going to introduce each of the components in
the following sections.
4.1 event log management
ocπoffers extensive event log management. the file formats jsonocel andjsonxml
introduced in the ocel standard [12] as well as a csvimport are supported.
the csv file should contain an “event activity” and “event timestamp” col-
umn. as a supportive element for uploading csv, we implemented functionality
to choose potential object types to prevent unwanted columns from becoming
object types. the file’s encoding should comply with utf-8 encoding. the sepa-
rator will automatically be detected. each log can also be deleted at an arbitrary
point in time. each event log will be uniquely identified by its name. two event
logs with the same filename cannot be uploaded.
4.2 log settings
the log setting component is the main point of input from the user and is
depicted in figure 4. we provide two filtering thresholds: one to filter out in-
frequent activities and one to filter out infrequent variants. furthermore, we
allow the user to discard some object types for their scope of analysis, effectively
removing these object types and their objects from the event log. we provide
two different techniques to extract process executions. the first one is called co-
herent objects , the second technique is called leading object type . subsection 3.2
provides a detailed explanation of the execution extraction. the settings can be
submitted to the back-end by pressing the submit changes button.ocπ: object-centric process insights 9
fig. 5. the object-centric petri net discovered from an object-centric event log accord-
ing to the settings provided by the user.
4.3 process model explorer
based on the event log that is processed according to the setting provided by
the user, our tool discovers an object-centric petri net and displays it to the user
as a process model. the component is depicted in figure 5. the visualization
can interactively be explored, navigation by zooming and dragging/panning is
supported. these functionalities help make large petri nets with many object
types and transitions accessible to users. every object type has one globally
assigned color, which is also used by the variant explorer component described
later. the petri net can be discovered by pressing the button. if the settings were
changed and the petri net is not consistent with the current submitted settings,
this button changes its color to red to indicate a necessary update.
4.4 variant explorer
the variant explorer displays the variants of the process executions extracted
from the event log based on the provided settings. it is depicted in figure 6.
the colors of the object types are consistent with the colors in the object-centric
petri net component. each object of an object type is colored in a different
shade of the object types’ base color. each object gets a lane to describe its
event sequence, lanes of the same object types are grouped. the frequency of
the variant (with respect to the event log after the filtering settings are applied)
is depicted on the left-hand side of the variant. with a click on the variant, the10 j.n. adams and w.m.p. van der aalst
fig. 6. the variant explorer shows the frequency and a visualisation for each variant.
variant is unfolded such that the full activity labels are visible. the explorer
allows scrolling in both directions, vertically and horizontally.
4.5 implementation
we implemented this tool on a technology stack of python, django, angular,
and d3.js and graphviz3for visualization. the core algorithmic functionality
is taken from the ocpa4and the pm4py library [6]. the tool can be run on
windows by downloading it from http://ocpi.ai/ and running the executable
named ocpi.exe .
5 conclusion
in this paper, we introduced the tool oc π. this tool enables users to load object-
centric event data and explore novel insights: the process execution variants
contained in the object-centric event data and their frequencies. furthermore,
we enable the user to filter out infrequent variants, infrequent activities, and
unwanted object types to discover an object-centric petri net according to the
chosen settings. this allows a user to interactively explore an object-centric
process model and its most frequent variants.
acknowledgements we thank the alexander von humboldt (avh) stiftung
for supporting our research.
3graphviz needs to be installed. see: https://graphviz.org/download/
4https://github.com/gyunamister/ocpaocπ: object-centric process insights 11
references
1. van der aalst, w.m.p.: process mining: data science in action. springer (2016).
https://doi.org/10.1007/978-3-662-49851-4
2. van der aalst, w.m.p.: object-centric process mining: dealing with divergence
and convergence in event data. in: software engineering and formal methods -
17th international conference, sefm 2019, oslo, norway, september 18-20, 2019,
proceedings. lecture notes in computer science, vol. 11724, pp. 3–25. springer
(2019). https://doi.org/10.1007/978-3-030-30446-1 1
3. van der aalst, w.m.p., berti, a.: discovering object-centric petri nets. fundam.
informaticae 175(1-4), 1–40 (2020). https://doi.org/10.3233/fi-2020-1946
4. adams, j.n., van der aalst, w.m.p.: precision and fitness in object-centric pro-
cess mining. in: 3rd international conference on process mining, icpm 2021,
eindhoven, netherlands, october 31 - nov. 4, 2021. pp. 128–135. ieee (2021).
https://doi.org/10.1109/icpm53251.2021.9576886
5. berti, a., van der aalst, w.m.p.: extracting multiple viewpoint models from rela-
tional databases. in: data-driven process discovery and analysis - 8th ifip wg
2.6 international symposium, simpda 2018, seville, spain, december 13-14, 2018,
and 9th international symposium, simpda 2019, bled, slovenia, september 8,
2019, revised selected papers. lecture notes in business information processing,
vol. 379, pp. 24–51. springer (2019). https://doi.org/10.1007/978-3-030-46633-6 2
6. berti, a., van zelst, s.j., van der aalst, w.m.p.: process mining for
python (pm4py): bridging the gap between process- and data science. corr
abs/1905.06169 (2019), http://arxiv.org/abs/1905.06169
7. calvanese, d., montali, m., esta˜ nol, m., teniente, e.: verifiable uml artifact-
centric business process models. in: li, j., wang, x.s., garofalakis, m.n.,
soboroff, i., suel, t., wang, m. (eds.) proceedings of the 23rd acm interna-
tional conference on conference on information and knowledge management,
cikm 2014, shanghai, china, november 3-7, 2014. pp. 1289–1298. acm (2014).
https://doi.org/10.1145/2661829.2662050
8. cohn, d., hull, r.: business artifacts: a data-centric approach to modeling busi-
ness operations and processes. ieee data eng. bull. 32(3), 3–9 (2009)
9. dumas, m., rosa, m.l., mendling, j., reijers, h.a.: fundamentals of business pro-
cess management, second edition. springer (2018). https://doi.org/10.1007/978-
3-662-56509-4
10. esser, s., fahland, d.: multi-dimensional event data in graph databases. j. data
semant. 10(1-2), 109–141 (2021). https://doi.org/10.1007/s13740-021-00122-1
11. fahland, d.: describing behavior of processes with many-to-many interactions. in:
donatelli, s., haar, s. (eds.) application and theory of petri nets and concurrency
- 40th international conference, petri nets 2019, aachen, germany, june 23-
28, 2019, proceedings. lecture notes in computer science, vol. 11522, pp. 3–24.
springer (2019). https://doi.org/10.1007/978-3-030-21571-2 1
12. ghahfarokhi, a.f., park, g., berti, a., van der aalst, w.m.p.: ocel: a standard
for object-centric event logs. in: new trends in database and information sys-
tems - adbis 2021 short papers, doctoral consortium and workshops: doing,
simpda, madeisd, megadata, caons, tartu, estonia, august 24-26, 2021,
proceedings. communications in computer and information science, vol. 1450,
pp. 169–175. springer (2021). https://doi.org/10.1007/978-3-030-85082-1 16
13. jensen, k., kristensen, l.m., wells, l.: coloured petri nets and cpn tools for mod-
elling and validation of concurrent systems. int. j. softw. tools technol. transf.
9(3-4), 213–254 (2007). https://doi.org/10.1007/s10009-007-0038-x12 j.n. adams and w.m.p. van der aalst
14. lomazova, i.a., mitsyuk, a.a., rivkin, a.: soundness in object-centric workflow
petri nets. corr abs/2112.14994 (2021), https://arxiv.org/abs/2112.14994
15. park, g., van der aalst, w.m.p.: realizing a digital twin of an organization using
action-oriented process mining. in: 3rd international conference on process min-
ing, icpm 2021, eindhoven, netherlands, october 31 - nov. 4, 2021. pp. 104–111.
ieee (2021). https://doi.org/10.1109/icpm53251.2021.9576846