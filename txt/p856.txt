evaluating and predicting overall process risk using event logs
a. pikaa,, w.m.p. van der aalstb,a, m.t. wynna, c.j. fidgea, a.h.m. ter hofstedea,b
aqueensland university of technology, brisbane, australia
beindhoven university of technology, eindhoven, the netherlands
abstract
companies standardise and automate their business processes in order to improve process e ciency and minimise
operational risks. however, it is di cult to eliminate all process risks during the process design stage due to the fact
that processes often run in complex and changeable environments and rely on human resources. timely identiÔ¨Åcation
of process risks is crucial in order to insure the achievement of process goals. business processes are often supported
by information systems that record information about their executions in event logs. in this article we present an
approach and a supporting tool for the evaluation of the overall process risk and for the prediction of process outcomes
based on the analysis of information recorded in event logs. it can help managers evaluate the overall risk exposure
of their business processes, track the evolution of overall process risk, identify changes and predict process outcomes
based on the current value of overall process risk. the approach was implemented and validated using synthetic event
logs and through a case study with a real event log.
keywords: overall process risk, event log, process risk evaluation, mining process risk
1. introduction
in order to deliver desirable outcomes in an e cient manner and minimise operational risks companies often stan-
dardise and automate their business operations. business processes are exposed to di erent risks that can jeopardise
the achievement of process goals in terms of cost, timeliness or the quality of outputs [14]. it is not possible to con-
sider all process execution scenarios and to eliminate all operational risks during the process design stage [27, 30] as
processes are often executed in complex [35] and changeable [2] environments. multiple cases (i.e., process instances)
are often processed in parallel, e.g., multiple loan applications can be processed in a bank at the same time. the same
resources may be involved in execution of these process instances. human resources tend to make mistakes and their
productivity levels can vary. human factors are considered to be ‚Äúunequivocally the single most important element
that can a ect project success‚Äù [31]. a case can be a ected by events, either happening in the case itself or external to
the case [35]. for example, when a resource is busy processing a complex case, he may neglect other cases assigned
to him, hence causing delays. sometimes an event that is not risky on its own can be risky in combination with other
corresponding author
email address: anastasiia.pika@hdr.qut.edu.au (a. pika)
preprint submitted to information sciences january 24, 2016events, e.g., consider the arrival of an urgent case ‚Äì one such case will typically not be a problem, but when multiple
urgent cases arrive within a short period of time, outcomes (e.g., quality and duration) of all cases active during this
period may be a ected.
furthermore, it can be very costly to address all known process risks during the process design stage. for example,
in order to decrease the likelihood of human mistakes, the result of every completed task instance can be checked by
a human resource not involved in its execution (‚Äúfour-eyes principle‚Äù [39]). however, this strategy is very time-
consuming and is too costly to be applied in non-critical processes. although it is not always possible to build
mechanisms into a process that address all known process risks during the process design stage, it is important to
evaluate the level of overall process risk during the execution of a process.
eective risk management is crucial for organisations [8]. iso guide 73:2009 deÔ¨Ånes risk as the ‚Äúe ect of
uncertainty on objectives‚Äù where e ect is ‚Äúa deviation from the expected ‚Äì positive and /or negative‚Äù [13]. risk
identiÔ¨Åcation is a critical task and one of the most challenging in the risk management process [29]. although many
risk management approaches provide high-level guidelines about risk identiÔ¨Åcation strategies, they do not provide any
guidelines on how to operationalise them [21, 29]. recently a few approaches have been proposed that allow us to
identify some process-related risks [3, 5, 24, 25]. existing approaches typically analyse characteristics of individual
process instances and predict risks on the process instance level, though ‚Äúthe handling of cases is inÔ¨Çuenced by a much
broader context‚Äù [35]. they also do not consider the fact that process risk can change over time. as managing risks
in individual process instances can be very costly, for non-critical processes companies may be more interested in
managing overall process risk rather than dealing with risks in individual process instances. for example, a manager
may wish to be alerted only when overall process risk reaches some predeÔ¨Åned threshold rather than receiving ‚Äúdelay
likelihood‚Äù notiÔ¨Åcations for individual process instances.
up to now insu cient attention has been paid to the problem of evaluation of overall process risk [4], i.e., the
risk that threatens the achievement of overall process goals (e.g., completing the majority of cases within a given
time period or within a given budget) and can be caused by di erent process-related risk factors in multiple process
instances. hence, our Ô¨Årst research question in this paper is: how can we evaluate overall process risk at a given point
in time considering di erent risk factors across all running process instances? a method for evaluation of overall
process risk at di erent points in time can help managers identify changes in overall process risk. in the case of a
signiÔ¨Åcant increase of overall process risk, managers may wish to look more closely at business operations in order to
investigate sources of the risk increase and take corresponding actions. for example, they can discover that the overall
risk increased because speciÔ¨Åc tasks in a process are often repeated or delayed. consequently, they may decide to
provide training to resources that execute these tasks or to hire additional employees.
when multiple events that increase process risks (we refer to them as risky process behaviours) happen in a
process within a short period of time, many cases that are active during this period may not achieve their goals (e.g.,
in terms of time or quality). let us consider as an example a service desk organisation. within a few hours many
urgent requests may be lodged, a few complex incidents may be re-opened and a special type of expertise may be
2figure 1: evaluating overall process risk and predicting process outcomes
required for some urgent cases. during such periods resources may become abnormally busy. due to the fact that
the resources need to solve many urgent or complex issues it is likely that many cases that are active during this
period may be delayed or completed with mistakes. our second research question we tackle in this paper is: how can
we predict aggregate process outcomes based on the current value of overall process risk? examples of aggregate
process outcomes include: the percentage of active cases that will not produce a process outcome of a high quality
or the number of active cases that will be delayed. such a prediction may help managers to mitigate signiÔ¨Åcant risks,
e.g., when they learn that many running process instances are likely to be delayed or completed with mistakes, they
may prioritise tasks or decide to outsource some work.
companies often use information systems to support executions of their business processes. these information
systems record information about process executions, e.g., process tasks that were executed and resources involved in
the tasks. such information can be converted to event logs. information systems may record di erent data attributes,
e.g., case complexity or task urgency, or these may be derived from raw data. in this paper we present an approach
and a supporting tool that allows to 1) evaluate overall process risk and 2) predict aggregate process outcomes based
on the analysis of information about process executions recorded in event logs (figure 1). as the Ô¨Årst step, we need
to be able to capture risky behaviours of a process. an input to our approach is a process model that models desired
process behaviour, i.e., behaviour that does not threaten the achievement of process goals. we consider deviations
from such process model as risky process behaviours. then, we need to identify such risky process behaviours in
process instances. to tackle this issue we use an existing technique for replaying an event log on a process model [6].
we devise two measures of overall process risk at a given point in time that are based on the identiÔ¨Åed risky process
behaviours. to track the evolution of the overall process risk over time we generate a time series of the overall process
3risk values, visualise them and annotate with automatically detected change points to facilitate the analysis for a user.
time series are often used to model the evolution of di erent phenomena [16]. (an example of the overall process
risk time series is depicted in figure 15.) to tackle our second research question, we generate overall process risk
time series for all processes whose behaviours a ect outcomes of a given process as described above; we then extract
aggregate process outcome time series from an event log, learn a regression model from past process executions (using
extracted overall process risk time series and aggregate process outcome time series), and predict aggregate process
outcome based on the current value of overall process risk. the approach is implemented as a plugin of the process
mining framework prom1. we demonstrate the approach using an illustrative example and evaluate it using synthetic
event logs. we also present a case study on the overall process risk evaluation using a real event log.
2. related work
a few approaches have been proposed that deal with risks in individual process instances. conforti et al. [5]
proposed a sensor-based approach for real-time monitoring of process risks. their approach provides a language for
deÔ¨Ånition of process risks, allows to monitor running process instances and to alert managers when the likelihood of
some risk in a process instance exceeds a given threshold. in other work, conforti et al. [3] proposed a method for
predicting risks in individual process instances by learning predictors from historical data. wickboldt et al. proposed
a framework that uses process execution data for risk assessment [37]. risk assessment modules of the framework use
information about risk events reported during past activity executions. grigori et al. proposed a method for exception
analysis, prediction, and prevention [9]. maggi et al. proposed a framework for predictive monitoring of business
processes that monitors business goals speciÔ¨Åed by users using linear temporal logic and attempts to predict the
likelihood of achieving these goals [20]. in our own previous work we presented an approach for identiÔ¨Åcation of
the risk of case delays [24, 25]. we deÔ¨Åned process risk indicators for case delays and methods for recognising
their presence in process instances. all these methods focus on risks, exceptions or constraints in individual process
instances, while in this paper we focus on overall process risk.
conforti et al. [4] proposed a recommendation system that recommends actions to resources (i.e., recommends
tasks and data values) that minimise risk across all running process instances. their recommendation system Ô¨Årst
estimates risks for individual process instances and then Ô¨Ånds an optimal distribution of tasks to resources which
‚Äúminimizes the weighted sum of overall execution time and overall risk across all running instances‚Äù [4]. our goal
on the other hand was not to provide an optimal distribution of tasks to resources, but to be able to evaluate overall
process risk based on given risky process behaviours, track the evolution of overall process risk over time, and predict
aggregate process outcomes based on the current value of overall process risk.
our approach is inspired by quality improvement programs such as six sigma and lean that originated in the
manufacturing world. six sigma uses statistical metrics to monitor the quality of outputs and lean is focused on
1www.promtools.org
4elimination of waste and reduction of variability [1]. multiple approaches to measuring process performance have
been proposed, e.g., balanced scorecard or statistical process control (spc) [17]. they aim to evaluate how well a
process performs based on a set of measures. spc methods typically focus on monitoring of ‚ÄúÔ¨Ånal product quality
variables‚Äù or di erent manufacturing process characteristics, e.g., temperature or pressure [19]. similar to quality
improvement programs and process performance evaluation approaches our method also reasons about an overall
process by analysing its characteristics, but unlike these approaches we focus on overall process risk rather than
quality or performance and we provide a method that can mine such risks from event logs.
in recent years multiple business intelligence tools have been proposed, however these typically focus on data,
rather than processes. an exception is the business process intelligence tool suite proposed by grigori et al. [10]
that helps to manage process execution quality. their tool suite allows users to analyse, predict, monitor, control
and optimise di erent process behaviors, e.g., they can ‚Äúexamine how many process instances per Ô¨Åscal quarter are
initiated by a certain user‚Äù or ‚Äúthe variance of the duration‚Äù of a service during weekends [10]. the tool also allows to
predict risks of ‚Äúabnormal behaviors‚Äù [10] for running process instances. like them we also analyse event logs and use
user-deÔ¨Åned process characteristics as inputs, but we focus on overall process risk, rather than di erent characteristics
of process quality or risks in individual process instances.
a framework for detecting process concept drifts was proposed by bose et al. [2]. in this article we also consider
the fact that processes change over time, but we focus on evaluation of overall process risk and prediction of aggregate
process outcomes, rather than detection of process changes.
in summary, the approach we present in this paper is novel because it focuses on the overall process risk and
aggregate process outcomes (rather than looking at risks in individual process instances, process performance or
quality), it is based on the analysis of information recorded in event logs, and it allows to track the evolution of overall
process risk over time.
3. approach
the main input to our approach is an event log that contains information about process executions. an event log
is a set of events with di erent attributes. we assume that events in a log have at least the following attributes: case
identiÔ¨Åer, task name, resource involved in the task, transaction type (e.g., start orcomplete ) and a time stamp. they
can also have di erent data attributes, e.g., cost or urgency. figure 2 depicts an example of an event log that contains
four events with attributes: case id, task, resource, time, type, andurgency . we can see, for example, that in an
urgent case with identiÔ¨Åer ‚Äò123‚Äô sara completed task ‚Äòinvestigate problem‚Äô in less than two hours.
another input to our approach is a process model that models desired process behaviour, i.e., behaviour that does
not lead to process risks. in this paper, we use petri nets with data [7]. we consider deviations from such process
models as risky process behaviours. to identify the presence of risky process behaviours in process instances, we
use an existing technique for replaying an event log on a process model [6] that allows us to identify discrepancies
5figure 2: example of an event log
between an event log and a process model. then we evaluate overall process risk based on the identiÔ¨Åed risky process
behaviours and produce a chart that depicts values of the overall process risk at di erent points in time, e.g., as shown
below in figure 15. in our method for predicting aggregate process outcomes, we extract overall process risk time
series as described above, extract aggregate process outcome time series, learn a regression model from past process
executions and predict aggregate process outcome by evaluating the current value of overall process risk. to evaluate
the prediction method, we learn the regression model from a training data set, apply the model to a test data set
and produce a chart depicting real and predicted aggregate process outcomes in the test data set, e.g., as shown in
figure 16.
to facilitate the description of our proposed methods in this section, we Ô¨Årst provide an illustrative example
(section 3.1), we then deÔ¨Åne the research problem (section 3.2), this is followed by the description of our method for
evaluating overall process risk (section 3.3), and we conclude with the description of our method for predicting an
aggregate process outcome based on the current value of overall process risk (section 3.4).
3.1. illustrative example
consider processes in a processing center that provides transaction processing services to banks. typical opera-
tions in such a processing center include: issuing of new credit cards, installation of new atm2and pos3terminals,
processing card transactions, clearing card transactions with payment systems, investigating and resolving incidents,
monitoring and preventing card transaction fraud, etc. the processes rely on human resources and they are exposed
to risks typical for a service desk environment: employees make mistakes leading to cost and quality issues, and cases
run over time or are re-opened. the same human resources can be involved in di erent processes. the number of
resources working in the processing center is constant, while the amount and type of work they perform can vary
signiÔ¨Åcantly. we will use two processes as examples: process add new terminal (figure 3a) and process investigate
incident (figure 3b). figures 3a and 3b depict desirable control Ô¨Çows for both processes (using bpmn notation [36]).
in real life deviations from these processes are possible and we will show examples of such deviations.
the Ô¨Årst process (figure 3a) speciÔ¨Åes the steps followed by engineers in the processing center to add information
about new terminals (atm or pos) on the host. the process starts when a client bank lodges a request for adding
a new terminal on the host (task lodge request ). then an engineer checks information provided by the bank (task
2automated teller machine
3point of sale
6figure 3: desirable Ô¨Çows for processes add new terminal (a) and investigate incident (b)
check form ) and adds information about the terminal on the host (task add on the host ). then information about the
terminal on the host is double-checked by another engineer (task approve ). for atm terminals network access should
be allowed (task network access ). then security keys are loaded on the host to enable safe communication with the
terminal (task load keys ). atm terminals should be started after this (task load atm ). for pos terminals tasks
network access andload atm are not performed. then an engineer checks the quality of the terminal installation
(task quality check ) and Ô¨Ålls in a form with the host speciÔ¨Åcations of the terminal which is sent to the bank (task
complete form ).
the second process (figure 3b) provides a high-level speciÔ¨Åcation of the steps followed by engineers to resolve
an incident. the process starts when a client bank lodges an incident (task lodge incident ), an engineer investigates
the incident and provides a solution (task investigate problem ), then the solution is checked (task check solution ) and
the incident is closed (task problem resolved ).
figures 3a and 3b depict desirable control Ô¨Çows for the processes. deviations from these processes are possible
in practice and they can be risky. for example, in process add new terminal taskapprove can be skipped, or it can be
completed by the same engineer that completed task add on the host . let us consider two scenarios.
3.1.1. scenario 1
in our Ô¨Årst scenario we look at examples of situations that may happen in process add new terminal and can cause
Ô¨Ånancial losses, i.e., we describe risky process behaviours that increase the risk of cost overrun (depicted in figure 4).
let us consider situations when task approve is skipped or tasks add on the host andapprove are executed by
the same engineer. as a result, the likelihood of mistakes in a terminal‚Äôs speciÔ¨Åcation on the host increases.
for example, a wrong currency may be assigned to an atm cassette or a terminal may be assigned to a wrong
terminal proÔ¨Åle on the host. consequently, incorrect amounts of money will be withdrawn which may cause
Ô¨Ånancial loss for a bank or for a client.
another example of a risky situation in the process is when an urgent case is not started within three hours after
7figure 4: scenario 1: risky process behaviours in process add new terminal
it was lodged by a bank as this breaks the existing service level agreement (sla) between the bank and the
processing center, which may result in a monetary penalty for the processing center.
such undesirable situations in processes are often known by domain or process experts and some companies may
even keep risk registers [22, 38]. (note that the process model depicted in figure 4 allows for execution of tasks
correct form andrestart which are not a part of desirable process Ô¨Çow depicted in figure 3a, but in this scenario we
do not consider the execution of these tasks risky.) let us now assume that a manager would like to know the overall
process risk with respect to the risky process behaviors that can cause Ô¨Ånancial losses and see how the risk evolves
over time. we tackle the problem of evaluation of overall process risk in section 3.3 and demonstrate how to evaluate
overall process risk for this scenario in section 4.1.
3.1.2. scenario 2
in the second scenario we look at process behaviours that can a ect outcomes of process add new terminal in
terms of time or quality (depicted in figure 5). we assume that the same resources can be involved in processes
add new terminal andinvestigate incident at the same time. moreover, one resource can be involved in multiple
instances of the two processes at a given moment of time. hence, when a resource is very busy working on a case
other instances of the two processes in which the resource is involved may get less attention resulting in delays or
mistakes. we assume that process analysts or domain experts can provide us with process behaviours that contribute
to more risky periods. let us consider examples of behaviours in process add new terminal that contribute to such
risky periods.
when a higher number of urgent cases arrive within a short period of time employees will focus on the urgent
cases, as a result other types of cases may be neglected.
in process add new terminal two types of cases are possible ‚Äì adding a new atm terminal or a new pos
terminal. adding atm terminals is more time-consuming as the process has more steps, hence, a higher
number of requests for adding atm terminals within a short period of time also contributes to ‚Äúbusy‚Äù periods.
another example is the execution of task correct form after task check form . if these two tasks are performed
in this order in a case, this means that the bank provided incomplete or erroneous information about a terminal
which is often associated with case delays or problems with the terminal in the future.
8figure 5: scenario 2: risky process behaviours in processes add new terminal (a) and investigate incident (b)
another risky behaviour is execution of task restart after task quality check which indicates that there were
problems with the terminal‚Äôs installation.
it may be known that some resources are often associated with delays or mistakes when executing certain tasks.
for example, here we consider the execution of task load keys by a given resource as a risky behaviour.
finally, when tasks investigate problem andcheck solution are repeated in process investigate incident it typi-
cally indicates a more complex incident as it was not resolved after the initial investigation. hence, repetitions
of these tasks also contribute to risky periods.
it is important to underline that situations like arrival of an urgent case or repetition of a task in a case are not
necessarily risky on their own, but multiple occurrences of such process behaviours within a short period of time can
be risky . after we have deÔ¨Åned risky process behaviours we would like to be able to predict aggregate outcomes
of process add new terminal (in terms of the process timeliness and erroneousness) by evaluating the current level
of overall process risk. we describe our method for predicting aggregate process outcomes in section 3.4 and in
section 4.1 we demonstrate how to predict aggregate process outcomes for scenario 2.
note that risky process behaviours described in scenario 1 and scenario 2 are related to di erent process per-
spectives: the control-Ô¨Çow perspective (skipping of task approve , repetition of tasks investigate problem andcheck
solution , execution of tasks restart orcorrect form ); the resource perspective (execution of tasks add on the host
andapprove by the same resource, execution of task load keys by a speciÔ¨Åc resource); the time perspective (a case
is not started within three hours after it was lodged); and the data perspective (a higher number of urgent cases arrive
or an atm has to be added on the host).
93.2. research problem
in this section we describe the research problem without reference to the particular technical solution (which will
be presented in later sections). we start by introducing notations for related concepts.
risky process behavior ,rpb, is a process behaviour displayed in a case that may pose a risk on its own or in
combination with other risky process behaviours in the same case or in other cases, and which can threaten the
achievement of goals by the case, by other cases of the same process or by other processes in a company. an example
of a risky process behaviour is the execution of a speciÔ¨Åc task in a case, e.g., execution of task restart in process add
new terminal (section 3.1). this task is only executed when there is a problem with a terminal and it can cause a delay
of the case or other cases processed by the same engineer. it also increases the chance of problems in the terminal‚Äôs
operations in the future. another example concerns the arrival of urgent cases. while arrival of one urgent case will
not usually be considered risky, arrival of multiple urgent cases within a short period of time increases the chance of
delays for other cases processed by the same resources, as the resources will give priority to the urgent cases. other
examples of risky process behaviours include: repetitions of certain tasks [12], involvement of certain resources who
have been involved in case failures before, and delayed execution of tasks.
3.2.1. basic notations
lett;t1;andt2be given points in time, t1¬§t2, and cbe a given case. then we introduce the following notations.
captq‚Äì the set of all cases active4at time t, i.e., cases that were started before or on tand completed after t.
capt1;t2q‚Äì the set of all cases active during the period rt1;t2q. analysts may want to look at cases that were started
or completed during the period, or were started before t1and completed after t2.
rpbpc;tq‚Äì the set of all risky process behaviours that happened in case cbefore time t.
rpbpc;tq¬î
cpcrpbpc;tq‚Äì the set of all risky process behaviours that happened in all cases in cbefore time t.
crpc;tq, orcase risk at time t, is a function of all risky process behaviours displayed in case cbefore time t, i.e.,
crpc;tqgprpbpc;tqq,crpc;tqpr 0;1s(gis a place-holder function; the function deÔ¨Ånition will be provided in a
later section, as here we deÔ¨Åne the research problem without reference to the particular technical solution).
oprptq, oroverall process risk at time t, is a function of all risky process behaviours displayed before time tin
the process instances that were active at time t, i.e., oprptq fprpbpcaptq;tqq,oprptqpr¬•0(fis a place-holder
function which will be deÔ¨Åned in a later section).
oprpt1;t2q,overall process risk during the period [ t1;t2) is a function of all risky process behaviours displayed in
the process instances that were active during the period [ t1;t2), i.e., oprpt1;t2q fprpbpcapt1;t2qqq,oprpt1;t2qp
r¬•0.
figure 6 depicts process instances, each consisting of a sequence of task instances a,b, etc., started at di erent
points in time and risky process behaviours (denoted by triangles). those risky process behaviours that contribute to
the overall process risk at time tare highlighted with circles.
4we consider the time of the Ô¨Årst event in a case as the case start time and the time of the last event in a case as the case completion time.
10figure 6: risky process behaviours contributing to overall process risk at time t
our Ô¨Årst goal can now be re-expressed as: how to evaluate overall process risk at a given point in time, opr ptq,
or during a given period, opr pt1;t2q?
3.2.2. notations for basic outcomes
letoutcomepcqdenote an outcome of case c, e.g., case duration, cost or the quality of output.
apoptq, oraggregate process outcome at a given point in time t, is a function of outcomes of all cases that were
active at time t.
letvdenote a given case outcome value, e.g., it can be used to specify the value of normal case duration or an
acceptable level of output quality.
apopt;vqdenotes aggregate process outcome at time tfor a given case outcome value v.
some examples of aggregate process outcomes include: the number of cases that produced low-quality outputs,
the fraction of delayed cases with respect to the total number of active cases, average case cost, or the number of cases
that received negative customer feedback.
notation apopt;rvsqis used as a generalisation of apoptqandapopt;vq, i.e., we use it in contexts that are
applicable to both apoptqandapopt;vq.
leteapopt;rvsqdenote the expected aggregate process outcome for cases active at time t.
our second goal can therefore be re-expressed as: how to predict expected aggregate process outcome at time t,
eapopt;rvsq, based on the value of overall process risk at time t, opr ptq?
3.3. a method for evaluation of overall process risk
an input to our method is information about risky process behaviours. domain experts often know which factors
can cause negative process outcomes. some companies keep risk registries specifying these risky behaviours. for
example, in a hospital emergency department the following process behaviours increase patients‚Äô health risks: task x-
rayis not performed for a patient with chest pain, an urgent patient is not attended to within 15 minutes after admission,
a patient record is not completed within an hour after the patient is discharged, etc. some of these behaviours may be
more risky than others, e.g., not performing task x-ray is more risky than not completing a patient‚Äôs record in time.
other examples of risky process behaviours were described in section 3.1.
our method uses as an input a process model that represents desirable (i.e., not risky) process behaviour. we
consider deviations in cases from the process model as risky process behaviours. we use petri nets with data [7]. petri
11figure 7: example of a petri net with data
nets with data can be translated /created from processes captured in well-known process modelling languages such as
bpmn [36] or epcs [32] if needed.
a petri net with data is ‚Äúa petri net in which transitions can write variables‚Äù [6]. it can be deÔ¨Åned as
npp;t;f;v;u;w;gq, wherepp;t;fqdeÔ¨Åne a petri net ( p‚Äì a set of places, t‚Äì a set of transitions,
f‚Äì the Ô¨Çow relation between transitions and places), v‚Äì a set of variables, u‚Äì a function that deÔ¨Ånes
the domain of each variable in v,w‚Äì a write function ‚Äúthat labels each transition with a set of write
operations‚Äù, g‚Äì a guard function that ‚Äúassociates a guard with each transition‚Äù [6]. a guard is a formula
over the process variables, that can use the logical operators conjunction, disjunction, and negation [6].
figure 7 depicts an example of a petri net with data which comprises the Ô¨Årst four tasks from the process de-
picted in figure 3a ( lodge request, check form, add on the host andapprove ). the table depicted in figure 7
speciÔ¨Åes variables written by each transition and transition guards. for example, transition approve writes variable
approve resource5and there is a guard associated with the transition: approve resource1addonthehost resource6.
modelling desired process behaviour as a petri net with data allows us to consider di erent process perspectives, such
as the control-Ô¨Çow, time, resource and data perspectives (the resource and time perspectives are modelled as data [6]).
to evaluate overall process risk at a given point in time tour method follows the steps:
1.select all cases c aptqthat were active at time t , i.e., started before tand completed after t.
2. for all cpcaptqdiscard all events that happened after time t , and let catptqdenote the set of the resulting
truncated cases.
3. for all cpcatptqevaluate case risks at time t ,crpc;tq.
we use an existing algorithm for replaying an event log on a petri net with data [6]. the algorithm Ô¨Ånds
optimal alignments of cases in an event log and a process model. figure 8 depicts an example of alignments
for two cases and the process model depicted in figure 7. in case 1 task approve was not executed, hence
the case deviates from the process model, in case 2 tasks add on the host andapprove were executed by the
5we add preÔ¨Åx [transition name] to data variable names to simplify tracking the transitions that write these data variables.
6if a prime symbol is used with a variable in a transition guard it refers to the value of the variable after occurrence of the transition [6].
12figure 8: example of alignments of two cases with a process model
same resource (mike) which does not satisfy the guard associated with task approve (figure 7), hence case 2
also deviates from the model. the guard associated with task check form is not violated in both cases as
the time di erence between tasks check form andlodge request is smaller than 3. the algorithm Ô¨Årst Ô¨Ånds
alignments of cases and a process model considering only the control-Ô¨Çow perspective, and then it applies
integer linear programming to Ô¨Ånd an optimal alignment that also considers other process perspectives, such
as data, resource and time. the algorithm uses the costs of deviations as an input and aims to Ô¨Ånd alignments
that minimise the cost. when replaying truncated cases it is important not to penalise improper completion of
cases, the algorithm provides for this possibility. when replaying truncated cases we cannot consider skipping
of a task as a risky process behaviour as the algorithm cannot distinguish between an incomplete case and a
skipped task. this is a limitation of our approach and a direction for future work. the possibility to use other
approaches to identify risky process behaviours from event logs could also be explored, e.g., the use of prom‚Äôs
ltl checker, an approach based on linear temporal logic, can be considered [34] or checking against a
declare speciÔ¨Åcation [23].
we replay all cases cpcatptqusing the algorithm which returns an optimal alignment for each such case.
risky process behaviours may have di erent levels of severity, hence our approach allows users to assign
dierent costs to di erent risky process behaviours (these costs are not the same as the costs used by the replay
algorithm). recall that we model risky process behaviours as deviations from a process model which represents
desirable process behaviour. such deviations include: execution of a task in a case that is not in the process
model, skipping of a task that is in the process model, non-writing of a variable by a task, and execution of a
task whose guard is false. if a guard is a conjunction of a few di erent constraints, our approach allows users
to assign di erent costs to these constraints. let costprpbqdenote the cost of risky process behaviour rpb. the
case risk of case cat time tis:
crpc;tq¬∞
rpbprpbpc;tqcostprpbq.
4.evaluate overall process risk at time t ,oprptq.
we use two measures:
1)mean process risk at time t:opr mptq¬∞
cpcatptqcrpc;tq{|catptq|
2)total process risk at time t:opr tptq¬∞
cpcatptqcrpc;tq
to get an idea of the evolution of overall process risk over time we generate a time series of process risk values
at dierent points in time (e.g., daily or weekly). time series are often used to model the evolution of di erent
13figure 9: the main idea of our method for evaluating overall process risk
phenomena [16]. as per formal deÔ¨Ånitions of sequence types in discrete mathematics, we model a time series as a
set of ordered pairs, where the Ô¨Årst element of each pair determines the position in the series (timestamp in our case)
and the second element is the value at that position. the time series sampling rate is an input parameter. selection of
the time series sampling rate is an important step that can a ect the analysis results. it is a well-known problem often
discussed in the literature [18]. let ts startbe the starting time point, ts slotsize be the sampling rate and ts sizebe the
number of time slots, then an opr time series can be deÔ¨Åned as:
tsoprtpt;oprptqq|tptts start its slotsize|ipt0;1; : : : ; ts size1uuu
figure 9 depicts the main idea of the method, in which the overall process risk is evaluated at the end of each time
slot. we can see, for example, that at time t2four cases are active and in one of the cases one risky process behaviour
occurred before t2(depicted as a triangle on top of a process instance). let the cost of this risky process behaviour,
costprpbq, be 1. then opr tpt2qis 1 and opr mpt2qis 0.25. we use notation oprptqwhen evaluating overall process
risk at time tin one process; when considering multiple processes, we denote overall process risk of process piat time
tasopr piptq.
the procedure for evaluating overall process risk during a given period of time, oprpt1;t2q, is similar to the
procedure for evaluation of overall process risk at a given point in time oprptqdescribed above with the following
dierences. during the Ô¨Årst step we select cases that were active during time slot pt1;t2q. analysts may choose to
look at cases that were completed during time slot pt1;t2q, started during time slot pt1;t2q, or were started before t1and
completed after t2. for the cases that were not completed by time t2analysts may choose to use complete cases or cases
that are truncated at time t2. this allows for Ô¨Çexibility when selecting which cases and events should be considered.
the possibility to evaluate overall process risk considering cases active during a given time slot is introduced for users
who are only interested in tracking the changes of overall process risk over time, while we evaluate overall process
risk at a given point in time if we want to use it for prediction of aggregate process outcomes.
3.4. a method for predicting an aggregate process outcome by evaluating overall process risk
in this section we describe our method for predicting aggregate process outcomes. as a part of the method we
generate overall process risk time series as described in section 3.3. we then extract aggregate process outcome time
14series and learn a prediction model as described below.
recall that an aggregate process outcome at an earlier time t,apopt;rvsq, is a function of outcomes of the cases
that started before tand were completed after t, and vdenotes a given case outcome value. examples of case outcomes
include: case duration, cost, quality of case output, customer feedback, etc. our method allows one to look at the
following types of aggregate process outcomes: 1) the number of cases with a given case outcome (‚Äú total‚Äù), 2) the
fraction of cases with a given case outcome (‚Äú fraction ‚Äù), and 3) the mean value of a given case outcome (‚Äú mean ‚Äù).
the value of a case outcome should be stored in a case attribute or in an attribute of a given task (a user input).
1. aggregate process outcome ( total):
apopt;vq|tcpcaptq|outcomepcqvu|, i.e., the number of cases that were active at time tand completed
with a given case outcome, e.g., the number of cases completed with quality level ‚Äúlow‚Äù.
2. aggregate process outcome ( fraction ):
apopt;vq|tcpcaptq|outcomepcqvu|{|captq|, i.e., the fraction of cases that were active at time tand
completed with a given case outcome, e.g., the fraction of cases completed with quality level ‚Äúhigh‚Äù.
3. aggregate process outcome ( mean ):
apoptq¬∞
cpcaptqoutcomepcq{|captq|, i.e., the mean value of a given case outcome for the cases that were
active at time t, e.g., mean case duration.
our method for predicting aggregate process outcomes by evaluating overall process risk uses the following steps:
1.generate aggregate process outcome time series.
for a given time series sampling rate we generate a time series that consists of the values of aggregate process
outcomes at each point in time. let ts startbe the starting time point, ts slotsize be the sampling rate, ts sizebe
the number of time slots, then an apo time series can be deÔ¨Åned as:
tsapotpt;apopt;rvsqq| tptts start its slotsize|ipt0;1; : : : ; ts size1uuu
2.generate overall process risk time series. for each process p1: : :pnwhose behaviours can a ect the outcomes
of a given process we generate the overall process risk time series as described in section 3.3 using the same
time series parameters as in step 1 of this method. let tsopr pidenote the overall process risk time series for
process pi.
3.learn a prediction model. for this purpose we use a method for non-parametric regression proposed by racine
and li [26]. it is a kernel-based method that works with continuous and categorical data and ‚Äúdo not impose any
functional form assumptions‚Äù [26]. the method is suitable for our purpose as it allows us to use multiple inde-
pendent variables and it does not make assumptions about data distribution. other multi-variate non-parametric
methods could have been used. the values of the overall process risk time series tsopr piare used as the val-
ues of independent variables, while the values of the aggregate process outcome time series tsapo are used
as the values of the dependent variable.
154.predict expected aggregate process outcome at time t. during the last step we use the values of the overall
process risk at time tfor each process pi,opr piptq, and the regression model Ô¨Åtted during step 3 to predict the
expected aggregate process outcome at time t,eapopt;rvsq.
figure 10 depicts the idea of our method for an example when the outcomes of process p1are aected by risky
process behaviours in processes p1andp2. for example, let apopt;vqbe the number of cases that were active at time
tand completed later with quality level ‚Äúlow‚Äù ( v=‚Äúlow‚Äù; such ‚Äòfailed‚Äô cases are marked by shields with crosses
in figure 10). we can see that at time t2four cases were active in process p1and one of the cases completed later
with a ‚Äúlow‚Äù quality, hence apopt2;‚Äúlow‚Äùqis 1. the expected aggregate process outcome for process p1at time
tnis predicted based on the values of the overall process risk for processes p1andp2at time tnusing the regression
model that was learned from past values of the overall process risk for processes p1andp2(independent variables)
and the past values of the aggregate process outcome for process p1(the dependent variable). a manager may wish
to be alerted when a predicted aggregate process outcome exceeds some threshold, and he may take some mitigation
actions, e.g., prioritise tasks assigned to employees or outsource some process operations.
4. validation
we implemented our approach as a plugin ‚Äúprocess risk evaluation‚Äù7of the process mining framework prom 68.
the plugin takes event logs in the xes format9and process models in data-aware pnml format10as input. it allows
us to evaluate overall process risk at di erent points in time, produce a chart illustrating the overall process risk time
series, and automatically detect change points [28], i.e., points in time when the overall process risk changed. the
plugin also allows us to extract overall process risk time series and aggregate process outcome time series from event
logs (for both training and test data sets), to learn a prediction model using time series extracted from a training data
set and to produce and visualise predictions for a test data set. the plug-in calculates r-squared [11], as this measure
is commonly used in statistics to evaluate the goodness of predictions. for change point detection and regression
analysis we use r11. our plug-in accesses r‚Äôs functionality using the jri java /r interface12. to detect change points
we use the cpm framework that allows us to detect changes in location, in scale or arbitrary distributional changes
and which is implemented as r package cpm13. for regression analysis we use r package np14. to evaluate logical
expressions we use the mvel library15, and to visualise the results of the analysis we use the jfreechart library16.
7http://yawlfoundation.org /risk/Ô¨Åles/processriskevaluation.7z
8www.promtools.org /prom6 /
9http://www.xes-standard.org /
10http://www.pnml.org /
11http://www.r-project.org /
12http://rforge.net /jri/
13http://cran.r-project.org /web/packages /cpm/vignettes /cpm.pdf
14http://cran.r-project.org /web/packages /np/index.html
15http://mvel.codehaus.org /
16http://www.jfree.org /jfreechart /
16figure 10: predicting aggregate process outcome by evaluating overall process risk
17we Ô¨Årst validate our method for evaluation of the overall process risk using a synthetic event log created for the
process from scenario 1 (section 3.1). in the synthetic event log we introduce all risky process behaviours from
scenario 1. we vary the probability of these risky process behaviours in di erent parts of the event log. we then
apply our method for evaluation of the overall process risk to the event log and check if the resulting charts reÔ¨Çect
the changes we introduced in the log. we then validate our method for prediction of aggregate process outcomes
using synthetic event logs created for the two processes from scenario 2 (section 3.1). we introduce all risky process
behaviours from scenario 2 varying their probabilities in di erent parts of the event logs. the probability of negative
process outcomes depends on the value of overall process risk at a given time. we created three variants of the event
logs: the probability of negative process outcomes during risky periods is high in variant 1, it is lower in variant 2
and it does not depend on the overall process risk in variant 3. for each variant we generated two sets of event logs
used as a training and a test data set. we then applied our method for predicting aggregate process outcomes to the
event logs. the regression model was learned using a training data set and it was applied to a test data set to generate
predictions. to evaluate the goodness of the predictions we check the values of r-squared and charts depicting real
and predicted values. below we describe in details the simulation procedure used to create the synthetic event logs,
the setup of the experiments and discuss the results.
4.1. evaluation of the approach using synthetic event logs
we created synthetic event logs for both scenarios described in section 3.117using cpn tools18. in cpn tools
we can model processes using coloured petri nets which allow us to specify data types for places and attach data
values to tokens [15].
4.1.1. scenario 1: evaluating overall process risk
we generated an event log for the process depicted in figure 4. we introduced three risky process behaviours from
scenario 1 described in section 3.1: task approve is skipped in some cases, task check form is completed later than
three hours after the completion of task lodge request in some urgent cases, and tasks add on the host andapprove
in some cases are performed by the same resource. for the purposes of this evaluation we assume that the occurrence
of a risky process behaviour follows the bernoulli distribution with a given probability. the probability of these risky
process behaviours di ers in di erent parts of the event log. it is 10% from time t0tot1(time points t0‚Äìt3are depicted
in figures 12 and 13), 20% from time t1tot2, 50% from time t2tot3, and 80% after time t3. time between case
arrivals follows an exponential distribution19with a mean value of three hours. only events with transaction type
complete were recorded in the event log; we Ô¨Åltered out incomplete cases. the resulting event log contains 993 cases
with an average case duration of 35 hours.
17the synthetic event logs and the cpn models can be downloaded from http: //yawlfoundation.org /risk/Ô¨Åles/syntheticdata.7z
18http://cpntools.org /
19exponential distributions describe the time between events in a poisson process; poisson distribution is often used to model arrival rates in
queueing theory.
18we used the process model depicted in figure 11a to replay the event log. the process model does not allow skip-
ping task approve , hence in all cases in which the task was skipped the risky process behaviour is detected. in order to
identify the other two risky process behaviours we added the following annotations to the process model. transition
(i.e., task) add on the host writes string variable addonthehost resource , transition approve writes string variable
approve resource , transition lodge request writes string variable urgency andfloat variable lodgerequest time ,
and transition check form writes float variable checkform time .
the following guard was added to task approve :approve resource1addonthehost resource
task check form was annotated with the guard:
ppurgency‚Äúhigh ‚Äùq^p checkform time1¬§p lodgerequest time 3qqq_p urgency‚Äúnormal ‚Äùq
the plugin pre-processes a log and adds an attribute ( rtasknamestime ) to events that speciÔ¨Åes the elapsed time
since the beginning of the case in a given time unit, e.g., in hours or days. we used an hour as the value of the time
unit in the experiments reported in this section. one day was used as the time series sampling rate and we evaluated
daily values of the overall process risk with respect to cases completed during the day. the total duration was 130
days. when replaying event logs on process models one needs to specify the costs of deviations used by the replay
algorithm to create optimal alignments. we used cost 1 for all deviations. we also need to specify the second type of
costs that are used to evaluate case risks, di erent costs can be used for di erent types of risky process behaviours.
we used cost 1 for all types of risky process behaviours as we do not consider that some behaviours are more risky
than others in this scenario.
the plugin generated an overall process risk time series with respect to the three risky process behaviours. con-
sider an example when Ô¨Åve cases are completed during a time slot. in one urgent case task approve was not executed
and task check form was completed six hours after the completion of task lodge request , in two cases the same
resource executed tasks add on the host andapprove , and two other cases completed without any risky process be-
haviours. the cost of each risky process behaviour is 1, hence the total value of overall process risk for this time slot
is 4, while the mean value of overall process risk is 0.80.
figure 12 depicts the mean values ( opr mptq) of the overall process risk and figure 13 depicts the total values
(opr tptq) of the overall process risk. red vertical lines mark the points in time when the changes in the risky process
behaviours were introduced and diamond shapes mark change points automatically detected by the plug-in. we can
observe that both charts reÔ¨Çect the changes in the probabilities of the three risky process behaviours we introduced in
the log. the plug-in precisely detected the change point at time t2, and the other two changes at times t1andt3were
pinpointed in the log a few days earlier or later.20we demonstrated in this section that our Ô¨Årst method presented in
this article can successfully evaluate overall process risk. the changes in probabilities of risky process behaviours that
were introduced in the synthetic event log can be clearly observed on the charts depicting overall process risk time
20note, that the change point detection method uses complete time series to estimate the change points. as the method is not 100 % precise, the
change points can be detected earlier or later than the actual change was introduced. the precision also depends on the test used and the sensitivity
threshold (input parameters). we looked at changes in location, but other tests can be used, e.g., a test that detects changes in scale.
19figure 11: petri nets used to replay event logs: a) scenario 1, process add new terminal ; b) scenario 2, process add new terminal ; c) scenario 2,
process investigate incident .
20figure 12: evolution of overall process risk from scenario 1 - mean risk ( opr mptqon the vertical axis)
figure 13: evolution of overall process risk from scenario 1 - total risk ( opr tptqon the vertical axis)
series produced by the plug-in. furthermore, the plug-in can annotate such charts with change points to facilitate the
analysis for a user.
4.1.2. scenario 2: predicting aggregate process outcomes using overall process risk
in this experiment we generated a set of event logs representing the processes depicted in figures 5a and 5b using
cpn tools and following the procedure described below. to simulate the two processes we used the petri net depicted
in figure 1421. the net represents the two processes (process investigate incident on the left and process add new
terminal on the right) that share one dedicated place labeled as total risk . place total risk contains one token (of type
integer ) that stores the current value of overall process risk. whenever a risky process behaviour happens in process
add new terminal (i.e., an urgent case arrives, an atm terminal needs to be added on the host, task correct form is
executed, task restart is executed or task load keys is performed by a ‚Äúrisky‚Äù resource) the value of the token in place
21the model depicted in figure 14 is an abstraction (a number of data annotations have been removed), the complete speciÔ¨Åcation of the model
used in the simulation can be downloaded from http: //yawlfoundation.org /risk/Ô¨Åles/syntheticdata.7z.
21total risk is increased by 1. when tasks investigate problem andcheck solution are repeated in process investigate
incident the value of the token in place total risk is increased by 2. we also created two dedicated places for each
process, case risk andincident case risk , that keep track of the risk values contributed by each case to place total
risk. when an instance of any of the processes is completed, we decrease the value of the token in place total risk
by the risk value added by the process instance. hence, at any given point in time the value of the token in place
total risk represents the current value of the overall risk with respect to all running instances of the two processes.
instances of process add new terminal can be completed without any issues or delays (in which case the value of
attribute outcome of task complete form is set to 0), or they can be completed with a negative outcome, e.g., the
terminal is not working or it was added on the host with a delay (in which case the value of attribute outcome is set to
1). the probability of a negative case outcome depends on the value of the token in place total risk at the moment of
the case‚Äôs completion.
the time between case arrivals in both processes follows an exponential distribution with a mean value of three
hours. we set the probability of occurrence of the risky process behaviours as follows:
it was set to 10% during the Ô¨Årst 10000 steps (i.e., transition Ô¨Årings) of the simulation process (during this
period the value of the token in place total risk was below 15);
it was set to 40% during the next 5000 steps of the simulation (the value of the token in place total risk varied
from 15 to 45 during most of this time); and
it was set to 60% during the last 5000 steps of the simulation (the value of the token in place total risk exceeded
45 during most of this time).
we refer to these three di erent risk levels as normal, medium andhigh .
we generated three variants of event logs with di erent probabilities of negative case outcomes for each risk level
as described in table 1. in the Ô¨Årst variant during periods with normal risk level (i.e., when the value of the token in
place total risk is less than 15) the probability of a negative case outcome is 5%, while during periods with a medium
orhigh risk level it is 40% and 60% correspondingly. in the second variant the probability of negative case outcomes
during the period with normal risk level is also 5%, while during periods with medium andhigh risk levels it is 20%
and 30% respectively. in the third variant the probability of negative case outcomes does not depend on the risk level
and it is always 25%. for each variant we generated two event logs ‚Äì one used to learn a regression model (a training
data set) and the other one used for getting the predictions (a test data set). as a result of the simulation we created 12
event logs (six for process add new terminal and six for process investigate incident ). table 2 speciÔ¨Åes characteristics
of the event logs.
to evaluate the overall process risk in each process we used the process models depicted in figures 11b and 11c.
skipping of task approve is not considered as a risky process behaviour in scenario 2, hence the model in figure 11b
allows to skip the task (a silent transition). in the model of process add new terminal transition (i.e., task) lodge
22figure 14: simulation model for the two processes from scenario 2
23table 1: probability of negative case outcomes for di erent risk levels
normal risk medium risk high risk
variant 1 5% 40% 60%
variant 2 5% 20% 30%
variant 3 25% 25% 25%
table 2: characteristics of simulated event logs for scenario 2
event log number of cases mean case duration
add new terminal , variant 1, training set 1171 49.7 hours
add new terminal , variant 1, test set 1172 49.7 hours
investigate incident , variant 1, training set 1095 22.6 hours
investigate incident , variant 1, test set 1124 22.5 hours
add new terminal , variant 2, training set 1162 45.9 hours
add new terminal , variant 2, test set 1136 46.3 hours
investigate incident , variant 2, training set 1154 22.2 hours
investigate incident , variant 2, test set 1203 22.2 hours
add new terminal , variant 3, training set 1164 48.8 hours
add new terminal , variant 3, test set 1168 48.3 hours
investigate incident , variant 3, training set 1106 22.9 hours
investigate incident , variant 3, test set 1127 22.4 hours
24figure 15: example of total process risk ( opr tptqon the vertical axis) in process investigate incident , variant 1, training set
request writes string variables urgency andterminal , and transition load keys writes string variable resource . to
transition lodge request we added the guard: urgency1‚Äúurgent ‚Äù^terminal1‚Äúatm ‚Äù; to transition load keys
we added the guard: resource1‚Äúrisky ‚Äù22. when an urgent case arrives or an atm has to be added on the host the
guard of task lodge request will evaluate to false. when task load keys is executed by resource risky the task‚Äôs
guard evaluates to false. the model of process add new terminal (figure 11b) does not specify tasks correct form
andrestart , hence executions of these tasks are deviations from the model and are treated as risky process behaviours.
the model of process investigate incident (figure 11c) does not allow repetitions of tasks investigate problem and
check solution , hence their repetitions in cases will be considered as deviations.
when replaying event logs on process models we need to specify the costs of deviations used by the replay
algorithm to create optimal alignments and the costs that are used to evaluate case risks. we used cost 1 for all
deviations and for all types of risky process behaviours as we do not consider that some behaviours are more risky
than others in this particular scenario. the guard of task lodge request is a conjunction of two constraints: we check
if a terminal is not atm and if urgency is not high . we assign cost 1 to each constraint, hence if both constraints are
not satisÔ¨Åed the value of that case‚Äôs risk is increased by 2, if only one constraint is not satisÔ¨Åed, the value of the case‚Äôs
risk is increased by 1.
we looked at the daily values of the overall process risk (total risk measure) during 120 days. the overall process
risk at each point in time was evaluated considering only those parts of cases that were completed before this point in
time. hence, when replaying the event logs we did not penalise improper case completions. we used the number of
cases completed with a negative outcome (i.e., those cases in which the value of attribute outcome is set to 1) as the
measure of aggregate process outcome and we considered only completed cases when creating the aggregate process
outcome time series. we used training data sets to learn regression models for each variant of event log and we then
used test event logs to generate predictions. the plugin generated charts depicting overall process risk time series and
a chart that depicts real and predicted values of aggregate process outcomes. as an example, figure 15 depicts the
evolution of total process risk for process investigate incident in the training set of variant 1.
figures 16, 17 and 18 depict real and predicted aggregate process outcomes (i.e., the number of cases completed
with a negative case outcome) for variants 1, 2 and 3 respectively. we can observe that predicted values of aggregate
22we used name risky to label the resource who often makes mistakes or causes delays when executing task load keys .
25figure 16: predicted and real aggregate process outcome (the number of cases completed with a negative outcome, on the vertical axis), variant 1
figure 17: predicted and real aggregate process outcome (the number of cases completed with a negative outcome, on the vertical axis), variant 2
figure 18: predicted and real aggregate process outcome (the number of cases completed with a negative outcome, on the vertical axis), variant 3
26table 3: coe cient of determination ( r-squared ) for training and test data sets
training data set test data set
variant 1 0.89 0.81
variant 2 0.80 0.66
variant 3 0.26 0.05
process outcomes are close to the real values for variant 1, i.e., for the event log with higher probabilities of negative
case outcomes (40% and 60%) during risky periods (starting after march 15, e.g., depicted in figure 15). predicted
and real values of aggregate process outcomes di er more for variant 2 for which the probability of negative case
outcomes during risky periods was 20% and 30%. for variant 3 we can observe that predictions are not close to the
real values which is the expected outcome, as process outcomes and risks do not correlate in this event log. this
is also reÔ¨Çected by the r-squared statistics provided in table 3 for di erent variants for both training and test data
sets. as expected, r-squared values are the highest for variant 1 (0.81 for the test set), they are lower for variant 2
(0.66 for the test set), and they are very low for variant 3 (0.05 for the test set). the experiment outcomes depicted
in figures 16, 17 and 18 and conÔ¨Årmed by r-squared values in table 3, show that our method can precisely predict
aggregate process outcomes if risky process behaviours speciÔ¨Åed by business analysts a ect process outcomes (e.g.,
in variants 1 and 2).
through these experiments we showed how to use our approach to evaluate overall process risk and to predict
aggregate process outcomes. we demonstrated di erent types of risky process behaviours that relate to the control-
Ô¨Çow, resource, data and time process perspectives which can be considered by the approach. we showed that the plugin
can evaluate overall process risk and identify changes that we introduced in synthetic event logs and we showed that
the approach can be used to predict aggregate process outcomes. as expected, we could observe that the quality of
predictions depends on the ‚Äúpredictive power‚Äù of risky process behaviours speciÔ¨Åed by process analysts. if the risky
process behaviours a ect process outcomes, we can get precise predictions (as in variant 1 in scenario 2). if they do
not actually a ect process outcomes (as in variant 3 in scenario 2), we learn from data a regression model with a poor
ability to predict process outcomes.
4.2. case study based on a real event log
in addition to the evaluation experiments conducted with synthetic logs, we evaluated our proposed approach
using an event log from an australian company. the work is presented in an anonymised manner in accordance with
the conÔ¨Ådentially agreement signed between the parties.
the business context of the organisation is as follows. the company provided an event log of a process for one
of their core businesses. the process is system-driven but employees are given Ô¨Çexibility to do their work. the log
covers all cases for a period of two years. the data was collected from di erent information systems, anonymised and
27figure 19: a) a simpliÔ¨Åed process model created to detect the risky behaviour of skipping task cfor cases of type a(rpb 1 ), b) a simpliÔ¨Åed
process model created to detect the risky behaviour of not completing task dwithin 24 hours ( rpb 2 ).
cleaned up based on input from process experts. it was an iterative process that involved a few meetings with company
representatives during which we discussed the data requirements and agreed on the data attributes used in the analysis.
after this initial data pre-processing the resulting event log contained 17,750 cases and more than 700,000 events. in
addition to the information contained in the log, the company also provided its risk register. as expected, some of
the risks identiÔ¨Åed in the risk register are not process-related. the researchers also had discussions with the domain
expert to identify a set of process-related risks that could potentially be detected using our approach. two di erent
types of risky process behaviours captured in the company‚Äôs risk register were then selected for our experiments. we
refer to them here as risky process behaviour 1 ( rpb 1 ) and risky process behaviour 2 ( rpb 2 ).
we applied our method for overall process risk evaluation described in section 3.3 to the event log and extracted
overall process risk time series, tsopr , considering these two risky process behaviours separately. for both risky
process behaviours we evaluated weekly values of overall process risk (both total risk and mean risk measures) con-
sidering cases that were completed during the week. below we describe the two risky process behaviours, process
modeling and further data pre-processing that was conducted, and discuss the evaluation procedure and the results.
rpb 1 manifests itself when a speciÔ¨Åc task, referred to here as task c, is not executed in a case of a speciÔ¨Åc type,
referred to here as type a(case type is recorded in the event log as a case attribute, similar to case urgency in the
example in section 3.1). we Ô¨Åltered out events that are not required to evaluate overall process risk with respect to
rpb 1 and only used events related to the beginning and the end of a case, and task c. we pre-processed the log to
create two di erent case start events ‚Äì task ais recorded as the start event for cases of type a, and task bis recorded
as the start event for cases of other types. we created a process model depicted in figure 19a that was used to evaluate
28figure 20: overall process risk with respect to rpb 1 : a) total risk, opr tptq, on the vertical axis; b) mean risk, opr mptq, on the vertical axis.
overall process risk with respect to rpb 1 . the process model does not allow skipping task cin cases that start with
taska, hence rpb 1 is detected in all cases in which task awas executed but task cwas skipped. figure 20 depicts
weekly values of overall process risk corresponding to rpb 1 . we can observe that the values of overall process risk
with respect to rpb 1 are typically very low which means that task cis not often skipped in cases of type a.
rpb 2 manifests itself when the time di erence between request andcomplete events related to a speciÔ¨Åc task,
referred to here as task d, exceeds 24 hours. we Ô¨Åltered the event log and only used events that correspond to the
beginning and the end of a case, and complete events for task d(it can be performed multiple times in a case). we
pre-processed the log, adding to each instance of task ddata attribute delayed whose value is 1 if the time di erence
between the request andcomplete events of task dis higher than 24 hours, and 0 otherwise. figure 19b shows the
process model that was used to evaluate overall process risk with respect to rpb 2 . task dwas annotated with a
guard (not shown in figure 19b) that checks whether the value of data attribute delayed of task dis equal to 0, hence
violations are detected in all cases in which the value of the attribute is 1.
figure 21 depicts weekly values of overall process risk corresponding to rpb 2 . the values of overall process
risk with respect to rpb 2 (figure 21) are typically higher than overall process risk values for rpb 1 (figure 20) and
they also change over time. the increase in overall process risk with respect to rpb 2 starting from february 2014
(figure 21a) may be related to changes in the company‚Äôs process that were implemented at that time, while the causes
for the earlier variations of the risk require further investigation.
we also investigated which resources might be contributing to the task delays ( rpb 2 ). in order to be able to
do this we created Ô¨Åve separate event logs each only containing cases in which a given resource completed task d.
this was done for Ô¨Åve resources, referred to here as r1‚Äìr5 , that most frequently executed task d. as an example,
29figure 21: overall process risk with respect to rpb 2 : a) total risk, opr tptq, on the vertical axis; b) mean risk, opr mptq, on the vertical axis.
figure 22 shows total process risk values associated with resources r1, r2 andr3. we can observe that total risk
values increase for resource r1till december 2013 and that they decrease afterwards, the values of the overall process
risk associated with resource r3increase during the Ô¨Årst part of 2013 and they decrease afterwards, while the total
process risk associated with resource r2follows a relatively stable pattern starting from december 2012.
figure 23a and figure 23b show total and mean values of the overall process risk associated with resource r4.
while the total risk values are increasing, the mean risk values are decreasing. this means that the increase in the
number of instances of task dthat are completed by resource r4with a delay is related to an increase in the total
number of instances of task dcompleted by r4. while the total number of delayed tasks completed by resource r4
increases, the fraction of delayed tasks among those completed by resource r4decreases.
as the real-life event log used does not contain information that is necessary to identify other risks from the
company‚Äôs risk register, we did not evaluate overall process risk with respect to all risky process behaviours. the
log also does not contain information about organisational outcomes that can be a ected by the risks, hence we did
not apply our method for predicting aggregate process outcomes based on the current value of overall process risk.
evaluation of our method for predicting aggregate process outcomes with a real data set is a direction for future work.
the case study Ô¨Åndings support the practical application of our approach in an organisational setting. by using
our approach, we are able to observe trends and detect the di erences in the overall process risk. we showed that
the approach can help us to track the amount of overall process risk associated with di erent resources (this is only
possible if a risky process behaviour can be linked to a resource, as was the case with rpb 2 ). we demonstrated how
considering di erent measures of overall process risk (total risk and mean risk) can help us to investigate causes of
risk variations over time (e.g., the change in overall process risk associated with resource r4).
30figure 22: overall process risk (total risk, opr tptq, on the vertical axis) with respect to rpb 2 associated with resources r1, r2 andr3
figure 23: overall process risk with respect to rpb 2 associated with resource r4a) total risk, opr tptq, on the vertical axis b) mean risk, opr mptq,
on the vertical axis.
315. assumptions, limitations and future work
we assume that companies know risks which threaten their business processes. factors that can cause negative
process outcomes are often known by domain experts and process analysts. some companies keep risk registries that
specify such risks [22, 38].
our approach is based on the analysis of process execution data recorded in event logs. corporate information
systems record various information about process executions which can be transformed into event log format23[33].
we assume that event log data is up-to-date and accurately captures process execution history. types of information
required for the analysis depend on the types of process risks. for example, if we would like to consider as a risky
process behaviour an activity delay, we would need to use a log which contains the following event attributes: case
identiÔ¨Åer, activity name, time stamp and transaction type (both start andcomplete ). other risky process behaviours
may require richer event logs, e.g., logs that contain information about resources and di erent data attributes. our
method for the prediction of aggregate process outcomes requires information about case outcomes to be recorded in
an event log. we assume that an activity can be completed by one resource24.
a limitation of our approach is that skipping of an activity cannot be used as a risky process behaviour if the
user wishes to evaluate overall process risk in real time, in which case we can only analyse events up to the present,
which inevitably means that the algorithm cannot distinguish between an incomplete case and a skipped activity.
compensating for this unavoidable limitation is a direction for future research. another limitation of our approach is
that it can only consider one process outcome. to consider multiple process outcomes using our approach it would be
necessary to pre-process an event log and annotate cases with values resulting from a combination of di erent process
outcomes, e.g., a combination of time and quality. the possibility to consider multiple process outcomes is another
direction for future work.
we evaluated our method for predicting aggregate process outcomes using synthetic event logs. evaluation of
the method with a real data set is a direction for future work. another direction for future work is evaluation of
the prediction method for processes whose behaviour and outcomes are a ected by seasonal Ô¨Çuctuations. we showed
examples of risky process behaviours related to di erent process perspectives which can be identiÔ¨Åed by our approach,
e.g., the execution of a speciÔ¨Åc activity, repetition of an activity, execution of an activity by a speciÔ¨Åc resource,
completion of an activity with a delay, or execution of an activity with a speciÔ¨Åc data attribute. a systematic study of
dierent types of risky process behaviours which can and cannot be identiÔ¨Åed by our approach could be a direction for
future research. we devised two measures of overall process risk, total risk and mean risk. deÔ¨Ånition and evaluation
of other measures of overall process risk, e.g., median risk or risk variation, could be another direction for future work.
23we use the xes standard for event log data (http: //www.xes-standard.org /).
24this limitation is imposed by the xes standard for event log data which only allows one resource per event (current version 2.0).
326. conclusions
managing risks in business processes is a key concern for most companies. existing approaches to process risk
identiÔ¨Åcation typically focus on risks in individual process instances. however, processes often run in complex en-
vironments and outcomes of one process instance can be a ected by events that are external to the process instance.
moreover, managing risks in individual process instances can be too costly. insu cient attention has been paid to the
problem of evaluation of overall process risk based on the analysis of event logs.
in this paper we presented a novel approach that allows us to 1) evaluate overall process risk at a given point in
time considering di erent risk factors across all running process instances; and 2) predict aggregate process outcomes
based on the current value of overall process risk. the approach is based on the analysis of information about process
executions recorded in event logs. an input to our approach is a process model that models the desired process be-
haviour (a petri net with data) and deviations from such a process model are considered as risky process behaviours.
to identify such risky process behaviours we use a technique for replaying event logs on a process model [6]. we
presented two measures of overall process risk based on the identiÔ¨Åed risky process behaviours. to track the evolution
of overall process risk and facilitate the analysis for a user, we extract overall process risk time series and annotate it
with detected change points. to predict aggregate process outcomes, we apply multivariate non-parametric regression
to the overall process risk time series (independent variables) and aggregate process outcome time series (the depen-
dent variable) extracted from an event log. we evaluated our approach using synthetic event logs. we showed that the
approach can evaluate overall process risk and predict aggregate process outcomes (provided that the risky process
behaviours considered a ect the outcomes of the process). we also conducted a case study using a real event log from
an australian company. in the case study we showed how our approach can help to track evolution of overall process
risk, identify changes, and investigate causes of risk variations by using di erent measures of overall process risk.
in summary, while it may not be possible to eliminate all process risks during the process design stage, and it is
impossible to predict changes to processes imposed by the external environment, it is important to monitor the level
of overall process risk and its e ect on process outcomes. the approach presented in this paper allows for such an
analysis. when a signiÔ¨Åcant change in overall process risk is identiÔ¨Åed or an adverse aggregate process outcome
is predicted, a manager may wish to be alerted and may take mitigation actions, e.g., adding resources from other
processes, prioritising tasks assigned to employees or outsourcing some tasks to partners.
acknowledgments
this research is a part of and funded by the ‚Äúrisk-aware business process management‚Äù project (arc dp110100091)
for which ethical clearance was obtained (approval number: 1100000288). we used an anonymised data set in our ex-
periments, this research is exempt from ethical review in conformity with the national statement on ethical conduct
in human research (2007)25.
25https: //www.nhmrc.gov.au /guidelines-publications /e72
33references
[1] edward d arnheiter and john maleye . the integration of lean management and six sigma. the tqm magazine , 17(1):5‚Äì18, 2005.
[2] j.c.r.p. bose, w.m.p. van der aalst, i. zliobaite, and m. pechenizkiy. dealing with concept drifts in process mining. ieee transactions on
neural networks and learning systems , 25(1):154 ‚Äì 171, 2013.
[3] ra aele conforti, massimiliano de leoni, marcello la rosa, and wil mp van der aalst. supporting risk-informed decisions during busi-
ness process execution. in camille salinesi, moira c. norrie, and oscar pastor, editors, advanced information systems engineering, 25th
international conference, caise 2013, valencia, spain, june 17-21, 2013. proceedings , volume 7908 of lncs , pages 116‚Äì132. springer,
2013.
[4] ra aele conforti, massimiliano de leoni, marcello la rosa, wil mp van der aalst, and arthur hm ter hofstede. a recommendation system
for predicting risks across multiple business process instances. decision support systems , 69:1‚Äì19, 2015.
[5] ra aele conforti, giancarlo fortino, marcello la rosa, and arthur hm ter hofstede. history-aware, real-time risk detection in business
processes. in r. meersman et al., editor, on the move to meaningful internet systems: otm 2011, lncs , volume 7044, pages 100‚Äì118.
springer, 2011.
[6] massimiliano de leoni and wil mp van der aalst. aligning event logs and process models for multi-perspective conformance checking: an
approach based on integer linear programming. in florian daniel, jianmin wang, and barbara weber, editors, business process management,
11th international conference, bpm 2013, beijing, china, august 26-30, 2013 , volume 8094 of lncs , pages 113‚Äì129. springer, 2013.
[7] massimiliano de leoni and wil mp van der aalst. data-aware process mining: discovering decisions in processes using alignments. in
proceedings of the 28th annual acm symposium on applied computing , pages 1454‚Äì1461. acm, 2013.
[8] peter edwards and paul bowen. risk management in project organisations . unsw press, 2004.
[9] d. grigori, f. casati, u. dayal, and m.c. shan. improving business process quality through exception understanding, prediction, and
prevention. in 27th international conference on very large databases (vldb 2001), rome, italy, september 11-14, 2001 , pages 159‚Äì168.
morgan kaufmann publishers inc., 2001.
[10] daniela grigori, fabio casati, malu castellanos, umeshwar dayal, mehmet sayal, and ming-chien shan. business process intelligence.
computers in industry , 53(3):321‚Äì343, 2004.
[11] damodar gujarati. basic econometrics . the mcgrawhill companies, 2004.
[12] neil hardie. the prediction and control of project duration: a recursive model. international journal of project management , 19(7):401‚Äì409,
2001.
[13] international organization for standardization. risk management: vocabulary =management du risque: vocabulaire (iso guide 73) . geneva,
2009.
[14] a.k. jallow, b. majeed, k. vergidis, a. tiwari, and r. roy. operational risk analysis in business processes. bt technology journal ,
25(1):168‚Äì177, 2007.
[15] kurt jensen, lars michael kristensen, and lisa wells. coloured petri nets and cpn tools for modelling and validation of concurrent
systems. international journal on software tools for technology transfer , 9(3-4):213‚Äì254, 2007.
[16] d. cryer jonathan and kung-sik chan. time series analysis: with applications in r . springer, 2008.
[17] peter kueng. process performance measurement system: a tool to support process-based organizations. total quality management , 11(1):67‚Äì
85, 2000.
[18] j. lij jt, p. papapetrou, and k. puolamaki. size matters: finding the most informative set of window lengths. in peter a. flach, tijl de
bie, and nello cristianini, editors, machine learning and knowledge discovery in databases, european conference, ecml pkdd 2012,
bristol, uk, september 24-28, 2012 , pages 451‚Äì466. springer, 2012.
[19] jf macgregor and t kourti. statistical process control of multivariate processes. control engineering practice , 3(3):403‚Äì414, 1995.
[20] fabrizio maria maggi, chiara di francescomarino, marlon dumas, and chiara ghidini. predictive monitoring of business processes. in
m. jarke et al., editor, advanced information systems engineering, 26th international conference, caise 2014, thessaloniki, greece, june
16-20, 2014. proceedings , volume 8484 of lncs , pages 457‚Äì472. springer, 2014.
34[21] r. moeller. coso enterprise risk management: understanding the new integrated erm framework , chapter 3: components of coso erm,
pages 47‚Äì93. john wiley & sons, inc., hoboken, nj, 2007.
[22] fiona d patterson and kevin neailey. a risk register database system to aid the management of project risk. international journal of project
management , 20(5):365‚Äì374, 2002.
[23] maja pesic, helen schonenberg, and wil mp van der aalst. declare: full support for loosely-structured processes. in 11th ieee international
conference on enterprise distributed object computing, edoc 2007 , pages 287‚Äì287. ieee, 2007.
[24] a. pika, w.m.p. van der aalst, c.j. fidge, a.h.m. ter hofstede, and m.t. wynn. predicting deadline transgressions using event logs. in
m. la rosa and p. so er, editors, bpm 2012 international workshops, tallinn, estonia, september 3, 2012. revised papers , volume 132 of
lnbip , pages 211‚Äì216. springer, 2013.
[25] a. pika, w.m.p van der aalst, c.j. fidge, a.h.m. ter hofstede, and m.t. wynn. proÔ¨Åling event logs to conÔ¨Ågure risk indicators for process
delays. in camille salinesi, moira c. norrie, and oscar pastor, editors, 25th international conference, caise 2013, valencia, spain, june
17-21, 2013. proceedings , volume 7908 of lncs , pages 465‚Äì481. springer, 2013.
[26] je racine and qi li. nonparametric estimation of regression functions with both categorical and continuous data. journal of econometrics ,
119(1):99‚Äì130, 2004.
[27] m. rosemann and m. zur muehlen. integrating risks in business process models. in b. campbell, h. underwood, and d. bunker, editors, pro-
ceedings of the 16th australasian conference on information systems , pages 1‚Äì10, australia, new south wales, sydney, 2005. australasian
chapter of the association for information systems.
[28] g.j. ross and n.m. adams. two nonparametric control charts for detecting arbitrary distribution changes. journal of quality technology ,
44(2):102‚Äì116, 2012.
[29] standards australia and standards new zealand. risk management: principles and guidelines (as /nzs iso 31000:2009) . sydney, nsw,
wellington, nz, 3rd edition, 2009.
[30] suriadi suriadi, burkhard weiss, axel winkelmann, arthur ter hofstede, michael adams, ra aele conforti, colin fidge, marcello la rosa,
chun ouyang, michael rosemann, et al. current research in risk-aware business process management‚Äìoverview, comparison, and gap
analysis. communications of the association for information systems , 34(1), 2014.
[31] vicknayson thevendran and mj mawdesley. perception of human risk factors in construction projects: an exploratory study. international
journal of project management , 22(2):131‚Äì137, 2004.
[32] wil mp van der aalst. formalization and veriÔ¨Åcation of event-driven process chains. information and software technology , 41(10):639‚Äì650,
1999.
[33] w.m.p. van der aalst. process mining: discovery, conformance and enhancement of business processes . springer, berlin, 2011.
[34] w.m.p. van der aalst, h.t. de beer, and b.f. van dongen. process mining and veriÔ¨Åcation of properties: an approach based on temporal
logic. in robert meersman and zahir tari, editors, otm confederated international conferences, coopis, doa, and odbase 2005, agia
napa, cyprus, october 31 - november 4, 2005, proceedings, part i , volume 3760 of lncs , pages 130‚Äì147, 2005.
[35] w.m.p. van der aalst and schahram dustdar. process mining put into context. internet computing, ieee , 16(1):82‚Äì86, 2012.
[36] stephen a white. bpmn modeling and reference guide: understanding and using bpmn . future strategies inc., 2008.
[37] j.a. wickboldt, l.a. bianchin, r.c. lunardi, l.z. granville, l.p. gaspary, and c. bartolini. a framework for risk assessment based on
analysis of historical information of workÔ¨Çow execution in it systems. computer networks , 55(13):2954‚Äì2975, 2011.
[38] terry m willams. using a risk register to integrate risk management in project deÔ¨Ånition. international journal of project management ,
12(1):17‚Äì22, 1994.
[39] christian wolter, andreas schaad, and christoph meinel. task-based entailment constraints for basic workÔ¨Çow patterns. in proceedings of
the 13th acm symposium on access control models and technologies , pages 51‚Äì60. acm, 2008.
35