process model discovery: a method based on
transition system decomposition?
anna a. kalenkova1, irina a. lomazova1, and wil m.p. van der aalst1;2
1national research university higher school of economics (hse),
moscow, 101000, russia
fakalenkova,ilomazova g@hse.ru
2eindhoven university of technology,
p.o. box 513, nl-5600 mb, eindhoven, the netherlands
w.m.p.v.d.aalst@tue.nl
abstract. process mining aims to discover and analyze processes by
extracting information from event logs. process mining discovery algo-
rithms deal with large data sets to learn automatically process models.
as more event data become available there is the desire to learn larger
and more complex process models. to tackle problems related to the
readability of the resulting model and to ensure tractability, various de-
composition methods have been proposed. this paper presents a novel
decomposition approach for discovering more readable models from event
logs on the basis of a priori knowledge about the event log structure: reg-
ular and special cases of the process execution are treated separately. the
transition system, corresponding to a given event log, is decomposed into
a regular part and a specic part. then one of the known discovery al-
gorithms is applied to both parts, and nally these models are combined
into a single process model. it is proven, that the structural and behav-
ioral properties of submodels are inherited by the unied process model.
the proposed discovery algorithm is illustrated using a running example.
1 introduction
process mining techniques can be used, amongst others, to discover process
models (e.g., in the form of petri nets) from event logs. many discovery methods
were suggested in order to obtain process models reecting a behavior presented
in event logs. discovered process models may vary considerably depending on a
chosen discovery method. for an overview of process discovery approaches and
techniques see [15].
the main challenge of process discovery is to construct an adequate formal
model reecting behavior presented in an event log in a best possible way. qual-
ity criteria for process models discovered from event logs are described in [2].
the rst criterion is (replay) tness : a process model should allow for behavior
recorded in an event log. the next one is precision : a discovered process model
?this work is supported by the basic research program of the national research
university higher school of economics.should not allow for behavior which diers markedly from an event log records
(no undertting). the generalization criterion states that a discovered model
should be general enough (no overtting). and the last but not least quality
criterion is simplicity : a discovered model should not be too complicate and
confusing.
in this paper we focus on simplicity, tness and precision. the goal of our
work is to present a decomposition method for obtaining clearer and simpler
models, trying to preserve their tness and precision. the decomposition method
proposed in this paper aim to exploit modularity in processes to obtain more
readable process models. for other quality metrics for evaluation of simplicity
see [22].
most of process mining algorithms for discovering a model from an event
log rst build a (labeled) transition system from an event log, and then use
dierent techniques to construct a model from this transition system. we also
follow this approach. methods for building transition systems based on event
logs were proposed in [6] and are out of the scope of this paper. in this paper we
assume that there is a transition system, already constructed from some event
log, and concentrate on discovering a process model from a given transition
system. moreover, we assume that a transition system is decomposed into a
regular and specic parts on base of some a priori knowledge about a modeled
system. for each of the parts we apply existing process discovery algorithms to
obtain corresponding (sub)process models. then these models are combined into
a single process model.
for discovering subprocess models we suggest to use state-based region al-
gorithms and algorithms based on regions of languages. the state-based region
approach was initially proposed by a. ehrenfeucht and g. rozenberg [16]. later
this approach was generalized by j. cortadella et al. [12, 13]. an alternative
generalization was proposed by j. carmona et al. [11]. the application of state-
based region algorithms to process mining was studied in [6, 9, 21]. algorithms
based on regions of languages were presented in [7, 14, 18] and then applied to
process mining [8, 24]. state-based region algorithms and algorithms based on
regions of languages map discovered regions into places of a target petri net.
the advantage of these algorithms is that they guarantee \perfect" tness, i.e.
every trace in a log (a transition system) can be reproduced in a model. how-
ever, a large degree of concurrency in a system and incompleteness of an event
log (or corresponding transition system) may lead to a blowup of the diagram
comparable to the the state explosion problem.
the paper is organized as follows. in section 2 a motivating example is pre-
sented. section 3 introduces basic denitions and notions, including traces, petri
nets and transition systems. in section 4 we propose a decomposition algorithm
for constructing a process model. in section 5 we formally prove that the struc-
tural and behavioral properties of subprocess models constructed from the de-
composed transition system are inherited by the unied process model. section
6 presents related work. section 7 concludes the paper.2 motivating example
in this section we will consider booking a ight process. the log reecting a
history of process execution is presented in fig. 1. the transition system con-
structed from this log is depicted in fig. 2.
l=fhstart booking; book flight; get insurance; send email; choose payment type;
paybycard; complite booking i;
hstart booking; get insurance; book flight; send email; choose payment type;
paybycard; complite booking i;
hstart booking; get insurance; book flight; send email; choose payment type;
paybywebmoney; complite booking i;
hstart booking; book flight; get insurance; send email; choose payment type;
paybywebmoney; complite booking i;
hstart booking; book flight; cancel; send email i;
hstart booking; book flight; get insurance; send email; choose payment type;
hcancel; send email ig:
fig. 1. an event log for a booking process
get_insurance book_flight 
send_email start_booking 
book_flight get_insurance 
choose_payment_type 
pay_by_card pay_by_web_money 
complite_booking cancel 
send_email cancel s1
s2
s3 s4
s5
s6
s7
s8s9
s10 
fig. 2. a transition system for a booking process constructed from the event log de-
picted in fig. 1
at the beginning of a booking process a customer needs to book a ight and
to get an insurance, these actions are performed in parallel.then an email is sent to conrm the booking. after that the customer chooses
a payment method, pays and the booking process successfully completes. if the
booking was cancelled, an email is sent to notify the cancellation. these cancel-
lations may occur during an execution of booking procedures as well as after the
booking was accepted.
let us consider the models produced by the standard state-based region
algorithm1(fig. 3) and the language-based synthesis algorithm2(fig. 4) from
original transition system and corresponding event log respectively.
start_booking book_flight 
get_insurance choose_payment_type pay_by_card 
pay_by_web_money 
cancel 
complete_booking send_email 
fig. 3. the result of applying the standard state-based region algorithm to the tran-
sition system depicted in fig. 2
start_booking 
book_flight 
get_insurance choose_payment_type pay_by_card 
pay_by_web_money 
cancel complete_booking 
send_email 
fig. 4. the result of applying the language-based synthesis algorithm to the event log
depicted in fig. 1
1the state-based regions miner plug-in is available in prom framework [23]. this
plug-in implements the standard state-based region algorithm presented in [12,13].
2the ilp miner [24] plug-in is implemented in prom framework [23]. we choose such
parameters that there are no tokens left after a case completion, and initial places
don't have incoming arcs.figures 3 and 4 illustrate that region-based techniques may result in models
that are more complicated than the corresponding transition system.
in this paper we present a method for discovering better structured and more
readable process models by detecting a regular behavior in a given transition
system. we split a transition system in two parts: one of them represents a
regular behavior, and the other describes handling special cases (exceptions,
cancellations, etc.)
3 preliminaries: petri nets and transition systems
letsbe a nite set. a multisetmover a setsis a mapping m:s!nat, where
natis the set of natural numbers (including zero), i.e. a multiset may contain
several copies of the same element.
for two multisets m;m0we writemm0i8s2s:m(s)m0(s) (the
inclusion relation). the sum of two multisets mandm0is dened as usual:
8s2s: (m+m0)(s) =m(s) +m0(s), the dierence is a partial function:
8s2ssuch thatm(s)m(s0) : (m m0)(s) =m(s) m0(s). bym(s) we
denote the set of all nite multisets over s.
letsandebe two disjoint non-empty sets of states and events , and
bsesbe a transition relation . atransition system is a tuple ts=
(s;e;b;s in;sn), wheresin2sis an initial state and sns| a set of nal
states. elements of bare called transitions . we writese!s0, when (s;e;s0)2b.
a statesisreachable from a state s0i there is a possibly empty sequence
of transitions leading from stos0(denoted by s!s0).
a transition system must satisfy the following basic axioms:
1. every state is reachable from the initial state: 8s2s:sin!s;
2. for every state there is a nal state, which is reachable from it: 8s2s9sn2
sn:s!sn;
letebe a set of events. a trace(overe) is a sequence of events, i.e.,
2e. an event loglis a multiset of traces, i.e., l2m (e).
a trace=he1;:::;eniis called feasible in a transition system tsi
9s1;:::;sn 1;sn2s:sine1!s1e2!:::sn 1en!sn, andsn2sn, i.e. a fea-
sible trace leads from the initial state to some nal state. a language accepted
by ts is dened as the set of all traces feasible in ts, and is denoted by l(ts).
we say that a transition system tsand an event log larematched i each
trace from lis a feasible trace in ts, and inversely each feasible trace in ts
belongs tol.
letpandtbe two nite disjoint sets of places and transitions , andf
(pt)[(tp) | a ow relation. let also ebe a nite set of events, and
:t!ebe a labeling function. then n= (p;t;f; ) is a (labeled) petri net .
amarking in a petri net is a multiset over the set of places. a marked petri
net (n;m 0) is a petri net together with its initial marking .pictorially, places are represented by circles, transitions by boxes, and the
ow relation fby directed arcs. places may carry tokens represented by lled
circles. a current marking mis designated by putting m(p) tokens into each
placep2p.
for a transition t2tan arc (x;t) is called an input arc , and an arc ( t;x)
| an output arc ; the presettand the postsettare dened as the multisets
overpsuch thatt(p) = 1, if (p;t)2f, otherwiset(p) = 0, and t(p) = 1
if (t;p)2f, otherwise t(p) = 0. note that we will also consider presets and
postsets as sets of places. a transition t2tisenabled in a marking mitm.
an enabled transition tmay reyielding a new marking m0=defm t+t
(denotedmt!m0,m(t)!m0, or justm!m0).
we say that m0isreachable frommi there is a (possibly empty) sequence
of ringsm=m1!!mn=m0.
r(n;m ) denotes the set of all markings reachable in nfrom the marking m.
a marked petri net ( n;m 0);n= (p;t;f; ) is called safe i8p2p8m2
r(n;m 0):m(p)1, i.e. at most one token can appear in a place.
areachability graph for a marked petri net ( n;m 0) labeled with events from
eis a transition system ts= (s;e;b;s in;sn), with the set of states s=
r(n;m 0), the event set e, and transition relation bdened by ( m;e;m0)2b
imt!m0, wheree=(t). the initial state in tsis the initial marking m0.
if some reachable markings in ( n;m 0) are distinguished as nal markings, they
are dened as nal elements in ts. note that tsmay also contain other nal
states, to satisfy the axiom that for every state in tsthere is a nal state, which
is reachable from it.
workow nets (wf-nets) [1] is a special subclass of petri nets designed for
modeling workow processes. a workow net has one initial and one nal place,
and every place or transition in it is on a directed path from the initial to the
nal place.
a (labeled) petri net nis called a (labeled) workow net (wf-net) i
1. there is one source place i2pand one sink place f2ps. t.ihas no input
arcs andfhas no output arcs.
2. every node from p[tis on a path from itof.
3. the initial marking in ncontains the only token in its source place.
we denote by [ i] the initial marking in a wf-net n. similarly, we use [ f] to
denote the nal marking in a wf-net n, dened as a marking containing the
only token in the sink place f.
a wf-netnwith an initial marking [ i] and a nal marking [ f] issound i
1. for every state mreachable in n, there exists a ring sequence leading from
mto the nal state [ f]. formally,8m: [([i]!m) implies (m![f])];
2. the state [ f] is the only state reachable from [ i] innwith at least one token
in placef. formally,8m: [([i]!m)^([f]m) implies (m= [f])];
3. there are no dead transitions in n. formally,8t2t9m;m0: (i!m(t)!
m0).4 method for constructing structured and readable
process models
as shown by the example in the section 2 straightforward application of the syn-
thesis algorithms may give rather confounded process models. prior knowledge
of a modular process structure can be used to identify subprocesses and clarify
the target process model. our goal is to construct readable process models which
will reect modular structures of processes.
4.1 decomposition of a transition system
assume that we can identify a regular and a special process behavior within the
original transition system.
let us consider a transition system ts= (s;e;b;s in;sn) and divide the
set of states into two non-overlapping subsets which correspond to a regular and
a special behavior: s=sreg[sspec,sreg\sspec=;(fig. 5). let bregdenote a
sreg sspec 
breg 
bret besc 
bspec 
fig. 5. decomposition of a transition system
set of regular process transitions, bspecdenote a set of special transitions, besc
andbretstand for transitions, which indicate escaping from the regular process
ow and returning to the regular process ow respectively. let eregandespecdenote the set of events corresponding to bregandbspecrespectively. note that
eregandespecare not necessarily disjoint sets, i.e. the same label can appear in
dierent parts of the transition system.
formally, set of states s can be partitioned over sregandsspecand then the
tuple tsdec= (ts;sreg;sspec) is called a decomposed transition system if the
following additional conditions hold: sin2sregandsnsreg.
the construction of such a transition system from an event log can be per-
formed in two steps. firstly, a transition system is constructed for the traces
corresponding to a regular process behavior. secondly, an additional behavior is
added to the transition system, and new states are marked as special.
4.2 region-based algorithms
an algorithm for synthesis of a marked petri net from a decomposed transition
system will be build on well-known region based algorithms. therefore, we will
give an overview of these algorithms and outline their properties, which will be
used in the further analysis of the presented algorithm.
state-based region algorithm first, we briey describe the standard
state-based region algorithm [12, 13]. let ts= (s;e;t;s in;sn) be a transi-
tion system and s0sbe a subset of states. s0is a region i for each event
e2eone of the following conditions hods:
{all the transitions s1e!s2enters0, i.e.s1=2s0ands22s0,
{all the transitions s1e!s2exits0, i.e.s12s0ands2=2s0,
{all the transitions s1e!s2do not cross s0, i.e.s1;s22s0ors1;s2=2s0.
a regionr0is said to be a subregion of a region rir0r. a regionris called
aminimal region i it does not have any other subregions.
the state-based region algorithm constructs a target petri net in such a
way that a transition system is covered by its minimal regions and after that
every minimal region is transformed to a place in the petri net. the result
of applying the standard state-based region algorithm to the transition system
which corresponds to a regular behavior of the booking process is presented in
fig. 6. note that states in the transition system correspond to markings of the
target petri net.
let us enumerate the properties of the standard state-based region algorithm
[12,13], which will be used for the analysis of the discovery algorithm presented
in this paper:
1. every petri net transition t2tcorresponds to an event in the initial tran-
sition system e2e(the transition tis labeled with e), the opposite is not
true (events of the initial transition system might be split).
2. there is a bisimulation between a transition system and a reachability graph
of the target petri net, this implies that every state in tscorresponds to a
petri net marking.get_insurance book_flight 
send_email start_booking 
book_flight get_insurance 
choose_payment_type 
pay_by_card pay_by_web_money 
complite_booking start_booking 
get_insurance 
choose_payment_type 
pay_by_card pay_by_web_money 
complete_booking book_flight 
send_email fig. 6. applying the state-based region algorithm to the transition system which cor-
responds to a regular behavior of the booking process
3. the target petri net is safe, i.e. no more than one token can appear in a place.
an algorithm based on regions of languages the aim of the dierent
algorithms based on regions of languages [8,24] is to construct a petri net, which
is able to reproduce a given language (herein we will consider a language accepted
by an initial transition system), reducing undesirable behavior by adding places.
addition of such places will not allow for construction of a petri net, e.g. the
ower-model (fig. 7), which generates all the words in a given alphabet. a
e1
e2
... en
fig. 7. a ower model(language-based) region is dened as a (2 jtj+1)-tuple off0;1g, representing an
initial marking and a number of tokens each transition consumes and produces
in a place. like in the previous approach each region corresponds to a place in
a petri net. regions are dened as solutions of the linear inequation system,
constructed for a given language. the algorithms based on regions of languages
satisfy the following conditions:
1. there is a bijection between petri net transitions tand events in the initial
transition system e, such that every transition is labeled with a correspond-
ing event.
2. there is a homomorphism !from a transition system tsto the reachability
graph rgof a target petri net n, i.e. for every s2sthere is a correspond-
ing node -!(s) in rg(every state in tshas a corresponding nmarking),
such that!(sin) =m0and for every transition ( s1e!s2)2bthere is an
arc (!(s1);!(s2)) in rglabeled with e.
3. the target petri net is safe. we will add constraints to obtain elementary
petri nets, in which transitions can only re when their output places are
empty [24], this implies that we will get a safe petri net.
let us refer to the state-based algorithms and the algorithms based on re-
gions languages, which meet the specied requirements, simply as basic region
algorithms .
4.3 constructing transition systems
in this subsection we give a method for constructing two separate transition
systems from a given decomposed transition system. before applying basic region
algorithms to parts of a decomposed transition system we have to be sure that
these parts are transition systems as well, otherwise they should be repaired.
lettsdec= ((s;e;b;s in;sn);sreg;sspec) be a decomposed transition sys-
tem. as we can see from the example (fig. 5) the subgraph formed by vertices
fromsregand transitions from bregmay not dene a transition system, since
it contains states which are not on the path from the initial state to some nal
state, and should be repaired. a set of novel events e0and a set of transitions
b0labeled with this events should be added to retrieve missing connections be-
tweensregstates (see fig. 8). for every pair of nodes from sreghaving a path
between them with a starting transition from besc, a destination transition from
bret, and containing exactly one transition from besc, such that there is no path
between these nodes within the graph ( sreg;breg), a novel event e02e0and a
novel transition b02b0labeled with this event should be added. one can note
that after this transformation every state is on the path from sintosn2sn,
and we get a transition system tsreg= (sreg;ereg[e0;breg[b0;sin;sn).
the subgraph formed by vertices from sspecand transitions from bspecshould
be also repaired to form a transition system. as in the previous case each pairsreg sspec e1'si
soestart 
eend eend e2'
e3'e1'' e 2'' fig. 8. constructing transition systems, which correspond to subprocesses
of states connected only through external nodes should be connected directly
via transitions labeled with novel events (see fig. 8). note that a path through
the external nodes should not contain transitions added to repair the transition
system constructed for a normal ow. let b00denote the set of novel transitions,
e00denote the set of corresponding events. in contrast to the transition system
tsregconstructed for the normal process ow in the previous step an initial state
siand a nal state (state without outgoing transitions) soshould be added. all
states having incoming transitions from besc, should be connected with siby
incoming transitions labeled with a special event estart. let us denote the set of
these transitions by bstart. similarly, all states having outgoing transitions from
bretshould be connected with soby outgoing transitions labeled with the event
eend. the set of such transitions will be denoted by bend. after these transfor-
mations every state lies on a path from sintosn2sn, and, hence, we obtain
a transition system tsspec= (sspec[fsi;sog;espec[e00[festart;eendg;bspec[
b00[bstart[bend;si;fsog).
4.4 discovery algorithm
this algorithm uses some basic region algorithm a.
algorithm [discovery algorithm]. (constructing a marked petri net for
a decomposed ts) .
input: a decomposed transition system tsdec= ((s;e;b;s in;sn);sreg;sspec).
step 1: construct two transition systems: tsreg= (sreg;ereg[e0;breg[b0;sin;sn)
and tsspec= (sspec[fsig[fsog;espec[e00[festart;eendg;bspec[b00[bstart[bend;si;fsog) form the decomposed transition sys-
tem tsdec.
step 2: apply algorithm ato retrieve a regular ( nreg) and a special ( nspec)
process ow from tsregand tsspecrespectively.
step 3: restore the connections between nregandnspecto create a so-called a
unied petri net n:
{ for every transition ( seesc!s0)2besc;s2sreg;s02sspecadd a novel
petri net transition labeled with eesc(see fig. 9). connect this transition
by incoming arcs with all the places p2p, such that m(p)>0, and by
outgoing arcs with the places p02p0, such that m0(p0)>0, wherem
andm0are markings corresponding to sands0respectively. similarly,
transitions from bretshould be restored.
sreg sspec 
eesc s
s`
eret ...m'm
s'' m'' eesc 
... m
... m'
eret 
... m'' ...nspec nreg 
n
fig. 9. a unied petri net
{ delete the following nodes along with their incident arcs from the
result petri net: transitions with labels from e0ande00, all the transi-
tions labeled with estartalong with the places from their presets (if these
places don't have other output arcs), and all the transitions labeled with
eendalong with the places from their postsets (if these places don't have
output arcs).
{ initial marking for the result petri net nis dened as an initial mark-
ing ofnreg, label function of the result nis dened on the basis of nreg
andnspeclabel functions.output: marked petri net n.
note that after partitioning of the initial transition system into two transi-
tions systems (step 1), each of the parts can be in turn divided into subsystems.
after decomposition a discovery algorithm is applied to each part (step 2) and
required connections are restored within the entire model (step 3).
start_booking 
get_insurance 
choose_payment_
type 
pay_by_card pay_by_web_money cancel 
complete_booking book_flight 
send_email 
cancel 
send_email estart 
eend 
fig. 10. the result of applying the discovery algorithm to the original transition system
let us consider the initial transition system presented in fig. 2. suppose that
we will divide the set of states in the following manner: s=sreg[sspec;sreg=
fs1;s2;s3;s4;s5;s6;s7;s8;s10g,sspec=fs9g. a petri net which is constructed
for this decomposed transitions system according to the discovery algorithm is
presented in fig. 10. the subprocesses structures can be easily retrieved from
this model. note, that dashed nodes and arcs denote those parts which were
deleted during an execution of the discovery algorithm.
now assume that, we decided to divide the set of states as follows: s=sreg[
sspec;sreg=fs1;s2;s4;s5;s6;s7;s8;s10g,sspec=fs3;s9g. the result of applying
the discovery algorithm to the decomposed transition system is presented in
fig. 11. this example shows that the result depends on choosing a partition ofthe set of states. expert knowledge can help to nd an appropriate partition.
for example, names of events, which correspond to an irregular behavior, can
be helpful for that.
note, that the models, presented in fig. 10 and fig. 11, can be constructed
by both: the state-based region algorithm and the algorithm based on regions of
languages, which meet the requirements, listed in subsection 5.2, with the only
dierence, that the algorithm based on regions of languages doesn't produce nal
place.
start_booking 
get_insurance 
choose_payment_type 
pay_by_card pay_by_web 
_money cancel 
complete_booking send_email 
cancel 
send_email estart 
eend book_flight 
book_flight get_insurance 
fig. 11. the result of applying the discovery algorithm to the original transition system
with dierent states partition
5 structural and behavioral properties preserved by
decomposed discovery
in this section we will formally prove that the structural and behavioral proper-
ties of subprocess models constructed from a decomposed transition system areinherited by the unied process model. as was mentioned earlier the discovery
algorithm use some basic region algorithm . abasic region algorithm is a state-
based region algorithm, which guarantees the bisimilarity relation between an
initial transition system and a reachability graph of the target petri net, or an al-
gorithm based on regions of languages, for which there is a homomorphism from
a transition system to a reachability graph of the target petri net. bisimularity
relation dened by the state-based region algorithm species exactly one state
in a reachability graph for each state in a transition system, in such a case bisim-
ularity implies homomorphism. so, our decomposition approach can use any of
basic region algorithms , provided this algorithm outputs a safe perti net, and
there is a homomorphism from an initial transition system to the reachability
graph of the target petri net.
5.1 structural properties
first, we will show that the discovery algorithm preserve connectivity properties
of subprocess models, i.e. nodes connected within the subprocess model, obtained
on the step 2 of the discovery algorithm, will be connected within the unied
model.
lemma 1 (connectivity properties). if there is a directed path between a
pair of nodes (i.e., places or transitions) within subprocess model nreg(nspec)
and these nodes were not deleted during the construction of the unied petri net
modeln= (p;t;f; ), then there is a directed path between them within n.
proof. let tsdec= (ts;sreg;sspec) be a decomposed transition system. let
us consider two arbitrary nodes u;v2p0[t0withinnreg= (p0;t0;f0;reg).
by construction there is a path between them before the deletion of unnecessary
nodes. let us prove that u;vwill be connected after the deletion as well. consider
transitiont2t0labeled with e0, which should be deleted along with all incident
arcs (see fig. 12).
let us prove that the nodes fromtandtare still connected with each other.
if so, connection between arbitrary nodes uandvwill be preserved. consider
transition ( s1e0
!s2);s1;s22sreg, which was added to the transition system
constructed for sreg(see fig. 12). let bspec,besc, andbretbe transitions of the
decomposed transition system, connecting nodes as it shown in fig. 5. there is an
alternative path within the transition system between s1ands2which contains
transitions from besc,bspecandbret. since there is a homomorphism from the
transition system to the reachability graph of the target petri net, there is a path
throughnspecnodes between petri net transitions: tesc2tandtret2tlabeled
witheescanderetrespectively (inner transitions of this path are represented only
bynspectransitions), which corresponds to a ring sequence within nspec, since
nspeccontains no tokens before tescres. let us consider petri net markings:
m1andm2which correspond to s1ands2respectively. since there is an arc
corresponding to ( s1e0
!s2) within the reachability graph of nreg, the following
conditions hold:tm1andtm2. this implies that every place fromte'... 
... m1
m2m1
m2e'eesc 
eret s1
s2eesc 
eret fig. 12. transition that should be deleted
connected with tesc, andtretis connected with any place from t, if so places
fromtare still connected with places from tthrough petri net transitions
tesc, andtret. similarly, it may be proven that the deletion of unnecessary nodes
withinnspecwill not lead to a violation of nodes connectivity.
the standard state-based region algorithm could be extended to produce
wf-nets by adding articial initial and nal states, connected by transitions
with unique labels with the original initial and nal states respectively. this
follows from the denition of a region. in [24] the extensions for algorithms
based on regions of languages were presented: the rst extension produces models
with places that contain no tokens after a case completion, the second extension
doesn't allow for places to have initial markings, unless they have no incoming
arcs. it is easier to transform a petri net, which satises these conditions, to a
wf-net. thus, it is important to verify that if subprocess models are wf-nets
then the unied process model also a wf-net.
theorem 1 (wf-nets). assume that subprocess models nregandnspec are
wf-nets. then the unied process model nis a wf-net.
proof. lettsdec= (ts;sreg;sspec) be a decomposed transition system. the
proof follows from lemma 1. source and sink places of nare determined as the
source and sink places of the subprocess model nreg. every node within nreg
is on the path from the source to sink. the source and sink places of nspecare
connected by input and output arcs respectively with the rest part of the system,
otherwise tsis not a transition system (there are states which are not on the
path from the initial to a nal state).
for now, it has been proven that signicant structural properties are inherited
by the discovered unied process model.5.2 behavioral properties
in this subsection we show that that unied process model also preserves some
behavioral properties.
first we show that if a basic region algorithm constructs sound wf-nets, then
the composite model will also be a sound wf-net. a reasonable decomposition
of a transition system may help to construct a hierarchy of sound process models.
theorem 2 (sound wf-nets). let subprocess models nregandnspecbe sound
wf-nets, then the unied process model nis also a sound wf-net.
proof. using theorem 1 we can show that nis a workow net. by construction
every state is reachable from the initial state and the nal state is reachable
from any state. no dead transitions are added by construction.
the standard state-based region algorithm [12, 13] guarantees that there is
a bisimilarity relation between the initial transition system and the reachability
graph of the target petri net. this property is inherited by a regular transition
system under the assumption that a basic region algorithm will not produce
reachability graphs with markings which dominate one another ( mm0). gen-
erally speaking, state-based region algorithms can produce petri nets with reach-
ability graphs, containing states with markings which dominate one another. in
that case splitting of labels can be applied to separate the states from the same
region.
theorem 3 (bisimulation). if there are bisimularity relations between tran-
sition systems, which correspond to subprocess models, and reachability graphs
rgreg, rg specof these subprocess models, then there is a bisimularity relation
between a decomposed transition system and the reachability graph of the unied
process model n.
proof. since reachability graphs rgregand rgspecdon't have common states
and transitions, a reachability graph of the unied process model nwill be
built as a union of rgregand rgspecwith subsequent deletion of unnecessary
transitions and addition of novel connecting transitions, corresponding to the
transitions bregandbspecof the decomposed transition system. note that no
extra transitions will be added, since we assume that there are no markings that
dominate one another. this will guarantee bisimilarity.
in contrast to the state-based region algorithm which guarantees tness and
precision, the algorithm based on regions of languages guarantees only tness,
i.e. every trace can be reproduced in a process model. let us prove that the
property of language inclusion is also preserved.
theorem 4 (language inclusion). let ts dec= (ts;sreg;sspec)be a de-
composed transition system. assume that nregandnspecare subprocess models
constructed from transition systems ts regand ts specwith corresponding reacha-
bility graphs rg regand rg spec. let petri net nbe the unied process model with
a reachability graph rg. if l(tsreg)l(rgreg)andl(tsspec)l(rgspec),
thenl(ts)l(rg).proof. let us consider two transition systems: tsregand tsspec. for each tran-
sition system there is a homomorphism to the corresponding reachability graph
(see fig. 8): wreg:tsreg!rgreg,wspec:tsspec!rgspec. since rgregand
rgspecdon't have common states and transitions, by construction of the unied
process model nits reachability graph rgwill be built as a union of rgregand
rgspecreachability graphs with subsequent deletion of unnecessary transitions
and addition of novel transitions, which corresponds to transitions connecting
states from sregwith states from sspec. note that we may get extra transitions
connecting states, which dominate the states that should be connected. by con-
struction there is a homomorphism from tstorg, which implies language
inclusion.
these theoretical observations are of great importance for application of
region-based synthesis since state-based region algorithms can be decomposed
and still produce petri nets with reachability graphs bisimilar to original transi-
tion systems, language-based algorithms can be decomposed and still guarantee
language inclusion.
6 related work
in this section we will give an overview of the process discovery techniques based
on decomposition. an approach for partitioning activities over a collection of pas-
sages in accordance with so-called predened causal structure was introduced
in [3]. using this approach discovery can be done per passage. a generic ap-
proach based on horizontal projections of an event log was proposed in [4], this
approach can be combined with dierent process discovery algorithms and might
be considered as a generalization of passages technique.
more related are approaches based on the decomposition analysis of an entire
transition system [10,17,20]. in [20] an eective method for a union of transition
systems which correspond to dierent log traces was presented. the main dif-
ference of [20] from the approach presented in this paper is that the aim of [20]
was to distribute the computations, and subsystems were not considered as sub-
processes. the idea proposed in [10] is to generate a set of state machines (petri
nets with transitions having at most one incoming and at most one outgoing
arc) whose parallel composition can reproduce any trace from an event log. in
contrast to the approach presented in this paper, the decomposition of a transi-
tion system was based only on its structural properties, additional information
about an event log was not considered. an approach for the discovery of can-
cellation regions based on the analysis of a topological structure of an initial
transition system was proposed in [17]. this approach uses state-based region
algorithm to discover regular and exceptional behavior. improvement of the al-
gorithm proposed in this paper based on the addition of reset arcs in order to
reduce the number of connections between subsystems might be considered as a
generalization of [17].in this paper we focus on producing readable process models and not on the
decomposition of a transition system in order to distribute the computations,
but the approach can be used for the decomposition of computations as well.
7 conclusion
this paper presents a novel decomposition approach for discovering more read-
able process models from event logs. using existing techniques we rst produce
a transition system. this transition system is decomposed into a regular and a
special part on the basis of a priori knowledge about an event log. then one of
the region based discovery algorithms [8,12,13,24] is applied to each part of the
transition system and after that the discovered subprocess models are combined
into a unied model. it is proven that structural and behavioral properties of
subprocess models are inherited by the unied process model.
the results presented in this paper can be used as a starting point for more
advanced methods of discovering better structured and more readable process
models from transition systems. the quality of the model obtained within the
decomposition approach depends signicantly on the choice of states partitioning
in a given transition systems. our future work aims at implementing the pre-
sented discovery algorithm and continue the research with real-life event logs.
also we plan applying the decomposition approach to discover and build process
models in high-level process languages such as bpmn [19] or yawl [5].
references
1. w.m.p. van der aalst. the application of petri nets to workow management.
journal of circuits, systems, and computers , 8(1):21{66, 1998.
2. w.m.p. van der aalst. process mining - discovery, conformance and enhance-
ment of business processes. springer, 2011.
3. w.m.p. van der aalst. decomposing process mining problems using passages. in
s. haddad and l. pomello, editors, applications and theory of petri nets 2012 ,
volume 7347, pages 72{91, 2012.
4. w.m.p. van der aalst. decomposing petri nets for process mining: a generic
approach. distributed and parallel databases , 31(4):471{507, 2013.
5. w.m.p. van der aalst, l. aldred, m. dumas, and a.h.m. ter hofstede. design and
implementation of the yawl system. qut technical report, fit-tr-2003-07,
queensland university of technology, brisbane, 2003.
6. w.m.p. van der aalst, v. rubin, h.m.w. verbeek, b.f. van dongen, e. kindler,
and c.w. g unther. process mining: a two-step approach to balance between
undertting and overtting. software and systems modeling , 9(1):87{111, 2010.
7. e. badouel, l. bernardinello, and ph. darondeau. polynomial algorithms for the
synthesis of bounded nets. in tapsoft , volume 915, pages 364{378, 1995.
8. r. bergenthum, j. desel, r. lorenz, and s. mauser. process mining based on re-
gions of languages. in international conference on business process management
(bpm 2007) , volume 4714, pages 375{383, 2007.9. j. carmona, j. cortadella, and m. kishinevsky. a region-based algorithm
for discovering petri nets from event logs. in business process management
(bpm2008) , pages 358{373, 2008.
10. j. carmona, j. cortadella, and m. kishinevsky. divide-and-conquer strategies for
process mining. in business process management (bpm 2009) , volume 5701 of
lecture notes in computer science , pages 327{343. springer-verlag, berlin, 2009.
11. j. carmona, j. cortadella, and m. kishinevsky. new region-based algorithms for
deriving bounded petri nets. ieee transactions on computers , 59(3):371{384,
2010.
12. j. cortadella, m. kishinevsky, l. lavagno, and a. yakovlev. synthesizing petri
nets from state-based models. in proceedings of the 1995 ieee/acm interna-
tional conference on computer-aided design (iccad '95) , pages 164{171, 1995.
13. j. cortadella, m. kishinevsky, l. lavagno, and a. yakovlev. deriving petri nets
for nite transition systems. ieee trans. computers , 47(8):859{882, 1998.
14. ph. darondeau. deriving unbounded petri nets from formal languages. in
concur 1998 , volume 1466, 1998.
15. b.f. van dongen, a.k. alves de medeiros, and l. wenn. process mining: overview
and outlook of petri net discovery algorithms. in transactions on petri nets and
other models of concurrency ii , volume 5460, pages 225{242, 2009.
16. a. ehrenfeucht and g. rozenberg. partial (set) 2-structures - part 1 and part 2.
acta informatica , 27(4):315{368, 1989.
17. a.a. kalenkova and i.a. lomazova. discovery of cancellation regions within pro-
cess mining techniques. in cs&p , volume 1032 of ceur workshop proceedings ,
pages 232{244. ceur-ws.org, 2013.
18. r. lorenz and g. juh as. how to synthesize nets from languages: a survey.
inproceedings of the wintersimulation conference (wsc 2007) , pages 637{647.
ieee computer society, 2007.
19. omg. business process model and notation (bpmn). object management
group, formal/2011-01-03, 2011.
20. m. sol and j. carmona. incremental process mining. in acsd/petri nets work-
shops , volume 827 of ceur workshop proceedings , pages 175{190. ceur-ws.org,
2010.
21. m. sole and j. carmona. process mining from a basis of regions. in applications
and theory of petri nets 2010 , volume 6128, pages 226{245, 2010.
22. i. vanderfeesten, j. cardoso, j. mendling, h.a. reijers, and w.m.p. van der aalst.
quality metrics for business process models. in bpm and workow handbook
2007, pages 179{190. future strategies inc., lighthouse point, florida, usa, 2007.
23. h.m.w. verbeek, j.c.a.m. buijs, b.f. van dongen, and w.m.p. van der aalst.
prom 6: the process mining toolkit. in proc. of bpm demonstration track 2010 ,
volume 615 of ceur workshop proceedings , pages 34{39, 2010.
24. j.m.e.m. van der werf, b.f. van dongen, c.a.j. hurkens, and a. serebrenik.
process discovery using integer linear programming. fundamenta informaticae ,
94(3):387{412, 2009.