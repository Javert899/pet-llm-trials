mining reference process models and their
congurations
florian gottschalk, wil m.p. van der aalst, monique h. jansen-vullers
eindhoven university of technology, the netherlands.
ff.gottschalk,w.m.p.v.d.aalst,m.h.jansen-vullers g@tue.nl
abstract. reference process models are templates for common pro-
cesses run by many corporations. however, the individual needs among
organizations on the execution of these processes usually vary. a process
model can address these variations through control-ow choices. thus,
it can integrate the dierent process variants into one model. through
conguration parameters, a congurable reference models enables corpo-
rations to derive their individual process variant from such an integrated
model. while this simplies the adaptation process for the reference
model user, the construction of a congurable model integrating several
process variants is far more complex than the creation of a traditional
reference model depicting a single best-practice variant. in this paper we
therefore recommend the use of process mining techniques on log les of
existing, well-running it systems to help the reference model provider in
creating such integrated process models. afterwards, the same log les
are used to derive suggestions for common congurations that can serve
as starting points for individual congurations.
1 introduction
many supporting processes like, e.g., procurement or invoicing processes are
organized similarly among companies. reference process models depict such
processes in a general manner, thus providing templates for individual imple-
mentations of these processes, and are available for various domains [8, 11, 16].
however, even supporting processes are rarely executed in exactly the same man-
ner among companies. for that reason the corresponding reference models must
be adapted to individual needs during the process implementation.
to support such an adaptation of reference models, suggestions for cong-
urable process models have been made by various researchers (e.g. [3, 10, 13]).
congurable process models require that the reference process model provider
combines dierent process variants into an integrated process model from which
reference model users can then derive individual model variants by setting con-
guration parameters. in this way, each organization can derive the individual
process model tting their needs while this derived process model remains con-
form with the used reference model. that means, the adaptation process does
not require a manual process modeling which always comes with the risk of error
and which could thus jeopardize a process's executability.while this simplies the adaptation process for the reference model user, it is
on the expense of the model provider who has to construct a more complex model
integrating several process variants. as handling the complexity and avoiding
errors is already dicult for traditional reference models [6], we focus in this
paper on providing support for the creation of congurable process models.
usually, the processes represented by a reference model are not new and in-
novative approaches, but rather derived from established process variants. that
means, when a congurable reference model is built, various variants of the pro-
cess are already in place in organizations. in traditional reference model creation
approaches, process analysts are examining the processes in place, e.g. through
expert and user interviews, and then compile the gained information \in their
minds" to a best-practice reference model while they abstract from specic re-
quirements of individual organizations. a congurable model, however, should
already provide everything that is necessary to derive a model satisfying the
specic requirements. for that reason, it needs to include these specic aspects
of dierent process variants. thus, an abstraction is not needed and the model
should rather be based on what is really happening.
extensive protocols about what has happened are usually widely available
in today's it environments in the form of so-called log les. data and process
mining techniques have been developed to gain condensed information about the
process behavior from such log les. in the following we will depict how such
existing techniques can directly support the creation of a congurable reference
model by using the log les from various it systems.
figure 1 provides an overview of the suggested approach. at rst, the avail-
able log les from various systems must be prepared through ltering of irrelevant
content and mapping of dierent naming conventions among dierent log les.
this is subject of section 2. afterwards, process mining techniques can be used
not only to create process models for individual systems but also to build process
models which are valid for all the systems, i.e. which integrate the various pro-
cess variants. we show this in section 3. section 4 depicts how such integrated
models covering multiple variants of a process can be congured to derive the
individual variants before the paper ends with some conclusions.
2 pre-processing the log les
many of today's it systems constantly write log les to record functions that
are executed in the system, changes that are made to the system or its data,
\system alive" status updates and so on. for example, most web-servers write an
entry into a log le for each single requested page including information about
the time of access, the ip address of the user, whether the access was successful,
and maybe even a user name or submitted data. due to today's extensive use of
information systems in all business areas, such log les containing information
about the executed business processes are usually widely available.
in this paper we focus on deriving the control ow among the dierent activi-
ties of a business process from such log les. for this purpose many details of log
2bfwghgf8
73wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfh
bfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfh
bfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhl1
l2
lnraw
raw
raw...bfwghgf8
73wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfh
bfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfh
bfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhbfwghgf873wr 8byarybwfb wyrfoa bw4rf a9wyrfhwe784yrfhl1
l2
ln...
n raw logs n logshsu
gdr
serggdr
sregm1m2 mn...
hsu
gdr
serg
sreghsu
serg
sreg
m1..nhsu
gdr
serg
sreg
hsu
gdr
serg
sreg
hsu
gdr
serg
sregc1
c2
cn+ ++n models
process 
miningpre-
processingprocess 
configurationclean, filter, map, ...
1 modelontology
n configurations 
based on 1 model...fig. 1. deriving integrated process models and their congurations from log les
les are irrelevant and it is here sucient if we consider a log le as being a set
of event traces. each event trace is then an ordered set of the activity identiers
classifying each log event as the execution of the particular activity.
denition 1 (log le). letebe a set of activity identiers. then
{i=eis the set of all possible event traces, i.e. he1;:::;eni2i
{events :i!i p(e)is a function dened such that events (he1;:::;eni) =
feij1ingis the set of all activity identiers in an event trace he1;:::;eni,
{liis a log le, i.e. a set of event traces, and
{ =i p(i)is the set of all such log les.
for generating reference models, it is very important to gather log les from
various systems executing the process in question. the selection of sites depends
on the purpose of the model that should be created. if a model should represent
conguration options of a software that is distributed internationally, various
sites running successful implementations of the software should be chosen from
dierent countries. if a model should represent good examples for a certain
process, various successful implementations of that process should be chosen,
but these do not necessarily need to be implemented using the same software.
all in all, the source of the used log les should widely cover the targeted scope
and all aspects of the model which should be created . let us thus in the following
assume that a comprehensive set lraw=flraw
ij1ingofnsuch raw input
log les is available (see the far-left of figure 1).
although log les are widely available today, the purpose of their creation
and their level of details varies. while the transaction management of databases
3requires very explicit and detailed logs for being able to undo all changes com-
pletely automatically, sometimes log entries are rather unspecic debug messages
introduced and never removed by the programmer to nd errors in the code. in
any way, the log les are rarely created for deriving process models.
for that reason, the available log les must be pre-processed before we can
use actual mining techniques to discover meaningful behavioral patterns, i.e.
the log les have to be cleaned of irrelevant data and relevant data has to be
aligned. when building congurable reference process models, three aspects are
especially important in this phase.
{at rst, the data in the log les has to be anonymized. log les usually
contain a lot of personal data. this information is highly condential and
the usage is in most cultures strongly restricted through privacy rights and
laws. as congurable reference models target at the re-use by others, it is
especially important that no personal information is retained in the model.
hence, the elimination of such personal information should take place before
any data is processed.
{secondly, the level of details of the log les has to be balanced among the
dierent input log les and adjusted to the level targeted for the resulting
model by aggregating related log events. otherwise, the level of details in the
generated process model will later on be highly inconsistent among dierent
process branches. to reach this balanced level of details an ontology can for
example be used. then single or groups of log events can be mapped onto
an agreed level of ontology classes.
{as the same ontological concept is hardly called in the same way by dierent
sources, it must also be ensured that log events from the dierent source log
les are mapped onto each other. this might already come with the use of
a common ontology for adjusting the level of details. otherwise, a direct
matching of event names might also be possible.
further details on how to perform such pre-processing steps can, e.g., be
found in [4, 12, 17]. process and data mining eorts | as also described in the
remainder of this paper | heavily depend on the quality of the pre-processed log
les. therefore, pre-processing comprises in general 60{80 percent of the whole
processing eorts [4, 17].
in the following we say that pre-processing is a function prep : ! 
which performs all mentioned pre-processing steps for each log le, including
a re-naming of log events belonging to the same ontology class to a common
class name. the result of the pre-processing is then a consistent set of log les
l=prep(lraw).
3 process mining
the pre-processed log les can serve as the input for a process mining algorithm.
process mining has proven to be a valuable approach for gaining objective in-
sights into business processes which are already in place in organizations. such
4algorithms search for re-occurring patterns in the execution traces of the system
in question and generalize the overall process behavior as process models.
to depict process models we will use a workow net representation here.
while the process model types used by existing process mining algorithms vary,
most of these models can be transformed into workow nets using appropriate
transformation algorithms as, e.g., provided by the process mining framework
prom [1, 7]. workow nets are a formal notation to represent business processes
based on petri nets. within workow nets, transitions depict the activities that
should happen during the process execution. through arcs transitions can be
connected to places which then represent the conditions resulting from the ex-
ecution of the transitions. places also represent the pre-conditions for the exe-
cution of transitions whenever an arc connects a place to a transition. a special
input place always represents the start of the process, while a special output
place represents its completion.
denition 2 (workow net). a workow net is a triple m= (p;t;f ), such
that:
{pis a set of places,
{tis a set of transitions (p\t=?),
{ i2pis the unique input place,
{ o2pis the unique output place,
{f(pnfogt)[(tpnfig)is a set of arcs (ow relation), and
{is the set of all workow nets
process mining helps process analysts to determine the processes executed by
organizations either to document or to improve them. although reference models
are derived from well-running systems, this does not imply that these processes
are documented by models, correctly describing the executed behavior. thus,
process mining can also help the reference model designer who has log les from
successful process implementations available to create process models.
for this paper we dene a mining algorithm as follows:
denition 3 (mining algorithm). a mining algorithm maps a log le onto
a workow net, i.e.
: !:
we thus abstract from the particularities of the mining algorithm, i.e. may
be any process mining algorithm [1, 2]. further on, we assume that the result of
the algorithm fullls the requirements of a workow net. this is trivial to achieve
for any algorithm that provides a petri net (or a model that can be transformed
into a petri net) by connecting a unique input place to all its initial elements
and a unique output place from all its nal elements [5].
for each log le li2lused for the creation of a reference model, a process
mining algorithm can therefore generate a process model mi=(li) depicting
the behavior of the log le's original system (see top of figure 1). simplied1,
1the description here provides a brief idea of what a process mining algorithm does.
in practice process mining is far more complex as the algorithms, e.g., have to take
concurrency, incomplete logs, noise, or invisible tasks into consideration [2].
5a process mining algorithm splits a log le into the event traces of individual
cases, i.e. process instances. it then constructs the process model by analyz-
ing and comparing the events in the traces. each log event is mapped onto a
corresponding transition in the model. for each event that occurs in the event
trace, the algorithms checks in the the so-far derived model if the corresponding
transition can be reached from the transition corresponding to the preceding log
event. is this not the case, a choice is introduced at the place succeeding the
transition corresponding to the preceding log event by adding a new arc leading
from this place to the transition corresponding to the event in question. the
resulting process model will thus depict that when reaching the particular point
of the process, the process ow can either continue as all the previous traces did
or it can continue as this deviating event trace did.
after having derived a process model mifor each log le li2l, the
process model designer can compare these models with each other. by man-
ually or automatically aligning and merging them, an integrated process model
m+
1::n=m1m2:::mnrepresenting the behavior of all the individual
models can be generated [9].
however, instead of deriving an individual process model for each system and
later on trying to integrate these models, process mining algorithms can also be
used to directly generate an integrated model for all of the log les in l. if we
concatenate all the log les li2linto a single log le l1::n=s
i=1::nli, the
process mining algorithm still works in exactly the same way on l1::nas it did
for each of the individual log les. due to the alignment of event names in the
pre-processing, the algorithm is able to recognize which log events belong to the
same class of events and match them. thus, the algorithm just processes more
process instances and creates a process model m1::n=(l1::n) that is valid
for all these instances. that means, the resulting model usually contains more
choices than each of the individual models mibecause a combined set of event
traces might contain more variants than a subset of these traces. but, as this
model represents the behavior of all the instances from the various systems, the
model is in the same way an integrated process model valid for all the dierent
input systems as a model generated from merging the individual models.2
two properties are important when selecting a process mining algorithm for
building such a process model integrating various process variants.
among dierent systems it is well possible that steps executed in the pro-
cess of one system are skipped in the other system. in such cases, the process
mining algorithm must be able to introduce a by-pass for the skipped step in
the generated process model, e.g. through adding a so-called invisible or silent
transition as an alternative to the skipped transition. the invisible transitions
then allow for state changes without corresponding to any log events and thus
without representing any `real' behavior.
2while the model created by merging several individually mined models should in
theory represent the same behavior as the integrated model mined from the combined
set of log les, the resulting models depend on the used process mining and merging
algorithms and will thus hardly be identical in practice.
6further on, it might later on be desired that a process model can be derived
from the reference model which does not conform exactly to the behavior of one
of the systems used for the development of the reference model. instead it might
be necessary to combine various aspects of dierent systems which requires that
the used process mining algorithm over-approximates the behavior of the input
systems. most process mining algorithms achieve this as they analyze choices
between events only locally and neglect dependencies between choices that do
not directly follow each other. by neglecting such non-local non-free choices, the
resulting process models permit for example to chose in the beginning of the
process a process part that only occurred in a subset of the process instances,
while at a later stage a choice is made for a process part that was not part of
any of these process instances.
an overview of process mining algorithms is provided in [2] while the prom
process mining framework [1, 7] provides implementations for many of these al-
gorithms. the choice for a concrete algorithm and the quality of the resulting
model very much depends on the input log les [15]. in controlled experiences
with high-quality input data, we achieved good results using the multi-phase
miner [5] because it guarantees the tness of all the event traces to the resulting
model. using real-world data, it is however hardly possible to derive such high-
quality log les during the pre-processing. in such cases algorithms that are able
to deal with \noise" in the log les might perform better.
4 deriving congurations
the mined process model allows for the execution of all the process's various
variants as it is based on the execution log les from the varying systems. com-
pared to a set of dierent models, the integrated model has the advantage for the
process designer that later maintenance changes only need to be performed once
on the integrated model, and not various times for each of the process variants.
the integrated model also covers all combination possibilities of process parts
which is usually impossible to achieve when providing a set of process variants.
naturally, reference model users do not need all these variants. instead, they
like to have a specic model covering the individually needed process behavior.
hence, the reference model user needs to congure the integrated model to that
subset which depicts this desired behavior.
to dene such a conguration for workow nets, we simply say that a con-
guration is the set of all elements that should remain in the workow net. in
this way, the congured net can be derived by creating the intersections of the
workow net's elements with the conguration.
denition 4 (conguration). letm= (p;t;f )be a workow net. then
anycp[t[fsuch thatfi;ogcand8(n1;n2)2f\cfn1;n2gcis a
conguration of m.mc= (p\c;t\c;f\c)is the congured workow net
using conguration c.
of course, a careful selection must be made for the conguration as many
congurations are not feasible, e.g. because they would eliminate the execution
7of transitions that are essential for the process. for example, it is obviously
impossible to check an invoice during an invoicing process, if the invoice has
not been created beforehand. that means that in addition to the integrated
model, the reference model provider also needs to oer some guidance to `good'
congurations.
examples for such good congurations are the systems used to create the
integrated process model. these established variants of the process could thus
provide a better starting point for reference model users that want to derive their
individual models than the complete integrated model of all process variants can
be. if we know the congurations of the integrated model leading to the selected,
established process variants, and if we know which of these variants might prob-
ably be the closest to our requirements (e.g. because of a comparable company
size and target market) then the derivation of an individual process would nor-
mally just mean to slightly amend this given conguration by adding a number
of elements from the integrated model to the conguration and/or removing
some of them. in this way, the risky and time-consuming task of conguring the
process from scratch can be avoided.
to determine such a conguration, we can re-use the (cleaned) log le of
the particular system. it contains all behavior possible in the particular system
and can be `re-played' on the integrated model. to depict how this re-play is
performed, we rst need to introduce the concept of a path of a workow model.
denition 5 (path). letm= (p;t;f )be a workow model. then =
fhn1;:::;nmi2(p[t)j(8i=1::m 1(ni;ni+1)2f)gis the set of paths of m. the
set of elements of a path hn1;:::;nmi 2is dened by the
function elements :!i p(p[t[f)such that elements (hn1;:::;nmi) =
fn1;(n1;n2);n2;(n2;n3);:::;(nm 1;nm);nmg.
to depict the re-play we assume that the integrated model was created by
a mining algorithm like the simplied algorithm depicted in section 3 which
guarantees a tness of 1, i.e. that the behavior of all traces of the log le liare
represented by the integrated model, and that aspects like concurrency, noise, or
incompleteness are neglected. in this way, the re-play starts for each trace of the
log le from the input place iof the integrated model and searches for a path to
a transition that corresponds to the rst log event of the particular trace. this
path should however not pass any visible transitions as their occurrence would
require a corresponding event in the log le before the rst event. next, a path
through places and invisible transitions is searched from this transition onwards
to the next log event and so on. when the transition corresponding to the last
log event of an event trace is found, the replay must conclude with nding a
path from this last transition to the output place o. this process is repeated for
every trace in the log le. the conguration of the model corresponding to the
behavior of all these traces is then the set of all the transitions, places, and arcs
used during the re-play. the individual model corresponding to this behavior
can then be derived from the integrated model as depicted in denition 4 and
all unnecessary elements can automatically be dismissed.
8denition 6 (log replay). letm1::n= (p;t vis[tinv;f)be a workow net
withtinvas its set of invisible transitions, and let libe a log le. moreover,
lets
2lievents ()tvisand0=fhn1;:::;nmi2jfn1;nmg2tvis[fi;og^
fn2;:::;nm 1gtinv[pnfi;ogg. then
ci=sfelements (hi;:::;e 1i)jhi;:::;e 1i20^he1;:::i2lig
[sfelements (hek;:::;ek+1i)jhek;:::;ek+1i20^h:::;ek;ek+1;:::i2lig
[sfelements (hem;:::;oi)jhem;:::;oi20^h:::;emi2lig
is the conguration of m1::nthat corresponds to the behavior represented by li.
while the re-play of log les on models that were created using more sophis-
ticated process mining algorithms is more complex (e.g. a log event might not
have a corresponding transition or the path to the next log event might start
from a dierent transition which corresponds to an earlier log event) [14], the
conguration can still be discovered by simply identifying the visited model el-
ements. an algorithm to perform such a complex re-play is for example part of
the conformance checker provided by prom.
5 conclusions
in this paper we showed how reference process models can be constructed from
log les of established business processes. derived by proven process mining
algorithms, these models depict and integrate the behavior of several dierent
variants of a common business process. such an integrated model can afterwards
be restricted to the individual process variant required by an organization by
means of congurations. by re-playing a log le of an existing system on the inte-
grated model, a conguration of the model conforming to the system's behavior
can be identied. such congurations can serve as starting points for individ-
ual congurations. while the development of process mining and conformance
checking methodologies mainly aimed at understanding and improving existing
systems, they also proofed to be very useful for aligning various, successfully
running systems during our experiments. by highlighting the individual cong-
urations on the model, users can detect similarities and dierences among the
process variants as well as new possible congurations far easier than if they
have to compare separate models.
in future research we have to setup experiments with larger real-world data to
provide further guidance into the practical usage of the suggested methods as well
as to test the applicability of further machine learning techniques. for example,
we expect that the mining of association rules among dierent congurations
can provide insights on interdependencies between conguration decisions and
thus be used for further guidance on making conguration decisions. the re-
play of log les generated from systems that are already based on a congurable
reference model might help improving the congurable model over time.
acknowledgements. we thank antal van den bosch and ton weijters for
providing us with insights into the various machine learning techniques.
9references
1. w.m.p. van der aalst, b.f. van dongen, c.w. g unther, r.s. mans, a.k. alves de
medeiros, a. rozinat, v. rubin, m. song, h.m.w. verbeek, and a.j.m.m. wei-
jters. prom 4.0: comprehensive support for real process analysis. in petri nets
and other models of concurrency icatpn 2007 , volume 4546 of lncs , pages
484{494. springer, 2007.
2. a.k. alves de medeiros. genetic process mining . phd thesis, technische univer-
siteit eindhoven, 2006.
3. j. becker, p. delfmann, and r. knackstedt. adaptive reference modelling: inte-
grating congurative and generic adaptation techniques for information models.
inreference modeling , pages 27{58. springer, 2007.
4. p. cabena, p.hasjinian, r. stadler, j. verhees, and a. zanasi. discovering data
mining: from concept to implementation . prentice-hall, upper saddle river, nj,
usa, 1998.
5. b.f. van dongen and w.m.p. van der aalst. multi-phase mining: aggregating
instance graphs into epcs and petri nets. in proceedings of the second inter-
national workshop on applications of petri nets to coordination, workow and
business process management , pages 35{58. florida international university, mi-
ami, fl, usa, 2005.
6. b.f. van dongen, m.h. jansen-vullers, h.m.w. verbeek, and w.m.p. van der
aalst. verication of the sap reference models using epc reduction, state-
space analysis, and invariants. computers in industry , 58(6):578{601, 2007.
7. eindhoven university of technology. the prom framework. http://prom.sf.net/.
8. p. fettke and p. loos. classication of reference models { a methodology and its
application. information systems and e-business management , 1(1):35{53, 2003.
9. f. gottschalk, w.m.p. van der aalst, and m.h. jansen-vullers. merging event-
driven process chains. bpm center report bpm-08-08, bpmcenter.org, 2008.
10. f. gottschalk, w.m.p. van der aalst, m.h. jansen-vullers, and m. la rosa. con-
gurable workow models. international journal of cooperative information sys-
tems, 17(2):177{221, june 2008.
11. g. keller and t. teufel. sap r/3 process-oriented implementation: iterative
process prototyping . addison wesley longman, harlow, uk, 1998.
12. d. pyle. data preparation for data mining . morgan kaufmann, san francisco,
ca, usa, 1999.
13. m. rosemann and w.m.p. van der aalst. a congurable reference modelling
language. information systems , 32(1):1{23, march 2007.
14. a. rozinat and w.m.p. van der aalst. conformance checking of processes based
on monitoring real behavior. information systems , 33(1):64{95, 2008.
15. a. rozinat, a.k. alves de medeiros, c.w. g unther, a. j. m. m. weijters, and
w.m.p. van der aalst. the need for a process mining evaluation framework in
research and practice. in business process management workshops , volume 4928
oflncs , pages 84{89. springer, 2008.
16. o. thomas, b. hermes, and p. loos. towards a reference process model for event
management. in business process management workshops , volume 4928 of lncs ,
pages 443{454, 2008.
17. s. zhang, c. zhang, and q. yang. data preparation for data mining. applied
articial intelligence , 17(5):375{381, 2003.
10