a framework for the systematic comparison and evaluation
of compliance monitoring approaches
linh thao ly
ulm university
thao.ly@uni-ulm.defabrizio maria maggi
university of tartu
f.m.maggi@ut.eemarco montali
free university of bozen-bolzano
montali@inf.unibz.it
stefanie rinderle-ma
university of vienna
stefanie.rinderle-ma@univie.ac.atwil m.p. van der aalst
eindhoven university of technology
w.m.p.v.d.aalst@tue.nl
abstract —to support the whole business process com-
pliance lifecycle, one also needs to monitor the actual
processes and not just check their design. recently, many
approaches have been proposed that utilize a broad range
of constraint languages and techniques to realize compliance
monitoring solutions. due to this diversity, the comparison
of existing approaches is difﬁcult and consequently hampers
the evaluation of which approaches are suitable for which
application scenarios. this paper provides a framework to
compare and evaluate existing compliance monitoring ap-
proaches. the framework is based on ten typical compliance
monitoring functionalities (cmfs). these have been derived
using a systematic literature review and ﬁve case studies from
different domains. existing approaches are evaluated based
on the cmf framework, resulting in a list of open questions
and a discussion of new challenges in this ﬁeld.
keywords -process mining; business process compliance;
compliance monitoring; operational support
i. i ntroduction
for today’s organizations, proving that their business
processes comply with certain regulations has become a
major issue. even though the necessary compliance checks
are predominantly viewed as a burden [1], business pro-
cesses that violate regulations cannot only cause damage
to an organization’s reputation and thus harm the business
success but can also lead to severe penalties and even
legal actions [2], [3]. in general, compliance checking
deals with the problem of understanding whether actual,
logged traces represent behaviors that are aligned with the
expected behaviors foreseen by compliance rules (such as
business rules, guidelines and best practices, external laws
and internal regulations).
lifecycle support for process compliance comprises
design time compliance checks, (online) compliance mon-
itoring during runtime and post-mortem compliance anal-
ysis. compliance monitoring is considered an important
building block in this lifecycle [3] for reasons such as
timely detection of non-compliance as well as provision
of reactive and proactive countermeasures. in particular,
compliance monitoring is related to operational deci-
sion support , which aims at extending the application
of process mining techniques to on-line, running processinstances, so as to detect deviations, recommend what
to do next and predict what will happen in the future
instance execution [4]. in this paper, we explicitly focus
on compliance monitoring approaches.
fig. 1 depicts the general compliance monitoring archi-
tecture. the business it tier at the bottom is where the
business processes, scattered over different systems (e.g.,
erp or crm tools), are executed. to gather events from
the different systems and make them available for compli-
ance monitoring, an event bus (or a similar infrastructure)
is required. such event architecture is often already in
place in many companies as part of the middleware stack.
in general, compliance monitoring approaches are
driven by two factors: (1) the compliance rule language
that is used to specify the compliance requirements and
(2) the event format the compliance checks are based
on. due to the possible heterogeneity of the data sources
employed, an integrated target event format is desirable. in
2010, the ieee task force on process mining has adopted
xes (extensible event stream) [5] as the standard for
storing, exchanging and analyzing event logs. due to its
extension mechanism, xes enables the consideration of
many aspects relevant in the context of business process,
e.g., time and organizational issues.
lately, a multitude of compliance monitoring ap-
proaches has arisen that utilize a broad range of languages
to express compliance requirements and different tech-
niques to realize monitoring solutions. due to this diver-
sity, the comparison of existing approaches is difﬁcult and
consequently hampers the evaluation of which approaches
are suitable for which application scenarios. hence, the
overall goal of this paper is to provide a framework for
evaluating existing approaches based on typically used
compliance monitoring functionalities (cmfs) using a
style similar to existing frameworks for process patterns
[11], [12], [13].
from a methodological point of view, cmf engineering
can be conducted following the explicitly speciﬁed and
well-proven research methodology for engineering process
change and time patterns as applied in [12], [13], i.e., by
1) deﬁning selection criteria, 2) describing the data sourcesreporting and visualization 
event bus 
erp crm wfms …compliance monitoring compliance requirements figure 1. the general compliance monitoring architecture
table i
case studies
domain project url reference
health care ebmc2ebmc2.univie.ac.at [6]
manufacturing adventure www.fp7-adventure.eu [7]
higher education hep www.wst.univie.ac.at/communities/hep/ [8]
maritime safety poseidon www.esi.nl/poseidon/ [9]
it project management seaflows www.seaﬂows.de [10]
and the process of data collection and 3) describing the
cmf identiﬁcation procedure. in the following, we brieﬂy
discuss how each of these steps was applied in this paper.
1)selection criteria : we focus on the elicitation of
functionalities that are relevant for process compli-
ance monitoring, i.e., the observation and enforce-
ment of compliance constraints that are imposed over
business processes during run time . this means that
functionalities for compliance veriﬁcation at process
design time or compliance by construction are not
considered. moreover, we exclude monitoring of con-
straints that do not refer to any process activity, e.g.,
integrity constraints on process data elements [14].
2)data sources and collection : the acquisition of the
cmfs used two information sources: a systematic
literature review on process compliance monitoring
approaches [15], [16], [17], [10], [18], [19], [20],
[21], [22], [23], [24] and case studies from ﬁve
different domains as summarized in table i. for the
literature review, we harvested relevant keywords in
the context of compliance monitoring and used them
for literature selection by matching with title and
abstract. the selection of the case studies was mainly
driven by covering different application domains as
well as the availability of the related processes and
compliance requirements.
3)cmf identiﬁcation procedure : we systematically
collected cmf candidates from the different sources
as described above. in principle, we considered ev-
ery cmf discovered from these sources, but only
after “cleaning” and/or aggregating/segmenting the
set of cmf candidates. this resulted in a framework
consisting of 10 cmfs. the cleaning and aggregat-
ing/segmenting task was conducted based on three
rounds of expert discussions. the expert discussions
were conducted along the 10 cmfs in a qualitative
way. as the research area is further developing, more
cmfs may be added to this framework over time.the main contribution of this paper is the framework of
ten typical functionalities for process compliance monitor-
ing presented in section ii. existing approaches including
implementations are discussed along the proposed cmf
framework in section iii resulting in a collection of open
challenges and research questions. section iv concludes
the paper.
ii. c ompliance monitoring functionalities
we now introduce the framework of compliance moni-
toring functionalities (cmfs). they have been engineered
following the methodology as set out in [12], [13] and
described in section i. in brief, we ﬁrst harvested cmf
candidates from a literature study and the ﬁve case studies
summarized in table i. based on expert discussions,
these candidates were then cleaned and aggregated to the
following ten cmfs. each cmf is described by listing its
name , a brief problem statement, a description , guidelines
about the evaluation criteria ,implementation hints, related
patterns andexamples of compliance rules illustrating the
functionality.
cmf 1: constraints may refer to time
problem: the bulk of real-world compliance rules involve
the combination of multiple activities or events in time.
hence, time is obviously one of the most important
dimensions that a compliance rule language must tackle.
description: time-related conditions within compliance
monitoring constraints may be qualitative orquantitative
(i.e., metric time). this determines how temporal entities
can be related to each other. a qualitative notion of time
supports comparison between temporal entities without
referring to their actual distance. typical qualitative tem-
poral patterns are “before” and “after”. such temporal rela-
tions are utilized, for example, to capture the fundamental
ordering between events constrained by a compliance rule.
in contrast to qualitative time constraints, metric (or quan-
titative) time constraints specify the distance between timeentities. metric constraints typically refer to deadlines,
delays and latency constraints in compliance rules [25],
[13].
evaluation criterion: to fully support this functionality,
the approach under evaluation must be able to monitor
qualitative andquantitative time-related conditions.
implementation: we brieﬂy discuss the case of atomic
timestamps, which are associated to a point-based algebra
(see cmf 4 for a discussion on durative time entities).
temporal logics such as ltl, ctl* and -calculus [26]
all adopt an inherent qualitative notion of time. thus, they
easily capture qualitative temporal relations such as “be-
fore” or “after”. if not already inherent, such temporal re-
lations can be introduced to the compliance rule language
as the semantics of these relations can be deﬁned over
execution traces (and their linear/branching future). when
metric times come into play, two approaches are typically
followed for their representation: an implicit approach,
embedding them inside temporal operators (like in real-
time logics such as mtl and tltl [27]) and an explicit
approach, where explicit time variables are introduced and
subject to arithmetic constraints (like in extensions of logic
programming such as the event calculus [28]).
related patterns: cmfs 2, 9.
examples:
(qualitative time) for payment runs with amount beyond
e10,000, the payment list has to be signed before being
transferred to the bank and has to be ﬁled afterwards for
later audits [10].
(qualitative time) when an investor receives an amount
of money, she becomes in charge of eventually investing
it in bonds or in stocks and she cannot receive money
anymore before the investment [15] (this is called “alternate
response” in the declare language [18], [29]).
(quantitative time) for stage 1a patients, an appointment
for sonography has to be made within 12 months (european
skin cancer treatment guideline [30]).
(quantitative time) a passenger ship leaving amsterdam
has to moor in newcastle within 16 hours [9].
cmf 2: constraints may refer to data
problem: compliance rules often not only deﬁne con-
straints on activities or events but also contain conditions
on data processed in a business process.
description: data refer to the ability of the compliance
rule language to not only target the control-ﬂow compo-
nent, but also the data component . this leads to data-aware
compliance rules that can include constraints, require-
ments and expectations about data and their values. for
what concerns the constraints’ shape, a major distinction
can be drawn between unary data conditions that just
involve a single data object and extended conditions that
possibly relate multiple data objects at the same time.
unary data conditions take the form d⊙v, where d
is some data object, ⊙is a comparison operator and v
is some value of d’s domain. extended data conditions
compare instead expressions involving data objects and
values. according to the classical data-related workﬂow
patterns [31], we can further distinguish between differentsources of data, namely activity data , i.e., data taken in
input or produced by the activities of a business process
andcase data , namely data that are associated to a whole
process instance and can be accessed/manipulated by all
activity instances executed inside the case.1
evaluation criterion: to fully support this functionality,
the approach must be able to monitor unary data condi-
tions andextended data conditions over activity andcase
data.
implementation: data-aware compliance rule languages
typically employ variables to denote data objects and con-
ditions to pose constraints over them. the main difference
lies then in the domains of the data objects, as well as in
the “shape” of such constraints. in order to support data-
aware compliance rules, the corresponding compliance
monitoring approach must be able to evaluate the truth
of data conditions. this necessitates access to respective
data sources within the process runtime environment.
related patterns: cmfs 1, 3. in some approaches, time
and resources can be dealt with at the same way as other
types of data. cmf 9.
examples:
(activity data) the value of the tumor marker ca-125
written by activity blood test before the ﬁrst cycle of
chemotherapy must be smaller than the value of the tumor
marker ca-125 written by activity blood test executed
after the third cycle of chemotherapy (esmo clinical
guideline [32]).
(case data/extended data condition) if a vessel (case) is of
type ﬁshing boat, the size of the boat is above 25 meters
(100 tons) and it is located at 54 degrees of latitude and 8.5
degrees of longitude, it cannot be engaged in ﬁshing [9].
(unary data condition) the value of data element hardcosts
has to be smaller than 250 [33].
(comparison of multiple data objects) if the ﬁrst test
terminates with a certain result code, then all the conse-
quent executions of the test should return the same result
code [10].
cmf 3: constraints may refer to resources
problem: compliance constraints often relate to organi-
zational resources involved in the business process.
description: compliance rules often involve not only
the control-ﬂow and the data perspective but also the
organizational perspective of a business process. this is
particularly true for compliance rules stemming from legal
sources. resource-related conditions in compliance rules
can be considered a special case of data-related constraints
where the data refers to the resources involved. this is
because resource-related information is often represented
as case or activity data. resource-aware compliance rules
include constraints, requirements and expectations on re-
sources (e.g., agents or roles) associated with activities
or events. similarly to data-related constraints, we can
distinguish between unary resource conditions expressing
expectations on speciﬁc resource properties in isolation
1note that other data patterns like scope and block data are too ﬁne-
grained in the compliance monitoring setting.and extended resource conditions relating multiple re-
sources.
evaluation criterion: to support this functionality, the
approach under evaluation must be able to monitor unary
resource conditions andextended resource conditions.
implementation: depending on the particular event
model and the process runtime environment, language-
wise constraints on resources may be dealt with in a
similar manner as data-related constraints. clearly, the
evaluation of resource-related constraints requires access
to resource information (such as originators, roles, groups)
during process execution. this is supported by the xes
organizational extension (cf. section i).
related patterns: cmfs 2, 9.
examples:
(unary resource condition) projects exceeding 5 days must
be approved by the management.
(extended resource condition) every closed project must be
validated by a person who did not participate in the project
(4-eyes principle ).
cmf 4: supporting not just atomic but also non-
atomic activities
problem: activities in a process may be non-atomic, i.e.,
may have a duration. hence, compliance rule languages
must also support non-atomic activities.
description: non-atomic activities are durative activities
whose execution spans across a time interval. while the
execution of an atomic activity is associated to just a single
event attesting that an instance of the activity has been
“done”, non-atomic activities are associated to multiple
events and to a lifecycle that disciplines the allowed
orderings among such events. the lifecycle contains at
least the two event types start andcomplete . moreover,
often additional event types such as suspend, resume,
abort are possible [5]. compliance rules dealing with non-
atomic activities follow either an explicit approach, talking
about their multiple, atomic constitutive events, or an
implicit approach, where the activities are mentioned as
such without referring to their events.
evaluation criterion: to fully support this functionality,
the approach under evaluation must be able to monitor
explicit orimplicit conditions on non-atomic activities.
implementation: implementations differ depending on
whether the explicit or implicit approach is adopted.
with the explicit approach, the monitoring framework
must be able to handle at least two types of information
about each event: the activity it refers to and its type,
which must be one of the event types constituting the
activity lifecycle. since the language directly tackles these
constitutive atomic events, it typically relies on a point-
based algebra to relate their relative position in time. the
implicit approach directly targets activities and assumes
that the time windows corresponding to their (non-atomic)
executions can be reconstructed from the monitored event
stream. since the monitoring language predicates in this
case over durative temporal entities, it relies on an intervalalgebra (such as the one by allen [34]) to relate the
execution of different activities over time. see [35] for
a survey on temporal reasoning.
related patterns: cmf 5, which extends cmf 4 with the
ability of modeling and monitoring the activity lifecycle
itself. cmf 9.
examples:
(explicit) a ﬂight payment cannot be canceled more than
twice.
(explicit) an order creation cannot be completed until the
customer registration is completed.
(implicit) activity check project can be executed only while
the project is under preparation.
(implicit) activities check project and modify project must
not overlap.
cmf 5: supporting activity lifecycle
problem: non-atomic activities are associated to a life-
cycle deﬁning the allowed orderings of the constitutive
events. suitable monitoring mechanisms should be pro-
vided to check whether this lifecycle is indeed followed.
description: the activity lifecycle describes the allowed
executions of events constituting non-atomic activities. in
particular, the lifecycle represents each constitutive event
marking a step of such executions, in which states it can
occur and to which state of the activity it leads. this
latter aspect implicitly deﬁnes the allowed orderings of
the constitutive events. the lifecycle is therefore mostly
captured by a state chart (cf. adept [36] or iupc [37]).
in general, multiple, independent executions of the same
activity (i.e., activity instances) can occur inside a case.
each such instance corresponds to an instance of the activ-
ity lifecycle. a proper correlation mechanism is required
to correctly manage the progressions of each lifecycle
instance and, in particular, to associate a given event to the
right corresponding lifecycle instance. for example, if two
starts of some activity and two completions of the same
activity occur during a case, it is necessary to identify to
which start event each completion event refers to. from
the monitoring point of view, (meta-)rules capturing the
activity lifecycle and its instances can be used to check
whether the activity executions contained in a given trace
indeed comply with the expected lifecycle constraints.
evaluation criterion: to fully support this functionality,
the approach under study must capture the activity life-
cycle and implement a correlation mechanism between
events.
implementation: implementations of this cmf are pos-
sible if the compliance rule language supports: (i)the
notion of “state”, (ii)a correlation mechanism between
events. out-of-order events can either be ignored, or
managed by putting the corresponding activity instance
into a special “error” state, pointing out that a deviation
from the expected lifecycle has been detected. correlation
can be realized by providing a special parameter used
to identify the corresponding activity instance. this way,
two events carrying the same identiﬁer are recognized to
be part of the same lifecycle. events carrying differentidentiﬁers but referring to the same activity correspond to
different parallel lifecycle instances.
related patterns: cmfs 4, 9.
examples:
(activation) a start event creates an activity instance and
puts it into the “active” state.
(completion) each completion event moves its associated
activity instance to the “completed” state, provided that the
instance is currently “active”.
(balance start/complete events) for every activity instance,
each start event has a single corresponding completion or
cancelation event.
cmf 6: multiple-instances constraints
problem: there may be multiple instances of the same
compliance rule in a trace due to multiple, possible parallel
occurrences of the involved activities. monitoring at the
instance level allows for tracking ﬁne-grained compliance
rules.
description: when compliance rules are able to constrain
time in a quantitative way (cmf1) and/or data (cmf2)
and/or resources (cmf3), the same compliance rule can
be activated multiple times, as multiple events referring
to the activities targeted by the rule occur, each with its
own timestamp, data and resource information. in fact,
each of such events provides a speciﬁc “context” for the
compliance rule. this context is then used to instantiate the
temporal/data/resource conditions possibly associated with
the compliance rule. consider, for example, the rule stating
that every time an order ois closed by the client, then
order omust be eventually delivered by the warehouse .
clearly, the constraint is instantiated for each speciﬁc
closed order and each instance has its own evolution
depending on events speciﬁc for this order. for example,
it could happen that two orders are closed but only one
is delivered. in this case, two instances of the compliance
rule should be generated by the monitoring framework,
then judging one of them as satisﬁed and the other one as
violated. a discussion on multiple instances handling can
be found in [10], [25].
evaluation criterion: to support this functionality, the
approach under evaluation must be able to monitor mul-
tiple instances based on metric time and/or data and/or
resources.
implementation: supporting multiple instances of a com-
pliance rule requires mechanisms to discriminate between
different rule activations. this can be achieved by pre-
cisely characterizing which information (time, data, re-
sources) contributes to deﬁne the “context” of the rule
(see the examples below) and which are the events that
create separate instances of the rule by ﬁlling this context
with speciﬁc values. each observed rule instance has to
be associated with a separate compliance state in order to
assess compliance at the rule-instance level.
related patterns: cmfs 1, 2, 3, 9. notice that cmf 5
and 6 are both concerned with introducing ﬁne-grained
analysis of compliance rules, but while cmf 5 focuses onmulti-instance support for tasks, cmf 6 deals with multi-
instance support for compliance rules. hence, it may be
the case that one of the two cmfs is supported, while the
other is not.
examples:
(multiple instances based on timestamps) every ﬁnal sub-
mission has to be corrected within 6 weeks. here, every
submission cycle termination creates an instance of the
compliance rule determined by its timestamp t; the instance
then checks that the correction occurs between tandt+6,
assuming a granularity of weeks [8].
(multiple instances based on data and resources) the
carbon footprint of a supplier must not exceed a value
ofx. depending on the number of suppliers modeled as
resources, the constraint is instantiated multiple times. if
suppliers can be added during runtime, the number of
constraint instantiations will increase accordingly.
cmf 7: ability to reactively detect and manage com-
pliance violations
problem: if a violation is tailored to logical inconsistency,
the computed answer of a monitor approach would simply
be repeatedly “non compliant”. however, a compliance
monitoring approach may accommodate a variety of ad-
ditional advanced features (besides detection) to continue
the monitoring after a violation takes place, give feedback
to the user and suggest compensation actions.
description: in the context of reactive detection and
management of compliance violations, these factors can
be exploited to characterize the degree of support provided
by a compliance monitoring approach:
detection , the ability to detect compliance violations.
continuous monitoring , the ability to continue mon-
itoring after a violation.
feedback , the ability to provide detailed compliance
reports (see cmfs 9 and 10).
recovery and compensation mechanisms, used to
react to a violation with proper countermeasures.
evaluation criterion: to support this functionality, the
approach under evaluation must implement one or more
recovery mechanisms to guarantee continuous monitoring.
in addition, the approach must provide ﬁne-grained feed-
back to the user.
implementation: as for recovery and compensation, an
added feature of the compliance rule language is the ability
of dealing with violations. an event violating a rule can be
used to contextualize it, making the rule active only when
some violation takes place. this kind of rule represents
a form of recovery or compensation, which introduces
further constraints/requirements upon a violation. this
can be realized, for example, by means of the so-called
contrary-to-duty operator [38] to the compliance rule
language. continuous monitoring can be a challenge for
logic-based approaches (e.g., [18]) as the approach must
be able to tolerate inconsistencies to continue monitoring
after a violation occurred. in [15] the authors introduce
some recovery capabilities to realize different strategies
for continuous monitoring showing that automata basedapproach are able to accommodate sophisticated recovery
mechanisms.
related patterns: cmfs 6, 8, 9, 10.
examples:
(recovery and compensation) generally, the patient has to
formally conﬁrm that she has been informed about risks
prior to invasive treatments. if this is not the case (e.g., in
emergency cases), this has to be documented and the patient
has to be informed about the treatment risks afterwards
(contrary-to-duty obligation).
cmf 8: ability to pro-actively detect and manage
violations
problem: while recovery and compensation measures
may be applied when detecting a violation, the violation
itself cannot be undone. to prevent possibly costly com-
pensation, a compliance monitoring approach should be
able to provide support for pro-actively detect and manage
possible compliance violations.
description: pro-active support includes detecting future
violations and mechanisms for preventing violations. fu-
ture violations are violations whose source is not yet
explicitly contained in the trace. they can be detected by
implicit violations caused by currently conﬂicting rules.
the presence of conﬂicting rules identiﬁes violations that
cannot be revealed by considering each compliance rule
in isolation, but only by merging the contribution of two
or more compliance rules. the early detection of such
future compliance violations enables timely preparation
of recovery and compensation actions. support for pre-
venting violations refers to the ability of a compliance
monitoring framework to provide assistance for complying
with imposed rules before compliance violations become
manifest. this comprises, for example, predictions and
recommendations of activities to be executed next in order
to preserve compliance.
evaluation criterion: to support this functionality, the
approach under evaluation must implement mechanisms
for the early detection of conﬂicting conditions orprovide
the user with recommendations about what to do next to
avoid violations.
implementation: future violations as described can be
detected when considering the interaction of all imposed
compliance rules. a typical task is evaluating whether the
compliance rules are not conﬂicting a-priori, i.e., that the
whole set of rules admits at least one compliant execution
trace. however, compliance rules that are not conﬂicting in
general may still become conﬂicting at some point during
the process execution. thus, checking of compliance rules
at design-time or per individual constraint, is not sufﬁcient
for detecting all types of future violations. it should be
noted that supporting such implicit violations can become
quite costly and the cost grows with the amount of rules
involved. for expressive compliance rule languages, this
becomes even undecidable. the identiﬁcation of suitable
decidable compliance rule patterns for data- and time-
aware compliance rules is still an open challenge. toavoid violations in a running process instance, it is also
possible to give recommendations about what to do next
by exploiting complete cases stored in event logs (e.g.,
using process mining techniques).
related patterns: cmfs 7, 9, 10.
examples:
(early detection of a violation) every time an order is deliv-
ered, the warehouse must be replenished. if the replenish-
ment truck is broken, the warehouse cannot be replenished.
consider an execution where the truck is broken and the
order delivered. approaches able to detect conﬂicts among
rules would in this case point out an (implicit) violation:
the ﬁrst constraint requires a replenishment and the second
forbids it.
(predictions and recommendations) requests for building
permits need to be handled within 3 months. based on
historic information, i.e., comparing a request currently
being handled with earlier requests, one can predict the
remaining processing time. a counter measure is taken if
the predicted remaining processing time is too long.
cmf 9: ability to explain the root cause of a violation
problem: key to the practical application of a compliance
monitoring approach is its ability to pinpoint the root
cause of a compliance violation beyond providing the
counterexample that resulted in the violation. this is
particularly true when a compliance rule can be violated in
multiple ways or multiple rules are involved in a violation.
description: root cause analysis enables to diagnose the
root cause of a compliance violation, e.g., by isolating the
responsible event occurrences or the involved compliance
rules. note that this kind of analysis is far from trivial and
sometimes could lead to multiple possible explanations or
to no explanation at all. consider, for example, the case
of a sequence of events that culminates in the expiration
of a deadline: isolating the responsible events in this case
is impossible in general. similarly, as discussed in [16]
there can be multiple sets of compliance rules that are
involved in a violation at the same time and therefore ﬁne-
grained analysis is needed to identify the minimal set(s)
of conﬂicting rules. beside the root cause analysis itself, it
is also of utmost importance to provide suitable ways for
communicating the result of the analysis to the end users
in a comprehensible and intuitive manner [10].
evaluation criterion: to support this functionality, the
approach must implement mechanisms for root cause
analysis.
implementation: for future research, effort should be
taken to provide diagnostics and proactive recommen-
dations based on the identiﬁcation of the root cause
of a violation as this is so far addressed by only few
approaches [10], [17], [16].
examples:
(root-cause of a violation within one rule) after the
component test is ﬁnished, an integration test has to be
conducted. conceivably, it is required that the component is
not changed between these tests (as then a new component
test becomes necessary). if the component test is ﬁnished
and yet the component is changed before the integrationtest is ﬁnally carried out, clearly the constraint is violated.
however, the root-cause is not that no integration test was
conducted but that the component was modiﬁed before the
integration test [10].
(root-cause of a violation involving multiple rules) if
medicine a is administered, follow-up medication with b
becomes necessary. if medicine c is administered, follow-
up medication with d is needed. due to an incompatibility,
b and d must not be administered together. even though
there is no incompatibility between a and c, if tasks
administer a and administer c both occur in a process,
this will cause a violation.
cmf 10: ability to quantify the degree of compliance
problem: compliance metrics and indicators should be
employed by a monitoring framework in order to provide
aggregated feedback to the users, summarizing the detailed
information computed for each compliance rule.
description: the practical feasibility of a compliance
monitoring approach also relies on its ability to give
practitioners a sense of the compliance situation. for that,
crisp approaches associating two possible truth values
to each compliance rule, representing whether it is sat-
isﬁed or violated, is not sufﬁcient. in contrast to crisp
compliance characterization, fuzzy approaches allow for
a range of values to capture the “degree of compliance”
of the running trace with respect to a compliance rule.
in this respect, we differentiate between approaches that
discretize the possible truth values from approaches that
adopt continuous distributions between 0 (violation) and
1 (satisfaction).
evaluation criterion: to support this functionality, the
approach under evaluation must be able to characterize
the “healthiness” of a running trace through metrics.
implementation: a typical approach to quantify the de-
gree of compliance is to “count” the number of viola-
tions and devise meaningful metrics that give a measure
about the overall compliance degree of a running process
instance. this is particularly effective when multiple-
instances are managed (cf. cmf 6). more ﬁne-grained
metrics can be devised by using detailed information about
individual violations. approaches using a continuous scale
need to calculate a “degree” of compliance, rather than
simply providing a yes/no answer. e.g., in the case of
a deadline, a matching function could assign different
noncompliance weights to traces missing the deadline,
depending on the amount of time that exists between the
deadline and the (late) event occurrence.
related patterns: cmfs 1, 2, 3, 7.
examples:
(metrics) a vessel cannot be not under command, a ves-
sel with one occurrence of not under command is more
“healthy” than a vessel with nine occurrences of not under
command [9].
(fuzzy) a passenger ship leaving amsterdam has to moor
in newcastle within 16 hours. it is desirable to judge with
different degrees of violation a ship arriving in newcastle
after 16 hours and ten minutes and a ship arriving in
newcastle after 18 hours [9].iii. e valuation
we evaluated compliance monitoring approaches using
the 10 cmfs presented in this paper. we focused on
compliance monitoring approaches, which mainly address
compliance checks during the process execution. these
approaches are different from other approaches that can
be used in other phases of the process lifecycle such as
process design (e.g., [39]) or the modeling of compliance
constraints (e.g., [1], [40]) and trigger speciﬁc questions.
for example, monitoring is carried out with actual data and
by considering ﬁnite, evolving preﬁxes of event traces.
furthermore, we selected the approaches to be evaluated
based on the degree of detail on concepts provided in
publications. in fact, a certain degree of detail (for exam-
ple, in the used compliance rule languages) is necessary
in order to properly evaluate the approaches through our
framework. in addition, in order to compare them in terms
of performance and effectiveness, toolset availability is
crucial. the results of the evaluation are shown in table ii,
where “-”, “+” and “+/-” indicate functionalities that are
not supported, supported and partially supported from the
conceptual viewpoint. bold emphasizes cases for which
an implementation is publicly available.
mobucon ltl [15], [16] deals with a qualitative notion
of time (being based on ltl) but it does not support con-
straints concerning metric time. mobucon ltl monitors
ﬁnite-trace ltl constraints through deterministic ﬁnite
state automata. therefore, it does not tackle constraints
referring to data and resources (ranging over ﬁnite state)
because of the state space explosion problem. with this
approach, it is possible to express rules on non-atomic
activities but it does not fully support the monitoring of
activity lifecycle. indeed, with this approach it is possible
to associate an event type to each occurrence of an activity.
however, a correlation mechanism to link different events
belonging to the lifecycle of the same activity cannot be
deﬁned. this is, again, related to the impossibility for an
automata-based approach of monitoring constraints refer-
ring to data. indeed, the most natural way of implementing
such a correlation mechanism would be to connect events
with the same value for a certain data (e.g., an activity id).
mobucon ltl provides proactive support. indeed, it is
able to detect violations caused by the interplay of two or
more constraints. the approach has been implemented and
deployed as a prom operational support plug-in.2the tool
only supports simple metrics for quantifying the degree of
compliance of a case [41].
in [41], the authors also provide ways for quantifying
the degree of compliance in mobucon ec [25]. however,
also in this case, more sophisticated measurements for a
thorough compliance evaluation are still missing. the core
functionalities of mobucon ec have been implemented
in prolog and are publicly available.3the integration
with the operational support backbone of prom is an
ongoing effort. being based on the event calculus, it
2http://www.win.tue.nl/declare/mobucon/
3https://www.inf.unibz.it/ montali/tools.htmltable ii
cmf s and evaluation of some monitoring approaches
approach cmf 1 cmf 2 cmf 3 cmf 4 cmf 5 cmf 6 cmf 7 cmf 8 cmf 9 cmf 10
time data resources non-atomic lifecycle multi-
instancereactive
mgmtproactive
mgmtroot cause compl.
degree
mobucon ltl +/- - - + - - + + + +/-
mobucon ec + +/- + + + + + - +/- +/-
ece rules + +/- + + - - + - +/- +
supervisory control theory +/- - + + + - - + - -
seaflows +/- +/- +/- + +/- + + + + +/-
can easily accommodate explicit (metric and qualitative)
time constraints and activity data. accordingly, it manages
multiple constraint instances, with a limited form of root
cause analysis (it is possible only to associate violations
to compliance rule instances). currently, case data is
not supported. due to the richness of the language, the
framework cannot afford to support pro-active detection
of violations, but only violations that are explicitly present
in the monitored trace. in particular, it can only check the
trace of events collected so far, but not analyze the possible
future executions.
similar limitations also apply to ece rules [42]. note
that ece rules are a domain-independent approach that
was not speciﬁcally tailored for business process mon-
itoring. therefore, functionalities like support for case
data and activity lifecycle were simply not investigated
(this is matter of ongoing work). ece rules can deal
with both atomic and non-atomic temporal entities, cap-
turing qualitative and metric time constraints, as well as
point-based and interval-based ones. two key features
characterize ece rules. first, they support an imperfect
(i.e., fuzzy and probabilistic) matching between expected
and occurred events and hence deal with several ﬁne-
grained degrees of compliance. second, expected events
can be decorated with countermeasures to be taken in
case of a violation, hence providing ﬁrst-class support for
compensation mechanisms.
the framework described in [17] is based on su-
pervisory control theory. this approach allows for the
deﬁnition of constraints on resources but, in general, it
does not support data conditions. through this approach,
it is possible to supervise the process-aware information
system by “blocking” those events that would lead to a
violation. this can be considered as a very sophisticated
form of proactive violation management, which is appli-
cable only when the process-aware information system
can be (at least partially) controlled by the monitor. since
violations are prevented, the framework does not directly
consider the problem of reactive management nor violation
explanation.
seaflows [10] aims at encoding compliance states in an
easily interpretable manner to provide advanced compli-
ance diagnosis. while qualitative time is supported in the
graphical compliance rule language of seaflows, quanti-
tative time is not supported. it supports unary data and
resource conditions over activity and case data. however,
extended data/resources conditions are not yet addressed.
even if the activity lifecycle is not addressed, seaflowsprovides a correlation mechanism for events that can be
exploited for providing activity lifecycle support. proactive
support in terms of guiding the process execution to
avoid compliance violations is supported. even if the
compliance states of multiple compliance rule instances
can be aggregated to provide an overall compliance degree,
the framework still lacks a deeper investigation about
metrics.
as can be seen from table ii, several approaches deal
with cmfs 1 - 4. further work needs to be done in
terms of supporting extended data and metric time condi-
tions. fundamental issues such as detection of violations
are already well-understood as well. better user support
in detecting and managing compliance violations and
explaining reasons for compliance violations should be
provided (cmfs 7 - 9). activity lifecycle and multiple-
instances constraints are also not well supported (cmfs
5 - 6). referring to cmf 10, sophisticated compliance
metrics are still missing.
iv. c onclusion
in this paper, we provided a framework for the sys-
tematic evaluation of compliance monitoring approaches
in the business process management area. based on the
evaluation framework, we analyzed ﬁve state-of-the-art
approaches. our evaluation pointed out that compliance
monitoring poses challenges related to representation lan-
guages, semantics of compliance, monitoring technologies
and reasoning facilities. none of the ﬁve approaches fully
supports more than six cmfs and most approaches are
not supported by publicly available software tools. as far
as the language perspective is concerned, further research
is needed in order to devise next-generation compliance
rule languages that are able to suitably mediate between
expressiveness and tractability. there are obvious relations
between compliance monitoring, query languages and data
stream analysis, so as with related ﬁelds such as policy
management and enforcement (see, e.g., [43]). we believe
that the cross-fertilization of the different research areas
would be beneﬁcial. moreover, there is a need for bench-
mark data sets to compare the different approaches and
tools with respect to performance and effectiveness.
acknowledgment
the work presented in this paper has been partly funded
by the eu project acsi (fp7-257593) and by the austrian
science fund (fwf):i743references
[1]s. sadiq, g. governatori, and k. naimiri, “modeling con-
trol objectives for business process compliance,” in int’l
conf on business process management , 2007.
[2]n. s. abdullah, s. w. sadiq, and m. indulska, “emerging
challenges in information systems research for regulatory
compliance management,” in caise 2010 , vol. 6051, pp.
251–265.
[3]m. e. kharbili, s. stein, i. markovic, and e. pulvermller,
“towards a framework for semantic business process com-
pliance management,” in proc. int’l workshop on gover-
nance, risk and compliance - applications in information
systems (grcis’08) , 2008, pp. 1–15.
[4]ieee task force on process mining, “process mining
manifesto,” in proc. bpm workshops , ser. lecture notes
in business information processing, vol. 99. springer,
2011, pp. 169–194.
[5]h. m. w. verbeek, j. c. a. m. buijs, b. f. van dongen,
and w. m. p. van der aalst, “xes, xesame, and prom
6,” in information systems evolution - caise forum 2010 ,
vol. 72, pp. 60–75.
[6]m. binder, w. dorda, g. duftschmid, r. dunkl, k. a.
fr¨oschl, w. gall, w. grossmann, k. harmankaya, m. hron-
sky, s. rinderle-ma, c. rinner, and s. weber, “on analyz-
ing process compliance in skin cancer treatment: an expe-
rience report from the evidence-based medical compliance
cluster (ebmc2),” in caise 2012 , pp. 398–413.
[7]s. schulte, d. schuller, r. steinmetz, and s. abels,
“plug-and-play virtual factories,” ieee internet computing ,
vol. 16, no. 5, pp. 78–82, 2012.
[8]l. t. ly, c. indiono, j. mangler, and s. rinderle-ma,
“data transformation and semantic log purging for process
mining,” in advanced information systems engineering -
24th international conference, caise 2012 , 2012, pp. 238–
253.
[9]f. m. maggi, a. j. mooij, and w. m. p. van der aalst,
analyzing vessel behavior using process mining , 2012, ch.
poseidon book, to appear.
[10] l. t. ly, s. rinderle-ma, d. knuplesch, and p. dadam,
“monitoring business process compliance using compliance
rule graphs,” in otm conferences (1) , 2011, pp. 82–99.
[11] w. m. p. van der aalst, a. h. m. ter hofstede, b. kie-
puszewski, and a. p. barros, “workﬂow patterns,” dis-
tributed and parallel databases , vol. 14, no. 1, pp. 5–51,
2003.
[12] b. weber, m. reichert, and s. rinderle-ma, “change
patterns and change support features - enhancing ﬂexibility
in process-aware information systems,” dke , vol. 66, no. 3,
pp. 438–466, 2008.
[13] a. lanz, b. weber, and m. reichert, “workﬂow time pat-
terns for process-aware information systems,” in bpmds
2010 , no. 50, 2010, pp. 94–107.
[14] s. rinderle-ma and j. mangler, “integration of process
constraints from heterogeneous sources in process-aware
information systems,” in emisa 2011 , pp. 51–64.[15] f. maggi, m. montali, m. westergaard, and w. van der
aalst, “monitoring business constraints with linear tempo-
ral logic: an approach based on colored automata,” in bpm
2011 .
[16] f. m. maggi, m. westergaard, m. montali, and w. m. p.
van der aalst, “runtime veriﬁcation of ltl-based declara-
tive process models,” in rv 2011 , vol. 7186, pp. 131–146.
[17] e. a. p. santos, r. francisco, a. d. vieira, e. f.r. loures,
and m. a. busetti, “modeling business rules for super-
visory control of process-aware information systems,” in
business process management workshops , 2012, vol. 100,
pp. 447–458.
[18] m. montali, m. pesic, w. m. p. van der aalst, f. chesani,
p. mello, and s. storari, “declarative speciﬁcation and
veriﬁcation of service choreographiess,” tweb , vol. 4,
no. 1, 2010.
[19] s.-m.-r. beheshti, b. benatallah, h. motahari-nezhad, and
s. sakr, “a query language for analyzing business processes
execution,” in bpm , 2011, vol. 6896, pp. 281–297.
[20] a. awad and m. weske, “visualization of compliance
violation in business process models,” in business process
management workshops , 2010, vol. 43, pp. 182–193.
[21] c. giblin, s. m ¨uller, and b. pﬁtzmann, “from regulatory
policies to event monitoring rules: towards model-driven
compliance automation,” research report rz-3662. ibm
research gmbh, tech. rep., 2006.
[22] t. holmes, e. mulo, u. zdun, and s. dustdar, “model-
aware monitoring of soas for compliance,” in service
engineering . springer, 2011, pp. 117–136. [online].
available: http://eprints.cs.univie.ac.at/2842/
[23] a. birukou, v . d’andrea, f. leymann, j. seraﬁnski, p. sil-
veira, s. strauch, and m. tluczek, “an integrated solution
for runtime compliance governance in soa,” in icsoc ,
2010.
[24] m. weidlich, h. ziekow, j. mendling, o. g ¨unter,
m. weske, and n. desai, “event-based monitoring of
process execution violations,” in caise , 2011.
[25] m. montali, f. m. maggi, f. chesani, p. mello, and w. m. p.
van der aalst, “monitoring business constraints with the
event calculus,” acm transactions on intelligent systems
and technology , to appear.
[26] e. m. clarke, o. grumberg, and d. a. peled, model
checking . cambridge, ma, usa: the mit press, 1999.
[27] r. alur and t. a. henzinger, “real-time logics: complexity
and expressiveness,” information and computation , vol.
104, pp. 35–77, 1993.
[28] r. a. kowalski and m. j. sergot, “a logic-based calculus
of events,” new generation computing , vol. 4, no. 1, pp.
67–95, 1986.
[29] m. pesic, h. schonenberg, and w. m. p. van der aalst,
“declare: full support for loosely-structured processes,” in
ieee edoc , 2007, pp. 287–300.
[30] c. garbe, k. peris, a. hauschild, p. saiag, m. middle-
ton, a. spatz, j. grob, j. malvehy, j. newton-bishop,
a. stratigos et al. , “diagnosis and treatment of melanoma:
european consensus-based interdisciplinary guideline,” eu-
ropean journal of cancer , vol. 46, no. 2, pp. 270–283,
2010.[31] n. russell, a. h. m. ter hofstede, d. edmond, and w. m. p.
van der aalst, “workﬂow data patterns: identiﬁcation,
representation and tool support,” in er 2005 , vol. 3716,
pp. 353–368.
[32] esmo, “http://www.esmo.org/education-research/esmo-
clinical-practice-guidelines.html.” [online].
available: http://www.esmo.org/education-research/
esmo-clinical-practice-guidelines.html
[33] m. t. g. l ´opez and r. m. gasca, “run-time auditing
for business processes data using constraints,” in business
process management workshops , 2010, pp. 146–157.
[34] j. f. allen, “maintaining knowledge about temporal in-
tervals,” comm. of the acm , vol. 26, no. 11, 1983.
[35] f. a. schreiber, “is time a real time? an overview of
time ontology in informatics,” real time computing , vol.
f 127, pp. 283–307, 1994.
[36] m. reichert and p. dadam, “adept ﬂex - supporting
dynamic changes of workﬂows without losing control,”
journal of intelligent information systems , vol. 10, no. 2,
p. 93129, 1998.
[37] j. mangler and s. rinderle-ma, “rule-based synchro-
nization of process activities,” in ieee int’l conf on e-
commerce technology (cec’2011) , 2011, pp. 121–128.
[38] h. prakken and m. j. sergot, “contrary-to-duty obliga-
tions,” studia logica , vol. 57, no. 1, pp. 91–115, 1996.
[39] g. governatori, z. milosevic, and s. sadiq, “compliance
checking between business processes and business con-
tracts,” ieee int’l enterprise distributed object computing
conference (edoc) , pp. 221–232, 2006.
[40] m. hashmi, g. governatori, and m. t. wynn, “business
process data compliance,” in rules on the web: research
and applications . springer, 2012, pp. 32–46.
[41] f. m. maggi, m. montali, and w. m. p. van der aalst,
“an operational decision support framework for monitoring
business constraints,” 2012.
[42] s. bragaglia, f. chesani, p. mello, m. montali, and d. sot-
tara, “fuzzy conformance checking of observed behaviour
with expectations,” in ai*ia 2011 , vol. 6934, pp. 80–91.
[43] c. ringelstein and s. staab, “papel: provenance-aware
policy deﬁnition and execution,” ieee internet computing ,
vol. 15, no. 1, pp. 49–58, 2011.