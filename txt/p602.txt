trace alignment in process mining: 
opportunities for process diagnostics 
rantham prabhakara jagadeesh chandra bose 1,2and wil van der aalst 1
1department of mathematics and computer science, universit y of technology, 
eindhoven, the netherlands 
2philips healthcare, veenpluis 5-6, best, the netherlands 
j.c.b.rantham.prabhakara@tue.nl, w.m.p.v.d.aalst@tue .nl 
abstract. process mining techniques attempt to extract non-trivial 
knowledge and interesting insights from event logs. proces s mining pro- 
vides a welcome extension of the repertoire of business proc ess analysis 
techniques and has been adopted in various commercial bpm sy stems 
(bpm |one, futura reﬂect, aris ppm, fujitsu, etc.). unfortunatel y, tra- 
ditional process discovery algorithms have problems deali ng with less- 
structured processes. the resulting models are diﬃcult to c omprehend 
or even misleading. therefore, we propose a new approach bas ed on trace 
alignment . the goal is to align traces in a way that event logs can be 
explored easily. trace alignment can be used in a preprocess ing phase 
where the event log is investigated or ﬁltered and in later ph ases where 
detailed questions need to be answered. hence, it complemen ts exist- 
ing process mining techniques focusing on discovery and con formance 
checking. 
1 introduction 
many of today’s information systems are recording an abunda nce of event logs. 
process mining techniques attempt to extract non-trivial k nowledge and inter- 
esting insights from these event logs and to exploit these fo r further analysis [1]. 
process mining techniques aim at discovering process, cont rol, data, organiza- 
tional and social structures from event logs. the majority o f research in process 
mining so far has focussed on process discovery (both from a c ontrol-ﬂow and 
organizational perspective). one of the challenging topics in pro cess mining is 
process diagnostics . process diagnostics encompasses process performance ana ly- 
sis, anomaly detection, diagnosis, inspection of interest ing patterns and the like. 
research so far in diagnosing processes is limited to explor ing ways and means of 
analyzing process models (such as conformance checking), p rojecting diagnostic 
information on these models or in dashboard like approaches over some (per- 
formance) metrics. diagnostics of processes at the model le vel is cumbersome, 
tedious and sometimes infeasible, especially when dealing with real-life and ﬂex- 
ible processes. we have applied process mining in more than 1 00 organizations 
and our experiences show that processes tend to be less struc tured than ex- 
pected. traditional process mining algorithms have proble ms dealing with such 
unstructured processes and generate spaghetti-like proce ss models that are hard 
r. hull, j. mendling, and s. tai (eds.): bpm 2010, lncs 6336, p p. 227–242, 2010. 
c/circlecopyrtspringer-verlag berlin heidelberg 2010 228 r.p. jagadeesh chandra bose and w. van der aalst 
to comprehend. such incomprehensible models are not amenab le or are found 
lacking to assist in process diagnostic eﬀorts. when diagno sing processes, a busi- 
ness analyst is confronted with lots of interesting questio ns. we list some of them 
below: 
1. what is the most common (likely) process behavior that is exe cuted? given 
a bag of traces from a process, it would be interesting to know which pro- 
cess components are essential/critical for this process. s uch essential compo- 
nents/functions form the backbone of the process and should be conserved.
process re-design/improvement eﬀorts should focus on impr oving such crit- 
ical components. 
2. where do my process instances deviate and what do they have in common?: 
in practice, there is often a signiﬁcant gap between what is p rescribed or sup- 
posed to happen, and what actually happens. there is a need to augment 
process diagnostics with techniques that can assist in ﬁndi ng deviations by 
analyzing raw traces in the event logs. there are many domain s/applications 
where this requirement is felt. fault diagnosis, anomaly de tection, diagnosis 
of fraudulent insurance claims are some of the applications. given an ev ent 
log containing a mix of traces where the system process funct ioned nor- 
mally and where it malfunctioned, analyzing these traces to ﬁnd deviations 
in malfunctioned/anomalous traces from normal traces woul d give cues in 
understanding the cause of malfunction/anomaly. 
3. are there any common patterns of execution in my traces?: analyzing logs 
at the granularity of an individual event might not always be result yielding 
as one often loses the context information during such analy sis. an analyst 
would be interested in knowing whether there are any interesting exe cution 
(behavioral) patterns in the log. the absence or presence of such patterns 
may indicate the cause of an anomaly (say for e.g., fraudulent in surance 
claim) or a security violation or a malfunction. 
4. what are the contexts in which an activity or a set of activiti es are executed 
in my event log?: dependencies exist between activities in a process and ac- 
tivity executions are expected to happen within certain context s. there can 
be short-range and long-range dependencies between activi ties. long-range 
dependencies are diﬃcult to discover. an analyst would be in terested in un- 
derstanding the contexts of execution of activities and/or activity sequences. 
5. what are the process instances that share/capture a desired behavior either 
exactly or approximately?: often in diagnostics, an analyst would be inter- 
ested in ﬁnding process instances that share/comply to a particular desi red 
behavior; the desired behavior can be represented as a manifestatio n of 
some pattern of activity sequences or some complex form (com bination) of 
these patterns. though temporal logic approaches can assis t in addressing 
this problem to a certain extent by discovering process instanc es that cap- 
ture the desired behavior exactly, one might also be interes ted in discovering 
process instances that share the desired behavior approximately. 
6. are there particular patterns (e.g., milestones, concurre nt activities etc.) in 
my process?: workﬂow patterns refer to recurring forms/structures addr ess- 
ing business requirements. for example, milestones indicate speciﬁc execu- 
tion points in the process model and provide a mechanism for s upporting the trace alignment in process mining: opportunities for proce ss diagnostics 229 
conditional execution of a task or sub-process. an analyst w ould be inter- 
ested in discovering the presence of, and in analyzing miles tone patterns in 
the process event log. discovery of process models with conc urrency is one 
of the challenging problems in process mining. the presence of concurre nt 
activities creates diﬀerent permutations of activities in the event log that 
adds to the complexity of discovery algorithms. detection o f the presence of 
concurrent activities might also help in pre-processing th e logs. 
in this paper, taking inspiration from biological sequence alignment [2], we pro- 
pose a novel approach, called trace alignment , of aligning traces in an event log 
and show the promise of such an approach in process diagnostics addres sing 
some of the questions enumerated above. multiple sequence a lignment is a topic 
of extensive research of over three decades in computationa l biology and still 
remains intriguing due to the intricate challenges it poses . there are signiﬁcant 
challenges in adopting them to trace alignment . we highlight some of the chal- 
lenges in this paper and believe that this will open a new area of research within 
process mining . figure 1 illustrates the traditional dotted chart analysi s and the 
proposed trace alignment 1. it is apparent that the proposed approach of trace 
alignment uncovers common execution patterns and deviatio ns in the log yield- 
ing better insights for analysis. 
fig.1. comparison of dotted chart analysis and trace alignment 
the remainder of this paper is organized as follows. in secti on 2, we intro- 
duce the notations used in the paper. section 3 introduces th e concept of trace 
alignment and discusses the techniques for ﬁnding alignmen ts. in section 4, we 
propose a framework for ﬁnding alignments over a set of trace s. in section 5, 
we present and discuss the results of trace alignment on a syn thetic log and a 
real-life log and show how trace alignment can assist in gain ing better insights 
for process diagnostics. we discuss related work in section 6. fina lly, section 7 
concludes the paper. 
2 notations 
–let σdenote the set of activities. |σ|is the number of activities. 
1in the dotted chart, a dot represents an activity and the x-ax is represents time. in 
trace alignment, the x-axis represents the alignment posit ion. y-axis represents trace 
indices for both the dotted chart and trace alignment. 230 r.p. jagadeesh chandra bose and w. van der aalst 
–σ+is the set of all non-empty ﬁnite sequences of activities fro m σ.t∈σ+
is a trace over σ.|t|denotes the length of trace t.
–the set of all n-length sequences over the alphabet σis denoted by σn. a 
trace of length nis denoted as tni.e., tn∈σn, and |tn|=n.
–the ordered sequence of activities in tnis denoted as t(1) t(2) t(3) . . .t (n)
where t(k) represents the kth activity in the trace. 
–tn−1denotes the n−1 length preﬁx of tn. in other words tn=tn−1t(n). 
–an event log, l, corresponds to a multi-set (or bag) of traces from σ+.
3 trace alignment 
in this section, we formally deﬁne what trace alignment is an d discuss techniques 
for ﬁnding optimal alignments. 
deﬁnition 1. trace alignment over a set of traces t={t1, t 2, . . ., t n}is 
deﬁned as a mapping of the set of traces in tto another set of traces t=
{t1,t2, . . ., tn}where each ti∈(σ∪ {−} )+for 1≤i≤nand 
• | t1|=|t2|=. . . =|tn|=m,
•tiby removing all “ −” gap symbols is equal to ti,
•∄k, 1≤k≤msuch that ∀1≤i≤n,ti(k) = −
min the deﬁnition above is the length of the alignment. an alig nment over a 
set of traces can be represented by a rectangular matrix a={aij }(1 ≤i≤
n, 1≤j≤m) over σ′=σ∪ {−} where −denotes a gap. the third condition 
in the deﬁnition above implies that no column in acontains only gaps ( −). it 
is imperative to note that there can be many possible alignme nts for a given set 
of traces and that the length of the alignment, m, satisﬁes the relation lmax ≤
m≤lsum where lmax is the maximum length of the traces in tand lsum is the 
sum of lengths of all traces in t.
3.1 pairwise trace alignment 
before we get into the details of aligning a set of traces, let us ﬁrst c onsider a 
special case of trace alignment, where the number of traces t o align is 2. align- 
ing a pair of traces is referred to as pair-wise trace alignment. let us consider 
the example of aligning the two traces t1=abcac and t2=acacad . figure 2 
depicts three variants of aligning the two traces. in fact, t he number of possible 
alignments for two traces of length lis ≈(1 + √
2) 2l+1 l−1/2[2], e.g., for two 
traces of length 100, the number of possible alignments is ap proximately 10 77 .
therefore, it is infeasible to enumerate all possible align ments even for moderate 
values of l. moreover, not all of these alignments would be interesting . in order 
to compute “best” alignments, we need a means of associating a sco re to an 
alignment. 
alignment between a pair of traces, t1and t2can be considered as a trans- 
formation of the trace t1to t2or viceversa through a set of editing operations trace alignment in process mining: opportunities for proce ss diagnostics 231 
t2t1
t2t1a b c a c − 
a c a c a d t2t1a b c a c − − 
a − c a c a d 
(i) (ii) (iii) a b c a c − − − − − −
− − − − − a c a c a d
fig.2. an example of pair-wise trace alignments 
applied to one of the traces iteratively. the traces are said to be aligned after the 
transformation, and can be represented as a rectangular mat rix as mentioned 
earlier. assuming that t1is written over t2in the alignment (as in figure 2), 
the following edit operations are deﬁned for any column jin the alignment: 
•the activity pair ( a, b ), a, b ∈σ, denotes a substitution of activity ain t1
with activity bin t2,
•the activity pair ( a, −) denotes the deletion of activity ain t1, and 
•the activity pair ( −, b ) denotes the insertion of activity bin t1.
it is important to note that insertion and deletion operatio ns are complementary 
in that an insertion in one trace can be considered as a deleti on in another trace. 
henceforth, we refer to insertion and deletion operations a s indel operation. 
indels should be sensitive to the context in which the operations are perf ormed. 
for example, it is ok to have an activity fread after fopen but not after fclose .
hence, we consider the indel operation as indelrightgivenleft which indicates 
the insertion of an activity to the right of another activity . a score function needs 
to be deﬁned for the substitution and indel operations. the s ubstitution score 
is a function s:ς×σ→ ℜ where s(a, b ) denotes the score for substitution 
of activity awith activity bfor all a, b ∈σ. the indelrightgivenleft score 
is a function il:ς∪ {−} × σ∪ {−} → ℜ where il(a, b ) denotes the score for 
inserting activity agiven that the left activity is bfor all a, b ∈σ.il(a, −) = 
il(−, a ) = il(−,−) = 0 for all a∈σ. given sand il,the score of a pair-wise 
alignment can be deﬁned as the sum of the scores of the edit ope rations across 
all columns in the alignment . in other words, if t1and t2are the aligned traces 
of t1and t2, and the alignment is of length m, then: 
score (t1,t2) = m/summationdisplay
j=1 ej
where 
ej=

s(a, b ) if t1(j) = aand t2(j) = b
il(a, b )/braceleftbigg
if t1(j) = a, t1(j−1) = band t2(j) = −or 
if t1(j) = −,t2(j) = aand t2(j−1) = b
t1(0) = t2(0) = −. assuming a simple scoring function where a substitution 
of activity pair ( a, b ) is associated with a score of 1 if a=band a score of 
−1 otherwise, and an indel scoring function, il(a, b ) = −1, for all a, b ∈σ, the 
alignments enumerated in figure 2 have the scores 1, −4 and −9 respectively. a 232 r.p. jagadeesh chandra bose and w. van der aalst 
“best” alignment can be considered to be the one with the maxi mum score. it is 
imperative to note that the best scoring alignment is sensit ive to the substitution 
and indel score functions. 
how to compute alignments. needleman and wunsch [3] have proposed a 
dynamic programming algorithm for ﬁnding the optimal align ment between two 
amino acid sequences. the basic idea is to build up an optimal alignment using 
previous solutions for optimal alignments of smaller subse quences. let t1and 
t2be two traces. a matrix findexed by iand j, is constructed where the value 
f(i, j ) is the score of the best alignment between the preﬁx ti
1of t1and the 
preﬁx tj
2of t2.f(i, j ) is constructed recursively by initializing f(0 ,0) = 0 and 
then proceeding to ﬁll the matrix from top left to bottom righ t. it is possible 
to calculate f(i, j ) if f(i−1, j −1), f(i−1, j ) and f(i, j −1) are known. 
there are three possible ways that the best score f(i, j ) of an alignment up 
to ti
1and tj
2could be obtained: t1(i) could be aligned to t2(j), in which case 
f(i, j ) = f(i−1, j −1) + s(t1(i), t 2(j)); or t1(i) is aligned to a gap, in which 
case f(i, j ) = f(i−1, j ) + il(t1(i), t 1(i−1)); or t2(j) is aligned to a gap, in 
which case f(i, j ) = f(i, j −1)+ il(t2(j), t 2(j−1)). the best score up to ( i, j )
will be the largest of these three options. in other words, we have 
f(i, j ) = max 

f(i−1, j −1) + s(t1(i), t 2(j)) ,
f(i−1, j ) + il(t1(i), t 1(i−1)) ,
f(i, j −1) + il(t2(j), t 2(j−1)) .(1) 
the values along the top row (when i= 0) and left column (when j= 0) need 
to be handled as follows. the values f(i, 0) represent alignments of a preﬁx 
of t1to all gaps in t2. so, we can deﬁne f(1 ,0) = 0 and for i > 1, f (i, 0) = 
f(i−1,0)+ il(t1(i), t 1(i−1)). similarly, we can deﬁne f(0 , j ). the value in the 
bottom right cell of the matrix, f(|t1|,|t2|), is the best score for an alignment of 
t1and t2. to ﬁnd the alignment itself, we must ﬁnd the path of choices f rom (1) 
that led to this best score, i.e., we move from the current cel l ( i, j ) to one of the 
cells ( i−1, j −1) ,(i−1, j ) or ( i, j −1) from which the value f(i, j ) was derived. 
while doing so, we add a pair of symbols onto the front of the al ignment: t1(i)
and t2(j) if the step was to ( i−1, j −1), t1(i) and the gap symbol ‘ −’ if the step 
was to ( i−1, j ), or ‘ −’ and t2(j) if the step was to ( i, j −1). at the end we will 
reach the start of the matrix, i=j= 0. the above procedure, called traceback, 
will retrieve only one of the alignments that gives the best s core; there can be 
cases where multiple options of (1) are equal. in these cases , an arbitrary choice 
is made. the set of all possible alignments for the best score can be enumerated 
by using graph traversal techniques. 
3.2 multiple trace alignment 
having discussed the alignment of two traces, let us move on t o the alignment 
of a set of traces. one of the most popular scoring mechanisms for multiple 
sequence alignment of genomic sequences is the sum-of-pairs (sp) method. we trace alignment in process mining: opportunities for proce ss diagnostics 233 
adopt the sum-of-pairs method for trace alignment as well. l et tjand tkbe two 
distinct rows extracted from a multiple trace alignment a(over a set of set of 
ntraces), and let score (tj,tk) be the alignment score calculated in the same 
way as ordinary pairwise alignment of tjand tk, then the sp score of a multiple 
trace alignment ais deﬁned as 
score sp (a) = /summationdisplay
1≤j≤k≤nscore (tj,tk)
it is possible to generalize the pairwise dynamic programming alignm ent ap- 
proach to the alignment of ntraces. however, it is impractical for more than a 
few traces. assuming that the traces are all of roughly the sa me length l, the 
space complexity of the multidimensional dynamic programm ing algorithm is 
o(ln) and the time complexity is o(2 nln) [4]. multiple sequence alignment that 
maximizes the sp score was shown to be np-complete [5]. 
we adopted the progressive alignment approach for trace ali gnment. the basic 
idea of progressive alignment is to iteratively construct a succession of pairwise 
alignments. alignment is allowed between a pair of traces, a trace and an align- 
ment and between alignments. the selection of traces for ali gnment at each 
iteration is based on their similarity. traces that are most similar to each other 
are aligned ﬁrst. once similar traces have been aligned, align the resulting clus- 
ters of traces against each other. a guide tree is built to ass ist this process. 
we use the agglomerative hierarchical clustering algorith m (ahc) for generat- 
ing this tree. we can use either distance metrics such as eucl idean distance or 
similarity measures for clustering. the choice of ahc is due to the fact that it 
produces the tree naturally as a dendrogram while the tree ha s to be constructed 
subsequently if other clustering algorithms such as k-means is used. 
figure 3 illustrates an example of the progressive alignmen t strategy. in this 
example, we consider 5 traces. a guide tree is generated usin g ahc. based 
on the guide tree, the traces t2and t3would ﬁrst be aligned using pairwise 
trace alignment. next traces t4and t5would be aligned using pairwise trace 
alignment. subsequently, trace t1is aligned with the alignment obtained from 
t2and t3. finally the two alignments obtained from the set of traces {t1, t 2, t 3}
and {t4, t 5}are aligned. 
while aligning an alignment a, with another alignment b, (1) is modiﬁed as 
f(i, j ) = max 

f(i−1, j −1) + s(ci
a, c j
b),
f(i−1, j ) + il(ci
a, c i−1
a),
f(i, j −1) + il(cj
b, c j−1
b).(2) 
where s(ci
a, c j
b) denotes the score of substituting column iof alignment awith 
column jof alignment band is deﬁned as 
s(ci
a, c j
b) = /summationdisplay
∀a,b ∈σni
a(a).n j
b(b).s (a, b ) (3) 234 r.p. jagadeesh chandra bose and w. van der aalst 
t : j g c l e b d f i 
t : j g c l e b d f 
t : j g c l f e b d 
t : j g c l e f b d i t : j g c f l e b d 1
2
3
4
5
t1t2t3t4t5j g c f l e b d − − j g c − l e b d f − j g c − l e b d f i  
j g c l − f e b d − 
j g c l e f − b d i  
t1 t2t3 t4t5j g c − l − − e b d f i  
j g c − l − − e b d f − 
j g c f l − − e b d − − 
j g c − l − f e b d − − 
j g c − l e f − b d − i  
j g c l e b d f i  
j g c l e b d f − 
fig.3. example of progressive alignment approach for multiple tra ce alignment 
where ni
x(a) denotes the frequency (count) of activity ain column iof alignment 
x.il(ci
a, c i−1
a) denotes the score of inserting column iin alignment agiven 
that its left column is i−1 and is deﬁned as 
il(ci
a, c i−1
a) = /summationdisplay
∀a,b ∈σfi
a(a, b ).il(a, b ) (4) 
where fi
a(a, b ) is the frequency of activity ain column iof alignment agiven 
that its neighboring activity is bin column i−1. the procedure for ﬁnding 
the “best” alignment is similar to that of pairwise alignmen t. note that the 
guide tree enables the visualization of alignments for diﬀe rent subsets of the 
traces. the alignment at the root of the tree corresponds to t he alignment of 
all the traces in the event log whereas an alignment at any int ernal node of the 
guide tree depicts the alignment corresponding to the trace s constituting the 
leaves of the sub-tree at the node. it is often the case that ev ent logs contain 
traces capturing diﬀerent execution behavior of a process a nd clustering assists 
in grouping together a coherent set of traces. 
4 framework for trace alignment 
we propose the framework depicted in figure 4 for trace align ment. the frame- 
work identiﬁes the following parts: 
event log build 
guide 
tree preprocessing processed 
log interactive 
visualization alignment compute 
progressive alignment estimate 
quality and 
realignment matrices compute 
scoring 
pruning 
fig.4. framework for multiple trace alignment trace alignment in process mining: opportunities for proce ss diagnostics 235 
–preprocessing: preprocessing involves steps such as removal of outliers, r e- 
moval of loop-constructs, and encoding of log into character streams . the 
detection and removal of outliers is critical for obtaining interesting align- 
ments. 
–compute scoring matrices: as discussed in section 3, alignments are sen- 
sitive to the substitution and indel score functions, sand ilrespectively. 
we use the approach presented in [6] for deriving the substit ution and indel 
score functions from the event log. 
–build guide tree: a guide tree assists in progressive alignment of multiple 
traces as illustrated in figure 3. we use the agglomerative h ierarchical clus- 
tering (ahc) for building the guide tree. however, other app roaches such 
as neighbor joining [7] can be used. 
–estimate the quality of alignment: progressive alignment being a heuristics- 
based approach, the alignment that is obtained need not be op timal. further 
any error in alignment done in early stages of progressive al ignment cannot 
be undone. hence it is essential to estimate the quality of an alignmen t. in 
this work, we adopt a metric based on the information score as a means for 
assessing the quality of an alignment. the information scor e of a column in an 
alignment is deﬁned as 1 −e/e max , where eis the entropy of activities in the 
column 2and emax is the maximum entropy which is equal to log 2(|σ|+ 1). 
–pruning and realignment: construction of multiple trace alignment is a very 
complex problem, and most heuristic algorithms usually fai l to generate an 
optimal alignment. disturbances in an alignment can creep i n from many 
sources thereby making the ﬁnal alignment far from optimal. disturbances 
here refer to the misplacement of gaps in an alignment. eﬃcie nt techniques 
for pruning and realigning alignments need to be supported. we will discuss 
more about this later in this section. 
–interactive visualization: apart from just pictorially depicting the align- 
ment it is desirable to have additional interactive feature s for the analysts 
to explore into the patterns and the alignments uncovered. f eatures such 
as editing an alignment, sorting and/or ﬁltering alignment columns based 
on activities of interest would all lead to gaining further i nsights into the 
execution of processes. 
though the deﬁnition of what constitutes an outlier is left o pen, in the cur- 
rent exploration, we have adopted one simple deﬁnition of ou tliers based on the 
length of the traces. it could be the case that in an event log t here are certain 
process instances whose lengths deviate a lot from the avera ge trace length in 
the log, e.g., one of the real life event logs that we analyzed had an average 
trace length of 47 activities (across 223 traces) while ther e were 5 traces with 
lengths above 250. since an alignment is at least as long as th e maximum trace 
length, such outlier traces in the log can lead to an alignmen t with too many gap 
symbols. hence the removal of such traces is important. note that the deﬁnition 
of outliers can change based on the perspective of analysis. if we are interested 
in ﬁnding common execution patterns or the backbone sequenc e of a process, 
2the entropy of a column is deﬁned as e=/summationtext
a∈σ∪{−} −palog 2(pa) where pais the 
probability of occurrence of ain the column. 236 r.p. jagadeesh chandra bose and w. van der aalst 
the above deﬁnition of outliers may work ﬁne. however, if we a re interested in 
ﬁnding non-conforming traces or deviations in anomalous tr aces from normal 
traces, then the above deﬁnition might not always be appropr iate. 
realigning alignments. variation in the lengths of the traces (mostly due to 
recurring patterns and loops), the choice of scoring matric es used, the method 
and parameter choices used in the generation of guide tree, s trategies used in 
resolving conﬂicts during traceback can all lead to disturb ances in the alignment. 
furthermore, disturbances in earlier stages of progressiv e alignment strategy per- 
colate to later stages. detecting such disturbances and rea ligning them might 
vastly improve the quality of the ﬁnal alignment. figure 5 de picts an example of 
an alignment before and after realignment. for the original alignment, the infor- 
mation score for the columns 4 and 6 is 0 .66 whereas the information score for 
the same columns after realignment is 0 .73. more than the improvement in score, 
what is important it that the conserved activity sequence ahbd is preserved after 
realignment. 
a h b − f d k a − h b d i 
a h b d f − k a − h b d i a h b d f − k a − h b d − 
a h b − − d k a f h b d i a h b − f d k a − h b d i 
a h b d f − k a − h b d i a h b d f − k a − h b d − 
a h b d − − k a f h b d i realignment 
fig.5. example of realignment 
the alignment procedure described in section 3 is also calle d as global trace 
alignment . depending on the scoring functions, global trace alignmen t can some- 
times penalize gaps at the beginning and/or end of the traces in the alignment. 
in order to allow gaps to be inserted at the beginning/end of a ny trace in an 
alignment, a variant of the global trace alignment called th e semi-global trace 
alignment can be considered. here the best score of the alignment is deﬁ ned to 
be the one that is the maximum in the last row or last column of t he fmatrix 
deﬁned in section 3. traceback procedure starts from that ce ll and proceeds 
until it stops at the ﬁrst position it reaches in the top row or left column. gaps 
can then be inserted in the appropriate trace in the position s subsequent to the 
maximum value cell in the last row/column and prior to the pos ition it reached 
in the top row or left column. figure 6 depicts the diﬀerence b etween global 
trace alignment and semi-global trace alignment of two trac es aligned using the 
same scoring functions. it is easy to see that the alignment obta ined using semi- 
global alignment is preferable to the one obtained using glo bal-alignment. we 
recommend to consider semi-global trace alignment (at any i teration of progres- 
sive alignment) in scenarios where the traces to be aligned d iﬀer in their lengths 
vastly (for example, due to the manifestation of loop constr ucts). 
t2t1j g c − a h b − − − − f d 
j g c f a h b d k a h b d t2t1
global trace alignment semi−global trace alignment j g c f a h b − d k a h b d j g c − a h b f d − − − − − 
fig.6. example of global trace alignment and semi-global trace ali gnment trace alignment in process mining: opportunities for proce ss diagnostics 237 
5 experimental results and discussion 
based on the techniques and framework presented in sections 3 and 4, we built 
a trace alignment plug-in in prom 3. we present the results of applying trace 
alignment on two event logs in the subsequent sections. 
5.1 telephone repair log 
the telephone repair event log [8] is deﬁned over 12 event cla sses and consists 
of 1104 traces, of which only 77 traces are distinct when repr esented as activity 
sequences. since duplicate traces add to the complexity of a lignment without 
yielding any additional beneﬁts, we applied the trace align ment on these 77 
traces (but at the same time maintain the fact that there exis ts identical traces 
in the log). the log consists of cases where the repair can be classiﬁ ed as a 
simple or complex one. for our discussion here, we further di stinguish two types 
of cases based on the diﬃculty level of repair viz., cases where the telephone 
repair was easy and cases where it was diﬃcult (in both simple and complex 
types). diﬃcult cases required multiple tries of the repair diagnosis for failing 
the quality assessment test. 
as mentioned earlier, the guide tree inherently captures th e notion of clus- 
tering. we have split the event log into four clusters for the example log and 
figure 7 depicts the trace alignment for one of the four clust ers. this cluster 
corresponds to traces where the repair type was easy and a com plex repair pro- 
cedure was done to ﬁx the problem. the length of the alignment is 14 for this 
cluster. the left panel depicts the process instance identi ﬁer (as in the log) and 
identiﬁers with a grey background indicate traces that have identical duplicates. 
for example there are traces identical to process instance 1 018 (corresponding to 
activity sequence jgcflebd in the event log) while there are no identical traces 
for the process instance 1127. the top panel depicts a sortin g component where 
the traces involved in the alignment can be sorted based on th e activities in a 
column and the number in the column indicates the priority of sorting. for ex- 
ample in figure 7, the traces are sorted based on activity f(which indicates the 
inform user activity) with traces having fin column 4 having ﬁrst priority and 
then with those having fin column 7 and ﬁnally with those having fin column 
11. the bottom panel depicts the information score metric fo r each column as 
well as a consensus sequence for the alignment. the consensus sequence captures 
the major activity in each column and can be considered as a ba ck-bone sequence 
for the process . columns with an information score of 1 .0 indicate well con- 
served patterns. for example in this alignment, the columns 1 −3 depicting the 
encoded activity sequence jgc (corresponding to activities register-complete ,
analyze (defect)-start and analyze (defect)-complete ) is well conserved 
and appears in all the traces as the beginning subsequence. it is ob vious to 
see that the encoded activity fcorresponding to inform user - complete 
3prom is an extensible framework that provides a comprehensi ve set of 
tools/plugins for the discovery and analysis of process mod els from event logs. see 
http://www.processmining.org for more information and to download prom. 238 r.p. jagadeesh chandra bose and w. van der aalst 
is a concurrent activity. concurrent activity manifests in mutually exclusive 
traces across diﬀerent columns in the alignment . the encoded activities l,e,
b,dand icorrespond to repair complex-start ,repair complex-complete ,
test repair-start ,test repair-complete and archive repair-complete 
respectively. annotating the traces with additional infor mation such as perfor- 
mance metrics, customer feedback etc over the alignment mig ht give further 
insights. for example, let us assume that the customer was no t happy for the 
cases 1 and 1009, it is obvious to see that these traces diﬀer f rom the rest in that 
the activity fappears quite late in these traces. it could be inferred that these 
customers were not timely informed about the status of their complaint and thus 
were not satisﬁed. the rest of the 3 clusters for this event lo g corresponded to 
the following diﬃculty level and repair type categories: easy and simple ,diﬃcult 
and complex and diﬃcult and simple/complex where the last cluster pertained 
to cases where a simple repair procedure was ﬁrst tried and ﬁn ally a complex 
repair procedure was done. 
fig.7. trace alignment of traces in telephone repair log for one of t he clusters 
5.2 rental agency log 
we applied trace alignment on a real life log of a rental agenc y where the cases 
corresponded to cancellation of a current rental agreement and subsequent reg- 
istration of a new rental agreement. this log was provided by a large dutch 
agency that rents houses and apartments (the organization h as approximately trace alignment in process mining: opportunities for proce ss diagnostics 239 
1000 employees and handles 80 ,000 houses). there were 74 event classes, one 
event type, 210 traces and 6100 events in this log. as we can se e, this log is suf- 
ﬁciently complex in terms of the size of the alphabet and the n umber of cases. 
the traces are ﬁrst encoded into activity sequences where ea ch activity is en- 
coded as a two character sequence. figure 8 depicts the align ment for one of the 
four clusters of this log. since the whole alignment is not le gible 4, we highlight 
the interesting patterns/activities (that we refer to for o ur further discussion) 
at the top and the bottom of the ﬁgure. the length of the alignm ent is 88. at 
the outset, we can see certain patterns in the form of well con served regions 
(columns) in the alignment. deviations and exceptional behavior are captured in 
regions that are sparsely ﬁlled i.e., regions with lot of gap symbols ( −). we will 
present the results of analysis of some of these deviations. it could be seen that 
only one of the traces (third trace in the alignment) has the a ctivity subsequence 
b4a8b0 in columns 9 −11. activity b0 in column 8 corresponds to the check, 
is first inspection done? and the activity subsequence b4a8b0 corresponds 
to the scenario where the result of the check was negative due to the fact that 
the tenant was not at home. b4 corresponds to the activity of sending a letter to 
the tenant and a8 corresponds to the activity of rescheduling the ﬁrst inspec tion. 
fig.8. trace alignment for one of the clusters of rental agency log 
the activity sequence h1g9 corresponding to the checks is final inspection 
done? (h1 ), and are there new/repaired defects? (g9 ) is well conserved 
across all but one of the traces . we see an exceptional activi ty sequence d1d0 
corresponding to the oﬀering of a ﬂat in one of the traces (ﬁrs t trace) before 
the activity sequence h1g9 . it is strange that a ﬂat was oﬀered before the ﬁnal 
inspection was done as in all the other traces where the ﬂat wa s oﬀered, it hap- 
pened subsequent to the ﬁnal inspection. upon further inspe ction, we observed 
4the actual alignment can be inspected at 
www.win.tue.nl/ ~jcbose/alignmentanaysis3a.png 240 r.p. jagadeesh chandra bose and w. van der aalst 
that though the ﬂat was oﬀered, the actual registration/che ck of the candidate 
corresponding to activity d6 happened subsequent to the ﬁnal inspection. fur- 
thermore, in all the cases where the ﬂat was oﬀered and the can didate registered, 
the activity sequence d1d0d6 was well conserved except for the ﬁrst trace. trace 
alignment helps us uncover such anomalies and deviations. similarly, we notice 
that in only one of traces (second trace) there was a need for s econd inspection 
(activity b5 corresponds to the planning of second inspection and e5 corresponds 
to the check, is second inspection done? ). 
the activity c9 corresponds to the determination of a candidate tenant and 
the activities a5 and e0 correspond to registration of lease and signing of con- 
tract respectively. it could also be observed from the align ment that there is 
an exceptional behavior in one of the cases where we see a mani festation of the 
activity subsequence c9g4e8d9a5e0f0c9 (the activity c9 appears twice). this 
indicates the fact that for this case, there was a need for det ermining the can- 
didate tenant twice. the determination of the second candid ate tenant followed 
the activity f0 which corresponds to the termination of provisional lease. in 
this fashion trace alignment assists the analyst in getting diagnostic insights by 
uncovering interesting patterns and deviations. 
finding good quality alignments is intriguingly challengi ng. eﬃcient prepro- 
cessing techniques for transforming the log with abstracti ons might help in ﬁnding 
better alignments. one can try to ﬁnd alignments in a multi-p hase approach, with 
abstractions deﬁned over conserved patterns in each iterat ion of the alignment. 
alternatively, one can also adopt our abstraction techniqu es proposed in [9]. 
6 related work 
song and aalst [10] have proposed the dotted chart analysis t o analyze process 
performance by depicting process events in a graphical way. the dotted chart 
analysis (analogous to gantt charts) primarily focuses on t he time dimension 
of events and presents a “helicopter view” of the event log al ong with some 
metrics for performance such as the minimum, maximum and ave rage interval 
between events. the business analyst need to manually investigate the dotted 
chart to identify any potential performance issues. for log s with medium to 
large number of activities (of the order of a few tens to hundr eds), the manual 
inspection and comprehension of the dotted chart becomes cu mbersome and 
often infeasible to identify interesting patterns. trace alignment alleviates this 
problem, by ﬁnding those patterns automatically and depict ing it to the user. 
in the parlance of dotted chart analysis, trace alignment co nsiders the logical 
relative time perspective of the event log. furthermore, it would be s imple and 
a natural extension to project the performance metrics prop osed in [10] onto the 
aligned traces. 
conformance checking compares an apriori model with the observed behavior 
as recorded in the log and aims at detecting inconsistencies /deviations between 
a process model and its corresponding execution log [11]. co nformance checking 
has inherent limitations in its applicability especially f or diagnostic purposes. 
firstly, it assumes the existence of a process model (the cur rent realization of trace alignment in process mining: opportunities for proce ss diagnostics 241 
the conformance checker plugin in prom requires the process to be modeled as 
petrinet). however, in reality, process models are either n ot present or if present 
are incorrect or outdated (their quality typically leaves m uch to be desired). one 
can argue that process models can be discovered from the even t logs and con- 
formance checking be applied on the discovered models. however, th is approach 
is not suitable for the analysis of highly complex and/or ﬂexible process es, the 
class of models which most of the real-life logs fall into and where the discovered 
models are “spaghetti-like”. even in cases where the proces s models are available 
as petrinets, it is diﬃcult to look inside of the processes to identify and locate 
problems especially with models that are large. trace align ment analyzes the 
raw event traces and highlights the deviations. 
multiple sequence alignment (msa) is an active area of resea rch in bioin- 
formatics. heuristic methods such as progressive alignmen t [12,13] and itera- 
tive alignment [14] have been proposed for msa. however ther e are challenges 
in adapting these techniques for trace alignment. alignmen t of biological se- 
quences typically happens over sequences with less variati on in length. however, 
traces in an event log in process mining can be of diﬀerent len gths. variation in 
lengths can occur due to variation in execution paths of the i nstances and due 
to manifestation of process model constructs such as choice /loop constructs. in 
biological sequence alignment, there are standard scoring matrices for substitu- 
tion that are derived based on physio-chemical properties o f the amino acids. 
insertion/deletion operations are primarily considered e ither with a constant 
gap-score (or penalty) or as an aﬃne function. scoring matri ces for trace align- 
ment need to be derived automatically from the event log or pr ovided by the 
domain experts. biological sequences deal with an alphabet size of either 4 (for 
four nucleic acids) or 20 (for amino acids). however, the num ber of distinct ac- 
tivities (event classes) in a typical process mining log can be of the order of a 
few hundreds. this adds to the complexity of deriving good scoring matrice s 
and aligning traces. we took inspiration from msa technique s [12,13,15] and 
adapted them for trace alignment. 
7 conclusions 
in this paper, we proposed a novel approach of aligning trace s and showed that 
this approach uncovers interesting patterns and assists in getting better insights 
on process executions. we have listed some of the interesting quest ions in process 
diagnostics and showed how trace alignment can help in diagn ostic eﬀorts. due to 
the computational complexity of multiple trace alignment, automatic generation 
of high-quality alignments is still challenging. traces th at are outliers (noise) in 
the log might mislead the alignment procedure and thereby re sult in a low quality 
alignment. better techniques to identify and discard outli ers during alignment 
are required. metrics and realignment strategies in the per spective of process 
modeling constructs and their manifestation in traces is hi ghly desirable and is 
an open area of research. 
acknowledgments. the authors are grateful to philips healthcare for funding 
the research in process mining. 242 r.p. jagadeesh chandra bose and w. van der aalst 
references 
1. van der aalst, w.m.p., weijters, a.j.m.m., maruster, l.: workﬂow mining: dis- 
covering process models from event logs. ieee transactions on knowledge and 
data engineering 16(9), 1128–1142 (2004) 
2. waterman, m.s.: introduction to computational biology: maps, sequences and 
genomes. chapman & hall/crc (2000) 
3. needelman, s., wunsch, c.: a general method applicable to the search for similar- 
ities in the amino acid sequences of two proteins. journal of molecular biology 48, 
443–453 (1970) 
4. durbin, r., eddy, s., krogh, a., mitchison, g.: biologica l sequence analysis: 
probabilistic models of proteins and nuclei acids. cambrid ge university press, 
cambridge (2002) 
5. wang, l., jiang, t.: on the complexity of multiple sequenc e alignment. journal of 
computational biology 1(4), 337–348 (1994) 
6. bose, r.p.j.c., van der aalst, w.m.p.: context aware trac e clustering: towards 
improving process mining results. in: proceedings of the si am international con- 
ference on data mining, pp. 401–412. sdm, philadelphia (200 9) 
7. simonsen, m., mailund, t., pedersen, c.n.s.: rapid neigh bor-joining. in: algo- 
rithms in bioinformatics, pp. 113–122 (2008) 
8. de medeiros, a.k.a., van der aalst, w.m.p.: process minin g towards semantics. 
in: advances in web semantics-i, pp. 35–80 (2008) 
9. bose, r.p.j.c., van der aalst, w.m.p.: abstractions in pr ocess mining: a taxonomy 
of patterns. in: dayal, u., eder, j., koehler, j., reijers, h .a. (eds.) bpm. lncs, 
vol. 5701, pp. 159–175. springer, heidelberg (2009) 
10. song, m., van der aalst, w.m.p.: supporting process mini ng by showing events at a 
glance. in: proceedings of the 17th annual workshop on infor mation technologies 
and systems (wits), pp. 139–145 (2007) 
11. rozinat, a., van der aalst, w.m.p.: conformance checkin g of processes based on 
monitoring real behavior. information systems 33(1), 64–9 5 (2008) 
12. feng, d., doolittle, r.: progressive sequence alignmen t as a prerequisite to correct 
phylogenetic trees. journal of molecular evoluation 25, 35 1–360 (1987) 
13. feng, d., doolittle, r.: progressive alignment of amino acid sequences and con- 
struction of phylogenetic trees from them. methods in enzym ology 266, 368–382 
(1996) 
14. barton, g., sternberg, m.: a strategy for rapid multiple alignment of protein se- 
quences, conﬁdence levels from tertiary structure compari sons. journal of molecu- 
lar biology 198(2), 327–337 (1987) 
15. daniel, c., paul, d., vidhya, m., marco, o., eun-jong, h. , yaoyu, w., shyamal, s., 
brian, c., shobha, p., enoch, h.: pfaat version 2.0: a tool fo r editing, annotating, 
and analyzing multiple sequence alignments. bmc bioinform atics 8(1), 381 (2007) 