model-driven enterprise systems con¯guration
jan recker1, jan mendling2, wil van der aalst1;3, and michael rosemann1
1queensland university of technology
126 margaret street, brisbane qld 4000, australia
fj.recker, w.vanderaalst, m.rosemann g@qut.edu.au
2vienna university of economics and business administration
augasse 2-6, 1090 vienna, austria
jan.mendling@wu-wien.ac.at
3eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
w.m.p.v.d.aalst@tm.tue.nl
abstract. enterprise systems potentially lead to signi¯cant e±ciency
gains but require a well-conducted con¯guration process. a promising
idea to manage and simplify the con¯guration process is based on the
premise of using reference models for this task. our paper continues along
this idea and delivers a two-fold contribution: ¯rst, we present a generic
process for the task of model-driven enterprise systems con¯guration
including the steps of (a) speci¯cation of con¯gurable reference models,
(b)con¯guration of con¯gurable reference models, (c) transformation of
con¯gured reference models to regular build time models, (d) deployment
of the generated build time models, (e) controlling of implementation
models to provide input to the con¯guration, and (f) consolidation of
implementation models to provide input to reference model speci¯cation.
we discuss inputs and outputs as well as the involvement of di®erent
roles and validation mechanisms. second, we present an instantiation
case of this generic process for enterprise systems con¯guration based
on con¯gurable epcs.
1 enterprise systems and reference modeling
over the last years, enterprise systems (es) have evolved to comprehensive
it-supported business solutions that presumptively support and enhance orga-
nizations in their business operations. this, however, only holds true for such
systems that are well-aligned with organizational requirements. as enterprise
systems are developed in a generic manner in order to provide bene¯ts to a
wide variety of organizations, industry sectors and countries, their implementa-
tion entails the problem of aligning business and it. alignment, however, implies
extensive con¯guration and customization e®orts in the implementation process
and may lead to signi¯cant implementation costs that exceed the price of soft-
ware licenses by factor ¯ve to ten [1].
es vendors are aware of these problems and try to increase the manageability
of the implementation process. one respective measure is to deliver es products2
along with extensive documentation and speci¯c implementation support tools.
reference models play a central role within such documentation. vendors pro-
vide a set of process models as reference models of their software package [2].
the sap reference model as such an example includes a large number of process
models representing the system processes [3]. however, research shows that refer-
ence models still are only of limited use to the es con¯guration process [4]. this
is mainly due to a lack of conceptual support for con¯guration in the underlying
modeling language. in this context, a con¯gurable modeling language should at
least support the structured modi¯cation and exclusion of model elements or
whole parts of a model as well as the de¯nition of constraints on con¯gurability
[5]. this is of particular importance for leveraging the main objective of refer-
ence models, i.e., streamlining the adaptation of es. beyond conceptual support
in terms of °exible or con¯gurable modeling languages, see e.g. [5, 6], there is a
need for a clearly structured con¯guration procedure. es con¯guration based on
con¯gurable reference models is a multi-facetted task requiring guidance to the
overall process. it comprises in particular model con¯guration, validation, trans-
lation, deployment, controlling, and consolidation; with each of these subtasks
demanding not only profound knowledge of con¯gurable reference modeling but
also of the processes of the organization. a dedicated approach is needed to
manage the process of model-driven enterprise systems con¯guration all the
way from model design to deployment.
following this line of argumentation this paper reports on the development
and application of a generic engineering process for the design and usage of
con¯gurable reference models in a model-driven approach towards enterprise
systems con¯guration. to be more concise, the contribution of our paper is
two-fold: first, we introduce an engineering process covering the tasks of speci-
¯cation, con¯guration, transformation and deployment of con¯gurable reference
models and the two feedback loops of controlling and consolidation. the engi-
neering process will be described on a generic level to allow for wider uptake
in es contexts beyond the limits of any given modeling language. second, as
an instantiation case, we report on the deployment of this generic engineering
process in the development and application of con¯gurable epcs (c-epcs) [5,
7] in the context of model-driven es con¯guration. we proceed as follows: sec-
tion 2 presents the generic engineering process for con¯gurable reference models.
section 3 then reports on the application of the engineering process based on
c-epcs. after discussing related research in section 4, we conclude the paper
in section 5.
2 a generic con¯gurable reference modeling process
this section de¯nes a process for engineering and deploying con¯gurable refer-
ence models in the context of enterprise systems implementation. this process
is generic in that it is not dependent on a speci¯c modeling technique or method.
however, a requirement for the application of our engineering process is that the
reference modeling language used throughout the process must be con¯gurable3
as de¯ned in section 1. subsection 2.1 gives an overview of the process while sub-
sections 2.2 to 2.7 introduce the six steps of model speci¯cation, con¯guration,
transformation, deployment, controlling, and consolidation.
2.1 overview of the process
reference model con¯guration contrasts with the traditional software develop-
ment process: during implementation, the scope of the es system is continuously
narrowed down to ¯nally meet the requirements of the organization. this process
starts with the overall system capabilities which are then reduced to a relevant
subset. reference models can be used as semi-formal descriptions of such over-
all capabilities [2] and a con¯gurable reference modeling language provides the
means to express con¯guration alternatives. the lifecycle model introduced by
rosemann and van der aalst [5] illustrates this continuous `narrowing down'
process by de¯ning di®erent \time" notions: at design time the overall capabili-
ties of the es are captured as a (con¯gurable) reference model. at con¯guration
time capabilities that are deemed desirable before the background of organi-
zational requirements are selected from the reference model. this means that
irrelevant parts of the model are excluded. at build time the con¯gured model
is deployed on an es to serve as a `template' for how the system support for
business will look like during execution. finally, at run time single instances are
created for speci¯c cases. our generic process for model-driven es con¯guration
is related to these \time" notions, however, we extend this lifecycle with feedback
loops as described below. the overall process de¯nes four major stages compris-
ing reference model speci¯cation ,con¯guration ,transformation , and deployment
(see fig. 1).
(2) configuration 
configured 
reference 
model 
(1) specification 
configurable 
reference 
model 
(4) deployment 
implementation 
model 
(3)transformation 
enterprise 
model 
(a)controlling(b) consolidation
fig. 1. engineering process for model-driven es con¯guration
the four stages need to be continuously assessed as to their contribution
towards ful¯lling organizational requirements, which in turn may be subjected4
to modi¯cation due to internal or external changes. as reference models capture
knowledge in the form of current best practice descriptions, they form part of an
organizational learning cycle by (a) being a®ected by changes within the organi-
zational setting and (b) e®ectuating such changes via technological or organiza-
tional developments. organizational learning in general can be di®erentiated in
single- and double-loop learning [8]. single-loop learning can be understood as
error minimization in accordance to given objectives and assumptions. double-
loop learning includes a re°ection upon these assumptions and may result in
completely new objectives, processes and outcomes. applying these insights to
the task of model-driven con¯guration of enterprise systems, we argue that
single-loop learning comprises the re°ection on a con¯guration as to its contri-
bution to given organizational requirements. double-loop learning then is the
re°ection on the presupposed best practice knowledge captured in the reference
models as to whether or not it su±ciently enables organizations to ful¯ll their ob-
jectives. in order to facilitate single- and double-loop learning with con¯gurable
reference models, our generic process is extended by two feedback mechanisms,
namely controlling andconsolidation . controlling is understood as the re°ec-
tion on the implementation of the \best practice" knowledge described in the
reference models within the organizational setting, viz., a diagnosis of how well
the selected con¯guration aligns with organizational requirements. controlling
in this sense provides a means to facilitate single-loop learning. consolidation is
understood as a re°ection on the speci¯cation of the \best practice" knowledge
described in the reference models based on current implementation in several or-
ganizational settings, viz., a diagnosis of whether the reference model itself (and
the es described within) has to be subjected to re¯nement or extension due
to evolution of technological and/or organizational factors in its domain. based
on this understanding consolidation provides a means to facilitate double-loop
learning.
the di®erent stages and loops are explained in the following subsections. in
contrast to the lifecycle model used by rosemann and van der aalst [5] that
merely o®ers a conceptual distinction of the phases, our engineering process
provides guidance for those involved in an es con¯guration project by giving
detailed recommendations for each of the four stages and the feedback loops. in
particular, we will describe for each stage the inputs andoutputs , the di®erent
steps ,responsibilities , and validation mechanisms .
2.2 step (1): speci¯cation of con¯gurable reference models
the ¯rst step is concerned with model development. the goal is to produce
acon¯gurable reference model as an output. this con¯gurable reference
model captures system functionality, capabilities and structure on a conceptual
level (as does a traditional reference model) [2] and furthermore de¯nes variation
points within the model that capture con¯gurable aspects of an es. a variation
point captures the place of a con¯guration decision together with the related
possible choices and consequences, and thereby serves the concept of variability
[9], which empowers constructive model reuse and facilitates the derivation of5
model variants from the initial model. concerning input there are basically two
options: (1) development from scratch . this means selecting an appropriate con-
¯gurable modeling technique to develop the reference models. as to methodical
guidance, traditional reference model engineering approaches may be followed.
the only additional concern here is to place emphasis on the conceptual descrip-
tion of variation points and con¯guration-related information within the models.
(2)extension of existing models . this option refers to the fact that, often, ref-
erence models are already available. as an example, the sap reference model
(version 4.6) [3] covers more than 1,000 business processes. such existing refer-
ence models are, however, usually depicted using traditional reference modeling
techniques that do not allow for the description of con¯guration-related informa-
tion, for instance the highlighting and selection of di®erent process alternatives
[5]. hence, a con¯gurable modeling language is needed to extend the existing
model in order to express variation points and con¯guration information. it is
e±cient to stick to the language in which the reference model is expressed and
to extend it by annotating the model with con¯guration concepts, rather than
rede¯ning the model in (yet) another modeling language. a potential solution for
re-engineering the existing reference model based on process mining techniques
is described in [7].
design timea b xc
d
configuration timea b xc
d
a b dc
dconfiguration timea b xc
d
variation point desired setting decision point reference model specification (1) reference model configuration (2)
fig. 2. speci¯cation and con¯guration of reference model
part (1) of fig. 2 illustrates how input and output of the speci¯cation step
are related. if there is a reference model available, con¯gurable aspects of the
system being modeled have to be made obvious in the model by extending it
with variation points. in fig. 2, we exemplarily highlighted such a con¯gurable
element by a grey background color.
concerning responsibilities, the speci¯cation step has to rely on es experts
who are familiar both with the functionality of the es and the support capabil-
ities for an organization's business processes it provides. furthermore, expertise
is required in terms of reference modeling. usually, such experts are employees of
the es vendor who are responsible for system documentation. if such documen-
tation is not provided by the es vendor itself, a con¯gurable reference model of
an es might be de¯ned by a consulting company or by an organization using
the es.6
concerning validation mechanisms, existing model quality frameworks (e.g.,
[10]) can be used in order to ensure the quality of the con¯gurable reference
model. this early step and the quality of its output is of crucial importance
since as conceptual models used in the requirements speci¯cation phase of a
system development process determine the acceptability and usability of the
product to be built [11]. not only the con¯guration alternatives have to be
made explicit, but also constraints in terms of interrelations between certain
con¯guration alternatives. due to this delicate nature, it de¯nitely calls for a
deeper investigation in terms of methodical guidance, which in turn we must
consider out of scope for this paper. we nevertheless suggest that the result of
this task should be validated by at least a second domain expert.
2.3 step (2): con¯guration of con¯gurable reference models
the second step deals with the con¯guration of a con¯gurable reference model.
taking the reference model de¯ned in the previous step as input, this task de¯nes
a set of con¯guration decisions for all con¯guration aspects of the model and
yields a con¯gured reference model as an output. hence, in the con¯gurable
reference model for each con¯gurable node a decision on the desired setting has
to be taken. each variation point in the con¯gurable reference model de¯nes a
decision point at which the reference model user has to specify a con¯guration
parameter while adhering to potential constraints and requirements. part (2) of
fig. 2 demonstrates this problem in a simple example. the con¯gurable refer-
ence model depicts two mutually exclusive alternatives of conducting business,
depicted by a circled xfor a logical either-or split: either the sequence a¡b¡c
ora¡b¡dis allowed. a particular organization has to select one of these two
alternatives of conducting their business processes via the enterprise system.
hence, the xsplit in this case represents a decision point, e.g., to select the
option a¡b¡d(highlighted by changing the circled xto a circled d), with
the consequence of excluding cfrom the model.
concerning responsibilities, this con¯guration step builds on the knowledge
of es experts who are familiar both with the functionality of the es, the re-
quirements of the organization, and the con¯guration of reference models. in
this context, these are most likely members of a con¯guration/implementation
project team involving consultants and experts of the organization itself.
concerning validation mechanisms, at this stage, the desired con¯guration
needs to be validated against the constraints de¯ned in the con¯gurable reference
model. if these constraints have been speci¯ed in a formal manner, this task can
be conducted automatically. consider the following example: an organization
chooses for its sales & distribution software package not to o®er credit card
payment to customers. conclusively, the accounting software package neither
needs to provide functionality for credit card authorization and payment. the
¯rst con¯guration decision has a consequence onto the second variation/decision
point in that it restrains the possible set of con¯guration alternatives. hence,
validation at this stage refers to the evaluation of con¯guration decisions against
constraints or con¯guration requirements.7
2.4 step (3): transformation of con¯gured reference models
the third step is concerned with the transformation of a con¯gured reference
model as input to an enterprise model as output. this enterprise model de-
scribes conceptually the way the organization will conduct business with the
support of the enterprise system once implemented and running. in short, a
\traditional" individual model has to be derived from the con¯gured reference
model. if the con¯guration semantics of the con¯gurable reference modeling lan-
guage have been de¯ned in a formal way and the activities are supported by
applications, this task can be automated by a transformation program. other-
wise, the transformation has to be done manually by an es expert with modeling
expertise. it is recommended to automate the transformation, as a manual execu-
tion of this task is both time-consuming and error-prone. furthermore, instead of
validating the enterprise model against the con¯gured model, a validation of the
correctness of the transformation program is su±cient, which is much more e±-
cient. as an example, modeling languages that are speci¯ed via an xml schema
can easily be validated and transformed. still, at least one es and business ex-
pert should inspect the resulting models to validate that the models (still) meet
the requirements of the organization. an automated transformation is especially
bene¯cial when both the con¯guration decisions have to be translated to the
output model and the re-establishment of syntactical correctness of the model
becomes necessary [12]. for illustration purposes, consider the example given in
part (3) of fig. 3. it is assumed that an organization has chosen to implement
the sequence a¡b¡dinstead of implementing the sequence a¡b¡c. thus,
the option c- which still exists in the con¯gured reference model - needs to be
excluded from the enterprise model. furthermore, the decision point has to be
excluded from the model in order to re-establish syntactical correctness.
build timea b dc
d
run time
a b da b d
a b d
executed model instances enterprise model configured reference model
enterprise-individual modela b da3 b3 d3enterprise model deployment (4) reference model transformation (3)
fig. 3. transformation to and deployment of enterprise model
2.5 step (4): deployment of enterprise model
the fourth step is concerned with the deployment of the enterprise model and
yields an implement and running enterprise system (which can be understood as8
animplementation model ) as output. part (4) of fig. 3 shows the principle.
there are basically two questions that are important in this context.
first, does a process engine or similar system exist that is able to execute
models, in particular the enterprise model, given the modeling language used? it
would be desirable if a reference process model that has been transformed to an
enterprise model would be directly executable in a work°ow engine. a popular
example for such an executable process speci¯cation is bpel4ws [13]. if the
model is not directly executable, the enterprise model has to be transformed to
a modeling language that runs on a dedicated execution engine. if the semantics
of the used modeling language are de¯ned in a formal way, this task can be
automated by a transformation program. otherwise, the transformation has to
be done manually by an es or it expert with modeling expertise.
second, does the enterprise model already include run time information about
data °ow and interfaces to applications? if not, the enterprise model or the trans-
formed enterprise model need to be enriched with technical information, and can
only be deployed afterwards. depending on how much technical information still
needs to be added to the model, the deployment has to be done by an it expert
or may also be done by an es expert. furthermore, testing of the enterprise
models is of crucial importance before deployment, especially when run time
information is manually added by it experts. the implementation models are
supposed to be instantiated in order to support the operations of the organi-
zation. accordingly, errors in the models may have a direct impact on business
performance.
2.6 loop (a): controlling of instance models
the single-learning feedback loop stems from the notion of process monitoring
and controlling. for the purpose of this paper, process monitoring deals with the
collection of data about work°ow instances at run time, mostly in audit trail logs,
i.e., an observation of the processes as they are executed in the organization at
hand [14]. process controlling , also referred to as process mining [15] or business
process intelligence [16], deals with the ex-post analysis of logged audit trail data
of process enactment. it aims at reviewing process performance as to whether
and how processes ful¯ll organizational requirements and support organizational
objectives. as process performance is determined by the support provided by the
implemented enterprise system, we argue here that poor process performance is
an indicator for an enterprise system con¯guration that does not entirely sup-
port all organizational requirements and objectives. based on noted deviations
in process performance, the process, as it is being supported or enacted by the
es, needs to be re-con¯gured in order to improve overall performance. hence,
the feedback loop of controlling provides ex-post evaluation of the customized
implementation of the enterprise system based on actual process enactment
performance.
to support the single-loop learning feedback look we use recent achievements
in process mining [15]. to illustrate the relationship between process mining and
reference models we refer to fig. 4. essential for process mining is the presence9
of an event log (also referred to as audit trail or transaction log), which log refers
to some event, e.g., the start or completion of some activity. the event may bear
a timestamp or refer to the person/application executing it. the event may also
hold data, e.g., the outcome of a decision activity. clearly, an information system
that is supporting or controlling an operational process is able to monitor such
events. we distinguish between two forms of process mining: process discovery
andconformance checking (see fig. 4).
the goal of process discovery is to extract knowledge from event logs in the
form of models. these may be process models, e.g., an epc or petri net, but
also other models such as social networks or time-charts describing the perfor-
mance (e.g., °ow times). process discovery does not require an a-priori model
(such as a reference model), however, the discovered model may be used for
delta analysis, i.e., comparing the mined model representing the actual process
with the reference model representing the prede¯ned process. delta analysis can
be used to ¯nd parts of the process that are never used or ¯nd parts where
users deviate from the prescribed procedure. moreover, the discovered models
may refer to other aspects such as time, data and resources. for example, the
discovered model may highlight the bottlenecks in the process, reveal the social
network (e.g., which people are working together on a frequent basis), or relate
properties of cases to their execution (e.g., cases involving more than 1000 euro
and handled by the team in paris tend to be late).
unlike process discovery, conformance checking doesrequire an a-priori model
to which it compares the observed behavior as recorded in the log. using confor-
mance checking one can detect discrepancies but it is also possible to see which
parts of the process are really used, where bottlenecks are etc. clearly, this is
very useful for measuring (and quantifying) the \¯t" between the real process
and some reference model and to pinpoint typical deviations.
to actually measure conformance and to discover a variety of models, we
have developed the prom framework4. in the context of this framework, several
process discovery tools have been developed, e.g., the well-know alpha algorithm
[15]. moreover, the framework o®ers a conformance checker , asocial network
analyser , and a variety of other analysis tools.
the dashed lines in fig. 4 refer to the steps identi¯ed in fig. 1. first, the
reference models are speci¯ed and then for a particular context (organization
and process) they are con¯gured. the con¯gured model is then transformed and
deployed. the con¯gured reference model can be compared with the derived
models (process discovery) or directly with the event logs (conformance check-
ing). this way it is possible to ¯nd di®erent types of problems that may lead to
a re-con¯guration. for example, analysis may show that in reality, the execution
of the process does not match with the con¯gured reference process model. this
may imply an incorrect implementation, o±ce workers not following the proper
procedures, or a misalignment that needs to be addressed by recon¯guring the
system. the analysis may also highlight parts of the con¯gured reference model
that are rarely active (or over-active), which, too, indicates a suboptimal con¯gu-
4both documentation and software can be downloaded from www.processmining.org.10
enterprise 
information
system 
operational
process configured 
reference 
models event 
logs 
process
discoveryconformance
checkingrecords 
(4) deploy 
enacts/
controls
configurable 
 reference 
models (2) configure enterprise 
models 
(3) transform 
(1) specify 
(a) controlling(b)consolidation
conformance
checking
process
discovery
fig. 4. process mining approach and relation to con¯gurable reference models
ration of the system. moreover, conformance checking may pinpoint bottlenecks
and other performance-related issues. these diagnostics may assist in improving
the con¯guration of the reference model.
responsibilities for this task are multi-fold. the monitoring step of this stage
is best performed by it experts that capture relevant process performance data
in audit trails and have experience in applying process mining techniques. the
actual analysis should be done by an analyst having knowledge of process mining
and the application domain. it is de¯nitely possible to automate this analysis
and o®er a kind of \business cockpit" to managers and end-users. then, the
step of controlling is a rather managerial task and merely includes decisions
as to how to re-con¯gure the processes in order to increase their performance.
still, based on the assumption that process performance is determined by the
support provided by the enterprise system, an es expert is recommended to
be consulted for this task in order to elicit possible alternatives for supporting
existing processes through alternative es con¯gurations.
2.7 loop (b): consolidation of instance models
the single-loop learning approach focuses on a speci¯c context (i.e., a given orga-
nization and process) and can only result in a recon¯guration. therefore, it does
not aim at improving \best practice" in a broader setting, i.e., it does not re°ect
on the qualities of the con¯gurable reference model. the double-loop learning
approach that we refer to as consolidation has a wider scope than controlling.
the input of the consolidation feedback loop is a set of instances originating from
di®erent con¯gurations, i.e., experiences from multiple applications of the refer-
ence model are used as a starting point for the analysis of the reference model
itself and not (just) one selected con¯guration. the result of this analysis can be
used to modify the reference model itself. for example, analysis may show that
although it is possible to con¯gure a variation point in multiple ways, in real-
ity always the same con¯guration decision is taken, thus leading to unnecessary
con¯guration work. it is also possible that analysis shows that certain problems11
(e.g., performance or quality issues) typically occur when a certain con¯guration
is being used. this knowledge can be used to revise the original reference model
and the variation points within.
the consolidation phase consists of three smaller steps. first, process mining
techniques as described in section 2.6 are applied in a variety of situations where
the reference model has been con¯gured and deployed. for example, situations
in di®erent organizational units in the same enterprise or in comparable orga-
nizational units across di®erent organizations may be used as input. for each
situation, process mining techniques are used to do process discovery and/or
conformance checking. this gives insights into the way the system is really be-
ing used, helps to identify problems and is used to quantify the performance
of the process. each of these aspects is linked to the selected con¯guration and
external factors such as load and resource availability. note that compared to
section 2.6 these results are more likely at an aggregate level. the second step
uses the results of this ¯rst step and compares all situations to discover pat-
terns. this can be done in a qualitative way (\it seems that con¯guration a
only works properly if combined with con¯guration b.") or in a quantitative
way (\there is a positive correlation between the °ow time and a particular
con¯guration setting."). in the third and ¯nal step these patterns are used to
modify the reference model (see fig. 4). note that the structure of the refer-
ence model may change. however, we envision that more changes will be made
to relationships between the di®erent con¯guration decisions. moreover, the use
of soft constraints in addition to hard constraints seems to be important. soft
constraints can serve as guidelines based on empirical evidence gained from the
feedback loop of consolidation.
the responsibility of this task lies with the developers of the reference models
guided by input from the organizations involved.
3 an instantiation case using con¯gurable epcs
so far, we outlined a generic process that covers the overall reference model
lifecycle and applies it to the area of enterprise systems con¯guration. in the
following, we will illustrate the technical feasibility of this process by applying
it to the case of c-epcs in the context of es con¯guration. c-epcs have been
developed with the clear intention in mind to facilitate a model-driven approach
towards es con¯guration. in the following, we assume the reader to have some
basic knowledge of epcs. for an introduction, refer to [17].
event-driven process chains (epcs) are a frequently used business process
modeling language, especially for describing processes on a conceptual level.
epcs have been developed in a joint project by university of saarland and
sap [17] and sap has used them as a modeling language for their sap r/3
reference model [3]. con¯gurable epcs (c-epcs) [5] extend epcs to allow for
the speci¯cation of variation points, con¯guration requirements and con¯gura-
tion guidelines in a reference model, including con¯gurable functions that can
be switched on,o®oroptional ; con¯gurable connectors that subsume possible12
build time connector types, which are less or equally expressive; con¯guration
requirements (must-constraints) and guidelines (should-constraints); and an or-
der relation over the con¯gurable nodes [5]. epcs have been chosen because
they facilitate the usage of the sap model in step 1 for the speci¯cation of
con¯gurable reference models. respective tool support is available as the aris
toolset of ids scheer ag is shipped with the sap model. as a basis for steps
2 to 4, an xml representation of (a) con¯gurable epcs and (b) con¯gured
epcs based on the epc markup language (epml) [18] has been speci¯ed [19].
this epml extension serves as an input format for a c-epc validation tool
that has been implemented as a prototype [19]. this tool generates a report on
whether a con¯gurable epc is correct with respect to the c-epc de¯nition,
and whether con¯guration requirements and guidelines are met. the formal c-
epc de¯nition allows the automation of the validation and, therefore, supports
the con¯guration step ( step 2 ). the transformation of c-epcs to epc process
models bears some challenges which are speci¯c to the syntax and semantics of
epcs [12]. an algorithm has been de¯ned in [20] and implemented to automate
this transformation step ( step 3 ). this is supposed to speed up the development
and grant the correctness of the resulting models. this algorithm is driven by
a minimality criterion in order to generate an epc with as little structure as
necessary [20]. in the beginning, it had been an assumption that the generated
epc models can be directly deployed on the es ( step 4 ). as this might not
always be the case, a transformation concept from epcs to executable bpel
[13] process de¯nitions has been developed [21]. as bpel is a generic language
for web service composition, this step can only be automated if the data °ow
and the web service endpoints are made explicit in the epc model. basically,
such information can be included in the con¯gurable model and preserved in
the transformation step, so it is still available for deployment. the two feedback
loops can both be supported by process mining techniques. the prom frame-
work introduced in section 2.6 is able to rebuild epc models from sap event
logs. also, in [7] it has been shown how process mining can be used to generate
c-epcs from running work°ows for controlling or consolidation purposes.
the c-epc case illustrates that respective tool support for each step of
the engineering process has already been established on a prototype basis. the
next challenge is to combine the di®erent implementations into a comprehensive
con¯guration framework that can be used by practitioners.
4 related work
a number of academic contributions discussing issues related to enterprise sys-
tems aim at understanding the challenges of es con¯guration. for instance, a
number of contingencies that potentially impact such projects have been revealed
in critical success factor models [22]. other research claims that es implemen-
tation project failures are likely due to di±culties arising while using speci¯ed
requirements in the implementation process [23]. empirical studies, too, tell fail-
ure stories [1].13
while vendors aim at increasing the chance of es implementation success
by distributing reference models as part of system documentation, these models
are at best partly deployed in the con¯guration of enterprise systems. daneva
[4] measured the level of reuse of the sap reference models in a number of case
studies and indicated that full reuse was not achieved in any of them, although
sometimes the level of reuse was quite substantial. some research has focused
the ¯eld of con¯gurable modeling, good collections of related approaches can be
found in [5] and [24]. some of the discussed approaches are closely related to our
ideas of con¯gurable modeling; worthwhile mentioning here is the approach by
reinhartz-berger et al. [25], who leverage the re-use of reference models for do-
main engineering using model specialization mechanisms based on generalization
and uml stereotypes.
concerning limitations, model-driven con¯guration is well suited for deploy-
ment of commercial-o®-the-shelf software packages but not as a general approach
to software engineering, which cannot entirely be described as a `scoping' exer-
cise. also, the notion of re-usable models in the software engineering discipline
refers to the employment of building blocks of software fragments in multiple
contexts rather than the depiction of best practice patterns. there is, however,
some related work. as an example, haugen et al. [26] present an approach to
leverage con¯gurable models for system family engineering. in order to cap-
ture model variability, they utilize mechanisms of uml 2.0 composite structures
and uml association multiplicities. yet, their approach focusses more on the
derivation of individual software systems from system families than on deriving
variants from a given models.
5 contributions and limitations
this paper reported on the development and application of a generic engineer-
ing process for con¯gurable reference modeling. we ¯rst presented a process for
model-driven enterprise systems con¯guration consisting of the steps speci¯-
cation ,con¯guration ,transformation , and deployment , as well as the feedback
loops controlling andconsolidation . the second contribution of this paper was
the application of this generic process to the development and application of
c-epcs for the purpose of con¯guring enterprise systems. we showed how c-
epcs conceptually facilitate a model-driven con¯guration process in all of our
stages.
our research has a few limitations. first, our approach needs to be empir-
ically validated with business practitioners. this task is currently being con-
ducted. we have already conducted a pilot laboratory experiment with post-
graduate it students on the perceived usefulness and perceived ease of use of
c-epcs in comparison to epcs, showing that c-epcs are in fact perceived
as more useful and easier to use for the task of reference model con¯guration
[27]. second, our approach does not strongly consider the challenge of linking
con¯gurable models to enterprise systems functionality, i.e., how to link model
con¯gurations to actual modi¯cations of programmed code. third, we applied14
our generic engineering process to a con¯gurable process modeling approach. it
would be interesting to link it other perspectives such as a data view, refer, for
instance, to [28].
future work will concentrate on (a) an evaluation of our approach via case
study application and (b) the development of a sophisticated con¯guration frame-
work based on our proof-of-concept implementations. the ultimate goal is then
to provide comprehensive tool support towards model-driven systems con¯gura-
tion.
acknowledgement. the research on c-epcs has been partly funded by
sap research and queensland university of technology with the strategic link
with industry project \modelling con¯gurable business processes". sap is a
trademark of sap ag, germany.
references
1.davenport, t.h.: mission critical: realizing the promise of enterprise systems.
harvard business school press, boston, ma (2000)
2.rosemann, m.: using reference models within the enterprise resource planning
lifecycle. australian accounting review 10(2000) 19{30
3.curran, t., keller, g., ladd, a.: sap r/3 business blueprint: understanding the
business process reference model. enterprise resource planning series. prentice
hall ptr, upper saddle river, nj (1997)
4.daneva, m.: practical reuse measurement in erp requirements engineering.
in wangler, b., bergmann, l., eds.: 12th international conference on advanced
information systems engineering. volume 1789 of lecture notes in computer
science., stockholm, sweden, springer (2000) 309{324
5.rosemann, m., van der aalst, w.: a con¯gurable reference modelling language.
information systems in press, also available from www.bpmcenter.org
(2006)
6.so®er, p.: scope analysis: identifying the impact of changes in business process
models. software process improvement and practice 10(2005) 393{402
7.jansen-vullers, m.h., van der aalst, w., rosemann, m.: mining con¯gurable
enterprise information systems. data and knowledge engineering 56(2006) 195{
244
8.argyris, c., schä on, d.: organizational learning ii. theory, method, and practice.
addison-wesley, reading, ma et al. (1996)
9.halmans, g., pohl, k.: communicating the variability of a software-product
family to customers. software and systems modeling 2(2003) 15{36
10.lindland, o.i., sindre, g., s¿lvberg, a.: understanding quality in conceptual
modeling. ieee software 11(1994) 42{49
11.lauesen, s., vinter, o.: preventing requirement defects: an experiment in
process improvement. requirements engineering 6(2001) 37{50
12.recker, j., rosemann, m., van der aalst, w., mendling, j.: on the syntax of
reference model con¯guration. transforming the c-epc into lawful epc mod-
els. in bussler, c., haller, a., eds.: business process management workshops.
volume 3812 of lecture notes in computer science. springer, berlin, germany et
al. (2006) 497{51115
13.andrews, t. et al.: business process execution language for web services. version
1.1 (2003)
14.zur muehlen, m.: work°ow-based process controlling. foundation, design and
application of work°ow-driven process information systems. logos, berlin, ger-
many (2004)
15.van der aalst, w., weijters, a., maruster, l.: work°ow mining: discovering
process models from event logs. ieee transactions on knowledge and data
engineering 16(2004) 1128{1142
16.grigori, d., casati, f., castellanos, m., dayal, u., sayal, m., shan, m.: business
process intelligence. computers in industry 53(2004) 321{343
17.keller, g., nä uttgens, m., scheer, a.w.: semantische prozessmodellierung auf der
grundlage \ereignisgesteuerter prozessketten (epk)". technical report 89, insti-
tut fä ur wirtschaftsinformatik der universitä at saarbrä ucken, saarbrä ucken, germany
(1992)
18.mendling, j., nä uttgens, m.: epc markup language (epml) - an xml-based
interchange format for event-driven process chains (epc). information sys-
tems and e-business management in press, also available from wi.wu-
wien.ac.at/home/mendling (2006)
19.mendling, j., recker, j., rosemann, m., van der aalst, w.: towards the in-
terchange of con¯gurable epcs: an xml-based approach for reference model
con¯guration. in desel, j., frank, u., eds.: enterprise modelling and informa-
tion systems architectures. volume p-75 of lecture notes in informatics. german
informatics society, klagenfurt, austria (2005) 8{21
20.mendling, j., recker, j., rosemann, m., van der aalst, w.: generating correct
epcs from con¯gured cepcs. in: 21st annual acm symposium on applied
computing, dijon, france, acm (2006) forthcoming
21.ziemann, j., mendling, j.: epc-based modelling of bpel processes: a pragmatic
transformation approach. in: 7th international conference mitip 2005, genova,
italy (2005)
22.holland, c.p., light, b.: a critical success factors model for erp implementa-
tion. ieee software 16(1999) 30{36
23.rolland, c., prakash, n.: bridging the gap between organisational needs and
erp functionality. requirements engineering 5(2000) 180{193
24.puhlmann, f., schnieders, a., weiland, j., weske, m.: variability mechanisms
for process models. pesoa-report tr 17/2005, daimlerchrysler research and
technology and hasso-plattner-institut, ulm and potsdam, germany (2005)
25.reinhartz-berger, i., so®er, p., sturm, a.: a domain engineering approach to
specifying and applying reference models. in desel, j., frank, u., eds.: enterprise
modelling and information systems architectures. volume p-75 of lecture notes
in informatics. german informatics society, klagenfurt, austria (2005) 50{63
26.haugen, â., m¿ller-pedersen, b., oldevik, j., solberg, a.: an mda-based frame-
work for model-driven product derivation. in hamza, m.h., ed.: software engi-
neering and applications, cambridge, ma, acta press (2004) 709{714
27.recker, j., rosemann, m., van der aalst, w.: on the user perception of con-
¯gurable reference process models - initial insights. in: 16th australasian con-
ference on information systems, sydney, australia, australasian chapter of the
association for information systems (2005)
28.rosemann, m., shanks, g.: extension and con¯guration of reference models for
enterprise resource planning systems. in finnie, g., cecez-kecmanovic, d., lo,
b., eds.: proceedings of the 12th australasian conference on information systems.
southern cross university, co®s harbour, australia (2001) 537{546