using process mining to generate accurate and
interactive business process maps
w.m.p. van der aalst
eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tue.nl
abstract. the quality of today's digital maps is very high. this al-
lows for new functionality as illustrated by modern car navigation sys-
tems (e.g., tomtom, garmin, etc.), google maps, google street view,
mashups using geo-tagging (e.g., panoramio, housingmaps, etc.), etc.
people can seamlessly zoom in and out using the interactive maps in
such systems. moreover, all kinds of information can be projected on
these interactive maps (e.g., tra±c jams, four-bedroom apartments for
sale, etc.). process models can be seen as the \maps" describing the op-
erational processes of organizations. unfortunately, accurate and inter-
active process maps are typically missing when it comes to business pro-
cess management. either there are no good maps or the maps are static
or outdated. therefore, we propose to automatically generate business
process maps using process mining techniques . by doing this, there is a
close connection between these maps and the actual behavior recorded in
event logs. this will allow for high-quality process models showing what
really happened. moreover, this will also allow for the projection of dy-
namic information , e.g., the \tra±c jams" in business processes. in fact,
the combination of accurate maps, historic information, and information
about current process instances, allows for prediction andrecommenda-
tion. for example, just like tomtom can predict the arrival time at a
particular location, process mining techniques can be used to predict
when a process instance will ¯nish.
1 the need for accurate and interactive business
process maps
process models are vital for the design, analysis, and implementation of infor-
mation systems. their role is similar to the role of maps for navigation systems,
mashups, etc. for example, people increasingly rely on the devices of tomtom
and other vendors and ¯nd it useful to get directions to go from a to b, know
the expected arrival time, learn about tra±c jams on the planned route, and
be able to view maps that can be customized in various ways (zoom-in/zoom-
out, show fuel stations, speed limits, etc.). maps do not only play an important
role in car navigation, but are also crucial for all kinds of innovative informa-
tion services. figure 1 shows two examples combining cartographic informationfig. 1. the role of maps in funda (top left) and tomtom hd tra±c (bottom right).
funda dynamically shows houses for sale in a particular area (in this case town of
hapert) meeting speci¯c criteria (cf. www.funda.nl). tomtom hd tra±c is calculating
the best route based on cell phone information provided by vodafone, i.e., the locations
and directions of cell phones are used to predict tra±c jams (cf. www.tomtom.com).
both examples use a combination of high-quality maps augmented with dynamic in-
formation allowing for seamlessly zooming in and out. this paper advocates the devel-
opment of such functionality for business information systems.with dynamically changing data. however, when looking at business processes,
such information is typically lacking. good and accurate \maps" of business
processes are often missing and, if they exist, they tend to be restrictive and
provide little information. for example, very few information systems are able
to predict when a case will complete. therefore, we advocate more tomtom-like
functionality for business process management, coined \tomtom4bpm" in [2].
besides navigation systems, there are many applications based on google maps.
for example, real-estate agencies dynamically projecting information on maps,
etc. a key element is the availability of high-quality maps. the early navigation
systems were using very course maps that were often outdated, thus limiting
their applicability. a similar situation can be seen when looking at information
systems based on incorrect or outdated process models.
in this paper, we advocate the use of accurate and interactive business process
maps obtained through process mining . the goal is to provide a better breed of
business process management systems (bpmss) [1, 15, 29]. bpmss are used to
manage and execute operational processes involving people, applications, and/or
information sources on the basis of process models. these systems can be seen
as the next generation of work°ow technology o®ering more support for analy-
sis. despite signi¯cant advances in the last decade, the functionality of today's
bpmss leaves much to be desired. this becomes evident when comparing such
systems with the latest car navigation systems of tomtom or innovative applica-
tions based on google maps. some examples of functionality provided by tom-
tom and/or google maps that are generally missing in contemporary bpmss
are:
{in today's organizations often a good process map is missing . process models
are not present, incorrect, or outdated. sometimes process models are used
to directly con¯gure the bpms. however, in most situations there is not an
explicit process model as the process is fragmented and hidden inside legacy
code, the con¯guration of erp systems, and in the minds of people.
{if process models exist in an explicit form, their quality typically leaves much
to be desired . especially when a process model is not used for enactment
and is only used for documentation and communication, it tends to present
a \powerpoint reality". road maps are typically of much higher quality and
use intuitive colors and shapes of varying sizes, e.g., highways are emphasized
by thick colorful lines and dirt roads are not shown or shown using thin dark
lines. in process models, all activities tend to have the same size and color
and it is di±cult to distinguish the main process °ow from the less traveled
process paths .
{most process modeling languages have a static decomposition mechanism
(e.g., nested subprocesses). however, what is needed are controls allowing
users to zoom in or zoom out seamlessly like in a navigation system or google
maps . note that, while zooming out, insigni¯cant things are either left out
or dynamically clustered into aggregate shapes (e.g., streets and suburbs
amalgamate into cities). process models should not be static but allow for
various (context dependent) views.{sometimes process models are used for enactment. however, such \process
maps" are often trying to \control" the user. when using a car navigation
system, the driver is always in control, i.e., the road map (or tomtom) is
not trying to \control" the user. the goal of a bpms should be to provide
directions and guidance rather than enforcing a particular route .
{a navigation system continuously shows a clear overview of the current situ-
ation (i.e., location and speed). moreover, tra±c information is given, show-
ing potential problems and delays. this information is typically missing in a
bpms. even if the bpms provides a management dashboard, tomtom-like
features such as tra±c information and current location are typically not
shown in an intuitive manner.
{a tomtom system continuously recalculates the route, i.e., the recommended
route is not ¯xed and changed based on the actions of the driver and con-
textual information (e.g. tra±c jams). moreover, at any point in time the
navigation system is showing the estimated arrival time . existing bpmss
are not showing this information and do not recalculate the optimal process
based on new information.
the above list of examples illustrates desirable functionality that is cur-
rently missing in commercial bpmss. fortunately, recent breakthroughs in pro-
cess mining may assist in realizing highly innovative features that are based
on high-quality business process maps tightly connected to historic information
collected in the form of event logs.
in the remainder of this paper, we ¯rst brie°y introduce the concept process
mining in section 2. section 3 introduces the prom framework that aims at the
generation of accurate and interactive business process maps obtained through
process mining. based on prom and process mining it is possible to provide
tomtom-like functionality as discussed in section 4. one particular example
of such innovative functionality is \case prediction" as described in section 5.
pointers to related work on process mining are given in section 6. section 7
concludes the paper.
2 process mining
process mining techniques attempt to extract non-trivial and useful information
from event logs [5, 9]. many of today's information systems are recording an
abundance of events in such logs. various process mining approaches make it
possible to uncover information about the processes they support. typically,
these approaches assume that it is possible to sequentially record events such
that each event refers to an activity (i.e., a well-de¯ned step in the process)
and is related to a particular case (i.e., a process instance). furthermore, some
mining techniques use additional information such as the performer or originator
of the event (i.e., the person/resource executing or initiating the activity), the
timestamp of the event, or data elements recorded with the event (e.g., the size
of an order).process mining addresses the problem that most people have very limited
information about what is actually happening in their organization. in prac-
tice, there is often a signi¯cant gap between what is prescribed or supposed to
happen, and what actually happens. only a concise assessment of the organi-
zational reality, which process mining strives to deliver, can help in verifying
process models, and ultimately be used in a process redesign e®ort or bpms
implementation.
some examples of questions addressed by process mining:
{process discovery : \what is really happening?"
{conformance checking :\do we do what was agreed upon?"
{performance analysis : \where are the bottlenecks?"
{process prediction : \will this case be late?"
{process improvement : \how to redesign this process?"
the above questions show that process mining is not limited to control-
°ow discovery. in fact, we identify three types of process mining: (a) discovery ,
(b)conformance , and (c) extension . we also distinguish three di®erent perspec-
tives: (a) the control-°ow perspective (\how?"), (b) the organizational perspec-
tive(\who?") and (c) the case perspective (\what?").
models 
analyzes 
discovery records 
events, e.g., 
messages, 
transactions, 
etc. specifies 
configures 
implements 
analyzes supports/ 
controls 
extension conformance people machines 
organizations components business processes 
process mining 
fig. 2. process mining as a bridge between process models and event logs.
figure 2 positions process mining as the technology that \sits" in-between
event logs and process models. the ¯gure also shows the three types of process
mining.the ¯rst type of process mining is discovery , i.e., deriving information from
some event log without using an a priori model. based on an event log various
types of models may be discovered, e.g., process models, business rules, organi-
zational models, etc.
the second type of process mining is conformance checking . here the event
log is used to check if reality conforms to some model. for example, there may be
a process model indicating that purchase orders of more than one million euro
require two checks, while in reality this does not happen. conformance checking
may be used to detect deviations, to locate and explain these deviations, and to
measure the severity of these deviations.
the third type of process mining, called extension , also assumes both a log
and a model as input (cf. figure 2). however, the model is not checked for
correctness, instead it is used as a basis, i.e., the model is augmented with some
new information or insights. for example, an existing process model could be
extended by timing information, correlations, decision rules, etc.
orthogonal to the three types of mining, there are the three perspectives
mentioned before. the control-°ow perspective focuses on the control-°ow, i.e.,
the ordering of activities. the goal of mining this perspective is to ¯nd a good
characterization of all possible paths, e.g., expressed in terms of a petri net or
some other notation (e.g., epcs, bpmn, uml ads, etc.). the organizational
perspective focuses on information about resources hidden in the log, i.e., which
performers are involved and how are they related. the goal is to either structure
the organization by classifying people in terms of roles and organizational units or
to show the social network. the case perspective focuses on properties of cases.
cases can be characterized by their path in the process or by the originators
working on a case. however, cases can also be characterized by the values of the
corresponding data elements. for example, if a case represents a replenishment
order, it may be interesting to know the supplier or the number of products
ordered.
3 tool support: prom
theprom framework aims to cover the full process mining spectrum shown in
figure 2. the current version of prom provides more than 250 plug-ins. the
prom framework has been developed as a completely plug-able environment
and serves as an excellent basis for process mining initiatives.
prom is the only comprehensive framework supporting a wide range of pro-
cess mining techniques. most other tools in this area only focus on a single
perspective and/or technique. futura re°ect by futura process intelligence,
bpmjoneby pallas athena, comprehend by open connect, interstage auto-
mated business process discovery and visualization by fujitsu, process discov-
ery focus by iontas, and enterprise visualization suite by businesscape are
some examples of commercial tools that o®er some form of process discovery.
of these tools futura re°ect and bpm jone are more mature as they allow for
the discovery of processes with concurrency. most of the other tools mentionedare only able to discover sequential processes or even require a-priori modeling.
commercial tools typically o®er only a small subset of the functionality provided
byprom . however, the emergence of these tools illustrates the practical interest
in process mining. for example, futura process intelligence and pallas athena
have been selected as \cool vendor 2009" by gartner because of their process
mining capabilities. both tools use genetic process mining algorithms developed
in the context of prom [19].
the reader is referred to www.processmining.org to learn more about process
mining and to download prom .
4 tomtom4bpm
in [2], the term tomtom4bpm was coined to stress the need for the map-based
functionality one can ¯nd in navigation systems (e.g., tomtom, garmin, vdo
dayton, mio, magellan, etc.), google maps, google street view, mashups using
geo-tagging (e.g., panoramio, housingmaps, findbyclick, etc.). after introduc-
ing process mining, we revisit the desired functionalities mentioned in section 1.
here we are particularly interested in adding innovative functionality to bpmss.
{as indicated earlier, good process maps are typically missing in today's or-
ganizations. clearly, process mining can assist here. process discovery algo-
rithms [9, 6, 10, 11, 13, 28, 16, 27] are able to extract process maps from event
logs. these maps are describing the way things really happened rather than
providing some subjective view.
{in section 1, we indicated that even if process models exist in an explicit
form, their quality typically leaves much to be desired . using process min-
ing techniques, one can avoid depicting a \powerpoint reality" and come
closer to the quality of road maps. moreover, based on historic information,
it is possible use intuitive visual metaphors adopted from road maps. for
example, we can use intuitive colors and shapes of varying sizes, e.g., the
\highways in the process" are emphasized by thick colorful lines and \pro-
cess dirt roads" are not shown or shown using thin dark lines. the major
\cities of a process" can also be emphasized and less relevant activities can
be removed. relevance can be determined based on actual frequencies of
activities in logs. other metrics may be the time spent on activities or the
costs associated with them. prom 'sfuzzy miner [16] can discover processes
from event logs and o®ers such visualizations.
{most process modeling languages have a static decomposition mechanism
(e.g., nested subprocesses) without the ability to seamlessly zoom in or zoom
out like in a navigation system or google maps .prom 'sfuzzy miner [16]
allows for such a seamless zoom. note that, while zooming out, insigni¯cant
activities and paths are either left out or dynamically clustered into aggregate
shapes (e.g., streets and suburbs amalgamate into cities).
{when \process maps" are used in an operational sense, they typically at-
tempt to control the users . however, when using a car navigation system, thedriver is always in control, i.e., the road map (or tomtom) is not trying to
\control" the user. the goal of an information system should be to provide
directions and guidance rather than enforcing a particular route. prom 's
recommendation engine [23] learns from historic data and uses this to pro-
vide recommendations to the user. this way the work°ow system can provide
more °exibility while still supporting the user. this is comparable to the di-
rections given by a navigation system.
{a navigation system continuously shows a clear overview of the current situ-
ation (i.e., location and speed). moreover, tra±c information is given, show-
ing potential problems and delays. since process mining results in a tight
connection between events and maps, it is easy to project dynamic informa-
tion on process maps. ideas such as the ones presented figure 1 have their
counterparts in bpmss, e.g., showing \tra±c jams" in business processes.
{at any point in time the navigation system is showing the estimated arrival
time. existing bpmss are not showing this information and do not recalcu-
late the optimal process based on new information. prom provides several
so-called prediction engines [7, 14] to estimate the remaining °ow time of a
case. the next section shows an example of an application of the technique
described in [7].
in this paper, we cannot present the various techniques supported by prom in
detail. instead, we only show that event logs can be used to predict the remaining
time until completion for running cases.
5 an example: case prediction
as an illustration of the innovative features that can be provided by combining
accurate process maps and historic event information, we brie°y show an ap-
plication of case prediction [7]. to illustrate the technique presented in [7] and
implemented in prom , we use an event log of municipality taken from a process
that deals with objections (i.e., appeals) against the real-estate property valua-
tion or the real-estate property tax. the municipality is using eistream work°ow
(formerly known as eastman software and today named global 360) to handle
these objections.
the process considered in this case study is called \bezwaar woz", where
woz (\waardering onroerende zaken") refers to the particular law describing
regulations related to real-estate property valuation by municipalities. we used
an event log with data on 1882 objections handled by the municipality. the
log contains 11985 events and the average total °ow time is 107 days while
some cases take more than 200 days. figure 3 shows the distribution of total
°ow times. the x-axis shows the 1882 cases and the y-axis shows the duration in
days. note that some cases take a very short time while others take much longer,
thus making it di±cult to predict the remaining time for cases in the system. to
measure the quality of predictions, we split the log into a training set (log l1)
and a test set (log l2). log l1contains 982 cases and log l2contains 900 cases.fig. 3. the distribution of the total °ow time of cases extracted using prom . the
x-axis represents the 1882 cases sorted by °ow time. the y-axis shows durations in
days. note that some cases almost take 250 days.
the goal is to predict, at any point in time, the remaining processing time
of a case. this corresponds to the \estimated arrival time" provided by car
navigation systems like tomtom. to do this, we build a so-called annotated
transition system using the training set (log l1). using a variable abstraction
mechanism, partial traces are mapped onto states of the transition system. using
historic information, appropriate statistics are collected per state.
figure 4 shows an annotated transition system obtained using a particular
abstraction (see [7] for other abstractions). if one is interested in the remaining
time until completion of a particular case c, then the partial trace ¾cof this case
is mapped onto a state sc. based on sca lookup is done in figure 4 resulting in
a prediction tp
c, e.g., for a case where two particular steps have been executed,
the predicted remaining time until completion is tp
c= 20:5 days. afterwards, it
is possible to measure what the actual quality of this estimate. for example, if
the real remaining time until completion turns out to be tr
c= 25 :7, then the
error is jtp
c¡tr
cj= 5:2 days.
if we use the annotated transition system shown in figure 3 (which was
derived from l1) to predict the remaining time until completion before/after
every event in l2, then the mean average error (mae) is 17.129 days. given
the fact that there are huge variations in °ow times and that the average °ow
time is 107 days (cf. figure 3), this is a spectacular performance. for processes
which less variation, it is possible to make even better predictions. to put the
mae of 17.129 days into perspective, it is interesting to compare the performance
of the annotated transition system shown in figure 3 with the simple heuristic
of always estimating half of average total °ow time (i.e., 53.5 days). the mae of
this heuristic is 61.750 days. hence, the performance of the technique presented
in [7] is much better than simple heuristics. it is quite remarkable that one
can predict the remaining time until completion so accurately. this shows that[[b],[i]] 
 sojourn = 15.3332 
 elapsed = 4.27168 
 remaining = 202.780 [[],[i]] 
 sojourn = 0.0 
 elapsed = 0.0 
 remaining = 192.649 
[[],[]] 
 sojourn = 0.0 
 elapsed = 0.0 
 remaining = 63.4624 [[e],[i]] 
 sojourn = 8.25098 
 elapsed = 26.4655 
 remaining = 155.042 
[[g],[]] 
 sojourn = 0.17968 
 elapsed = 51.7855 
 remaining = 0.25572 [[c],[i]] 
 sojourn = 50.5984 
 elapsed = 6.55942 
 remaining = 204.546 
[[o],[]] 
 sojourn = 0.45839 
 elapsed = 159.219 
 remaining = 1.73753 
[[j],[]] 
 sojourn = 13.6759 
 elapsed = 56.0915 
 remaining = 13.6759 [[d],[]] 
 sojourn = 15.0304 
 elapsed = 41.2688 
 remaining = 19.4577 
[[h],[]] 
 sojourn = 7.09205 
 elapsed = 87.5322 
 remaining = 24.6030 
[[p],[]] 
 sojourn = 1.26478 
 elapsed = 155.082 
 remaining = 1.69408 [[c],[]] 
 sojourn = 52.5662 
 elapsed = 11.5144 
 remaining = 73.6310 
[[n],[]] 
 sojourn = 3.60209 
 elapsed = 155.972 
 remaining = 5.26848 [[l],[]] 
 sojourn = 1.43620 
 elapsed = 157.379 
 remaining = 7.93469 
[[e],[]] 
 sojourn = 3.53284 
 elapsed = 56.3538 
 remaining = 33.3511 [[f],[]] 
 sojourn = 13.2145 
 elapsed = 128.014 
 remaining = 13.3569 [[b],[]] 
 sojourn = 16.8129 
 elapsed = 9.43436 
 remaining = 73.4641 
[[q],[]] 
 sojourn = 12.1739 
 elapsed = 28.1960 
 remaining = 65.5129 
[[m],[]] 
 sojourn = 1.83842 
 elapsed = 161.461 
 remaining = 6.16146 [[g],[i]] 
 sojourn = 145.761 
 elapsed = 42.4520 
 remaining = 150.197 [[a],[i]] 
 sojourn = 4.88454 
 elapsed = 0.0 
 remaining = 207.543 
[[q],[i]] 
 sojourn = 8.98153 
 elapsed = 12.2141 
 remaining = 163.160 
[[a],[]] 
 sojourn = 5.45194 
 elapsed = 0.0 
 remaining = 80.4937 
[[i],[]] 
 sojourn = 1.57712 
 elapsed = 188.213 
 remaining = 4.43585 [[d],[i]] 
 sojourn = 7.47458 
 elapsed = 39.1344 
 remaining = 160.984 
d
complete b
complete 
o
complete g
complete q
complete b
complete 
b
complete 
h
complete b
complete 
l
complete d
complete 
e
complete g
complete 
h
complete b
complete 
o
complete g
complete 
j
complete d
complete 
f
complete g
complete d
complete 
n
complete q
complete 
d
complete b
complete 
g
complete d
complete d
complete a
complete 
switch start state 
d
complete 
h
complete q
complete i
complete 
l
complete e
complete 
n
complete h
complete 
g
complete q
complete 
p
complete g
complete e
complete 
c
complete c
complete 
g
complete 
d
complete 
m
complete q
complete 
d
complete q
complete 
f
complete 
l
complete g
complete 
a
complete d
complete 
h
complete 
g
complete g
complete g
complete 
h
complete e
complete 
h
complete g
complete fig. 4. an annotated transition system extracted from event log l1. the transition
system and its annotations are not intended to be readable and the activity names
have been obfuscated. the transition system is learned from an event log containing
information about 982 cases (objections against the real-estate property valuation/tax).
per state, historic information is used to make a prediction. for example, for the
top state the predicted time until completion is 192 days, for the bottom-left state
the predicted time until completion is 1.69 days, and for the bottom-right state the
predicted time until completion is 13.67 days. the mean average error (mae) is
17.129 days when this annotated transition system is evaluated using another log ( l2)
containing event data on 900 other objections.using process mining techniques one can realize tomtom-like functionality like
the estimated arrival time.
6 related work
since the mid-nineties several groups have been working on techniques for pro-
cess mining [9, 6, 10, 11, 13, 28, 16, 27], i.e., discovering process models based on
observed events. in [8] an overview is given of the early work in this domain. the
idea to apply process mining in the context of work°ow management systems
was introduced in [10]. in parallel, datta [13] looked at the discovery of business
process models. cook et al. investigated similar issues in the context of soft-
ware engineering processes [11]. herbst [17] was one of the ¯rst to tackle more
complicated processes, e.g., processes containing duplicate tasks. most of the
classical approaches have problems dealing with concurrency. the ®-algorithm
[9] was the ¯rst technique taking concurrency as a starting point. however, this
simple algorithm has problems dealing with complicated routing constructs and
noise (like most of the other approaches described in literature). in the context
of the prom framework [3] more robust techniques have been developed. the
heuristics miner [27] and the fuzzy miner [16] can deal with incomplete, unbal-
anced, and/or noisy events logs. the two-phase approach presented in [6] allows
for various abstractions to obtain more useful models. it is impossible to give a
complete review of process mining techniques here, see www.processmining.org
for more pointers to literature.
the approaches mentioned above focus on control-°ow discovery. however,
when event logs contain time information, the discovered models can be extended
with timing information. for example, in [25] it is shown how timed automata
can be derived. in [20] it is shown how any petri net discovered by prom can
be enriched with timing and resource information.
the above approaches all focus on discovering process models based on his-
toric information and do not support users at run-time. the recommendation
service of prom learns based on historic information and uses this to guide the
user in selecting the next work-item [23]. this is related to the use of case-based
reasoning in work°ow systems [26]. in the context of prom two prediction ap-
proaches are supported: [7] and [14]. the prediction service presented in [14,
12] predicts the completion time of cases by using non-parametric regression.
the prediction service presented in [7] (used in section 5) is based on annotated
transition systems and uses the abstractions de¯ned in [6]. also related is the
prediction engine of sta®ware [24, 22] which is using simulation to complete audit
trails with expected information about future events. this particular approach
is rather unreliable since it is based on one run through the system using a copy
of the actual engine. hence, no probabilities are taken into account and there
is no means of \learning" to make better predictions over time. a more re¯ned
approach focusing on the transient behavior (called \short-term simulation") is
presented in [21].the limitations related to the representation and visualization of process
models mentioned at the beginning of this paper became evident based on ex-
periences gathered in many process mining projects. it seems that the \map
metaphor" can be used to present process models and process information in
completely new ways [16, 18]. in the context of yawl [4, 18], we showed that it
is possible to show current work items on top of various maps. work items can
be shown on top of a geographic map, a process model, a time chart, an organi-
zational model, etc. in the context of prom, we have used the \map metaphor"
to enhance the so-called fuzzy miner [16]. as presented in [16], four ideas are
being combined in prom's fuzzy miner to draw maps of process models.
{aggregation: to limit the number of information items displayed, maps of-
ten show coherent clusters of low-level detail information in an aggregated
manner. one example are cities in road maps, where particular houses and
streets are combined within the city's transitive closure.
{abstraction: lower-level information which is insigni¯cant in the chosen con-
text is simply omitted from the visualization. examples are bicycle paths,
which are of no interest in a motorists map.
{emphasis: more signi¯cant information is highlighted by visual means such
as color, contrast, saturation, and size. for example, maps emphasize more
important roads by displaying them as thicker, more colorful and contrasting
lines (e.g., motorways).
{customization: there is no one single map for the world. maps are spe-
cialized on a de¯ned local context, have a speci¯c level of detail (city maps
vs highway maps), and a dedicated purpose (interregional travel vs alpine
hiking).
7 conclusion
the paper suggests using process mining to create accurate and interactive busi-
ness process maps for the management of business processes. the maps can be
accurate because they are no longer based on outdated or subjective information,
but on facts recorded in event logs. by establishing a close connection between
event logs and such maps, it is possible to project information dynamically and
let the user interact with such business process maps. using prom some of
the desired tomtom functionality has been realized and there is a huge innova-
tion potential for today's bpmss. using \tomtom4bpm" we can realize truly
intelligent information systems.
to make things a bit more concrete, we presented a particular example of
such functionality using a new method for predicting the \future of a running
instance". given a running case, our prediction approach allows answering ques-
tions like \when will this case be ¯nished?", \how long does it take before
activity ais completed?", \how likely is it that activity bwill be performed in
the next two days?", etc. this corresponds to the functionality we know from
modern car navigation systems that give an estimate for the remaining driving
time.essentially for all of this is that we have high-quality business process maps.
unfortunately, the quality of today's process models leaves much to be desired
and the situation is comparable to cartographic information decades ago. prob-
lems with the ¯rst navigation systems showed that incorrect maps result in
systems that are not very usable. therefore, the ability to extract maps from
event logs using process mining is crucial.
some people may argue that business processes are less stable than infras-
tructures consisting of roads, intersections, and bridges. therefore, it is much
more di±cult to provide accurate business process maps. this is indeed the
case. however, this illustrates that a continuous e®ort is required to keep busi-
ness process maps up to date. process mining can be used for this. moreover, by
recording and analyzing event logs on-the-°y, it is possible to o®er more °exibil-
ity without loosing sight of the actual processes. therefore, the need to enforce
rigid processes is removed and, like in the context of a car navigation system,
the \driver is in control" rather than some archaic information system.
8 acknowledgements
this research is supported by eit, nwo-ew, super, and the technology
foundation stw. we would like to thank the many people involved in the
development of prom (see references).
references
1.w.m.p. van der aalst. business process management demysti¯ed: a tutorial on
models, systems and standards for work°ow management. in j. desel, w. reisig,
and g. rozenberg, editors, lectures on concurrency and petri nets , volume 3098
oflecture notes in computer science , pages 1{65. springer-verlag, berlin, 2004.
2.w.m.p. van der aalst. tomtom for business process management (tom-
tom4bpm). in j. gordijn, editor, proceedings of the 21st international con-
ference on advanced information systems engineering (caise'09) , lecture notes
in computer science. springer-verlag, berlin, 2009.
3.w.m.p. van der aalst, b.f. van dongen, c.w. gä unther, r.s. mans, a.k. alves
de medeiros, a. rozinat, v. rubin, m. song, h.m.w. verbeek, and a.j.m.m.
weijters. prom 4.0: comprehensive support for real process analysis. in j. kleijn
and a. yakovlev, editors, application and theory of petri nets and other models of
concurrency (icatpn 2007) , volume 4546 of lecture notes in computer science ,
pages 484{494. springer-verlag, berlin, 2007.
4.w.m.p. van der aalst and a.h.m. ter hofstede. yawl: yet another work°ow
language. information systems , 30(4):245{275, 2005.
5.w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b.f. van dongen, a.k.
alves de medeiros, m. song, and h.m.w. verbeek. business process mining: an
industrial application. information systems , 32(5):713{732, 2007.
6.w.m.p. van der aalst, v. rubin, b.f. van dongen, e. kindler, and c.w. gä unther.
process mining: a two-step approach to balance between under¯tting and over-
¯tting. software and systems modeling , 2009.7.w.m.p. van der aalst, m.h. schonenberg, and m. song. time prediction based
on process mining. bpm center report bpm-09-04, bpmcenter.org, 2009.
8.w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. work°ow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237{267, 2003.
9.w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
10.r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
°ow logs. in sixth international conference on extending database technology ,
pages 469{483, 1998.
11.j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215{249, 1998.
12.r. crooy. predictions in information systems: a process mining perspective. mas-
ter's thesis, eindhoven university of technology, eindhoven, 2008.
13.a. datta. automating the discovery of as-is business process models: proba-
bilistic and algorithmic approaches. information systems research , 9(3):275{301,
1998.
14.b.f. van dongen, r.a. crooy, and w.m.p. van der aalst. cycle time prediction:
when will this case finally be finished? in r. meersman and z. tari, editors,
proceedings of the 16th international conference on cooperative information sys-
tems, coopis 2008, otm 2008, part i , volume 5331 of lecture notes in computer
science , pages 319{336. springer-verlag, berlin, 2008.
15.m. dumas, w.m.p. van der aalst, and a.h.m. ter hofstede. process-aware infor-
mation systems: bridging people and software through process technology . wiley
& sons, 2005.
16.c.w. gä unther and w.m.p. van der aalst. fuzzy mining: adaptive process sim-
pli¯cation based on multi-perspective metrics. in g. alonso, p. dadam, and
m. rosemann, editors, international conference on business process management
(bpm 2007) , volume 4714 of lecture notes in computer science , pages 328{343.
springer-verlag, berlin, 2007.
17.j. herbst. a machine learning approach to work°ow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183{194. springer-verlag, berlin, 2000.
18.m. de leoni, w.m.p. van der aalst, and a.h.m. ter hofstede. visual support for
work assignment in process-aware information systems. in m. dumas, m. re-
ichert, and m.c. shan, editors, international conference on business process man-
agement (bpm 2008) , volume 5240 of lecture notes in computer science , pages
67{83. springer-verlag, berlin, 2008.
19.a.k. alves de medeiros, a.j.m.m. weijters, and w.m.p. van der aalst. genetic
process mining: an experimental evaluation. data mining and knowledge dis-
covery , 14(2):245{304, 2007.
20.a. rozinat, r.s. mans, m. song, and w.m.p. van der aalst. discovering simulation
models. information systems , 34(3):305{327, 2009.
21.a. rozinat, m.t. wynn, w.m.p. van der aalst, a.h.m. ter hofstede, and c. fidge.
work°ow simulation for operational decision support using design, historic and
state information. in m. dumas, m. reichert, and m.c. shan, editors, interna-
tional conference on business process management (bpm 2008) , volume 5240 of
lecture notes in computer science , pages 196{211. springer-verlag, berlin, 2008.22.b. schellekens. cycle time prediction in sta®ware. master's thesis, eindhoven
university of technology, eindhoven, 2009.
23.h. schonenberg, b. weber, b.f. van dongen, and w.m.p. van der aalst. support-
ing flexible processes through recommendations based on history. in m. dumas,
m. reichert, and m.c. shan, editors, international conference on business pro-
cess management (bpm 2008) , volume 5240 of lecture notes in computer science ,
pages 51{66. springer-verlag, berlin, 2008.
24.sta®ware. sta®ware process suite version 2 { white paper . sta®ware plc,
maidenhead, uk, 2003.
25.s.e. verwer, m.m. de weerdt, and c. witteveen. e±ciently learning timed models
from observations. in l. wehenkel, p. geurts, and r. maree, editors, benelearn ,
pages 75{76. university of liege, 2008.
26.b. weber, w. wild, and r. breu. cbrflow: enabling adaptive work°ow manage-
ment through conversational case-based reasoning. in advances in case-based
reasoning , volume 3155 of lecture notes in computer science , pages 434{448.
springer-verlag, berlin, 2004.
27.a.j.m.m. weijters and w.m.p. van der aalst. rediscovering work°ow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.
28.j.m.e.m. van der werf, b.f. van dongen, c.a.j. hurkens, and a. serebrenik.
process discovery using integer linear programming. in k. van hee and r. valk,
editors, proceedings of the 29th international conference on applications and the-
ory of petri nets (petri nets 2008) , volume 5062 of lecture notes in computer
science , pages 368{387. springer-verlag, berlin, 2008.
29.m. weske. business process management: concepts, languages, architectures .
springer-verlag, berlin, 2007.