alignment based precision checking
a. adriansyah1, j. munoz-gama2, j. carmona2, b.f. van dongen1, and
w.m.p. van der aalst1
1department of mathematics and computer science
eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
fa.adriansyah,b.f.v.dongen,w.m.p.v.d.aalst g@tue.nl
2universitat politecnica de catalunya
barcelona, spain
fjmunoz,jcarmona g@lsi.upc.edu
abstract. most organizations have process models describing how cases
need to be handled. in fact, legislation and standardization (cf. the
sarbanes-oxley act, the basel ii accord, and the iso 9000 family of
standards) are forcing organizations to document their processes. these
processes are often not enforced by information systems. however, tor-
rents of event data are recorded by today's information systems. these
recorded events reect how processes are really executed. often reality
deviates from the modeled behavior. therefore, measuring the extent
process executions conform to a predened process model is increasingly
important. in this paper, we propose an approach to measure the pre-
cision of a process model with respect to an event log. unlike earlier
approaches, we rst align model and log thus making our approach more
robust, even in case of deviations. the approach has been implemented
in the prom 6 tool and evaluated using both articial and real life cases.
keywords: precision measurement, log-model alignment, conformance check-
ing, process mining
1 introduction
process models are the starting point for most business process management
(bpm) activities, as they provide insights into possible scenarios [10]. process
models are used for analysis (e.g. simulation), enactment, redesign, and process
improvement. therefore, they should reÔ¨Çect the dominant behavior accurately.
the increasing availability of event data enables the application of conformance
checking [9, 12, 13]. conformance checking techniques compare event logs with
process models such that deviations can be diagnosed and quantiÔ¨Åed.
conformance can be viewed along multiple orthogonal dimensions: (1) fit-
ness, (2) simplicity, (3) precision, and (4) generalization [12]. in this paper,
we focus on the precision dimension. precision penalizes a process model for
allowing behavior that is unlikely given the observed behavior in the event log.
take for example the two models and the event log in figure 1. all traces in the
log can be reproduced by both models, i.e. the traces perfectly tthe models.2 adriansyah, munoz-gama, carmona, van dongen and van der aalst
cb d e c
a d c e fendthe ‚Äúflower‚Äù model ( f) the overfitting (precise) model ( p)
d e fab
end
c d e
a b d e fc trace frequency
acdec 8698
abdec          8777
adcef          5043
acdeabdef 2482event log
fig. 1. example of an extremely precise (overtting) and imprecise model (undert-
ting) for a given log.
however, notice that the ‚ÄúÔ¨Çower‚Äù model ( f) may provide misleading insights, as
it also allows for much more behavior not appearing in the log. in contrast, the
other model ( p) only allows traces that occur in the log. hence, the precision
of model pis better than model fwith respect to the log.
many existing precision metrics (e.g. [4,7,9]) assume that the event log per-
fectly Ô¨Åts the model, while many case studies show that this assumption does not
hold (e.g. [5,8,14]). in this paper, we do not use such assumptions and propose
a robust approach to measure the precision between an event log and a model.
this way we combine our earlier work on precision [6,7] and alignments [1,2].
the paper is organized as follows: section 2 shows the notations and prelim-
inary concepts that are used throughout this paper. alignment between event
logs and models is explained in section 3. alignment-based precision measure-
ments are presented in section 4. experimental results are given in section 5.
section 6 concludes the paper.
2 preliminaries
conformance checking requires as input both a process model and an event log.
therefore, we Ô¨Årst formalize process models and logs.
2.1 sequence and multiset
letwbe a set. for (Ô¨Ånite) sequences of elements over a set w, we use œµto
denote an empty sequence. a concatenation of sequences œÉ1andœÉ2is denoted
with œÉ1¬∑œÉ2.w‚àódenotes the set of all Ô¨Ånite sequences over w. we refer to the
i-th element of a sequence œÉasœÉ[i] and we use |œÉ|to represent the length of
sequence œÉ. we say that any x‚àà(w√ów) is a pair. we use sel1(x) and sel2(x)
to refer to the Ô¨Årst and the second element of pair xrespectively. we generalize
this notation to sequences: seli(œÉ) =‚ü®seli(œÉ[1]), ..., sel i(œÉ[|œÉ|])‚ü©. for all q‚äÜw,
œÉ‚Üìqdenotes the projection of œÉ‚ààw‚àóonq, e.g., ‚ü®a, a, b, c ‚ü©‚Üì{a;c}=‚ü®a, a, c ‚ü©. for
simplicity, we omit brackets for sequences whenever their elements are clearly
distinguishable, e.g. we write aacinstead of ‚ü®a, a, c ‚ü©.
amultiset mover wis a mapping m:w‚Üíi n. we overload the set
notation, using ‚àÖfor the empty multiset and ‚ààfor the element inclusion. we writealignment based precision checking 3
e.g.m= [p2, q] orm= [p, p, q ] for a multiset mwith m(p) = 2, m(q) = 1, and
m(x) = 0 for all xÃ∏‚àà {p, q}. we use |m|to indicate the total number of elements
in multiset m(e.g.|[p2, q]|= 3). when we iterate over m, we refer to each unique
element in m, e.g. for all function f:w‚Üíi n,‚àë
x‚ààmf(x) =‚àë
x‚ààwm(x)¬∑f(x).
2.2 event log and process model
the starting point for conformance checking is an event log . an event log records
the execution of all cases (i.e. process instances). each case is described by a
trace , i.e., an activity sequence. diÔ¨Äerent cases may have exactly the same trace.
in reality, not all activities performed in a process are logged. we deÔ¨Åne the set
of all logged activities from the universe of activities aasal‚äÜa. an event
log over alis a multiset l:al‚àó‚Üíi n. for example, the log in figure 1 is
formalized as l= [acdec8698, abdec8777, adcef5043, acdeabdef2482].
similarly, a process model deÔ¨Ånes a set of sequences of activities that leads
to proper termination of the process. furthermore, some activities in a process
may not appear in its model. thus, we deÔ¨Åne a set of modeled activities over the
set of all activities aasam‚äÜa. a process model is a set of complete activity
sequences m‚äÜam‚àó, i.e., executions from the initial state to some Ô¨Ånal state.
consider for example the precise model ( p) in figure 1. assuming that the end
state is reached when the ‚Äúend‚Äù place contains exactly one token, the model
are formalized by the set {acdec, abdec, adcef, acdeabdef }. note that the set of
modeled activities and the set of logged activities may be disjoint, i.e. am‚à©al
can be an empty set.
3 cost-optimal alignment
an alignment between an event log and a process model relates occurrences of
activities in the log to execution steps of the model. as the execution of a case
is often performed independently of the execution of another case, aligning is
performed on the basis of traces.
for each trace in an event log that Ô¨Åts a process model, each ‚Äúmove‚Äù in the
trace, i.e., an event observed in the log, can be mimicked by a ‚Äúmove‚Äù in the
model, i.e., an action executed in the model. however, this is not the case if the
trace does not Ô¨Åt the model perfectly. we use the symbol ‚ä•to denote ‚Äúno move‚Äù
in either the log or the model. hence, we introduce the set a‚ä•
l=al‚à™{‚ä•} where
anyx‚ààa‚ä•
lrefers to a ‚Äúmove in log‚Äù and the set a‚ä•
m=am‚à™ {‚ä•} where any
y‚ààa‚ä•
mrefers to a ‚Äúmove in model‚Äù. formally, a move is represented by a pair
(x, y)‚ààa‚ä•
l√óa‚ä•
msuch that:
{(x, y) is a move in log ifx‚ààalandy=‚ä•,
{(x, y) is a move in model ifx=‚ä•andy‚ààam,
{(x, y) is a synchronous move/move in both ifx‚ààal,y‚ààam, and x=y,
{(x, y) is a illegal move in all other cases.4 adriansyah, munoz-gama, carmona, van dongen and van der aalst
we use almto denote the set of all pairs of legal moves , i.e. all possible pairs
of move in log, move in model, and move in both.
along this section, let lbe a log over al, let œÉl‚ààlbe a trace, and let
œÉm‚ààmbe a complete execution of the model. an alignment between œÉland
œÉmis a sequence Œ≥‚ààalm‚àówhere the projection of the Ô¨Årst element (ignoring
‚ä•) yields œÉl(i.e.sel1(Œ≥)‚Üìal=œÉl) and projection of the second element yields
œÉm(i.e.sel2(Œ≥)‚Üìam=œÉm).
take for example a trace œÉl=aacef and an activity sequence adcef allowed
by model pin figure 1. some possible alignments between the two are:
Œ≥1=aa?cef
a?dcefŒ≥2=aa?cef
?adcefŒ≥3=a?acef
ad?cefŒ≥4=aac??ef
?a?dcef
the moves are represented vertically, e.g., the Ô¨Årst move of Œ≥2is (a,‚ä•), indicating
that the log moves awhile the model does not make any move. note that the
projections of all moves in model in all alignments are by deÔ¨Ånition complete
activity sequences allowed by the model. this property is not always guaranteed
in some other approaches that also relates occurrences of observed activities in
the logs to execution steps in process models (e.g. [9]).
to measure the cost of an alignment, we deÔ¨Åne a distance function Œ¥:
alm‚Üíi nwhere for all ( al, am)‚ààalm, Œ¥((al, am)) = 0 if al=amand
Œ¥(al, am) = 1 otherwise3. the distance function can be generalized to align-
ments Œ≥‚ààalm‚àóby taking the sum of the costs of all individual moves: Œ¥(Œ≥) =‚àë
(al;am)‚ààŒ¥((al, am)). using this function, the cost of alignment Œ≥1isŒ¥(Œ≥1) =
Œ¥((a, a))+Œ¥((a,‚ä•))+Œ¥((‚ä•, d))+Œ¥((c, c))+Œ¥((e, e))+Œ¥((f, f)) = 0+1+1+0+0+0 =
2. note that the function returns the number of mismatches in the alignment.
given a trace from an event log and a process model, we are interested in an
activity sequence from the model that is similar to the trace. therefore, we deÔ¨Åne
the set of alignments Œ≥l;m={Œ≥‚ààalm‚àó| ‚àÉm‚ààm:Œ≥is an alignment between
œÉlandœÉm}to be all possible alignments between œÉland complete activity
sequences of m. accordingly, we deÔ¨Åne the set of optimal alignments as the set of
all alignments with minimum cost, i.e. Œ≥o
l;m={Œ≥‚ààŒ≥l;m| ‚àÄ‚Ä≤‚àà l;mŒ¥(Œ≥)‚â§
Œ¥(Œ≥‚Ä≤)}. it is easy to see that there can be more than one optimal alignment
between a trace and a model. for example, {Œ≥1, Œ≥2, Œ≥3}is the set of optimal
alignments between the trace œÉl=aacef and model pin figure 1.
given a log and a model, one can measure precision based on all optimal
alignments between traces in the log and the model or take just one represen-
tative element for each trace. in this paper, we investigate both approaches. we
deÔ¨Åne a function Œªm‚ààal‚àó‚Üíalm‚àóthat maps each trace in the log to an op-
timal alignment, i.e. for any œÉl‚ààl,Œªm(œÉl) =Œ≥, where Œ≥‚ààŒ≥o
l;m. if there are
multiple optimal alignments, Œªmchooses one of them according to other exter-
nal criteria. with our previous example, suppose that Œªmselects an alignment
that has the earliest occurrence of non-synchronous moves, Œªm(œÉl) =Œ≥2.
we deÔ¨Åne a function Œªm‚ààal‚àó‚Üímbased on Œªmsuch that for any trace œÉl
in log land a model m,Œªm(œÉl) =sel2(Œªm(œÉl))‚Üìam. function Œªmprovides an
3the distance function can be user-dened, but for simplicity we use a default distance
function that assigns unit costs to moves in log/model only.alignment based precision checking 5
‚Äúoracle‚Äù that produces one complete activity sequence allowed by models. in [1,2]
various approaches to obtain an optimal alignment with respect to diÔ¨Äerent cost
function are investigated. for any given trace and model, we can always obtain
an activity sequence that both perfectly Ô¨Åts the model and closest to the trace.
note that in cases where process model has duplicate tasks (more than one
task to represent an activity) or unlogged tasks (tasks whose execution are not
logged), approaches to construct alignments (e.g. [1,2]) keep the mapping from
all model moves to the tasks they correspond to. hence, given an alignment of a
trace and such models, we know exactly which task is executed for each model
move. due to space constraints, we refer to [1,2] for further details on how such
mapping is constructed.
4 alignment-aware precision
given an event log and a model, the technique described in the previous section
provides one optimal alignment (through the Œªmfunction) or all optimal align-
ments (through the Œ≥o
l;mset) for each trace in the log. this section presents
a technique to compute precision based on the use of these optimal alignments.
the technique is grounded on the methods described in [6,7]. however, there is
a fundamental diÔ¨Äerence: whereas in [6, 7] traces in the log are simply replayed
in the model, our new approach is based on alignments.
the advantages of the approach presented in this paper are manifold. first of
all, traces in the log do not need to be completely Ô¨Åtting. in [6,7] the non-Ô¨Åtting
parts are simply ignored. for most real-life logs this implies that only a fraction
of the event log can be used for computing precision. second, the existence
of indeterminism in the model poses no problems when using the alignments.
in [6,7], ad-hoc heuristics were used to deal with non-determinism. finally, the
use of alignments instead of log-based model replay improves the robustness
of conformance checking (as will be demonstrated later when we present the
experimental results). the remainder of this section is devoted to explain how
precision can be calculated.
precision is estimated by confronting model and log behaviors: imprecisions
between the model and the log (i.e., situations where the model allows more
behavior than the one reÔ¨Çected in the log) are detected and analyzed. for in-
stance, there are 5 clear cases of imprecision ( b, c, d, e, f ) in the initial state of
thefmodel in figure 1, where a, b, c, d, e, f are possible activities according to
the model but only aoccurs in the initial state according to the log.
first, log behavior must be determined in terms of model perspective, i.e.,
we consider the optimal alignments of each trace for this purpose. in particular,
the projection of the second element of each optimal alignment, i.e., sel2(Œ≥)‚Üìam.
these sequences are used to build the alignment automaton , i.e., a preÔ¨Åx au-
tomaton that includes information of all log traces. depending on whether all
the possible optimal alignments are used to build the automaton (i.e., Œ≥o
l;m) or
just one (i.e., Œªm), we will refer to the instantiation of the automaton as aor
a1respectively. clearly, aprovides more information than a1, and hence the6 adriansyah, munoz-gama, carmona, van dongen and van der aalst
precision value will be closer to the reality. but for large logs it may be diÔ¨Écult
to compute all optimal alignments. apart from providing individual precision
metrics for each one of these two automata, the experiments demonstrate that
using a1in the precision metric is a good approximation to the value provided
by using a.
take for example the model and the log l= [œÉ1, œÉ1, œÉ2, œÉ2] in figure 2, where
œÉ1=abcde andœÉ2=acbde . the set of optimal alignments for the two possible
traces consists of:
Œ≥5=abcde?
?b?decŒ≥6=abcde
?bc??Œ≥7=abcde?
?b?dea
Œ≥8=acbde?
??bdeaŒ≥9=acbde?
??bdec
in the Ô¨Årst part of this section we consider the case where only one optimal
alignment per trace is used, i.e., we use function Œªm(œÉl) rather than Œ≥o
l;m
to construct the automaton a1(the case where all the optimal alignments are
considered is detailed at the end of the section). considering the distance func-
tion and an external criteria, the optimal alignments selected for the traces in
the log could be, for instance, Œªm(œÉ1) = Œ≥5and Œªm(œÉ2) = Œ≥8. the projec-
tion of the second element of each optimal alignment (e.g., Œªm(œÉ1) =bdec and
Œªm(œÉ2) =bdea) is used to build the automaton a1, where the states of that
automaton are determined by complete set of all the preÔ¨Åxes of the alignment
projections (e.g., {œµ, b, bd, bde, bdea, bdec }on this example).
formally, the alignment automaton is deÔ¨Åned such that:
{the set of states corresponds to all preÔ¨Åxes.
{the set of labels corresponds to the activities.
{the arcs deÔ¨Åne the concatenation between preÔ¨Åxes and activities, e.g., states
bdandbdeare connected by arc labeled e.
{the state corresponding with the empty sequence œµis the initial state.
{the function œâdetermines the weight of each state according to its impor-
tance for the precision computation. graphically it is shown as a number
inside the state.
e
b c
enddacase id  trace
1   abcde 
2   abcde
3   acbde
4   acbdeevent log process model
4 42
4 4 2b dc
a
eed
a
cac
d
ealignment automaton
fig. 2. example of a model with an untting log and its alignment automaton (ap-
pended with available actions, colored grey), considering one optimal alignment per
trace ( a1).alignment based precision checking 7
function œâis used to determine the importance of the states based on fre-
quencies. in this example, where only one alignment per trace is considered, value
ofœâfor a state is the number of occurrences of the state in the multiset of all
visited states when replaying the log, e.g. using the example in figure 2, œâ(b) = 4
because bis a preÔ¨Åx of both Œªm(œÉ1) and Œªm(œÉ2) and l(œÉ1)+l(œÉ2) = 2+2 = 4.
œâ(bdea) = 2 because bdea is only a preÔ¨Åx of Œªm(œÉ2) and l(œÉ2) = 2.
note that the alignment automaton is similar to the prex automaton pre-
sented in [6]. however, the alignment automaton is built from proper Ô¨Åring
sequences, i.e., the projections of the alignments. therefore, any sequence of
activities corresponding with a preÔ¨Åx of the automaton can be replayed unam-
biguously on the model. this also ensures that occurrences of activities that
are modeled but not logged (i.e. unlogged tasks) and duplicate tasks (i.e. which
task an event is mapped to) are identiÔ¨Åed correctly. this is not the case on the
construction of the preÔ¨Åx automaton in [6].
once the log behavior has been determined in terms of the model‚Äôs perspec-
tive, the confrontation with the actual model behavior is required in order to
determine the precision of the system. for each state of the automaton, we com-
pute its set of available actions , i.e. possible direct successor activities according
to the model ( av(œÉ)), and then compare it with the set of executed actions , i.e.
activities really executed in the log ( ex(œÉ)). take for example the alignment au-
tomaton and process model in figure 2. ex(bde) ={a, c}as after the state bde
in the alignment automaton, only aandcoccur in the log. av(bde) ={a, c, d, e }
because after Ô¨Åring transitions bde, the model allows to Ô¨Åre a, c, d, ore. note
that, by construction ex(œÉ)‚äÜav(œÉ), i.e., the set of executed actions of a given
state is always a subset of all available actions according to the model.
the actions available in a state but never observed in the log are used to
collect the imprecision of the system, i.e., an activity that escapes from the
log behavior. these imprecisions are represented in gray in the automaton of
figure 2. for example, the imprecisions of the state bdeare{a, c, d, e } \ {a, c}=
{d, e}. the computation and analysis of these imprecisions are the cornerstone
of the precision checking presented in this paper. all identiÔ¨Åed imprecisions can
be analyzed and further used to correct the model and make it more precise.
furthermore, in order to globally estimate precision, these imprecisions in turn
are pondered by their weight within the process.
the align-based precision ( a1
p)of a system, where only one alignment per
trace is considered (hence, using automaton a1), is determined by the formula:
a1
p(a1) =‚àë
‚ààsœâ(œÉ)¬∑ |ex(œÉ)|
‚àë
‚ààsœâ(œÉ)¬∑ |av(œÉ)|
where sis the set of states of the alignment automaton a1, i.e. sis the set of
all preÔ¨Åxes of all constructed optimal alignments.
the metric compares the number of available actions and executed actions
for each state in an alignment automaton, weighted with their importance. for
example, given the automaton, appended with available actions in figure 2,8 adriansyah, munoz-gama, carmona, van dongen and van der aalst
precision is computed as:
1¬∑4 + 1 ¬∑4 + 1 ¬∑4 + 2 ¬∑4 + 0 ¬∑2 + 0 ¬∑2
1¬∑4 + 4 ¬∑4 + 4 ¬∑4 + 4 ¬∑4 + 0 ¬∑2 + 0 ¬∑2= 0.38
where each s¬∑wsummand refers to a state on the automaton, i.e., sis the number
of available/executed actions of the state and wis the number of occurrence of
the preÔ¨Åx represented by the state in the log.
in order to focus on the important parts of the process and to mitigate the
eÔ¨Äects produced by rarely occuring traces or incomplete traces, the precision
deÔ¨Åned above could be restricted to consider only such states with a weight
greater than a given pruning threshold (called œÑ). in the remainder, we assume
no pruning (i.e., œÑ= 0), unless it is stated otherwise. the eÔ¨Äects of the pruning
can be seen in [7]. additionally, it is also possible to consider the precision with
a severity factor associated to the activity that escapes from the log behavior.
the case considered so far is the one where only one optimal alignment
per trace is used to build the automaton ( a1). the same idea can be used to
propose a metric for the general case (denoted ap) where all the best alignments
of a trace are used to build the alignment automaton ( a). for instance, following
the running example, there are three optimal alignments for the trace œÉ1(Œ≥5,Œ≥6
and Œ≥7), and two for the trace œÉ2(Œ≥8and Œ≥9). the process of building the
alignment automaton a(see figure 3) and computing the metric apis the same
as computing a1
p, except the deÔ¨Ånition of the function œâ.
unlike the case with one alignment, in this case the importance of each state
does not depend exclusively on the frequency, but must also be equally balanced
among all its alignments. consider for instance the state corresponding with the
preÔ¨Åx b. this preÔ¨Åx appears in all the optimal alignments of all the traces in the
log (œÉ1andœÉ2). so, the weight of this state is 4 (1 for each trace and both traces
occur twice in the log), as shown in figure 3. however, this is not the case for
the state bc. this state only appears in the set of optimal alignments of only one
trace ( œÉ1) that occurs twice in the log. the Ô¨Årst naive attempt would be then
assign to this state a weight of 2 (1 for each occurrence). however, note that,
there are cases where the number of optimal alignments of one trace may not
coincide with another trace, e.g. œÉ1has 3 alignments and œÉ2has 2. in order to
eliminate the bias produced by traces with many optimal alignments, this value
needs to be normalized, i.e., we consider also the number of optimal alignments
of the trace and also in how many of them the preÔ¨Åx appears. for example,
4 4b dc
a
eed
a
cac
d
e0.6
3.3 3.31.6
1. 6
fig. 3. alignment automaton aof model and log in figure 2, considering all optimal
alignments per trace (appended with available actions, colored grey).alignment based precision checking 9
the weight of state bcin figure 3 is 1 /3 (it appears only in one of the 3 optimal
alignments of the trace œÉ1) times 2 ( œÉ1occurs twice in the log), i.e., 1 /3¬∑2‚âà0.6.
letlbe a log over al, letm‚äÜam‚àóbe a model, and let abe the alignment
automaton constructed from all best alignments of all traces in lwith m, the
function œâfor all states sofais deÔ¨Åned as:
œâ(s) =‚àë
l‚ààl|{Œ≥‚ààŒ≥o
l;m|sel2(Œ≥)‚Üìam=s¬∑œÉ‚Ä≤‚àßœÉ‚Ä≤‚ààam‚àó}|
|Œ≥o
l;m|
note that there are theoretical diÔ¨Äerences concerning the imprecisions of
a1anda. for instance, in the running example, bcis an imprecision in a1
but not in a. this diÔ¨Äerence is reÔ¨Çected in the values of apanda1
p(0.47 and
0.38 respectively). since all the optimal alignments are taken into account, a
more complete characterization of log behavior is considered in a. however, the
experiments show that, the use of a1
pis a good approximation of ap, in such cases
where complexity is an issue (see sec. 5).
the metrics presented in this section coincide with the intuition for precision
presented in the introduction of this paper. this is illustrated by the the results
of the a1
pandapmetrics for the example log and model in figure 1. as expected,
the precision for models pis high (1.00 for both apanda1
p) while the precision
for model fis low (0.20 for both apanda1
p).
5 experiments
we have implemented the proposed precision calculation as a prom 6 plugin,
publicly available from www.processmining.org . we used it to perform a range
of experiments to test the robustness of our proposed approach using both syn-
thetic and real-life models and logs.
5.1 articial cases
the Ô¨Årst set of experiments was performed to evaluate the values provided by
the proposed metrics. we measured precision between various logs and models
whose expected values are known and compare them against etcp[7] precision as
benchmark for existing precision metrics. we created new models whose expected
precision values are between the two extremes by combining the models and log
in figure 1 ( pandf) in diÔ¨Äerent orders. two models are combined by merging
the end place of one with the initially marked place of another. merged models
are named according to the their original models, e.g. pfmodel is the result of
merging the end place of pwith the initially marked place of f. the activity
names in the merged models and logs are renamed such that splitting the logs
and models into two parts yields back the original logs and models. precision
values were measured 10 times for event logs consisting of 5,000 traces, generated
by simulating the precise model (i.e. pp). the results are shown in fig. 4(i).
as shown in figure 4(i), both apanda1
pgive the same values as etcp. in
cases where logs are perfectly Ô¨Åt to models and activity execution can be mapped10 adriansyah, munoz-gama, carmona, van dongen and van der aalst
precision
p rocess model
 p rocess  modelf   p  ff  fp  pf pp p    fp   pf  ppprecision1.00
0.80
0.60
0.40
0.20
0.001.00
0.80
0.60
0.40
0.20
0.00(i) (ii)
fig. 4. precision values for (i) perfectly tting logs, and (ii) untting logs where 4
events are removed from each trace in the logs.
/g1004/g856/g1004 /g1004/g1004/g856/g1005 /g1004/g1004/g856/g1006 /g1004/g1004/g856/g1007 /g1004/g1004/g856/g1008 /g1004
/g1004 /g1005 /g1006 /g1007 /g1008/g1004 /g856 /g1004 /g1004/g1004 /g856 /g1006 /g1004/g1004 /g856 /g1008 /g1004/g1004 /g856 /g1010 /g1004/g1004 /g856 /g1012 /g1004/g1005 /g856 /g1004 /g1004
/g1004 /g1005 /g1006 /g1007 /g1008/g1004/g856/g1013/g1004/g1004/g856/g1013/g1007/g1004/g856/g1013/g1009/g1004/g856/g1013/g1012/g1005/g856/g1004/g1004
/g1004 /g1005 /g1006 /g1007 /g1008/g1004/g856 /g1012/g1004/g1004/g856 /g1012/g1009/g1004/g856 /g1013/g1004/g1004/g856 /g1013/g1009/g1005/g856 /g1004/g1004
/g1004 /g1005 /g1006 /g1007 /g1008precision
precision
precision
#re m ov ed  e ve nts # r emov ed e ve ntsmodel p model pp model fp
precision
#remov ed e ve ntsmodel pf
#remov ed  e ve nts
fig. 5. robustness of precision to untting logs
unambiguously to tasks in the models, values of both ap,a1
p, and etcpare the
same as there is only one optimal alignment per trace.
the second set of experiments were conducted to evaluate the robustness
of the proposed metric against non-Ô¨Åtting logs. we took the models and log
from the previous experiment and create unÔ¨Åtting logs by removing nnumber
of events randomly per trace from the Ô¨Åtting log. to ensure that the created
logs are unÔ¨Åtting, only events that belong to the precise part (i.e. mapped to p
part) are removed. figure 4(ii) and figure 5 show the results.
as it is shown in figure 4(ii) and figure 5, our metrics are more robust
to noise than etcp. even in cases where almost half of the events in all traces
are removed, both metrics provide the same value as the ones given for perfectly
Ô¨Åtting traces. in contrast, the etcpvalue may change signiÔ¨Åcantly because for all
non-Ô¨Åtting traces, it ignores the rest of the traces after the Ô¨Årst non-Ô¨Åtting event
occur. in the experiment with model pf,etcpvalue changes signiÔ¨Åcantly even
when only one event is removed per trace as the remaining events that belong to
the imprecise model are ignored. in the experiment with model fp,etcpvalues
gets closer to the precision value of the fmodel as the number of removed
events increases, because non Ô¨Åtting events always occur in the precise part of
the model (i.e. p). figure 5 also shows that a1
pvalues are good approximation
toapvalues because the aggregation of all selected optimal alignments for each
trace in the logs cover all traces allowed by the ppart of all four models.
5.2 real-life logs and models
to evaluate the applicability of the approach to handle real life logs, we use 5
pairs of process models and logs from the coselog project [3, 11]. the modelsalignment based precision checking 11
and logs were obtained from participating municipalities in the netherlands.
we consider processes related to Ô¨Åve types of building permission applications.
all processes have unlogged tasks, and two of the models allow loops. we have
compared the proposed precision measurements with related metrics such as the
etcpmetric [7] and the advanced behavioral appropriateness a‚Ä≤
b[9]. the results
are shown in table 1.
an important conclusion that can be drawn from table 1 is that the com-
putation time of aptakes much longer than a1
p. from all evaluated precision
metrics, a1
pmanaged to provide precision values for all logs and models under
12 seconds, while apcalculation takes much longer. similarity between states
optimation technique to Ô¨Ånd one optimal alignment is not applicable to Ô¨Ånd
all alignments. however, this is not a problem because a1
pprovides a close es-
timation to ap. table 1 also shows that in reality, the observed traces are not
perfectly Ô¨Åtting the corresponding models (see #not synchronous moves/case)
and hence justiÔ¨Åes the need of having precision measurements that are robust
to non-Ô¨Åtting logs. other than a1
p,etcpmetric is the only precision metric that
could be computed in a timely manner in our set of experiments. however, as
shown in subsection 5.1, it is very sensitive to non-Ô¨Åtting traces.
6 conclusion
in literature, conformance checking has been mainly focusing on Ô¨Åtness, i.e.,
quantifying the proportion of the event log that is possible according to a given
model. however, it is also important to analyze precision. a process model that
allows for behavior unrelated to the example behavior seen in the log is too
general. existing approaches for quantifying precision are time consuming and
have problems dealing with non-Ô¨Åtting traces. this results in unreliable precision
measurements as shown in this paper. therefore, we developed an approach that
Ô¨Årst aligns event log and model. the pre-alignment of log and model makes it
possible to measure precision more accurately. in this work we presented two
metrics ( a1
pandap) to measure the precision, considering just one or all possible
optimal alignments respectively. the results show experimentally the usefulness
and the robustness of the approach proposed. since the metrics only measure
the precision dimension, they should be used together with other metrics that
table 1. precision values from experiments on real-life logs and models
log #cases #eventsprocess model #not sync.a1
ptimeaptimeetcpa‚Ä≤
b#place #trans. moves/case (sec) (sec)
mlog1 3181 20491 15 12 5.33 0.92 11.3 1.00 321.1 0.97 0.82
mlog2 1861 15708 16 19 1.45 0.93 3.7 0.93 53.5 0.97 0.92
mlog4 4852 29737 16 27 2.09 0.96 4.1 0.99 15.7 0.86 0.75
bouw-1 139 3364 33 34 9.46 0.82 0:7n/a n/a 0.85 0.95
bouw-4 109 2331 31 31 6.18 0.44 2.4 n/a n/a 0.34 n/a
* n/a : not found in 6 hours.12 adriansyah, munoz-gama, carmona, van dongen and van der aalst
measure other dimension of conformance to provide a comprehensive evaluation
on how ‚Äúgood‚Äù is a model, given its executions [9].
acknowledgments
this work is supported by nwo (proj. 612.063.919), the projects tin2011-22484
and tin2007-66523, and by the spanish ministerio de educaci¬¥ on (ap2009-
4959).
references
1.a. adriansyah, n. sidorova, and b.f. van dongen. cost-based fitness in con-
formance checking. international conference on application of concurrency to
system design , pages 57{66, 2011.
2.a. adriansyah, b.f. van dongen, and w.m.p. van der aalst. conformance check-
ing using cost-based fitness analysis. ieee international enterprise distributed
object computing conference , pages 55{64, 2011.
3.j.c.a.m. buijs, b.f. van dongen, and w.m.p. van der aalst. towards cross-
organizational process mining in collections of process models and their execu-
tions. in business process management workshops , volume 100 of lecture notes
in business information processing . springer berlin heidelberg, 2012.
4.t. calders, c.w. g unther, m. pechenizkiy, and a. rozinat. using minimum
description length for process mining. in proceedings of the 2009 acm symposium
on applied computing , sac '09, pages 1451{1455, new york, usa, 2009. acm.
5.k. gerke, j. cardoso, and a. claus. measuring the compliance of processes with
reference models. in proceedings of the confederated international conferences,
coopis, doa, is, and odbase 2009 on on the move to meaningful internet
systems: part i , otm '09, pages 76{93, berlin, heidelberg, 2009. springer-verlag.
6.j. munoz-gama and j. carmona. a fresh look at precision in process confor-
mances. in proceedings of the 8th international conference on business process
management , bpm'10, pages 211{226, berlin, heidelberg, 2010. springer-verlag.
7.j. munoz-gama and j. carmona. enhancing precision in process conformance:
stability, condence and severity. in ieee symposium on computational intelli-
gence and data mining, cidm 2011 , pages 184{191. ieee, april 2011.
8.a. rozinat, i.s.m. de jong, c.w. g unther, and w.m.p. van der aalst. process
mining applied to the test process of wafer steppers in asml. ieee trans-
actions on systems, man and cybernetics - part c: applications and reviews ,
39:474{479, 2009.
9.a. rozinat and w.m.p. van der aalst. conformance checking of processes based
on monitoring real behavior. information systems , 33(1):64{95, march 2008.
10.a.h.m. ter hofstede, w.m.p. van der aalst, m. adams, and n. russell. modern
business process automation . springer-verlag, 2010.
11.w.m.p. van der aalst. business process conguration in the cloud: how to
support and analyze multi-tenant processes? in g. zavattaro, u. schreier, and
c. pautasso, editors, proceedings of the 9th ieee european conference on web
services (ecows 2011) , pages 3{10. ieee computer society press, 2011.
12.w.m.p. van der aalst. process mining: discovery, conformance and enhancement
of business processes . springer-verlag, berlin, 2011.
13.w.m.p. van der aalst, a. adriansyah, and b. van dongen. replaying history
on process models for conformance checking and performance analysis. wiley
interdisciplinary reviews: data mining and knowledge discovery , 2(2):182{192,
2012.
14.m. weidlich, a. polyvyanyy, n. desai, and j. mendling. process compliance mea-
surement based on behavioural proles. in proceedings of the 22nd international
conference on advanced information systems engineering , caise'10, pages 499{
514, berlin, heidelberg, 2010. springer-verlag.