discovering hierarchical process models
using prom
r.p. jagadeesh chandra bose1;2, eric h.m.w. verbeek1and wil m.p. van der aalst1
1department of mathematics and computer science, university of technology,
eindhoven, the netherlands
2philips healthcare, veenpluis 5{6, best, the netherlands
fj.c.b.rantham.prabhakara,h.m.w.verbeek,w.m.p.v.d.aalst g@tue.nl
abstract. process models can be seen as \maps" describing the op-
erational processes of organizations. traditional process discovery al-
gorithms have problems dealing with ne-grained event logs and less-
structured processes. the discovered models (i.e., \maps") are spaghetti-
like and are dicult to comprehend or even misleading. one of the rea-
sons for this can be attributed to the fact that the discovered models
are at (without any hierarchy). in this paper, we demonstrate the dis-
covery of hierarchical process models using a set of interrelated plugins
implemented in prom.3the hierarchy is enabled through the automated
discovery of abstractions (of activities) with domain signicance.
keywords: process discovery, process maps, hierarchical models, ab-
stractions, common execution patterns
1 introduction
we have applied process mining techniques in over 100 organizations. these
practical experiences revealed two problems: (a) processes tend to be less struc-
tured than what stakeholders expect, and (b) events logs contain ne-grained
events whereas stakeholders would like to view processes at a more coarse-grained
level. in [1], we showed that common execution patterns (e.g., tandem arrays,
maximal repeats etc.) manifested in an event log can be used to create powerful
abstractions . these abstractions are used in our two-phase approach to process
discovery [2]. the rst phase comprises of pre-processing the event log based on
abstractions (bringing the log to the desired level of granularity) and the sec-
ond phase deals with discovering the process maps while providing a seamless
zoom-in/out facility. figure 1 highlights the dierence between the traditional
approach to process discovery and our two-phase approach. note that the process
model (map) discovered using the two-phase approach is much simpler.
the two-phase approach to process discovery [2] enables the discovery of hi-
erarchical process models. in this paper, we demonstrate the discovery of hierar-
chical process models using a chain of plugins implemented in prom. the chain
of plugins and their order of application is illustrated in figure 2.
3prom is an extensible framework that provides a comprehensive set of
tools/plugins for the discovery and analysis of process models from event logs. see
http://www.processmining.org for more information and to download prom.34 pre-proceedings of caise'11 forum
filteringfilter plugins
event log
s a m b c u d n j e
s a m q f h l l h g i k e
s a m f g h l h i k q e
s a m b c d n u j e
s a m f h l g i h l h k q e
s a m q f g i h l h k e
s a m q f g h l h i k e
s a m p c u d n r e
s a m b d n c u j e
s a m p d n c u r etraditional
approach
two-phase
approach
abstractions dened over
common execution patternstransformed
log
x b z j e
x q y y e
x y y q e
x b z z j e
x y y y q e
x q y y y e
x q y y y e
x p z r e
x b z j e
x p z r e
pattern
abstractionsfuzzy miner
fig. 1: traditional approach versus our two-phase approach to process discovery. prom
plugins are used to lter the event log. prom's pattern abstractions plugin and the
fuzzy miner plugin are used to realize simple and intuitive models.
simple
filter(s)pattern
abstractionsfuzzy miner
fig. 2: the chaining of plugins that enables the discovery of hierarchical process models.
the event log may rst be cleansed using some simple lters (e.g., adding
articial start/end events, ltering events of a particular transaction type such as
considering only `complete' events etc.). the pattern abstractions plugin is then
applied on this ltered log one or several times. the pattern abstractions plugin
has been implemented as a log visualizer in prom and caters to the discovery
of common execution patterns, the denition of abstractions over them, and the
pre-processing of the event log with these abstractions . the transformed log (pre-
processed log with abstractions) obtained in iteration iis used as the input for
the pattern abstractions plugin in iteration i+1. it is this repetitive applicationdiscovering hierarchical process models using prom 35
of the pattern abstractions plugin that enables the denition of multiple levels
of hierarchy (new abstractions can be dened over existing abstractions). during
the pre-processing phase, for each dened abstraction, the pattern abstractions
plugin generates a sub-log that captures the manifestation of execution patterns
dened by that abstraction as its process instances. the fuzzy miner plugin
[3] is then applied on the transformed log obtained after the last iteration. the
fuzzy miner plugin in prom has been enhanced to utilize the availability of
sub-logs for the dened abstractions. process models are discovered for each of
the sub-logs and are displayed upon zooming in on its corresponding abstract
activity.
running example. we use the workow of a simple digital photo copier as
our running example. the copier supports photocopying, scanning and printing
of documents in both color and gray modes. the scanned documents can be sent
to the user via email or ftp. upon receipt of a job, the copier rst generates
an image of the document and subsequently processes the image to enhance
its quality. depending on whether the job request is for a copy/scan or print,
separate procedures are followed to generate an image. for print requests, the
document is rst interpreted and then a rasterization procedure is followed to
form an image. the image is then written on the drum, developed, and fused on
to the paper.
we have modeled this workow of the copier in cpn tools [4] and generated
event logs by simulation. we use one such event log in this paper. the event
log consists of 100 process instances, 76 event classes and 40 ;995 events. the
event log contains ne-grained events pertaining to dierent procedures (e.g.,
image processing, image generation etc.) mentioned above. an analyst may not
be interested in such low level details. we demonstrate the discovery of the
workow at various levels of abstractions for this event log.
2 pattern abstractions plugin
the basic building blocks of the pattern abstractions plugin are shown in fig-
ure 3. figures 4 and 5 illustrate these building blocks.
discover
common
execution
patternscompute
pattern
metricsfilter
patternsform &
select
abstractionstransform
log
fig. 3: building blocks of the pattern abstractions plugin
{discover common execution patterns: the pattern abstractions plugin sup-
ports the discovery of tandem arrays (loop patterns) and maximal repeats
(common subsequence of activities within a process instance or across pro-
cess instances) [1]. these can be uncovered in linear time and space with
respect to the length of the traces.36 pre-proceedings of caise'11 forum
discover common
execution patternscompute
pattern metricsfilter patterns
uncovered patternspattern
metric values
fig. 4: the discovery of common execution patterns, computation of pattern metrics,
ltering and inspection of patterns in the pattern abstractions plugin.
{compute pattern metrics: various metrics (e.g, overlapping and non-over-
lapping frequency counts, instance count etc.) to assess the signicance of
the uncovered patterns are supported.
{filter patterns: it could be the case that too many patterns are uncovered
from the event log. to manage this, features to lter patterns that are less
signicant are supported.
{form and select abstractions: abstractions are dened over the ltered pat-
terns. patterns that are closely related are grouped together to form ab-
stractions. the approach for forming abstractions is presented in [1]. fur-
thermore, various features to edit/select abstractions such as merging two or
more abstractions and deleting activities related to a particular abstraction
are supported. figure 5 depicts a few abstractions dened over loop patterns
for the copier event log e.g., half-toning , a procedure for enhancing the image
quality, is uncovered as an abstraction.
{transform log: the event log is pre-processed by replacing activity subse-
quences corresponding to abstractions. a replaced activity subsequence is
captured as a process instance in the sub-log for the corresponding abstract
activity.
at any iteration, if nabstractions are selected, the pattern abstractions plugin
generates a transformed log, and nsub-logs (one for each of the nchosen ab-
stractions). we recommend to process for loop patterns in the initial iterations
and maximal repeats in the subsequent iterations. for the example event log, we
have performed three iterations. the transformed log after the third iterationdiscovering hierarchical process models using prom 37
has 19 event classes and 1601 events. in the process, we have dened various
abstractions such as half-toning, image processing, capture image , etc.
form abstractions select abstractions
transform log
fig. 5: the generation and selection of abstractions in the pattern abstractions plugin.
the pattern abstractions plugin supports additional features such as visu-
alizing patterns and exporting the traces that contain the patterns.
3 (enhanced) fuzzy miner plugin
the fuzzy miner [3, 5] is a process miner that mines an event log for a family
of process models using a \map" metaphor. as many maps exist that show the
city of amsterdam at dierent levels of abstraction, also dierent maps exist
for a process model mined from an event log. in this map metaphor, an object
of interest in amsterdam (like the rijksmuseum or the anne frank house)
corresponds to a node in the process model, where streets (like the kalverstraat
or the pc hooftstraat) correspond to edges in the model. for sake of convenience,
we call a single map a fuzzy instance whereas we call a family of maps (like all
amsterdam maps) a fuzzy model .
like high-level maps only show major objects of interest and major streets,
high-level fuzzy instances also show only major elements (nodes and edges). for
this purpose, the fuzzy miner computes from the log a signicance weight for
every element and an additional correlation weight for every edge. the higher
these weights are, the more major the element is considered to be. furthermore,
the fuzzy miner uses a number of thresholds: only elements that meet these
thresholds are shown. as such, these thresholds correspond to the required level38 pre-proceedings of caise'11 forum
of abstraction: the higher these thresholds are, the higher the level of abstraction
is. for sake of completeness we mention here that a fuzzy instance may contain
clusters of minor nodes: if some objects of interest on the amsterdam map are
too minor to be shown by themselves on some map, they may be shown as a
single (and major) object provided that they are close enough. for this reason,
the fuzzy miner rst attempts to cluster minor nodes into major cluster nodes,
and only if that does not work it will remove the minor node from the map.
fig. 6: fuzzy model and instance
figure 6 shows an example fuzzy model (left-hand side) and fuzzy instance
(right-hand side). note that both views show a fuzzy instance, but the fuzzy
model view allows the user to change the thresholds (by changing the sliders)
whereas the fuzzy instance view does not. the signicance of a node is displayed
as part of its label (for example, the node \transfer image" has a signicance of
0:253), the signicance of an edge is visualized using its wideness (the wider the
edge, the more signicant it is), and the correlation of an edge is visualized using
its color contrast (the darker the edge is, the more correlated its input node and
its output node are). the octagonal shaped nodes in the right-hand side view
correspond to the cluster nodes (one of the cluster nodes contain 4 activities
and the other contains 11 activities). all activities on the left hand side except
\job complete" are contained in a cluster node on the right. apparently, the
signicance weights for these nodes (0 :262, 0 :253, 0 :250, 0 :296 and 0 :403) were
too low to be shown, which indicates that the corresponding threshold was set
to at least 0 :403. furthermore, the node \interpret" (on the right) is highly self-
correlated, whereas the nodes \transfer image" and \send smtp" (on the left)
are moderately correlated.
the fuzzy miner has been enhanced to utilize the availability of sub-logs ob-
tained from the pattern abstractions plugin for the chosen abstractions. fuzzy
models are discovered for each of the sub-logs and are displayed upon zooming in
on its corresponding abstract activity. abstract activities are dierentiated fromdiscovering hierarchical process models using prom 39
other activities by means of a distinct color (a darker shade of blue, see also
figure 6) .
figure 7 depicts the top-level process model of the copier example. this
model is generated from the transformed log obtained after the third iteration of
pattern abstractions plugin. the upper branch of the process model corresponds
to the creation of the document image for print requests while the lower branch
corresponds to image creation for copy/scan requests. the two branches meet
after the image is formed and the image is subjected to some image processing
functionality. the document is then printed or sent to the user via email or
ftp. the lower level details of image creation, image processing, print image
have been abstracted in this model. the pattern abstractions plugin enables the
discovery of such abstractions with strong domain (functional) signicance . upon
zooming in on the image processing abstraction, the process model depicted in
figure 8 is shown. this sub-process in turn contains another abstract activity
viz., half toning (the level of hierarchy is two). zooming in on this abstract
activity displays the sub-process dening it as depicted in figure 8. figure 9
depicts two other abstractions.
interpretation of
pages in a document
to printrendering and
screening of the
document
capturing the image
of the document to
copy/scanimage processingprinting the image
fig. 7: the top level process model of the copier event log. blue (dark colored) nodes are
abstract activities that can be zoomed in. upon zooming in, the sub-process dening
the abstraction is shown.
in this fashion, using the chain of plugins presented in this paper, one can
discover hierarchical process models.
4 conclusions
we demonstrated the discovery of hierarchical process models using a chain of
plugins implemented in prom. the repetitive application of pattern abstractions
plugin enables the discovery of multiple levels of hierarchy. we can use this
approach to create maps that (i) depict desired traits, (ii) eliminate irrelevant
details, (iii) reduce complexity, and (iv) improve comprehensibility.
acknowledgments r.p.j.c. bose and w.m.p. van der aalst are grateful to
philips healthcare for funding the research in process mining.40 pre-proceedings of caise'11 forum
image processing
half toning
fig. 8: the sub-process captured for the abstraction `image processing' (in the top-
level model). this sub-process in turn contains another abstraction viz., `half toning'.
upon zooming in on `half toning', the sub-process dening that is shown.
interpret
 fusing
fig. 9: the sub-processes for the abstractions `interpret' and `fusing'. `interpret' is an
abstract activity at the top-level of the process model while `fusing' is an abstract
activity underneath the `print image' abstraction.
references
1. bose, r.p.j.c., van der aalst, w.m.p.: abstractions in process mining: a tax-
onomy of patterns. in dayal, u., eder, j., koehler, j., reijers, h., eds.: business
process management. volume 5701 of lncs., springer-verlag (2009) 159{175
2. li, j., bose, r.p.j.c., van der aalst, w.m.p.: mining context-dependent and
interactive business process maps using execution patterns. in zur muehlen, m.,
su, j., eds.: bpm 2010 workshops. volume 66 of lnbip., springer-verlag (2011)
109{121
3. g unther, c., van der aalst, w.m.p.: fuzzy mining: adaptive process simplica-
tion based on multi-perspective metrics. in: international conference on business
process management (bpm 2007). volume 4714 of lncs., springer-verlag (2007)
328{343
4. vinter ratzer, a., wells, l., lassen, h.m., laursen, m., qvortrup, j.f., stissing,
m.s., westergaard, m., christensen, s., jensen, k.: cpn tools for editing, sim-
ulating, and analysing coloured petri nets. in: 24th international conference on
applications and theory of petri nets (icatpn). volume 2679 of lncs., springer
(2003) 450{462
5. xia, j.: automatic determination of graph simplication parameter values for
fuzzy miner. master's thesis, eindhoven university of technology (2010)