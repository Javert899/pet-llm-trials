agile development with software process mining
vladimir rubin1
vrubin@hse.ruirina lomazova1
ilomazova@hse.ruwil m.p . van der aalst1,2
w.m.p.v.d.aalst@tue.nl
1international laboratory of process-aware information systems,
national research university higher school of economics (hse),
33 kirpichnaya str., moscow, russia.
2architecture of information systems, eindhoven university of technology,
p .o. box 513, nl-5600 mb, eindhoven, the netherlands.
abstract
modern companies continue investing more and more in the
creation, maintenance and change of software systems, but
the proper specication and design of such systems continues
to be a challenge. the majority of current approaches either
ignore real user and system runtime behavior or consider it
only informally. this leads to a rather prescriptive top-down
approach to software development.
in this paper, we propose a bottom-up approach , which
takes event logs (e.g., trace data) of a software system for the
analysis of the user and system runtime behavior and for im-
proving the software. we use well-established methods from
the area of process mining for this analysis. moreover, we
suggest embedding process mining into the agile development
lifecycle .
the goal of this position paper is to motivate the need for
foundational research in the area of software process mining
(applying process mining to software analysis) by showing
the relevance and listing open challenges. our proposal is
based on our experiences with analyzing a big productive
touristic system. this system was developed using agile
methods and process mining could be eectively integrated
into the development lifecycle.
categories and subject descriptors
h.4 [information systems applications ]: general; d.2.8
[software engineering ]: metrics| process metrics
general terms
experimentation, design
keywords
process mining, software process, agile methods
1. introduction
permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proÔ¨Åt or commercial advantage and that copies
bear this notice and the full citation on the Ô¨Årst page. to copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciÔ¨Åc
permission and/or a fee.
icssp ‚Äô14, may 26‚Äì28, 2014, nanjing, china
copyright 2014 acm 978-1-4503-2754-1/14/05 ...$15.00.despite of the growing importance and increasing invest-
ments to the area of information systems, the design and
development of high-quality software continues to be a chal-
lenge [5]. plenty of software projects experience signicant
problems [20, 28, 18]: software changes are expensive, soft-
ware engineers need to deal with pure technological problems
on a daily basis, business requirements are often dened in-
accurately, etc. moreover, the complexity of modern software
systems containing millions of lines of code and thousands
dependencies among components is extremely high; such
systems can be hardly maintained by human beings.
still, the majority of software design and management
approaches continue to be top-down : people try to antic-
ipate the possible software changes and to prescribe the
whole system behavior in advance. however, emerging agile
methods [2] provide opportunities for enhancing the classi-
cal top-down approaches with the bottom-up ones. since
software system is delivered and used not at the end of the
project, but after every iteration or \sprint" (using scrum
terminology), the running system can be formally analyzed in
order to improve the design and development on subsequent
steps.
the area of process mining provides mature theoretical
and practical techniques and tools, which can be used for
eective analysis of software at runtime . we call this research
area \software process mining" . in this area, people focus on
(1) analysis of runtime traces for improving the architecture
and performance of software systems, (2) analysis of the
user behavior for improving the design and the usability of
software systems.
in this paper, we look at the software process mining from
thesoftware processes perspective. we show how process
mining can be embedded into the agile development lifecycle
and how the software design and development can benet
from it.
2. process mining research
process mining deals with discovering, monitoring and
improving real processes by extracting knowledge from event
logs available in modern information systems [21, 22]. nowa-
days, the event data is constantly growing [10, 14]. this
motivates further research in the area of process mining,
which basically focuses on bridging the gap between classi-
caldata mining techniques and process management . the
process mining manifesto released by the ieee task force
on process mining [11] in 2011 is supported by more thanpermission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proÔ¨Åt or commercial advantage and that copies bear this notice and the full citation
on the Ô¨Årst page. copyrights for components of this work owned by others than acm
must be honored. abstracting with credit is permitted. to copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciÔ¨Åc permission and/or a
fee. request permissions from permissions@acm.org.
icssp‚Äô14 , may 26‚Äì28, 2014, nanjing, china
copyright 2014 acm 978-1-4503-2754-1/14/05...$15.00
http://dx.doi.org/10.1145/2600821.2600842
7050 organizations, more than 70 experts contributed to it.
today there is a range of successful research and commercial
tools available in this area: prom [26], disco (fluxicon),
aris process performance manager (software ag), pro-
cessanalyzer (qpr), perceptive process mining (perceptive
software), celonis and others.
there are three major types of process mining: (1) discov-
ery, (2) conformance checking and (3) enhancement.
discovery takes an event log and produces a process model
from it. thus, the model is directly discovered from real
events recorded in the log. the model can be represented
using dierent formalisms : petri nets, epcs, bpmn, casual
nets and others. a variety of powerful techniques has been
developed in this area [23, 24, 7, 9, 25]; they enable creating
asuitable process model from event log. it is important that
this model is as simple as possible and is neither\undertting"
not \overtting" the log.
conformance checking compares process model with the
event log. this is used to quantify the dierences and to
diagnose the deviations. thus, conformance checking veries
the dierences between the model and the real life.
enhancement takes the log and the existing model and
improves or extends the model using additional data available
in the log (e.g., to reveal bottlenecks).
thus, process mining is valuable for the following rea-
sons [22]: (1) it provides insights about organizational pro-
cesses, (2) it allows to check the process discipline of the
organization (whether processes are executed according to
the rules and within boundaries), (3) it is valuable for opti-
mizing and improving the processes and their performance,
(4) it enables prediction for running processes.
moreover, after deriving a model containing dierent pro-
cess aspects (control ow, informational, organizational), var-
ious types of model analysis ( from verication to simulation )
can be done. since the model is derived from active event
data and reects the reality , people diagnose real problems
and propose ecient improvements.
from the point of view of a software engineer , process
mining is a \smart" way of analyzing the logs. tremendous
amounts of event data are produced by modern software
systems. from the point of view of a process miner , software
runtime analysis is a big prospective application domain;
in this case mining can be used not only in process-based
information systems (e.g. bpms, erp, crm) but in a
majority of productive software systems.
3. experience report
here we present our experiences with the design, develop-
ment and maintenance of a big software system for one of the
leading european touristic companies. this system belongs
to a class of computer reservation systems (crs) and is
used for booking hotels, ights, cars, excursions, activities,
trains, etc. this system integrates multiple global distri-
bution systems (gds) for searching, booking and selling
tickets. the system can be accessed by individual customers
through web interface, by touristic experts using rich client
platform, by travel agencies through special touristic inter-
faces as shown in figure 1.
the system has been developed during 5 years by a team of
more than 100 persons. the system is based on java enter-
prise platform. the overall source code contains more than 8
million lines of code including server and client code. during
the project, the team switched from waterfall approach to an
#$% &'( ! 
 )' 
%( *+ &%# figure 1: computer reservation system
agile (scrum-based) approach [19], which brought signicant
improvements in communication with the end-users and in
the quality of the delivered software. the details of such an
agile approach are generalized and discussed in section 4.
one of the crucial arguments for using the agile approach
was obtaining early feedback from the user and involving
the user in the development lifecycle. after each iteration,
the software product was delivered and the users (initially
beta-testers) executed the acceptance tests and utilized the
product in their everyday job. after the rst iterations, the
development team noticed the following issues:
the users worked with the system dierently, not ex-
actly how it was specied in the functional specica-
tion and how it was initially expected by the designers.
moreover, the development team did not know exactly
how the users worked.
the system had critical performance issues, their im-
portance was underestimated during the the technical
design phase. moreover, nobody had an appropriate
overview of the system and could identify the critical
paths.
after experiencing the issues listed above, it was decided
to extend the logging and tracing capabilities of the product
in order to track the user behavior and the system runtime
behavior, see fig. 1. for example a special logging inbound
adapter was created for tracking the behavior of the users
in travel agencies1. moreover, very detailed traces of run-
time service calls with input and output parameters were
introduced to the system.
the analysis of textual logs and traces was complicated
for the developers and architects: people were constantly
lost in details of particular services and exceptions. thus,
we decided to look for \clever" methods of log analysis and
came up with a pragmatic process mining approach , which is
sketched here.
3.1 mining user behavior
since most of the reservations are created by travel agen-
cies, we concentrated on these users and on the special pro-
prietary touristic protocol, which was used for client/server
communication (see fig. 1). this protocol is string-based
and precisely describes all user operations. every request
1the information about tracking was announced to the users
and the users supported the initiative.71string transferred to the server encodes exactly the actions
executed by the user. the work with the system always
starts and nishes with messages of corresponding types.
thus, we could parse the protocol strings and got exactly
the way of work of the user.
a short example of one log entry is: \case 1, show reser-
vation, 08:30, user 1" ; it contains an id of the corresponding
case (instance of a process), activity name, timestamp and
user id. we imported a log containing such entries in a
process mining tool disco (fluxicon)2and derived a visual
model of the user behavior, see the screenshot in fig. 2.
this model was eectively ltered and analyzed, so that we
focused on particular activities (e.g. book flight, search
hotel), successful cases or failures, frequent or suspicious
behavior, etc.
in order to give a sense of a process mining tool, we outline
its basic functionality in fig. 2. in the background, there is
a graph-based process model representing activities as nodes
and the order of activities with edges. on the right side, there
are dierent frequency-based ltering options (performance
and time-based ltering is also available). in the upper left
corner, we show a fragment of a token animation game: the
model is simulated. a statistical case-oriented view is shown
at the bottom left corner.
figure 2: process mining tool: user behavior
using process mining we could do the following: (1) visual-
ize behavior and discuss it with the user, (2) visually present
successes and failures to the management, (3) monitor the
real usage of the system, (4) discover the bad usage patterns
(later we used this information for improving the gui), (5)
gather scenarios and develop realistic acceptance tests, (6)
identify most frequent and critical parts of the system, (7)
align system failures with concrete exceptions and create
bug xing issues for the team.
3.2 mining runtime traces
as mentioned in section 3, the users experienced perfor-
mance problems. the architecture of the system was built
on services, which were orchestrated by the processes. thus,
for each runtime call of a process or a service, we created
a trace entry including input and output parameters. each
execution of a process was assigned a unique identier so
that the scope of the process and its service calls could be
tracked.
2disco was used because of its simplicity, usability and per-
formance when dealing with huge logs.a small example of one trace entry is: \process 1, request,
getcustomerinformation, 8:30" . it contains an id of a process
instance, type of call (request or response), service name
and timestamp. again, we used disco for mining these
processes. the software runtime processes were much more
complicated than the user processes, fig. 3 shows a fragment
of such model. with the help of ltering by business domain,
software component and frequency, we found out the desired
performance information.
in the model in fig. 3, the nodes represent the services, and
the edges { the sequence of calls. this is a performance view
on the process: service calls with the highest median duration
are highlighted and detailed performance information on the
selected calls is shown.
figure 3: system runtime behavior
in the context of runtime analysis, with the help of process
mining we could do the following: (1) visualize and lter
real executed processes and services (we discussed also par-
ticular behavior with technical designers and architects), (2)
discover performance bottlenecks (later we used this data
for improving the algorithms and using caching), (3) find
the most widely used services and the most critical processes,
(4) gather statistics about frequency and message payloads.
all in all, software process mining and model analysis
worked eectively, so that we decided to embed them into
the development lifecycle. after each sprint, we analyzed the
user logs and the runtime traces. our formal feedback was
given to the functional and technical designers, appropriate
\user stories" and sprint tasks were created and resolved on
subsequent iterations. this practical observation motivated
us to focus further on software process mining and on its
integration into the agile process.
4. software process mining in
agile projects
one of the main principles of the agile development is
\deliver working software frequently, from a couple of weeks
to a couple of months..." [2]. the other crucial principles
are continuous learning (reection on how to become more
eective) and continuous communication with the customer
(the end-user). we believe that software process mining ap-
proach (1) improves communication with the customer, since
we get formal feedback from the user, (2) initiates contin-
uous improvement, since formal results are easily accepted
by the designers and included to the product backlogs. we72emphasize that almost any real agile environment fullls
the preconditions for process mining: software is constantly
delivered and used, logs/traces are continuously written.
in fig. 4 we show a classical agile lifecycle, as it is given
in the scrum specication [19]. the planning starts with
the presentation of the product backlog, which contains
functional requirements. then, the sprint tasks are dened
and the sprint starts. after nishing the sprint, the product
is delivered and reviewed. the review is normally done by
the product owner and by the real users.
	

  
 
 

   
 

 
 
figure 4: agile lifecycle
in fig. 5 we show how software process mining can be
embedded into the agile lifecycle. product owner, users
and designers use the product, which is delivered after each
sprint. the behavior of the users and the runtime behavior
of the system are logged. process mining uses these logs,
discovers models and produces the analysis results, which
can be used on further sprints both for improving functional
specication and technical design. the analysis is done by
anexpert , who applies mining tools (see example in fig. 2)
for deriving the most valuable information and presenting it
to the management, designers, developers and testers .
	


   
 

!"
 

 
#$ 
figure 5: agile lifecycle with process mining
the results of the analysis of the user behavior usually
reveal new or changed business requirements and, thus, in-
uence the functionality of the product. they are given to
the product owner, he includes them to the product backlog
and sets the priorities, so that they can be considered in
subsequent sprints.
in case of runtime analysis, we discover non-functional
issues concerning performance and technical infrastructure,these issues should be considered by the scrum team when
planning the implementation of the next sprints. in case of
principal architectural changes , they should be discussed by
the scrum team, product owner and cross-cutting architecture
team, which usually exists in big projects.
5. related work
in the area of descriptive process modeling people start
with the idea of describing the software process as it is being
performed [27]. this idea is very similar to the idea of
process mining. cook and wolf [7] used process mining
techniques to discover models of software processes . this
was one of the rst examples of process mining. however,
later applications of process mining rarely addressed software
process improvement. today, process mining is mostly used
for discovering business process models [21, 22]. although, we
could eectively use process mining for discovering software
process models from software repositories [17, 12], this topic
received little attention.
software process mining is a developing research eld.
however, a lot of work was already done in the area of
mining user behavior, especially in web usage mining [15]
and applying markov models for web usage mining [4]. also
further steps concerning using historical states for improving
web mining were done in this area [6]. also the adjacent
research eld dealing with mining search query logs is very
prospective [3].
the other area is dynamic analysis of software execution
traces. performance analysis using system execution traces is
described in the work of peiris and hill [16]. a trace analysis
framework for creating test suites is described here [13]. a
separate research domain is program comprehension using
dynamic analysis, a deep survey of current research is done
in the work of cornelissen et al. [8].
the ideas about integrating performance analysis into
software development lifecycle are nicely summarized in [1].
6. future work and conclusions
many modern software development projects are organized
according to the agile principles . early feedback of the user
is a crucial success factor for such projects. with the help of
process mining , amodel of user behavior is discovered and
analyzed in order to get deeper insights into the functionality
of the delivered software. additionally, a model of software
runtime behavior is derived in order to localize performance
problems and architectural challenges.
based on our experiences with the development of a touris-
tic system, we have shown how to integrate process mining
into the agile development lifecycle . since most of the soft-
ware systems produce a variety of logs and traces, process
mining can be eectively applied for analyzing these systems.
this paper is just a rst step in the area of software process
mining , it opens numerous research directions and challenges.
further research should be done in the following directions:
(1) mining dierent perspectives, e.g. data and organiza-
tional perspective, (2) application monitoring with the help
of process mining (model dierences and model repair), (3)
mining and ltering on dierent levels of abstraction (using
process-based olap cubes), (4) ecient mining of big data
(gigabytes of logs), (5) predicting user behavior and system
failures, (6) discovering architectural anti-patterns and re-
designing the system, (7) discovering usability anti-patterns73and improving the \quality in use" of the software.
acknowledgments
support from the basic research program of the national
research university higher school of economics is gratefully
acknowledged.
7. references
[1]s. balsamo, a. d. marco, p. inverardi, and m. simeoni.
model-based performance prediction in software
development: a survey. ieee transactions on software
engineering , 30(5):295{310, 2004.
[2] k. beck, m. beedle, a. van bennekum, a. cockburn,
w. cunningham, m. fowler, j. grenning, j. highsmith,
a. hunt, r. jeries, j. kern, b. marick, r. c. martin,
s. mellor, k. schwaber, j. sutherland, and d. thomas.
manifesto for agile software development, 2001.
[3] p. boldi, f. bonchi, c. castillo, d. donato, a. gionis,
and s. vigna. the query-ow graph: model and
applications. in proceedings of the 17th acm
conference on information and knowledge
management , cikm '08, pages 609{618, new york,
ny, usa, 2008. acm.
[4] j. borges and m. levene. evaluating variable-length
markov chain models for analysis of user web
navigation sessions. ieee trans. on knowl. and data
eng., 19(4):441{452, apr. 2007.
[5] f. p. brooks. the design of design: essays from a
computer scientist . addison-wesley professional, 1st
edition, 2010.
[6]f. chierichetti, r. kumar, p. raghavan, and t. sarlos.
are web users really markovian? in proceedings of the
21st international conference on world wide web ,
www '12, pages 609{618, new york, ny, usa, 2012.
acm.
[7] j. cook and a. wolf. discovering models of software
processes from event-based data. acm transactions
on software engineering and methodology ,
7(3):215{249, 1998.
[8] b. cornelissen, a. zaidman, a. van deursen,
l. moonen, and r. koschke. a systematic survey of
program comprehension through dynamic analysis.
ieee trans. softw. eng. , 35(5):684{702, sept. 2009.
[9] a. a. de medeiros, a. weijters, and w. van der aalst.
genetic process mining: an experimental evaluation.
data mining and knowledge discovery , 14(2):245{304,
2007.
[10] m. hilbert and p. lopez. the world's technological
capacity to store, communicate, and compute
information. science , 332(6025):60{65, 2011.
[11] ieee task force on process mining. process mining
manifesto. in f. daniel, k. barkaoui, and s. dustdar,
editors, business process management workshops ,
volume 99 of lecture notes in business information
processing , pages 169{194. springer-verlag, berlin,
2012.
[12]e. kindler, v. rubin, and w. sch afer. activity mining
for discovering software process models. in b. biel,
m. book, and v. gruhn, editors, proc. of the software
engineering 2006 conference, leipzig, germany ,
volume p-79 of lni, pages 175{180. gesellschaft f ur
informatik, mar. 2006.[13]r. lencevicius, e. metz, and a. ran. tracing execution
of software for design coverage. in proceedings of the
16th ieee international conference on automated
software engineering , ase '01, pages 328{,
washington, dc, usa, 2001. ieee computer society.
[14] j. manyika, m. chui, b. brown, j. bughin, r. dobbs,
c. roxburgh, and a. byers. big data: the next
frontier for innovation, competition, and productivity.
mckinsey global institute, 2011.
[15] b. mobasher, r. cooley, and j. srivastava. automatic
personalization based on web usage mining. commun.
acm , 43(8):142{151, aug. 2000.
[16] m. peiris and j. h. hill. adapting system execution
traces to support analysis of software system
performance properties. j. syst. softw. ,
86(11):2849{2862, nov. 2013.
[17] v. rubin, c. g unther, w. van der aalst, e. kindler,
b. van dongen, and w. sch afer. process mining
framework for software processes. in q. wang,
d. pfahl, and d. rao, editors, international
conference on software process, software process
dynamics and agility (icsp 2007) , volume 4470 of
lecture notes in computer science , pages 169{181.
springer-verlag, berlin, 2007.
[18] c. sauer, a. gemino, and b. h. reich. the impact of
size and volatility on it project performance.
commun. acm , 50(11):79{84, nov. 2007.
[19] k. schwaber and m. beedle. agile software
development with scrum . prentice hall ptr, upper
saddle river, nj, usa, 1st edition, 2001.
[20] the standish group. chaos manifesto 2013.
http://versionone.com/assets/img/files/
chaosmanifesto2013.pdf , 2013.
[21] w. van der aalst. process mining: discovery,
conformance and enhancement of business processes .
springer-verlag, berlin, 2011.
[22]w. van der aalst. process mining. communications of
the acm , 55(8):76{83, 2012.
[23] w. van der aalst, v. rubin, h. verbeek, b. van
dongen, e. kindler, and c. g unther. process mining:
a two-step approach to balance between undertting
and overtting. software and systems modeling ,
9(1):87{111, 2010.
[24] w. van der aalst, a. weijters, and l. maruster.
workow mining: discovering process models from
event logs. ieee transactions on knowledge and
data engineering , 16(9):1128{1142, 2004.
[25] j. van der werf, b. van dongen, c. hurkens, and
a. serebrenik. process discovery using integer linear
programming. fundamenta informaticae , 94:387{412,
2010.
[26] h. verbeek, j. buijs, b. van dongen, and w. van der
aalst. prom 6: the process mining toolkit. in m. l.
rosa, editor, proc. of bpm demonstration track 2010 ,
volume 615 of ceur workshop proceedings , pages
34{39, 2010.
[27] y. wang. software engineering processes: principles
and applications . crc press, april 2000.
[28] e. yourdon. death march . yourdon press series.
prentice hall professional technical reference, 2004.74