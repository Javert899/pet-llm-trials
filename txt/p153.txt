making work flow: on the application of petri nets to
business process management
w.m.p. van der aalst
/br
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tm.tue.nl
abstract. information technology has changed business processes within and
between enterprises. more and more work processes are being conducted under
the supervision of information systems that are driven by process models. ex-amples are workﬂow management systems such as staffware, enterprise resource
planning systems such as sap and baan, but also include many domain speciﬁc
systems. it is hard to imagine enterprise information systems that are unaware ofthe processes taking place. although the topic of business process management
using information technology has been addressed by consultants and software
developers in depth, a more fundamental approach has been missing. only sincethe nineties, researchers started to work on the foundations of business process
management systems. this paper addresses some of the scientiﬁc challenges in
business process management. in the spirit of hilbert’s problems
1, 10 interesting
problems for people working on petri-net theory are posed.
1 introduction
the goal of this paper is to show the relevance, architecture, and achilles heel of busi-
ness process management systems. this way we hope to interest petri-net researchers
in some of the scientiﬁc challenges in this domain. the deﬁnition of a business process
management system used throughout this paper is: a generic software system that is
driven by explicit process designs to enact and manage operational business processes .
the system should be process-aware and generic in the sense that it is possible to mod-ify the processes it supports. the process designs are often graphical and the focus is
on structured processes that need to handle many cases.
in the remainder of this paper, we will ﬁrst put business process management and
related technology in its historical context. then, we will discuss models for processdesign. since business process management systems are driven by explicit models, it
is important to use the right techniques. next, we will discuss techniques for the anal-
ysis of process models. we will argue that it is vital to have techniques to assert the
correctness of workﬂow designs. based on this we will focus on systems for process
/brpart of paper is taken from my inaugural lecture “making work flow: on the design, analysis,
and enactment of business processes” [6].
1note that by no means we are suggesting that the problems in this paper are of the same statureas the 23 problems raised by david hilbert in 1900.enactment, i.e., systems that actually make the “work ﬂow” based on a model of the
processes and organizations involved. finally, we will pose 10 interesting problems inthe spirit of hilbert’s problems [31].
2 business process management from a historical perspective
only the wisest and stupidest of men never change.
confucius
to show the relevance of business process management systems, it is interesting to put
them in a historical perspective. consider figure 1, which shows some of the ongo-
ing trends in information systems. this ﬁgure shows that today’s information systemsconsist of a number of layers. the center is formed by the operating system, i.e., the
software that makes the hardware work. the second layer consists of generic appli-
cations that can be used in a wide range of enterprises. moreover, these applicationsare typically used within multiple departments within the same enterprise. examples
of such generic applications are a database management system, a text editor, and a
spreadsheet program. the third layer consists of domain speciﬁc applications. these
applications are only used within speciﬁc types of enterprises and departments. exam-
ples are decision support systems for vehicle routing, call center software, and humanresource management software. the fourth layer consists of tailor-made applications.
these applications are developed for speciﬁc organizations.
in the sixties the second and third layer were missing. information systems were
built on top of a small operating system with limited functionality. since no generic nor
domain speciﬁc software was available, these systems mainly consisted of tailor-made
applications. since then, the second and third layer have developed and the ongoing
trend is that the four circles are increasing in size, i.e., they are moving to the out-
side while absorbing new functionality. today’s operating systems offer much morefunctionality. database management systems that reside in the second layer offer func-
tionality which used to be in tailor-made applications. as a result of this trend, the
emphasis shifted from programming to assembling of complex software systems. thechallenge no longer is the coding of individual modules but orchestrating and gluing
together pieces of software from each of the four layers.
another trend is the shift from data to processes. the seventies and eighties were
dominated by data-driven approaches. the focus of information technology was on
storing and retrieving information and as a result data modeling was the starting pointfor building an information system. the modeling of business processes was often ne-
glected and processes had to adapt to information technology. management trends such
as business process reengineering illustrate the increased emphasis on processes. as aresult, system engineers are resorting to a more process driven approach.
the last trend we would like to mention is the shift from carefully planned designs
to redesign and organic growth. due to the omnipresence of the internet and its stan-
dards, information systems change on-the-ﬂy. as a result, fewer systems are built from
scratch. in many cases existing applications are partly used in the new system. althoughcomponent-based software development still has it problems, the goal is clear and it is
easy to see that software development has become more dynamic.operating
system
generic
applications
domain
specific
applications
tailor-made
applicationstrends in
information
systems
1. from programming to
assembling.2. from data orientation to
process orientation.
3. from design to redesign
and organic growth.
fig. 1. trends relevant for business process management.
the trends shown in figure 1 provide a historical context for business process man-
agement systems. business process management systems are either separate applica-
tions residing in the second layer or are integrated components in the domain speci ﬁc
applications, i.e., the third layer. notable examples of business process management
systems residing in the second layer are work ﬂow management systems [33, 36] such
as staffware, mqseries, and cosa, and case handling systems such as flower. note
that leading enterprise resource planning systems populating the third layer also offer a
work ﬂow management module. the work ﬂow engines of sap, baan, peoplesoft, or-
acle, and jd edwards can be considered as integrated business process management
systems. the idea to isolate the management of business processes in a separate com-
ponent is consistent with the three trends identi ﬁed. business process management sys-
tems can be used to avoid hard-coding the work processes into tailor-made applications
and thus support the shift from programming to assembling. moreover, process ori-
entation, redesign, and organic growth are supported. for example, today ’s work ﬂow
management systems can be used to integrate existing applications and support process
change by merely changing the work ﬂow diagram. give these observations, we hope
to have demonstrated the practical relevance of business process management systems.
in the remainder of this paper we will focus more on the scienti ﬁc importance of thesesystems. moreover, for clarity we will often restrict the discussion to clear cut business
process management systems such as work ﬂow management systems.
an interesting starting point from a scienti ﬁc perspective is the early work on of ﬁce
information systems. in the seventies, people like skip ellis [24], anatol holt [32], and
michael zisman [46] already worked on so-called of ﬁce information systems, which
were driven by explicit process models. it is interesting to see that the three pioneers
in this area independently used petri-net variants to model of ﬁce procedures. during
the seventies and eighties there was great optimism about the applicability of of ﬁce
information systems. unfortunately, few applications succeeded. as a result of these
experiences, both the application of this technology and research almost stopped for a
decade. consequently, hardly any advances were made in the eighties. in the nineties,there again was a huge interest in these systems. the number of work ﬂow management
systems developed in the past decade and the many papers on work ﬂow technology
illustrate the revival of of ﬁce information systems. today work ﬂow management sys-
tems are readily available [36]. however, their application is still limited to speci ﬁc
industries such as banking and insurance. as was indicated by skip ellis it is importantto learn from these ups and downs [26]. the failures in the eighties can be explained
by both technical and conceptual problems. in the eighties, networks were slow or not
present at all, there were no suitable graphical interfaces, and proper development soft-ware was missing. however, there were also more fundamental problems: a uni ﬁed way
of modeling processes was missing and the systems were too rigid to be used by people
in the workplace. most of the technical problems have been resolved by now. however,
the more conceptual problems remain. good standards for business process modeling
are still missing and even today ’s work ﬂow management systems enforce unnecessary
constrains on the process logic (e.g., processes are made more sequential).
whirlwind (1953)
architecture:  32 bit word length, duplex
cpu, 75kips single address, no interrupts,
4 index registers, real time clockmemory:  magnetic core (4kx64word) 6
microseconds cycle time; magnetic drum(150k word); 4 ibm model 729 tape drives
(~100k word each); parity checking
i/o:  crt display, keyboard, light gun, real
time serial data (teletype 1300bps modem),voice linesize:  60,000 vacuum tubes, 175,000
diodes, 13,000 transistors; cpu space
50x150 feet each; cpu weight 500,000 lbs;power consumption: 3 megawatts
fig. 2. the whirlwind - photo from the timeline of events on computer history ( c/circlecopyrt2001 ieee).one of the great challenges of business process management systems is to offer both
support and ﬂexibility [9, 14, 35]. today ’s systems typically are too rigid, thus forcing
people to work around the system. one of the problems is that software developers
and computer scientists are typically inspired by processes inside a computer system
rather than processes outside a computer. figure 2 illustrates the typical mind-frame of
people developing business process management systems. this photograph shows the
whirlwind computer, which was the ﬁrst computer system to have magnetic core mem-
ory (1953). it is interesting to mention that whirlwind was developed by jay forrester
who also developed the well-known systems dynamics approach [27]. software engi-
neers are typically trained in the architecture and systems software of computers likethe whirlwind and its successors. as a result, these engineers think in terms of control
systems rather than support systems. this explains that few of the existing work ﬂow
management systems allow for the so-called implicit choice, i.e., a choice resolved by
the environment rather than the system [13]. to solve these problems, the typical mind-
frame should be changed such that the business process management system is viewedas a reactive system rather than merely a control system.
to summarize we state that, although the relevance of business process manage-
ment systems is undisputed, many fundamental problems remain to be solved. in the
remainder of this paper we will try to shed light on some of these problems.
3 models for process design
a camel is a horse designed by committee.
sir alec issigonis
business process management systems are driven by models of processes and organiza-
tions. by changing these models, the behavior of the system adapts to its environmentand changing requirements. these models cover different perspectives. figure 3 shows
some of the perspectives relevant for business process management systems [33]. the
process perspective describes the control- ﬂow, i.e., the ordering of tasks. the informa-
tion perspective describes the data that are used. the resource perspective describes
the structure of the organization and identi ﬁes resources, roles, and groups. the task
perspective describes the content of individual steps in the processes. each perspec-
tive is relevant. however, the process perspective is dominant for the type of systems
addressed in this talk.
many techniques have been proposed to model the process perspective. some of
these techniques are informal in the sense that the diagrams used have no formally de-
ﬁned semantics. these models are typically very intuitive and the interpretation shifts
depending on the modeler, application domain, and characteristics of the business pro-cesses at hand. examples of informal techniques are isac, dfd, sadt, and idef.
these techniques may serve well for discussing work processes. however, they are in-
adequate for directly driving information systems since they are incomplete and subjectto multiple interpretations. therefore, more precise ways of modeling are required.
figure 4 shows an example of an order handling process modeled in terms of a
so-called work ﬂow net [1]. work ﬂow nets are based on the classical petri-net modelprocess perspectivetask
perspectiveinformation
perspectiveresource
perspective
fig. 3. perspectives of models driving business process management systems.
start register
send_billreceive_paymentarchiveship_goods check_availabilityreplenish
update
reminderendc1
c2c3
c4
c5
c6c7
c8
fig. 4. wf-net.
invented by carl adam petri in the early sixties [39]. the squares are the active parts of
the model and correspond to tasks. the circles are the passive parts of the model and are
used to represent states. in the classical petri net, the squares are named transitions andthe circles places. a work ﬂow net models the life-cycle of one case. examples of cases
are insurance claims, tax declarations, and traf ﬁc violations. cases are represented by
tokens and in this case the token in start corresponds to an order. task register is a so-
called and-split and is enabled in the state shown. the arrow indicates that this task
requires human intervention. if a person executes this task, the token is removed from
place start and two tokens are produced: one for c1and one for c2. then, in parallel,
two tasks are enabled: check
availability andsend
 bill. depending on the eagerness of
the workers executing these two tasks either check
 available orsend
 billis executed
ﬁrst. suppose check
 availability is executed ﬁrst. if the ordered goods are available,
they can be shipped by executing task ship
 goods . if they are not available, either areplenishment order is issued or not. note that check
 availability is an or-split and
produces one token for c3,c4,o rc5. suppose that not all ordered goods are available,
but the appropriate replenishment orders were already issued. a token is produced for
c3and task update becomes enabled. suppose that at this point in time task send
 bill
is executed, resulting in the state with a token in c3andc6. the token in c6is input
for two tasks. however, only one of these tasks can be executed and in this state only
receive
 payment is enabled. task receive
 payment can be executed the moment the pay-
ment is received. task reminder is an and-join/and-split and is blocked until the bill
is sent and the goods have been shipped. note that the reminder is sent after a speci ﬁed
period as indicated by the clock symbol. however, it is only possible to send a remain-der if the goods have been actually shipped. assume that in the state with a token in
c3andc6task update is executed. this task does not require human involvement and
is triggered by a message of the warehouse indicating that relevant goods have arrived.
again check
availability is enabled. suppose that this task is executed and the result
is positive. in the resulting state ship
 goods can be executed. now there is a token in
c6andc7thus enabling task reminder . executing task reminder again enables the task
send
 bill. a new copy of the bill is sent with the appropriate text. it is possible to send
several reminders by alternating reminder andsend
 bill. however, let us assume that
after the ﬁrst loop the customer pays resulting in a state with a token in c7andc8.i n
this state, the and-join archive is enabled and executing this task results in the ﬁnal
state with a token in end.
this very simple work ﬂow net shows some of the routing constructs relevant for
business process modeling. sequential, parallel, conditional, and iterative routing are
present in this model. there also are more advanced constructs such as the choice be-tween receive
payment andreminder . this is a so-called implicit choice since it is not
resolved by the system but by the environment of the system. the moment the bill is
sent, it is undetermined whether receive
 payment orreminder will be the next step in
the process. another advanced construct is the fact that task reminder is blocked until
the goods have been shipped. the latter construct is a so-called milestone . the reason
that we point out both constructs is that many systems have problems supporting these
rather fundamental process patterns [13].
work ﬂow nets have clear semantics. the fact that we are able to play the so-called
token game using a minimal set of rules shows the fact that these models are executable.
none of the informal informal techniques mentioned before (i.e., isac, dfd, sadt,
and idef) have formal semantics. besides work ﬂow nets there are many other formal
techniques. examples are the many variants of process algebra [17] and statecharts [29].the reason we prefer to use a variant of petri nets is threefold [1]:
–petri nets are graphical and yet precise.
–petri nets offer an abundance of analysis techniques.
–petri nets treat states as ﬁrst-class citizens.
the latter point deserves some more explanation. many techniques for business process
modeling focus exclusively on the active parts of the process, i.e., the tasks. this israther surprising since in many administrative processes the actual processing time is
measured in minutes and the ﬂow time is measured in days. this means that most ofthe time cases are in-between two subsequent tasks. therefore, it is vital to model these
states explicitly.
in recent years, the uni ﬁed modeling language (uml, [20]) has become the de
facto standard for software development. uml has four diagrams for process modeling.
uml supports variants of statecharts and its activity diagrams are inspired by petri nets.
uml combines both good and bad ideas and can be considered semi-formal. many
colleagues are trying to provide solid semantics for uml. in my opinion, it would havebeen better to start with a solid foundation.
4 techniques for process analysis
from the errors of others, a wise man corrects his own.
syrus
business process management systems allow organizations to change their processes
by merely changing the models. the models are typically graphical and can be changed
quite easily. this provides more ﬂexibility than conventional information systems. how-
ever, by reducing the threshold for change, errors are introduced more easily. therefore,
it is important to develop suitable analysis techniques. however, it is not suf ﬁcient to
just develop these techniques. it is as least as important to look at methods and tools tomake them applicable in a practical context.
traditionally, most techniques used for the analysis of business processes, originate
from operations research. all students taking courses in operations management willlearn to apply techniques such as simulation, queueing theory, and markovian analysis.
the focus mainly is on performance analysis and less attention is paid to the correct-
ness of models. veriﬁcation andvalidation are often neglected. as a result, systems fail
by not providing the right support or even break down [2, 42]. veri ﬁcation is needed
to check whether the resulting system is free of logical errors. many process designssuffer from deadlocks and livelocks that could have been detected using veri ﬁcation
techniques. validation is needed to check whether the system actually behaves as ex-
pected. note that validation is context dependent while veri ﬁcation is not. a system that
deadlocks is not correct in any situation. therefore, verifying whether a system exhibits
deadlocks is context independent. validation is context dependent and can only be done
with knowledge of the intended business process.
to illustrate the relevance of validation and veri ﬁcation and to demonstrate some
of the techniques available, we return to the work ﬂow net shown in figure 4. this
work ﬂow process allows for the situation where a replenishment is issued before any
payment is received. suppose that we want to change the design such that replenish-
ments are delayed until receiving payment. an obvious way to model this is to connecttaskreceive
payment with replenish using an additional place c9as shown in figure 5.
although this extension seems to be correct at ﬁrst glance, the resulting work ﬂow net
has several errors. the work ﬂow will deadlock if a second replenishment is needed and
something is left behind in the process if no replenishments are needed. these are logi-
cal errors that can be detected without any knowledge of the order handling process. forveriﬁcation, application independent notions of correctness are needed. one of these no-
tions is the so-called soundness property [1]. a work ﬂow net is sound if and only if thestart register
send_billreceive_paymentarchiveship_goods check_availabilityreplenish
update
reminderendc1
c2c3
c4
c5
c6c7
c8c9
fig. 5. an incorrect wf-net.
work ﬂow contains no dead parts (i.e., tasks that can never be executed), from any reach-
able state it is always possible to terminate, and the moment the work ﬂow terminates all
places except the sink place (i.e., place end) are empty. note that soundness rules out
logical errors such as deadlocks and livelocks. the notion of soundness is applicable
to any work ﬂow language. an interesting observation is that soundness corresponds to
liveness and boundedness of the short-circuited net [1]. the latter properties have beenstudied extensively [41, 23]. as a result, powerful analysis techniques and tools can be
applied to verify the correctness of a work ﬂow design. practical experience shows that
many errors can be detected by verifying the soundness property. moreover, petri-net
theory can also be applied to guide the designer towards the error.
soundness does not guarantee that the work ﬂow net behaves as intended. consider
for example, the work ﬂow net shown in figure 6. compared to the original model,
the shipment of goods is skipped if some of the goods are not available. again thismay seem to be a good idea at ﬁrst glance. however, customers are expected to pay
even if the goods are never delivered. in other words, task receive
payment needs to
be executed although task ship
 goods may never be executed. the latter error can only
be detected using knowledge about the context. based on this context one may decide
whether this is acceptable or not. few analysis techniques exist to automatically sup-
port this kind of validation. the only means of validation offered by today ’s work ﬂow
management systems is gaming and simulation.
an interesting technique to support validation is inheritance of dynamic behavior.
inheritance can be used as a technique to compare processes. inheritance relates sub-
classes with superclasses [19]. a work ﬂow net is a subclass of a superclass work ﬂow net
if certain dynamic properties are preserved. a subclass typically contains more tasks. if
by hiding and/or blocking tasks in the subclass one obtains the superclass, the subclassstart register
send_billreceive_paymentarchiveship_goods check_availability
reminderendc1
c2c4
c5
c6c7
c8
fig. 6. a sound but incorrect wf-net.
inherits the dynamics of the superclass.2the superclass can be used to specify the min-
imal properties the work ﬂow design should satisfy. by merely checking whether the ac-
tual design is a subclass of the superclass, one can validate the essential properties. con-
sider for example figure 7. this work ﬂow net describes the minimal requirements the
order handling process should satisfy. the tasks register ,ship
 goods ,receive
 payment ,
andarchive are mandatory. tasks ship
 goods andreceive
 payment may be executed in
parallel but should be preceded by register and followed by archive . the original order
handling process shown in figure 4 is a subclass of this superclass. therefore, the min-
imal requirements are satis ﬁed. however, the order handling process shown in figure 6
is not a subclass. the fact that task ship
 goods can be skipped demonstrates that not all
properties are preserved.
start register
receive_paymentarchiveship_goods
endc1
c2c3
c4
fig. 7. a superclass wf-net.
2we have identi ﬁed four notions of inheritance. in this paper, we only refer to life-cycle inheri-
tance.inheritance of dynamic behavior is a very powerful concept that has many appli-
cations. inheritance-preserving transformation rules and transfer rules offer support atdesign-time and at run-time [8]. subclass-superclass relationships also can be used to
enforce correct processes in an e-commerce setting. if business partners only execute
subclass processes of some common contract process, then the overall work ﬂow will
be executed as agreed. it should be noted that work ﬂows crossing the borders of orga-
nizations are particularly challenging from a veri ﬁcation and validation point of view
[4]. errors resulting from miscommunication between business partners are highly dis-
ruptive and costly. therefore, it is important to develop techniques and tools for the
veriﬁcation and validation of these processes.
fig. 8. a screenshot showing the veri ﬁcation and validation capabilities of wo ﬂan.
few tools aiming at the veri ﬁcation of work ﬂow processes exist. wo ﬂan [43] and
flowmake [42] are two notable exceptions. we have been working on wo ﬂan since
1997. figure 8 shows a screenshot of wo ﬂan. wo ﬂan combines state-of-the-art scien-
tiﬁc results with practical applications [3, 11, 43, 45]. wo ﬂan can interface with leading
work ﬂow management systems such as staffware and cosa. it can also interface with
bpr-tools such as protos. work ﬂow processes designed using any of these tools can be
veriﬁed for correctness. it turns out that the challenge is not to decide whether the de-
sign is sound or not. the real challenge is to provide diagnostic information that guides
the designer to the error. wo ﬂan also supports the inheritance notions mentioned be-
fore. given two work ﬂow designs, wo ﬂan is able to decide whether one is a subclass of
the other. tools such as wo ﬂan illustrate the bene ﬁts of a more fundamental approach.large scale experiments with experienced students show that work ﬂow designers fre-
quently make errors and that these design errors can be detected using wo ﬂan [43].
5 systems for process enactment
if the automobile had followed the same development cycle as the computer, a
rolls-royce would today cost $100, get one million miles to the gallon, and
explode once a year, killing everyone inside.
robert cringely
progress in computer hardware has been incredible. in 1964 gordon moore, predicted
that the number of elements on a produced chip would double every 18 months.3up un-
til now, moore ’s law still applies. information technology has also resulted in a spectac-
ular growth of the information being gathered. the commonly used term “information
overload ”illustrates this growth. it is estimated that for each individual, i.e., child, man,
and woman, 250 megabytes of data are gathered each year [37]. the internet and theworld-wide-web have made an abundance of information available at low costs. how-
ever, despite the apparent progress in computer hardware and information processing,
many information systems leave much to be desired. typically, software contains er-rors and people need to work around the system to get things done. these observations
justify the use of solid models and analysis techniques, as discussed before.
thus far, the focus of this paper has been on the design and analysis of work pro-
cesses. now it is time to focus on the systems to enact these work processes. figure 9
shows the typical architecture of a business process management system. the designer
uses the design tools to create models describing the processes and the structure of the
organization. the manager uses management tools to monitor the ﬂow of work and act
if necessary. the worker interacts with the enactment service. the enactment service
can offer work to workers and workers can search, select and perform work. to support
the execution of tasks, the enactment service may launch various kinds of applications.note that the enactment service is the core of the system deciding on “what ”,“how”,
“when ”, and “by whom ”. clearly, the enactment service is driven by models of the pro-
cesses and the organizations. by merely changing these models the system evolves and
adapts. this is the ultimate promise of business process management systems.
today ’s work ﬂow management systems have an architecture consistent with fig-
ure 9. consider, for example, the screenshots of staffware shown in figure 10. staffware
is one of the leading work ﬂow management systems. the top window shows the design
tool of staffware while de ﬁning a simple work ﬂow process. work is offered through so-
called work queues. one worker can have multiple work queues and one work queue
can be shared among multiple workers. the window in the middle shows the set ofavailable work queues (left) and the content of one of these work queues (right). the
3moore (founder of intel), commenting on the growth of the microelectronics industry in 1964,
noted a doubling of the number of elements on a produced chip once every 12 months. for
a decade that meant a growth factor of approximately 1000. today, when moore ’sl a wi s
quoted, the time constant typically quoted is 18 months. however, some argue that a constantof 24 months is more appropriate.offer
work enactment
servicemanagement
toolsdesign tools
run-time dataprocess
dataorganizational
data
perform
workworkermanagementdesigner
historical data
case
dataapplications
fig. 9. the architecture of a business process management system.
bottom window shows an audit trail of a case. the three windows show only some of
the capabilities offered by contemporary work ﬂow management systems. it is fairly
straightforward to map these windows onto the architecture. in other processes-aware
information systems such as enterprise resource planning systems, one will ﬁnd the
architecture shown in figure 9 embedded in a larger architecture.
despite the acceptance of process-aware information systems, the current genera-
tion of products leaves much to be desired. in the next section we will highlight some
of the challenging problems in this domain.
6 challenging problems
a scienti ﬁc truth does not triumph by convincing its opponents and making
them see the light, but rather because its opponents eventually die and a new
generation grows up that is familiar with it.
maxwell planck
in 1900 david hilbert gave a lecture before the international congress of mathemati-
cians in paris. in this lecture he gave gave a massive homework assignment to all themathematicians of the world in the form of 23 problems [31]. these problems became
the backbone for mathematical research in the 20th century. most of the problems have
been partially solved; some have been restated and the new interpretations have been
solved. by merely formulating a number of problems, hilbert directed research efforts
towards the problems he thought to be relevant. in this paper, we are trying to direct theattention of researchers to 10 petri-net-related problems relevant for business process
management.fig. 10. the graphical work ﬂow de ﬁner, work queue, and audit trail of staffware.
1.what is the complexity of deciding soundness?
given a work ﬂow net it is possible to decide soundness by constructing and inspect-
ing the reachability graph. it is also shown that soundness coincides with liveness
and boundedness of the short-circuited net [1]. for subclasses such as free-choice
work ﬂow nets and work ﬂow nets without pt- and tp-handles soundness can be
analyzed in polynomial time [5]. however, for arbitrary work ﬂow nets, the best
known algorithm is non-primitive recursive space [43]. an open question is whether
the structure of a work ﬂow net can be exploited to improve this algorithm.
2.how to calculate differences/commonalities of processes?
inheritance is well-de ﬁned for static structures such as classes, e.g., a class is a sub-
class of another class if it has the attributes/methods of the superclass. it is moredifﬁcult to compare processes, cf. [19] for a discussion on this topic. the absence
of a well-established notion of inheritance makes it dif ﬁcult to compare processes
let alone reason about differences/commonalities of processes. for example, one
can have two processes sharing the same set of tasks. this does not imply that one
can be substituted by the other. similarly, it is dif ﬁcult to de ﬁne what two pro-
cesses have in common if they do not agree on the ordering of tasks. a ﬁrst attempt
to reason about differences/commonalities of processes was given in [7]. unfortu-nately, existing notions are unsatisfactory since they provide only partial solutions
and their computational complexity is unknown. many practical questions are re-lated to these issues. for example, when harmonizing procedures of different enter-
prises/govenments it is interesting to calculate what they have in common and list
the differences. therefore, the quest for good notions and algorithms to calculate
differences/commonalities of processes is highly relevant.
3.which work ﬂow process patterns are the essential ones?
the work ﬂow management coalition (wfmc) has standardized basic building
blocks such as and/xor-splits/joins [36]. using these building blocks one canmodel sequential, parallel, conditional, and iterative processes. however, these ba-
sic control- ﬂow patterns are unable to directly cope with more advanced patterns.
some of these more advanced patterns are described in [12, 13]. examples are
patterns dealing with multiple instances, e.g., an insurance claim with a variable
number of witness statements, and advanced synchronization patterns, e.g., the n-out-of-m join and the or-join (only synchronize when needed). some patterns can
be modeled quite easily in terms of petri nets. other patterns can only be mod-
eled after introducing color sets and spaghetti-like diagrams. after four decades ofpetri-net modeling, a mature and complete set of process patterns is still missing
and designers are re-inventing the wheel every day. clearly, most patterns are do-
main dependent. the set of patterns reported in [12, 13] is speci ﬁc for work ﬂow
management. the question is whether this set is complete. another question is how
frequently these patterns are used/needed in practice.
4.how to evaluate and compare the expressive power of work ﬂow management sys-
tems?over the last decade, more than 200 different commercial work ﬂow management
systems became available. surprisingly, almost every system uses a propriety lan-
guage for modeling work ﬂow processes (despite the efforts of the wfmc [36]).
only a handful of systems is based on formal methods such as petri nets (e.g.,
cosa by thiel ag and income by promatis). many systems use a vendor-speci ﬁc
variant of ﬂow-charts extended with parallelism or petri-net like diagrams such as
the event-driven process chains (e.g., aris and sap). some systems also use very
different principles such as false-token propagation (e.g., inconcert by tibco andmqseries work ﬂow by ibm) and data-driven controls (e.g., flower by pallas
athena). this makes it very dif ﬁcult to compare systems. nevertheless, it is impor-
tant to have insights in the expressive power of these systems. note that the term
“expressive power ”is not used in the traditional sense. the term is used to refer
to the effort needed to construct models that re ﬂect the process logic in a direct
manner. note that the patterns mentioned before can be used as a stepping stone for
developing a method for evaluating and comparing process-enabled systems such
as work ﬂow management systems.
5.which class of work ﬂow processes can be rediscovered?
contemporary work ﬂow management systems are driven by explicit process mod-
els, i.e., a completely speci ﬁed work ﬂow design is required in order to enact a given
work ﬂow process. creating a work ﬂow design is a complicated time-consuming
process and typically there are discrepancies between the actual work ﬂow pro-
cesses and the processes as perceived by the management, workers, and ultimatelythe work ﬂow designer. therefore, it is interesting to develop techniques for (re)dis-
covering work ﬂow models based on observations of the real work ﬂow. starting
point for such techniques are so-called “work ﬂow logs ”containing information
about the work ﬂow process as it is actually being executed (cf. figure 11). un-
fortunately, it is dif ﬁcult to (re)discover an arbitrary work ﬂow process. all known
process mining techniques fail to properly detect non-free-choice structures [22,
44]. an open question is which class of work ﬂow processes (i.e., a subclass of
work ﬂow nets) can be rediscovered assuming “complete ”logs.
ab
cd ecase 1 : task a
case 2 : task acase 3 : task acase 3 : task bcase 1 : task b
case 1 : task ccase 2 : task c
case 4 : task acase 2 : task b
case 2 : task d
case 5 : task a
case 4 : task ccase 1 : task dcase 3 : task ccase 3 : task d
case 4 : task bcase 5 : task e
case 5 : task d
case 4 : task dmining algorithm
fig. 11. using mining techniques it is possible to distill a work ﬂow net (right) from a work ﬂow
log (left).
6.which are the minimal requirements needed to ensure the correct cooperation be-
tween work ﬂow processes?
the rise of e-business has increased the number of work ﬂow processes crossing or-
ganizational boundaries. as a result, there is a need to connect autonomous work-
ﬂow processes in such a way that some overall objective is satis ﬁed. a minimal
correctness criterion for a set of interoperating work ﬂow nets is soundness. sup-
pose that each of the local work ﬂow nets is sound. which requirements should hold
in order to guarantee soundness of the overall work ﬂow? in [34] some results are
given using scenarios speci ﬁed in terms of sequence diagrams. another approach
based on inheritance was presented in [15]. nevertheless, the overall problem re-
mains unsolved.
7.how to successfully migrate instances while dynamically changing the work ﬂow
process?
work ﬂow processes may change on the ﬂy as a result of changing laws, reengineer-
ing efforts, etc. this often leads to the situation where cases (work ﬂow instances)
have to migrate from the old work ﬂow process to the new work ﬂow process. as
wasﬁrst demonstrated in [25] this may lead to all kind of anomalies (e.g., dead-
locks, livelocks, etc.). consider a case that is moved from a process with a and b
in parallel to a process with a and b in sequence. if the case is in a state after ex-ecuting b but before executing a, there is no corresponding state in the sequential
process. this phenomenon is known as the “dynamic change bug ”[25]. in [8] it isdemonstrated that these anomalies can be avoided if the old and the new process
are in a subclass/superclass relation. in [16] the problem is tackled for work ﬂow
processes without loops. despite these partial solutions, the more general problem
remains unsolved.
8.how to incorporate structural, historical, and actual data to predict the future per-
formance of a process?when it comes to performance analysis, most approaches focus on the steady-state
of a process using assumptions about the arrival process (e.g., a poisson arrival
process) and the processing times (e.g., a gamma distribution). the problem isthat such an analysis requires additional modeling, does not exploit the information
available, and cannot be used for short-term decisions. business process manage-
ment systems contain information about the structure of the process (e.g., a work-
ﬂow process or business rules), historical data (e.g., transaction logs), and actual
data (e.g., the state of each case). in principle, this information can be used to auto-matically generate performance models to predict throughput times and utilization
rates in the near future. a work ﬂow net augmented with predictions about the ar-
rival of new cases, the processing times of tasks, and routing probabilities (notethat such settings can be derived from historical data) can be used to generate a
simulation model. if this simulation model is initialized using the current marking
of the net, the near future can be analyzed. such an approach requires a mixture
of structural, historical, and actual data [40]. one of the problems is that these dif-
ferent kinds of data may overlap or may even be con ﬂicting. another problem is
that most tools are designed for steady-state analysis rather than the analysis of the
transient behavior. these and other problems need to be tackled in order to exploit
the information in today ’s business process management systems.
9.how to calculate the throughput time of concurrent work ﬂow processes?
when it comes to the analysis of processes with parallelism, little has changed since
the landmark paper by baskett et al. [18] in 1975. most of the fundamental prob-
lems remain. queueing networks are particularly suitable for sequential processes[21] and stochastic nets [38] are typically restricted to phase-type distributions and
suffer from the state-explosion problem. an alternative approach was presented in
[10]. this approach allows for arbitrary discrete-time distributions provided thatthe work ﬂow net can be constructed using sequential, parallel, conditional, and/or
iterative routing. the problem with this approach is that it becomes intractable in
case of iteration and long-tailed distributions. approaches based on simulation are
typically time-consuming and do not give exact results. the problem remains that
there is no analytical technique which can cope with parallelism and non-phase-type distributions.
10.how to allocate a ﬁxed set of resources to tasks to optimize performance?
most techniques for performance analysis are of type “what if? ”and assume a
given distribution of resources over tasks. clearly, an optimal distribution of re-
sources can be achieved by a “what if? ”analysis of all possible resource alloca-
tions. unfortunately, such an approach is intractable for large numbers of resources
and tasks. an interesting alternative approach was given by goldratt [28]. he pro-poses to ﬁrst allocate the minimal number resources to each task. this can be de-
termined by simply taking the product of the frequency of a task and the averageprocessing time. the additional resources are distributed one-by-one using the fol-
lowing mechanism: determine the bottleneck and allocate one free resource to thisbottleneck. then again determine the bottleneck after adding this resource and allo-
cate the next free resource. this procedure is repeated until all free resources have
been allocated. clearly, this procedure is much more ef ﬁcient than analyzing all
possible resource allocations. unfortunately, as shown in [30], this procedure does
not lead to an optimal distribution. in [30] it is shown that for various interpreta-tions of the term bottleneck (e.g., average queue time and resource utilization) there
exist counterexamples for goldratt ’s algorithm. van hee and reijers also propose
a so-called marginal allocation strategy. this strategy is optimal for state-machinework ﬂow nets with poisson arrivals and negative exponential service times [30].
unfortunately, all known strategies fail in the presence of parallelism and/or non-
exponential service times.
as indicated before, we do not claim that this list of problems is of the same stature
as hilbert ’s problems. in fact, the list is heavily biased by personal experiences. some
problems are very concrete (e.g., the complexity of deciding soundness) while othersare more general, and therefore, less concrete (e.g., how to allocate a set of resources).
7 conclusion
in this paper, the application of petri nets to business process management was dis-
cussed. first, business process management was put in its historical perspective. then,
the topics of process design, process analysis, and process enactment were discussed.these topics have been illustrated using petri nets. to conclude, in the spirit of hilbert ’s
problems, 10 interesting problems for people working on petri-net theory have been
posed. we hope that the challenges mentioned in this paper will stimulate new andexciting research.
references
1. w.m.p. van der aalst. the application of petri nets to work ﬂow management. the journal
of circuits, systems and computers , 8(1):21 –66, 1998.
2. w.m.p. van der aalst. formalization and veri ﬁcation of event-driven process chains. infor-
mation and software technology , 41(10):639 –650, 1999.
3. w.m.p. van der aalst. wo ﬂan: a petri-net-based work ﬂow analyzer. systems analysis -
modelling - simulation , 35(3):345 –357, 1999.
4. w.m.p. van der aalst. loosely coupled interorganizational work ﬂows: modeling and an-
alyzing work ﬂows crossing organizational boundaries. information and management ,
37(2):67 –75, march 2000.
5. w.m.p. van der aalst. work ﬂow veri ﬁcation: finding control-flow errors using petri-net-
based techniques. in w.m.p. van der aalst, j. desel, and a. oberweis, editors, business
process management: models, techniques, and empirical studies , volume 1806 of lecture
notes in computer science , pages 161 –183. springer-verlag, berlin, 2000.
6. w.m.p. van der aalst. making work flow: on the design, analysis and enactment of busi-
ness processes (inaugural lecture given at 30 november 2001) . eindhoven university of
technology, eindhoven, the netherlands, 2001.7. w.m.p. van der aalst and t. basten. identifying commonalities and differences in object
life cycles using behavioral inheritance. in j.m. colom and m. koutny, editors, application
and theory of petri nets 2001 , volume 2075 of lecture notes in computer science , pages
32–52. springer-verlag, berlin, 2001.
8. w.m.p. van der aalst and t. basten. inheritance of work ﬂows: an approach to tackling
problems related to change. theoretical computer science , 270(1-2):125 –203, 2002.
9. w.m.p. van der aalst, j. desel, and a. oberweis, editors. business process management:
models, techniques, and empirical studies , volume 1806 of lecture notes in computer
science . springer-verlag, berlin, 2000.
10. w.m.p. van der aalst, k.m. van hee, and h.a. reijers. analysis of discrete-time stochastic
petri nets. statistica neerlandica , 54(2):237 –255, 2000.
11. w.m.p. van der aalst and a.h.m. ter hofstede. veri ﬁcation of work ﬂow task structures: a
petri-net-based approach. information systems , 25(1):43 –69, 2000.
12. w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. barros. work ﬂow
patterns home page. http://www.tm.tue.nl/it/research/patterns/.
13. w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. barros. advanced
work ﬂow patterns. in o. etzion and p. scheuermann, editors, 7th international confer-
ence on cooperative information systems (coopis 2000) , volume 1901 of lecture notes in
computer science , pages 18 –29. springer-verlag, berlin, 2000.
14. w.m.p. van der aalst and s. jablonski, editors. flexible work ﬂow technology driving the
networked economy , special issue of the international journal of computer systems, sci-
ence, and engineering, volume 15, number 5. crl publishing ltd, 2000.
15. w.m.p. van der aalst and m. weske. the p2p approach to interorganizational work ﬂows.
in k.r. dittrich, a. geppert, and m.c. norrie, editors, proceedings of the 13th interna-
tional conference on advanced information systems engineering (caise ’01), volume 2068
oflecture notes in computer science , pages 140 –156. springer-verlag, berlin, 2001.
16. a. agostini and g. de michelis. improving flexibility of work ﬂow management systems.
in w.m.p. van der aalst, j. desel, and a. oberweis, editors, business process management:
models, techniques, and empirical studies , volume 1806 of lecture notes in computer
science , pages 218 –234. springer-verlag, berlin, 2000.
17. j.c.m. baeten and w.p. weijland. process algebra , volume 18 of cambridge tracts in theo-
retical computer science . cambridge university press, cambridge, 1990.
18. f. baskett, k.m. chandy, r.r. muntz, and f.g. palacios. open, closed and mixed networks
of queues with different classes of customers. journal of the association of computing
machinery , 22(2):248 –260, april 1975.
19. t. basten and w.m.p. van der aalst. inheritance of behavior. journal of logic and algebraic
programming , 47(2):47 –145, 2001.
20. g. booch, j. rumbaugh, and i. jacobson. the uni ﬁed modeling language user guide .
addison wesley, reading, ma, usa, 1998.
21. j.a. buzacott. commonalities in reengineerd business processes: models and issues. man-
agement science , 42(5):768 –782, 1996.
22. j.e. cook and a.l. wolf. discovering models of software processes from event-based
data. acm transactions on software engineering and methodology , 7(3):215 –249, 1998.
23. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts in theoret-
ical computer science . cambridge university press, cambridge, uk, 1995.
24. c.a. ellis. information control nets: a mathematical model of of ﬁce information flow.
inproceedings of the conference on simulation, measurement and modeling of computer
systems , pages 225 –240, boulder, colorado, 1979. acm press.
25. c.a. ellis, k. keddara, and g. rozenberg. dynamic change within work ﬂow systems. in
n. comstock, c. ellis, r. kling, j. mylopoulos, and s. kaplan, editors, proceedings of theconference on organizational computing systems , pages 10 –21, milpitas, california, au-
gust 1995. acm sigois, acm press, new york.
26. c.a. ellis and g. nutt. work ﬂow: the process spectrum. in a. sheth, editor, proceedings
of the nsf workshop on work ﬂow and process automation in information systems , pages
140–145, athens, georgia, may 1996.
27. j.w. forrester. industrial dynamics . mit press, cambridge, ma, 1968.
28. e.m. goldratt and j. cox. the goal . gower, aldershot, uk, 1984.
29. d. harel. statecharts: a visual formalism for complex systems. science of computer
programming , 8:231 –274, 1987.
30. k.m. van hee, h.a. reijers, h.m.w. verbeek, and l. zerguini. on the optimal allocation of
resources in stochastic work ﬂow nets. in k. djemame and m. kara, editors, proceedings of
the seventeenth uk performance engineering workshop , pages 23 –34. university of leeds,
leeds, uk, 2001.
31. d. hilbert. mathematical problems. bulletin of the american mathematical society , 8:437 –
479, 1902.
32. a. w. holt. coordination technology and petri nets. in g. rozenberg, editor, advances
in petri nets 1985 , volume 222 of lecture notes in computer science , pages 278 –296.
springer-verlag, berlin, 1985.
33. s. jablonski and c. bussler. work ﬂow management: modeling concepts, architecture, and
implementation . international thomson computer press, london, uk, 1996.
34. e. kindler, a. martens, and w. reisig. inter-operability of work ﬂow applications: local
criteria for global soundness. in w.m.p. van der aalst, j. desel, and a. oberweis, editors,
business process management: models, techniques, and empirical studies , volume 1806 of
lecture notes in computer science , pages 235 –253. springer-verlag, berlin, 2000.
35. m. klein, c. dellarocas, and a. bernstein, editors. adaptive work ﬂow systems , special issue
of computer supported cooperative work, 2000.
36. p. lawrence, editor. work ﬂow handbook 1997, work ﬂow management coalition . john
wiley and sons, new york, 1997.
37. p. lyman and h. varian. how much information. http://www.sims.berkeley.edu/how-much-
info.
38. m. ajmone marsan, g. balbo, and g. conte et al. modelling with generalized stochastic
petri nets . wiley series in parallel computing. wiley, new york, 1995.
39. c.a. petri. kommunikation mit automaten . phd thesis, institut f ¨ur instrumentelle mathe-
matik, bonn, 1962.
40. h.a. reijers and w.m.p. van der aalst. short-term simulation: bridging the gap between
operational control and strategic decision making. in m.h. hamza, editor, proceedings
of the iasted international conference on modelling and simulation , pages 417 –421.
iasted/acta press, anaheim, usa, 1999.
41. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models , volume 1491
oflecture notes in computer science . springer-verlag, berlin, 1998.
42. w. sadiq and m.e. orlowska. analyzing process models using graph reduction tech-
niques. information systems , 25(2):117 –134, 2000.
43. h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing work ﬂow processes
using wo ﬂan.the computer journal , 44(4):246 –279, 2001.
44. t. weijters and w.m.p. van der aalst. rediscovering work ﬂow models from event-based
data. in v . hoste and g. de pauw, editors, proceedings of the 11th dutch-belgian conference
on machine learning (benelearn 2001) , pages 93 –100, 2001.
45. wo ﬂan home page. http://www.tm.tue.nl/it/wo ﬂan.
46. m.d. zisman. representation, speci ﬁcation and automation of of ﬁce procedures . phd
thesis, university of pennsylvania, warton school of business, 1977.