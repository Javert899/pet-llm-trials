ordinor : a framework for discovering, evaluating, and analyzing
organizational models using event logs
jing yanga,, chun ouyanga, wil m.p. van der aalstb,a, arthur h.m. ter hofstedea, yang yuc
aqueensland university of technology, australia
brwth aachen university, germany
csun yat-sen university, china
abstract
in order to streamline business processes and increase competitiveness, organizations need to
have a deep insight into the resources that they deploy. among others, they need to understand how
these resources act in groups to achieve organizational outcomes. accurate and timely information
is a sine qua non to achieve this understanding. process mining can be exploited for the purpose
of deriving organizational models from event logs that contain resource-related data. but existing
process mining techniques are not fully up to this task, as they are not able to cope with the multi-
faceted nature of business processes and are not yet able to determine how resource groupings are
involved in process execution. in addition, there is no provision for how to evaluate the quality of
discovered organizational models.
to tackle these challenges, we propose a novel framework, ordinor , capable of supporting
discovery of organizational models using event logs, their evaluation, and their analysis. ordinor
is constructed around a rich notion of organizational model where resource groupings are linked
to multiple dimensions of process execution. the framework also provides a set of measures
for systematically evaluating such models and analyzing the behavior of resource groups therein.
experiments have been conducted to evaluate the framework using a publicly available real-life
dataset. these demonstrate the usefulness of the approach.
keywords: event log, organizational model, process mining, conformance checking
corresponding author
email addresses: roy.j.yang@qut.edu.au (jing yang), c.ouyang@qut.edu.au (chun ouyang),
wvdaalst@pads.rwth-aachen.de (wil m.p. van der aalst), a.terhofstede@qut.edu.au
(arthur h.m. ter hofstede), yuy@mail.sysu.edu.cn (yang yu)
preprint submitted to elsevier march 11, 20221. introduction
modern organizations operate in an ever-changing context. to do so successfully, they have
to be able to rapidly adapt their business processes and optimally marshal their resources [1].
this is easier to achieve when these processes are formally captured and executed by business
process management systems and the human resources are members of appropriate organizational
groupings. the capability to constantly evolve organizational groups alongside changing business
processes is essential for organizations [1, 2] and it is thus imperative that they maintain accurate
and timely insights into these groups [3]. clearly, relying on organizational charts | too static
and often too high-level | or on managers' intuition | too vague and often anecdotal | will not
be conducive to achieving this capability [4].
a promising approach to obtaining accurate and timely insights into resource groupings and
their involvement in business processes is through the use of process execution data, which is readily
available in many contemporary process-aware information systems [5], e.g., enterprise resource
planning systems. this data is stored in so-called event logs and records activities undertaken
at a specic time in the context of the execution of a certain instance of a process (often known
as a case) [5, 1]. in addition, it may record resources who executed those activities. as such,
event logs capture the trails of human resource participation in actual business process execution,
and therefore provide a reliable starting point for mining timely process- and resource-related
information [6, 7].
process mining [5] oers a growing body of methods to extract knowledge from event logs
for process management and improvement. the subeld of organizational model mining [6] is
concerned with the study of groups of human resources, specically how models can be derived
from event logs to reect resource groupings in process execution. the relatively underexplored
area of organizational model mining [6, 8, 9] contains some research gaps which impede its use in
practice. three open issues in particular will be explored in this paper.
figure 1 illustrates these issues. process execution concerns three primary dimensions, i.e.,
case, activity, and time. thus, events in a log can be viewed as data points in three-dimensional
space. existing methods for mining organizational models mainly focus on the activity dimension,
but rarely consider the case and time dimensions. this narrow focus is limiting when resource
groupings need to be considered across dierent cases (e.g., specialist groups dedicated to particular
customers) or across dierent time periods (e.g., employees playing the same role but working
2discover
organizational 
models
evaluate
organizational
models
event log
rq3
organizational modelresources resource groups
 resources
 resource groups
 resources
 resource groupsrq2rq1
cases
time
activities
eventeventfigure 1: an illustration of the research gaps in organizational model mining (represented by the dashed lines)
dierent shifts). furthermore, organizational models discovered by existing methods often do not
transcend the mere clustering of resources | they do not describe how the discovered resource
groups were involved in process execution. it is therefore challenging to use these models for
understanding the behavior of resource groups. last but not least, existing research relies on
either domain knowledge or mining-method specic metrics to evaluate discovered models | a
generic evaluation approach is still missing. in view of these gaps, we formulate three research
questions:
rq1. how to utilize information on multiple dimensions of process execution when discovering
organizational models from an event log?
rq2. how to link discovered resource groups with process execution to describe their involvement?
rq3. how to evaluate discovered organizational models against input event logs?
in this paper, we address these research questions by proposing a novel framework, namely
ordinor1, for organizational model mining from event logs. our contributions are as follows.
•we dene a new, rich notion of organizational model as the foundation of the framework.
it considers multiple dimensions of process execution and links the relevant execution in-
formation with resource groupings (addressing rq1 and rq2). such a model can capture
comprehensive knowledge about resource groups and their involvement in processes (which
1\ordino" means \to arrange" in latin, and the rstands for \resources".
3has not been addressed in the literature).
•we propose two measures, tness and precision, for assessing discovered organizational mod-
els against input event logs. these measures form a generic basis for model evaluation in the
framework (addressing rq3).
•we propose a set of measures for analyzing organizational models, whose application deep-
ens the understanding of how resource groups and their members are involved in process
execution (a further contribution to rq2).
•we operationalize our framework by developing an approach to discover, evaluate, and ana-
lyze organizational models, and by implementing an open-source tool.
•we conduct extensive and replicable experiments on publicly available, real-life event logs to
test our proposals and report our ndings.
our research extends the process mining literature on knowledge discovery of the organiza-
tional perspective by identifying key research gaps and proposing a novel approach to address
them. application of our research empowers organizations by guiding decisions on organizational
structure design and sta deployment toward process improvement.
the remainder of this paper is structured as follows. section 2 provides background to our
research and related work. section 3 introduces the research method applied in our research.
section 4 elaborates on the design of the proposed framework ordinor . section 5 presents the
approach as a realization of this framework. section 6 reports on experiments conducted on real-
life event log data along with our ndings. section 7 discusses the limitations of our work and
directions for future investigations. finally, section 8 concludes the paper.
2. background and related work
a business process consists of a set of logically connected activities performed in an organization
and captures possible alternative ways to achieve a business goal [2, 1]. an instance of the execution
of a process is a case [5]. process execution involves human resources performing a sequence of
activities in the process. human resources play roles and hold positions in an organization, and
form resource groups [1, 6] representing various organizational entities, such as departments and
project teams. data related to process execution is recorded by process-aware information systems,
4notably in the form of event logs [5]. an event log consists of a set of events with a range of event
attributes, providing factual information on how activities were performed.
process mining can be used to derive insights from event logs, helping managers of organizations
understand and improve human resource management in business processes [6, 7]. there are four
main research topics in process mining relevant to human resources, including organizational model
mining (e.g., [6, 10, 9]), social network mining (e.g., [11, 12, 13]), rule mining (e.g., [7, 14, 15]),
and behavior prole mining (e.g., [16, 4, 17]).
the focus of this paper is on organizational model mining. as in general process mining re-
search, the key problem in organizational model mining concerns the discovery of models from
input event logs to represent the real behavior of process execution [5] | in this case, the group-
ings of resources [6]. state-of-the-art research (e.g., [8, 9, 18, 19]) addresses the problem by rst
characterizing how individual resources participate in process execution or how they interact with
each other. then, the problem is transformed into a clustering (as in [18, 9]) or a community-
detection problem (as in [8, 19]), and dedicated techniques are applied to solve them. as a result,
a discovered organizational model comprises groups of resources with similar characteristics in
process execution.
guided by our research questions, we establish three perspectives to review the related work.
the rst perspective concerns the dimensions of process execution considered when discovering
organizational models. an event log suitable for mining organizational models records information
on activity labels, resource identiers, case identiers, and timestamps. hence, the participation of
human resources in process execution can be analyzed from multiple dimensions | how resources
carry out activities ( activity ), how they are involved in dierent cases ( case), how they work at
dierent times ( time), and how they interact with each other ( resource interaction ). the second
perspective concerns whether discovered models capture the involvement of resource groups in
process execution. the third perspective concerns the evaluation of discovered models. among
the related work, some merely demonstrate the use of their proposed methods ( demonstration
only), while others evaluate the quality of discovered models by either comparing a discovered
model against relevant domain knowledge ( compare to domain knowledge ), e.g., ocial organiza-
tional structures, or adopting measures to assess the eectiveness of the applied technique ( assess
performance ). since the model discovery problem targets deriving a model from event logs to
capture resource groupings in process execution, we also consider input event logs necessary for
5evaluating discovered models ( refer to input log ). this is consistent with how model quality is
typically evaluated in process mining research [1, 5], by comparing model behavior to log data.
table 1 classies the existing research on organizational model mining in terms of these three
perspectives. below, we elaborate on the analysis of literature.
table 1: classication of state-of-the-art literature on discovering organizational models from event logs
paperdimensions considered
discovered models
capturing resource
group involvementevaluation of
in model discovery discovered models
activity case timeresource demonstration compare to assess refer to
interaction only domain knowledge performance input log
[6]p p p p
[10]p p p p
[18]p p
[20]p p p
[21]p p p p
[19]p p
[22]p p
[8]p p
[9]p p
[23]p p
[24]p p
[25]p p
[26]p p
1. are the multiple dimensions of process execution considered when discovering organizational
models? most existing methods only consider the activity dimension, since common resource
grouping schemes (e.g., business roles, functional units) often result in specialized groups of em-
ployees handling specic activities in a process. some existing research exploits the information
on resource interactions (e.g., handover of work between the execution of adjacent activities), in
particular studies that focus on the reporting relationships among employees [24, 25, 26]. on the
other hand, information related to cases and time is rarely considered when discovering organiza-
tional models. only song and van der aalst [6] exploit case information in event logs and discover
employee teams assembled for collective tasks. the multiple dimensions of process execution are
yet to be explored for discovering various resource groupings.
2. do the discovered organizational models describe the involvement of groups in process execution?
in existing work, discovered organizational models can represent groupings of human resources.
but only a few approaches [6, 20, 21, 10] allow their models to capture the connection between
identied resource groups and process execution. this connection should characterize the precise
6involvement of these groups in the process, e.g., their responsibilities or permissions. establishing
this connection is important to understanding how resources are best deployed.
3. how are the discovered models evaluated? some existing studies only concern a demonstra-
tion of how a proposed method can be applied to an event log to discover organizational mod-
els [20, 21, 22, 24, 25, 26], without measuring the quality of the discovered models. others conduct
evaluation on the discovered models by two means. the rst is to compare models with some
domain knowledge that is relevant to resource groupings in the process, such as ocial organi-
zational structures or business roles [6, 18, 10, 9, 23]. clearly, this relies on the availability of
domain knowledge. in addition, the evaluation results can be awed, since human resource group-
ings in reality may deviate from the referenced domain knowledge. another means is to assess
the performance of the applied techniques for model discovery [8, 19], which often requires using
a technique-specic method. for example, appice [8] applies a community-detection technique to
discover organizational models and adopts a measure named \modularity" to evaluate how eec-
tively that community-detection technique performs. however, modularity is a measure specic to
community-detection problems and cannot be applied to evaluate models discovered using other
techniques, e.g., those based on cluster analysis. so far, none of the existing studies has considered
using input event logs for evaluating the quality of organizational models discovered from the logs.
the remainder of this paper introduces how we address the foregoing issues by establishing a
novel framework for organizational model mining.
3. research method
we adapt and apply the design science research methodology (dsrm) [27] and follow the
guidelines proposed by hevner et al. [28] to develop our framework | a purposeful and viable
artifact for organizational model mining in the process mining domain (guideline 1: design as an
artifact). figure 2 illustrates our research method.
existing research [6, 29, 7] has shown the need to support the understanding of human resource
behavior in business processes and the value of exploiting process execution data for that purpose
(guideline 2: problem relevance). we start the dsrm process by reviewing the literature and
identifying the key open issues in state-of-the-art organizational model mining research, introduced
in the previous section.
7identify problem 
and motivatedefine objectives 
of a solutiondesign and 
developmentdemonstration 
and evaluationcommunication
open issues in 
organizational 
model miningdevelop a 
framework for 
organizational 
model miningordinor framework 
for organizational 
model mining• approach to 
realize the 
framework
• experiments on 
real-life data for 
evaluationthe paper at handfigure 2: apply dsrm [27] to develop the ordinor framework for organizational model mining
in view of the identied gaps, we dene our main objective as to develop a framework that
satises several requirements, including: (1) it should enable discovering organizational models
from event logs by considering multi-dimensional process execution information; (2) discovered
organizational models in this framework should describe how resource groups were involved in
process execution; and (3) discovered models should be evaluated against input event logs. based
on these requirements, we rigorously dene and formalize the notions related to event logs and
organizational models, and use them as the basis for designing and developing our framework
(guideline 5: research rigor). section 4 elaborates on the framework.
we propose an approach to realize the framework and implement it as a software tool (guide-
line 5: research rigor). section 5 presents the approach and the implementation, which are then
evaluated through experiments on publicly available, real-life data (guideline 3: design evaluation;
guideline 5: research rigor) collected from two dierent business domains. we exploit evaluation
results on the collected dataset to iterate the design of our framework and its implementation
(guideline 6: design as a search process). section 6 reports on the experiments.
finally, we document the steps taken to develop the framework and share the software imple-
mentation as an open-source tool (guideline 4: research contributions). we report our research
and its contributions in the paper at hand (guideline 7: communication of research).
4.ordinor framework
4.1. overview
we propose ordinor , a novel framework for organizational model mining, as shown in figure 3.
we introduce a new, richer notion of organizational model as the foundation of the framework.
8compared with the state-of-the-art, our organizational model species not only resources and
their groups, but also the connection between resource groups and the multiple dimensions of
process execution, captured by the so-called execution contexts . we elaborate on these concepts
in sections 4.3 and 4.4.
built upon the new notion of organizational model, the ordinor framework is designed to
support the following three types of organizational model mining tasks.
1.discovery of organizational models: this task is to construct models from event logs to
reect the groupings of resources and their involvement in process execution (section 4.5).
2.evaluation of organizational models: this task is to assess model quality by comparing
models against event logs using tness and precision measures (section 4.6).
3.analysis of organizational models: this task is to examine the actual behavior of resource
groups captured in organizational models using event logs. findings from such analyses can
provide insights into group-oriented organizational analytics (section 4.7).
model quality
model quality
discover
organizational 
models
evaluate
organizational 
models
analyze 
organizational 
models
event log
 event log
resources resource groups execution contexts
organizational modelcases
time
activitiescases
time
activities
insights into 
groups and members
figure 3: overview of the ordinor framework for organizational model mining. three types of mining tasks are
supported: discovery, evaluation, and analysis, highlighted in dierent colors respectively
94.2. event log
the starting point is an event log that records process execution data. table 2 shows an
example event log that records an insurance claim handling process. rows correspond to events
and columns correspond to various event attributes.
table 2: a fragment of an example event log
case id activity name timestamp resource customer type
... ... ... ... ...
654423 register request 29-08-2018 15:02 pete normal
654424 register request 29-08-2018 16:08 pete normal
654424 conrm request 29-08-2018 16:12 normal
654423 get missing info 29-08-2018 16:28 ann normal
654423 conrm request 29-08-2018 16:45 normal
654423 check insurance 30-08-2018 09:09 john normal
654424 check insurance 30-08-2018 09:22 sue normal
654425 register request 30-08-2018 10:07 bob vip
654423 accept claim 30-08-2018 11:32 john normal
654424 reject claim 30-08-2018 11:45 sue normal
654423 pay claim 30-08-2018 11:48 normal
654425 conrm request 30-08-2018 12:44 vip
654425 check insurance 30-08-2018 13:32 mary vip
654425 accept claim 30-08-2018 14:09 mary vip
654425 pay claim 30-08-2018 14:14 vip
... ... ... ... ...
we dene a general data structure for event logs (def. 1). an event log ( el) contains a set of
uniquely identiable events ( e), a set of event attribute names ( att), and the corresponding event
attribute values carried by each event (as specied by function ). it is possible that an event does
not carry any value for a given event attribute, e.g., in table 2 there are events with no resource
information. hence, function is a partial function mapping the attributes of events to values.
denition 1 (event log) .letebe the universe of event identiers, uattbe the universe of
possible attribute names, and uvalbe the universe of possible attribute values. el = (e;att;)
withee,e6=?, attu att, and:e!(att6!u val)is an event log. event e2ehas
attributes dom ((e)). for an attribute x2dom((e)),x(e) =(e)(x)is the attribute value of x
for evente.
next, we elaborate on the denition of event attributes needed for storing the essential informa-
tion about process execution (def. 2). an event log usually records multiple cases. each case can
10be uniquely identied and is related to a sequence of events corresponding to activities executed
at some specic time. as the minimum requirement for event logs, events have three standard
attributes: case identier ( case), activity name ( act), and timestamp ( time). optionally, an event
records the resource ( res) executing the activity. in addition to these four common attributes, an
event log may record event attributes such as customer type and cost, which vary across dierent
processes and information systems.
denition 2 (event attributes) .letc  u val,au val,t  u valandru valdenote
the universe of case identiers, the universe of activity names, the universe of timestamps, and
the universe of resource identiers, respectively. any event log el = (e;att;)has four special
attributes:fcase;act;time;resgatt such that, for any e2e:
•fcase;act;timegdom((e)),
•case(e)2c is the case to which ebelongs,
•act(e)2a is the activity erefers to,
•time(e)2t is the time at which eoccurred, and
•res(e)2r is the resource that executed eif res2dom((e)).
leteres=fe2ejres2dom((e))gdenote the set with all events that have resource information
andenres=fe2ejres62dom((e))gthe set of events that do not have this information.
4.3. execution context
a key feature of the organizational models proposed in our research is its ability to capture
the involvement of resource groups in process execution. this is achieved through the notion of
execution context .
in business process execution, the groupings of resources are often associated with certain con-
texts, as reected in event logs by the dierent types of activities or cases performed by resources,
or the times when resources perform activities [6]. consider the example event log of an insurance
claim handling process in table 2. pete and bob only performed activity \register (a claim) re-
quest", while john, sue, and mary performed \check insurance" and decided whether to \accept"
or \reject" a claim. this may be linked with dierent business roles of employees. in the meantime,
bob and mary only handled a claim from a \vip" customer, while others only handled claims from
\normal" customers. this can be a result of the insurance company setting up separate teams for
vip and normal customers.
11we introduce the concepts of case types ,activity types , and time types (def. 3) to categorize
the possible values carried by the three standard event attributes in an event log (i.e., case,act,
and time), respectively. these are inspired by the research on process cubes [30]. case types
correspond to the classication of cases and can be derived based on relevant case-level event
attributes. for instance, in the above example, case types may be determined by the customer
types of insurance claims. similarly, activity types categorize activity names into groups of relevant
activities (e.g., registration, approval) and time types classify timestamps into periods (e.g., days
of a week, dierent hours of a day).
denition 3 (case types, activity types, and time types) .letct,at, andtt denote the
sets of names of case types, activity types, and time types, respectively. the functions 'case:ct !
p(c),'act:at !p (a), and'time:tt !p (t)dene partitions over c,a, andt, respectively.
we will use a special type ?that is associated with all cases, all activities, and all times, i.e.
'case(?) =c,'act(?) =a, and'time(?) =t. the setsct,at, andtt only share this special
type and are otherwise mutually disjoint. we dene co=ctattt .
we now formalize the notion of execution context (def. 4) as consisting of a case type, an activity
type, and a time type. each execution context characterizes a possible way of executing an activity
in a process and can be associated with a specic set of events that share similar characteristics.
for instance, we can relate the rst two events in the example log (table 2) to the same execution
context (\normal case", \registration activity", \wednesday afternoon"). note that an execution
context can be specied with a \wild-card" for any of its constituent components of case type,
activity type, and time type. the ?symbol (formally, as per the previous denition, ?is a case
type, an activity type, and a time type) is used for those components that are not meant to be
restricting. consider for example the execution context (\normal case" ;?;\wednesday"). this
execution context concerns all process activities that are executed on wednesdays when handling
insurance claims from normal customers.
denition 4 (execution context) .an execution context cois an element ofco. given an event
log el = (e;att;)and an execution context co= (ct;at;tt),
[e]co=fe2ejcase(e)2'case(ct)^act(e)2'act(at)^time(e)2'time(tt)g
is the set of events in the log having that execution context.
12figure 4 illustrates the notion of execution context. in figure 4a, events are seen as data points
in a three-dimensional space capturing information on cases, activities, and time. an event may
be related to an individual resource executing an activity. in figure 4b, event attribute values on
each of the three dimensions are partitioned by some specied collection of case types, activity
types, and time types. each combination of a case type, an activity type, and a time type species
an execution context, represented as a \cube" in the data space. resources who originated events
from the same cubes may belong to the same resource group.
time
activitiescases
resources
eventevent
(a) events
time types
activity types resource s
case  
types
executioncontextexecutioncontext
 (b) execution contexts
figure 4: illustration of (a) events as data points in three-dimensional space along the dimensions of case, activity,
and time, and (b) execution contexts as \cubes" characterized by case types, activity types, and time types
4.4. organizational model
our notion of organizational model (def. 5) incorporates the concept of execution context.
while this model contains, as per usual, the resource groups ( rg) and their members ( mem ), it
further captures the involvement of resource groups in process execution, i.e., the \capabilities" of
groups, by linking groups with execution contexts ( cap).
denition 5 (organizational model) .letrbe the universe of resources, then om = (rg;
mem;cap)is an organizational model where rg is a set of resource groups, mem :rg!p (r)
maps each resource group onto its members, and cap :rg!p (co)maps each resource group
onto its possible execution contexts.
figure 5 illustrates the proposed notion of organizational model. the many-to-many relation-
ships capture the fact that a resource may belong to multiple groups and a resource group may
be associated with multiple execution contexts. formally, there may exist two distinct groups rg1
and rg2such that mem (rg1)\mem (rg2)6=?and cap(rg1)\cap(rg2)6=?.
13resources resource groups
 execution contexts
time 
types
activity typescase  
typesfigure 5: illustration of an organizational model which illustrates many-to-many relationships between resource
groups and resources and those between resource groups and execution contexts
group 0group 0 group 1group 1marymary
group 2group 2 group 3group 3
vip,⊥,⊥ vip,⊥,⊥annann
normal,⊥,⊥ normal,⊥,⊥
vip,⊥,afternoon vip,⊥,afternoon vip,⊥,morning vip,⊥,morning normal,⊥,afternoon normal,⊥,afternoon normal,⊥,morning normal,⊥,morning
normal,contact,afternoon normal,register,afternoonbobbob petepete bob pete suesue johnjohn sue john
vip,register,morningvip,register,morning
ct,at,ttct,at,tt ct,at,ttct,at,ttresource 
(group member)resource groupexecution context 
(group capability)other related
execution contextlegend
figure 6: visualization of an example organizational model related to the event log in table 2
figure 6 depicts the visualization of an example organizational model, in which dierent
colored-shapes represent resources, resource groups, and their related execution contexts, respec-
tively. for instance, \group 0" has two member resources, bob and pete, who are capable of
executing activities related to execution contexts (vip, register, morning) and (normal, register,
afternoon). these two execution contexts, as the group's capabilities, are underlined in the visu-
alization.
144.5. discovering organizational models
to discover organizational models from an event log, it is useful to view events as samples
of resource behavior in process execution [14]. we use the term resource event to denote an
event that captures a resource's involvement in some execution context. a resource-event log
(def. 6) is a multiset of resource events and represents a resource view on process execution data
through execution contexts, i.e., a resource-event log records how some resources performed certain
activities for certain cases at certain times when they participated in the execution of a process.
a resource-event log can be derived from an event log using a collection of execution contexts
(def. 7).
denition 6 (resource-event log) .a resource event is a tuple (r;co)2rco . a resource-event
log rl2b(rco )is a multiset of resource events.
denition 7 (derived resource-event log) .let el = (e;att;)be an event log and co co
be a pre-dened collection of execution contexts. the resource-event log derived from el and co
is rl (el;co) = [ (res(e);co)jco2co;e2erese2[e]co].
table 3 shows an example resource-event log derived from the event log in table 2, using
execution contexts dened based on the case types, activity types, and time types below.
•two case types are dened based on the event attribute \customer type", which distin-
guishes two groups of customers, namely normal and vip. therefore,f654423, 654424g
'case(normal) andf654425g'case(vip).
•four activity types are dened: register ,contact ,check , and decide .f\register request",
\conrm request" g 'act(register),f\get missing info", \pay claim" g 'act(contact),
f\check insurance" g'act(check),f\accept claim", \reject claim" g'act(decide);
•two time types are dened by dividing working hours in a day into two time frames, namely
morning and afternoon . therefore, timestamps of events are categorized accordingly, e.g.,
\30-08-2018 09:09" 2'time(morning), \29-08-2018 15:02" 2'time(afternoon).
note that a resource event can have multiple occurrences. for example, the rst two rows in
table 3 both refer to the same resource event (pete, normal, register, afternoon), indicating that
pete conducted an activity in the same execution context twice.
15table 3: a fragment of an example derived resource-event log
resource case type activity type time type
... ... ... ...
pete normal register afternoon
pete normal register afternoon
ann normal contact afternoon
john normal check morning
sue normal check morning
bob vip register morning
john normal decide morning
sue normal decide morning
mary vip check afternoon
mary vip decide afternoon
... ... ... ...
organizational models can be discovered from an event log based on the similarities of resources
characterized by a corresponding derived resource-event log. to do this, the following tasks need
to be addressed:
1.determine execution contexts by specifying the relevant case types, activity types, and time
types based on the input event log;
2.discover resource groupings by identifying clusters of resources who share similar behavior
in process execution according to the derived resource-event log; and
3.associate resource groups with execution contexts to describe the involvement of resource
groups in process execution.
4.6. evaluate organizational models
as discussed in the literature review, it remains an open issue how to evaluate discovered
organizational models against input event logs. we address this gap by introducing two notions
to organizational model mining, namely tness and precision (cf. [5]), and their corresponding
quantitative measures. the two notions are based on the new denition of organizational model
and provide two perspectives for assessing an organizational model with respect to an event log.
fitness. fitness evaluates the completeness [31] of a model with respect to a log, i.e., to what
degree behavior observed in the log is allowed by the model. to quantify tness, we rst introduce
the notion of conforming events (def. 8). given a log and a model, an event in the log is conforming
if its originating resource is allowed by the model to execute it. we dene a measure for tness
16(def. 9), which yields a value between 0 and 1. note that only events with resource information
(i.e., events in eres) should be considered (hence tness is only dened if there are events with
resource information in the event log).
denition 8 (conforming events) .let el = (e;att;)be an event log and om = (rg;
mem;cap)be an organizational model.
econf=
e2eres9rg2rg;co2cap(rg)[res(e)2mem (rg)^e2[e]co]	
is the set of all conforming events. enconf =eresneconfconsists of all non-conforming events.
denition 9 (fitness) .let el = (e;att;)be an event log with eres6=?. the tness of an
organizational model om with respect to event log el is
tness (el;om) =jeconfj
jeresj:
the tness between a model and a log is good when most events in the log are conforming
events. tness (el;om) = 1 if resources only performed events in elthat they were allowed to
perform according to om.tness (el;om) = 0 if no event in elwas executed by a resource
actually allowed to perform it according to om. following the denitions, all events with re-
source information in the example event log (table 2) are conforming events. hence, the example
organizational model shown in figure 6 has a tness of 1 with respect to the example event log.
precision. precision evaluates the exactness [31] of a model with respect to a log, i.e., the extent
to which behavior allowed by the model is observed in the log. to quantify precision, we propose
the notion of candidate resources (def. 10). given a log and a model, the candidate resources of
an event refer to resources in the model who are allowed to perform the event. the idea is that a
perfectly precise model allows exactly the behavior described in the log.
denition 10 (candidate resources) .let el = (e;att;)be an event log and om = (rg;
mem;cap)be an organizational model. cand :e! p (r)maps events onto sets of candidate
resources (possibly empty). for each e2e,
cand (e) =
r2r9rg2rg;co2cap(rg)[r2mem (rg)^e2[e]co]	
is the set of candidate resources for event e. cand (e) =s
e2ecand (e)is the overall set of candidate
resources.
17we also introduce the notion of allowed events (def. 11). given a log and a model, an event
in the log is an allowed event if it has at least one candidate resource in the model.
denition 11 (allowed events) .let el = (e;att;)be an event log and om = (rg;mem;cap)
be an organizational model. then eallowed =fe2eresjcand (e)6=?gis the set containing all
allowed events.
based on the above, the precision of a model with respect to an event log can be measured by
considering the fraction of resources allowed by the model to perform events in the log (def. 12).
like the tness measure, the precision measure also yields a value between 0 and 1. note that
precision is only dened if there are allowed events in an event log according to a model.
denition 12 (precision) .let el = (e;att;)be an event log and om = (rg;mem;cap)be an
organizational model, with eallowed6=?. the precision of organizational model om with respect
to event log el is
precision (el;om) =1
jeallowedjx
e2econfjcand (e)j jcand (e)j+ 1
jcand (e)j:
accordingly, precision (el;om) = 1 if and only if every allowed event in elis a conforming
event and each of them has no other candidate resource than the one who executed the event. on
the other hand, precision (el;om) = 0 if and only if none of the allowed events is a conforming
event. for instance, given the organizational model in figure 6, the rst event in the example log in
table 2 (\654423, register request, 29-08-2018 15:02, pete, normal") has two candidate resources,
bob and pete, and all events with resource information are allowed events. the precision of this
model with respect to the log is 0 :883, suggesting that the model allows some extra behavior to
happen, in addition to that recorded in the event log.
for an organizational model discovered from an event log, tness and precision can be used to
assess its quality in terms of how it captures the information recorded in the log, i.e., the reality. a
good discovered model is expected to describe the reality both completely (achieving high tness)
and exactly (achieving high precision). fitness and precision can be incorporated into a single
measure for an overall evaluation, e.g., by calculating the f1-score [31].
4.7. analyzing organizational models
in this section, we discuss how organizational models can be analyzed to examine the behavior of
resource groups. an organizational model outlines the groupings of resources and their capabilities
18in terms of process execution. we can extend a model by using event frequencies and temporal
information about cases in an event log, and thus \replay" how resource groups in the model and
their members participated in a process.
as a starting point, we introduce four quantitative measures that can be used for analyzing an
organizational model. note that all these measures only apply to events with resource information
in an event log, i.e., events in eres.
group relative focus (def. 13) species how much of the overall work by a resource group was
performed in an execution context. it can be used to measure how a resource group distributed its
workload across dierent execution contexts, i.e., work diversication of a group. note that group
relative focus is only dened if there are events executed by some member of the group.
denition 13 (group relative focus) .given event log el = (e;att;), execution contexts
co, and organizational model om = (rg;mem;cap), for any resource group rg 2rg with
fe2eresjres(e)2mem (rg)g6=?, its relative focus on execution context co 2co can be mea-
sured by
relfocus (rg;co) =jfe2[eres]cojres(e)2mem (rg)gj
jfe2eresjres(e)2mem (rg)gj:
group relative stake (def. 14) species how much of work performed in an execution context was
done by a resource group. it can be used to measure how the workload devoted to an execution
context was distributed across dierent resource groups in an organizational model, i.e., work
participation by the groups. note that group relative stake is only dened if there are events
having the execution context.
denition 14 (group relative stake) .given event log el = (e;att;), execution contexts co,
and organizational model om = (rg;mem;cap), for any resource group rg 2rg, its relative
stake in execution context co 2co, with [eres]co6=?, can be measured by
relstake (rg;co) =jfe2[eres]cojres(e)2mem (rg)gj
j[eres]coj:
group coverage (def. 15) species the proportion of members of a resource group that performed
in an execution context. note that group coverage is only dened if there are resources in the
resource group.
denition 15 (group coverage) .given event log el = (e;att;), execution contexts co, and
organizational model om = (rg;mem;cap), for any resource group rg 2rg with mem (rg)6=?,
19the proportion of group members covered by execution context co 2co can be measured by
cov(rg;co) =
r2mem (rg)9e2[eres]cores(e) =r	
jmem (rg)j:
group member contribution (def. 16) species how much work conducted in an execution
context by a group was performed by a specic group member. it can be used to measure how a
group's workload related to an execution context was distributed across its members. note that
group member contribution is only dened if there are events executed by some member of the
resource group in the execution context.
denition 16 (group member contribution) .given event log el = (e;att;), execution con-
texts co, and organizational model om = (rg;mem;cap), for resource group rg 2rg and
execution context co 2co, withfe2[eres]cojres(e)2mem (rg)g6=?, the contribution of a
group member r2mem (rg)can be measured by
memcontr (r;rg;co) =jfe2[eres]cojres(e) =rgj
jfe2[eres]cojres(e)2mem (rg)gj:
consider the example organizational model in figure 6. for resource group \group 0" and one
of its capabilities (vip, register, morning), we have:
•relfocus (\group 0" ;(vip, register, morning)) = 0 :333,
•relstake (\group 0" ;(vip, register, morning)) = 1 :0,
•cov(\group 0" ;(vip, register, morning)) = 0 :5, and
•memcontr (bob;\group 0";(vip, register, morning)) = 0,
•memcontr (pete;\group 0";(vip, register, morning)) = 1 :0.
as shown above, resources in \group 0" devoted 33% of their total workload (indicated by
relfocus ) to carrying out activities related to \registering requests for vip cases in the morning";
\group 0" is the only group that contributed to such work (indicated by relstake ) in the process;
only 50% of the group members (indicated by cov) actually participated in this type of work,
and that is resource pete (indicated by memcontr ). furthermore, these model analysis measures
can also be used to \diagnose" the dierences between an organizational model and a log. in the
example organizational model, we can nd that \group 0" is the only one that has a comparatively
20low group coverage in terms of its capabilities | the model considers both of its members, bob
and pete, capable of performing in both execution contexts, but the event log does not show such
behavior. this explains the imperfect precision (0 :883). also, if the example model is a discovered
model, then the revealed dierences can inform how to improve the discovery method.
5. approach
5.1. design of approach
figure 7 shows an overview of our approach to realize the proposed ordinor framework. first,
an event log with the standard attributes ( case,act,time) and resource information ( res) is used as
input for learning a set of execution contexts. a resource-event log can then be derived and utilized
for discovering resource groups. next, the discovered resource groups are \proled" using execution
contexts to describe the group capabilities in process execution. finally, an organizational model is
constructed and subsequently evaluated and analyzed by applying the measures in the framework.
event 
logresource -event 
loglearn 
execution 
contextsdiscover 
resource 
groupsresource 
groupsprofile 
resource 
groupsorganizational  
modelevaluate 
discovered
models
analyze
discovered
models
figure 7: an overview of how to use the ordinor framework
learning execution contexts. execution contexts can be determined directly if prior knowledge
about the categorization of cases, activities, and time periods is available. for instance, managers
can decide time types based on the seasonal patterns of how employees work.
when such knowledge is limited, there are process mining techniques that can be applied to
automatically learn a meaningful collection of case types, activity types, and time types. examples
include mining local process models [32] to nd subsets of process activities representing frequent
patterns (informing activity types), and using trace clustering [33] to nd coherent sets of cases
21(informing case types). however, deriving a general method for learning execution contexts is a
far from trivial problem. for validation purposes, we discuss three approaches.
1.atonly considers only activity types and denes each activity label as an activity type. the
other two dimensions are omitted, i.e., all events will have the special type ?as the case
type and time type (see def. 3). atonly can be applied as a basic solution, since activity
information is standard for event logs.
2.ct+at+tt (case attribute) denes each activity label as an activity type and species time
types according to the seven week days, i.e., time types will be \monday", \tuesday", etc.
case types are dened based on a selected case attribute that is meaningful for distinguishing
between dierent variants of cases in an input event log.
3.ct+at+tt (trace clustering) is similar to the foregoing approach, except that case types
are dened by applying context-aware trace clustering [33]. trace clustering assigns a cluster
label to each case and this label is considered the case type for all events in the case.
discovering resource groups. resource groups are discovered by identifying resources with simi-
lar behavior according to a resource-event log derived from the previous step. to this end, we
rst build a set of features from a derived resource-event log to characterize individual resource
behavior. we consider the variety of execution contexts in which a resource worked and the oc-
currences of resource events. as a result, we can construct a feature matrix [31] where each row
corresponds to a resource, each column corresponds to an execution context, and each entry value
denotes the number of occurrences of the resource event. table 4 shows an example feature matrix
characterizing the behavior of six resources.
with a resource feature matrix, we can address the task of identifying similar resources by
applying established cluster analysis techniques in data mining [31]. in our validation, we adopt ag-
glomerative hierarchical clustering ( ahc) [31] and model-based overlapping clustering ( moc ) [34].
ahc results in disjoint resource groups and moc results in potentially overlapping groups.
proling resource groups. the nal step is to prole each discovered resource group with a set of
relevant execution contexts characterizing the group's capabilities in process execution.
we rst consider a strategy, namely fullrecall , which accounts for all historical behavior by any
member of a resource group. given a derived resource-event log rl(el;co), the set of execution
22table 4: an example resource feature matrix related to the example resource-event log in table 3. note that a
resource feature matrix in practice will usually have more rows and columns
resource(normal, (normal, (normal, (vip, (normal, (vip, (vip,
register, contact, check, register, decide, check, decide
afternoon) afternoon) morning) morning) morning) afternoon) afternoon)
ann 0 1 0 0 0 0 0
bob 0 0 0 1 0 0 0
john 0 0 1 0 1 0 0
mary 0 0 0 0 0 1 1
pete 2 0 0 0 0 0 0
sue 0 0 1 0 1 0 0
contexts for proling a group rgis
cap(rg) =
co2co9r2mem (rg)(r;co)2rl(el;co)	
:
applying this denition, a resulting organizational model will capture all observed behavior recorded
in the log and will thus achieve the best tness. however, the use of fullrecall risks linking a re-
source group with an excessive number of execution contexts. this is because fullrecall considers
every resource event related to any group member, even if that event may represent rare behavior.
hence, we introduce another strategy overallscore that ranks execution contexts according to
how frequent and how popular they are with respect to the members of a resource group. if the
process activities within an execution context were mostly taken by a specic group, or by the
majority of members in a group, then this execution context is likely associated with the group.
overallscore can be formalized as selecting execution contexts based on the weighted average of
two model analysis measures, group relative stake and group coverage , i.e.,
cap(rg) =fco2coj!1relstake (rg;co) +!2cov(rg;co)g;
whereis a threshold in range (0 ;1), and!1;!2are non-negative weights satisfying !1+!2= 1.
applying overallscore links a resource group to only its most relevant execution contexts and
hence leads to models with relatively balanced tness and precision.
table 5 presents an example of applying these two strategies to prole a group with two
resources, john and sue.
23table 5: an example of proling a resource group with two members, applying both fullrecall and overallscore
(!1=!2= 0:5;= 0:8)
mem (rg)cap(rg) cap(rg)
(applying fullrecall ) (applying overallscore )
\john", \sue"(normal, check insurance, thursday)
(normal, check insurance, thursday) (normal, accept claim, thursday)
(normal, reject claim, thursday)
5.2. implementation
we developed an open-source software tool implementing the approach above. it consists of (1)
an extensible python library2and (2) a web-based application3, enabling users to perform organi-
zational model mining tasks and visualize the outcomes. the tool was built following a modular
design and therefore can be extended to integrate new methods and measures for organizational
model mining in the future.
6. experiments
we conducted extensive experiments with the aim to demonstrate how organizational models
can be discovered from event log data by applying our approach, and how those models can be
evaluated and analyzed using the proposed measures in the framework.
6.1. experiment dataset
two real-life event logs were used for experiments, which are both publicly available online.
the rst log (wabo4) records the receipt phase of a building permit process in an anonymous
dutch municipality. the second log (bpic175) records data related to a loan application process
in a dutch nancial institute. both of them satisfy the basic requirements for event logs dened
previously, containing case identiers, activity labels, timestamps, and resource information. in
addition, they also carry several case-level attributes, such as the one recording loan purposes in
bpic17.
2the ordinor library: https://royjy :me/to/ordinor
3web-based tool for organizational model mining: https://royjy :me/to/arya
4`wabo', coselog project: https://doi :org/10:4121/uuid:a07386a5-7be3-4367-9535-70bc9e77dbe6
5bpi challenge 2017: https://doi :org/10:4121/uuid:5f3067df-f10b-45da-b98b-86ae4c7a310b
24to obtain the experiment dataset, we preprocessed the original logs to lter out redundant
event data, keeping only events recording the completion of activities. this ltering step ensures
that each activity instance in process execution is counted exactly once. table 6 reports the basic
statistics of the preprocessed event log dataset.
table 6: basic statistics of the preprocessed event logs for experiments
log #cases #events #activities #resources
wabo 1,434 8,577 27 48
bpic17 31,509 475,306 24 144
6.2. experiment setup
the approach designed for validation (section 5.1) includes several alternative methods at
each intermediate step of model discovery. in the experiments, we tested all combinations of
these alternatives. figure 8 depicts an overview of the experiment setup | each organizational
model is discovered using a selected execution contexts learning method, a resource groups dis-
covery method, and a resource groups proling method, respectively. discovered models are then
evaluated and analyzed.
wabo 
logatonly
ct+at+tt
(case attribute)ahc
mocfull
recall
evaluate
organizational
model
overall
score
ct+at+tt
(trace clustering)analyze
organizational
model
bpic17 
log
figure 8: an overview of the experiment setup: each path in the graph species a selection of methods applied on
an input event log
combining all these alternatives resulted in a considerable number of organizational models to
be discovered, evaluated, and analyzed. therefore, we applied the principles of scientic workow
to eciently conduct the experiments. the use of scientic workow also benets future research
25that wishes to replicate or modify our experiments. the following shows how we congured the
methods at each intermediate step in model discovery6.
in terms of methods for learning execution contexts, atonly requires no specic conguration.
forct+ at+tt (case attribute) , we selected the attribute recording the channel of environmental
permit application for log wabo, and the attribute recording the loan purpose of applicants for
log bpic17. for ct+at+tt (trace clustering) , we applied the original congurations in the paper
of bose and van der aalst [33].
in terms of discovering resource groups, we applied the same conguration for both clustering
techniques, ahc and moc . the euclidean distance was selected as the proximity measure, and
the number of resource groups (clusters) was decided by using cross-validation [31], in which the
potential group number was tested between 2 and 10.
in terms of proling resource groups, fullrecall requires no specic conguration. for over-
allscore , we performed a grid search within the range [0 :1;0:9] using a search step of 0 :1 to determine
the weights ( !1and!2) and the threshold ( ).
6.3. results and findings
6.3.1. model evaluation and comparison
in the experiments, we discovered and evaluated a total of 24 organizational models (12 per
log). we compared models discovered from the same event log to investigate how dierent model
discovery methods impact model quality. the baseline models used in the comparisons were the
ones with the highest f1-scores (the best quality), as shown in table 7.
table 7: discovered models with the best quality used as baselines in the comparisons
log congurationmodel statistics evaluation
#execution contexts #groups tness precision f1
wabo cat (tc) moc os 307 9 0 :876 0 :577 0:696
bpic17 cat (tc) ahc os 1884 10 0 :831 0 :641 0:724
conguration: cat = ct+at+tt , tc = trace clustering ; os = overallscore
we compared between three sets of discovered organizational models with respect to the three
steps in model discovery. note that models in the same set dier only in terms of the method
6details of experiment conguration can be found here: https://royjy :me/to/om2-experiments
26table 8: comparing models discovered from applying atonly ,ct+at+tt (case attribute) , orct+at+tt (trace
clustering) for learning execution contexts
log congurationmodel statistics evaluation
#execution contexts #groups tness precision f1
waboatonly
moc os27 9 0 :947 0 :407 0:569
cat (ca) 263 9 0 :843 0 :448 0:586
cat (tc) 307 9 0 :876 0:577 0:696
bpic17atonly
ahc os24 10 0 :923 0 :530 0:673
cat (ca) 2020 10 0 :810 0 :629 0:708
cat (tc) 1884 10 0 :831 0:641 0:724
conguration: cat = ct+at+tt , ca = case attribute , tc = trace clustering ; os = overallscore
applied for that particular step. in the following tables, results of the baseline models are underlined
to aid comparisons.
learning execution contexts. (table 8) models produced from applying atonly have a higher tness
compared to the baseline. this is because applying atonly led to a relatively coarser collection of
execution contexts, thus related the same number of events to fewer execution contexts. conse-
quently, more events can be t by a model. however, model precision was harmed due to having
excessive candidate resources for events.
on the other hand, comparing between models generated from using ct+ at+tt (case at-
tribute) andct+at+tt (trace clustering) , we can observe that the latter ones have comparatively
higher values in both tness and precision. this indicates using a trace clustering technique can
lead to more reasonable case types, which better capture the categorization of dierent cases in
comparison to relying on a single case attribute.
discovering resource groups. (table 9) the baseline models produced from applying moc have
higher tness but lower precision, compared to those from ahc. this is expected, because resource
groups discovered using moc can be overlapped, whereas the ahc ones are disjoint. when groups
are overlapped, a resource can be a member of more than one group, and can thus be linked with
more execution contexts. as a result, models with overlapping groups can potentially t more
events (increasing tness) but link excessive candidate resources to events (reducing precision).
proling resource groups. (table 10) using fullrecall resulted in models with perfect tness, but
this method sacrices much precision, because resource groups are usually linked with a large
number of irrelevant execution contexts. this is similar to the concept of \ower models" [5]
27table 9: comparing models discovered from applying ahc ormoc for discovering resource groups
log congurationmodel statistics evaluation
#execution contexts #groups tness precision f1
wabo cat (tc)ahcos307 9 0 :815 0 :595 0:687
moc 307 9 0 :876 0:577 0:696
bpic17 cat (tc)ahcos1884 10 0 :831 0:641 0:724
moc 1884 8 0 :957 0 :406 0:571
conguration: cat = ct+at+tt , tc = trace clustering ; os = overallscore
table 10: comparing models discovered from applying fullrecall oroverallscore for proling resource groups
log congurationmodel statistics evaluation
#execution contexts #groups tness precision f1
wabo cat (tc) mocfr 307 9 1 :000 0 :067 0:125
os 307 9 0 :876 0:577 0:696
bpic17 cat (tc) ahcfr 1884 10 1 :000 0 :169 0:290
os 1884 10 0 :831 0:641 0:724
conguration: cat = ct+at+tt , tc = trace clustering ; fr = fullrecall , os = overallscore
in process model discovery. on the other hand, the baseline models (applying overallscore ) have
better precision while maintaining moderate tness, since execution contexts were selectively linked
to resource groups based on frequency and popularity.
conclusion. fitness and precision proposed in our framework can provide a generic and consistent
basis for evaluating organizational models discovered using dierent mining algorithms, which
fullls the vital missing part of model evaluation in the state-of-the-art.
6.3.2. model diagnosis
in the experiments for model analysis, we selected a discovered model with the lowest f1-score
(the worst quality overall) and used the model analysis measures to identify the possible reasons.
this model was derived from log wabo applying ct+at+tt (case attribute) -moc -fullrecall . it
consists of 48 resources in 9 groups with overlaps and has tness = 1 :0, precision = 0 :036, and
f1-score = 0 :069. the perfect tness and poor precision of this model imply that some resource
groups and execution contexts were inappropriately linked during discovery, causing certain events
in the log to have excessive candidate resources (def. 10). to identify such groups and execution
contexts, we applied the group relative stake (def. 14) and group coverage (def. 15) measures.
28group relative stake can reveal whether a group had only little contribution to an execution
context, while group coverage can reveal whether only a small number of group members were
involved in an execution context.
table 11 presents the average values of the two measures for each group in the model, along
with the rankings of groups based on those values. we can tell that \group 3" is the one with the
comparatively lowest group relative stake and group coverage among all groups.
table 11: average group relative stake and group coverage of the resource groups in the selected model
resource#members#execution average rank of avg. average rank of avg.
group contexts group relative stake group relative stake group coverage group coverage
group 0 1 68 0 :220 9 1 :000 1
group 1 3 133 0 :280 7 0 :569 3
group 2 37 234 0 :684 1 0 :124 9
group 3 6 128 0 :306 6 0 :359 6
group 4 5 151 0 :355 4 0 :440 4
group 5 2 122 0 :236 8 0 :693 2
group 6 5 150 0 :350 5 0 :405 5
group 7 12 209 0 :476 2 0 :285 8
group 8 8 203 0 :407 3 0 :330 7
we therefore focused on \group 3" by investigating all its associated execution contexts. the
box plots in figure 9 summarize the distributions of group relative stake and group coverage values,
respectively. figure 9a shows that, in half of its associated 128 execution contexts, \group 3"
contributed a fair amount of work (more than 22 :2%). however, figure 9b indicates that most
execution contexts involved no more than half of the group members ( q3= 0:5). more specically,
the median value (0 :167, or 1=6) indicates that the work in these execution contexts was performed
by only one group member.
0.0 0.2 0.4 0.6 0.8 1.00.222
 q1 = 0.139  median = 0.222    q3 = 0.441
(a) group relative stake
0.0 0.2 0.4 0.6 0.8 1.0q1 = median = 0.167        q3 = 0.5 (b) group coverage
figure 9: distributions of group relative stake and group coverage of \group 3"
we concluded from the results that the selected low-quality model over-generalized the capa-
bility of \group 3", linking the group with execution contexts that were only specic to a small
number of group members. we furthered our analysis by examining individual execution contexts
29and individual group members of \group 3". table 12 shows the bottom-ve execution contexts
with the lowest group relative stake and group coverage. the group relative stake values indicate
that less than 5% of the total work performed in these execution contexts was actually committed
by resources from \group 3". moreover, for each of the execution contexts, only 1 of 6 group
members performed the work, as indicated by group coverage.
table 12: execution contexts linked to \group 3" with the lowest group relative stake and group coverage
execution contextgroup group member
relative stake coverage contribution
(ct.desk, at.conrmation of receipt-complete, tt.4) 0 :034 0 :167 resource 21 (100%)
(ct.desk, at.t02 check conrmation of receipt-complete, tt.4) 0 :037 0 :167 resource 19 (100%)
(ct.desk, at.conrmation of receipt-complete, tt.2) 0 :040 0 :167 resource 18 (100%)
(ct.desk, at.t06 determine necessity of stop advice-complete, tt.1) 0 :045 0 :167 resource 18 (100%)
(ct.desk, at.t02 check conrmation of receipt-complete, tt.3) 0 :048 0 :167 resource 19 (100%)
conclusion. the above analyses can be replicated on other resource groups and their associated
execution contexts in the selected model. we can therefore extend our previous model evaluation
through explaining the discrepancies between the model and the actual behavior in the log.
7. discussion
7.1. threats to validity
the rst concern is internal validity. event logs | however extensive and detailed | can only
capture certain information about actual business processes, the participating employees, or their
organizations. hence, confounding factors may exist in terms of how employees are organized into
groups and involved in process execution. but these factors are not reected by organizational
models discovered from event logs. clearly, without additional inputs, knowledge discovered from
a set of data can hardly transcend the scope of the original data collection. therefore, to mitigate
the impact of confounding factors, it is vital to understand the scope and characteristics of event
logs and their corresponding processes when applying our approach and interpreting the outputs.
another concern is external validity. while the selected techniques and data are suitable exam-
ples of the respective artifacts in our research, experimental results are prone to few circumstances
and therefore may not be generalized easily. also, the results may risk being biased due to the
specicity of the selected techniques and data. to address these limitations, it is essential to rst
30explore the congurability of the ordinor framework. we used rigorous formalization to dene
the requirements for event log data used in the framework. we have also outlined the key tasks
of discovering organizational models, which provide initial criteria for selecting or developing the
corresponding techniques. besides, in the experiments we have shown how data mining techniques,
e.g., cross-validation and grid search, can be useful for conguring specic parameters in the pro-
posed approach. based on the above, an extensive benchmark can be performed in future work
using more event logs from dierent contexts and applying a wider variety of techniques to study
the impact of various congurations. also, articial data from process simulation can be included
as a complement to real-life data to cover unusual scenarios. still, proper conguration of the
framework and the approach requires understanding the context of input data, and may need to
be conducted case by case. finally, it is worth noting that experimentation is inevitably limited
when investigating how to apply the framework to real problems | future evaluations need to
involve case studies in real-world organizations.
7.2. future work
in addition to those immediate next steps outlined above, there are many possibilities for future
research opened up by the ordinor framework. among others, we highlight the conformance
checking of organizational models , i.e., comparing the modeled-behavior with the real-behavior as
reected in event logs [5]. to begin with, organizational models are constructed from existing
employee groupings, such as departments, business roles, and project teams. this can be done
by identifying (1) employee groups and their members involved in process execution, and (2)
the patterns or rules regarding how process activities are performed based on the grouping. data
other than event logs may be needed, e.g., documents about work distribution rules and timetables
showing employee shifts.
then, given an organizational model, either discovered or based on existing employee groups,
conformance checking can be performed. more specically, tness and precision in the ordinor
framework can be used for global conformance checking | measuring the extent of commonalities
between the modeled and actual behavior of human resource groups. the model analysis measures,
e.g., group coverage, can be used for local conformance checking | showing where and how the
modeled human resource groups dier from reality.
hence, combining conformance checking with organizational model mining capability, the or-
dinor framework lays the foundation for systematically exploiting process execution data to guide
31the design of organizational structures (covering, e.g., role designation and employee team com-
position) and sta deployment alongside changing business processes. organizations can thus be
empowered to evolve organizational structures toward process improvement, and to iteratively
evaluate their decisions to enhance coordination, team eectiveness, and work satisfaction. to
support this capacity-building, future work can investigate additional information needed in event
logs to measure those goals.
8. conclusion
we have proposed a framework based on a new denition of organizational models in the context
of business processes. compared to existing research, our organizational models establish a linkage
from human resources via resource groups to activities, case types, and time periods, and can
thus describe the involvement of resource groups in process execution. another aspect of novelty
concerns the model evaluation and analysis measures for organizational models. these measures
contribute a rigorous and generic means for assessing the quality of discovered organizational
models, and support for understanding the actual behavior of groups and their members in process
execution. furthermore, our framework opens the door to conformance checking of organizational
models and can therefore bridge process analytics with analyses on organizational structures.
acknowledgments
the reported research is part of a phd project supported by an australian government research
training program (rtp) scholarship. we thank the alexander von humboldt (avh) stiftung for
supporting our research. this work is also supported by the national natural science foundation
of china (nsfc) under grants no. 61972427 and u20a6003, and by the research foundation of
science and technology plan project in guangdong province under grant no. 2020a0505100030.
references
[1] m. dumas, m. l. rosa, j. mendling, h. a. reijers, fundamentals of business process man-
agement, 2nd edition, springer publishing company, incorporated, 2018.
[2] r. l. daft, j. murphy, h. willmott, organization theory and design, cengage learning, 2010.
[3] t. h. davenport, j. harris, j. shapiro, competing on talent analytics, harvard business
review 88 (10) (2010) 52{58.
32[4] a. pika, m. leyer, m. t. wynn, c. j. fidge, a. h. m. ter hofstede, w. m. p. van der aalst,
mining resource proles from event logs, acm trans. manage. inf. syst. 8 (1) (2017) 1:1{1:30.
[5] w. m. p. van der aalst, process mining: data science in action, springer, berlin, 2016.
[6] m. song, w. m. p. van der aalst, towards comprehensive support for organizational mining,
decis. support syst. 46 (1) (2008) 300{317.
[7] s. sch onig, c. cabanillas, s. jablonski, j. mendling, a framework for eciently mining the
organisational perspective of business processes, decis. support syst. 89 (2016) 87{97.
[8] a. appice, towards mining the organizational structure of a dynamic event scenario, journal
of intelligent information systems 50 (1) (2018) 165{193.
[9] j. yang, c. ouyang, m. pan, y. yu, a. h. m. ter hofstede, finding the \liberos": dis-
cover organizational models with overlaps, in: international conference on business process
management (bpm 2018), springer, 2018, pp. 339{355.
[10] a. burattin, a. sperduti, m. veluscek, business models enhancement through discovery of
roles, in: ieee symposium on computational intelligence and data mining (cidm), 2013,
pp. 103{110.
[11] w. m. p. van der aalst, h. a. reijers, m. song, discovering social networks from event logs,
computer supported cooperative work 14 (6) (2005) 549{593.
[12] d. r. ferreira, c. alves, discovering user communities in large event logs, in: international
conference on business process management, 2011, pp. 123{134.
[13] r. liu, s. agarwal, r. r. sindhgatta, j. lee, accelerating collaboration in task assignment
using a socially enhanced resource model, in: international conference on business process
management (bpm 2013), springer, 2013, pp. 251{258.
[14] l. t. ly, s. rinderle, p. dadam, m. reichert, mining sta assignment rules from event-
based data, in: international conference on business process management workshops (bpm
2005), springer, 2005, pp. 177{190.
[15] z. huang, x. lu, h. duan, mining association rules to support resource allocation in business
process management, expert syst. appl. 38 (8) (2011) 9483{9490.
[16] j. nakatumba, w. m. p. van der aalst, analyzing resource behavior using process mining,
in: international conference on business process management, springer, 2009, pp. 69{80.
[17] s. suriadi, m. t. wynn, j. xu, w. m. p. van der aalst, a. h. m. ter hofstede, discovering
work prioritisation patterns from event logs, decis. support syst. 100 (2017) 77{92.
33[18] t. jin, j. wang, l. wen, organizational modeling from event logs, in: international confer-
ence on grid and cooperative computing (gcc 2007), 2007, pp. 670{675.
[19] j. ye, z. li, k. yi, a. abdulrahman, mining resource community and resource role network
from event logs, ieee access 6 (2018) 77685{77694.
[20] a. baumgrass, deriving current state rbac models from event logs, in: international
conference on availability, reliability and security (ares 2011), 2011, pp. 667{672.
[21] w. zhao, q. lin, y. shi, x. fang, mining the role-oriented process models based on genetic
algorithm, in: international conference on advances in swarm intelligence (icsi 2012),
springer, 2012, pp. 398{405.
[22] z. ni, s. wang, h. li, mining organizational structure from workow logs, in: international
conference on e-education, entertainment and e-management (iceeem), 2011, pp. 222{225.
[23] m. li, l. liu, l. yin, y. zhu, a process mining based approach to knowledge maintenance,
information systems frontiers 13 (3) (2011) 371{380.
[24] c. hanachi, w. gaaloul, r. mondi, performative-based mining of workow organizational
structures, in: international conference on e-commerce and web technologies (ec-web
2012), springer, 2012, pp. 63{75.
[25] r. sellami, w. gaaloul, s. moalla, an ontology for workow organizational model mining,
in: ieee international workshop on enabling technologies: infrastructure for collaborative
enterprises (wetice 2012), 2012, pp. 199{204.
[26] l. bouzguenda, m. abdelka, an agent-based approach for organizational structures and
interaction protocols mining in workow, soc. netw. anal. min. 5 (1) (2015) 10:1{10:22.
[27] k. peers, t. tuunanen, m. a. rothenberger, s. chatterjee, a design science research
methodology for information systems research, j. manag. inf. syst. 24 (3) (2007) 45{77.
[28] a. r. hevner, s. t. march, j. park, s. ram, design science in information systems research,
mis quarterly: management information systems 28 (1) (2004) 75{105.
[29] w. zhao, x. zhao, process mining from the organizational perspective, in: foundations of
intelligent systems, springer, 2014, pp. 701{708.
[30] w. m. p. van der aalst, process cubes: slicing, dicing, rolling up and drilling down event data
for process mining, in: m. song, m. t. wynn, j. liu (eds.), asia pacic business process
management, springer international publishing, cham, 2013, pp. 1{22.
[31] j. han, j. pei, m. kamber, data mining: concepts and techniques, elsevier, 2011.
34[32] n. tax, n. sidorova, r. haakma, w. m. p. van der aalst, mining local process models, j.
innovation digital ecosyst. 3 (2) (2016) 183{196.
[33] r. p. j. c. bose, w. m. p. van der aalst, context aware trace clustering: towards improving
process mining results, in: siam international conference on data mining, society for
industrial and applied mathematics, 2009, pp. 401{412.
[34] a. banerjee, c. krumpelman, j. ghosh, s. basu, r. j. mooney, model-based overlapping
clustering, in: acm sigkdd international conference on knowledge discovery in data
mining, 2005, pp. 532{537.
35
view publication stats