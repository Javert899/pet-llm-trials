context-aware compliance checking
jan martijn van der werf, eric verbeek, and wil m.p. van der aalst
department of mathematics and computer science
technische universiteit eindhoven
p.o. box 513, 5600 mb eindhoven, th e netherlands
{j.m.e.m.v.d.werf,h.m.w.verbeek,w.m.p.v.d.aalst }@tue.nl
abstract. organizations face more and more the burden to show that
their business is compliant with respect to many diﬀerent boundaries.the activity of compliance checking is commonly referred to as auditing.
as information systems supporting the organization’s business record
their usage, process mining techniques such as conformance checkingoﬀer the auditor novel tools to automate the auditing activity. however,
these techniquestendtolook atprocess instances (i.e., cases) inisolation,
whereas many compliance rules can only be evaluated when consideringinteractions between cases and contextual information. for example, arule like “a paper should not be reviewed by a reviewer that has been
a co-author” cannot be checked without considering the corresponding
context (i.e., other papers, other issues, other journals, etc.). to checksuch compliance rules, we link event logs to the context. events modify
a pre-existing context and constraints can be checked on the resulting
context. the approach has been implemented in prom. the resultingcontextis representedas anontology, andthesemantic web rulelanguage
is used to formalize constraints.
keywords: auditing, compliance checking, process mining, business
rules, ontologies.
1 introduction
organizations need to ensure that their business stays within boundaries. a
boundary restricts the organization in its operation. boundaries may be imposed
by all kinds of externalsources,like legislation,regulatorybodies, best practices,
but also from sources within the organization itself, e.g., based on its corporateculture or management style. these boundaries are often expressed in terms
of the business environment, called the context. a boundary may restrict the
business in behavior,i nstructure ,o ri n data.
as a consequence, organizations need to constantly monitor their business.
the activity of checking whether the business execution adheres to the deﬁnedboundaries is called auditing. traditionally, an audit can only provide reasonable
assurancethatthe businessis compliant , i.e., thatthe businessis executedwithin
the given boundaries. auditors can only assess the operating eﬀectiveness bychecking samples of factual data.
a. barros, a. gal, and e. kindler (eds.): bpm 2012, lncs 7481, pp. 98–113, 2012.
c/circlecopyrtspringer-verlag berlin heidelberg 2012context-aware compliance checking 99
theadvanceofinformationsystemssupportingorganizationsintheirbusiness
enablesanewformofauditing.thelargeamountofdatarecordedbythesesystemsallow to constantly monitor the business execution. continuous auditing [21,25]
focusestobringauditingclosertotheoperationalprocess,andawayfromthetra-
ditionalbackward-lookingonce-a-yearexaminationof ﬁnancialstatements [6].
continuous auditing is an automated form of auditing that can take all execu-
tion data into account [6,11,25]. as such, this form of auditing can provide more
assurance. however in order to automate the process of auditing [4,7,16], it ﬁrst
requires the formalization of the boundaries in terms of the execution data, and
secondly, it can only use context dat a if an automated link is provided from the
execution data to the context data . as the boundaries are typically formalized in
terms ofthe context data, and as the automated link from execution datato con-
text data is typically not available, continuous auditing is restricted in its use.
consider a journal that publishes papers. to support the journal’s operation,
itmayuseasystemthat supportstheentireprocessstartingfromthesubmission
of a paper to the ﬁnal publication or rej ection. this system typically records
everything that happens to a submitted paper into a so-called event log .n e x t
to this process-aware information system (pais) [10], other systems may also
collect and store data about this paper. in the remainder of this paper, this
other data is referred to as context data ,w h i l et h ep a i sd a t ai sr e f e r r e dt oa s
execution data .
to insure the quality of published papers, a journal needs to discourage un-
desirable behavior. therefore, most journals impose a number of boundaries on
its own operation to guarantee this high quality:
1. for each submitted paper a notiﬁcation is sent;
2. each paper needs to be reviewed by at least three diﬀerent reviewers;
3. the author of a paper cannot be a reviewer of that paper;
4. a reviewer should work at a diﬀerent aﬃliation than any of the authors;
5. a reviewer has never been a co-author with any of the authors;
to check whether the journal indeed respects these boundaries, auditsare used.
however, in practical situations, auditing can only be done on a small part of
the available data. hence auditing is incomplete. this may lead, for example, to
a paper being rejected by a reviewer which has a conﬂict of interest, while thisconﬂict does not get noticed.
thispaperproposesalinkfromexecuti ondatatocontextdata,whichremoves
some of these restrictions on continuous auditing. as a result of this link, we canbring the execution data to the context data, which allows automated checking
of the boundaries and automated linking with other context data.
please note that although we use a journal to explain the issues at hand,
the proposed approach can be used in any other compliance setting. it oﬀers a
generic approach for the problem that continuous auditing is restricted to theavailable execution data.
this paper is organizedas follows. sec. 2 introduces the necessary concepts on
which our approach is based. next, sec. 3 presents our approach how to link the100 j.m. van der werf, e. verbeek, and w.m.p. van der aalst
context data with execution data. sec. 4 shows the applicability of the approach
with a proof of concept, using both existing tools as developing our own. last,sec. 5 concludes this paper and hints at possible future directions.
2b a s i c n o t i o n s
2.1 business context
the environment in which an organization like the journal operates is called
itscontext. the context is “the combination of all situational circumstances
that impact process design and execution ” [18], and describes the concepts that
inﬂuence and bound the business of an organization and the relations between
these concepts.
in this paper, we use the notion of a context model ,w h i c hc a nb ev i e w e da sa
data model, e.g., using uml class diagrams, the relational database schema or
entity-relationshipdiagrams(erd).acontextmodeldeﬁnesthe concepts,their
relationships ,an dt h e i r attributes .conceptscaninheritfromotherconcepts,have
diﬀerent relationships and diﬀerent attributes. a relationship is from a source
concept to a targetconcept, where a cardinality can be associated to both these
concepts. let adenote the attribute name universe .
deﬁnition 1 (context model). acontext model is a 6-tuple (o,α,ι,r,σ,τ)
where
–ois a set of concepts ;
–α:o→p(a)is a function deﬁning for each concept the set of attributes;
–ι:o/arrowrighttophalfp(o)is a partial function deﬁning the inheritance relation. if for a
concepta∈o ab∈o exists such that b∈ι(a),w es a y bis aparent of
a. the transitive closure of ιhas to be irreﬂexive;
–r⊆o×a×o is a set of relationships between concepts such that if
{(a,l,b 1),(a,l,b 2)}⊆r impliesb1=b2. given a relationship r=
(a,l,b)∈r,ais called the source ofr,bis called the target ofr,a n dl
is called the name ofr;
–σ:r→(n×(n∪ {∗}))deﬁnes the source cardinality (lower bound and
upper bound) of each relationship;
–τ:r→(n×(n∪{∗}))deﬁnes the target cardinality of each relationship.
for inheritance, we do not allow overriding of attributes and relationships, i.e.,
for allb∈ι+(a)andl∈a thatα(a)∩α(b)=∅and if(b,l,·)∈r ,t h e n
(a,l,·)/negationslash∈r,w h e r eι+is the transitive closure of ι.
an example context model for the journal (using an uml class diagram) is de-
pictedinfig.1.inthis examplecontextmodeltherearesixconcepts(aﬃliation,author, journal, paper, researcher, and reviewer), six relationships (authors,
is
submitted
 to, reviews, works
 at, and two unnamed inheritance relations), and
nine attributes (abstract, notiﬁcationdate, name, number, publicationdate, sub-missiondate, title, volume, and year). the works
at relation indicates that eachcontext-aware compliance checking 101
researcher is connected to exactly one aﬃliation and that an aﬃliation is con-
nected to multiple (possibly none) resear chers. likewise, the reviews relation
indicates that a paper is connected to multiple (possibly none, if not under re-
view) reviewers, and that a reviewer is connected to at least one paper, and
the authors relation indicates that an author is connected to at least one paper,and a paper to at least one author. a res earcher can both write papers as well
as review those. therefore, the author a nd reviewer concepts inherit from the
researcher concept.
a context model can be instantiated , i.e., the context model can be popu-
lated with instances of each concept, an d associations between these instances,
reﬂecting the relationships deﬁned on the concepts in the model. let udenote
theconcept instance universe , i.e., the set of all possible concept instances, and
letvbe the attribute value universe .
deﬁnition 2 (instance of a context model). an instance of a context model
m=(o,α,ι,r,σ,τ)is a 3-tuple (i
o,ia,ir)where
–io:o→p(u)deﬁnes the available concept instances . each concept has a,
possibly empty, set of instances;
–ia:(u×a)→p(v)deﬁnes for each concept instance and attribute the
corresponding set of attribute values ;
–ir:r→p(u×u)is the set of associations between concept instances.
leta,b∈o be two concepts, let l∈α(a)be an attribute of a,a n dl e t
(a,r,b)∈r be a relationship. given an instance i=(i0,ia,ir)ofm,w e
writea∈afora∈io(a),a.l=vfor((a,l),v)∈iaand(a,b)∈rfor
(a,b)∈ir((a,r,b)). the set of all instances of mis denoted by i(m).
given two instances i1=(io,1,ia,1,ir,1)andi1=(io,2,ia,2,ir,2),w e
deﬁne their union by i1⊕i2=(io,1⊕io,2,ia,1⊕ia,2,ir,1⊕ir,2)where
f⊕g:v→p(o)with(f⊕g)(v)=f(v)∪g(v)for all sets v,o,f u n c t i o n s
f,g:v→p(o),a n dv∈v.
-title
-abstract-submissiondate-notifcationdate-publicationdatepaper
-title-volume-number-yearjournal-nameaffiliation
-nameresearcher
reviewer
authorworks_at
1*
reviews1..* *
authors
1..* 1..*is_submitted_to0..* 1..*
fig. 1.context model of the review process context102 j.m. van der werf, e. verbeek, and w.m.p. van der aalst
submit paperrequest 
reviews
review collect reviewsdecisionreview
reviewnotify accept
notify rejectsubmit final 
versionrequest review
reviewi
fa
b
cp
fig. 2.the review process
please note that, in principle, an attribute has a set of values, instead of just
a single value. for example, a paper will have a set of authors, and not just a
single author. however, many attributes will have a singleton set as value. insuch cases, we allow the value of the attribute to be the single element of that
set instead of the set itself. as a co nsequence, for a concept instance aand an
attribute label l,a.lcan either be a set of values ( a.l∈p(v)), or the value of
its only element in case of a singleton set ( a.l∈v). from the context, it will
typically be clear which interpretation is used.
an instantiation of a context model is called consistent if all the constraints
enforced by the cardinalities and inheritance relations are satisﬁed.
2.2 process-aware information systems
business processes form the heart of any organization. a business process can
be seen as a set of interdependent task s and resources needed to produce some
productortodeliversomeservice.inmodelinganddescribingabusinessprocess,
context plays a natural role. as an example, the names of the activities andresources in the business process are typi cally aligned with the context in which
the process operates. in our example, t he journal has a review process that
deﬁnes for a paper the tasks and resources needed in order to publish the paperin the journal, as depicted in fig. 2.
in this process model, authors may submit a paper, which will be reviewed
by three researchers. based on the revie w outcomes, the editor decides whether
the paper is accepted, a revision is needed, or whether the paper is rejected, and
notiﬁes any accept/reject decision to th e authors. some reviewers may forget to
review, or are too late, which is modeled as a skip, using the black transitions.
the editor can decide to request an additional review, up to the point that he
has suﬃcient information to make a proper decision.context-aware compliance checking 103
more and more information systems are developed and implemented to sup-
portanorganizationlikethejournalinexecutingtheirbusiness.aprocessawareinformation system (pais) [10] assists an organization in the execution of its
business process. the business process is then used to conﬁgure the system.
a pais records each and every step in the business process. for example, the
pais of the journal records when a paper is submitted, when the reviewers are
invited, and whether and when the revi ews have been returned. as a result, a
pais generates enormous amounts of execution data.
f o re a c hu s e ra c t i o no nt h es y s t e m ,a n eventis raised. an event records its
type, for which activity it has been raised, for which caseor business process
instance, when it was raised, by whom, and the data inserted by the user. such
a recording is called an event log [1]. letebe the event universe and letcbe
thecase universe .
deﬁnition 3 (event log). anevent log is a 3-tuple l=(c,e,#)where
–c⊆c is a set of case identiﬁers in the event log;
–e⊆e is a set of event identiﬁers in the log;
–#:a×(c∪e)→p(v)is an attribute mapping.
for an attribute n∈a we write #
n(·)as a shorthand for #(n,·).
each event belongs to exactly one case, denoted by the mandatory attribute
case∈a, i.e.,#case:e→p(c)such that |#case(e)|=1 for alle∈e.e a c h
case has at least one event, i.e., for all cases c∈can event e∈eexists
such that #case(e)=c. an event may have a successor, denoted by next ∈a,
i.e.,#next:e→p(e)such that |#next(e)|≤1for alle∈e. the transitive
closure of #next is irreﬂexive. each case has exactly one start event, denoted by
ﬁrst∈a , and exactly one end event, denoted by last ∈a , i.e.,#ﬁrst,#last:
c→p(e), such that |#ﬁrst(c)|=|#last(c)|=1 for allc∈c,i f#next(e)=∅
then#last(#case(e)) =e, and if no event p∈eexists with #next(p)=e,t h e n
#ﬁrst(#case(e)) =efor an event e∈e. the set of all possible event logs is
denoted by l.
an event log represents a period of busin ess execution. event logs representing
consecutive periods of business execution may be concatenated. suppose event
logl/primerepresentstheinitialbusinessexecution,and l/prime/primerepresentstheconsecutive
business execution. when a case identiﬁer, say coccurs in both l/primeandl/prime/prime,i t
means that this case was not ﬁnished in l/prime. consequently, all events for cinl/prime/prime
follow after the last event for case cinl/prime. in the concatenation of two event
logs representing two consecutive period s of business execution, these cases are
concatenated: the ﬁrst event of the seco nd log is the next event of the last event
for this case in the ﬁrst log. note that by deﬁnition of event logs, the sets of
eventidentiﬁersoftwoconsecutiveeventl ogsneedtobedisjoint.further,remark
that the functions # ﬁrstand # lastreturn singleton sets, i.e., these functions are
always deﬁned and return a single event.
deﬁnition 4 (concatenation of event logs). letl/prime=(e/prime,c/prime,#/prime)andl/prime/prime=
(e/prime/prime,c/prime/prime,#/prime/prime)be two event logs such that e/primeande/prime/primeare disjoint. the concatena-
tion ofl/primewithl/prime/prime, denoted by l/prime;l/prime/prime, results in a new event log (c,e,#)with104 j.m. van der werf, e. verbeek, and w.m.p. van der aalst
table 1. event log of journal reviewing process
case
 activity
 resource
 time stamp
 data
118
submit paper
 system
 24-12-2011 17:00:12
 title: “title paper 118”,
author: 192
author: 193
119
submit paper
 system
 24-12-2011 17:05:49
 title: “title paper 119”,
author: 194
...
...
 ...
 ...
 ...
118
request reviews
 editor
 29-12-2011 10:19:23
 reviewer: 112
reviewer: 149
reviewer: 195
119
request reviews
 editor
 29-12-2011 10:22:43
 reviewer: 112
reviewer: 149
reviewer: 195
118
review
 149
 07-01-2012 16:39:21
 verdict: accept
...
...
 ...
 ...
 ...
c=c/prime∪c/prime/prime,e=e/prime∪e/prime/primeand#=( #/prime\{((last,c),e)|c∈c/prime∩c/prime/prime,e∈e/prime})∪
(#/prime/prime\{((ﬁrst,c),e)|c∈c/prime∩c/prime/prime,e∈e/prime/prime})∪{((next,#/prime(last,c)),#/prime/prime(ﬁrst,c))|
c∈c/prime∩c/prime/prime}.
an example of an event log is shown in tbl. 1. this example represents a small
partofaneventloggeneratedby the journalreviewsystem.itshowsforexample
the submission of papers 118 and 119 with one and respectively two authors, theeditor who is requesting reviews for these papers, and a returned review for
paper 118 by reviewer 149.
inaneventlog,we maygroupthe eventsper caseorbusinessprocessinstance.
in this way, the events form execution traces per case. for example, from the
partial event log in tbl. 1, we have for case 118 the partial execution trace“submit paper”, “request reviews” and “review”.
the example event log in tbl. 1 already shows the tight relation between the
context and the business execution. for example, solely based on the event log,
resource 149 is meaningless, whereas in a n instance of the context model, it can
be related to some researcher and his aﬃliation.
2.3 auditing
organizationslikethejournalneedtoconstantlymonitortheirbusinesstoassure
that they stay within their boundaries. the activity of checking whether the
business execution adheres to the deﬁned boundaries is called auditing [4,7].
traditionally,anauditcanonlyprovidereasonableassurancethatthebusiness
iscompliant , i.e., that the business is executed within the given boundaries. as
an audit is typically a manual chore, auditors can only assess the operating
eﬀectiveness by checking samples of factual data [7].
toauditasystem,theauditorsmayplace process controls toassessthebound-
aries,suchthat the controlreportsthe violationofaboundary[9,14,19,20]. onlycontext-aware compliance checking 105
if a control is not in place or if it is not functioning as expected, the auditor will
typically check factual data. in order to audit a pais that supports the reviewprocess, a control may be placed counti ng the number of diﬀerent reviews per
submitted paper. a second control may monitor the time between submission
and notiﬁcation, in order to check the boundary on the time to review a paper.
it is important to realize that a process control may not be suﬃcient for
checking a boundary. consider, for example, boundary 5, which states that a
reviewer may not be a co-author. a control could check, at the moment of the
review, whether the reviewer is a co-author, but it will not check this again in
the future. thus, if in the very near future some paper appears in some journalfrom which it is clear that the reviewer actually was co-authoring a paper, then
the control would miss this fact.
placing controlsalreadyincreasesthe assuranceanauditor cangive.however,
adding controls changes the business processes implemented in a pais. hence,
if either the business process or a boundary changes, both systems need to be
changed. therefore, process analysis t echniques can help in separating process
controls from the control ﬂow [17].
3 context-aware continuous auditing
since information systems more and more record their usage in event logs, theexecution data can be used to check for com pliance. whereas t raditional audit
only relies on sample-based checks, continuous auditing [7,21] focuses on the
analysis of the execution data to perform an audit.
the omnipresence of execution data, coupled with process mining [1] tech-
niques, allows the auditor to perform an audit on the whole business execution,
rather than only sample-based [3,4,7,16]. however, boundaries are typically de-
ﬁned on the context data, and not solely based on the execution data [5,17].
as a result, to be able to check these boundaries, continuous auditing requires
both execution data as well as context data. only if the boundaries are formal-ized, algorithms and techniques can be d eveloped to automate the process of the
auditor. consequently, not only the boundaries need to be formalized, also the
context needs to be modelled.
3.1 formalization of boundaries
one way to formalize a boundary is by constraining the concepts in the context
model by using the right cardinalities b etween concepts. in this way, one can
easilyformalizethe boundarythat a paperhasat leastone author. it isenforced
bythe cardinalitiesofthe relationshipauthors. however,not everyboundarycan
be formalized using only the cardinalities.
dependencies overdiﬀerentconceptsca nnotbe expressedby localconstraints,
like the cardinalities, only. for example, the boundary that a reviewer and au-
thor should be of a diﬀerent aﬃliation cannot be expressed by local constraints.for this reason, we use a constraint language on the context model in ﬁrst-order106 j.m. van der werf, e. verbeek, and w.m.p. van der aalst
logic. the aforementioned boundary can then be expressed by the following non-
local constraint:
∀p∈paper,a∈author,r∈reviewer ,w1,w2∈aﬃliation :
((a,p)∈authors∧(r,p)∈reviews∧
(a,w 1)∈works
at∧(a,w 2)∈works
at
)=⇒w1/negationslash=w2
this constraint formalizes that in any i nstance of the context model, the aﬃlia-
tions of an author and a reviewer of the same paper should be diﬀerent.
3.2 relating the process execution with the context
by formalizing the boundaries, compliance checking becomes checking whether
each constraint is satisﬁed by the business execution. h owever, the constraints
are expressed using the context data, while the execution is expressed using the
execution data. as a consequence, we n eed to link both data: either we trans-
form the constraints in terms of the execu tion data, or the event log needs to be
transformed in terms of the the context data. for example, the rule that a paper
has been reviewed by three diﬀerent reviewers, can be expressed like “each exe-cutiontracecontainsatleastthreeactiv itiesnamed‘review’executedbydiﬀerent
resources”. however, many constraints, like the one that corresponds to bound-
ary 5 (“a reviewer has never been a co-author of any of the authors”),are global
constraints,i.e., constraintsoverasetoftraces,ratherthanlocalconstraintsover
a single execution trace. as a consequen ce, replay techniques [2] cannot be used,
as these only consider single execution traces. such constraints cannot be trans-
formed into a constraint in terms of the ex ecution data, as the co-author relation
doesnot only depend on the executiondata, asauthorsmaydecide to submit pa-perstootherjournalsaswell.clearly,thisinﬂuencestheco-authorrelation,while
these submission will not be stored in the pais of the journal at hand.
the contextmodel describes the concepts and their relationships. an instance
of the context model describes a state of the business. by execution a business
process, the state of the business changes, and hence, the instance of the con-text model. for example, executing the “submit paper” activity corresponds to
the insertion of a paper concept in the cu rrent instance. likewise, the “request
reviews” activity corresponds in the ins ertion of new associations between one
instance of paper and several instances of reviewer.
each event in an event log corresponds to an update of the current state of
business. as a consequence, executing an event can be seen as a function from
one instance of the context model to a new instance. we denote with i(m)t h e
universe of instances of context model m.
deﬁnition 5 (transformation function). given a context model m,atrans-
formation function transforms a given context model instance and an event log
into a new instance of the context model, i.e, a function f:i(m)×l→i (m)
such that for i∈i(m)andl
1,l2∈l we have f(i,∅)=iandf(i,l 1;l2)=
f(f(i,l 1),l2).context-aware compliance checking 107
title = title paper 118
abstractsubmissiondate = 24-12-2011 17:00:12notifcationdatepublicationdatepaper 118 : paper
nameauthor 192 : author
nameauthor 193 : authorauthors
authors1: submit paper 118
(a) after ﬁrst step
title = title paper 118abstractsubmissiondate = 24-12-2011 17:00:12notifcationdatepublicationdatepaper 118 : paper
nameauthor 192 : author
nameauthor 193 : authorauthors
authors
title = title paper 119abstractsubmissiondate = 24-12-2011 17:05:49notifcationdatepublicationdatepaper 119 : paper
nameauthor 194 : author
authorsnamereviewer 112 : reviewer
namereviewer 149 : reviewer
namereviewer 195 : reviewerreviews
reviews
reviewsreviews
reviews
reviews1: submit paper 118
2: submit paper 1193: request reviews 118
4: request reviews 119
(b) after four steps
fig. 3.replaying the event log of tbl. 1 on the context
in this way, we are able to replay the event log in terms of the context. as
eachevent updates the context, we deﬁne an additional function that transformsa context model instance and an event log into a new context model instance.
let us consider the journal example again. let ibe a consistent instance of the
context model depicted in fig. 1, let lbe the current event log, and let ebe
the event that corresponds to the submission of paper 118. the event causes the
creation of the paper 118 object, the author 192 and author 193 objects, and it
creates the author relation from thes e author objects to the paper object. we
can formalize this to an update of the context model instance:
f(i,({c},{e},#)) =/braceleftbiggi⊕(e
o,ea,er)i f # name(e)=‘submit paper’ ;
i otherwise ,
where
eo={paper/mapsto→{c},author,researcher /mapsto→#author(e)},
ea={(c,title)/mapsto→#title(e),(c,submissiondate )/mapsto→#timestamp(e)},
er={(paper,authors)/mapsto→{(c,a)|a∈#author(e)}}.108 j.m. van der werf, e. verbeek, and w.m.p. van der aalst
notethatthecreationofanobjectisonly necessaryiftheobjectdoesnotalready
exist. if, for example, the object for aut hor 192would have alreadyexisted, then
the existing object would be reused. likewise, the event that corresponds to the
other submission creates the paper 119 object, the author 194 object, and the
authors relation between both. fig. 3 shows the result of replaying the ﬁrstevents from tbl. 1 on an empty journal context model instance.
similar functions can be created for the o ther events. the ﬁrst request review
event creates the reviewer 112, reviewer 149, and reviewer 195 objects, and
the reviews relations to the paper 118 object, whereas the second request review
reuses the reviewer objects and creates r eviews relations from these objects to
the paper119 object. as a result of replaying the event log in the context model,
we have now extended the context mod el with the execution data. hence, we
can use the execution data as if it were context data.
3.3 compliance checking
the ﬁrst step in checking compliance, is the check whether the initial instance
of the context satisﬁes each of the constraints. after this check, we can start to
replay the event log. for this, we need to sort all events in the event log basedon their time stamp, so that the contex t is updated in the same order as the
business has been executed.
whilereplayingtheeventsonthecontextmodel,aftereachupdatethecurrent
instance needs to be checked to see whether the constraints are still satisﬁed. if
in a step a constraint is violated, we need to report this event and the violation.
an auditor then needs to test the severity of the violation. for example, if after
completing the trace, the constraint is repaired, the impact of the violation may
be less than if the constraint remains violated.
in this approach, we only allow the event log to change the context. in re-
ality, not only the business execution chan ges the context, also external events,
like researchers that change aﬃliation, or people that write papers for diﬀerentjournals, may change the context. these external changes to the context are (for
now) ignored by our approach.
4 implementation
as a proof of concept, we implemented the approach in the process mining
toolkitprom6[22].inliterature,ontologiesareoftenusedtocapturecontext(cf.
[12,13,18]). an ontology can be seen as a collectionof concepts with associations
between these concepts [23]. further, ontologies allow for modularization usingthe import concept. in this way, diﬀerent ontologies can be combined into a
single context model. for example the co ntext of the journal could be split into
an ontology for the publications and reviews, and a separate ontology for theresearchers and their aﬃliation.context-aware compliance checking 109
4.1 event logs as ontologies
notonlythecontextmodelcanberepresentedinanontology.alsoeventlogscan
be represented in an ontology. this allows us to reason over both the context as
wellastheprocessexecutioninasingleformalrepresentation.thexesstandard
[22] deﬁnes the important concepts in an event log, and their relationships. inthe xes standard, a log uses zero or more extensions that each deﬁne a set of
attributes. an attribute has a set of valu es, represented by the value concept
in the ontology. the concepts log, event, trace and value are subclasses of the
attributable concept, meaning that the y can have values attached. each trace
belongs to a log, and has a start event and an end event. events belong to atrace,and each can have a predecessor and a successor event. the ontology also
stores the transitive closure of the predecessor and successor relation, i.e., the
set of all predecessors or successors, respectively, of an event.
the ontologies packageofprom6 providesanautomatictransformationfrom
event logs into the ontology format. for a log of the journal with 1000 cases and
12461 events, the transformation results in an ontology with 455.990 axioms,i.e., concept, individuals, and relations between these individuals.
4.2 linking events to the ontology
as seen in the previous section, each event belongs to an update of the context
model. for example, the event ‘submit paper’ creates a paper. in the formaliza-
tion, we represented this by stating that each trace in the event log creates aninstance of the concept paper. in terms of ontologies, this means that each trace
of this event log is not only an individual of the concept trace, but also of the
concept paper. hence, we want to add thi s relation between the ontology of the
event log and the ontology of the context model. to automate the process of
relating the diﬀerent individuals, we introduce the notion of annotation rules.
anannotation rule relates individuals between the ontologies of the event log
and of the context model. it deﬁnes a so urce element, a target element and the
(a) event log as ontology in prom6
 (b) annotation rule in prom6
fig. 4.implementation of context models as ontologies in prom6110 j.m. van der werf, e. verbeek, and w.m.p. van der aalst
relation between the source and target, like inheritance relation, instantiation,
and an ontology object or data property. if the relation between source andtarget is an ontology property, we als o need to specify which property is used.
to select elements from the event log, we use xpath, which allows us to select
multiple elements in an event log. for example, the rule that each trace is apaper, can be expressed by the following annotation rule, assuming that the
paper ontology has the namespace http://localhost/publication.owl :
ar 1 (a paper) creates an instance of the concept ‘paper’ for each trace
source
 //trace
relation
instance of
target
 http://localhost/publicatizon.owl#paper
this rule selects each trace ( //trace)in the event log, and adds the correspond-
ing trace individual to the concept paper. as the transformation also speciﬁes
that a paper has a title, we need another annotation rule to express this.
ar 2 (a paper has a title) the title is speciﬁed in the activity ‘submit paper’
as an attribute named ‘title’
source
 //trace
relation
has data property: http://localhost/publication.owl#title
target
 ./event[/string[@key=’concept:name’ and @value=’submit
paper’]]/string[@key=’title’]@value
this rule iterates over each trace, as speciﬁed in the source of the annotation
rule, and gets the corresponding title by retrieving the attribute ‘title’ of its
‘submit paper’ event. in case multiple el ements are selected by the target xpath
query, then a relation is created for each o f the selected elements. in this way, we
need to create ﬁve annotation rules for the transformation of the ‘submit paper’
event: one to add the trace to the paper concept ( ar 1), two to add the title
(ar 2) and a similar rule for the submission date of the paper, one to create
the authors, and one to relate the authors to the paper.
fig. 4(b) depicts an annotation rule as it is implemented in prom6. simi-
lar annotation rules can be created for each of the events. in this way, we get
an ontology that connects the ontology of the event log with the ontology ofthe context model. this connecting ontology serves as input for the compliance
checking.
4.3 compliance checking
the approach results in three ontologies: one ontology being the initial context
modelinstance,oneontologyrepresentingtheeventlogandonethatprovidesthe
connection between these two. in order to check whether the organizationstayed
within its boundaries, we need to check whether all three ontologies together
satisfytheseboundaries.theprevioussectionshowedhoweachoftheboundaries
can be formalized into a set of constrai nts expressed in ﬁrst order logic. next
step is to express these constraints in a language that can be used on ontologies.context-aware compliance checking 111
one such language is the semantic web rule language (swrl) [8]. swrl
rules are expressed in terms of an onto logy. hence, we can create a separate
ontology containing these rules.
for example, to express the rule that states that for each paper no reviewer
may be a coauthor of one of the authors of that paper, we ﬁrst add a datapropertytoeachpaper,e.g., violatesbound5 ,withdomainpaperandtheboolean
values as range. next, we can express when this rule is true: if a paper has
been submitted earlier by both a reviewer and an author of the current paper.
expressed in swrl:
violatesbound5 (?p,true)←paper(?p)∧reviews(?r,?p)∧authors(?a,?p)
∧paper(?y)∧authors(?a,?y)∧authors(?r,?y)
∧submitdate (?y)<submitdate (?p)
as ontologies are being used to express both execution data and context, other
formalisms can be exploited to express constraints, like sbvr [15].
important to realize when working with ontologies is the open world assump-
tion.in the openworldassumption,a statem ent is either true, false, orunknown,
whereas in a closed world a statement is e ither true or false. this is an impor-
tant diﬀerence. for example, in the rule above we can only express when thestatement is true. if no witness is found, in the closed world assumption the con-
straint is satisﬁed, whereas in the open world assumption, the statement results
in unknown.
to increase the expressivity of the const raints, the closed world assumption is
needed. for example, a logic language like prolog would be a natural next step,as the translation from ontologies to prolog is straightforward [24].
5 conclusions
all kinds of sources enforce boundaries on the way an organization runs its
business. typically, these boundaries are phrased in terms of the environment
of the business, called the context. in this paper, we proposed a novel approachto support the auditor in checking whether the organization stays within its
boundaries.
mostly, the workof anauditor is manual.as moreand moreorganizationsare
supported by information systems that record their usage in event logs, more
and more data becomes available to automate the work of the auditor. theenormous amounts of data available allows the auditor to use techniques like
process mining.
in order to automate the compliance checking, also the boundaries need to
be formalized. in this paper, we propose context models. however, as event logs
are in terms of the system, and the boundaries in terms of the context, we argue
the need of transforming the information availablein event logs into information
available in terms of the context.112 j.m. van der werf, e. verbeek, and w.m.p. van der aalst
the approachpresented in this paper is a next step towards continuous audit-
ing.toshowthe applicabilityofthe approachweimplemented it in prom6usingontologies as a context model. although ontologies provide a powerful mecha-
nism to reason over the context, more research is needed to further automate
the task of the auditor.
current replay techniques only visualize control ﬂow related aspects, like con-
formance checking, of a business execution. the approachproposed in this paper
allows to replay the business execution in its context. in this way, business ana-
lysts and auditors have the possibility to inspect how business execution changes
the business environment.
references
1. van deraalst, w.m.p.: process mining: discovery,conformance and enhancement
of business processes. springer, berlin (2011)
2. van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on
process models for conformance checking and performance analysis. wiley inter-
disciplinary reviews: data mining and knowledge discovery 2(2), 182–192 (2012)
3. van der aalst, w.m.p., van hee, k.m., van der werf, j.m.e.m., kumar, a., ver-
donk, m.: conceptual model for online auditing. decision support systems 50(3),
636–647 (2011)
4. van der aalst, w.m.p., van hee, k.m., van der werf, j.m.e.m., verdonk, m.:
auditing 2.0: using process mining to support tomorrow’s auditor. ieee com-puter 43(3), 102–105 (2010)
5. accorsi, r., stocker, t.: ontheexploitation of process mining for security audits:
the conformance checking case. in: acm symposium on applied computing.
acm (2012)
6. alles, m.g., kogan, a., vasarhelyi, m.a.: putting continuous auditing theory
into practice: lessons from two pilot implementations. journal of information
systems 22(2), 195–214 (2008)
7. chan, d.y., vasarhelyi, m.a.: innovation and practice of continuous auditing.
international journal of accounting information systems 12(2), 152–160 (2011)
8. world wide web consortium. swrl: a semantic web rule language combining
owl and ruleml (2011), http://www.w3.org/submission/swrl/
9. haworth, d.a., pietron, l.r.: sarbanes-oxley: achieving compliance by starting
with iso 17799. information systems management 23(1), 73–87 (2006)
10. dumas, m., van der aalst, w.m.p., ter hofstede, a.h.m.: process-aware infor-
mation systems: bridging people and software through process technology. johnwiley & sons, inc. (2005)
11. elliot, r.k.: assurance service opportunities: implications for academia. ac-
counting horizons 11(4), 61–74 (1997)
12. filipowska, a., kaczmarek, m., kowalkiewicz, m., markovic, i., zhou, x.: or-
ganizational ontologies to support semantic business process management. in:
international workshop on semantic business process management, pp. 35–42.
acm (2009)
13. fox, m.s., barbuceanu, m., gruninger, m.: an organisation ontology for en-
terprise modelling: preliminary concepts for linking structure and behaviour.
computers in industry 29(1- 2), 123–134 (1996); wet ice 1995context-aware compliance checking 113
14. ghose, a., koliadis, g.: auditing business process compliance. in: kr¨ amer, b.j.,
lin, k.-j., narasimhan, p. (eds.) icsoc 2007. lncs, vol. 4749, pp. 169–180.
springer, heidelberg (2007)
15. goedertier, s., mues, c., vanthienen, j.: specifying process-aware access control
rules in sbvr. in:paschke, a., biletskiy, y.(eds.) ruleml 2007. lncs, vol. 4824,
pp. 39–52. springer, heidelberg (2007)
16. jans, m., van der werf, j.m.e.m., lybaert, n., vanhoof, k.: a business process
mining application for internal transaction fraud mitigation. expert systems
with applications 38(10), 13351–13359 (2011)
17. ramezani, e., fahland, d., van der werf, j.m., mattheis, p.: separating compli-
ance management and business process management. in: daniel, f., barkaoui, k.,
dustdar, s. (eds.) bpm workshops 2011, part ii. lnbip, vol. 100, pp. 459–464.springer, heidelberg (2012)
18. rosemann, m., recker, j.c., flender, c.: contextualisation of business processes.
int. journal of business process integration and management 3(1), 47–60 (2008)
19. green, s.: manager’s guide to the sarbanes-oxley act: improving internal con-
trols to prevent fraud. wiley (2004)
20. sadiq, s., governatori, g., namiri, k.: modeling control objectives for business
process compliance. in: alonso, g., dadam, p., rosemann, m. (eds.) bpm 2007.
lncs, vol. 4714, pp. 149–164. springer, heidelberg (2007)
21. vasarhelyi, m.a., halper, f.: the continuous audit of online systems. auditing:
a journal of practice & theory 10(1), 110–125 (1991)
22. verbeek,h.m.w., buijs, j.c.a.m., vandongen, b.f., vanderaalst, w.m.p.: xes,
xesame, and prom 6. in: soﬀer, p., proper, e. (eds.) caise forum 2010. lnbip,vol. 72, pp. 60–75. springer, heidelberg (2011)
23. w3c. owl 2 web ontology language (2009)
24. wielemaker, j., schreiber, g., wielinga, b.: prolog-based infrastructure for rdf:
scalability and performance. in:fensel, d., sycara, k., mylopoulos, j. (eds.)iswc
2003. lncs, vol. 2870, pp. 644–658. springer, heidelberg (2003)
25. williams, b.c.: auditing and recent developments in it. managerial auditing
journal 7(5), 18–25 (1992)