analyzing resource behavior using process
mining
joyce nakatumba and wil m.p. van der aalst
eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands
fjnakatum, w.m.p.v.d.aalst g@tue.nl
abstract. it is vital to use accurate models for the analysis, design,
and/or control of business processes. unfortunately, there are often im-
portant discrepancies between reality and models . in earlier work, we have
shown that simulation models are often based on incorrect assumptions
and one example is the speed at which people work. the \yerkes-dodson
law of arousal" suggests that a worker that is under time pressure may
become more ecient and thus nish tasks faster. however, if the pres-
sure is too high, then the worker's performance may degrade. tradition-
ally, it was dicult to investigate such phenomena and few analysis tools
(e.g., simulation packages) support workload-dependent behavior. fortu-
nately, more and more activities are being recorded and modern process
mining techniques provide detailed insights in the way that people really
work. this paper uses a new process mining plug-in that has been added
to prom to explore the eect of workload on service times . based on
historic data and by using regression analysis, the relationship between
workload and services time is investigated. this information can be used
for various types of analysis and decision making, including more realistic
forms of simulation.
key words: process mining, yerkes-dodson law of arousal, business
process simulation.
1 introduction
organizations are increasingly using process-aware information systems (paiss)
to reduce costs and improve the performance and eciency of important busi-
ness processes. paiss provide a means to support, control, and monitor oper-
ational business processes. examples of paiss are workow management sys-
tems (wfmss), business process management systems (bpmss) but also other
\process-aware" systems, such as enterprise resource planning systems (e.g.,
sap r=3, oracle, jd edwards, etc.), call-center systems, product-data manage-
ment systems, and process-centric middleware (e.g., ibm's websphere, jboss,
etc.) [5]. while paiss support processes they also record information about these
processes in the form of so-called event logs , also known as audit trails or trans-
action logs [2]. in these logs, information is stored about activities as they are
being executed. this information can include the times at which events were2 j. nakatumba, w.m.p. van der aalst
executed, who executed these events, etc. this information can be used among
other things, for performance analysis,e.g., the identication of bottlenecks in
a process model. event logs provide an excellent source of information for pro-
cess mining , i.e., extracting non-trivial knowledge from historic data. in this
paper, we advocate the use of process mining in order to extract characteristic
properties of resources.
many organizations have used simulation at some point to analyze, for ex-
ample, the performance of their business processes. in most of these simulation
approaches, however, the models used are very naive and do not use the informa-
tion recorded in the event logs. we refer to this kind of simulation as traditional
simulation [1]. traditional simulation, therefore, rarely uses historic information
and also typically suers from the problem that human resources are modeled
in a rather naive way . as a result, the simulation results obtained are seldom a
good reection of what is actually happening in the organization.
fig. 1. yerkes-dodson law modeled as u-shaped curve. when the stress level is low,
the performance is also low. this increases as the stress levels also increase up to a
certain optimal level beyond which the performance drops (adapted from [12]).
in [1], we identify aspects of resource behavior that are not captured in to-
day's simulation tools. in particular, we point out that people do not work at
constant speeds and their processing speeds are usually inuenced by their work-
load. we refer to this as workload-dependent processing speeds and the analysis
of this phenomenon is the focus of this paper. there are a number of studies
that suggest a relation between workload and performance of workers. in the lit-
erature, this phenomenon is known as the \yerkes-dodson law of arousal" [12].
this law models the relationship between arousal and performance as an inverse
u-shaped curve as depicted in figure 1. this implies that for a given individual
and a given set of tasks, there is an optimal level at which the performance of
that individual has a maximal value and beyond this optimal level the worker's
performance collapses. this aspect has been studied in social sciences and op-
erations management. until recently, there were no means for systematically
observing such phenomena in the workplace. however, because human activity
is increasingly recorded by pais technology and the availability of process min-analyzing resource behavior using process mining 3
ing tools such as prom, it is now possible to better characterize resource behavior
based on empirical data. therefore, this is important for two main reasons.
first of all, a better resource characterization will help to make simulation
models that are more realistic and that are tightly coupled to paiss [1, 9, 10]. this
will enable the use of process mining for operational decision making, i.e., based
on a reliable model and both real-time and historic data, it becomes worthwhile
to use simulation on a daily basis. this paper therefore, is a rst step approach
to the use of process mining as a technique for the extraction of characteristic
properties of resources from event logs, i.e., the eect of changing workload
on resource behavior. this information can then be incorporated in simulation
models. the results of various process mining techniques can be combined as
shown in [9] to yield an integrated simulation model.
secondly, good insights into the behavior and performance of people will
assist in a better work distribution . one of the major objectives of a pais is
to facilitate the distribution of work amongst the group of resources involved
in a process. however, today's pais systems use very limited understanding of
resource behavior. but with better characterization of resource behavior, this
can act as a basis for making work allocation decisions in real life.
in this paper, we use linear regression analysis to quantify the \yerkes-
dodson law of arousal" based on empirical data. linear regression analysis is
a statistical technique used for investigating and modeling the relationship be-
tween variables [7]. we use regression because of its various purposes, i.e., it can
be used to describe and summarize a dataset through the regression equations,
it can be used for prediction of the response variable based on the predictor
variables, the variables in a regression model are usually related in a cause-eect
relationship and so regression can be used in conrming such a relationship and
also regression is a useful technique for parameter estimation. although we use
linear regression in this paper, there are more powerful regression techniques
that can be used to truly capture the u-shape shown in figure 1.
the remainder of the paper is organized as follows. first, we provide an
overview of event logs and process mining in section 2. section 3 has a discus-
sion of workload-dependent processing speeds. we explain how to extract the
workload and processing speeds based on the information available in event logs
in section 4. in section 5, we describe the application of our approach to a case
study based on real-life logs to validate our approach. section 6 has a discussion
of related work and nally section 7 gives conclusions.
2 process mining: an overview
2.1 event logs
most information systems (e.g. wfm and bpm systems) provide some kind of
event log also referred to as audit trail entry or workow log [2]. an event log
contains log entries about activities executed for a business process. we assume
that it is possible to record events such that each event refers to an activity and4 j. nakatumba, w.m.p. van der aalst
is related to a particular case (i.e., a process instance). for any process mining
technique, an event log is needed as the input. in order to understand what an
event log is, we dene the concept of an event .
denition 1 (event, property) letebe the event universe, i.e., the set of
all possible event identiers, and tthe time domain. we assume that events have
various properties, e.g., an event has a timestamp, it corresponds to a particular
activity, is executed by a particular resource and has a particular type. for each
of these properties, there are functions proptime2e!t assigning timestamps
to events,propact2 e ! a assigning activities to events, proptype2 e !
fstart;completegassigning event types to the events, and propres2e9r
is a partial function assigning resources to events. for e2e, we dene eas a
shorthand for proptime(e), i.e., the time of occurrence of event e.
an eventeis described by some unique identier and can have several properties.
in this paper, we use these properties which are; the timestamp of an event
(proptime(e)), the activity name ( propact(e)), the name of the resource that
executed the activity ( propres(e)) and the event type of the activity ( proptype(e)).
notepropresis a partial function because some events may not be linked to any
resource.
an event log is a set of events. each event in the log is linked to a particular
trace and is globally unique, i.e., the same event cannot occur twice in a log.
a trace represents a particular process instance and furthermore for each trace,
time should be non-decreasing within each trace in the log.
denition 2 (event log and trace) a trace is a sequence of events 2e
such that each event appears only once and time is non-decreasing, i.e., for 1 i
<jjj:(i)6=(j) and(i)(j).cis the set of all possible traces (including
partial traces). an event log is a set of traces lcsuch that each event appears
at most once in the entire log, i.e., for any 1;22l:8e1218e222e16=e2or
1=2.
note that(i)(j) means that time is non-decreasing (i.e., proptime((i))
proptime((j)) ifioccurs before j). the last requirement states that 1and2
should not have any overlapping events. this is done to ensure that events are
globally unique and do not appear in multiple traces.
table 1 shows a fragment of an event log with two traces and each trace con-
sists of a number of events. for example, the rst trace has three events (1 a, 1b,
1c) with dierent properties. for event 1 a,propact(1a) =a,propres(1a) =mary,
proptime(1a) =20th november 2007 at 8:00am and proptype(1a) =start.
2.2 process mining
process mining aims at the extraction of information from a set of real executions
(event logs). as already stated, event logs are the starting point for any process
mining technique. before any technique can be applied to the event log, infor-
mation can directly be obtained from the log through the preprocessing step.analyzing resource behavior using process mining 5
table 1. a fragment of an event log.
event properties
activity resource timestamp type
1a a mary 20-11-2007:8.00 start
1b a mary 21-11-2007:8.13 complete
1c b john 01-12-2007:8.16 start
2a a angela 08-02-2008:8.10 start
this information can include the number of traces and events in the log, the
activities and resources, and the frequency of their occurrences in the log, etc.
based on this information log ltering can be done, for example, to remove the
resources with infrequent occurrence. after this step, then process mining tech-
niques can be applied to the log to discover three dierent perspectives (process,
organizational, case) through the processing step.
the process perspective focusses on the control-ow, i.e., the ordering of ac-
tivities and the goal here is to nd a good characterization of all the possible
paths, e.g., expressed in terms of a petri net [2]. the organizational perspec-
tive focusses on the resources, i.e., which performers are involved in the process
model and how are they related. the goal is to either structure the organization
by classifying people in terms of roles and organizational units or to show rela-
tion between individual performers (i.e., build a social network [11]). the case
perspective focuses on properties of cases. cases can be characterized by their
paths in the process or by the values of the corresponding data elements, e.g., if
a case represents a supply order it is interesting to know the number of products
ordered. orthogonal to these three perspectives, the result of a mining eort
can refer to performance issues. for example, information about ow times and
waiting times. the discovered process model can then be enhanced with this
performance information.
3 workload-dependent processing speeds
in many systems, the speed at which resources work is partly determined by
the amount of work at present. this is especially true for human beings; in
busy periods people tend to increase their speed in order to process more cases.
however, when people are given too much work over a long period of time, their
performance then tends to drop. this phenomenon is known as the \yerkes-
dodson law of arousal" [12] and is illustrated by the inverse u-shaped curve
depicted in figure 1. if the law holds, the performance of people (i.e., the speed
at which they work) is determined by the workload that is currently present in
the system [8]. an example would be a production system where the speed of
a server is relatively low when there is too much work (stress) or when there is
very little work (laziness) [3].
in this paper, we discuss a new process mining technique implemented in
our process mining framework (prom), to quantify the relationship between6 j. nakatumba, w.m.p. van der aalst
workload and processing speeds based on historic data. from the event logs
expressed in standard mining xml (mxml) format [4], we extract information
about traces, the activities per trace, the resources that execute these activities,
and their respective service times (this is measured in minutes and is explained
in section 4.2).
fig. 2. overview of the approach. first an event log in mxml format is translated into
a tabular format showing (a) case id's, (b) activity names, (c) resource names, (d) start
times, (e) completion times, and (f) service times (dierence between the completion
and start times). this table is then used to calculate the workload and regression
analysis is carried out to nd the relationship between workload and processing speeds.
this can be done at dierent levels of granularity, e.g., per activity, per resource, or
per resource/activity combination.
figure 2 shows a sample table of the basic information extracted from the
event logs. based on this information, we determine the workload and processing
speeds. as will be shown in the next section, multiple denitions of the workload
are possible. this workload information can be compared with the actual service
times (last column in the main table shown in figure 2), i.e., the time required
to execute an activity (thus denoting the processing speed). then using linear
regression analysis, we quantify the relationship between the workload and the
processing speeds. in the next section, we describe in detail how the workload
and processing speeds are dened and measured based on the information in the
event log.
4 relationship between workload and processing speeds
4.1 workload
as already stated, people do not work at constant speeds and their processing
speeds are often inuenced by the current workload.
the workload of a resource or a group of resources can be dened as either:
(a) the number of work items waiting at the start of execution of an activity,
i.e., the amount of work that has been scheduled for a given user or (b) the
number of activities that have been executed over a particular period. in thisanalyzing resource behavior using process mining 7
paper, we focus on the second option, i.e., the number of activities that have
been executed over a particular period denes \how busy" the resource has been.
we now dene the notion of workload used in this paper.
denition 3 (workload) lettbe the time domain, cbe a set of all possible
traces,lcbe an event log, and ebe a set of all possible event identiers.
-we dene the event universe oflasel=fe2ej92le2g.
-elis partitioned into two sets: es
l=fe2eljproptype(e) =startg(i.e.,
all start events in l) andec
l=fe2eljproptype(e) =completeg(i.e., all
complete events in l).
-the workload calculation based on lis parameterized by the following four
parameters:eref,eload,hback, andhforw.
-erefelis the set of reference events, i.e., the events for which the workload
is calculated.
-eloadelis the set of load events, i.e., the events considered when calculating
the workload .
-hback2t !t is a function that denes the start of the time window given
some reference time, i.e., for some reference time t2t, the time window
starts athback(t) (withhback(t)t).
-hforw2t !t is a function that denes the endof the time window given
some reference time, i.e., for some reference time t2t, the time window ends
athforw(t) (withthforw(t)).
-based onl,eref,eload,hback, andhforw, we dene the workload function
busy2eref!i n, where i n is the set of natural numbers f0;1;2;::gas follows:
busy(e) =jfe02eloadjhback(e)e0hforw(e)gj, i.e., the number of load
events in the time window associated with a reference event e.
functionbusy calculates the workload for all the reference events. an event e
is a reference event, i.e., e2e ref, if it can be associated to some service time. for
example, one can take eref=es
l, i.e., all start events are reference events and
by looking up the corresponding complete events it is possible to measure their
service times. it is also possible to take eref=ec
lor eveneref=el. in the later
case there are two reference events for each activity. based on the timestamp of
some reference event e2e ref, we calculate a time window that starts at hback(e)
and ends at hforw(e). note that the time window depends on the denition of the
parameters hbackandhforw. for example, if hback(t) =t aandhforw(t) =t+b,
then events that occurred less than atime units before some reference event and
not more than btime units after some reference event are considered. when the
values chosen for aandbare long (i.e., in our approach aandbare between 1 to
24 hours), then we see a greater eect of the workload on the processing speed.
based on such a time window, function busy then simply counts the number
of load events. the set of load events may be dened as eload=es
l. it is also
possible to takeeload=ec
lor eveneload=el.
denition 3 looks at erefandeloadfor the log as whole. however, it is pos-
sible to determine these sets of events per activity ,per resource , or per activ-
ity/resource combination .8 j. nakatumba, w.m.p. van der aalst
4.2 processing speeds
in this section, we dene the processing speeds based on the information in the
logs. the processing speeds can be dened as either the ow time (i.e., the time
required to handle a case from beginning to end) or the service times (based
on the actual processing time of individual activities). in this paper, we only
consider the service times as a way of denoting the processing speeds. given
that we have the start and complete events of an activity recorded in the log,
the service time is dened as the dierence between the times at which these
two events were executed.
denition 4 (service time) letl,el,es
landec
lbe as dened in deni-
tion 3. function st2 el! t maps events onto the duration of the corre-
sponding activity, i.e., the service time. we assume that there is a one-to-one
correspondence between es
landec
l, i.e., anyes2es
lcorresponds to precisely
one eventec2ec
land vice versa. the service time of these events are equal, i.e.,
st(es) =st(ec) =ec es.
note that the above denition heavily relies on the assumption that there is
a one-to-one correspondence between start and complete events. when reading
the traces in the log, there are situations when for an activity only the start event
is recorded and not the complete event or when the complete event is recorded
and not the start event for the same activity. in order to avoid the recording of
incorrect durations, we match the start and complete events by linking events
that belong to the same trace and for which the activity names are the same.
events which can not be matched are discarded. moreover, we have heuristics
to determine when events were started based entirely on the complete events.
after obtaining the workload and the service times, we use simple linear
regression analysis to nd the relationship between workload (as the independent
variable ) and processing speed (as the dependent variable ). in this case, we have
one independent variable and one dependent variable, however, it is easy to add
other independent variables (e.g., based on alternative denitions of workload).
from the analysis we obtain parameters required for the construction of the
regression equation given by: y=0+1x+"where:yis the dependent variable
(processing speed expressed in terms of the service time, i.e., st(e)),xis the
independent variable (workload, i.e., busy(e)),0(intercept) is the value of y
whenx= 0,1(slope) is the change in yproduced by a unit change in x,"is
the error of prediction obtained using the regression equation.
other parameters can also be obtained from the regression analysis which
are; the correlation coecient (r) is the degree to which two variables are linearly
related ( 1r1) and r-square of the regression equation (r2, or the coe-
cient of determination), which is the proportion of variation in yaccounted for
byx(0r21). higher values of r2(0:7r21) indicate a good t of the
regression equation to the data while the intermediate values (0 :5r20:7)
show a moderate t and low values (0 r20:5) indicate a poor t. the ap-
proach described in this paper is implemented as a plug-in in the process mininganalyzing resource behavior using process mining 9
tool prom. in the next section, we discuss the results from the application of
this approach to real-life logs.
5 experiments
we tested our approach and the implemented prom plug-in on a real case study
based on a process that handles the getting of building contracts in a dutch
municipality.
5.1 case study
the case study was conducted on real-life logs from a municipality in the nether-
lands. this municipality uses a workow system and the logs used are from a
process that deals with the getting of a building permit. through the preprocess-
ing step we obtained important information about the log. the event log contains
information about 2076 cases, 67271 events, 109 resources and 11 activities. the
start date of the log is \2003-01-24" and the end date is \2005-11-08". we ltered
the log to remove the resources and activities with infrequent occurrence and
also only considered the events with both the start and complete . the informa-
tion contained in the main table (as shown in figure 2), can be viewed based on
three perspectives, i.e, the resource, activity and resource/activity perspectives.
table 2. linear regression results based on the resource dimension.
resource
namescorrelation co-
ecient (r)r2intercept ( 0)slope ( 1)
jcokkie 0.44 0.19 22053 7860
bfemke 0.68 0.46 -20502 38537
klargen 0.84 0.71 -585057 704292
mbree 0.68 0.47 -1264 3849
clijfers 0.22 0.05 11850 21920
pkelders 0.17 0.03 1619 115.8
bgeveren 0.73 0.53 -299007 355963
tables 2 and 3 show the linear regression results based on the resource per-
spective and the resource/activity perspective respectively1. after ltering events
from the main table, based on the resource perspective, we select the events to
use for the reference and load events. in this case study, the complete2events are
selected and also hforw(t) =t+23hrsandhback(t) =t+23hrswheretis the time
of execution of a reference event. the result of the relationship between workload
and processing speed is reected by the randr2values. for example, resource
\klargen" in row three of table 2, has high positive values for randr2. this
1the resource names in tables 2 and 3 have been changed to ensure condentiality.
2although we selected the complete events for the reference and load events, we could
have also chosen the start events or both the start and complete events.10 j. nakatumba, w.m.p. van der aalst
implies that \how busy" this resource has been in the past aects the speed at
which he executes activities. both tables also show the slope and intercept values
which are used in the regression equation. for example, the regression equation
for \klargen" in table 2 is: processing speed = -585057.5 + 704292( workload ),
i.e.,0= 585057:5 and1= 704292 in y=0+1x+". the results obtained
in table 2 are based on all the activities that the resources executed over the
whole log. we point out that in real-life resources can be involved in multiple
processes yet the event log records events for one particular process in isolation
that a resource may be involved in. hence the resource utilization is low in these
logs. this aects the values obtained for randr2(they are not as high as they
may have been expected).
table 3. linear regression results for the resource/activity dimension. for example,
for the fth row \jcokkie" is the resource name and \ctt" is the activity name.
resource & activity
namescorrelation
coecient (r)r2intercept ( 0)slope ( 1)
pbakere/publiceren 0.99 0.99 -14559.3 25824.7
pbakere/ar03arcdossier 0.98 0.99 -612530 742325.5
jcokkie/bv99convdoss 0.99 0.98 -14037.7 99539
jcokkie/ctt 0.78 0.61 -139809 86795
jcokkie/ar03arcdossier 0.99 0.99 354495 258812.5
clijfers/bv26financion 0.65 0.43 -41275.8 46161.6
clijfers/bv24afwerkbesch 0.99 0.99 -129321 131731.7
clijfers/bv36w0z 0.79 0.63 -263634 266631.2
nlijslet/bv26bouwcontrole 0.97 0.95 -97185.4 102766.2
pkelders/bv06milieu 0.73 0.53 -21966 2059.2
pkelders/bv29gereed 0.99 0.99 -6940 6940
pkelders/bv28gestat 0.57 0.30 -4961 4961
hwyman/bv26belastingen 0.97 0.94 -9544.5 10640.5
groemer/bv24afwerk 0.77 0.59 -76566 84550.7
dtruyde/bv06cct 0.92 0.86 -263933 273645
to obtain the results shown in table 3, we lter the log based on the resources
to get the activities that each resource executes and the events per activity are
used for obtaining the workload. several values for r2in this table are greater
than 0.7 which is a strong indication that most of the variability in the processing
speeds is explainable by the workload. for example, for \pbakere&publiceren"
in row 1 of table 3, r2= 0.99 which implies that 99% of the variability in the
processing speed is dependent on the workload for this resource. we also point
out that, although for some resources there is no signicant relationship when
all the activities they executed are considered (see table 2) as reected by the
lowrandr2, there is a signicant relationship when the individual activities are
considered as reected by the high randr2values (see table 3). for example,
resource \jcokkie" in the rst row of table 2 has values of r= 0.44 and r2=
0.19, whereas in table 3, in row 5 \jcokkie & ar03 arcdossiers" with values ofanalyzing resource behavior using process mining 11
r= 0.99 and r2= 0.99 and in row 4 \jcokkie & ctt" where r= 0.78 and r2
= 0.61. these examples indeed suggest that the speed at which people work is
indeed inuenced by their workload.
6 related work
the work presented in this paper is related to earlier work on process mining and
operations management. recently many tools and techniques for process mining
have been developed [2, 11]. note that process mining is not restricted to control-
ow discovery [2]. for example, in [11] the main aim is to build organizational
models from event logs and analyze relationships between resources involved in
a process.
the \yerkes-dodson law of arousal" [12] illustrated in figure 1, is one
of the main motivations for this paper. in operations management, substantial
work has been done to operationalize this \law" using mathematical models
and simulation in order to explore the relationship between workload and shop
performance [3]. in [8] queues with workload-dependent arrival rates and service
rates are considered. the authors of these papers investigate what the eect on
production eciency is based on controlling the arrival rates and service rates
as a result of the workload present in the system. juedes et al. [6] introduce
the concept of workload-dependent processing speeds in real-time computing. in
this study, they deal with a maximum allowable workload problem for real-time
systems with tasks having variable workload sizes.
the related work mentioned above does not actually measure the relationship
between workload and service times. this paper has presented such an analysis
technique based on linear regression analysis. this is supported by a new plug-
in in prom and has been applied to several examples. we are not aware of
other studies that try to discover phenomena such as the one described by the
\yerkes-dodson law of arousal".
7 conclusion
although organizations use various analysis techniques to analyze their business
processes, the results may be very misleading if the assumptions used are incor-
rect. for example, in most simulation tools service times are simply sampled from
a probability distribution without considering the workload. in this paper, we
presented an approach to quantify the relationship between workload and pro-
cessing speed. this approach is based on regression analysis and is implemented
as a new plug-in in prom.
we consider this as a rst step approach in the use of process mining tech-
niques for the extraction of useful information from event logs that characterizes
resource behavior and also as an addition to the repertoire of process mining
techniques. we expect that process mining techniques will focus more and more
on the behavior of workers once it becomes easier to discover processes.12 j. nakatumba, w.m.p. van der aalst
experimentation shows that the relationship described by the \yerkes-
dodson law of arousal" really exists. however, to truly capture the inverse
u-shape depicted in figure 1, we need more sophisticated regression techniques.
in this paper, we focus on the denition of workload as the number of work items
that have been executed over a particular period, but there other workload def-
initions that are possible and can be explored. our future research will aim at
more powerful analysis techniques and a tight coupling between simulation and
operational decision making. as discussed in [1], we want to make simulation
more realistic by adequately modeling resources based on empirical data. be-
sides workload-dependent process times, we also take into account that people
are involved in multiple processes, are available only part-time, work in batches.
experiments show that these factors really inuence performance [1].
references
1. van der aalst, w.m.p., nakatumba, j., rozinat, a., russell, n.: business process
simulation: how to get it right? in: vom brocke, j., rosemann, m. (eds.) interna-
tional handbook on business process management. springer, berlin (2008)
2. van der aalst, w.m.p., weijters, a.j.m.m., maruster, l.: workow mining: dis-
covering process models from event logs. ieee transactions on knowledge and
data engineering. 16(9), 1128-1142 (2004)
3. bertrand, j.w.m., van ooijen, h.p.g.: workload based order release and produc-
tivity: a missing link. production planning and control 13(7), 665-678 (2002)
4. van dongen, b.f., van der aalst, w.m.p.: a meta model for process mining data.
in casto, j., teniente, e. (eds.) proceedings of the caise workshops (emoi-
interop workshop) vol. 2, pp. 309-320 (2005)
5. dumas, m., van der aalst, w.m.p., ter hofstede a.h.m.: process-aware informa-
tion systems: bridging people and software through process technology. wiley &
sons (2005)
6. juedes, d., drews, f., welch, l.: workload functions: a new paradigm for real-
time computing. in: 10th ieee real-time and embedded technology and appli-
cations symposium work-in progress session, pp. 25-28 (2004)
7. montgomery, d.c., peck, e.a.: introduction to linear regression analysis. wiley
& sons (1992)
8. van ooijen, h.p.g., bertrand j.w.m.: the eects of a simple arrival rate control
policy on throughput and work-in-progress in production systems with workload
dependent processing rates. international journal of production economics vol. 85,
pp. 61-68 (2003)
9. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation
models. information systems 34(3), 305-327 (2009).
10. rozinat, a., wynn, m.t., van der aalst, w.m.p., ter hofstede a.h.m., fidge,
c.: workow simulation for operational decision support using design, historic
and state information. in dumas, m., reichert, m., shan, m.c.(eds.) bpm 2008.
lncs, vol. 5240, pp. 196-211. springer, heidelberg (2008)
11. song, m., van der aalst, w.m.p.: towards comprehensive support for organiza-
tional mining. decision support systems 46(1), 300{317 (2008).
12. wickens, c.d.: engineering psychology and human performance. harper (1992)