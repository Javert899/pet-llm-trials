causal nets: a modeling language tailored
towards process discovery
w.m.p. van der aalst, a. adriansyah, and b.f. van dongen
department of mathematics and computer science,
technische universiteit eindhoven, the netherlands.
fw.m.p.v.d.aalst,a.adriansyah,b.f.v.dongen g@tue.nl
abstract. process discovery|discovering a process model from exam-
ple behavior recorded in an event log|is one of the most challenging
tasks in process mining. the primary reason is that conventional model-
ing languages (e.g., petri nets, bpmn, epcs, and ulm ads) have dif-
culties representing the observed behavior properly and/or succinctly.
moreover, discovered process models tend to have deadlocks and live-
locks. therefore, we advocate a new representation more suitable for
process discovery: causal nets . causal nets are related to the representa-
tions used by several process discovery techniques (e.g., heuristic mining,
fuzzy mining, and genetic mining). however, unlike existing approaches,
we provide declarative semantics more suitable for process mining. to
clarify these semantics and to illustrate the non-local nature of this new
representation, we relate causal nets to petri nets.
1 motivation
in this paper, we advocate the use of causal-nets (c-nets ) in process mining.
c-nets were introduced in [2] and, in our view, provide a better representational
bias for process discovery than conventional design-oriented languages such as
petri nets, bpmn, bpel, epcs, yawl, and uml activity diagrams.
figure 1 shows a c-net modeling the booking of a trip. after activity a(start
booking ) there are three possible activities: b(book ight ),c(book car ), andd
(book hotel ). the process ends with activity e(complete booking ). each activity
has sets of potential input and output bindings (indicated by the black dots).
every connected set of dots on the output arcs of an activity is an output bind-
ing. for example, ahas four output bindings modeling that amay be followed
by (1) just b, (2) justc, (3)bandd, or (4)b,c, andd. hence, it is not possible
to book just a hotel or a hotel and a car. activity chas two input bindings
modeling that it is preceded by (1) just aor (2)aandb. this construct is used
to model that when both a ight and a car are booked, the ight is booked rst.
output bindings create obligations whereas input bindings remove obligations.
for example, the occurrence of awith output binding fb;dgcreates two obliga-
tions: both banddneed to be executed while referring to the obligations created
bya.a
start 
bookingc e
complete 
bookingbook car
d
book hotelbbook flightfig. 1. causal net ctravel
in a c-net there is one start activity ( ain fig. 1) and one end activity ( e
in fig. 1). a valid binding sequence models an execution path starting with
aand ending with ewhile removing all obligations created during execution.
the behavior of a c-net is restricted to valid binding sequences. hence, unlike
conventional modeling languages, the semantics are non-local. section 2 explains
the semantics of c-nets in more detail and provides additional examples.
c-nets address important limitations of conventional languages in the context
ofprocess mining [2]. process mining is an emerging research discipline focusing
on the interplay between event logs (observed behavior) and process models.
process discovery is the process mining task that aims to learn process models
based on example behavior recorded in events logs, e.g., based on a multi-set
of activity sequences (process instances) a petri net that models the observed
behavior is discovered. conformance checking is the process mining task that
compares the example behavior in a events log with the modeled behavior. based
on such a comparison it is possible to highlight and quantify commonalities and
dierences.
in the last decade dozens of new process discovery techniques have been
proposed, typically aiming at the creation of a conventional process model (e.g.,
a petri net or epc). this means that the search space that is implied by such
a design-oriented language|often referred to as the \representational bias"|
is not tailored towards process mining. this creates various problems. in this
paper, we focus on two of them:
{the discovered process model is unable to represent the underlying process
well, e.g., a signicant proportion of the behavior seen in the log is not pos-
sible in the model (non-tting model), the model allows for behavior not
related to the event log (undertting), the model is overtting (no general-
ization), or the model is overly complex because all kinds of model elements
need to be introduced without a direct relation to the event log (e.g., places,
gateways, and events).
{most of the process models in the search space determined by conventional
languages are internally inconsistent (deadlocks, livelocks, etc.), i.e., there
are more inconsistent models than consistent ones. process discovery tech-niques need to \guess" the underlying model based on example behavior.
if almost all of these guesses result in models that are obviously incorrect
(even without considering the event log), then the results are of little value.
consider for example an algorithm producing a petri net (e.g., the various region-
based approaches [11] and variants of the -algorithm [2]). the behavior in a
petri net can be restricted by adding places. however, places have no direct
meaning in terms of the behavior seen in the event log. moreover, the addition
or removal of places may introduce deadlocks, livelocks, etc.
this is the reason why the more useful process discovery techniques use al-
ternative representations: fuzzy models [7],heuristic nets [9],exible heuristic
nets [10], causal matrices [8], etc. also for conformance checking one can nd
similar representations, e.g., exible models [4]. on the one hand, these repre-
sentations are similar to c-nets (i.e., activities can model xor/or/and-splits
and joins without introducing separate model elements). on the other hand, the
semantics of such models are very dierent from the semantics we use for c-nets.
the distinguishing feature is that we limit the possible behavior to valid binding
sequences , thus excluding a variety of anomalies.
this paper introduces c-nets while focusing on their semantics (sect. 2).
we believe that our formalization sheds new light on the representations used
in [4,7,8,9,10]. we also provide two mappings: one from c-nets to petri nets
and one from petri nets to c-nets (sect. 3). these mappings help to clarify
the semantics and highlight the distinguishing features of c-nets. moreover, to
illustrate the practical relevance of c-nets, we describe how the prom framework
is supporting/using c-nets (sect. 4).
2 causal nets
this section introduces causal nets { a representation tailored towards process
mining { and their semantics.
2.1 denition
a causal-net (c-net) is a graph where nodes represent activities and arcs repre-
sent causal dependencies. each activity has a set of possible input bindings and a
set of possible output bindings . consider, for example, the c-net shown in fig. 2.
activityahas only an empty input binding as this is the start activity. there
are two possible output bindings: fb;dgandfc;dg. this means that ais followed
by eitherbandd, orcandd. activityehas two possible input bindings ( fb;dg
andfc;dg) and three possible output bindings ( fgg,fhg, andffg). hence,e
is preceded by either bandd, orcandd, and is succeeded by just g,horf.
activityzis the end activity having two input bindings and one output binding
(the empty binding). this activity has been added to create a unique end point.
all executions commence with start activity aand nish with end activity z.
note that unlike, petri nets, there are no places in the c-net; the routing logic
is solely represented by the possible input and output bindings.a
register 
requestb
examine 
thoroughly
c
examine 
casually
d
check
ticketdecidepay 
compensation
reject 
requesteg
h
fend
reinitiate 
requestz
xor-split and-split or-split
xor-join and-join or-joinfig. 2. c-net crfcmodeling a \request for compensation" (rfc) process
denition 1 (causal net [2]). acausal net (c-net) is a tuple c= (a;ai;ao;
d;i;o )where:
{ais a nite set of activities ;
{ai2ais the start activity ;
{ao2ais the end activity ;
{daais the dependency relation ,
{as=fxp(a)jx=f;g _ ;62 xg;1
{i2a!as denes the set of possible input bindings per activity; and
{o2a!as denes the set of possible output bindings per activity,
such that
{d=f(a1;a2)2aaja12s
as2i(a2)asg;
{d=f(a1;a2)2aaja22s
as2o(a1)asg;
{faig=fa2aji(a) =f;gg ;
{faog=fa2ajo(a) =f;gg ; and
{all activities in the graph (a;d)are on a path from aitoao.
the c-net of fig. 2 can be described as follows. a=fa;b;c;d;e;f;g;h;z g
is the set of activities, a=aiis the unique start activity, and z=aois the
unique end activity. the arcs shown in fig. 2 visualize the dependency relation
d=f(a;b);(a;c);(a;d);(b;e);:::; (g;z);(h;z)g. functions iandodescribe the
1p(a) =fa0ja0agis the powerset of a. hence, elements of asaresets of sets
of activities.sets of possible input and output bindings. i(a) =f;gis the set of possible
input bindings of a, i.e., the only input binding is the empty set of activities.
o(a) =ffb;dg;fc;dggis the set of possible output bindings of a, i.e., activity
ais followed by dand either borc.i(b) =ffag;ffgg,o(b) =ffegg,:::,
i(z) =ffgg;fhgg,o(z) =f;g. note that any element of asis a set of sets
of activities, e.g., ffb;dg;fc;dgg2 as. if one of the elements is the empty set,
then there cannot be any other elements, i.e., for any any x2as:x=f;gor
;62x. this implies that only the unique start activity aihas the empty binding
as (only) possible input binding. similarly, only the unique end activity aohas
the empty binding as (only) possible output binding.
anactivity binding is a tuple (a;asi;aso) denoting the occurrence of activity
awith input binding asiand output binding aso. for example, ( e;fb;dg;ffg)
denotes the occurrence of activity ein fig. 2 while being preceded by bandd,
and succeeded by f.
denition 2 (binding). letc= (a;ai;ao;d;i;o )be a c-net. b=f(a;asi;
aso)2ap(a)p(a)jasi2i(a)^aso2o(a)gis the set of activity
bindings . abinding sequence is a sequence of activity bindings, i.e., 2b.
note that sequences are denoted using angle brackets, e.g., hidenotes the
empty sequence. bis the set of all sequences over b(includinghi). a possible
binding sequence for the c-net of fig. 2 is ex=h(a;;;fb;dg);(b;fag;feg);
(d;fag;feg);(e;fb;dg;fgg);(g;feg;fzg);(z;fgg;;)i.
function2b!aprojects binding sequences onto activity sequences ,
i.e., the input and output bindings are abstracted from and only the activity
names are retained. for instance, (ex) =ha;b;d;e;g;zi.
consider c-net ctravel shown in figure 1. the possible input and output
bindings of ctravel are dened as follows: o(a) =i(e) =ffbg;fcg;fb;dg;fb;c;dgg,
i(a) =o(e) =f;g,i(b) =i(d) =ffagg,o(c) =o(d) =ffegg,i(c) =
ffag;fa;bgg, ando(b) =ffeg;fc;egg. a possible binding sequence for the c-net
shown in fig. 1 is =h(a;;;fb;c;dg);(d;fag;feg);(b;fag;fc;eg);(c;fa;bg;feg);
(e;fb;c;dg;;)i, i.e., the scenario in which a hotel, a ight, and a car are booked.
() =ha;d;b;c;eiis the corresponding activity sequence. note that in fig. 1 a
hotel can only be booked if a ight is booked. moreover, when both a car and a
ight are booked, then rst the ight needs to be booked.
2.2 valid sequences
a binding sequence is valid if a predecessor activity and successor activity
always \agree" on their bindings. for a predecessor activity xand successor
activityywe need to see the following \pattern": h:::;(x;f:::g;fy;:::g);:::;
(y;fx;:::g;f:::g); :::i, i.e., an occurrence of activity xwithyin its output
binding needs to be followed by an occurrence of activity y, and an occurrence
of activityywithxin its input binding needs to be preceded by an occurrence
of activity x. to formalize the notion of a valid sequence, we rst dene the
notion of state. states are represented by multi-sets of obligations , e.g., state[(a;b)2;(a;c)] denotes the state where there are two pending activations of bby
aand there is one pending activation of cbya. this means that bneeds to
happen twice while having ain its input binding and cneeds to happen once
while having ain its input binding.
denition 3 (state). letc= (a;ai;ao;d;i;o )be a c-net. s=i b(aa)
is the state space ofc.s2sis a state , i.e., a multi-set of pending obliga-
tions . function  2b!sis dened inductively:  (hi) = [ ] and (
(a;asi;aso)) = ( ()n(asifag))](fagaso)for any binding sequence
(a;asi;aso)2b.2 ()is the state after executing binding sequence .
consider c-net crfcshown in fig. 2. initially there are no pending \obliga-
tions", i.e., no output bindings have been enacted without having corresponding
input bindings. if activity binding ( a;;;fb;dg) occurs, then  (h(a;;;fb;dg)i) =
 (hi)n(;fag)](fagfb;dg) = ([ ]n[ ])][(a;b);(a;d)] = [(a;b);(a;d)]. state
[(a;b);(a;d)] denotes the obligation to execute both banddusing input bindings
involvinga. input bindings remove pending obligations whereas output bindings
create new obligations.
avalid sequence is a binding sequence that (1) starts with start activity
ai, (2) ends with end activity ao, (3) only removes obligations that are pend-
ing, and (4) ends without any pending obligations. consider, for example, the
valid sequence =h(a;;;fb;dg);(d;fag;feg);(b;fag;feg);(e;fb;dg;;)ifor c-
netctravel in fig. 1:
 (hi) = [ ]
 (h(a;;;fb;dg)i) = [(a;b);(a;d)]
 (h(a;;;fb;dg);(d;fag;feg)i) = [(a;b);(d;e)]
 (h(a;;;fb;dg);(d;fag;feg);(b;fag;feg)i) = [(b;e);(d;e)]
 (h(a;;;fb;dg);(d;fag;feg);(b;fag;feg);(e;fb;dg;;)i) = [ ]
sequenceindeed starts with start activity a, ends with end activity e, only
removes obligations that are pending (i.e., for every input binding there was an
earlier output binding), and ends without any pending obligations:  () = [ ].
denition 4 (valid). letc= (a;ai;ao;d;i;o )be a c-net and =h(a1;asi
1;
aso
1);(a2;asi
2;aso
2);:::; (an;asi
n;aso
n)i2bbe a binding sequence. is avalid
sequence ofcif and only if:
{a1=ai,an=ao, andak2anfai;aogfor1<k<n ;
{ () = [ ] ; and
{for any non-empty prex 0=h(a1;asi
1;aso
1);:::; (ak;asi
k;aso
k)i(1k
n):(asi
kfakg) (00)with00=h(a1;asi
1;aso
1);:::; (ak 1;asi
k 1;aso
k 1)i
vcn(c)is the set of all valid sequences of c.
2is used to concatenate an element to the end of a sequence, e.g., ha; b; cid=
ha; b; c; di.x]yis the union of two multi-sets. xnyremoves yfromx(dierence
of two multi-sets). ordinary sets will be used as multi-sets throughout this paper.the rst requirement states that valid sequences start with aiand end with
ao(aiandaocannot appear in the middle of valid sequence). the second require-
ment states that at the end there should not be any pending obligations. (one
can think of this as the constraint that no tokens left in the net.) the last require-
ment considers all non-empty prexes of :h(a1;asi
1;aso
1);:::; (ak;asi
k;aso
k)i.
the last activity binding of the prex (i.e., ( ak;asi
k;aso
k)) should only remove
pending obligations, i.e., ( asi
kfakg) (00) where asi
kfakgare the obli-
gations to be removed and  (00) are the pending obligations just before the
occurrence of the k-th binding. (one can think of this as the constraint that one
cannot consume tokens that have not been produced.)
the c-net in fig. 1 has seven valid sequences: only bis executed (h(a;;;fbg);
(b;fag;feg);(e;fbg;;)i), onlycis executed (besides aande),banddare exe-
cuted (two possibilities), and b,canddare executed (3 possibilities because b
needs to occur before c). the c-net in fig. 2 has innitely many valid sequences
because of the loop construct involving f.
for the semantics of a c-net we only consider valid sequences, i.e., invalid
sequences are not part of the behavior described by the c-net. this means that
c-nets do not use plain \token-game semantics" as employed in conventional
languages like bpmn, petri nets, epcs, and yawl. the semantics of c-nets
are more declarative as they are dened over complete sequences rather than a
local ring rule. note that the semantics abstract from the moment of choice;
pending obligations are not exposed to the environment and are not xed during
execution (i.e., all valid interpretations remain open).
2.3 soundness
the notion of soundness has been dened for a variety of workow and business
process modeling notations (e.g., workow nets as shown in sect. 3.1). a process
model is sound if it is free of deadlocks, livelocks, and other obvious anomalies.
a similar notion can be dened for c-nets.
denition 5 (soundness of c-nets [2]). a c-netc= (a;ai;ao;d;i;o )
issound if (1) for all a2aand asi2i(a)there exists a 2vcn(c)and
asoasuch that (a;asi;aso)2, and (2) for all a2aand aso2o(a)there
exists a2vcn(c)and asiasuch that (a;asi;aso)2.
since the semantics of c-nets already enforce \proper completion" and the
\option to complete", we only need to make sure that there are valid sequences
and that all parts of the c-net can potentially be activated by such a valid
sequence. the c-nets ctravel andcrfcin figs. 1 and 2 are sound. figure 3
shows two c-nets that are not sound. in fig. 3(a), there are no valid sequences
because none of output bindings of amatches any of the input bindings of
e. for example, consider the binding sequence =h(a;;;fbg);(b;fag;feg)i.
sequencecannot be extended into a valid sequence because  () = [(b;e)] and
fbg62i(e), i.e., the input bindings of edo not allow for just booking a ight
whereas the output bindings of ado. in fig. 3(b), there are valid sequences,e.g.,h(a;;;fcg);(c;fag;feg);(e;fcg;;)i. however, not all bindings appear in one
or more valid sequences. for example, the output binding fbg2o(a) does not
appear in any valid sequence, i.e., after selecting just a ight the sequence cannot
be completed properly. the input binding fc;dg2i(e) also does not appear in
any valid sequence, i.e., the c-net suggests that only a car and hotel can be
booked but there is no corresponding valid sequence.
a
start 
bookingc e
complete 
bookingbook
car
d
book
hotelb
book
flight
a
start 
bookingc e
complete 
bookingbook
car
d
book
hotelb
book
flight
(a) unsound because there are no valid sequences (b) unsound although there exist valid sequences
fig. 3. two c-nets that are not sound. the rst net (a) does not allow for any valid
sequence, i.e., vcn(c) =;. the second net (b) has valid sequences but also shows
input/output bindings that are not realizable (indicated in red)
figure 4 shows another c-net. one of the valid binding sequences for this
c-net ish(a;;;fbg);(b;fag;fb;cg);(b;fbg;fc;dg);(c;fbg;fdg);(c;fbg;fdg);(d;
fb;cg;fdg);(d;fc;dg;feg);(e;fdg;;)i, i.e., the sequence ha;b;b;c;c;d;d;ei. this
sequence covers all the bindings. therefore, the c-net is sound. examples of
other valid sequences are ha;b;c;d;ei,ha;b;c;b;c;d;d;ei, andha;b;b;b; c;c;c;d;
d;d;ei.
ac
b d e
fig. 4. a sound c-net for which there does not exist a wf-net having the same set of
activity sequences
c-nets are particularly suitable for process mining given their declarative
nature and expressiveness without introducing all kinds of additional model ele-
ments (places, conditions, events, gateways, etc.). several process discovery use
similar representations [7,8,9,10]. however, these models tend to use rather in-
formal semantics; the model serves more like a \picture" showing dependencies
rather than an end-to-end process model.3 relating c-nets and petri nets
to better understand the semantics of c-nets, we relate c-nets to petri nets. we
provide a mapping from wf-nets to c-nets and show that the resulting c-net
is behaviorally equivalent to the original wf-net. we also provide a mapping
from c-nets to wf-nets that over-approximates the behavior.
3.1 petri nets and wf-nets
we assume that the reader is familiar with petri nets. therefore, we just sum-
marize the basic concepts and notations relevant for the two mappings.
denition 6 (petri net). apetri net is a triplet n= (p;t;f )wherepis
a nite set of places ,tis a nite set of transitions such thatp\t=;,
andf(pt)[(tp)is a set of directed arcs, called the ow relation .
amarked petri net is a pair (n;m ), wheren= (p;t;f )is a petri net and
wherem2i b(p)is amulti-set overpdenoting the marking of the net.
petri nets are dened in the standard way. markings, i.e., states of the net,
are denoted as multi-sets. for any x2p[t,x=fyj(y;x)2fg(input nodes)
andx=fyj(x;y)2fg(output nodes). a transition tisenabled if each of its
input placestcontains at least one token. an enabled transition tmay re, i.e.,
one token is removed from each of the input places tand one token is produced
for each of the input places t. formally: ( mnt)]tis the marking resulting
from ring enabled transition tin marking m.
a sequence 2tis called a ring sequence of (n;m 0) if and only if, for
somen2f0;1;:::g, there exist markings m1;:::;m nand transitions t1;:::;t n2
tsuch that=ht1:::tniand, for all iwith 0i < n ,ti+1is enabled in mi
and ringti+1results in marking mi+1.
for business process modeling and process mining, often a restricted class
of petri nets is used: workow nets (wf-nets) [1,3]. the reason is that process
instances have a clear starting and ending point. for example, a customer order,
a patient treatment, a request for a mortgage, etc. all have a life-cycle with a
well-dened start and end. process instances are often referred to as cases . a
wf-net describes the life-cycle of such cases.
denition 7 (workow net [1]). petri netn= (p;t;f )is aworkow net
(wf-net) if and only if (1) pcontains an input place pi(also called source place)
such thatpi=;, (2)pcontains an output place po(also called sink place) such
thatpo=;, and (3) every node is on a path from pitopo.
cases start in the marking [ pi] (one token in the unique source place) and
ideally end in the marking [ po] (one token in the unique sink place). the wf-net
should ensure that it is always possible to reach the nal marking [ po]. moreover,
a wf-net should not contain dead parts, i.e., parts that can never be activated.
these requirements result in the classical denition of soundness for wf-nets.denition 8 (soundness [1,3]). letn= (p;t;f )be a wf-net with input
placepiand output place po.nissound if and only if (1) for any marking
reachable from [pi]it is possible to reach the marking [po](option to complete ),
and (2) (n;[pi])contains no dead transitions ( absence of dead parts , i.e., for
anyt2t, there is a ring sequence enabling t).
we are interested in the set vpn(n) of all ring sequences that start in
marking [pi] and end in marking [ po]. note that in a sound wf-net, all full
ring sequences (i.e., ring sequences ending in a dead marking) are valid.
denition 9 (valid ring sequences). letn= (p;t;f )be a wf-net.
vpn(n)tis the set of all valid ring sequences , i.e., ring sequences start-
ing in marking [pi]and ending in marking [po].
at rst sight, c-nets seem to be related to zero-safe nets [5]. the places
in a zero-safe net are partitioned into stable-places and zero-places . observable
markings only mark stable-places, i.e., zero-places need to be empty. in-between
observable markings zero-places may be temporarily marked. however, zero-
places cannot be seen as bindings because the obligations between two activities
may be non-local, i.e., an output binding may create the obligation to execute
an activity occurring much later in the process.
3.2 mapping wf-nets onto c-nets
any sound wf-net can be transformed into an equivalent c-net by convert-
ing places into activities with xor-join and xor-split bindings. the idea is
sketched in fig. 5 and can be formalized as follows.
denition 10 (mapping i). letn= (p;t;f )be a wf-net with input place
piand output place po.cn= (a;ai;ao;d;i;o )is the corresponding c-net with
a=t[p,ai=pi,ao=po,d=f,i(t) =ftgando(t) =ftgfort2t,
andi(p) =fftgjt2pgando(p) =fftgjt2pgforp2p.
to relate valid ring sequences in wf-nets to valid binding sequences in
c-nets, we dene a generic projection operation. "yis the projection of
some sequence 2xonto some subset yx, i.e., elements of not in
yare removed. this operation can be generalized to sets of sequences, e.g.,
fha;b;c;a;b;c;di;hb;b;d;eig"fa;bg=fha;b;a;bi;hb;big.
theorem 1. letn= (p;t;f )be a sound wf-net having cnas its corre-
sponding c-net.
{for any valid ring sequence n2vpn(n), there exists a valid binding
sequencec2vcn(cn)such that(c)"t=n.
{for any valid binding sequence c2vcn(cn), there exists a valid ring
sequencen2vpn(n)such that(c)"t=n.t1
t3p1
t4t2t5
t6
t7p2t1
t3
t4t2t5
t6
t7p1
p2
(a) (b)fig. 5. mapping a fragment of a wf-net (a) onto a c-net (b) using denition 10
proof. letnbe a valid ring sequence of n. replaynonnwhile labeling
each token with the name of the transition that produced it. suppose that t6
in fig. 5 res while consuming a token from p1 produced by t2 and a token
fromp2 produced by t3. this occurrence of t6 corresponds to the subsequence
h:::;(p1;ft2g;ft6g);(p2;ft3g;ft6g);(t6;fp1;p2g;f:::g)i. this way it is possible
to construct a valid binding sequence c. note that there may be multiple valid
binding sequences corresponding to n.
letcbe a valid binding sequence. it is easy to see that ccan be replayed
on the wf-net. in fact, one can simply abstract from \place activities" as these
correspond to routing decisions not relevant for wf-nets (only the presence of a
token matters not where the token came from). therefore, each ccorresponds
to a singlen. u t
c-nets are at least as expressive as sound wf-nets because all valid ring se-
quences innhave a corresponding valid binding sequence in cnand vice-versa.
the reverse does not hold as is illustrated by fig. 4. this model is unbounded
and has innitely many binding sequences. since sound wf-nets are bounded
[1,3], they can never mimic the behavior of the c-net in fig. 4.
3.3 mapping c-nets onto wf-nets
figure 4 illustrates that wf-nets are not as expressive as c-net. nevertheless,
it is interesting to construct wf-nets that over-approximate the behavior of
c-nets.
denition 11 (mapping ii). letc= (a;ai;ao;d;i;o )be a c-net. nc=
(p;t;f )is the corresponding wf-net with p=fpi
aja2ag[fpo
aja2
ag[fpd
(a1;a2)j(a1;a2)2dg,ti=fai
xja2a^x2i(a)^x6=;g,
to=fao
xja2a^x2o(a)^x6=;g,t=a[ti[to,f=
f(pi
a;a)ja2ag[f (a;po
a)ja2ag[f (ai
x;pi
a)jai
x2tig[f (po
a;ao
x)jao
x2
tog[f(pd
(a1;a);ai
x)jai
x2ti^a12xg[f(ao
x;pd
(a;a2))jao
x2to^a22xg.figure 6 illustrates this construction. the black transitions correspond to
silent transitions (often referred to as transitions). since there is a unique
start activity ai, there is one source place pi=pi
ai. moreover, there is one sink
placepo=po
aoand all nodes are on a path from pitopo. therefore, ncis indeed
a wf-net.
book
flight
a
start 
bookingcb
dbook
car
book
hotele
complete 
booking
fig. 6. a c-net transformed into a wf-net: every valid ring sequence of the wf-net
corresponds to a valid sequence of the c-net ctravel shown in in fig. 1 and vice versa
it is easy to see that denition 11 is such that the wf-net can mimic any
valid binding sequence. however, the corresponding wf-net does not need to
be sound and may have a ring sequence that cannot be extended into a valid
ring sequence.
theorem 2. letc= (a;ai;ao;d;i;o )be a c-net having ncas its corre-
sponding wf-net.
{for any valid binding sequence c2vcn(c), there exists a valid ring
sequencen2vpn(nc)such that(c) =n"a.
{for any valid ring sequence n2vpn(nc), there exists a valid binding
sequencec2vcn(c)such that(c) =n"a.
proof. it is easy to construct a valid ring sequence nfor any valid binding
sequencec. an activity binding ( a;x;y ) inccorresponds to the ring sub-
sequencehai
x;a;ao
yiinn. (for the start and end activity, ai
xrespectively ao
y
are omitted.) the constructed sequence meets all requirements.
letnbe a valid ring sequence. consider the occurrence of a transition
a2ainn. based on the structure of the wf-net it can be seen that awas
preceded by a corresponding transition in ti(unlessa=ai) and will be followed
by a corresponding transition in to(unlessa=ao). the reason is that ahas a
dedicated input place (no other transition can consume from it) and a dedicated
output place (no other transition can add tokens) and that after executing n
onlypo
aois marked. hence, for every occurrence of some transition a2athereis a corresponding occurrence of a transition ai
x2tiand a corresponding
occurrence of a transition ao
y2to. this information can be used to construct
c2vcn(c) such that (c) =n"a. u t
the theorem shows that the expressiveness of c-nets is due its declarative
semantics which considers only valid binding sequences (and not the notation
itself). if one restricts wf-nets to valid ring sequences (and allows for silent
transitions!), the same expressiveness is achieved.3note that this is related to
the notion of relaxed soundness [6]. in fact, a c-net cis sound if and only if
the corresponding wf-net ncis relaxed sound. in [6] it is shown that for some
relaxed sound wf-nets a corresponding sound wf-net can be constructed.
4 application of c-nets in prom
in the previous sections we introduced c-nets and related them to petri nets.
after these theoretical considerations, we briey describe the way in which the
prom framework supports c-nets. prom is an open-source process analysis tool
with a pluggable architecture. originally, the focus of prom was exclusively on
process mining. however, over time the scope of the system broadened to also
include other types of analysis (e.g., verication). in the remainder, we provide
a brief overview of prom's functionality. note that we show just a fraction of
the hundreds of plug-ins available (cf. www.processmining.org).
4.1 model management and conversion
prom is able to load and save c-nets in a dedicated le format. petri nets can
be converted to c-nets using the construction of denition 10. similarly, it is
possible to convert a c-net into a petri net using the construction of deni-
tion 11. conversions to and from other formats (epcs, bpmn, etc.) are being
developed. these formats can already be converted to petri nets thus enabling
an indirect conversion from these formats to c-nets.
4.2 model-based verication
prom has extensive support for transition systems and petri nets. moreover,
also petri nets with reset and inhibitor arcs and specic subclasses such as wf-
nets are supported. typical petri nets properties such as liveness, boundedness,
etc. can be analyzed using various plug-ins. prom also embeds the well-known
lola (a low level petri net analyzer) tool for more advanced forms of model-
based analysis. there are also plug-ins analyzing structural properties of the
net (invariants, traps, siphons, components, etc.). these plug-ins can be applied
to wf-nets. moreover, plug-ins like woan are able to verify soundness and
diagnose errors.
the plug-in \check soundness of causal net" checks the property dened in
denition 5. internally, the plug-in converts the model into a wf-net and then
checks relaxed soundness.
3expressiveness in terms matching sequences.4.3 process discovery
one of the most challenging topics in process mining is the automated derivation
of a model based on example traces [2]. the starting point for process discovery
is an event log in mxml or xes format. prom provides a wide variety of
process discovery techniques, e.g., techniques based on state-based region theory,
language-based region theory, genetic mining, fuzzy mining, folding of partial
orders, or heuristic mining. the process discovery plug-ins in prom typically
produce a petri net or a model close to c-nets [2,7,8,9,10]. using the various
conversion plug-ins such results can be mapped onto c-nets.
what is missing are dedicated process discovery techniques producing c-nets
while exploiting the representational bias. this is a topic for further research.
4.4 conformance checking and performance analysis
given an event log and a process model, it is possible to replay the log on
the model. prom provides several plug-ins that replay logs on petri nets. an
example, is the \conformance checker" plug-in [2].
(a) conformance analysis
 (b) performance analysis
fig. 7. two prom plug-ins showing the results obtained through replaying the event
log on a c-net
recently, prom started to support several plug-ins that replay logs on c-nets
[4]. figure 7(a) shows that prom is able to discover deviations between a c-net
and an event log. the plug-in indicates where deviations occur and what the
overall tness of the log is (using congurable cost functions). most event logs
contain timestamps. therefore, replay can also be used to identify bottlenecks
and to measure waiting and service times. figure 7(b) shows the result of such
analysis; the colors and numbers indicate dierent performance measurements.
5 conclusion
this paper makes the case for causal-nets (c-nets) in process mining. c-nets
provide a better representational bias than conventional languages that are ei-
ther too restrictive (e.g., or-joins, unstructured loops, and skipping cannot beexpressed) or too liberal (in the sense that most models are incorrect). key in-
gredients are (1) the notion of bindings allowing for any split and join behavior
and (2) the semantic restriction to valid binding sequences.
we explored the basic properties of c-nets and analyzed their relation to petri
nets. moreover, we described the degree of support provided by prom. model
management, conversion, verication, process discovery, conformance checking,
and performance analysis of c-nets are supported by prom 6 which can be
downloaded from www.processmining.org.
references
1. w.m.p. van der aalst. the application of petri nets to workow management.
the journal of circuits, systems and computers , 8(1):21{66, 1998.
2. w.m.p. van der aalst. process mining: discovery, conformance and enhancement
of business processes . springer-verlag, berlin, 2011.
3. w.m.p. van der aalst, k.m. van hee, a.h.m. ter hofstede, n. sidorova, h.m.w.
verbeek, m. voorhoeve, and m.t. wynn. soundness of workow nets: classi-
cation, decidability, and analysis. formal aspects of computing , 23(3):333{363,
2011.
4. a. adriansyah, b.f. van dongen, and w.m.p. van der aalst. towards robust con-
formance checking. in m. zur muehlen and j. su, editors, bpm 2010 workshops,
proceedings of the sixth workshop on business process intelligence (bpi2010) ,
volume 66 of lecture notes in business information processing , pages 122{133.
springer-verlag, berlin, 2011.
5. r. bruni and u. montanari. zero-safe nets: comparing the collective and indi-
vidual token approaches. information and computation , 156(1-2):46{89, 2000.
6. j. dehnert and w.m.p. van der aalst. bridging the gap between business models
and workow specications. international journal of cooperative information
systems , 13(3):289{332, 2004.
7. c.w. g unther and w.m.p. van der aalst. fuzzy mining: adaptive process sim-
plication based on multi-perspective metrics. in g. alonso, p. dadam, and
m. rosemann, editors, international conference on business process management
(bpm 2007) , volume 4714 of lecture notes in computer science , pages 328{343.
springer-verlag, berlin, 2007.
8. a.k. alves de medeiros, a.j.m.m. weijters, and w.m.p. van der aalst. genetic
process mining: an experimental evaluation. data mining and knowledge dis-
covery , 14(2):245{304, 2007.
9. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.
10. a.j.m.m. weijters and j.t.s. ribeiro. flexible heuristics miner (fhm). beta
working paper series, wp 334, eindhoven university of technology, eindhoven,
2010.
11. j.m.e.m. van der werf, b.f. van dongen, c.a.j. hurkens, and a. serebrenik.
process discovery using integer linear programming. fundamenta informaticae ,
94:387{412, 2010.