detecting change in processes
using comparative trace clustering
b.f.a. hompes1;2, j.c.a.m. buijs1, w.m.p. van der aalst1,
p.m. dixit1;2, and j. buurman2
1department of mathematics and computer science
eindhoven university of technology, eindhoven, the netherlands
2philips research, eindhoven, the netherlands
{b.f.a.hompes,h.m.w.verbeek,w.m.p.v.d.aalst}@tue.nl
{prabhakar.dixit,hans.buurman}@philips.com
abstract. real-life business processes are complex and show a high
degree of variability. additionally, due to changing conditions and circum-
stances, these processes continuously evolve over time. for example, in the
healthcare domain, advances in medicine trigger changes in diagnoses and
treatment processes. besides changes over time, case data (e.g. treating
physician, patient age) also inuence how processes are executed. existing
process mining techniques assume processes to be static and therefore are
less suited for the analysis of contemporary exible business processes.
this paper presents a novel comparative trace clustering approach that is
able to expose changes in behavior. valuable insights can be gained and
process improvements can be made by nding those points in time where
behavior changed and the reasons why. evaluation on real-life event data
shows our technique can provide these insights.
keywords: process mining, trace clustering, concept drift, process com-
parison
1 introduction
business processes in exible environments typically depend on many factors.
due to changing conditions and circumstances, these processes continuously
evolve over time. for example, advances in medicine can change how patients are
treated or how diagnoses are made in hospitals. other changing circumstances
could be new legislation, seasonal eects or even preferences of involved resources.
as a result, in these exible types of processes many cases follow a unique path
through the process. this variability causes problems for existing process mining
techniques since processes are assumed to be structured and in a steady state.
contemporary process mining techniques return spaghettilike processes and
potentially misleading results when this is not the case [ 3,7,16]. the discovered
process models capture behavior possible at any given point in time. often,
however, the process context changes and what was possible before is no longer
possible or vice-versa. figure 1 shows the relevance of the problem with an
example process that has changed over time.
95fig. 1: demonstration of concept drift in a simple process. techniques that
consider the entire event log can return misleading results.
this so-called concept drift is one of the key challenges in process mining,
as discussed in the process mining manifesto [ 2]. few techniques have been
proposed to deal with concept drift in a business process setting [ 5,6,9,11,17].
where existing techniques focus mainly on change in control-ow, our focus is
on detecting changing behavior including data aspects as well.
finding changes in behavior can be of great value to process owners. detecting
unwanted changes, for example, can identify potential risks while positive change
can lead to perdurable process improvement. techniques that consider the entire
event log at once cannot show the individual changes that occur throughout the
lifetime of a process [ 5]. for example, specic types of behavior might occur for
a limited time only, or can have a seasonal nature. behavior can also merge with,
or emerge from other behavior.
analysis of dierences in behavior is supported by comparing clusterings
created for two selected partitions of the event log. this way, we can not only
compare dierences in behavior over time, but behavior for dierent case groups
(e.g. dierent age groups, customer types, cases handled by dierent resources)
can be compared as well. as such, the analysis of dierences in process behavior
is generalized.
recently we proposed a novel technique for the detection of common and
deviating behavior using trace clustering [8]. the process context is considered
by taking both control-ow as well as case and event data into account. hence,
clustering of cases is not limited to nding similar execution paths. the trace
clustering technique is based on the markov cluster (mcl) algorithm, which is
a fast and scalable cluster algorithm for graphs [ 15]. it is able to autonomously
discover a (non-specied) number of clusters of dierent sizes and densities.
hence, the resulting clustering shows both mainstream and deviating behavior.
the technique can be used to exploratively analyse the event data at hand in
order to gain novel insights into the underlying process(es).
96event log
sublogsublogsimilarity matrix
similarity matrixclustering
clusteringfig. 2: a graphical overview of the approach. dierences in behavior can be
compared using comparative trace clustering.
in this paper, we extend on the work in [ 8] by providing a new technique for
change point detection and a means to compare clusterings. figure 2 shows a
high-level overview of our approach. by incorporating the time dimension we can
discover temporal evolutions in process behavior. changes in behavior causing
or caused by dierences in case data can therefor be detected as well. in order
to detect change points, we look at similarities between cases. we consider the
eect of new events on a clustering of active cases.
the remainder of this paper is organized as follows. section 2 briey introduces
necessary preliminary denitions. the detection of change points is described
in section 3. section 4 describes the comparative trace clustering approach. an
experimental evaluation on two real-life event logs is performed in section 5.
section 6 discusses related work. the paper concludes with a summary and
planned future work in section 7.
2 preliminaries
typically, the executed events of multiple cases of a process are recorded in an
event log. an event is an execution of an activity potentially having additional
data attributes such as a timestamp or the responsible resource. a trace is a
nite sequence of events, and describes one specic instance (i.e. a case) of the
process at hand in terms of the executed events. a case can also have additional
(case-wide) attributes such as a patient birthdate or diagnosis result. denitions
in this section are based on those as dened in [1].
denition 1 (event, attribute). letebe the event universe, i.e. the set of
all possible event identiers. events may be characterized by various attributes,
e.g. an event may have a timestamp, correspond to an activity, be executued by a
particular person, etc. let nbe a set of attribute names. for any event e2e
and attribute name n2n:n(e)is the value of attribute nfor evente. if evente
does not have an attribute named n, thenn(e) =? (null value).
97typically, the following attributes are present in all events: activity (e) is the
activity associated to event e,time(e) is the timestamp ofe, andresource (e) is
theresource associated to e. additional event attributes can be the cost associated
with the event, the outcome of an activity (e.g. surgery result), etc.
denition 2 (case, trace, event log). letcbe the case universe, i.e. the
set of all possible case identiers. cases, like events, have attributes. for any
casec2cand attribute name n2n:n(c)is the value of attribute nfor casec
(n(c) =?ifchas no attribute named n). each case has a mandatory attribute
`trace':trace (c)2e.^c=trace (c)is a shorthand notation for referring to the
trace of a case. a trace is a nite sequence of events 2e, such that each
event appears only once, i.e. for 1ijjj:(i)6=(j). for any sequence
=h1;2;:::; ni,set() =f1;2;:::; ngconverts a sequence into a set,
e.g.set(ha;b;c;b;c;di) =fa;b;c;dg. an event log is a set of cases lc such
that each event appears at most once in the entire log, i.e. for any c;c02lsuch
thatc6=c0:set(^c)\set(^c0) =;.
in the example traces in figures 1 and 3 a simplied form is used where events
are represented solely by the activities they execute. in this form, a trace is a
sequence of activities and an event log a multiset of traces (since in this simplied
form cases can share their trace).
denition 3 (trace similarity matrix). letlc be an event log.
m(l) = (ll)![0:0;1:0]denotes the set of all possible trace similarity
matrices over l. for cases c;c02land a trace similarity matrix m2m (l),
m(c;c0)denotes the similarity between candc0.pm=p
c;c0m(c;c0)denotes
the sum of all elements in m. furthermore, standard matrix operations such as
addition, subtraction, multiplication, etc. are supported as well.
denition 4 (trace clustering). letlcbe an event log. a trace cluster
overlis a subset of l. a trace clustering tcp(l)1is a set of trace clus-
ters overl. we assume every case to be part of at least one trace cluster, i.e.stc =l. cases can be in multiple clusters, i.e. cluster overlap is allowed.
3 detecting change in behavior
discovering a process model on an entire real-life event log will often lead to
a spaghetti model since it has to represent all past traces [ 3,7,16]. similarly,
clustering the entire event log will show groups of behavior that were possible at
any given point in time. the evolution of this behavior is not shown.
our technique is based on the technique proposed in [ 8] where trace clustering
and outlier detection are combined in order to nd mainstream and deviating
behavior. it relies on the markov cluster (mcl) algorithm [ 15] to nd groups
of cases (trace clusters) that share behavior on a set of selected perspectives.
by incorporating both control-ow and case data, the process context is taken
1p(l) denotes the powerset over event log l, i.e. all possible sublogs of l.
98into account. because mcl is neither biased towards globular or local clusters
and is able to nd clusters of dierent density, we can distinguish common
and exceptional behavior based on cluster sizes. as the number of clusters is
discovered rather than set beforehand, changes in behavior will be reected in
change in the clustering.
mcl uses a stochastic similarity matrix between cases as its input. it al-
ternates an expansion step that raises the matrix to a given power with the
ination step. ination raises each element to a given power and normalizes
the matrix such that it is stochastic again. this alternation eventually results
in the separation of the matrix into dierent components which is interpreted
as a clustering. similarities between cases are calculated by mapping cases to
prole vectors using a set of selected perspectives and computing pair-wise vector
similarity values. possible perspectives are the occurrence or frequency of certain
activities, the values for case or event data, etc. for more information on the
calculation of this similarity matrix and the use of the mcl algorithm in trace
clustering we refer the reader to [8].
we propose to utilize the similarity matrix between cases to detect changes
in behavior. an overview of this approach can be seen in figure 3, where ve
example (simple) traces are drawn over time. over time, the occurrence of new
events in a certain trace will change the similarity of that trace to other traces,
which is reected in the similarity matrix. as this matrix is the input for the
clustering algorithm, the impact on the similarity matrix is a good indicator
for how much the clustering will change. thus, in order to detect potentially
interesting change points, we compute the change in the values of the similarity
matrix over time. similar to the approaches that use statistical tests [ 5,10,11], a
large dierence indicates a signicant change in behavior. for each event window,
cases that have events in or before that window are considered in the calculation
of the next similarity matrix. events occurring after the current event window are
not considered. as such, for each case, the prex of its trace is taken. dierent
window sizes can be considered. case attributes (e.g. patient age or gender) are
considered to be known from the very rst event in the trace of a case. as a
result, when looking at case-wide data, change points will reect on the rst
event of a deviating case. this projection of cases leads to a sublog containing
all events up to a certain time. a similarity matrix is calculated for that sublog
and compared with the previous similarity matrix. if change points have been
identied, clusterings of cases occurring before and after these points can be
created to compare behavior before and after the change point.
for example, take the traces depicted in figure 3, and consider cases to
be similar when they share activities. at rst, up to event window w3, trace
t4seems to be quite similar to the other three traces seen so far. however, in
windoww4this changes due to activity fwhich has replaced activity e. this
change is reected in the similarity matrices m1tom5. consequently the value
for3=jp(m4 m3)jwill be signicant and indicates a possible change point
inw4. since the range for the values for jp(mx mx 1)jfor future windows is
unknown, we normalize all delta values after each measurement.
99timetraceswindow size
<a b c d b d e>
<a  b c  de> 
<a b d c e>
<a c d b f>
<adcbf>
w1w2w3w4w5
m1m3m5m2m4t1
t2
t3
t4
t5
/uni0394₁
/uni0394₂/uni0394₃
/uni0394₄
time/uni0394
w4w4/uni0394min/uni0394minfig. 3: a graphical overview of the change detection approach. in order to detect
changes in behavior, the dierence in similarity matrices over time is calculated.
in this example, signicant change occurred in window w4.
1004 comparative clustering
in order to analyse the eect of changing behavior in a process, dierent clusterings
can be created and compared both programmatically and visually. by comparing
clusterings created for dierent sublogs (e.g. before and after an identied change
point), we can see where behavior changed and why. as discussed, it is also
possible to manually create selections of cases based on time or data attributes
in order to compare behavior. this can be used to compare behavior for dierent
age groups, for patients from dierent geographical locations, etc.
because of the properties of the mcl algorithm discussed in section 3,
change is reected in the cluster structure. for example, cluster sizes indicate
the frequency of the captured behavior. behavior that used to be common but
is becoming less and less frequent will still be clustered separately rather than
being merged with (dierent) common behavior, as long as the behavior remains
dissimilar enough.
clusters of cases can be annotated with descriptions about the cases that are
present. shared activities between traces and similar data values are a few of the
possibilities. for example, a cluster might group cases of patients that all share a
certain diagnosis. this diagnosis can be used to describe the cluster.
two example clusterings are shown in figure 4. in the left clustering, one
cluster is selected. by highlighting those clusters in the right clustering that
share behavior with the selected cluster(s) on the left we can show how behavior
has changed. it is possible to see how cases are clustered or what annotations
are shared. for example, we might compare two years of patient data, clustered
on diagnosis. patients that are present in both years are highlighted as shared
cases (in dark gray), while clusters that share some or all diagnoses (shared
annotations) are highlighted (in light gray). within a trace clustering, clusters
that share behavior are connected. as such, when comparing two clusterings,
clusters that are split into or have emerged from multiple clusters can be found.
this can indicate that behavior has become more specic or more general.
selected cluster
similar annotation
shared traces
fig. 4: two clusterings compared. highlighted clusters on the right show how
behavior on the left has changed.
1015 evaluation
in order to evaluate the approach we use two real-life event logs. the rst
log comes from a dutch academic hospital that contains cases pertaining to
cancer treatment procedures. it was originally used in the rst business process
intelligence contest (bpic 2011) [ 13]. the second event log contains cases of
building permit applications provided by a dutch municipality. this log is part
of the 2015 edition of the bpi challenge (bpic 2015) [ 14]. these event logs were
used so that the results can be reproduced. our technique has been implemented
in the process mining tool prom1, and is publicly available in the traceclustering
package. in the results shown here, we used parameters expansion=2, ination=15
for the mcl algorithm.
5.1 hospital event log
the rst event log contains cases of dierent stages of malignancy and of dierent
parts of the body. also, information is present about the diagnosis, treatment,
specialism required, patient age, organisational group (hospital department), etc.
this log contains 1,143 cases, 150,291 events and 624 distinct activities. there
are 981 dierent executions paths (activity sequences). there are many attributes
present on both the event and case level. all of these attributes can obtain several
dierent values, leading to a large heterogeneity in the log. as cases are recorded
between january 2005 and march 2008, the event log is likely to exhibit drifts.
for each case, there are 16 attributes for `diagnosis code', referring to the
diagnoses the patient received for dierent parts of their body. by clustering on
these attributes and comparing the years 2005 and 2006 we can see trends in
common and exceptional diagnoses. figure 5 shows how this diagnosis has evolved.
the clustering on the left represents behavior in 2005 whereas the clustering on
the right represents 2006. patients that were in the selected cluster and have had
activities in both years are highlighted in dark gray. groups of patients that have
had (partially) shared diagnoses are marked light gray. for example, out of the
539 cases in 2015, 78 (14 :5%) were diagnosed with codes m13, 822, and 106, on
dierent parts of the body. out of the 765 cases in 2016, only 84 (11 :0%) had a
diagnosis using the same codes. what's more, is that these diagnoses are present
for more body parts as well. this could indicate a trend in diseases or be due to
an improvement in diagnosis detail. as there are many smaller clusters in 2006
that have additional diagnoses (light gray), we can deduce that for the selected
diagnosis, the related diagnoses have become more specic and diagnoses are also
made on other parts of the body. in figure 5 process maps and dierences in
activities are shown for two highlighted clusters.
besides diagnosis codes, every case has 16 possible attributes for `treatment
code', referring to the treatments the patient received on dierent parts of their
body. this leads to many possible treatment combinations for dierent diagnoses.
we compare the clustering created for the combined attributes diagnosis code
1seehttp://promtools.org
102and treatment code for the years 2005 and 2006. using our technique, dierent
clusters are discovered, each cluster contains specic combinations of diagnosis
and treatment. by comparing the results for the two years, changes in treatments
for specic diagnoses become visible. as we can see from figure 6, treatment
for some diagnoses have changed. again cases in 2005 are shown on the left and
cases in 2006 are shown on the right. we can see that there are two clusters that
contain patients that were active in 2005, one of which is much smaller than
the other. for the larger cluster, additional diagnoses were made and additional
treatments were performed. as a result, more cases share this behavior. the
call-outs in figure 6 again show dierences in activities between the two years.
these dierences indicate that, over time, treatments for certain diagnoses
have changed. considering the type of process, this could be due to specic
patient needs, changes in protocols or advances in medicine. a likely reason is
that diagnoses were made (or recorded) with greater detail in 2006 versus in 2005.
insights such as these can be gained easily and can be used to verify or specify
protocols, check whether certain behavior is changing or for auditing purposes.
975
11
6
1421
38720
311298
84
52842811
2311
44
1662
24
5999
31
4520
711076
12
41115
126296
250
31
3218
10
602918514218
9
1394027
10914061
83
38
6105
994766
1694
2691
10130
1669
1869
7487
112117
205223 88
57
2652
21
aanname laboratoriumonderzoek
1151
bilirubine -geconjugeerd
77
bilirubine - totaal
92
glucose
120
ureum
133
verlosk.-gynaec. korte kaart kosten-out
21
hemoglobine foto-elektrisch
283
creatinine
317
alkalische fosfatase -kinetisch-
109
natrium vlamfotometrisch
317
telefonisch consult
81
kalium potentiometrisch
318
sgot - asat kinetisch
118
sgpt - alat kinetisch
117
melkzuurdehydrogenase -ldh- kinetisch
81
bloedgroep abo en rhesusfactor
134
rhesusfactor d - centrifugeermethode - e
134
leukocyten tellen elektronisch
205
trombocyten tellen - elektronisch
198
gammaglutamyltranspeptidase
111
cea - tumormarker mbv meia
24
squamous cell carcinoma mbv eia
69
calcium
127
albumine
108
screening antistoffen erytrocyten
129
ca-125 mbv meia
30
ordertarief
665
thorax
51
1e consult poliklinisch
124
administratief tarief       - eerste pol
137
mri abdomen
36
ligdagen - alle spec.beh.kinderg.-reval.
859
cde fenotypering
18
bloedgroepantigenen andere dan abo-rhesu
19
190021 klinische opname a002
186
190205 klasse 3b        a205
715
bicarbonaat
52
natrium - vlamfotometrisch - spoed
88
kalium vlamfotometrisch - spoed
91
haemoglobine foto-electrisch - spoed
155
actuele ph - pco2 - stand.bicarbonaat
52
kruisproef volledig -drie methoden-
142
o2-saturatie
57
bacteriologisch onderzoek met kweek -nie
117
urine onderzoek - kwalitatief
49
vervolgconsult poliklinisch
323
differentiele telling automatisch
185
trombocyten tellen - spoed
103
leucocyten tellen -electronisch- spoed
106
190101 bovenreg.toesl.  a101
586
gefiltreerd erytrocytenconcentraat
95
vagina      - toucher onder anesthesie
23
coupe ter inzage
21
behandeltijd - eenheid t3 - megavolt
35
teletherapie - megavolt fotonen bestrali
51
anesthesie  - bij behandeling met radium
23
brachytherapie - interstitieel - intensi
30
histologisch onderzoek - biopten nno
25
hematocriet mbv centrifuge
35
added activities:
- ‘melkzuur enzymatisch’- ‘haptoglobine’- ‘ct hals’
more bodyparts 
diagnosed with m13, 822, 106
4414
3071 10
6
11
52
437
36
17
4243
56
44
2130
555575
7
298
25
16
44157
28
1719
174
27
65315950
22
2079
621547
966
6
52915
64
7377
65192
62
22122 80
73
48
3813060 41
29
60
vervolgconsult poliklinisch
198
administratief tarief       - eerste pol
100
ligdagen - alle spec.beh.kinderg.-reval.
635
aanname laboratoriumonderzoek
802
creatinine - spoed
76
calcium - spoed
60
natrium - vlamfotometrisch - spoed
103
kalium vlamfotometrisch - spoed
106
differentiele telling automatisch
111
haemoglobine foto-electrisch - spoed
148
trombocyten tellen - spoed
95
cea - tumormarker mbv meia
20
squamous cell carcinoma mbv eia
47
leucocyten tellen -electronisch- spoed
100
ca-125 mbv meia
24
ordertarief
464
190021 klinische opname a002
117
bloedgroep abo en rhesusfactor
93
rhesusfactor d - centrifugeermethode - e
93
kruisproef volledig -drie methoden-
101
screening antistoffen erytrocyten
91
190205 klasse 3b        a205
474
190101 bovenreg.toesl.  a101
460
gefiltreerd erytrocytenconcentraat
73
thorax
34
glucose
73
coupe ter inzage
16
1e consult poliklinisch
68
creatinine
182
natrium vlamfotometrisch
167
kalium potentiometrisch
165
teletherapie - megavolt fotonen bestrali
30
calcium
82
albumine
80
bilirubine -geconjugeerd
53
bilirubine - totaal
57
alkalische fosfatase -kinetisch-
70
sgot - asat kinetisch
80
sgpt - alat kinetisch
80
gammaglutamyltranspeptidase
71
ureum
86
hemoglobine foto-elektrisch
153
leukocyten tellen elektronisch
112
trombocyten tellen - elektronisch
103
melkzuurdehydrogenase -ldh- kinetisch
52
verlosk.-gynaec. korte kaart kosten-out
45
telefonisch consult
47
verlosk.-gynaec.  aanv.kaart kosten-out
17
bacteriologisch onderzoek met kweek -nie
79
urine onderzoek - kwalitatief
31
selected clusters
diagnoses: 
m13, 822, 106
fig. 5: hospital log clustered on diagnosis code for cases active in 2005 (left) and
2006 (right). changes in diagnoses are discovered. more bodyparts are diagnosed
with codes m13, 822 and 106.
103added activity:
- ‘bovenreg.toesl.  a101’
missing activity:
- ‘ge/f_iltreerd erytrocytenconcentraat’
additional diagnoses:
m11, m12, m15
additional treatments:
23, 62, 603, 803, 3209, 9101selected cluster
diagnoses: 
m13, m14, m16, 106
treatments:
13, 61, 101, 103, 502, 50321
166
13
7111
53
53
9
17 810
266
212
12252
1183
212
218
6
27
8
1412
117105
410
20
aanname laboratoriumonderzoek
102
ordertarief
64
bilirubine - totaal
5
calcium
4
ct abdomen
5
verlosk.-gynaec.   jaarkaart kosten-out
17
administratief tarief       - eerste pol
119
telefonisch consult
40
ca-125 mbv meia
9
glucose
8
ureum
10
hemoglobine foto-elektrisch
26
vitamine b12 mbv chemieluminescentie
7
creatinine
21
alkalische fosfatase -kinetisch-
13
natrium vlamfotometrisch
18
kalium potentiometrisch
18
sgot - asat kinetisch
12
sgpt - alat kinetisch
13
leukocyten tellen elektronisch
17
trombocyten tellen - elektronisch
17
gammaglutamyltranspeptidase
13
vervolgconsult poliklinisch
200
melkzuurdehydrogenase -ldh- kinetisch
7
squamous cell carcinoma mbv eia
11
bacteriologisch onderzoek met kweek -nie
10
thorax
5
165
514
615
173
5
1823
811
823
5
1
4
1693
30
2417
18
3521
121330 14
30
vervolgconsult poliklinisch
284
administratief tarief       - eerste pol
172
verlosk.-gynaec.   jaarkaart kosten-out
20
aanname laboratoriumonderzoek
96
glucose
14
ureum
13
hemoglobine foto-elektrisch
37
creatinine
30
alkalische fosfatase -kinetisch-
17
ct abdomen
11
natrium vlamfotometrisch
23
kalium potentiometrisch
23
sgot - asat kinetisch
16
sgpt - alat kinetisch
16
leukocyten tellen elektronisch
24
vitamine b12 mbv chemieluminescentie
11
trombocyten tellen - elektronisch
24
gammaglutamyltranspeptidase
19
ordertarief
57
telefonisch consult
60
melkzuurdehydrogenase -ldh- kinetisch
12
squamous cell carcinoma mbv eia
12
fig. 6: hospital log clustered on diagnosis code and treatment code in 2005
(left) and 2006 (right). treatments for specic diagnoses are changing over time.
additional diagnoses and treatments are found.
5.2 municipality event log
the second event log contains cases of building permit applications in a dutch
municipality. information is present about the type of permit, the costs associated
with the permit, the involved resources, etc. again, each attribute can have several
dierent values. this log contains 1,199 cases recorded between late 2010 and
early 2015 with in total 52,217 events and 398 distinct activities. as there are
1170 dierent execution paths, almost all cases are unique from the control-ow
perspective.
each case has an attribute `parts' that refers to the dierent permit types that
are involved in the case it describes. as a pre-processing step, values containing
multiple types were split up over dierent case attributes, one for each type.
besides permit types, each case is also labeled with the attribute `term name',
describing which status has been assigned to the permit application. possible
values are `permit granted', `additional information required', `term objection
and appeal', etc.
we cluster the cases in the log on both permit type and term name and
compare cases in 2011 with cases in 2012. the results are shown in figure 7. as we
can see, few clusters are discovered, indicating only slight dierences in behavior
on these perspectives. a group of cases pertaining to mainly construction and
environmental permits that are in the `objection and appeal' term is selected in
the 2011 clustering. over a one-year period, most of this behavior has merged
104selected cluster
permit types: 
construction, monument,environment, demolition
term:
objection and appeal14
2
41211
2
3
829
4
22811
2
613
27
2
2
28
26
134
13
1
211
4
2137
8
5
217
1
2
20
2
113
5
26
167
85
14
15
2918
35
2
4
8
12
18
3
2
2
216
2
25
15
13
410
2
3
2
243 6
26
3
24
319
3
123
24128
2
8
2
2
96
6
21234
11
2
25
47
44
22 528
9
3
22324
21028
26
01_hoofd_010\\complete
29
01_hoofd_015\\complete
29
01_hoofd_020\\complete
29
01_hoofd_030_1\\complete
29
01_hoofd_030_2\\complete
29
01_hoofd_065_1\\complete
29
01_hoofd_065_2\\complete
29
01_hoofd_101\\complete
16
01_hoofd_050\\complete
29
01_hoofd_055\\complete
8
01_hoofd_110\\complete
33
01_hoofd_120\\complete
33
01_hoofd_180\\complete
33
01_hoofd_195\\complete
18
01_hoofd_200\\complete
31
01_hoofd_250\\complete
29
01_hoofd_260\\complete
29
01_hoofd_330\\complete
29
09_ah_i_010\\complete
29
01_hoofd_375\\complete
29
01_hoofd_370\\complete
29
01_hoofd_380\\complete
29
01_hoofd_430\\complete
27
11_ah_ii_010\\complete
5
01_hoofd_480\\complete
27
01_hoofd_490_1\\complete
29
01_hoofd_490_2\\complete
29
01_hoofd_491\\complete
5
01_hoofd_495\\complete
17
01_hoofd_510_1\\complete
29
01_hoofd_510_2\\complete
29
01_hoofd_520\\complete
29
01_hoofd_505\\complete
7
01_hoofd_530\\complete
29
01_hoofd_040\\complete
27
01_hoofd_060\\complete
27
01_hoofd_130\\complete
17
01_hoofd_100\\complete
24
01_hoofd_205\\complete
22
01_hoofd_540\\complete
12
06_vd_010\\complete
27
05_eind_010\\complete
27
01_hoofd_270\\complete
14
01_hoofd_470\\complete
24
01_hoofd_490_3\\complete
24
01_hoofd_190\\complete
16
14_vrij_010\\complete
15
03_gbh_005\\complete
15
07_ops_010\\complete
15
15_ngv_010\\complete
5
31
111
1197
7
33
73
1911137748
20
24412
51
34
433
25 295262
214
23
75
51252
7
832
9 34
63
35
3156468
8221
2234
4128
1064
20
121
8
99
1118
28
23106
169
105163
184
20234
51018119
4
17
867
993
34
4163
3108
13
27227
23
3337
3
129109
21
104
127
18
7111
8
159
338
17132
95
8
29
2034
47
26133
3184
68
121
287
49
1314
45
17
6611279
12
320
30115
69
26
9
17
33
193
322
1211151
56
382
30241
3 3
102
104
3
25
17
13
109
564
327
3
4051
809
17
125
414
7
69
14
47
174
28363
17
87
207
8
553
1638
15
3
322
22
24
113
44
34
15
136134
119
3
7100
23
881043
34
8
11
33
9
154
723
1333
47
136
1006
7
4
6136
43
183
3
11
25
69
24
3828287
1
15
7519
16
96
01_hoofd_010\\complete
293
01_hoofd_015\\complete
293
05_eind_010\\complete
126
01_hoofd_020\\complete
293
01_hoofd_030_2\\complete
283
01_hoofd_030_1\\complete
287
01_hoofd_040\\complete
39
01_hoofd_060\\complete
39
01_hoofd_065_2\\complete
256
01_hoofd_065_1\\complete
255
01_hoofd_101\\complete
263
01_hoofd_490_1a\\complete
32
14_vrij_010\\complete
30
01_hoofd_494a\\complete
31
03_gbh_005\\complete
42
01_hoofd_510_0\\complete
32
01_hoofd_050\\complete
151
01_hoofd_055\\complete
103
01_hoofd_110\\complete
160
01_hoofd_120\\complete
140
01_hoofd_180\\complete
289
13_crd_010\\complete
26
09_awb45_005\\complete
123
01_hoofd_195\\complete
255
01_hoofd_200\\complete
249
01_hoofd_250\\complete
113
01_hoofd_260\\complete
113
01_hoofd_330\\complete
230
08_awb45_025\\complete
26
09_ah_i_010\\complete
254
01_hoofd_370\\complete
254
01_hoofd_375\\complete
254
01_hoofd_380\\complete
253
01_hoofd_430\\complete
233
11_ah_ii_010\\complete
246
01_hoofd_480\\complete
233
01_hoofd_490_1\\complete
255
06_vd_010\\complete
70
06_vd_020\\complete
47
06_vd_030_1\\complete
47
06_vd_030_2\\complete
49
06_vd_030_3\\complete
39
06_vd_060_1\\complete
41
06_vd_060_2\\complete
43
01_hoofd_510_2\\complete
252
01_hoofd_491\\complete
197
01_hoofd_490_2\\complete
216
01_hoofd_495\\complete
250
01_hoofd_510_1\\complete
253
01_hoofd_505\\complete
66
01_hoofd_520\\complete
143
01_hoofd_530\\complete
104
01_hoofd_011\\complete
253
02_drz_010\\complete
250
04_bpt_005\\complete
248
01_hoofd_061\\complete
129
01_hoofd_110_1\\complete
100
01_hoofd_110_2\\complete
119
08_awb45_005\\complete
176
01_hoofd_196\\complete
142
01_hoofd_250_1\\complete
144
01_hoofd_250_2\\complete
144
01_hoofd_490_4\\complete
155
01_hoofd_500\\complete
117
01_hoofd_510_4\\complete
115
01_hoofd_515\\complete
115
01_hoofd_510_3\\complete
115
01_hoofd_519\\complete
113
01_hoofd_490_5\\complete
106
01_hoofd_516\\complete
86
01_hoofd_099\\complete
79
08_awb45_010\\complete
64
08_awb45_020_1\\complete
64
08_awb45_020_2\\complete
62
08_awb45_030\\complete
61
08_awb45_040\\complete
54
01_hoofd_193\\complete
42
01_hoofd_490_3\\complete
56
01_hoofd_490_5a\\complete
31
01_hoofd_510_2a\\complete
31
01_hoofd_065_0\\complete
36
01_hoofd_110_0\\complete
35
additional permit types: fire safety, commercial, driveway,violation environmental planning
many more termsfig. 7: municipality log clustered on permit type and term description. in this
case, the discovered change in behavior leads to limited insights.
with the biggest group of cases, which now represents almost all behavior in the
log in 2012.
though there clearly are dierences in behavior between the two years, it is
dicult to interpret these ndings directly. more analysis is necessary in order to
discover results that are meaningful in a business process management context.
for example, the activities that are executed could be considered when clustering
the cases in the log. as such, clusters would show dierences and similarities in
control-ow as well. this indicates that the choice for the clustering perspectives
is essential in nding valuable insights about dierences in behavior.
6 related work
although concept drift is a well-studied topic in the data mining and machine
learning communities, little work has been done on detecting concept drift in
business processes. bose et al. were the rst to consider concept drift and change
detection in a process mining setting [ 5]. in their work, a classication of possible
changes in business processes is given, and statistical hypothesis tests are used
to detect regions of change. even tough the authors consider the possibility of
change in data attributes, the scope of their work is limited to the detection of
control-ow changes in a process manifested as sudden drifts over a period of time.
more recently, martjushev et al. built on this work by looking at gradual and
multi-order dynamics to detect concept drift in control-ow [ 11]. they extend the
105work in [ 5] by providing solutions to detect gradual change as well. by considering
multi-order dynamics through the use of an adaptive window technique, process
change occurring at multiple levels of mixed time granularity can be detected.
maaradji et al. employ statistical tests over the distributions of runs observed in
two consecutive time windows in order to detect concept drift [ 10]. as noted by
the authors, in order to nd dierences in process behavior a notion of equivalence
is necessary. in their paper, a notion of run-equivalence is used. it is shown that
drift can be identied fast and accurately by using an adaptive sliding window
technique. as a result, it can be used in an online (streaming) setting as an oracle
as to when a discovered model should be updated.
weber et al. employ probabilistic deterministic nite automata (pdfa) to
represent the probability distributions generated by process models [ 17]. similar
to [5] and [ 10], statistical hypothesis tests are used to detect whether or not a
distribution has changed signicantly from a ground truth. the aim of their
technique is to identify process change as soon as possible, but with condence
that change is signicant, in order to discover a model representing reality as
good as possible. as such, only drift in control-ow is considered. in [ 6] a dierent
technique is proposed to automatically detect and manage concept drift in an
online setting. here, concept drift is detected real-time using an estimation
technique based on abstract interpretation of the process and sequential sampling
of the log. the tness of prexes of new samples taken from the log is checked
against that of prexes of initial samples. a change point is identied when
there is a signicant dierence between these two points. in the above-mentioned
techniques however, data attributes are not considered. as such, only changes in
control-ow behavior can be discovered.
trace clustering techniques are often used to nd dierent process variants.
several trace clustering techniques have been proposed in the eld of process
mining, and an extensive comparative analysis of trace clustering techniques
has recently been performed in [ 12]. often, however, the temporal dimension
is not considered. in [ 9], the starting time of each process instance is used as
an additional feature in trace clustering. by combining control-ow and time
features, the clusters formed share both a structural similarity and a temporal
proximity. the technique is based on the technique proposed in [ 4] and considers
dierent types of changes, including sudden, recurring, gradual, and incremental
changes. in more complex evolving business processes however, including the
temporal proximity of cases might lead to misleading results. for example when
seasonal drifts are intertwined with gradual changes in the process.
the technique proposed in this paper uses similar ideas and concepts as used
in the papers mentioned above. however, trace clustering is used to nd common
and deviating process behavior. by looking at both control-ow as well as data
attributes, the technique is made context-aware. we extend the technique in [ 8]
by including change detection in behavioral similarities between cases. in this
way, we can identify changes in common and deviating behavior, on both the
control-ow and data perspectives.
1067 conclusions and future work
real-life business processes are often complex while exhibiting a high degree
of variability. due to changing conditions and circumstances, these processes
continuously evolve over time. existing process mining techniques assume the
process to be static and therefore are less suited for the analysis of contemporary
business processes. in this paper we presented a novel comparative trace clustering
approach that is able to expose dierences in behavior in a process. by using
both control-ow and case data we take the process context into account. insights
can be gained into how and why behavior has changed by comparing changes
in clusterings over dierent partitions of the log. this information can then be
used for further analysis, e.g. to design protocols, for early detection of unwanted
behavior or for auditing purposes. besides the time dimension, dierent data and
control-ow attributes can be utilized in order to distinguish groups of behavior.
while our initial results show that indeed promising insights can be achieved,
there is still quite some manual work involved. more work is needed to further
automate the analysis process. in the future we would also like to look into how
changes in process behavior can be analysed in an online setting. dierent ways
to visualize change in behavior should be explored as well.
bibliography
[1]w.m.p. van der aalst. process mining: discovery, conformance and en-
hancement of business processes. springer, berlin, 2011.
[2]w.m.p. van der aalst, a. adriansyah, a.k.a. de medeiros, f. arcieri,
t. baier, t. blickle, r.p.j.c. bose, p. van den brand, r. brandtjen, j.c.a.m.
buijs, et al. process mining manifesto. in business process management
workshops, pages 169{194. springer, 2012.
[3]r.p.j.c. bose and w.m.p. van der aalst. context aware trace clustering:
towards improving process mining results. in proceedings of the siam in-
ternational conference on data mining, pages 401{412. society for industrial
and applied mathematics, 2009.
[4]r.p.j.c. bose and w.m.p. van der aalst. trace clustering based on
conserved patterns: towards achieving better process models. in business
process management workshops, pages 170{181. springer, 2010.
[5]r.p.j.c. bose, w.m.p. van der aalst, i. zliobait_ e, and m. pechenizkiy.
handling concept drift in process mining. in advanced information systems
engineering, pages 391{405. springer, 2011.
[6]j. carmona and r. gavalda. online techniques for dealing with concept
drift in process mining. in advances in intelligent data analysis xi, pages
90{102. springer, 2012.
[7]s. goedertier, j. de weerdt, d. martens, j. vanthienen, and b. baesens.
process discovery in event logs: an application in the telecom industry.
applied soft computing, 11(2):1697{1710, 2011.
107[8]b.f.a. hompes, j.c.a.m. buijs, w.m.p. van der aalst, p.m. dixit, and
j. buurman. discovering deviating cases and process variants using trace
clustering. in proceedings of the 27th benelux conference on articial
intelligence (bnaic), november 5-6, hasselt, belgium , 11 2015.
[9]d. luengo and m. sep ulveda. applying clustering in process mining to
find dierent versions of a business process that changes over time. in
business process management workshops, pages 153{158. springer, 2012.
[10]a. maaradji, m. dumas, m. la rosa, and a. ostovar. fast and accurate
business process drift detection. in business process management, pages
406{422. springer, 2015.
[11]j. martjushev, r.p.j.c. bose, and w.m.p. van der aalst. change point
detection and dealing with gradual and multi-order dynamics in process
mining. in perspectives in business informatics research, pages 161{178.
springer, 2015.
[12]t. thaler, s.f. ternis, p. fettke, and p. loos. a comparative analysis of
process instance cluster techniques. in proceedings of the 12th international
conference on wirtschaftsinformatik. internationale tagung wirtschaftsin-
formatik (wi-15), march 3-5, osnabrck, germany . universitt osnabrck, 3
2015.
[13]b.f. van dongen. real-life event logs - hospital log, 2011. url: http://dx.
doi.org/10.4121/uuid:d9769f3d-0ab0-4fb8-803b-0d1120ffcf54 ,doi:
10.4121/uuid:d9769f3d-0ab0-4fb8-803b-0d1120ffcf54.
[14]b.f. van dongen. bpi challenge 2015, 2015. url: http://dx.doi.org/
10.4121/uuid:31a308ef-c844-48da-948c-305d167a0ec1 ,doi:10.4121/
uuid:31a308ef-c844-48da-948c-305d167a0ec1.
[15]s. van dongen. a cluster algorithm for graphs. technical report, national
research institute for mathematics and computer science in the netherlands,
2000.
[16]g.m. veiga and d.r. ferreira. understanding spaghetti models with se-
quence clustering for prom. in business process management workshops,
pages 92{103. springer, 2010.
[17]p. weber, b. bordbar, and p. tino. real-time detection of process change
using process mining. in imperial college computing student workshop ,
pages 108{114, 2011.
108