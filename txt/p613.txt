managing process model collections with apromore
m.c. fauvet1?, m. la rosa2, m. sadegh2, a. alshareef2, r.m. dijkman3,
l. garc `ıa-ba ˜nuelos4, h.a. reijers3, w.m.p. van der aalst3, m. dumas4, j. mendling5
1university of grenoble, france
2queensland university of technology, australia
3eindhoven university of technology, the netherlands
4university of tartu, estonia
5humboldt-universit ¨at zu berlin, germany
abstract. as organizations reach higher levels of business process management
maturity, they tend to collect numerous business process models. such models
may be linked with each other or mutually overlap, supersede one another and
evolve over time. moreover, they may be represented at different abstraction lev-
els depending on the target audience and modeling purpose, and may be available
in multiple languages (e.g. due to company mergers). thus, it is common that or-
ganizations struggle with keeping track of their process models. this demonstra-
tion introduces apromore (advanced process model repository) which aims to
facilitate the management of (large) process model collections.
1 introduction
apromore is a process model repository which goes beyond the typical amenities of
traditional repositories, such as model import/export and version control. first, it sup-
ports a variety of process modeling languages, including epcs, bpmn, yawl, bpel.
second, it offers an open and extensible platform to build advanced features that speciﬁ-
cally deal with large process model collections, such as similarity search, process merg-
ing and efﬁcient model querying. these features can be classiﬁed according to four
main service areas: i) evaluation , concerned with establishing the adherence of process
models to various quality notions such as syntactic quality and usability issues; ii) com-
parison , offering capabilities to compute the degree of similarity between models and
to merge similar models; iii) management , supporting the creation, modiﬁcation and
completion of process models, based on the reuse of existing content; and iv) presenta-
tion, providing visual support for improving the understanding of process models, e.g.
via abstraction or coloring techniques. the possibility to operate over process models
irrespective of their language and abstraction level, is made possible via the use of an
internal canonical process format [1]. this format provides a common, unambiguous
representation of business processes so that all process models can be treated alike.
the idea is to represent only the structural characteristics of a process model that are
common to the majority of modeling languages. language-speciﬁc concepts are omit-
ted because they cannot be meaningfully interpreted when dealing with process models
originating from different notations, i.e. when cross-language operations need to be per-
formed such as comparing process models that are in bpmn with models that are in
epcs. moreover, this canonical format is agnostic of graphical information (e.g. lay-
out, shapes, line thickness). instead, this information is stored separately in the form
?this work was done while she was visiting queensland university of technology, australiaofannotations linked to ﬁles in canonical format. these annotations are used when a
canonical model needs to be presented to the user or converted back to a process mod-
eling language.
2 system overview
apromore is implemented via a three-layered service oriented architecture (soa)
and deployed over the internet (see fig. 1). the enterprise layer hosts the manager —a
public enterprise service which exposes all the repository features via web service oper-
ations for integration with third-party applications, e.g. a bpm system. moreover, these
operations can be accessed via a web portal , which in turn delegates model editing
functionality to oryx ( http://bpt.hpi.uni-potsdam.de/oryx/webhome ).
enterprise layer
intermediary layer
basic layerweb portalorganizations bpms users / vendors
manager
(public)
toolbox
(façade)
algorithms relationalcanonizer
(adapter)
data access
(basic)access control
(basic)
general 
purpose datanative processes, 
canonical processes, 
annotationsoryxthird-party 
applications
xml
fig. 1. apromore’s soa.the intermediary layer hosts the can-
onizer which is an adapter responsi-
ble for (de-)canonizing process models
as they are imported/exported into/from
the repository. the toolbox is a fac ¸ade
over the advanced operations that can be
performed on the stored process model
collections. access to these models is
achieved via the data access service in
the basic layer, which encapsulates data-
centric operations for reading/writing
data upon requests made by the other ser-
vices. finally, the access control service
controls security aspects such as user au-
thentication and authorization. in future
work, we plan to also store process logs
and to integrate apromore with the process mining tool prom ( http://www.
processmining.org ). apromore’s portal is accessible at http://brahms0.
imag.fr:8080/apromore-portal (login: icsoc , no password). the source
code, manuals and a demonstration screencast can be found at http://code.
google.com/p/apromore (under downloads).
3 demo script
this demonstration focuses on the similarity search and merging functionality. after a
quick overview of apromore’s basic features—e.g. import/export and editing of pro-
cess models in various formats—we will show how apromore is able to retrieve mod-
els from a repository that are similar to a given model. next, we will show how the
repository can be queried according to various parameters. finally, we will retrieve two
similar models and show how they can be merged into a single model—a feature that
has been used in a real process model consolidation project.
references
1. m. la rosa, h.a. reijers, w.m.p. van der aalst, r.m. dijkman, j. mendling, m. dumas,
and l. garcia-banuelos. apromore : an advanced process model repository. qut eprints
technical report, http://eprints.qut.edu.au/27448, 2009.