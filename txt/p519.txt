on the formal generation of process redesigns
mariska netjes, hajo a. reijers, and wil m.p. van der aalst
eindhoven university of technology, po box 513, nl-5600 mb eindhoven, the netherlands
{m.netjes,h.a.reijers,w.m.p.v.d.aalst}@tue.nl
summary. business process redesign (bpr) is a process oriented methodology
to improve organizations. although literature on bpr is available in abundance,
little concrete support on how to get from as is towards to be is available [12].
we propose the use of an evolutionary redesign approach that is based on bpr
best practices to ﬁll this gap. the approach is evolutionary in nature, because
local updates are made to an existing process. in this paper we focus on one
part of the approach: the generation of redesign alternatives. the ﬁrst step in the
generation of an alternative process is the selection of a process part for redesign.
this is followed by a process transformation that determines an alternative for
this selected part. finally, the original process part is replaced by the transformed
part resulting in the alternative process. using petri net analysis techniques the
correctness of such a redesign generation is ensured.
key words: business process redesign, process modeling, business process
management, workﬂows, best practices
1 introduction
business process redesign (bpr) combines a radical restructuring of a business pro-
cess with a wide-scale application of information technology [8]. although many meth-
ods and tools are available to facilitate a bpr effort (e.g. [5, 7, 9]), little concrete support
is provided on how to create the to be situation from the as is [12]. many existing ap-
proaches and tools are limited in their application domain, while none of the approaches
has succeeded to gain widespread adoption in industry. we would like to mention the
approach and the tool that are most related to our work. weber, rinderle-ma and re-
ichert [17] provide a comprehensive set of change patterns with formal semantics. the
koper tool [13] supports the detection of malfunctioning process parts and suggests
the type of change that has to be made.
a bpr initiative would beneﬁt from the use of best practices . a best practice is
a historical solution that seems worthwhile to replicate in another situation or setting.
a list of bpr best practices is presented in [15]. such a list allows companies to use
well-performing solutions from earlier redesign efforts. a bpr best practice supports
practitioners in developing a process redesign by making evolutionary, local updates to
an existing process. with our evolutionary approach to process redesign we aim to ﬁll
the gap between as is andto be by taking an existing process model and improving it
using the bpr best practices (from [15]). it is evolutionary, because an existing process
is taken as a starting point.2 netjes et al.
our evolutionary approach consists of six steps, cf. figure 1:
1model an existing process,
2determine weaknesses in the process,
3select applicable best practices,
4generate alternative models,
5evaluate the performance of the generated alternatives, and
6choose the best alternative and implement the new process.
model of 
existing 
process process 
weaknesses applicable 
best 
practices alternative 
models performance 
of 
alternatives new        
process 
model 
123 4 56
fig. 1. evolutionary approach towards redesign
the ﬁrst three steps of figure 1 we addressed in [10]. with regard to the modeling of an
existing process (step 1), we gave a formal process deﬁnition and showed that it is not
straightforward to spot inefﬁciencies in a process. for the determination of weaknesses
(step 2), we presented a set of process measures, which provide a global view on the
weaknesses in the process. for the selection of applicable best practices (step 3), we
used and combined the set of process measures to evaluate the applicability of each
best practice for the process.
in the next step, the generation of alternative redesign models (step 4), the best
practices are applied. this step performs the actual change on part of the process, thus
making a local update to the process. then, the process can be redesigned again result-
ing in another update. each iteration results in a redesign alternative which may be used
as a starting point for another local update. in such a way, a tree of alternative process
models is generated with the original process model as its root node.
in the ﬁnal steps of our approach, the performance of the various alternatives is eval-
uated (step 5) and one redesign alternative is selected as the best alternative (step 6).
evaluation of process models can be done by simulating the model or (for simple pro-
cesses) with analytical techniques. for such an evaluation, performance data (time, cost
and quality indicators) are required. these data may be collected in event logs which
are derived from the execution of the actual process. log-based extension of a process
model with a new aspect or perspective (e.g., enriching the model with performance
data) is part of the process mining research [4].on the formal generation of process redesigns 3
in this paper, we focus on the fourth step of the evolutionary approach: the generation of
redesign alternatives . an alternative is created based on the original model by selecting
a ‘malfunctioning’ part of the model and ‘curing’ it with one of the best practices. we
consider the reasons for the selection of a speciﬁc part of the process and a speciﬁc best
practice to be out of the scope of this paper since these issues are addressed by the ﬁrst
three steps of the approach [10]. our contribution with this paper is a formally deﬁned
method for the generation of a process redesign. this generation is performed in three
steps. first, a process part is selected. then, an alternative part is determined by process
transformation. finally, the original process part is replaced by the alternative part.
in section 2 of this paper, we deﬁne our notion of a process. in section 3, we discuss
the three steps of the redesign generation: selection, transformation and replacement
and illustrate these with a transformation called parallel . in section 4, we describe
three other transformations: sequence ,unfold andmerge . finally, we conclude and give
an outlook on future work.
2 process deﬁnition
the starting point of a redesign effort with our approach is a process that is currently
being used in an organization. a process has certain characteristics, like its structure,
and several properties.
2.1 process characteristics
in our formal process deﬁnition we distinguish between the process structure andpro-
cess information . both are necessary to model a realistic business process and to gen-
erate process redesigns that are applicable in practice. first, we focus on the process
structure, for which we introduce the notion of a siso-net . a siso-net, as given in
deﬁnition 1, is a generalized workflow net (wf-net) [1] with a single input (si) and
a single output (so). note that a wf-net is also a siso-net, but that, for example,
transition-bordered siso-nets are not wf-nets.
deﬁnition 1 (siso-net) a wf-net (p;t;f)is a siso-net if and only if there is a
unique source node iand a unique sink node osuch that:
–fn2p[tj ²n=/0g=fig,
–fn2p[tjn²=/0g=fog,
–8n2p[t:(i;n)2f¤^(n;o)2f¤.
with the siso-net we describe the process structure. next to the process structure or
control ﬂow, we introduce process information. process information consists of depen-
dencies andlabels that present the process information in a generic way. dependencies
exists between transitions, i.e., one transition depends on another. for each transition
the dependencies, that should be satisﬁed before it can be executed, are deﬁned as its
input dependencies. the dependencies that are fulﬁlled after its execution are its output
dependencies. each transition may have a label assigned to it representing the type of
the transition. process information is deﬁned as an annotation of the siso-net, i.e., an4 netjes et al.
annotated siso-net is a siso-net enriched with process information. an example of an
annotated siso-net can be found in figure 2.
deﬁnition 2 (annotated siso-net) s= (p;t;f;d;di;do;l;a)is an annotated siso-
net with:
–(p;t;f)is a siso-net,
–dis a ﬁnite set of dependencies,
–di2t!p(d)1relates transitions to sets of input dependencies, i.e., these depen-
dencies should be satisﬁed before a transition can become enabled,
–do2t!p(d)relates transitions to sets of output dependencies, i.e., these depen-
dencies are fulﬁlled when a transition ﬁres,
–lis a ﬁnite set of labels, and
–a2t6!l2assigns an optional label to each transition.
dependencies andlabels may be speciﬁed according to the process information that
is available within the organization and the speciﬁc redesign goals identiﬁed by the
organization. data elements are a speciﬁc way to represent the dependencies between
transitions. the dependencies, then, model the data perspective of the process. sun,
leon zhao, nunamaker and liu sheng describe the data perspective in more detail
and provide an approach similar to ours for the detection and correction of data errors
[16]. other speciﬁc dependencies between transitions may be the ordering between
transitions in the original process or business dependencies identiﬁed by the organiza-
tion. roles represent a speciﬁc means to label transitions. the labels, then, model the
resource perspective of the process. other types of labeling, like departments, applica-
tions or geographical locations, may be used in a similar way.
2.2 process properties
the single input (si) and the single output (so) are important nodes in the annotated
siso-net and we give two operations to ﬁnd the in- and output of the siso-net.
deﬁnition 3 (input, output) lets= (p;t;f;d;di;do;l;a)be an annotated siso-
net with source node iand sink node o. operation inreturns the source node of s, i.e.,
in(s) =i, with i2p[t. operation out returns the sink node of s, i.e.,out(s) =o,
with o2p[t.
a siso-net has properties similar to a wf-net. a wf-net is constructed from a siso-
net by adding a place to the begin (the end) of the siso-net when it starts (ends) with
a transition. deﬁnition 4 gives some properties of a siso-net, namely safeness and
soundness. the basic idea is that these properties are based on the corresponding wf-
net [1].
deﬁnition 4 (safe and sound annotated siso-net) an annotated siso-net sis de-
ﬁned to be safe and sound if and only if the associated wf-net is safe and sound.
in the next section we describe the generation of a process redesign for an annotated
siso-net.
1p(x)is the powerset of x, i.e., y2p(x)if and only if yµx.
2ais a partial function, i.e., the domain of ais a subset of t.on the formal generation of process redesigns 5
3 selection, transformation, and replacement
when conducting a process redesign with the evolutionary approach, part of an existing
process model is changed. this change is performed in three steps: selection, transfor-
mation and replacement.
3.1 selection
the ﬁrst step of the generation of a process redesign is the selection of the part of
the process that should be changed. figure 2 shows an example of a selected process
part. the process part is selected from a blood donation process. this process described
the donation of blood by donors in a donation center. in the ﬁrst part of the process, the
intake and condition check of the donor is performed. in the second part, that is selected,
blood is taken from a donor and tested for several diseases. the donation center wants
to shorten the duration of the lab tests.
take blood di={id,l,ans,bp}
do={b,bs}
test on hiv di={id,bs}
do={hiv1,hiv2,hiv}
store 
results di={id,hep,hiv1,hiv}
do={res}
a={nurse} a={lab analyst} a={lab analyst} a={lab assistent}di={id,bs}
do={htlv}
test on 
htlv 
a={lab assistent}test on 
hepatitis di={id,bs}
do={hep}
fig. 2. example: a selected process part
for the selection we use the notion of a component . a component can be seen as a
selected part of the annotated siso-net with a clear start and end, i.e., a component
is a sub net satisfying properties similar to an annotated siso-net. our deﬁnition of a
component is derived from van der aalst and bisgaard lassen [3] who introduced the
notion of a component.
deﬁnition 5 (component) lets= (p;t;f;d;di;do;l;a)be an annotated siso-net.
then cis a component in sif and only if:
²cµp[t,
²there are source and sink nodes ic;oc2csuch that:
-ic6=oc
-²(cnficg)µcnfocg,
-(cnfocg)² µcnficg, and
-(oc;ic)62f.
note that any component contains at least one transition and one place. we only con-
sider non-trivial components, i.e., components with more than one transition. the fol-
lowing deﬁnition provides the projection of the net on the component.
deﬁnition 6 (projection) lets= (p;t;f;d;di;do;l;a)be an annotated siso-net
and let cbe a component in s. the projection of sonc,sjjc, is then deﬁned as sjjc=
(p0;t0;f0;d0;d0
i;d0
o;l0;a0)with:6 netjes et al.
–p0=p\cis the set of places,
–t0=t\cis the set of transitions,
–f0=f\(c£c)is the ﬂow relation,
–d0=[
t2t0di(t)[do(t)is the set of dependencies,
–d0
i2t0!p(d0)such that 8t2t0:d0
i(t) =di(t)is the set of input dependencies,
–d0
o2t0!p(d0)such that 8t2t0:d0
o(t) =do(t)is the set of output dependencies,
–l0=[
t2t0a(t)is the set of labels, and
–a02t06!l0such that dom(a0) =dom(a)\c, and8t2dom(a0):a0(t) =a(t)is the
label assignment.
the next theorem is used to prove the compositional nature of safe and sound annotated
siso-nets.
theorem 1. letsbe a safe and sound annotated siso-net and let cbe a component of
s. the projection sjjcis a safe and sound annotated siso-net.
proof. see [11].
soundness and safeness are desirable properties. theorem 1 shows that these desirable
properties are propagated to any component in the net. the component is the input for
the next step: the transformation.
3.2 transformation
in the transformation, an alternative process part is generated for the selected process
part. the transformation is the actual change that is made to the process. the trans-
formations presented in this paper are extensions of the basic soundness preserving
transformation rules invented by van der aalst [1]. due to page limitations we discuss
only one transformation in detail: the parallel transformation and describe the other
transformations brieﬂy in the next section.
in an existing process, tasks may be required to be executed one after another while no
real dependencies exist between these tasks. this gives unnecessary delays in the pro-
cess execution, because a task may be waiting for another task to ﬁnish, while this task
is not depending on the results of that task. often, it is a better option to perform tasks
without dependencies between one another in parallel. parallel tasks may be executed
in any order or simultaneously. the obvious beneﬁt would be a reduction in throughput
time. a possible negative effect is a loss of quality because processes with concurrent
behavior are more complex [14].
with the parallel transformation we put tasks that do not depend on one another in
parallel. the parallelization is achieved by putting relations between dependent tasks.
this places tasks that do not depend on one another in parallel. requirements for the
annotation of the selected process part are necessary because relations are added based
on the dependencies between tasks. these dependencies should be distributed over theon the formal generation of process redesigns 7
process in such a way that the input dependencies for each task are fulﬁlled before
the task becomes enabled. this means that each dependency has to be fulﬁlled, i.e.,
is an output dependency, before it can be used as an input dependency. that is, a task
that fulﬁlls an output dependency is placed before the transition(s) that require this
dependency as an input. note that this means that a dependency has to be an output
dependency of one task in the process, but that it does not imply that it has to be an
input dependency of any task. the requirements for the use of dependencies also imply
that a task can not have the same dependency both as an input and as an output. also
note that the component has to be an acyclic marked graph (see [6] for an introduction
to these standard notions) to enforce that all input dependencies are fulﬁlled before a
transition can become enabled.
the parallel transformation is started with a component which projection is an acyclic
marked graph fulﬁlling the stated requirements for the annotation. its result is an an-
notated siso-net with the maximum parallel process structure. as the ﬁrst step of the
transformation, the transitions of a component are translated to the nodes of a graph.
while translating, transitions that solely serve as routing transitions are removed. edges
between the nodes reﬂect the dependencies and places are not necessary and therefore
omitted.
deﬁnition 7 (parallel) letsbe an annotated siso-net and let cbe a component in
swith its projection sjjc= (p;t;f;d;di;do;l;a)being an acyclic marked graph.
operationparallel changes cinto the graph parallel (s;c) = ( n;e)with:
–n=fn2tjdi(n)6=/0_do(n)6=/0g3is the set of nodes,
–e=f(n1;n2)2n£nj(do(n1)\di(n2))6=/0gis the set of edges,
the graph has to be further transformed into an annotated siso-net. first, a source (or
sink) node is added and connected to the start (or end) nodes if the graph starts (or ends)
with more than one node. then, superﬂuous relations are removed from the graph. the
nodes in the graph are translated into the transitions of an siso-net and places and cor-
responding arcs are added between these transitions. finally, the annotation is restored.
the result is a safe and sound annotated siso-net. the complete formalization of the
parallel transformation can be found in [11].
figure 3 shows the alternative process part generated with the parallel transformation
for the selected process part in figure 2. in the example it can be seen that, for instance,
transition test on hepatitis and transition test on hiv do not share any dependencies
and are placed in parallel. transition store results , however, depends on these two tran-
sitions, and is therefore placed after the two transitions. it is also interesting to note that
the output of transition test on htlv is not used in any way. real life processes may
contain such inconsistencies and sun et al. provide an approach to detect and correct
such errors [16].
3routing transitions, i.e., transitions for which holds di(t) =do(t) =/0, are not considered and
henceforth removed.8 netjes et al.
di={id,bs}
do={htlv}
test on 
htlv 
test on 
hepatitis di={id,bs}
do={hep}
test on hiv di={id,bs}
do={hiv1,hiv2,hiv}store 
results di={id,hep,hiv1,hiv}
do={res}
ojoin a={lab assistent}
a={lab assistent} a={lab analyst}
a={lab analyst}take blood di={id,l,ans,bp}
do={b,bs}
a={nurse}di=ø
do=ø
fig. 3. example: a transformed process part
3.3 replacement
after the selection of a process part and the creation of an alternative for this selected
part with process transformation, an alternative process is constructed. the selected
component is replaced by the created alternative process part.
deﬁnition 8 (replace) lets1= (p1;t1;f1;d1;di1;do1;l1;a1)and
s2= (p2;t2;f2;d2;di2;do2;l2;a2)be two annotated siso-nets. let c, with source
node icand sink node oc, be a non-trivial component in s1. letin(s2)be a place
if and only if icis a place and let out(s2)be a place if and only if ocis a place.
operationreplace substitutes s1jjcins1with s2resulting in replace (s1;c;s2) =
(p3;t3;f3;d3;di3;do3;l3;a3)with:
–p3= (p1nc)[p2is the set of places4,
–t3= (t1nc)[t2is the set of transitions,
–f3= (f1\((p3£t3)[(t3£p3)))[
f2[
f(n,in(s2))j(n;ic)2f1g [
f(out(s2);n)j(oc;n)2f1gis the ﬂow relation,
–d3=0
@[
t2t1ncdi1(t)[do1(t)1
a[d2is the set of dependencies,
–di32t3!p(d3)is the set of input dependencies such that:
–8t2t1nc:di3(t) =di1(t), and
–8t2t2:di3(t) =di2(t),
–do32t3!p(d3)is the set of output dependencies such that:
–8t2t1nc:do3(t) =do1(t), and
–8t2t2:do3(t) =do2(t),
–l3=0
@[
t2t1nca1(t)1
a[l2is the set of labels, and
4we assume there are no “name clashes”.on the formal generation of process redesigns 9
–a32t36!l3is the label assignment such that:
–dom(a3) = ( dom(a1)nc)[dom(a2),
–8t2dom(a1)nc:a3(t) =a1(t), and
–8t2dom(a2):a3(t) =a2(t).
in the next theorem we show that the result of the replacement is again a safe and
sound annotated siso-net.
theorem 2. lets1ands2be two annotated siso-nets. let cbe a non-trivial compo-
nent in s1. let s3=replace (s1;c;s2).
then:
–s3is an annotated siso-net.
–ifs1is safe and sound and s2is safe and sound, then s3is safe and sound.
proof. see [11].
the net resulting from the replacement may contain routing transitions (and-splits
and -joins), that have become superﬂuous. an and-split (and-join) is superﬂuous
when it is preceded (followed) by exactly one transition, i.e., the two transitions are
in a sequence. the routing transition and the other transition may be combined (thus
removing the routing transition) with one of the soundness preserving transformation
rules, namely aggregation , described by van der aalst [1].
4 other transformations
when generating alternative process models the selection and replacement operations
are the same regardless of the change that is made. the type of change is determined
by the transformation that is used. in the previous section, the parallel transformation
was used to generate a more parallel process redesign. in this section we describe three
other process transformation informally: sequence ,unfold andmerge .
in [11], we introduce the notion of a layered annotated siso-net to allow an annotated
siso-net to contain aggregated transitions . an aggregated transition has an underlying
sub process that divides the aggregated transition into several smaller pieces of work.
such a sub process is used for more complex transitions to give more insight in what
should exactly be done. a layered annotated siso-net has a two layered process struc-
ture: 1) the upper layer is an annotated siso-net, including aggregated transitions, 2)
the lower layer contains an annotated (sub) siso-net for each of the aggregated transi-
tions at the upper layer. the unfold andmerge transformation are performed on a lay-
ered annotated siso-net and the parallel andsequence transformation are performed
on the upper layer of a layered annotated siso-net. the deﬁnitions and details of the
transformations can be found in [11].
sequence transformation : this transformation is the counterpart of the parallel trans-
formation. a sequential process may be perceived as a simpler process by employees10 netjes et al.
and clients, because the order of the transitions is ﬁxed. further, transitions are likely
to be executed in the most logical way which may reduce errors. furthermore, the syn-
chronization that is required after the execution of transitions in parallel is not necessary
in sequential processes [14].
with the sequence transformation transitions are placed in a ﬁxed order, i.e., a se-
quence. as a preparatory step, the selected component is translated into a graph. the
sequence operation is performed on this graph. afterwards, the graph is further trans-
formed into an annotated siso-net in a similar way as the graph resulting from the
parallel operation (deﬁnition 7).
unfold transformation : with this transformation aggregated transitions are split up
into several smaller transitions. unfolding may result in a higher run-time ﬂexibility,
because the scheduling and execution of some smaller transitions allows for more pos-
sibilities. furthermore, a transition that is too large may be unworkable and dividing it
into smaller transitions could enhance the quality realized by the involved resource(s).
a drawback of smaller transitions are the longer set-up times, i.e., the time a resource
spends to become familiar with a case [14].
the unfold transformation is performed by replacing the aggregated transitions
(which are at the upper layer of the process) by the underlying lower layer siso-nets.
a lower layer siso-net is deﬁned such that it always starts and ends with a transition.
this simpliﬁes the unfolding considerably, because the lower layer net can simply re-
place the aggregated transition without violating the bipartite structure of a siso-net.
merge transformation : this transformation is the counterpart of the unfold transfor-
mation. with the merging of transitions, multiple transitions are combined into one
aggregated transition. combining transitions results in the reduction of setup times, i.e.,
only one resource has to get acquainted with the case before the execution of the ag-
gregated transition. an additional reason to merge transitions is the expected positive
effect on the quality of the delivered work due to fewer hand-overs of the work between
resources [14].
with the merge transformation several similar transitions, i.e., transitions with the
same label, are combined into one aggregated transition. the transformation is started
with the translation of an unfolded component into an annotated graph. edges between
the nodes in the graph are created in such a way that nodes with the same label are
connected while preserving all dependencies. within this graph the largest possible
groups of sub graphs with the same label are determined. the merge operation creates a
layered annotated graph with the identiﬁed sub graphs as its lower layer graphs. then,
this layered annotated graph is translated into a layered annotated siso-net.
5 conclusion and outlook
in this paper, we present a concrete method for the generation of alternative process
models. it is part of our evolutionary approach to process redesign based on bpr best
practices and consists of three steps: 1) the selection of a process part, 2) the transforma-
tion of this process part into an alternative part and, 3) the replacement of the originalon the formal generation of process redesigns 11
process part with the alternative part. the actual change in the process is made with
process transformations. with the process transformations we aim for extreme changes,
e.g., we place as many transitions as possible in parallel. of course, depending on the
speciﬁc process the redesign effort is made for, more conservative changes may be
preferable. in a supporting tool it will be possible to adapt the transformations and gen-
erate such redesigns.
the transformations are performed with a generic set of process attributes that may
be speciﬁed depending on the speciﬁc attributes of the process under consideration.
therefore, the presented transformations give much more redesign possibilities than
their number may suggest. in addition, the use of more or other process attributes may
also lead to new process transformations. the current set of process transformations is
not exhaustive and serves as a starting point for process redesign.
next to the further development of the theory on evolutionary process redesign, we
work on the development of a tool that provides concrete support to practitioners. the
prom tool [2] is used as a framework to experiment with process mining and redesign
techniques. we envision as the ultimate goal of our research the delivery of an auto-
mated redesign tool. this tool would support all steps of the approach in an “intelli-
gent” way. by this, we mean that the tool not only automates the various steps of the
approach, but also interact with the redesigner. our approach is a solution that should
primarily help redesign novices in ﬁnding process alternatives based on best practices.
secondly, more experienced redesigners are supported in the creation and evaluation of
such alternatives in a structured and less time-consuming manner.
acknowledgement
this research is supported by the technology foundation stw, applied science division
of nwo and the technology programme of the dutch ministry of economic affairs.
references
1.aalst, w.m.p. van der: veriﬁcation of workﬂow nets. in: az ´ema, p., balbo, g. (eds.)
application and theory of petri nets 1997. lncs, vol. 1248, pp. 407–426. springer-verlag,
berlin (1997)
2.aalst, w.m.p. van der, dongen, b.f. van, gunther, c.w., mans, r.s., alves de medeiros,
a.k., rozinat, a., rubin, v ., song, m., verbeek, h.m.w., weijters, a.j.m.m.: prom 4.0:
comprehensive support for real process analysis. in: kleijn, j., yakovlev, a. (eds.) petri
nets and other models of concurrency. lncs, vol. 4546, pp. 484–494. springer-verlag,
berlin (2007)
3.aalst, w.m.p. van der, bisgaard lassen, k.: translating unstructured workﬂow processes to
readable bpel: theory and implementation. information and software technology 50(3),
131–159 (2008)
4.aalst, w.m.p. van der, reijers, h.a., weijters, a.j.m.m., dongen, b.f. van,
alves de medeiros, a.k., song, m., verbeek, h.m.w.: business process mining: an in-
dustrial application. information systems 32(1), 713–732 (2007)12 netjes et al.
5.al-mashari, m., zairi, m.: bpr implementation process: an analysis of key success and
failure factors. business process management journal 5(1), 87–112 (1999)
6.desel, j., esparza, j.: free choice petri nets. cambridge tracts in theoretical computer
science, vol. 40. cambridge university press, cambridge, uk (1995)
7.grover, v ., jeong, s., kettinger, w., teng, j.: the implementation of business process
reengineering. journal of management information systems 12(1), 109–144 (1995)
8.hammer, m., champy j.: reengineering the corporation: a manifesto for business revolution.
harper business editions, new york (1993)
9.kettinger, w., teng, j., guha, j.: business process change: a study of methodologies, tech-
niques, and tools. mis quarterly 21(1), 55–80 (1997)
10.netjes, m., limam mansar, s., reijers, h.a., aalst, w.m.p. van der: an evolutionary
approach for business process redesign: towards an intelligent system. in: cardoso, j.,
cordeiro, j., filipe, j. (eds.) proceedings of the 9th international conference on enterprise
information systems (iceis 2007). pp. 484–494. insticc, setubal (2007)
11.netjes, m., reijers, h.a., aalst, w.m.p. van der: the creation of process redesigns by
selecting, transforming and replacing process parts. beta working paper series, wp
240, eindhoven university of technology, eindhoven (2008)
12.netjes, m., vanderfeesten, i., reijers, h.a.: “intelligent” tools for workﬂow process re-
design: a research agenda. in: bussler, c., haller, a. (eds) business process management
workshops: bpm 2005. lncs, vol. 3812, pp. 444–453. springer-verlag, berlin (2006)
13.nissen, m.: redesigning reengineering through measurement-driven inference. mis quar-
terly 22(4), 509–534 (1998)
14.reijers, h.a.: design and control of workﬂow processes: business process management
for the service industry. lncs, vol. 2617. springer-verlag, berlin (2003)
15.reijers, h.a., limam mansar, s.: best practices in business process redesign: an overview
and qualitative evaluation of successful redesign heuristics. omega: the international
journal of management science 33(4), 283–306 (2005)
16.sun, s.x., leon zhao, j., nunamaker, j.f., liu sheng, o.r.: formulating the data-flow
perspective for business process management. information systems research 17(4), 374–
391 (2006)
17.weber, b., rinderle-ma, s.b., reichert, m.u.: change support in process-aware informa-
tion systems - a pattern-based analysis. technical report tr-ctit-07-76, issn 1381-
3625, http://eprints.eemcs.utwente.nl/11331 (2007)