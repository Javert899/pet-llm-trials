enhancing process mining results using
domain knowledge
p.m. dixit1;2, j.c.a.m. buijs2, w.m.p. van der aalst2, b.f.a. hompes1;2, and
j. buurman1
1philips research, eindhoven, the netherlands
2department of mathematics and computer science
eindhoven university of technology, eindhoven, the netherlands
{prabhakar.dixit,hans.buurman}@philips.com
{j.c.a.m.buijs,w.m.p.v.d.aalst,b.f.a.hompes}@tue.nl
abstract. process discovery algorithms typically aim at discovering
process models from event logs. most discovery algorithms discover the
model based on an event log, without allowing the domain expert to
inuence the discovery approach in any way. however, the user may
have certain domain expertise which should be exploited to create a bet-
ter process model. in this paper, we address this issue of incorporating
domain knowledge to improve the discovered process model. we rstly
present a modication algorithm to modify a discovered process model.
furthermore, we present a verication algorithm to verify the presence
of user specied constraints in the model. the outcome of our approach
is a pareto front of process models based on the constraints specied by
the domain expert and common quality dimensions of process mining.
keywords: user guided process discovery, declare templates, domain
knowledge, algorithm post processing
1 introduction
process mining aims to bridge the gap between big data analytics and tradi-
tional business process management. this eld can primarily be categorized into
(1)process discovery, (2)conformance checking and (3)enhancement [1]. process
discovery techniques focus on using the event data in order to discover process
models. conformance checking techniques focus on aligning the event data on
a process model to verify how well the model ts the data and vice versa [3].
whereas enhancement techniques use event data and process models to repair
or enrich the process model.
most of the current process discovery approaches focus on discovering the
process model entirely based on the event log. enhancement techniques use end-
to-end process models along with the event logs to repair and enrich the process
models with information eg., to highlight bottlenecks or to annotate decisions
with guards. in domains such as the healthcare sector, the underlying processes
79are complex and case specic, hence the domain expert might only be aware of
some conditions or constraints which should always hold in the process. however
the domain expert might not be aware of the complete end-to-end process which
is required as an input by the alignment based repair techniques. nevertheless,
the domain expert might be aware of certain sub-processes or protocols constitut-
ing to the end-to-end process. however, traditional process discovery techniques
do not provide a way to incorporate the domain knowledge in order to discover
and repair a more accurate process model, based on both domain knowledge
and event logs. in this paper, we address the challenge of incorporating domain
knowledge in traditional process model discovery to overcome challenges such as
infrequent and/or incomplete data.
fig. 1: places where domain knowledge can be
incorporated in the process discovery approach.
here we focus on 3.domain knowledge can be
introduced in the discovery
process at multiple stages
as shown in figure 1. in
our approach, we post-process
an already discovered pro-
cess model to incorporate the
user specied domain knowl-
edge. process models can be
represented by multiple mod-
eling notations, for example
bpmn, petri nets, process
trees etc. state of the art dis-
covery algorithms such as the
inductive miner [8] and the
evolutionary tree miner [4]
discover block-structured pro-
cess models represented by
the notion of process trees. we
use process trees in our ap-
proach as they are hierarchically structured and sound by construction. the
hierarchical nature of process trees allows for a structured way to incorporate
and validate the domain knowledge from the user. our approach is generic and
scalable as it is independent of the inherent discovery algorithm, and can be
applied to any discovery approach which produces process trees.
in order to provide a very handy and eective way to gather user input, we
make use of declare templates [13]. declare templates belong to the class of
declarative languages, which are used to construct constraint based declarative
process models. we do not use any aspect of declarative modeling in our ap-
proach. only abstract declare templates are used as a way for user to specify
domain knowledge eectively in terms of constraints.
figure 2 gives a high level overview of our approach. the ultimate goal is to
provide a generic way to post-process the process tree such that the user is pre-
sented with a balanced set of optimal variants of process trees. post-processing
80fig. 2: the general overview combining traditional process discovery with domain
knowledge specied using constraints. the original process tree is modied to
generate probable candidate process trees. a competitive set of process trees is
selected based on the verication of users constraints and quality dimensions.
the process tree with domain knowledge would enable us to overcome incom-
pleteness and exceptional behaviour which could be wrongly represented in the
originally discovered process tree. in order to achieve this goal, we rst introduce
a modication approach to generate a list of candidate process trees. we then
introduce a novel verication algorithm to check whether a set of constraints
is satised by a process tree. the candidate process trees are used in combina-
tion with the verication algorithm, number of edit operations and four quality
dimensions to select a set of competitive process trees. the remainder of the
paper is structured as follows. in section 2 and section 3, we provide a litera-
ture review of related work and the preliminaries respectively. in section 4 and
section 5 we explain the modication and verication algorithms. in section 6
we evaluate our approach based on synthetic and real life event logs. in section 7
we conclude and discuss future research.
2 related work
although the eld of process discovery has matured in recent years, the aspect
of applying user knowledge for discovering better process models is still in its
nascent stages. conformance techniques in process mining such as [2, 3, 5] re-
play event logs on the process model to check compliance, detect deviations and
81bottlenecks in the model. these techniques focus on verifying the conformance
of event logs with process model, but do not provide any way of incorporating
domain knowledge to repair/improve the process model. in [11], the authors pro-
vide a way to mine declarative rules and models based on event logs, but do not
allow users to introduce domain knowledge in rule discovery. the conformance
based repair technique suggested by [6] takes a process model and an event log
as input, and outputs a repaired process model based on the event log. however,
the input required for this approach is an end-to-end process model and a noise
free event log. our approach requires only parts of process models or constraints
described using declarative templates. genetic algorithms [12] in process mining
provide a possibility of using hand-made models as initial population. however
this information may fade over time and may eventually get lost.
in [14], authors suggest an approach to discover a control ow model based
on event logs and prior knowledge specied in terms of augmented information
control nets (icn). our approach mainly diers in the aspect of gathering
domain knowledge. although declarative templates can also be used to construct
a network of related activities (similar to icn), it can also be used to provide
a set of independent pairwise constraints or unary constraints. the authors of
[7] incorporate both positive and negative constraints during process discovery
to discover c-net models. compared to this, our approach diers mainly in
two aspects. firstly, we do not propose a new process discovery algorithm, but
provide a generic approach to post process an already discovered process tree.
secondly, our approach provides the user with a balanced set of process models
which maximally satisfy user constraints and score high on quality dimensions.
3 preliminaries
as mentioned in section 1, we primarily use declare templates as a means to
incorporate the domain knowledge and process trees to represent the process
models. this section provides a background and a brief description about process
trees and declare templates.
3.1 declare templates
a declarative model is dened by using constraints specied by a set of templates
[13]. we use a subset of declare templates as a way to input domain knowledge.
table 1 provides an overview and interpretation of the declare constraints
that we consider [11, 13]. binary templates provide ways to specify dependency
(positive and negative) between two activities. for example, response (a;b) spec-
ies that activity a has to be eventually followed by activity b somewhere in the
process. we use six binary constraints as shown in table 1. we use one unary
constraint existence (n1;n2;a), as a way to specify the range of occurrence of
an activity.
82 table 1: declare constraints  and their graphical  and textual interpretations
template namegraphical
representationinterpretation
response (a;b)
 activity b should (always) eventu-
ally occur after activity a
precedence (a;b)
 activity b can occur only after the
occurrence of activity a
coexistence (a;b)
 activity a implies the presence of
activity b (and vice versa)
responded existence (a;b)
 activity b should (always) occur
before or after the occurrence of ac-
tivity a
not coexistence (a;b)
 activity a implies the absence of
activity b (and vice versa)
not succession (a;b)
 activity a should never be followed
by activity b
existence (n1;n2;a)
 activity a should occur:
n1..n2 times
3.2 process trees
!
a 
^
b cd_
e
f gz
fig. 3: example process tree
showing sequence (!), and(^),
exclusive-or (), inclusive-or
(_) and xor-loop () operatorsprocess trees provide a way to represent pro-
cess models in a hierarchically structured way
containing operators ( parent nodes ) and ac-
tivities (leaf nodes ). the operator nodes spec-
ify control ow constructs in the process tree.
figure 3 shows an example process tree. a
process tree is traversed from left to right.
the order of child nodes is not important
forand(^), exclusive-or () and inclusive-or
(_) operators, unlike sequence (!) and xor-
loop () where the order is signicant. in the
process tree from figure 3, activities a and z
are always the rst and last activities respec-
tively. for the operator the left most node
83is the `do' part of the loop and is executed at least once. in figure 3, activity
d is the optional `re-do' part of , execution of which activates the loop again.
activities b and c occur in parallel and hence the order is not xed. the right
node of the loop is the escape node and it is executed exactly once. for the 
operator, only one of either f or g is chosen. for the _operator bothand
activity c can occur, or only one of either two can occur.
4 modication
following our methodology depicted in figure 2, we start with the modication
algorithm. as shown in figure 2, the modication algorithm takes the discovered
process tree and generates a list of candidate trees. this is accomplished using
a \brute force" modication approach with the following steps:
1. starting with the original input process tree, variants are created based on
three primary edit operations: add node, remove node and modify node.
2. every node in the process tree is subject to each edit operation, resulting in
a new variant of process tree.
3. each variant of process tree is further edited by iteratively calling all the
edit operations exhaustively (in any order) using a \brute force" approach.
4. every variant of the process tree is added to a pool of candidate process
trees.
5. the process of creating process tree variants is repeated until a certain con-
gurable threshold for number of edit operations w.r.t. each process tree is
reached.
!
a
b c
(a) process tree discovered
by the discovery algorithm.
(number of edits: 0)!
a
b c
b c
(b) remove node: removed
activity a; also resulting in
removal of!(number of
edits: 1)
a b c
(c) add node: added activ-
ity a as a child of (num-
ber of edits: 2)

!
a bc
(d) add node: added oper-
ator!as a child of; and
parent of a and b (number
of edits: 3)!
!
a bc!
a b c
(e) modify node: modied
operatorto!; resulting
in a process tree with only
one parent operator (num-
ber of edits: 4)!
a b c
(f) remove node: removed
operator!; resulting in an
empty process tree (number
of edits: 5)
fig. 4: example modication operations on process tree.
84it is important to carefully set the threshold for maximum number of edit op-
erations, as a high threshold could result in many changes and a small threshold
would only explore a few changes in the resultant process tree as compared to
the original process tree. hence there is no easy way to choose the threshold for
selecting an optimal value for number of edit operations. it should be chosen by
the user based on the original (starting) process tree, and the number of unver-
ied constraints in the original process tree. a very high threshold value would
result in more variants of process tree, however it would also be very compute
intensive and inecient. in order to improve the eciency of the modication
approach we can use techniques such as genetic algorithms or greedy algorithms
to reduce the search space, discussed in section 7.
figure 4 shows dierent edit operations used in the modication algorithm.
the modify node operation exhaustively modies every node in the process tree
and can be classied into modify activity andmodify operator depending on the
type of node. similarly, add node iteratively adds either an activity node or an
operator node (figure 4c and figure 4d). an operator can be added below the
parent node (figure 4d) and above the parent node (not shown in figure 4) by
exhaustively combining child nodes. each edit operator results in a new process
tree, which can be further edited by other edit operations exhaustively until the
threshold for edit distance is reached. every process tree arising after each edit
operation is added to the pool of candidate process trees. by executing all edit
operations in an iterative way, we can nd an optimal sequence of operations to
deduce anyprocess tree with minimal edit operations. as shown in figure 4f,
we can reduce a process tree to an empty tree thereby ensuring the completeness
of our modication approach.
each process tree is evaluated against the four quality dimensions of process
mining (replay tness, precision, generalization and simplicity) [1], the number of
user specied constraints veried, and the number of edit operations performed
on the tree. this results in six quality dimensions. in order to evaluate the
process trees based on these dimensions we use a pareto front [4]. the general
idea of a pareto front is that all models are mutually non-dominating: a model
is dominating with respect to other models, if for all measurement dimensions
it is at least equal or better and for one strictly better. using the six dimensions
a pareto front is presented to the user which contains the set of dominating
process trees. for details about quality dimensions and pareto front evaluation
we refer to [4]. the verication of user constraints is covered in section 5.
5 verication
the verication algorithm takes a process tree and a set of constraints as input,
and returns the set of constraints satised by the process tree as output. each
candidate process tree produced by the modication algorithm is veried. in this
section, we present a novel verication approach to assist the selection of the best
candidate process trees. the major advantage of our approach is that since we
utilize a posteriori approach, it is independent of underlying process discovery
85algorithm 1: declare constraints verication in a process tree
input: process tree, set of constraints
output: constraints categorized as veried orunveried
1begin
2 foreach constraint do
3 ifnot existence constraint then
4 compute collection of common sub-trees
5 else
6 consider full tree
7 foreach sub-tree do
8 ifnot existence constraint then
9 verify common parent
10 verify position of activties
11 ifcommon parent or position verication fails then
12 set constraint verication unsuccessful
13 ifrelations constraint & occurs(st a,b) is always then
14 set constraint verication successful
15 ifnegative relations constraint & occurs(st a,b) is (never) then
16 set constraint verication successful
17 ifexistence constraint then
18 check range from occurs(pt,a) tooccurs multiple times(pt,a)
19 return set of constraints - veried vs unveried
algorithm used to discover the initial process tree, and hence extremely generic
and scalable. in algorithm 1, we show the main sequence of steps used by the
verication approach. in the following sub-sections, we detail the algorithm.
5.1 sub-tree computation & position verication
sub-trees are the sub-blocks containing the rst common ancestor between the
two activities of the binary (relation or negative relation) constraints. the same
activity can be present at multiple locations in a process tree which could result
in multiple sub-trees for a single constraint, with the total number of sub-trees
equal to the number of occurrences of the activity in the process tree. formally,
the computation of the collection of sub-trees for a binary constraint dened on
activities a,b can be given as:
sb=fn0jn02n^l(n) = bg
stcollection a=fstn(sb; pt)jn2n^l(n) = a^stn(sb; pt)6=nullg
where stcollection ais the collection of sub-trees w.r.t each node a, n is the
collection of all nodes in process tree pt, s bis the set of nodes labelled b, and
stn(sb; pt)is the sub-tree computed w.r.t. node n explained in detail below.
consider the constraint response (a;b) that should be veried for the pro-
cess tree from figure 5a. as described in table 1, a response constraint states
86!
b 
!
a bf^
c
b ez
(a) activities with cyan background are
valid activities in process tree for con-
straint response (a;b)
!
a b
^


b
(b) sub-tree for response (a;b) with all
the irrelevant activities marked as 
fig. 5: sub-tree computation for the constraint response (a;b)
that every occurrence of activity a should eventually be followed by activity b.
in order to verify that such constraint holds true in the process tree, we rst
gather all the locations within the process tree where activity a occurs. for each
occurrence of a in the process tree, we nd the rst common ancestor containing
a and allthe b's which can be reached after executing activity a. as a process
tree is generally navigated from left to right, all the b's eventually occurring
after a would naturally be on the right side of a. one caveat is that the order
of children for the operators _,,and^is not xed and the child nodes can
be executed in any order. hence there is an additional check required to verify
the common parent, addressed in subsection 5.3. figure 5b shows the sub-tree
for constraint response (a;b). since there is only one occurrence of activity a in
the process tree, there is only one sub-tree. the rst occurrence of b from the
!
b1

!
a b2f^
c
b3
ez
(a) precedence (a;b) -
active nodes for this
constraint are highlighted
in cyannull
(b) precedence (a;b) -
null sub-tree with respect
to activity b 1
!
a b2
(c) precedence (a;b) -
sub-tree with respect to
activity b 2
!
a

^


b3

(d) precedence (a;b) -
sub-tree with respect to
activity b 3
fig. 6: sub-trees computation for the constraint precedence (a;b). as fig-
ure 6b results in a null sub-tree, the constraint verication for the constraint
precedence (a;b) fails w.r.t. the entire process tree.
87^

a1
d!
c b a2
(a) responded existence (a;b) and
coexistence (a;b) - active nodes for
these constraints are highlighted in
cyan^

a1

!

 b
(b) sub-tree for con-
straints coexistence (a;b) and
responded existence (a;b) with
respect to activity a 1
!

 b a2
(c) sub-tree for con-
straints coexistence (a;b) and
responded existence (a;b) with
respect to activity a 2^

a1

!

 b a2
(d) sub-tree for constraint
coexistence (a;b) with respect to
activity b
fig. 7: sub-trees computation for constraints responded existence (a;b) and
coexistence (a;b)
original process tree is ignored as it is on the leftside of a, and hence this b
cannot be guaranteed to be executed after executing activity a.
for the precedence (a;b) constraint; we are interested in nding all the com-
mon sub-trees with respect to b, containing all a's on the left side of ( executed
before ) b. there are a total of 3 sub-trees corresponding to each b in the pro-
cess tree from figure 6. the sub-trees for b 2and b 3are shown in figure 6c and
figure 6d respectively. however, for b 1there is no sub-tree containing activity
a prior to (i.e. on the left side of) b. this results in a null sub-tree as shown
in figure 6b, and therefore the verication fails.
relation constraints such as coexistence and responded-existence are inde-
pendent of the position of the other activity in the process tree. figure 7 shows
the sub-trees for constraints responded existence (a;b) and coexistence (a;b).
the sub-tree from figure 7d is calculated with respect to activity b and is
only valid for the constraint coexistence (a;b). the sub-trees for negative re-
lations constraint are calculated in a similar way to their respective relations
constraints counterpart. however, unlike relation constraints, for negative re-
lations constraints the absence of a sub-tree (null sub-tree) for each activity
from constraint implies satisfaction of the constraint in the process tree. sub-
tree calculation is not necessary for unary constraints such as existence, wherein
we consider the entire process tree. the next step is to determine whether an
activity will occur, as discussed in subsection 5.2.
885.2 activity occurrence verication
for binary constraints the next step after calculating the sub-trees is checking
the occurrence of the activity in the sub-tree. in order to achieve this, we use the
predicate occurs (sta; b), where a is the node with respect to which sub-tree
st is computed and b is the second activity of the binary constraint. for every
ancestor of node a, we check the occurrence of activity b which can have the
following values: always, sometimes ornever. formally, this step can be dened
as follows:
8stn2stcollection a9ancestor (n)occurs (sta; b)
where acceptable values for occurs(st a,b) are always and never for relation and
negative relation constraints resp.
figure 8b shows the occurrence of activity b, for the sub-tree from figure 8a
which is computed with respect to activity a. for choice operators such as 
and^, if activity b is present in allthe child nodes, then activity b occurs
always w.r.t. the operator node. if only few or none of the children of the choice
operator have occurrence of activity b, then activity b occurs sometimes or
never resp. similarly, if at least one child of !and^is activity b, then activity
b occurs always w.r.t. this node. in case of if activity b is present only in
the re-do part of the loop (which may or may not be executed), then activity
b occurs sometimes. if activity b is present in the loop or exit child of the 
operator, then activity b is guaranteed to occur always w.r.t. this node. we
check the occurrence of activity b, at every ancestor of activity a. for binary
relations constraint, if none of the ancestor(s) of activity a have the occurrence
of b as always, then the constraint is not satised. on the contrary for negative
relations constraints, if any of the ancestor(s) of activity a have the occurrence of
b as always orsometimes, then the constraint is not satised. for every parent
satisfying the constraint, we move on to validating the corresponding parent
verication discussed in subsection 5.3.
in case of an unary constraint, the predicate occurs multiple times(pt,a) is
calculated with possible values yesorno, where pt is the entire process tree and
a is the activity from the unary constraint. if any of the ancestor(s) of activity
a are children of the loop part or the re-do of operator, then the multiple
occurrence of activity a is set to yes. otherwise, the multiple occurrence part of

!
a b
^


b_

 b
(a) sub-tree for constraint response (a;b)(a)
!(a)
a b
^(s)

(s)
b_(s)

 b
(b) blue, red and green colors indicate
the occurrence always(a),never(n)and
sometimes(s )respectively.
fig. 8: occurrence(st a,b)verication for constraint response (a;b)
89table 2: overview of possible ranges for existence constraint
occurs(pt,a) at
the root of ptoccurs multiple times(pt,a)
at the root of ptrange of occurrence
sometimes no 0..1
sometimes yes 0..n
always yes 1..n
always no exactly 1
never n.a. exactly 0
activity a is set to no.occurs multiple times(pt,a) gives us the upper bound
of the range, and we combine this with occurs(pt,a) to calculate the lower
bound of the range. we evaluate the unary constraints at the root of the tree
depending on the values of occurs(pt,a) and occurs multiple times(pt,a), as
shown in table 2.
5.3 parent verication

e b
fig. 9: sub-tree
violating constraint
coexistence (e;b)if occurrence verication for each activity from the binary
constraint is successful, then the next step is to verify
the common parent. there are a set of allowable common
parent operators for each type of constraint. for example,
if we have to verify the coexistence (e;b) constraint on the
process tree figure 5a, then one of the sub-trees computed
is figure 9. as the common parent for this sub-tree is
the choice operator , both e and b will never occur
together. hence the common parent verication for this particular sub-tree fails
for constraint coexistence (e;b). table 3 summarizes the invalid common parents
for all the constraints from table 1.
for binary constraints, if either the sub-tree computation, position verica-
tion, common parent verication or activity occurrence verication fails, then
that constraint is marked unsatised. if all these steps are successful for all the
corresponding sub-trees, then the constraint is marked satised. for unary con-
straints, if activity occurrence verication is successful (within the input range)
then the constraint is marked satised, otherwise, it is marked unsatised.
table 3: invalid common parents for each of the declare constraints
constraint invalid common parent operator
response (a;b),_,1,^
precedence (a;b),_,1,^
coexistence (a;b),_,1
responded existence (a;b),_,1
not succession (a;b)!,_,,^
not coexistence (a;b)!,_,,^
1is invalid only if node b (or a)
is a child of the middle (redo) part
906 evaluation
evaluation of the candidate process trees can be done in multiple ways. one
method could be to present the domain expert with a list of candidate process
trees (or process models) to choose from. however this approach is highly sub-
jective and would depend entirely on the preference of the domain expert, and
hence would be dicult to quantify. another approach for evaluation is to dis-
cover an expected model based on user specied constraints. in this approach
there is a certain expected model, which isn't discovered by the traditional pro-
cess discovery techniques due to reasons such as data inconsistencies, discovery
algorithm biases etc. we use the latter approach for evaluation as it provides a
quantiable and controlled way to evaluate the results without depending on the
high subjectivity of domain expert. we evaluate our approach based on both a
synthetic log and a real life log.
6.1 synthetic event log
we use a synthetic event log to demonstrate how our approach could improve
an incorrect model discovered due to algorithm bias and noisy event log. for
the event log l= [ha,b,c,di90,ha,c,b,di90,ha,c,d,bi90,hc,a,d,bi90,
hc,a,b,di90,hc,d,a,bi90,hc,d,b,ai6,hc,b,a,di6,hd,a,c,bi6], the induc-
tive miner infrequent (imi) [9] generates the process tree with all four activities
in parallel as shown in figure 10a.
from the high frequent traces of the log we can deduce simple rules such as
activity ais always eventually followed by activity b; and activity bis always
preceded by activity a. similar relationship holds for activities cand d. we
use this information and input the process tree discovered by imi [9], event log
(l) and the following four constraints in our algorithm: response(a,b), prece-
dence(a,b), response(c,d), and precedence(c,d). upon setting the maximum
edit distance to 3, the modication algorithm creates 554 unique process trees
resulting in a pareto front of 7 process trees.
figure 10 shows the original process tree discovered by inductive miner (fig-
ure 10a) and a modied process tree (figure 10b) with highest replay tness and
precision score from the pareto front. table 4 summarizes the dimension scores
of the process trees from figure 10. the modied process tree from figure 10b
satises all the four constraints. the number of edit operations required in order
to discover the modied process trees is 2. figure 10b also has a higher precision
value of 1, and considerably high replay tness score of almost 1. this process
tree is highly precise, thereby explaining the high frequent traces of the event log
^
a b c d
(a)^
!
a b!
c d
(b)
fig. 10: original and modied process trees for event log l.
91table 4: quality dimensions of the pareto front for process trees from figure 10
treeconstraints
satisedreplay
tnessprecision generalization simplicitynumber
of edits
figure 10a 0 1 0.833 0.957 1 0
figure 10b 4 0.997 1 0.957 1 2
much better and ignoring the infrequent noisy traces. from this we can conclude
that by adding knowledge inferred from the event log to the discovered model it
becomes possible to improve it considerably. this way, it is possible to overcome
noise in the event log.
6.2 real life event log
exceptional cases may dominate the normal cases, thereby leading to a process
model that is over-tting the data or that is too general to be of any value. this
process model could however be improved by incorporating domain knowledge.
in order to evaluate such a scenario, we use the following steps on a real-life log
containing the road trac ne management process with 11 events and 150,370
cases available at [10]:
use the complete event log to mine a process tree using imi resulting in a
structured process tree. figure 11a shows the petri net representation of this
process tree. learn domain rules based on this tree.
filter the event log to select 10% of the cases having exceptionally deviating
behavior from the process model of figure 11a.
create a process tree based on the ltered log using imi. we assume that this
process tree is our starting point, and input it to the modication algorithm.
the petri net representation of this process tree is shown in figure 11b.
use the rules learnt from the original process model, in combination with
the entire event log and modied trees to generate a pareto front.
we deduce 2 coexistence, 2 responded-existence, 4 response and 1 not-succession
rules (9 in total) from the original process model. we use an edit distance of 3
in the modication algorithm and stop creating variants of process trees after
creating 500,000 unique process trees which results in a pareto front of 54 process
trees. in table 5 we compare the original process tree, ltered process tree and
the 5 modied process trees; out of which; trees 1,2, and 3 have the combined
highest values for replay tness and precision in the pareto front, and trees
4 and 5 have highest individual values in the pareto front for replay tness
and precision respectively. as we use the process model containing only 10%
(a) process model mined with complete
event log.
(b) process model with ltered log con-
taining infrequent traces only.
fig. 11: petri net models to show structural dissimilarities between models for
complete and ltered event logs.
92table 5: dimensions  statistics  for process trees based on real life event log
treeconstraints
satisedreplay
tnessprecision generalization simplicitynumber
of edits
complete log 9 0.970 0.872 0.983 1 0
filtered log 2 0.957 0.740 0.845 1 0
pareto front 1 8 0.882 0.785 0.861 1 3
pareto front 2 8 0.817 0.812 0.839 1 3
pareto front 3 8 0.816 0.825 0.862 1 3
pareto front 4 8 1 0.576 0.009 1 3
pareto front 5 8 0.544 0.943 0.929 1 3
of the exceptional cases from the original log as our starting point, most of
the modied process trees score lower than the original process tree on replay
tness and precision dimensions. also, trees 4 and 5 from table 5 demonstrate
that post modication higher replay tness could result in lower precision and
vice versa. although the ltered process tree has a higher score in terms of
tness, it has the lowest precision score among all the other trees (except tree
4). the process tree discovered from the complete event log scores the highest
in all dimensions. however, the modied trees 1 to 3 from pareto front (in
table 5) have a nicely balanced score of all dimensions and in general, explain
the complete event log much better than the process tree from the incomplete
ltered log. from a users perspective, depending on the preference, the user can
select any process tree from the pareto front. for example, if the user is looking
for a process tree satisfying maximum constraints as well as describing the log
very well, then then tree 4 from table 5 seems to be the viable option. however,
the user can also see the tradeo in the pareto front and the fact that although
tree 4 satises users requirements, it scores very badly as compared to other trees
in some other dimensions (precision and generalization). hence, while choosing
the models from pareto front, the user can make an informed decision while
considering the requirements as well as evaluating dierent dimensions.
7 conclusions and future work
in this paper we introduced two algorithms in order to incorporate and verify
domain knowledge in a discovered process model. the proposed verication al-
gorithm provides a comprehensive way of validating whether the constraints are
satised by the process tree. in the current approach we consider a subset of de-
clare templates. in the future this could be extended to include all the declare
templates. the current modication algorithm uses a brute force approach and
exhaustively generates multiple process trees. however, currently the modica-
tion algorithm does not consider the user constraints during the modication
process. in the future, we would like to improve upon the modication algo-
rithm by modifying the process tree in a smarter way (for eg. using genetic or
greedy algorithms), to optimise the modication approach and/or ensure cer-
tain guarantees in the modied process trees. another future direction could be
93to incorporate domain knowledge at dierent stages, for example when logging
event data or during the discovery phase.
references
[1] van der aalst, w.m.p.: process mining: discovery, conformance and en-
hancement of business processes. springer, berlin (2011)
[2] adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: conformance
checking using cost-based tness analysis. in: enterprise distributed object
computing conference (edoc), 2011 15th ieee international. pp. 55{64.
ieee (2011)
[3] adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: towards ro-
bust conformance checking. in: business process management workshops,
lecture notes in business information processing, vol. 66, pp. 122{133.
springer berlin heidelberg (2011)
[4] buijs, j.c.a.m., van dongen, b.f., van der aalst, w.m.p.: quality dimen-
sions in process discovery: the importance of tness, precision, generaliza-
tion and simplicity. int. j. cooperative inf. syst. 23(1) (2014)
[5] de leoni, m., maggi, f.m., van der aalst, w.m.p.: aligning event logs and
declarative process models for conformance checking. in: business process
management, pp. 82{97. springer (2012)
[6] fahland, d., van der aalst, w.m.p.: repairing process models to reect
reality. in: business process management, pp. 229{245. springer (2012)
[7] greco, g., guzzo, a., lupa, f., luigi, p.: process discovery under prece-
dence constraints
[8] leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-
structured process models from event logs containing infrequent behaviour.
in: business process management workshops. pp. 66{78. springer (2014)
[9] leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-
structured process models from event logs containing infrequent behaviour.
in: business process management workshops. pp. 66{78. springer (2014)
[10] de leoni, m., mannhardt, f.: road trac ne management process, http:
//doi:10.4121/uuid:270fd440-1057-4fb9-89a9-b699b47990f5
[11] maggi, f.m., mooij, a.j., van der aalst, w.m.p.: user-guided discovery of
declarative process models. in: computational intelligence and data mining
(cidm), 2011 ieee symposium on. pp. 192{199. ieee (2011)
[12] de medeiros, a.k.a., weijters, a.j.m.m., van der aalst, w.m.p.: genetic
process mining: an experimental evaluation. data mining and knowledge
discovery 14(2), 245{304 (2007)
[13] pesic, m., schonenberg, h., van der aalst, w.m.p.: declare: full support for
loosely-structured processes. in: enterprise distributed object computing
conference, 2007. edoc 2007. 11th ieee international. pp. 287{287. ieee
(2007)
[14] rembert, a.j., omokpo, a., mazzoleni, p., goodwin, r.t.: process discov-
ery using prior knowledge. in: service-oriented computing, pp. 328{342.
springer (2013)
94