contents lists available at sciencedirect 
comput ers in industry 
journal homepage: www.elsevier.com/locate/compind 
utilizing domain knowledg e in data-driv en process disco very:  
a literature revie w 
daniel schuste ra,b,⁎, sebastiaan j. van zelsta,b, wil m.p. van der aalsta,b 
a frau nhofer fit, process mining resear ch group, schloss birlingho ven, sankt augustin 53757, north rhine- westphalia, germany 
b rwth aachen university , chair of process and data science, ahornstr aβe 55, aachen 52074, north rhine- westphalia, germany    
article info  
article history : 
received 1 sept ember 2021 
received in revised form 4 december 2021 
accep ted 17 january 2022 
available online xxxx  
keywords: 
process mining 
process discov ery 
process models 
human-in-the-loop 
hybrid intellig ence abstract  
process mining aims to impro ve operational processes in a data-driv en manner . to this end, process mining 
offers methods and techniq ues for systematicall y analyzing event data. these data are gener ated during the 
execution of processes and stored in organizations' information systems. process discovery , a key discipline 
in process mining, comprises techniq ues used to (automaticall y) learn a process model from event data. 
how ever , existing algorithms typically provide low-quality models from real-life event data due to data- 
quality issues and incompletel y captur ed process beha vior. automat ed filtering of event data is valuable in 
obtaining better process models. at the same time, it is often too rigor ous, i.e., it also remov es valuable and 
correct data. in man y cases, prior know ledge about the process under investigation can be additionally used 
for process discove ry besides event data. therefor e, a new family of discovery algorithms has been de-
veloped that utilizes domain know ledge about the process in addition to event data. to organize this re-
search, we present a liter ature revie w of process discov ery approaches exploiting domain know ledge. we 
define a taxonom y that systematically classifies and compares existing approaches. finally , we identify 
remaining challeng es for future work. 
© 2022 the author(s). published by elsevier b.v. 
cc_b y_4.0   
contents  
1. introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  2  
2. related work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  4  
3. backgr ound . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  4  
3.1. event data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  4  
3.2. process models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  5  
3.3. process discove ry. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  5  
3.4. conformance checking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  5  
3.5. process model repair . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  6  
4. distinguishing features for domain-know ledge-utili zing process discov ery. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7  
4.1. identification and construction strat egy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7  
4.2. distinguishing features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7  
4.2.1. timing of domain know ledge provision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7  
4.2.2. domain know ledg e type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7  
4.2.3. degree of interacti vity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7  
4.2.4. output process model formalism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9  
4.2.5. output guarant ees. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9  
4.2.6. application focus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9  
4.2.7 . softwar e realization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9  
4.3. dependencies among charact eristics and features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9 
https ://doi.org/1 0.1016/j.compind.2022. 103612 
0166-361 5/© 2022 the author(s). published by elsevier b.v. 
cc_b y_4.0  
]]]] 
]]]]]] 
⁎ corresponding author at: fraunhofer fit, process mining research group, schloss birlinghov en, sankt augustin 53757, north rhine- westphalia, german y. 
e-mail address: daniel.schuster@fit.fra unhofer .de (d. schuster). computers in industry 137 (2022) 103612 5. liter ature revie w. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9  
5.1. design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10  
5.2. descriptions of identified approache s. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10  
5.2.1. approach a1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10  
5.2.2. approach a2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10  
5.2.3. approach a3. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11  
5.2.4. approach a4. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11  
5.2.5. approach a5. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11  
5.2.6. approach a6. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11  
5.2.7 . approach a7. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.2.8. approach a8. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.2.9. approach a9. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.2.10. approach a10. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.2.11. approach a11. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.2.12. approach a12. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.2.13. approach a13. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.3. discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.3.1. timing of domain know ledge provision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  12  
5.3.2. domain know ledg e type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  13  
5.3.3. degree of interacti vity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  14  
5.3.4. output process model formalism and restrictions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  14  
5.3.5. output guarant ees. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15  
5.3.6. application focus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15  
5.3.7 . softwar e realization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15  
6. adop tion in industry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15  
7. challenges for future work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16  
7.1. blending explicit domain know ledge and user feedback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16  
7.2. incre ased inter action . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16  
7.3. offering different inter activity modes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16  
7.4. scalable conformance checking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16  
7.5. minimizing the repre sentational bias . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16  
7.6. enhanced process model visualizations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16  
7.7. domain know ledg e specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17  
7.8. domain know ledg e prioritization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17  
7.9. softwar e support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17  
7.10. alternative perspectiv es. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17  
8. conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17   
declaration of competing inter est. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17   
appendix a supplementary material . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17   
references . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17  
1. introduction 
the execution of processes–r anging from business to production 
processes–is often supported by information systems. these systems 
recor d the processes’ execution in great detail, e.g., which proce ss 
activities were executed, their order , their duration, and which re-
sources were involved. these records are referr ed to as event data. to 
impro ve an organization’s processes, the analy sis of event data 
provides valuable opportunities. process mining (van der aalst, 2016) 
offers techniq ues, tools, and methods for systematically analy zing 
event data to gain insights into the execution of processes. these 
insights are used to optimize the processes, i.e., the central objectiv e 
of process mining. 
process disco very (van der aalst, 2018) is a key discipline in pro-
cess mining. starting from event data, a discov ery algorithm learns a 
process model describing the process as captur ed in the provided 
event data. fig. 1 illustra tes the gener al arch itectur e of conv entional 
discov ery algorith ms. automat ed, data-driv en process discov ery as-
sumes that event data are the most objectiv e repr esentation of a 
process. howev er, event data often have quality issues (martin et al., 
2021, table 4), such as incorr ect logg ed process beha vior, incomplete 
process beha vior resulting from ongoing process executions while 
the event data was extract ed, and missing process beha vior that 
actually occurred. apart from data-q uality issues, concurr ency in 
man y processes often yields incomplete event data because not 
every possible scheduling of the concurrent process activities is captured. as such, process discov ery from event data can be seen as 
an unsupervised learning task. 
man y proce ss discov ery algorithms have been devel oped. most of 
them work fully-aut omated, i.e., they take event data as input, op-
tionally allow to set configuration parameters, and return a process 
model, cf. fig. 1. we refer to such algorithms as conventional process 
discov ery algorithms. how ever , the process models discov ered by 
conventional algorithms are often of low quality because of the 
afore mentioned data-q uality issues (suriadi et al., 2017). moreo ver, 
it is difficult for a user to choose a suitable process discov ery algo -
rithm for specific event data because each algorith m works differ -
ently and, thus, may produ ce different results. therefor e, in-dept h 
event
loglconventional
process
disco very
algorithmconﬁguration
parameters
process
modelm
fig. 1. schematic visualization of the genera l archit ecture of conv entional process 
discov ery algorithms. from event data that describe the execution of a process, a 
process model is autom atically learned using a process discov ery algorithm. limited 
inter action is possible: either filtering the input or adjusting configuration para -
meters. d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
2 know ledge of the discov ery algorithms is gener ally necessary to 
select a suitable algorithm for a given use case. this practical pro-
blem, for instance, led to research on recommender systems sup-
porting the selection of an appropriat e discov ery algorithm for given 
event data (ribeiro et al., 2014; pérez -alfonso et al., 2015). 
the circumstan ces abov e led to a new family of process discov ery 
algorithms: algorithms that utilize domain know ledge in addition to 
event data. in this paper , we refer to domain know ledge as any prior 
know ledge about the process to be discov ered besides event data. 
domain know ledge is often available alongside existing even t data, 
such as documents describing the process and the know ledge of 
process participants about the process. the utilization of domain 
know ledge in process discov ery has various advantages. for in-
stance, it helps: to reduce the negativ e impact of quality issues in the 
event data on the proce ss model to be discov ered, to overcome 
limitations when only incomplete process beha vior is available, and 
to discov er specific patterns that most conv entional discov ery al-
gorithms cannot learn, e.g., long-te rm dependencies and proce ss 
models with duplicate activity labels. moreo ver, first studies indicate 
that exploiting domain know ledge within process discov ery out-
performs conventional discov ery algorithms (dixit et al., 2018b;  
benevent o et al., 2019). 
existing domain-know ledg e-utilizing discov ery approaches 
rang e from fully -automat ed approaches, which additionally use domain know ledg e along with event data as input, to truly in-
teractiv e/incremental approaches where a user play s a central role 
in the discov ery process and activ ely provides domain know ledge 
to the algorithm during discov ery. fig. 2 visualizes various op-
portunities wher e domain know ledge can be utilized in the con-
text of process discov ery. for example, domain know ledge can be 
utilized in the event data pre-pr ocessing phase, e.g., to label ob-
served process beha vior, i.e., positiv e beha vior should be in-
corporat ed in a proc ess model, and negativ e beha vior should not 
be incorporat ed. thus, process discov ery is transformed into a 
supervised learning task. domain know ledge can also be used as an 
additional input of the discov ery algorithm. for example, a hand- 
crafted model describing parts of the model to be discov ered 
could be provided to the discov ery algorithm as a starting point 
next to event data. also, during the execution of the discov ery 
algo rithm, i.e., during the learning of a process model, domain 
know ledge can be utilized, e.g., a user has to activ ely give feedback 
to the discov ery algo rithm on interm ediate discov ered process 
models and next steps. these examples illustrat e that domain- 
know ledge-utilizing process discov ery algorithms are much more 
heter ogeneous compared to conv entional proc ess discov ery from 
a user’s perspectiv e. 
the field of domain know ledge utilization in proce ss discov ery 
has become increasingly attractiv e in recent years (cf. fig. 3). this 
fig. 2. overvie w of various opportunities wher e domain know ledge about the process to be discove red can be utilized in the different phases of process discov ery. note that we 
distinguish two types of domain-know ledge-utilizing discove ry algorithms: automated discov ery algorithms and interact ive/incremental discov ery algorithms, allowing the user to 
dynamically provid e domain know ledge based on intermediate results during the discove ry. d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
3 paper , therefor e, presents a literatur e revie w of existing domain- 
know ledge -utilizing discov ery approache s to answer the research 
question: 
rq1. what is the current state of research in process discov ery that 
uses domain know ledge in addition to event data?further , this 
liter atur e revie w addre sses the following resear ch questions about 
domain-know ledge-utilizing process discov ery approaches. 
rq1 .1. at which point is domain know ledge utilized/pro vided? 
rq1 .2. what types of domain know ledge are used, and how is 
domain know ledge specified? 
rq1 .3. which proce ss model formalisms are used? 
rq1 .4. do the domain-know ledge -utilizing process discov ery 
algorithms exhaust the full possibilities of a proce ss model 
formalism? 
rq1 .5. how are the algorithms realized in software tools? 
in answering these resear ch questions, we aim to achieve three 
main resear ch objectiv es: (1) providing an overview of existing do-
main-know ledge-utilizing discov ery approache s, (2) developing a 
taxonom y for said approaches, and (3) identifying open challenge s 
and opportunities for futur e work. this paper presents the first lit-
eratur e revie w on this process discov ery family to the best of our 
know ledge . in total, we identified thirte en discov ery approaches. we 
propose a taxonom y for domain-know ledge -utilizing discov ery ap-
proaches to systematicall y categ orize and compare the identified 
approaches. finall y, we identify ten open challenge s, highlighting 
the need for further resear ch. 
the remainder of this paper is organized as follow s. section 2 
presents relat ed work. section 3 introduces basic concepts of proce ss 
mining. section 4 introduces a taxonom y for domain-know ledge - 
utilizing process discov ery approache s. section 5 provides an over-
view and systematic comparison of existing approache s. section 6 
discusses the adopt ion of domain-know ledge -utilizing proce ss dis-
covery in industry . section 7 highlights open challenge s for future 
work. finall y, section 8 concludes this paper . 
2. relate d work 
the field of process mining (van der aalst, 2016) is a largel y 
growing discipline, cf. (reinkemey er, 2020, fig. 21.1). various re-
search areas have emerged over the years within proce ss mining, for 
instance, process discov ery (van der aalst, 2010), conformance 
checking (carmona et al., 2018; dunzer et al., 2019), prediction (tax 
et al., 2020), and event abstraction (van zelst et al., 2021). there are 
revie ws of the various research findings for each of the previously 
exemplified areas to summarize the state of know ledge and identify 
remaining challenges. in the remainder of this section, we focus on 
process discov ery. man y algorith ms exist within conventional process discov ery (cf.  
fig. 1). a recent overvie w is present ed in (augusto et al., 2018), 
which systematicall y compares 35 conventional process discov ery 
algorith ms. furt her, the authors benchmark a subset of the identified 
approache s using real-life event data. in (van dongen et al., 2009), a 
review of conv entional process discov ery algorithms that are based 
on petri nets is given. in (van der aalst, 2018), a brief history of 
proce ss discov ery is presented, and gener al, underl ying concepts of 
proce ss discov ery algorith ms are present ed. a further overvie w of 
proce ss discov ery algorithms can be found in (van der aalst, 2016). 
domain-know ledge-utilizing process discov ery techniq ues have 
recently increased in inter est, cf. fig. 3. the usage of prior know ledge 
about the process under investigation and the user's involvement in 
the discov ery process is gaining attention in process mining. for 
example, in (reinkemey er, 2020, chapt er 21), the challenge of 
combining proce ss modeling with proce ss discov ery is presented. 
the authors propose hybrid models, a mix of hand-crafted and au-
tomat ically discov ered process models, as one of the main chal -
lenges in process mining. the idea of hybrid models corresponds to 
the more general idea of hybrid intell igence, i.e., combining human 
and machine intell igence. accor ding to (kerremans et al., 2021, 
38ff.), hybrid models are a prom ising approach for the further de-
velopment of process mining. in (benevent o et al., 2019; dixit et al., 
2018b), use case studies in the healthcare domain are presented, 
showi ng that a specific domain-know ledge -utilizing approac h out-
performs conv entional proce ss discov ery. the abov e refer ences 
show that domain-know ledge -utilizing process discov ery is relev ant 
with high futur e potential. how ever , ther e is no liter ature review on 
domain-know ledge -utilizing process discov ery to the best of our 
know ledge. 
3. back ground 
this section outlines the main concepts within process mining. 
first, we introduce event data and process models. finally , we pre-
sent process discov ery and model repair that can also be used for 
inter activ e proce ss discov ery. 
3.1. event data 
executing operat ional processes gener ates data in the informa -
tion systems involved. such data, capturing the execution of pro-
cesses, are referr ed to as event data. table 1 show s an example of an 
event log, i.e., a collection of event data, from a travel permit ad-
ministrat ion proce ss, adopt ed from (van dongen, 2020). each row 
corresponds to an event capturing the execution of a process activ ity 
for a specific process instance, i.e., a case. each column corresponds 
to an event attribute. for example, the first event indicates that the 
activ ity permit submitted was executed for the proce ss instance 
identified by the case-id 72861 on january 11, 2017 at 21:55:1 3 by an 
fig. 3. growing inter est in domain-know ledge-utilizing process discov ery. published documents by year matching the search term ("process mining" and ("process 
discovery" or “model repair") and ("interactive" or “incremental" or “domain knowledge" or “prior knowledge" or “hybrid intelligence" or “human- 
in-the-loop")) using scopus and acm on august 18, 2021. d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
4 employ ee who belongs to the group staff member. man y proce ss 
mining techniq ues, e.g., discov ery algorith ms, analyze even t data to 
gener ate insights into the actual process. 
we refer to the sequence of execut ed activities for a specific case 
as a trace. note that each event relates to prec isely one case. for 
instance, the trace for case 72861 is <  permit submitted , permit final 
appro ved, start trip, end trip, declar ation submitted, declar ation final 
appro ved, reques t payment, payment handled > . an event log typically 
consists of multiple cases, i.e., multiple recor ded executions of a 
process. events within a case are typically order ed based on their 
execution timestamp. we refer to uniq ue sequences of executed 
activities as trace variants. 
3.2. process models 
proc ess models allow us to specify the execution of processes 
graphicall y. man y formalisms exist, e.g., business proc ess modeling 
notation (bpmn) (chinosi and trombet ta, 2012), petri nets (van der 
aalst, 1998), and process trees (leemans, 2017). in fig. 4, we present 
three different process model formalisms describing the same pro-
cess. although all models in fig. 4 describe the same control flow of 
activities, the expressi veness of the three formalisms generall y dif-
fers. for example, the bpmn model specifies that a reminder is sent 
after 48 h if no declaration is submitted. further , the model indicates 
which resources are involved in executing the different proce ss ac-
tivities. such information cannot be modeled in the other two 
formalisms. 
most process model formalisms used in process discov ery focus 
on the control flow perspectiv e, i.e., which activities are present in a 
process and how they relat e to each other . next to the control flow 
perspectiv e, some process model formalisms include a data per-
spectiv e or an organizational/resour ce perspectiv e (dumas et al., 2013). 
for instance, bpmn provides modeling elements to specify the re-
sources involved in executing an activ ity and, further , provides ele-
ments to model the flow of data artifacts. howev er, most proce ss 
discov ery algorithms only discov er the control flow perspectiv e. 
next to the process model formalism and its graphical re-
presentation, man y process discov ery algorithms restrict the class of 
discov erable models within a given formalism. therefor e, these al-
gorithms constrain the chosen proce ss model formalism, e.g., re-
quiring specific structural properties, prohibiting activity duplicate s 
and silent/unobserv able activities in the discov ered process models. 
for example, various important sub-classes of petri nets play an 
important role in process discov ery, e.g., workflo w nets (wf-net), 
sound wf-nets, free-choice wf-nets, and block -structur ed wf-nets 
(van der aalst, 1996; leemans, 2017). a detailed overview of dif-
ferent target process model classes is out of this paper’s scope; we 
refer to (van der aalst, 2016) for an overview . how ever , it is essential 
to know that the target model class of proce ss discov ery algorithms 
is of great importance because specific control flow patterns cannot be represent ed in every process model class. ther efore, we refer to 
limitations imposed by choice of a particular process model form -
alism and other possible restrictions made by the discov ery algo -
rithm on that formalism as representational bias (van der 
aalst, 2016). 
3.3. process disco very 
in business process managem ent (bpm), process discov ery is 
considered the collection of information about a process and the 
tran sformation of said information into a process model, which 
describes the process as it is executed in reality (dumas et al., 2013). 
thereb y, techniq ues like document analy sis, process observ ations, 
interv iews and workshops with process stakeholders are applied to 
discov er a process model. how ever , process discov ery in the conte xt 
of process mining, how ever , follow s an entirel y data-driv en ap-
proach. event data are considered a digital imprint of a process, and 
proce ss discov ery algorithms learn a process model from these event 
data, i.e., historical data on the executions of a process. in the re-
mainder of this paper , we focus on process discov ery as considered 
in process mining. 
most existing process discov ery approaches are fully automat ed. 
event data are fed into a discov ery algorith m, and a proce ss model is 
returned. apart from adjusting configuration paramet ers of the 
discov ery algorith m, no other input besides the event data is used. 
the configuration paramet ers of an algorithm can be used, e.g., to 
adjust the comple xity of the resulting process model or to auto -
matically filter the event data (e.g., filtering infreq uent beha vior). 
apart from setting the configuration paramet ers, no inter action is 
possible. the actual process discov ery phase, i.e., learning a model, is 
fully automat ed, cf. fig. 1. we call this described family of process 
discov ery approache s conventional process disco very. 
3.4. conformance checking 
conformance checking (carmona et al., 2018) deals with com -
paring proce ss models and event data. the purpose of conformance 
checking techniq ues is to quantify the extent to which observed 
proce ss beha vior, i.e., event data, conforms or does not conform to 
modeled process beha vior, i.e., process models. in gener al, con-
formance checking is a separat e research area within process 
mining. nevertheless, conformance checking techniq ues are essen -
tial for domain-know ledge -utilizing process discov ery. for example, 
in an inter activ e discov ery phase, i.e., a user discov ers a process 
model jointly with an algorithm, feedback on the current pre-
liminary process model's conformance with the event data is of 
great importance. table 1 
example of an event log where each row corresponds to a single event. events are order ed by case-id. the shown event data describes an administrati ve process of handling travel 
permits, adopt ed from (van dongen, 2020). note that, in gener al, events usually contain more attributes than shown here.        
case-id activity timestamp resource resource role …  
⋮ ⋮ ⋮ ⋮ ⋮ … 
72861 permit submitted 11.01.2017 21:55:1 3 employ ee staff member … 
72861 permit final appro ved 11.01.2017 21:55:1 8 supervisor staff member … 
72861 start trip 12.01.2017 00:00:00 employ ee staff member … 
72861 end trip 20.0 1.2017 00:00:00 employ ee staff member … 
72861 declaration submitted 22.02.20 17 18:08:07 employ ee staff member … 
72861 declaration final approv ed 22.02.20 17 18:14:32 supervisor staff member … 
72861 request payment 03.03.20 17 14:51:42 undefined system … 
72861 payment handled 06.03.20 17 17:31:08 undefined system … 
72379 permit submitted 12.01.2017 09:1 7:36 employ ee staff member … 
⋮ ⋮ ⋮ ⋮ ⋮ …    d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
5 3.5. process model repair 
the area of process model repair (fahland and van der aalst, 
2015), which is considered a separat e resear ch area, can be posi -
tioned betwee n proc ess disco very and conformanc e checking 
(carmona et al., 2018). proc ess model repair techniq ues use con-
formance checking techniq ues to compare a given process model to given event data. if the model does not fully reflect the beha vior 
recorded in the event data, repair the given model. consider fig. 5, in 
which we depict a schematic overview of process model repair . a 
proce ss model m and event data are the input for model repair ap-
proaches. if the recor ded process beha vior as captur ed in the event 
data conforms to the process model m, there is nothing to repair , and 
m is returned, i.e., 
=m m . suppose the recor ded process beha vior is 
fig. 4. three process models describing the same travel permit process, i.e., the same control flow of activities, in different process model formalisms, i.e., bpmn, petri nets, and 
process trees. the process starts with submitting a permit, which is either reject ed or appro ved. if it is approv ed, the trip takes place, i.e., start trip and end trip. next, a reminder is 
optionally sent multiple times. once a declaration is submitted, it is either rejecte d, in this case a declaration has to be submitted again, or it is appro ved. finally , payment relat ed 
activities are executed. the bpmn model (a) additionally contains resour ce information and models that a reminder is sent 48 h after a declaration has not been submitted. d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
6 not fully support ed by the process model m. in that case, m is alter ed 
such that all the recorded process beha vior is supported and 
m is as 
similar as possible compared to the original model m. especially the 
latter goal, i.e., the repair ed model should be as similar as possible to 
the original model, is important because it distinguishes proce ss 
model repair from process discov ery (besides the differen t inputs). 
assuming this goal would not exist, one could apply process dis-
covery on the given event data using an algorithm that guarant ees to 
return a proce ss model that describes all given beha vior. 
although model repair techniq ues are inten ded to post-process a 
process model, they can also be used incrementall y to learn a pro-
cess model. compared to fig. 2, repair techniq ues can be considered 
an inter activ e/incremental process discov ery algorith m. given an 
initial model (a priori domain know ledge), missing process beha vior 
can be added to the initial process model graduall y (in vivo, user - 
selected beha vior) or at once. 
4. distinguishing feature s for domain-know ledge-utilizing 
process discov ery 
to structur e the field of domain-know ledge -utilizing proce ss 
discov ery, this section presents distinguishing features that allow us 
to systematically compare and categ orize the different approaches. 
the remainde r of this section is structured like follo ws. first, we 
explain how we derived the specific distinguishing features in  
section 4.1. subseq uently , we present the specific deriv ed features 
and correspondin g char acteristics. finally , we present dependencies 
between the different features and charact eristics. 
4.1. identification and construction strategy 
this section highlights the construction of the proposed distin -
guishing features and their corresponding charact eristics. we fol-
lowed the definition of a taxonom y from nickerson et al. (2010). the 
authors define a taxonom y as a set of dimensions d1, …, dn. each 
dimension di for i ϵ {1, …, n} consists of ki ≥ 2 potential charact er-
istics. further , when appl ying this taxonom y to a specific object, for 
each dimension exactly one potential char acteristic applies, i.e., 
mutually exclusiv e and collectiv ely exhaustiv e (nickerson et al., 
2010). howev er, for this liter ature review , we modified this defini -
tion by omitting mutual exclusiv eness. hence, we allow an object, 
i.e., a domain-know ledge-utilizing process discov ery approach, to 
have more than one potential char acteristic for a given dimension. in 
the following, we refer to the dimensions as features to differentiat e 
from (nickerson et al., 2010). 
the goal of the distinguishing features is to answer the research 
questions posed in section 1. the proposed distinguishing features 
are the result of various discussions within the author team and with 
other peers. the proposed charact eristics for each distinguishing 
feature are deriv ed from the analy sis of the identified papers. 4.2. distinguishing features 
in this section, we present eight distinguishing features with 
correspondin g char acteristics. fig. 6 summarizes the identified fea-
tures. note that we have identified first-level and second-level fea-
tures. for instance, if an approach uses explicit domain knowledge 
(feature : domain know ledge type), we are further inter ested in 
whether the used specification formalism is imperative or declar a-
tive (fig. 6). 
4.2.1. timing of domain knowledge provision 
as shown in fig. 2, domain know ledge can be provided and uti-
lized at various times during process discov ery. for instance, domain 
know ledge can be an additional input next to event data, domain 
know ledge can be utilized during an inter activ e discov ery phase, and 
domain know ledge can be used after the discov ery of a model to 
post-pr ocess it. we are ther efore inter ested in the timing of domain 
know ledge provision. 
we identify three charact eristics regar ding when domain 
know ledge is assumed to exist and be used: a priori, in vivo, and a 
posteriori. we categ orize an approach as a priori if domain know l-
edge is an input next to event data, i.e., domain know ledge is re-
quired before the actual discov ery phase starts. in vivo describes 
approache s that allow for domain know ledge injection during the 
discov ery phase, e.g., by incorporating user feedback. an approach 
utilizes domain know ledge a posteriori if after the actual discov ery 
phase domain know ledge is used, e.g., domain know ledge is used to 
post-pr ocess a discov ered process model. 
4.2.2. domain knowledge type 
domain know ledge is a broad concept and can exist in man y 
differen t forms. therefor e, we are inter ested in the type of domain 
know ledge assumed by the domain-know ledge -utilizing process 
discov ery algorith ms. 
in this paper , we distinguish between explicit domain know ledge 
and domain know ledge in terms of user feedback to the algorithm. 
we consider explicit domain know ledge as domain know ledge 
which is specified in a formalism and fed into the discov ery algo -
rithm and, thus, the user explicitly provides it to the algorithm. for 
instance, precedence constraints between proce ss activities and in-
itial process models, which serve as a starting point for the discov ery 
algorith m, are considered explicit domain know ledge. in contrast, 
user feedback is any decision that a user makes based on options 
provided by a discov ery algorithm. an example of user feedback is an 
algorith m providing intermediat e process models to the user in an 
ongoing discov ery phase. the user must decide which process model 
to continue using. compared to explicit domain know ledge, dis-
covery algorithms activ ely request user feedback. 
note that the domain know ledge type and the timing of domain 
know ledge utilization are independent features. for instance, ex-
plicit domain know ledge can be incrementall y provided by the user 
to the discov ery algorithm in vivo, i.e., during the discov ery phase. 
alternativ ely, user feedback can be requested in vivo. 
we are further inter ested in the domain know ledge specification 
formalism if an approach utilizes explicit domain know ledge. we 
distinguish imper ative and declar ative specification formalisms. 
imper ative formalisms follo w a closed-wor ld assumption, i.e., only 
beha vior explicitly described in the formalism is allow ed. in contrast, 
declara tive formalisms follow an open-wor ld assumption, i.e., all 
beha vior is allow ed that satisfies given restrictions specified in the 
formalism. 
4.2.3. degree of inter activity 
domain-know ledge-utilizing process discov ery algorithms have 
differen t approache s regar ding user involvement during the dis-
covery phase. the spectrum rang es from completel y automat ed 
process model
repair algorithm
event
dataprocess
modelmconﬁguration
parameters
process
modelmfig. 5. schematic visualization of process model repair . a process model m and event 
data are assumed as input. if all the recor ded process beha vior (i.e., event data) 
conforms to m, m does not get modified, i.e., 
=m m . if there is process beha vior 
recor ded in the event data that is not included in model m, the process discove ry 
approach repairs m such that the repair ed model 
m reflects all process beha vior from 
the event data. d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
7 algorithms, i.e., no user inter action is possible during the discov ery 
phase, to algorithms in which the user has a central role in an in-
teractiv e discov ery phase and makes essential decisions regar ding 
the process model to be discov ered. accor ding to fig. 2, we distin -
guish two levels of inter activity : automated and inter activ e/incre -
mental. we categ orize approaches that do not support any option to 
inject domain know ledge, e.g., through user feedback, during the 
discov ery phase as automated. for instance, approaches that use explicit domain know ledge and event data as input but do not offer 
user inter action are categ orized as automated (cf. fig. 2). note that, 
by definition, automat ed approaches do not use domain know ledge 
in vivo. 
in contrast, we categ orize approache s that allow injecting do-
main know ledge during the actual discov ery phase, e.g., through 
user feedback, as inter activ e/incre mental. we further distinguish in-
teractiv e/incr emental approac hes by the existence of an auto- 
distinguishing
featurestiming of
domain
knowledge
provision
(section 4.2.1)apriori
invivo
aposteriori
domain know-
ledge type
(section 4.2.2)explicitspeciﬁcation
formalismimperativ e
declarativ e
user feedbac k
degree of
interactivit y
(section 4.2.3)automated
interactiv e/
incremen talauto-complete
optionyes
no
output process
modelformalism
(section 4.2.4)imperativeprocess model
formalismpetrinets
bpmn
causal nets
(c-nets)
information
controlnets (icns)
directly-follo ws
graphs (dfgs)
log-trees
declarativ eprocess model
formalismdeclare
first-order logic
output process
modelformalism
restrictions
(section 4.2.4)yes
no
output guaran-
tees
(section 4.2.5)yes
no
application
focus
(section 4.2.6)process disco very
modelrepair
softw are
realization
(section 4.2.7)available
unkno wn/not (pub-
licly) availablefig. 6. overvie w of the identified distinguishing features (gray filled boxes) and their characte ristics (light gray filled boxes).  d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
8 complete option. an auto-complet e option ensures that the algo -
rithm is able to auton omously learn a process model if the user 
decides to stop providing feedback to the algorith m. 
4.2.4. output proc ess model formalism 
the used proce ss model formalism and potential restrictions of 
the formalism made by the discov ery algorithm are of great im-
portance when comparing differen t process discov ery approache s 
because formalisms differ in their expressi veness. reconsider the 
term repr esentational bias, introduced in section 3.3. the choice of a 
discov ery algorithm on a particular formalism for the discov ered 
process models and potential restrictions of the chosen formalism 
always implies a representati ve bias since every formalism has re-
strictions and limitations on which proce ss beha vior can be spe-
cified. 
we are ther efore inter ested in the formalisms used. first, we 
distinguish betwee n imper ative and declar ative process model 
formalisms, similar to section 4.2.2. thus, we further distinguish the 
exact formalism used, i.e., petri nets, bpmn, causal nets (c-nets), in-
formation control nets, directly -follows graphs (dfgs), log-trees, de-
clare, or first-or der logic. we are further inter ested in whether 
discov ery approache s constrain the chosen output formalism, as 
such constraints limit the expressi veness of a process model form -
alism. for instance, some process discov ery algorithms cannot dis-
cover models that have the same activ ity label twice in different 
places in the model, i.e., duplicate labels. 
4.2.5. output guar antees 
guar antees regar ding the discov ered model are of great im-
portance when comparing process discov ery approaches in gener al. 
we are inter ested in whether the approaches can guarant ee specific 
properties of the discov ered process model regar ding the given 
event data and the given domain know ledge . for example, if full 
repla y fitness is ensured, i.e., all selected process beha vior from the 
event data is repr esented in the discov ered model. alternati vely, if it 
is always guarant eed that domain know ledge about the proce ss 
being discov ered is fully integr ated into the resulting model, i.e., the 
domain know ledge is fully reflected by the model. how ever , guar -
antees can also refer to proce ss models and their properties, e.g., 
whether a petri net repr esents a sound workflo w net. soundness 
(van der aalst et al., 2011) is a favorable property of workflow nets, 
e.g., ensuring that from any state of the model, there is always the 
possibility to complete the proce ss and that there are no dead 
transitions within the model. we refer to (van der aalst, 2016, 2011) 
for further information on soundness. in summary , such guarant ees 
are important for the application of process discov ery approache s 
because they make the discov ery approaches reliable with respect to 
the output. 
4.2.6. application focus 
as mentioned in section 3.5, model repair techniq ues can also be 
used to discov er a process model incrementall y. therefor e, we are 
inter ested in the intended application focus of an algorithm. the 
application focus describes whether an approac h has been intended 
for process disco very or model repair use cases. starting from an initial 
process model, a user can gradu ally select proce ss beha vior that is 
not yet supported by the process model and apply a model repair 
approach. the resulting process model can then be reused in the 
next iterative execution in which further process beha vior is added. 
4.2.7. software realization 
the software support, especially for domain-know ledge -utilizing 
process discov ery approache s, is of great importance. for example, 
inter activ e process discov ery algorithms, i.e., human-in-the-loop 
process discov ery, must communicate intermediat e results, design 
decisions, or questions to the user , for which the algorithm requests feedback. anothe r example is the elicitation and specification of 
domain know ledge where the user needs support from software. for 
instance, supporting the user in specifying constraints in a particular 
formalism and verify ing that the specified domain know ledge is free 
of contradictions. therefor e, we are inter ested in the softwar e rea-
lization of the compared approache s. 
besides the existence of an implementation of an approach, we 
are inter ested in whether the software provides a graphical user 
interface (gui) and how the user inter action is realized ther ein. for 
instance, how does the tool support the user to specify explicit do-
main know ledge, or how is the feedback loop from the user to the 
algorith m designed. furthermor e, we are inter ested in the technic al 
realization of the softwar e. 
4.3. dependencies among characteristics and features 
as discussed in section 4.1, we do not generall y assume mutual 
exclusiv eness for the char acteristics per feature. therefor e, we pro-
vide in table 2 an overvie w for which feature mutual exclusiv eness 
applies. for instance, the feature “timing of domain know ledge 
provision” is not mutually exclusiv e; thus, a domain-know ledge- 
utilizing approach can be assigned various charact eristic values for 
this feature (cf. fig. 6). 
further , there exist two dependencies betwee n certain features 
and char acteristics. thus, not all theoretic ally potential feature/ 
char acteristic combinations exist. in the following, we explain these 
two dependencies.  
1. if the “application focus” of an approach is model repair , the 
approach requires a process model as input, i.e., explicit domain 
know ledge. hence, the approach’s “domain know ledge type” is 
explicit. note that the approach can additionally use user feed -
back because the charact eristics of the feature “domain know l-
edge type” are not mutually exclusiv e.  
2. if the “degree of inter activity” of an approach is automat ed, the 
“timing of domain know ledge provision” feature cannot be 
in vivo. 
5. liter ature revie w 
based on the identified distinguishing features, this section 
provides a detailed overvie w of various process discov ery algorithms 
which utilize domain know ledge. the remainder of this section is 
structur ed as follow s. in section 5.1, we present the design of our 
literatur e review , including the liter ature sear ch process and the 
criteria we applied to assess if the liter ature is within the scope of 
this revie w. next, section 5.2 briefly and individuall y describes the 
identified discov ery algorith ms and their core idea regar ding the 
utilization of domain know ledge. thereb y, we classify each approach 
based on the distinguishing features defined in section 4. finall y,  
section 5.3 discusses and compares the approache s and their char -
acteristics per distinguishing feature. table 2 
overvie w of mutual exclu siven ess regar ding charact eristics for each feature.    
featur e mutual exclusiv e  
timing of domain know ledge provision  
domain know ledge type  
specification formalism (per single type) ✓ 
degree of inter activity ✓ 
auto-complet e option ✓ 
output process model formalism ✓ 
proc ess model formalism ✓ 
output guarant ees ✓ 
application focus ✓ 
softw are realization ✓    d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
9 5.1. design 
according to the diversity in the design of a liter ature revie w, we 
present our concret e approach in this section to ensure transpar ency 
regar ding our design decisions. in this liter ature revie w, we pri-
marily follow ed the guidelines given in brocke et al. (2009) and  
webster and watson (2002). accor ding to brocke et al. (2009), the 
process of literatur e revie wing can be split up into five phases: 1) 
definition of the revie w scope, 2) concep tualization of the topic, 3) 
liter atur e sear ch and evaluation, 4) liter ature analy sis and synthesis, 
and 5) research agenda. the outcome of the first phase, the defini -
tion of review scope, was present ed in section 1. we will further 
discuss the scope in more detail in this section. the outcomes of the 
second phase, conceptualization of topic, were present ed in section 
3. furt her, we present ed distinguishing features in section 4. the 
third phase, liter ature search, and evaluation of the found literatur e, 
i.e., filtering liter ature outside the scope of a liter ature revie w, is a 
crucial phase, according to brocke et al. (2009). thus, we ex-
haustiv ely explain our approach regar ding the third phase in this 
section. phases four and five, the analy sis of the identified liter ature, 
and the devel opment of a research agenda will be present ed in  
sections 5.2, 5.3, and 7. 
to identify relev ant liter ature, we performed a keyword search 
on scientific databases. first, we queried the databases: scopus,1 
acm digital library ,2 and springerlink.3 all databases inde x a ple-
thora of journals, book series, conference proceedings, and work-
shop proceedings. for instance, scopus inde xes over 39,0 00 journals 
and conference proceedings in total.4 for each database, we used the 
same logical combination of keywords. for example, we used the 
search term title-abs-key("process mining" and ("process 
discovery" or “model repair") and ("interactive" or 
“domain knowledge" or “hybrid intelligence" or “human- 
in-the-loop")) in scopus. note that the exact query syntax may 
differ depending on the database. table 3 show s in the column hits, 
i.e., the number of liter ature found matching the search query for 
each database. note that we do not further limit the search results, 
e.g., we do not apply a time filter or exclude workshop publications. 
given the search results, we evaluated the liter ature based on 
three knockout criteria accord ing to the scope outlined in section 1. 
first, we focus on approache s whose primary focus is process dis-
covery. second, we exclude work that solely provides concep tual 
ideas without providing a specific algorithm and use case studies 
applying process discov ery. for instance, in kindler et al. (2006), a 
gener al frame work to incremen tally discov er process models from 
document and version management systems is present ed, and in  
hammori et al. (2004), requirem ents for an inter activ e workflo w 
mining system are described. 
third, we focus on approaches that utilize domain know ledge in 
the process discov ery phase (cf. fig. 2). thus, we exclude approache s 
that utilize domain know ledge solely in the event data pre-pr oces -
sing phase because these approaches address even t data pre-pr o-
cessing in a general manner . event data pre-processing is required/ 
beneficial for any applied process mining techniq ue, and it is con-
sidered a separat e resear ch area. for instance, we exclude domain- 
know ledge -utilizing filtering techniq ues (sadeghianasl et al., 2020;  
martin et al., 2019; sani et al., 2019; gschw andtner et al., 2014), label 
splitting techniq ues (lu et al., 2016), and event abstraction techni -
ques (van zelst et al., 2021). furt her, we exclude domain-know ledge - 
utilizing post-proce ssing approaches for process models, i.e., ap-
proaches only applied after the actual discov ery phase. howev er, as discussed in section 4.2.6, process model repair techniq ues can also 
be used to discov er a process model incrementall y. thus, we con-
sider process model repair techniq ues in this liter ature revie w. it 
should be noted that we do not, though, provide a complete over-
view of all existing approaches to process model repair unless the 
techniq ues differ according to the identified distinguishing char -
acteristic regar ding use in the conte xt of process discov ery. fur-
thermore , from the point of view of process discov ery, a detailed 
comparison of model repair techniq ues makes little sense since the 
mode of operat ion to discov er a model is the same. analogousl y, we 
exclude pure post-processing approaches. moreo ver, we exclude 
approache s that use only domain know ledge and no event data to 
discov er a process model. for example, in (friedrich et al., 2011), the 
authors describe an approach that learns a model based only on 
natural language descriptions of a proce ss and does not use any 
event data. apart from the listed restrictions, we include all ap-
proaches that are intended to discov er a proce ss model and utilize 
domain know ledge in addition to event data. 
table 3 show s the number of found publications for each data -
base and the number of remaining publications after graduall y ap-
plying the three knock out criteria.5 after remo ving duplicates, we 
identified 12 relev ant approaches from the database queries. in ad-
dition to the conducted database queries, we applied backw ard 
sear ch for all 12 identified publications (brocke et al., 2009). thus, 
we evaluated all refer ences from each of the 12 identified publica -
tions. after removing duplicates, the 12 identified papers cite in total 
270 publications. from these 270 publications, 10 fulfill all three 
criteria. we found one publication/approa ch among the ten identi -
fied publications we did not identify before with the database 
sear ches. thus, we finally identified 13 domain-know ledge-utilizing 
discov ery approaches that are included in this liter atur e revie w. an 
overvie w of the identified approaches is present ed in table 4. 
5.2. descriptions of identified appr oaches 
this section briefly describes each identified domain-know ledge- 
utilizing approach to provide an overvie w of how the approaches 
work and, in particular , how domain know ledge is utilized. 
following the order in table 4, we individual ly present the ap-
proaches. note that in section 5.3, we discuss and compare the 
differen t approaches based on the identified distinguishing features, 
cf. fig. 6. 
5.2.1. approa ch a1 
goedertier et al. (2009) present an automa ted approach that 
utilizes a priori domain know ledge . the approach allow s providing 
prior know ledge about which process activ ities are execut ed in 
paralle l and which are sequentially executed. this information is 
utilized to enrich the given event log with missing beha vior because 
event logs are often incomplete and do not contain all possible 
scheduling sequences of parallel beha vior. for instance, assume 
there are n atomic process activities executed in parallel. in this case, 
there exist n! man y sequential executions of these n activities. any 
missing sequential execution in the event log is automaticall y added 
based on the provided domain know ledge . based on the domain 
know ledge, the approach learns a petri net that may contain, for 
example, loops, duplicate labels, and non-free choice constructs. 
5.2.2. approac h a2 
maggi et al. (2011) propose an automated approach to learn a 
proce ss model, i.e., a declare model graphicall y represent ed as a 
condec model (pesic and van der aalst, 2006). declare consists of 
1 http://scopus.com 
2 https://dl.acm.org/ 
3 https://link.springer .com/ 
4 https://www .scopus.com/sources.uri (accessed 11/25/202 1). 5 detailed information on the search terms used, the liter ature found, and the 
application of the three criteria can be found in the supplementary material. d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
10 beha vioral templat es to repr esent specific relationships between 
process activities. the user restricts (a priori domain know ledge ) the 
algorithm to a desired subset of templat es that the algorithm is al-
lowed to use, i.e., which template s appear in the resulting proce ss 
model. the approach automaticall y learns constraints based on the 
selected templat es and generates a process model out of this. fur-
thermore, the approach guar antees that the given event data fits the 
discov ered constraints. 
5.2.3. approa ch a3 
rembert et al. (2013) propose an automa ted discov ery approach 
that utilizes a priori, explicit domain know ledge in the form of an 
augmented information control net (icn), i.e., an imper ative form -
alism. an icn repr esents relationships between proce ss activities. in 
an extended icn, the user assigns belief values (between 0 and 1) to 
the relationships, expressing the user’s belief in the given de-
pendency between the corresponding activities. based on the event 
data and the augmented icn, a process model is automaticall y 
learned and present ed as an icn. the authors explicitly highlight 
cases where event data contain uncertainties or where important 
but infreq uent process beha vior is presen t in the even t data as a 
primary application of their approach. 
5.2.4. approa ch a4 
yahya et al. (2013) present an automated approach that utilizes a 
priori domain know ledge . a user can specify the following re-
lationships between activities: causal, unrelat ed, paralle l. ad-
ditionally , start and end activ ities can be specified. based on the 
notion of activit y proximity , which reflects the relations between 
activities as recor ded in the event log, and the specified domain 
know ledge , a proce ss model is learned, i.e., a direct ed graph, 
showing the directl y-follo ws-r elation between activities. 5.2.5. approac h a5 
dixit et al. (2015) present an automa ted approach. the approach 
uses an initial process model, event data, and user -specified con-
straints, i.e., declare constraint s, as input. thus, the approach uses 
domain know ledge a priori. given the initial process model, a brute 
force method is applied to generate differen t models by randoml y 
appl ying edit operat ions. next, the resulting models are evaluated 
based on the event data—standard quality measures are calculated, 
i.e., replay fitness, precision, gener alization, and simplicity—based on 
the number of applied edit operations and the number of satisfied 
user -specified constraints. for an introduction to the standard 
quality measures, we refer to (van der aalst, 2016, chapt er 6.4.3). 
these six measures are used to creat e a pareto front of the best 
proce ss models. compared to fig. 2, the approach returns multiple 
proce ss models after the discov ery phase. finally , the obtained se-
lection of process models is present ed to the user , who must select 
the final process model. we categ orize this user feedback as a pos-
teriori. 
5.2.6. approac h a6 
greco et al. (2015, 2012) propose an automa ted process discov ery 
approach that utilizes explicit domain know ledge in the form of 
prec edence constraints, i.e., a declar ative formalism. these pre-
cedence constraint s specify the dependencies among the process 
activ ities and are an additional input next to event data, i.e., a priori. 
proc ess models are repr esented as extended c-nets. the approach 
guarant ees that the resulting c-net describes the beha vior in the 
event data and fulfills the given prec edence constraints; otherwise, 
no model is returned. the authors explicitly highlight the log com -
pleten ess problem, i.e., when event data does not include all possible 
executions of the actual process to be discov ered, as a suited use case 
of their approach. table 3 
overvie w of the literatur e search process. first, we queried the given databases. we identified 12 publications matching the scope of this liter ature revie w. starting from these 12 
publications, we conducted backw ard search that resulte d in 10 identified publications. the backw ard search identified a new previousl y unidentified approach. thus, we 
identified in total 13 publications/approaches.         
number of publications satisfying 
source hits criterion 1. criteria 1. and 2. criteria 1., 2., and 3.  
scopus  43  20  13 9 
acm digital library  60  26  11 2 
springerlink  408  79  63 10 
σ    12 (duplicates remo ved) 
backw ard search (given the 12 identified publications)  270   10 
σ    13 (duplicates remo ved)    
table 4 
overvie w of the identified approaches order ed by publication year. note that when an approach is refined/e xtended over multiple publications, we list the year of the most recent 
publication.       
approach id first author ref. year description  
a1 goedertier et al. goedertier et al. (2009) 2009 section 5.2.1 
a2 maggi et al. maggi et al. (2011) 2011 section 5.2.2 
a3 rembert et al. rembert et al. (2013) 2013 section 5.2.3 
a4 yahya et al. yahya et al. (2013) 2013 section 5.2.4 
a5 dixit et al. dixit et al. (2015) 2015 section 5.2.5 
a6 greco et al. greco et al. (2015, 2012) 2015 section 5.2.6 
a7 fahland et al. fahland and van der aalst (2015, 2012) 2015 section 5.2.7 
a8 armas-cerv antes et al. armas-cerv antes et al. (2017a) 2017 section 5.2.8 
a9 canensi et al. canensi et al. (2017) 2017 section 5.2.9 
a10 dixit et al. dixit et al. (2018b) 2018 section 5.2.10 
a11 yürek et al. yürek et al. (2018) 2018 section 5.2.11 
a12 ferilli et al. ferilli and esposito (2013), ferilli (2020) 2020 section 5.2.12 
a13 schuster et al. schuster et al. (2020) 2020 section 5.2.13    d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
11 5.2.7. approa ch a7 
fahland and van der aalst (2015, 2012) introduce the field of 
process model repair and present a proce ss model repair approach. 
given a process model and an event log containing traces that the 
model does not support, the repair approach alters the proce ss 
model such that the model accepts all traces in the event log and is 
as similar—bo th from a language and a structural point of view —as 
possible to the original model. therefor e, we categ orize this repair 
approach as inter activ e/incre mental, i.e., starting from an initial 
process model (explicit, a priori domain know ledge), we repair the 
process model by incrementally adding trace variants to it (explicit, 
in vivo domain know ledge). the repair approach generall y works on 
petri nets, i.e., no restriction on a specific subclass. moreo ver, an 
auto-com plete option is theoreticall y given by automatic ally adding 
all remaining, non-fitting trace variants from a given log. 
5.2.8. approa ch a8 
armas-cerv antes et al. (2017a) propose a model repair approach, 
which we categ orize as inter activ e/incremental like a7. compared to 
a7, this approach relies on user feedback. the approach uses bpmn as 
process model formalism. by applying conformance checking tech -
niques to a given event log and bpmn model, mismatches between 
the model and the data are detect ed and visualized in a bpmn model 
editor . these visualizations of discrepancies between the model and 
the log are an essential feature of the approach. next to visualizing 
the discrepancie s, the approach also visualizes repair proposals in 
the model. based on the visual feedback, the user can then manually 
repair the process model or apply the suggest ed repair. as a possible 
disadv antage, the authors mention the potential effort for the user if 
there are man y discrepancies between the log and the model. 
5.2.9. approa ch a9 
canensi et al. (2017) introduce an inter activ e/incremental proce ss 
discov ery approach tailor ed for medical process mining use cases. 
initially , the approach automaticall y discov ers a process model, i.e., a 
log-tree, using an existing, non-domain-know ledge -utilizing algo -
rithm (bot trighi et al., 2016). the discov ered log-tree describes the 
entire event log, i.e., no autom atic filtering is applied. note that a 
log-tree can contain the same activ ity label various times because it 
encodes all traces from the event log in a tree structur e. given the 
discov ered log-tree, a user can specify a posteriori subgraphs and 
provide these as domain know ledge to the approach. given the 
subgraphs, the approach identifies all occurrences of these sub-
graphs in the log-tr ee and highlight them to the user . based on user 
feedback, i.e., a user selects all or a subset of the identified subgraphs 
in the log-tree, the approach merges the selecte d subgraphs to ob-
tain a simplified log-tree. howev er, note that this merging might 
result in a log-tree that describes additional beha vior that is not 
present in the initially discov ered log-tr ee. 
5.2.10. approa ch a10 
dixit et al. (2018b) propose an inter activ e/incre mental proce ss 
discov ery approach where the user models the process model in an 
inter activ e editor with support of the underl ying algorith m, which 
recommends modeling options based on the provided event log. 
starting from an initial model that does not contain any activity from 
the event data, the user gradu ally extends the model by adding new 
elements. thus, the approach uses implicit domain know ledge in 
vivo. the process model formalism used is free-choice (desel and 
esparza, 2005) workflow nets, a subclass of petri nets. the approach 
guarant ees that the petri net under construction remains sound, a 
favorable property of petri nets, by restricting the edit operations to 
the application of synthesis rules (desel and esparza, 2005). during 
editing the net, the user gets constant feedback and support from 
the tool regarding positioning new elements and relations between proce ss activities. additionall y, the tool offers an auto-com plete 
option. 
5.2.11. approa ch a11 
yürek et al. (2018) present an inter activ e/incremental discov ery 
approach that uses explicit domain know ledge in vivo. first, the 
approach automat ically discov ers a dfg from the provided event 
data. afterw ard, a user can explicitly change the model by ag-
greg ating, deleting, and adding activ ities to the dfg. how ever , the 
actual change of the dfg is processed by the algorithm and the user 
only specifies where/ho w/what should be changed, e.g., between 
proce ss activity a and b process activ ity x should be executed. then, 
the algorithm modifies the under lying data model accor dingly and 
discov ers a new process model. this procedure can be executed 
iteratively, cf. (yürek et al., 2018, fig. 3). 
5.2.12. approa ch a12 
ferilli and esposito (2013) and ferilli (2020) propose an inter -
activ e/incre mental process discov ery approach. first-order logic 
(fol) (declar ative) is the formalism used to repr esent process be-
havior. starting from an initial model, i.e., a set of formulae that 
might also be emp ty, new process beha vior can be added in-
cremental ly by the user . the approach uses explicit domain know l-
edge a priori (initial model) and in vivo (incremental adding of 
proce ss beha vior). the approach also learns information on the 
proce ss beyond the control flow. for instance, the process model, i.e., 
fol formulae, also includes information on resour ces involved in 
executing proce ss activities. as for the other incremental ap-
proaches, the approach offers an auto-c omplete option. 
5.2.13. approa ch a13 
schuster et al. (2020) propose an inter activ e/incremental process 
discov ery approach where a user incrementall y selects process be-
havior not yet supported by a process model under construction. 
starting from an initial proce ss model (i.e., explicit and a priori do-
main know ledge), a user incrementall y selects a trace variant not 
support ed by the current process model yet. we categ orize these 
incremen tally selecte d trace variants as explicit and in vivo domain 
know ledge. the selecte d trace variant, potential previous ly selected 
trace variants, and the curr ent process model are fed into the in-
cremental discov ery approach. the approach alters the process 
model such that the resulting model supports the previousl y added 
traces and the selecte d trace variant. the returned process model is 
then used as input in the next iteration, where the user adds the next 
trace variant to the model under construction. the approach uses 
proc ess trees as a process model formalism and guarant ees that the 
incremen tally selected trace variants fit the resulting model. further , 
the approach offers an auto-com plete option by simply adding all the 
beha vior of an event log to the model. 
5.3. discussion 
this section compares the differ ent approaches and discusses the 
differen t charact eristics per distinguishing feature. a compact 
overvie w of this comparison can be found in table 5, in which we list 
the differen t char acteristics per distinguishing feature for each ap-
proach. table 6 provides an overview of the number of approaches 
that have been categ orized accor ding to the different charact eristics 
of the distinguishing features. subseq uently , each feature is dis-
cussed individuall y, following the orde r given in fig. 6. 
5.3.1. timing of domain knowledge provision 
comparing the timing of domain know ledge provision, we ob-
serve that ten approache s assume domain know ledge to be provided 
a priori, six approaches utilize domain know ledge in vivo, and two 
approache s utilize domain know ledge a posteriori, i.e., after the d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
12 actual discov ery phase. note that the feature timing of domain 
know ledge provision is not mutually exclusiv e (cf. table 2), e.g., an 
approach can utilize domain know ledge a priori and in vivo. further 
note that we have excluded approaches that focus solely on post- 
processing process models, cf. section 5. 
interestingl y, only six approaches support in vivo utilization of 
domain know ledge, i.e., these allow the user to inter act with the 
algorithm during the actual discov ery. three out of these six ap-
proaches (i.e., a7, a12, and a13) follow an incremental discov ery 
approach, i.e., traces are incremen tally selected by the user and 
added to a process model under construction by the algorithm. two 
other approaches (i.e., a8, a10) assume that the user is activ ely 
providing feedback by either modeling or repairing the proce ss 
model guided by suggestion s from the algorithm. although a11 also 
allow s editing an initially discov ered process model, the algorith m 
does not provide the user with any modeling suggestions compared 
to the previous two approaches. this observ ation show s that current 
algorithms are very limited in terms of the variety of in vivo utili-
zation of domain know ledge and that man y possibilities of in vivo 
utilization of domain know ledge have not yet been explored. 5.3.2. domain knowledge type 
twel ve out of thirteen approaches utilize explicit domain 
know ledge, and only four , i.e., a5, a8, a9, and a10, utilize user 
feedback. only a10 solely utilizes user feedback. note that the fea-
ture domain know ledge type is not mutually exclusiv e, cf. table 2. 
furt her note that the automat ed approaches utilize only explicit 
domain know ledge since these approaches do not offer user inter -
action, as discussed in section 4.3. 
the proce ss discov ery algorithms incrementally adding traces to 
a process model under construction (i.e., a7, a8, a10, and a12) use 
an initial model a priori, explicit domain know ledge, and user -se-
lected traces in vivo. the user -selected traces are explicit domain 
know ledge within the discov ery phase. 
the remaining approaches that utilize explicit domain know l-
edge (i.e., a1-a6, a9 and a11) use declarati ve as well as imperati ve 
formalisms. we observe the following formalisms to repr esent ex-
plicit domain know ledge : control flow constraints (e.g., precedence 
constraint s and declare constraint s), initial process models, aug-
ment ed icns, and incrementall y selected traces. prec edence con-
straints and declare constraints are both declara tive formalisms. table 5 
classification and overvie w of process discov ery approaches utilizing domain know ledge and/or user feedback (la rosa et al., 2011; armas-cerv antes et al., 2017b; dixit et al., 
2018a; schuster et al., 2021a).   
d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
13 how ever , the declare formalism is more expressi ve than pre-
cedence constraint s because declare contains prec edence con-
straints and offers further constraints, e.g., the declare formalism 
enables the user to specify the exact number of times a proce ss 
activity must occur . augmented icns are an imperati ve formalism 
modeling the control flow of process activities. how ever , in practical 
use, it might be difficult for the user to assign a value between 0 and 
1 to the differ ent control flow relations, which expresses the cer-
tainty of the user for to the relation. 
comparing the utilized user feedback across the approac hes (i.e., 
a5, a8, a9, and a10), we observe the following inter action options: 
selecting a final model out of multiple candidates (i.e., a5), mod -
eling/repairing a model based on suggestions from the algorithm in 
an editor (i.e., a10/a8), and selecting identical process model parts 
that are to be merged (i.e., a9). 
5.3.3. degree of inter activity 
comparing the degree of inter activity , we observe that five ap-
proaches (i.e., a1-a4 and a6) are fully -automat ed. the remaining 
approaches are classified as inter activ e/incremental, i.e., they sup-
port in vivo provision of domain know ledge or some form of user 
feedback. all inter activ e/incremental approaches, except for a5 and 
a9, offer an auto-complet e option, i.e., these approache s can also be 
used in an automat ed way without mandatory domain know ledge 
provision. note that to both approaches, i.e., a5 and a9, an auto- 
complete option could be easily added. in the case of a5, the ap-
proach wou ld have to decide at the end which process model to 
return based on some predefined criteria instead of leaving this 
decision to the user . similarl y, a9 could simply merge all dete cted 
identical process model parts. 5.3.4. output process model formalism and restrictions 
comparing the used process model formalisms, we see that a 
wide rang e of different formalisms is used. we observe that only two 
approache s use declarati ve formalisms to repr esent the discov ered 
model, while the other approache s use imperat ive formalisms. 
how ever , most of the used process model formalisms are not 
common in industrial applications, for instance, proce ss trees, c- 
nets, and icns. 
the most common formalism used by the identified approaches 
is petri nets. except for one approach (i.e., a7), approache s using 
petri nets focus on a subclass, i.e., either process trees or free-choice 
workflo w nets. proc ess trees are widely used in state-of-t he-art 
conventional process discov ery approaches , e.g., the inductiv e miner 
(leemans et al., 2013) and the evolutionary tree miner (buijs et al., 
2014). how ever , it is important to note that the expressi veness of 
proce ss trees is limited, e.g., long-term dependencies—a choice at 
the beginning of a process influences a choice later in the pro-
cess—canno t be modeled. on the other hand, process trees guar -
antee favorable beha vioral charact eristics, e.g., they are deadlock - 
free, i.e., a process tree cannot be in a state where no more activ ity 
can be execut ed although the end has not yet been reached. 
therefor e, proce ss trees are an important subclass of petri nets for 
proce ss mining use cases but have inherent limitations. similarl y, 
accor ding to (van der aalst, 2016, cf. chapt er 6.4), free-choice 
workflo w nets cannot reflect all beha vior from real-life proce sses. a4 
and a11 use a simple graph representation, i.e., a dfg, as process 
model formalism. although dfgs are widely used in industrial ap-
plications of process mining, this formalism has low expressi veness 
compared to the other imperati ve formalisms observed. for ex-
ample, control flow operat ors such as choices and paralle l joins/ 
splits cannot be modeled because dfgs repr esent only process table 6 
overvie w of the number of approaches assigned to the individual characte ristics, cf. fig. 6. we marked features that are not mutually exclusiv e 
with *, cf. table 2. for the calculation of the relati ve numbers of the characte ristics of the second level, we have taken the absolute number of the 
charact eristics of the corresponding first level as a basis.    
d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
14 activities and their potentiall y directly following process activities.  
van der aalst (2019) extensi vely explains the use of dfgs and the 
pitfalls of deriving misleading diagnoses from dfgs. 
5.3.5. output guar antees 
we observe that eight approaches provide guarant ees concerning 
the discov ered process model, and five approache s do not. most 
approaches guarant ee that the initially given or incrementall y se-
lected event data fit the discov ered process model, i.e., the recorded 
process beha vior in the event data conforms to the discov ered pro-
cess model. thereb y, it is important to distinguish between ap-
proaches guarant eeing that the entire given event data are fitting 
(i.e., a2, a6, a9) and approaches (i.e., a7, a8, a12, and a13), allowi ng 
the user to inter activ ely select the desired process beha vior to be 
included in the process model under construction. if there is no 
option for the user to inter activ ely influence the process model 
during the proce ss discov ery phase, e.g., by selecting desired proce ss 
beha vior from the event data to be included in the model or by 
editing the proce ss model under construction, data-q uality is even 
more critical. all process beha vior captur ed in the given event da-
ta—including noise, incomplete beha vior, etc.–will be repr esented in 
the discov ered process model if the approach guarant ees full fitness. 
therefor e, the quality of the input event data is critical to the suc-
cessful application of the techniq ues abov e. 
interestingl y, only approach a2 provides guarant ees regar ding 
the a priori, explicit domain know ledge, and the resulting proce ss 
model. the approach guarant ees that the resulting model fits the 
given event data and the prec edence constraints between proce ss 
activities given as explicit domain know ledge . this leads to an in-
teresting design decision. suppose domain know ledge and event 
data have conflicting information about the process to be discov ered. 
in that case, the approach must decide, i.e., either return nothing 
because no solution satisfies both domain know ledge and event 
data, favor domain know ledge over event data, or vice versa. for 
instance, the user could model the precedence constraint specifying 
process activity a is always executed before b; how ever , we observe 
the exact opposite in the event data. a6 is designed to not return a 
model unless both event data and domain know ledge can be fully 
repr esented in a proce ss model. although we have argued that 
guarant ees regar ding the discov ered process model are of great 
importance, the abov e example show s that such guar antees can also 
lead to challenges. for example, approach a3 offers no guar antees; 
how ever , it may still be useful in practice not to always favor domain 
know ledge over event data, or vice versa, but to focus on the sta-
tistically significant beha vior of event data and domain know ledge 
instead. 
5.3.6. application focus 
we observe that elev en out of thirteen approaches have been 
mainly designed for proce ss discov ery by comparing the application 
focus. nevertheless, we identified two model repair approache s that 
can also be used to discov er a process model incrementall y, as de-
scribed in section 3.5. although this observ ation is not surprising, 
the two process model repair techniq ues demonstrat e the link from 
model repair to inter activ e and incremental process discov ery. 
5.3.7. software realization 
regarding software support, we note that eight approaches have 
been realized in software. of these, six approaches are available as a 
plugin within the proce ss mining toolkit prom (verbeek et al., 
2010).6 prom is an open-source softwar e tool for process mining that 
provides general process mining functionality and offers the possi -
bility to distribute algorithms and approaches via a plugin manager . a13 has been implement ed in a standalone software tool called 
cortado (schuster et al., 2021a),7 which is designed explicitly for 
incremen tal process discov ery. a8 has been integ rated into the tool 
called apromor e (la rosa et al., 2011).8 apromor e is a gener al process 
mining softwar e tool that includes various proce ss mining func -
tionality next to the process model repair functionality . for five 
approache s, no softwar e realization is (publicl y) available, or the 
status is unknown to us. all software realizations offer a graphic al 
user interfac e, allowi ng users to apply the approach easily . 
6. adop tion in industry 
in this section, we briefly focus on the adoption of process 
mining, especially of domain-know ledge-utilizing proce ss discov ery 
approache s, in industry . in gener al, process mining technologies are 
used in a wide rang e of industrial sectors, for instance, manu -
facturing (rozinat et al., 2009; park et al., 2015), healthcare (rojas 
et al., 2016; yang and su, 2014), education (bogarín et al., 2018) and 
auditing (jans et al., 2013; van der aalst et al., 2010). we refer to  
reinkemey er (2020) for various examples of process mining use 
cases at various organizations, e.g., siemens, uber , bmw , and bosch. 
furt her use case studies can be found in (thiede et al., 2018). 
the overall market for process mining is growing. the market 
size growth of 2021 is estimated to be 70%, and in 2022 the market 
growth rate is estimated to be between 40% and 50% (kerremans 
et al., 2021). these growth rates indicate the increasing relevance of 
proce ss mining technology in industry . according to kerremans et al. 
(202 1), more than 40 commercial process mining tools are available 
from various vendors, including aprom ore, celonis, ibm, sap, and 
uipa th. 
a comparison of different process mining tools is outside the 
scope of this liter ature review . in gener al, the existing commerci al 
tools offer differen t process mining technologies, but often there is a 
focus on the functionality offer ed (kerremans et al., 2021). accor ding 
to martin et al. (202 1, table 4), existing solutions often do not cover a 
wide rang e of proce ss mining functionalities. 
looking at process discov ery functionality in commercial tools, 
we observ e that man y existing tools offer limit ed process discov ery 
functionality . from our perspectiv e, man y of the existing conv en-
tional proce ss discov ery algorith ms developed in academia (augusto 
et al., 2018; van dongen et al., 2009) are not used in commerci al 
tools. often, commercial process mining tools offer only simplified 
proce ss discov ery techniq ues that discov er a directl y-follow s graph 
(dfg) as a proce ss model. how ever , dfgs lack advanced control flow 
structur es, and their expressi veness is significantly limited com -
pared to other process model formalisms, like petri nets and bpmn. 
we refer to van der aalst (2019) for an extensiv e discussion on the 
limitations of dfgs. nevertheless, process discov ery is a common 
use case for process mining in industry (kerremans et al., 2021). 
the devel opment of domain-know ledge-utilizing process dis-
covery approache s is still at an early stage. few approaches exist 
compared to conv entional proce ss discov ery. from the 13 identified 
approache s in this liter ature revie w, eight are realized in softwar e 
tools. six out of these eight approaches are available as a plugin 
within prom (verbeek et al., 2010), an open-source process mining 
tool developed by academia. although prom is a great success in 
academia and offers a variety of process mining functionality , it is 
hardl y used in industry according to our know ledge due to profes -
sional support, scalability , and ease of use. two out of the eight 
approache s that have been realized in software tools are available in 
standalone tools. approach a13 (cf. table 5) is realized in a tool that 
is developed by academia and is in an early stage of development. 
6 https://www .promt ools.org/ 7 https://cortado.fit.fraunhofer .de/ 
8 https://apromor e.org/ d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
15 thus, this approach is not used in industry at this moment. approach 
a8 (cf. table 5) is the only approach identified in this liter ature re-
view realized in a commercial, open-source process mining tool. in 
addition, we are not aware of any other identified domain-know l-
edge-utilizing process discov ery approache s that commerci al ven-
dors have adopt ed in their softwar e tools. 
in short, domain-know ledge -utilizing process discov ery is at an 
early stage from both an academic and an industrial perspectiv e. 
nevertheless, proce ss discov ery is a central use case of proce ss 
mining in industry (kerremans et al., 2021). given the challenge s, 
opportunities, and future directions of proce ss mining present ed in  
section 2, e.g., hybrid intellig ence and hybrid models, domain- 
know ledge -utilizing process discov ery techniq ues have a great po-
tential to become a valuable asset within the set of process mining 
techniq ues for industry . 
7. challenges for futur e wor k 
this section lists the main challenges and directions for future 
work and the design of domain-know ledge -utilizing process dis-
covery approaches. the identified challenges are based on the ob-
serv ations made when comparing the present ed approaches, cf.  
section 5, and the status regar ding the adoption in industry pre-
sented in section 6. in total, we have identified ten challenge s for 
future work, which are listed belo w. 
7.1. blending explicit domain knowledge and user feedback 
ten identified approache s (cf. table 5) use either solely explicit 
domain know ledge or user feedback during the discov ery phase. 
how ever , both types of domain know ledge are independently 
proven to be valuable in the conte xt of learning a process model 
from event data. therefor e, approaches should not be limited to 
either user feedback or explicit domain know ledge and utilize both 
types. 
7.2. incre ased inter action 
an inter esting direction for future work is to combine different 
approaches to lever age diverse domain know ledge, rath er than fo-
cusing only on limited and specific domain know ledge, as most ex-
isting approaches do. for example, combining incremental proce ss 
discov ery, i.e., a user incremen tally selects trace variants, with an 
assisted model editor, where the user is guided by an algorith m 
when editing the model. moreo ver, approaches might offer the user 
the option to provide feedback on various levels of detail, i.e., dif-
ferent options to integ rate domain know ledge in vivo. for example, a 
user could provide feedback on the exact positioning of some pro-
cess activities within a model and, at a later stage of the proce ss 
discov ery phase, only guide the algorithm in which trace variants 
should be added. in short, the goal should be to creat e overarching 
approaches that combine differen t ideas, each of which has in-
dividuall y proven useful in the conte xt of process discov ery. 
7.3. offering different inter activity modes 
existing approache s can be clearl y categ orized to one of the two 
introduced degrees of inter activity , i.e., automat ed and inter activ e/ 
incremental (cf. section 4.2.3). six out of eight inter activ e/incre -
mental approaches offer an auto-complet e option. howev er, ideally , 
an approach offers both modes giving the user maximal flexibility to 
discov er a process model. for example, imagine a discov ery ap-
proach is executed in an automat ic mode. during the automat ed 
discov ery phase, the user gets constant feedback and observes an 
undesirable tendency in the model being constructed. then, the user 
switches to an inter activ e/incr emental mode, makes slight changes to the model, and switches back to autom atic mode the described 
mode-switching requires that the user is able to inter act at specific 
points during the discov ery, i.e., break points. these breakpoints 
have to be chosen carefull y, on the one hand, to give the user enough 
opportunities to inter act, and on the other hand, not to be too fine- 
grained to avoid overburdening the user . 
7.4. scalable conformanc e checking 
man y presented approaches use conformance checking techni -
ques. especially alignments (adrians yah, 2014)– a state-of-t he-art 
conformance check ing techniq ue that provide detailed diagnostics 
compared to other conformance check ing techniq ues– are used in 
four identified approaches, i.e., a5, a7, a8, and a13. alignments are 
used to relat e a proce ss model with an event log to, e.g., recommend 
edit options and repair a model. in gener al, man y conformance 
checking techniq ues, especially alignments, are computationall y 
comple x (carmona et al., 2018) and provide non-deterministic di-
agnostics, i.e., there are usually man y optimal alignments 
(adr iansy ah, 2014). how ever , in gener al, domain-know ledge-uti -
lizing discov ery approaches need a constant comparison between 
the model and the event log. therefor e, fast conformance check ing 
techniq ues are critical to enabling inter action and fast suggestions 
from an inter activ e process discov ery algorith m. in this conte xt, 
research on the applicability of conformance appro ximation tech -
niques, such as bauer et al. (2020), fani sani et al. (2020), and  
schuster et al. (202 1b), within inter activ e process discov ery is 
needed. 
7.5. minimizing the representational bias 
as discussed in section 5.3.4, the approaches a4, a9, and a11 use 
simple process model formalisms, i.e., dfgs and log-tr ees that both 
have limited expressi veness compared to, e.g., petri nets and bpmn. 
also, in section 6, we highlighted the dominance of dfgs as the 
prom inent process model formalism in commercial tools and 
pointe d to (van der aalst, 2019), discussing the limitations of dfgs. 
also in (van der aalst et al., 2012b), the authors mention the need for 
proce ss model formalism that supports basic control flow structur es. 
furt her, four present ed algorithms that use advanced process model 
formalism restrict the class of discov erable models. such restrictions 
are gener ally made because discov ery algorithms can be designed 
more easily if certain restrictions on the output process model 
formalism can be assumed. for example, approache s a5 and a13 
work on process trees (i.e., sound, block -structured workflo w nets) 
or free-choice workflo w nets. both block -structured and free-choice 
workflo w nets are important subclasses of petri nets. how ever , the 
expressi ve pow er of these subclasses is limited compared to petri 
nets. note that man y real-life proce sses tend to be non-fre e-choice 
and non-block -structur ed (van der aalst, 2016, cf. section 6.4). fur-
ther, common restrictions are, e.g., the absence of duplicate activ ity 
labels, i.e., multiple elements in a process model are labeled with the 
same activity , and silent labels, which are needed to model specific 
control flow patterns in various formalisms. therefor e, in future 
discov ery approaches, the discov erable models' target class and 
potential restrictions should be carefull y considered. we refer to 
(van der aalst et al., 2012a) for an extensiv e discussion on the re-
presen tational bias. 
7.6. enhanced proc ess model visualizations 
as we can observe in table 5, man y differ ent process model 
formalisms are used to visualize proc ess models, e.g., c-nets, petri 
nets, proc ess trees, dfgs, and bpmn. it is important to note that 
most of these modeling formalisms are hardl y used in industrial 
prac tice. of the five modeling formalisms mentioned, one could d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
16 argue that bpmn (dumas et al., 2013) and dfgs, as discussed in  
section 6, are the most widely used in industry . especially for 
inter activ e discov ery approaches, it is of utmost importance to 
choose an appropriat e proc ess model visualization because a user 
has to quickl y understand a proc ess model in an inter activ e pro-
cess discov ery setting. the relev ance of the challeng e described 
here is supported by (martin et al., 2021, table 4). the authors 
identify non-standard visualizations of proc ess mining outcomes 
as a challenge for the adaption of process mining in industry . also 
in (van der aalst et al., 2012b), the authors list the challenge of 
impro ving usability and understandability for non-e xperts as a 
key challenge. note that this does not necessarily imply that also 
the underl ying algorithms need to be specified for the chosen 
visualization. for example, a process tree may be visualized as a 
bpmn model to the user , but internall y the algorithm operat es on 
a process tree data structure. 
7.7. domain knowledge specification 
man y approache s utilize explicit domain know ledge. how ever , 
little research has been done on supporting the user in specifying 
the domain know ledge in the conte xt of process discov ery. for in-
stance, we are not aware of studies within process mining that 
analyze which formalisms are easy to understand by end-users and 
how a user can be assisted/guided in specifying explicit domain 
know ledge . in martin et al. (202 1), the authors present challenge s 
regar ding the application proce ss mining in organizations. the au-
thors identify insufficient analy tical and technical skills of people 
applying process mining in industry . ther efore, we conclude that 
user support is of great importance in the specification of domain 
know ledge . 
7.8. domain knowledge prioritization 
as discussed in section 5.3.5, domain-know ledge -utilizing algo -
rithms have to decide if the given domain know ledge and the given 
event data have conflicting information on the process to be dis-
covered. an inter esting direction for futur e work is to involve the 
user whenever such conflicts occur within the process discov ery 
phase and let the user inter activ ely decide which information, i.e., 
event data or domain know ledge , is prioritized per conflict. ad-
ditionally , dynamic and automatic strat egies, i.e., not to statically 
always favor domain know ledge over event data or vice versa if 
conflicts occur , are an inter esting direction for futur e work. 
7.9. software support 
even more than with conv entional process discov ery, sophisti -
cated softwar e implementing the inter activ e/incremental discov ery 
approaches is of great importance for the acceptan ce and success of 
said techniq ues. since conv entional process discov ery is fully-aut o-
mated (cf. fig. 1), the user's inter action with the algorith m is limit ed; 
hence, sophisticated softwar e support is less critical for conv entional 
process mining. how ever , there is a clear need for sophisticated 
software support for process discov ery approache s that utilize user 
feedback, i.e., where user computer inter action is presen t. as dis-
cussed in section 6, only approach a8 is available in a commercial 
tool (la rosa et al., 2011), and only eight out of 13 approaches are 
realized in softwar e tools. 
7.10. alternativ e perspectiv es 
most present ed approaches focus solely on learning the control 
flow of a process. how ever , event data typically contain much more information, e.g., resour ce and time information. these data are 
often not exploited by process discov ery algorithms, although pro-
cess model formalisms like bpmn offer modeling elements to re-
presen t information beyond the control flow , e.g., organizational 
structur es and data flow . for example, consider fig. 4a. especially in 
an inter activ e process discov ery setting, information beyond the 
control flow in event data, e.g., resource and timing information, 
combined with the users’ domain know ledge on the process under 
considerat ion could be advantageous for obtaining more extensiv e 
proce ss models. the challenge is support ed by findings present ed in  
martin et al. (202 1). the authors identify the analy sis of processes 
with the focus on resour ces as an opportunity for using process 
mining in industry . 
the presen ted challenge s and directions for futur e inter activ e, 
domain-know ledge -utilizing approaches show that man y inter -
esting open research questions exist, and much can still be achieved 
in this area. we hope that these identified challenges and opportu -
nities will provide new impetus and ideas for further developments. 
8. conclusion 
process mining provides various methods, techniq ues, and tools 
to analyze operational processes in a data-driv en manner system-
aticall y. proc ess discov ery is a key discipline within process mining. 
conv entional proce ss discov ery deals with the automatic learning of 
a process model from event data. the low quality of models dis-
covered with conv entional process discov ery algorithms and the 
presen ce of prior know ledge, i.e., domain know ledge , about the 
proce ss to be discov ered lead to domain-know ledge -utilizing pro-
cess discov ery algorithms. 
this paper provided a systematic review of proce ss discov ery 
techniq ues that additionally utilize domain know ledge next to event 
data. first, we identified distinguishing features to categ orize and 
classify domain-know ledge -utilizing process discov ery approaches. 
then, based on the distinguishing features, we compared and dis-
cussed thirteen identified approaches selected by objectiv e criteria. 
finall y, based on the comparison and the discussion, we identified 
ten open challenges for futur e domain-know ledge-utilizing process 
discov ery approache s. these challenge s highlight the potential of 
using domain know ledge and user feedback within data-driv en 
proce ss discov ery and demonstrat e the need for further devel op-
ment in this area. 
declar ation of competing interest 
the authors declare the following financial inter ests/personal 
relationships which may be considered as potential competing in-
terests: the third author , wil m. p. van der aalst, has an affiliation 
with the commercial softwar e vendor celonis se. how ever , this af-
filiation did not influence the study in any way or affect objectiv ity. 
appendix a. supplementary materia l 
supplementary data associated with this article can be found in 
the online version at doi:1 0.1016/j.compind.2022. 103612. 
references 
adriansy ah, a., 2014. aligning observed and modeled beha vior (ph.d. thesis). 
eindhov en university of technology . doi: 10.6100/ir77 0080. 
armas-cerv antes, a., van beest, n.r.t .p., rosa, m.l., dumas, m., garcía-bañuelos, l., 
2017a. inter active and incremental business process model repair . in: proceedings 
of the on the mov e to meaningful internet syste ms. otm 2017 conferences – 
confederat ed international conferences: coopis, c&tc, and odbase 2017, d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
17 rhodes, greece, 23–27 october 2017, part i, vol. 10573 of lectur e notes in 
computer science, springer , pp. 53–7 4. doi: 10.1007/9 78-3-3 19-69462-7_5. 
armas-cerv antes, a., van beest, n.r.t .p., rosa, m.l., dumas, m., raboczi, s., 2017b. 
incremental and inter activ e business process model repair in apromor e. in: 
proceedings of the bpm demo track and bpm dissertation award co-located with 
15th international confere nce on business process modeling (bpm 2017), 
barcelona, spain, 13 sept ember 2017, vol. 1920 of ceur workshop proceedings, 
ceur -ws.org.url: http://ceur -ws.org/vol-1 920/bpm_20 17_paper_20 6.pdf. 
augusto, a., conforti, r., dumas, m., larosa, m., maggi, f.m., marrella, a., mecella, m., 
soo, a., 2018. automat ed discov ery of process models from event logs: revie w and 
benchmark. ieee trans. know l. data eng. 31 (4), 686–705. https://doi.org/1 0.1109/ 
tkde.20 18.284 1877 
bauer, m., van der aa, h., weidlich, m., 2020. sampling and appro ximation techniq ues 
for efficient process conformance checking. inf. syst. https://doi.org/1 0.1016/j.is. 
2020. 101666 
benevent o, e., dixit, p.m., sani, m.f., aloini, d., van der aalst, w.m.p ., 2019. evaluating 
the effectiv eness of inter active process discove ry in healthcare: a case study . in: 
proceedings of the business process management workshops – bpm 2019 
international workshops, vienna, austria, 1–6 sept ember 2019, revised selected 
papers, vol. 362 of lecture notes in business information processing, springer , pp. 
508–5 19. doi: 10.1007/9 78-3-030-3 7453-2_4 1. 
bogarín, a., cerezo, r., romero, c., 2018. a surve y on educational process mining. 
wires data min. know l. discov . 8 (1), e1230. https://doi.org/1 0.1002/widm. 1230 
bottrighi, a., canensi, l., leonard i, g., montani, s., terenziani, p., 2016. trace retriev al 
for business process operational support. expert syst. appl. 55, 212–22 1. https:// 
doi.org/1 0.1016/j.esw a.20 15.12.002 
broc ke, j.v., simons, a., nieha ves, b., nieha ves, b., reimer , k., plattfaut, r., cleven, a., 
2009. reconstructing the giant : on the importance of rigour in documenting the 
liter ature search process. in: proceedings of the ecis 2009, ais electronic library 
(aisel). url: https://aisel.aisnet.org/ecis20 09/1 61/. 
buijs, j.c.a.m., van dongen, b.f., van der aalst, w.m.p ., 2014. quality dimensions in 
process discov ery: the importance of fitness, precision, gener alization and sim-
plicity. int. j. coop. inf. syst. 23 (01), 1440001. https://doi.org/1 0.1142/ 
s02188430 14400012 
canensi, l., leonard i, g., montani, s., terenziani, p., 2017. multi-level inter active 
medical process mining. in: artificial intellig ence in medicine. springer 
international publishing, cham, pp. 256–260. https://doi.org/1 0.1007/9 78-3-3 19- 
59758-4_28 
carmona, j., van dongen, b.f., solti, a., weidlich, m., 2018. conformance checking – 
relating processes and models. springerhttps://doi.org/1 0.1007/9 78-3-3 19- 
99414-7 
chinosi, m., trombetta, a., 2012. bpmn: an introduction to the standard. comput. 
stand. interfaces 34 (1), 124–1 34. https://doi.org/1 0.1016/j.csi.20 11.06.0 02 
desel, j., esparza, j., 2005. free choice petri nets , no. 40. cambridge university 
presshttps://doi.org/1 0.1017/cbo9 7805 11526558 
dixit, p.m., buijs, j.c.a.m., van der aalst, w.m.p ., 2018a. prodigy : human-in-the-loop 
process discove ry. in: proceedings of the 12th international confere nce on 
research challenges in information science (rcis), pp. 1–12. doi: 10.1109/r cis. 
2018.8406 657. 
dixit, p.m., verbeek, h.m.w ., buijs, j.c.a.m., van der aalst, w.m.p ., 2018b. inter active 
data-driv en process model construction. in: proceedings of the conceptual 
modeling – 37th interna tional conference, er 2018, xi’an, china, 22–25 october 
2018, vol. 11157 of lecture notes in computer science, springe r, pp. 251–265. doi: 
10.1007/9 78-3-030-0 0847-5_1 9. 
dixit, p.m., buijs, j.c.a.m., van der aalst, w.m.p ., hompes, b., buurman, h., 2015. 
enhancing process mining results using domain know ledge. in: cera volo, p., 
rinderle-ma, s., (eds.), proceedings of the 5th international symposium on data- 
driven process discov ery and anal ysis (simpd a 2015), vienna, austria, 9–11 
december 2015, vol. 1527 of ceur workshop proceedings, ceur -ws.org, pp. 
79–94. url: http://ceur -ws.org/vol-1 527/paper6.pdf. 
dumas, m., rosa, m.l., mendling, j., reijers, h.a., 2013. fundamentals of business 
process management. springe rhttps://doi.org/1 0.1007/9 78-3-642-33 143-5 
dunzer , s., stierle, m., matzner , m., baier , s., 2019. conformance checking: a state-of- 
the-art liter ature revie w. in: proceedings of the 11th international conference on 
subject-oriented business proc ess management, pp. 1–10. doi: 10.1145/33290 07. 
33290 14. 
fahland, d., van der aalst, w.m.p ., 2012. repairing process models to reflect reality. in: 
barros, a., gal, a., kindler, e. (eds.), business process management. springe r berlin 
heidelberg, berlin, heidelberg, pp. 229–245. https://doi.org/1 0.1007/9 78-3-642- 
32885-5_1 9 
fahland, d., van der aalst, w.m.p ., 2015. model repair – aligning process models to 
reality. inf. syst. 47, 220–243. https://doi.org/1 0.1016/j.is.20 13.12.007 
m. fani sani s.j. van zelst w.m.p . vanderaalst conformance checking appro ximation 
using subset selection and edit distance advanced information systems 
engineering 2020 springer international publishing cham 234 251 doi: 10.1007/ 
978-3-030-49435-3_1 5]. 
ferilli, s., esposito, f., 2013. a logic frame work for incremental learning of process 
models. fundam . inform. 128, 413–44 3. https://doi.org/1 0.3233/fi-20 13-95 1 
ferilli, s., 2020. incremental declarati ve process mining with woman. in: proceedings 
of the ieee conference on evol ving and adapti ve intellig ent systems (eais), pp. 
1–8. doi: 10.1109/eais48028.2020http://dx.doi.org/1 0.1109/eais48028. 2020. 
9122700.9122700. friedrich, f., mendling, j., puhlmann, f., 2011. process model genera tion from natural 
language text. in: advanced information syste ms engineering. springer berlin 
heidelberg, pp. 482–4 96. https://doi.org/1 0.1007/9 78-3-642-2 1640-4_36 
goedertier, s., martens, d., vanthienen, j., baesens, b., 2009. robust process discov ery 
with artificial negativ e events. j. mach. learn. res. 10, 1305–1 340. https://doi.org/ 
10.5555/1 577069. 1577113 
greco, g., guzzo, a., lupia, f., pontieri, l., 2015. process discov ery under precedence 
constraints. acm trans. know l. discov . data 9 (4), 32:1–32:39. https://doi.org/1 0. 
1145/2 710020 
greco, g., guzzo, a., pontieri, l., 2012. process discov ery via precedence constraints. 
in: raedt, l.d., bessiere, c., dubois, d., doherty , p., frasconi, p., heintz, f., lucas, p.j. 
f. (eds.), proceedings of the ecai 2012 – 20th european conference on and 
applications. including prestigious applications of and applications (pais-20 12) 
system demonstration s track, montpellier , france, 27–31 august 2012, vol. 242 of 
frontiers in and applications ios press , pp. 366–3 71. doi: 10.3233/9 78-1-6 1499- 
098-7-366. 
gschw andtner , t., aigner , w., miksch, s., gärtner , j., kriglstein, s., pohl, m., such y, n., 
2014. timecleanser: a visual analytics approach for data cleansing of time-or -
iented data,. in: proceedings of the 14th interna tional confere nce on know ledge 
technologies and data-driv en business, i-kno w ’14, association for computing 
machinery , new york, ny, usa. doi: 10.1145/263 7748.2638423. 
hammori, m., herbst, j., kleiner , n., 2004. inter activ e workflow mining. in: 
proc eedings of the business process management: second international 
confere nce, bpm 2004, potsdam, german y, 17–18 june 2004, vol. 3080 of lectur e 
notes in computer science, springer , pp. 211–226. doi: 10.1007/9 78-3-540- 
25970-1_1 4. 
jans, m., alles, m., vasarhel yi, m., 2013. the case for process mining in auditing: 
sources of value added and areas of application. int. j. account. inf. syst. 14 (1), 
1–20. https://doi.org/1 0.1016/j.accinf.20 12.06.0 15 
kerremans, m., srivastava, t., choudhary , f., 2021. market guide for process mining, 
technical report, gartner . 
kindler, e., rubin, v., schäfer, w., 2006. incremental workflow mining based on 
document versioning information. in: unifying the software proc ess spectrum. 
springe r berlin heidelberg, berlin, heidelberg, pp. 287–30 1. https://doi.org/1 0. 
1007/1 1608035_25 
la rosa, m., reijers, h.a., van der aalst, w.m.p ., dijkman, r.m., mendling, j., dumas, m., 
garcía-bañuelos, l., 2011. apromor e: an advanced process model reposit ory. 
expert syst. appl. 38 (6), 7029–7040. https://doi.org/1 0.1016/j.eswa .2010.12.012 
leemans, s.j.j., fahland, d., van der aalst, w.m.p ., 2013. discov ering block -structured 
process models from event logs - a constructiv e approach. in: application and 
theory of petri nets and concurrency. springer berlin heidelberg, berlin, 
heidelberg, pp. 311–329. https://doi.org/1 0.1007/9 78-3-642 -3869 7-8_1 7 
leemans, s.j., 2017. robust process mining with guarant ees (ph.d. thesis). eindhov en 
university of technology . url: https://research .tue.nl/en/publications/robust- 
process-m ining-with-guarante es. 
lu, x., fahland, d., van den biggela ar, f.j.h.m., van der aalst, w.m.p ., 2016. handling 
duplicated tasks in process discov ery by refining event labels. in: business process 
managem ent. springer international publishing, cham, pp. 90–1 07. https://doi. 
org/1 0.1007/9 78-3-3 19-45348-4_6 
maggi, f.m., mooi j, a.j., van der aalst, w.m.p ., 2011. user -guided discov ery of de-
clarati ve process models. in: proceedings of the ieee symposium on and data 
mining, cidm 2011, part of the ieee symposium series on 2011, 11–15 april 2011, 
paris, france, ieee, pp. 192–1 99. doi: 10.1109/cidm.20 11.5949297. 
martin, n., martinez-millana, a., valdivieso, b., fernández-llatas, c., 2019. inter activ e 
data cleaning for process mining: a case study of an outpatient clinic’s appoint -
ment system. in: difrancescomarino, c., dijkman, r., zdun, u. (eds.), business 
proc ess management workshops. springer international publishing, cham, pp. 
532–544 . https://doi.org/1 0.1007/9 78-3-030-3 7453-2_43 
martin, n., fischer, d.a., kerpedzhiev, g.d., goel, k., leemans, s.j.j., röglinger, m., van 
der aalst, w.m.p ., dumas, m., la rosa, m., wynn, m.t., 2021. opportunities and 
challenges for process mining in organizations: results of a delphi study. bus. inf. 
syst. eng. 63 (5), 511–52 7. https://doi.org/1 0.1007/s1 2599-02 1-00720-0 
nickerson, r.c., munterman n, j., varshney , u., 2010. taxonom y development in in-
formation syste ms: a liter ature surve y and problem statement. in: proceedings of 
the ecis 2010. ais electronic library (aisel). doi: 10.1016/j.is.20 16.07.011. 
park, minjeong, song, minseok, baek, tae hyun, son, sooky oung, ha, seung jin, cho, 
sung woo, 2015. workload and delay analy sis in manufacturing process using 
proc ess mining. in: asia pacific business process management. ap-bpm 2015. 
lectur e notes in business information processing springer, cham. https://doi.org/ 
10.1007/9 78-3-3 19-19509-4_1 1 
pérez-alfonso, d., fundor a-ramírez, o., lazo-cortés, m.s., roche-escobar, r., 2015. 
recommendation of process discov ery algorithms through event log classifica -
tion. in: carrasco-ochoa, j.a., martínez- trinidad, j.f., sossa-azuela, j.h., 
olveralópez, j.a., famili, f. (eds.), pattern recognition. springer international 
publishing, pp. 3–12. https://doi.org/1 0.1007/9 78-3-3 19-19264-2_1 
pesic, m., van der aalst, w.m.p ., 2006. a declarativ e approach for flexible business 
processes management. in: proc eedings of the international conference on 
business process management, springer , pp. 169–1 80. doi: 10.1007/ 
11837862_1 8. 
reinkemey er, l., 2020. proc ess mining in action: principles, use cases and outlook. 
springe r nature https://doi.org/1 0.1007/9 78-3-030-40 172-6 d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
18 rembert, a.j., omokpo, a., mazzoleni, p., goodwin, r., 2013. process discov ery using 
prior know ledge. in: proceedings of the service-oriented computing – 11th 
international conference, icsoc 2013, berlin, german y, 2–5 december 2013, vol. 
8274 of lectur e notes in computer science, springer , pp. 328–342. doi: 10.1007/ 
978-3-642-450 05-1_23 . 
ribeiro, j., carmona, j., mísír, m., sebag, m., 2014. a recommender system for process 
discov ery. in: sadiq, s., soffer, p., völzer, h. (eds.), business process management. 
springer international publishing, pp. 67–83. https://doi.org/1 0.1007/978 -3-3 19- 
10172-9_5 
rojas, e., munoz-gama, j., sepúlv eda, m., capurro, d., 2016. process mining in 
healthcare: a liter ature revie w. j. biomed. inform. 61, 224–236. https://doi.org/1 0. 
1016/j.jbi.20 16.04.0 07 
rozinat, a., de jong, i.s.m., günther, c.w., der aalst, w.m.p .v., 2009. process mining 
applied to the test process of wafer scanners in asml. ieee trans. syst. man 
cybern. part c appl. rev. 39 (4), 474–479. https://doi.org/1 0.1109/tsmcc.20 09. 
2014169 
sadeghianasl, s., ter hofstede, a.h.m., suriadi, s., turkay, s., 2020. collaborati ve and 
inter activ e detection and repair of activity labels in process event logs. in: 
proceedings of the 2nd international conference on process mining (icpm), pp. 
41–48. doi: 10.1109/icpm496 81.2020.0 0017. 
sani, m.f., berti, a., van zelst, s.j., van der aalst, w.m.p ., 2019. filtering toolkit: in-
teractively filter event logs to impro ve the quality of discov ered models. bpm 
134–1 38.http://ceur -ws.org/vol-24 20/paperdt4.pdf . 
schuster, d., van zelst, s.j., van der aalst, w.m.p ., 2020. incremental discove ry of 
hierar chical process models. in: research challenges in information science. 
springer international publishing, cham, pp. 417–433. https://doi.org/1 0.1007/ 
978-3-030-503 16-1_25 
schuster, d., van zelst, s.j., van der aalst, w.m.p ., 2021a. cortado–an inter activ e tool 
for data-driv en process discov ery and modeling. in: application and theory of 
petri nets and concurrency. springer international publishing, cham, pp. 
465–4 75. https://doi.org/1 0.1007/9 78-3-030-7 6983-3_23 
schuster, d., van zelst, s., van der aalst, w.m.p ., 2021b. alignment appro ximation for 
process trees. in: process mining workshops. springer international publishing, 
cham, pp. 247–259. https://doi.org/1 0.1007/9 78-3-030-7 2693-5_1 9 
suriadi, s., andre ws, r., terhofst ede, a.h.m., wynn, m.t., 2017. event log imperfection 
patterns for process mining: towards a syste matic approach to cleaning event 
logs. inf. syst. 64, 132–1 50. https://doi.org/1 0.1016/j.is.20 16.07 .011 
tax, n., teinemaa, i., van zelst, s.j., 2020. an inter disciplinary comparison of sequence 
modeling methods for next-element prediction. softw . syst. model. 19 (6), 
1345–1 365. https://doi.org/1 0.1007/s1 0270-020-0 0789-3 
thiede, m., fuerst enau, d., bezerrabar quet, a.p., 2018. how is process mining tech -
nology used by organizations? a syste matic liter ature revie w of empirical studies. 
bus. process manag. j. 24 (4), 900–922. https://doi.org/1 0.1108/bpmj-06-201 7- 
0148 
van der aalst, w., 2010. proc ess discov ery: capturing the invisible . ieee comput. intell. 
mag. 5 (1), 28–4 1. https://doi.org/1 0.1109/mci.20 09.93530 7 
van der aalst, w., buijs, j., van dongen, b., 2012a. towards impro ving the re-
presentational bias of process mining. in: data-driv en process discov ery and 
analy sis. springer berlin heidelberg, berlin, heidelberg, pp. 39–54. https://doi. 
org/1 0.1007/9 78-3-642-340 44-4_3 
van der aalst, w., adriansy ah, a., de medeiros, a.k.a ., arcieri, f., baier, t., blickle, t., 
bose, j.c., van den brand, p., brandtjen, r., buijs, j., burattin, a., carmona, j., 
castellanos, m., claes, j., cook, j., costantini, n., curbera, f., damiani, e., de leoni, 
m., delias, p., van dongen, b.f., dumas, m., dustdar, s., fahland, d., ferreira , d.r., 
gaaloul, w., van geffen, f., goel, s., günther, c., guzzo, a., harmon, p., terhofst ede, 
a., hoogland, j., ingv aldsen, j.e., kato, k., kuhn, r., kumar, a., larosa, m., maggi, f., 
malerba, d., mans, r.s., manuel, a., mccreesh, m., mello, p., mendling, j., montali, 
m., motahari-ne zhad, h.r., zurmuehlen, m., munoz-gama, j., pontieri, l., ribeiro, 
j., rozinat, a., seguelpérez, h., terhofst ede, r., sepúlv eda, m., sinur, j., soffer, p., 
song, m., sperduti, a., stilo, g., stoel, c., swenson, k., talamo, m., tan, w., turner, 
c., vanthienen, j., varva ressos, g., verbeek, e., verdonk, m., vigo, r., wang, j., 
weber, b., weidlich, m., weijters, t., wen, l., westergaard , m., wynn, m., 2012b. 
process mining manifesto. in: business process managem ent workshops. springer 
berlin heidelberg, berlin, heidelberg, pp. 169–1 94. https://doi.org/1 0.1007/9 78-3- 
642-281 08-2_1 9 
van der aalst, w.m., van hee, k.m., van der werf, j.m., verdonk, m., 2010. auditing 2.0: 
using process mining to support tomorro w's auditor. comput er 43 (3), 90–93. 
https://doi.org/1 0.1109/mc.20 10.61 
van der aalst, w.m.p ., 1996. structura l characte rizations of sound workflow nets. 
comput. sci. rep. 96 (23), 18–22 . 
van der aalst, w.m.p ., 1998. the application of petri nets to workflow management. j. 
circuits syst. comput. 8 (01), 21–66. https://doi.org/1 0.1142/s02 181266980 00043 
van der aalst, w.m.p ., 2016. data science in action, second ed. springer berlin 
heidelberg https://doi.org/1 0.1007/9 78-3-662 -4985 1-4_1 
van der aalst, w.m.p ., 2018. process discov ery from event data: relating models and 
logs through abstractions, wires. data min. know l. discov . 8 (3). https://doi.org/ 
10.1002/widm. 1244 
van der aalst, w.m.p ., van hee, k.m., ter hofstede, a.h.m., sidorov a, n., verbeek, 
h.m.w ., voorhoev e, m., wynn, m.t., 2011. soundness of workflow nets: classifi -
cation, decidability , and analys is. form. asp. comput. 23 (3), 333–363. https://doi. 
org/1 0.1007/s0 0165-0 10-0161-4 
van der aalst, w.m.p ., 2019. a practitioner’s guide to process mining: limitations of the 
directl y-follo ws graph. proc edia computer science, centeris 2019 – international confere nce on enterprise and technologies/projman 2019 – international 
confere nce on project manage ment/hcist 2019 – international conference on 
health and social care and technologies, centeris/projman/hcist 2019, 164, pp. 
321–328. doi: 10.1016/j.procs.20 19.12.189. 
van dongen, b., 2020. bpi challenge 2020, 4tu. researchdata. https://doi.org/1 0.4121/ 
uuid:52fb9 7d4-4588-43c9-9d04-3604 d4613b51 
van dongen, b.f., alves de medeiros, a.k., wen, l., 2009. process mining: overvie w 
and outlook of petri net discov ery algorith ms. springer berlin heidelberg, pp. 
225–242. https://doi.org/1 0.1007/9 78-3-642 -00899-3_1 3 
van zelst, s.j., mannhardt, f., de leoni, m., koschmider, a., 2021. event abstraction in 
process mining: liter ature revie w and taxonom y. granul. comput. 6 (3), 719–736. 
https://doi.org/1 0.1007/s4 1066-020-0 0226-2 
verbeek, e., buijs, j.c.a.m., van dongen, b.f., van der aalst, w.m.p ., 2010. prom 6: the 
process mining toolkit. in: proc eedings of the business process management 2010 
demonstration track, hoboken, nj, usa, 14–16 sept ember 2010, vol. 615 of ceur 
workshop proceedings, ceur -ws.org. url: http://ceur -ws.org/vol-6 15/paper1 3. 
pdf. 
webster, j., watson, r.t., 2002. analyzing the past to prepar e for the future: writing a 
liter ature revie w. mis q. 26 (2) (xiii-xxiii) . 
yahya, b.n., bae, h., sul, s.-o., wu, j.-z., 2013. proc ess discov ery by synthesizing ac-
tivity proximity and user’s domain know ledge. in: song, m., wynn, m.t., liu, j. 
(eds.), asia pacific business process management. springer international 
publishing, cham, pp. 92–1 05. https://doi.org/1 0.1007/9 78-3-3 19-02922-1_7 
yang, w., su, q., 2014. process mining for clinical pathw ay: liter ature revie w and fu-
ture directions, in: proceedings of the 11th international conference on service 
systems and service management (icsssm), pp. 1–5. doi: 10.1109/icsssm.20 14. 
69434 12. 
yürek, i., birant, d., birant, k.u., 2018. inter active process miner: a new approach for 
process mining. turk. j. electr . eng. comput. sci. 26 (3), 1314–1328. https://doi. 
org/1 0.3906/elk -1708-1 12 
daniel schuster is a scientist at the data science & 
artificial intellig ence department of the fraunhofer 
institute for applied information technology fit. in ad-
dition, he is a ph.d. candidate under the supervision of 
wil m. p. van der aalst at the chair for proc ess and data 
science of the rwth aachen university . his resear ch 
inter ests include the field of process mining. he is par-
ticularl y inter ested in inter active process discove ry, i.e., 
incorporating human intellig ence into data-driv en pro-
cess discove ry.  
sebastiaan j. van zelst is a senior scientist in process 
mining affiliated to the fraunhofer institute for applied 
information technology and the rwth aachen 
university . his resear ch inter ests include event data 
processing, real-time process monit oring, data-driv en 
process optimization, and the application of hybrid in-
tellig ence in process mining. he has co-authored over 35 
peer -revie wed conference contributions and over 10 
peer -revie wed journal contributions in process mining. 
personal websit e: https://sebastiaanv anzelst.com.  
wil m.p. van der aalst is a full professor at rwth 
aachen university , leading the process and data science 
(pads) group. he is also the chief scientist at celonis, 
part-time affiliated with the fraunhofer fit, and a 
member of the board of governors of tilburg university . 
he also has unpaid professorship positions at 
queensland univer sity of technology (since 2003) and 
the technische universiteit eindhov en (tu/e). currentl y, 
he is also a distinguished fellow of fondazione bruno 
kessler (fbk) in trento, deputy ceo of the internet of 
production (iop) cluster of excellence, co-direct or of the 
rwth center for artificial intellig ence. his resear ch in-
terests include process mining, petri nets, business pro-
cess managemen t, workflow managemen t, process 
modeling, and process analys is. wil van der aalst has published over 250 journal 
papers, 22 books (as author or editor), 550 refere ed conference/w orkshop publica -
tions, and 80 book chapt ers. personal websit e: http://www .padsweb.rwth-aachen.de/ 
wvdaalst/.  d. schuster , s.j. van zelst and w.m.p. van der aalst compute rs in industry 137 (2022) 103612 
19 