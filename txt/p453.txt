emailanalyzer: an e-mail mining plug-in for
the prom framework
wil m.p. van der aalst1and andriy nikolov2
1department of information systems, eindhoven university of technology, p.o. box
513, nl-5600 mb, eindhoven, the netherlands.
2knowledge media institute, the open university, milton keynes, united kingdom.
w.m.p.v.d.aalst@tue.nl, a.nikolov@open.ac.uk
abstract. increasingly information systems log historic information in
a systematic way. work°ow management systems, but also erp, crm,
scm, and b2b systems often provide a so-called \event log", i.e., a log
recording the execution of activities. thus far, process mining has been
focusing on such structured event logs resulting in powerful analysis tech-
niques and tools for discovering process, control, data, organizational,
and social structures from event logs. unfortunately, many work pro-
cesses are not supported by systems providing structured logs. instead
very basic tools such as a text editors, spreadsheets, and e-mail are used.
this report explores the application of process mining to e-mail, i.e., un-
structured or semi-structured e-mail messages are converted in event logs
suitable for the application of process mining tools. this report presents
the tool emailanalyzer which analyzes and transforms e-mail messages
in ms outlook to a format that can be used by our process mining tools.
the main innovative aspect of this work is that our analysis is not re-
stricted to the social network, the main goal is to discover interaction
patterns and processes.
keywords : process mining, social network analysis, computer supported cooperative
work, work°ow management.
1 introduction
buzzwords such as bam (business activity monitoring), bom (business oper-
ations management), bpi (business process intelligence) illustrate the interest
in closing the bpm loop [1, 2]. this is illustrated by figure 1 which shows the
level of support in four di®erent years using the bpm lifecycle. the lifecycle
identi¯es four di®erent phases: process design (i.e., making a work°ow schema),
system con¯guration (i.e., getting a system to support the designed process), pro-
cess enactment (i.e., the actual execution of the process using the system), and
diagnosis (i.e., extracting knowledge from the process as it has been executed).
as figure 1 illustrates, bpm technology (e.g., work°ow management systems)
started with a focus on getting the system to work (i.e., the system con¯guration
phase). since the early nineties bpm technology matured and more emphasis
was put on supporting the process design and process enactment phases in a
better way. now many vendors are trying to close the bpm lifecycle by addingdiagnosis functionality [3]. the buzzwords bam, bom, bpi, etc. illustrate these
attempts.
process
design
system
configurationprocess
enactmentdiagnosis
(a) 1993process
design
system
configurationprocess
enactmentdiagnosis
(b) 1998
process
design
system
configurationprocess
enactmentdiagnosis
(c) 2003process
design
system
configurationprocess
enactmentdiagnosis
(d) 2008
fig. 1. the level of support is rising: closing the business process management (bpm)
cycle.
the diagnosis phase assumes that data is collected in the enactment phase.
most information systems provide some kind of event log (also referred to as
transaction log or audit trail). typically such an event log registers the start
and/or completion of activities. every event refers to a case (i.e., process in-
stance) and an activity (i.e., the step in the process executed), and, in most
systems, also a timestamp, a performer, and some additional data. process min-
ing techniques [3{9] take an event log as a starting point to extract knowledge,
e.g., a model of the organization or the process. in the context of our prom
tool [10] we are able to extract di®erent types of process models (e.g., petri
nets, event-driven process chains, and instance graphs), social networks, etc.
moreover, we can check properties (using an ltl-like language) and measure
conformance (how well does a model ¯t with the observed behavior?).
existing techniques for process mining assume an event log to be in place.
for many process-aware information systems [2] this assumption is valid. for ex-
ample, work°ow management (wfm) systems, enterprise resource planning
(erp) systems, customer relationship management (crm), case handling
(ch) and product data management (pdm) systems log information in some
transaction log or audit trail. new legislation such as the sarbanes-oxley (sox)
2act [11] and increased emphasis on corporate governance has triggered the need
for improved auditing systems [12]. to audit an organization, business activities
need to be monitored. as enterprises become increasingly automated, a tight
coupling between auditing systems and the information systems supporting the
operational processes becomes more important. however, many business pro-
cesses are not directly supported by some process-aware information system . for
many work processes relatively simple tools such as an e-mail program and text
editor are being used. e-mail can be seen as the most popular tool used for
computer supported cooperative work (cscw) [13{15]. the cscw domain
provides a very broad range of systems that support \work" in all its forms.
wfm systems and other process-aware information systems can be seen as par-
ticular cscw systems aiming at well-structured o±ce processes. therefore, it
is worthwhile to explore the application of process mining in the broader cscw
domain. in this report, we focus on e-mail systems and their logs. we will show
that it is possible to apply process mining techniques to a widely used e-mail
program like microsoft outlook.
e-mail is widely used for communication inside organizations and between
organizations. analysis of e-mail communication [16{20] is a popular topic of
research in social sciences, in particular sociometry [21{30]. if the tasks in the
work processes of the organization involve di®erent employees, then they need
to communicate to perform the business process. assigning tasks, asking for
more information, reporting results - all these activities are performed by send-
ing e-mail messages. such e-mail messages necessarily contain process-related
information to make recipients understand them. if it is possible to extract the
process-related information from such messages, then they may serve as an event
log of the organization. the main problem in this case is the extraction of in-
formation. a normal e-mail message does not contain any explicit information
which allows to make a conclusion about its relations to a particular process
instance or task or its relevance to the organization's business process at all.
therefore the e-mail messages must be either tagged with this data in a standard
way before sending or this data must be somehow extracted from the message's
content and its meta data (e.g., recipients, subject). the ¯rst variant (automatic
tagging) is applicable if the messages are sent not directly by e-mail client but
by the process-aware transaction system. very often such systems include e-mail
sending functionality. in this case it is easy to adjust the functionality of such a
system to tag the e-mail with the available information about the current pro-
cess instance and the task being performed. the second variant (extracting data
from arbitrary messages) is more involved. considering the message topic and
text can help to make a conclusion about the link between the message and the
underlying work°ow. also the sender or recipient can be actively involved in
making this link. this report describes an approach for extracting the process
event logs from the e-mail logs and presents a concrete tool: emailanalyzer. this
tool can extract the information from the e-mail program and transforms into a
format useable by prom, our process mining framework [10].
3the report is organized as follows. section 2 describes a running example,
which will be used to illustrate the functionality of the tool. section 3 describes
the main steps, which must be performed by the tool to retrieve a process log
from an e-mail log. section 4 discusses related work. finally, section 5 concludes
the report and lists possible directions for the future work. for the detailed
information about the process mining issues and approaches we refer to [3].
2 running example
in this report we will use a running example to discuss our work and present
theemailanalyzer tool. this section introduces the example by describing the
process, the organization, and and example log. the example is inspired by a
real-life case within a metallurgic enterprise.
2.1 process
figure 2 shows a business process within the metallurgic enterprise. the process
describes how raw materials are bought. the work°ow process is initiated by a
business proposal from a potential supplier, who proposes to sell the materials.
the task \proposal from the supplier" represents the discussion of possible con-
ditions between the supplier and a member of the company's supply department.
after that the member of the supply department considers the conditions and
decides if they are acceptable (\evaluation" task). the member of the supply
department performs this evaluation based on his experience. she or he may
consult other people or compare the proposal with other proposals but there
is no standard evaluation procedure. therefore it is unlikely that this stage is
re°ected in the e-mail log. after evaluation the supply department person de-
cides if the proposal is interesting for the company or not. if its conditions are
not acceptable, then the process is cancelled. otherwise the supply department
person contacts a member of the legal department and asks him to prepare the
contract. the legal department employee prepares the contract and signs the
agreement with the supplier. the next stage of the work°ow process is triggered
when the negotiated materials are delivered. an employee from the supply de-
partment checks the quality of the supplied materials. if the quality (usually
chemical structure) completely corresponds to the conditions of the contract,
then the employee asks the ¯nancial department to transfer the payment to the
supplier. if the quality is unsatisfactory, then the supply department person ini-
tiates the cancellation of the case. in figure 2 it is shown as one task \cancel"
for simplicity reasons but in fact it includes several subtasks (returning the ma-
terials back to the supplier, preparing corresponding documents etc.). the third
variant is when the quality does not satisfy the conditions of the contract but
the agreement should not be reversed completely. it is possible when only a part
of the consignment is not of satisfactory quality or if the materials are applicable
but correspond to the di®erent price category. in this case the legal department
4person is contacted to renegotiate the conditions of the contract with the sup-
plier (\change conditions of the contract"). if renegotiation succeeds, then the
contract is signed again and the legal department person contacts the ¯nancial
department to transfer the payment to the supplier's account. otherwise the
cancellation of the case is triggered.
start
cancelsigning
the
contractproposal
from
supplierevaluation
cancelquality
controltransfer
payment to
the supplierchange the
conditions of
the contract
endcancel
fig. 2. one of the processes of the metallurgic enterprise.
2.2 roles
three subunits of the company are involved in the work°ow process: the supply
department, the legal department and the ¯nancial department. the legal de-
partment tends to use case management, i.e., usually the same person from the
legal department is involved in di®erent stages of the work°ow case. however,
preliminary negotiations with the supplier and quality control can be performed
by di®erent people from the supply department. in our running example, we
assume that the departments consist of the following people:
{supply department: john, mike, and sue.
{legal department: carol and pete.
{financial department: george and joan.
2.3 e-mail log example
the e-mail log shown in table 1 represents a set of messages, which re°ects
processing of six work°ow instances, i.e., cases. each work°ow instance is related
to a potential supplier company. if the sender or the recipient of a message is
from an external company, then company's name is given in brackets. the task
\evaluation" does not appear in the e-mail log because it is usually performed
by the same employee as the \proposal" task.
5from to topic
mark(ukralum) sue business proposal for new plant
joe(metalgroup) john business proposal
michael(alusteel) sue proposal alusteel
sue pete prepare contract with alusteel
john pete change conditions alusteel
john carol contract with metalgroup
mike carol change conditions with metalgroup
ann(cvetmet) mike business proposal
mike carol contract with cvetmet needed
sue carol prepare contract with ukralum
john joan transfer payment for ukralum
linda(sarmat) mike commercial proposal
mike pete cancel sarmat: no interest
mike carol update cvetmet conditions
carol mike cancel cvetmet
carol joe conditions of metalgroup
carol george transfer payment for metalgroup
sarah(metox) sue business proposal for new plant
sue carol prepare contract with metox
mike pete update alusteel conditions
mike pete yet another change of alusteel conditions
pete mike alusteel is cancelled
carol sue cancel metox
table 1. a set of messages to handle the processing of the case
3 the mining process
the goal of the mining process is to produce the process log in the standard
xml format supported by the prom tool [10] from the set of messages stored
in the users' inbox folders. the process consists of several steps. the ¯rst step
is to extract the e-mail logs in the xml format from the user's outlook e-
mail clients. the next step is to pre-process the e-mail log in order to remove
ambiguities in recipient's names and to exclude irrelevant e-mail messages from
the future analysis. the e-mail log can be used to perform social network analysis
and to generate the process log. the process log resulting from such an analysis
can serve as input for wide variety of process mining tools, e.g., the many mining
plug-ins present in prom.
3.1 extracting e-mail logs
the ¯rst step is to extract the e-mail log of an organization from the e-mail clients
of all users. a separate tool - inboxloader is used for this purpose. this tool uses
com interface of the microsoft outlook to retrieve the list of messages from the
user's inbox folder. afterwards inboxloader saves this list of e-mail messages
6into an xml-¯le of the standard format recognized by the emailanalyzer tool.
after retrieving e-mail logs of each user all these message logs are loaded into
the emailanalyzer tool, which combines them together. note that both the
inboxloader and emailanalyzer are embedded in the prom framework.
3.2 pre-processing stage
very often the same person can appear in the recipient lists of di®erent e-mail
messages under di®erent names. for example, inbox folder, which was used
for tests, contains messages addressed to \ anikolov ", \anikolov@cs.vu.nl ",
\'anikolov' ", \anikolov@few.vu.nl ", \andriy nikolov ". all these names in
fact are related to only one mail account. this may happen because of the fol-
lowing reasons:
{di®erent e-mail clients may ¯ll recipient names in di®erent ways depending
on their settings and destination of the message (inside the network domain
or outside).
{the same mail account may be referred in di®erent ways depending on the
settings of the server (e.g. \ anikolov@cs.vu.nl " and \ anikolov@few.vu.nl "
are in fact the same mail address).
{one person may use several mail accounts.
the goal of the consolidation stage is to identify all participants of the e-mail
exchange and group together all messages related to the same (physical) recip-
ient. it is performed by ¯nding all names referring to the same person. this
process can be automated by comparing names and e-mail addresses (and parts
of e-mail addresses). the goal of the next step is to select from the whole set of
messages only those, which are needed for analysis. this step is necessary be-
cause usually the mailbox of a person contains many messages irrelevant for the
process or organization. these may include private messages, messages to and
from the people outside an organization or simply spam messages. considering
these messages during the analysis stage may considerably distort the results of
the analysis. therefore these messages must be excluded. criteria of relevance
depend on the goals of analysis, which are determined by the user, so this step
cannot be performed automatically and the user has to take care of it. the user
can either exclude irrelevant messages one by one or exclude/include recipients
together with all messages linked to them. resulting message list can afterwards
be used for analysis.
3.3 mining social networks: sociograms and messages frequency
charts
sociograms: a static view based on the set of e-mail messages from all
members of the organization, it is possible to build a sociogram in the form of a
directed graph. nodes of the graph will represent particular users and the arcs
indicate communication between them. all arcs have weights, which describe the
7frequency of messages. each e-mail message from user a to user b will increase
the weight of the arc from a to b by 1. a special case is a message with several
recipients. the recipients may belong to di®erent categories. usually a message
is addressed to the recipients listed in the \to" category while \cc" and \bcc"
recipients are only supposed to be informed of it. because of this it can make
sense to assign di®erent weights to the recipients of di®erent categories. for
example, a message from the person a to a person b with a carbon copy sent
to the person c should increase the arc from a to b by 1 and the arc from
a to c by 0,5. after processing all messages the weights in the network can
be normalized by dividing them by the maximal weight in the network, i.e.,
wnorm
i;j =wi;j=wmax.
a sociogram built after the exclusion of all reply messages may also appear
interesting. very often during the execution of a business process employees may
have long e-mail conversations while performing one task together or two tasks
in order. for example, after person a gave a task to person b, person b may
reply with a request for some additional information from person a and receive
this information in return. in another similar case person b may not need such
a request. it does not mean that in the ¯rst case relations between two people
is stronger. to avoid counting of such auxiliary messages it may be helpful to
exclude all reply messages from consideration. the resulting sociogram matrix
can be saved in the agna and netminer data ¯le format (like in mison tool
[31]) where advanced analysis methods can be applied to it.
message frequency charts: a dynamic view building a sociogram based
on the list of e-mail messages may lead to the partial loss of information. a
sociogram represents only the static view on the information exchange inside
an organization. however the log of e-mail messages also contains information
about the dynamics of this information exchange process. each e-mail message
has a timestamp, which shows when it was sent. the user may want to see how
the frequency of e-mail messages inside an organization changed during some
period of time. this information can be used in di®erent ways. for example, it
can help the manager to make decisions about the schedule of projects (e.g. if
(s)he sees that in the past periods of intense message °ows alternated with the
periods of less e-mail activities then (s)he may decide to revise the planning of
work in future).
a dynamic view of the information exchange can be shown with the help of
a chart, showing frequency of the messages. the period of time, which the user
wants to consider, is divided into the set of intervals of ¯xed length. the messages
in the message log are mapped on these intervals based on the time/date of
sending. x-axis of the chart represents the time while the y-axis shows the
number of messages, which were sent during each interval of time.
sociogram example after loading the e-mail log we should add for each of the
external persons one additional alias - the name of his company and make it his
main name. before building a sociogram we should exclude these external users
8from analysis if we are interested only in communication between the employees.
the sociogram built on the base of the e-mail log is shown in figure 3.
fig. 3. a sociogram built on the basis of an e-mail log.
3.4 mining process logs
translation of e-mail logs into process logs by the emailanalyzer tool is based
on the tags in the message's subject, which describe the relation between the
message and process case and task. the tags represent the names of the case
and task. there are three possible situations:
{the tags are added automatically by a corporative process-aware system in
some standard way;
{the user (either the recipient or the sender) is forced (or stimulated) to
classify each e-mail message, i.e., the user explicitly tags the message;
{the tags are not added explicitly and the text in the subject ¯eld is only
intended for the recipient's understanding.
in the ¯rst two cases case there are explicit tags (added by the system or by
users), which makes the mining procedure trivial. the latter situation means
that there is no tagging standard and that the mining algorithm must ¯gure
out the relations between each message and process cases/tasks. although we
consider the ¯rst two scenarios more realistic, we will also show how our tool
can deal with the latter situation.
tags in e-mail messages automatic annotation of the e-mail messages by
the corporative system can be useful under following conditions:
9{e-mail exchange functionality of the system is used to send messages, which
are relevant to the business process. for example, many groupware systems
use e-mail as a transport layer.
{the system operates with such process-related notions as \case", \task" and
\event".
{the system does not contain explicit process description (otherwise mining
is less useful since it can only be used for conformance testing and delta
analysis).
{the system does not generate process log directly (otherwise it is easier to
mine the process description from the process log).
the current version of the emailanalyzer tool assumes that the messages related
to the business process should be tagged in following way:
{the messages are linked to process cases: the case is determined by the
contact person linked to the message (on view/options tab). this person
represents a customer linked to the case.
{the messages are linked to tasks: the task name and phase are explicitly
included into the subject in brackets \ {}" and divided by the \ ^" symbol.
phases of each task are the same as event types in the log de¯nition (from
\schedule" to \complete").
if we restrict our mail clients to ms outlook there is another option: ms outlook
allows adding user-de¯ned ¯elds to the messages. in this case tags can be added
as such user-de¯ned ¯elds, which should not be visible in the subject line. such
a solution is probably more convenient.
e-mail analyzer process log building functionality as indicated before,
the tags added to messages can be useful only in case when the organization
uses a special groupware system, which should annotate the messages with all
necessary process-related information automatically. if there is no such system
and the users have to edit and send messages manually, then it is inconvenient
for them to write all the message tags according to the strict rules described
above. parts of process-related information can be contained in any part of the
message description. therefore it was decided to add to the functionality of
emailanalyzer the possibility to choose among di®erent settings. these settings
will determine how process-related information should be extracted from the e-
mail log. each message represents one audit trail entry in the process log. the
process related information includes the description of (1) the case, (2) the task
and (3) the event related to the message. on the process log options screen
of emailanalyzer, the user can specify various options regarding each of these
three categories.
first of all, the user can specify how to extract the casefrom the log. several
options are possible:
{ linked contact (default):
the default option means that the case describes the customer and is spec-
i¯ed by the contact person linked to the message.
10{ message sender :
this option means that the case is represented by a person who sent the
message.
{ message recipient :
this option speci¯es that the case, to which the message belongs, corresponds
to one of the message recipients.
{ subject :
the subject line is used as the description of the case. if only a part of the
subject is used as a case description then the user can check the °ag \partial
coincidence allowed".
{ any :
sometimes the case is represented by the customer, which is referred in the
inter-organizational communication in the subject line. the option \any"
means that the case name should be searched both in the sender/recipients
list and the subject line.
{ single case :
selecting this option assumes that all messages in the log are related to one
single case.
{ thread :
thread of messages represents an initial message together with all replies to
it. this option assumes that the case is described by the subject line of the
message and includes all messages with this subject together with all replies.
after selecting one of the options listed, the user can see the list of possible case
names. the user can then edit the list by adding/deleting new case identi¯ers
thus e®ectively ¯ltering the log.
second, there are options to derive the identity of the task. it is assumed
that the task name is included into the message subject. it can be stored in a
standardized or arbitrary way. the user has two options:
{ default (i.e., between {and}):
the task name is included into the subject line according to the standard
format described in the previous section (in the subject line between \ {"
and \ }" brackets together with the event type);
{ anywhere in the subject :
there is no standard format of the subject line. the task name can be either
the whole subject line or its part. as for the cases, this is determined by the
\partial coincidence allowed" °ag.
similar to cases, the user can edit the list of possible task names manually.
third, there are options to derive the event type. by default emailanalyzer
considers seven event types used by the prom framework and de¯ned in the
mxml format [3, 10]: \schedule", \start", \complete", \suspend", \resume",
\withdraw" and \abort". the name of the event type should be mentioned in
the message subject either according to a standardized syntax described above
or in any place of the subject line. it is possible that the organization considers
another set of event types (e.g. \start" and \¯nish"). in this case the set of event
11types used by the organization must be mapped into the standard set of event
types described in [3]. emailanalyzer allows performing the mapping using the
alias names of the standard event types. alias name represents the name, under
which the event type will appear in the e-mail log. the user can change this alias
name. for example, (s)he can change the name of the \complete" event type to
\¯nish". after that if the tool will ¯nd the word \¯nish" in the message subject
it will create an audit trail entry with the event type \complete". the user can
also add his own event types. they will have the standard name \unknown". the
user has following options considering the source of the event type description
in the message:
{ default (i.e., between {and}):
as for the tasks, this means that event type name is stored according to the
standard described above (in the message subject).
{ anywhere in the subject :
event type can appear in any place in the subject line
{ one event type (i.e., \normal"):
in this case each message represents an audit trail entry with the type \un-
known". the attribute \unknowntype" will be set to \normal".
checkbox \try to insert missing events" is applicable only if the standard set
of events is used. in this case the system tries to insert audit trail entries to
the process log so that each task in the process log will have complete set of
corresponding audit trail entries. completeness in our case means that each
task has corresponding set of events, which lead from the state \new" to one of
the terminal states \completed" or \terminated" [31].
after all the options determining the mining process are speci¯ed, the main
translation algorithm to translate the e-mail log into the process log can be
executed. the algorithm is as follows:
{find all tagged messages in the e-mail log according to the user's settings.
{distribute messages between cases.
{for each case do:
²sort messages by the delivery date;
²create for each message one audittrailentry;
²save the case and its audittrailentry records.
the algorithm for adding missing events is activated after the main process
log building algorithm. its steps are as follows:
{generate the process log from the e-mail log.
{for each task do:
²select all events with the standard types (not \unknown");
²sort the events by time;
²for each event check the following possibilities. if the event is not an
initial event (\schedule") and is not a direct successor of the previous
event (e.g. \complete" is a direct successor of \start" but not \schedule"
or \suspend") then add to the log a new event with following properties.
12the type should be equal to the predecessor of current event type. the
timestamp should match the current event time minus 1 minute (note
that this is an arbitrary time). if the event is not a ¯nal event (\abort",
\terminate" or \complete") and is not a direct predecessor of the next
event then add to the log a new event with following properties. the type
should be equal to the successor of current event type. the timestamp
should match the current event time plus 1 minute (again we choose an
arbitrary time).
by default the \successful" path (\scheduled - start - complete") is considered
as standard. it means that, if possible, the events from this path are selected as
direct predecessors/successors. for example, the event \complete" is considered
as a default successor for the events \resume" (and not the events \abort" or
\suspend", which are also possible in the state \active").
process log building example now it is time to return to the e-mail mes-
sages shown in table 1 and try to derive a process model using prom. to build
the process log from our example e-mail log we have to select following options
on the \process log setup" page:
{the case source is \any ¯eld" and the \partial coincidence allowed" °ag is
set. the list of case names consists of the names of the companies. this way
cases are detected by the company involved.
{the task source is \anywhere in the subject" and the \partial coincidence
allowed" °ag is set. the list of keywords for task names consists of \pro-
posal", \contract", \condition", \cancel" and \payment". figure 4 shows
how to set these parameters.
{the event source is \one event type", i.e., there are no di®erent event types
distinguished.
figure 5 shows the process model that we are trying to discover. as indicated
before, tasks \evaluation" and \quality control" are assumed to be invisible,
i.e., these tasks occur but may not result in the sending of e-mail messages. the
other tasks are identi¯ed by the keywords \proposal", \contract", \condition",
\cancel" and \payment" as indicated in figure 5.
using these settings it is possible to generate a process log. since emailan-
alyzer is embedded in prom the resulting process log can be stored but also
analyzed using one of the many mining algorithms present in prom. in the re-
mainder of this section, we show of the results we obtained by applying the
various plug-ins in prom.
the®-algorithm [4] was one of the ¯rst process mining techniques able to
deal with processes exhibiting concurrency. prom provides a plug-in for this
algorithm and if we apply it to the log generated by emailanalyzer we obtain
the model shown in figure 6. the ®-algorithm produces a petri net re°ecting
only the control-°ow in the underlying process. note that the tasks \evaluation"
and \quality control" are missing in the petri net. this makes sense because
13fig. 4. a screenshot of the interface used to select the options when extracting pro-
cesses from e-mail logs.
start
cancelsigning
the
contractproposal
from
supplierevaluation
cancelquality
controltransfer
payment  to
the supplierchange the
conditions of
the contract
endcancel
fig. 5. the tasks \evaluation" and \quality control" are invisible and the other tasks
are characterized by the keyword indicated.
14fig. 6. a process model built on the basis of an e-mail log using the ®plug-in.
these are not recorded. moreover, instead of three cancellation tasks there is
just a single \cancel". this also makes sense since emailanalyzer looks for the
keyword \cancel". hence it cannot distinguish between the three instances of
\cancel" shown in figure 5. the ®-algorithm has problems dealing with duplicate
tasks and as a result the model shown in figure 6 is not completely accurate.
fortunately, prom o®ers more powerful mining techniques as shown below.
the multi-phase mining plug-in of prom is based on so-called instance graphs
[32]. in contrast to the ®-algorithm it does not try to discover the process model
in a single step. instead, it ¯rst builds a model (i.e., an instance graph) for
every case and only then aggregates these instance graph into an aggregated
instance graph. the result can be visualized in terms of an event-driven process
chain (epc) or a petri net. figure 7 shows the result in terms of an epc. the
left window shows the entire process while the right window zooms in on the
interesting part. an epc consists of three types of nodes:
functions
the basic building blocks are functions. a function corresponds to an activity
(task, process step) which needs to be executed.
events
events describe the situation before and/or after a function is executed.
functions are linked by events.
connectors
connectors can be used to connect functions and events. this way, the °ow
of control is speci¯ed. there are three types of connectors: ^(and), £(xor)
and_(or).
in figure 7 all connectors are of type £, i.e., an xor-join or an xor-split. a
close observation shows that figure 7 indeed captures the original process model
15fig. 7. a process model built using the multi-phase plug-in.
16after abstracting from \evaluation" and \quality control", and joining the three
cancellation tasks into one. figure 7 shows that a case can be cancelled at three
points in the process. a payment follows after the initial contracting step of after
changing the conditions.
fig. 8. a process model built using the genetic miner plug-in.
as will be discussed in more detail in section 3.6, logs contain di®erent
types of noise. the fact that for one case a certain path was followed does not
imply that this should be considered as part of the process model. to tackle
these problems, prom o®ers alternative process mining methods. for example,
the genetic miner plug-in of prom uses a genetic algorithm to discover process
models. figure 8 shows the result in terms of a petri net. the model is behavioral
equivalent to the original process model after abstracting from \evaluation"
and \quality control", and joining the three cancellation tasks into one. if we
compare figure 5 and figure 8 we see that the invisible tasks have been removed
but that \routing tasks" have been added by the algorithm to re°ect choices. for
example, after executing task \condition" there are three transitions enabled:
\t3t3" to again renegotiate the contract, \t3t2" to do the payment, and \t3t2"
to cancel after renegotiation. this way the genetic algorithm avoids the problem
the®-algorithm could not address (cf. figure 6).
figures 6, 7, and 8 shows only a small part of the full functionality of the
prom framework. the three plug-ins shown are part of a set of more than 30 plug-
ins involving mining algorithms, analysis routines, conversion functions, social
network analyzers, conformance checkers, and ltl checkers. just to illustrate
a bit of this functionality, we show two analysis plug-ins and the ltl-checker
plug-in.
figures 9 shows two types analysis. the left-hand part of the window shows
the result of applying petri-net based analysis techniques to the model generated
by the ®-algorithm (i.e., figure 6). the coverability graph shows that a token
17fig. 9. the petri net analysis plug-in is able to ¯nd the error in figure 6 while the
epc in figure 7 can be shown to be correct by reduction.
may get stuck if task \payment" is executed. the right-hand part of the window
shows the result of analyzing the epc in figure 7 (i.e., the result of multi-
phase mining). as shown, the epc can be reduced to the empty process, thus
demonstrating that it is sound [33].
deviations from the \normal process" may be desirable but may also point
to ine±ciencies or even fraud. new legislation such as the sarbanes-oxley (sox)
act [11] and increased emphasis on corporate governance has triggered the need
for improved auditing systems [12]. to support this we have developed the ltl
checker plug-in for prom [34]. figure 10 shows a screenshot while checking the
4-eyes principle . this principle says that although authorized to execute two
activities, a person is not allowed to execute both activities for the same case.
for example, a manager may submit a request (e.g., to purchase equipment, to
make a trip, or to work overtime) and (s)he may also approve requests. however,
it may be desirable to apply the 4-eyes principle implying that the manager is
not allowed to approve his own request. if there is an event log recoding the
events \submit request" and \approve request", the 4-eyes principle can be ver-
i¯ed easily. if we try to apply the 4-eyes principle to the running example, we
could argue that the same person is not allowed to handle \contract" and \con-
ditions". the left-hand part of the window shown in figure 10 shows the form
where one can select a desired or undesired property and set its parameters. the
right-hand part of the window shows the result. the property does not hold for
two of the six cases in our example. as shown each of the cases can be inspected
further. note that the ltl checker is based on linear temporal logic (ltl)
18fig. 10. the ltl-checker plug-in is able to check for various properties, e.g., detection
of fraud.
[35, 36] and tailored towards event logs holding information on activities, cases
(i.e., process instances), timestamps, originators (the person or resource execut-
ing the activity), and related data. hence it can be used to specify properties
much more advanced than the 4-eyes principle.
3.5 user involvement diagrams
when considering information about existing business process it can be useful
to study the links between each user and the tasks and cases in which (s)he is in-
volved. these links may help to make conclusions about the workload of each user
and to redistribute the functions between employees if necessary. emailanalyzer
o®ers two user involvement diagrams to visualize these links. the task-person
diagram shows the relations between tasks and users. if a user executes a given
task frequently, there is a strong link between both. similarly the case-person
diagram displays the relationships between cases and users.
recall that emailanalyzer translates the e-mail log into the process log as-
suming that one e-mail message corresponds to a single event. several events
may refer to the same task. we assume that all senders and recipients of all
messages related to a task are in some way involved in this task. the task-
person diagram shows the links between each employee and the tasks, in which
(s)he was involved. the diagram represents a graph, which has nodes of two
types: employees and tasks. each arc connects one person with one task. the
weight of each arc is proportional to the number of times a certain employee was
involved in a certain task. all weights are normalized by dividing them by the
19maximal weight in the whole graph. when displaying the diagram the user has
an option to display for each employee only the arcs with the maximal weight.
this may help to make the diagram more readable by showing for each employee
only the tasks, in which (s)he was most involved.
fig. 11. two user involvement diagrams: the task-person diagram (left) and the case-
person diagram (right).
the task-person diagram based on the process log of the running example is
shown in figure 11 (left). note that it is possible to see which tasks involve ex-
ternal communication and which are performed completely inside the company.
with regard to the employee's occupation we can distinguish the cluster linked
to the \payment" task only. this allows us to make conclusions about di®erent
roles of the performers of these tasks.
a similar diagram can be built for the cases, as shown in figure 11 (right).
the diagram shows how each employee was involved in each process instance
re°ected in the e-mail log. arcs in this diagram show the links between each
employee and cases. like in the previous case the weights are proportional to
the number of messages related to the case and the employee simultaneously.
203.6 issues when mining the process from the process log
several algorithms have been proposed for process mining. many of these algo-
rithms cannot deal with concurrency. (the ®-algorithm [4] used to construct fig-
ure 6 was among the ¯rst to allow for the mining of concurrent processes.) more-
over, existing approaches for mining the process perspective [3{9] have problems
dealing with issues such as duplicate activities, hidden activities, non-free-choice
constructs, noise, and incompleteness. the problem with duplicate activities oc-
curs when the same activity can occur at multiple places in the process. this is
a problem because it is no longer clear to which activity some event refers. the
problem with hidden activities is that essential routing decisions are not logged
but impact the routing of cases. non-free-choice constructs are problematic be-
cause it is not possible to separate choice from synchronization. we consider
two sources of noise : (1) incorrectly logged events (i.e., the log does not re°ect
reality) or (2) exceptions (i.e., sequences of events corresponding to \abnormal
behavior"). clearly noise is di±cult to handle. the problem of incompleteness
is that for many processes it is not realistic to assume that all possible behavior
is contained in the log. for processes with many alternative routes and paral-
lelism, the number of possible event traces is typically exponential in the number
of activities, e.g., a process with 10 binary choices in a sequence will have 210(=
1024) possible event sequences and a process with 10 activities in parallel will
have even 10!(= 3628800) possible event sequences.
real-life logs contain noise (e.g., exceptions or incorrectly logged events)
and are typically incomplete (i.e., the event logs contain only a fragment of
all possible behaviors). this is highly relevant for the work presented in this
report because we can expect e-mail logs to be noisy and incomplete. therefore,
we developed two ways to address the problem: (1) heuristics and (2) genetic
algorithms . the heuristic approach does not only consider binary relations based
on direct succession. it allows for thresholds which may incorporate a variety of
information, e.g., a task not being the initial or ¯nal one should have at least one
input and one output. see [9] for more details. genetic algorithms for process
mining use a global search strategy; because the quality or ¯tness of a candidate
model is calculated by comparing the process model with all traces in the event
log the search process takes place at a global level. these algorithms start with an
initial population of individuals (in this case process models). populations evolve
by selecting the ¯ttest individuals and generating new individuals using genetic
operators such as crossover (combining parts of two of more individuals) and
mutation (random modi¯cation of an individual). see [37] for more information
on our genetic mining algorithm implemented as a plug-in in prom.
the discussion on current process mining techniques shows that the mining
of e-mail messages can bene¯t from state-of-the-art approaches for dealing with
noise, incompleteness and other issues.
214 related work
the idea of applying process mining in the context of work°ow management
was ¯rst introduced in [5]. cook and wolf have investigated similar issues in
the context of software engineering processes using di®erent approaches [6]. it is
impossible to point out the many process mining algorithms proposed in litera-
ture. however, we would like to mention the ®-algorithm [4] which served as a
starting point for the prom framework. for more information on process mining
we refer to a special issue of computers in industry on process mining [38] and
a survey paper [3].
within the cscw domain there has been a constant struggle between tech-
nological views and sociological views. a nice illustration is the so-called \winograd-
suchman debate" in the early nineties [39{42]. winograd and flores advocated
the use of a system called the \coordinator", a system based on speech act
theory (i.e., the language/action perspective) in-between e-mail and work°ow
technology [39, 42]. people like suchman and others argued that such systems
are undesirable as they \carry an agenda of discipline and control over an or-
ganization's members" [41]. clearly, process mining adds another dimension to
this discussion. the goal of process mining is not to control people. however, it
can be used to monitor and analyze the behavior of people and organizations.
clearly, such technology triggers ethical questions. however, we consider such
questions are beyond the scope of this report. instead, we focused on the appli-
cability of process mining and social network analysis (sna) in the presence
of e-mail-based logs.
since the early work of moreno [27], sociometry, and sna in particular,
have been active research domains. there is a vast amount of textbooks, re-
search papers, and tools available in this domain [21{30]. there have been many
studies analyzing organizational activity based on insights from social network
analysis. however, some of these studies typically have an ad-hoc character and
sociograms are typically constructed based on questionnaires rather than using a
structured and automated approach as described in this report. more structured
approaches are often based on the analysis of e-mail interaction and additional
electronic sources. several studies have generated sociograms from email logs
in organization [16{20] to analyze the communication structure. such studies
have resulted in the identi¯cation of relevant, recurrent aspects of interaction in
organizational contexts [43, 18]. however, these studies are unable to relate the
derived social networks to a particular work°ow process, as the analyzed data
does not reveal to what activity or case it applies.
most tools in the sna domain take sociograms as input. prom o®ers two
plug-ins that generate sociograms as output: the tool reported in this report and
minson [31] a tool to extract sociograms from event logs rather than e-mails.
the tools most related to the work reported in this report are the tools used
to discover social networks from the e-mail tra±c:
{buddygraph (http://www.buddygraph.com/),
{metasight (http://www.metasight.co.uk),
22{emailnet (http://emailcommunity.net/).
emailnet tool is a nice example of a tool which performs social networks analysis
based on the e-mail logs. while the emailnet tool focuses on the social aspects
of e-mail communication and noton deriving process information, it implements
several ideas that can be valuable for the future development of prom in general
and emailanalyzer in particular, e.g., coding messages to ensure privacy and
retrieving of the e-mail logs from the e-mail server instead of the e-mail clients.
5 conclusions
this report presented a tool, named emailanalyzer, to mine process logs from e-
mail logs. the e-mail log is extracted from the user's inbox folders and translated
into the process log according to the settings speci¯ed by the user. the resulting
process log is saved in a standard format, which can be handled by a variety
of process mining tools such as the ones implemented in the context of the
prom framework. to illustrate the tool and the ideas behind it, we used a small
example to demonstrate that it is really possible to discover process models from
e-mail messages. in the example, we assumed by explicit tags. we realize that
with the current tool such a scenario is not realistic. from a practical point of
view, we consider the explicit tagging of messages vital. many systems generate
e-mail messages than can easily provide tags. moreover, users (both senders and
recipients) can be asked to tag messages or con¯rm automatically generated
tags.1
this report and the current version of emailanalyzer should be considered as
a ¯rst step towards fully-automated process discovery from e-mail messages. we
plan to extend the functionality of the tool in various directions. for example,
a more convenient way of implementing more advanced functionality may be to
build a system that directly cooperates with the e-mail server (e.g. microsoft
exchange). the body of the message should be included into the analysis. in
order to cope with the privacy problem, which arrives in this case, a coding
mechanism should be implemented so that the content of analyzed messages can
be accessed only by the mining algorithm and not by human users. currently
the mining mechanism implements simple keyword-based search to ¯nd the links
between business process cases and tasks and e-mail messages. the mechanism
itself should be improved by adding text mining techniques and natural language
processing heuristics to increase the quality of the mining.
acknowledgement
the authors would like to thank boudewijn van dongen for assisting in embed-
ding the emailanalyzer plug-in in the prom framework. we would also like to
1it is interesting to note that the \coordinator" system of winograd and flores in
the eighties already used explicit tagging of e-mail messages [39, 42]. however, these
tags were based on speech act theory (i.e., the language/action perspective) rather
than process-related events. moreover, they did not propose to use this for process
mining.
23thank him and the rest of the \process mining team", in particular ton weijters,
boudewijn van dongen, minseok song, eric verbeek, anne rozinat, christian
gnter, and peter van den brand, for their on-going work on process mining
techniques.
references
1. w.m.p. van der aalst and k.m. van hee. work°ow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
2. m. dumas, w.m.p. van der aalst, and a.h.m. ter hofstede. process-aware infor-
mation systems: bridging people and software through process technology . wiley
& sons, 2005.
3. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. work°ow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237{267, 2003.
4. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
5. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
°ow logs. in sixth international conference on extending database technology ,
pages 469{483, 1998.
6. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215{249, 1998.
7. j. herbst. a machine learning approach to work°ow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183{194. springer-verlag, berlin, 2000.
8. a.k.a. de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. work°ow
mining: current status and future directions. in r. meersman, z. tari, and d.c.
schmidt, editors, on the move to meaningful internet systems 2003: coopis,
doa, and odbase , volume 2888 of lecture notes in computer science , pages
389{406. springer-verlag, berlin, 2003.
9. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering work°ow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.
10. b.f. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters,
and w.m.p. van der aalst. the prom framework: a new era in process mining
tool support. in g. ciardo and p. darondeau, editors, application and theory
of petri nets 2005 , volume 3536 of lecture notes in computer science , pages
444{454. springer-verlag, berlin, 2005.
11. p. sarbanes and g. oxley et. al. sarbanes-oxley act of 2002, 2002.
12. t. ho®man. sarbanes-oxley sparks forensics apps interest: vendors o®er moni-
toring tools to help identify incidents of financial fraud. computerworld , 38:14{
14, 2004.
13. c.a. ellis. an evaluation framework for collaborative systems. technical report,
cu-cs-901-00, university of colorado, department of computer science, boulder,
usa, 2000.
14. c.a. ellis, s.j. gibbs, and g. rein. groupware: some issues and experiences.
communications of the acm , 34(1):38{58, 1991.
2415. c.a. ellis and g. nutt. work°ow: the process spectrum. in a. sheth, editor,
proceedings of the nsf workshop on work°ow and process automation in infor-
mation systems , pages 140{145, athens, georgia, may 1996.
16. s. farnham, s.u. kelly, w. portnoy, and j.l.k. schwartz. wallop: designing
social software for co-located social networks. in proceedings of the 37th annual
hawaii international conference on system sciences (hicss'04) . ieee computer
society press, los alamitos, california, 2004.
17. s. farnham, w. portnoy, and a. turski. using email mailing lists to approximate
and explore corporate social networks. in d.w. mcdonald, s. farnham, and
d. fisher, editors, proceedings of the cscw'04 workshop on social networks ,
2004.
18. d. fisher and p. dourish. social and temporal structures in everyday collabo-
ration. in e. dykstra-erickson and m. tscheligi, editors, proceedings of the 2004
conference on human factors in computing systems (chi2004) , pages 551{558,
new york, ny, usa, 2004. acm press.
19. b.a. nardi, s. whittaker, e. isaacs, m. creech, j. johnson, and j. hainsworth.
integrating communication and information through contactmap. communica-
tions of the acm , 45(2):89{95, 2002.
20. h. ogata, y. yano, n. furugori, and q. jin. computer supported social net-
working for augmenting cooperation. computer supported cooperative work ,
10(2):189{209, 2001.
21. a.a. bavelas. a mathematical model for group structures. human organization ,
7:16{30, 1948.
22. h.r. bernard, p.d. killworth, c. mccarty, g.a. shelley, and s. robinson. com-
paring four di®erent methods for measuring personal social networks. social
networks , 12:179{216, 1990.
23. r.s. burt and m. minor. applied network analysis: a methodological introduction .
sage, newbury park ca, 1983.
24. m. feldman. electronic mail and weak ties in organizations. o±ce: technology
and people , 3:83{101, 1987.
25. l.c. freeman. a set of measures of centrality based on betweenness. sociometry ,
40:35{41, 1977.
26. l.c. freeman. centrality in social networks: conceptual clari¯cation. social
networks , 1:215{239, 1979.
27. j.l. moreno. who shall survive? nervous and mental disease publishing com-
pany, washington, dc, 1934.
28. h. nemati and c.d. barko. organizational data mining: leveraging enterprise
data resources for optimal performance . idea group publishing, hershey, pa,
usa, 2003.
29. j. scott. social network analysis . sage, newbury park ca, 1992.
30. s. wasserman and k. faust. social network analysis: methods and applications .
cambridge university press, cambridge, 1994.
31. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in j. desel, b. pernici, and m. weske, editors,
international conference on business process management (bpm 2004) , volume
3080 of lecture notes in computer science , pages 244{260. springer-verlag, berlin,
2004.
32. b.f. van dongen and w.m.p. van der aalst. multi-phase process mining: building
instance graphs. in p. atzeni, w. chu, h. lu, s. zhou, and t.w. ling, editors, in-
ternational conference on conceptual modeling (er 2004) , volume 3288 of lecture
notes in computer science , pages 362{376. springer-verlag, berlin, 2004.
2533. w.m.p. van der aalst. the application of petri nets to work°ow management.
the journal of circuits, systems and computers , 8(1):21{66, 1998.
34. w.m.p. van der aalst, h.t. de beer, and b.f. van dongen. process mining and
veri¯cation of properties: an approach based on temporal logic. beta working
paper series, wp 136, eindhoven university of technology, eindhoven, 2005.
35. z. manna and a. pnueli. the temporal logic of reactive and concurrent systems:
speci¯cation . springer-verlag, new york, 1991.
36. a. pnueli. the temporal logic of programs. in proceedings of the 18th ieee
annual symposium on the foundations of computer science , pages 46{57. ieee
computer society press, providence, 1977.
37. a.k.a. de medeiros, a.j.m.m. weijters, and w.m.p. van der aalst. using ge-
netic algorithms to mine process models: representation, operators and results.
beta working paper series, wp 124, eindhoven university of technology, eind-
hoven, 2004.
38. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining , special
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
39. t. winograd and f. flores. understanding computers and cognition: a new
foundation for design . ablex, norwood, 1986.
40. t.w. malone. commentary on suchman article and winograd response. computer
supported cooperative work , 3(1):37{38, 1995.
41. l. suchman. do categories have politics? the language /action perspective
reconsidered. computer supported cooperative work , 2(3):177{190, 1994.
42. t. winograd. categories, disciplines, and social coordination. computer sup-
ported cooperative work , 2(3):191{197, 1994.
43. j. begole, j. tang, r. smith, and n. yankelovich. work rhythms: analyzing vi-
sualizations of awareness histories of distributed groups. in c. neuwirth and
t. rodden, editors, proceedings of the 2002 acm conference on computer sup-
ported cooperative work , pages 334{343, new york, ny, usa, 2002. acm press.
26