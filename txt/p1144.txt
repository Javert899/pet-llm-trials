multi-dimensional performance analysis and
monitoring using integrated performance spectra
vadim denisov
eindhoven university of technology
the netherlands
email: v.denisov@tue.nldirk fahland
eindhoven university of technology
the netherlands
email: d.fahland@tue.nlwil m.p. van der aalst
department of computer science,
rwth aachen, germany,
email: wvdaalst@pads.rwth-aachen.de
abstract ‚Äîin process mining, basic descriptive statistics over
observed events of event logs or streams, projected onto a process
model, are typically used for performance analysis. the so-called
performance spectrum is used for the Ô¨Åne-grained description of
process performance over time, additionally revealing phenomena
related to the behavior of multiple cases together. the perfor-
mance spectrum computed from traces aligned with a process
model allows performance analysis of processes with concurrency.
however, performance spectra are used to describe performance
only along the case level, leaving performance analysis and
monitoring of other process dimensions out of scope. this paper
presents an approach and tool combining a synchronous proclet
system with a performance spectrum for multi-dimensional
performance real-time monitoring and post-mortem analysis.
while the tool is a proof-of-concept implementation, designed
for analysis of the control-Ô¨Çow, resource and queue dimensions
of logistic processes, the presented concepts are general.
i. introduction
performance analysis is an important element in process
management relying on precise knowledge about actual process
behavior and performance for enabling improvements [1], and
for detecting and mitigating performance deviations in the
real-time settings [2]. existing techniques project aggregated
performance diagnostics, based on descriptive statistics over
observed events of event logs or streams, onto a process model
visualization [3]. the common problem of those techniques
is the inability to reveal phenomena related to the behavior
of multiple cases together, such as overtaking (when a case
bypasses cases that started earlier), batching ,queueing and
so on [4]. as a result, causations and correlations between
instances of those phenomena cannot be revealed and analyzed,
e.g., a longer than usual average duration of a particular step
of a process cannot be explained by averages or assuming
independence of cases.
to address these limitations, the so-called performance
spectrum (ps) was introduced in our prior work [2], [5], and
implemented in the performance spectrum miner (psm) [6].
a tool integrating the ps with a petri net model, capable of
handling concurrent processes, is presented in [4]. however,
both techniques [4], [6] visualize performance only along
the case level. while this helps identifying process steps and
moments in time with performance problems, the analyst cannot
investigate the environment that causes performance problems.
for example, a material handling system (mhs), such as an
airport baggage handling system (bhs), can be considered asanetwork of queues and resources connected according to the
system physical layout [7]. the behavior of a case, e.g., a bag
(control-Ô¨Çow), queues, and resources lie in di erent process
dimensions that are usually studied separately. as a result, such
a separate analysis does not reveal how, for example, resource
availability a ects queue waiting times, and so on. to study
their interplay, the analyst has to understand how the control-
Ô¨Çow, queue, and resource dimensions are interconnected. for
that, an integrated analysis ofallthe dimensions is required
(req1 ). in turn, this requires a process model that describes the
behavior of all the dimensions together, so that the performance
visualization along all dimensions over time is presented in an
integrated context. industrial adoption requires simple models
that describe process dynamics using domain concepts. at the
same time, process analysts may require more precise formal
models, so a model should be visualized in two forms: (1)
as a domain-speciÔ¨Åc visualization for domain experts, and
(2) as a formal model for process analysts ( req2 ). further,
understanding process performance problems has two use
cases: (1) post-mortem analysis of o ine data, e.g., for root-
cause analysis or for developing predictive models, (2) online
visualization to let operators observe performance problems at
run-time in a detailed manner. while the former is addressed
in [2], [4]‚Äì[6], [8], the latter is not, so visualization of the
performance description over time in real-time is required
(req3 ).
we present a tool1that allows an integrated analysis and
visualization of performance problems along the dimensions of
control-Ô¨Çow, queues, and resources for the domain of mhss.
it is a proof-of-concept implementation, which can use a real-
time event stream from the provided bhs simulation model
or a real mhs. we address the problem of multi-dimensional
performance analysis using a synchronous proclet system [9]
called a pqr-system [7] that describes the process- (p-), queue
(q-) and resource (r-) dimensions of an mhs. the tool allows
to study performance spectra (psa) of those dimensions in the
psm, using a gui of the pqr-system visualization for selecting
a required ps fragment of the required dimension to be shown.
we mitigate the problem of understanding a process model by
aligning its layout with material flow diagrams (mfds), the
1the source code, video and further documentation available on https:
//github.com /processmining-in-logistics /psm/tree/pqr
copyright ¬© 2020 for this paper by its authors. use permitted under creative commons license attribution 4.0 international (cc by 4.0).
visualization widely used in the mhs domain, and by hiding
implementation details when needed. we support real-time
monitoring of the system performance by (1) token animation
over the domain speciÔ¨Åc system visualization, similar to token
animation in most process mining tools, and (2) through the
ps being updated in real-time to show how the ps-based
monitoring allows faster and more accurate analysis. finally,
to illustrate our concept in action, we show how a multi-
dimensional analysis with psa allows identifying root causes
of performance outliers.
the remainder is organized as follows. section ii introduces
pqr-systems and psa. section iii explains how the tool
satisÔ¨Åes the requirements of this section, and section iv
discusses evaluation and concludes the paper.
ii. pqr-s ystems and performance spectra
in mhss, materials (e.g., bags in bhss) are typically moved
byconveyors . in fig. 1(a) the conveyor moves bags from
location ato location b, the system tracks bags at those
locations through sensors that detect the front and back sides
of each bag. we model mhss as a synchronous proclet system
called a pqr-system, where the only p-proclet models the
conveyor layout, q-proclets model conveyors as queues, and
r-proclets model resources. the life-cycle transitions start and
complete model how the front and back sides of a bag pass a
location. a pqr-system example is shown in fig. 1(b). the
p-proclet (shown in red) shows the logical layout of the system
of fig. 1(a). the q-proclet a:b(shown in blue) models bag
transportation as a fifo queue with the minimal waiting time
twq. the r-proclets a,b(shown in green) model resources
handling bags at the conveyor beginning (location a) and end
(location b) as a single server (r-proclet of the resource b
is not shown to save space). each resource has the minimal
service time tsrrequired for handling a case (bag), and the
minimal waiting time twrfor becoming ready for handling the
next case. the channels shown by dashed lines deÔ¨Åne how
transition occurrences of di erent proclets synchronize. as a
result, each event is a part of three traces: of a case, of a queue,
and of a resource participating in the same step.
the ps is computed for segments . a segment is a pair of
activities ( x;y) where ydirectly follows x. it describes a step
from activity xto activity y, e.g., a bag moving from location
xtoy. each case advancing from activity xtoygenerates an
occurrence of the segment ( x;y), which is characterized by two
timestamps ( tx;ty). in fig. 1(c), the ps of the pqr-system of
fig. 1(b) is shown. its top segment ( as;bs) contains two segment
occurrences of cases pid1and pid2with timestamps ( t1;t2)
and ( t3;t4) respectively. multiple segments can be composed
into the detailed ps [5]. fig. 1(c) additionally shows the ps
for segments of the queue a:band resource a. during an
occurrence of ( a;b) in the p-proclet for case pid1, the resource
ahandles it (occurrence o1
1), then waits (occurrence o2
1) for the
next case. as soon as the case is handled by a, it is enqueued
into the queue a:b, where it waits (occurrence o5
1) for handling
by the resource b. case pid2 is handled similarly (occurrences
o3
2,o4
2ando6
2correspondingly).
  
    
 
        
         
                
           
                      
                           
                  
                        
                   
     
                              
    
      
      
        
a
b(a) (b) (c)as
bs
starta
completea
startacompletea
enqa:b
deqa:bt1
t2
timepid1 pid2t3
t4
o11
o12o23
o24
o15o26busy idle queuefig. 1. the mhs conveyor (a), corresponding pqr-system (b) and ps (c).
iii. m ulti-dimensional analysis and monitoring
this section is organized as follows. we Ô¨Årst introduce the
main components of the tool. then we explain how to interpret
performance spectra of p-, q- and r-dimensions of a pqr-
system, illustrate how we adapt the visualization of the process
model to needs of domain experts, and consider pros and cons
of performance analysis and monitoring using classical token
animation versus visualization of psa. finally, we formulate a
brief guideline for performance analysis using an environment
with the integrated ps and process model that implements the
requirements of section i.
a. tool components
our tool consists of the pqr-system , the psm , and the
optional bhs simulation model of a bhs (fig. 2). the pqr-
system visualizes the process model and provides a gui
for Ô¨Åltering segments of di erent dimensions visualized by
the psm. the simulation model provides a gui to control
simulation scenarios and their animation. it sends each segment
occurrence to the psm as a datagram to simulate real-time
monitoring of remote systems. in practice, the data for the tool
can also be streamed from a real system.
b. performance spectra of multiple dimensions
as we discussed in section i, pqr-systems describe p-,
q- and r-dimensions. events, generated by the simulation
model, have attributes that carry identiÔ¨Åers for corresponding
case notions and transition labels, so the psm can assemble
traces per case (bag), queue, and resource for computing and
visualizing their psa, while the pqr-system gui allows to
choose segments to be shown.
fig. 1(b) shows the ps corresponding to ‚Äúnormal‚Äù work,
i.e., without performance outliers. in contrast, fig. 3 shows a
‚Äúslow‚Äù bag (occurrence o1), surrounded by ‚Äúfaster‚Äù bags. in
the model, we see that either resource aorb, or queue a:b
could cause the delay. however, considering the ps of just the
control-Ô¨Çow dimension is insu cient to give a concrete answer.
for that, we also analyse the psa of the q- and r-dimensions.
we start from the ps of resource a. each resource of a
pqr-system deÔ¨Ånes exactly one trace of its start and complete
fig. 2. the bhs simulation model animation frame (a), the pqr-system visualization (b,c), and the ps visualization (d).
(as,bs)
(starta, completea)
(completea, starta)
(enqa:b, deqa:b)o1
o2o3o4
o5o6(startb, completeb)
(completeb, startb)
fig. 3. the ps of the p-, q- and r-dimensions.
activity events. thus, the segment ( starta;completea) represents
the serving (handling) of one bag (state busy), while the
segment ( completea;starta) represents the absence of bags to
handle (state idle). in the ps, we see that the service time
of the delayed case (occurrence o2) is similar to the service
time of the surrounding cases, while the following longer idle
time (occurrence o3) indicates absence of cases to be handled.
we conclude this resource did not cause the delay but had
to wait longer for the next case. similarly, resource bhad
to wait longer (occurrence o6) to start handling the delayed
case (occurrence o5), but the handling itself was not delayed.
further, we analyse the ps of queue a:b. similarly to the
resources, each queue deÔ¨Ånes exactly one trace. a segment of
a queue represents an element (bag) waiting in the queue. in
the ps of queue a:b, we see the longer waiting time for the
delayed bag (occurrence o4), so the queue indeed caused this
delay. that proves also a longer waiting time of b(o6). further
in section iii-e we will show how to identify which system
queue or resource initially caused a performance outlier.
c. adaptive visualisation of pqr-systems
in section i, we highlighted challenges of the use of process
models in process mining tools oriented on diverse users. to
overcome them, we followed two directions: (1) making models
similar to process representations the domain experts are used
to, i.e., mfds, and (2) hiding information that is irrelevant for
the current analysis phase or already known to the analyst.
for that, we aligned the pqr-system layout with the layout
of the system mfd. in our tool, an mfd is present by the
simulation model visualization (fig.2(a)). we repeat this layout
in our p-proclet, thereby making it easily recognizable by
everybody familiar with the mfd. then, we assume that
implementation details of the q- and r-proclets are extremely
useful for getting to know the pqr-system Ô¨Årst, but verbose
afterwards. so we provide options to hide various details and
dimensions.
d. token animation versus performance spectra
as we discussed in section i, token animation over a system
model is widely used for performance analysis and monitoring.our simulation model also uses it to show a current location
of each bag in the system. additionally, it highlights stopped
(blocked) conveyors in red. the psm draws and classiÔ¨Åes
segment occurrences as soon as the corresponding events are
generated by the system, and automatically scrolls the view
towards the latest segment occurrence. as for ongoing segments
the end activities and timestamps are not observed yet, it
estimates them only if there is no choice in the control Ô¨Çow,
i.e., when the end activity is known, using the observed minimal
duration of process segments.
let us Ô¨Årst consider two screenshots of animation in the time
moments t1andt2;t1<t2in fig. 4(a,b). the Ô¨Årst screenshot
shows normal work (no stopped (red) conveyors). in the second
screenshot, the bags are not moving, because the conveyors are
stopped (red). while the states are clear, a painstaking analysis
of dozens or even hundreds of frames in between is required to
understand how andwhy the incident was developing between
those time moments. for processes with many cases executing
simultaneously, and with a wide range of average durations
of dierent process steps, such an approach is hardly feasible.
in contrast, the ps allows to see the performance dynamics
of the system for a time interval of interest at once , speeding
up the detection of outliers during performance analysis or
monitoring. in fig. 4(c) we instantly see the delay in bag
handling in segments s1;s3 s9, and how it propagates through
the segments over time. as soon as an outlier is detected, the
ps analysis can reveal its root causes, as we show next.
e. using integrated performance spectra and pqr-systems
in the tool, the pqr-system and psm are integrated into a
single gui. the pqr-system panel allows adding and removing
segments of the p-, q- and r-dimensions to the ps in the psm,
and the psm allows their ordering needed for a particular
analysis. additionally, the psm allows navigation from a ps
segment back to the corresponding place of the pqr-system.
for example, in fig. 4(c) the psm shows (1) process segments
s2 s9 forming a route from the bhs check-in link in4
toward unit y s0diverting bags to scanner s1, (2) resource
segments s10 and s11 representing the resource of merge unit
in3
7preceding directly diverting unit y s0, and (3) queue
segment s12 representing the queue between those merge and
diverting units. here we provide a basic guideline for the
analysis of performance deviations, focused on blocking (a
delay in performing of a particular process step) and high load
(a higher number of cases for a process segment within a given
time window). the guideline consists of the following steps:
fig. 4. the token animation frames showing normal work (a) and blocking (b), and the blocking propagating in the ps (c).
1.spotting a deviation. for that, we explore the p-proclet ps
visually, e.g., in fig. 4(c) we see longer occurrences (blockings)
in segments s1;s3 s9, shown in orange. we select one of
them, segment s3, for the further analysis.
2.identifying the starting segment. for that, we analyze the ps,
starting from the selected segment, against the direction of the
outlier propagation. concretely, high load typically propagates
forward along the control Ô¨Çow, and blocking propagates
backward . we add each next segment, containing the same
type of deviation around the time of the previously spotted
one, to the chain of segments until the next segment does not
have deviations. the last segment of this chain had caused the
whole chain of outliers. in our example, we have the chain
hs3; : : : ; s9i.s9 is the last segment where the blocking is still
observed, so it caused the whole chain of blocking.
3.analysing the other dimensions. for the starting segment,
we analyze the ps of the q-andr-dimensions . for blocking,
a longer queue waiting time or a longer resource service time
can cause the delay, while for high load a higher number of
cases accumulated, for example, during a recent blocking can
cause a load peak. in our example, we study the r- and q-
dimensions for segment s9. segment s11 (state busy) has a
long pause, i.e., it did not handle cases during the deviation
time. segment s10 (state idle) has a single long occurrence,
i.e., a longer waiting time before the next case. segment s12
(queue) shows multiple delayed traces whose waiting times
are longer than the waiting time of the surrounding traces, so
we conclude this queue caused the delay in s9 and the whole
chain of blocking as well.
4.domain-speciÔ¨Åc explanation . using domain knowledge, the
analysis results can be explain in terms of the underlying
process or system. in our example, conveyor in3
7 y:y s10
could be blocked by a bag, or it could have a technical
malfunction, causing longer waiting times for all cases (bags)
located on it. in turn, the preceding conveyors were gradually
stopped one by one as they could not hand over bags to
the further (already stopped) conveyors. the red arrows in
fig. 4(c) shows the incident development. note, after s5
blocking propagates via merge unit in3
4 xintwodirections:
tos4 and s1.iv . c onclusion
the tool combining psa and mfds was successfully
evaluated at vanderlande for several systems and use cases, still
in the o -line mode. we showed that such an integration allows
a shallow learning curve and faster performance analysis for
domain experts. we expect further evaluations of the combined
pqr-systems and psa for both analysis and monitoring. our
tool still lacks automatic detection of performance patterns [10],
projecting descriptive statistics onto the model [3] and a more
robust approach for estimation of end activities and timestamps
of ongoing segments. the latter is the subject of future work.
acknowledgment
the research leading to these results has received funding
from vanderlande in the project ‚Äúprocess mining in logistics‚Äù.
references
[1]l. maruster and n. r. t. p. van beest, ‚Äúredesigning business processes:
a methodology based on simulation and process mining techniques,‚Äù
knowl. inf. syst. , vol. 21, no. 3, pp. 267‚Äì297, 2009.
[2]v . denisov, d. fahland, and w. m. p. van der aalst, ‚Äúpredictive perfor-
mance monitoring of material handling systems using the performance
spectrum,‚Äù in icpm 2019 . ieee, 2019, pp. 137‚Äì144.
[3]w. m. p. van der aalst, process mining - data science in action, second
edition . springer, 2016.
[4]w. m. p. van der aalst, d. tacke genannt unterberg, v . denisov,
and d. fahland, ‚Äúvisualizing token Ô¨Çows using interactive performance
spectra,‚Äù in petri nets 2020 . cham: springer international publishing,
2020, pp. 369‚Äì380.
[5]v . denisov, d. fahland, and w. m. p. van der aalst, ‚Äúunbiased, Ô¨Åne-
grained description of processes performance from event data,‚Äù in bpm
2018 , ser. lncs, vol. 11080. springer, 2018, pp. 139‚Äì157.
[6]v . denisov, e. belkina, d. fahland, and w. m. p. van der aalst,
‚Äúthe performance spectrum miner: visual analytics for Ô¨Åne-grained
performance analysis of processes,‚Äù ser. ceur workshop proceedings,
vol. 2196. ceur-ws.org, 2018, pp. 96‚Äì100.
[7]v . denisov, d. fahland, and w. m. p. van der aalst, ‚Äúrepairing event
logs with missing events to support performance analysis of systems with
shared resources,‚Äù in petri nets 2020 . cham: springer international
publishing, 2020, pp. 239‚Äì259.
[8]a. e. m ¬¥arquez-chamorro, m. resinas, and a. ruiz-cort ¬¥es, ‚Äúpredictive
monitoring of business processes: a survey,‚Äù ieee transactions on
services computing , vol. 11, no. 6, pp. 962‚Äì977, nov 2018.
[9]d. fahland, ‚Äúdescribing behavior of processes with many-to-many
interactions,‚Äù in petri nets 2019 , ser. lncs, vol. 11522. springer,
2019, pp. 3‚Äì24.
[10] e. l. klijn and d. fahland, ‚Äúperformance mining for batch processing
using the performance spectrum,‚Äù in bpm workshop 2019 , ser. lnbip,
vol. 362. springer, 2019, pp. 172‚Äì185.
