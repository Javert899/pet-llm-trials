discovering hierarchical process models
using prom
r.p. jagadeesh chandra bose1;2, eric h.m.w. verbeek1and wil m.p. van der aalst1
1department of mathematics and computer science, university of technology,
eindhoven, the netherlands
{j.c.b.rantham.prabhakara,h.m.w.verbeek,w.m.p.v.d.aalst}@tue.nl
2philips healthcare, veenpluis 5{6, best, the netherlands
abstract. process models can be seen as \maps" describing the op-
erational processes of organizations. traditional process discovery al-
gorithms have problems dealing with ne-grained event logs and less-
structured processes. the discovered models (i.e., \maps") are spaghetti-
like and are dicult to comprehend or even misleading. one of the rea-
sons for this can be attributed to the fact that the discovered models
are at (without any hierarchy). in this paper, we demonstrate the dis-
covery of hierarchical process models using a set of interrelated plugins
implemented in prom.1the hierarchy is enabled through the automated
discovery of abstractions (of activities) with domain signicance.
key words: process discovery, process maps, hierarchical models, ab-
stractions, common execution patterns
1 introduction
process discovery is one of the three main types of process mining [1]. a discovery
technique takes an event log and produces a model without using any apriori
information e.g., the -algorithm discovers a petri net based on sequences of
events [2]. we have applied process mining techniques in over 100 organiza-
tions. these practical experiences revealed two problems: (a) processes tend to
be less structured than what stakeholders expect, and (b) events logs contain
ne-grained events whereas stakeholders would like to view processes at a more
coarse-grained level. as a result, the discovered models are often incomprehensi-
ble (spaghetti-like) and add little value. this can be attributed to the fact that
the majority of techniques pertains to the discovery of control-ow models that
are \at" [2, 3, 4, 5]. a notable exception is the fuzzy miner [6]. flat models
have inherent limitations and are one of the primary sources of incomprehensi-
bility. for a log with jajevent classes (activities), a at model can be viewed as a
graph containing jajnodes with edges corresponding to the dependency between
activities dened by the execution behavior in the log. graphs become quickly
1prom is an extensible framework that provides a comprehensive set of tools/plugins
for the discovery and analysis of process models from event logs. see http://www.
processmining.org for more information and to download prom.2 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
overwhelming and unsuitable for human perception and cognitive systems even
if there are a few dozens of nodes [7].
in [8], we showed that common execution patterns (e.g., tandem arrays, max-
imal repeats etc.) manifested in an event log can be used to create powerful
abstractions (the abstractions uncovered have strong domain signicance from
a functionality point of view). these abstractions are used in our two-phase ap-
proach to process discovery [9]. the rst phase comprises of pre-processing the
event log based on abstractions (bringing the log to the desired level of gran-
ularity) and the second phase deals with discovering the process maps while
providing a seamless zoom-in/out facility. the two-phase approach to process
discovery has been implemented as a set of interrelated plugins in the prom
framework. in this paper, we demonstrate the discovery of hierarchical process
models using a chain of these plugins.
running example. we use the workow of a simple digital photo copier as
our running example. the copier supports photocopying, scanning and printing
of documents in both color and gray modes. the scanned documents can be sent
to the user via email or ftp. upon receipt of a job, the copier rst generates
an image of the document and subsequently processes the image to enhance its
quality. depending on whether the job request is for a copy/scan or print job,
separate procedures are followed to generate an image. for print requests, the
document is rst interpreted and then a rasterization procedure is followed to
form an image. the image is then written on the drum, developed, and fused on
to the paper. fig. 15 in appendix a depicts the high-level workow of the dig-
ital photo copier represented as an yawl [10] model. this high-level workow
contains the composite tasks (sub-processes) capture image ,rasterize image ,im-
age processing and print image . fig. 16 in appendix a depicts the workow of
the image processing sub-process. this sub-process contains another composite
task, viz., half toning , which is depicted in fig. 17 in appendix a. fig. 18 in
appendix a depicts the fusing sub-process within print image .
we have modeled this workow of the copier in cpn tools [11] and generated
event logs by simulation [12]. cpn tools lets the users model processes and have
more control about the properties of the event logs. this is achieved by varying
the parameters of the model and the parameters for simulation. the advantage
of using synthetic event logs is that we can conduct various controlled experi-
ments. we also applied the approach presented in this paper to several real-life
event logs. these experiments conrm our ndings based on the simulated model
used in this paper. to illustrate our approach we use one event log generated for
the copier. the event log consists of 100 process instances, 76 event classes and
40;995 events2. the event log contains ne-grained events pertaining to dier-
ent procedures (e.g., image processing, image generation etc.) mentioned above.
an analyst may not be interested in such low level details. we demonstrate the
discovery of the workow at various levels of abstractions for this event log.
2the event log is available at: http://www.win.tue.nl/ ~jcbose/digitalcopier.
xes.gz .discovering hierarchical process models using prom 3
the remainder of this paper is organized as follows. section 2 presents an
overview of the two phase approach to process discovery. section 3 describes how
the two-phase approach can be used to discover hierarchical processes. section 4
explains the pattern abstractions plugin in prom that assists in the abstraction
of events and the transformation of an event log to a desired level of granularity.
section 5 explains the enhanced fuzzy miner plugin in prom that enables the
discovery of process maps. we present the experimental results in section 6.
section 7 concludes the paper.
2 two-phase approach to process discovery
the rst phase in the two-phase approach to process discovery involves the sim-
plication of the log to a desired level of granularity. the second phase involves
the discovery of models from this simplied log.
phase-1: preprocessing log
in this phase, the log is simplied based on the desired traits of the context
of analysis. some notion of abstraction of the low-level events to a desired
level of granularity needs to be dened. in some applications and contexts,
this can be provided by analysts based on domain knowledge e.g., there can
be certain activities that demarcate the execution of a particular medical pro-
cedure on an x-ray machine. a sequence of events between these activities per-
tains to an execution sequence of this procedure e.g., the sequence of activities
between start fluoroscopy and stop fluoroscopy dene an instance of a
fluoroscopy procedure applied to a patient on an x-ray machine. alterna-
tively, abstractions can be dened by uncovering common execution patterns in
the log and establishing relationships between them as discussed in [8]. these
common execution patterns typically capture a sub-process/functionality. such
subprocess behavior in its totality can be captured as an abstract activity . ab-
stractions can be considered as a mapping, m 2a, between the original
alphabet ,, of the event log, and an abstract alphabet a. an example mapping
ism=f(fa;bg;x);(fb;c;dg;y);(feg;z);(fdg;z)g. this mapping is analogous
to the grouping and tagging of streets as a town/city in cartography and to the
selection of a desired perspective of viewing maps (restaurant maps vs. fuel sta-
tion maps)3. each (b;a)2m may reect a set of sequences s2b+capturing
the set of patterns dened by the alphabet bfor the abstraction a.
using this mapping, the original event log l, is transformed into an abstract
logl0. each trace t2lis transformed into a corresponding trace t02l0. at
3one can also take the analogy of atoms and molecules from chemistry. the individual
activities in the original event log are atoms while the mapping associates groups of
atoms (activities) to molecules (abstract activities).4 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
the same time, we create one sub-log for each abstract activity a2a. the basic
idea of the transformation algorithm is to scan each trace from left to right and
in the process determine whether there exists a pattern in the trace for which an
abstraction is dened. if such a pattern exists, the manifestation of the pattern
in the trace is replaced by its abstract activity and simultaneously the manifes-
tation of the pattern that is replaced is added as a trace (process instance) in
the sub-log corresponding to that abstract activity. it could be the case that the
manifestation of patterns is disturbed by the presence of concurrent activities
and/or noise in a trace. therefore, we consider not just exact but also inexact
(non-continuous and approximate) manifestations of patterns to deal with such
scenarios. fig. 1 depicts the general idea of the event log transformation.
d=s
(b;a)2mbdenotes the set of activities in for which a mapping is
dened. the activities in ndbeing not involved in the denition of mapping
indicate activities that are insignicant from the context of analysis and are
ltered from tduring this transformation. the transformation of logs can be
associated to the concept of artifacts [13] or proclets [14] in business processes.
artifact-centric process models partition a monolithic process model into smaller
loosely-coupled process fragments, each describing the life-cycle of a concrete and
identiable artifact.
(a) original log with common exe-
cution patterns
w yyy
w ww
z
w z
wy w z(b) transformed log and the sub-logs for each ab-
straction
fig. 1: transformation of the original log into an abstracted log. also, one sub-log
is created for each abstract activity. w,y, and zare abstract activities.
phase-2: mining maps
the second phase is to mine a process model on the abstracted (transformed)
log. the mapping dened in phase-1 induces a hierarchy over the abstract ac-
tivities. upon zooming into an abstract activity, a process model depicting the
subprocess captured by this abstract activity can be shown. the sub-log for the
abstract activity is used to create this sub-process model. multiple levels of hier-
archy can be obtained by a repetitive application of phase-1 i.e., abstractions are
dened over the transformed log (pre-processed log with abstractions) obtained
in iteration iin iteration i+ 1. this results in new abstractions to be dened
over existing abstractions, thus inducing a hierarchy.discovering hierarchical process models using prom 5
fig. 2 illustrates the dierence between the traditional approach to process dis-
covery and our two-phase approach. note that the process model (map) discov-
ered using the two-phase approach is much simpler.
filteringfilter plugins
event log
s a m b c u d n j e
s a m q f h l l h g i k e
s a m f g h l h i k q e
s a m b c d n u j e
s a m f h l g i h l h k q e
s a m q f g i h l h k e
s a m q f g h l h i k e
s a m p c u d n r e
s a m b d n c u j e
s a m p d n c u r etraditional
approach
two-phase
approach
abstractions de-
ﬁned over common
execution patternstransformed
log
x b z j e
x q y y e
x y y q e
x b z z j e
x y y y q e
x q y y y e
x q y y y e
x p z r e
x b z j e
x p z r e
pattern
abstractionsfuzzy miner
fig. 2: traditional approach versus our two-phase approach to process discovery.
prom plugins are used to lter the event log. prom's pattern abstractions plugin
and the fuzzy miner plugin are used to realize simple and intuitive models.
3 discovering hierarchical processes
the two-phase approach to process discovery described in section 2 enables the
discovery of hierarchical process models [9]. in this paper, we demonstrate this
using a chain of plugins implemented in prom. the chain of plugins and their
order of application is illustrated in fig. 3. the event log may rst be cleansed
using some simple lters (e.g., adding articial start/end events, ltering events6 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
simple
filter(s)pattern
abstractionsfuzzy miner
fig. 3: the chaining of plugins that enables the discovery of hierarchical process
models.
of a particular transaction type such as considering only `complete' events, etc.).
the pattern abstractions plugin is then applied on this ltered log one or several
times. the pattern abstractions plugin has been implemented as a log visualizer
in prom and caters to the discovery of common execution patterns, the denition
of abstractions over them, and the pre-processing of the event log with these ab-
stractions . the transformed log (pre-processed log with abstractions) obtained
in iteration iis used as the input for the pattern abstractions plugin in iter-
ationi+ 1. it is this repetitive application of the pattern abstractions plugin
that enables the discovery of multiple levels of hierarchy (new abstractions can
be dened over existing abstractions). during the pre-processing phase, for each
dened abstraction, the pattern abstractions plugin generates a sub-log that
captures the manifestation of execution patterns dened by that abstraction as
its process instances. the fuzzy miner plugin [6] is then applied on the trans-
formed log obtained after the last iteration. the fuzzy miner plugin in prom has
been enhanced to utilize the availability of sub-logs for the dened abstractions.
process models are discovered for each of the sub-logs and are displayed upon
zooming in on its corresponding abstract activity.
in the next two sections, we explain the functionality and features of the pattern
abstractions and the (enhanced) fuzzy miner plugins.
4 pattern abstractions plugin
the basic building blocks of the pattern abstractions plugin are shown in fig. 4.
figures 5 and 6 illustrate these building blocks.
discover
common
execution
patternscompute
pattern
metricsfilter
patternsform &
select
abstractionstransform
log
fig. 4: building blocks of the pattern abstractions plugin.
{discover common execution patterns: the pattern abstractions plugin sup-
ports the discovery of tandem arrays (loop patterns) and maximal repeatsdiscovering hierarchical process models using prom 7
discover common
execution patternscompute
pattern metricsfilter patterns
uncovered patternspattern
metric values
fig. 5: the discovery of common execution patterns, computation of pattern
metrics, ltering and inspection of patterns in the pattern abstractions plugin.
(common subsequence of activities within a process instance or across process
instances) [8]. these can be uncovered in linear time and space with respect
to the length of the traces.
{compute pattern metrics: various metrics (e.g, overlapping and non-over-
lapping frequency counts, instance count, etc.) to assess the signicance of the
uncovered patterns are supported.
{filter patterns: it could be the case that too many patterns are uncovered
from the event log. to manage this, features to lter patterns that are less
signicant are supported.
{form and select abstractions: abstractions are dened over the ltered pat-
terns. patterns that are closely related are grouped together to form abstrac-
tions. the approach for forming abstractions is presented in [8]. furthermore,
various features to edit/select abstractions such as merging two or more ab-
stractions and deleting activities related to a particular abstraction are sup-
ported. fig. 6 depicts a few abstractions dened over loop patterns for the
copier event log e.g., half-toning , a procedure for enhancing the image quality,
is uncovered as an abstraction.
{transform log: the event log is pre-processed by replacing activity subse-
quences corresponding to abstractions. a replaced activity subsequence is
captured as a process instance in the sub-log for the corresponding abstract
activity.8 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
at any iteration, if nabstractions are selected, the pattern abstractions plugin
generates a transformed log, and nsub-logs (one for each of the nchosen ab-
stractions). we recommend to process for loop patterns in the initial iterations
and maximal repeats in the subsequent iterations. for the example event log, we
have performed three iterations. the transformed log after the third iteration
has 19 event classes and 1601 events. in the process, we have dened various
abstractions such as half-toning, image processing, capture image , etc.
form abstractions select abstractions
transform log
fig. 6: the generation and selection of abstractions in the pattern abstractions
plugin.
the pattern abstractions plugin supports additional features such as visualizing
patterns and exporting the traces that contain the patterns.
5 (enhanced) fuzzy miner plugin
the fuzzy miner [6, 15] is a process discovery technique that mines an event
log for a family of process models using a \map" metaphor. as many maps
exist that show the city of amsterdam at dierent levels of abstraction, also
dierent maps exist for a process model mined from an event log. in this map
metaphor, an object of interest in amsterdam (like the rijksmuseum or the
anne frank house) corresponds to a node in the process model, where streets
(like the kalverstraat or the pc hooftstraat) correspond to edges in the model.
for sake of convenience, we call a single map a fuzzy instance whereas we call adiscovering hierarchical process models using prom 9
family of maps (like all amsterdam maps) a fuzzy model .
like high-level maps only show major objects of interest and major streets,
high-level fuzzy instances show only major elements (nodes and edges). for this
purpose, the fuzzy miner computes from the log a signicance weight for every
element and an additional correlation weight for every edge. the higher these
weights are, the more major the element is considered to be. furthermore, the
fuzzy miner uses a number of thresholds: only elements that meet these thresh-
olds are shown. as such, these thresholds correspond to the required level of
abstraction: the higher these thresholds are, the higher the level of abstraction
is. for sake of completeness we mention here that a fuzzy instance may contain
clusters of minor nodes: if some objects of interest on the amsterdam map are
too minor to be shown by themselves on some map, they may be shown as a
single (and major) object provided that they are close enough. for this reason,
the fuzzy miner rst attempts to cluster minor nodes into major cluster nodes,
and only if that does not work it will remove the minor node from the map.
fig. 7: fuzzy model and instance.
fig. 7 shows an example fuzzy model (left-hand side) and fuzzy instance (right-
hand side). note that both views show a fuzzy instance, but the fuzzy model
view allows the user to change the thresholds (by changing the sliders) whereas
the fuzzy instance view does not. the signicance of a node is displayed as part
of its label (for example, the node \transfer image" has a signicance of 0 :253),
the signicance of an edge is visualized using its wideness (the wider the edge,
the more signicant it is), and the correlation of an edge is visualized using its
color contrast (the darker the edge is, the more correlated its input node and
its output node are). the octagonal shaped nodes in the right-hand side view
correspond to the cluster nodes (one of the cluster nodes contain 4 activities10 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
and the other contains 11 activities). all activities on the left hand side except
\job complete" are contained in a cluster node on the right. apparently, the
signicance weights for these nodes (0 :262, 0:253, 0:250, 0:296 and 0:403) were
too low to be shown, which indicates that the corresponding threshold was set
to at least 0 :403. furthermore, the node \interpret" (on the right) is highly self-
correlated, whereas the nodes \transfer image" and \send smtp" (on the left)
are moderately correlated.
the fuzzy miner has been enhanced (called as the fuzzy map miner) to uti-
lize the availability of sub-logs obtained from the pattern abstractions plugin for
the chosen abstractions. fuzzy models are discovered for each of the sub-logs and
are displayed upon zooming in on its corresponding abstract activity. abstract
activities are dierentiated from other activities by means of a distinct color (a
darker shade of blue, see also fig. 7) . thus, the enhanced fuzzy miner gives the
user more control over the discovery process than the classical fuzzy miner [6].
6 experimental results and discussion
in this section, we demonstrate the discovery of hierarchical processes using the
concepts presented in this paper rstly on the synthetic log of the digital copier
example and later on a real-life case study. we contrast the process models
discovered using the proposed approach with the models uncovered using the
classical fuzzy miner. fig. 8(a) depicts the process model mined on the digital
copier event log using the classical fuzzy miner [6]. as discussed in section 5,
the fuzzy miner plugin groups activities into cluster nodes (blue colored nodes
in fig. 8(a)) based on their signicance. fig. 8(b) depicts the process model
obtained upon zooming one of the cluster nodes containing 55 activities. as we
can see, the model is spaghetti-like and hard to comprehend. the cluster nodes
formed by the classical fuzzy miner do not have any semantic signicance with
respect to the domain/application. in other words, the classical fuzzy miner
poses the risk of aggregating unrelated nodes together in a cluster (using the
map metaphor, this is similar to streets in eindhoven being clustered along with
streets in amsterdam).
fig. 9 depicts the top-level process model of the copier example discovered us-
ing the chain of plugins proposed in this paper. this model is generated from
the transformed log obtained after the third iteration of pattern abstractions
plugin. the upper branch of the process model corresponds to the creation of
the document image for print requests while the lower branch corresponds to
image creation for copy/scan requests. the two branches meet after the image is
formed and the image is subjected to some image processing functionality. the
document is then printed or sent to the user via email or ftp. the lower level
details of image creation, image processing, print image have been abstracted
in this model. the pattern abstractions plugin enables the discovery of such
abstractions with strong domain (functional) signicance . note the similarity ofdiscovering hierarchical process models using prom 11
(a) top-level model
 (b) process model upon zooming the cluster node `cluster
90'
fig. 8: process model mined using the classical fuzzy miner.
this discovered model with the original model in fig. 15. the interpret andren-
der and screen abstractions in fig. 9 are within the rasterize image composite
task of fig. 15.
upon zooming in on the image processing abstraction, the process model de-
picted in fig. 10 is shown. note the similarity of this discovered model with
that of the original model in fig. 16. this sub-process in turn contains another
abstract activity viz., half toning (the level of hierarchy is two). zooming in on
this abstract activity displays the sub-process dening it as depicted in fig. 10.
note the similarity of this discovered model for half toning with that of the orig-
inal model in fig. 17. fig. 11 depicts two other abstractions viz., interpret and
fusing . note the similarity of the discovered model for fusing with that of the
original model in fig. 18.
in this fashion, using the chain of plugins presented in this paper, one can dis-
cover hierarchical process models. we next present the results of applying this
approach in a real-life case study. the case study was performed in close collabo-
ration with philips healthcare and pertains to the analysis of event logs generated
by the x-ray machines . more specically, we considered an event log capturing
the activities performed by eld service engineers during one of the part replace-
ments on x-ray machines. the event log contains 113 cases and 76 ;754 events
referring to 92 activities. fig. 12 depicts the process model uncovered on this log
using the classical fuzzy miner. again, we see an incomprehensible spaghetti-
like model. we uncover common execution patterns, dene abstractions, and use
our two-phase approach to alleviate this problem. the transformed log (with ab-
stractions) contains 113 cases and 10 ;387 events referring to 20 activities. fig. 13
depicts the top-level process model discovered using the fuzzy map miner on this12 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
interpretation of
pages in a document
to printrendering and
screening of the
document
capturing the image
of the document to
copy/scanimage processingprinting
the image
fig. 9: the top level process model of the copier event log. blue (dark colored)
nodes are abstract activities that can be zoomed in. upon zooming in, the sub-
process dening the abstraction is shown.
image processing
half toning
fig. 10: the sub-process captured for the abstraction `image processing' (in
the top-level model). this sub-process in turn contains another abstraction viz.,
`half toning'. upon zooming in on `half toning', the sub-process dening that
is shown.
interpret
 fusing
fig. 11: the sub-processes for the abstractions `interpret' and `fusing'. `inter-
pret' is an abstract activity at the top-level of the process model while `fusing'
is an abstract activity underneath the `print image' abstraction.discovering hierarchical process models using prom 13
fig. 12: process model discovered using the classical fuzzy miner on the event
log capturing the activities of eld service engineers during one of the part re-
placements in x-ray machines.
change to field
service mode
field service
activity startupexamination
administration
and viewingfluoroscopy,
exposure,
and viewingbeam limitation
fig. 13: the top-level of the hierarchical process model using the approach pro-
posed in this paper on the event log capturing the activities of eld service
engineers during one of the part replacements in x-ray machines.
transformed log. we can see that the model discovered using our two-phase ap-
proach is simpler and more comprehensible. fig. 14(a) depicts the sub-process
for the abstract activity fluoroscopy, exposure, and viewing while fig. 14(b) de-
picts the sub-process for the abstract activity beam limitation .
we have used this approach on several other real-life event logs as well (e.g.,
see [16]). our experiences show that the automated abstractions uncovered by
the pattern abstractions plugin have strong domain (functional) signicance.
this can be attributed to that fact that these abstractions are obtained by ex-
ploiting the common execution patterns in the event log. common subsequences
of activities in an event log that are found to recur within a process instance
or across process instances tend to have some domain (functional) signicance.
one of the limitations of our approach is the semi-automated means of den-
ing abstractions. currently, the plugin requires the manual merging/pruning of
patterns. in the future, we would like to automate some of these functionalities.14 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
(a) fluoroscopy, exposure and viewing
(b) beam limitation
fig. 14: the sub-processes corresponding to the abstract activities fluoroscopy,
exposure and viewing and beam limitation .
7 conclusions
we demonstrated the discovery of hierarchical process models using a chain of
plugins implemented in prom. the repetitive application of pattern abstrac-
tions plugin enables the discovery of multiple levels of hierarchy. we can use this
approach to create comprehensible process maps.
acknowledgments r.p.j.c. bose and w.m.p. van der aalst are grateful to
philips healthcare for funding the research in process mining.
references
1. van der aalst, w.m.p.: process mining: discovery, conformance and enhancement
of business processes. springer-verlag new york inc (2011)
2. van der aalst, w.m.p., weijters, a.j.m.m., maruster, l.: workow mining: dis-
covering process models from event logs. ieee transactions on knowledge and
data engineering 16(9) (2004) 1128{1142
3. weijters, a.j.m.m., van der aalst, w.m.p.: rediscovering workow models from
event-based data using little thumb. integrated computer-aided engineering
10(2) (2003) 151{162
4. van der werf, j.m., van dongen, b.f., hurkens, c., serebrenik, a.: process dis-
covering using integer linear programming. applications and theory of petri
nets (2008) 358{387
5. van dongen, b.f., de medeiros, a.k.a., wen, l.: process mining: overview and
outlook of petri net discovery algorithms. transactions on petri nets and other
models of concurrency ii (2009) 225{242
6. g unther, c., van der aalst, w.m.p.: fuzzy mining: adaptive process simplica-
tion based on multi-perspective metrics. in: international conference on business
process management (bpm 2007). volume 4714 of lncs., springer-verlag (2007)
328{343discovering hierarchical process models using prom 15
7. g org, c., pohl, m., qeli, e., xu, k.: visual representations. in kerren, a., ebert,
a., meye, j., eds.: human-centered visualization environments. volume 4417 of
lncs. springer (2007) 163{230
8. bose, r.p.j.c., van der aalst, w.m.p.: abstractions in process mining: a tax-
onomy of patterns. in dayal, u., eder, j., koehler, j., reijers, h., eds.: business
process management. volume 5701 of lncs., springer-verlag (2009) 159{175
9. li, j., bose, r.p.j.c., van der aalst, w.m.p.: mining context-dependent and
interactive business process maps using execution patterns. in zur muehlen, m.,
su, j., eds.: bpm 2010 workshops. volume 66 of lnbip., springer-verlag (2011)
109{121
10. van der aalst, w.m.p., ter hofstede, a.h.m.: yawl: yet another workow
language. information systems 30(4) (2005) 245{275
11. jensen, k., kristensen, l.m.: colored petri nets: modeling and validation of
concurrent systems. springer-verlag new york inc (2009)
12. medeiros, a.k.a.d., g unther, c.w.: process mining: using cpn tools to create
test logs for mining algorithms. in: proceedings of the sixth workshop and
tutorial on practical use of coloured petri nets and the cpn tools. (2005) 177{
190
13. nigam, a., caswell, n.s.: business artifacts: an approach to operational speci-
cation. ibm systems journal 42(3) (2003) 428{445
14. van der aalst, w.m.p., barthelmess, p., ellis, c.a., wainer, j.: proclets: a frame-
work for lightweight interacting workow processes. international journal of
cooperative information systems 10(4) (2001) 443{482
15. xia, j.: automatic determination of graph simplication parameter values for
fuzzy miner. master's thesis, eindhoven university of technology (2010)
16. bose, r.p.j.c., van der aalst, w.m.p.: analysis of patient treatment procedures:
the bpi challenge case study. technical report bpm-11-18, bpmcenter.org
(2011) http://bpmcenter.org/wp-content/uploads/reports/2011/bpm-11-18.
pdf.
a yawl models of the digital photo copier
fig. 15: high-level model of the digital photo copier. the digital copier supports
two functionalities viz., copy/scan and print. documents are interpreted and
converted into an image before they are printed. scanned images of the copy/scan
jobs are sent to the user via email or ftp.16 r.p.j.c. bose, e.h.m.w. verbeek, and w.m.p. van der aalst
fig. 16: the image processing sub-process. this subprocess supports operations
such as zooming, rotating and overlay and attempts at improving the quality of
images.
fig. 17: the half-toning sub-process for image representation. half toning is a
technique that simulates continuous tone imagery through the use of equally
spaced dots of varying size.
fig. 18: the fusing sub-process within print image.