change point detection and dealing with gradual and
multi-order dynamics in process mining
j. martjushev1;2, r.p. jagadeesh chandra bose2and wil m.p. van der aalst2
martjushev@gmail.com, jcbose@gmail.com, w.m.p.v.d.aalst@tue.nl
1university of tartu, estonia
2eindhoven university of technology, the netherlands.
abstract. in recent years process mining techniques have matured. pro-
vided that the process is stable and enough example traces have been
recorded in the event log, it is possible to discover a high-quality process
model that can be used for performance analysis, compliance checking,
and prediction. unfortunately, most processes are not in steady-state and
process discovery techniques have problems uncovering \second-order dy-
namics" (i.e., the process itself changes while being analyzed). this paper
describes an approach to discover a variety of concept drifts in processes.
unlike earlier approaches, we can discover gradual drifts andmulti-order
dynamics (e.g., recurring seasonal eects mixed with the eects of an eco-
nomic crisis). we use a novel adaptive windowing approach to robustly
localize changes (gradual or sudden). our extensive evaluation (based
on objective criteria) shows that the new approach is able to eciently
uncover a broad range of drifts in processes.
1 introduction
in today's dynamic marketplace, organizations are expected to be exible and
quickly adapt to changing circumstances so as to reduce costs and to improve
performance. new legislations such as the wabo act [10] and the sarbanes-
oxley act [15], extreme variations in supply and demand, seasonal eects, natu-
ral calamities and disasters, deadline escalations [2], etc., force organizations to
change their processes. processes may change suddenly or gradually. the drift
may be periodic (e.g., due to seasonal inuences) or one-of-a-kind (e.g., the ef-
fects of new legislation). for process management it is crucial to discover and
understand such concept drifts in processes.
processes executed in today's world are often supported and controlled by in-
formation systems, which record events in the form of event logs . process mining
aims to discover ,monitor andimprove real-life processes by extracting knowledge
from event logs [1]. although most business processes change over time, contem-
porary process mining techniques cannot capture such \second-order dynamics"
and analyze these processes as if they are in steady-state . however, detecting and
understanding concept drifts is of imminent importance for organizations .
although the topic of concept drift is well-studied in various branches of the
data mining and machine learning community [3, 12, 16, 21], it has only been
recently introduced in the context of process mining [4]. contemporary concept
drift approaches focus on changes in relatively simple structures (e.g., data val-
ues and frequencies). process models are complex artifacts describing behavior
involving concurrency, choices, loops, cancelation, etc. traditional approachescannot be used to discover the \process of process change". there are three
main topics when dealing with concept drifts in process mining [4]:
{change (point) detection: the rst and most fundamental problem is to detect
that a process change has taken place. if so, the next step is to identify the
time periods at which changes have taken place.
{change localization and characterization: once a point of change has been
identied, the next step is to characterize the nature of change, and identify
the region(s) of change (localization) in a process.
{change process discovery: unraveling the evolution of a process, i.e., the
discovery of the change process describing the \second-order" dynamics.
in this paper, we build on the approach in [4] and present novel techniques for
detecting process changes and the points at which they changed by analyzing
event logs. more specically, (i) we present an approach to automatically identify
the points (time periods) of change , (ii) we propose a technique for change de-
tection using adaptive windows , (iii) we characterize the notions of gradual drifts
and multi-order dynamics and propose techniques for detecting them, and (iv)
we propose an objective evaluation framework for change detection. the pro-
posed techniques have been implemented as the concept drift plug-in in prom.3
the approach was evaluated using a variety of synthetic and real-life event logs.
the remainder of this paper is organized as follows. section 2 provides the
background on change detection techniques based on hypothesis tests. section 3
presents an approach for automatically identifying change points. an adaptive
windowing technique for change detection is presented in section 4. section 5
characterizes the notions of gradual and multi-order changes and presents tech-
niques for detecting them. section 6 proposes an approach for evaluating change
detection techniques objectively. section 7 presents and discusses experimental
results. related work is presented in section 8. finally, section 9 concludes the
paper.
2 background
in this section, we present a brief overview of the change detection technique
presented in [4] upon which the concepts presented in this paper are based.
processes can change with respect to the three main process perspectives,
viz., control-ow, data, and resource. such changes are perceived to induce a
drift in the concept (process behavior), e.g., in the way which activities are
executed when ,how, and by whom . one can consider an event log las a time
series of traces (traces ordered based on the timestamp of the rst event). the
basic premise in handling concept drifts is that the characteristics of the traces
before the change point dier from the characteristics of the traces after the
change point . the problem of change (point) detection is then to identify the
points in time when the process has changed, if any. change point detection
involves two primary steps: (i) capturing the characteristics of the traces, and
(ii) identifying when these characteristics change.
the control-ow perspective of a process characterizes the relationships be-
tween activities. dependencies between activities in an event log can be cap-
tured and expressed using the follows (orprecedes ) relationship, also referred
to as causal footprints . bose et al. [4] proposed four features characterizing the
3seewww.processmining.org for more information and to download prom.
2control-ow dependencies between activities. these features are shown to be
eective in detecting process changes. an event log can be transformed into a
data setd, which can be considered as a time series (as depicted in fig. 1),
by these features. change detection is done by considering a series of successive
populations4of feature values (of some population size w, see fig. 1) and inves-
tigating if there is a signicant dierence between two successive populations.
the premise is that dierences are expected to be perceived at change points
provided appropriate characteristics of the change are captured as features. the
dierence between populations is assessed using statistical hypothesis testing [18].
hypothesis tests yield a signicance value (the so-called p-value ), whose range
is between 0 and 1, assessing the validity of the null-hypothesis, which typically
states that the two populations come from the same distribution. a plot of p-
values corresponding to the trace indices captured by populations is inspected
to see if signicant dierences (and thereby process changes) exist. the p-values
are plotted against the indices at the end of the left populations . fig. 2 depicts a
representative p-value plot. process changes stand out as troughs in the p-value
plot. this approach is eective in detecting sudden drifts as shown in [4,5].
d1d2. . . . . . . . . dwdw+1dw+2 . . . . . . d2wd2w+1 . . . . . . . . . . . . . . . dmp1 p2
......
fig. 1: basic idea of detecting drifts using hypothesis tests. the data set of feature
values is considered as a time series for hypothesis tests. p1andp2are two populations
of sizew.
troughs indicate that
the process was sub-
jected to changeschange
pointsprocess variant before
the Ô¨Årst change pointprocess variant after
the Ô¨Årst change pointprocess fragment
that has changed
fig. 2: a plot ofp-values of the hypothesis tests. x-axis represents the trace index
and y-axis represents the p-value. troughs in the plot signify process changes. process
variants before and after a change point can be inspected to identify the fragments
that have been changed.
techniques for dealing with concept drift can be broadly classied into on-
lineand oine depending on whether or not the presence of changes or the
occurrence of drifts needs to be uncovered in real-time. in this paper, we focus
on oine drift detection. however, our techniques can easily be adapted to the
online setting.
4a moving window is used to generate the series of populations.
33 change point detection
process changes manifested in an event log are detected by inspecting the p-value
plot of the hypothesis tests over feature values captured for the traces [4].5this
suers from the limitation that change and change point detection both need to
be done manually by visual inspection. in this section, we present an automated
approach for detecting the points of change . the basic idea is to rst choose an
a priori threshold for p-value, ^ p, to detect the presence of changes. if the signi-
cance value (i.e., p-value) of the hypothesis test for two populations p1andp2is
less than ^p, we report that there is a change in the process. having detected that
the process has changed, we further explore the two populations to identify the
closest point of change using a recursive bisection . algorithm 1 sketches the basic
idea while fig. 3 illustrates this. step 5 of algorithm 1 facilitates the recursive
exploration of the change point search to the closest trace index. assuming that
thep-value is minimum corresponding to the two populations on the right hand
side and is less than the threshold ^ p(step 4, algorithm 1), fig. 3(b) depicts the
recursive search for change point within the right population.
algorithm 1 change point detection
1: letp1andp2be the two populations where we have detected a change (i.e., its
hypothesis test's p-value <^p).
2: split the two populations p1andp2into halves, p11andp12forp1andp21and
p22forp2.
3: apply a hypothesis test on the left ( p11andp12), center (p12andp21), and right
(p21andp22) population pairs as illustrated in fig. 3(a). let pleft,pcenter , andpright
be their respective p-values.
4: letpmin= minfpleft;pcenter;prightg. letp1
minandp2
minbe the corresponding popu-
lations ofpmin.
5: ifpmin<^p, setp1=p1
minandp2=p2
min, goto step 1, else return the index/time
point corresponding to the trace at end of p1as the change point.
once a change point has been detected, analysis proceeds as before using a
sliding window starting from the rst index after the end of the right popula-
tion. compared to [4], the location of the change point can be determined more
precisely.
4 adaptive windowing approach for change detection
the statistical hypothesis test analysis for change detection discussed above uses
axed population size. the goodness of the results depends on the population
size, which is largely dependent on the application and the focus of analysis. typ-
ically, one sees a lot of noise in the p-value plot for small populations and the
plot tends to be smooth as the population size increases. this can be attributed
to the fact that as the population size increases (i.e., as we consider more cases),
the variability in the nature of cases reduces and attains a stability. a small
population size might result in false positives, i.e., detecting concept drifts that
do not exist, while a large population size might result in false negatives, i.e.,
drifts remain undetected. in order to address this issue, we propose the use of
adaptive windows where in the population sizes are automatically adapted based
5the presence of troughs in the p-value plot indicates that the process was subjected
to changes
4d1d2d3. . . . . . . . . dwdw+1dw+2. . . . . . . . . d2w . . . . . . . . . . . . dm
p1 p2pcenter
pleft prightp11 p12 p21 p22(a)
d1d2d3. . . . . . . . . dwdw+1dw+2 . . . . . . . . . d2w . . . . . . . . . . . . dm
pcenter
pleft
pright
(b)
fig. 3: basic idea of our recursive bisection approach to detect and localize change
points. (a) change point search by considering the left, center, and right sub-populations
(b)recursive search for change point in the right population.
on the characteristics of the data stream. we adapt the adwin technique [3],
an approach for online change detection using an adaptive size sliding detection
window. algorithm 2 presents the adaptive window approach for change detec-
tion. the basic idea is to use minimum and maximum size limits for populations
and extend the population sizes until a change has been detected or the popula-
tions reach the maximum size limit. if the maximum size is reached, we discard
the historically old data (i.e., the left most population) and proceed with the
hypothesis tests with recent data. when a change has been detected, we iden-
tify the change point and proceed with hypothesis tests using two new smaller
populations (of minimum size) with the new left population starting at the rst
index after the old right population and the new right population starting at the
rst index after the new left population (steps 5-6, algorithm 2).
as mentioned earlier, the p-values are plotted against the indices at the end of
the left populations. when a change has been detected or when the populations
reach a maximum size, we create new populations. this creates a gap between
the indices at the end of the old and new left populations. to have a continuous
p-value plot, we connect the p-values at the old and new indices (corresponding
to the old and new left populations) by a straight line.
5 dealing with gradual drifts and multi-order
dynamics
in this section, we characterize the notions of gradual and multi-order changes
and present techniques for detecting such changes.
5.1 gradual drifts
in gradual drifts, one concept fades gradually while the other takes over. this
phenomenon of gradual change can be modeled in many ways by means of func-
tions that describe how things grow or decay as time passes. for example, the
change can be linear between two sources as illustrated in fig. 4. in the gure,
initially until t1, only the process variant m1is in operation, i.e., all cases em-
5algorithm 2 change detection using adaptive windows
require: a minimum population size wmin, a maximum population size wmax, p-value
threshold ^p, a step size k, and a data stream of values d
1: letpleftandprightbe two populations of size wminwithprightstarting at the rst
index after the end of pleft.
2:repeat
3: apply a hypothesis test over pleftandpright. letpbe its p-value.
4: ifp<^pthen
5: identify the change point within pleftandpright using algorithm 1.
6: create two new populations p0
leftandp0
rightof sizewminwithp0
leftstarting
at the rst index after the end of pright andp0
right starting at the rst index after
the end ofp0
left. setpleft=p0
leftandpright=p0
right.
7: else
8: extend the left and right populations by a step size k. reassign the right
population to start at the rst index after the end of the extended left population
pleft.
9: ifthe size of the population wmaxthen discard the left population pleft.
split the right population pright into two halves and use them as the left and right
populations.
10: end if
11: end if
12:until the end ofpright doesn't reach the end of d
anate from m1untilt1. the gradual change between process variants m1and
m2happen linearly betweent1andt2, i.e., the cases from m1andm2constantly
decrease and increase respectively. the degree of decrease/increase is character-
ized by the slope as illustrated in fig. 4(a){(c). subsequently, from t2, all cases
emanate only from m2. as another example, one can notice an exponential rate
of increase/decrease of cases from two processes as illustrated in fig. 5. here, the
degree of change between t1andt2is characterized by the function e tform1.
the probability of a case emanating from m2at any instant of time between t1
andt2is modeled as 1 pm1wherepm1is the probability of a case being from
m1.
tprobability
01m1
m2
t1 t2
(a) slope = 30
tprobability
01m1
m2
t1 t2 (b) slope = 45
tprobability
01m1
m2
t1 t2 (c) slope = 60
fig. 4: dierent variants of linear gradual drift between t1andt2for processes m1and
m2. the rate of change is characterized by the slope.
analyzing event logs for concept drifts under gradual changes can be done
using hypothesis tests on features characterizing the process execution behav-
ior. however, since the transition between two processes m1andm2is grad-
ual/smooth, the p-values tend to be higher compared to sudden drifts if the
conventional sliding window approach is considered. furthermore, if detected,
6tprobability
01m1
m2
t1 t2(a)= 0:5
tprobability
01m1
m2
t1 t2 (b)= 1:0
tprobability
01m1
m2
t1 t2 (c)= 1:5
fig. 5: dierent variants of exponential gradual drift between t1andt2characterized
by the function e tform1.
the troughs tend to be wider, in proportion to the duration for which the grad-
ual change is operational. therefore, to detect gradual drifts, we advocate the
use of non-continuous populations as illustrated in fig. 6. the intuition behind
this is that the gapbetween populations makes it easier to pick up dierences
even when instances from both processes co-exist. provided a proper choice of
the gap is made, at the onset of gradual change, the populations p1andp2
capture instances only from m1andm2respectively; a hypothesis test on these
two populations should yield a signicantly lower p-value, thus facilitating the
detection of a change.
d1d2. . . . . . . . . dwdw+1dw+2 . . . . . . d2wd2w+1 . . . . . . . . . . . . . . . dmp1 p2
......
fig. 6: general idea of gradual drift detection using hypothesis tests on non-continuous
populations: p1andp2are deliberately separated by a gap.
5.2 multi-order dynamics
in this section, we extend the notion of process changes to also include multi-
order dynamics where process changes can happen at multiple levels of (time)
granularity, e.g., weekly and yearly recurring drifts may be mixed with drifts
due to economic developments. for example, suppose an organization induces
a process change from m1tom2after 24 weeks. furthermore, let us assume
that there are two variants of process m1, viz.,m11andm12, and two variants
of processm2, viz.,m21andm22, which the organization recurringly changes
every six weeks within/after the rst 24 weeks respectively.6fig. 7 illustrates this
phenomenon. each time unit in the gure corresponds to six weeks. we can see
that process changes happen at two-levels in this example. one change induced
every six weeks and another change happening at 24 weeks (time unit 4 in the
gure) between m1andm2. when dealing with concept drifts, one has to take
into consideration the presence of such multi-order dynamics. the framework for
change detection using hypothesis tests can still be used for detecting multi-order
changes. however, instead of considering populations based on a xed volume of
traces/cases, we should consider populations at dierent time scales . populations
6to simplify discussion, the duration for which a process variant is active is kept
uniform. however, in reality, processes can be deployed for varying durations and
can be changed at varying intervals.
7comprising cases within shorter-time periods are to be used for detecting micro-
level changes while larger time periods are to be chosen for macro-level changes.
for example, using populations comprising of cases in a time period up to six
weeks, we would be able to detect the seven micro-level change points in fig. 7.
instead, if we choose the populations to comprise of cases from a time period
between 12 weeks and 24 weeks, we would be able to detect the single macro-level
change between m1andm2at time unit 4 in fig. 7.
t1 2 3 4 5 6 7 8m11m12m21m22m1 m2
fig. 7: illustration of multi-order changes involving four process variants: micro-level
drifts (e.g., the alternation of m11andm12) operate at a dierent time scale than the
macro-level drift from m1tom2.
6 objective evaluation of change detection techniques
the automatic detection of change points proposed in section 3 provides an ob-
jective evaluation mechanism for change detection techniques. we adopt classic
metrics in data mining such as the number of true positives (tp), false positives
(fp) and false negatives (fn), and derived metrics from these, viz., precision, re-
call, andf1-score as objective measures. in order to dene these metrics, we use
a lag period lsurrounding a detected or actual change point. the interpretation
of these metrics (see fig. 8) is as follows:
{tp:a change point is detected at ^tand there is an actual change within ^tl
{fp:a change point is detected at ^tbut there is no actual change within ^tl
{fn:an actual change happened at ^tbut no change has been detected within
^tl
precision measures the fraction of detected changes that are correct while recall
measures the fraction of actual changes that have been detected. in other words,
precision =tp=(tp+fp) and recall =tp=(tp+fn). a measure that
combines both precision and recall is the f1-score , dened as the harmonic
mean between precision and recall, i.e., f1-score = 2:precision:recall=(precision +
recall ).techniques that are able to detect changes with a high precision and recall
(both close to 1.0) are preferred over others .
ttrue positive
l lfalse negative
l lfalse positive
l l
fig. 8: objective evaluation of change detection techniques. the solid circle and the
dashed circle indicate a detected change and an actual change respectively.
7 experiments and discussion
the various concepts presented in this paper have been implemented in the
concept drift plug-in in prom. in this section, we discuss the results of applying
these concepts for change (point) detection on several logs.
87.1 sudden drifts
we use the synthetic insurance claim event log [4] to assess the goodness of
the change and change point detection techniques proposed in this paper. this
event log contains 6000 traces and 58783 events distributed over 15 activities
and incorporates a sudden drift phenomenon over ve process variants. the
event log contains 1200 traces from each process variant with the change points
induced at 1200, 2400, 3600, and 4800. the approach presented in [4] was shown
to detect the presence of all the four changes. however, the change points had to
be detected manually. we have applied the adaptive windowing approach using
the kolmogorov-smirnov test (ks-test) [18] over the data stream obtained on
thej-measure feature [4] for each activity pair. fig. 9 depicts the average p-
value plot of the ks-test on all activity pairs using a minimum population size
of 100, maximum population size of 500, step size of 20 and a p-value threshold
of 0:4. the red dots in the plot indicate the automatically detected change points
using the approach presented in section 3. the change points are detected at
indices 1207, 2415, 3598, and 4793. using a lag window of 20 traces, we have the
following metrics (tp=4, fp=0, fn=0, precision=1.0, and recall=1.0), i.e., we
are able to detect all changes within 20 traces of the actual change points, which
is quite promising.
fig. 9: average p-value (over all activity pairs) using the adaptive windowing technique
forks-test on the j-measure estimated for each trace. the red dots indicate the
automatically detected change points. the x-axis represents the trace index and y-axis
represents the p-value of the test. the solid vertical lines indicate the actual change
points.
7.2 multi-order dynamics
in order to conduct a controlled experiment involving multi-order changes, we
have modeled a process exhibiting drifts at dierent time scales using cpn
tools [8]. we considered four process variants pertaining to the insurance claim
example and generated an event log exhibiting multi-order changes as illustrated
in fig. 7. two of the process model variants recurred alternatively every 6 weeks
within the rst 24 weeks while the other two process variants recurred alterna-
tively every 6 weeks in the next 24 weeks. in practice, the arrival rate of cases
can be dierent at dierent time periods. however, for simplicity and ease of
discussion, we have modeled instances to arrive at a constant rate over the en-
tire period. furthermore, instances were modeled to arrive only during working
hours and on week days at the rate of approximately 3 instances per hour. the
event log contains 5647 cases and 57530 events distributed over 15 activities.
there are 7 micro-level drift points induced at indices 629, 1346, 2038, 2802,
3444, 4156, and 4845 in this event log and one macro-level drift at index 2802.
9as mentioned earlier, one needs to look at populations in terms of varying
time periods rather than the number of traces when dealing with multi-order
changes. micro-level and macro-level drifts can be detected by considering pop-
ulations comprising of cases dened over shorter and longer time periods respec-
tively. since the micro-level drifts are induced every 6 weeks, to detect these
changes, we need to consider populations that do not exceed 6 weeks. fig. 10(a)
depicts the average p-value of the ks-test on the j-measure over all activity
pairs using a minimum population size of 3 days, maximum population size of
6 weeks, step size of 1 day, and a p-value threshold of 0 :4. we can see that we
are able to detect all the 7 drifts. also, we are able to automatically detect the
exact change points. fig. 10(b) depicts the average p-value of the ks-test on the
j-measure over all activity pairs using a minimum population size of 12 weeks,
maximum population size of 24 weeks, step size of 3 days and a p-value threshold
of 0:2. we can see that by choosing a longer time period, we are able to detect
the lone macro-level drift. the drift point is automatically detected at 2802 (the
actual drift point is also 2802), which is accurate.
(a) micro-level drifts
 (b) macro-level drift
fig. 10: detection of multi-order changes. average p-value (over all activity pairs)
using the adaptive windowing technique for ks-test on the j-measure estimated for
each trace. the red dots indicate the automatically detected change points. both micro-
level drifts (left) and macro-level drifts (right) are detected using appropriate time
scales. the solid vertical lines indicate the actual change points.
it is imperative to note that the adaptive windowing approach and the change
point detection technique are both sensitive to the p-value threshold. fig. 11
depicts the objective metrics for the micro-level drift detection using a lag period
of 2 days (50 traces) for dierent p-value thresholds. we can see that a choice of
lowp-value thresholds results in high false negatives (low recall) while a choice
of highp-value thresholds results in high false positives (low precision). the
f1-score increases with increasing p-value thresholds (due to increasing true
positives) up to a certain point and deteriorates with further increase of p-
value threshold (due to increasing false positives). the absolute p-values of the
hypothesis tests are in turn dependent on the degree of change. we notice high p-
values in scenarios where the process changes are minimal and concentrated over
(aecting) only a few activities in the process. in such cases, the p-values will be
less only for those features that involve the activities aected by the change. the
high p-values overall is due to the eect of aggregation (average) that we do over
all activity pairs. in other words, the absolute p-values are inversely proportional
to the extent of change and the number of activities aected by the change.
10 0 0.2 0.4 0.6 0.8 1
 0  0.2  0.4  0.6  0.8  1
p-valuef1-score precision recallfig. 11: inuence of p-value threshold on
change detection.7.3 gradual drifts
we now assess the goodness of the
proposed approach in handling grad-
ual drifts. we consider both the sce-
narios where the change is linear
as well as exponential between two
sources. again cpn tools is used to
create drifting processes allowing for a
controlled experiment. we have used
two of the process variants of the in-
surance claim example [4] and gener-
ated event logs with linear and expo-
nential graduality. we rst discuss the
results on linear graduality. we con-
sidered an event log containing 2000 traces and 19346 events distributed over
15 activities. the linear drift was induced between the traces 1100 and 1200.
fig. 12(a) depicts the average p-value obtained using adaptive windowing tech-
nique for the ks-test on the j-measure over all activity pairs using a minimum
population size of 200, maximum population size of 300, step size of 10, gap size
of 100, and a p-value threshold of 0 :35. the drifts are detected at 1128 and 1229
(the actual drifts are at 1100 and 1200). using a gap size of 50 (with the rest of
the conguration remaining the same), the drifts are detected at 1158 and 1199.
we can also see that for gradual changes, the width of the troughs are wider. we
now consider an example of exponential gradual drift. we considered an event
log containing 2000 traces and 19183 events distributed over 15 activities. an
exponential drift was introduced between 900 and 1200 traces with a decay rate
of= 0:005 for the rst process variant. fig. 12(b) depicts the average p-value
obtained using adaptive windowing technique for the ks-test on the j-measure
over all activity pairs using a minimum population size of 200, maximum popu-
lation size of 300, step size of 10, gap size of 300, and a p-value threshold of 0 :35.
the drifts are detected at 907 and 1198 (the actual drifts are at 900 and 1200).
using a gap size of 100 (with the rest of the conguration remaining the same),
the drifts are detected at 907 and 998. by choosing an appropriate gap size, we
are able to detect the change points very close to the actual change points.
(a) linear gradual drift
 (b) exponential gradual drift
fig. 12: detection of gradual changes using non-continuous populations. the red dots
indicate the detected start/end of gradual change. the dashed and solid vertical lines
indicate the start and end respectively of the actual gradual change.
117.4 case study
we have applied the concepts presented in this paper on several real-life event
logs. in this section, we discuss the results of one such experiment of analyzing
drifts from the all-in-one-permit handling process of a large dutch municipality.
since october 1, 2010, the all-in-one permit for physical aspects (omgevingsver-
gunning) has come into force through the wabo act [10]. this entails an overar-
ching procedure for granting permission for projects like the construction, alter-
ation or use of a house or building, etc. now, the municipalities have one permit,
one procedure and one set of submittal requirements, followed by one legal reme-
dies procedure and enforcement by one authority.
fig. 13: average p-value (over all activity
pairs) using the adaptive windowing tech-
nique for ks-test on the j-measure esti-
mated for each trace. the red dots indicate
the detected change points.we considered an event log contain-
ing 184 cases and 4391 events dis-
tributed over 38 event classes (activ-
ities). the cases arrived between 19
oct 2010 and 29 dec 2011. we have
applied the adaptive windowing ap-
proach with minimum and maximum
population sizes of 10 and 30 respec-
tively and a p-value threshold of 0 :3
on thej-measure feature over all ac-
tivity pairs. fig. 13 depicts the re-
sulting drift plot along with the drift
points. we see that there are three
change points pertaining to traces at
indices 50, 113, and 157. we have par-
titioned the event log into four parts, l0comprising of cases from 1 to 49, l1
comprising of cases from 50 to 112, l2comprising of cases from 113 to 156, and
l3comprising of cases from 157 to 184. we mined process models from these
four event logs and analyzed for the changes that transpired between them.
the basic process comprises of four high-level steps: (i) registration and ac-
knowledgements, (ii) procedural check 1, (iii) procedural check 2, and (iv) nal
assessment and decision. the changes primarily correspond to the procedural
check steps. there is a change w.r.t two activities viz., suspend the time limit
and procedure change 2 jjactivities regular procedure 2 between the two model
variants corresponding to logs l0andl1. in the variant mined using l0, these
activities are executed in only 6 and 7 cases respectively out of the 49 cases
whereas in the latter these are executed for each and every case. in this variant
corresponding to log l2, the organization introduced some new activities per-
taining to shipments and licence exemptions. furthermore, the activities waw
permit aspect 1 and waw permit aspect 2 are being phased out. this is noticed
in the fact that these activities are executed in only 14 of the 43 cases whereas
in its previous variant these activities are executed for each and every case. the
process variant corresponding to l3diers froml2in the fact that these two
activities are completely phased out.
7.5 time complexity analysis
the change detection technique using hypothesis tests on a data stream of feature
values proposed in [4] uses a sliding window that moves by one unit to generate
successive populations. the number of hypothesis tests to be performed overall
12is directly proportional to the number of cases in an event log. furthermore,
this has to be repeated for dierent data streams, one for each feature (e.g., the
j-measure on the follows relation over all activity pairs). for logs with many
cases and/or large number of activities, this tends to be computationally expen-
sive. one can improve this by progressing the sliding window by kunits rather
than one (for some k22n).7fig. 14(a) depicts the average computational
time along with the 95% condence intervals over ve independent runs for the
insurance claim log (considering the j-measure over all activity pairs) for a xed
population size and dierent step sizes. we can see that time complexity reduces
k-fold for a step size of k. this novel idea allows us to speed up concept drift
analysis signicantly with only a minor loss in terms of accuracy.
 0 10000 20000 30000 40000 50000 60000 70000 80000
 0 5 10 15 20 25 30 35 40 45 50time (msecs)
step size
(a)
 1500 2000 2500 3000 3500 4000 4500 5000
 200 300 400 500 600 700 800 900 1000time (msecs)
max sizemin size = 50
min size = 100 (b)
 0 20 40 60 80 100 120 140 160 180
 200 300 400 500 600 700 800 900 1000time (msecs)
max sizemin size = 50
min size = 100 (c)
fig. 14: the inuence of step size and population sizes on the computational time for
change detection and change point search. (a) inuence of step size (b) inuence of
min/max size for change detection (adwin) (c)inuence of min/max size for drift
point search (adwin)
the computational complexity of the adaptive windowing technique depends
on the min/max population size thresholds since the time for each hypothesis
test is dependent on the size of the population.fig. 14(b) and fig. 14(c) depict
the average computational time along with the 95% condence intervals over
ve independent runs for the insurance claim log (considering the j-measure
over all activity pairs) on a xed step size. we can see that the complexity only
depends on the maximum population size: doubling the minimum population
size has hardly any eect whereas the change detection and localization times
depend linearly on the maximum population size.
8 related work
process exibility has been one of the \hotspots" in bpm/wfm research dur-
ing the last two decades, e.g., collections of typical change patterns [11, 19],
extensive taxonomies of various exibility approaches and mechanisms [14, 17],
and classications of process changes [13] have been provided. despite the many
publications on exibility, most process mining techniques assume a process to
be in steady state. a notable exception is the approach by g unther et al. [7],
which attempts at using process mining to provide an aggregated overview of all
changes that have happened so far. however, this approach assumes that change
logs are available, i.e., modications of the workow model are recorded. at this
point in time very few information systems provide such change logs.
this paper builds on [4] where the concept drift problem in process mining
was analyzed for the rst time. since [4], several other techniques have been de-
7this is incorporated in the adaptive windowing technique (the step size parameter)
presented in this paper.
13veloped for dealing with concept drifts in process mining [6,9,20]. carmona and
gavald a [6] have proposed an online technique for detecting process changes.
they rst create an abstract representation of the process in the form of polyhe-
dra using the prexes of some initial traces in the event log. subsequent traces
are sampled and assessed whether they lie within the polyhedra or not. if a
sample lies within the polyhedra, it is considered to be from the same process. if
signicant number of samples lie outside the polyhedra, a process change is said
to be detected. although carmona and gavald a [6] use the adaptive windowing
technique like us, their technique diers from our approach in several ways: (i)
their approach constructs an abstract representation of a process unlike ours
where we consider features characterizing the traces, (ii) their approach is ap-
plicable only for change detection whereas our framework is applicable for both
change (point) detection and change localization (for change localization, refer
to [5]), and (iii) their approach handles only sudden drifts whereas we present
techniques for dealing with sudden, gradual, and multi-order dynamics. further-
more, the tool support provided by the authors does not detect change points
and does not work on logs with multiple process changes, i.e., it doesn't detect
the presence/absence of multiple changes and doesn't report when (the trace in-
dex) process changes have happened. the tool just reports that a change exists
and terminates (if changes exist) and does not terminate if no changes exist. in
contrast, our plug-in can handle multiple process changes and can detect both
the presence of and the points of change in addition to being able to assist in
change localization.
weber et al. [20] attempt at detecting concept changes by comparing mod-
els mined from event logs using a sliding window with a representative ground
truth model. they use a probabilistic deterministic nite automata (pdfa) as a
representation for a process and use statistical tests for detecting if the mined dis-
tribution, or its pdfa representation, has changed signicantly from the ground
truth. one of the challenges with this approach is the number of samples (traces)
required to mine a good representative model that can be compared with the
ground truth model. in contrast, our approach relies on characteristic dierences
in the features dened over traces for change detection.
to our best knowledge, we are the rst to address the notion of gradual and
multi-order changes in process mining.
9 conclusions and future work
although most business processes change over time, contemporary process min-
ing techniques tend to analyze these processes as if they are in steady-state. for
process management it is crucial to discover and understand such concept drifts
in processes. in this paper, we proposed an adaptive windowing technique for
change detection and a novel means of detecting change points automatically.
furthermore, we characterized the notions of gradual and multi-order changes
and proposed techniques for detecting such changes. our initial results show
that the proposed techniques are very promising, i.e., we are able to detect
changes accurately. in this paper, we have considered process changes only from
a control-ow perspective. in the future, we would like to extend this to also
include data/resource perspective changes. furthermore, we would like to eval-
uate our approach using additional real-life case studies where concept drift is
analyzed at runtime thereby providing users immediate diagnostics regarding
recent changes.
14acknowledgments j. martjushev is grateful to archimedes foundation and the min-
istry of education and research for funding his research through the national scholar-
ship program, kristjan jaak.
references
1. van der aalst, w.m.p.: process mining: discovery, conformance and enhancement
of business processes. springer new york inc (2011)
2. van der aalst, w.m.p., rosemann, m., dumas, m.: deadline-based escalation
in process-aware information systems. decision support systems 43(2), 492{511
(2011)
3. bifet, a., gavald a, r.: learning from time-changing data with adaptive win-
dowing. in: proceedings of the siam data mining conference. pp. 443{448 (2007)
4. bose, r.p.j.c., van der aalst, w.m.p., zliobait_ e, i., pechenizkiy, m.: handling
concept drift in process mining. in: caise. lncs, vol. 6741, pp. 391{405.
springer, berlin (2011)
5. bose, r.p.j.c.: process mining in the large: preprocessing, discovery, and diag-
nostics. ph.d. thesis, eindhoven university of technology (2012)
6. carmona, j., gavald a, r.: online techniques for dealing with concept drift in
process mining. in: ida. lncs, vol. 7619, pp. 90{102 (2012)
7. g unther, c.w., rinderle-ma, s., reichert, m., van der aalst, w.m.p.: using pro-
cess mining to learn from process changes in evolutionary systems. international
journal of business process integration and management 3(1), 61{78 (2008)
8. jensen, k., kristensen, l.: coloured petri nets: modelling and validation of con-
current systems. springer (2009)
9. luengo, d., sep ulveda, m.: applying clustering in process mining to find dier-
ent versions of a business process that changes over time. in: bpm workshops
(1). lnbip, vol. 99, pp. 153{158 (2012)
10. ministerie van infrastructuur en milieu: all-in-one permit for physical aspects:
(omgevingsvergunning) in a nutshell (2010)
11. mulyar, n.: patterns for process-aware information systems: an approach based
on colored petri nets. ph.d. thesis, eindhoven university of technology (2009)
12. pechenizkiy, m., bakker, j., zliobait_ e, i., ivannikov, a., k arkk ainen, t.: online
mass flow prediction in cfb boilers with explicit detection of sudden concept
drift. sigkdd explorations 11(2), 109{116 (2009)
13. ploesser, k., recker, j.c., rosemann, m.: towards a classication and lifecycle
of business process change. in: bpmds. vol. 8 (2008)
14. regev, g., soer, p., schmidt, r.: taxonomy of flexibility in business processes.
in: business process modeling, development, and support (2006)
15. sarbanes, p., g. oxley et. al.: sarbanes-oxley act of 2002 (2002)
16. schlimmer, j., granger, r.: beyond incremental processing: tracking concept
drift. in: proceedings of the fifth national conference on articial intelligence.
vol. 1, pp. 502{507 (1986)
17. schonenberg, h., mans, r., russell, n., mulyar, n., van der aalst, w.m.p.: process
flexibility: a survey of contemporary approaches. in: advances in enterprise
engineering i. lnbip, vol. 10, pp. 16{30. springer (2008)
18. sheskin, d.: handbook of parametric and nonparametric statistical procedures.
chapman & hall/crc (2004)
19. weber, b., rinderle, s., reichert, m.: change patterns and change support fea-
tures in process-aware information systems. in: caise. lncs, vol. 4495, pp.
574{588. springer (2007)
20. weber, p., bordbar, b., tino, p.: real-time detection of process change using
process mining. in: imperial college computing student workshop. department
of computing technical report, vol. dtr11-9, pp. 108{114 (2011)
21. widmer, g., kubat, m.: learning in the presence of concept drift and hidden
contexts. machine learning 23(1), 69{101 (1996)
15