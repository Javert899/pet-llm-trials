a reference model for grid architectures and
its analysis
carmen bratosin, wil van der aalst, natalia sidorova, and nikola trˇ cka
department of mathematics and computer science
eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
c.c.bratosin@tue.nl, w.m.p.v.d.aalst@tue.nl, n.sidorova@tue.nl,
n.trcka@tue.nl
abstract. computing and data intensive applications in physics,
medicine, biology, graphics, and business intelligence require large and
distributed infrastructures to address today’s and tomorrow’s challenges.
for example, process mining applications are faced with terrabytes of
event data and computationally expensive algorithms. increasingly, com-
puter grids are used to deal with such challenges. however, despite the
availability of many software packages for grid applications, a good con-
ceptual model of the grid is missing. grid computing is often approached
in an ad-hoc and engineering-like manner. this paper provides formal de-
scription of the grid in terms of a colored petri net (cpn). the cpn can
be seen as a reference model for grids and clariﬁes the basic concepts at a
conceptual level. moreover, the cpn allows for various kinds of analysis
ranging from veriﬁcation to performance analysis. in this paper, we show
that our reference model allows for the analysis of various distribution
strategies using simulation.
keywords: computational grids; grid architecture; colored petri nets.
1 introduction
developments in information technology oﬀer solutions to many complex prob-
lems, but they also lead to new challenges. the idea of collaboration and distri-
bution of work in order to solve a given problem is promising but complicates
matters dramatically. ideas like distributed computing or service oriented ar-
chitectures have been embraced by the scientiﬁc and industrial communities.
grid computing uses available technologies to approach distributed computing
resources linked via networks as one computer.
despite the availability of a wide variety of grid products, there is little con-
sensus on the deﬁnition of a grid and its architecture. in the last decade many
researchers tried to deﬁne what a grid is. some argue that grid computing is
just another name for distributed computing, while others claim that it is a
completely new way of computing. recen tly, in [17], the author presented the
outcome of a survey conducted among grid researchers all over the globe. the
r. meersman and z. tari (eds.): otm 2008, part i, lncs 5331, pp. 898–913, 2008.
c/circlecopyrtspringer-verlag berlin heidelberg 2008a reference model for grid architectures and its analysis 899
main conclusion, on which the most of the respondents agree, is that grid com-
puting is about sharing resources in a distributed environment. this deﬁnition,
however, only oﬀers an idea of what a grid is and not how it is actually working.
in order to classify all the functionalities that a grid system should pro-
vide, [13] describes a grid archit ecture as composed of ﬁve layers: (1) fabric,
providing resources such as computational units and network resources; (2) con-
nectivity layer composed of communication and authentication protocols; (3)
resource layer implementing negotiation, monitoring, accounting, and payment
for individual resources; (4) collective layer focusing on global resource man-
agement; and ﬁnally, (5) the layer composed of user applications . similar clas-
siﬁcation is given in [1] where the architecture is composed of four layers: (1)
resources , composed of the actual grid resources like computers and storage fa-
cilities; (2) network , connecting the resources; (3) middleware layer ,e q u i v a l e n t
to the collective layer of [13], but also including some of the functionality of the
resource layer (e.g. monitoring); and (4) application layer . in both [13] and [1],
as well as in most of the other similar works done by practitioners, the grid archi-
tecture is described only at a very high l evel. the separation between the main
parts of the grid is not well deﬁned. moreover, there is a huge gap between the
architectural models, usually given in terms of informal diagrams, and the actual
grid implementations which use an engineering-like approach. a good conceptual
reference model for grids is missing.
this paper tries to ﬁll the gap between high-level architectural diagrams and
concrete implementations, by providing a colored petri net (cpn) [14] describ-
ing a reference grid architect ure. petri nets [16] are a well established graphical
formalism, able to model concurrency, parallelism, communication and synchro-
nization. cpns extend petri nets with data, time and hierarchy, and combine
their strength with the strength of programming languages. for these reasons,
we consider cpns to be a suitable language for modeling grid architectures. the
cpn reference model, being formal, resolves ambiguities and provides semantics.
its graphical nature and hierarchical composition contribute to a better under-
standing of the whole grid mechanism. moreover, as cpn models are executable
and supported by cpn tools [11] (a powerful modeling and simulation frame-
work), the model can be used for rapid prototyping, and for all kinds of analysis
ranging from model checking to performance analysis.
literature refers to diﬀerent types of grids, based on the main applications
supported. for example, a data grid is used for managing large sets of data
distributed on several locations, and a computational grid focuses on oﬀering
computing power for large and distributed applications. each type of grid has
its particular characteristics making it a non-trivial task to unify them. this
paper focuses only on computational grids. however, we also take into account
some data aspects, such as input and output data of computational tasks and
the duration of data transfer, as these are important aspects for the analysis.
(computational) grids are used in diﬀerent domains ranging from biology and
physics to weather forecasting and business intelligence. although the results
presented in this paper are highly generic, we focus on process mining as an900 c. bratosin et al.
application domain . the basic idea of process mining is to discover, monitor and
improve realprocesses (i.e., not assumed processes) by extracting knowledge
from event logs [4,3]. it is characterized by an abundance of data (i.e., event
logs containing millions of events) and potentially computing intensive analysis
routines (e.g., genetic algorithms for process discovery). however, as many of its
algorithms can be distributed by partitioning the log or model, process mining
is an interesting application domain for grid computing.
at tu/e we are involved in many challenging applications of process min-
ing that could beneﬁt from the grid (a r ecent example is our analysis of huge
logs coming from the “customercare remote services network” of philips
medical systems). we need a good expe rimental framework that allows us to
experiment with diﬀerent scheduling techniques and grid application designs. to
show how our cpn model can be applied in this direction, and that is not only
suitable as a descriptive model, we perform a simulation study. using a small
(but typical) process mining application as input we conduct several simple ex-
periments to see how parameters such as the arrival rate, distribution strategies,
and data transfer, inﬂuence the throughput time of an application and resource
utilization. the simulations are done under the realistic hypothesis that the re-
sources are unreliable, i.e., can appear and disappear at any moment in time.
for the visualization and analysis of the results we use the link of cpn tools
with the spss software [2] and prom framework [5]. note that in this paper we
do not aim to come with a novel middleware design, or invent a new scheduling
policy, but rather to illustrate the powerful capabilities of the model and its
simulation environment.
the rest of the paper is organized as follows. in the remainder of this section
we discuss some related work. in section 2 we present a grid ar chitecture and its
cpn model. the simulation experiment s are presented in section 3. section 4
concludes the paper.
related work. while formal techniques are widely used to describe grid work-
ﬂows [12,6,8], only a few attempts have been made to specify the semantics of a
complete grid. in [15] a semantical model for grid systems is given using abstract
state machines [7] as the underlying formalism. the model is very high level (a
reﬁnement method is only informally proposed) and no analysis is performed.
[18] gives a formal semantic speciﬁcation (in terms of pi-calculus) for dynamic
binding and interactive concurrency of g rid services. the focus is on grid service
composition.
in order to analyze grid behavior several researchers developed grid simulators.
(the most notable examples are simgrid [10] and gridsim [9].) these simulators
are typically java or c implementations, meant to be used for the analysis of
scheduling algorithms. they do not provide a clear reference model as their
functionality is hidden in code. this makes it diﬃcult to check the alignment
between the real grid and the simulated grid.
in [8] we proposed to model grid workﬂows using cpns, and we also used
process mining as a running example. in that paper, however, we fully covered
only the application layer of the grid; for the other layers the basic functionalitya reference model for grid architectures and its analysis 901
was modeled, just to close the model and make the analysis possible. we also
completely abstracted from data aspects.
2 modeling a grid with cpns
in this section we present a grid architect ure and give its semantics using colored
petri nets.1the proposed architecture is based on an extensive review of litera-
ture. as mentioned in the introduction, cpns are graphical and have hierarchy,
so we use the cpn model itself to explain the architecture.
the main page of the model is given in figure 1. it shows the high-level view
of the grid architecture. as seen in the ﬁ gure, the grid consists of three layers:
(1) the resource layer ,( 2 )t h e application layer , and (3) the middleware .t h e
application layer is where the users describe the applications to be submitted
to the grid. the resource layer is a widely distributed infrastructure, composed
of diﬀerent resources linked via intern et. the main purpose of the resources
is to host data and execute jobs. the middleware is in charge of allocating
resources to jobs, and of other management issues. the three layers communicate
by exchanging messages, modeled as (interface) places in cpns.
user applications consist of jobs, atomic units of work. the application layer
sends job descriptions to the middleware, together with the locations of the
required input data. it then waits for a message saying whether the job was
ﬁnished or it was canceled. when it receive s a job description the middleware
tries to ﬁnd a resource to execute this job. if a suitable resource is found, it is
ﬁrst claimed and then the job is sent to it. the middleware monitors the status of
the job and reacts to state changes. the resource layer sends to the middleware
the acknowledgments, and the information on the current state of resources, new
data elements, and ﬁnished jobs. when instructed by the application layer, the
middleware removes the data that is n o longer needed from the resources.
we now zoom-in the submodules in figure 1 and present each layer and its
dynamics in more detail.
2.1 application layer
the upper level of the grid architecture is composed of user applications. these
applications deﬁne jobs to be executed on the resources. since these jobs may
causally depend on one another, the application layer needs to specify the “ﬂow
of work”. therefore, we use the term grid workﬂow to refer to the processes
speciﬁed at the application layer. there may be diﬀerent grid workﬂows using
the same infrastructure, and there may be multiple instances of the same grid
workﬂow, referred to as cases.
the purpose of a grid architecture is to oﬀer users an infrastructure to ex-
ecute complex applications and at the same time hide the complexity of the
resources. this means that the user should not be concerned with, e.g., resource
1we assume that the reader is familiar with the formalism; if otherwise, [14] provides
a good introduction.902 c. bratosin et al.
cpn'replications.nreplications 10
cpn'replications.nreplications 10
resources
resourcesmiddlewaremiddlewareapplicationlevelapplicationlevel
registerdataforres
concreteresregisterdataack
ackdatareg
claimresponse
claimresponse
claimrequest
claimregisterdata
datacataloguecanceljob
job
dataremoval
resdatalistremovedata
datanamelist
concreteresinformation
concretereslisttfinished job
joballocatedsentjob
joballocatedandtransferlistfinishedjob
jobjob
jobapplicationlevel
middleware
resources
fig.1. grid architecture
discovery or data movement. in order to achieve this goal the application layer
provides a grid workﬂow description language that is independent of resources
and their properties. deﬁned workﬂows c an therefore be (re)used on diﬀerent
grid platforms.
in our case, cpns are themselves use d to model grid workﬂows. however,
they are expected to follow a certain pattern. the user describes each job as a
tuple ( id,ap,od )w h e r e idis the set of input data, apis the application to
be executed, and odis the set of output data. every data element is represented
by its logical name, leaving the user a possibility to parameterize the workﬂow
at run-time with actual data. all data is case related, i.e. if the user wants to
realize multiple experiments on the same data set, the data is replicated and
the dependency information is lost. it is assumed that the set idcontains only
the existing data, i.e. that at least one resource has this data (e.g. created by
previous jobs). it is also assumed that apis an existing application at the level
of resources.
in figure 2 we present the cpn model of the application layer. in this case
the layer consists of only one workﬂow, but multiple cases can be generated by
thegencases module. every workﬂow is preceded by the substitution transition
registerdata . this transition, as the name imp lies, registers for every new case
the location of the input data required for the ﬁrst job. the workﬂow from
figure 2 thus needs a “log” and a “filterfile” .w h e na l lt h ej o b si nac a s ea r e
executed, the application layer sends a message to the middleware instructing
that all the data of the case is deleted (transition garbage removal ).
in figure 3, an example of a workﬂow i s presented, describing a simple, but
very typical, process mining experiment. the event log ( “log” ) is ﬁrst ﬁltered
using a ﬁlter described in “filter file” . then, the obtained “filtered log” isa reference model for grid architectures and its analysis 903
c
[{caseid=c,dataid=""}]c
workflowworkflowgencases
gencases
registerdata
registerdatagarbage
removal
registerdataack
inackdataregregisterdata
out
datacatalogue
canceljob
injobfilter"filterfile"
dataidlog"log"
dataid
p2
caseidp1
caseid
removedata
out
datanamelistend
caseid
start
caseid
gen
gentaskid
job
outjobfinishedjob
in
jobin
out
out
inout
inregisterdatagencases
workflow
fig.2. application layer
conformancechecking
conformancecheckingmining
miningfilter
filterp3
caseidp2
caseidccresult"ccresult"
dataid
pn"pn"
dataid
finishedjob
in
job job
outjobp1
in
caseidlog
i/o"log"
dataid
gen
i/ogentaskidcanceljobi/o
jobfilter
i/o"filterfile"
dataid
p4
outcaseidflog"flog"
dataid
outi/o
i/o
i/oi/o
in
outinfiltermining conformancechecking
fig.3. workﬂow example
mined and the result of the mining algorithm ( “pn” ) is assessed by using the
conformance checker (to see, e.g. how m any traces from the log can be repro-
duced by the mined model).
all jobs follow the pattern from figure 4. each logical data name (from id
andod) is modeled as a distinct place. in this way we can easily observe the data
dependencies between jobs. these dependencies can be used in an optimization
algorithm to decide whether some data is no longer needed, or when some data904 c. bratosin et al.
p
jobjobidd2d
{
  caseid=c,
  taskid=t
}c
job
{
  caseid=c,
  taskid=t+1
}getcase(jobid)
{caseid=c, taskid=t}
jobidp
canceljob[getcase(jobid) = getcaseofjob(job)]end
job[jobid=(#jobid(job))]
canceljob
i/ojobp1in
caseid
finishedjob
in
job
job
outjobgen
i/ogentaskidend
outcaseidpni/o
dataidlogi/o
dataidptypeplg2
plugintype
runjob
jobidi/o i/o
out
i/o
outinin
i/o{
 jobid={
             caseid=c,
             taskid=t
            },
 plugintype=p,
 inputdatalist=[
                        {
                          dataid=d,
                          copymove=true,
                          del=true
                        }
                       ],
 outputdatalist=[d2]
}start
job
fig.4. job example
is more suitable to be replicated. the plugintype place contains the information
on which application to execute at the resource level (the parameter apfrom the
above). in our case this place contains the name of a process mining algorithm.
every job starts by receiving a unique i d and sending its description to the
middleware. it ends with either a prope r termination (the job was executed and
required output data was created), or a cancelation (the middleware can not ﬁnd
a resource to execute the job; in our model that only happens when some input
data does no longer exist on any grid reso urce). the applicat ion layer cancels
the whole case if at least one of the jobs gets canceled.
2.2 middleware
the link between user applications and r esources is made via the middleware layer
(figure 5). this layer contains the intelligence needed to discover ,allocate ,a n d
monitor resources for jobs. we consider just one centralized middleware, but our
modelcanbeeasilyextendedtoadistributed middleware.wealsorestrictourselves
to a middleware working according to a “just-in-time” strategy, i.e., the search for
anavailableresourceisdoneonlyatthemo mentajobbecomesavailable.ifthereare
multiple suitable resources, an allocation policy is applied. look ahead strategies
and advanced planning techniques are not considered in this paper.
the place globalresinformation models an information database containing
the current state of resources. the middleware uses this information to match
jobs with resources, and to monitor the behavior of resources. the database
is updated based on the information r eceived from the resource layer and the
realized matches.
datacatalog isadatabasecontaininginformationaboutthelocationofdataele-
mentsandtheamountofstorageareathattheyoccupy.thisinformationisalsouseda reference model for grid architectures and its analysis 905
monitoringmonitoring
scheduling
schedulingjobreceiving
jobreceivingfault-handling
fault-handlingdata management
datamanagement
registerdataforres
inconcreteresregisterdataack
outackdatareg
failedjobs
jobtoschedlist
claimresponse
in
claimresponse
claimrequest
outclaimjob
injobregisterdata
in
datacatalogue
canceljob
outjob
finished job
in
joballocatedsent job
out
joballocatedandtransferlistfinishedjob
outjobsent for 
garbage removal
outresdatalistremovedata
indatanamelist
datacatalogue[]
datacatalogue
concreteresinformation
in
concretereslisttglobalresinformationrl
reslist
jobstoschedule[]
jobtoschedlist
ininout
out
out
inoutin
in
outinout
indatamanagement
fault-handling
schedulingmonitoring
estimation
estparamknowledge 
databasejobreceiving
fig.5. middleware layer906 c. bratosin et al.
intheschedulingprocess.thetransition datamanagement modelstheregistration
of data for new cases and the removal of records from the catalogue. a message
containing a list of “garbage data” can be sent to the resources at any time.
when a job is received ( jobreceiving module), the middleware ﬁrst extends
its description with an estimate of ho w much storage area is needed. a user-
provided knowledge database is used for this task. next, the job is added to the
jobs pool list, ordered based on the arrival time. if multiple jobs arrive at the
same time, the order is non-deterministic. the scheduling process now starts
(figure 6), according to the chosen policy.
scheduling is done in two steps. first, a match between a resource and a
job is found. the matching phase succeeds is there is a resource with a free
cpu and enough free space to store the input and the output data. second, the
found resource is claimed. this step is necessary because the matching process
is based on a (possibly outdated) local copy of the state of the resources. the
middleware sends a claim request to the a llocated resource in order to check that
its resource image is still correct. if the claim is successful, the middleware sends
the job description to the resource, extended with the list of data that need to
be obtained from other resources (using the so-called transfer list). if the claim
fails, the middleware puts the job back into the pool.
after the job was sent to the resource, the middleware monitors the resource
state. basically, it listens on the signa l received from the resource layer. each
time a message is received, the middlewar e compares the received state with its
local copy. since these messages can be outdated (e.g., when a resource sends
a message just before a job arrives), t he middleware reacts using a timeout
mechanism. a resource is considered una vailable if no information is received
from it for a given period of time, and a job is considered canceled if no message
related to the job is received for several consecutive updates.
removejobfromresid(rl,rid,job2sched,catalogue)
rlnewdata(catalogue,rid,job2sched)
{job={resid=rid,job=job2sched},
 response=b}{
  resid=rid,
  job=job2sched,
  transferlist=createtransferlist(rid,job2sched,catalogue)
}
job2schedlist
takeres(rl,rid,job2sched,catalogue)
job2schedlistcatalogue
catalogue
addjob(job2sched,job2schedlist)rl{resid=rid,job=job2sched}{job={resid=rid,job=job2sched},
 response=b}
deljob(job2sched,job2schedlist){resid=rid,job=job2sched}
{resid=rid,job=job2sched}sch{
  resid=rid,
  job=job2sched
}
match[existrestoalloc(rl,catalogue,job2schedlist,sch)]claimsucceed
claimfail
[b=false]sent job
outjoballocatedandtransferlist
datacatalogue
i/o
datacatalogue
globalresinformation
i/oreslistclaimrequest
outclaimclaimresponse
inclaimresponsejobs
pool
i/ojobtoschedlist
scheduling
policyscheduler
schedulermatched
joballocatedi/o in
out
i/oi/oout
catalogue[b=true]
fig.6. scheduling pagea reference model for grid architectures and its analysis 907
when the middleware receives the message that a job is ﬁnished, it updates the
global resource information database and forwards this message to the application
layer.
jobs can fail at the resource layer. therefore, a fault handling mechanism
is deﬁned (transition fault-handling ). when a job fails, the middleware tries
to re-allocate it. however, if the necessary input data is no longer available at
the resource level, the middleware is unable to execute the job and it sends a
message to the application layer that the job is canceled.
2.3 resource layer
every resource is described in terms of t he available computing power (expressed
in number of cpus), the amount of storage area available for hosting data, the
list of supporting applications, and the set of running and allocated jobs. the
resources are unaware of job issuers and of job dependencies. every job is exe-
cuted on just one resource. however, resources can work on multiple jobs at the
same time. figure 7 presents the conceptual representation of the functionalities
of the resource layer in terms of cpns.
the set of resources is assumed to be ﬁxed, but resources are considered
unreliable. they can app ear/dissapear at any moment in time, except when
transferring data. transition resource dynamics , governed by a stochastic clock,
simulates the possibility that a resource becomes unavailable. when this happens
all the data is lost and all running jobs are aborted on this resource.
after a successful match by the middleware, the transition claim is used to rep-
resents a guarantee that the allocated resource can execute the job. recall that
this phase is necessary because the alloca tion at the middleware level is based
on a possibly outdated information of the state of the resources. if the claiming
succeeds, one cpu and the estimated nece ssary storage area are reserved at the
resource. the resource is now ready to perform the job, and is waiting for the full
job description to arrive. the job description also contains the locations of the in-
put data and the information on which application to execute. the substitution
transition transfer models the gathering of necessary input data from other re-
sources. if the input data is no longer present on a source node, the job is aborted.
if the transfer starts, we assume that it ends successfully. note that the reserved
cpu remains unoccupied during the transfer. when all the input data is present
on the allocated resource, the job starts executing.
the resources can always oﬀer their capabilities and, so, the resource layer
constantly updates the middleware on the current state of the resources. there
are two types of updates sent: (1) recognition of new data (transferred data, or
data generated by job execution) and (2) signals announcing to the middleware
that a resource is still available. while the former is sent on every change in the
resource status, the latter info is periodical.
remove data transition models the fact that any data can be deleted from
a resource at the request of the middlew are. these requests can arrive and be
fulﬁlled at any moment in time.908 c. bratosin et al.
rid@+changeresstatetime(reslist,rid)
ridreslistupdateavailability(reslist,rid){resid=rid,typeup=job}
takecres(reslist,rid,job2sched)reslist
{job = {job=job2sched,resid=rid},
response = claim (rid,reslist,job2sched)}{
  job=job2sched,
  resid=rid
}
{
  resid=rid,
  job=job2sched,
  transferlist=trl
}
dnl
removedatafromres(reslist,dnl)reslistaddjobtores(reslist,rid,job2sched)
reslist{
  resid=rid,
  job=job2sched,
  transferlist=trl
}
resource 
dynamicssendinformation
sendinformation
run
runtransfer
transferclaim
removedatareceive
jobregisterdataforres
outconcreteres
triggerupdate
triggerupdateclaimresponse
out
claimresponseclaimrequest
inclaim
concreteresinformation
outconcretereslistt
waittransfer
joballocatedandtransferlistresourcescrl
concretereslist
clockrclock
rclock
sent for 
garbage removalin
resdatalistsent job
injoballocatedandtransferlist
finished jobs
outjoballocatedoutin
inoutin
outout
transfer
runsendinformation
fig.7. resource layera reference model for grid architectures and its analysis 909
the reference model presented in this section oﬀers a clear view and a good
understanding of our grid architecture. the next section shows how we can use
this model to also analyze the behavior of the grid.
3 simulation analysis of the cpn model
in order to measure performance of the grid we perform an extensive simulation
study on the reference model. the simulations are done using the capabilities of
cpn tools. we use the spss software [2] and prom framework [5] to visualize
and analyze the results. spss is a known package for statistical analysis; prom is
a powerful, extendable and open-source, framework supporting model discovery,
analysis, and conversion. the purpose of this section is mostly to show the reader
what kind of analysis can be done using the model, and to illustrate the powerful
capabilities of the environment.
our main goal is to see how does the grid behave under the heavy load of
process mining applications. the measures of interest are the average throughput
timeof application (user view), and the average utilization of resources (sys-
tem view). we ﬁrst thoroughly explore the behavior of the model based on the
simulation data. then, we try to improve our scheduling policy by changing the
data transfer strategy.
(a) cpu load
 (b) storage area occupancy
(c) throughput time
fig.8. simulation results910 c. bratosin et al.
the testbed for our experiment is as follows. we consider a resource pool con-
taining 6 identical resources, each having 3 cpus and a storage area of 1000gb.
the resources are unreliable, and can appear/disappear at any moment. their
dynamics is governed by a uniform distribution. we assume that the resources
are used exclusively for our process mining applications. every resource can
perform the three process mining operations, i.e. filtering ,mining andconfor-
mance check . all user applications follow the workﬂow structure from figure 3.
the individual cases arrive according to an exponential distribution, and have
uniformly distributed input ﬁle (i.e. of the log and the ﬁlter ﬁle) sizes . we take
the scheduling policy to be ﬁrst-ready-ﬁrst-served , but the scheduling algorithm
gives priority to the more advanced cases, i.e., conformance check jobs have
higher priority than filtering jobs. the motivation for this comes from the fact
that garbage removal takes place only at case completion.
the performance measures in question are examined for job arrival rates of
2,4,6,8, and 10, jobs per 100 time units. we perform 10 independent simula-
tions for each of the examined conﬁgurations, and we calculate 95% conﬁdence
intervals. each simulation run is limited to 2000 jobs.
in our ﬁrst calculation we assume that data required for a job is always copied
to the allocated resource, and never move d (i.e., it stays on the source resource).
this strategy, on the one side, overloads the grid with a lot of replicated data
and, therefore, reduces performance. on the other side, however, it gives the
middleware more options when allocating a job, thus improving the performance.
figure 8 shows the evolution of the performance parameters when the arrival
rate is varied. figures 8(a) and 8(b) show the evolution of the resource utilization,
in terms of the number of cpus used (called cpu load when in percentage)
and the amount of storage area occupied; figure 8(c) shows the evolution of
fig.9. performance sequence diagram showing the execution patternsa reference model for grid architectures and its analysis 911
fig.10. bottlenecks found with performance analysis with petri nets plugin and
fuzzy miner
fig.11. dot plot plugin showing the transfer event frequency
the throughput time. we observe that when the cpu load is less then 80%,
the throughput time is around 200 time units for all the arrival rates. when
the arrival rate is around 8 /100, the resource load stabilizes to around 100%,
but the throughput time starts to increase swiftly.
to ﬁnd bottlenecks we do a more detailed inspection using prom. we ﬁrst ap-
ply the performance sequence diagram plugin, which gives us the result shown
in figure 9. the chart represent the individual execution patterns for the case
of the highest arrival rate. we observe that the execution time for ﬁltering (in-
cluding the queueing time) is higher than for the other jobs. as the resource
occupation is very high, the newly arrived cases wait long to be scheduled. the
patterns 2 and 3 are the cancelation executions. the execution time value for
canceled jobs is higher than for those wi th a normal execution (pattern 1). this
is because the middleware cancels jobs based on a time out mechanism. similar
conclusions can be made by using the performance analysis with petri nets
plugin, and the fuzzy miner plugin, as seen in figure 10. using the dot plot
plugin (figure 11) we observe that when the arrival rate is 1 /10, the frequency
of data transfer is signiﬁcantly higher than for the lower arrival rates. as this
arrival rate is very high, after a job is ﬁnished the next job of the same case is
unlikely to be scheduled on the same resource.
in our second experiment we change the data transfer strategy, and no longer
replicate the data but move it. figure 12 shows the conﬁdence intervals for the912 c. bratosin et al.
(a) cpu load
 (b) storage area occupancy
(c) throughput time
fig.12. comparison between the moving data strategy and replication strategy
two strategies, when the arrival rate is 1 /10. with the new strategy storage
area occupation is decreased by half, and there is a slight improvement in the
throughput time.
4 conclusions
in this paper, we presented a reference model for grid architectures in terms of col-
ored petri nets, motivated by the absence of a good conceptual deﬁnition for the
grid. our model is formal and oﬀers a good understanding of the main parts of
the grid, their behavior and their interactions. to show that the model is not only
suitable for deﬁnition purposes, we conducted a simulation experiment. under the
assumption that the grid is used for process mining applications, we compared the
performance of two scheduling strategies, diﬀerent in the way they handle data
transfer.
the grid model is the starting point in the developing of both an experimental
simulation framework and a real grid a rchitecture to support process mining
experiments.
references
1. grid architecture,
http://gridcafe.web.cern.ch/gridcafe/gridatwork/architecture.htmla reference model for grid architectures and its analysis 913
2. spss software, http://www.spss.com/
3. aalst, w., reijers, h., weijters, a., van dongen, b., medeiros, a., song, m., ver-
beek, h.: business process mining: an industrial application. information sys-
tems 32(5), 713–732 (2007)
4. aalst, w., weijters, a., maruster, l.: workﬂow mining: discovering process mod-
els from event logs. ieee transactions on knowledge and data engineering 16(9),
1128–1142 (2004)
5. van der aalst, w., van dongen, b., g¨ unther, c.w., mans, r., de medeiros, a.,
rozinat, a., rubin, v., song, m., verbeek, h.e., weijters, a.: prom 4.0: com-
prehensive support for real process analysis. in: kleijn, j., yakovlev, a. (eds.)
icatpn 2007. lncs, vol. 4546, pp. 484–494. springer, heidelberg (2007)
6. alt, m., gorlatch, s., hoheisel, a., pohl, h.-w.: a grid workﬂow language using
high-level petri nets. in: wyrzykowski, r., dongarra, j., meyer, n., wa´ sniewski,
j. (eds.) ppam 2005. lncs, vol. 3911, pp. 715–722. springer, heidelberg (2006)
7. b¨orger, e., st¨ ark, r.f.: abstract state machines. a method for high-level system
design and analysis. springer, heidelberg (2003)
8. bratosin, c., van der aalst, w.m.p., sidorova, n.: modeling grid workﬂows with
colored petri nets. in: proceedings of the eighth workshop on the practical use
of coloured petri nets and cpn tools (cpn 2007). daimi, vol. 584, pp. 67–86
(october 2007)
9. buyya, r., murshed, m.m.: gridsim: a toolkit for the modeling and simulation of
distributed resource management and scheduling for grid computing. concurrency
and computation: practice and experience 14(13-15), 1175–1220 (2002)
10. casanova, h.: simgrid: a toolkit for the simulation of application scheduling. in:
ccgrid 2001: proceedings of the 1st international symposium on cluster com-
puting and the grid, washington, dc, usa, p. 430. ieee computer society, los
alamitos (2001)
11. cpn group, university of aarhus, denmark. cpn tools home page,
http://wiki.daimi.au.dk/cpntools/
12. feng, z., yin, j., he, z., liu, x., dong, j.: a novel architecture for realizing grid
workﬂow using pi-calculus technology. in: zhou, x., li, j., shen, h.t., kitsure-
gawa, m., zhang, y. (eds.) apweb 2006. lncs, vol. 3841, pp. 800–805. springer,
heidelberg (2006)
13. foster, i.: the anatomy of the grid: enabling scalable virtual organizations. in:
proceedings of first ieee/acm international symposium on cluster computing
and the grid, 2001, pp. 6–7 (2001)
14. jensen, k.: coloured petri nets - basic concepts, analysis methods and practical.
springer, heidelberg (1992)
15. nemeth, z., sunderam, v.: a formal framework for deﬁning grid systems. in: pro-
ceedings of the second ieee/acm international symposium on cluster comput-
ing and the grid, ccgrid 2002, berlin (2002)
16. reisig, w.: system design using petri nets. in: requirements engineering, pp. 29–
41 (1983)
17. stockinger, h.: deﬁning the grid: a snapshot on the current view. the journal of
supercomputing 42(1), 3–17 (2007)
18. zhou, j., zeng, g.: describing and reasoning on the composition of grid services
using pi-calculus. in: cit 2006: proceedings of the sixth ieee international con-
ference on computer and information technology (cit 2006), washington, dc,
usa, pp. 48–54. ieee computer society, los alamitos (2006)