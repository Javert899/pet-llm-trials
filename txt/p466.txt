visual support for work assignment in
process-aware information systems
massimiliano de leoni1, w.m.p. van der aalst2;3, and a.h.m. ter hofstede3
1sapienza - universit` a di roma, rome, italy
deleoni@dis.uniroma1.it
2eindhoven university of technology, eindhoven, the netherlands
w.m.p.v.d.aalst@tue.nl
3queensland university of technology, brisbane, australia
a.terhofstede@qut.edu.au
abstract. process-aware information systems ranging from generic
workﬂow systems to dedicated enterprise information systems use work
lists to oﬀer so-called work items to users. the work list handlers typi-
cally show a sorted list of work items comparable to the way that e-mails
are presented in most e-mail programs. since the work list handler is the
dominant interface between the system and its users, it is worthwhile to
provide a more advanced graphical interface that uses context informa-
tion about work items and users. this paper uses the “map metaphor” to
visualise work items and resources (e.g., users) in a sophisticated man-
ner. moreover, based on “distance notions” work items are visualised
diﬀerently. for example, urgent work items of a type that suits the user
are highlighted. the underlying map and distance notions may be of
a geographical nature (e.g., a map of a city of oﬃce building), but may
also be based on the process design, organisational structures, social net-
works, due dates, calenders, etc. the approach presented in this paper
is supported by a visualisation framework implemented in the context
of yawl. the framework is set up in such a way that it can easily be
combined with other workﬂow systems.
keywords: process-aware information systems, work list visualisation,
yawl
1 introduction
originally, process-aware information systems (paiss) [1] were mainly applied
in the context of administrative processes. later their application was extended
to cross-organisational processes. currently, paiss are starting to be used for
more ﬂexible and/or pervasive processes, e.g., disaster management scenarios [2].
independently on the application domain and underlying technology, a pais
is driven by some process model. the model may be implicit or hidden, but the
system supports the handling of cases in some (semi-)structured form. paiss
have also in common that they oﬀer work to resources (typically people). the
elementary pieces of work are called work items , e.g., “approve travel request
xyz1234”. these work items are oﬀered to the users by the so-called worklist handler . this component takes care of work distribution and authorisation
issues. typically, paiss use a so-called “pull mechanism”, i.e., work is oﬀered to
all resources that qualify and the ﬁrst resource to select it will be the only one
executing it. to allow users to “pull the right work items in the right order”,
basic information is provided, e.g., task name, due date, etc. however, given
the fact that the work list is the main interface of the pais with its users it
seems important to provide support that goes beyond a sorted list of items. if
work items are selected by less qualiﬁed users than necessary or if users select
items in a non-optimal order, then the performance of the overall process is
hampered. assume the situation where multiple resources have overlapping roles
and authorisations and that there are times where work is piling up (i.e., any
normal business). in such a situation the questions listed below are relevant.
–“what is the most urgent work item i can perform?”
–“what work item is, geographically speaking, closest to me?”
–“is there another resource that can perform this work item that is closer to
it than me?”
–“is it critical that i handle this work item or are there others that can also
do this?”
–“how are the work items divided over the diﬀerent departments?”
to our knowledge, commercial as well as open source paiss present work
lists simply as a list of work items each with a short textual description. some
products sort the work items in a work list using a certain priority scheme
speciﬁed at design time and not updated at run time. to support the user in a
better way and assist her in answering the above questions, we use maps . a map
can be a geographical map (e.g., the map of a university’s campus). but other
maps can be used, e.g., process schema’s, organisational diagrams, gantt charts,
etc. work items can be visualised by dots on the map. by not ﬁxing the type of
map, but allowing this choice to be conﬁgurable, diﬀerent types of relationships
can be shown thus providing a deeper insight into the context of the work to be
performed.
work items are shown on maps. moreover, for some maps also resources can
be shown, e.g., the geographical position of a user. besides the “map metaphor”
we also use the “distance metaphor”. seen from the viewpoint of the user some
work items are close while others are far away. this distance may be geographic,
e.g., a ﬁeld service engineer may be far away from a malfunctioning printer at
the other side of the campus. however, many other distance metrics are possible.
for example, one can support metrics capturing familiarity with certain types
of work, levels of urgency, and organisational distance. it should be noted that
the choice of metric is orthogonal to the choice of map thus providing a high
degree of ﬂexibility in context visualisation. resources could for example opt to
see a geographical map where work items, whose position is calculated based on
a function supplied at design time, display their level of urgency.
this paper proposes diﬀerent types of maps and distance metrics. moreover,
the framework has been implemented and integrated in yawl.4yawl is an
4www.yawlfoundation.orgopen source workﬂow system based on the so-called workﬂow patterns. however,
the framework and its implementation are set-up in such a way that it can easily
be combined with other paiss.
the paper is structured as follows. section 2 discusses the state of the art in
work list visualisation in paiss, whereas section 3 provides a detailed overview
of the general framework. section 4 focusses on the implementation of the frame-
work, highlighting some design choices in section 5 the framework is illustrated
through a case study. section 6 summarises the contributions of the paper and
outlines avenues of future work aimed.
2 related work
little work has been conducted in the ﬁeld of work list visualisation. visualisa-
tion techniques in the area of pais have predominantly been used to aid in the
understanding of process schemas and their run time behaviour, e.g. through
simulation [3] or process mining [4]. although the value of business process visu-
alisation is acknowledged, both in literature [5–8] and industry, little work has
been done in the context of visualising work items.
the aforementioned body of work does not provide speciﬁc support for
context-dependent work item selection. this is addressed though in the work
by brown and paik [9], whose basic idea is close to the proposal of this paper.
images can be deﬁned as maps and mappings can be speciﬁed between work
items and these maps. work items are visualised through the use of intuitive
icons and the colour of work items changes according to their state. however,
the approach chosen does not work so well in real-life scenarios where many work
items may have the same position (especially in course-grained maps) as icons
with the same position are placed alongside each other. this may lead to a sit-
uation where a map is completely obscured by its work items. in our approach,
these items are coalesced in a single dot of which the size is proportionate to
their number. by gradually zooming in on such a dot, the individual work items
cam become visible again. in addition, in [9] there is no concept similar to our
distance notion, which is an ingredient that can provide signiﬁcant assistance
with work item selection to resources. finally, the work of brown and paik does
not take the visualisation of the positions of resources into account.
also related is the work presented in [10], where proximity of work items is
considered without discussing their visualisation.
most paiss present work lists as a simple enumeration of their work items,
their textual descriptions, and possibly information about their priority and/or
their deadlines. this holds both for open source products, as e.g. jbpm5and
together workﬂow6, as for commercial systems, such as sap netweaver7and
5jbpm web site - http://www.jboss.com/products/jbpm
6together workﬂow web site - http://www.together.at/together/prod/tws/
7netweaver web site - http://www.sap.com/usa/platform/netweaverflower8. an exception is tibco’s iprocess suite9which provides a richer type
of work list handler that partially addresses the problem of supporting resources
with work item selection. for example, the work list handler can show the lengths
of the work queues of other resources or position of work item on a geographic
map at their location of execution. the iprocess suite also supports a kind
of look-head in the form of a list of “predicted” work items and their start
times. one can also learn about projected deadline expirations and exception
ﬂows by expected durations speciﬁed at design time for the various tasks. our
visualisation framework is more accurate as it can take actual execution times of
work items of a task into account through the use of log ﬁles when considering
predictions for new work items of that task. basically, the iprocess suite provides
support for some speciﬁc views (geographical position, deadline expiration) but
these are isolated from each other. our approach generalises over the type of
maps (not just geographic) and unlike the iprocess suite it is able to support
multiple types of maps at the same time. the iprocess suite is based on google
maps while our framework does not rely on an external service for handling
maps and positioning work items.
3 the general framework
the proposed visualisation framework is based on a two-layer approach: (1) maps
and (2) the visualisation of work items based on a distance notion. a work item
is represented as a dot positioned along certain coordinates on a background
map. a map is meant to capture a particular perspective of the context of the
process. since a work item can be associated with several perspectives, it can
be visualised in several maps (at diﬀerent positions). maps can be designed as
needed. when the use of a certain map is envisaged, the relationship between
work items and their position on the map should be speciﬁed through a function
determined at design time. table 1 gives some examples of context views and
the corresponding work item mapping.
several active “views” can be supported whereby users can switch from one
view to another. resources can (optionally) see their own position on the map
and work items are coloured according to the value of the applicable distance
metric. additionally, it may be helpful to show executing work items as well as
the position of other resources. naturally, these visualisations are governed by
the authorisations that are in place.
our framework assumes the generic lifecycle model as described in [11]. first,
a work item is created indicating it is ready for distribution. the item is then
oﬀered to appropriate resources. a resource can commit to the execution of the
item, after which it moves to the allocated state. the start of its execution leads
it to the next state, started , after which it can successfully complete , it can be
suspended (and subsequently resumed ) or it can failaltogether. at run time a
workﬂow engine informs the framework about the lifecyle states of work items.
8flower web site - http://global.pallas-athena.com/products/bpmflower product/
9iprocess suite web site - http://www.tibco.com/software/business process management/table 1. examples of maps and mappings.
process context view possible map and mapping
the physical environment
where tasks are going to be
performed.a real geographical map (e.g., google maps). work items are placed
where they should be performed and resource are placed where they
are located.
the process schema of the
case that work items belong
to.the process schema is the map and work items are placed on top of
tasks that they are an instance of.
deadline expiration of work
items.the map is a time-line where the origin is the current time. work
items are placed on the time-line at the latest moment when they can
start without their deadline expiring.
the organisation that is in
charge of carrying out the pro-
cess.the map is an organizational chart. work items are associated with
the role required for their execution. resources are also shown based
on their organizational position.
the materials that are needed
for carrying out work items.the map is a multidimensional graph where the axes are the materials
that are needed for work item execution. let us assume that materials
aandbare associated with axes xandyrespectively. in this case, a
work item is placed on coordinates ( x; y) if it needs a quantity of xof
material aand a quantity yof material b.
costs versus beneﬁts in exe-
cuting work items.in this case, the axes represent “revenue” (the amount of money re-
ceived for the performance of work items) and “cost” (the expense
of their execution). a work item is placed on coordinates ( x; y) if the
revenue of its execution is xand its cost is y. in this case one is best
oﬀ executing work items close to the xaxis and far from the origin.
3.1 fundamentals
in this section the various notions used in our framework, e.g. work item and
resource, are deﬁned formally.
deﬁnition 1 (work item). a work item wis a tuple (c, t, i, y, e, l), where:
–cis the identiﬁer of the case that wbelongs to.
–tis the identiﬁer of the task of which wis an instance.
–iis a unique instance number.
–yis the timestamp capturing when wmoved to the “oﬀered” state.
–eis the (optional) deadline of w.
–lrepresents the (optional) gps coordinates where wshould be executed.
dimensions yandlmay be undeﬁned in case work item wis not yet oﬀered or no
speciﬁc execution location exists respectively. the evalue concerns timers which
may be deﬁned in yawl processes. a process region may be associated with a
timer. when the timer expires, the work items part of the region are cancelled.
note that a work item can potentially be a part of more than one cancellation
region. in these cases, eis assumed as the latest possible completion time with
respect to every cancellation region the work item is part of.
deﬁnition 2 (resource). a resource ris a pair (j, l), where:
–jis the identiﬁer of the resource.
–lrepresents the (optional) gps coordinates where the resource is currently
located.
the notation wxis used to denote the projection on dimension xof work item w,
while the notation ryis used to denote the projection on dimension yof resourcer. for example, wtyields the task of which work item wis an instance. work
items w0andw00are considered to be siblings iﬀw0
t=w00
t. the set coordinates
consists of all possible coordinates. elements of this set will be used to identify
various positions on a given map.
deﬁnition 3 (position function). let w and r be the set of work items and
resources. let m be the set of available maps. for each available map m2m,
there exists a function positionm:w[r6!coordinates which returns the
current coordinates for work items and available resources on map m.
for a map m2m, the function positionmmay be partial, since some elements
ofwand/or rmay not have an associated position. consider for example the
case where a work item can be performed at any geographical location or where
it does not really make sense to associate a resource with a position on a certain
map. as the various attributes of work items and resources may vary over time
it is important to see the class of functions positionmas time dependent.
to formalise the notion of distance metric, a distance function is deﬁned
for each metric that yields the distance between a work item and a resource
according to that metric.
deﬁnition 4 (distance function). let w and r be the set of work items and
resources. let d be the set of available distance metrics. for each distance metric
d2d, there exists a function distance d:w£r![0;1]that returns a number
in the range [0,1] capturing the distance between work-item w2wand resource
r2rwith respect to metric d.10
given a certain metric dand a resource r, the next work item rshould perform
is a work item wfor which the value distance d(w; r) is the closest to 1 among
all oﬀered work items.
3.2 available metrics
in table 2 a number of general-purpose distance metrics are informally explained.
these are all provided with the current implementation. due to the limited space,
we will provide more details for only one of these distance metrics. the metric
chosen combines the familiarity of a resource with a certain work item and the
familiarity of other resources that are able to execute that work item. in order
to formalise this notion, two auxiliary functions are introduced.
past execution(w,r) yields the weighted mean of the past execution times of
the last h-th work items performed by ramong all work item siblings of
w. in this context, the past execution time of work item w0is deﬁned as
the duration that elapsed between its assignment to rand its successful
completion. let time i(w; r) be the execution time of the i-th last work item
10please note the value 1 represents the minimum distance while 0 is the maximum.table 2. distance metrics currently provided by the implementation
metric returned value
distance familiarity (w; r)how familiar is resource rwith performing work item w. this can be
measured through the number of sibling work items the resource has
already performed.
distance geodistance (w; r)how close is resource rto work item wcompared to the closest resource
that was oﬀered w. for the closest resource this distance is 1. in case
wdoes not have a speciﬁc gps location where it should be executed,
this metric returns 1 for all resources.
distance popularity (w; r) the ratio of logged-in resources having been oﬀered wto all logged-
in resources. this metric is independent from resource rmaking the
request.
distance urgency (w; r) the ratio between the current timestamp and the latest timestamp
when work item wcan start but is not likely to expire. the latter
timestamp is obtained as the diﬀerence between we, the latest times-
tamp when whas to be ﬁnished without expiring, and w’s estimated
duration. this estimation is based on past execution of sibling work
items of wbyr.
distance past execution (w;r)how familiar is resource rwith work item wcompared to the familiar-
ity of all other resources that whas been oﬀered to. more information
about this metric is provided in the text.
among w’s siblings performed by r, then:
past execution (w; r) =j(w;r;h )x
i=1®i¡1¢time i(w; r)
j(w;r;h )x
i=1®i¡1(1)
where constant ®2[0;1] and value j(w;r;h )is the minimum between a given
constant hand the number of sibling work items of wperformed by r. both
hand®have to be tuned through testing. if value j(w;r;h )is equal to zero,
past execution (w; r) is assumed to take an arbitrary large number.11the
intuition behind this deﬁnition stems from the fact that more recent execu-
tions should be given more consideration and hence weighted more as they
better reﬂect resources gaining experience in the execution of instances of a
certain task.
res(w) returns all currently logged-in resources that have been oﬀered w:
res(w) =fr2rjwis oﬀered to rg:
using these auxiliary functions the following metric can be deﬁned:
distance relative past execution (w; r) =1±
past execution (w; r)x
r02res(w)1±
past execution (w; r0):(2)
again, space considerations prevent us from providing an in-depth explanation
of this deﬁnition and instead, we just provide some intuition. first observe that
11technically, we set it as the maximum ﬂoating value.if exactly one resource rexists capable of performing work item w, then the
equation yields one. if nresources are available and they roughly have the same
familiarity with performing work item w, then for each of them the distance
will be about 1 =n. it is clear then that as nincreases in value, the value of the
distance metric approaches zero. if on the other hand many resources exist that
are signiﬁcantly more eﬀective in performing wthan a certain resource r, then
the value of the denominator increases even more and the value of the metric
forwandrwill be closer to zero.
4 implementation
the general framework described in the previous section has been operationalised
through the development of a component that can be plugged into the yawl
system. the yawl environment is an open source pais, based on the workﬂow
patterns12, using a service-oriented architecture. the yawl engine and all other
services (work list handler, web-service broker, exception handler, etc.) commu-
nicate through xml messages. the yawl work list handler was developed as
a web application. in its graphical interface diﬀerent tabs are used to show the
various queues (e.g. oﬀered work items). the visualisation framework can be
accessed through a newly introduced tab and is implemented as a java applet.
section 4.1 illustrates some of the visualisation features provided by the im-
plementation, whereas section 4.2 focusses on how the component ﬁts within
the yawl architecture.
4.1 the user interface
the position and distance functions represent orthogonal concepts that require
joint visualisation for every map. the position function for a map determines
where work items and resources will be placed as dots, while the distance function
will determine the colour of work items. conceptually, work item information
and resource information is split and represented in diﬀerent layers. users can
choose which layers they wish to see and in case they choose both layers which
of them should overlay the other.
work-item layer. distances can be mapped to colours for work items through
a function colour : [0;1]!cwhich associates every metric value with a diﬀerent
colour in the set c. in our implementation colours range from white to red, with
intermediate shades of yellow and orange. when a resource sees a red work item
this could for example indicate that the item is very urgent, that it is one of
those most familiar to this resource, or that it is the closest work item in terms
of its geographical position. while the colour of a work item can depend on the
resource viewing it, it can also depend on which state of the lifecycle it is in.
special colours are used to represent the various states of the work item lifecycle
and table 3 provides an overview. the various rows correspond to the various
states and their visualisation. resources can ﬁlter work items depending on the
12www.workﬂowpatterns.comtable 3. visualisation of a work item depending on its state in the life cycle.
work item state colour scheme used in the work-list handler
created work item is not shown.
oﬀered to single/multiple resource(s) the colour is determined by the distance to the
resource with respect to the chosen metric. the
colour ranges from white through various shades
of yellow and orange to red.
allocated to a single resource purple.
started black.
suspended the same as for oﬀered.
failed grey.
completed work item is not shown.
state of items. this is achieved through the provision of a checkbox for each of
the states of table 3. several checkboxes can be ticked. there is an additional
checkbox which allows resources to see work items that they cannot execute, but
they are authorised to see.
resources may be oﬀered work items whose positions are the same or very
close. in such cases their visualisations may overlap and they are grouped into a
so-called “joint dot”. the diameter of a joint dot is proportional to the number of
work items involved. more precisely, the diameter dof a joint dot is determined
byd=d(1 + lg n), where dis the standard diameter of a normal dot and nis
the number of work items involved. note that we use a logarithmic (lg) scaling
for the relative size of a composite dot.
combining several work items int a single dot raises the question of how
the distance of this dot is determined. four options are oﬀered for deﬁning the
distance of a joint dot, one can take a) the maximum of all the distances of the
work items involved, b) their minimum, c) their median, or d) their mean. when
a resource clicks on a joint dot, all work items involved are enumerated in a list
and they are coloured according to their value in terms of the distance metric
chosen.
resource layer. when a resource clicks on a work item the positions of the
other resources to whom this work item is oﬀered are shown. naturally this is
governed by authorisation privileges and by the availability of location informa-
tion for resources for the map involved.
resource visualisation can be customised so that a resource can choose to
see a) only herself, b) all resources, or c) all resources that can perform a certain
work item. the latter option supports the case where a resource clicks on a work
item and wishes to see the locations of the other resources that can do this work
item.
4.2 architectural considerations
figure 1 shows the overall architecture of the visualisation framework and the
connections with other yawl components. speciﬁcally, the visualisation frame-
work comprises:fig. 1. position of the visualisation components in the yawl architecture.
the visualisation applet is the client-side applet that allows resources to
access the visualisation framework and it resides as a separate tab in the
work-list handler.
the visualisation designer is used by special administrators in order to de-
ﬁne and update maps as well as to specify the position of work items on
deﬁned maps. designers can deﬁne positions as ﬁxed or as variable through
the use of xquery. in the latter case, an xquery expression is deﬁned that
refers to case variables. this expression is evaluated at run time when re-
quired.
services is the collective name for modules providing information used to depict
maps and to place work items (e.g. urls to locate map images, work item
positions on various maps).
theyawl engine is at the heart of the yawl environment. it determines which
work items are enabled and can thus be oﬀered for execution and it handles the
data that is involved. while the yawl engine oﬀers a number of external inter-
faces, for the visualisation component interfaces b and e are relevant. interface
b is used, for example, by the work list handler to learn about work items that
need to be oﬀered for execution. this interface can also be used for starting new
cases. interface e provides an abstraction mechanism to access log information,
and can thus e.g. be used to learn about past executions of siblings of a work
item. in particular one can learn how long a certain work item remained in a
certain state.
thework list handler is used by resources to access their “to-do” list. the
standard version of the work list handler provides queues containing work items
in a speciﬁc state. this component provides interface g which allows other com-
ponents to access information about the relationships between work items and
resources. for example, which resources have been oﬀered a certain work itemor which work items are in a certain state. naturally this component is vital to
the visualisation applet.
in addition to interface g, the visualisation applet also connects to the
services modules through the following interfaces:
the position interface provides information about maps and the positioning
of work items on these maps. speciﬁcally, it returns an xquery over the
yawl net variables that the visualisation applet has to compute. the
work list handler needs to be consulted to retrieve the current values of
these variables.
the metric interface provides information about available metrics and their
values for speciﬁc work item - resource combinations.
the resource interface is used to update and retrieve information concern-
ing positions of active resources on maps.
the visualisation framework was integrated into the standard work list handler
of yawl through the addition of a jsp (java server page).
all of the services of the visualisation framework share a repository, referred
to as visualisation repository in figure 1, which stores, among others, xqueries
to compute positioning information, resource locations in various maps, and
names and urls of maps. services periodically retrieve log data through inter-
face e in order to compute distance metric values for oﬀered work items. for
instance, to compute the metric relative past execution (equation 2) for a cer-
tain resource, one can see from equation 1 that information is required about
thehpast executions of sibling work items performed by that resource.
to conclude this section, we would like to stress that the approach and imple-
mentation are highly generic, i.e., it is relatively easy to embed the visualisation
framework in another pais.
5 example: emergency management
in this section we are going to illustrate a number of features of the visualisation
framework by considering a potential scenario from emergency management.
this scenario stems from a user requirement analysis conducted in the context of
a european-funded project [2]. teams are sent to an area to make an assessment
of the aftermath of an earthquake. team members are equipped with a laptop
and their work is coordinated through the use of a pais.
the main process of workﬂow for assessing buildings is named disaster man-
agement . the ﬁrst task assess the aﬀected area represents a quick on-the-spot
inspection to determine damage to buildings, monuments and objects. for each
object identiﬁed as worthy of further examination an instance of the sub-process
assess every sensible object (of which we do not show the actual decomposition
for space reasons) is started as part of which a questionnaire is ﬁlled in and pho-
tos are taken. this can be an iterative process as an evaluation is conducted to
determine whether the questionnaire requires further reﬁnement or more photos
need to be taken. after these assessments have ﬁnished, the task send data tothe headquarters can start which involves the collection of all questionnaires and
photos and their subsequent dispatch to headquarters. this information is used
to determine whether these objects are in imminent danger of collapsing and if
so, whether this can be prevented and how that can be achieved. depending on
this outcome a decision is made to destroy the object or to try and restore it.
for the purposes of illustrating our framework we assume that an earthquake
has occurred in the city of brisbane. hence a number of cases are started by
instantiating the disaster management workﬂow described above.
each case deals with the activities of an inspection teams in a speciﬁc zone.
figure 2 shows three maps. in each map, the dots refer to work items. figure 2(a)
shows the main process of the disaster management workﬂow, including eight
work items. dots for work items which are instances of tasks assess the aﬀected
area andsend data to the headquarter are placed on top of these tasks in this
ﬁgure. figure 2(b) shows the decomposition of the assess every sensible object
sub-net. here also eight work items are shown. no resources are shown in these
diagrams. note that on the left-hand side is shown a list of work items that
are not on the map. for example, the eight work items shown in the map in
figure 2(a) appear in the list of “other work items” in figure 2(b).
figure 2(a) uses the urgency distance metric to highlight urgent cases while
figure 2(b) uses the familiarity metric to highlight cases closer to the user in
terms of earlier experiences.
as another illustration consider figure 2(c) where work items are positioned
according to their deadlines. this can be an important view in the context of
disaster management where saving minutes may save lives. in the map shown,
thex-axis represents the time remaining before a work item expires, while the
y-axis represents the case number of the case the work item belongs to. a work
item is placed at location (100 + 2 ¤ex;10 + 4 ¤ey) on that map, if exminutes
are remaining to the deadline of the work item and its case number is ey. in this
example, work items are coloured in accordance with the popularity distance
metric.
figures 3 and 4 show some screenshots of a geographical map of the city
of brisbane. note that geographic maps are plain jpg images and have been
obtained by capturing some screen shots from google maps. on these maps,
work items are placed at the location where they should be executed. if their
locations are so close that their corresponding dots overlap, a larger dot (i.e., a
joint-dot) is used to represent the work items involved and the number inside
corresponds to the number of these items. the green triangle is a representation
of the resource whose work list is visualised here. work items for tasks assess
the aﬀected area andsend data to the headquarters are not shown on the map as
they can be performed anywhere. in this example, dots are coloured according
to the familiarity distance metric. a dot that is selected as focus obtains a blue
colour and further information about the corresponding work item is shown
at the bottom of the screen (as is the case for work item take photos 4in
figure 3(b)).(a)disaster management process map showing 4+4=8 work items
(b)assess the aﬀected area sub-net also showing 8 work items
(c) example of a timeline map for showing 11 work items
fig. 2. examples of process and timeline maps for disaster management(a) map showing the geographic locations of work items and resources:
the triangle represents the resource and most work items are shown as
single dots except for the two work items that are clustered into a single
dot labeled “2”
(b) information about the selected dot (blue dot) is shown and also other
resources are shown
fig. 3. examples of geographic maps for disaster management.(a) when a triangle is selected, the corresponding resources and oﬀered
work items are shown
(b) when zooming in, clustered work items and resources are separated
fig. 4. further examples of geographic maps for disaster management.one can click on a dot and see the positions of other resources that have
been oﬀered the corresponding work item. for example, by clicking on the dot
representing work item take photos 4, other resources, represented by triangles,
are shown (see figure 3(b)). as for work items, overlapping triangles representing
resources are combined. for examples, the larger triangle shown in figure 3(b)
represents two resources.
figure 4(a) shows the screen shot after clicking on the joint triangle. a re-
source can thus see the list of resources associated with this triangle. by selecting
one of the resources shown in the list, the work items oﬀered to that resource
can be seen. the colour of these work items is determined by their value for the
chosen distance metric. a zooming feature is also provided. figure 4(b) shows
the result of zooming in a bit further on the map of figure 4(a). as can be seen,
no dots nor any triangles are overlapping anymore.
6 conclusions
in this paper a general visualisation framework is proposed that can aid users
in selecting the “right” work item among a potentially large number of work
items oﬀered to them. the framework uses the “map metaphor” to show the
locations of work items and resources. the “distance metaphor” is used to show
which work items are “close” (e.g., urgent, similar to earlier work items, or geo-
graphically close). both concepts are orthogonal and this provides a great deal
of ﬂexibility when it comes to presenting work to people. for example, one can
choose a geographical map to display work items and resources and use a dis-
tance metric capturing urgency. the proposed framework was operationalised
as a component of the yawl environment. by using well-deﬁned interfaces the
component is generic so that in principle it could be exploited by other paiss
as well under the provision that they are suﬃciently “open” and provide the
required interface methods. the component is also highly conﬁgurable, e.g., it
allows resources to choose how distances should be computed for dots represent-
ing a number of work items and provides customizable support for determining
which resources should be visible. our operationalisation does not rely on exter-
nal services such as google maps for map visualisation support. maps are just
images on which dots representing work items are to be positioned. hence our
approach is not restricted to certain types of maps.
finally, it should be pointed out that the implementation for the visualisa-
tion designer is still lacking. in the current evaluation, we manually updated
the information stored in the visualisation repository by accessing tables in the
dbms. all other parts are fully operational.
further research aims at connecting the current framework to geographical
information systems and process mining tools like prom [4]. geographical infor-
mation systems store data based on locations and process mining can be used
to extract data from event logs and visualise this on maps, e.g., it is possible to
make a “movie” showing the evolution of work items based on historic data.acknowledgements. the work was primarily conducted during a visit of mas-
similiano de leoni to the business process management group at queensland
university of technology. his internship has been partly supported by the eu-
ropean commission through the project fp6-2005-ist-5-034749 workpad.
the authors would like to thank michael adams for implementing certain re-
quired yawl interfaces and for answering numerous questions. we also grate-
fully acknowledge guy redding for providing some code to connect to the yawl
interfaces.
references
1.dumas, m., van der aalst, w.m.p., ter hofstede, a.h.m.: process-aware informa-
tion systems: bridging people and software through process technology. wiley
(2005)
2.catarci, t., de leoni, m., marrella, a., mecella, m., vetere, g., salvatore, b.,
dustdar, s., juszczyk, l., manzoor, a., truong, h.l.: pervasive software envi-
ronments for supporting disaster responses. ieee internet computing 12(2008)
26–37
3.hansen, g.: automated business process reengineering: using the power of visual
simulation strategies to improve performance and proﬁt. prentice-hall, engle-
wood cliﬀs (1997)
4.van der aalst, w.m.p., van dongen, b., christian, g., mans, r.s., alva de
medeiros, a., rozinat, a., rubin, v., song, m., verbeek, h.m.w., weijters,
a.j.m.m.: prom 4.0: comprehensive support for realprocess analysis. in: pro-
ceedings of the 28th international conference on applications and theory of petri
nets and other models of concurrency icatpn 2007. volume 4546 of lncs.,
springer (2007) 484–494
5.bobrik, r., reichert, m., bauer, t.: view-based process visualization. in: proceed-
ings of the 5th international conference on business process management bpm
2007. volume 4714 of lncs., springer (2007) 88–95
6.luttighuis, p., lankhorst, m., wetering, r., bal, r., berg, h.: visualising business
processes. computer languages 27(2001) 39–59
7.streit, a., pham, b., brown, r.: visualization support for managing large business
process speciﬁcations. in: proceedings of the 3rd international conference on
business process management bpm 2005. volume 3649 of lncs., springer (2005)
205–219
8.wright, w.: business visualization adds value. ieee computer graphics and
applications 18(1998) 39
9.brown, r., paik, h.y.: resource-centric worklist visualisation. in: proceedings of
otm confederated international conferences, coopis, doa, and odbase 2005.
volume 3760 of lncs., springer (2005) 94–111
10.kumar, a., van der aalst, w.m.p., verbeek, h.: dynamic work distribution
in workﬂow management systems: how to balance quality and performance?
journal of management information systems 18(2002) 157–193
11.russell, n., van der aalst, w.m.p., ter hofstede, a.h.m., edmond, d.: workﬂow
resource patterns: identiﬁcation, representation and tool support. in: proceedings
of 17th international conference caise 2005. volume 3520 of lncs., springer
(2005) 216–232