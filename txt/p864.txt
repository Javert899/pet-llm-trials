a visual approach to spot statistically-signiÔ¨Åcant
differences in event logs based on process metrics
alfredo bolt, massimiliano de leoni, and wil m. p. van der aalst
eindhoven university of technology, eindhoven, the netherlands
{a.bolt,m.d.leoni,w.m.p.v.d.aalst}@tue.nl
abstract. this paper addresses the problem of comparing different variants of
the same process. we aim to detect relevant differences between processes based
on what was recorded in event logs. we use transition systems to model behav-
ior and to highlight differences. transition systems are annotated with measure-
ments, used to compare the behavior in the variants. the results are visualized
as transitions systems, which are colored to pinpoint the signiÔ¨Åcant differences.
the approach has been implemented in prom, and the implementation is publicly
available. we validated our approach by performing experiments using real-life
event data. the results show how our technique is able to detect relevant differ-
ences undetected by previous approaches while it avoids detecting insigniÔ¨Åcant
differences.
keywords: process variants comparison, annotated transition system, statistical sig-
niÔ¨Åcance, process mining
1 introduction
process mining is a relatively young research discipline that aims at discovering, mon-
itoring and improving real processes by extracting knowledge from the behavior as
recorded in the event logs readily available in today‚Äôs systems [1]. the Ô¨Åeld of process
mining puts forward techniques for discovering process models from event logs, for
checking the conformance of normative models against the behavior observed in the
event logs and analyzing bottlenecks and other key performance indicators (kpis).
traditional process-mining techniques typically rely on the assumption that, within
any organization, all executions of a certain process are characterized by an homoge-
nous behavior, which can be easily compared. this assumption is often not met in re-
ality: several variants of the same process may exist even within the same organization.
as an example, consider an organization, such as a bank, that is composed by dozens of
geographically spread branches. the same process, e.g. the loan‚Äôs management, can be
executed differently in these branches. even within a branch, the observed behavior can
vary according to different criteria; for example, the behavior may change over time or
depend on the amount involved.
the comparative analysis of different process variants is obviously relevant and
through the availability of event data also possible. this paper presents a generic tech-
nique to compare process variants by identifying statistically signiÔ¨Åcant differences.2 a. bolt et al.
fig. 1: overview of the approach: two event logs are compared, producing a single
annotated transition system, where the colors of nodes and edges represent the relevance
of the differences found.
figure 1 sketches the idea: two event logs are compared for differences that are pro-
jected onto a transition system where states and transitions are colored to highlight
differences. the thickness of the node‚Äôs borders and arcs indicates the frequencies with
which states and transitions are respectively visited or occur. the portions of behavior
that are rarely observed are Ô¨Åltered out. also, differences are not highlighted if they are
not statistically signiÔ¨Åcant. the visual properties of these transition systems, and their
meaning, are discussed in sec. 3.
the two event logs that are used for comparison can have actually been extracted
from different information systems, e.g. of two branches of the same company or of
different companies. alternatively, they can be extracted from a process cube [2,3] using
the typical operations of, e.g., dicing, slicing and Ô¨Åltering. in the case that more than
two event logs need to be compared, they can be grouped and merged into two event
logs.
as detailed in section 6, existing work mainly focuses on reporting differences for
what concerns the control Ô¨Çow, meaning the frequency with which activities occur and
the causal relations between activities (i.e., which activities are typically observed to
follow given activities). however, differences can be regarded from other viewpoints
based on other process metrics, such as the time between activities and the overall
process performance. our approach allows end users to use several process metrics
for detecting such differences. figure 1 shows an overview of the approach: two event
logs are taken as input and an annotated transition system showing the differences is
produced as output.
in order to assess the practical relevance of the differences highlighted by our tech-
nique, we used real-life event data extracted from the information system of an italian
local police, which records the executions of the process of handling road-trafÔ¨Åc Ô¨Ånes.
in particular, we show how the management of high Ô¨Ånes varies from that of low Ô¨Ånes,
including differences in the behaviors of offenders in paying the Ô¨Ånes.
the remainder of this paper is structured as follows. section 2 introduces the basic
concepts that are used throughout the papers, whereas section 3 details our technique
for comparing the behaviors observed in two event logs. section 4 describes the soft-a visual approach to spot differences in event logs 3
ware tool that implements this approach, whereas section 5 presents the evaluation
discussed above. section 6 discusses related work; in particular, using the same dataset
of an italian local police, we illustrate how existing approaches highlight insigniÔ¨Åcant
differences instead of highlighting many of the relevant differences, which conversely,
our approach can. finally, section 7 summarizes our contributions and discusses future
work.
2 transition systems as a process representation
the behavior observed in an event log can be summarized as a transition system [4].
section 2.1 introduces the formalisms used to represent event logs. section 2.2 describes
how transition systems are created. sections 2.3 and 2.4 illustrate how measurements
can be annotated into the states and transitions of a transition system.
2.1 event log
trace id activity timestamp ...
1 a 28-12-2015:06.30 ...
1 b 28-12-2015:06.45 ...
1 c 28-12-2015:07.20 ...
1 d 28-12-2015:08.05 ...
2 a 29-12-2015:10.10 ...
2 c 29-12-2015:10.30 ...
2 b 29-12-2015:11.15 ...
2 d 29-12-2015:12.10 ...
3 a 30-12-2015:09.30 ...
3 d 30-12-2015:09.40 ...
table 1: a fragment of an event log repre-
sented as a table: each row corresponds to
an event and each column corresponds to an
event attribute. events with the same trace
idcorrespond to the same trace (i.e. process
instance).letebe the universe of events. events
may have attributes (e.g., the person who
executed it, associated cost, timestamp).
attribute values are related to events
through the function atta2 e ! v ,
whereais an attribute name and vis the
set of possible attribute values. in this pa-
per we do not impose a speciÔ¨Åc set of
attributes. however, given the focus of
this paper, we assume that each event has
at least the following attributes: activity
name andtimestamp (denoted as attn(e)
andattt(e)respectively).
let2ebe a trace. a trace records
the execution of an instance of a process
and is a Ô¨Ånite sequence of events. the kth
event of a trace is denoted as (k). the
length of a trace is denoted as jj. we as-
sume that events in traces are ordered by
timestamp i.e.,82e;1i < jjj:attt((i))attt((j)). the preÔ¨Åx
of a trace containing its Ô¨Årst kevents is deÔ¨Åned by the function prefke!e,
with the special case pref0() =hi. the set of all the preÔ¨Åxes of a trace is deÔ¨Åned
aspref() =sjj
k=0fprefk()g. the postÔ¨Åx of a trace containing its last kevents is
deÔ¨Åned by the function postfke!e.
letl2b(e)be an event log. an event log is a multiset of traces. the set of all
the preÔ¨Åxes of traces of an event log lis deÔ¨Åned as pl=s
2lpref(). the set of
all the events in an event log lis deÔ¨Åned as el=s
2lfe2g. table 1 shows an
example of an event log represented as a table. this event log will be used as a running
example through the remainder of this section.4 a. bolt et al.
{ } aab
b
ccdd
cbd
d
(a)rs() = attn((jj)
{ } {a}a{a,b}
b
{a,c}c
{a,d}d{a,b,c}c
b{a,b,c,d}d (b)rs() =fattn(e)je2g
fig. 2: examples of transition systems obtained from the event log lpresented in ta-
ble 1 using different state representation functionsrs();2pl. in both cases, the
activity representation function used is ra(e) =attn(e);e2el.
2.2 transition systems
transition systems are composed of states and of transitions between them. a transition
is deÔ¨Åned by an activity being executed, triggering the current state to move from a
source to atarget state. figure 2 shows two possible transition system representations
of the event log presented in table 1. the nodes indicate the states and the arcs indicate
thetransitions between them. preÔ¨Åxes of traces can be mapped to states and transitions
using representation functions that deÔ¨Åne how these preÔ¨Åxes are interpreted.
the state representation function is deÔ¨Åned as rs2e!rswhereeis the
universe of possible traces and rsis the set of possible representations of states. this
function relates (preÔ¨Åxes of) traces to states in a transition system.
theactivity representation function is deÔ¨Åned as ra2e!rawhereeis the set
of possible events and rais the set of possible representations of activities (e.g. activity
name orevent id ).
when using a state representation function rsand an activity representation function
ratogether, (preÔ¨Åxes of) traces can be related to transitions in a transition system, as the
activity and the source and target states of the transition can be identiÔ¨Åed using rsand
ra. the set of all possible representations of traces is deÔ¨Åned as rtrsrars.
a transition t2rtis a triplet (s1;a;s 2)wheres1;s22rsare the source and target
states anda2rais the activity executed.
figure 2.a shows the transition system that represents the event log lshown in
table 1 using the state representation function rs() =attn((jj);82pland the
activity representation function ra(e) = attn(e);8e2el. in this transition system,
(preÔ¨Åxes of) traces are mapped into states and transitions as the activity name of their
last event.
figure 2.b, shows a different representation of the same event log l. for this transi-
tion system the state representation function used is rs() =fattn(e)je2g;2pl
and the activity representation function used is ra(e) =attn(e);e2el. in this tran-
sition system, (preÔ¨Åxes of) traces are mapped into states as the set of activity names of
all their events, and into transitions as the activity name of their last event.a visual approach to spot differences in event logs 5
deÔ¨Ånition 1 (transition system). letrsbe a state representation function, raan ac-
tivity representation function and lan event log. a transition system ts(rs;ra;l)is
deÔ¨Åned as a triplet (s;a;t )wheres=fs2rsj92pls=rs()gis the set of
states,a=fa2raj9e2ela=ra(e)gis the set of activities and t=f(s1;a;s 2)2
sasj92pl;6=his1=rs(prefjj 1())^a=ra((jj))^s2=rs()gis the
set of valid transitions between states.
note that the structure of a transition system is affected by the state and activity
representation functions used to create it. a thorough discussion on state and event
representations in transition systems is presented in [4].
2.3 measurements
in order to compare event logs, we need to introduce the measurements used for com-
parison. measurement functions are computed as functions of event attributes contained
in the events of a trace.
given a state representation function rsastate measurement function smrs2e
rs!b(r), is a function that relates traces 2eand statess2rsto multisets of
numerical measurements. for example, it is possible to measure whether or not a certain
statesin a state representation rsis reached during the process‚Äô execution recorded in
a trace:
smoccur
rs(;s) =(
[1]if902pref() :rs(0) =s
[0]otherwise(1)
it is also possible to measure the elapsed time between the beginning of a trace 
and the visit of a state susing a state representation rs:
smelapsed
rs(;s) =]
02pref();06=hi
rs(0)=s[attt(0(j0j)) attt(0(1)] (2)
given a state representation function rsand an activity representation ra, atran-
sition measurement function tm(rs;ra)2ert!b(r), is a function that relates
traces2eand transitions t2rtto multisets of numerical measurements. for
example, it is possible to measure whether a certain transition tis executed in a given
trace:
tmoccur
(rs;ra)(;t) =(
[1]if902pref();06=hi 
rs(prefj0j 1(0));ra(0(j0j));rs(0)
=t
[0]otherwise
(3)
it is also possible to measure the elapsed time of a trace until a transition is triggered
within the trace:
tmelapsed
(rs;ra)(;t) =]
02pref();06=hi 
rs(prefj0j 1(0));ra(0(j0j));rs(0)
=t[attt(0(j0j)) attt(0(1)]
(4)6 a. bolt et al.
2.4 annotations
as mentioned before, states and transitions can be annotated with the measurements
obtained from an event log. given a state measurement function sm, a transition mea-
surement function tmand an event log l, anannotation function an(sm;tm;l)2(rs[
rt)!b(r), is a function that, given a state s2rsor transition t2rt, produces a
multiset of numerical measurements. the annotation function is deÔ¨Åned as:
an(sm;tm;l)(x) =(u
2lsm(;x)ifx2rs
u
2ltm(;x)ifx2rt
3 comparison and visualization of the differences in process
variants
given two event logs l1andl2, our approach produces comparison results (as shown
in figure 1) in three steps:
1. create an annotated transition system (i.e., a transition system with multiple an-
notation functions) from l1andl2using the state and activity representation
functionsrsandraand the state and transition measurement functions smrsand
tm(rs;ra).
2.compare the annotations of each state or transition of the annotated transition sys-
tem.
3.visualize the differences in the annotated transition system.
in order to compare process variants, we need to compare the annotations that are
produced for the states and transitions of a transition system. hence, we introduce an-
notated transition systems which allows to annotate a transition system with multiple
annotation functions.
deÔ¨Ånition 2 (annotated transition system). given two event logs l1andl2, state
and activity representation functions rsandra, state and transition measurement func-
tions smandtm, we deÔ¨Åne an annotated transition system ats(rs;ra;l1;l2;sm;tm)as
the triplet (ts(rs;ra;l1]l2);an(smrs;tm(rs;ra);l1);
an(smrs;tm(rs;ra);l2)), where ts(rs;ra;l1]l2)= (s;a;t )is a transition system and
an(smrs;tm(rs;ra);l1),an(smrs;tm(rs;ra);l2)are annotation functions denoted as an1
andan2respectively.
note that the transition system uses all the traces contained in the union of the event
logsl1andl2. also, note that an1andan2use only the traces contained in one event
log (l1andl2respectively).
figure 3 shows an example of annotated transition system created using the event
logl1andl2are created from the event log presented in table 1 (the Ô¨Årst two traces be-
long tol1and the third trace belongs to l2), the state representation function rs() =
fattn(e)je2g;82pl, the activity representation function ra(e) =attn(e);8e2
el, the state measurement function smrsdeÔ¨Åned in eq. 1 and the transition represen-
tation function tm(rs;ra)deÔ¨Åned in eq. 3. only annotations of the function an1are
represented (i.e., as text below the node and arc labels).a visual approach to spot differences in event logs 7
{ } {a}a{a,b}
b
{a,c}c
{a,d}d{a,b,c}c
b{a,b,c,d}d
[1,1,1][1,0,0]
[0,1,0]
[0,0,1][1,1,1][1,0,0]
[0,1,0]
[0,0,1][1,0,0]
[0,1,0][1,1,0] [1,1,0] [1,1,0]
fig. 3: transition system annotated with the occurrence state and transition measure-
ment functions deÔ¨Åned in equations 1 and 3. annotations are represented as text under
the node and edge labels.
state and transition comparison using annotations. the comparison of annota-
tions can be abstracted as a comparison oracle that is deÔ¨Åned as the function di2
b(r)b(r)!bool , which given two multi-set of numerical measurements (i.e.,
annotations) decides whether there are differences between them (i.e., true) or not (i.e.,
false ).
given an ats = 
(s;a;t );an1;an2
, for each element x2s[twe want to
detect differences by evaluating di(an1(x);an2(x)).
in order to avoid detecting irrelevant differences between the means of the anno-
tations, statistical signiÔ¨Åcance tests are used as the comparison oracle. we have opted
for the two-tailed ‚Äúwelch‚Äôs t-test‚Äù, also known as the ‚Äútwo-tailed t-test with different
variances‚Äù [5] because it is suited when the two sets of measurements come from inde-
pendent populations, such as when they are extracted from two event logs from different
branches of a company.
visualizing differences in annotated transition systems. annotations and compar-
ison results of states and transitions can be represented using visual properties (i.e.,
thickness andcolor ) of nodes and arcs.
given an ats = 
(s;a;t );an1;an2
, for each element x2s[t, the thickness
of the corresponding node (if x2s) or arc (ifx2t) is proportional to the mean
value of an1(x)]an2(x)i.e., the average value of the annotations associated with x
and computed on the merged log. the thickness property provides insights about the
overall behavior of both variants.
figure 4 illustrates an example of this visualization using the ats presented in
figure 3. in this case, the annotations obtained from an1andan2are represented as
thickness instead of text.
given an ats = 
(s;a;t );an1;an2
, for each element x2s[t, the corre-
sponding node (if x2s) or arc (ifx2t) will be colored black or white (depending
whether it is an arc or a node) if di(an1(x);an2(x)) = false , or it will be colored8 a. bolt et al.
{ } {a}a{a,b}
b
{a,c}c
{a,d}d{a,b,c}c
b{a,b,c,d}d
fig. 4: an example of how the annotations are translated to the thickness of the tran-
sition‚Äôs arcs and state‚Äôs node borders using the annotated transition system shown in
figure 3.
using other colors if di(an1(x);an2(x)) = true. in the latter case, the color used
will depend on the measurement function used and on the effect size of the difference.
the effect size oracle is deÔ¨Åned as the function e2b(r)b(r)!r, which
given two multisets of measurements, returns the size of the effect (i.e., how small or
large is the difference) and the sign of the difference (+/-) in a certain scale. in this
paper, we used cohen‚Äôs d[6] to measure effect size, which measures the difference of
sample means in terms of pooled standard deviation units. cohen relates ranges of d
values to effect size categories: d=0:2is considered as a small effect ,d=0:5is
considered as a medium effect andd=0:8is considered as a large effect . however,
other effect size measurements could be used instead.
currently, we support two measurement functions and, hence, two color intervals
are used, as shown in figure 51. in figure 5.a, occurrence measurement functions (eqs.
1 and 3) were used. blue-based colors mean that the occurrence of a state or transition
in a Ô¨Årst event log is higher than in a second event log and red-based colors mean the
opposite. in figure 5.b, elapsed time (performance) annotation functions (eqs. 2 and 4)
were used. green-based colors mean that the elapsed time of reaching a state or execut-
ing a transition in a Ô¨Årst event log is higher than in a second event log and purple-based
colors mean the opposite. note that within the color intervals, different colors are used
according to cohen‚Äôs dranges of effect size values. colors with higher intensity (i.e.,
darker) represent larger effect sizes (i.e., more relevant differences), whereas colors with
low intensity (i.e., lighter) represent smaller effect sizes (i.e., less relevant differences).
1note that the example transition system used in this Ô¨Ågure is different than previous examples,
and it is used for illustration purposes onlya visual approach to spot differences in event logs 9
(a)smandtmmeasure occurrence (eq. 1 and 3)
(b)smandtmmeasure elapsed time (eq. 2 and 4)
fig. 5: example of an annotated transition system colored with the results of statistical
signiÔ¨Åcance tests and effect size oracle using different state and transition measurement
functions.
4 implementation
our approach has been implemented as the process comparator plugin in the prom
[7] framework. prom allows researchers to implement process mining techniques in
a standardized environment, providing several functionalities that can be used by the
implementations, and also providing a distribution platform for other researchers to use
these developments. the prom framework is considered as the de-facto standard for
process mining, and it can be freely downloaded form http://promtools.org .
the tool takes two event logs as input. however, more than two event logs can be
compared. this is handled by requesting the user to group these event logs into two
groups. each of these groups is then merged into a single event log and then compared
against each other. the tool also provides a ‚Äúhint‚Äù functionality for the users that do not
have context knowledge or do not know which processes to compare. this functional-
ity suggests to compare a single process against all the others by calculating similarity
scores between each process and the union of the n 1remaining processes. similarity
score is calculated based on the percentage of elements that present statistically signiÔ¨Å-10 a. bolt et al.
fig. 6: screenshot of the process comparator plugin in the prom framework. detailed
data tables pop-up when the user clicks on states or transitions.
cant differences. finally, the process that has most differences with the rest is suggested
to the user as a starting point for comparative analysis.
our tool allows the user to change state and event representation functions, state and
transition measurement functions and several useful parameters (e.g., the signiÔ¨Åcance
level of the statistical signiÔ¨Åcance tests) in order to provide Ô¨Çexible representations
for the event logs, as shown in figure 6. our tool also provides frequency Ô¨Åltering
capabilities where all the nodes and arcs with lower frequency than a deÔ¨Åned threshold
will be hidden from the visualization. this allows to Ô¨Ålter out rare behavior and to
produce clearer visualizations. also, the elements of the annotated transition system
presented as result are interactive . the user can click on any state or transition, and a
data table will pop-up showing the values of the annotations of such state or transition
for both event logs (e.g., frequency of occurrence, elapsed time, remaining time, number
of traces).
5 evaluation
in order to show the usefulness of our approach in practice, we performed experiments
using multiple real-life event logs. here we report on a log extracted from an italian mu-
nicipality‚Äôs information system that handled the ‚Äúroad Ô¨Ånes management‚Äù process [8].
for showing the comparison capabilities of our approach, we split the event logs into
two sub logs (i.e., variants ): the Ô¨Årst one contains all the cases where the Ô¨Åne amount
was lower than 50 euros (i.e., low Ô¨Ånes ) and the second contains all the cases where the
amount of the Ô¨Åne was equal or higher than 50 euros (i.e., high Ô¨Ånes ). the two event
logs were then compared against each other using our tool, and the differences were
projected into an annotated transition system. we performed two sets of experiments:
‚Äìthe Ô¨Årst was based on an abstraction where the last event of the trace is considered.
we used the following state and transition abstraction: given an event log l, a tracea visual approach to spot differences in event logs 11
fig. 7: performance ( elapsed time ) comparison. colored states (i.e., nodes) and tran-
sitions (i.e., edges) contain statistically signiÔ¨Åcant differences between the two event
logs. purple shades represent earlier executions of activities or reaching of states in high
Ô¨Ånes. green shades represent the other way around. white indicates that no signiÔ¨Åcant
differences can be observed. the shades become darker and darker with increasingly
statistically signiÔ¨Åcant differences.
2pland an event e2el,rs() = attn((jj))andra(e) = attn(e). as
measurement for comparison, elapsed time was used as deÔ¨Åned in eqs. 2 and 4,
thus comparing the time differences when activities were executed.
‚Äìthe second was based on an abstraction where the last two events were considered:
rs() =hattn((jj)),attn((jj 1))iandra(e) = attn(e). the occurrence
measurements for comparison were used as deÔ¨Åned in eqs. 1 and 3.
in both of experiments, we used a conÔ¨Ådence level = 0:05for the welch‚Äôs t tests.
fig. 7 shows the results of the Ô¨Årst experiment, where many relevant performance
differences were detected. as previously shown in fig. 5.b, green colors are assigned
to states and transitions that are reached or executed statistically signiÔ¨Åcantly earlier in
low Ô¨Ånes, whereas purple colors are assigned when the opposite occurs. the green color
assigned to state payment indicates that payments were received signiÔ¨Åcantly earlier for
low Ô¨Ånes (99 days versus 151 days)2. conversely, the purple-colored transition (create
fine, send fine) indicates that high Ô¨Ånes are sent to offenders signiÔ¨Åcantly earlier (72
days versus 90 days)2. the thickness of this arc also indicates that, overall, sending the
Ô¨Åne after creating is a more frequent behavior. the fact that the create fine state is
white indicates that there is no statistically signiÔ¨Åcant difference in how early create
fine is executed.
figure 8 illustrates the output of the second experiment. orange shade ovals and
arcs represent states reached or transitions executed signiÔ¨Åcantly more often in low
Ô¨Ånes compared with high Ô¨Ånes. blue shades refer to the opposite. the Ô¨Årst observation
is that low Ô¨Ånes are usually immediately paid without requiring the local police to send
2this is not observable in the picture but, in the implementation, by clicking on a
state/transition, one can read this information in a popup equivalent to the two shown in fig-
ure 612 a. bolt et al.
fig. 8: occurrence frequency comparison. colored states (i.e., nodes) and transitions
(i.e., edges) contain statistically signiÔ¨Åcant differences between the two event logs. blue
colors represent a higher occurrence in high Ô¨Ånes . orange colors represent a higher
occurrence in lowÔ¨Ånes.
a copy of Ô¨Åne to the offender. this can be seen through the orange-colored state [pay-
ment,create fine] and the transition from [create fine] to this state. conversely, high
Ô¨Ånes are more often sent to the offender than low Ô¨Ånes, as one can observe through
the blue-colored state [send fine, create fine] . similar observations can be derived by
looking at the other states and transitions. figure 8 highlights part of the transition sys-
tem (red rectangle). it indicates that, for low Ô¨Ånes, it happens signiÔ¨Åcantly more often
that offenders perform incomplete payments, which cause a penalty to be added3, which
are subsequently followed by a second payment to probably complete the Ô¨Åne payment.
conversely, for high Ô¨Ånes, it is signiÔ¨Åcantly more frequent that payments only occurs
after adding the penalty. this can be seen from the blue color associated with the transi-
tion between states [add penalty, insert fine notiÔ¨Åcation] and[payment,add penalty] .
please observe that the latter Ô¨Ånding could not be observed if we used an abstraction
solely based on the last occurred event.
6 related work
earlier work has been done on comparing process variants. the corresponding papers
can be grouped in two category: model-based and log-based comparison. the main
difference between these two categories is that model-based approaches require pro-
cess models as inputs and log-based approaches require event logs as inputs. indirectly,
3according to the italian laws, if a Ô¨Åne is not paid in full within 90 days, a penalty is added so
that the due amount doublesa visual approach to spot differences in event logs 13
model-based approaches can also be used starting from event logs. models can be dis-
covered from logs and then used as inputs for the approach. however, the obtained
insights should be validated since the structure of the models (hence, the detected dif-
ferences) can be drastically affected by the choice of the discovery technique or its
parameters.
model-based comparison. model-based comparison techniques have been developed
in recent years [9,10,11,12]. la rosa et al. [11] provide a complete overview of the
different ways to compare and merge models. most of them are based on control-Ô¨Çow
comparison, where the structural properties of the models (represented as graphs) are
compared (e.g., nodes and edges present in one of the models, but not in the other one).
a drawback of model-based approaches is that they are unable to detect differences
in terms of frequency or any other process metrics (e.g., elapsed time). for example,
in section 5, we detected a frequency difference on the payment of a Ô¨Åne directly after
being created (34% of the lowÔ¨Ånes versus 15% of the high Ô¨Ånes). this difference is not
detected by model-based approaches, since in both variants the activity ‚Äúcreate fine‚Äù is
followed by ‚Äúpayment‚Äù in at least 15% of the cases, so this behavior would be present in
the models of both variants. a severe drawback of employing model-based comparison
is related to the fact that the variants are compared in terms of their model structure
whereas we aim to compare the behavior. this motivates why, in this paper, we have
opted for a low-level behavioral representation, i.e., transition systems, instead of high-
level process modelling languages, such as bpmn or petri nets. for instance, they are
unable to detect that low-Ô¨Åne offenders perform incomplete payments that need to be
integrated after receiving a penalization.
log-based comparison. the most recent approach for log-based behavior comparison
is by van beest et al. [13]. this technique is able to identify differences between two
event logs by computing frequency-enhanced prime event structures (fpes) from the
corresponding event logs, comparing the obtained fpes and report the results using two
sets of textual statements: control-Ô¨Çow differences and branching frequency differences.
this approach has some advantages, such as the handling of concurrency in pro-
cess behavior. however, it presents three main limitations described as follows. first,
the technique looks at the relative frequency, only. as such, when looking at branch-
ing frequency, it possibly returns a difference (if any), even though the branching point
is actually reached very rarely. also, no statistical signiÔ¨Åcant tests are employed. sec-
ond, to determine branching points, they only look at the last activity independently of
what activities were previously executed. as such - as we have veriÔ¨Åed by testing the
reference implementation - it is unable to detect differences that refer to the activities
preceding the last, such as, in the road-trafÔ¨Åc case study, a number of low-Ô¨Åne offenders
perform incomplete payments that need to be integrated after receiving a penalization.
third, the approach considers event logs as sequences of event labels, thus ignoring
all other event attributes (e.g., timestamp, event payload). this limits the approach to
detect only frequency differences. differences in performance or other process metrics
cannot be obtained.14 a. bolt et al.
other approaches based on sequence mining such as [14,15,16,17] obtain rules that
are overcomplicated and not valuable from a business perspective (as indicated in [14]
and [13]).
7 conclusion
the problem of comparing process variants is highly relevant. many companies are
observing that the executions of their processes are not always optimal and subject to
variations. processes may change because of the inÔ¨Çuence of several factors, such as the
year period, the geographical location of the process‚Äô execution or the resource unit in
charge. some recent approaches aim to compare the execution of the different process
variants. most existing approaches tend to focus on the control-Ô¨Çow perspective or to
detect differences that are statistically insigniÔ¨Åcant.
to our knowledge, no current approach is able to detect the relevant behavioral
differences between process variants in terms of any process metric (e.g., performance)
based on their recorded event logs. to address this issue, we developed a new technique
based on annotated transition systems that detects statistically signiÔ¨Åcant differences
between process variants in terms of any process metric, using event logs as input. we
used annotated transition systems to avoid being mining algorithm speciÔ¨Åc.
our implementation is provided with two concrete metrics, which are related to
the control-Ô¨Çow frequency (in the paper, named occurrence ) and to the time perspec-
tive (the elapsed time metric). however, the framework allows one to easily add new
measurement functions.
the evaluation and the related-work analysis has clearly shown that the approach is
relevant and allows one to pinpoint differences that previous approaches fail to provide.
also, our approach excludes all differences that are in fact statistically insigniÔ¨Åcant,
which are conversely returned by other approaches.
as future work, we aim to evaluate to what extent this visual approach scales when
processes get larger and more complex. in this way, we can obtain direct feedback about
whether business stakeholders can understand and beneÔ¨Åt from our visual approach.
also, we aim to integrate it with process cubes , thus providing a complete suite to slice,
dice, drill down, roll up and compare process variants.
references
1. van der aalst, w.m.p.: process mining: discovery, conformance and enhancement of busi-
ness processes. 1st edn. springer-verlag berlin heidelberg (2011)
2. bolt, a., van der aalst, w.m.p.: multidimensional process mining using process cubes. in:
enterprise, business-process and information systems modeling. v olume 214 of lecture
notes in business information processing. springer international publishing (2015) 102‚Äì
116
3. van der aalst, w.m.p.: process cubes: slicing, dicing, rolling up and drilling down event data
for process mining. in: proceedings of the first asia paciÔ¨Åc conference on business process
management. v olume 159 of lecture notes in business information processing., springer
international publishing (2013) 1‚Äì22a visual approach to spot differences in event logs 15
4. van der aalst, w.m.p., schonenberg, m.h., song, m.: time prediction based on process
mining. information systems 36(2) (2011) 450 ‚Äì 475 special issue: semantic integration of
data, multimedia, and services.
5. welch, b.l.: the generalization of ‚Äòstudent‚Äôs‚Äô problem when several different population
variances are involved. biometrika 34(1-2) (1947) 28‚Äì35
6. cohen, j.: statistical power analysis for the behavioral sciences. lawrence erlbaum asso-
ciates (1988)
7. van dongen, b.f., de medeiros, a.k.a., verbeek, h.m.w., weijters, a.j.m.m., van der
aalst, w.m.p.: the prom framework: a new era in process mining tool support. in: ap-
plications and theory of petri nets. v olume 3536 of lecture notes in computer science.
springer berlin heidelberg (2005) 444‚Äì454
8. de leoni, m., mannhardt, f.: road trafÔ¨Åc Ô¨Åne management process. 10.4121/uuid:
270fd440-1057-4fb9-89a9-b699b47990f5 (2015)
9. kriglstein, s., wallner, g., rinderle-ma, s.: a visualization approach for difference analysis
of process models and instance trafÔ¨Åc. in: business process management. v olume 8094 of
lecture notes in computer science. springer berlin heidelberg (2013) 219‚Äì226
10. cordes, c., v ogelgesang, t., appelrath, h.j.: a generic approach for calculating and visual-
izing differences between process models in multidimensional process mining. in: business
process management workshops. v olume 202 of lecture notes in business information
processing. springer international publishing (2015) 383‚Äì394
11. la rosa, m., dumas, m., uba, r., dijkman, r.: business process model merging: an ap-
proach to business process consolidation. acm trans. softw. eng. methodol. 22(2) (march
2013) 11:1‚Äì11:42
12. ivanov, s., kalenkova, a., van der aalst, w.m.p.: bpmndiffviz: a tool for bpmn models
comparison. in: proceedings of the bpm demo session 2015 co-located with the 13th
international conference on business process management (bpm 2015), innsbruck, austria,
september 2, 2015. (2015) 35‚Äì39
13. van beest, n., dumas, m., garc ¬¥ƒ±a-ba Àúnuelos, l., la rosa, m.: log delta analysis: inter-
pretable differencing of business process event logs. in: proceedings of the 13th international
conference on business process management (bpm‚Äô15). (2015) 386‚Äì405
14. nguyen, h., dumas, m., la rosa, m., maggi, f.m., suriadi, s.: mining business process
deviance: a quest for accuracy. in: on the move to meaningful internet systems (otm
2014). v olume 8841 of lecture notes in computer science. springer berlin heidelberg
(2014) 436‚Äì445
15. lakshmanan, g., rozsnyai, s., wang, f.: investigating clinical care pathways correlated with
outcomes. in: business process management (bpm 2013). v olume 8094 of lecture notes
in computer science. springer berlin heidelberg (2013) 323‚Äì338
16. jagadeesh chandra bose, r., van der aalst, w.m.p.: abstractions in process mining: a
taxonomy of patterns. in: business process management (bpm 2009). v olume 5701 of
lecture notes in computer science. springer berlin heidelberg (2009) 159‚Äì175
17. swinnen, j., depaire, b., jans, m., vanhoof, k.: a process deviation analysis ‚Äì a case study.
in: business process management workshops. v olume 99 of lecture notes in business in-
formation processing. springer berlin heidelberg (2012) 87‚Äì98