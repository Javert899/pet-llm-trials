1
e-mail:m.pesic@tm.tue.nl, w.m.p.v.d.aalst@tm.tue.nlsoftware tools for technology transfer manuscript no.
(will be inserted by the editor)
modelling work distribution mechanisms using colored
petri nets
maja pesic, wil m.p. van der aalst
department of technology management, eindhoven university of technol ogy, p.o.box 513, nl-5600 mb, eindhoven, the
netherlands.
received: date / revised version: date
abstract. workﬂow management systems support busi-
ness processes and are driven by their models. these
models cover diﬀerent perspectives including the control-
ﬂow, resource, and data perspectives. this paper focuses
on the resource perspective , i.e., the way the system dis-
tributes work based on the structure of the organiza-
tion and capabilities/qualiﬁcations of people. contempo-
rary workﬂow management systems oﬀer a wide variety
of mechanisms to support the resource perspective. be-
cause the resource perspective is essential for the appli-
cability of such systems, it is important to better under-
stand the mechanisms and their interactions. our goal
is not to evaluate and compare what diﬀerent systems
do, but to understand howthey do it. we use colored
petri nets (cpns) to model work distribution mecha-
nisms. first, we provide a basic model that can be seen
as a reference model of existing workﬂow management
systems. this model is then extended for three speciﬁc
systems (staﬀware, filenet, and flower). moreover,
we show how more advanced work distribution mecha-
nisms, referred to as resource patterns , can be modelled
and analyzed.
1 introduction
workﬂow management systems are process-aware infor-
mation systems [5,19], which are used in companies as
a means for the computerized structuring and driving of
complex business processes. workﬂow management sys-
tems implement business process models, and use them
for driving the ﬂow of work by allocating the right em-
ployees to the right tasks at the right times. the system
manages the work of employees . it will determine which
tasks an employee has to execute and when, which doc-
uments will be used, which information will be availableduring work, etc. typically, a workﬂow management sys-
tem uses several mechanisms to distribute work. never-
theless, we believe that existing systems are too limited
in this respect. the goal of this paper is not to propose
advanced work distribution mechanisms. instead, we fo-
cus on the analysis of functionality in existing systems.
the goal is not to evaluate these systems, but to under-
stand howthey oﬀer speciﬁc functionality. a deeper un-
derstanding of particular aspects of work distribution is
essential for developing a new breed of more user-centric
systems.
the work reported in this paper can be seen as an ex-
tension of the workﬂow patterns initiative1[6]. within
the context of this initiative 43 resource patterns [48,
46] have been deﬁned. using a patterns approach, work
distribution is evaluated from the perspective of the end-
user as a dynamic property of workﬂow management sys-
tems. the work reported in this paper adds to a better
understanding of these mechanisms by providing explicit
process models for these patterns, i.e., the descriptive
models are augmented with executable models. most
work reported in literature (cf. section 4) uses static
models to describe work distribution. consider for ex-
ample the meta modelling approaches presented in [8,
38,40,39,45]. these approaches use static models (e.g.,
uml class diagrams) to discuss work distribution con-
cepts. this paper takes a truly dynamic model – a col-
ored petri net model – as a starting point, thus clearly
diﬀerentiating our contribution from existing work re-
ported in literature.
colored petri nets (cpns) [29,32] are a natural ex-
tension of the classical petri net [43]. there are several
reasons for selecting cpns as the language for modelling
work distribution in the context of workﬂow manage-
ment. first of all, cpns have formal semantics and al-
low for diﬀerent types of analysis, e.g., state-space anal-
1www.workﬂowpatterns.commaja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 3
ysis and invariants [30]. second, cpns are executable
and allow for rapid prototyping, gaming, and simula-
tion. third, cpns are graphical and their notation is
similar to existing workﬂow languages. finally, the cpn
language is supported by cpn tools2– a graphical en-
vironment to model, enact and analyze cpns.
in this paper, we provide a basic cpn model that
can be seen as a reference model of existing workﬂow
management systems. the model will incorporate con-
cepts of a task, case, user, work item, role and group.
this model should be seen as a starting point towards
a more comprehensive reference model for work distribu-
tion. the basic cpn model is extended and specialized
for three speciﬁc systems: staﬀware [51], filenet [22],
and flower [41]. these three models are used to in-
vestigate diﬀerences between and similarities among dif-
ferent work distribution mechanisms in order to gain a
deeper understanding of these mechanisms. in addition,
advanced resource patterns that are not supported by
these three systems are modelled by extending the basic
cpn model.
the remainder of this paper is organized as follows.
section 2 presents the basic cpn model which should
be considered as a reference model of existing work-
ﬂow management systems. section 3 extends this model
in two directions: (1) section 3.1 specializes the model
for three diﬀerent systems (i.e., staﬀware, filenet, and
flower), and (2) section 3.2 extends the basic model
for selected resource patterns. an overview of related
work is given in section 4. section 5 discusses our ﬁnd-
ings and, ﬁnally, section 6 concludes the paper.
2 basic model
diﬀerent workﬂow management systems tend to use dif-
ferent work distribution concepts and completely dif-
ferent terminologies. this makes it diﬃcult to compare
these systems. therefore, we will not start by develop-
ing cpn models for diﬀerent systems and see how these
can be uniﬁed, but, instead, start with modelling a ref-
erence model of existing systems. this model can assist
in comparing systems and unifying concepts and termi-
nology. we will use the term basic model to refer to
this reference model and represent it in terms of a cpn
model.
in the introduction we already motivated the use of
cpns as a modelling language [29,32]. a cpn consists
ofplaces andtransitions connected by arcs. the net-
work structure is static but places can hold tokens thus
representing the state of the model. the number of to-
kens per place can vary over time. moreover, unlike the
classical petri net, tokens can have both a value and
a time-stamp. the time-stamps indicate the availabil-
2cpn tools can be downloaded from
wiki.daimi.au.dk/cpntools/.ity of tokens and can be used to model delays, process-
ing times, timeouts, etc. the value of a token indicates
the properties of the object represented by this token.
places (represented by ovals) are typed, i.e., the tokens
in a place have values of a particular type (or color in
cpn jargon). these types are a subset of the data types
in standard ml such as the primitive types integer and
string and compositional types such as tuple, list and
record. each place can hold tokens with values of a cer-
tain type. transitions (represented by rectangles) may
consume and produce tokens. since tokens have values,
arc inscriptions are needed to specify the input-output
relations. besides the extension with token colors and
time-stamps, cpn models allow for hierarchy. complex
models may be decomposed into sub-pages, also referred
to as sub-processes or modules, to obtain a layered hi-
erarchical description. a more detailed discussion of the
cpn concepts is beyond the scope of this paper. in the
remainder, we assume that the reader is familiar with
the cpn language and refer to [29,32] for more details.
we developed the basic model as a work distribu-
tion model of an example of a typical workﬂow man-
agement systems presented in chapters 2 and 3 in the
workﬂow management book [5]. the basic model repre-
sents a workﬂow management system where the business
process is deﬁned as a set of tasks. before the process
can be initiated and executed, it has to be instantiated.
one (executable) instance of a process is referred to as
acase. each case traverses the process. if a task is en-
abled for a speciﬁc case, a work item , i.e., a concrete
piece of work, is created. there is a set of users that can
execute work items. the users are embedded in the or-
ganizational structure on the basis of their roles, and the
groups they belong to. group is an organizational unit
(e.g., sales, purchasing, production, etc.), while role rep-
resents a capability of the user (e.g., manager, software
developer, accountant, etc.). these concepts are mapped
onto cpn types as shown in table 1. as indicated, cpn
uses standard ml types (e.g., string andint) and type
constructors such as product to create pairs and other
complex constructs (e.g., (1,“taska”) represents a value
of type wi).
during the work distribution work items change state.
the change of state depends on the previous state and
determines the next actions of users and the distribution
mechanism. a model of a life cycle of a work item shows
how a work item changes states during the work distri-
bution. for more detailed models about life cycle models
we refer the reader to literature, e.g., [5,17,19,28,35,40].
we develop and use the life cycle models as an aid to de-
scribe work distribution mechanisms. the basic model
uses a simple model of the life cycle of work items and
it covers only the general, rather simpliﬁed, behavior of
workﬂow management systems (e.g., errors and aborts
are not considered). figure 1 shows the life cycle of a
work item of the basic model. after the newwork item
has arrived, it is automatically also enabled and then4 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
table 1. basic workﬂow concepts
color task = string;
color case = int;
color wi = product case * task;
color user = string;
color role = string;
color group = string;
new 
assigned enabled initiated 
offered 
selected started executed completed 
removed from 
the distribution 
the user is 
executing the 
work item waiting for the 
preconditions  
can not be 
selected again 
by other users withdrawn from the other queues in the queues,
waiting to be selected the distribution is 
allocating users ready to be 
distributed 
fig. 1. basic model - work item life cycle
taken into distribution (i.e., state initiated ). next, the
work item is oﬀered to the user(s). once a user selects
the work item, it is assigned to him/her, and (s)he can
start executing it. after the execution , the work item
is considered to be completed , and the user can begin
working on the next work item.
to simulate (execute) the work distribution model, it
is necessary to initiate the model by deﬁning input ele-
ments . table 2 shows the four elements that are required
for the simulation of the basic model. for every input
element, table 2 shows the element name (i.e., “sys-
tem users”, “new work items”, “task maps” and “user
maps”). besides the name, there are a short description
of the element, the color in the cpn model that rep-
resents the element and a simple example of the initial
element value. in this example, there are two work items
available for the case “1”: “write article” and “read arti-
cle” (new work items ). the authorization ( task maps ) of
these two tasks is speciﬁed in such a way that the task
“write article” is mapped to the user who has the role
“student”, and is in the group “information systems”.
the task “read article” is mapped to the user with the
role “professor”, from the group “information systems”.
the organizational structure ( user maps ) contains two
users. first, there is “mary” who has the role of “stu-
dent” in the group “information systems”. second, user
“joe” has the role “professor” and he works in the groups
“information systems” and “mathematics”.
as a model of an abstract workﬂow management sys-
tem, we have developed the basic model on the basis of
predeﬁned assumptions: (1) we abstract from the process
perspective (i.e., splits, joins, creation of work items), (2)
we only consider the “normal” behavior (i.e., work items
are completed successfully; errors and aborts are not in-
cluded), and (3) we abstract from the user interface.to be offered
uwi
withdrawn offer
uwi
selected
uwi
approved
uwi
rejected
uwi
completed
uwiwork distribution
workdistributionwork lists
worklists
fig. 2. basic model - main
table 3. messages between modules
place message
to be oﬀered a work item is oﬀered to the user.
withdrawn oﬀer withdraw the oﬀered work item
from the user.
selected the user requests to select the work
item.
approved allow the user to select the work
item.
rejected do not allow the user to select the
work item.
completed the user has completed executing
the work item
the basic model is organized into two sub-systems:
the work distribution and the work lists module. the
cpn language allows for the decomposition of complex
nets into sub-pages, which are also referred to as sub-
systems, sub-processes or modules. by using such mod-
ules we obtain a layered hierarchical description. fig-
ure 2 shows the modular structure of the basic model.
the two sub-modules communicate by exchanging mes-
sages via six places. these messages contain information
about a user and a work item. every message place is
of the type (i.e., the cpn color set) “user work item”
(color uwi = product user * wi ), which is a combi-
nation of a user and a work item. table 3 shows the
description of the semantics of diﬀerent messages that
can be exchanged in the model.
work distribution. the work distribution module man-
ages the distribution of work items by managing the pro-
cess of work execution and making sure that work items
are executed correctly. it allocates (identiﬁes) users to
whom the new work items should be oﬀered, based on
authorization ( tmap ) and organization ( umap ) data.
three (out of four) input elements are placed in this
module: new work items ,user maps andtask maps .
figure 3(a) shows the work distribution module.
the new work items are determined as input values (ini-maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 5
table 2. input for the basic model
1.system users a set of available users;
cpn color: color users = list user;
example: iuser = 1‘”mary”++1‘”joe”;
2.new work items work items that have arrived and are ready to be distributed to users ;
cpn color: color wi = product case * task;
example: iwi = 1‘(1,”write article”)++1‘(1,”read article”);
3.task maps for every task authorization is deﬁned with a role and a group;
cpn color: color tmap = product task * role * group;
example: itmaps = [(”write article”, ”student”, ”information systems”) , (”read article”, ”professor”,
”information systems”)];
4.user maps the organizational structure is used to map users to the authorization of t asks;
cpn color: color umap = product user * roles * groups; (color roles = list role; color groups = list group;)
example: iumaps = [(”mary”, [”student”], [”information systems”]), (”jo e”, [”professor”], [”mathe-
matics”, ”information systems”])];
tial marking) in the place new work items . the ﬁrst to
ﬁre is the transition oﬀers, which retrieves the task maps
and user maps (as two input elements) from the places
task map anduser map . these three input parameters
are passed to the function oﬀer on the outgoing arc
which produces user work items in the place to be of-
fered. a user work item in the place to be oﬀered sends
the message to the work lists module to oﬀer the work
item to the user. this transition removes the work item
token from the place new work items and adds it to the
list of work items in the place oﬀered work items , which
stores all work items that are oﬀered but not selected
yet. this procedure is followed with every work item to-
ken from the place new work items .
the core and the logic of the allocation is captured in
the allocation function oﬀer, in the inscription of the out-
going arc from the transition oﬀers to the place to be of-
fered. this function contains allocation rules (allocation
algorithm) of the speciﬁc distribution mechanism. based
on these rules and the three input arguments it deter-
mines which work items should be oﬀered to which users
(color uwi = user * wi ). the function oﬀeruses three
input parameters: (1) user maps ( var umaps: umaps ),
(2) task maps ( var tmaps: tmaps ), and (3) a new work
item ( var wi: wi ). the allocation function oﬀerof the
basic model searches for the users to oﬀer the work item
in several steps: (1) decompose the input parameter for
the work item ( wi) into two elements - a case ( c) and a
task (t); (2) in the input parameter task maps ( tmaps )
ﬁnd a task map for the referring task ( t); (3) from the
found task map get the role ( r) and the group ( g); (4)
in the input parameter user maps ( umaps ) ﬁnd all users
that have both the referring role ( r) and are in the re-
ferring group ( g); and (5) for every user that was found,
create an oﬀer – an user work item token consisting of
the referred user value and the referred work item value.
thus, the allocation function in the basic model oﬀers
the new work item to all the users that have the autho-
rized role and group to execute the task.after the work item is allocated, the oﬀers to users
are sent to the work lists module via place to be oﬀered ,
and stored in the place oﬀered work items . next, the
work distribution module waits for the message from
the work lists module that a user requests to select
(and further execute) a work item. this message arrives
as a user work item in the place selected . the message
(token) contains the information about the work item
and the user that requests to select it.
the work distribution module makes decision about
the selection request based on the principle that only
one user at one moment can select (and execute) a work
item. thus, the place selected is connected with incoming
arcs to the transitions selects andreject and when a to-
ken arrives at this place only one of these two transition
will ﬁre. if the referring work item is in the place oﬀered
work items this means that it has not been selected yet
and the selection request should be approved, i.e., the
transition selects should ﬁre. this is achieved with the
guard on the transition selects , which makes sure that
this transition can ﬁre only if the work item is in the list
of work items in the place oﬀered work items . this guard
contains the function eltwhich checks if a list contains
an element. the transition selects removes the work item
from the list in the place oﬀered work items via a simple
function del, which deletes an element from the list. it
also removes the token from the place selected to remove
the request and puts a user work item token in the place
assigned work items and in the place approved . if a user
work item is stored in the place assigned work items , this
means that the referring user has selected the referring
work item. a user work item token in the place approved
sends a message to the work lists module that the re-
ferring user can select the referring work item. since the
work distribution module can oﬀer a new work item to
multiple users and follows the rule that only one user
can select and execute a work item at one time, when
one user selects a work item, all oﬀers should be with-
drawn. this is why the transition selects uses again the
allocation function oﬀer (with the same parameters as6 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
the transition oﬀers ) to crate a set of work item tokens
that were previously oﬀered (by the transition oﬀers ) in
the place withdrawn oﬀer . a user work item token in the
placewithdrawn oﬀer sends a message to the work lists
module to withdraw the oﬀer of the referred work item
from the referred user.
if the work item has already been selected by a user,
it is not in the place oﬀered work items and the request
should be rejected, i.e., the transition reject should ﬁre.
for this purpose we check if the work item is not the list
in the place oﬀered work items (with the negation of the
function elt) in the guard of the transition reject. this
transition removes the user work item token from the
placeselected (in order to remove request) and puts it in
the place rejected . a user work item token in the place
rejected sends a message to the work lists module to
reject a request of the referred user to select the referred
work item.
a message from the work lists module that a user
has completed a work item arrives with a user work item
token in the place completed . the transition completes
matches the user work item tokens in the places com-
pleted andassigned work items , removes them from those
two places, and produces the referring user work item to-
ken in the place closed work items . this user work item is
considered to be completed by the user, and it is archived
as closed.
work lists. figure 3(b) shows the work lists module.
this module receives messages from the work distribu-
tion module about which work items are to be oﬀered
to which users. the work lists module further manages
events associated with the activities of users. it is decom-
posed into three units, which correspond to three basic
actions users can make: log on and oﬀ (cf. figure 3(c))
in the system, select work (cf. figure 3(d)), start work
(cf. figure 3(e)), and stop work (cf. figure 3(f)).
in the sub-module log on and oﬀ (cf. figure 3(c))
every user can freely choose when to log “on” or “oﬀ”
in the system. when the transition log on ﬁres, a token
representing a user is moved from the place logged oﬀ
and produced in the place logged on . when the transition
log oﬀ ﬁres, a token representing one user is moved from
the place logged on to the place logged oﬀ . thus the
users of the system can either be logged on or oﬀ in the
system. these two states of a user are represented by an
appropriate token either in the place logged on orlogged
oﬀ, respectively. in order to perform any action in the
work list module, it is necessary that the user is logged
onin the system.
once the work item has been oﬀered to users and a
token is in the place to be oﬀered , the select work sub-
module (cf. figure 3(d)) automatically ﬁres the transi-
tioninsert and moves the user work item token to the
placeactive work items . from this place, the users who
are logged on (represented by appropriate tokens in the
placelogged on ), can choose work items that are oﬀeredto them by ﬁring the transition select. this transition
consumes (removes) a token from the place active work
items. the token is of the type user work item and its
user value matches information about the user in the
place logged on . this assures that only users that are
currently logged on can select work. when the transi-
tionselect matches the logged on user to the user work
item token in the place active work items it creates to-
kens for this user work item in the places selected and
requested . by creating a token in the place selected , a
message about the intention (request) of the user to se-
lect this work item is sent to the work distribution mod-
ule. when a token is placed in the place requested , the
work lists module stores the information about the re-
quest that is sent and waits for the reply from the work
distribution module. in the case that the message to
withdraw oﬀer arrives at the work lists module and se-
lect work sub-module, it is represented by a token in the
placewithdrawn oﬀer . the select work sub-module then
automatically ﬁres the transition delete, which removes
a token from the places active work items andwithdrawn
oﬀerand removes the oﬀered work item from the work
lists module.
the work lists module (cf. figure 3(b) ) proceeds
with the user work item in the place requested follow-
ing one of the two alternative scenarios. which scenario
will be executed depends on the answer (i.e. on the se-
lection request) that arrives from the work distribution
module. if the message (a user work item token) arrives
at the place rejected , the transition abort automatically
ﬁres and removes the token from the places rejected and
requested . this means that the request from the user to
select a work item is rejected and (s)he can not start
working. if the message arrives at the place approved ,
the user can select the work item and further ﬂow is
directed to the start work sub-module.
in the start work sub-module (cf. figure 3(e)) the
transition startﬁres if it matches the tokens for a user
work item in places requested andapproved and the refer-
ring user token is in the place logged on . when this match
is achieved, the tokens are removed from the places re-
quested andapproved and a user work item token is
placed in the place in progress . while the user is exe-
cuting the work item the token remains in the place in
progress .
the stop work sub-module (cf. figure 3(f)) has one
transition complete , which ﬁres when the user (repre-
sented by a token in the place logged on) completes a
work item that is in progress. the transition complete
removes the token from the place in progress and puts it
to the place completed . the place completed is the last
place for a user work item in the work lists module, and
when a token gets in this place, a message is sent to the
work distribution module that a user has completed a
work item.maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 7
rejected
uwiout
approved
uwiout
completed
uwiinuser map
umapsiumaps
selected
uwiinnew work items
wiiwi
to be offered
uwiouttask map
tmapsitmaps
withdrawn offer
uwiout
closed work items wioffered work items
wis[]
assigned work items
wioffers
selects[elt(wi,wis)]reject[not(elt(wi,wis))]
completes(u,wi)
uwi(u,wi)wi
umaps
wi(u,wi)tmaps
(u,wi)
offer(wi,tmaps,umaps)umapstmapsoffer(wi,tmaps,umaps)
wis
wis
wiwis
del(wi,wis)wi::wis
wi(* function "offer" takes new work items, 
and offers them to users, 
based on task maps and user maps. *)(* input *)
(* input *)
(* input *)(* work item cannot 
be selectd
more than once *)
(* allow user 
to select 
the work item  *)
(* prevent users 
to select 
the work item again,
after someone 
has selected it*)
(a) work distributionlogged off
useriuserlogged on
user[]
i/o
log off log on
u uu u(* users that are 
working/avalaible
at the moment *)
(* users that are 
currently not 
working/available *)
(c) log on and oﬀ
active work items
uwi
selected
uwioutwithdrawn offer
uwiin
logged on
user[]
i/o
requested
uwioutto be offered
uwiin
insert delete
selectuwi uwi
(u,wi)
(u,wi)uwi
u
(u,wi)uwi(* offer work items 
    to users *)
(* remove 
 the offered
 work item *)
(* send request 
    for the work item *)
(d) select work
rejected
uwiin
completed
uwioutapproved
uwiinselected
uwioutto be offered
uwiin
withdrawn offer
uwiin
logged on
user
in progress
uwirequested
uwiabortselect work
selectwork
logon and off
logonandoff
stop work
stopworkstart work
startworkuwiuwi(* request  has been sent,
wait for the response *)
(* the user is executing
        the  work item *)(* request approvement
 for executing the work item *)
(* the user has completed  the work item *)(* request  approved *)(* request  rejected *)
(* only the user which is 
logged on can work*)
(b) work listsin progress
uwioutlogged on
user[]
i/orequested
uwiin
approved
uwiinstart
(u,wi)u(u,wi)
uwi(* the request 
is approved *)
(* the work item 
is assigned to 
the user *)
(* the user is 
logged on *) (* the user is currently
   executing
   the work item *)
(e) start work
logged on
user[]
i/oin progress
uwiin
completed
uwioutcompleteu(u,wi)
(u,wi)(* when transition "complete" 
fires, execution of a work 
item is completed *)
(f) stop work
fig. 3. basic model8 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
2.1 evaluation
a state space analysis of the basic model is used for the
analysis of the correctness of the model. the results of
the state space analysis can be interpreted to check the
extend to which the model complies with the properties
of work distribution in workﬂow management systems.
the state space analysis of the basic model was per-
formed in the cpn tools [30]. the state space analysis
of the original model could not be successfully completed
because the original model is not bounded. the place
requested in the work lists module is not bounded (cf.
figure 3(b)), i.e., the user can request a work item indef-
initely often until the reply about the selection arrives
from the work distribution module. the logging on
and oﬀ sub-module greatly increased the necessary time
to construct the state space. therefore, we changed the
model at two points. first, when a user requests a work
item, (s)he has to wait for the work distribution mod-
ule to reply (and remove the referring token from the
placerequest ) before s(he) can request the same work
item again. this means that there cannot be more than
one work item token for the same user in the place re-
quest at one moment – this place is bounded. second,
to improve the speed of the state space construction, we
have removed the log on and oﬀ sub-module and we
assume that all the users are logged on to the system at
any moment. these changes made it feasible to analyse
the state space constructed by the cpn tools and did
not jeopardize the principles of the work distribution in
the basic model.
boundedness properties. the state space analysis pro-
vides the upper and lower integer bound of tokens in
every place. the bounds depend on the given initial
marking. for the state space analysis the initial mark-
ing consisted of two tokens in the place new work items ,
one token in the places task map and user map (each)
in the work distribution module and two tokens in the
placelogged on in the work lists module. the bounded-
ness results are shown in table 4. as expected, all places
have an upper bound (the upper bound is at most three,
because we changed the model to be bounded. most of
the places have zero as the lower bound, except for the
places oﬀered work items ,task map , anduser map ,re-
quested andlogged on . the places oﬀered work items ,
task map , and user map , and requested each use a list
to store tokens, and thus always contain one token (the
list). therefore, these places have both lower and up-
per bound of one token. because we keep all user to-
kens at all times in the place logged on , this place also
has equal upper and lower bound. this is why the two
user tokens from the initial marking always remain in
this place. places that refer to an work item that is in
some stage of the execution should all have the upper
bound the same like the number of tokens in the place
new work items in the initial marking, i.e., two tokens.table 4. integer bounds of a simpliﬁed basic model
bound
uplow
module place
main approved 2 0
main completed 2 0
main rejected 3 0
main selected 3 0
main to be oﬀered 3 0
main withdrawn oﬀer 3 0
select work active work items 3 0
work distribution assigned work items 2 0
work distribution closed work items 2 0
work distribution new work items 2 0
work distribution oﬀered work items 1 1
work distribution task map 1 1
work distribution user map 1 1
work lists in progress 2 0
work lists logged on 2 2
work lists requested 1 1
this is because every work item will be executed ex-
actly once. the basic model satisﬁes this property, since
places new work items, approved ,assigned work items ,in
progress ,completed , andclosed work items all have the
upper bound of two tokens. places rejected ,selected ,to
be oﬀered ,withdrawn oﬀer andactive work items have
the upper bound of three tokens, because the two ini-
tial tokens in the place new work items result in three
oﬀered user work item tokens in the place to oﬀer .
home properties. the basic model assumes that all the
new work items will be executed by the users and that,
after a ﬁnite execution sequence, the tokens from the
placenew work items will be produced in the place closed
work items , without any “work item” related tokens left
in the net. thus, none of the markings would always be
possible to reach, i.e., there are no home markings in the
basic model.
liveness properties. the state space analysis reported a
number of dead markings. i.e., a number of states of the
net in which no transition is enabled. this is a desired
property of the basic model, because at every mark-
ing where the place new work items reaches the lower
bound and the place closed work items reaches the upper
bound, no other transition in the net should be enabled,
because all the work items were completed and closed.
3 work distribution models
the basic model presented in previous section (sec-
tion 2) is used as a reference for diﬀerent extensions and
specializations of work distribution. in this section, wemaja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 9
ﬁrst extend and specialize the basic model to accommo-
date the capabilities of staﬀware, filenet and flower
(section 3.1). in section 3.2 we select four of the more
advanced resource patterns reported in [46,48]. these
four patterns are not supported by staﬀware, filenet
and flower, but we will show that it is easy to extend
the basic model to adequately address the patterns.
3.1 workﬂow management systems
we have modelled the work distribution mechanisms of
three commercial workﬂow management systems: staﬀware,
filenet and flower. filenet and staﬀware are exam-
ples of two widely used traditional workﬂow manage-
ment systems. flower is based on the case-handling
paradigm, which can be characterized as “the more ﬂex-
ible approach” [3,9]. each of the models we have devel-
oped will be described in the remainder of this section.
3.1.1 staﬀware
the basic model is extended to represent the work dis-
tribution of staﬀware. the way of modelling the organi-
zational structure andresource allocation algorithm are
changed, while the concept of work queues and the pos-
sibility of the user to forward and suspend a work item
are added to the model. in this section we ﬁrst describe
the organizational structure of staﬀware. second, we de-
scribe the work queues and the two level distribution
that accompanies them. third, we explain the resource
allocation of staﬀware and its allocation function. fi-
nally, we show which features have to be added to the
basic model to implement the suspension and forward-
ing of work.
organizational structure. simple organizational struc-
ture can be created in staﬀware using the notions of
groups androles. the notion of group is deﬁned as in the
basic model, i.e., one group can contain several users,
and one user can be a member of several groups. how-
ever, speciﬁc in staﬀware is that a role can be deﬁned for
only one user. this feature does not require any changes
in the model structure or color sets. however, it changes
the way the initial value for the user maps should be
deﬁned – one role should be assigned to only one user.
work queues. groups are used in staﬀware to model
a set of users that share common rights. the work item
can be allocated to the whole group, instead of listing
the names of users that can execute it. staﬀware intro-
duces a work queue for every group. the work queue
is accessible to all members of the group. single users
can be considered to be groups that contain only one
member. thus, one work queue is also created for ev-
ery user and this personal queue is only accessible by a
single user. from the perspective of the user, (s)he has
access to the personal work queue and to work queuesof all the groups (s)he is a member of. while the basic
model (section 2) oﬀers the work item directly to users,
staﬀware oﬀers items in two levels. first, a work item is
oﬀered to work queues (color wq = string ) in the work
distribution module (cf. figure 4). we refer to this kind
of work items as to queue work item (color qwi = prod-
uct wi * wq ). second, every queue work item is oﬀered
to the members of a group (work queue) in the oﬀering
sub-module (cf. figure 5). only one member will exe-
cute the queue work item once. we refer to a queue work
item that is oﬀered to a member (of a work queue) as to
user work item (color uwi = product user * qwi ).
figure 4 shows the ﬁrst level of distribution in the
work distribution module of staﬀware. the transition
oﬀers to work queues removes a work item token from
the place new work items and creates oﬀers to work
queues by producing queue work item tokens in place
to oﬀer to work queues . to do this, it retrieves task
maps, user maps and ﬁeld maps as input elements. it
also produces a work item token in the place oﬀered work
items. the queue work item tokens in the place to oﬀer
to work queues are produced by the allocation function
oﬀerqwiin the arc inscription between the transition
oﬀers to work queues and the place to oﬀer to work
queues . this function takes a work item, task maps, user
maps and ﬁeld maps3as parameters. the eﬀects of this
function are explained in the paragraph resource al-
location of this section (section 3.1.1). the transition
oﬀers to work queues produces a queue work item token
in the place oﬀered work items to store the information
about which work items are expected to be completed
by work queues. a token in the place to oﬀer to work
queues sends a message to the oﬀering sub-module that
the queue work item should be further distributed to the
work queue members. after the completion of a queue
work item, the oﬀering sub-module sends a message by
creating a queue work item in the place completed queue
work items . the transition completes work item consid-
ers a work item to be completed when all queue work
items that originate from that work item are completed.
the transition retrieves a work item from the place of-
fered work items and waits until all queue work items
that originate from (that were oﬀered to work queues
based on) the referring work item. for this reason, the al-
location function oﬀerqwiis called on the arc inscription
between the place completes work item and the transi-
tioncompletes work item with the same parameters like
in the arc inscription between the transition oﬀers to
work queues and the place to oﬀer to work queues . dis-
tribution to work queues in staﬀware follows a similar
logic like the distribution in the basic model, but also
introduces some changes. a diﬀerence between these two
distribution models is that, instead of distributing work
directly to the work lists module (users) like in the
3the ﬁfth parameter is an empty list and is used as aid to
perform calculations in the function. this parameter shoul d always
be left empty and does not inﬂuence the function results.10 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
rejected
uwiout
approved
uwiout
completed
uwiinuser map
umapsiumaps
selected
uwi innew  
work items
wiiwi
to be offered
uwiout
task map
tmapsitmaps
withdrawn offer
uwiout
completed
queue work items
qwito offer 
to work queues
qwi
offered 
work items
wi
closed
work items
wisuspended
uwiin
forwarded
uwixwqin
fields
fmapsifmapsoffers to 
work queues
completes
work itemoffering
offeringwi
tmaps umaps
wioffer_qwi(wi,tmaps,umaps,fmaps,[])
wi
offer_qwi(wi,tmaps,umaps,fmaps,[])umapstmaps
wifmaps
fmaps(* only umaps are 
necessary as input
for offering queue work
items to users *)(* work item is first offerd to work queues
on the basis of tmaps, umaps and fmaps *)
(* a work item is complete 
when every queue, to which it was offered,
has executed the work item  *)
fig. 4. staﬀware - work distribution
basic model, the staﬀware work distribution module
hands-oﬀ the distribution to users to is sub-module of-
fering. while a work item is the object of distribution in
the basic model, the staﬀware work distribution mod-
ule distributes queue work items.
figure 5 shows the second level of distribution in the
oﬀering sub-module of staﬀware. the ﬁrst transition to
ﬁre here is the transition oﬀers to work queues , when the
message about the new queue work item is received from
the work distribution module. this message is received
when a new queue work item token arrives at the place to
oﬀer to work queues . this transition removes the queue
work item from the place to oﬀer to work queues and
produces it in the place oﬀered work queues , retrieves
user maps and creates new user work items in the place
to be oﬀered . the oﬀers for users are created by the allo-
cation function oﬀeruwi, which takes a queue work item
that is to be oﬀered and the user maps as parameters.
this function searches in user maps for all members of
the work queue and creates a user work items for each
member that was found. the oﬀering sub-module fol-
lows the logic of the the basic model work distribution
module. for a detailed description of this kind of dis-
tribution we refer the reader to the section 2. however,
instead of starting with work items like the basic model,
the oﬀering sub-module starts with available queue work
items. an addition to the staﬀware model was the possi-
bility to suspend and forward work. these mechanisms
were added in the suspend and forward sub-module,
which will be explained later in this section.
resource allocation. the resource allocation of staﬀware
is captured in the two level distribution mechanism with
two allocation functions: (1) function oﬀerqwi(cf. fig-
ure 4) takes a new work item, task maps, user maps andselected
uwi in
assigned
work items
qwioffered queue 
   work items
qwis[]
user map
umapsiumaps
i/o
withdrawn offer
uwioutapproved
uwioutto offer
to work queues
qwii/o
rejected
uwioutto be offered
uwiout
completed 
queue work items
qwioutcompleted
uwiinsuspended
uwiin
forwarded
uwixwqin
selects[elt(qwi,qwis)]offers
completesforward
    and
suspend
suspendandforward
reject[not(elt(qwi,qwis))]
(u,qwi)
qwidel(qwi,qwis)umaps
qwis
offer_uwi(qwi,umaps)(u,qwi)qwi
qwi::qwis qwisoffer_uwi(qwi,umaps)
umaps
qwiqwi
(u,qwi)qwis
(u,qwi)
(u,qwi)(* every queue work item 
is offered to members 
of the queue *)
(* withdraw all offers 
for this queue work item *)(* use umap to 
offer qwi to 
queue 
members *)
(* a queue work item will be executed 
only once, by one user/queue member *)
fig. 5. staﬀware - oﬀering
ﬁeld maps as parameters and allocates work queues that
are authorized to execute the work item; (2) function
oﬀeruwi(cf. figure 5) takes a queue work item and
user maps as parameters and allocates all users that are
members of the referring queue.
just like the basic model, staﬀware searches for pos-
sible users based on rolesandgroups . in addition to this,
in staﬀware users can be allocated by their user names
anddata ﬁelds in the process. thus, task maps in the
staﬀware model assign a list of users, roles, groups and
ﬁelds to each task ( tmap = product task * users *
roles * groups * fields ). figure 6 shows how a task
map is speciﬁed in staﬀware. based on task maps, func-
tionoﬀerqwi(cf. figure 4) allocates work queues that
are authorized to execute the work item: (1) when a
user name is provided in a task map, the work item is
oﬀered to personal work queue of the referring user; (2)
for every role in the task map, this function oﬀers the
work item to the personal work queue of the user with
that role (note that one role can be assigned to only one
user); (3) a work item is oﬀered to the work queue of
every group that is stated in the task maps; and (4) for
authorizations via ﬁelds, allocation is executed at the
run-time. the allocation at run-time is referred to as a
dynamic work allocation. every ﬁeld has a unique name
(color field = string ), e.g., “next user” . during the ex-
ecution of the process, every ﬁeld is assigned a value,
and this value changes (e.g., users can assign values to
ﬁelds). staﬀware assumes that the value of the assigned
data ﬁeld is a group name, a role name or a user name.
if the ﬁeld “next user” (which for example has the valuemaja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 11
fig. 6. staﬀware - a task map
of “joe smith” assigned) is speciﬁed in the task map of a
task, then the actual value of the ﬁeld is assigned to the
task map entry at the moment when the task becomes
enabled. thus, “joe smith” will be used in the alloca-
tion. figure 7 shows staﬀware process client tool, where
users can access their work queues and process the work
items. in this case, there are two work queues: (1) the
work queue for the group “information systems”, and
(2) the personal work queue of the user “joe”.
when all the properties of the staﬀware work distri-
bution are merged together, unexpected scenarios might
happen. if we look at the example from table 2, we can
see that the task “read article” should be allocated to
users which are from the group “information systems”
andhave the role “professor”. the basic model allocates
this task to users that are from the group “information
systems” andhave the role “professor”, i.e., to the user
“joe”. unlike the basic model, staﬀware allocates this
task to: (1) the work queue of the group “information
systems” (which members are “mary” and “joe”), and
(2) the personal queue of the user who has the role “pro-
fessor” (with one member “joe”). a work item is com-
pleted in staﬀware when all its queue work items are
completed (cf. figure 4). thus, the task “read article”
will be execute two times: (1) once by a member of the
of the group “information systems” – “mary” or “joe”,
and (2) once by the user who has the role “professor”
– “joe”. as the result of staﬀware work distribution,
the work item “read article” has two possible scenarios
of the execution. this task will be executed either once
by “mary” and once by “joe”, or two times by “joe”.
which one of these two scenarios will take place, depends
only on which user is faster, i.e., on which users select
the task before the others do.
forward and suspend. when the user selects a work
item in the basic model, the work item is assigned to
him/her, and (s)he can startthe work item and execute
it. figure 8 shows that staﬀware oﬀers a more realistic
and somewhat more complex model of the life cycle of a
work item than the basic model. after the user selects
the work item, it is assigned to him/her, and then (s)he
can either startthe work item or forward it to another
fig. 7. staﬀware - a work queue with a work item
new 
assigned enabled 
initiated 
offered 
seleceted started executed completed 
suspend 
forward 
fig. 8. staﬀware - work item life cycle
user. forwarding transfers the work item to the state of-
fered, because it is automatically oﬀered to the new user.
if the user chooses to startthe work item, (s)he can ex-
ecute it orsuspend it. when a work item is suspended,
it is transferred back to the state initiated . after this,
the system oﬀers the work item again to all authorized
users.
forwarding and suspending of work items adds two
messages that are exchanged between work distribu-
tion and work lists modules in staﬀware model. fig-
ures 4 and 5 show two new places – forward andsus-
pend. these two new actions are triggered in the work
listmodule by the user.
figure 9 shows that in the staﬀware sub-module start
work the user can choose to select orforward (to an-
other work queue) the work item. to enable forward-
ing, we add the transition forward to the start work
sub-module in staﬀware model. the request to select
a work item is represented with a user work item in
the place requested . after this request, the start work
sub-module waits until the work distribution module
approves the request, by creating a user work item to-
ken in the place approved . when the request is approved
the transitions start work andforward can ﬁre depend-
ing on the user decision. both transitions consume the
two matching user work item tokens from the places re-
quested andapproved . the transition start work has the
same eﬀect as the basic model. the transition forward
matches the user token in the place logged on with the re-
ferring user work item, retrieves a work queue token from
the place work queues and produces a token in the place
forwarded . the initial marking for the place work queues
consists of all group names and all user names registered12 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
work queue
wqiuser ++ igroup
logged on
user[]
i/o
in progress
uwioutrequested
uwiinapproved
uwiin
forwarded
uwixwqoutforward start workwq u
(u,qwi)u(u,qwi)
(u,qwi)(u,qwi)
((u,qwi),wq)(u,qwi)(* a work queue 
is created 
for every group
and for every user *)
(* the user can choose to execute or forward the work item *)
fig. 9. staﬀware - start work
completed
uwioutin progress
uwiinsuspended
uwiout
logged on
user[]
i/osuspend
complete(u,qwi)(u,qwi)(u,qwi)
(u,qwi)u
u(* the user can 
choose to
complete 
or suspend 
the work item *)
fig. 10. staﬀware - stop work
in the system. this is straightforward because staﬀware
creates group work queues for all groups and personal
work queues for all users. the place forwarded is of the
color set type that combines a user work item and a work
queue to which the work item should be forwarded( color
uwixwq = product uwi*wq ). the transition forward
produces a token in the place forwarded with the arc in-
scription ((u,qwi),wq) . this token is sends the message
to the work distribution module that the referring user
(u) wants to forward the referring queue work item ( qwi)
to the referring work queue ( wq).
figure 10 shows that in the sub-module stop work
the user can choose to complete orsuspend the work
item. the transition suspend is added to the sub-module.
while a user is executing a queue work item, a referring
user work item token is in the place in progress . at any
time during the execution of a work item, one of the
transitions complete andsuspend can ﬁre. while transi-
tioncomplete has the same eﬀects as in the basic model,
transition suspend is new in staﬀware model. this tran-
sition matches the user token in the place logged on with
the user work item in the place in progress . it consumes
the user work item from the place in progress and pro-
duces the referring user work item token in the place sus-
pended . a user work item token in the place suspended
sends the message to the work distribution module that
the referring user wishes to suspend the referring queue
work item.the work distribution module handles forwarding
and suspending in a new sub-module: the suspend and
forward sub-module (cf. figure 11). this figure shows
how: (1) in case of forwarding the work item is automat-
ically cancelled for the current work queue and oﬀered
to the new work queue, and (2) in case of suspending the
work item is cancelled for the current work queue and re-
oﬀered as a new work item. when a message that a user
wishes to forward a queue work item to a work queue
from the work lists module arrives, a token is produced
in the place forwarded . the forward and suspend sub-
module then automatically ﬁres the transition forward .
this transition consumes the token from the place for-
warded and produces two diﬀerent tokens in places to
re oﬀer andto cancel . the queue work item token that
is forwarded is produced in the place to cancel . a new
queue work item, which consists of a referring work item
and a new work queue, is produced in the place to re
oﬀer. when the message that a user wishes to suspend
a user work item a token is produced in the place sus-
pended . the transition suspend ﬁres automatically when
the message arrives, consumes the user work item token
from the place suspended and produces two identical re-
ferring queue work item tokens in the places to cancel
andto re oﬀer . the transitions re oﬀer andcancel ﬁre
automatically when tokens are produced in places to re
oﬀerandto cancel , respectively. transition cancel con-
sumes matching queue work item tokens from the places
to cancel andselected work items . in this way the queue
work item is removed from the model. the transition re
oﬀerconsumes a queue work item token from the place
to re oﬀer and produces one in the place to oﬀer to
work queues . in this way, the oﬀering sub-module can
oﬀer the queue work item to the members of the work
queue again.
3.1.2 filenet
like staﬀware, filenet is a widely used traditional process-
oriented workﬂow management system. in this section
we will describe the filenet cpn model that we develop
using the basic model as a starting reference model.
organization. unlike the basic model and staﬀware,
filenet does not allow for modelling rolesof users. the
organizational structure in filenet can be modelled via
two types of groups:
1. administrators of the filenet system can deﬁne work
queues (color wq = string ) and assign their mem-
bers by selecting users of the filenet system. work
queues are deﬁned on the global level of the filenet
system – they are valid for every process (workﬂow)
deﬁnition.
2. process modelers can deﬁne workﬂow groups (color
wg = string ) in every process model. thus, work-
ﬂow groups belong to and are valid only in the pro-
cess (workﬂow) model in which they are deﬁned. work-maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 13
suspended
uwiinselected
work items
qwiinto offer to
work queues
qwioutforwarded
uwixwqinto re offer
qwi
to cancel
qwire offer
suspend cancelforwardqwiqwi
qwi qwi (u,qwi)((u,(wi,wq)),wq1)
qwi
qwi(wi,wq1)
(wi,wq)(* when forwarding a "user work  item":
1. cancel this "user work  item" and 2. offer this work item to the specified user *)
(* when suspending a "user work  item":
1. cancel this "user work  item" and 2. offer it again like before *)
fig. 11. staﬀware - suspend and forward
rejected
uwiout
approved
uwi out
completed
uwiinuser map
umapsiumaps
selected
uwi innew
 work items
wiiwi
to be offered
uwi out
task map
tmapsitmaps
withdrawn offer
uwioutcompleted 
queue work items
qwito offer 
to queues
qwi
offered 
work items
wi
closed
work items
wisuspended
uwiin
forwarded
uwixqinoffers to 
queues
completes
work itemoffering
offeringwi
tmapsumaps
wioffer_qwi(wi,tmaps,umaps,[])
wi
offer_qwi(wi,tmaps,umaps,[])umaps
tmaps
wi(* only umaps are 
necessary as input 
for offering queue work
 items to users *)(* work item is first offerd to queues
on the basis of tmaps and umaps *)
(* a work item is complete 
when every queue, to which it was offered,
has executed the work item  *)
fig. 12. filenet - work distribution
ﬂow groups represent teams in filenet. while exe-
cuting a task of a process deﬁnition, users have the
possibility to change the structure of workﬂow groups
of the referring process.
queues. work queues andpersonal queues are two types
of queues ( color q = string ) in filenet. queues are pools
from which users can select and execute work items. a
work queue can have a number of members while a per-
sonal queue has only one member. when a work item is
oﬀered to a queue, one of the queue members can select
and execute the work item. filenet distributes work in
two levels using queues. first, the work item is oﬀered
to queues as a queue work item (color qwi = product
wi * q ). second, the queue work item is oﬀered to the
members of the queue as a user work item (color uwi
= product user * qwi ).
figures 12 and 13 show that the model of the two-
level work distribution in filenet is similar to the staﬀware
model. for more detailed description of this kind of dis-
tribution we refer the reader to the staﬀware description
in section 3.1.1.selected
uwi in
assigned
work items
qwioffered queue 
   work items
qwis[]
withdrawn offer
uwioutapproved
uwi outto offer
to queues
qwii/o
rejected
uwi outto be offered
uwiout
completed 
queue work itemsqwioutcompleted
uwi insuspended
uwiin
forwarded
uwixqinuser map umapsiumaps
i/o
selects[elt(qwi,qwis)]offers
completessuspend and
forward
suspendandforward
reject[not(elt(qwi,qwis))]
(u,qwi)
qwidel(qwi,qwis) qwis
offer_uwi(qwi,umaps)(u,qwi)qwi
qwi::qwisqwisoffer_uwi(qwi,umaps)
qwiqwi
(u,qwi)qwis(u,qwi)
(u,qwi)umaps
umaps(* every queue work item 
is offered to members of the queue *)
(* withdraw all offers 
for this queue work item *)(* use umap to 
offer qwi to 
queue 
members *)
(* a queue work item will be executed only once,
by one user/queue member *)
fig. 13. filenet - oﬀering
resource allocation. filenet allocates work using work
queues and lists of participants. figure 14 shows that a
task in filenet can be allocated to either a work queue
orto a list of participants. in this ﬁgure we can see
that the task “read article” has been allocated to the
participants that belong to the workﬂow group “infor-
mation systems”. users and workﬂow groups can be en-
tries of a list of participants. in the filenet model, task
maps are deﬁned as a combination of a task, a list of
work groups, and a work queue ( color tmap = product
task * wgs * wq; ). when deﬁning the input value for
a task map, either a work queue or a list of workﬂow
groups should be initiated.
if the task is allocated to a work queue, filenet oﬀers
the referring work item to the work queue. if the task
is allocated to a list of participants, then it is oﬀered to
personal queues of all users that are given as individual
participants or are members in participating workﬂow
groups. allocation via participants is introduced to sup-14 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
fig. 14. file net - allocation for work queues or participants
port team work in filenet, via the so-called “process vot-
ing”. during the execution of a task, all participants vote
for the speciﬁed decision. the work distribution mecha-
nism uses their decisions to determine which work items
will be executed next. since our models abstract from
the process perspective, we did not model process vot-
ing in the filenet model.
the allocation function oﬀerqwiallocates queues
that are authorized to execute the referring task. fig-
ure 12 shows this function in the inscription on the arc
between the transition oﬀers to queues and the place to
oﬀer to queues . this function takes four parameters: (1)
the referring work item, (2) task maps, (3) user maps,
and (4) an empty list – used as an utility for calculations.
this function ﬁrst searches the task maps for the map
of the task that is speciﬁed in the work item. the refer-
ring task map will point to either a work queue or to a
list of participants. in case of a work queue the function
produces a queue work item token for the referring work
queue. the situation is slightly more complex in the case
of a list of participants, because this list may contain
users and workﬂow groups as elements. for each user in
the list of participants a queue work item token is pro-
duced for the personal queue of the user. for each work-
ﬂow group in the list of participants queue work items
are produced for personal queues of all group members.
forward and suspend. users can forward and suspend
work items in filenet. when the user selects a work item
(s)he can start working on it or forward it to another
user. in this case filenet automatically oﬀers the work
item to the new user. when the user is executing a work
item s(he) can complete or suspend the work item. in
this case filenet needs to apply the distribution mecha-
nism again, and oﬀer the work item to all allocated users.
figure 15 shows the life cycle of a work item in filenet.new 
assigned enabled 
initiated 
offered 
seleceted started executed completed 
suspend 
forward 
fig. 15. filenet - work item life cycle
when the life cycle models of filenet and staﬀware (cf.
section 3.1.1) are compared, it can be seen that they
are identical. therefore, we use the same adjustments in
filenet like in staﬀware models to implement forward-
ing and suspension: modules start work andstop work
are changed and sub-module suspend and forward is
added in the work distribution module. for detailed
description of these sub-modules we refer the reader to
staﬀware description in section 3.1.1.
3.1.3 flower
flower is a case handling system. case handling sys-
tems diﬀer in their perspective from traditional process-
oriented workﬂow management systems because they fo-
cus on the case, instead of the process [3,9]. flower of-
fers a whole case to a user by oﬀering all available work
items from the case. when working with flower, the
user does not have to follow the predeﬁned order of tasks
in the process deﬁnition.
to model flower, we extend the basic model in
such a way that (1) it handles case-handling distribution
instead of the process-oriented one, (2) it enables the
complex authorization anddistribution speciﬁcations thatmaja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 15
flower has, and (3) it enables users to execute ,open,
skipandredowork items.
case handling. to model a case handling system like
flower, a number of color sets are introduced. every
process deﬁnition in flower is referred to as a case type
(color casetype = string ). thus, every case type refers
to a list of tasks ( color tasks = list task ), which form
the process deﬁnition ( color process = product casetype
* tasks ) for that case type. one case ( color case =
product caseid* casetype ) represents an instance of a
case type and is identiﬁed by a case identiﬁcation ( color
caseid = int ).
flower distributes work in two levels. first, a case
is distributed to users ( color ucase = product user *
case). only one user can select and open the case at
one moment. unlike the distribution in the basic model,
where distributed work items refer to single tasks, flower
distributes whole cases on its ﬁrst level of distribution.
second, the selected case is opened for the user. work
items ( color wi = product case * task ) from the case
are oﬀered to the user, based on the authorization and
distribution rules. in the second level of flower dis-
tribution users can execute, open, skip and redo work
items from the selected case, instead of only executing
work items from multiple cases like in the basic model,
staﬀware and filenet.
to model the case handling in flower, we introduce
changes in the basic model. generally, we change the
object of distribution: while the basic model distributes
work items, flower model distributes whole cases. to
achieve this, we change the color types of the places from
the “work item” types to the “case types”. figure 16
shows the main module of the flower model. when
compared with the main module of the basic model
(cf. figure 2), we can see that the color types of the
places changed. in the basic model, all places were of
the “user work item” ( color uwi = product user * wi )
color type. these places are used to store the informa-
tion about the object of distribution in the basic model,
i.e., about user work items. in the flower model, color
types of the places store the information about the object
of distribution in flower, i.e., about “user case” ( color
ucase = product user * case ). note that there are addi-
tional places with new color types in the flower model.
places case in progress andapproved case are of the color
typeopencase and store the information about a case
and all its work items. places skip,execute ,redoand
openare new in the flower model and all have color
typeopencasexuwi . these places are introduced in
the flower model to support the actions of executing,
opening, skipping and redoing a user work item ( wi) in
an open case ( opencase ). these new flower-speciﬁc
places and color types are described further in this sec-
tion.offer case
ucase
withdraw case offer
ucase
selected case
ucaseapproved case
opencase
rejected case
ucase
completed case
ucase
execute
opencasexuwiskip
opencasexuwi
redo
opencasexuwicase in progress
opencase
open
opencasexuwiwork distribution
workdistributionwork lists
worklists
fig. 16. flower - main
authorization rights. authorization rights are deﬁned
for every case type. first, process-speciﬁc roles are de-
ﬁned within a case type ( color prole = product role *
casetype ). second, to make authorization rights, roles
are assigned to tasks within the case type. these au-
thorization rights are stored in task maps ( color tmap
= product task * role * casetype ). the authorization
rights determine what users can do and are applied by
the distribution mechanism when opening the case for
the user. the user is allowed to work only on tasks for
which (s)he has the authorized roles. although autho-
rization exists in the basic model, staﬀware and filenet,
in these models it is deﬁned on the global (system) level,
instead of embedding roles in process models. rather,
roles are deﬁned in the global organizational model.
distribution rights. distribution rights deﬁne what users
should do . unlike authorization rights, distribution rights
are deﬁned on the global level of the flower system,
and are valid for all case types. these rights can be
used to model the organizational structure and to as-
sign authorization rights from the process deﬁnitions
(case types) to users. function proﬁles andwork pro-
ﬁlesdeﬁne distribution rights. function proﬁle has a
unique function name ( color fn = string ) and a list
of case type authorization roles ( color fp = product fn
* proles ). if, for example, there are two case types (two
processes) – one with “secretary1” and the other with
“secretary2” as an authorization role, the function pro-
ﬁle “secretary” could include both authorization roles.16 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
when we would assign the function proﬁle “secretary”
to a user, we would indirectly assign both authorization
roles from two processes.work proﬁles assign function
proﬁle(s) to users and they can be used to structure or-
ganization into groups, departments or units. one work
proﬁle consists of a unique name ( color wn = string ),
a list of users and a list of function proﬁles ( color wp =
product wn * users * fns ). distribution rights are used
to deﬁne the organizational model in flower. while
this model is independent of the authorizations in the
basic model, staﬀware and filenet, in flower it has
to be related to special authorization roles form case
types. in this way, flower creates two-layered organi-
zation speciﬁcation: one part of it is in the distribution
rights and the other in the authorization rights.
to model distribution rights in the flower model,
we split the place user map from the work distribution
module in the basic model (cf. figure 3(a)) into places
work proﬁle andfunction proﬁle in the flower work
distribution module (cf. figure 17). instead of retrieving
organizational information from one place ( user map ), in
flower model we retrieve organizational information
from two places ( work proﬁle andfunction proﬁle ).
distribution of cases. figure 17 shows the work dis-
tribution module of flower. in this module, flower
model distributes new cases to users, instead of distribu-
tion work items like the basic model. when a new case
token is available in the place new cases , the transition
oﬀers case ﬁres. this transition consumes the case token
from the place new case and retrieves task maps, work
proﬁles and function proﬁles from places task map ,work
proﬁle andfunction proﬁle , respectively. it adds a token
to the list of cases in the place oﬀered cases . this place
stores a list of cases that were oﬀered to users but not
yet selected by any user. the most important eﬀect of
this transition is that it produces a user case token in
the place oﬀer case , via the case allocation function of-
fercin the arc inscription. a user case token in the place
oﬀer cases sends a message to the work lists module to
oﬀer the referring case to the referring user. the alloca-
tion function oﬀerc takes four parameters: (1) case that
will be allocated, (2) task maps to ﬁnd the mapping of
the referring case type task to the case type role, (3) a
list of function proﬁles to ﬁnd the ones that contain the
case-type-speciﬁc role from the task maps, and (4) a list
of work proﬁles to ﬁnd the users that are assigned to the
appropriate function proﬁles. next, the work distribu-
tion module waits for the message from the work lists
module that a user wants to select a case. this mes-
sage arrives with a user case token in the place selected
case. only one user can select a case at the same time
in flower. the work distribution module responds to
this message accordingly to this rule by checking if the
case has already been selected, i.e., if the referring case is
contained in the list of oﬀered cases in the place oﬀered
cases. transitions selects case andreject case are therejected
    case
ucaseout
approved 
    case
opencaseout
completed 
     case
ucaseinselected
   case
ucaseinnew 
cases
caseicases
offer 
case
ucaseouttask map
tmapsitmaps
withdraw 
case offer
ucaseout
closed 
cases
caseoffered 
cases
cases[]
assigned 
   cases
ucases[]tprocess
processiprocess
skip
opencasexuwiin
execute
opencasexuwiinredo
opencasexuwiin
case 
in progressopencase outopen
opencasexuwiinfunction 
 profile
fpsifpswork 
profile
wpsiwpsoffers 
case
selects 
  case[elt(((cid,ct)),cs)]reject case[not(elt(c,cs))]
completes 
    casecase distribution
case distribution
(u,c)(u,c)c
c(u,(cid,ct))tmaps
(u,c)
tmapsofferc(c,tmaps,fps,wps)
cs
cs
[(u,((cid,ct)))]^^ucscs
del(((cid,ct)),cs)c::cs
ucsucs
del((u,c),ucs)fpswps
fpswps
opencase((cid,ct),ts,u,tmaps,fps,wps)
offerc(((cid,ct)),tmaps,fps,wps)
(ct,ts)(* the whole case is offered to users
based on the tmaps, function profiles
and work profiles *)
(*  when the user 
has selected the case,
the case is opened 
for the user  *)
fig. 17. flower - work distribution
two alternative transitions that can respond to the new
user case token in the place selected case . the transition
selects case will ﬁre if the referring case is contained in
the list of cases in the place oﬀered cases , which can
be seen in the guard of the transition. this transition
will consume the user case token from the place selected
case, remove the referring case from the list of cases in
the place oﬀered cases and produce the user case token
in the place assigned cases . by removing the token from
the place oﬀered case , we assure that the case cannot be
selected again. the transition selects case also sends two
messages to the work lists module. first, since a user
can select the case, a message is sent to the work lists
module to withdraw all oﬀers of the referring case. the
transition selects case sends this message by producing
all previous oﬀers of the referring case in the place with-
draw case oﬀer . second, the approval message for the
selection of the case (for the user) is sent by producing
the referring open case token in the place approved case .
the function opencase in the arc inscription between
the transition selects case and the place approved case
produces an open case token. this function takes six pa-
rameters: (1) the identiﬁcation and the type of the case
to be open, (2) the tasks that are contained in the pro-
cess deﬁnition of the case type, (3) the user for whom
the case is open, (4) a list of task maps to ﬁnd case type
authorized roles for every task, (5) a list of function pro-
ﬁles to search for the ones that contain the authorization
roles for the tasks, and (6) a list of work proﬁles to deter-maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 17
mine which of the selected function proﬁles are assigned
to the user. the open case token ( color opencase =
product ucase*casestate ) that is produced stores the
information about the user, case and the state of the
case (color casestate = product wis*wis*wis*wis ).
the case state consists of four lists of work items that
are: (1) waiting to be enabled, (2) active (i.e. they are en-
abled and can be executed), (3) ﬁnished (executed), and
(4)skipped . when the case is opened for the ﬁrst time,
the list of active items contains the ﬁrst work item, the
list of waiting items all the other authorized work items,
and the lists of executed and skipped items are empty.
after the work distribution module opens the case
for the user, the case distribution sub-module handles
the distribution within the case. this sub-module man-
ages events when users work on tasks within the case.
we refer to this part of the flower work distribution
as to the distribution within the case and describe it
further in this paper.
the last message that arrives from the work lists
module is that the user has ﬁnished working with the
case. this message arrives with a new user case token in
the place completed case . the transition completes case
consumes this token, removes the referring user case to-
ken from the list of assigned cases in the place assigned
cases and produces the referring case token in the place
closed . although, in flower system, after the case has
been closed it is possible to be oﬀered again, we do not
model this in the flower cpn model due to the com-
plexity and size of the model. however, it is possible to
include this behavior in the model by: (1) returning the
closed case token to the place new case, and (2) stor-
ing permanently the state of every case, similarly like
task maps, function proﬁles, work proﬁles and process
deﬁnitions.
figure 18 shows the work lists module of the flower
model. generally, the functionality of the part of this
module that deals with the distribution of cases is the
same as the work lists module of the basic model. a
whole case is selected ,started andstopped in the flower
model in the same way like a work item in the ba-
sic model. however, there are some diﬀerences between
these two modules. first, the places are named diﬀer-
ently to match the context. there are two kinds of places
in the work lists module of flower model: (1) names
of the places and transitions that deal with the case dis-
tribution contain the word “case” (e.g., the place oﬀer
case), and (2) names of the places that deal with the dis-
tribution of work items within a case do not contain the
word “case” (i.e., places execute ,open,redoandskip).
second, the places that deal with the distribution of
whole cases are of the user case type ( ucase ), instead of
the user work item type ( uwi). finally, the sub-module
action is new in the flower model and it deals with
actions of users in the context of the distribution of work
items within a case. the action sub-module is described
further in this paper, within the paragraph about therejected 
  case
ucasein
completed 
     case
ucaseoutapproved
   case
opencaseinselected 
   case
ucaseoutoffer case
ucasein
withdraw 
case offer
ucasein
logged on
usercase 
in progress
opencaseinrequest case
ucase
skip
opencasexuwioutexecute
opencasexuwiout
redo
opencasexuwioutopen
opencasexuwioutabort caseselect case
select case
logon 
and off
logon and off
stop case
stop casestart case
start case
action
actionuc uc
(* after selecting the case,
the user can work on the work items
from that case, or close the case*)
fig. 18. flower - work lists
distribution within the case. because the distribution of
the cases in the flower work lists module is similar to
the distribution of work items in the work lists module
of the basic model, for a detailed description we refer
the reader to section 2.
distribution within a case. when working with tradi-
tional, process-oriented, systems users can mostly exe-
cute or cancel work items. this property of such sys-
tems can be found in the basic model, staﬀware model
and filenet model. unlike these process-oriented sys-
tems (models), a case handling system flower, and
its model, allow users to perform four actions on work
items: open, execute, skip and redo. figure 19 shows that
the life cycle of a work item in flower is somewhat
more complex that the life cycles of the other models.
because a user selects a whole case, work items are as-
signed to the user before they are enabled . following the
process deﬁnition of a case type (because of the complex-
ity we assume this to be a sequence of tasks) the flower
systems enables the next work item in the sequence. af-
ter the user selects an enabled work item, (s)he starts
with its execution and the work item is transferred to
the state execute . once the execution stops, the work
item becomes completed . it is possible to skipanen-
abled work item and transfer it without the execution to
the state completed . besides enabled items, the user can
also skip work items that are assigned . the user can open
and start an assigned work item. by redoing a completed
work item, the user transfers the work item to the state
enabled .18 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
new 
assigned enabled initiated 
offered 
seleceted started executed completed skipopen
skipredoexecute
fig. 19. flower - work item life cycle
the state of the case plays an important role in the
distribution within the case from two perspectives: first,
which of the four actions are possible depends on the
state of the case. for example, it is only possible to ex-
ecute the work items that are contained in the list of
active work items in the case state. second, each of the
four actions changes the state of the case. for example,
if a work items was executed, it is removed from the list
of active items and added to the list of ﬁnished items
in the case state. we use table 5 to explain the role of
the case state in the distribution within the case. each of
the four rows refers to one of the four actions – the name
of the action is stated in the column “action”. the ﬁrst
column (“work item was”) is a precondition that states
from which list in the case state the work item has to be
selected in order to undergo the referring action (e.g.,
the action open can be applied only to waiting work
items). the column “work item becomes” is a postcon-
dition that states to which list the selected work item
will be moved after the action (e.g., after opening, the
work item is moved to the list of active items in the case
state). finally, the postcondition column “side eﬀects”
states what are the possible side eﬀects of the action.
for example, when opening an work item, other (if any)
waiting and/or active items after the opened item are
moved to the list of skipped items in the case state.
when a user selects a case, flower continues work
distribution within that case – the work items of the
case are distributed to the user. before this distribution
can start, the work distribution module (cf. figure 17)
opens the case by sending the appropriate message to
the work lists module (cf. figure 18) with an open case
token in the place approved case . after the work lists
module receives this message, its transition start case
automatically ﬁres by consuming the open case token
from the place approved case and producing one in place
case in progress . once the open case token is produced
in place case in progress , the distribution within the case
starts and the user can work on the work items in that
case.
figure 20 shows the action sub-module, which is a
new sub-module in the flower work lists module.
this sub-module handles the actions of a user when s(he)case in progress
opencasein
skip
opencasexuwioutlogged on
useri/o
redo
opencasexuwioutopen
opencasexuwiout
execute
opencasexuwiout execute[not(a=[])]open[not(w=[])]
redo[not((f^^s)=[])]skip[not(a^^w=[])]((u,c),(w,a,f,s))
((u,c),(w,a,f,s))
(((u,c),(w,a,f,s)),select_random(a^^w))((u,c),(w,a,f,s))
u
(((u,c),(w,a,f,s)),select_random(f^^s))(((u,c),(w,a,f,s)),select_random(w)) u
((((u,c),(w,a,f,s))),select_random(a))
((u,c),(w,a,f,s))
uu
fig. 20. flower - action
works within a case and makes sure that the precondi-
tions(cf. table 5) are met before each of the four actions
can take place. the action sub-module can be seen as
an extension of the start work sub-module of the ba-
sic model. in the start work sub-module the user can
only start the work item in progress. however, when an
open case is in progress in the action sub-module the
user can: (1) execute the work item which is next in the
process deﬁnition of the case type – an item contained
in the list of active items in the case state; (2) openfor
executing a work item that is still not ready for execu-
tion according to the process deﬁnition of the case type
– an item contained in the list of waiting items in the
case state; (3) skipa work item that is currently enabled
or waiting to be enabled – an item contained in the lists
of active or waiting items in the case state, or (4) redo
a work item and execute again a work item which has
already been executed – an item contained in the lists of
ﬁnished or skipped items in the case state. four transi-
tions in the action sub-module refer to the four actions
of users – open, execute, skip, and redo. all transitions
retrieve an user token from the place logged on , to make
sure that only the users who are currently logged on can
perform these actions. also, all transitions consume the
open case token from the place case in progress . the
open case token stores the information about the user,
case, and case state (i.e., lists of waiting, active, ﬁnished
and skipped work items for that case). it is necessary
to consume(remove) the open case token from the place
case in progress because after every action, the work
distribution module (more speciﬁcally – its case distri-
bution sub-module) changes the state of the case, which
is stored in the open case token in the place case in
progress . after performing one action, the user cannot
perform the next action before the case distribution
sub-module updates the case state and produces the re-
ferring open case token in the place case in progress . the
transition opencan ﬁre only if the list of waiting items
in the case state is not empty, as can be seen in the
guard of this transition. the transition openproduces a
token in the place open. this place is of a complex type,maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 19
table 5. flower - the four actions
preconditions action postcondition
work item work item side
was becomes eﬀects
waiting open active waiting andactive items that succeed become skipped .
active execute ﬁnished the direct successor becomes active .
active orwaiting skip skipped succeeding waiting andactive items become skipped . the direct prede-
cessor becomes active .
ﬁnished orskipped redo active preceding ﬁnished andskipped items become waiting .
which consist of an open case and an user work item.
when a token is produced in this place, the message is
sent to the case distribution sub-module that the re-
ferring user work item should be open in the referring
open case. although a user who works with flower
can freely choose which item should be open, for the
simplicity we use an random function to select an item
from the list of waiting items. the inscription on the arc
from the transition openproduces a token from the cur-
rent open case and the (randomly) selected waiting item
in the place open. similarly, according to the precondi-
tions (cf. table 5), guards on transitions execute ,skip,
andredoensure that they ﬁre only when lists of active ,
active and waiting , and ﬁnished and skipped items are
not empty, respectively. places execute, skip and redo
are of the same type as the place open, and a token in
each of those places sends a message to the case distri-
bution module that the referring user work item should
be executed, skipped or redone, respectively. following
the preconditions (cf. table 5), the inscriptions on the
arcs between the (1) transition and place execute , (2)
transition and place skipand (3) transition and place
redoeach create a token containing the open case and
the randomly selected (1) active, (2) active or waiting,
and (3) ﬁnished or skipped work item in the places (1)
execute , (2)skipand (3) redo, respectively.
when working on a case in the flower system,
users work with the interface tool “wave front” [41]
where they can see the state of the open case. users can
see which work items are waiting, active, ﬁnished and
skipped. figure 21 shows one example of an open case
in the “wave front”. the ﬁrst two tasks (“claim start”
and “register claim”) are ﬁnished work items and they
are marked with a ‘check’ symbol. the third work item
(“get medical report”) was skipped , as can be seen from
the ‘arrow’ symbol. thus, ﬁnished and skipped work
items are presented after the “wave front” line. the
threeactive work items on the wave front line are “get
police report”, “assign loss adjuster” and “witness
statements”. finally, the two last work items (“policy
holder liable” and “close case”) are waiting before the
wave front line to become active.
case distribution is a sub-module of the flower
work distribution module. this sub-module responds
fig. 21. flower wave front
to user’s requests to open, execute, skip or redo work
items in the distribution within the case. the task of
the case distribution sub-module is to respond to the
actions of users by changing the state of the case accord-
ingly to the postcondition of every action (cf. table 5).
figure 22 shows the case distribution sub-module of the
flower model. the requests (messages) for actions are
received via tokens in places open,execute ,skipandredo.
these places are of the type which stores the information
about the open case (the user case and the case state )
and the user work item to which the action (open, exe-
cute, skip or redo) should be applied. due to delays, it is
possible that a message to execute a work item from the
case arrives after the case had been closed, the transition
ignore behaves as a “garbage collector” of such requests.
this transition retrieves user case token from the place
assigned cases and consumes a token from the places
open,execute ,skipandredo. thus, when the transition
ignore ﬁres, the message to perform an action is ignored
and removed from the model. the guard on this transi-
tion makes sure that the transition will ﬁre only if the
case is not closed, i.e., the appropriate user case token is
not found in the list in place assigned cases . transitions
open,execute ,skipandredoﬁre when tokens arrive to
places open,execute ,skipandredo, respectively. each
of these transitions consumes the arrived token from the
appropriate place (e.g., transition openconsumes the ar-
rived token from the place open) and retrieves the list of
user cases from the place assigned cases . guards on tran-
sitions open,execute ,skipandredoshow that they will
ﬁre if the request is valid, i.e., if the appropriate user case20 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
redo
opencasexuwiincase in progress
opencaseoutopen
opencasexuwiin
execute
opencasexuwiin
skip
opencasexuwiin
tprocess
processiprocess
i/oassigned cases
ucases[]
i/oexecute[elt(uc,ucs)]
skip[elt(uc,ucs)]
redo[elt(uc,ucs)]
ignore[not(elt(uc,ucs))]open[elt(uc,ucs)]
((uc,state),uwi)(uc,(execute_item(uwi,state,ts)))((uc,state),uwi)
((uc,state),uwi)
((uc,state),uwi)
(ct,ts)(uc,(skip_item(uwi,state,ts)))
((uc,state),uwi)
ucs(uc,(redo_item(uwi,state,ts)))(uc,(open_item(uwi,state,ts)))
ucsucsucs
ucs
((uc,state),uwi)((uc,state),uwi)
((uc,state),uwi)(ct,ts)
(ct,ts)(ct,ts)
fig. 22. flower - case distribution
token is found in the list in the place assigned cases . the
result of each of those four transitions is a produced open
case token in the place case in progress . the inscriptions
on the arcs between these transitions and the place case
in progress change state of the case, accordingly to the
postcondition of each action. more speciﬁcally, the new
case state is created by four functions in the inscriptions
on the arcs between transitions open,execute ,skipand
redo, and the place case in progress . these functions take
three parameters: (1) user work item to which the action
should be applied, (2) the old case state that should be
changed, and (3) the case process deﬁnition – the tasks
of the case type. the third parameter is retrieved from
the place tprocess , which stores process deﬁnitions for all
case types. functions openitem,execute item,skipitem
andredoitemcreate the new case state accordingly to
the postcondition of the referring action (cf. table 5).
when a token is produced in the place case in progress ,
a message is sent to the action sub-module that the user
can select the next action for the referring open case.
the flower cpn model implemented signiﬁcant
changes to the basic model. because of its case-handling
nature, the flower model diﬀers the most from the
other cpn models. the greatest diﬀerences are caused
by the fact that the system distributes the cases and
the work items within the cases, instead of only work
items. the start work module of the basic model was
signiﬁcantly extended because users can open, execute,
skip and redo work items in flower. regardless the
diﬀerences between flower and process-oriented sys-
tems (modelled by the basic model, staﬀware model
and filenet model), it was possible to extend the ba-
sic model to the flower work distribution model.
3.2 resource patterns
instead of extending the basic model for more systems,
we also looked at a more systematic way of work distri-
bution. as indicated, similar concepts are often named
and presented diﬀerently in diﬀerent workﬂow manage-ment systems. therefore, it is interesting to deﬁne these
concepts in a system-independent manner. we have used
43 documented resource patterns [46,48]. these patterns
can be used as representative examples for analyzing,
evaluating and comparing diﬀerent workﬂow manage-
ment systems with respect to work distribution. resource
patterns are grouped into a number of categories: cre-
ation patterns ,push patterns ,pull patterns ,detour pat-
terns,auto-start patterns ,visibility patterns , and mul-
tiple resource patterns . each of these patterns can be
modelled in terms of a cpn model.
table 6 shows an overview of the patterns. it also
shows whether a pattern is directly supported by the
three systems (sw = staﬀware, fn = filenet, fw =
flower) and the basic model (bm). the basic model
supports less patterns than any of the three systems.
this makes sense since each of the system-speciﬁc mod-
els can be seen as an extension of the basic model. it
is interesting to see that existing systems typically sup-
port less than half of the patterns directly. this reveals
typical limitations of contemporary products. some of
the patterns are considered out-of-scope for our models
(marked with “o”). these are typically patterns directly
depending on control-ﬂow functionality, while we prefer
to focus exclusively on work distribution. each of the
patterns not marked with “o” can easily be added to
the basic model separately.
we cannot elaborate on each of the patterns, but
we will discuss four to illustrate our work. none of the
systems supports pattern 16: round robin ,pattern 17:
shortest queue ,pattern 38: piled execution , and pat-
tern 39: chained execution . patterns 16 and 17 are push
patterns, i.e., a patterns to push work to a speciﬁc user.
as auto-start patterns, patterns 38 and 39 enable the
automatic start of the execution of the next work item
once the previous has been completed.
round robin and shortest queue. round robin and
shortest queue push the work item to one user of all
users that qualify. round robin allocates work on a
cyclic basis and shortest queue to the user with the
shortest queue. this implies that each user has a counter
to : (1) count the sequence of allocations in round robin
and (2) count the number of pending work items in
shortest queue.
as figures 23 and 24 show, these two patterns are
implemented in a similar way in the work distribution
module. the required changes to the basic model are
minimal. a counter is introduced for each user (token
in the place available ) and functions round robin and
shortest queue are used to select one user from the set
of possible users based on these counters. these alloca-
tion function are used in the inscription on the arc(s)
between the transition oﬀers and the place to allocate .
both functions take two parameters: (1) the set of the
“classical” allocation created by the allocation function
oﬀer from the basic model, and (2) appropriate coun-maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 21
table 6. support for resource patterns in 3 workﬂow systems and basic m odel
(+ = direct support, – = no direct support, +/– = partial suppo rt, o = out-of-scope)
nrpattern sw fn fw bm
1direct allocation + + + +/–
2role-based allocation + +/– + +
3deferred allocation + + – –
4authorization – – + –
5separation of duties – – + –
6case handling – – + –
7retain familiar – – + –
8capability-based allocation – – + –
9history-based allocation – – – –
10organizational allocation +/– +/– +/– +/–
11automatic execution + + + o
12distribution by oﬀer – single resource – – – –
13distribution by oﬀer – multiple resources + + + +
14distribution by allocation – single resource + + + –
15random allocation – – – +
16round robin allocation – – – –
17shortest queue – – – –
18early distribution – – + –
19distribution on enablement + + + +
20late distribution – – – –
21resource-initiated allocation – – + +
22resource-initiated execution – allocated work item + + + +
23resource-initiated execution – oﬀered work item + + – –
24system-determined work list management + + + o
25resource-determined work list management + + + o
26selection autonomy + + + +
27delegation + + – –
28escalation + + – –
29deallocation – – – –
30stateful reallocation +/– + – –
31stateless reallocation – – – –
32suspension/resumption +/– +/– – –
33skip – – + o
34redo – – + o
35pre-do – – + o
36commencement on creation – – – –
37commencement on allocation – – – –
38piled execution – – – –
39chained execution – – + –
40conﬁgurable unallocated work item visibility – – – o
41conﬁgurable allocated work item visibility – – + o
42simultaneous execution + + +/– +
43additional resources – – – –
ters. both functions allocate the right user work item via
three steps: (1) take the set of user work items created
by the allocation function oﬀer; (2) for every user work
item search for the value of the counter; and (3) select
and return only the user work item where the user has
the smallest value of the counter. in this way, push allo-
cation functions can be seen as a ﬁlter that selects only
one out of the set of allocations. the model for shortest
queue has an additional connection (the two arcs be-
tween the transition complete and the place available )that updates the counter when a work item is completed
to remove it from the queue (decrease the value of the
counter for the referring user).
piled and chained execution. piled and chained exe-
cution are auto-start patterns, i.e., when the user com-
pletes execution of current work item the next work item
starts automatically. when working in chained execu-
tion, the next work item will be for the same caseas the
completed one – the user works on diﬀerent tasks for one22 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
logged on
user[]
i/oin progress
uwiin
completed
uwiout    active 
work items
uwis[]
i/o
request
uwioutselect
uwioutspecial 
 mode
users[]
i/oready
uwicomplete
complete 
  specialu(u,wi)
(u,(c,a))
uwis
if elt(u,us) andalso 
not(select(u,a,uwis) = nouwi) 
then 1`select(u,a,uwis) else nilif elt(u,us) andalso 
not(select(u,a,uwis) = nouwi) 
then 1`select(u,a,uwis) else nilus(u,wi)
(u,(c,a))(* users can 
choose 
to be in the 
"auto-start" 
mode*)(* check if there are 
available work items 
for the same task *)
(* automatically start the next 
work item for the same task*)(* function "select" picks 
the next work item
with the task "t" *)(* task is the auto-start criteria 
(u,(c,t)) -> (u,(c,a)) *)
fig. 25. piled execution - stop worklogged on
user[]
i/oin progress
uwiin
completed
uwioutactive 
work items
uwis[]
i/o
request
uwioutselect
uwioutspecial 
  mode
users[]
i/oready
uwicomplete
complete 
 specialu(u,wi)
(u,(a,t))
uwis
if elt(u,us) andalso 
not(select(u,a,uwis) = nouwi) 
then 1`select(u,a,uwis) else nilif elt(u,us) andalso 
not(select(u,a,uwis) = nouwi)
then 1`select(u,a,uwis) else nilus(u,wi)
(u,(a,t))(* check if there are 
available work items 
for the same case *)
(* users can 
  choose 
to be in the 
"auto-start" 
mode*)
(* automatically start the next 
work item for the same case*)(* case is  the auto-start criteria 
(u,(c,t)) -> (u,(a,t)) *)
(* function "select" picks 
the next work item
for the case "a" *)
fig. 26. chained execution - stop work
user map
umapsiumapsnew
work items
wiiwi
to be offered
uwiouttask map
tmapsitmaps
offered 
work items
wis[]to allocate
uwi
available
rrcounters[]
rra available
counter
int1offers[not(round_robin(offer(wi,tmaps,umaps),rrcs)=nouwi)]
allocatewi tmaps
umaps
wis wi::wisround_robin(offer(wi,tmaps,umaps),rrcs)
(u,wi)
(u,wi)rrcs
count + 1countrrcsallocate(u,rrcs,count)(* round_robin selects one 
   from all the offers on the basis of couters *)
(* counts the
 allocations *)
fig. 23. push patterns - round robin
completed
uwiinuser map
umapsiumapsnew 
work items
wiiwi
to  be offered
uwiouttask map
tmapsitmaps
closed 
work items
wioffered 
work items
wis[]
assigned 
work items
wito allocate
uwi
available
sqcounters[]
sq availableoffers[not(shortest_queue(offer(wi,tmaps,umaps),sqcs)=nouwi)]
completsallocate
(u,wi)wi
witmaps
umaps
wi::wis
wishortest_queue(offer(wi,tmaps,umaps),sqcs)
(u,wi)
(u,wi)sqcs
sqcsallocate(u,sqcs,1)
sqcs
allocate(u,sqcs,(~1))wis(* shortest_queue selects one 
   from all the offers on the basis of couters *)
(*  when the work item is completed,
remove it from the users' queue *)(* ... *)
fig. 24. push patterns - shortest queuecase. similarly, if the user works in piled execution the
next work item will be for the same taskas the completed
one – the user works on one task for diﬀerent cases. fig-
ures 25 and 26 show that piled and chained execution
are implemented similarly in the stop work sub-module.
users can choose to work in the normal mode or in the
auto-start mode (which is represented by the token in
placespecial mode ). the function select is implemented
to search for the next work item for the same: (1) task
in piled execution and (2) casein chained execution.
the diﬀerent auto-start criteria are passed in the in-
scription of the arc between the place ready and transi-
tioncomplete special . in the case of piled execution, the
auto-start criteria is the task, and in the case of chained
execution the auto-start criteria is the case. these two
models show that the transition complete special , be-
sides the usual connection to the place completes , has
the connections of a “start work” transition: it retrieves
items from the place active work items , and produces
items in the places request andselect. the inscriptions
on arcs leading to places request andselect ﬁrst check if
the user is working in the special (auto-start) mode and
a user work item is available according to the auto-start
criteria. if these conditions are fulﬁlled, the next user
work item is auto-started, i.e., an appropriate user work
item token is produced in the places request andselect.
the function select is implemented to search for the next
work item for the same: (1) task in piled execution and
(2) case in chained execution.
4 related work
since the early nineties workﬂow technology has ma-
tured [24] and several textbooks have been published,
e.g., [5,19,28,35,40]. during this period many languages
for modelling workﬂows have been proposed, i.e., lan-maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 23
guages ranging from generic petri-net-based languages
to tailor-made domain-speciﬁc languages. the workﬂow
management coalition (wfmc) has tried to standard-
ize workﬂow languages since 1994 but failed to do so
[23]. xpdl, the language proposed by the wfmc, has
semantic problems [2] and is rarely used. in a way bpel
[11] succeeded in doing what the wfmc was aiming at.
however, both bpel and xpdl focus on the control-
ﬂow rather than the resource perspective.
despite the central role that resources play in work-
ﬂow management systems, there is a surprisingly small
body of research into resource and organizational mod-
elling in the workﬂow context [1,33]. in early work, bus-
sler and jablonski [15] identiﬁed a number of shortcom-
ings of workﬂow management systems when modelling
organizational and policy issues. in subsequent work [28],
they presented one of the ﬁrst broad attempts to model
the various perspectives of workﬂow management sys-
tems in an integrated manner including detailed consid-
eration of the organizational/resource view.
one line of research into resource modelling and en-
actment in a workﬂow context has focused on the char-
acterization of resource managers that can manage or-
ganizational resources and enforce resource policies. in
[18], the design of a resource manager is presented for
a workﬂow management system. this work includes a
high level resource model together with proposals for re-
source deﬁnition, query and policy languages. similarly,
in [34], an abstract resource model is presented in the
context of a workﬂow management system although the
focus is more on the eﬃcient management of resources in
a workﬂow context than the speciﬁc ways in which work
is allocated to them. in [27], a proposal is presented for
handling resource policies in a workﬂow context. three
types of policy – qualiﬁcation, requirement and substitu-
tion – are described together with a means for eﬃciently
implementing them when allocating resources to activi-
ties.
another area of investigation has been into ensur-
ing that only appropriate users are selected to execute
a given work item. the rbac (role-based access con-
trol) model [21] presents an approach for doing this.
rbac models are eﬀective but they tend to focus on
security considerations and neglect other organizational
aspects such as resource availability.
several researchers have developed meta-models, i.e.,
object models describing the relation between workﬂow
concepts, which include work allocation aspects, cf. [8,
38,40,39,45]. however, these meta-models tend to focus
on the structural description of resource properties and
typically do not describe the dynamics aspects of work
distribution.
flexibility has been a research topic in workﬂow liter-
ature since the late nineties [4,7,9,10,16,20,26,31,42,44,
52]. flexibility triggers all kinds of interesting research
questions, e.g., if a process changes how this should in-
ﬂuence the running cases [7]? examples of qualitativeanalysis of ﬂexibility of workﬂow management system
can be found in [13] and [25]. one way of allowing for
more ﬂexibility is to use the case handling concept as de-
ﬁned in [3,9]. flower [12,41] can be seen as a reference
implementation of the case handling concept. therefore,
its resource perspective was modelled in this paper. be-
sides flower there are few other case handling tools:
e.c.h.o. (electronic case-handling for oﬃces), a pre-
decessor of flower, the staﬀware case handler [50]
and the cosa activity manager [49], both based on
the generic solution of bpi [14], vectus [36,37], and the
open-source system con:cern (http://con-cern.org/).
the work reported in this paper can be seen as an
extension of the workﬂow patterns initiative4. besides
a variety of control-ﬂow [6] and data [47] patterns, 43
resource patterns [46,48] have been deﬁned. this paper
complements the resource patterns [46,48] by providing
executable models for work distribution mechanisms.
5 discussion
workﬂow management systems should provide ﬂexible
work distribution mechanisms for users. this will in-
crease the work satisfaction of users and improve their
ability to deal with unpredictable situations at work.
therefore, work distribution is investigated as the func-
tionality provided for the user – workﬂow management
systems are tested in laboratories [46,48] or observed
(in empirical research) in companies [13]. this kind of
research observes systems externally and provides in-
sights into what systems do. analysis of the systems
from an internal perspective can explain howsystems
provide for diﬀerent work distribution mechanisms. due
to the complexity of workﬂow management systems as
software products, internal analysis starts with develop-
ing a model of the system. unlike the mostly used static
models (e.g., uml class diagrams, entity-relationship di-
agrams), dynamic models (e.g., cpn models) provide
for interactive investigation of work distribution as a
dynamic feature. cpn models can be used for the in-
vestigation of both what systems do and howthey do
it.
workﬂow management systems often provide for dif-
ferent features or use diﬀerent naming for the same fea-
tures. investigation of work distribution requires analy-
sis, evaluation and comparison of models of several sys-
tems. in order for models of diﬀerent systems to be com-
parable, it is necessary to start with developing a com-
mon framework – a reference model . we have developed
the basic model as a reference model for work distribu-
tion mechanisms in workﬂow management system. the
models of staﬀware, filenet, flower and resource pat-
terns are comparable because all models are developed
as extensions of a reference model – the basic model.
4www.workﬂowpatterns.com24 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
the model of a workﬂow system is structured into
two modules. the work distribution module represents
the core of the system which is often called the “work-
ﬂow engine”. the work lists module represents the so-
called “work list handler” of a workﬂow system and it
serves as an interface between the workﬂow engine and
users. the interface between the two modules (i.e., the
messages that are exchanged between them) should con-
tain as little information as possible about the way work
items are managed in modules. the work lists module
should abstract from the way the work items are created,
allocated and oﬀered in the work distribution module.
the reverse also holds: how work items are actually pro-
cessed by users is implemented in the work lists module.
once a proper interface is deﬁned, it is easy to implement
various ways of work distribution by adding/removing
simple features in either one of the modules. for exam-
ple, push patterns (round robin and shortest queue)
are implemented in the work distribution module and
auto-start resource patterns (chained and piled execu-
tion) in the work lists module.
work distribution mechanism determines what users
can do with work items. in the basic module the user
follows a ﬁxed predeﬁned path by only executing work
items. users of staﬀware and filenet models have the
freedom to forward and suspend work. in flower, as
the most ﬂexible system, users have four possibilities: ex-
ecute, open, skip and redo work. our models show that
a more complex model work distribution adds messages
between the work distribution and work lists modules.
these new messages correspond to new actions (opera-
tions) that users can do.
both the system-based and the patterns-based cpn
models showed that one of the core elements of work dis-
tribution is the “allocation algorithm”. this algorithm
includes the “rules” for work distribution. it is imple-
mented in the work distribution module as the function
oﬀer, which allocates work based on (1) new work items,
(2) process deﬁnition, and the (3) organizational model.
this function should be analyzed further in order to dis-
cover an advanced allocation algorithm, which should be
more conﬁgurable and less system-dependent.
every system has its own method of modelling orga-
nizational structure. staﬀware models groups and roles.
in filenet the organizational model includes groups of
users and teams, but does not model roles. flower
groups users based on a hierarchy of roles, function pro-
ﬁles and work proﬁles. thus, each of the system oﬀers a
unique predeﬁned type of the organizational structure.
since every allocation mechanism uses elements of the
organizational model, limitations of the organizational
model can have a negative impact on the work distribu-
tion in the system. for example, because in staﬀware one
role can be assigned to only one user, it is not be possible
to oﬀer a work item to a set of “call center operator”-s.
each of the three models of workﬂow management
systems distributes work using two hierarchy levels. staﬀ-ware and filenet use two levels of work distribution:
queue work items are ﬁrst distributed to work queues,
and then work items are distributed within each of the
work queues. the flower model starts with the case
distribution and then distributes work items of the whole
case. although all three systems distribute work at two
levels, they have unique distribution algorithms (the set
of allocation rules implemented in the function oﬀer)
andobjects of distribution (work items, queue work items,
cases).
models of resource patterns [46,48] show that push
patterns (round robin and shortest queue) can be im-
plemented “on top of” the pull mechanism, as a ﬁlter.
once the pull mechanism determines the set of allo-
cated users, the “push” allocation function extracts only
one user from this set. auto-start patterns turned out
to be remarkable straightforward to model, triggering
the question why this is not supported by systems like
staﬀware and filenet (flower supports the chained
execution in a limited form).
6 conclusions
this paper focused on the resource perspective , i.e., the
way workﬂow management systems distribute work based
on the structure of the organization and capabilities (qual-
iﬁcations) of people. to understand work distribution,
we used the cpn language and cpn tools to model and
analyze diﬀerent work distribution mechanisms. to serve
as a ‘common basis’ model, we provided a model that
can be seen as a reference model of existing workﬂow
management systems. this model was extended for mod-
els of three workﬂow management systems – staﬀware,
filenet, and flower. although the reference model al-
ready captures many of the resource patterns , we also
modelled four more advanced patterns by extending the
reference model. in contrast to existing research that
mainly uses static models (e.g., uml class diagrams),
we focused on the dynamics of work distribution. our
experiences revealed that it is relatively easy to model
and analyze the workﬂow systems and resource patterns
using cpn tools. this suggests that cpn language and
the basic cpn model are a good basis for future research.
we plan to test completely new ways of work distribution
using the approach presented in this paper. the goal is
to design and implement distribution mechanisms that
overcome the limitations of existing systems.
references
1. w.m.p. van der aalst. don’t go with the ﬂow: web ser-
vices composition standards exposed. ieee intelligent
systems , 18(1):72–76, 2003.
2. w.m.p. van der aalst. business process management
demystiﬁed: a tutorial on models, systems and stan-
dards for workﬂow management. in j. desel, w. reisig,maja pesic, wil m.p. van der aalst: modelling work distribution m echanisms using colored petri nets 25
and g. rozenberg, editors, lectures on concurrency and
petri nets , volume 3098 of lecture notes in computer
science , pages 1–65. springer-verlag, berlin, 2004.
3. w.m.p. van der aalst and p.j.s. berens. beyond
workﬂow management: product-driven case handling.
in s. ellis, t. rodden, and i. zigurs, editors, inter-
national acm siggroup conference on supporting
group work (group 2001) , pages 42–51. acm press,
new york, 2001.
4. w.m.p. van der aalst, j. desel, and a. oberweis, edi-
tors.business process management: models, techniques,
and empirical studies , volume 1806 of lecture notes in
computer science . springer-verlag, berlin, 2000.
5. w.m.p. van der aalst and k.m. van hee. workﬂow
management: models, methods, and systems . mit press,
cambridge, ma, 2002.
6. w.m.p. van der aalst, a.h.m. ter hofstede, b. kie-
puszewski, and a.p. barros. workﬂow patterns. dis-
tributed and parallel databases , 14(1):5–51, 2003.
7. w.m.p. van der aalst and s. jablonski. dealing with
workﬂow change: identiﬁcation of issues and solutions.
international journal of computer systems, science,
and engineering , 15(5):267–276, 2000.
8. w.m.p. van der aalst and a. kumar. team-enabled
workﬂow management systems. data and knowledge
engineering , 38(3):335–363, 2001.
9. w.m.p. van der aalst, m. weske, and d. gr¨ unbauer.
case handling: a new paradigm for business process
support. data and knowledge engineering , 53(2):129–
162, 2005.
10. a. agostini and g. de michelis. improving flexibil-
ity of workﬂow management systems. in w.m.p. van
der aalst, j. desel, and a. oberweis, editors, business
process management: models, techniques, and empiri-
cal studies , volume 1806 of lecture notes in computer
science , pages 218–234. springer-verlag, berlin, 2000.
11. t. andrews, f. curbera, h. dholakia, y. goland,
j. klein, f. leymann, k. liu, d. roller, d. smith,
s. thatte, i. trickovic, and s. weerawarana. business
process execution language for web services, version
1.1. standards proposal by bea systems, international
business machines corporation, and microsoft corpora-
tion, 2003.
12. pallas athena. case handling with flower: beyond
workﬂow . pallas athena bv, apeldoorn, the nether-
lands, 2002.
13. j. bowers, g. button, and w. sharrock. workﬂow from
within and without: technology and cooperative work
on the print industry shopﬂoor. in the fourth eu-
ropean conference on computer-supported cooperative
work (ecscw 95) , pages 51–66, stockholm, septem-
ber 1995. kluwer academic publishers, dordrecht, the
netherlands.
14. bpi. activity manager: standard program - standard
forms (version 1.2) . workﬂow management solutions,
oosterbeek, the netherlands, 2002.
15. c. bussler and s. jablonski. policy resolution for work-
ﬂow management systems. in proceedings of the 28th
hawaii international conference on system sciences ,
page 831. ieee computer society, 1995.
16. f. casati, s. ceri, b. pernici, and g. pozzi. workﬂow
evolution. in proceedings of er ’96 , pages 438–455, cot-
tubus, germany, oct 1996.17. b. van dongen, a.k. alves de medeiros, h.m.w. ver-
beek, a.j.m.m. weijters, and w.m.p. van der aalst. the
prom framework: a new era in process mining tool
support. in g. ciardo and p. darondeau, editors, ap-
plication and theory of petri nets 2005 , lecture notes
in computer science, pages 444–454. springer-verlag,
berlin, 2005.
18. w. du and m.c. shan. enterprise workﬂow resource
management. in ninth international workshop on re-
search issues on data engineering: information technol-
ogy for virtual enterprises (ride-ve’99) , pages 108–
115, sydney, australia, 1999. ieee computer society
press.
19. m. dumas, w.m.p. van der aalst, and a.h.m. ter hofst-
ede.process-aware information systems . wiley & sons,
2005.
20. c.a. ellis and k. keddara. a workﬂow change is
a workﬂow. in w.m.p. van der aalst, j. desel, and
a. oberweis, editors, business process management:
models, techniques, and empirical studies , volume 1806
oflecture notes in computer science , pages 201–217.
springer-verlag, berlin, 2000.
21. d.f. ferraiolo, r. sandhu, s. gavrila, d.r. kuhn, and
r. chandramouli. proposed nist standard for role-
based access control. acm transactions on informa-
tion and system security , 4(3):224–274, 2001.
22. filenet. filenet business process manager 3.0 .
filenet corporation, costa mesa, ca, usa, june 2004.
23. l. fischer, editor. workﬂow handbook 2003, workﬂow
management coalition . future strategies, lighthouse
point, florida, 2003.
24. d. georgakopoulos, m. hornick, and a. sheth. an
overview of workﬂow management: from process mod-
eling to workﬂow automation infrastructure. dis-
tributed and parallel databases , 3:119–153, 1995.
25. r.e. grinter. workﬂow systems: occasions for suc-
cess and failure. computer supported cooperative work ,
9(2):189–214, 2000.
26. t. herrmann, m. hoﬀmann, k.u. loser, and k. moysich.
semistructured models are surprisingly useful for user-
centered design. in g. de michelis, a. giboin,
l. karsenty, and r. dieng, editors, designing cooper-
ative systems (coop 2000) , pages 159–174. ios press,
amsterdam, 2000.
27. y.n. huang and m.c. shan. policies in a resource
manager of workﬂow systems: modeling, enforcement
and management. technical report hp tech. re-
port, hpl-98-156, palo alto, ca, usa, 1999. ac-
cessed at http://www.hpl.hp.com/techreports/98/hpl-
98-156.pdf.
28. s. jablonski and c. bussler. workﬂow management:
modeling concepts, architecture, and implementation .
international thomson computer press, london, uk,
1996.
29. k. jensen. coloured petri nets. basic concepts, anal-
ysis methods and practical use. volume 1 . eatcs
monographs on theoretical computer science. springer-
verlag, berlin, 1997.
30. k. jensen and g. rozenberg, editors. high-level petri
nets: theory and application . springer-verlag, berlin,
1991.26 maja pesic, wil m.p. van der aalst: modelling work distribution mechanisms using colored petri nets
31. m. klein, c. dellarocas, and a. bernstein, editors. adap-
tive workﬂow systems , volume 9 of special issue of the
journal of computer supported cooperative work , 2000.
32. l.m. kristensen, s. christensen, and k. jensen. the
practitioner’s guide to coloured petri nets. interna-
tional journal on software tools for technology trans-
fer, 2(2):98–132, 1998.
33. a. kumar, w.m.p. van der aalst, and h.m.w. ver-
beek. dynamic work distribution in workﬂow man-
agement systems: how to balance quality and perfor-
mance? journal of management information systems ,
18(3):157–193, 2002.
34. b.s. lerner, a.g. ninan, l.j. osterweil, and r.m.
podorozhny. modeling and managing resource
utilization in process, workﬂow, and activity
coordination. technical report um-cs-2000-
058, department of computer science, univer-
sity of massachusetts, august 2000. accessed at
http://laser.cs.umass.edu/publications/?category=proc
on 20 march 2005.
35. f. leymann and d. roller. production workﬂow: con-
cepts and techniques . prentice-hall ptr, upper saddle
river, new jersey, usa, 1999.
36. london bridge group. vectus application developer’s
guide . london bridge group, wellesbourne, warwick,
uk, 2001.
37. london bridge group. vectus technical architecture .
london bridge group, wellesbourne, warwick, uk,
2001.
38. m. zur muehlen. evaluation of workﬂow management
systems using meta models. in proceedings of the 32nd
hawaii international conference on system sciences -
hicss’99 , pages 1–11, 1999.
39. m. zur muehlen. organizational management in work-
ﬂow applications issues and perspectives. informa-
tion technology and management , 5(3–4):271–291, july-
october 2004.
40. m. zur muehlen. workﬂow-based process controlling:
foundation, design and application of workﬂow-driven
process information systems . logos, berlin, 2004.
41. pallas athena. flower user manual . pallas athena bv,
apeldoorn, the netherlands, 2002.
42. m. reichert and p. dadam. adeptﬂex: supporting dy-
namic changes of workﬂow without loosing control.
journal of intelligent information systems , 10(2):93–
129, 1998.
43. w. reisig and g. rozenberg, editors. lectures on petri
nets i: basic models , volume 1491 of lecture notes in
computer science . springer-verlag, berlin, 1998.
44. s. rinderle, m. reichert, and p. dadam. correctness
criteria for dynamic changes in workﬂow systems: a
survey. data and knowledge engineering , 50(1):9–34,
2004.
45. m. rosemann and m. zur muehlen. evaluation of work-
ﬂow management systems - a meta model approach.
australian journal of information systems , 6(1):103–
116, 1998.
46. n. russell, w.m.p.van der aalst, a.h.m. ter hofstede,
and d. edmond. workﬂow resource patterns: identiﬁca-
tion, representation and tool support. in o. pastor and
j. falcao e cunha, editors, proceedings of the 17th con-
ference on advanced information systems engineering(caise’05) , volume 3520 of lecture notes in computer
science , pages 216–232. springer-verlag, berlin, 2005.
47. n. russell, a.h.m. ter hofstede, d. edmond, and
w.m.p. van der aalst. workﬂow data patterns. qut
technical report, fit-tr-2004-01, queensland univer-
sity of technology, brisbane, 2004.
48. n. russell, a.h.m. ter hofstede, d. edmond, and
w.m.p. van der aalst. workﬂow resource patterns.
beta working paper series, wp 127, eindhoven uni-
versity of technology, eindhoven, 2004.
49. software-ley. cosa activity manager . software-ley
gmbh, pullheim, germany, 2002.
50. staﬀware. staﬀware case handler – white paper .
staﬀware plc, berkshire, uk, 2000.
51. staﬀware. using the staﬀware process client . staﬀware,
plc, berkshire, united kingdom, may 2002.
52. m. weske. formal foundation and conceptual design of
dynamic adaptations in a workﬂow management sys-
tem. in r. sprague, editor, proceedings of the thirty-
fourth annual hawaii international conference on sys-
tem science (hicss-34) . ieee computer society press,
los alamitos, california, 2001.