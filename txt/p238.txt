discovering coordination patterns using process
mining
w.m.p. van der aalst
department of technology management, eindhoven university of technology, p.o.
box 513, nl-5600 mb, eindhoven, the netherlands. w.m.p.v.d.aalst@tm.tue.nl
abstract. recently, process mining has become a vivid research area
[5,6]. the basic idea of process mining is to diagnose business pro-
cessesbyminingeventlogsforknowledge.processminingtechniquesandtools provide the means for discovering process, control, data, organiza-
tional, and social structures from event logs. in this paper we provide an
overview of process mining techniques/tools and their challenges. usingthe coordination pattern between a service client and a service provider,
we illustrate the application of process mining techniques to uncover
coordination patterns.
key words : process mining, coordination, business process management, workﬂow
management, delta analysis, petri nets.
1 introduction
today’s information systems have become complex concurrent and distributed
artifacts consisting of many interacting software components. these software
components may reside in one organization but may also span multiple organi-
zations. it is interesting to note that similar interaction patterns occur at thelevel of software components, business processes, and organizations. therefore,
there is an increasing interest in coordination languages and models. the interest
in component based software engineering (cbse) and web services composi-tion (wsc), often referred to as web services orchestration (wso), illustrates
this. an nice example is the recent attention for bpel4ws [11] and formal
methods like pi-calculus [22].
most of the work on coordination focuses on languages and models for mod-
eling, specifying, and implementing coordination mechanisms. in this paper, wefocus on techniques for monitoring coordination mechanisms present in enter-
prise information systems. today, many enterprise information systems store
relevant events in some structured form. for example, workﬂow managementsystems typically register the start and completion of activities [3]. erp systems
like sap log all transactions, e.g., users ﬁlling out forms, changing documents,
etc. business-to-business (b2b) systems log the exchange of messages with otherparties. call center packages but also general-purpose crm systems log interac-
tions with customers. these examples show that many systems have some kind
ofevent log often referred to as “history”, “audit trail”, “transaction log”, etc.[5,8,16,25]. the event log typically contains information about events referring
to an activity and a case. the case (also named process instance) is the “thing”
which is being handled, e.g., a customer order, a job application, an insurance
claim, a building permit, etc. the activity (also named task, operation, action,
or work-item) is some operation on the case. typically, events have a timestamp
indicating the time of occurrence. moreover, when people are involved, event
logs will typically contain information on the person executing or initiating the
event, i.e., the originator . based on this information several tools and techniques
for process mining have been developed [2,4,5,7–9,17,18,23,25,27].
process mining is useful for at least two reasons. first of all, it could be used
as a tool to ﬁnd out how people and/or procedures really work. consider for
example processes supported by an erp system like sap (e.g., a procurementprocess). such a system logs all transactions but in many cases does not enforce
a speciﬁc way of working. in such an environment, process mining could be used
to gain insight in the actual process. another example would be the ﬂow of pa-tients in a hospital. note that in such an environment all activities are logged but
information about the underlying process is typically missing. in this context it
is important to stress that management information systems provide informa-tion about key performance indicators like resource utilization, ﬂow times, and
service levels but notabout the underlying business processes (e.g., causal rela-
tions, ordering of activities, etc.). second, process mining could be used for delta
analysis , i.e., comparing the actual process with some predeﬁned process. note
that in many situations there is a descriptive or prescriptive process model. sucha model speciﬁes how people and organizations are assumed/expected to work.
by comparing the descriptive or prescriptive process model with the discovered
model, discrepancies between both can be detected and used to improve the pro-cess. consider for example the so-called reference models in the context of sap.
these models describe how the system should be used. using process mining it
is possible to verify whether this is the case. in fact, process mining could alsobe used to compare diﬀerent departments/organizations using the same erp
system.
process mining can be used to monitor coordination in and between enter-
prise information systems. some of the coordination is done by humans whileother coordination tasks are done by software. as indicated, similar interaction
patterns occur are the level of software components, business processes, and or-
ganizations. therefore, process mining can be done at many levels. in this paperwe focus on coordination mechanisms at the level of business processes. however,
the applicability is not limited to this level.
the remainder of this paper is organized as follows. section 2 brieﬂy dis-
cusses related work. section 3 introduces the concept of business process mining.section 4 highlights the main challenges. section 5 presents an example where
mining can be used to discover the coordination pattern between a service client
and a service provider. finally, section 6 concludes the paper.2 related work
the idea of process mining is not new [2,5,7–9,17,18,20,23,25,27]. most pro-
cess mining techniques aim at the control-ﬂow perspective. however, as indicatedin the previous section, process mining is not limited to the control-ﬂow perspec-
tive. for example, in [4] we use process mining techniques to construct a social
network. for more information on process mining we refer to a special issue of
computers in industry on process mining [6] and a survey paper [5]. in this
paper, unfortunately, it is impossible to do justice to the work done in this area.
we have been using diﬀerent variants of the α-algorithm. for more informa-
tion on the basic algorithm, we refer to [2,7,20,27]. in [21] one of the problemsraised in [20] is tackled (“short loops”) and should be considered as an extension
of [7].
this paper is based on earlier work of the author [4–6]. its goals is to in-
troduce the topic of process mining and discuss its relevance in the context of
coordination.
3 business process mining: an overview
the goal of process mining is to extract information about processes from trans-action logs [5]. we assume that it is possible to record events such that (i) each
event refers to an activity (i.e., a well-deﬁned step in the process), (ii) each event
refers to a case(i.e., a process instance), (iii) each event can have a performer
a l s or e f e r r e dt oa s originator (the person executing or initiating the activity),
and (iv) events have a timestamp and are totally ordered. table 1 shows an ex-
ample of a log involving 19 events, 5 activities, and 6 originators. in addition tothe information shown in this table, some event logs contain more information
on the case itself, i.e., data elements referring to properties of the case. for ex-
ample, the case handling systems flower logs every modiﬁcation of some dataelement.
event logs such as the one shown in table 1 are used as the starting point for
mining. we distinguish three diﬀerent perspectives: (1) the process perspective,
(2) the organizational perspective and (3) the case perspective. the process
perspective focuses on the control-ﬂow, i.e., the ordering of activities. the goal
of mining this perspective is to ﬁnd a good characterization of all possible paths,
e.g., expressed in terms of a petri net [24] or event-driven process chain (epc)[19,18]. the organizational perspective focuses on the originator ﬁeld, i.e., which
performers are involved and how are they related. the goal is to either structure
the organization by classifying people in terms of roles and organizational units orto show relation between individual performers (i.e., build a social network [26]).
the case perspective focuses on properties of cases. cases can be characterized
by their path in the process or by the originators working on a case. however,cases can also be characterized by the values of the corresponding data elements.
for example, if a case represents a replenishment order it is interesting to know
the supplier or the number of products ordered.case id activity id originator timestamp
case 1 activity a john 9-3-2004:15.01
case 2 activity a john 9-3-2004:15.12
case 3 activity a sue 9-3-2004:16.03
case 3 activity b carol 9-3-2004:16.07
case 1 activity b mike 9-3-2004:18.25
case 1 activity c john 10-3-2004:9.23
case 2 activity c mike 10-3-2004:10.34
case 4 activity a sue 10-3-2004:10.35
case 2 activity b john 10-3-2004:12.34
case 2 activity d pete 10-3-2004:12.50
case 5 activity a sue 10-3-2004:13.05
case 4 activity c carol 11-3-2004:10.12
case 1 activity d pete 11-3-2004:10.14
case 3 activity c sue 11-3-2004:10.44
case 3 activity d pete 11-3-2004:11.03
case 4 activity b sue 11-3-2004:11.18
case 5 activity e clare 11-3-2004:12.22
case 5 activity d clare 11-3-2004:14.34
case 4 activity d pete 11-3-2004:15.56
table 1. an event log.
aand
-splitb
cand
-join
d
e
(a) the control-flow structure expressed in terms of a petri net.
(b) the organizational structure expressed in
terms of a activity-role-performer diagram.john sue mike carol pete clarerole x role y role zjohn sue
mike
carol peteclare
(c) a sociogram based on transfer of work.
fig. 1.some mining results for the process perspective (a) and organizational (b and
c) perspective based on the event log shown in table 1.the process perspective is concerned with the “how?” question, the orga-
nizational perspective is concerned with the “who?” question, and the caseperspective is concerned with the “what?” question. to illustrate the ﬁrst two
consider figure 1. the log shown in table 1 contains information about ﬁve
cases (i.e., process instances). the log shows that for four cases (1, 2, 3, and4) the activities a, b, c, and d have been executed. for the ﬁfth case only
three activities are executed: activities a, e, and d. each case starts with the
execution of a and ends with the execution of d. if activity b is executed, thenalso activity c is executed. however, for some cases activity c is executed be-
fore activity b. based on the information shown in table 1 and by making some
assumptions about the completeness of the log (i.e., assuming that the cases arerepresentative and a suﬃcient large subset of possible behaviors is observed), we
can deduce the process model shown in figure 1(a). the model is represented
in terms of a petri net [24]. the petri net starts with activity a and ﬁnishes
with activity d. these activities are represented by transitions. after executing
a there is a choice between either executing b and c in parallel or just exe-cuting activity e. to execute b and c in parallel two non-observable activities
(and-split and and-join) have been added. these activities have been added
for routing purposes only and are not present in the event log. note that forthis example we assume that two activities are in parallel if they appear in any
order. by distinguishing between start events and complete events for activities
it is possible to explicitly detect parallelism.
figure 1(a) does not show any information about the organization, i.e., it
does not use any information on the people executing activities. however, ta-ble 1 shows information about the performers. for example, we can deduce that
activity a is executed by either john or sue, activity b is executed by john,
sue, mike or carol, c is executed by john, sue, mike or carol, d is executed bypete or clare, and e is executed by clare. we could indicate this information in
figure 1(a). the information could also be used to “guess” or “discover” organi-
zational structures. for example, a guess could be that there are three roles: x,y, and z. for the execution of a role x is required and john and sue have this
role. for the execution of b and c role y is required and john, sue, mike and
carol have this role. for the execution of d and e role z is required and pete
and clare have this role. for ﬁve cases these choices may seem arbitrary but for
larger data sets such inferences capture the dominant roles in an organization.the resulting “activity-role-performer diagram” is shown in figure 1(b). the
three “discovered” roles link activities to performers. figure 1(c) shows another
view on the organization based on the transfer of work from one individual toanother, i.e., not focus on the relation between the process and individuals but
on relations among individuals (or groups of individuals). consider for example
table 1. although carol and mike can execute the same activities (b and c),mike is always working with john (cases 1 and 2) and carol is always working
with sue (cases 3 and 4). probably carol and mike have the same role but based
on the small sample shown in table 1 it seems that john is not working withcarol and sue is not working with carol.1these examples show that the event
log can be used to derive relations between performers of activities, thus result-ing in a sociogram. for example, it is possible to generate a sociogram based on
the transfers of work from one individual to another as is shown in figure 1(c).
each node represents one of the six performers and each arc represents thatthere has been a transfer of work from one individual to another. the deﬁnition
of “transfer of work from a to b” is based on whether for the same case an
activity executed by a is directly followed by an activity executed by b. forexample, both in case 1 and 2 there is a transfer from john to mike. figure 1(c)
does not show frequencies. however, for analysis proposes these frequencies can
be added. the arc from john to mike would then have weight 2. typically, wedo not use absolute frequencies but weighted frequencies to get relative values
between 0 and 1. figure 1(c) shows that work is transferred to pete but not vice
versa. mike only interacts with john and carol only interacts with sue. clare is
the only person transferring work to herself.
besides the “how?” and “who?” question (i.e., the process and organization
perspectives), there is the case perspective that is concerned with the “what?”
question. figure 1 does not address this. in fact, focusing on the case perspec-
tive is most interesting when also data elements are logged but these are notlisted in table 1. the case perspective looks at the case as a whole and tries to
establish relations between the various properties of a case. note that some of
the properties may refer to the activities being executed, the performers workingon the case, and the values of various data elements linked to the case. using
clustering algorithms it would for example be possible two show a positive corre-
lation between the the size of an order or its handling time and the involvementof speciﬁc people.
orthogonal to the three perspectives (process, organization, and case), the
result of a mining eﬀort may refer to logical issues and/or performance issues.
for example, process mining can focus on the logical structure of the process
model (e.g., the petri net shown in figure 1(a)) or on performance issues such
as ﬂow time. for mining the organizational perspectives, the emphasis can beon the roles or the social network (cf. figure 1(b) and (c)) or on the utilization
of performers or execution frequencies.
to address the three perspectives and the logical and performance issues
we have developed a set of tools including emit [2], thumb [27], and minson
[4]. these tools share a common xml format. for more details we refer tohttp://www.processmining.org.
4 challenging problems
process mining raises a number of interesting scientiﬁc questions. as indicatedin the previous section, some of these questions have been answered while others
1clearly the number of events in table 1 is too small to establish these assumptions
accurately. however, for the sake of argument we assume that the things that did
not happen will never happen.require further research. therefore, we review the most challenging problems.
for concrete examples of these problems we use the αalgorithm [7,27] as a
starting point.
4.1 mining hidden tasks
one of the basic assumptions of process mining is that each event (i.e., the
occurrence of a task for a speciﬁc case) is registered in the log. clearly, it is not
possible to ﬁnd information about tasks that are not recorded. however, given
a speciﬁc language it is possible to register that there is a so-called “hiddentask”.
consider, for example,
ab
cd e
fig.2. applying the αalgorithm to table 1 results
in a correct model without the and-split and and-
join.table 1 where a, b, and
c are visible but the and-
split in-between a, and
b and c is not. although
the log does not reveal
the and-split it is clearthat there has to be an
and-split if we assume
tasks b and c to be inparallel. similarly, we can
detect that there has to
be an and-join. suppose that both a and d are removed from table 1. inthis case the αalgorithm [7] would not be able to detect the two hidden transi-
tions and the resulting model is shown in figure 2. note that figure 2 can be
considered to be equivalent to figure 1 for this example it is still possible toautomatically construct a process model similar to figure 1. however, for more
complicated processes it is more diﬃcult to add these “hidden tasks”, and thus
posing a interesting problem also related to issues such as observable behaviorand (branching) bisimulation [15].
4.2 mining duplicate tasks
the problem of duplicate
bab
cd
fig.3. a process model with duplicate tasks.tasks refers to the situ-
ation that one can havea process model (e.g., a
petri net) with two nodes
referring to the same task.suppose that in table 1
and figure 1 task e is
renamed to b (see fig-ure 3). clearly, the mod-
iﬁed log could be the result of the modiﬁed process model. however, it becomes
very diﬃcult to automatically construct a process model from table 1 with erenamed to b because it is not possible to distinguish the“b” in case 5 from the
“b’s” in the other cases. note that the presence of duplicate tasks is related tohidden tasks. many processes with hidden tasks but with no duplicate tasks can
be modiﬁed into equivalent processes with duplicate tasks but with no hidden
tasks.
4.3 mining non-free-choice constructs
free-choice petri nets are petri nets where there are no two transitions consuming
from the same input place but where one has an input place which is not aninput place of the other [12]. this excludes the possibility to merge choice and
synchronization into one construct. free-choice petri nets are a well-known and
widely used subclass of petri nets. however, many processes cannot be expressedin terms of a free-choice net. unfortunately, most of the mining techniques (also
those that are not using petri nets) assume process models corresponding to the
class of free-choice nets. non-free-choice constructs are diﬃcult to model since
they represent “controlled choices”, i.e., the choice between two tasks is not
determined inside some node in the process model but may depend on choicesmade in other parts of the process model. clearly, such non-local behavior is
diﬃcult to mine and may require many observations.
figure 1 is free-choice since
a
cd
b e
fig.4. a non-free-choice process.synchronization (task d) is
separated from the choice be-tween a and e. figure 4 shows
a non-free-choice construct.
after executing task c thereis a choice between task d
and task e. however, the choice
between d and e is “con-
trolled” by the earlier choice between a and b. note that tasks d and e are
involved in a choice but also synchronize two ﬂows. clearly such constructs arediﬃcult to mine since the choice is non-local and the mining algorithm has to
“remember” earlier events.
4.4 mining loops
in a process it may be possi-
a
ca
b d
fig.5. a process model with a loop.ble to execute the same task
multiple times. if this hap-
pens, this typically refers to
a loop in the correspondingmodel. figure 5 shows an ex-
ample with a loop. after ex-
ecuting task b, task c canbe executed arbitrarily many
times, i.e., possible event sequences are bd, bcd, bccd, bcccd, etc. loops
like the one involving task c are easy to discover. however, loops can also beused to jump back to any place in the process. for more complex processes,
mining loops is far from trivial since there are multiple occurrences of the sametask in a given case. some techniques number each occurrence, e.g., b1 c1 c2
c3 d1 denotes bcccd. these occurrences are then mapped onto a single task.
as illustrated by figure 5 there is a relation between loops and duplicate tasks.in figure 5 task a is executed multiple times (i.e., twice) but is not in a loop.
many mining techniques make some assumptions about loops which restricts the
class of processes that can be mined correctly.
4.5 using time
table 1 shows some time information, i.e., each event has a timestamp . this
log considers activities to be atomic. (another interpretation would be to think
of events as the completion of some activity.) to model the duration of the
execution of a task one can log start events and end events. by comparing thediﬀerence between the timestamp of a start event and the timestamp of the
corresponding end event it is possible the determine the processing time. the
timing information can be used for two purposes: (1) adding time information tothe process model and (2) improve the quality of the discovered process model.
it is relatively easy to augment a process model with time information. an
approach is to ﬁrst mine the process model while ignoring the timestamps and
then “replay” the log in the process model. by replaying the log, it is easy
to calculate (average, variance, minimum, and maximum) ﬂow times, waiting
times, and processing times [2]. one complication may be that for some cases,
the discovered process model may not ﬁt. this information may be used tomodify the process model (e.g., modify the resulting model directly, clean the
log, or add knowledge and rerun the mining algorithm).
using timing information to improve the quality of the log is more involved.
for example, if two events occur within a short time interval, it is likely that
there is some causal relation. a notion of “time distance” could be used in themining algorithms. however, the added value of this is not clear yet. in fact, as
far as we know, no work has been done on this.
4.6 mining diﬀerent perspectives
the dominant perspective of process mining is the so-called control-ﬂow per-
spective. the essence of this perspective is the ordering of tasks. as indicated,the process (i.e., control-ﬂow) perspective can be extended to include timing
information (i.e., events have timestamps). however, in addition to the process
perspective one could also consider other perspectives. we already discussed theorganizational and case perspectives. the organizational structure describes re-
lations between roles (resource classes based on functional aspects) and groups
(resource classes based on organizational aspects), and other artifacts clarify-ing organizational issues (e.g., responsibility, availability). resources, ranging
from humans to devices, form the organizational population and are allocated
to roles and groups. another approach is to build the social network and usesna techniques to analyze this. the case perspective typically also includes
information/data aspects. note that the case perspective typically deals withcontrol and production data. control data are data introduced solely for process
management purposes, e.g., variables introduced for routing purposes. produc-
tion data are information objects (e.g., documents, forms, and tables) whoseexistence does not depend on process management. there may be even more
perspectives that are interesting for mining, e.g., application perspective deals
with the applications being used to execute tasks (e.g., the use of a text editor).
thus far, most research eﬀorts have focused on the process (control-ﬂow)
perspective. therefore, it is an interesting challenge to include the organization
perspective, the case perspective, and/or the application perspective.
4.7dealing with noise
most mining algorithms assume the information to be correct. although this is a
valid assumption in most situations, the log may contain “noise”, i.e., incorrectly
logged information. for example, it could be that sometimes an event is not
recorded or recorded some time after it actually took place. the mining algorithmneeds to be robust with respect to noise, i.e., causal relations should not be based
on a single observation. in fact, one could argue that the mining algorithm needs
to distinguish exceptions from the “normal ﬂow”. when considering noise, oneoften has to determine a threshold value to cut-oﬀ exceptional or incorrectly
logged behavior. see [27] for some heuristics to deal with noise.
4.8 dealing with incompleteness
related to the issue of noise
ab
c1d
c2
c3
c9...
fig.6. a process model where it is diﬃcult to pin-
point the synchronization.is the notion of incom-
pleteness. a log is incom-plete if it does not con-
tain suﬃcient information
to derive the process. con-sider table 1 and the de-
rived process model shown
in figure 1. suppose that
figure 1 is a correct rep-
resentation of the actualprocess but that that the
route represented by case
5 is very rare. when min-ing only a few cases it could
be that only cases similar
to cases 1, 2, 3, and 4 are recorded. as a result, the discovered process model isnot correct because task e is missing. this example may seem trivial, however,
for real-life processes there are easily up to a million possible paths when allow-
ing for parallel, conditional and iterative routing. consider for example figure 6.note that in this process there are no choices, i.e., all tasks are executed only
once. however, task b and the sequence of 9 tasks c1, c2, ..., c9 are executedin parallel. as a result there are ten possible routes, i.e., even though there are
no choices at least 10 cases are needed to derive the process model shown in
figure 6. in fact, observations where b is executed after the sequence of 9 tasksc1, c2, ..., c9 may be highly unlikely and perhaps thousands of logged cases are
needed to discover the correct model. if we change the process in figure 6 such
that tasks c1, c2, ..., c9 are executed in parallel, then there are 10! = 3628800possible routes. in this case, the log is likely to be incomplete and heuristics are
needed to tackle this problem. these heuristics are typically based on occam’s
razor, i.e., the principle that states ”when you have two competing theorieswhich make exactly the same predictions, the one that is simpler is the better.”.
4.9 gathering data from heterogeneous sources
today’s enterprise information systems are incredibly complex and typically
composed of a large number of applications/components. applications typically
support fragments of a process and as a result the information required for
process mining is scattered over the enterprise information system. therefore, thestep to collect the event log used as input for process mining is far from trivial.
even within a single product, events may be logged at several levels of parts of
the system. consider for example an erp system like sap: there are dozens oflogs relevant for process mining. one approach is to use a data warehouse which
extract the information from these logs [14]. in [2] a tool independent xml
format is proposed to serve as the standard input format for process mining.
4.10 visualizing results
another challenge is to present the results of process mining in such as way that
people actually gain insight in the process. non-trivial management information
should visualized in such a way that it is easy to understand. a typical term used
in this context is “management cockpit” to emphasize the relevance of presentingthe results of process mining. existing commercial products such as aris ppm
[18] focus mainly on performance indicators such as ﬂow time, work in progress,
etc. visualizing the complete control-ﬂow perspective or the other perspectivesis more diﬃcult and requires further research.
4.11 delta analysis
process mining always results in a process model including the control-ﬂow per-
spective and, perhaps, some of the other perspectives. however, there may al-
ready be descriptive or normative models. for example, business consultants
may have modeled the process by hand using a simple diagramming tool or evena simulation package. moreover, the conﬁguration of a wfm system requires an
explicit process model and erp systems are conﬁgured on basis of so-called ref-
erence models. given the fact that there may be descriptive or normative modelsmade by people, it is interesting to compare these models with the models result-
ing from process mining. delta analysis is used to compare the two models andexplain the diﬀerences. few techniques are know to detect diﬀerences and com-
monalities of process models [1,10]. both from a practical point of view and a
scientiﬁc point of view, delta analysis is interesting and deserves more attention.
in this section, we identiﬁed a number of domains comprising challenging prob-
lems that remain unsolved (satisfactorily). by tackling these problems, it is pos-
sible to improve the applicability and relevance of process mining.
5 example: discovering coordination patterns between a
service client and service provider
after providing an introduction to pro-start
request offer
offer requested
offer madeofferno offer
reject offer
accept offer
reject accept
confirm accept
committedoffer acceptedservice clientservice provider
fig.7. coordination pattern: single
non-binding oﬀer [13].cess mining and discussing some of the
many challenges, we now focus on a
speciﬁc coordination problem: estab-
lishing an agreement between a serviceclient and a service provider. however,
before doing so, let us make some gen-
eral comments on applying process min-ing to coordination.
coordination can be deﬁned as “the
harmonious functioning of parts for ef-
fective results”. coordination is requiredat many levels ranging from the hard-
ware in a single computer to the or-
chestration of interorganizational busi-ness processes. there are basically two
ways of coordination: (1) coordination
between a control system and a con-trolled system and (2) coordination be-
tween two or more autonomous sys-
tems. when applying process mining
to coordination there are several ways
to monitor coordination activities be-tween systems. each system may mon-
itor its interactions with the environ-
ment (e.g., receiving and sending ofmessages). in case of a binary coordi-
nation setting (i.e., just two systems),
both systems have a complete view onall interactions. in case of more than two systems, such a complete view may be
lacking. in such situations, it may be useful to establish some monitoring agent
that sits in-between all systems participating in the coordination.let us now focus on a concrete example. figure 7 shows the so-called “single
non-binding oﬀer” negotiation pattern. this pattern is taken from [13] where 8negotiation patterns are described. these patterns correspond to generic building
blocks for coordinating a service client and a service provider. in the coordination
pattern depicted in figure 7, the client requests an oﬀer. the provider eithersends an oﬀer or not. if no oﬀer is returned, the coordination ends. the service
provider can send additional oﬀers until some oﬀer is accepted or rejected. if
the oﬀer is rejected, the coordination ends. if it is accepted, the service providercan reject or conﬁrm the acceptance. only in the latter case, the negotiation
ends successfully. the 7 variants of this negotiation pattern discussed in [13]
consider “binding oﬀers” (i.e., after acceptance of the client the oﬀer cannot be“withdrawn”), “counter oﬀers”, etc.
note that in figure 7 each of the two parties involved can monitor all coor-
dination activities (i.e., the transitions corresponding to message exchange are
visible for both). about 10 negotiations are needed to discover the petri netshown in figure 7, i.e., process mining can be used to discover coordination
patterns. as indicated in the introduction, this may be useful for two reasons.
first of all, it is a way to ﬁnd out how coordination really works. by includ-ing additional information such as data and time it is also possible to discover
relations between performance (e.g., time and success rate) and properties of
the negotiation and the two parties involved. second, process mining can also beused for delta analysis, i.e., it is possible to compare the actual behavior and the
assumed/expected behavior speciﬁed in some descriptive or prescriptive model
(e.g., the frame contract).
6 conclusion
this paper presented an overview of process mining and highlighted some ofthe more technical challenges. the paper provides an overview on earlier work
presented in [4–6] and it’s goal is to trigger discussion at the atpn 2004 work-
shop on petri nets and coordination (pnc04). for more information on processmining we refer to http://www.processmining.org.
as indicated in the introduction, similar interaction patterns occur at the
level of software components, business processes, and organizations. in this pa-
per, we focused on coordination mechanisms at the level of business processes.
clearly, the event logs of many enterprise information systems can be used tomonitor and analyze at least part of the coordination processes taking place.
it is interesting to think of mining of coordination patterns at diﬀerent levels.
one obvious application is in the area of web services and web services composi-
tion/orchestration in particular. for example, it would be interesting to extend
languages like bpel4ws [11] with standard logging facilities.
acknowledgements
the author would like to thank ton weijters, boudewijn van dongen, ana
karla alves de medeiros, minseok song, laura maruster, eric verbeek, monique
jansen-vullers, hajo reijers, michael rosemann, and peter van den brand fortheir on-going work on process mining techniques and tools at eindhoven uni-
versity of technology. parts of this survey/discussion paper have been based onearlier papers with these researchers.
references
1. w.m.p. van der aalst and t. basten. identifying commonalities and diﬀerences
in object life cycles using behavioral inheritance. in j.m. colom and m. koutny,editors, application and theory of petri nets 2001 , volume 2075 of lecture notes
in computer science , pages 32–52. springer-verlag, berlin, 2001.
2. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
modelsfromtimedlogs. iny.han,s.tai,andd.wikarski,editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
3. w.m.p.vanderaalstandk.m.vanhee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
4. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in m. weske, b. pernici, and j. desel, editors,
international conference on business process management (bpm 2004) ,l e c t u r e
notes in computer science, springer-verlag, berlin, 2004.
5. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267, 2003.
6. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining ,s p e c i a l
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
7. w.m.p.vanderaalst,a.j.m.m.weijters,andl.maruster. workﬂowmining:dis-
coveringprocessmodelsfromeventlogs. quttechnicalreport,fit-tr-2003-03,
queensland university of technology, brisbane, 2003. (accepted for publication
in ieee transactions on knowledge and data engineering.).
8. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.
9. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
10. j.e. cook and a.l. wolf. software process validation: quantitatively measuring
the correspondence of a process to a model. acm transactions on software
engineering and methodology , 8(2):147–176, 1999.
11. f. curbera, y. goland, j. klein, f. leymann, d. roller, s. thatte, and s. weer-
awarana. business process execution language for web services, version 1.0.standards proposal by bea systems, international business machines corpora-
tion, and microsoft corporation, 2002.
12. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts
in theoretical computer science . cambridge university press, cambridge, uk,
1995.
13. a. van dijk. contracting workﬂows and protocol patterns. in w.m.p. van der
aalst, a.h.m. ter hofstede, and m. weske, editors, international conference onbusiness process management (bpm 2003) ,volume 2678 of lecture notes in com-
puter science , pages 152–167. springer-verlag, berlin, 2003.
14. j. eder, g.e. olivotto, and wolfgang gruber. a data warehouse for workﬂow
logs. in y. han, s. tai, and d. wikarski, editors, international conference on
engineering and deployment of cooperative information systems (edcis 2002) ,
volume 2480 of lecture notes in computer science , pages 1–15. springer-verlag,
berlin, 2002.
15. r.j. van glabbeek and w.p. weijland. branching time and abstraction in bisim-
ulation semantics. journal of the acm , 43(3):555–600, 1996.
16. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors, proceedings of 27th international conference on very large data bases
(vldb’01) , pages 159–168. morgan kaufmann, 2001.
17. j.herbst. amachinelearningapproachtoworkﬂowmanagement. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
18. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
19. g. keller and t. teufel. sap r/3 process oriented implementation . addison-
wesley, reading ma, 1998.
20. a.k.a. de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. workﬂow
mining: current status and future directions. in r. meersman, z. tari, and d.c.schmidt, editors, on the move to meaningful internet systems 2003: coopis,
doa, and odbase , volume 2888 of lecture notes in computer science ,p a g e s
389–406. springer-verlag, berlin, 2003.
21. a.k.a. de medeiros, b.f. van dongen, w.m.p. van der aalst, and a.j.m.m. wei-
jters. process mining: extending the α-algorithm to mine short loops. beta
working paper series, wp 113, eindhoven university of technology, eindhoven,2004.
22. r. milner. communicating and mobile systems: the pi-calculus . cambridge
university press, cambridge, uk, 1999.
23. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1–10. ieee computer society press, los alamitos, california, 2000.
24. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
25. m. sayal, f. casati, and m.c. shan u. dayal. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb’02) ,
pages 880–883. morgan kaufmann, 2002.
26. j. scott. social network analysis . sage, newbury park ca, 1992.
27. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data using little thumb. integrated computer-aided engi-
neering, 10(2):151–162, 2003.