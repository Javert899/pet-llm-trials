process comparison using object-centric process
cubes
anahita farhang ghahfarokhi, alessandro berti, wil m.p. van der aalst
abstract —process mining provides ways to analyze business
processes. common process mining techniques consider the process
as a whole. however, in real-life business processes, different
behaviors exist that make the overall process too complex to interpret.
process comparison is a branch of process mining that isolates
different behaviors of the process from each other by using process
cubes. process cubes organize event data using different dimensions.
each cell contains a set of events that can be used as an input to apply
process mining techniques. existing work on process cubes assume
single case notions. however, in real processes, several case notions
(e.g., order, item, package, etc.) are intertwined. object-centric
process mining is a new branch of process mining addressing multiple
case notions in a process. to make a bridge between object-centric
process mining and process comparison, we propose a process cube
framework, which supports process cube operations such as slice and
dice on object-centric event logs. to facilitate the comparison, the
framework is integrated with several object-centric process discovery
approaches.
keywords —process mining, multidimensional process mining,
multi-perspective business processes, olap, process cubes, process
discovery.
i. i ntroduction
every organization has to manage business processes
such as the purchase-to-pay (p2p) and order-to-cash
(o2c) processes. to manage real-life processes we need to
consider two challenges. first, the nature of the business
processes is not static due to the environmental changes (e.g.,
seasonal demands, changing in customer preferences). thus,
different behaviors may exist in business processes [1]. we
can compare different process behaviors using process cubes.
process cubes are inspired by the notion of olap [2]. similar
operations to olap are deﬁned for process cubes, i.e., slice,
dice, drill-down, and roll-up [3].
second, multiple objects interact with each other in the
business processes [4]. considering simple p2p and o2c
processes, multiple objects, e.g., order, item, and package are
involved. moreover, different relations exist between these
objects. for example, an order contains multiple items and
multiple items are packed in one package for the delivery.
each of these objects can be considered as a case notion
(i.e., a process instance). therefore, in real business processes,
extracted from erp systems, we have multiple case notions.
however, like most existing process mining techniques, current
process cube approaches can only handle one case notion
at a time [1], [5], [6]. thus, they cannot cover multiple
anahita farhang ghahfarokhi, alessandro berti, wil m.p. van der aalst
are with the process and data science institute, rwth aachen
university, germany (e-mail: farhang@pads.rwth-aachen.de,
a.berti@pads.rwth-aachen.de, wvdaalst@pads.rwth-aachen.de).
operational 
processes /real 
world
information 
systems , e.g, 
erp
process cubes
process 
mining 
analysis
object -centric 
sublogs
process 
discoveryobject -
centric event 
logs 
......fig. 1 schematic overview of the proposed approach. in the proposed
framework, we feed the process cube with object-centric event logs
case notions involved in business processes such as orders
and items. the interaction between multiple case notions can
be analyzed using object-centric process mining [4]. this
emerging subﬁeld of process mining provides a more general
vision of business processes by considering multiple case
notions in processes.
in this paper, we address the problem of handling multiple
interacting case notions in process cubes. in order to ﬁt
object-centric event logs into process cubes, some challenges
arise due to the nature of object-centric event logs, where we
need to consider multiple case notions. in traditional event
logs, each event refers to a single case notion, an activity,
a timestamp, and some possible additional attributes (e.g.,
location, cost, etc.). however, in object-centric event logs, each
event may refer to multiple case notions. for example, suppose
we have an event with a conﬁrm order, related to one order
but multiple items. in fact, there is a one-to-many relationship
between order and item. then, each event is related to one
order and many items, i.e., convergence [4]. considering
slicing based on item dimension, the values of item dimension
are not atomic. however, in the existing process cubes [1], [5],
[7], [8], we need atomic values to apply each operation.
in this paper, we extend the notion of process cubes to be
applicable to non-atomic values and provide an open-source
implementation of our object-centric process cube approach.
moreover, to facilitate the comparison, we use object-centric
process discovery approaches. we can extract process models
of the cells of the process cubes and by comparing them
against each other, we are able to do performance analysis
from different angles.
a schema of the proposed approach is shown in fig. 1.
in the ﬁrst step, we have operational and business processes
running in the real world. the information of these business
processes is recorded in information systems such as sap orarxiv:2103.07184v1  [cs.db]  12 mar 2021erp systems. we can extract object-centric event logs, i.e.,
event logs with multiple case notions from data stored in
information systems. then, we use the object-centric event log
as an input for the process cube. in the process cube, different
operations such as slicing and dicing are applicable. through
the application of different operations, we obtain object-centric
sublogs. we can apply the object-centric process discovery
methods on the object-centric sublogs to have the model of the
process. using such object-centric sublogs and the discovered
models, we can analyze the process and ﬁnd the pitfalls of the
process.
the structure of the paper is as follows. in section ii,
we discuss related work. in section iii, we describe the
running example that is used throughout the paper. in
section iv, we extend the deﬁnitions of the process cube
to support object-centric event logs. section v provides our
implementation of the proposed framework. in section vi, we
provide performance related results of our framework. finally,
section vii concludes the paper and discusses the future work.
ii. r elated work
in this section, ﬁrst, we present the work related to
object-centric process mining. then, we discuss the developed
approaches on process comparison.
one of the approaches developed to model the processes
with multiple case notions is artifact-centric modeling.
artifacts combine process and data as the building blocks [9].
in [10], the authors formulate artifact-based business models
and develop an initial framework that enables the automated
construction of the processes. in [11], the authors introduce an
artifact-centric process model, showing business objects and
their life-cycles. the proposed techniques do not show the
whole process in one diagram, which leads to losing a general
vision over the process. object-centric behavioral constraint
(ocbc) models show the whole process in one diagram
and incorporate data perspective in the process model [12].
the main challenge for ocbc models is complexity, which
leads to the development of mvp (multiple viewpoint)
models [13]. mvp models are graphs, annotated by frequency
and performance information, where relationships between
activities are shown by colored arcs. object-centric petri nets
are another type of object-centric process models that can be
extracted from object-centric event logs which provide the
execution semantics [14]. in this paper, comparison between
the mvp models and object-centric petri nets extracted from
cube operations against the whole cube is possible, which is
helpful in process analysis.
process cubes are inspired by olap, where event data are
organized using dimensions. each cell contains events, which
can be used as an input to apply process mining techniques
such as process discovery. in [2], the event cube is introduced
with the application of olap operations on event data. the
ﬁrst notion for process cubes was proposed in [6] and then
enhanced in [1]. in [1] an approach for interactive analysis of
the event data is also proposed. process cubes were used for
analysis in several case studies for different purposes [7], [5],
[15]. although, none of them addresses handling object-centric
event logs.iii. r unning example
the example process is from the publicly
available sap ides system which belongs
to a real purchasing process (available in
https://gitlab.com/anahita-farhang/process-cube). it contains
17500 events, 4 object types (i.e., case notions), 4 attributes,
and 10 number of activities recorded from 2000 until 2020. a
fragment of a the object-centric event log is shown in table i.
there is one-to-many relationship between order and item
and one-to-one relationship between order and invoice. a part
of the mvp model of the process is shown in fig. 2. mvps
are graphs in which nodes represent activities and there is
an edge between two nodes if there is at least one event in
the event log where the source activity is followed by the
target activity. in the mvp models, arcs with different colors
represent different case notions [4]. following the blue and
purple arcs, the order and item go through create purchase
order, and enter incoming invoice and a few of them leave
the process at the cancel invoice document .
we also use object-centric petri nets in this paper. these
discovery techniques focus on solitary processes. there may
exist different behaviors in the processes. the variability in
this purchasing process motivates us to extend the process
cubes notion to support object-centric event logs to compare
different processes.
iv. o bject -centric process cubes
in this section, we formalize the notion of object-centric
process cubes. using the running example, described in
section iii, we provide examples for the object-centric process
cube notion. a process cube is formed by its structure
and an object-centric event log. the structure describes the
distribution of the cells and the object-centric event log is
used to materialize the cells of cube by events.
a. object-centric event log
the object-centric event log, shown in table i, represents
a collection of events and that is totally ordered based on
the timestamp. each event consists of an event identiﬁer,
attributes, and object types (i.e., case notions). to formalize
the object-centric event log, we deﬁne the universes to be used
throughout the paper.
deﬁnition 1 (universes) .we deﬁne the following universes:
ueiis the universe of event identiﬁers,
fig. 2 mvp model for a fragment of the processtable i
a f ragment of an object -centric event log
event attributes object types
identiﬁer activity timestamp resource order item invoice
0001 create purchase order 01-01-2000:00.00 user01 fo1g fi1; i2; i3g fg
0002 post document 01-01-2000:08.05 user01 fg fg finv1g
... ... ... ... ... ... ...
17499 enter incoming invoice 20-05-2020:15.11 user50 fo12000 g fi27005 g finv800g
17500 park invoice 20-05-2020:15.14 user42 fo12000 g fg fg
uattis the universe of all possible attribute names,
uvis the universe of all possible attribute values,
uvmap =uatt9 u vis the universe of functions
mapping attributes on attribute values,
uotis the universe of all object types,
uoiis the universe of object identiﬁers,
us= (p(uv)[p(uoi))nf;g is the universe of value
sets excluding the set containing the empty set,
uh= (p(p(uv))[p(p(uoi)))nf;;f;gg is the universe
of value set collections excluding the set and the set
collection containing the empty set,
type2uoi!uotassigns precisely one type to each
object identiﬁer,
uomap is the universe of all the object mappings
indicating which object identiﬁers are included per type.
uomap is deﬁned like:
uomap =fomap2uot!p (uoi)j 8ot2uot
8oi2omap (ot)type (oi) =otg
uevent =ueiuvmapuomap is the universe of events.
e= (ei;vmap;omap )2uevent is an event with event
identiﬁerei, referring to the objects speciﬁed in omap , and
having attribute values speciﬁed by vmap . each row in the
table i refers to an event, which contains an event-identiﬁer,
attribute values, and object identiﬁers. note that usdoes not
includef;g anduhdoes not includef;;f;gg . these values
are created after the power set generation. however, it is not
meaningful for these sets to contain such values.
deﬁnition 2 (object-centric event log) .an object-centric
event log is a tuple e= (ei;att;ot; vmap;omap )2
p(uei)p (uatt)p (uot)p (uvmap )p (uomap )where
vmap2ei!uvmap is a function mapping each event to its
attribute mapping, and omap2ei!uomap is a function
mapping each event to its object mapping. event identiﬁers
are unique and time is non-descending.
the ﬁrst column in the object-centric event
log of the running example shows unique
event identiﬁers. consider e1, the ﬁrst event in
table i. vmap (e1)(activity )=create purchase order ,
vmap (e1)(resource )=user01 ,omap (e1)(order )=fo1g,
andomap (e1)(item )=fi1;i2;i3g.
b. process cube structure
we deﬁne the structure of the process cube independent
from the object-centric event log. a process cube structure is
fully speciﬁed by the set of dimensions.deﬁnition 3 (process cube structure) .a process cube
structure is a triplet pcs = (d;val;gran )where:
dis a set of dimensions,
val2d!usis a function associating a dimension to
a set of values.
gran2d!uhdeﬁnes a level for each dimension
such that for any d2d:val(d) =[gran (d).
a dimension dhas a value val(d)and a granularity
gran (d). the possible set of values for each
dimension is speciﬁed by val(d)and a subset of
these values exist in a sample of the process cube.
for example, val(item )=fi1;i2;i3;:::;i 27005g and
val(activity )=fcreate purchase order ;:::;park invoiceg.
a dimension also has a granularity gran (d)which is a set
of sets. for example, gran (timestamp )contains sets such
ast2017 andt2018 each showing all the timestamps in a
particular year. these sets form levels based on set inclusion
(e.g.,t2019 dominatestapr 2019).
the content of the cube is the object-centric event log.
therefore, we make the process cube structure and the
object-centric event log compatible.
deﬁnition 4 (compatible) . lete =
(e;att;ot; vmap;omap )be an object-centric event
log andpcs = (d;val;gran )be a process cube structure.
they are compatible if:
dot[att , dimensions should correspond to
attributes or object types,
for anyd2d\att ande2e:vmap (e)(d)2val(d),
for anyd2d\otande2e:omap (e)(d)val(d).
in making the process cube structure and the object-centric
event log compatible, there is a difference between dimensions
that correspond to object types and dimensions that correspond
to attributes. this difference arises due to the non-atomic
values for object types. consider the activity as the
dimension, which is an attribute, activity2d\att , then
vmap (e1)(activity )2fcreate purchase order ;:::;park invoiceg.
however, if we consider item as the dimension,
which is an object type, item2d\ot, then
omap (e1)(item )fi1;:::;i 27005g.
different operations are possible in process cubes. by
applying process cube operations such as slicing, the content
of the process cube structure and object-centric event log do
not change. we only change the fragment of the cube that
we visualize. a process cube view deﬁnes the events that are
visible for us.deﬁnition 5 (process cube view) .letpcs =
(d;val;gran )be a process cube structure. a process
cube view is a pair pcv = (dsel;sel)such that:
dseldare the selected dimensions,
sel2d!uhis a function selecting the part of the
level considered per dimension. the function selis such
that for any d2d:
–sel(d)gran (d)
–for anys1;s22sel(d) :s1s2impliess1=s2.
a process cube view is a cube with jdseljjdjdimensions.
fig. 3a shows an example of a process cube view with three
dimensions. the selected dimensions are activity, item and
timestamp ( dsel=fitem;timestamp;activity g). function
selselects values for all dimensions regardless of whether
they are in dselor not. for the dndselwe cannot see
the values of sel in the process cube view . however,
the values of sel exist for these dimensions and these
dimensions may have been used in ﬁltering. for example,
in slicing the dimension is no longer visible but it is
used in ﬁltering. in the process cube view shown in fig. 3a,
sel(timestamp )=ft2000;:::;t 2020g. figure 3b shows another
view where sel(timestamp )=ftjan 2000;:::;t june 2020g.
through the requirement s1s2impliess1=s2, we
ensure that elements of sel(d)do not intersect, e.g.,
sel(timestamp )=ftjan 2017;t2017;t2018;t2019gis not
possible. by having the process cube view and object-centric
event log, we materialize the cells by events. we can extract
event logs from cells of the process cube to apply process
mining techniques such as process discovery.
deﬁnition 6 (materialized process cube view) .let
process cube structure pcs = (d;val;gran )and
object-centric event log e= (e;att;ot; vmap;omap )
be compatible. the materialized process cube
for some view pcv =(dsel;sel) ofpcs is
me;pcv =f(c;events (c))jc2cellsg with
cells =fc2dsel!usj8d2dselc(d)2sel(d)gbeing
the cells of the cube and
events (c) =
fe2ej8d2dsel\attvmap (e)(d)2c(d)
^8d2d\attvmap (e)(d)2[sel(d)
^8d2dsel\otc(d)omap (e)(d)
^8d2d\otomap (e)(d)[sel(d)g
in materializing, we add content to the cells. in other words,
we create an event log for the cells in the process cube view.
in ac2cells , each visible dimension is assigned to a value
of that dimension, e.g., c(activity )=create purchase order ,
c(timestamp )=t2020, andc(item )=fi1;i2;:::;i 13502g.
we materialize the cells of the process cube with
events.events (c)are all the events corresponding to the
ﬁrst requirement (i.e., 8d2dsel\attvmap (e)(d)2c(d),
8d2dsel\otc(d)omap (e)(d)) which is different
post document create purchase orderactivity
park invoice{i1, …, i13502 }{i13503 , …, i27005 }item(a) a process cube view with the granularity of year for the time
dimension
post document create purchase orderactivity
park invoice{i1, …, i13502 }{i13503 , …, i27005 }item
(b) a process cube view with the granularity of month for the time
dimension
fig. 3 example of different process cube views of the same process cube
structure
for object types and attributes. the second
requirement (i.e., 8d2d\attvmap (e)(d)2 [sel(d),
8d2d\otomap (e)(d)[sel(d)), which is also different
for object types and attributes, makes sure that events are
not ﬁltered out. events in the cell can be converted to an
object-centric event log and used to apply process mining
techniques.
using earlier formalizations, we deﬁne process cube
operations such as slice.
deﬁnition 7 (slice) .letpcs = (d;val;gran )be a process
cube structure and pcv = (dsel;sel)a view ofpcs . for
anyd2dselandv2sel(d) :slice d;v(pcv ) = (d0
sel;sel0)
withd0
sel=dselnfdg;sel0(d) =fvgandsel0(d0) =sel(d0)
ford02dnfdg.
through slicing a new cube view is produced and a
dimension dis removed from the cube. as shown in
fig. 4, in slicing for the item dimension and value set
fi13503;i13504;:::;i 27005g, the item dimension is removed
and only events in which the item is a subset of
fi13503;i13504;:::;i 27005gremain in the cube view.
deﬁnition 8 (dice) .letpcs = (d;val;gran )be a process
cube structure and pcv = (dsel;sel)a view ofpcs . let
fil2dsel9uhbe a ﬁlter such that for any d2dom (fil) :
fil(d)sel(d).dicefil(pcv ) = (dsel;sel0)withsel0(d) =
fil(d)ford2dom (fil)andsel0(d) =sel(d)ford2dnitem
{i1, …, i13502 }{i13503 , …, i27005 }post document create purchase orderactivity
park invoice
post document create purchase orderactivity
park invoicefig. 4 the process cube view after slicing based on dimension item
post document create purchase orderactivity  dice : dom (fil) = {item , time }
  fil(time ) = {t2018 , t2019}  
  fil(item ) = {{i1, …, i13502 }}{i1, …, i13502 }{i13503 , …, i27005 }item item
{i1, …, i13502 }park invoice
post document create purchase orderactivity
park invoice
fig. 5 the process cube view after dicing based on dimensions item and time
dom (fil).
the difference between dice and slice is that through dicing,
no dimension is removed and it limits the values for one
or more dimensions. for example dicing is applicable based
on two dimensions time and item, as shown in fig. 5. in
this example, we have new process cube view based on
two ﬁlters: fil(time ) =ft2018;t2019gandfil(item ) =
fi1;i2;:::;i 13502g.
deﬁnition 9 (change granularity) .letpcs =
(d;val;gran )be a process cube structure and
pcv = (dsel;sel)a view ofpcs . letd2dseland
g2uhsuch that:ggran (d)and[g=[sel(d).
chgr d;g(pcv ) = (dsel;sel0)withsel0(d) =g, and
sel0(d0) =sel(d0)ford02dnfdg.
the dimensions in process cube view do not change during
changing granularity, but the dimensions are shown in a more
ﬁne-grained or coarse-grained vision. in fig. 3a the granularity
for time dimension is year. however, in fig. 3b, the granularity
for time dimension is month. having different levels of the
granularity, we can compare processes in different levels of
granularity.
v. i mplementation
the approach has been implemented as a standalone python
application1by using pm4py-mdl. the user can easily
1available in https://gitlab.com/anahita-farhang/process-cube
import the object -
centric event log
apply process 
cube operations 
such as slice or 
dice
export object -centric object -centric 
sublogs /traditional event logs /
process models /sub process cubes
create the cube / materialize 
the cells of the process cube
+
recognize possible 
dimensions in the event log
choose the dimensions to 
create the structure of the 
process cubefig. 6 an overview showing how the framework can be used. the input is
an object-centric event log. by choosing the dimensions, the user can build
the process cube and through process cube operations explore the cube. it is
possible to have the output as an event log, a process model, and a sub cube
install the framework in python 3.6. the procedure to create a
cube in this framework is shown in fig. 6. the functionalities
of the framework are:
it is possible to import object-centric event logs (the
framework also accepts csv and xes formats and
automatically converts them to an object centric event
log with one case notion).
the created cube can be exported in a dump ﬁle and
stored in the memory for future exploration.
at any point in time, it is possible to export the
object-centric event log as an object-centric event log or
a traditional event log by selecting a case notion. it is
also possible to show the process models of the selected
cell(s).
it is possible to explore the cube interactively through
process cube operations such as slicing. the user can discover1 2
34fig. 7 process mining cube: process comparison approach
an mvp model, enhanced with performance/frequency
information, and object-centric petri net for each cell. fig. 7
shows a comparison between mvp models of a dice and the
whole cube:
in box 1, it is possible to specify for each object type
the activities that are considered for that object type. for
example, for the activity create purchase order ,orders are
involved, but items are not involved in the post document .
the mvp model of the whole cube is shown in box 2 by
considering the ﬁltering options in box 1. mvp models
are dfgs with colored arcs. in this ﬁgure, the color of
the arcs related to the order is red.
the mvp model of the speciﬁc slice/dice of the cube is
represented in box 3. putting this model near the whole
cube’s model makes the comparison easier.
in box 4, the user can change the frequency of the
nodes and edges appearing in the mvp model. there is
a performance annotated version of mvp models that is
reachable only by clicking on performance. it is possible
to export the object-centric process model as an image in
the desired address.
vi. e valuation
in this section, we analyze the scalability of the
object-centric process cube tool. to assess the performance
of our approach, we measure the scalability of the approach
from two perspectives: creation time (e.g., the time required
to create and materialize cells of the cube), and the loading
time (e.g., the time required to import the cube). results,
shown in fig. 8, have been done in three different settings:
the time for creating/loading the cube in terms of the number
of events in the event log (while keeping the number of object
types and attributes constant), the number of object types
in the event log (while keeping the number of events and
attributes constant), and the number of attributes in the event
log (while keeping the number of events and object typesconstant). performance analysis of the cube with different
settings shows the time required for creating/loading the cube
increases linearly, non-linearly, and linearly when increasing
number of events, object types, and attributes respectively. the
proposed framework creates a process cube for an event log
with 17500 events in almost 4 minutes.
vii. c onclusion
this paper bridges the gap between object-centric process
mining and process comparison. therefore, we proposed
an object-centric process cube that organizes data through
dimensions referring to case notions (i.e., process instances)
and attributes in the event log. the proposed framework
allows the users to explore the object-centric event logs
interactively through the process cube operations such as
slice. furthermore, the proposed framework, which is publicly
available, is able to discover object-centric process models
from object-centric event logs extracted from the cells of the
cube, which speeds up process comparison. for the future
work, we aim to add more features related to performance
to the object-centric process cube framework to facilitate the
process analysis0 0:5 1 1:5
1040100200
number of eventscreate the cube (sec)
a.1) the difference in time required for creating the cube
for different numbers of events: n object types = 4, and
nattributes = 40 0:5 1 1:5
10405001;0001;5002;000
number of eventsload the cube (msec)
a.2) the difference in time required for loading the cube
for different numbers of events: n object types = 4, and
nattributes = 4
1 1:5 2 2:5 3 3:5 40100200
number of object typescreate the cube (sec)
b.1) the difference in time required for creating the cube
for different numbers of object types: n events = 17500,
and n attributes = 41 1:5 2 2:5 3 3:5 45001;0001;5002;000
number of object typesload the cube (msec)
b.2) the difference in time required for loading the cube
for different numbers of object types: n events = 17500,
and n attributes = 4
1 1:5 2 2:5 3 3:5 4100150200250
number of attributescreate the cube (sec)
c.1) the difference in time required for creating the cube
for different numbers of attributes: n events= 17500 ,
and n object types = 4.1 1:5 2 2:5 3 3:5 45001;0001;5002;000
number of attributesload the cube (msec)
c.2) the difference in time required for loading the cube
for different numbers of attributes: n events = 17500,
and n object types = 4.
fig. 8 performance analysis of creating (diagrams with red dots)/loading (diagrams with blue dots) the cube for the proposed approach based on a) the
number of events b) the number of object types, and c) the number of attributesacknowledgments
we thank the alexander von humboldt (avh) stiftung
for supporting our research. funded by the deutsche
forschungsgemeinschaft (dfg, german research foundation)
under germany’s excellence strategy–exc-2023 internet of
production – 390621612.
references
[1] a. bolt and w. van der aalst, “multidimensional process mining using
process cubes,” in enterprise, business-process and information systems
modeling . springer, 2015, pp. 102–116.
[2] j. ribeiro and a. weijters, “event cube: another perspective on business
processes,” in international conferences on the move to meaningful
internet systems . springer, 2011, pp. 274–283.
[3] c. chen, x. yan, f. zhu, j. han, and s. y . philip, “graph olap: a
multi-dimensional framework for graph data analysis,” knowledge and
information systems , vol. 21, no. 1, pp. 41–63, 2009.
[4] w. van der aalst, “object-centric process mining: dealing with
divergence and convergence in event data,” in international conference
on software engineering and formal methods . springer, 2019, pp.
3–25.
[5] t. v ogelgesang and h.-j. appelrath, “multidimensional process mining:
a ﬂexible analysis approach for health services research,” in proceedings
of the joint edbt/icdt 2013 workshops , 2013, pp. 17–22.
[6] w. van der aalst, “process cubes: slicing, dicing, rolling up and drilling
down event data for process mining,” in asia-paciﬁc conference on
business process management . springer, 2013, pp. 1–22.
[7] r. andreswari and m. a. rasyidi, “olap cube processing of production
planning real-life event log: a case study,” in icoiese 2018 . atlantis
press, 2019.
[8] m. r. h. nik, w. van der aalst, and m. f. sani, “bipm: combining bi
and process mining.” in data , 2019, pp. 123–128.
[9] d. cohn and r. hull, “business artifacts: a data-centric approach to
modeling business operations and processes.” ieee data eng. bull. ,
vol. 32, no. 3, pp. 3–9, 2009.
[10] k. bhattacharya, c. gerede, r. hull, r. liu, and j. su, “towards formal
analysis of artifact-centric business process models,” in international
conference on business process management . springer, 2007, pp.
288–304.
[11] x. lu, m. nagelkerke, d. van de wiel, and d. fahland, “discovering
interacting artifacts from erp systems (extended version),” bpm
reports , vol. 1508, 2015.
[12] g. li, r. m. de carvalho, and w. van der aalst, “automatic discovery of
object-centric behavioral constraint models,” in international conference
on business information systems . springer, 2017, pp. 43–58.
[13] a. berti and w. van der aalst, “extracting multiple viewpoint models
from relational databases,” in data-driven process discovery and
analysis . springer, 2018, pp. 24–51.
[14] w. van der aalst and a. berti, “discovering object-centric petri nets,”
infundamenta informaticae , 2020.
[15] m. gupta and a. sureka, “process cube for software defect resolution,”
inasia-paciﬁc software engineering conference , vol. 1. ieee, 2014,
pp. 239–246.