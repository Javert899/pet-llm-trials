on the representational bias in process mining
w.m.p. van der aalst
department of mathematics and computer science
eindhoven university of technology, eindhoven, the netherlands
email: w.m.p.v.d.aalst@tue.nl, www: vdaalst.com
abstract ‚Äîprocess mining serves a bridge between data mining
and business process modeling. the goal is to extract process-
related knowledge from event data stored in information systems.
one of the most challenging process mining tasks is process
discovery , i.e., the automatic construction of process models from
raw event logs. today there are dozens of process discovery
techniques generating process models using different notations
(petri nets, epcs, bpmn, heuristic nets, etc.). this paper focuses
on the representational bias used by these techniques. we will
show that the choice of target model is very important for the
discovery process itself. the representational bias should not
be driven by the desired graphical representation but by the
characteristics of the underlying processes and process discovery
techniques. therefore, we analyze the role of the representational
bias in process mining.
i. i ntroduction
process mining is an emerging discipline providing com-
prehensive sets of tools to provide fact-based insights and
to support process improvements [1]. this new discipline
builds on process model-driven approaches and data mining.
however, process mining is much more than an amalgamation
of existing approaches. for example, existing data mining
techniques are too data-centric to provide a comprehensive
understanding of the end-to-end processes in an organization.
business intelligence (bi) tools tend to focus on simple
dashboards and reporting rather than clear-cut business process
insights. business process management (bpm) suites heavily
rely on experts modeling idealized to-be processes and do not
help the stakeholders to understand the as-is processes based
on factual data.
process mining provides a new means to improve processes
in a variety of application domains. there are two main drivers
for this new technology. on the one hand, more and more
events are being recorded thus providing detailed information
about the history of processes. some Ô¨Ågures illustrating the
growth of event data can be found in [2]. storage space
grew from 2.6 optimally compressed exabytes ( 2:61018
bytes) in 1986 to 295 compressed exabytes in 2007. note
that this includes paper, photos, hard-disks, cds, etc. in 2007,
94 percent of all information storage capacity on earth was
digital. the other 6 percent resided in books, magazines and
other non-digital formats. this is in stark contrast with 1986
when only 0.8 percent of all information storage capacity
was digital. these numbers illustrate the exponential growth
of data. in modern organizations many events are recorded
and this will only increase further, thus enabling process
mining techniques. on the other hand, organizations haveproblems dealing with the omnipresence of event data. most
organizations diagnose problems based on Ô¨Åction (powerpoint
slides, visio diagrams, etc.) rather than facts (event data).
therefore, it is vital to turn the massive amounts of event
data into relevant knowledge and insights.
event logs can be used to conduct three types of process
mining: (a) discovery, (b) conformance, and (c) enhancement
[1]. the goal of discovery is to extract models from raw
event data in information systems (transaction logs, data bases,
audit trails, etc.). a discovery technique takes an event log
and produces a model without using any a-priori information.
an example is the -algorithm [3] that takes an event log
and produces a petri net explaining the behavior recorded in
the log. the second type of process mining is conformance .
here, an existing process model is compared with an event
log of the same process. conformance checking can be used
to check whether reality, as recorded in the log, conforms
to the model and vice versa. techniques as presented in
[4] may be used to detect, locate and explain deviations,
and to measure the severity of these deviations. the third
type of process mining is enhancement . here, the idea is to
extend or improve an existing process model using information
about the actual process recorded in some event log. whereas
conformance checking measures the alignment between model
and reality, this third type of process mining aims at changing
or extending the a-priori model, e.g., adding a new perspective
to the process model by cross-correlating it with the log. an
example is the extension of a process model with performance
data. for instance, by combining the timestamps in the event
log with the discovered process model it is possible to show
bottlenecks, service levels, throughput times, and frequencies.
process mining is not restricted to the control-Ô¨Çow per-
spective and may include other perspectives such as the
resource/organizational dimension, the time/performance di-
mension, and the object/data dimension. however, in this
paper we focus on the most challenging process mining
task: process discovery . although this task highly depends on
therepresentational bias chosen, lion‚Äôs share of attention is
devoted to possible mining algorithms rather than selecting
a suitable target representation. this paper demonstrates that
the representational bias plays a crucial role when discovering
processes.
ii. p rocess discovery : a c hallenging problem
in order to explain the role of the representational bias in
process discovery, we start off with an example. the examplea
start register 
requestbexamine 
thoroughly
cexamine 
casuallydcheck
ticket
decidepay 
compensation
reject 
requestreinitiate 
request eg
hfenda
startregister 
requestc
examine 
casuallyd
check
ticketdecide reject 
requeste h
end
n3 : fitness = +, precision = -, generalization = +, simplicity = +n2 : fitness = -, precision = +, generalization = -, simplicity = +a
start register 
requestb
examine 
thoroughly
c
examine 
casually
d
check ticketdecidepay 
compensation
reject 
request
reinitiate 
requesteg
h
fend
n1 : fitness = +, precision = +, generalization = +, simplicity = +a
start register 
requestc
examine 
casuallyd
check
ticketdecide reject 
requeste h
end
n4 : fitness = +, precision = +, generalization = -, simplicity = -a
register 
requestd
examine 
casuallyc
check
ticketdecide reject 
requeste ha c
examine 
casuallyd
check
ticketdecidee ga d
examine 
casuallyc
check
ticketdecidee g
register 
requestregister 
requestpay 
compensation
pay 
compensation
a
register 
requestb d
check
ticketdecide reject 
requeste ha
register 
requestd b
check
ticketdecide reject 
requeste ha b d
check
ticketdecidee g
register 
requestpay 
compensationexamine 
thoroughly
examine 
thoroughly
examine 
thoroughly‚Ä¶ (all 21 variants seen in the log)fig. 1. four alternative process models for the same log
is used to discuss quality criteria and challenges.
a. discovering process models: an example
table i shows an abstraction of some event log. the log
contains information about 1391 cases (process instances).
each case corresponds to a request for compensation. we use
single letters to describe activities, e.g., a=register request .
455 cases followed the path ha;c;d;e;hi, 191 cases followed
the pathha;b;d;e;gi, etc. the event log contains in total
7539 events. note that table i only shows activity names.
in real-life event logs, events have timestamps, associated
resources (e.g. the person executing the activity), transactional
information (e.g., start, complete, or suspend), data attributes
(e.g., amount or type of customer). since we focus on control-
Ô¨Çow discovery, we abstract from such additional information.
figure 1 shows four models that could be discovered
using existing process mining techniques. if we apply the -
algorithm [3] to event log l, we obtain model n1shown in
fig. 1.n2is a model that only allows for cases having a trace
ha;c;d;e;hi, i.e., only the most frequent behavior is captured.
n3shows a variant of the the so-called ‚ÄúÔ¨Çower model‚Äù: any
trace is allowed as long as it starts with aand ends with g
orh.n4is the model that simply enumerates the 21 different
traces seen in the event log.
figure 1 illustrates that different process mining algorithms
may produce different results. each model is represented by
aworkÔ¨Çow net (wf-net). wf-nets are a subclass of petri nets
tailored towards the modeling of business processes. each
wf-net has a source place ( start) and a sink place ( end).
process instances ‚ÄúÔ¨Çow‚Äù from start toend. intuitively, modeltable i
event logl:a=register request ,b=examine thoroughly ,c=examine
casually ,d=check ticket ,e=decide ,f=reinitiate request ,g=pay
compensation ,andh=reject request
frequency reference trace
455 1 ha;c;d;e;h i
191 2 ha;b;d;e;g i
177 3 ha;d;c;e;h i
144 4 ha;b;d;e;h i
111 5 ha;c;d;e;g i
82 6 ha;d;c;e;g i
56 7 ha;d;b;e;h i
47 8 ha;c;d;e;f;d;b;e;h i
38 9 ha;d;b;e;g i
3310 ha;c;d;e;f;b;d;e;h i
1411 ha;c;d;e;f;b;d;e;g i
1112 ha;c;d;e;f;d;b;e;g i
913 ha;d;c;e;f;c;d;e;h i
814 ha;d;c;e;f;d;b;e;h i
515 ha;d;c;e;f;b;d;e;g i
316 ha;c;d;e;f;b;d;e;f;d;b;e;g i
217 ha;d;c;e;f;d;b;e;g i
218 ha;d;c;e;f;b;d;e;f;b;d;e;g i
119 ha;d;c;e;f;d;b;e;f;b;d;e;h i
120 ha;d;b;e;f;b;d;e;f;d;b;e;g i
121 ha;d;c;e;f;d;b;e;f;c;d;e;f;d;b;e;g i
n1shown in fig. 1 seems to capture the behavior seen in the
event log in table i well.
b. quality criteria for process discovery
determining the quality of a process mining result is difÔ¨Å-
cult and is characterized by many dimensions. as discussed
in [1], event logs may be incomplete and contain noise . noise
refers to rare and infrequent behavior not representative for the
typical behavior of the process. incompleteness refers to thefitness
precision generalizationsimplicity‚Äúable to replay event log‚Äù ‚Äúoccam‚Äôs razor‚Äù
‚Äúnot overfitting the log‚Äù ‚Äúnot underfitting the log‚Äùprocess 
discoveryfig. 2. balancing the four quality dimensions: Ô¨Åtness ,simplicity ,precision ,
andgeneralization
problem that one typically sees only a fraction of all possible
behaviors. suppose that one would only have seen 1000 of the
1391 cases shown in table i; it would be likely that some of
the 21 traces would not appear in the event log. this does not
mean that these trace are impossible. typically, we only see
positive examples and no negative examples.
process mining algorithms need to be able to deal with
noise and incompleteness. generally, we use four main quality
dimensions for judging the quality of the discovered process
model: Ô¨Åtness ,simplicity ,precision , and generalization . fig-
ure 2 gives a high-level characterization of these four quality
dimensions.
a model with good Ô¨Åtness allows for the behavior seen in
the event log. a model has a perfect Ô¨Åtness if all traces in the
log can be replayed by the model from beginning to end. there
are various ways of deÔ¨Åning Ô¨Åtness [1]. it can be deÔ¨Åned at
the case level, e.g., the fraction of traces in the log that can
be fully replayed. it can also be deÔ¨Åned at the event level,
e.g., the fraction of events in the log that are indeed possible
according to the model. wf-nets n1,n3, andn4have a good
Ô¨Åtness, i.e., in each of these models it is possible to replay all
of the 1391 cases shown in table i. wf-net n2has a poor
Ô¨Åtness (both at the case and event level), because most of the
cases/events cannot be replayed.
the simplicity dimension refers to occam‚Äôs razor ; the
simplest model that can explain the behavior seen in the log, is
the best model. the complexity of the model could be deÔ¨Åned
by the number of nodes and arcs in the underlying graph. also
more sophisticated metrics can be used, e.g., metrics that take
the ‚Äústructuredness‚Äù or ‚Äúentropy‚Äù of the model into account.
clearly, wf-nets n1,n2, andn3are simpler than wf-net
n4.
fitness and simplicity alone are not adequate. this is
illustrated by wf-net n3. the ‚ÄúÔ¨Çower model‚Äù allows for any
sequence starting with aand ending with gorh. the resulting
model is simple and has a perfect Ô¨Åtness. based on the Ô¨Årst
two quality dimensions this model is acceptable. this shows
that the Ô¨Åtness and simplicity criteria are necessary, but not
sufÔ¨Åcient.
if the ‚ÄúÔ¨Çower model‚Äù n3is on one end of the spectrum,
then the ‚Äúenumerating model‚Äù n4is on the other end of the
spectrum. the enumerating model of a log simply lists all the
sequences possible, i.e., there is a separate sequential process
fragment for each trace in the model. at the start there is onebig xor split selecting one of the sequences and at the end
these sequences are joined using one big xor join.
extreme models such as the ‚ÄúÔ¨Çower model‚Äù (anything
is possible) and the ‚Äúenumerating model‚Äù (only the log is
possible) show the need for two additional dimensions. a
model is precise if it does not allow for ‚Äútoo much‚Äù behavior.
clearly, the ‚ÄúÔ¨Çower model‚Äù lacks precision. a model that is
not precise is ‚ÄúunderÔ¨Åtting‚Äù. underÔ¨Åtting is the problem that
the model over-generalizes the example behavior in the log,
i.e., the model allows for behaviors very different from what
was seen in the log.
a model should generalize and not restrict behavior to the
examples seen in the log (like the ‚Äúenumerating model‚Äù n4).
a model that does not generalize is ‚ÄúoverÔ¨Åtting‚Äù. overÔ¨Åtting
is the problem that a very speciÔ¨Åc model is generated whereas
it is obvious that the log only holds example behavior, i.e., the
model explains the particular sample log, but a next sample
log of the same process may produce a completely different
process model.
based on the four criteria it is obvious that wf-net n1is
the best model for the event log in table i
c. what makes process discovery difÔ¨Åcult?
figure 3 illustrates the problem of balancing three of the
four quality criteria: Ô¨Åtness ,precision , and generalization .
(the fourth criterion, simplicity , is not directly related to the
alignment of traces and model.) each black dot represents a
trace (i.e., a sequence of activities) corresponding to one or
more cases in the event log. (recall that multiple cases may
have the same corresponding trace.) an event log typically
contains only a fraction of the possible behavior, i.e., the dots
should only be seen as samples of a much larger set of possible
behaviors. moreover, one is typically primarily interested in
frequent behavior and not in all possible behavior, i.e., one
wants to abstract from noise and therefore not all dots need
to be relevant for the process model to be constructed.
recall that we deÔ¨Åned noise as infrequent or exceptional
behavior. it is interesting to analyze such noisy behaviors,
however, when constructing the overall process model, the
inclusion of infrequent or exceptional behavior leads to com-
plex diagrams. moreover, it is typically impossible to make
reliable statements about noisy behavior given the small set of
observations. figure 3 distinguishes between frequent behavior
(solid rectangle with rounded corners) and all behavior (dashed
rectangle), i.e., normal and noisy behavior. the difference
between normal and noisy behavior is a matter of deÔ¨Ånition,
e.g., normal behavior could be deÔ¨Åned as the 80% most
frequently occurring traces.
let us assume that the two rectangles with rounded corners
can be determined by observing the process inÔ¨Ånitely long
while the process is in steady-state (i.e., no concept drift).
based on these assumptions, fig. 3 sketches four discov-
ered models depicted by shaded rectangles. these discovered
models are based on the example traces in the log, i.e., the
black dots. the ‚Äúideal process model‚Äù allows for the behavior
coinciding with the frequent behavior seen when the processtrace in 
event logfrequent 
behaviorall behavior
(including noise)target model
non-fitting model overfitting model
underfitting modelfig. 3. overview of the challenges that process discovery techniques need
to address
would be observed ad inÔ¨Ånitum. the ‚Äúnon-Ô¨Åtting model‚Äù in
fig. 3 is unable to characterize the process well as it is not even
able to capture the examples in the event log used to learn the
model. the ‚ÄúoverÔ¨Åtting model‚Äù does not generalize and only
says something about the examples in the current event log.
new examples will most likely not Ô¨Åt into this model. the
‚ÄúunderÔ¨Åtting model‚Äù lacks precision and allows for behavior
that would never be seen if the process would be observed ad
inÔ¨Ånitum.
figure 3 illustrates the challenges process discovery tech-
niques need to address: how to extract a simple target model
that is not underÔ¨Åtting, overÔ¨Åtting, nor non-Ô¨Åtting?
iii. r epresentational bias
figure 1 shows four example models that may be discovered
based on the event log in table i. note that these are only
examples, e.g., the -algorithm will generate wf-net n1. the
-algorithm [3] assumes that the underlying process can be
adequately described by a wf-net . any discovery technique
requires such a representational bias . the notion of a represen-
tational bias can be (metaphorically) illustrated using fig. 3.
if we assume upfront that the target model is a ‚Äúcircle‚Äù or
a ‚Äútriangle‚Äù while the frequent behavior forms a ‚Äúrectangle‚Äù,
then it would be difÔ¨Åcult to Ô¨Ånd a suitable process model. this
section will show that this representational bias is of crucial
importance. whereas most people focus on understandability
of the representation, we emphasize the importance of the
implicit search space implied by the representational bias.
a b
start end p1cœÑ
p2(a)
a b
start end p1c
p2(b)a
a b
start end p1c
p2(c)fig. 4. three wf-nets for the event log l1= [ha;b;c i20;ha;ci30]
a. example: the representational bias of the -algorithm
the-algorithm assumes that the underlying process can be
described by a wf-net where each transition bears a unique
and visible label. in such a wf-net it is not possible to
have two transitions with the same label or transitions whose
occurrences remain invisible (i.e., it is not possible to have a
so-called ‚Äúsilent transition‚Äù ). these assumptions may seem
harmless, but, as shown next, have a noticeable effect on the
class of process models that can be discovered.
let us consider, for example, event log l1=
[ha;b;ci20;ha;ci30]. figure 4(a) describes the underlying pro-
cess well: activity bcan be skipped by executing the 
transition. (note that the transition corresponds to a so-called
‚Äúsilent‚Äù step of the process, i.e., it is not recorded.) figure 4(b)
shows an alternative wf-net using two atransitions and no 
transition. these two models are trace equivalent. however, it
is not possible to construct a wf-net without duplicate and 
labels that is trace equivalent to these two models. figure 4(c)
shows the model produced by the -algorithm; because of the
representational bias, the algorithm is destined to fail for this
log. the wf-net in fig. 4(c) can only reproduce trace ha;b;ci
and notha;ci.
event logsl1illustrates the effect a representational bias
can have. from the viewpoint of the -algorithm, the choice
to not consider duplicate labels and transitions is sensible. 
transitions are not recorded in the log and hence any algorithm
will have problems reconstructing their behavior. multiple
transitions with the same label are undistinguishable in the
event log. therefore, any algorithm will have problems asso-
ciating the corresponding events to one of these transitions.
figure 5 shows another example illustrating the effect a
representational bias can have. the wf-net in fig. 5(a) has
a so-called ‚Äúnon-free-choice construct‚Äù. the concept of free-
choice nets is well-deÔ¨Åned in the petri net domain [5]. a petri
net is free choice if any two transitions sharing an input place
have identical input sets. transitions dandeshare an input(a)
(b)
(c)bca
ed p1
p2
bca
ed
a
b ed
cfig. 5. two wf-nets and one bpmn model for the event logs
l2= [ha;c;d i20;hb;c;e i30]andl3= [ha;c;d i20;hb;c;e i30;ha;c;e i1;
hb;c;d i2]
place, but have different input sets. for example, place p1is an
input place of d, but not of e. placesp1andp2‚Äúcontrol‚Äù the
choice following c. therefore, the wf-net in fig. 5(a) allows
for only two possible traces: ha;c;diandhb;c;ei.
the wf-net in fig. 5(b) is free-choice net because the
choice between dandeis no longer controlled by p1and
p2. now there are four possible traces. for example, ha;c;ei
is also possible. fig. 5(c) shows the corresponding bpmn
notation. the bpmn notation does not allow for the ‚Äúnon-free-
choice construct‚Äù shown in the Ô¨Årst wf-net. most process min-
ing algorithms do notallow for ‚Äúnon-free-choice constructs‚Äù
because of their representational bias.
now consider two event logs: l2= [ha;c;di20;hb;c;ei30]
andl3= [ha;c;di20;hb;c;ei30;ha;c;ei1;hb;c;di2].
the wf-net in fig. 5(b) and the bpmn model in fig. 5(c)
can replay both logs, i.e., Ô¨Åtness is good with respect to l2
andl3. the wf-net in fig. 5(a) can replay l2but notl3.
however, the Ô¨Åtness with respect to l3is reasonable as 50
out of 53 cases can be replayed. one could argue that the
wf-net in fig. 5(b) and the bpmn model in fig. 5(c) are
underÔ¨Åtting both logs. in fact, for l2, the non-free-choice
wf-net in fig. 5(a) is clearly the best model. however, many
process modeling languages are inherently free-choice, thus
making it impossible to discover p1andp2.
the non-free-choice construct is just one of many constructs
that existing process mining algorithms have problems with.
other examples are arbitrary nested loops, cancelation, un-
balanced splits and joins, and partial synchronization. in this
context it is important to observe that process discovery is,
by deÔ¨Ånition, restricted by the expressive power of the target
language , i.e., the representational bias.
b. typical representational limitations
the well-know workÔ¨Çow patterns [6], [7] serve as a good
basis for discussing the limitations imposed by the represen-
tational bias of a process mining algorithm. the workÔ¨Çowpatterns initiative was established with the aim of delineat-
ing the fundamental requirements that arise during business
process modeling on a recurring basis and describe them in
an imperative way. the patterns developed in this context help
to discuss and identify the representational bias of a language.
here, we do not discuss the more than 40 control-Ô¨Çow
patterns [7]. instead, we mention some typical representational
limitations imposed by process discovery algorithms:
inability to represent concurrency. low-level mod-
els, such as markov models, Ô¨Çow charts, and transition
systems, do not allow for the modeling of concurrency
other than enumerating all possible interleavings. to
model a process with 10 parallel activities, a low-level
model will need to enumerate all 210= 1024 states and
10210 1= 5120 transitions. higher level models (like
petri nets and bpmn) only need to depict 10 activities
and210 = 20 ‚Äúlocal‚Äù states (states before and after
each activity).
inability to represent silent actions. in some notations,
it is impossible to model silent actions like the skipping
of an activity. although such events are not explicitly
recorded in the event log, they need to be reÔ¨Çected in the
model (as illustrated by fig. 4).
inability to represent duplicate actions. in many no-
tations there cannot be two activities having the same
label. if the same activity appears in different parts of the
process, but these different instances of the same activity
cannot be distinguished in the event log, then most
algorithms will assume a single activity thus creating
causal dependencies (e.g., non-existing loops) that do not
exist in the actual process.
inability to model or-splits/joins. higher level nota-
tions such as yawl, bpmn, epcs, causal nets, etc.
allow for the modeling of or-splits and or-joins. if the
representational bias of a discovery algorithm does not
allow for or-splits and or-joins, then the discovered
model may be more complex or the algorithm is unable
to Ô¨Ånd a suitable model.
inability to represent non-free-choice behavior. most
algorithms do not allow for non-free-choice constructs,
i.e., constructs where concurrency and choice meet. non-
free-choice constructs can be used to represent non-local
dependencies as is illustrated by the wf-net in fig. 5(a).
many notations do not allow for such constructs.
inability to represent hierarchy. most process discovery
algorithms work on ‚ÄúÔ¨Çat‚Äù models. a notable exception
is the fuzzy miner [8] that extracts hierarchical mod-
els. activities that have a lower frequency but that are
closely related to other low frequent activities are grouped
into subprocesses. the representational bias determines
whether, in principle, hierarchical models can be discov-
ered or not.
c. improving the representational bias
the representational bias helps limiting the search space
of possible candidate models. this can make discovery algo-rithms more efÔ¨Åcient. moreover, it can also be used to give
preference to particular types of models.
it seems that existing approaches can beneÔ¨Åt from selecting
a more suitable representational bias. most process discovery
algorithms allow for models that have all kinds of obvious
problems, e.g., deadlocks, livelocks, inability to terminate,
improper termination, and dead activities. the soundness
property [9] deÔ¨Åned for wf-nets and other notations is a
domain-independent requirement. it is desirable to have a
representational bias that limits the search space to only
sound models (i.e., free of deadlocks and other anomalies).
unfortunately, this is not the case for most of the existing
approaches. for instance, the -algorithm may yield models
that have deadlocks or livelocks. genetic process mining
algorithms tend continuously explore ‚Äúbad candidates‚Äù [1].
therefore, one would like to have a representational bias en-
forcing soundness. unfortunately, currently, this can typically
only be achieved by severely limiting the expressiveness of the
modeling language or by using more time-consuming anal-
ysis techniques. consider, for example, the so-called block-
structured process models. a model is block-structured if
it satisÔ¨Åes a number of syntactical requirements such that
soundness is guaranteed by these requirements. see [10]‚Äì[12]
for pointers to various deÔ¨Ånitions. most of these deÔ¨Ånitions
require a one-to-one correspondence between splits and joins,
e.g., concurrent paths created by an and-split need to be
synchronized by the corresponding and-join. since many
real-life processes are not block structured, one should be
careful to not limit the expressiveness too much. note that
techniques that turn unstructured models into block-structured
process models tend to introduce many duplicate or silent
activities. therefore, such transformations do not alleviate the
core problems.
soundness is difÔ¨Åcult to incorporate because it is related
to behavior rather than structure. structural requirements can
be incorporated more easily. as an example, we refer to
region-based process mining techniques [13]‚Äì[16]. state-based
regions can be used to construct a petri net from a transition
system [14]. the transition system can be extracted from an
event log using different abstraction mechanisms (see [13] for
an overview). language-based regions can be used to construct
a petri net from a preÔ¨Åx-closed language. synthesis approaches
using language-based regions can be applied directly to event
logs [15], [16].
in [14] it is shown how additional requirements can be
imposed on the petri net constructed based on the transition
system. for example, one can make sure that the resulting
model is free-choice or without self-loops. the technique
described in [14] uses label-splitting and in [13] it is shown
how this can be used in the context of process mining.
as shown in [16], similar requirements can be imposed on
the resulting models when using language-based regions. the
representational bias can be modiÔ¨Åed to enforce certain struc-
tural properties, such as marked graphs, state machines, pure
nets, elementary nets, and free-choice nets. moreover, proper
termination and other desirable properties can be encoded inthe ilp formulation of the problem [16].
iv. c onclusion
in this paper, we emphasized the importance of selecting the
right representational bias when discovering process models
from event logs. the representational bias should be based
on essential properties of a process model (e.g., soundness
[9]), and not driven by the desired graphical presentation.
improving the representational bias will improve both the
quality of the results and the efÔ¨Åciency of the algorithms.
acknowledgment
the author would like to thank the members of the ieee
task force on process mining (www.win.tue.nl/ieeetfpm/)
and all that contributed to the development of prom (www.
processmining.org).
references
[1] w. van der aalst, process mining: discovery, conformance and en-
hancement of business processes . springer-verlag, berlin, 2011.
[2] m. hilbert and p. lopez, ‚Äúthe world‚Äôs technological capacity to store,
communicate, and compute information,‚Äù science , 2011.
[3] w. van der aalst, a. weijters, and l. maruster, ‚ÄúworkÔ¨Çow mining:
discovering process models from event logs,‚Äù ieee transactions on
knowledge and data engineering , vol. 16, no. 9, pp. 1128‚Äì1142, 2004.
[4] a. rozinat and w. van der aalst, ‚Äúconformance checking of processes
based on monitoring real behavior,‚Äù information systems , vol. 33,
no. 1, pp. 64‚Äì95, 2008.
[5] j. desel and j. esparza, free choice petri nets , cambridge tracts in
theoretical computer science. cambridge university press, cam-
bridge, uk, 1995, vol. 40.
[6] w. van der aalst, a. ter hofstede, b. kiepuszewski, and a. barros,
‚ÄúworkÔ¨Çow patterns,‚Äù distributed and parallel databases , vol. 14, no. 1,
pp. 5‚Äì51, 2003.
[7] ‚ÄúworkÔ¨Çow patterns home page,‚Äù http://www.workÔ¨Çowpatterns.com.
[8] c. g ¬®unther and w. van der aalst, ‚Äúfuzzy mining: adaptive process
simpliÔ¨Åcation based on multi-perspective metrics,‚Äù in international
conference on business process management (bpm 2007) , lecture
notes in computer science, g. alonso, p. dadam, and m. rosemann,
eds., vol. 4714. springer-verlag, berlin, 2007, pp. 328‚Äì343.
[9] w. van der aalst, k. van hee, a. ter hofstede, n. sidorova, h. verbeek,
m. v oorhoeve, and m. wynn, ‚Äúsoundness of workÔ¨Çow nets: classiÔ¨Åca-
tion, decidability, and analysis,‚Äù formal aspects of computing , 2011,
dx.doi.org/10.1007/s00165-010-0161-4.
[10] m. dumas, w. van der aalst, and a. ter hofstede, process-aware
information systems: bridging people and software through process
technology . wiley & sons, 2005.
[11] a. ter hofstede, w. van der aalst, m. adams, and n. russell, modern
business process automation: yawl and its support environment .
springer-verlag, berlin, 2010.
[12] m. weske, business process management: concepts, languages, archi-
tectures . springer-verlag, berlin, 2007.
[13] w. van der aalst, v . rubin, h. verbeek, b. van dongen, e. kindler,
and c. g ¬®unther, ‚Äúprocess mining: a two-step approach to balance
between underÔ¨Åtting and overÔ¨Åtting,‚Äù software and systems modeling ,
vol. 9, no. 1, pp. 87‚Äì111, 2010.
[14] j. cortadella, m. kishinevsky, l. lavagno, and a. yakovlev, ‚Äúderiving
petri nets from finite transition systems,‚Äù ieee transactions on
computers , vol. 47, no. 8, pp. 859‚Äì882, aug. 1998.
[15] r. bergenthum, j. desel, r. lorenz, and s. mauser, ‚Äúprocess mining
based on regions of languages,‚Äù in international conference on
business process management (bpm 2007) , lecture notes in computer
science, g. alonso, p. dadam, and m. rosemann, eds., vol. 4714.
springer-verlag, berlin, 2007, pp. 375‚Äì383.
[16] j. van der werf, b. van dongen, c. hurkens, and a. serebrenik,
‚Äúprocess discovery using integer linear programming,‚Äù fundamenta
informaticae , vol. 94, pp. 387‚Äì412, 2010.