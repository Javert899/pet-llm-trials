1
turning event logs into process movies:
animating what has really happened
massimiliano de leoni, suriadi suriadi, arthur h. m. ter hofstede, wil m. p . van der aalst
abstract ‚Äîtoday‚Äôs information systems log vast amount of data which contains information about the actual execution of business
processes. the analysis of this data can provide a solid starting point for business process improvement. this is the realm of process
mining, an area which has provided a repertoire of many analysis techniques. despite the impressive capabilities of existing process
mining algorithms, dealing with the abundance of data recorded by contemporary systems and devices remains a challenge. of
particular importance is the capability to guide the meaningful interpretation of this ‚Äúocean‚Äù of data by process analysts. to this end,
insights from the Ô¨Åeld of visual analytics can be leveraged. an approach is proposed where process states are reconstructed from
event logs and visualised in succession, leading to an animated history of a process. this approach is customisable in how a process
state, partially deÔ¨Åned through a collection of activity instances, is visualised: one can select a map and specify a projection of activity
instances on this map based on their properties. in this paper an implementation of the proposal is described for the open-source
process-mining framework prom along with reporting an evaluation with one of australia‚Äôs largest insurance companies: suncorp.
index terms ‚Äîbusiness process mining, visual analytics, event-log animation, process visualisation
f
1 i ntroduction
as a result of increased automation and storage capacity,
more and more data is recorded by today‚Äôs software
systems and devices. the mckinsey global institute
(mgi) estimated that enterprises globally stored more
than 7 exabytes of new data on disk drives in 2010,
while consumers stored more than 6 exabytes of new
data on devices such as pcs and notebooks [1]. the
amount of data recorded in various domains has been
growing exponentially, thereby following moore‚Äôs law.
while the availability of large amounts of data is an
enabler for various forms of analysis, the sheer quantity
and diversity of this data creates new challenges [2].
in the Ô¨Åeld of business process management (bpm),
so-called process-aware information systems record in-
formation about the execution of business processes in
event logs. analysing such event logs has been the
driver of the area of process mining (see e.g. [3]), which
emerged a little over a decade ago. in this relatively
short timespan, this discipline has proven to be capable
of providing deep insight into process-related problems
that contemporary enterprises face. through the appli-
cation of process mining, organisations can discover the
processes as they are conducted in reality, check whether
certain practices and regulations were really followed
and gain insight into bottlenecks, resource utilisation,
and other performance-related aspects of processes.
despite the fact that the Ô¨Åeld of process mining has
shown itself to be a valuable addition to the bpm
landscape, dealing with large collections of data still
remains a challenge. in fact, although automatic tech-
m. de leoni and w. m. p . van der aalst are with eindhoven university
of technology. m. de leoni is also with university of padua.
s. suriadi and a. h. m. ter hofstede are with queensland university of
technologyniques are certainly needed, process analysts need to be
guided with regards to where to focus their attention
in this ‚Äúocean of data‚Äù, which automatic techniques to
choose for further analysis and how to Ô¨Åne-tune these
techniques. to achieve this, one can leverage from the
Ô¨Åeld of visual analytics , a term coined by jim thomas
in [4], which ‚Äúcombines automated analysis techniques with
interactive visualizations for an effective understanding, rea-
soning and decision making on the basis of very large and
complex data sets‚Äù [5].
a starting point of this paper is the belief that the ap-
plication of techniques from the Ô¨Åeld of visual analytics
can play a signiÔ¨Åcant role in overcoming the challenges
related to the analyses of large collections of (process)
data.
in [6] a map metaphor was used to aid people in the
selection of activities to perform. a ‚Äúmap‚Äù could, e.g.,
be a geographical map, a timeline, or an organisational
chart, and activity instances are positioned on this map
according to their properties. in addition, the colour of
a dot representing an activity instance is determined by
its status or distance , e.g., how close the activity is to its
deadline, how long it is being executed. the approach
focussed on showing the current state of the information
system at run-time. this approach can easily be extended
to a-posteriori analysis: using the information stored in
event logs, it is possible to replay the history and build
the states the system went through. hence, for each
‚Äúmap‚Äù, a sequence of different ‚Äúphotographs‚Äù can be
built, showing how activities were projected on the map
in each of these states. if, for each map, the constructed
sequence of photographs is played in succession, one
obtains a different ‚Äúprocess movie‚Äù. these movies or
animations (one per map) provide analysts and domain
experts with a helicopter view of the past execution
history seen from different perspectives.2
playcbuttontimelinecand
timecslider
acclockcshowingctheccurrentc
timestampcofcthecmoviesliderctocadjust
moviecspeedtabsc-canimationcmoviec
chooser
aggregatedcdotc-csizecofcthe
dotciscpositivelyccorrelatedcwithc
thecnumbercofcactivitycinstances
aggregated.
distributioncof
variablescpercdot
(mousecover)listcofcactivitycinstances
thatcarecnotctocbec
positionedconcthecmap.
listcofcactivitycinstances
cthatccannotcbecplacedconc
thecmap.
colourclegend
fig. 1. a screenshot of a process movie referring to the
log data of a process enacted in an australia insurance
company to deal with claims. activity instances are pro-
jected onto the australian state of the claimants.
an example of such a movie is shown in figure 1
where the event log refers to the execution of process in-
stances to handle insurance claims of an insurance com-
pany in australia. the process map is of a geographic
type: each activity instance is projected onto the map as
a dot in the time frame when it was being executed as
recorded in the log. the dot is positioned on the aus-
tralia state of the claimant. at any given point in time,
the size of the dots on the map represents the number of
activity instances which are projected on to that position.
the instances can have different characteristics (e.g., in
the Ô¨Ågure, relative to the claim‚Äôs type). therefore, the ar-
eas of dots are also sliced according to the percentage of
instances with given characteristics, and different colours
are assigned to the slices. completed activity instances
are no longer shown on the map. thus, figure 1 is the
‚Äúphotograph‚Äù of the activity instances at a particular
point in time as shown in the timestamp box (i.e. 23 dec
2011 14:18:05). the time slider at the bottom of the Ô¨Ågure
allows users to go back or forth to a certain point in time
to view the corresponding photograph. alternatively, the
photographs can be played in a continuous sequence by
activating the ‚Äôplay‚Äô button.
in [7] an initial framework was proposed that exploits
the map metaphor to show a summary of an event log in
the form of an animation. the corresponding implemen-
tation was realised as a plug-in for the prom open-source
process mining framework (www.processmining.org). a
set of experiments was conducted with some stakehold-
ers from a dutch municipality to obtain some quick
initial feedback [8]. as a result of the feedback, the
framework was adjusted to cope with the problems that
were identiÔ¨Åed. in fact, signiÔ¨Åcant extensions and mod-
iÔ¨Åcations of the initial framework and of the accordant
implementation were needed. this paper reports on the
resulting framework, its corresponding prom plug-in,and a new validation effort, this time with subjects from
suncorp, one of australia‚Äôs largest insurance companies.
this evaluation is concerned with determining whether
the map metaphor is understood and can help to provide
meaningful insights.
the paper is organised as follows. section 2 positions
our work with respect to the literature, highlighting the
limitations that exist in relevant state-of-the-art work.
section 3 discusses the adjusted framework. then, sec-
tion 4 provides some details of the implementation of
this framework realised as a plug-in of the prom envi-
ronment. section 5 describes a case study illustrating the
approach in the context of insurance claims processing
for homes in suncorp. section 6 starts with reporting
the feedback from stakeholders of a dutch municipality
followed by the changes that were required to cope with
the problems pointed out. then, the section describes the
evaluation of the adapted framework done in collabora-
tion with suncorp. finally, section 7 concludes the paper
by summarising the results obtained and identifying
future directions of work.
2 r elated work
the approach presented in this paper builds on two
emerging disciplines: process mining [3] and visual analyt-
ics[5], [4]. as a general comment, one can observe that
while many techniques have been developed for process
mining, data mining and statistical analysis, they often
do not, or insufÔ¨Åciently, take visualisation aspects into
account. conversely, one can observe that the research
community in the area of information visualisation (see
e.g. [9] or [10]) has not focussed on process-related
aspects.
there exists a number of research works (e.g., [11],
[12], [13]) on aspects related to visualisation in the Ô¨Åeld
of business process management. these works employ
different metaphors and also mash-up approaches to
represent the state of a process at run-time. the approach
described in [6] elaborates on these ideas and captures a
process state as a map with a colouring scheme used for
the activities representing their status or their character-
istics. this approach though is aimed at providing run-
time support for activity selection and not at providing
support for the analysis of the history of a process.
the term ‚Äúvisual analytics‚Äù was coined in [4]. this ref-
erence reviews the early work in this Ô¨Åeld. a comprehen-
sive more recent reference is provided in [5]. examples of
recent signiÔ¨Åcant research in the area of visual analytics
can be found in document analysis [14], Ô¨Ånancial analy-
sis [15], [16] and geo-spatial object analysis [17]. in [18]
pioneering work is reported where visual analytics is
applied to the Ô¨Åeld of data mining. another interesting
work is [19] which concerns displaying multiple time
series without aggregation. the above body of work uses
static representations for capturing time dependencies,
i.e. images that summarise the analysis of time-oriented
data. when larger data sets come into play, static repre-
sentations show their limits as they require large screens3
to represent the time axis. conversely, dynamic represen-
tations (i.e., using the physical time) show their power
when the focal point is to analyse the data over time. a
detailed up-to-date survey is reported in [20], where it is
clear that there is no signiÔ¨Åcant research work that uses
dynamic representations: ‚Äúa frequent goal is to integrate
data from multiple time stemps in a single image‚Äù . often,
time abstraction is used for this purpose. unfortunately,
to visualise process-related data, temporal aspects are of
crucial importance as they are related to concurrency and
causality of the activities being performed. therefore,
abstracting time would relegate the time dimension to
second-class status.
most of the work in the visual analytics area is tailored
to a particular application or to a particular visualisa-
tion. this is also conÔ¨Årmed by [21]: ‚Äùto our knowledge,
there exists no visualisation framework that [. . . ] provides a
broader selection of possible representations. we think that
an open framework fed with pluggable visual and analytical
components for analyzing time-oriented data is useful. such
a framework will be able to support multiple analysis tasks
and data characteristics, which is a goal of visual analytics‚Äù .
in fact, the conÔ¨Åguration of different maps allow one to
plug different representations, thus supporting multiple
views.
to our knowledge, only the approach of the so-called
fuzzy animations [22] can be considered to be process-
aware. it focuses on providing a graphical user interface
where the past states extracted from the event log are
projected onto a process model which is automatically
derived from the events in the log. it is a valuable ap-
proach though quite speciÔ¨Åc: it only focuses on control-
Ô¨Çow aspects and visualisation is limited to process
graphs.
3 t heframework
in this section, we deÔ¨Åne a formal framework that cap-
tures the mapping of event logs to ‚Äúmovies‚Äù. through
the resulting movies the history of a process can be visu-
alised in different contexts, thus facilitating its analysis.
the framework is derived from the framework presented
in [7], where the main difference is that a richer notion
of state is adopted. the notion of state as presented
here allows one to exploit temporal information when
deÔ¨Åning the positioning of activity instances.
the events in an event log can be sorted chrono-
logically and subsequently be replayed in that order.
the occurrence of an event makes the system enter
a particular state. hence, by replaying all events in
the event log in chronological order, it is possible to
rebuild a process history, i.e. the sequence of states the
system went through. each state can be represented
as a conÔ¨Åguration of activity instances on a map of
choice. in order to deÔ¨Åne how states can be represented
on a map, we have to choose an image for that map
and to deÔ¨Åne the positioning of activity instances as
dots on that image. such an annotated map can be
seen as a ‚Äúphotograph‚Äù and, thus, a process history canbe visualised as a sequence of such photographs, that
together form a ‚Äúmovie‚Äù. to convey more information,
each dot can be Ô¨Ålled with a colour, where this colour
depends on the value of a characteristic of choice of the
corresponding activity instance.
anactivity instance is the execution of a certain activity
in a certain case and it can thus be represented as a
pair (at;cid ), withat2athe activity type ( ais the
universe of activity types) and cid2cthe case (cis the
universe of case identiÔ¨Åers). processes also access and
modify data. let vbe the universe of variable names,
then a process data variable is a pair (vn;cid )wherevn2v
andcid2c. these variables can take on different values
in different cases and also within the same case as time
progresses.
our framework only provides visualisations for ac-
tivity instances that have been created but are not yet
concluded. such activity instances can be in a number
of states: they can be scheduled when they have been
created but not yet been assigned to a resource, they can
beassigned when they have been assigned to a resource
but have not yet started execution, executing when work
on them has commenced, and suspended when work
on them has been temporarily halted. we will use the
setzto capture the various states which an activity
instance can be in, z=fscheduled;assigned;executing;
suspended;concludedg. an activity instance is referred to
asactive if it is in a state that is an element of zexcept
for the state concluded .
deÔ¨Ånition 1 (event): letube the universe of val-
ues that variables can take. an event eis a tuple
(at;cid;t;z;p )where:
at2ais an activity type;
cidis a case identiÔ¨Åer;
tis the timestamp when event eoccurred;
z2zis the state to which the corresponding
activity instance moves;
p:v6!uis an assignment of values to variables.
functionpis partial since not every event has an
associated value for all process variables.
we use the following functions to access the con-
stituent elements of an event e= (at;cid;t;z;p ),
activity (e) =at,case(e) = cid,timestamp (e) =t,
state (e) =zandproperties (e) =p. the latter function
will be overloaded and properties (e;vn) =p(vn). more-
over, given a function f,dom(f)represents the domain
off.
deÔ¨Ånition 2 (system state): lettbe the universe of
possible timestamps. a system state s= (;;s)con-
sists of:
a function : (ac)6!zwhere(at;cid ) =z
denotes that activity instance (at;cid )is in statez2
z;
a function: (vc)6!uwhere(vn;cid ) =vvalue
denotes that variable (vn;cid )has valuevvalue ;
a function s: (ac)6!twheres(at;cid ) =
tdenotes that activity instance (at;cid )started at
timestamp t.4
due to our deÔ¨Ånition of activity instance, as a pair
consisting of activity name and case identiÔ¨Åer, it is not
possible to distinguish between different instances of the
same activity within the same case. such instances may
arise from the occurrence of loops in a process model.
3.1 creation of the sequence of states
similar to existing algorithms for conformance check-
ing [3], this framework is based on the principle of
replay. events in the log are replayed to determine, a
posteriori, the sequence of states that the system has
gone through. in order to formalise this notion for our
framework, let us Ô¨Årst deÔ¨Åne the overriding operator .
letfbe a function, a function f0=f(  !x0;y)is deÔ¨Åned
byf0(  !x0) =yandf0(x) =f(x)for allx2dom(f)nf  !x0g.
the deÔ¨Ånition of can be extended to tuple sets, by
iteratively applying the deÔ¨Ånition to all tuples in the set
(noting that the order in which the elements are chosen
is not important).
deÔ¨Ånition 3 (replaying of events): letsi= (i;i;s
i)
be the current state during replay and ebe the next
event to replay. replaying ecauses the current state si
to change to state si+1= (i+1;i+1;s
i+1). this change
is denoted as sie  !si+1, where
i+1=i((activity (e);case (e));state (e))
i+1=if((v;case (e));properties (e;v))jv2dom (properties (e))g
and if state (e)6=executing thens
i+1=s
i
otherwises
i+1=s
i((activity (e);case (e));timestamp (e))
the initial state from which replaying starts is s0=
(0;0;s
0)where dom(0) =dom(0) =dom(s
0) =?.
replaying is used to reconstruct the execution history .
deÔ¨Ånition 4 (execution history): lethe1;:::;e nibe the
sequence of events in an execution log ordered by times-
tamp, i.e. for every 1i < jn,timestamp (ej)
timestamp (ei). lets0e1 !s1e2 !:::en !snbe the
sequence of states visited when replaying the event
log. an execution history is a sequence of pairs h=<
(s1;t1);:::; (sn;tn)>where (si;ti)denotes that the
system entered state siat timeti=timestamp (ei).
3.2 mapping states onto maps
activity instances are visualised as dots on a map. by
not Ô¨Åxing the type of map, but allowing this choice to
be conÔ¨Ågurable, different types of relationships can be
shown thus providing a deeper insight into the context
of the work that was performed. many types of maps
can be thought of: geographical maps (e.g., the map of
a university‚Äôs campus), process schemas, organisational
diagrams, gantt charts, etc. naturally, one can also make
highly specialised maps to suit a particular purpose.
the positioning of an activity instance may vary across
different maps. when the use of a certain map is envis-
aged, the location of activity instances at runtime on this
map should be captured through a formal expression
speciÔ¨Åed at design time.
deÔ¨Ånition 5 ( position function): letmbe the set of
maps of interest. for each available map m2m, thereexists a partial function that returns a pair of expressions
for each activity type.
positionm:a6!expr (v[ft;tg)expr (v[ft;tg)
whereexpr (x)is the domain of all expressions that use
some of the variables in x. for each activity instance
ai= (at;cid )and each map m,positionmreturns a pair
of expressions. the evaluation of these expressions, over
a states, returns a pair of coordinates (x;y)which is the
position of aion mapmat states.
more speciÔ¨Åcally, variables tandtare used to incor-
porate references in time: they are used to represent the
starting time of activity instances and the current time of
replay, respectively. let :x6!ube a value assignment
of a subset of the variable names in x. we deÔ¨Åne eval
as a function which, given an expression f2expr (x)
and a value assignment , yields an integer number:
eval[ [f] ] () =c
wherec2z.
given a map m2m, a statesi= (i;i;s
i),
an activity instance ai= (at;cid )2dom(i), then
position m(at) = (f0
m;a;f00
m;a). the coordinates of aion
mapmfor statesiat a given timestamp tis:
coord m(ai)
si= 
eval[ [f0
m;at] ] (ai);eval[ [f00
m;at] ] (ai)
whereai(vn) =i(vn;cid ),ai(t) =s
i(ai)andai(t) =
t.
for example, consider a loan request process where
each instance corresponds to a different request. the
applicant‚Äôs monthly income and the requested loan
amount are stored in variables income and loan. one can
deÔ¨Åne a cartesian map cwhere every activity instance is
associated with a distinct dot whose xandycoordinates
are determined by the values of these variables. assume
that the maximum values of income and loan, as seen in
the log, are 150000 and10000 respectively. also assume
that the maximum xandycoordinate values on to which
a dot can still be properly displayed on map care800
and600respectively. to ensure that an activity instance
with maximum income and loan values can be properly
displayed, we can deÔ¨Åne a position function such that
position c(at) = (income800
150000;loan600
10000).
the projection of a state si= (i;i;s
i)onto a map
mis the projection of activity instances ai2dom(i)
ontomat position coord m(ai)
si. as can be seen from
the deÔ¨Ånition, the function positionmis partial and hence
not all activity instances in the state are mapped. this
may be because it simply is not meaningful. however,
there may also be activity instances in dom(i)that are
not mapped as some of the variables in the position
function do not have a value. another reason for an
activity instance not to be projected onto a given map is
that its coordinates are invalid, i.e. falling outside that
map (for example because the xor theycoordinate
are negative). given a map, activity instances that have
invalid coordinates or none at all need to be visualised
differently from instances with valid coordinates. to this5
end, each map is associated with two lists of activities
instances, one enumerating the activity instances that do
not have coordinates and one enumerating those which
have invalid ones.
as mentioned before, the dots representing activity
instances can be Ô¨Ålled with colour. this allows for richer
visualisation as one can take the value of a variable
of choice into account. currently, different colouring
schemes are proposed, which are based (i)on the state
of the activity instances, (ii)on the characteristics of the
case of the activity instance or (iii) on the age of the
activity instances.
based on the state of the activity instance. when this
scheme is used, an activity instance aiis coloured accord-
ing toi(ai)wheresi= (i;i;s
i)is the current state. in
particular, for activity instances that are in the scheduled,
allocated, executing or suspended state, we Ô¨Åll the rel-
ative dot with white, cyan, green or black, respectively.
of course, activity instances that are concluded or not
scheduled are not represented on a map.
based on the characteristics of the case of the activity
instance. when this scheme is used, the end user chooses
one of the variables vn2vpresent in the event log.
the value of the selected variable determines which
colour is used to Ô¨Åll the dots of the activity instances
in the case. let sn= (n;n;s
n)be the last state in the
execution history. the dot corresponding to an activity
instanceai= (at;cid )2dom(i)is coloured according to
n(vn;cid ), i.e. the last value assigned to variable vnfor
the casecid. in particular, the 15 most commonly occur-
ring variable values are associated with the 15 non-white
colours of the 16-colour ega palette1. the white colour
is excluded as it is used to represent all other variable
values. the colour of dots for a particular case should not
change during an animation. otherwise, one can easily
lose track of dots. therefore, the visualisation approach
chosen is to ignore any changes to a variable and to just
use its Ô¨Ånal value. this then means that one should not
choose a variable for visualisation purposes whose value
can change during the execution of a case. in addition,
the choice of variable should also be informed by the
ability to use it as a meaningful classiÔ¨Åer of cases.
based on the age of the activity instance. in this approach,
the dots are coloured according to the age of the activity
instance, i.e. the amount of time that has elapsed since
the instance was started. the colour white is associated
with activity instances that just started. as time pro-
gresses, the colour of instances that have not completed
becomes closer and closer to red. let si= (i;i;s
i)be
the state at time t, then the age of an activity instance
ai= (at;cid )2dom(i)is computed as follows:
age(ai) = exp ln(2)(t s
i(ai))
met(at)
where met (at)is the average of the time that was
taken to complete instances of activity type at. for each
activity instance ai,age(ai)is always between 0 and 1.
ift=s
i(ai), i.e. activity instance aiwas just started,
1. http://en.wikipedia.org/wiki/enhanced graphics adapterage(ai) = 1 . valueage(ai)decreases exponentially as
aiages. when t s
i(ai) = met (at),age(ai) = 0:5.
an established approach is used to map age(ai)to a
colour: the ‚Äúfire colour pallet‚Äù [10]. the colour ranges
in intensity from a bright white ( age(ai) = 1 ) through
yellow, orange ( age(ai)0:5), brown, and then to black
(asage(ai)0).
in order to deal with dots that may overlap on a
certain map, they are represented transparently. the
colour of areas of overlap is determined by the colours
of the individual dots involved. unfortunately, this may
lead to confusion in some cases as it may be hard to
correctly interpret the resulting colour, but the advantage
of this approach is that dots whose area is completely
covered by one or more other dots still remain visible.
if the centres of dots coincide, then the dots involved
are merged to form bigger dots in order to avoid that
dots whose sizes and centre positions are identical can
no longer be visually distinguished from each other. the
diameter of such dots grows according to the number n
of activity instances involved. li et al. [23] conducted
an analysis with a number of subjects where they found
that quantities represented as circles are most intuitively
perceived when the circle grows as a power of 0:4.
applying this observation to our case, i.e. when joining
ndots of different activity instances, the diameter of
the resulting dot is computed as n0:4. the amalgamated
dots are also divided in as many slices as there are
constituting dots, and each slice is Ô¨Ålled with the colour
of the dot which it corresponds to.
another important feature is concerned with handling
activities instances when they are going to disappear.
if a dot suddenly disappears between two consecutive
photographs, end users would not notice that the corre-
sponding activity instance is completed, especially when
many dots are visualised at the same time on the maps.
therefore, we have introduced a fading effect: if a dot is
going to disappear in xphotographs, it starts fading out
(i.e., becomes transparent). value xcan be customised
by an end user on the Ô¨Çy while playing the movie. as
the number of photographs in which a dot is going to
disappear becomes smaller, the fading effect becomes
more pronounced, till the dot completely vanishes.
4 i mplementation of the framework
figure 2 shows the architecture of the implemen-
tation. the yellow component is implemented as a
stand-alone java application whereas the red compo-
nents are implemented as plug-ins of prom, an open-
source ‚Äúpluggable‚Äù framework for the implementation
of process mining tools in a standardised environment
(http://www.promtools.org). plug-ins require a number
of input objects and produce one or more output objects.
these input objects could, for example, be event logs or
output objects of other plug-ins. in this way, one can
deÔ¨Åne a chain of plug-ins‚Äô invocations.
the core software is the log-on-map replayer plug-in
which takes a map-speciÔ¨Åcation Ô¨Åle and an event log6
event logmap 
designermap specification 
automatic 
map 
generatorlog on 
map 
replayermovies
process 
modeloptional
fig. 2. the architecture of the implementation.
as input. each map-speciÔ¨Åcation Ô¨Åle consists of a set of
available maps (i.e. the map name and the url where
the map image can be retrieved) with corresponding
position functions (deÔ¨Ånition 5), one deÔ¨Ånition for each
map. the plug-in employs the framework deÔ¨Åned in sec-
tion 3 and generates for each available map a sequence
of photographs. playing such a sequence of photographs
in succession yields a movie. as previously mentioned,
each photograph captures the state of the process as it
existed at a certain point in time. the graphical user
interface provides controls to select one of the available
movies and put it in focus, play/stop that movie, or go
to a speciÔ¨Åc moment in time in that movie.
map speciÔ¨Åcations can be drawn through a java stand-
alone application, the map designer . it allows process
analysts to load images (e.g., png or jpg) to use as
maps and to deÔ¨Åne how to project activity instances
onto those maps. to do so, analysts can simply drag
and drop an activity type onto the map and place it
at the position of interest. this way, the activity type‚Äôs
position is statically deÔ¨Åned and applies to all instances
of that type. alternatively, analysts can deÔ¨Åne a position
asdynamic . the position of an activity instance is then
deÔ¨Åned in terms of the state of the process instance
involved. as far as the implementation is concerned, the
state is encoded as an xml document and the position
function is deÔ¨Åned as an xquery over this document.
section 5 illustrates the interface of the map designer
application and the log on map replayer plug-in through
the case study.
there exists a number of potential maps that can
be applied to a wide range of scenarios. for example,
a process model can serve as a map where activity
instances are projected onto the icons representing the
corresponding activity types. hence, as long as the
positions of the activity icons are known, this type of
map can be used in different scenarios and the cor-
responding positioning function can be automatically
generated. this concept of facilitating the generation
of maps with little effort required by users has led to
the implementation of a second plug-in of prom, the
automatic-map-generator . it takes an event log as input
and optionally a process model and produces a map, in-
tended as the background image, and the corresponding
position function. currently, three types of maps can begenerated automatically: cartesian, deadline/timeline,
process-model. when generating a map of these types,
users need to deÔ¨Åne the size of the image through
specifying the width wand the height h.
cartesian map. this type of map takes inspiration from
the cartesian coordinate system. the projection of activ-
ity instances is determined by choosing two numerical
variables,vxandvy, to derive the values of xandy
coordinates from. let xmax(xmin) andymax(ymin) be the
maximum (minimum) values for vxandvyas present in
the event log. the position function for a cartesian map
cfor instances of an activity type at2ais deÔ¨Åned as
position c(at) = (x0
at;y0
at)where
x0
at=vx xmin
xmax xminw andy0
at=vy ymin
ymax yminh:
for example, suppose that the end user chooses vari-
ablespayout andamount asvxandvy. based on these
variables, the plug-in determines the corresponding min-
imum and maximum values as seen in the log, e.g.
xmin = 0;xmax = 100;ymin = 1000;ymax = 10000 .
for map of size, for example, 800600 pixels (i.e.,
w= 800 andh= 600 ), the plug-in thus speciÔ¨Åes
x0
at= 
(payout 0)=(100 0)
800andy0
at= 
(amount 
100)=(10000 1000)
600.
deadline/timeline map. activity instances are posi-
tioned along the x-axis according to the time that they
have been active. when an activity instance has just
become active, its x-coordinate is equal to w. itsy-
coordinate is obtained by choosing a numerical variable
vy, extracting its current value, and using the same com-
putation as for the cartesian map. as time progresses,
thex-coordinate changes (becomes less and less), but
theycoordinate remains constant. the position function
for a time map lfor instances of an activity type ai=
(at;cid )is deÔ¨Åned as position l(at) = (x00
at;y00
at)where
x00
at= 
1 t t
dat
w andy00
at=vy ymin
ymax yminh
wheredatis a constant which deÔ¨Ånes the maximum valid
duration for instances of an activity type at. if a certain
activity instance is active for more than dat,x00
atwill
become negative and is then enumerated in the list of
activity instances with invalid coordinates.
process-model map. as mentioned before, for a process-
model map activity instances are projected onto the
corresponding icon in the model. in order to enable the
automatic generation of maps of this type, end users
need to provide a process model which also encodes
the actual coordinates of the icons that represent the
model‚Äôs activities. currently, we only support the petri
net formalism, though we believe that it is relatively
easy to extend the implementation to support other
process modelling formalisms. petri nets are stored in
Ô¨Åles in pnml standard format which also encodes the
coordinates of positions of all activities (i.e. petri net
transitions) of the model.7
5 a c ase study with an australian in-
surance company
we applied the visualisation framework in a case study
that we conducted with one of the largest insurance
companies in australia, namely suncorp, during the
second-half of 2012. through regular meetings (almost
weekly) with the stakeholders from suncorp, we iden-
tiÔ¨Åed the need to communicate the current landscape
of suncorp‚Äôs claims processing performance to higher
managers within the company. to this end, we believed
that the visualisation framework proposed in this paper
could be used to generate a number of movies summaris-
ing suncorp‚Äôs claims processing trends and performance.
suncorp provided us with data related to the process-
ing of claims that were Ô¨Ånalised within a 6-month period
(regardless of the starting time of the claims). the data
consists of over one million events for 34 activity types,
which together describe the processing of over 32,000
claims from multiple departments within suncorp.
for the purpose of evaluating the visualisation frame-
work and the usefulness of the resulting movies, a subset
of the data (from one department only) was used. this
subset of data was selected because it contains rich
attribute information, including: loss type (i.e. the cause
of a loss that triggered an insurance claim, such as Ô¨Åre,
theft, or burglary), payout amount (i.e. the amount of
money paid to a customer as a result of an awarded
insurance claim), team (i.e. the team within suncorp
which processed the claims), and many others. as will
be detailed later, the richness of attribute information in
this subset of the log allowed us to produce interesting
maps and, consequently, movies.
5.1 overview of the maps (and movies) created for
the case study
using this subset of data, four movies were pro-
duced using four different maps. a thorough expla-
nation of the interpretation of these maps and the
various interactive conÔ¨Åguration options available to
users (while a movie is being played) is provided
in the remainder of this section. some screencasts of
the tool showing these four movies are available at
http://www.processmining.org/online/logonmaps.
5.1.1 australia map
the Ô¨Årst movie was produced using a geographical map
of australia. in this movie, a dot is projected onto the
map at the position that corresponds to the state or
territory where the claim was lodged. thus, the goal of
this map is to display the distribution of insurance claims
across all australian states and territories at any given
point in time, and how the distribution evolves over a
period of time. figure 1 shows a snapshot of the movie.
the bottom part of figure 1 shows the widgets to
control the playback of the movie. from left to right, this
area contains the play button to start/stop the movie, the
timeline and time slider box which shows the relative
progression of the movie and the slider that can bedragged by users to reach a particular snapshot, the
clock showing the current timestamp of the movie being
played as obtained from the timestamp information in
the event log, and the slider to adjust the playback speed
on the Ô¨Çy. as also stated in [24], it is important to play
the movie at the right speed. the optimal speed may
be hard to predict: animations played too slowly may
become boring, whereas the opposite can cause relevant
information to be missed. the timeline box also shows a
wave in which the x-axis represents time and the y-axis
the number of active activity instances. the purpose of
the two buttons above the timeline box (labelled as ‚Äòpos.
trend‚Äô and ‚Äòcolour trend‚Äô) will be explained later in this
section.
at the top of figure 1, we see the maps panel which
is made up of a number of tabs, each associated with a
different movie. by selecting a tab, the corresponding
movie is brought to the front to show the state of
the process at a speciÔ¨Åc point in time, in terms of the
activity instances that are active, their state, and their
positions. while playing the animation, users can change
the animation they are watching in case they wish to
consider a different type of movie. in figure 1, two
animation movies were executed simultaneously: the
Ô¨Årst one is the australian map animation (called the
‚Äòloss cause/the state‚Äô plot on the tab) and the other one
is the ‚Äòincurred amount/claim duration‚Äô movie (not
shown in figure 1, but users can switch between the
two movies at anytime).
there are two boxes on the panel on the left-hand side
of the screenshot. the top box enumerates the activity
instances for which there are no associated positions
(i.e. they do not belong to the domain of the corre-
sponding position function). the bottom box enumerates
those activity instances whose positions are ‚Äòinvalid‚Äô (i.e.
the corresponding position function returns coordinates
which either fall outside the map boundary or could not
be evaluated). in the screenshot shown in figure 1, there
was no activity instance that was projected as ‚Äòinvalid‚Äô
at that particular point in time.
the centre of figure 1 shows a snapshot of the movie
being played. the conÔ¨Åguration Ô¨Åle used to produce this
movie projects activity instances onto the corresponding
australian state/territory in which the claim was lodged.
the size of the dots is positively correlated with the
number of events that are simultaneously present on
the map at exactly the same position. as mentioned
previously, dots projected at the same coordinates are
merged to form bigger dots; moreover, the colouring
scheme of the dots is conÔ¨Ågurable. in figure 1, the
colour of the dot was conÔ¨Ågured so that each dot is
coloured according to the ‚Äòloss cause‚Äô of the insurance
claims. the association of colours with values of loss
cause is explained in the legend shown on the right-
hand side panel. many dots are projected at the same
coordinates and, hence, they are merged in clusters. as
mentioned previously, each bigger dot is divided in as
many slices as the number of different colours associated
with merged dots. the size of the slice is determined8
proportionally with the percentage of dots of a given
colour: the number of activity instances with a particular
colour (i.e. a particular loss cause) in a dot over the
total number of activity instances represented by the dot.
these percentages can be viewed by rolling the mouse
over the dots (as shown in figure 1).
on the right-hand side of figure 1, there are two tabs.
the top one is labelled as ‚Äòparameters‚Äô and the bottom
one is labelled as ‚Äòlegend‚Äô (the ‚Äòlegend‚Äô tab is not shown
in figure 1 because the tab was being selected in the
screenshot, causing the ‚Äòlegend‚Äô tab itself to disappear).
as explained above, the purpose of the ‚Äòlegend‚Äô tab is
to describe the meaning of each colour in the dot. the
‚Äòparameters‚Äô tab, on the other hand, is used to conÔ¨Ågure
the colouring scheme and the manner in which the dots
are to be displayed in the animation movie.
figure 3 (top part) shows the expanded parameter tab.
the Ô¨Årst check-box allows a user to merge multiple dots
into one dot even if the dots are partially overlapping.
if this option is ticked, dots whose area partly over-
lap are merged. otherwise, if it is unticked, dots are
merged only if they are exactly positioned at the same
coordinates. the second check-box allows the fading out
of the dots when the corresponding activity instances
are soon going to be no more active. the number of
frames required for the dots to begin to fade out can
be customised using the slider on the panel. when dots
are merged, by default, the bigger dots are annotated
with the number of dots that are merged. sometimes the
process owner does not want to disclosure this aggregate
information for privacy and/or conÔ¨Ådentiality reasons.
for instance, this happened for the suncorp‚Äôs case stud-
ies. the last check-box allows users to display or remove
the exact number of merged dots that is shown in the
middle of each dot: if this option is unticked, the number
will not be displayed in the movie (the legend will also
show an ‚Äòn.a.‚Äô status in place of the exact number).
the second half of the parameter panel allows users
to customise the colouring scheme of the dots in the
movie according to one of the schemes described in
section 3. the three options will respectively enable
the colouring of dots based on the state, the age, or
the values of a particular variable of the corresponding
activity instances. furthermore, for the third option, the
variable type to be used is selected from a drop-down
box, as shown in figure 3.
the ‚Äòpos. trend‚Äô panel, shown in figure 3, is used
to present to viewers the evolution of the number of
activity instances that are correctly projected onto the
map (blue-lined graph) and not projected onto the map
(green-lined graph) over the time span of the movie.
the red-lined graph in this Ô¨Ågure shows those activity
instances that could not be projected onto the map
correctly (i.e. those activity instances with ‚Äòinvalid‚Äô pro-
jection); however, we do not see the red-lined graph
in figure 3 because there were no invalidly projected
activity instances throughout the whole animation. the
thick vertical red line represents the current time of the
movie being played. the ‚Äòcolour trend‚Äô panel serves a
fig. 3. screenshots of the interactive parameter panel
and the ‚Äòposition trend‚Äô graph
similar function as the ‚Äòpos. trend‚Äô panel, except that this
time it displays the evolution of the number of activity
instances per dot colour over the time span of the movie.
typical insights that can be gained from this map
include an understanding of the distribution and the
characteristics of claims across australian states and,
more importantly, the differences in the characteristics
of the claims. for example, while playing the movie,
we noticed that the state of tasmania had a higher
proportion of claims from damages of rental properties
as compared to other states, while natural hazard seems
to be one of the most dominant causes for insurance
claims across all states.
based on the description of our framework in sec-
tion 3, the logonmap plug-in is used to project indi-
vidual activity instances onto the map. however, there
are situations when stakeholders are more interested in
the analysis of the overall distribution of cases and their
characteristic, rather than of the single activity instances.
this is precisely the situation that we encountered in
our case study with suncorp. in fact, two out of the four
movies produced (i.e. the australian map and the quad-
rant map) are concerned with case-level performance. to
address this situation, we inserted one ‚Äòdummy activity
instance‚Äô for each case (i.e. trace) in the event log. these9
fig. 4. a screenshot of the second animation produced
using the quadrant map
‚Äòdummy activity instances‚Äô start before any other activity
instances in the case are active and complete when all
other activity instances are no longer active. then, in the
map conÔ¨Åguration Ô¨Åle, we project the ‚Äòdummy activity
instances‚Äô onto the map to generate movies that show
the performance and trends of cases. the other activity
instances are not projected (i.e. the position function is
only deÔ¨Åned for the ‚Äòdummy activity instances‚Äô).
5.1.2 quadrant map
the second movie was produced based on a cartesian
map whereby the x-axis represents the amount of in-
surance claim payouts, and the y-axis represents the
number of days taken to process the claims. we call this
map a ‚Äòquadrant map‚Äô. note that this second movie is
also about viewing cases, thus the insertion of ‚Äòdummy
activity instances‚Äô into the log was applied. a screenshot
of the generated animation is shown in figure 4.
in this screenshot, dots are coloured based on the age
of the activity instances (see section 3.2). dots in the
bottom-left quadrant represent claims with low payout
values and relatively quick processing times (expected),
dots in the top-right quadrant represent claims with
high payout values and relatively long processing times
(expected), dots in the bottom-right quadrant represent
claims with high payout values and quick processing
times, and Ô¨Ånally, dots in the top-left quadrant represent
claims with low payout values and long processing times
(under-performing claims).
in other words, this movie allows us to gain insights
into the performance of suncorp‚Äôs claims process over a
period of time. in our case study, this movie proved to be
useful in conveying to business analysts and managers
the performance of their claims process.
5.1.3 deadline map
the third movie was produced based on a deadline map.
this movie shows those activity instances which were
fig. 5. a screenshot of the third animation movie pro-
duced using a deadline map
completed on-time (before the deadline) and those which
were not (see figure 5). the position of a dot on the x-
axis tells us the time remaining before the corresponding
activity instance reaches its deadline, while the position
of that dot on the y-axis reveals the type of that instance.
in this Ô¨Ågure, dots are coloured according to the teams
that performed the corresponding activity instances.
when an activity instance becomes active, a dot rep-
resenting the activity instance appears on the map. the
y-axis position of the dot is determined by the type
of the activity instance, while the x-axis position is
initially determined by the amount of time the activity
instance has before the deadline is reached (note that
the deadline for every activity instance is provided as an
event attribute in the log). thus, the later the deadline
of an activity instance is relative to the time when the
instance becomes active, the further to the right the
starting position of the dot is.
after an activity instance becomes active, the dot
representing that activity instance moves from right to
left as time progresses. the amount of time until the
deadline expires is represented through the distance to
the thick black line. consequently, at any given point in
time, those activity instances which did not complete by
the deadline are captured by the dots to the leftof the
thick black line.
in our case study, this movie allowed us to identify
a number of activities that often ran overtime, such as
the ‚Äòfollow up requested‚Äô activity, the ‚Äòconduct file
review‚Äô activity, and the ‚Äòincoming correspondence‚Äô
activity. other activites, such as the ‚Äònew claim (ipi)‚Äô
activity, mostly completed around the deadline.
5.1.4 process model map
the fourth movie was produced based on a process
model map (see figure 6). the process model used in
this movie is the fuzzy model [22] that we discovered
using the disco tool (http://www.Ô¨Çuxicon.com/disco).10
fig. 6. a screenshot of the fourth animation movie
produced using a process model map
as explained in section 4, dots are projected onto the
map according to the position of the icon representing
the activity captured by the dots. in this screenshot,
dots are coloured according to the age of the activity
instances.
a typical insight that can be gained from using this
type of map is the identiÔ¨Åcation of activities in a process
that can potentially be a bottleneck. for example, while
playing the movie, the appearance of a large dot on a
particular activity icon over an extended period of time
may indicate the piling up of work items (i.e. activity
instances) related to that activity. as can be seen from
figure 6, many activity instances were piling up for
two activity types, namely, ‚Äòfollow up requested‚Äô and
‚Äòconduct file review‚Äô.
5.2 map designer
as stated in section 4, a map designer tool has been
implemented. figure 5.2 shows two examples of how
we have used the map designer to generate the conÔ¨Åg-
uration Ô¨Åles for the four movies used in the case study.
the top part of figure 5.2 shows how we have used
the map designer tool to automatically generate the con-
Ô¨Åguration Ô¨Åle for the fourth movie (the process model
movie). here, we can see how a user can simply drag
an activity name (from the ‚Äòtask list‚Äô window) to the
desired position on the map. by doing so, the map de-
signer tool automatically generates a map conÔ¨Åguration
Ô¨Åle which speciÔ¨Åes, for each activity whose instances
need to be projected onto the map, the static position
of those instances.
the bottom part of figure 5.2 shows how we used the
map designer to help us generate the map conÔ¨Åguration
for the second movie (the quadrant movie). this movie
requires a dynamic positioning of dots based on the
variable values of the activity instances to be projected.
thus, to enable such a ‚Äôdynamic‚Äô positioning of dots,
draglactivitieslto
belprojected
fromlthel'taskllist'
windowltolthel
map.staticlprojection
dynamiclprojection
manuallylinsert
xquerylstatementsltol
specifyltheldynamic
positionloflactivities.fig. 7. screenshots of the map designer showing static
(top) and dynamic (bottom) activity projections
we inserted the desired xquery statements into the
corresponding pop-up window.
overall, we found the map designer tool to be quite
useful in enabling us to quickly deÔ¨Åne, and adapt, our
map conÔ¨Åguration Ô¨Åles to suit the type of visualization
that we would like to see.
6 e valuation with endusers
the validity, the usefulness, and the intuitiveness of
the approach and of the resulting implementation has
been thoroughly assessed through engagement with end
users. speciÔ¨Åcally, the approach‚Äôs validation has been
conducted in two phases.
a Ô¨Årst version of the tool was released in the sec-
ond half of 2012 and reported in [8]. this version was
evaluated with three subjects of a dutch municipality:
a process management specialist, a communication and
marketing specialist, and a business advisor for customer
contacts. in this case, we used a real-life event log
concerning the process to handle the applications of the
house-building permits submitted by dutch residents. in
particular, we deÔ¨Åned four maps, as reported in [8].
through this evaluation process, we discovered a
number of usability issues and missing features in our
tool which contributed to unnecessary complication in
the interpretation of the results. a summary of the
identiÔ¨Åed issues is provided below (see [8] for details):
in the Ô¨Årst version of the tool, activity instances
left no trace when they disappeared. the subjects11
found this particularly confusing as moving dots
can disappear at different positions on the map.
the subjects interviewed remarked that it was some-
times unclear how long activity instances were ac-
tive.
activity instances could not be related to character-
istics of the case, e.g., the type of permit requested.
after addressing the issues above (and other minor
issues), we released a second version of this tool which
is the version discussed in this article. for instance, the
fading effect was introduced to make it more evident
when activity instances are about to disappear (see end
of section 3). the different colour schemas discussed in
section 3.2 were introduced to relate activity instances
to case characteristics or to draw attention to the age of
activity instances.
after releasing the second version of the tool, we per-
formed a more extensive session of experiments where
users personally interacted with the tool. the partici-
pants of this second experiment session were suncorp
employees and the movies used in the experiment were
those four movies already explained in section 5. the use
of a different case study from another continent allowed
us to assess the framework in different settings and with
subjects with a different cultural and work background.
the evaluation was conducted using an established
methodology, in addition to a number of interviews with
a relatively large number of subjects. section 6.1 de-
tails the evaluation methodology, the background of the
participants, and the experiment procedure. section 6.2
reports the result of the evaluation and lessons learned,
along with directions for future development.
6.1 methodology for the evaluation
the evaluation of the second version of our tool was con-
ducted using the co-operative evaluation methodology,
which is a mature, fully-documented methodology in the
Ô¨Åeld of human-computer interaction [25]. this is a cost-
effective technique for identifying usability problems in
prototype products and processes. the technique encour-
ages design teams and users to collaborate in order to
identify usability issues and their solutions.
6.1.1 nature and number of participants
the participants of this experiment consisted of sun-
corp‚Äôs employees of various roles: Ô¨Åve team leaders, one
manager, two business analysts, and one claims ofÔ¨Åcer.
they had different levels of knowledge of the insurance
claim process.
in terms of the participants familiarity with process
mining techniques and business process management
technology, three out of the nine participants were aware
of the existence of business process management sys-
tems, while the rest were not aware at all, or only had
a very limited awareness, of such systems. furthermore,
only one participant had experience with process analy-
sis, while the rest had none, or limited, experience with
process analysis.it is worth highlighting that, because of the user-
intensive nature of this method, it is difÔ¨Åcult to run
this experiment with a large number of users. never-
theless, as documented in [25], past applications of such
a method have shown that the careful choice of experi-
ment subjects, even if relatively small, can minimise the
problem of obtaining subjective results.
6.1.2 procedure to conduct experiments
the experiment of our visualisation tool was conducted
using the four movies generated using the logonmapre-
play plug-in (detailed in section 5). the experiment
was conducted with each participant individually, one
after another. before the experiment started, we gave
a brief introduction of the framework and of the four
movies, after which we let the participant play with
the tool on their own. each participant was roughly
given 10 minutes to interact with the tool. in accordance
to the methodology, no further comments were given,
thus letting the participants draw their own conclusions.
without our interference, we could thus evaluate the
level of understandability of the map metaphor and the
usefulness of the approach when extracting knowledge
from event logs.
while performing such tasks, participants had to ex-
plain what they were doing by ‚Äòthinking-aloud‚Äô. during
the experiment, notes were taken on the behaviours
exhibited by the participants in order to measure the
degree of efÔ¨Åciency and effectiveness observed. in par-
ticular, they were asked to communicate any meaningful
conclusions that they managed to draw by observing the
animations and interacting with the tools.
at the end of the experiment, each subject was given
the opportunity to Ô¨Åll out a semi-structured question-
naire with questions designed to measure the subjects‚Äô
impressions and expectations with regards to the tool.
to ensure anonymity, the Ô¨Ålled-out questionnaire was
inserted into a ballot box by the participant him/herself,
thus guaranteeing the anonymity of responses.
in summary, our experiment methodology provides
a valuable means to not only verify the effectiveness
and efÔ¨Åciency of the visualisation framework, but also
to elicit further possible improvement opportunities (see
section 6.3). this method is, therefore, an eminently
formative evaluation method, rather than a summative
one. it is useful for identifying those usability ‚Äòbugs‚Äô that
can affect the effectiveness of the system being evaluated.
6.2 evaluation results
the results of our experiment will be detailed based on
the questionnaire results (both quantitative and quali-
tative data were collected) and our observations of the
participants‚Äô responses to the tool during the experiment.
the Ô¨Årst two questions in the questionnaire (q1 and
q2) were used to gauge participants‚Äô familiarity with
bpm systems and process analysis (the result of which
has been summarised in section 6.1.1). the rest of the
questions (q3‚Äìq8) were used to gauge participants‚Äô
satisfaction with the tool.12
6.2.1 questionnaire results
the questionnaire used consisted of both closed and
open questions. the third question (q3) asked partici-
pants the type of insights that they expected to obtain
by using the visualisation tool. participants‚Äô expectations
of insights they wish to obtain by using the tool vary,
although they are roughly consistent with what can be
expected from visual analytics. a baseline expectation
from all participants is to understand the trend and vol-
ume of their claims processing in terms of performance,
and to understand why certain trends occurred. some
participants also expected the tool to guide them in iden-
tifying problems with their processes and how to resolve
them. finally, a few participants also expected the tool to
help them identify opportunities in their processes with a
focus on planning the assignment of resources.
the remaining Ô¨Åve questions (i.e. q4‚Äìq8) consisted
of both closed and open-ended questions. for each of
these questions, the user selects one out of a number
of pre-determined satisfaction rating (e.g. ‚Äòvery much‚Äô,
‚Äòmuch‚Äô, ‚Äònot so much‚Äô, ‚Äònot at all‚Äô, and ‚Äòi don‚Äôt know‚Äô).
furthermore, to gain more insights, they were allowed to
provide reasons for the satisfaction rating they selected.
the results of the closed questions are displayed in
figure 8. with respect to q4, most participants (8 out of
9) found the tool allow them to gain expected process-
related insights (expressed as answer to q3). this is con-
Ô¨Årmed by analysing the related comments, e.g. ‚Äú having a
visual representation makes it clearer [ :::] the Ô¨Çow on impacts
when there is a problem in one area and how it then relates
to another area. ‚Äù, ‚Äúwas good to see key area for the business
to improve on [ :::]‚Äù, ‚Äúyou could clearly identify bottlenecks,
claims with long duration but low value etc. ‚Äù, ‚Äúgive graphical
representation of claims incidents and work loading. give
insights to claims costs compared to time of year. ‚Äù
however, there was one participant who did not Ô¨Ånd
the tool to help him/her much with addressing the ques-
tion he/she listed earlier. upon reading the comment,
it turned out that the participant expected a feature in
our tool which was simply not built: the ability to ‚Äòdrill
down‚Äô into activity instances that appear on the movies
to learn more about them (e.g. obtaining the details of
the customer related to a particular activity instance).
another recurrent comment was about the intuitive-
ness of the deadline map, with dots moving towards the
left as time progresses. they would have expected them
to move towards the right. this is an interesting point:
in the Ô¨Årst version of the tool, the dots moved towards
the right. we changed this since the subjects from the
dutch municipality found the movements towards right
as not very intuitive. this makes us suspect that the
intuitiveness may also be subjective and depend on the
cultural background.
in terms of the maturity of the tool (q5), it was quite
surprising to note that one third of the participants did
not provide any responses; however, by looking at the re-
lated comments, it turned out that these participants did
not respond because they either did not undertand the
question or they found that they had not spent enough
(q4),did,the,tool,assist,you,in,gaining,insights,you,listed,in,question,3?
(q5),do,you,think,the,tool,is,mature?
(q6),do,you,find,the,behaviour,of,the,tool,intuitive?,in,other,words,,does,the,tool,behave,in,a,way,that,you,expect?
(q7),did,the,tool,run,without,interruptions,and,without,crashes,during,the,experiment?
(q8),do,you,think,there,are,any,essential,features,that,are,missing?
fig. 8. closed questions results
time with the tool to properly answer q5. nevertheless,
those who responded to this question all agreed that the
tool is mature. the related comments also conÔ¨Årmed this
observation, e.g. ‚Äú ...it captures a lot of relevant information
and provides plenty of options to navigate to speciÔ¨Åc areas
you might want to examine... ‚Äù, ‚Äú...it has all the activities for
6 months and i can go back in time if i wanted to. obviously
as we used it we would discover more things we may want
to see but for the moment, i think there is enough for me to
play with. ‚Äù at the same time, comments related to q5
also suggested a number of possible tool improvements,
including the use of ‚Äòplain english‚Äô in the description
and labelling of various conÔ¨Åguration options.
q6 evaluates the intuitiveness of the tool. as shown in
fig. 8, the responses we obtained were quite similar, with
8 out of 9 participants Ô¨Ånding the tool quite intuitive.
from those who found the tool to be intuitive, we
received comments such as ‚Äú it acts exactly to what you
would expect, according to the selections you choose. ‚Äù, ‚Äúvisual
interpretation easy to accept. ‚Äù, and ‚Äú [the] tool is easy to
use.‚Äù. the one participant who did not Ô¨Ånd the tool to
be intuitive commented on the need for the tool to have
clear labels, Ô¨Ålters, and ‚Äòhelp‚Äô boxes so that ‚Äú we can easily
navigate around it. ‚Äù13
another feature of the tool that we wanted to evaluate
was its operational stability. therefore, q7 asked partic-
ipants to rate whether the tool ran smoothly during the
experiment. the responses to this question are almost
evenly divided, with 5 participants stating the tool to be
running smoothly during the experiment and another 4
participants stating the opposite. one participant com-
mented that it was frustrating that he/she managed to
crash the tool, and other participants commented on the
low-quality graphics used during the experiment due to
the projector used.
finally, we also asked participants if there were any
features in the tool that they would like to have but that
were not currently available. apart from one participant
who did not respond, the responses to this question
are evenly split, with 4 participants stating that there
were missing features and another 4 participants stating
the opposite. among those who responded ‚Äòyes‚Äô to this
question, a number of features that should be added
were suggested. these suggested features, except for
those that have already been stated in response to q6,
will be detailed in section 6.3.
6.2.2 additional observations
as explained in section 6.1, we took notes to try and
gauge the degree of efÔ¨Åciency and effectiveness as ex-
perienced by the involved subjects during the empirical
tests. in particular, we were interested to learn whether
the subjects could draw interesting conclusions, which
were either unexpected or conÔ¨Årmed previous intuitions.
the notes taken during the experiment stated that
participants managed to derive important conclusions as
suggested by the movies. for example, one participant
gained insights with regards to the distribution of claim
types across different australian states and raised the
possibility of how insurance premiums can be adjusted
accordingly. a number of other participants gained in-
sights into the ‚Äòabsurdity‚Äô of having small-value claims
which took a very long time to complete. one participant
clearly acknowledged the usefulness of the deadline map
to compare performance levels across different teams.
another participant noted a peak time period in terms
of the number of claims. overall, the insights gained by
participants from using this tool are consistent with what
we expected the tool to be able to provide.
the rest of the observation notes taken during the
experiment corroborated the results of the questionnaire,
thus further validating the results of our experiment.
6.3 evaluation conclusion and future tool improve-
ment
the analysis of the questionnaire‚Äôs answers and of the
users‚Äô interaction with the tool let us make the following
observations:
1) in most cases, the tool behaved as expected.
2) a number of participants highlighted that the lan-
guage used in the tool was not written in ‚Äòplainenglish‚Äô, leading to potential wrong interpretation
of the options or features.
3) the stability of the tool needed to be improved as
it crashed rather frequently during the experiment.
4) a recurrent request from many participants was to
provide Ô¨Åltering capabilities such that the movie
can be conÔ¨Ågured to display only information of
interest, e.g. only display activity instances which
were executed by a certain group of resources or
which occurred within a speciÔ¨Åc time period. note
that prom already has sophisticated log Ô¨Åltering
capabilities; nevertheless, it is still worthwhile to
integrate them directly into this plug-in to allow
users to do the Ô¨Åltering on the Ô¨Çy while playing
the movie.
5) one participant expressed his/her interest in be-
ing able to drill down into the activity instances
associated with certain colours or having certain
characteristics, and to extract the respective details.
6) for dots representing more than one activity in-
stance, participants showed an interest in being
able to quickly learn the percentage of slices of each
represented colour (e.g. 30% of slices are coloured
red, 10% blue, etc.). in the version evaluated, we
simply showed the number of dots that were
amalgamated, without detailing this statistics per
colour. since then, this issue has been addressed.
moreover, more detailed bug testing has been con-
ducted and, as result, many bugs have been Ô¨Åxed.
despite the issues listed above, we believe that the
evaluation has clearly assessed the validity of the tool.
the concept and the design of the tool are desirable. the
metaphor of maps and movies is clearly understood and
serves the purpose of gaining insights into past execu-
tions to understand process trends and performance.
overall, subjects were enthusiastic about the ability
to generate movies based on event data. several partici-
pants expressed a desire to start using the plug-in in their
own analyses. in fact, the tool has helped some end users
Ô¨Ånd interesting patterns in various situations, some of
which were quite surprising to them. therefore, we con-
clude that the concept of our visualization framework is
promising and that the current tool already illustrates its
potential.
7 c onclusion
process models can be viewed as geographic maps.
however, unlike real maps the quality of process models
often leaves much to be desired. man-made process
models tend to be subjective and disconnected from real
process executions. process mining techniques can be
used to improve the quality of process maps, e.g., pro-
cess discovery techniques can be used to automatically
derive process models from event data and conformance
checking techniques can be used to pinpoint and quan-
tify deviations between model and reality. however,
this is not sufÔ¨Åcient as process maps are static and do
not show the Ô¨Çow of work. therefore, we developed14
an approach to visualise process histories in a generic
manner. different ‚Äúmaps‚Äù can be used as long as activity
instances can be given coordinates on such a map,
e.g., an activity instance may be mapped onto a gantt
chart, an organisation chart, a process model, etc. by
showing a sequence of ‚Äúphotographs‚Äù of the process
(i.e., a ‚Äúmovie‚Äù), one can see concept drift, compliance
problems, bottlenecks, etc.
this paper describes an implementation of these ideas
in the prom framework. we also developed a map
designer that allows end users to deÔ¨Åne the maps of in-
terests and to position activities on them. many maps are
widely-applicable (e.g., a time-line or a process model
map) and can be used in many different settings with
few or no changes. therefore, we also developed a prom
plug-in that semi-automates the deÔ¨Ånition of certain
types of maps, by self-generating the map picture and
the projection of activity instances. the implementation
is generic and any collection of maps can be used
as long as it is possible to map instances onto map
coordinates. moreover, dots on the map can be coloured
using various schemas according to the properties of the
corresponding activity or process instance.
interested readers can try the prom implementation
with a sample event log. the sample event log,
the corresponding maps, the conÔ¨Åguration Ô¨Åles,
and the related instructions are available from
http://www.processmining.org/online/logonmaps.
the approach has initially been evaluated using a case
study in the context a dutch municipality. the outcome
triggered a series of changes in the framework and
the reference implementation. after the adjustments, we
performed a second more extensive experiment where
participants actually worked with the tool. to minimize
the issue of obtaining subjective results, this experiment
was conducted based on a well-founded methodology,
i.e. the co-operative evaluation methodology [25]. this
second experiment was conducted with the employees
of suncorp (one of the largest insurance organisations in
australia).
the results in this paper show the value of combining
process mining and visual analytics. process mining re-
sults are often perceived to be rather abstract and static.
visual analytics approaches tend to be data-centric rather
than process-centric. the combination of both Ô¨Åelds may
yield innovative process-centric visualisations such as
the ‚Äúprocess movies‚Äù proposed in this paper.
references
[1] j. manyika, m. chui, b. brown, j. bughin, r. dobbs, c. roxburgh,
and a. h. byers, ‚Äúbig data: the next frontier for innovation,
competition, and productivity,‚Äù mckinsey global institute (mgi),
tech. rep., may 2011.
[2] d. laney, a. bitterer, r. sallam, and l. kart. (2012, december)
predicts 2013: information innovation. gartner.
[3] w. m. p . van der aalst, process mining: discovery, conformance and
enhancement of business processes . berlin heidelberg: springer-
verlag, 2011.
[4] j. j. thomas and k. a. cook, eds., illuminating the path: the
research and development agenda for visual analytics . ieee cs
press, 2005.[5] d. keim, j. kohlhammer, g. ellis, and f. mansmann, eds., mas-
tering the information age: solving problems with visual analytics .
vismaster, http://www.vismaster.eu/book/, 2010.
[6] m. de leoni, m. adams, w. m. p . van der aalst, and a. h. m. ter
hofstede, ‚Äúvisual support for work assignment in process-aware
information systems: framework formalisation and implementa-
tion,‚Äù decision support systems , vol. 54, no. 1, pp. 345‚Äì361, 2012.
[7] w. m. p . van der aalst, m. de leoni, and a. h. m. ter hofstede,
computational intelligence . nova publisher, 2012, ch. 8: process
mining and visual analytics: breathing life into business process
models, pp. 107‚Äì138.
[8] m. de leoni, j. buijs, w. m. p . van der aalst, and a. h. m. ter
hofstede, ‚Äúfacilitating process analysis through visualising pro-
cess history: experiences with a dutch municipality,‚Äù eindhoven
university of technology, tech. rep. bpm-12-24, 2012.
[9] c. chen, information visualization: beyond the horizon . springer-
verlag, new york, inc., 2006.
[10] r. spence, information visualization: design for interaction , 2nd ed.
harlow, england: pearson education limited, 2006.
[11] g. alonso and c. hagen, ‚Äúgeo-opera: workÔ¨Çow concepts for
spatial processes,‚Äù in ssd‚Äô97: proceedings of the 5th international
symposium on advances in spatial databases , ser. lecture notes in
computer science, vol. 1262. springer verlag, 1997, pp. 238‚Äì258.
[12] d. kaster, c. bauzer-medeiros, and h. v . da rocha, ‚Äúsupporting
modeling and problem solving from precedent experiences: the
role of workÔ¨Çows and case-based reasoning,‚Äù environmental
modelling and software , vol. 20, no. 6, pp. 689‚Äì704, 2005.
[13] b. sch ¬®onhage and a. eli ¬®ens, ‚Äúmanagement through vision: a
case study towards requirements of bizviz,‚Äù in avi 2000: in-
ternation conference of information visualisation . ieee computer
society, 2000, pp. 387‚Äì392.
[14] d. oelke, c. ming, c. rohrdantz, d. keim, u. dayal, h. lars-erik,
and h. janetzko, ‚Äúvisual opinion analysis of customer feedback
data,‚Äù in proceedings of the ieee symposium on visual analytics
science and technology (ieee v ast 2009) . ieee, 2009, pp. 187‚Äì
194.
[15] d. keim, t. nietzschmann, n. schelwies, j. schneidewind,
t. schreck, and h. ziegler, ‚Äúa spectral visualization system
for analyzing financial time series data,‚Äù in proceedings of
the eurographics/ieee-vgtc symposium on visualization (eurovis
2006) . eurographics association, 2006, pp. 195‚Äì200.
[16] h. ziegler, t. nietzschmann, and d. keim, ‚Äúrelevance driven
visualization of financial performance measures,‚Äù in proceedings
of the eurographics/ieee-vgtc symposium on visualization (eurovis
2007) . eurographics association, 2007, pp. 19‚Äì26.
[17] p . bak, f. mansmann, h. janetzko, and d. keim, ‚Äúspatio-temporal
analysis of sensor logs using growth ring maps,‚Äù ieee transac-
tions on visualization and computer graphics , vol. 15, pp. 913‚Äì920,
2009.
[18] d. keim, ‚Äúvisual exploration of large data sets,‚Äù communications
of the acm , vol. 44, pp. 38‚Äì44, 2001.
[19] m. krstajic, e. bertini, and d. a. keim, ‚Äúcloudlines: compact
display of event episodes in multiple time-series,‚Äù ieee transac-
tions on visualization and computer graphics , vol. 17, no. 12, pp.
2432‚Äì2439, december 2011.
[20] j. kehrer and h. hauser, ‚Äúvisualization and visual analysis
of multifaceted scientiÔ¨Åc data: a survey,‚Äù ieee transactions on
visualization and computer graphics , vol. 19, no. 3, pp. 495‚Äì513,
2013.
[21] w. aigner, s. miksch, w. m ¬®uller, h. schumann, and c. tominski,
‚Äúvisualizing time-oriented data-a systematic view,‚Äù journal on
computers and graphics , vol. 31, no. 3, pp. 401‚Äì409, 2007.
[22] c. w. g ¬®unther and w. m. p . van der aalst, ‚Äúfuzzy mining: adap-
tive process simpliÔ¨Åcation based on multi-perspective metrics,‚Äù
ininternational conference on business process management (bpm
2007) , ser. lncs, vol. 4714. springer-verlag, 2007, pp. 328‚Äì343.
[23] j. li, j.-b. martens, and j. j. van wijk, ‚Äúa model of symbol
size discrimination in scatterplots,‚Äù in proceedings of the sigchi
conference on human factors in computing systems (chi ‚Äô10) .
acm, 2010, pp. 2553‚Äì2562.
[24] j. heer and g. robertson, ‚Äúanimated transitions in statistical
data graphics,‚Äù ieee transactions on visualization and computer
graphics , vol. 13, no. 6, pp. 1240‚Äì1247, november 2007.
[25] a. dix, j. e. finlay, g. d. abowd, and r. beale, human-computer
interaction , 3rd ed. prentice hall, 2003.