received 30 june 2022, accepted 20 july 2022, date of publication 25 july 2022, date of current version 29 july 2022.
digital object identifier 10.1 109/access.2022.3193507
discovering system dynamics simulation models
using process mining
mahsa pourbafrani
1and wil m. p. van der aalst
2, (fellow, ieee)
1process and data science group, rwth aachen university, 52074 aachen, germany
2fit gmbh, 53757 sankt augustin, germany
corresponding author: mahsa pourbafrani (mahsa.bafrani@pads.rwth-aachen.de)
funded by the deutsche forschungsgemeinschaft (dfg, german research foundation) under germany's excellence strategy  exc 2023
internet of production- project id: 390621612. we also thank the alexander von humboldt (avh) stiftung for supporting our research.
abstract process mining techniques are able to describe and model real processes using historic event
data extracted from the information systems of organizations. later, these insights are used for process
improvement. for instance, discrete event simulation (des) uses process models that are able to mimic
real-world events. however, the aggregated performance status of processes over time reveals various hidden
relationships between process variables. coarse-grained process logs are sets of performance variables over
steps of time, generated using event data from processes. the coarse-grained process logs describe processes
at higher levels. system dynamics completes process mining by capturing the relationships between various
process variables at a higher level of abstraction. in this paper, we propose a new framework for capturing
conceptual models of processes using transformed event data. the main idea is to automatically discover
the underlying relations as equations. this allows us to generate system dynamics simulations of processes.
we employ a variety of statistical and machine learning techniques to discover the hidden relationships
between process variables. the framework supports the simulation modeling task in the context of system
dynamics simulations. the experiments using real event logs demonstrate that our approach is able to
generate valid models and capture the underlying relationships.
index terms process mining, scenario-based predictions, system dynamics, what-if analysis, simulation,
event logs, coarse-grained process logs.
i. introduction
historical data of executions of processes stored in infor-
mation systems provide a valuable source of knowledge for
improving processes inside organizations. running business
processes consist of different events that shape the event
data. process mining is a set of data-driven techniques for
unlocking the power of event data in organizations [1]. it pro-
vides a variety of insights into processes, such as discovering
process models, determining whether the discovered models
and event data are aligned [2], and revealing performance
and bottleneck analysis [3]. these process views in different
aspects should be put into action, i.e., the discovered status of
the associate editor coordinating the review of this manuscript and
approving it for publication was jesus felez
 .a process and its problems should be addressed w.r.t. process
improvement.
process mining has proven its ability to deliver backward-
looking insights, but there is a growing demand for forward-
looking insights that can be used to change processes.
all techniques in process mining that intend to undertake
future analysis are referred to as forward-looking techniques.
we divided them into two categories: simulation and predic-
tion techniques. the mainstream forward-looking techniques
in process mining are also at a detailed level, e.g., predict-
ing the remaining time of a case using machine learning
techniques [4] or simulating processes in detail [5]. simula-
tion techniques are well-known forward-looking techniques
that were introduced into the process mining eld 15 years
ago [6]. discrete event simulation (des) is a commonly
used approach to play-out process models at a detailed
volume 10, 2022this work is licensed under a creative commons attribution 4.0 license. for more information, see https://creativecommons.org/licenses/by/4.0/78527m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 1. the transformation of fine-grained event logs into coarse-grained process logs, where the steps are time steps, e.g., days, rather than
individual events.
level [7]. simulation models and simulation outcomes are
both improved by using process mining approaches such
as [8]. however, at detailed levels, some aspects of a process
remain concealed and can only be captured at a higher level of
aggregation. the impact of strategic and high-level decisions,
as well as external factors such as resource expertise, are, for
example, overlooked [9].
in contrast to discrete event simulation or other detailed
modeling techniques that are based on individual entities,
system dynamics techniques are based on aggregation, e.g.,
the number of people or products per day [10]. these tech-
niques are able to cover a wide range of effects, including
human factors, and model nonlinear relations at an aggre-
gated level [11]. system dynamics tends to describe and
capture a system using its variables and the underlying effects
among them. such approaches seek to provide a holistic
model of a system that incorporates all possible effective
variables in the system over steps of time [12]. however, most
simulation-based approaches, including system dynamics,
highly rely on users and their understanding of the system.
given that system dynamics simulation models can capture
the relationships between external components and integrate
different business processes using intermediate variables,
system dynamics simulation models aim for higher levels
of simulation for decision-making in the context of business
processes. for example, the impacts of marketing department
actions such as advertisements or human resource department
actions such as hiring are not directly part of the business
processes. however, any decision may change and affect
the business processes. the number of produced items can
change over time by dening the hiring rate as a variable and
modeling its effect over time on the number of resources in
the process. as a result, system dynamics simulation models
can capture these effects and assist decision makers and
business owners in the business process.
the proposed approach in [12] transforms detailed event
data of processes (ne-grained event logs) into aggregated
event logs (coarse-grained process logs) as presented infigure 1. the coarse-grained process logs, i.e., a collection
of measurable aspects from an event log, are referred to as
system dynamics logs (sd-logs) since they are used for
designing and generating system dynamics models. table 1
presents different levels of capturing a process: (1) ne-
grained event logs as standard event logs that steps are events,
and (2) coarse-grained process logs as sd-logs that the
steps are a period of time (time steps). each level can be
used for different simulation techniques, as proposed in [13],
where the results of the coarse-grained simulations are used
to update processes at detailed levels and later simulate the
des models at operational levels. performing activity test
for patient p335 by resources lisaat a specic timestamp is
an event in common event logs, referred to as ne-grained
event logs. when simulating at the detailed level, each step
of the simulation is to generate such events. while a single
patient is not the focus of coarse-grained process logs, the
number of patients tested per day is. while simulating at the
higher level, the number of patients is considered, and each
simulated value is the value of that variable per day.
then, the designed models are populated with the values
of these measurable aspects in sd-logs. afterward, the val-
idation step is performed to measure the similarity of the
generated results by the models with the real values in the
sd-logs. the proposed framework is shown in figure 2.
in this paper, the focus is on the model creation steps
and making these steps data-driven to support users. we pro-
pose a data-driven framework that exploits statistical and
machine learning techniques to capture processes at a higher
level as causal-loop diagrams (cld) in system dynamics.
causal-loop diagrams are the system dynamics representa-
tions of systems, where system variables and their nega-
tive/positive relations are shown and designed based on the
user's domain knowledge. the data-driven clds are used to
support high-level simulation modeling. the main focus is
to determine relationships between process variables and for-
mulate corresponding equations. we enhance the presented
approach in [14] by utilizing data and automating the cld
78528 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
table 1. the presented terms in the paper w.r.t. simulation and event data. a process can be simulated at different levels of granularity using different
levels of data. sdis an example of high level simulation of processes using system dynamics.
figure 2. an overview of the proposed framework, integrating process mining and system dynamics in order to design valid models to enable
scenario-based prediction of business processes [15]. the emphasis of this paper is on the highlighted step, model creation. the introduced
process mining and system dynamics concepts (bottom) are exploited in the sd model generation section.
generating process. our approach enables the construction
of process system dynamics models to be supported. the
generated models are data-supported, including mathemati-
cal relationships between process variables, i.e., equations.
therefore, assessing the potential effects of future changes in
business processes is possible. the validity of the designed
system dynamics models for the processes and the improve-
ment in what-if analysis results are shown using real event
logs.
a. structure of the paper
to explain the approach, we expand on the relationships and
positions of the introduced concepts in sections iiiandiv.
first, we dene event logs, where events are the components
of event logs. then, system dynamics notations and concepts
regardless of process mining context are explained using
an example. furthermore, the required notations of cld
and sfd, which are the purpose of the paper to generate
data-driven causal-loop diagrams and later support design-
ing stock-ow diagrams, are explained. from this point, the
dened event logs are used to generate the presented sd-logs
in denition 9. the techniques are applied to the generated
sd-logs as a dataset and, using algorithm 1and the dened
methods inside, the results are transformed into the dened
form of cld on the basis of the denition of cld.
the remainder of this paper is organized as follows.
we present related work for using system dynamics and
process mining in section ii. in section iii, we introducebackground concepts and basic notations used throughout the
paper. in section iv, we present our main approach, including
the detailed design and implementation steps. we evaluate the
proposed approach in section v. section viconcludes our
work and discusses potential directions for future work.
ii. related work
various approaches provide backward-looking process min-
ing techniques for analyzing event data of processes. most
of the techniques in the process discovery and conformance
checking areas are derived from the general approaches pro-
posed in [1]. process enhancement approaches are also pro-
posed and widely employed in practice [16]. it encompasses
a wide range of analyses, from performance and bottleneck
analysis to process improvement.
multiple data science methods are used in order to support
the process improvement aspects, such as simulation and
prediction. statistical analysis and machine learning tech-
niques have been introduced in the eld of process mining
for different purposes. for instance, in [4], lstm networks
are used to predict the remaining time and the next activity
of process instances. in [17], the clustering techniques with
the goal of process discovery and decision mining on top
of the features are exploited. moreover, multiple approaches
address the simulation of business processes using process
mining insights [7] uses the provided insight at an instance
level to generate a simulation model for a business pro-
cess. in [8], the authors employ process mining techniques
volume 10, 2022 78529m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
to design the detailed simulation model of a process while
employing hyperparameters to discover the best simulation
settings.
however, the majority of the provided techniques either
blindly use all the extracted features from event data as inputs
to machine learning techniques or extract the features at the
instance level, i.e., single cases in a process matter. since
the provided insights in backward-looking process mining are
mainly at the detailed level, the actions taken for simulations
and predictions are also mainly at the detailed level.
recent approaches have tried to capture different aspects
of processes and add process context into the simulation
and prediction techniques in process mining. for instance,
in [18], the performance spectrum is proposed to be used for
monitoring the real-time analysis of processes and, to some
extent, using the aggregated variables such as queue concepts
in the process. in [19], the importance of the current workload
for handling cases in a process is presented as one of the deter-
mining factors besides the detailed information of a single
process instance. in addition to the necessity to incorporate
process context and higher levels of aggregation into forward-
looking approaches, external variables, such as the effects of
human or legal aspects on simulation results, should not be
overlooked.
the requirement at the decision-making level for consid-
ering different actors and analyzing the future of processes at
an aggregated level makes techniques such as system dynam-
ics a suitable tool for modeling business processes, which
we employ system dynamics technique to achieve this goal.
in addition to the level of the simulation models, the design
of reliable models and the validity of their results can be
supported with the process mining techniques and the existing
historical data as used in discrete event simulation in process
mining and decision support systems on the basis of process
mining [20]. therefore, we identify the tools and techniques
based on their capabilities that are used to full this aim
w.r.t. the motivation of this research, i.e., combining process
mining and system dynamics.
system dynamics is able to model the behavior of a sys-
tem in terms of system variables over steps of time [11].
in business process management, system dynamics modeling
is used to simulate business processes [21]. the authors
in [22], performed a case study to show the use of both pro-
cess mapping and system dynamics modeling in improving
business processes. system dynamics modeling has also been
used in supply chain management [23]. these approaches are
based on conventional modeling and are based on the user's
domain knowledge to model the systems. in [14], a differ-
ent type of simulation for business processes using system
dynamics is proposed. system dynamics is used in the new
approach in process mining to model processes at different
levels. the goal is to look for the hidden relations inside the
processes. the process variables are dened and extracted
at a higher level, e.g., the average daily arrival instances
in the process. furthermore, the clarity of relationships and
the ability to track the effect of changes in the process aresignicant advantages of simulation models in process min-
ing over training machine learning black box models. the
proposed approach in [14] uses aggregated process variables
over steps of time and discovers the linear and nonlinear
relations between the variables. this framework reveals the
effects of the variables on each other and generates causal-
loop diagrams.
the proposed framework in [12] is capable of covering
all possible process variables from an event log based on
process mining general insights, such as a bottleneck in one of
the organizations. the size of the time window in which the
variables are calculated is also inuential when generating
simulation models of processes at aggregated levels. the
designed framework in [24] returns the best time window
using time series analysis and training different models over
steps of time for the possible time windows in the process,
e.g., day. the sd-log generation, time window selection,
and the relation detection modules are implemented in [25].
based on the existing work, we provide a framework for
not only automatically conceptualizing aggregated processes,
i.e., causal-loop diagrams (cld), but also for providing
underlying equations that enable the generation of aggregated
simulation models, i.e., stock-ow diagrams (sfd).
iii. preliminaries
in this section, we dene basic concepts for process mining
and system dynamics, as well as the functions that are used
in the proposed approach.
a. process mining
process mining uses past executions of processes in the form
of event logs. an event log captures events that include
case id, timestamps, activity, resource, and other possible
attributes, e.g., case type. in denition 1, we introduce event
logs as a set of events. the majority of process mining
approaches dene event logs as multisets of traces. since
our focus is on simulation and transforming the event logs
into different levels and then breaking down the event logs
over time, the events are considered the main components
of the event logs. it should be noted that it reects the same
concept, and this form of denition is considered for design
and implementation of the approach.
denition 1 (event log): let c;a;randtbe the uni-
verse of cases, activities, resources, and timestamps, respec-
tively. an event is a tuple ed(c; a;r;ts;tc), where c2c is the
case identier, a2a is the corresponding activity for the event
e, r2ris the resource, t s2tis the start time, and t c2tis the
complete time of the event e. we call dcartt
the universe of events. projection functions, cv!c,
av!a,rv!r,tsv!t andtcv!t are
dened for attributes of events. events are unique given their
attributes, and an event log l is a set of events, i.e., l .
for event log l,ps(l)dmin
e2lts(e) and
pc(l)dmax
e2ltc(e) return the minimum start timestamp and
maximum complete timestamp in l, respectively. a sequence
78530 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
table 2. a part of a sample event log. each event is presented in a single row, with the case id, activity, resource, and start and complete timestamps.
of events with the same case identier and ordered in time
represents a process instance, i.e., a trace. table 2 represents
a part of a sample event log for the process of requesting a
loan in a nancial company. for instance, the event e1rep-
resents that the activity initiate request (a) was started at
timestamp 10:30:52 02.03.2020 (ts) by resource john (r) and
was completed at timestamp 11:02:00 02.03.2020 (tc) for a
customer with case id 154 (c). the sequence of events for
the same customer w.r.t. start time is referred to as a trace in
the process, e.g., the sequence of activities for case id 154 is
initiate request, check request, assess the credit, decide, and
accept the request.
b. system dynamics
system dynamics techniques are employed in order to model
complex systems and the relationships between system vari-
ables and their environments. these techniques are used to
model systems with various types of internal and external
interactions, information feedback, and effect/change rela-
tions. the modeled systems using system dynamics tech-
niques are able to capture the effects of decisions and applied
strategical changes on the systems [26].
1) causal-loop diagram
in system dynamics, systems or the corresponding prob-
lems/scenarios can be visualized in order to illustrate the
cause and effect relations between the system variables. a
causal-loop diagram (cld) is one of the representative
techniques that shows constituent components and their inter-
actions, i.e., directions of relations and whether they are
positive or negative. therefore, it is possible to understand
the behavior of the systems over time [27].
clds are sometimes considered a qualitative
representation of a system [10]. we dene clds formally
in denition 2. clds are directed graphs including nodes,
i.e., systems' variables, and arcs, i.e., their relations.
the idea behind clds is to capture the feedback loops
(positive/negative effects) inside a system.
figure 3shows a cld modeling the covid-pandemic. the
example is just for illustration purposes and does not reect
reality.
denition 2 (causal-loop diagram): let vbe the uni-
verse of variables. let v vbe the set of variables for a
system, rvv be the set of directed links, and function
vr!fc; gspecies the labels of the directed links,
i.e., eithercor . cldd(v;r;)is a causal-loop diagramof the system. the cld is represented visually as a graph
where v are nodes, r vv are the arcs and the labels of
arcs are specied by function . a directed link rd(v; v0)2r
connects nodes v and v0using a directed arc.
figure 3depicts a sample cld with six variables, such as
r1d(number of covid deaths, number of vaccinated people)
and(r1)d c, which indicate that the number of covid
deaths has a positive effect on the number of vaccinated
people. the label of the arc means that if the number of
covid deaths increases or decreases, so will the number of
vaccinated people, i.e., they will change in the same direction.
given the fact that a cld represents the effects of a sys-
tem's variables on each other, the dependent and indepen-
dent variables of the system can be extracted. independent
variables can be from the environment of the system and are
not affected by other system variables, e.g., cold weather in
figure 3. consider the number of people applying for a loan
per day. it can be an independent or dependent variable w.r.t.
the system, e.g., the policy of the company. when it is not
inuenced by other variables, such as assigned resources, it is
independent. however, when there is an advertisement policy
in the company based on the revenue and the previously pro-
vided loan, the number of people applying for loans per day is
a dependent variable. we use the dependent and independent
variables later to discover the equations inside the simulation
models.
we consider variables to be independent with respect to the
discovered and provided evidence in the data in our approach,
and it is limited to domain knowledge about the system. as a
result, as shown in the example of the advertisement policy,
the dependency might exist but was not detected by the data
or the user. since the goal is to provide data-driven modeling,
when we refer to variables being independent, we rely on the
data and existing domain knowledge.
denition 3 (dependent and independent variables):
letvbe the universe of variables, v v be the set of
variables of a system, and r vv be the set of
relations between variables in a cldd(v ;r;). we dene  !vdfv2vjvd;g as the set of independent variables
wherevdfv02vj(v0;v)2rg.  !v is the set of variables
not inuenced and affected by the other variables directly,
i.e., these have no incoming arcs in the cld. we also
dene  vdvn  !v as the set of dependent variables that are
inuenced and affected at least by one variable.
for the sample cld in figure 3,  !vd{cold weather}
and  vd{number of vaccinated people, number of infected
volume 10, 2022 78531m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 3. a sample causal-loop diagram (cld) capturing the effects of different factors (variables) on each other, e.g., the
negative sign indicates that if the number of vaccinated people increases, the number of infected people decreases.
people, number of people in icus, ...}. cold weather as
an independent variable is not affected by other variables in
the dened cld but is able to affect the number of infected
people.
2) stock-flow diagram (sfd)
the main focus of system dynamics simulation is accumu-
lation behavior in the system w.r.t. stocks. system dynamics
aims to simulate systems at an aggregated level, therefore,
the notations of stocks (accumulative over time) and ows
(adding/removing to the stock over time) are introduced.
stock-ow diagrams (sfds) are designed to add the math-
ematical equations for calculating and simulating the value
of stocks over time [28].
to design the sfd for the purpose of simulation, every v2
vincldd(v;r;) should be assigned to one of the types
of elements in sfd, s(stocks), f(flows), or a(auxiliaries).
each element is dened as follows [26]:
stocks are variables that accumulate over time and are
represented numerically. their values are increased or
decreased as a result of inows and/or outows. stocks
can only be changed through inows and outows.
flows are rate-based variables, such as monthly income,
which can be considered as ows that can add to or
subtract from stocks.
auxiliaries are additional variables that can have static
values or change over time. they represent system com-
ponents whose values are inuenced by other system
components or inuence others.
in addition to the types of elements, the types of relations
between pairwise elements in an sfd are either informa-
tion dependencies (i ) or items/materials ows (m ). system
dynamics rules indicate a couple of constraints on the types
of relations as indicated in [10], e.g., variables only inuence
variables or ows using information dependencies. we elab-orate on the constraints in the generating stock-ow diagram
step.
denition 4 (stock-flow diagram): a stock-ow
diagram (sfd) is a tuple (a;s;f;i;mapf )where
vda[s[f is the set of pair wise disjoint system variables,
s6d ; are stocks, f are ows, and a are auxiliaries.
mapfvf!ss is the function that denes ows of
items/materials between two stocks, and i v(f[a)
are the information dependencies. we denote
 2s to be the
stock representing the system boundary.
each type of sfd element introduced in denition 4is
visualized with a specic shape, see figure 4. table 3 presents
the sets of elements in the example sfd in figure 4. sdf
 ,
number of people in icus, number of vaccinated people, ....g,
fdfnumber of infected people per week, death rate, ... g, and
adfcold weatherg are the set of stocks, ows, and variables,
respectively. (cold weather, number of infected people per
week)2i is an information dependency where the value of
variable cold weather affects the value of ow number of
infected people per week. also, mapf (number of infected peo-
ple per week)d(
 , number of people in icus) represents the
ow of items/materials that are added from the environment
to the number of people in icus, e.g., the weekly rate of
infected people, which adds to the number of people in icus.
the information dependencies and items/materials ows in
the sfd are taken from relations (r) in the corresponding
cld. note that auxiliaries only inuence auxiliaries or ows
using information dependencies, and ows cannot inuence
other ows using items/materials ows [28].
since system dynamics simulates the system over specic
steps of time, variables in each step have values that can
be updated in the next step. for a given cld and the cor-
responding sfd, the underlying equations are indicated in
denition 5. inserting the underlying equations makes the
quantitative simulation of sfds possible. note that, given
the fact that values of stocks are accumulative values of the
ows inuencing them over time, we distinguish among the
78532 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 4. an example stock-flow diagram (sfd) for the given cld in figure 3. for a better visualization, environment shape is presented multiple times
as the representor of outside and environment of the system.
table 3. sets of elements in the example sfd in figure 4. the stocks (s ), flows (f ), auxiliaries (a), and the information dependencies (i ) are specified.
underlying equations of stocks and other variables (ows and
auxiliaries).
denition 5 (underlying equations): for a given
cldd(v;r;) and its corresponding
sfdd(a; s;f;i;mapf ), we dene the underlying equations
as follows, where v irepresents the real/simulated value
of variable v2v at i2n1(a step of time) and
vdfv1;:::; vjgis the set of variables that affect the value of
v:
if v=2s then v ideqv(:), where function eqv(:)calcu-
lates the value of variable v 2v at time step i based on
previous/current values of variables in v.
if v2s, v idvi 1c6(vj;v)2m((vj;v))vj
ifor i1,
where v 0is considered as a given initial value for v2s,
and mdrni.
in each step, values of stock-ow elements get updated
based on the current/previous values of the other elements
that inuence them. for instance, equation 1 andequation 2
illustrate the underlying equations in the sample sfd in
figure 4. at time step i, e.g., fourth week, the number of
people in icus is equal to the number of people already in
icus, plus the difference of the number of infected people
per week and the death rate at time i, e.g., fourth week. note
that the values of the number of infected people per week and
thedeath rate are rate-based and dependent on the time step
(i), e.g., per week.
number of people in icus i
dnumber of people in icus i 1c(number of infected people per week i death rate i)
(1)
death rate i
dnumber of people in icus i10% (2)
3) generating stock-flow diagram (sfd)
to convert a cld to an sfd, the rst step is to label the cld.
there are different strategies to label a cld [29], we start
with labeling the stocks and ows. then, given the stocks and
ows, the ows of items/materials and information depen-
dencies are identied. note that labeling the variables for
sfd should be done based on the domain knowledge of users.
denition 6 (labeled cld): let v 2vbe the set of a sys-
tem's variables, rvv be the set of relations between
the variables, and vr!fc; gpresents the labels of
relations. for a cld (v;r;), v is partitioned into three
disjoint sets of stocks s, ows f, and auxiliaries a based on
the type of variables, i.e., v da[s[f. we denote a cld
with the labeled sets of variables and relations to be a labeled
cld, i.e., cld0d(a; s;f;r;).
for the presented cld in figure 3, the result of the rst
step for generating labeled cld is presented in table 3. after
assigning vto three different sets of elements, s,f, and a,
the relations in rshould be examined and divided into iand
m.ris divided into two subsets of ows of items/materials
mand information dependencies iwhere mdr\(fs) and
idrn(fs). infigure 3, (number of infected people per
week, number of people in icus) 2mis an items/materials
volume 10, 2022 78533m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
table 4. based on the assigned labels of every v;v02vand the link
rd(v;v0)2r, the following constraints and modifications are required.
xindicates that it is possible to directly keep the r. black cells show the
relations that are not possible. for (s; s0) and (a; s) as an information
dependency between two stocks or information dependency between
auxiliary variables and a stock, further refinement is required.
ow since number of infected people per week 2fand
number of people in icus2 s. so far, we have labeled clds
with the set of elements in sfd relations, but one more step
is required to ensure that the labeling adheres to the system
dynamics criteria. the constraints supplied in table 4 are
taken into account while generating the models.
a: sd constraints check
the given constraints in denition 4for the relations between
elements of a stock-ow diagram should be considered while
separating mfrom r. the main relationships are taken from
generated clds and the rest are built on top of them. there-
fore, some mentioned constraints, such as auxiliary vari-
ables are not being able to affect stocks directly, should be
double-checked after assigning the stocks and ows roles.
intable 4, the possibility of types of relations (i orm) is
mentioned after assigning stocks and ows. for instance, it is
not possible to have an items/materials ow from a stock
to an auxiliary variable. however, information dependency
is possible between two stocks, given the fact that model
renement is required. table 4 provides the guidelines for
potential model renements.
consider the presented example in figure 3 where the
modeling is started by dividing the variables in the cld
into three sets of stocks, ows, and auxiliaries, see table 3.
the next step is to check the constraints on the set of
items/materials ows and information dependencies. for
instance, rd(number of covid deaths, number of vaccinated
people)2ris an information dependency, i.e., it affects the
number of vaccinated people but does not directly add to the
number of vaccinated people. as shown in figure 5, a ow
is inserted (insf ). flowefdvaccination rate is added and as
a result r1d(number of covid deaths, vaccination rate) and
r2d(vaccination rate, number of vaccinated people) are gen-
erated and inserted into r. therefore, the set of relations (r),
ows (f ), information dependency i, and items/materials
ows (m ) are updated as follows: r0d(rnfrg)[fr 1;r2g,
f0df[fefg,i0di[fr 1g, and m0dm[fr 2g. two notations
in the constraint check step are the representors of potential
actions, as followsv
when there is a relation between two stocks, and it is
an information dependency, or from auxiliary to a stock,insf insert a ow to comply with the sfd restrictions,
see the example in figure 5.
when there is a relation of the type of information
dependency between two stocks, insm inserts a ow
directly between the two stocks. for instance, in fig-
ure 5, a ow can also be directly inserted between the
number of covid deaths and the number of vaccinated
people, indicating that one adds to the values of the other.
given a labeled cld0, the corresponding sfd should be
generated, where the transformation is dened in deni-
tion7. it is important to note that system dynamics diagrams
are clds and sfds, and we dene and utilize the labeled
clds only for concrete transformations of clds to sfds.
denition 7 (sfd generation): an sfd
(a;s0;f;i;mapf )is dened based on the labeled
cld0d(a; s;f;r;)of a system where s0dfsg[f
g,
idrnfs, and mdr\(fs). for f2f, we dene
function mapf to represent the items/materials ows as
followsv
mapf (f)d(s;s0)if9s;s02sv(f;s)2m^(f;s0)2m^
((f;s))d ^((f;s0))dc.
mapf (f)d(s;
 )if9ws2sv(f;s)2m^((f;s))d .
mapf (f)d(
;s)if9ws2sv(f;s)2m^((f;s))dc.
b: simulation-ready sfd
after designing the cld of a system and the corresponding
sfd, the following steps are required to make the designed
sfd ready to be simulated. by simulating the sfd, the values
get updated at each step of time based on the sd-logs and the
underlying equations.
indicating the size of time steps for updating the values
of variables, e.g., one day, and the number of steps to be
simulated, e.g., set the simulation duration to 30 days.
inserting the underlying equations and the initial values
for the stocks and dependent variables  v.
specifying the values of independent variables  !vwhich
can be static values or can be set as external values from
outside the system, e.g., temperature per day which is
not getting affected by other system variables.
the concept of delay in sfds, in which the value of a
variable is updated after a couple of steps by other variables,
is considered in denition 5by using the previous values
at different steps of time in the underlying equations. for
instance, the effect of the invested budget on the advertise-
ment will appear after 6 months, i.e., the number of new
customers per months will only increase 6 months after the
advertisement. it means that 6 steps of a time delay of effects
when the time window is considered to be one month.
for the provided example and the designed sfd model,
if we simulate the designed model using a week as the time
window and simulate it for a couple of weeks, the results of
the simulation for some variables are presented in table 5.
the values of variables in each week are either calculated
based on the previous values of other variables, i.e., using the
equations, or come from domain knowledge and historical
78534 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 5. after labeling the example cld in figure 3, an example of changing the cld to the sfd while checking constraints is shown. the detected
constraint, i.e., information dependency between two stocks, is addressed utilizing the function insf to incorporate vaccination rate as a flow (left arrow).
the conversion to an sfd using definition 7 is also shown by the right arrow.
table 5. a part of sample simulating the presented example in figure 4. the time window is one week and the results includes 3 weeks and 4 variables.
information, e.g., the weather in each week. this example
result indicates the format of the system dynamics simulation
results and how we have to transform ne-grained event
logs into coarse-grained process logs. we need to dene
process variables considering event log attributes, which are
extractable over aggregate windows of time, such as a week
here. we elaborate on the sd-log generation in section iv-a.
c. prediction methods
the analysis of sequences of real values and/or sequences
of tuples of real values is often referred to as statistical and
machine learning techniques [30]. the specic techniques
to generate/predict the next values based on the previous
values of inuential variables are irrelevant to our approach.
we use possible methods that allow us to select the most
accurate models. furthermore, machine learning techniques
that act as black boxes and do not provide the underlying
equations are not used, e.g., neural networks. we consider
a list of possible models that can be trained using a data
set of values and be represented as equations, e.g., different
types of regression models, multivariate autoregressive, and
curve tting methods [31]. therefore, the existing variables
and their coefcients in the trained model are used to rebuild
the equations. we propose a generic denition of a prediction
method in denition 8.
we categorize the statistical and machine learning tech-
niques that we use based on the types of relations and equa-
tions that they are capable of discovering. the rst category is
linear equations, including regression models, and the second
category is nonlinear equations, including curve tting and
support vector machines techniques [31].
denition 8 (prediction methods): let x be a matrix rep-
resenting the values of variables for the set of variables v
over steps of time. x is used as our training set. the values of
variable vj2v are in the jthcolumn in x which is a vector ofvalues over steps of time. j
x(:)is a trained prediction model
which predicts the values of variable vj, given the training set
x. we denote ivjto be the set of variables used by j
x(:).
for instance, a simple linear regression model generates
the values of observations of variable vjfor the given matrix of
variables' values (x ). to measure the accuracy of the trained
prediction method for a variable, we use mean absolute
error (mae). for each set of observations of variables in x
and the corresponding generated observations of vj(ovj), the
generated values are compared with the real observations, i.e.,
mae (vj;ovj)dpn
id1jvj
i ovji
vj
ij.
iv. generating system dynamics models of
business processes
in this section, we explain our main approach for the gen-
eration of system dynamics models from ne-grained event
logs. as figure 6 illustrates, we transform an event log into a
sequence of measurable performance variables representing
the process at a higher level, referred to as sd-logs. the
performance questions in the context of scenario-based anal-
ysis are obtained during the preprocessing step. for example,
how does an increase in the number of arrivals inuence
the average waiting time in the process? then, over time,
we extract the possible measurable variables associated with
the questions. the sd-log is formed by the computed val-
ues of these parameters throughout the selected time period.
sd-logs are a good t for creating aggregated process mod-
els (clds). later, the simulation models of the generated
clds in the form of sfds are designed and used for per-
forming decision-making scenarios and capturing the effects
of changes in processes over a period of time.
compared to conventional modeling approaches that let
users design the relations between the process variables, our
approach is based on exploiting the generated sd-logs to
detect possible relationships between the process variables.
volume 10, 2022 78535m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 6. the main approach includes the sd-log generation, relation detection, and the discovery of the type and direction of
the relations. our approach generates causal-loop diagrams (cld) of a process over time and supports transforming them into
stock-flow diagrams (sfd).
however, using the discovered relations in practice for per-
forming a quantitative simulation requires knowledge about
the type and direction of the relations, e.g., the number of
infected people per day affects the arrival rate of the hospitals,
not vice versa. a relation between two variables has three
aspects: a type, a direction that indicates which variable
affects the other, and a time step where the effect of one is vis-
ible on the other. the type of relation can be positive/negative
linear/nonlinear. for instance, there is a strong relationship
between the values of the arrival rate per hour and the average
waiting time per hour in a process. the type of this relation
can be negative/positive and linear/nonlinear. the direction of
the effect is from arrival rate to average waiting time, which
means the hourly arrival rate inuences the hourly average
waiting time. meanwhile, the effect of increased arrivals may
only be visible with some delay, e.g., after a couple of hours
in the average waiting time, which shows the direction of
relations in time.
in order to identify the type and direction of relations,
we use multiple statistical and machine learning methods
to automatically search for the possible equations. these
equations dene the values of one variable based on the
values of other variables over time. the equations indicate
the direction of the relations and their types. discovered
directions are used to build the system dynamics simulation
models. first, a conceptual model (cld) is generated, andafter inserting the values from sd-logs and the discovered
equations, the ready-to-simulate models (sfd) are formed.
the abstract steps of the approach for detecting the relations
between variables are as follows:
1) the corresponding sd-log is generated, given an event
log and a time window.
2) the correlation of the values over time with other
variables is assessed for each variable in the corre-
sponding sd-log. it should be noted that the variables'
lagged correlation is also investigated to see whether
the strongest relationship existed in the shifted time
window.
3) each variable's strong relationships are extracted.
4) given a set of relations for each variable, different
models are trained to predict the values of the variables,
and the best equations are chosen based on prediction
error.
5) the chosen equation for each variable demonstrates
the existing strong relationships between the variables
and their signs, i.e., the signs are derived from the
coefcients.
6) the nal set of relations is created and can be converted
into clds to support sfds later on.
step 1 is explained in detail in section iv-a. steps 2 to
5 are the abstract level of the presented algorithm 1 where the
78536 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
function to detect and discover the relations is denition 11
(step 2 and 3) and denition 10used for shifting the variables
values. section iv-c represents step 6. to demonstrate the
approach, we use a real-world event log of a business process,
i.e., bpi challenge 2017, as an example throughout this
section. the example provided in section iiiwas intended
to demonstrate the system dynamics concepts in general.
a. preprocessing
in this section, we describe the sd-log generation step in
detail and prepare the generated data for training models to
identify the equations. we change the perspective and level
of describing a process to a quantitative and aggregated level.
we dene aggregated variables over a certain length of time
(2n) instead of extracting and computing process variables
at the instance level. we dene and extract variables that
describe the process over time, such as the average arrival
rate of cases per day. the new coarse-grained process log is
referred to as an sd-log. denition 9denes the sd-log,
which is generated given an event log, a set of aggregated
process variables, and a time window.
1) sd-log generation
an event log is the starting point of any analysis in process
mining. therefore, the possible process variables are highly
dependent on the available data in the event log. in our
approach, we consider the basic attributes of event logs,
which are dened in denition 1. hence, time-related perfor-
mance variables w.r.t. events, cases, resources, and activities,
e.g., the average service time of a case/activity per day, can
be generated [12].
table 6 represents the possible combination of mathematic
aggregation functions, process aspects, and performance indi-
cators that can be extracted from a standard event log. for
example, applying the average function (af daverage) to
the number (indnumber ) of activities (atdactivity) in
an event log is not possible. the valid combinations form the
set of process variables vto generate coarse-grained process
logs.
consider that the rst event in the event log (l ) intable 2
w.r.t. timestamp starts at time ps(l), and the last event is
completed at time pc(l). given a time window 2n0, there
arekddp c(l) ps(l)=esubsequent time steps in the event
log for the time window .
for all the aggregation functions (af) , the set of per-
formance indicators (in), and the set of process aspects
(as). the set of process variables is the set of valid tuples.
we denote vdafinasbased on table 6. given the
dened variables, the calculation per each time window in
the event log is implemented. for instance,pjlj
id1pc(i) p s(i)
jljis
how the value of average time in the process for cases based
on tuple (average, time in process, case) is calculated in each
time window, i.e., the event log is divided, and the value is for
each part. ps(i) and ps(i) are the start time of case iand
complete time of the cases, respectively. lis the set of casesin the event log l, andjljis the number of cases in the event
log.
the performance indicators are designed to be compre-
hensive to cover all the possibilities. therefore, the service
time is the time between the start and complete timestamp,
the waiting time is the time between the complete timestamp
of the previous activity and the start timestamp of the next
activity, and the time in the process is the aggregation of
waiting and service time. note that if the aggregation function
sum is considered, then the overall time for each of the
performance indicators is calculated over each period of the
time.
given event log l, set of variables vas can be dened
based on table 6, and a window , the event log is transformed
into an sd-log, dened in denition 9.
denition 9 (sd-log): let l be an event log, v be
a set of process variables, 2nbe the selected time win-
dow, and kdd(pc(l) p s(l))
ebe the number of time steps in
the event log w.r.t. . the sd-log of l and is sd l;2
f1;:::; kgv!r0, i.e., sd l;(i;v)represents the value
of the process variable v2v in the ith-time window (1ik).
iflandare clear from the context, we omit them and
write sd. given sdandv2v, we write5v(sd)2rreturning
the sequence of values hx1;:::; xkifor variable v. further-
more,ireturns the ithvalue in a sequence, for instance,
i(5v(sd))dx i.
each process variable is mapped onto a sequence of real
numbers, and each real number is computed over the event log
and focuses on the valid combination of aspects, performance
indicators, aggregation function, and a time window, e.g., the
number of arrived cases in one day. consider figure 1 where
we project an event log to a xed period of time and for each
period calculate the process variables.
figure 7shows the meta model of sd-logs. an sd-log
has one or more process variables, and one or more time
steps, and for each process variable at a time step there is one
value. the details of the selection and calculation of process
variables are presented in [12].
the sample generated sd-log for the event log bpi chal-
lenge 2017 [32] is shown in table 7. the arrival rate, average
service time, nish rate, and the number of unique resources
are the process variables. the values of the process variables
are calculated per day, i.e., d1 day.
2) sd-log preparation
the presented values of process variables in sd-logs are
used to discover their possible relations and underlying math-
ematical equations. therefore, the quality of the data deter-
mines the accuracy of the discovered equations and relations.
furthermore, as proposed in [24], the time steps in which the
process does not have executions are detected. to do so, time
series models such as arima models are applied to the pro-
cess variables in the generated sd-logs. based on the best-
trained model, i.e., the minimum error, the regular patterns
of process variables are discovered. for the details of the
approach, we refer to [24]. the unexpected inactivity steps
volume 10, 2022 78537m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
table 6. using various aggregation functions (af) on performance indicators (in) for various aspects (as). the possible combinations marked as true. ?
denotes that no aggregation function is used.
figure 7. the coarse-grained process logs meta model process logs consist of process variables and time steps. each process variable
and specific time step has one value. the process variables are a combination of different aggregation functions, aspects, and
performance indicators.
table 7. a part of an sd-log generated for the general process of bpi challenge 2017 event log over daily time window for 5 steps (day). the sd-log
includes 5 process variables, e.g., number of cases in the process.
in the process are removed, i.e., no weekends or lunchtime,
which directly reduces the anomaly and potential noise within
the real-world data. when generating the sd-logs, regular
inactivity of a process is also taken into account, e.g., in a
business process with 5 working days, for d1day, the
corresponding rows for the weekends, such as 6thand 7th
rows, are removed.
b. data-supported relation discovery
without considering the historical executions of processes,
a sample cld can be designed with background knowledge
for the whole process, such as figure 8.as a process expert, the list of process variables is con-
sidered, and the relationships between them are later dened
based on experience and common sense. these are the rela-
tionships that are always observed and examined in simula-
tion models of business processes that have more cases in
the process, longer queues, and thus a longer average waiting
time.
for instance, it is expected that the average service time
affects the nish rate as shown with the negative sign ( ),
or that an increase in the arrival rate per step of time will
increase the number of cases in the process shown by c.
the provided information supports the generation of these
78538 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 8. the designed conceptual model for the general process using common senses, e.g., the increase in the arrival rate per day will
increase the number of cases waiting in the process. the cld is designed in conventional modeling for the overall process, however, the
data extracted from the event log can reject these hypotheses, e.g., the arrival rate does not have any effects on the number of cases in
the process per day.
figure 9. a sample example of the shift function and finding the best
shift function to check the lagged correlation between values of two
process variables. in this example, the shift size of one is checked to see
whether there is a high correlation between the values of v1and the
values of v2in the second time step.
models. it results in valid models ensuring that all the possible
relations presented in previous executions of processes are
captured.
1) potential relation detection
to generate a cld of a process based on the provided
sd-logs representing the process or examine the user-based
generated cld, the fact that process variables affect each
other over time is used. to do so, the rst step is to identify the
relationships between variables and the type of relations. cal-
culating the linear and nonlinear correlation between values
of the variables in sd-logs is the backbone of discovering
any possible relations. in our approach, both linear and non-
linear correlations using pearson correlation anddistance
correlation techniques in [33] are calculated.
the effect of changes in one of the variables can be seen
after a couple of steps, e.g., the effect of an increase in the
number of arrived cases per hour will appear after 3 steps oftime (3 hours) in the average waiting time of the customers.
these delays of effects in time indicate other properties of
the detected relations that we refer to as a shift in time. the
shift function in denition 10shifts the values of every two
sets of variables. the function is used to identify the best shift
size in time using the dened fbsfunction in denition 11.
the best size of shifting values of variables represents the
strongest relations between the shifted values of variables
and the direction of relations in time, i.e., shift size. we
demonstrate an example regarding the concept of shift and
nding the best shift size functions in figure 9.
it is necessary to preserve a sufcient number of values
corresponding to time steps when assessing the relations
between the values of variables at different steps of the time.
assume s2nas the maximum possible shift in the time
windows to look for the cause and effect between process
variables where sk(1 sd),sdis the minimum percentage
number of values that we are willing to use, and k2nis the
number of values for each variable presented in the sd-log.
denition 10 (shift function): let s2n be the
maximum possible shift. we dene function shiftiv
rr!rr, such that for a given shift size
0is, shifts the values of two sequences for i
steps. for 1dhx1
1;:::; x1
ki2r;2dhx2
1;:::; x2
ki2r
and shift i, shifti(1;2)d (01;02)where
01dhx1
1;:::; x1
k ii;02dhx2
ic1;:::; x2
ki.
consider v1and v2as the arrival rate and
the number of waiting cases per day, for the
shift size of i, shifti(5v1(sd);5v2(sd))d
(h1(5v1(sd));:::; k i(5v1(sd))i;hic1(5v2(sd));:::;
k(5v1(sd))i).
note that kd j5v1(sd)j d j5v2(sd)j. in table 7, for
instance,5v1(sd)dh36; 33;85;68;99;:::i and5v2(sd)d
h9;0;62;46;62;:::i are the values of two variables v1d
arrival rate andv2dnish rate, applying shift2will result
inh36;33;85;68;99;:::i, andh62;46;62;:::i, for v1and
v2, respectively.
volume 10, 2022 78539m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
denition 11 (find the best shift): function corr vr
r![ 1; 1]calculates the correlation between two
sequences of real values. let s2n be the maximum shift
size, we dene fbs svrr!n to return the best
possible shift size. function fbc svrr![ 1; 1]
returns the maximum value of correlation between two
sequences for the given maximum shift size s2n. for
1;22r, fbc s(1;2)d(corr (shiftfbss(1;2)(1;2))),
where corr (shift(1;2))is the correlation and
fbss(1;2)dargmax
0s(corr (shift(1;2))) returns the
best shift size.
it should be noted that the max andargmax functions
return a set of values if there is more than one maximum
value. in this case, we consider the highest correlation value
with the smallest shift. for instance, for v1darrival rate
andv2daverage waiting time as two process variables in an
sd-log, fbs(5v1(sd);5v2(sd))d3 shows that the values of
variables have the maximum value of correlation after 3 shifts
in steps, e.g., the value of waiting time per hour is highly
correlated with the number of the arrived cases from the
previous 3 hours.
2) real relation detection
calculating the correlation identies potential relationships
between variables. assessing the correlation among variables
shows whether a relationship exists or not. the direction of
effect, i.e., which variable inuences the others, is not clear.
the method in denition 8 is a general form of describing
the predictive methods that can be applied to a set of values
to predict the values of one of them using others. these
methods enable us to nd the possible existing quantitative
relations between the variables, i.e., the underlying equations,
and their directions. note that in models based on curve
tting, the interaction with the user is introduced in order
to identify the potential relations, e.g., quadratic shape, and
later the algorithm automatically ts the curve and measures
the error. the complete relation detection module is then
formed using the discovered relations based on the equations,
as demonstrated by algorithm 1. the inputs of algorithm 1
are the corresponding sd-log sdl;and the list of variables
inside sdl;asvfor a given event log land time window .
algorithm 1 starts with an sd-log of a process along with
the maximum shift size s2n and a threshold to consider a
relation between two variables strong ( rel). in the relation
detection algorithm for each pair of parameters in the sd-
log, the shift function is applied repeatedly, bounded by
the maximal possible shift s. the maximum value of the
correlation is compared with the threshold relto assess how
strong the relationship is. therefore, the relation is considered
as a potential relation inside the process.
for instance, for the process variable, arrival rate in the
algorithm, there is a high correlation between the average
waiting time and the arrival rate, i.e., fbcsdc0:8 and fbssd0,
the average waiting time is added to the set of inuential vari-
ables (relations) for the arrival rate. fbssd0 indicates that thealgorithm 1 relation detection algorithm
input: the set of process variables vand the
corresponding sd-log sd
input: maximum possible shift s, the threshold of a
strong relation rel, and the set of prediction
models8
output: the set of discovered relations r
1create a set of relations r;
2foreach vm2vdo
3 foreach vn2vdo
4 bsdfbs s(5vm(sd);5 vn(sd));the best
shift size
5 corrdfbc s(5vm(sd);5 vn(sd));the
highest correlation value
6 ifcorrrelthen
7 add (vn;bs) to the relation's set for vm;
8 else
9 return null;
10 end
11 end
12 foreach prediction model28do
13 train prediction model forvm;
14 return the trianed model (vm
sd(:));
15 predict values of vm(ovm);
16 add mae (vm;ovm) to the set of errors for
prediciton models for vm;
17 end
18 return the set of variables in the training model
(ivvm) with the minimum errors;
19 foreach v2ivvmdo
20 add (v; vm) into r;
21 end
22end
23return r;
maximum correlation is in the same time window and without
any shift. later in algorithm 1, the set of related variables to
the arrival rate is used to train different statistical and machine
learning models (8) where the one with minimum prediction
error is selected as the prediction model for that variable.
number of case in process i
d0:72arrival rate i 1:2unique resources i(3)
the variables inside the selected equations for each vari-
able form the real relations, their types, and directions. for
instance, consider equation 3 to be the discovered equation
for the variables number of cases in the process in the exam-
ple bpi challenge 2017 event log. therefore, algorithm 1
will return (arrival rate; number of cases in the process) 2r
as one of the real relations indicating that the arrival rate inu-
ences the number of cases in the process in a positive manner.
note that bidirectional relations between two variables are
possible to appear in the nal list of relations. we will discuss
78540 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 10. the steps in model generation phases starting from an event
log to the final simulation-ready sfd model.
such bidirectional relations while generating the clds in
section iv-c.
the variables inside the selected equations for each vari-
able form the real relations, their types, and directions. con-
sider the discovered equation for the variables number of
cases in the process in the example bpi challenge 2017 event
log, equation 3. as a result, algorithm 1 will return (arrival
rate, number of cases in the process)2 ras one of the real
relations, indicating that the arrival rate has a positive inu-
ence on the number of cases in the process. note that bidirec-
tional relations between two variables are possible to appear
in the nal list of relations. we will discuss such bidirectional
relations while generating the clds in section iv-c.
denition 12 (retrieve variables of relations): let vbe
the universe of variables, vvbe the universe of relations.
for r2vv, set(r)retrieve the set of variables in r. for
example, given rd(v1;v2), set(r)dfv1;v2g.
it is possible that not all the variables in the set of process
variables vare in the selected relations. consider the number
of unique resources to be xed throughout the time steps.
therefore, there is no relationship with other process vari-
ables. we need to retrieve the set of variables in the discovered
relations rfor the cld generation. we use function deni-
tion 12 to retrieve variables in the model generation phase.
c. model generation
we discovered all the strong relations among the process
variables supported by their real values. these relations are
the representation of the process conceptual model over time.
we use the cld notation of system dynamics to demonstrate
the process at an aggregated level. a cld of a process illus-
trates the conceptual model of the process, cldd(v;r;).
the next step is to design the sfd representing the pro-
cess based on its cld, i.e., conceptual model. therefore,
process variables and their relations in the cld should be
transformed into the elements in the sfd. the steps are
labeling the process variable and the relations, checking the
constraints, and inserting the equations for the simulation.
figure 10 as an overview represents the steps to move from
the event log of a process and create executable sfd models.
1) generate conceptual model (cld)
the discovered set of relations ras a result of algorithm 1
for an sd-log enables process owners to identify all the
supported relations between the variables. these relations are
directly converted into arcs and the engaged variables in the
sd-log are the nodes in the graph using the dened functionin denition 13. discovered relations between the variables
in sd-log are later used for forming conceptual simulation
models (clds).
denition 13 (generate cld): let cld be the universe
of causal-loop diagrams, and vvbe the universe of rela-
tions. function gencld v2vv!cld generates the
cld of a process given the discovered relations based on
the corresponding sd-log. for the set of discovered relations
rvv, gencld(r)d(v ;r;).vr!fc; g, where
for r2r(r)d  if fbc s(r)<0and(r)dc if fbc s(r)>0,
and vds
r2rset(r).
given set of relations ras the result of algorithm 1, the
set of corresponding process variables v, function gencld
in denition 13, insert a unique node for all vn2v, and for
all the relations (vn;vm)2rform an arc from vnto the vm.
for instance, using the corresponding sd-log of the bpi
challenge 2017 event log with a time window of d1week ,
the designed sample cld in figure 8 by domain knowl-
edge will be changed into figure 11. the presented relations
between the nodes are supported by the real values of their
variables.
it should be noted that cycles and transitive dependencies
in the detected relations are possible. for example, both
directions of the relationship between the arrival rate and
the number of cases in the processes appear in the ras the
set of discovered relations. consider the following ras a
result of algorithm 1: r={(arrival rate, number of unique
resources), (arrival rate, avg time in process), (number of
unique resources, avg time in process), ...}, the transitive
dependency among three variables is implemented to be auto-
matically removed. arrival rate already affects the number
of unique resources, e.g., if more cases arrive, then more
resources are assigned, and the number of unique resources
affects the average time in the process for cases. therefore,
there is no need for a direct relation between the arrival
rate and the average time in the process. however, the user
can decide whether to keep or remove such relations in our
approach. in that situation, the user's domain knowledge,
as well as the higher coefcients in the relations, are consid-
ered to avoid the cycles.
2) generate stock-flow diagram (sfd)
we generated clds of processes automatically, the next step
is to label the generated cld of an sd-log and later convert
it to sfd for simulation purposes. labeling the variables for
sfd is based on the dened assign stocks and flows. it con-
siders the type of the possible extracted variables from event
logs, e.g., time aspect, or number-based values. it is highly
dependent on the scenario of simulation and the variables,
e.g., the number of unique resources, whether it acts as an
accumulative variable can be both stock or auxiliary variable.
a: assign stocks and flows
the values of the process variables in sd-logs and the
possible external factors play decisive roles in assigning the
volume 10, 2022 78541m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 11. the designed conceptual model for the general process of bpi challenge 2017 event log with a time window of one week. the presented
nodes and arcs in the designed cld are supported by the corresponding sd-log, compared to the figure 8 where the cld is designed only based on the
user background knowledge. for instance, the arrival rate has a negative effect on the number of cases in the process according to the extracted sd-log
and trained model.
elements of the stock-ow diagram. these types are based
on different performance indicators (in) used to dene valid
process variables in table 6. the possible types of values are
as followsv
number-based values are potential stocks since their
value can be accumulated over time. they also can play
the role of ows if they add or remove from the other
variables over steps of time.
time-based (duration) values are the possible auxiliary
variables if they do not accumulate or are not considered
to be countable.
for instance, the presented variables in figure 11 can
be assigned to the following sets, sd{number of cases in
process}, fd{nish rate, arrival rate}, ad{number of unique
resources, average service time, ...}. note that the number of
cases in the process can be an accumulative number over steps
of time, and the arrival and nish rates over time add/remove
from that. in this case, (arrival rate, number of cases in
process)2mis an items/materials ow since arrival rate2f
andnumber of cases2s. for (arrival rate, average service
time)2r is an information dependency and cannot be an
items/materials ow based on table 4. furthermore, there is a
link between number of unique resources andnumber of cases
in process, where we assigned it to be a stock. therefore,
such information dependency is not possible, and we need
to insert a ow (insf ) or use the existing one. as a result,
(number of unique resources, nish rate) 2iand(nish rate,
number of cases in process) 2mwill represent the same
relation. clds are automatically generated from algorithm 1
using sd-logs and converted into the labeled cld (cld0)
where the stocks, ows, and auxiliaries are dened based on
the scenario of interest. by applying constraints, sfds are
generated.b: simulation-ready sfds
after assigning the stocks, ows, and auxiliaries and check-
ing the system dynamics constraints, the generated sfds
should be enriched with values and equations for the simu-
lation phase. to do so, three steps mentioned in section iii-b
are performed including specifying the underlying equations
as dened in denition 8:
the used time window to generate the sd-log (sd ),,
is the set to be the time step size for the simulation, e.g.,
hourly, or daily.
to specify the values of independent variables  !v, for
each step (i2n1) the values are taken directly from the
sd-log (sd ) such that for v2  !v,vidi(5v(sd)).
forv2  v, i.e., they have at least one incoming arc or
inuential variable, the values are simulated at each time
step (i) as followsv
ifv2s,vidvi 1c6(vm;v)2m (((vm;v))(vm
i)), where
the initial values for stocks are lled by 1(5v(sd)).
ifv=2s, the discovered equations in algo-
rithm 1 are inserted into the model, i.e., v
sd(:) and
ivvdfvmj(vm;v)2ig.
the designed sfd model can now be executed for the sim-
ulation in sd software where after validation of the results
external variables can be added to the models. the main
purpose of high-level simulation of processes is to perform
the strategical analysis while including external and quality-
based factors. for instance, the effect of training resources
on overall process performance w.r.t. the cost of training can
be modeled as sd with a higher level of condence since
the possible relations are supported by event logs of the
process. another example is the effect of a specic type of
78542 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 12. the screenshot of the tool. the cld generator and the sfd design pages are shown.
figure 13. the discovered cld of the bpi challenge 2017 event log with
1day time window.
advertisement on the overall monthly arrival rate of cases in
the process.
our main goal in this work is to capture processes from dif-
ferent perspectives and at a higher level of aggregation. our
approach generates data-driven clds of processes directly
from their ne-grained event logs. therefore, it is important
to consider that although the majority of the steps from
sd-log to sfd model generation are automated, user inter-
action is still required in modeling tasks, assessing relations,
and inserting the equations.
v. evaluation
the proposed approach is able to generate system dynamics
models of processes given their event logs as an input, as well
as assess the designed models according to the domain knowl-
edge using the event logs. so far, we have presented steps of
the approach in practice while explaining the methods in the
paper. the evaluation has two main goals: (1) to demonstrate
the application of the approach on real data while using the
designed and developed tool, and (2) to demonstrate the use
of system dynamics modeling in addition to the discrete event
simulation technique for business processes. the implemen-
tation of sd-log generation, the equation nder, and the
cld generator are publicly available as an integrated web
application.1
1https://github.com/mbafrani/pmsdwe extended the sd-log generation and the relation detec-
tion only based on correlation as presented in [25], with the
automatic cld generation and designing of sfds. figure 12
shows a screenshot of the web interface of the tool. in addi-
tion to the diagrams shown in the tool, the corresponding
``mdl'' les suited for system dynamics tools and intermedi-
ate results, such as discovered equations, are also generated.
a. tool-supported cld and sfd design for a real
event log
we continue with the provided running example for the
bpi challenge 2017 event log and evaluate the results to
design a simulation model from the sd-logs. by applying
the approach to the sd-logs with a time window of 1 day,
we discover the cld of the process, as presented in figure 13.
the set of discovered relations is used as the input of
gencld. a designed cld representing the conceptual model
of the process in a daily manner is created based on the
detected equations. the outcome of algorithm 1 is presented
in table 8 illustrating the relations between the process vari-
ables. for instance, value c1 in the rst row (arrival rate,
number of cases in process) indicates that there is a strong
positive relationship between the two variables, i.e., with an
increase in the daily arrival rate, the number of cases in the
process per day will also increase.
given the fact that the discovered relations based on the
equations include loops, we have adjusted the relations (val-
ues in parentheses). for instance, based on the best tted
equations, the following relations (edges in the cld) are
discovered: (arrival rate, finish rate), (arrival rate, avg time
in process per case, and (avg time in process per case, finish
rate). in this case, we remove (arrival rate, finish rate) since
the average time in process per case gets affected by the
arrival rate and at the same time affects the nish rate.
having obtained the labeled cld, we transform it to sfd
for simulating and validating the results. to do so, rst,
we start with the stocks and the ows and later form the
relations based on table 4 using functions insf andinsm .
for instance, (number of unique resources (auxiliary), fin-
ish rate (flow))2i is an information dependency, therefore,
it is an arc in sfd, and (arrival rate, number of cases in
volume 10, 2022 78543m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
table 8. the detected relations (edges) in the conceptual model of the bpi challenge 2017 event log using a time window of 1 day. the labeled cld is
generated based on the labeling stocks and inflows and outflows shown in the table.
table 9. the modified equations by the user which are inserted into the sfd. note that the arrival rate and the number of unique resources are
considered to be independent variables, and their values get updated for each simulation step from the sd-log.
figure 14. the designed sfd for bpi challenge 2017 event log with the time window of 1 day.
process)2m is an items/materials ow. the designed sfd is
presented in figure 14.
the underlying equations for the dependent variables rep-
resented in table 9 are used to make the designed sfd exe-
cutable. note that, as mentioned, adjustments to the equations
are made. we run the simulation for 150 days and compare
the results for the dependent variables, such as number of
cases in process with the real values in the sd-log, see
figure 15. it should be highlighted that the discovered rela-
tions, equations, and cld models by the tool are potential
insights into processes that can support the user. they direct
the user on how to model in cases that prospective relations
and equations are detectable using the implemented tech-
niques. furthermore, despite discrete event simulation, whenmodeling a process using system dynamics, the effects of
variables are important. for instance, in [34], we were able
to compare the des simulation results and real event logs
at the ne-grained levels, i.e., at case and event levels. for
coarse-grained process simulation, the trends of the values
are considered, not the exact values of the simulation.
b. the use of system dynamics in practice: model
refinement
the extracted process variables are highly related to the
provided information and attributes in the event logs. in most
cases, the ultimate goal is to assess the effects of other vari-
ables on the process at a higher level. these variables are
78544 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 15. the comparison between real and simulated variables using the generated models based on sd-logs for bpi challenge 2017 with a
time window of 1 day. the left graph represents the values of number of cases in the process over 150 days. the right graph represents the
values of finished cases over the 150 days.
either external, i.e., not captured in the processes' event logs,
or are hard to quantify, such as expertise of resources. our
presented approach enables the business owner to discover
the relations between the existing process variables (based on
event logs) and form aggregated simulation models.
at this step, the validity of the models can be evaluated
using the sd-logs and real values of process variables. then,
the valid models can be extended with different inuential
variables and what-if analyses can be performed. we do so
for the sample sfd models of the bpi challenge 2017 event
log. we extend that with external factors to see their real
effects on the process. the model is shown in figure 16.
the model exploits the effects of advertisement on the arrival
rate of the cases (effect of advertisement, expected arrival
rate), which the advertisement effects itself are also affected
by the productivity and revenue of the process, i.e., (process
productivity, revenue), and (revenue, advertisement budget
ow). moreover, the effect of the number of desired nished
cases per day on the number of required resources is modeled,
where the time to hire new resources is also considered. the
simulation model is executed using the vensim2software.
the represented blue graphs show the simulated values of the
variables. note that variables such as advertisement delay of
effects or time to hire can be adjusted based on the domain
knowledge of the user. also, the effects of the advertisement
budget percentage on the arrival rate of the cases in the
process can be examined.
we proposed a couple of scenarios that use the discovered
model and can be run, including external variables in the
processes. for instance, we designed the model in figure 16
including the resource efciency as external variables. it is
able to simulate and track the effects of changes in the number
of resources dynamically, w.r.t. the arrival rate, the efciency
of resources, and the number of desired nished cases per
day. all of the designed models based on the approach and
the presented tool (pmsd) are available for additional exper-
imentation and evaluation details.3
2https://vensim.com
3https://github.com/mbafrani/pmsd/modelsforevaluationc. discussion
when creating a generic approach for automatic system
dynamics model creation, there are a few aspects to con-
sider: (1) the quality of the data has a signicant impact
on the outcomes of the approach. as a result, most of the
time, anomalies and non-stable behavior in the process make
sd-log extraction challenging, e.g., it is difcult to capture
process variables over certain time steps. (2) since the extra
factors mostly have no data in event logs and only rely on
the user's domain knowledge, it makes it difcult to validate
and compare. however, the base models with the process
variables from sd-logs provide the potential for some level
of condence in the nal models. (3) the application of
statistical and machine learning models might lead to over-
tting and under tting issues. for example, when utilizing
the regression method, there may be overtting of the values,
which is a disadvantage when simulating the values of the
process variables. (4) in some cases, nding the equations
for variables in relation to each other is impracticable. in this
scenario, the user's domain knowledge is required for form-
ing the relations and equations.
the nal results for the decision makers are sfds with
the potential of preforming simulation models and assessing
the effect of variables on each other. there might be some
conditions in which rening the baseline models based on
the extracted process variables is not possible. this can affect
the applicability of the discovered sfds. the purpose of this
approach is not to make the modeling task completely auto-
matic, since that contradicts the system dynamics principle.
in system dynamics modeling and system thinking, capturing
and simulating systems w.r.t. quantitative and external factors
at higher levels is the main focus. therefore, the role of
the user in modeling still remains vital. consider that the
discovered loops and transitive relations in clds, as well as
adjusting and forming the equations, are decided by the user
given the scenarios of the simulation and states of processes.
it is not a drawback but should be noticed.
as discussed, the sfd modeling task is user-dependent and
comes from the scenarios that one is interested in. what we
provide is the support for revealing the existing insights in the
volume 10, 2022 78545m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
figure 16. the extended sfd model is based on the evaluated model. it includes the effects of advertising based on the production rate and the
arrival rate, as well as dynamic resource allocation in the process.
historical data considering the scenario. in our evaluation as
a proof of concept, we address inserting domain knowledge
into the sfd modeling task by considering one specic sce-
nario, i.e., a what-if question. then, develop the sfd on the
basis of those questions. for example, in figure 16, we devel-
oped a model to answer the questions, what are the effects of
the advertisement budget on the arrival rate of the process
and how does it affect the number of required resources,
which is also dependent on the hiring time?. the number of
rejected and handled cases (nished) is investigated, while
two external factors of the advertisement and hiring process
are considered. these models can be dynamically exploited
by decision makers to nd the desired balance of resources
and advertisement budget with respect to the efciency of
their process, e.g., the number of accepted and rejected
cases.
the core objective of our approach is to demonstrate the
capability of modeling processes using system dynamics
at various levels and to supplement modeling tasks with
real-world process data in the form of event logs and process
mining techniques. the identied relationships in the form of
clds illustrate the causes and effects of the process variables
on one another. this insight is used to identify the problem-
atic process factors as well as the effective components that
have to be investigated at the decision-making level while
considering multiple factors outside business processes. for
instance, the effects of the number of unique resources per
day on the average time that cases spend in the process can
be discovered and later used to improve the process. another
point to emphasize is that whereas traditional process simu-
lation, such as detailed simulation using des models, tries to
mimic the details of the process and provide as close to theexisting event data as possible, the goal of aggregated process
simulation is to nd the direction and high-level effects.
vi. conclusion
process owners require a platform to run what-if analyses for
their processes. process mining provides them with a wide
range of techniques to discover the current status of their pro-
cesses, which can be combined with simulation techniques
for the scenario-based analysis of processes. using simula-
tion techniques system dynamics and process mining, we pro-
posed an approach to support system dynamics modeling
for business processes. using simulation techniques system
dynamics and process mining, not only can the hidden under-
lying effects and relations at the instance level be detected,
but also the existing equations that are used in the simulation
models are discovered. extracting higher levels of variables
on top of event logs enables us to form aggregated simulation
models that are able to consider external factors outside the
process, e.g., the sickness rate of employees as resources in a
process. as demonstrated by the evaluations, our approach is
capable of uncovering hidden relations and constructing valid
simulation models in which domain knowledge can also be
applied. the presentable underlying equations between the
process variables are discovered. in cases where discovering
exact equations is not possible, we intend to incorporate the
values generated by the taught machine learning algorithms
into the models as our next step. we can ensure that possible
relationships between the variables are captured. further-
more, there are established scenarios for business processes
that can be designed and used as default system dynamics
models of processes, in which users are able to adjust them
to their own scenarios.
78546 volume 10, 2022m. pourbafrani, w. m. p. v. d. aalst: discovering system dynamics simulation models using process mining
acknowledgment
the funding is both from internet of production and
alexander von humbold.
references
[1] w. m. p. van der aalst, process miningdata science in action, 2nd ed.
springer, 2016.
[2] j. carmona, b. f. van dongen, a. solti, and m. weidlich, conformance
checkingrelating processes models. springer, 2018.
[3] w. van der aalst, a. adriansyah, and b. van dongen, ``replaying history
on process models for conformance checking and performance analysis,''
wires data mining knowl. discovery, vol. 2, no. 2, pp. 182192, 2012.
[4] n. tax, i. verenich, m. la rosa, and m. dumas, ``predictive business
process monitoring with lstm neural networks,'' in proc. int. conf. adv.
inf. syst. eng. springer, 2017, pp. 477492.
[5] a. rozinat, m. t. wynn, w. m. p. van der aalst, a. h. m. ter hofstede,
and c. j. fidge, ``workow simulation for operational decision support,''
data knowl. eng., vol. 68, no. 9, pp. 834850, sep. 2009.
[6] w. m. p. van der aalst, ``process mining and simulation: a match made
in heaven!'' in proc. 50th comput. simul. conf., (summersim), bordeaux,
france, jul. 2018, pp. 14.
[7] a. rozinat, r. s. mans, m. song, and w. m. p. van der aalst, ``discovering
simulation models,'' inf. syst., vol. 34, no. 3, pp. 305327, may 2009.
[8] m. camargo, m. dumas, and o. gonzález-rojas, ``automated discovery
of business process simulation models from event logs,'' decis. support
syst., vol. 134, jul. 2020, art. no. 113284.
[9] w. m. p. van der aalst, ``business process simulation survival guide,'' in
handbook on business process management 1: introduction, methods,
and information systems, 2nd ed. springer, 2015, pp. 337370.
[10] b. dangereld, ``discrete-event simulation and system dynamics for man-
agement decision making,'' wiley, chichester, u.k., tech. rep., 2014,
pp. 2951.
[11] j. sterman, system dynamics: systems thinking and modeling for a com-
plex world. cambridge, ma, usa: massachusetts institute of technology.
engineering systems division, 2002.
[12] m. pourbafrani and w. m. p. van der aalst, ``extracting process features
from event logs to learn coarse-grained simulation models,'' in advanced
information systems engineering (lecture notes in computer science),
vol. 12751. springer, 2021, pp. 125140.
[13] m. pourbafrani and w. m. p. van der aalst, ``hybrid business process
simulation: updating detailed process simulation models using high-level
simulations,'' in research challenges in information science (lecture
notes in business information processing), vol. 446. springer, 2022,
pp. 177194.
[14] m. pourbafrani, s. j. van zelst, and w. m. p. van der aalst, ``supporting
automatic system dynamics model generation for simulation in the context
of process mining,'' in business information systems (lecture notes in
business information processing), vol. 389. springer, 2020, pp. 249263.
[15] m. pourbafrani, s. j. van zelst, and w. m. p. van der aalst, ``scenario-
based prediction of business processes using system dynamics,'' in proc.
move meaningful internet syst., conf. confederated int. conf., (coopis,
odbase, c&tc), rhodes, greece, oct. 2019, pp. 422439.
[16] m. dees, m. de leoni, and f. mannhardt, ``enhancing process models to
improve business performance: a methodology and case studies,'' in proc.
otm confederated int. conf. move meaningful internet syst. springer,
2017, pp. 232251.
[17] m. de leoni, w. m. p. van der aalst, and m. dees, ``a general process min-
ing framework for correlating, predicting and clustering dynamic behavior
based on event logs,'' inf. syst., vol. 56, pp. 235257, mar. 2016.
[18] v. denisov, d. fahland, and w. aalst, ``multi-dimensional performance
analysis and monitoring using integrated performance spectra,'' in proc.
icpm doctoral consortium tool demonstration track co-located with
2nd int. conf. process mining (ceur workshop), padua, italy, vol. 2703,
oct. 2020, pp. 2730. [online]. available: ceur-ws.org
[19] z. toosinezhad, d. fahland, o. koroglu, and w. m. p. van der aalst,
``detecting system-level behavior leading to dynamic bottlenecks,'' in
proc. 2nd int. conf. process mining (icpm), oct. 2020, pp. 1724.
[20] c. fleig, d. augenstein, and a. maedche, ``designing a process mining-
enabled decision support system for business process standardization in
erp implementation projects,'' in business process management forum
(lecture notes in business information processing), vol. 329. springer,
2018, pp. 228244.[21] l. an and j.-j. jeng, ``on developing system dynamics model for
business process simulation,'' in proc. winter simul. conf., dec. 2005,
pp. 20682077.
[22] d. e. bowles and l. r. gardiner, ``supporting process improvements
with process mapping and system dynamics,'' int. j. productiv. perform.
manage., vol. 67, no. 8, pp. 12551270, nov. 2018.
[23] b. j. angerhofer and m. c. angelides, ``system dynamics modelling in
supply chain management: research review,'' in proc. winter simul. conf.,
2000, pp. 342351.
[24] m. pourbafrani, s. j. van zelst, and w. m. p. van der aalst, ``semi-
automated time-granularity detection for data-driven simulation using pro-
cess mining and system dynamics,'' in proc. conceptual modeling 39th
int. conf. (er), 2020, pp. 7791.
[25] m. pourbafrani and w. m. p. van der aalst, ``pmsd: data-driven simula-
tion using system dynamics and process mining,'' in proc. demonstration
at 18th int. conf. bus. process manage., 2020, pp. 7781.
[26] j. d. sterman, business dynamics: systems thinking and modeling for a
complex world. new york, ny, usa: mcgraw-hill, 2000.
[27] d. meadows, thinking in systems: a primer, d. wright, ed. london, u.k.:
earthscan, 2008.
[28] e. pruyt, small system dynamics models for big issues: triple jump
towards real-world complexity. tu delft library, 2013.
[29] t. binder, a. vox, s. belyazid, h. haraldsson, and m. svensson, ``devel-
oping system dynamics models from causal loop diagrams,'' in proc. 22nd
int. conf. syst. dyn. soc., 2004, pp. 121.
[30] s. makridakis, e. spiliotis, and v. assimakopoulos, ``statistical and
machine learning forecasting methods: concerns and ways forward,'' plos
one, vol. 13, no. 3, mar. 2018, art. no. e0194889.
[31] a. zielesny, from curve fitting to machine learning , vol. 18. berlin,
germany: springer, 2011.
[32] v. dongen and b. f. boudewijn, ``bpi challenge 2017,'' eindhoven
univ. technol., eindhoven, the netherlands, tech. rep., 2017, doi:
10.4121/uuid:5f3067df-f10b-45da-b98b-86ae4c7a310b.
[33] p. schober, c. boer, and l. a. schwarte, ``correlation coefcients: appro-
priate use and interpretation,'' anesthesia analgesia, vol. 126, no. 5,
pp. 17631768, may 2018.
[34] m. pourbafrani and w. m. p. van der aalst, ``interactive process improve-
ment using simulation of enriched process trees,'' in proc. 2nd int. work-
shop ai-enabled process autom., 2021, pp. 115.
mahsa pourbafrani was born in 1989. she
received the b.s. and m.s. degrees in computer
science from the amirkabir university of technol-
ogy, tehran, iran, in 2014. she is currently pursu-
ing the ph.d. degree under the supervision of prof.
wil m. p. van der aalst. she is a research assis-
tant with the data and process science group,
rwth aachen university. her research interest
includes process mining, which employs data sci-
ence methods to turn data into actionable insights.
the actions are taken using simulation, what-if analysis, and predictions
in process mining regarding the performance metrics of processes. she is
also a scientist working on the ``internet of production'' project, which
aims to combine process mining and machine learning techniques to support
operations and decisions in production lines.
wil m. p. van der aalst (fellow, ieee)
is a full professor with rwth aachen univer-
sity, leading the process and data science (pads)
group. he is also the chief scientist at celonis,
part-time afliated with the fraunhofer fit, and
a member of the board of governors of tilburg
university. he has been the unpaid professorship
positions at the queensland university of technol-
ogy, since 2003, and the technische universiteit
eindhoven (tu/e). currently, he is also a distin-
guished fellow of fondazione bruno kessler (fbk), trento, the deputy
ceo of the internet of production (iop) cluster of excellence, and the
co-director of the rwth center for articial intelligence.
volume 10, 2022 78547