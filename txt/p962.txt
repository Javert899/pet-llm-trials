improving process discovery results by filtering
outliers using conditional behavioural probabilities
mohammadreza fani sani, sebastiaan j. van zelst, wil m.p. van der aalst
department of mathematics and computer science
eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
{m.fani.sani,s.j.v.zelst,w.m.p.v.d.aalst}@tue.nl
abstract. process discovery, one of the key challenges in process mining, aims
at discovering process models from process execution data stored in event logs.
most discovery algorithms assume that all data in an event log conform to correct
execution of the process, and hence, incorporate all behaviour in their result-
ing process model. however, in real event logs, noise and irrelevant infrequent
behaviour is often present. incorporating such behaviour results in complex, in-
comprehensible process models concealing the correct and/or relevant behaviour
of the underlying process. in this paper, we propose a novel general purpose ﬁl-
tering method that exploits observed conditional probabilities between sequences
of activities. the method has been implemented in both the prom toolkit and the
rapidprom framework. we evaluate our approach using real and synthetic event
data. the results show that the proposed method accurately removes irrelevant
behaviour and, indeed, improves process discovery results.
key words: process mining process discovery noise filtering outlier de-
tection conditional probability
1 introduction
process mining is a research discipline that is positioned at the intersection of data driv-
en methods like machine learning and data mining and business process management
(bpm) [1]. there are three types of process mining; process discovery ,conformance
checking andprocess enhancement . process discovery aims at discovering process mod-
els from event logs. conformance checking aims at assessing to what degree a process
model and event log conform to one another in terms of behaviour. finally, process
enhancement aims at improving process model quality by enriching them with infor-
mation gained from the event log.
within process mining/process identiﬁcation projects, process discovery is often
used to quickly get insights regarding the process under study [1]. a business process
analyst simply applies a process discovery algorithm on the extracted event log and
analyzes its result. most process discovery algorithms assume that event logs repre-
sent accurate behaviour. hence, they are designed to incorporate all of the event log’s
behaviour in their resulting process model as much as possible.
real event logs contain both noise andinfrequent behaviour [2]. in general, noise
refers to behaviour that does not conform to the process speciﬁcation and/or its cor-2 mohammadreza fani sani et al.
rect execution. examples of noise are, amongst others, incomplete logging of process
behaviour, duplicated logging of events and faulty execution of the process. infrequen-
t behaviour relates to behaviour that may occur, yet, in very exceptional cases of the
process. for example, additional checks may be required when a loan request exceeds
$10:000:000. incorporating noise and/or infrequent behaviour results in complex, in-
comprehensible process models concealing the correct and/or relevant behaviour of the
underlying process. as such, when using process discovery for the purpose of process i-
dentiﬁcation, we are often unable to gain any actionable knowledge by applying process
discovery algorithms directly.
in this paper, we focus on improving process discovery results by applying general
purpose event log ﬁltering, i.e. ﬁltering the event log prior to applying any arbitrary
process discovery algorithm. distinguishing between noise and infrequent behaviour
is a challenging task and is outside the scope of this paper. hence, we consider both
noise and infrequent behaviour as outliers and aim at identifying and removing such
outliers from event logs. we propose a generic ﬁltering approach based on condition-
al probabilities between sequences of activities . the approach identiﬁes whether cer-
tain activities are likely to happen based on a number of its preceding activities. us-
ing the prom (http://promtools.org ) [3] based extension of rapidminer
(http://rapidminer.com ), i.e. rapidprom [4], we study the effectiveness of
our approach, using synthetic and real event data. the results of our experiments show
that our approach adequately identiﬁes and removes outliers, and, as a consequence in-
creases the overall quality of process discovery results. additionally, we show that our
method outperforms other general purpose process mining ﬁltering techniques.
the remainder of this paper is structured as follows. section 2 motivates the need
for general purpose event log ﬁltering methods. in section 3, we discuss related work
and after that, in section 4, we explain our proposed method. details of the evaluation
and corresponding results are given in section 5. finally, section 6 concludes the paper
and presents future work in this domain.
2 motivation
an interpretable process model helps business process analysts to understand what is
going on in event data. however, often process discovery algorithms return results that
are complicated and not understandable, because of outliers within the event logs used.
figure 1 illustrates how the application of ﬁltering greatly reduces the complexity in a
real event log , i.e. the event log of the business process intelligence challenge 2012 [5]
(bpic 2012) . figure 1a shows a process model discovered using the ilp miner of [6]
for this event log, whereas figure 1b shows the result of applying the same process
discovery algorithm on 80% of the most frequent original behaviour.
in process mining, two quality measures are deﬁned for measuring the behavioural
quality of process models, i.e. ﬁtness and precision [7]. fitness computes how much
behaviour in the event log is also described by the process model. on the other hand,
precision measures the amount of behaviour described by the model that is also present
in the event log. the ﬁtness values of figure 1a and figure 1b are 0.57 and 0.46 whereasfiltering outliers using conditional behavioural probabilities. 3
(a) result on whole event log.
 (b) result on 80% of event log.
fig. 1: process models discovered by applying the ilp miner [6] on the bpic 2012 log.
their precision values are 0.68 and 1.0 respectively. thus, the model in figure 1a de-
scribes more behaviour that is also present in the event log, however, in order to do this
it greatly under-ﬁts, i.e. it allows for much more behaviour compared to the model in
figure 1b. as a consequence, the model in figure 1a is overly complex and ambiguous.
the process model in figure 1b, on the other hand, is much simpler while still covering
at least 80% of the observed behaviour in the event log.
in our motivating example, by removing 20% of behaviour, we obtain a simpler
model, i.e. figure 1b that still accurately describes the underlying process. however,
arbitrarily removing behaviour based on frequency is too ad-hoc and does not work
when there is a lot of variety present within an event log, e.g. caused by parallelism.
therefore, we need more advanced ﬁltering methods that take into account and exploit
the actual behaviour described by the event log.
3 related work
in recent years, many process discovery algorithms have been proposed [8–13]. the
ﬁrst algorithms where designed to incorporate all behaviour in the event log [8, 12, 13].
more recently these algorithms have been extended to be able to handle outliers as
well [14, 15]. however, these extended ﬁltering techniques are tailored towards the in-
ternal working of the corresponding algorithm and hence do not work as a general pur-
pose ﬁltering technique. other process discovery algorithms are speciﬁcally designed
to cope with noisy and infrequent behaviour [9, 11]. however, these algorithms do not
result in process models with clear execution semantics. most of commercial process
mining tools using these algorithms and their ﬁltering are based on just the frequency
of activities and their direct relations.
in this paper, we propose to separate concerns , and thus develop a novel, gener-
al purpose ﬁltering technique that pre-processes event logs. in such way, any process
discovery algorithm is able to beneﬁt from effective identiﬁcation and removal of out-
lier behaviour. in the remainder of this section, we focus on techniques developed for
general purpose ﬁltering in the process mining domain.4 mohammadreza fani sani et al.
table 1: overview of ﬁltering plugins in prom .
plug-in applications main method
filter log using
simple heuristicshelpful for removing traces and activities
based on frequency of events or the presence
of certain start/end events.frequency/position
of events
filter log on
event/trace
attributesuseful when we want to just keep events/traces
with speciﬁc attribute values.attribute values
dotted chartallows us to visually select speciﬁc traces in
event logs (usually base on a time frame).time window
transition systems
minerhelpful to project traces/events on speciﬁc
transitions and/or states.frequency of
transitions
filter log using
preﬁx-closed
languageallows us to remove events from traces. rule based
the vast majority of process mining research has an accompanying implementation
in the process mining toolkit prom . most work on general purpose event log ﬁltering
concerns ad-hoc ﬁltering implementations within prom . many of these implementa-
tions are useful when we aim at using speciﬁc subsets of traces/events of an event log
instead of the whole event log. in table 1, the main ﬁltering plugins are listed, accompa-
nied by a brief description of their applications and methods. all plugins take an event
log as an input and return a ﬁltered event log as an output. moreover, they need some
form of domain knowledge to work properly. in addition, typically the user needs to set
one or more (complex) settings. however, they do not support generic outlier detection,
i.e. in cases where we possess no or little domain knowledge.
little research has been done in the ﬁeld of general purpose ﬁltering. in [16] a
graph-based outlier detection method is proposed to detect inaccurate data in an event
log. in [17] a method is proposed that detects non-ﬁtting behaviour based on a given
reference model and then repairs the event log. as we want to improve process discov-
ery results and, in general, we do not have a reference model, this method is not useful
for general purpose ﬁltering. in [18] the authors propose to provide training traces to the
prism algorithm [19] which returns rules for detecting outliers. however, in real event
logs, providing a set of training traces that cover all possible outliers is impractical.
the most relevant research in the area of general purpose log ﬁltering is the work
in [20]. the authors propose to construct an anomaly free automaton (afa) based on
the whole event log and a given threshold. subsequently, all events that do not ﬁt the
afa are removed from the ﬁltered event log. filtering event logs using afa indeed
allows us to detect and remove noisy and/or infrequent behaviour. however, the tech-
nique does not allow us to detect all types of outliers like incomplete traces, i.e. traces
that ﬁt the afa perfectly yet do not terminate properly. incorporation of such behaviour
can still lead to infeasible process discovery results.
finally, separating outliers from event logs and focusing just on them rather than all
behaviour also has been studied [21], however, a detailed treatment of outlier detection
is outside the scope of this paper.filtering outliers using conditional behavioural probabilities. 5
4 filtering with conditional behavioural probabilities
as indicated in section 3, most ﬁltering approaches are not suitable for process discov-
ery because they need additional information like reference model or a set of outlier
traces. furthermore, the afa ﬁlter, which is the most suitable general purpose event
log ﬁlter, has trouble identifying irrelevant infrequent behaviour. therefore, we present
a general purpose ﬁltering method that is able to deal with all types of outliers. the
main purpose of the ﬁlter is to identify the likelihood of the occurrence of an activity,
based on its surrounding behaviour, e.g. how likely is it that activity afollows the se-
quence of activities hb;ci. to detect such likelihood it uses the conditional probability
of activity occurrences, given a sequence of activities. as we just consider a sample of
behaviour in the underlying process, i.e. an event log, all computed probabilities are an
estimation of the behaviour that truly happened. prior to presenting the ﬁltering method,
we present some basic notations used throughout the paper.
4.1 basic notation and deﬁnitions
given a setx, a multisetmoverxis a function m:x!n0. we write a multiset
asm= [ek1
1;ek2
2;:::;eknn], where for 1inwe havem(ei) =kiwithki2n>0.
ifki= 1, we omit its superscript, and if for some e2xwe havem(e) = 0 , we omit
it from the multiset notation. also, m= [ ] is an empty multiset if 8e2x,m(e) = 0 .
we letm=fe2xjm(e)>0g, i.e.mx. the set of all possible multisets over
a setxis written asm.
letadenote the set of all possible activities and let adenote the set of all pos-
sible ﬁnite sequences over a. a ﬁnite sequence of lengthnoverais a function
:f1;2;:::;ng!a , alternatively written as =ha1;a2;:::;aniwhereai=(i)
for1in. the empty sequence is written as . concatenation of sequences 
and0is written as 0. we lethd:an09awith, given some 2a
andk jj,hd(;k) =ha1;a2;::;aki, i.e., the sequence of the ﬁrst kelements
of. note that hd(;0) =. symmetrically tl:an09ais deﬁned as
tl(;k) =han k+1;an k+2;:::;ani, i.e., the sequence of the last kelements of .
again,tl(;0) =. sequence0=ha0
1;a0
2;:::;a0
kiis a subsequence of sequence if
and only if we are able to write as1ha0
1;a0
2;:::;a0
ki2, where both 1and2are
allowed to be , i.e.is a subsequence of itself.
event logs describe sequences of executed business process activities, typically in
context of some case, e.g. a customer or some order-id. the execution of an activity in
context of a case is referred to as an event . events are unique. a sequence of events is
referred to as a trace . a trace projected onto the activities it describes is referred to as
atrace-variant . thus, it is possible that multiple traces describe the same trace-variant,
i.e. sequence of activities, however, each trace contains different events. an example
event log, adopted from [1], is presented in table 2. consider all activities related to
case-id 1 . sara registers a request , after which ali examines it thoroughly . william
checks the ticket after which ava examine causally andreject the request .
deﬁnition 1 (trace, variant, event log). letabe a set of activities. an event log is
a multiset of sequences over a, i.e.l2m(a).6 mohammadreza fani sani et al.
table 2: fragment of a ﬁctional event log (each line corresponds to an event).
case-id activity resource time-stamp
... ... ... ...
1 register request ( a) sara 2017-04-08:08.10
1 examine thoroughly ( b) ali 2017-04-08:09.17
2 register request ( a) sara 2017-04-08:10.14
2 check ticket (d) william 2017-04-08:10.23
1 check ticket (d) william 2017-04-08:10.53
2 examine causally ( b) ava 2017-04-08:11.13
1 reject request ( h) ava 2017-04-08:13.05
... ... ... ...
we abstract from the notion of events in deﬁnition 1. each 2ldescribes an
observed trace-variant whereasl()describes its frequency.
deﬁnition 2 (subsequence frequency). letlbe an event log over a set of activities a
and let2a. the subsequence frequency of w.r.tl, written asfreq(;l), denotes
the number of times occurs as a subsequence of any trace present in l.
given a simple example event log l1= [ha;b;c;di5;ha;c;b;di3], we havefreq(hai;l1) =
freq(;l 1) = 8 ,freq(ha;bi;l1) = 5 , etc.
deﬁnition 3 (conditional occurrence probability). letlbe an event log over a set
of activitiesaand let2abe a subsequence. given some a2a, the conditional
probability of occurrence of activity a, givenandl, i.e.cop (a;;l )is deﬁned as:
cop (a;;l ) =(freq (hai;l)
freq (;l)iffreq(;l)6= 0
0 otherwise
clearly, the value of any cop (a;;l )is a real number in [0;1]. a high value
ofcop (a;;l )implies that after the occurrence of , it is very probable that ac-
tivityaoccurs. for example, cop (a;;l ) = 1 implies that if occurs,aalways
happens directly after it. based on the previously used simple event log, we have
cop (b;hai;l1) =5
8.
4.2 outlier detection
we aim to exploit conditional probabilities present within event logs for the purpose of
ﬁltering event logs. conceptually, after a given subsequence, activities that have a par-
ticularly low cop -value are unlikely to have happened and therefore their occurrence
may be seen as outlier. to account for dependencies between activities and previously
occurred activities at larger distances, we compute cop -values for subsequences of
increasing length.
in our proposed method, for each i2f1;2;:::;kgwe construct a cop -matrix .
assume there are a total of munique subsequences with length 1lkin an
event log. a cop -matrix al
cop for lengthlis simply an mjaj -matrix, where
al
cop(;a) =cop (a;;l ).filtering outliers using conditional behavioural probabilities. 7
algorithm 1 outlier detection algorithm
procedure outlier dtection (l,k,)
computing probabilities :
for(l2f1;:::;kg)do
buildal
cop ,al
eandal
s
filteredeventlog a new empty event log
filtering :
for(2l)do
outlier false
for(l= 1 :k)do
for(subsequence0with lengthland following activity a)do
find corresponding cop (a;0;l)inal
cop ,al
eandal
svalues
if(>cop (a;0;l))then
outlier true
if(outlier =false )then
filteredeventlog addtofilteredeventlog
return filteredeventlog
we additionally compute conditional probabilities for start andendsubsequences
relatively. we let al
sdenote a matrix describing the occurrence probability matrix of
all subseqeunces 0=hd()withj0j=lfor2l. we are able to compute such
probability by dividing the number of traces that start with 0over the total number of
traces in the log. similarly we deﬁne al
edenote a matrix describing the conditional
probability matrix of all subseqeunces 0=tl()withj0j=lfor2lthat is equal
toa=inal
cop . by doing so, we be able to handle outliers which occur in the start
and the end parts of trace.
given our different cop -matrices, and a user-deﬁned threshold , we identify each
entryal(0;a)<  as an outlier. the pseudo-code of detecting outliers is present in
algorithm 1. in this fashion, it is possible to detect outliers that occur in start, middle or
end part of traces. there are two ways to handle detected outliers. we are able to simply
remove the corresponding event from the trace, i.e event-level ﬁltering , or, remove the
trace as a whole, i.e. trace-level ﬁltering . however, removing an improbable event in
a trace may make the trace to have more outlier behaviour. hence, we just focus on
trace-level ﬁltering .
with increasing value of k(maximum length of subsequences), the complexity of
the ﬁltering method increases. the number of different strings we can generate over a
with lengthkis(jaj)kand total possible subsequences for some k:pk
i=1jajiwhere
jajis the number of activities in the l. however, there is no need to compute cop s
of all possible subsequences. for subsequences with length k+ 1, it is sufﬁcient to
just consider 0:haiin levelkthatcop (a;0;l). for example, if at k= 1
cop (c;hbi), there is no need to consider hb;cias a subsequent at k= 2, even
though thecop (a;hb;ci)be higher than .
4.3 implementation
to be able to combine the proposed ﬁltering method with any process discovery algo-
rithm, we implemented the matrix filter plugin ( mf) in the prom framework ( svn.
win.tue.nl/repos/prom/packages/logfiltering ). the plugin takes an
event log as an input and outputs a ﬁltered event log. the user is able to specify thresh-8 mohammadreza fani sani et al.
oldand whether event-level or trace-level ﬁltering needs to be applied. the maximum
subsequence length to be considered also needs to be speciﬁed.
in addition, to apply our proposed method on various event logs with different ﬁl-
tering thresholds and applying different process discovery algorithms with different
parameters, we ported the matrix filter (mf) plugin to rapidprom .rapidprom is
an extension of rapidminer that combines scientiﬁc workﬂows [22] with a range of
(prom -based) process mining algorithms.
5 evaluation
to evaluate the usefulness of ﬁltering outliers using our method, we have conducted
several experiments using both synthetic and real event data. the purpose of these ex-
periments is to answer the following questions:
1. does mfhelp process discovery algorithms to return more precise models?
2. how does the performance of mfcompare to afa ﬁltering method?
to evaluate discovered process models, we use ﬁtness and precision (introduced in sec-
tion 2). there is a trade off between these measures [23]. sometimes, removing a little
behaviour causes a decrease in ﬁtness value, yet increases precision. to strike a balance
between ﬁtness and precision, we use the f-measures metric that combines ﬁtness and
precision:2precisionfitness
precision +fitness. also, ﬁltering time and process model discovery time
in milliseconds have been measured. note that in all experiments, ﬁltered event logs are
only used in the process discovery part. computing the f-measure for all process mod-
els is done using the corresponding raw, unﬁltered event logs. furthermore, we only
consider subsequences with length kin[0;2].
in the ﬁrst experiment we investigate the effect of changing the in the mfthresh-
old on the f-measure w.r.t. different process discovery algorithms. we use the inductive
miner [13] (im) and the ilp miner (ilp) [12]. additionally we assess the interaction
between our ﬁltering technique and integrated ﬁltering within the inductive miner, i.e.
we use the imi variant [14] with noise thresholds 0:1and0:3. we apply these algo-
rithms and ﬁltering methods on the bpic2012 log. the results for this experiment are
shown in figure 2.
in this ﬁgure, each line corresponds to a discovery algorithm. the x-axis represents
the threshold level of mf, they-axis represents the corresponding f-measure. hence,
for each technique, the data point x= 0corresponds to not applying behavioural con-
ditional probability ﬁltering. we thus aim at ﬁnding out whether there exist regions of
threshold values for which we are able to increase the f-measure when applying ﬁlter-
ing. the f-measure of imon this event log without using mfis0:45. however, using
the proposed ﬁlter increases the f-measure of the discovered model to 0:80. even for
imi, which uses an embedded ﬁlter, the mfincreases the f-measure from 0:69and0:7
to0:81. as the ilp miner is more sensitive to outliers, mfhelps more and its enhance-
ment for this algorithm is higher. when increasing the threshold of mfto a value of
0:7or higher, all the traces in the event log are removed and the ﬁtness and f-measure
of the discovered model will equal to 0. the best result, i.e. an f-measure of 0:81, is
achieved by imi with threshold 0:1andmfthreshold of 0:09.filtering outliers using conditional behavioural probabilities. 9
fig. 2: applying process discovery algo-
rithms on the bpic2012 log with differ-
entmfthresholds.
fig. 3: comparing process models discov-
ered by 11 noise thresholds on the bpic
2012 log with/without ﬁltering.
to illustrate the effect of ﬁltering on the discovered process models, in figure 3,
we apply imiwith11internal thresholds ranging from 0:0to0:5on the raw bpic2012
and the ﬁltered event log using mfwith threshold 0:09. here, each circle or square
correspond to ﬁtness and precision values related to one discovered model. a circle is
related to applying mf, whereas squares relate to using the raw event log. as the results
show, mfcauses a little decrease in ﬁtness value, yet yields an increase in precision
value. the average of f-measures when applying no ﬁltering is 0:66versus 0:77in case
ofmf(with threshold 0:09). thus, figure 2 and figure 3 indicate that mfimproves
process discovery results, i.e. the process models have an overall higher f-measure.
in a second experiment, using the bpic2012 and bpic2017 [24] event log, we
additionally assess what the maximal obtainable level of f-measure is for differen-
t process discovery algorithms, using different levels of internal ﬁltering. we computed
f-measures based on the unﬁltered event log, and, maximized the f-measure result for
both mfandafa. with a workﬂow in the rapidminer , for both ﬁltering methods we
ﬁltered the event log using 40 different thresholds. the results are presented in figure 4.
this ﬁgure shows mfallows us to discover process models with higher f-measures.
in figure 5, we compare the average required time of applying the process discov-
ery algorithms with/without ﬁltering methods. in this ﬁgure, the y-axis represents the
time in milliseconds with logarithmic scale. according to this ﬁgure, ﬁltering methods
reduce the required time for discovering process models, because there are fewer traces
in the ﬁltered event logs. although, in afthe discovery time reduction is higher, the
ﬁltering time for this method is much higher than mfmethod. therefore, in general
mfseems to be faster than af.
in the last experiment, to evaluate the ability of our proposed ﬁltering method in
detecting traces that contain outliers and corresponding effects on quality of process
discovery algorithms, we use three synthetic event logs; a12f0n ,a22f0n anda32f0n .
these event logs are manipulated by adding niose with a probability of 0,10,20or50
percent [2]. the last two characters of event log indicate the probability of noise added
to it, for example, a22f0n20 correspond to a22f0n with20% noise probability.
the noisy event logs are used for process discovery and the original synthetic event
logs (free of noise) are used for computing the f-measure. similar to the experiment in
figure 3, the imialgorithm with 11 various internal noise thresholds has been used. we10 mohammadreza fani sani et al.
(a) bpic 2012
 (b) bpic 2017
fig. 4: effect of ﬁltering on best f-measure of discovered models.
fig. 5: average of required time for process discovery with/without ﬁltering
(a)mfona12f0n
 (b)afa ona12f0n
(c)mfona22f0n
 (d)afa ona22f0n
(e)mfona32f0n
 (f)afa ona32f0n
fig. 6: effect of ﬁltering thresholds on f-measures of synthetic event logs. y-axises are
indicating values of best f-measure and x-axises are showing the ﬁltering thresholds.filtering outliers using conditional behavioural probabilities. 11
only show results for the best f-measure obtained. the results of this experiment are
presented in figure 6. according to this ﬁgure, the f-measure of models improves when
applying ﬁltering methods. the improvement is observed to be much more substantial
for event logs that contain more percentage of noise. for the a12f0n event log which
has the simplest structure among these event logs, both methods lead to similar results.
however, for a22f0n , applying mfresults in better f-measures. finally, in a32f0n that
corresponds to the most complex model with lots of parallelism, afa performs better
than mf. this can be explained by the fact that when a lot of paralelism is present, the
conditional probability of non-outlier behaviour is low as well, i.e. parallelism implies
a lot of variety in behaviour. in such situation it seems that using short subsequences
(e.g.k= 1) or using a smaller value is a better choice for mf.
the experiments indicate that the proposed ﬁltering method is useful for process
discovery algorithms and allow us to obtain models with higher f-measure whilst using
a reduced discovery time. hence, this shows that our method tends to outperform state-
of-the-art process mining ﬁltering techniques.
6 conclusion
process discovery is used to extract process models from event logs. however, real
event logs contain noise and infrequent behaviour that hamper the direct applicabili-
ty of existing process discovery algorithms. separating such outliers from event logs
is beneﬁcial for process discovery techniques and helps to improve process discovery
results.
to address this problem, we propose a ﬁltering method that takes an event log as an
input and returns a ﬁltered event log based on a given threshold. it uses the conditional
probability of the occurrence of an activity after a given sequence of activities. if this
probability is lower than the given threshold, the activity is considered as an outlier.
to evaluate the proposed ﬁltering method we developed a plugin in the prom frame-
work and the rapidprom extension of rapidminer . as presented, we have applied
this method on real event logs, and several process discovery algorithms. additionally,
we used the proposed method on three synthetic event logs. the results indicate that
the proposed approach is able to help process discovery algorithms to discover model-
s that strike a more adequate balance between different behavioural quality measures.
furthermore, using these experiments we show that our ﬁltering method outperforms
related state-of-the-art process mining ﬁltering techniques.
we plan to evaluate the effect of using different values of k, i.e. length of subse-
quences. also, other metrics besides the f-measure like simplicity, generalization and
structuredness could be analyzed. we want to apply event-level ﬁltering and also assess
different ways of using .
references
1. van der aalst, w.m.p.: process mining - data science in action, second edition. springer
berlin heidelberg (2016)12 mohammadreza fani sani et al.
2. maruster, l., weijters, a.j.m.m., van der aalst, w.m.p., van den bosch, a.: a rule-based
approach for process discovery: dealing with noise and imbalance in process logs. data
min. knowl. discov. 13(1) (2006) 67–87
3. van der aalst, w.m.p., van dongen, b.f., g ¨unther, c.w., rozinat, a., verbeek, h.m.w.,
weijters, a.j.m.m.: prom: the process mining toolkit. bpm (demos) 489(31) (2009)
4. van der aalst, w.m.p., bolt, a., van zelst, s.j.: rapidprom: mine your processes and not
just your data. corr abs/1703.03740 (2017)
5. van dongen, b.: bpi challenge 2012 (2012)
6. van zelst, s.j., van dongen, b.f., van der aalst, w.m.p., verbeek, h.m.w.: discovering
relaxed sound workﬂow nets using integer linear programming. corr abs/1703.06733
(2017)
7. buijs, j.c.a.m., van dongen, b.f., van der aalst, w.m.p.: on the role of fitness, precision,
generalization and simplicity in process discovery. in: on the move to meaningful internet
systems, otm, springer (2012) 305–322
8. van der aalst, w.m.p., weijters, a.j.m.m., maruster, l.: workﬂow mining: discovering
process models from event logs. ieee trans. knowl. data eng. 16(9) (2004) 1128–1142
9. weijters, a.j.m.m., ribeiro, j.t.s.: flexible heuristics miner (fhm). in: cidm. (2011)
10. van der aalst, w.m.p., rubin, v ., verbeek, h.m.w., van dongen, b.f., kindler, e., g ¨unther,
c.w.: process mining: a two-step approach to balance between underﬁtting and overﬁt-
ting. software & systems modeling 9(1) (2008) 87–111
11. g ¨unther, c.w., van der aalst, w.m.p.: fuzzy mining –adaptive process simpliﬁcation
based on multi-perspective metrics. in: lecture notes in computer science. springer
berlin heidelberg (2007) 328–343
12. van der werf, j.m.e.m., van dongen, b.f., hurkens, c.a.j., serebrenik, a.: process dis-
covery using integer linear programming. fundam. inform. 94(3-4) (2009) 387–412
13. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured process
models from event logs - a constructive approach. in: application and theory of petri
nets and concurrency. springer berlin heidelberg (2013) 311–329
14. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured process
models from event logs containing infrequent behaviour. in: business process manage-
ment workshops. springer international publishing (2014) 66–78
15. van zelst, s.j., van dongen, b.f., van der aalst, w.m.p.: avoiding over-fitting in ilp-based
process discovery. in: bpm. (2015) 163–171
16. ghionna, l., greco, g., guzzo, a., pontieri, l.: outlier detection techniques for process
mining applications. in: ismis 2008. (2008) 150–159
17. wang, j., song, s., lin, x., zhu, x., pei, j.: cleaning structured event logs: a graph repair
approach. in: icde 2015. (2015) 30–41
18. cheng, h.j., kumar, a.: process mining on noisy logs —can log sanitization help to
improve performance? decision support systems 79(2015) 138–149
19. cendrowska, j.: prism: an algorithm for inducing modular rules. international journal
of man-machine studies 27(4) (1987) 349–370
20. conforti, r., la rosa, m., ter hofstede, a.h.m.: filtering out infrequent behavior from
business process event logs. ieee trans. knowl. data eng. 29(2) (2017) 300–314
21. yang, w., hwang, s.: a process-mining framework for the detection of healthcare fraud
and abuse. expert syst. appl. 31(1) (2006) 56–68
22. bolt, a., de leoni, m., van der aalst, w.m.p.: scientiﬁc workﬂows for process mining:
building blocks, scenarios, and implementation. sttt 18(6) (2016) 607–628
23. de weerdt, j., , m., vanthienen, j., baesens, b.: a robust f-measure for evaluating discov-
ered process models. in: proceedings of the cidm. (2011) 148–155
24. van dongen, b.: bpi challenge 2017 (2017)