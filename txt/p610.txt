mining context-dependent and interactive
business process maps using execution patterns
jiafei li1;2, r.p. jagadeesh chandra bose2;3, and wil m.p. van der aalst2
1college of computer science and technology, jilin university, china 130012,
jiafei@jlu.edu.cn,l.j.f.li@tue.nl ,
2eindhoven university of technology, the netherlands
j.c.b.rantham.prabhakara@tue.nl,w.m.p.v.d.aalst@tue.nl
3philips healthcare, veenpluis 5-6, best, the netherlands
abstract. process mining techniques attempt to extract non-trivial
knowledge and interesting insights from event logs. process models can be
seen as the \maps" describing the operational processes of organizations.
unfortunately, traditional process discovery algorithms have problems
dealing with less-structured processes. furthermore, existing discovery
algorithms do not consider the analyst's context of analysis. as a result,
the current models (i.e., \maps") are di±cult to comprehend or even
misleading. to address this problem, we propose a two-phase approach
based on common execution patterns. first, the user selects relevant and
context-dependent patterns. these patterns are used to obtain an event
log at a higher abstraction level. subsequently, the transformed log is
used to create a hierarchical process map. the approach has been imple-
mented in the context of prom. using a real-life log of a housing agency
we demonstrate that we can use this approach to create maps that (i) de-
pict desired traits , (ii)eliminate irrelevant details , (iii) reduce complexity ,
and (iv) improve comprehensibility .
1 introduction
process mining aims at extracting process-related information from event logs.
process mining techniques can deliver valuable, factual insights into how pro-
cesses are being executed in real life. the majority of research in process mining
so far has focussed on process discovery (both from a control-°ow and organi-
zational perspective). process models can be seen as the \maps" describing the
operational processes of organizations. unfortunately, accurate and interactive
business process maps are missing. either there are no good maps or maps (if
available) are static and/or outdated [1].
process mining techniques can be used to generate process maps [2, 3, 4]. we
have applied our process mining tool prom in more than 100 organizations and
our experiences show that processes tend to be less structured than expected.
traditional process discovery algorithms have problems dealing with such un-
structured processes and generate spaghetti-like process models that are hard to
comprehend. the granularity at which the events are logged is typically di®er-
ent from the desired granularity. analysts and end users prefer a higher level of
abstraction without being confronted with lower level events stored in raw event
logs.2 jiafei li, r.p. jagadeesh chandra bose, and wil m.p. van der aalst
analogous to cartography, process mining techniques should allow for various
context-dependent views on the process maps. for example, the perspective of
analysis may be di®erent depending on someone's role and expertise e.g., a man-
ager may be interested in a high level view, while a specialist may be interested
in a detailed analysis of some process fragment. process discovery techniques
should facilitate the extraction of process maps eliciting the respective desired
traits and hiding the irrelevant ones for various users. furthermore, these tech-
niques should uncover comprehensible models by providing a hierarchical view
with a facility to seamlessly zoom in or zoom out the process maps. there is an
imperative need for techniques that automatically generate understandable and
context-dependent business process maps [1].
in this paper, we propose a two-phase approach to mine interactive and
context-dependent business process maps based on common execution patterns .
the¯rst phase comprises the pre-processing of a log with desired traits and at
a desired level of granularity. this paper will show one means to realize this by
uncovering common execution patterns in the log, selecting context-dependent
patterns, and de¯ning abstractions over these patterns. pattern selection and
the mapping with abstractions can be interactively performed by the user. event
logs are then pre-processed (transformed) with these abstractions. in the second
phase , the transformed log is used for process discovery. any discovery algorithm
with an ability to zoom-in/out the sub-processes de¯ned by the abstractions can
be used. this paper presents an adapted version of the fuzzy miner [3] and
shows that it can provide such hierarchical view of process maps. the two-phase
approach presented in this paper has been implemented in prom 6.01. figure 1
highlights the di®erence between the traditional approach to do process discov-
ery and the two-phase approach. note that the process model (map) mined using
the two-phase approach is simpler and that this approach enables the abstrac-
tion of activities based on functionality and provides a seamless zooming into
the sub-processes captured in the abstractions.
pattern graph and abstraction process map zoom-into a sub-processtraditional approach to process discovery
two-phase approach
to process discovery
fig. 1: traditional approach vs. two-phase approach
1prom 6.0 is not o±cially released yet, but nightly builds, including the reported
functionality are available from www.processmining.orgmining context-dependent business process maps 3
the remainder of the paper is organized as follows. our two-phase approach
to mining process maps is introduced in section 2. section 3 presentes pattern
de¯nitions and pattern metrics while section 4 proposes one approach to form
abstractions based on patterns. in section 5, we detail our two-step approach
and describe an adaptation of fuzzy miner to discover process maps. section
6 presents a case study of a real-life log from a rental agency. related work is
discussed in section 7. section 8 concludes the paper.
2 two-phase approach to mine process maps
we use the following notations in this paper. let §denote the set of activities.
j§jis the number of activities. §+is the set of all non-empty ¯nite sequences
of activities from §. we denote traces by bold face lower case letters t1,t2
etc. a trace tis an element of §+.t(i) denotes the ithactivity in the trace.
fori < j ,t(i; j) denotes the subsequence from the ithposition to the jthposi-
tion in the trace t. an event log lcorresponds to a bag (i.e., a multiset) of traces.
phase-1: preprocessing log in this phase, the log is simpli¯ed based on
the desired traits of the context of analysis. a mapping m µ 2§£ ais de¯ned
between the original alphabet of the event log §, and an abstract alphabet a.
an example mapping is m=f(fa;bg;x);(fb;c;dg;y);(feg;z);(fdg;z)g. this
mapping is analogous to the grouping and tagging of streets as a town/city
in cartography and to the selection of a desired perspective of viewing maps
(restaurant maps vs. fuel station maps). the analyst can de¯ne this mapping
based on domain knowledge or can be assisted by uncovering common execu-
tion patterns and relationships between them in the log. these common execu-
tion patterns typically capture a sub-process/functionality. analysts would like
to capture such subprocess behavior in its totality as an abstract activity in a
mined process model with a facility to zoom in/out the subprocess if needed.
the mapping is de¯ned over the sets of activities manifested as patterns. we
present techniques that assist in automatically uncovering such patterns and
relationships between activities in section 3.
d=s
(a;a)2madenotes the set of activities in §for which a mapping is
de¯ned. the original event log l, is transformed into an abstract log l0. each
trace t2 lis transformed into a corresponding trace t02 l0. in each trace t,
the manifestation of each pattern captured by ( a;a)2 m is replaced with its
abstract activity ,a, in the transformed trace. the activities in §n dbeing not
involved in the de¯nition of mapping indicate activities that are insigni¯cant
from the context of analysis and are ¯ltered from tduring this transformation.
in section 5, we describe the transformation of log in detail.
phase-2: mining maps the second phase is to mine a process model on
the abstract log. the mapping de¯ned in phase-1 induces a hierarchy over the
abstract activities. upon zooming into an abstract activity, a process model de-
picting the subprocess captured by this abstract activity is shown. the patterns4 jiafei li, r.p. jagadeesh chandra bose, and wil m.p. van der aalst
replaced by the abstract activity are used to create this sub-process model. we
adapted fuzzy miner for this phase and the details are presented in section 5.
note that this is a generic approach that can be iterated over any number of
times with the event log for iteration i+1 being the output event log of iteration
i.
event log, l 
(a) (b) /g97/g98/g120/g99/g100/g120/g101/g100/g121/g101/g104 
/g97/g98/g120/g99/g100/g120/g101/g102/g121/g103/g104 
/g97/g98/g120/g99/g102/g121/g103/g100/g120/g101/g104 
/g97/g98/g120/g99/g100/g121/g101/g100/g120/g101/g102/g120/g103/g100/g120/g101/g102/g120/g103/g100/g120/g101/g104 
/g97/g98/g120/g99/g117/g100/g120/g101/g100/g121/g101/g102/g120/g103/g100/g120/g101/g104 
/g97/g98/g120/g99/g100/g120/g101/g102/g120/g103/g100/g121/g100/g101/g120/g101/g104 
/g97/g98/g120/g99/g100/g120/g101/g102/g121/g103/g102/g120/g103/g100/g120/g101/g104 
/g97/g98/g120/g99/g100/g120/g101/g102/g120/g103/g102/g121/g103/g100/g120/g101/g104 
fig. 2: (a) an example log (b) process models discovered using heuristic miner
we use a running example log depicted in figure 2(a) to illustrate the ap-
proach. this log contains 8 process instances with 11 event classes. figure 2(b)
depicts the model mined using traditional process discovery techniques. it is
imperative to ¯nd that both these models are not easy to understand. in the
following sections, we will present our two-phase approach in more detail using
this example.
3 pattern de¯nitions and pattern metrics
in this section, we adapt the pattern de¯nitions proposed in [5] and focus on
de¯ning metrics over these patterns. we consider only the maximal repeat pat-
terns for the discussion in this paper. however, other patterns such as tandem
arrays capturing the manifestation of loop constructs proposed in [5] can also be
used. these patterns are later used to de¯ne the mapping mbetween activities
and abstractions.
3.1 pattern de¯nitions
de¯nition 1 (maximal repeat). a maximal pair in a sequence, s, is a pair of
identical sub-sequences ®and¯such that the symbol to the immediate left/right
of®is di®erent from the symbol to the immediate left/right of ¯. in other words,
extending ®and¯on either side would destroy the equality of the two strings.
a maximal pair is denoted by the triple (i; j; ® )where iandjcorrespond to the
starting positions of ®and¯inswith i6=j. a maximal repeat in a sequence,
s, is de¯ned as a subsequence ®that occurs in a maximal pair in s.
maximal repeats capture execution patterns (sequence of activities) common
within a trace and/or across a set of traces in an event log. such patterns might
be evidence of common functionality (often abstracted as a sub-process). in order
to ¯nd these commonalities across multiple traces in the entire event log, we
¯rst construct a single sequence, say, s, which is obtained by the concatenation
of traces in the event log with a distinct delimiter between the traces. maximalmining context-dependent business process maps 5
repeats are then discovered over this concatenated sequence s. maximal repeats
can be e±ciently discovered in linear time using su±x trees for strings [6]. let
plbe the set of all patterns in log l. in this paper, plincludes all maximal
repeats and faja2§g. abase pattern is a pattern that does not contain any
other pattern within it. the pattern abxc is a base pattern while abxcdxe is not
because the latter pattern contains the pattern xwithin it. let pb
lbe the set of
all base patterns in pl.
consider the trace t6=abxcdxefxgdyedxeh in the log of figure 2(a). the
maximal pairs in t6are (3 ;6;x), (5;11;d), (7;13;e) and (5 ;14;dxe). there are
a total of 39 maximal repeats in the example log (e.g., abxc,abxcd ,abxcdxe ,
dxe,fxg,dye,fyg,dyedxe ,dxedye ,h).pb
l=fa,b,c,u,x,d,g,f,h,e,y,gf,
gd,ef,ed,eh,fxg,dye,fyg,dxe,fxgd,abxc,gdxe,dxeh,dxef,efxg,efxgd ,
abxcd ,gdxeh ,fygdxeh g.
de¯nition 2 (pattern alphabet). the pattern alphabet ¡(p), of a pattern,
p2 pl, is the set of activities that appear in p.
de¯nition 3 (equivalence class of pattern alphabet). the equivalence
class of a pattern alphabet pa, is de¯ned as [pa] =fpjpis a pattern and ¡(p) =
pag
for example, for the patterns fxg,dyedxe and dxedye , the pattern alphabets
correspond to ff,x,gg,fd,x,y,eg, and fd,x,y,egrespectively. the equivalence
class of the pattern alphabet fd,x,y,egisfdyedxe ,dxedye g. equivalence classes
of pattern alphabets capture variations of patterns e.g., due to parallelism.
3.2 pattern metrics
pattern metrics such as the frequency of occurrence, signi¯cance etc. need to
be estimated. a careful consideration needs to be done when estimating the
frequency of a pattern. it is due to the fact that certain regions in a trace can
contribute to more than one pattern (in the case of overlapping patterns) and
might result in misleading frequency counts. for example, consider the trace t
=abxcdxedfxgdxeh and the pattern alphabet equivalence classes [ fa,b,x,cg]
=fabxcg, [fa,b,x,c,dg] =fabxcdg, and [ fd,x,eg] =fdxe,dxedg. now, what
should be the pattern (alphabet) counts? . if we consider each of the patterns
separately, the pattern, frequency-count pairs are ( abxc;1);(abxcd ;1);(dxe;2)
and ( dxed;1). if we de¯ne the pattern alphabet count to be the sum of counts
of the patterns captured in its equivalence class, then the pattern alphabet,
frequency-count pairs are ( fa;b;x;cg;1), (fa;b;x;c;dg;1), and ( fd;x;eg;3). it
is imperative to see that certain regions in the trace are contributing to more
than one pattern (alphabet). the activities in the subsequence t(5,7) contributed
to two patterns viz., dxeand dxed. similarly, the activities in the subsequence
t(1,4) contributed to two patterns viz., abxc andabxcd .
we identify three distinct methods of dealing with overlaps and counting pat-
tern occurrences. the above method of computing pattern (alphabet) counts is
referred to as overlapping alphabet count (oac) . the signi¯cance computed us-
ing overlapping alphabet counts may be misleading. a more accurate method of6 jiafei li, r.p. jagadeesh chandra bose, and wil m.p. van der aalst
computing pattern frequencies is to consider non-overlapping pattern counts. we
distinguish two variations here: (i) considering non-overlap counts for each alpha-
bet separately (local) and (ii) considering non-overlap counts across all alphabets
(global) in the event log. these two metrics are referred to as non-overlapping
alphabet count (noac) andnon-overlapping global alphabet count (no-
gac) respectively. con°icts arise when more than one pattern can potentially
contribute to the count at a region in a trace. one can assign preference to say
shorter (longer) patterns to resolve such con°icts. the noac (with preference
to shorter patterns) for the above example is ( fa;b;x;cg;1), (fa;b;x;c;dg;1),
and (fd;x;eg;2). note that the con°ict at position 5 in tfor pattern alphabet
fd,x,egis resolved in favor of the pattern dxethereby making t(5,7) contribute
to only one pattern. the nogac across all alphabets (with preference to longer
patterns) is ( fa;b;x;cg;0), (fa;b;x;c;dg;1), and ( fd;x;eg;1). a position/sub-
sequence in a trace can contribute to more than one pattern alphabet when
considering noac for each alphabet separately (e.g., index 1 in t) while in
nogac , a position contributes to at most one pattern alphabet.
in order to assess the signi¯cance of a pattern alphabet pa, we de¯ne a metric
conservedness (con pa) =noac
¹¤(1¡¾
¹)¤100% where ¹and¾are the mean
and standard deviation of the frequencies of activities in pa.conservedness
measures the degree to which the individual activities involved in the pattern
alphabet manifest as the patterns de¯ned by the alphabet. for example, con-
sider the non-overlap alphabet count of three pattern alphabets ( fd;x;eg;100),
(fd;x;e;fg;60), and ( fd;x;e;hg;40). let the frequency of activities be ( d;100),
(x;100), ( e;100), ( f;60), and ( h;40). conservedness value of the pattern alpha-
betsfd,x,eg,fd,x,e,fg, and fd,x,e,hgis 100%, 51% and 30% respectively. the
formal de¯nitions of the above pattern metrics are presented in [7].
4 abstractions based on patterns
4.1 pattern graph
relationships exist between patterns (alphabets). for example, consider the pat-
terns dxefxg ,dxe, and fxg. it could be the case that dxeand fxgare sub-
functionalities used also in a larger context dxefxg . one can try to de¯ne a
partial order capturing the relationships on the pattern alphabets. for example,
subsumption can be used as the cover relation. a pattern alphabet paiis de¯ned
to cover another pattern alphabet pajifpaj½paiand there is no paksuch
thatpaj½pak½pai. apattern graph g= (v; e), is a hasse diagram de¯ned
over the partial order on the pattern alphabets, where v=fpa1;pa2; : : : ; pang
represents the set of pattern alphabets and edenotes the set of edges ( pai;paj)
de¯ned by the cover relation. one can choose either plorpb
lto de¯ne v. fig-
ure 3(a) depicts a pattern graph on some of the pattern alphabets identi¯ed
for the example log. we considered pattern alphabets de¯ned by pb
lwith a
conservedness value above 17% to generate this graph.mining context-dependent business process maps 7
4.2 pattern selection
nodes in a pattern graph form the basis for abstraction. an analyst can select
the pattern nodes based on domain knowledge or by using the pattern metrics
de¯ned in section 3. we provide two types of node selection modes for abstrac-
tion.
single node mode: all manifestations of patterns under the equivalence class
of this node's pattern alphabet are represented by the same abstract activity in
the transformed log.
sub-graph mode: all manifestations of patterns under the equivalence classes
of the pattern alphabets de¯ned by the induced subgraph at the selected node are
substituted by the abstract activity of the selected node during transformation.
it could be the case that a pattern graph contains a large number of nodes.
we recommend to ¯rst ¯lter the nodes in the pattern graph before considering
them for abstractions. all the metrics de¯ned in section 3.2 can be used to prune
the graph. for example, consider the pattern alphabets fa,b,x,cgandfa,b,x,c,dg
in figure 3(a). the nogac offa,b,x,c,dgwith preference to shorter patterns
(ignoring individual activity patterns) is zero. similarly, the nogac offd,x,e,
fg,fd,x,e,hg,fg,d,x,e,hg,fg,d,x,eg,fe,hg,fe,dg,fe,fg,fg,dgandfg,fgare all
zero. this indicates that manifestations of all patterns under the equivalence
class of these pattern alphabets in the log are overlapping with some other
pattern. for example, the equivalence class of the pattern alphabet fe,dgisfedg.
there are two manifestations of the pattern edinl(in traces abxcdxedyeh and
abxcudxedyefxgdxeh ). however, both of these manifestations overlap with dxe
anddyein the example log; thus making the nogac offe,dgas 0.
{a} {b} {c} {h} {x} {y} {e,d} {e,h} 
{g} {f} {f,y,g} {f,x,g} {g,d,x,e} {d,x,e,f} {d,x,e,h} 
{g,d} {d,y,e} {d,x,e} 
{u} {e,f} {g,f} {g,d,x,e,h} 
{d} {e} {a,b,x,c,d} 
{a,b,x,c} 
(a)
{a} {b} {c} {h} {x} {y} {d} {e} {g} {f} {f,y,g} {f,x,g} {a,b,x,c} 
{d,y,e} {d,x,e} 
{u} (b)
fig. 3: (a) pattern graph (b) pattern graph with abstractions for the example log
we recommend to consider nodes capturing longer patterns with a high con-
servedness value and signi¯cant noac andnogac to be used under sub-graph
mode for abstractions. however, for two pattern alphabet nodes paiandpaj
such that ( pai;paj)2e(i.e., pai½paj), ifcon pai> con pajthen, we
recommend to consider paiunder sub-graph mode instead of pajthough pai
captures shorter patterns. for example, consider the pattern alphabets fd,x,eg,
fd,x,e,fg,fd,x,e,hgandfg,d,x,eg. the conservedness value for these alphabets
are 52% ;22%;21%;22% respectively. it could be seen that the pattern dxe(de-
¯ned by the alphabet fd,x,eg) occurs in di®erent contexts in l. the di®erent
contexts are captured by the other three alphabets and are re°ected with the8 jiafei li, r.p. jagadeesh chandra bose, and wil m.p. van der aalst
relatively low conservedness values for these three alphabets. we recommend to
consider fd,x,egas a node for abstraction instead of the other three. coinciden-
tally in this example the nogac (with preference to shorter patterns) for the
three larger alphabets is also zero.
if nodes in the sub-graph of a pattern node paiare covered by one or more
nodes pajthat are not in the sub-graph of paithen we recommend to consider
paiunder single-node mode for abstraction (assuming paiis selected). for ex-
ample, the node fd,x,egis recommended to be considered under single-node
mode because the nodes fdgandfegin the sub-graph of fd,x,egis also covered
by another node fd,y,eg. note that these are just recommendations and an an-
alyst can make exceptions if it makes sense according to the context of analysis.
using these guidelines we use the abstractions as de¯ned in figure 3(b). here
fa,b,x,cgis used in the sub-graph mode while fd,x,eg,fd,y,eg,ff,x,gg,ff,y,gg
andfhgare chosen under single-node mode. certain nodes not pertaining to the
context of analysis can also be ¯ltered out (e.g., fug). let us de¯ne the map-
pingmasf(fa,b,x,cg,a1), (fag,a1), (fbg,a1), (fcg,a1), (fxg,a1), (fd,x,eg,a2),
(ff,x,gg,a3), (fd,y,eg,a4), (ff,y,gg,a5), (fhg,a6)gon the abstractions chosen for
the example log.
5 process discovery based on patterns
5.1 transformation of log
algorithm 1 presents the details of transforming the log based on the patterns.
thebasic idea is to ¯rst replace the continuous and intermittent manifestation of
each pattern alphabet chosen for abstraction with its abstract activity and make
the corresponding low level manifestations part of the sub-log corresponding to
the abstract activity. the sub-log of an abstract activity can be used to zoom in
the detailed behavior. the intermittent manifestation here refers to the situation
where the execution of the subsequence corresponding to a pattern is interrupted
by other activities. for instance, let dyebe a pattern, the manifestation of dye
in the trace abxcdxefxgdydexeh is intermittent because dyeis interrupted by
d.
steps 9-12 in the algorithm deal with the intermittent manifestation of a
pattern and substitutes it with the abstract activity. algorithm 1 will transform
the trace abxcdxefxgdydexeh in our example log to a1a2a3a4a2a6 . in this way,
one can cope with situations where a common functionality is interrupted by
other activities in concurrency.
5.2 adapting fuzzy miner to discover maps
prom's fuzzy miner [3] is inspired by cartography to provide business process
maps. however, the existing miner has some limitations. it (i) cannot customize
maps from a de¯ned context (city maps vs. highway maps) (ii) introduces the risk
of aggregating unrelated activities together in a cluster (a street in eindhoven is
clustered along with streets in amsterdam) and (iii) provides two level hierarchy
instead of a multi-level hierarchical view of the process map.mining context-dependent business process maps 9
1:letmbe the mapping chosen by the user. a=[(pa;a )2mfagdefines the set of defined
abstractions. sp=[(pa;a )2m[pa]denotes the set of all patterns for which
abstractions are defined. let f:sp ! a be the function defining the abstraction for
each pattern. let l:a ! sl be the function defining the sub-log for each abstraction.
letl0be the transformed log of l. initialize l0=fgandl(a) =fgfor all a2 a
2:for all t 2 l do
3: let t0be an empty trace. set j= 1.
4: while j· jtjdo
5: letldsbe the list of patterns in sp starting with t( j) ordered in descending
order of their length
6: for every pattern ®2ldsdo
7: if there exists a continuous manifestation of a pattern ®at index jin t then
8: l(f(®)) =l(f(®))] ft(j; j+j®j)g;append f(®)to t0;set j=j+j®j ¡1;exit for
9: else if there exists an intermittent manifestation of ®at index jin t then
10: re-adjust the intermittent manifestation in t.
11: l(f(®)) =l(f(®))] f®g; append f(®)tot0; set j=j+j®j ¡1; exit for
12: end if
13: end for
14: setj=j+ 1
15: end while
16: l0=l0] ft0g
17: end for
algorithm 1: single-phase pattern-based log transformation
we adapted fuzzy miner to support the discovery of process maps. the pat-
tern selection techniques presented in section 4 facilitate customization from an
user's context and getting meaningful abstract activities. by using the sub-log of
each abstract activity, we implemented the functionality of zooming in/out the
abstract activity and showing the detailed sub-process captured by it. further-
more, by combining with the existing functions in the fuzzy miner of zooming
in/out the cluster nodes, a three-level view of the process map is provided.
event log ,l’ 
a1a2a4a6
a1a2a5a6
a1a5a2a6
a1a4a2a3a2a3a2a6
a1a2a4a3a2a6
a1a2a3a4a2a6
a1a2a5a3a2a6
a1a2a3a5a2a6
(a)(b) (c)
fig. 4: (a) transformed log (b) process map mined from the transformed log using adapted fuzzy
miner (c) sub-process maps when zooming in on a2 and a3
to illustrate this two-phase approach, let us transform the log as described in
algorithm 1 using the mapping m. the transformed log is shown in figure 4(a).
figure 4(b) depicts the process map mined by the adapted fuzzy miner, while
figure 4(c) shows the sub-process maps when zooming in the abstract activities
a2anda3. it is evident from figure 2 and figure 4 that our two-phase approach
helps in presenting more accurate and more readable models.
6 case study and discussion
we applied the techniques proposed in this paper on a real life log of a rental
agency where the cases corresponded to cancellation of a current rental agree-10 jiafei li, r.p. jagadeesh chandra bose, and wil m.p. van der aalst
ment and subsequent registration of a new rental agreement. this log was pro-
vided by a large dutch agency that rents houses and apartments and contains
210 cases, 6100 events and 74 event classes. figure 5(a) depicts the process
model mined using heuristic miner. this process model included two types of
cancelation as highlighted by two rectangles in figure 5(a). the unselected re-
gion corresponds to common functionality used by both of them. the resulting
model is di±cult to comprehend.
first inspection 
prepare allocation 
after allocation 
a b
fig. 5: (a) heuristic net mined on the whole log (b) process map and zoomed-in sub-processes mined
from transformed log based on interactive and context-dependent abstractions
table 1: three of the pattern alphabets chosen for abstraction
no.abstraction
namepattern alphabet noac con (%)
1first inspec-
tion[050 plans appointment 1st inspection,060 edit con¯rmation
letter / tenancy form, 070 is 1st inspection performed?,100
ready report 1st insp. / make-calculation for]80 66
2prepare allo-
cation[500 rate / modify vacancy type,540 are there bonuses
/ costs awarded?, 510 is completion form signed?530 edit
command]145 93
31st final in-
spection[120 plans ¯nal inspections,400 is ¯nal inspection per-
formed?, 440 are there new or repaired defects?]53 61
in this study, we assume that the analyst wants to focus on the type of
cancellation process de¯ned by the solid rectangle and we identify the patterns
from the analyst's point of view. the primary steps involve the registration of a
request, multiple inspections of the rented house, determining (future) tenants,
(re-)allocation and archiving of the case. we ¯rst identi¯ed the common execu-
tion patterns in this log and chose 17 abstract activities (some involve pattern
alphabets and some involve individual activities) concerned with the above pri-
mary steps. we used these seventeen abstractions to do the ¯rst phase of log
transformation. then, to make the result process map more comprehensible, we
performed a second iteration of pattern identi¯cation. this visualized in a pro-
cess map consisting of 14 abstract activities as shown in figure 5(b). three of
these activities are given in table 1 which shows the three pattern alphabets
used in de¯ning abstractions. pattern alphabets capturing a functionality from
a domain point of view are chosen as candidate nodes (under sub-graph mode)mining context-dependent business process maps 11
for abstractions. a meaningful name is de¯ned for every candidate abstraction.
those pattern alphabets with a signi¯cant noac as well as a high con value
have priority to be selected for abstractions as can be seen in table 1. fig-
ure 5(b) also presents the sub-process when zooming in the abstract activities of
prepare allocation and after allocation . each sub-process subsumes the
manifestation of patterns captured in the sub-log de¯ned by the abstraction.
comparing with the cancellation process mainly de¯ned by the solid rect-
angle in figure 5(a), it is apparent that the process map discovered by our
two-step approach is more comprehensible and captures the main steps of this
speci¯c type of rental cancellation process. this resulting process map not only
facilitates the analyst to get an overview of the whole process, but also makes
it easy to seamlessly zoom-in each abstract activity to observe the detailed sub-
process. this shows that using our two-step approach indeed leads to better
understandable process maps without sacri¯cing precision.
7 related work
several approaches based on trace clustering [8, 9, 10] have been proposed in
literature. trace clustering enables the partitioning of the event log based on
coherency of cases. process models mined from each of the resulting clusters are
expected to be simpler than that of the one mined from the entire event log.
greco et al. [10] augmented trace clustering with an approach to mine hierar-
chies of process models that collectively represent the process at di®erent levels
of granularity and abstraction. this approach tries to analyze the mined process
models (post-processing) for identifying activities that can be abstracted. how-
ever, for large complex logs, the mined process models (even after clustering)
can be quite spaghetti-like. in contrast, the approach proposed in this paper an-
alyzes the raw traces and de¯nes abstraction (pre-processing) and has the ability
to zoom-in hierarchically into the abstract entities. furthermore, the user has
°exibility and control when selecting the abstractions/activities of interest based
on his/her context of analysis.
taking cartography as a metaphor, gä unther and aalst [3] have proposed the
fuzzy mining approach to implement process simpli¯cation. less signi¯cant ac-
tivities/edges are either removed or clustered together in the model. however,
this approach poses a danger of clustering activities/edges having no domain
signi¯cance. polyvyanyy et al. [11] have proposed a slider approach for enabling
°exible control over various process model abstraction criteria. approaches such
as [11, 3] look at abstraction from the point of retaining highly signi¯cant in-
formation and discarding less signi¯cant ones in the process model where the
notion of signi¯cance is de¯ned over the (relative-)frequency of occurrence of an
entity and not based on the context. in contrast, the approach proposed in this
paper looks at abstraction from a functionality/subprocess point of view which
performs ¯ltering of activities based on the context of analysis. our approach
can be used as a preprocessing step for the logs and can be seamlessly integrated
with other approaches for abstraction [10, 3] as well as with classical approaches
for process discovery such as the heuristic approach in [4].12 jiafei li, r.p. jagadeesh chandra bose, and wil m.p. van der aalst
8 conclusions and future work
this paper presented a two-phase approach to mining business process maps
that comprises the pre-processing of a log based on desired traits and at a de-
sired level of granularity as a ¯rst step and discovering the maps with seamless
zoom-in facility as the second step. we discussed one means of realizing this two-
phase approach by exploiting the common execution patterns in the event log.
metrics assessing the signi¯cance of these patterns and ways of selecting these
patterns for abstractions were presented. our initial results on a few real-life
logs show encouraging results. concurrency in process models adds complexity
to the discovery of patterns. as future work, we focus on more real-life applica-
tions and improving the robustness of the approach in the context of concurrency.
acknowledgments this work is supported in part by the nnsf (no.60873149)
and the 863 project (no.2006aa10z245) of china, and in part by eit, nwo-
ew, and stw. r.p.j.c. bose and w.m.p. van der aalst are grateful to philips
healthcare for funding the research in process mining.
references
1.van der aalst, w.m.p.: challenges in business process mining. applied stochastic
models in business and industry (to appear)
2.van der aalst, w.m.p.: using process mining to generate accurate and interactive
business process maps. in: bis (workshops). volume 37 of lnbip. (2009) 1{14
3.gä unther, c.w., van der aalst, w.m.p.: fuzzy mining - adaptive process sim-
pli¯cation based on multi-perspective metrics. in: business process management
(bpm). volume 4714 of lncs. (2007) 328{343
4.weijters, a., van der aalst, w.m.p.: rediscovering work°ow models from event-
based data using little thumb. integrated computer-aided engineering 10(2)
(2003) 151{162
5.bose, r.p.j.c., van der aalst, w.m.p.: abstractions in process mining: a tax-
onomy of patterns. in: business process management (bpm). volume 5701 of
lncs. (2009) 159{175
6.gus¯eld, d.: algorithms on strings, trees, and sequences: computer science and
computational biology. cambridge university press (1997)
7.li, j., bose, r.j.c., van der aalst, w.m.: mining context-dependent and in-
teractive business process maps using execution patterns. technical report,
university of technology, eindhoven (2010) http://www.win.tue.nl/ ~jcbose/
miningbusinessprocessmaps.pdf .
8.bose, r.p.j.c., van der aalst, w.m.p.: context aware trace clustering: towards
improving process mining results. in: proceedings of the siam international
conference on data mining (sdm). (2009) 401{412
9.bose, r.p.j.c., van der aalst, w.m.p.: trace clustering based on conserved
patterns: towards achieving better process models. in: business process man-
agement workshops. volume 43 of lnbip. (2009) 170{181
10.greco, g., guzzo, a., pontieri, l.: mining taxonomies of process models. data
knowl. eng. 67(1) (2008) 74{102
11.polyvyanyy, a., smirnov, s., weske, m.: process model abstraction: a slider
approach. in: enterprise distributed object computing. (2008) 325{331