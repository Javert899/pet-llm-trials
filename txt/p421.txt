dynamic and extensible exception handling for
work°ows: a service-oriented implementation
michael adams1, arthur h. m. ter hofstede1, david edmond1,
and wil m. p. van der aalst1;2
1business process management group
queensland university of technology, brisbane, australia
fm3.adams,a.terhofstede,d.edmond g@qut.edu.au
2department of mathematics and computer science
eindhoven university of technology, eindhoven, the netherlands
w.m.p.v.d.aalst@tue.nl
abstract. this paper presents the realisation, using a service oriented
architecture, of an approach for dynamic, °exible and extensible excep-
tion handling in work°ows, based not on proprietary frameworks, but
on accepted ideas of how people actually work. the approach utilises an
established framework for work°ow °exibility called worklets and a de-
tailed taxonomy of work°ow exception patterns to provide an extensible
repertoire of self-contained exception-handling processes which may be
applied at the task, case or speci¯cation levels, and from which a dynamic
runtime selection is made depending on the context of the exception and
the particular work instance. both expected and unexpected exceptions
are catered for in real time, so that `manual handling' is avoided.
key words : work°ow exception handling, work°ow °exibility, service
oriented architecture, worklet, exlet
1 introduction
work°ow management systems (wfms) are used to con¯gure and control struc-
tured business processes from which well-de¯ned work°ow models and instances
can be derived [1, 2]. however, the proprietary process de¯nition frameworks im-
posed by wfmss make it di±cult to support (i) dynamic evolution (i.e. modify-
ing process de¯nitions during execution) following unexpected or developmental
change in the business processes being modelled [3]; and (ii) process exceptions,
or deviations from the prescribed process model at runtime [4{6].
for exceptions, the accepted practice is that if an exception can conceivably
be anticipated, then it should be included in the process model. however, this
approach can lead to very complex models, much of which will never be executed
in most cases. also, mixing business logic with exception handling routines com-
plicates the veri¯cation and modi¯cation of both [7], in addition to rendering
the process model almost unintelligible to some stakeholders.conversely, if an unexpected exception occurs then the model is deemed to
be simply de¯cient and thus needs to be amended to include the previously
unimagined event (see for example [8]), which disregards the frequency of such
events and the costs involved with their correction. most often, the only available
options are suspension while the exception is handled manually or termination of
the case, but since most processes are long and complex, neither option presents a
satisfactory solution [7]. manual handling incurs an added penalty: the corrective
actions undertaken are not added to `organisational memory' [9, 10], and so
natural process evolution is not incorporated into future iterations of the process.
associated problems include those of migration, synchronisation and version
control [4].
this is further supported by our work on process mining. when considering
processes where people are expected to execute tasks in a structured way but
are not forced to by a work°ow system, process mining shows that the processes
are much more dynamic than expected; that is, people tend to deviate from the
`normal °ow', often with good reasons.
thus a large group of business processes do not easily map to the rigid
modelling structures provided [11], due to the lack of °exibility inherent in a
framework that, by de¯nition, imposes rigidity. business processes are `system-
centric', or straight-jacketed [1] into the supplied framework, rather than truly
re°ecting the way work is actually performed [12]. as a result, users are forced
to work outside of the system, and/or constantly revise the static process model,
in order to successfully perform their activities, thereby negating the e±ciency
gains sought by implementing a work°ow solution in the ¯rst place.
to better understand actual work practices, we previously undertook a de-
tailed study of activity theory , a broad collective of theorising and research in
organised human activity (cf. [13, 14]) and derived from it a set of principles
that describe the nature of participation in organisational work practices [15].
we have applied those principles to the realisation of a discrete service that
utilises an extensible repertoire of self-contained exception handling processes
and associated selection rules to support the °exible modelling, analysis, enact-
ment and exception handling of business processes for a wide variety of work
environments.
this paper introduces the service, which is based on and extends the `worklets'
approach described in [16] and [17] and applies the classi¯cation of work°ow ex-
ception patterns from [18]. the implementation platform used is the well-known,
open-source work°ow environment yawl [19, 20], which supports a service ori-
ented architecture (soa), and so the service's applicability is in no way limited
to the yawl environment. also, being open-source, it is freely available for use
and extension.
the paper is organised as follows: section 2 provides an overview of the design
and operation of the service, while section 3 details the service architecture.
section 4 discusses exception types handled by the service and the de¯nition
of exception handling processes. section 5 describes how the approach utilises
ripple down rules (rdr) to achieve contextual, dynamic selection of handlingprocesses at runtime. section 6 discusses related work, and ¯nally section 7
outlines future directions and concludes the paper.
2 worklet service overview
theworklet service (essentially, a worklet is a small, discrete work°ow process
that acts as a late-bound sub-net for an enabled workitem) comprises two distinct
but complementary sub-services: a selection sub-service , which enables dynamic
°exibility for process instances; and an exception handling sub-service (the focus
of this paper), which provides facilities to handle both expected and unexpected
process exceptions at runtime.
brie°y, the selection sub-service enables dynamic °exibility by allowing a
process designer to designate certain tasks to each be substituted at runtime with
a dynamically and contextually selected worklet, which therefore handles one
speci¯c task in a larger, composite process. an extensible repertoire of worklets is
maintained by the service for each task in a speci¯cation. for further information
regarding the design philosophy and implementation of the selection sub-service,
see [16].
the exception sub-service allows process designers to de¯ne exception han-
dling processes (called exlets ) for parent processes to be invoked when exceptions
occur and thereby allow the process to continue unhindered. the exception han-
dling sub-service uses the same repertoire and dynamic rules approach as the
selection sub-service. there are, however, two fundamental di®erences between
the two sub-services. first, where the selection sub-service selects a worklet as
the result of satisfying a rule in a rule set, the result of an exception handling
sub-service query is an exlet. second, while the selection sub-service is invoked
for certain nominated tasks in a process, the exception handling sub-service,
when enabled, is invoked for every case and task executed by the enactment
engine. table 1 summarises the di®erences between the two sub-services (the
interfaces are described in the next section).
table 1. summary of service actions
cause interface selection action returned
workitem case & item
enabled b context data worklet
internal exception type
exception x and case & item exlet
context data
external exception type
exception { and case & item exlet
context dataan exlet may consist of a number of various actions (such as cancel, sus-
pend, complete, fail, restart and compensate) and be applied at a workitem,
case and/or speci¯cation level. and, because exlets can include worklets as com-
pensation processes, the original parent process model only needs to reveal the
actual business logic for the process, while the repertoire of exlets grows as
new exceptions arise or di®erent ways of handling exceptions are formulated,
including while the parent process is executing , and those handling methods au-
tomatically become an implicit part of the process speci¯cation for all current
and future instances of the process.
each time an exception occurs, the service makes a choice from the repertoire
based on the type of exception and the contextual data of the workitem/case,
using a set of rules to select the most appropriate exlet to execute (see section
5). if the exlet contains a compensatory worklet it is run as a separate case in
the enactment engine, so that from an engine perspective, the worklet and its
`parent' (i.e. the process that invoked the exception) are two distinct, unrelated
cases. the service tracks the relationships, data mappings and synchronisations
between cases, and maintains execution logs that may be combined with those of
the engine via case identi¯ers to provide a complete operational history of each
process. figure 1 shows the relationship between a `parent' process, an exlet
repertoire and a compensatory worklet, using as an example a simple process
for the organisation of a rock concert ( organise concert ).
 
book stadium  sell tickets do show ‘parent ’ process  itempreconstraint 
             exlets  c 
c 
c cancel stadium book theatre  advise fans compensation worklet  
organiseconcert changetomidvenue 
fig. 1. process { exlet { worklet hierarchyany number of exlets can form the repertoire of each particular exception
type for an individual task or case. an exlet may be a member of one or more
repertoires { that is, it may be re-used for several distinct tasks or cases within
and across process speci¯cations. the selection and exception sub-services can
be used in combination within case instances to achieve dynamic °exibility and
exception handling simultaneously.
3 service architecture
the worklet service has been implemented as a yawl custom service [19, 20].
the yawl environment was chosen as the implementation platform since it pro-
vides a very powerful and expressive work°ow language based on the work°ow
patterns identi¯ed in [21], together with a formal semantics. it also provides
a work°ow enactment engine, and an editor for process model creation, that
support the control °ow, data and (basic) resource perspectives. the yawl en-
vironment is open-source and o®ers a service-oriented architecture, allowing the
service to be implemented completely independent to the core engine. thus the
deployment of the worklet service is in no way limited to the yawl environ-
ment, but may be ported to other environments (for example, bpel engines)
by making the necessary links in the service interface. as such, this implemen-
tation may also be seen as a case study in service-oriented computing whereby
dynamic °exibility and exception handling for work°ows, orthogonal to the un-
derlying work°ow language, is provided.
figure 2 shows the external architecture of the worklet service. the yawl
environment allows work°ow instances and external services to interact across
several interfaces supporting the ability to send and receive both messages and
xml data to and from the engine. three are used by the worklet service:
{interface a provides endpoints for process de¯nition, administration and
monitoring [20] { used by the service to upload worklet speci¯cations to the
engine;
{interface b provides endpoints for client and invoked applications and work-
°ow interoperability [20] { used by the service for connecting to the engine,
to start and cancel case instances, and to check workitems in and out of the
engine after interrogating their associated data; and
{interface x (`x' for `exception') provides endpoints for the engine to notify
services of exception events and checkpoints and for services to manage the
statuses of tasks and cases.
the entities `worklet specs', `rules' and `logs' in figure 2 comprise the
worklet repository . the service uses the repository to store rule sets, worklet
speci¯cations for uploading to the engine, and generated process and audit logs.
the yawl editor is used to create new worklet speci¯cations, and may be in-
voked from the rules editor, which is used to create new or augment existing
rule sets, making use of certain selection logs to do so, and may communicate   
worklet 
service 
     
 x 
selection 
exception    
yawl 
engine 
 a 
b rule s 
logs  
 
yawl 
worklist 
 /computers1  
rules 
editor 
  
yawl 
editor 
 worklet 
specs 
 
 
user  fig. 2. external architecture of the worklet service
with the worklet service via a jsp/servlet interface to override worklet selec-
tions following rule set additions (see section 5). the service also provides servlet
pages that allow users to directly communicate with the service to raise external
exceptions and carry out administration tasks.
4 exception types and handling primitives
this section introduces the ten di®erent types of process exception that have
been identi¯ed, seven of which are supported by the current version of the
worklet service. it then describes the handling primitives that may be used
to form an exception handling process (i.e. an exlet). the exception types and
primitives described here are based on and extend from those identi¯ed by rus-
sell et al., who de¯ne a rigorous classi¯cation framework for work°ow exception
handling independent of speci¯c modelling approaches or technologies [18].
4.1 exception types
the following seven types of exceptions are supported by our current implemen-
tation:
constraint types: constraints are rules that are applied to a workitem or
case immediately before and after execution of that workitem or case. thus,
there are four types of constraint exception:
{casepreconstraint - case-level pre-constraint rules are checked when each
case instance begins execution;{itempreconstraint - item-level pre-constraint rules are checked when each
workitem in a case becomes enabled (i.e. ready to be checked out);
{itempostconstraint - item-level post-constraint rules are checked when each
workitem moves to a completed status; and
{casepostconstraint - case-level post constraint rules are checked when a
case completes.
when the service receives an constraint event noti¯cation, the rule set is
queried (see section 5), and if a constraint has been violated the associated
exlet is selected and invoked.
timeout: a timeout event occurs when a workitem reaches a set dead-
line. the service receives a reference to the workitem and to each of the other
workitems running in parallel to it. therefore, timeout rules may be de¯ned for
each of the workitems a®ected by the timeout (including the actual timed out
workitem itself).
externally triggered types: externally triggered exceptions occur because of
an occurrence outside of the process instance that has an e®ect on the continuing
execution of the process. thus, these events are triggered by a user; depending
on the actual event and the context of the case or workitem, a particular exlet
will be invoked. there are two types of external exceptions, caseexternaltrigger
(for case-level events) and itemexternaltrigger (for item-level events).
three more exception types have been identi¯ed but are not yet supported:
itemabort: this event occurs when a workitem being handled by an external
program (as opposed to a human user) reports that the program has aborted
before completion.
resourceunavailable: this event occurs when an attempt has been made to
allocate a workitem to a resource and the resource reports that it is unable to
accept the allocation or the allocation cannot proceed.
constraintviolation: this event occurs when a data constraint has been vio-
lated for a workitem during its execution (as opposed to pre- or post- execution).
4.2 exception handling primitives
each exlet is de¯ned graphically using the worklet rules editor, and may con-
tain any number of steps, or primitives . figure 3 shows the rules editor with
an example exlet displayed. on the left of the editor is the set of available
primitives, which are (reading left-to-right, top-to-bottom):
{remove workitem : removes (or cancels) the workitem; execution ends, and
the workitem is marked with a status of cancelled. no further execution
occurs on the process path that contains the workitem.
{remove case : removes the case. case execution ends.
{remove all cases : removes all case instances for the speci¯cation in which
the workitem is de¯ned, or of which the case is an instance. fig. 3. example exlet in the rules editor
{suspend workitem : suspends (or pauses) execution of a workitem, until it is
continued, restarted, cancelled, failed or completed, or the case that contains
the workitem is cancelled or completed.
{suspend case : suspends all `live' workitems in the current case instance (a
live workitem has a status of ¯red, enabled or executing), e®ectively sus-
pending execution of the entire case.
{suspend all cases : suspends all `live' workitems in all of the currently execut-
ing instances of the speci¯cation in which the workitem is de¯ned, e®ectively
suspending all running cases of the speci¯cation.
{continue workitem : un-suspends (or continues) execution of the previously
suspended workitem.
{continue case : un-suspends execution of all previously suspended workitems
for the case, e®ectively continuing case execution.
{continue all cases : un-suspends execution of all workitems previously sus-
pended for all cases of the speci¯cation in which the workitem is de¯ned or of
which the case is an instance, e®ectively continuing all previously suspended
cases of the speci¯cation.
{restart workitem : rewinds workitem execution back to its start. resets the
workitem's data values to those it had when it began execution.
{force complete workitem : completes a `live' workitem. execution of the
workitem ends, and the workitem is marked with a status of forcedcomplete ,
which is regarded as a successful completion, rather than a cancellation or
failure. execution proceeds to the next workitem on the process path.
{force fail workitem : fails a `live' workitem. execution of the workitem ends,
and the workitem is marked with a status of failed , which is regarded as an
unsuccessful completion, but not as a cancellation { execution proceeds to
the next workitem on the process path.
{compensate : runs a compensatory process (i.e. a worklet). depending on
previous primitives, the worklet may execute simultaneously to the parent
case, or execute while the parent is suspended.the `all cases' primitives may be modi¯ed in the rules editor so that their
action is restricted to ancestor cases only { those in a hierarchy of worklets back
to the original parent case; an exlet may invoke a compensatory worklet which
in turn may invoke an exlet with a compensatory worklet, and so on. also, the
`continue' primitives are applied only to those workitems and cases that were
previously suspended by the same exlet.
a compensation primitive may contain an array of one or more worklets {
when multiple worklets are de¯ned they are launched concurrently as a composite
compensatory action. execution moves to the next primitive in the exlet when
all worklets have completed. additionally, data values may be mapped from a
case to a compensatory worklet and back again.
referring to figure 1, the centre tier shows the exlets de¯ned for itempre-
constraint violations. there may actually be up to eleven di®erent `planes' for
this tier { one for each exception type. also, each exlet may refer to a di®erent
set of compensatory processes, or worklets, and so at any point there may be
several worklets operating on the upper tier.
5 contextual selection of exlets
the runtime selection of an exlet relies on the type of exception that has occurred
and the relevant context of the case instance. the selection process is achieved
through the use of modi¯ed ripple down rules (rdr), which comprise a hier-
archical set of rules with associated exceptions, ¯rst devised by compton and
jansen [22]. the fundamental feature of rdr is that it avoids the di±culties
inherent in attempting to compile, a-priori , a systematic understanding, organ-
isation and assembly of all knowledge in a particular domain. instead, it allows
for general rules to be de¯ned ¯rst with re¯nements added later as the need
arises [23].
each speci¯cation may have an associated rule set, which consists of a set of
rdr trees stored as xml data. each rdr tree is a collection of simple rules of
the form \if condition then conclusion ", conceptually arranged in a binary tree
structure (see fig. 4). when a rule tree is queried, it is traversed from the root
node of the tree along the branches, each node having its condition evaluated
along the way. for non-terminal nodes, if a node's condition evaluates to true,
the node connected on its true branch is also evaluated; if it evaluates to false ,
the node connected on its false branch is evaluated [24]. when a terminal node
is reached, if its condition evaluates to true then that conclusion is returned as
the result of the tree traversal; if it evaluates to false , then the last node in the
traversal that evaluated to true is returned as the result.
e®ectively, each rule node on the true branch of its parent is an exception
rule of the more general one of its parent (that is, it is a re¯nement of the parent
rule), while each rule node on the false branch of its parent node is an \else" rule
to its parent (or an alternate to the parent rule). this tree traversal provides
implied locality - a rule on an exception branch is tested for applicability only if
its parent (next-general) rule is also applicable. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
true 
default 
1 
ticketssold < (seating * 0.75) 
suspend workitem 
run changetomidvenue 
continue workitem  
3 
equipmentinstalled = false 
suspend case 
run rescheduleconcert 
continue case  2 
ticketssold < (seating * 0.5) 
suspend workitem 
run changetosmallvenue 
continue workitem  
4 
ticketssold < (seating * 0.2) 
suspend case 
run cancelshow 
remove case  condition not satisfied condition satisfied condition 
conclusion fig. 4. example rule tree (for organiseconcert itempreconstraint)
the hierarchy of a worklet rule set is (from the bottom up):
{rule node : contains the details (condition, conclusion, id, parent and so
on) of one discrete ripple-down rule.
{rule tree : consists of a number of rule nodes conceptually linked in a
binary tree structure.
{tree set : a set of one or more rule trees. each tree set is speci¯c to a
particular exception type. the tree set of a case-level exception type will
contain exactly one tree. the tree set of an item-level type will contain one
rule tree for each task of the speci¯cation that has rules de¯ned for it.
{rule set : a set of one or more tree sets representing the entire set of rules
de¯ned for a speci¯cation. each rule set is speci¯c to a particular speci¯ca-
tion. a rule set will contain one tree set for each exception type for which
rules have been de¯ned.
it is not necessary to de¯ne rules for all eleven types for each speci¯cation,
only for those types that are required to be handled; the occurrence of any run-
time exception events that aren't de¯ned in the rule set ¯le are simply ignored.
figure 4 shows the itempreconstraint rule tree for the third task in the
organise concert example, do show , (corresponding to the centre and lower
tiers of figure 1 respectively). this rule tree provides exlets for organisers to
change the venue of the concert, or cancel it, when there are insu±cient tickets
sold to ¯ll the original venue. for example, if a particular do show instancehas a value for the attribute `ticketssold' that is less than 75% of the attribute
`seating' (i.e. the seating capacity of the venue), an exlet is run that suspends the
workitem, runs the compensatory worklet changetomidvenue, and then, once
the worklet has completed, continues (or unsuspends) the workitem. following
the rule tree, if the tickets sold are also less than 50% of the capacity, then we
want instead to suspend the workitem, run the changetosmallvenue worklet,
and then unsuspend the workitem. finally, if less than 20% of the tickets have
been sold, we want to suspend the entire case, run a worklet to perform the tasks
required to cancel the show, and then remove (i.e. cancel) the case.
 
 
 
fig. 5. raise case-level exception screen (organise concert example)
as mentioned previously, the service provides a set of servlet pages that can
be invoked directly by the user via add-ins to the yawl worklist handler, which
are visible only when the service is enabled. one of the servlet pages allows a user
to raise an exception directly with the service (i.e. bypassing the engine) at any
time during the execution of a case. when invoked, the service lists from the rule
set for the selected case the existing external exception triggers (if any) for the
case's speci¯cation (see figure 5). note that these triggers describe events that
may be considered either adverse (e.g. band broken up) orbene¯cial (e.g. ticket
sales better than expected) to the current case, or may simply represent new
or additional tasks that need to be carried out for the particular case instance
(e.g. band requests backstage refreshments). when a trigger is selected by the
user, the corresponding rule set is queried and the appropriate exlet, relative to
the case's context, is executed. item-level external exceptions can be raised in a
similar way.notice that at the bottom of the list (figure 5) the option to add a new
external exception is provided. if an unexpected external exception arises that
none of the available triggers represent, a user can use that option to notify an
administrator, via another servlet page, of the new exception, its context and
possible ways to handle it. the administrator can then create a new exlet in the
rules editor and, from the editor, connect directly to the service to launch the
new exlet for the parent case. new exlets for unexpected internal exceptions are
raised and launched using the same approach as that described for the selection
sub-service, as detailed in [16].
6 related work
since the mid-nineties much research has been carried out on issues related
to exception handling in work°ow management systems. while it is not the
intention of this paper to provide a complete overview of the work done in this
area, reference is made here to a number of quite di®erent approaches; for a more
systematic overview see [18], where di®erent tools are evaluated with respect to
their exception handing capabilities using a patterns-based approach.
generally, commercial work°ow management systems provide only basic sup-
port for handling exceptions [7, 25] (besides modelling them directly in the main
`business logic'), and each deals with them in a proprietary manner; they typ-
ically require the model to be fully de¯ned before it can be instantiated, and
changes must be incorporated by modifying the model statically. sta®ware pro-
vides constructs called event nodes , from which a separate pre-de¯ned exception
handling path or sequence can be activated when an exception occurs. it may
also suspend a process either inde¯nitely or wait until a timeout occurs. if a work
item cannot be processed it is forwarded to a `default exception queue' where it
may be manually purged or re-submitted. cosa provides for the de¯nition of
external `triggers' or events that may be used to start a sub-process. all events
and sub-processes must be de¯ned at design time. mq work°ow supports time-
outs and, when they occur, will branch to a pre-de¯ned exception path and/or
send a message to an administrator. sap r/3 provides for pre-de¯ned branches
which, when an exception occurs, allows an administrator to manually choose
one of a set of possible branches.
among the non-commercial systems, the opera prototype [7] incorporates
language constructs for exception handling and allows for exceptions to be han-
dled at the task level, or propagated up various ancestor levels throughout the
running instance. it also removes the need to de¯ne the exception handler a-
priori , although the types of exceptions handled are transactional rather than
control °ow oriented. the eflow system [26] uses rules to de¯ne exceptions, al-
though they cannot be de¯ned separately to the standard model. adept [27]
supports modi¯cation of a process during execution (i.e. add, delete and change
the sequence of tasks) both at the type (dynamic evolution) and instance levels
(ad-hoc changes). such changes are made to a traditional monolithic model and
must be achieved via manual intervention. the adome system [28] providestemplates that can be used to build a work°ow model, and provides some sup-
port for (manual) dynamic change. a catalog of `skeleton' patterns that can be
instantiated or specialised at design time is supported by the werde system
[5]. again, there is no scope for specialisation changes to be made at runtime.
agentwork [29] provides the ability to modify process instances by dropping
and adding individual tasks based on events and eca rules. however, the rules
do not o®er the °exibility or extensibility of ripple down rules, and changes
are limited to individual tasks, rather than the task-process-speci¯cation hierar-
chy supported by the worklet service. also, the possibility exists for con°icting
rules to generate incompatible actions, which requires manual intervention and
resolution. it should be noted that only a small number of academic prototypes
have had any impact on the frameworks o®ered by commercial systems [18, 30].
the worklet service di®ers considerably from the above approaches. exlets,
that may include worklets as compensatory processes, dynamically linked to
extensible ripple down rules, provide an novel alternative method for the pro-
vision of dynamic °exibility and exception handling in work°ows.
7 conclusion and future work
work°ow management systems impose a certain rigidity on process de¯nition
and enactment because they generally use frameworks based on assembly line
metaphors rather than on ways work is actually planned and carried out. an
analysis of activity theory provided principles of work practices that were used
as a template on which a work°ow service has been built that better supports
°exibility and dynamic evolution through innovative exception handling tech-
niques. by capturing contextual data, a repertoire of exlets and worklets is
constructed that allow for contextual choices to be made from the repertoire
at runtime to e±ciently carry out work tasks. these actions directly provide
for process evolution, °exibility and dynamic exception handling, and mirror
accepted work practices.
this implementation uses the open-source, service-oriented architecture of
yawl to develop a service for dynamic exception handling completely indepen-
dent to the core engine. thus, the implementation may be viewed as a successful
case study in service-oriented computing. as such, the approach and resultant
software can also be used in the context of other process engines (for example
bpel based systems, classical work°ow systems, and the windows work°ow
foundation). one of the more interesting things to be incorporated in future
work is the application of process mining techniques to the various logs collected
by the service; a better understanding of when and why people tend to \deviate"
from a work plan is essential for providing better tool support. the application of
archival and resource data will also be useful for further re¯ning the contextual
choices de¯ned in the rule set.
all system ¯les, source code and documentation for yawl and the worklet
service, including the examples discussed in this paper, may be downloaded via
www.yawl-system.com .references
1.w.m.p. van der aalst, mathias weske, and dolf grä unbauer. case handling: a new
paradigm for business process support. data & knowledge engineering , 53(2):129{
162, 2005.
2.gregor joeris. de¯ning °exible work°ow execution behaviors. in peter dadam and
manfred reichert, editors, enterprise-wide and cross-enterprise work°ow man-
agement: concepts, systems, applications , volume 24 of ceur workshop proceed-
ings, pages 49{55, paderborn, germany, october 1999.
3.alex borgida and takahiro murata. tolerating exceptions in work°ows: a uni-
¯ed framework for data and processes. in proceedings of the international joint
conference on work activities, coordination and collaboration (wacc'99) , pages
59{68, san francisco, ca, february 1999. acm press.
4.s. rinderle, m. reichert, and p. dadam. correctness criteria for dynamic changes
in work°ow systems: a survey. data and knowledge engineering , 50(1):9{34, 2004.
5.fabio casati. a discussion on approaches to handling exceptions in work°ows. in
cscw workshop on adaptive work°ow systems , seattle, usa, november 1998.
6.c.a. ellis, k. keddara, and g. rozenberg. dynamic change within work°ow
systems. in n. comstock, c. ellis, r. kling, j. mylopoulos, and s. kaplan, editors,
proceedings of the conference on organizational computing systems , pages 10{21,
milpitas, california, august 1995. acm sigois, acm press, new york.
7.claus hagen and gustavo alonso. exception handling in work°ow management
systems. ieee transactions on software engineering , 26(10):943{958, october
2000.
8.fabio casati, mariagrazia fugini, and isabelle mirbel. an environment for de-
signing exceptions in work°ows. information systems , 24(3):255{273, 1999.
9.mark s. ackerman and christine halverson. considering an organization's mem-
ory. in proceedings of the acm 1998 conference on computer supported cooper-
ative work , pages 39{48. acm press, 1998.
10.peter a. k. larkin and edward gould. activity theory applied to the corpo-
rate memory loss problem. in l. svennson, u. snis, c. sorensen, h. fagerlind,
t. lindroth, m. magnusson, and c. ostlund, editors, proceedings of iris 23 lab-
oratorium for interaction technology , university of trollhattan uddevalla, 2000.
11.jakob e. bardram. i love the system - i just don't use it! in proceedings of the
1997 international conference on supporting group work (group'97) , phoenix,
arizona, 1997.
12.i. bider. masking °exibility behind rigidity: notes on how much °exibility people
are willing to cope with. in j. castro and e. teniente, editors, proceedings of the
caise'05 workshops , volume 1, pages 7{18, porto, portugal, 2005. feup edicoes.
13.yrjo engestrom, reijo miettinen, and raija-leena punamaki, editors. perspectives
on activity theory . cambridge university press, 1999.
14.bonnie a. nardi, editor. context and consciousness: activity theory and human-
computer interaction . mit press, cambridge, massachusetts, 1996.
15.michael adams, david edmond, and arthur h.m. ter hofstede. the application of
activity theory to dynamic work°ow adaptation issues. in proceedings of the 2003
paci¯c asia conference on information systems (pacis 2003) , pages 1836{1852,
adelaide, australia, july 2003.
16.michael adams, arthur h. m. ter hofstede, david edmond, and w.m.p. van
der aalst. worklets: a service-oriented implementation of dynamic °exibility inwork°ows. in r. meersman and z. tari et. al., editors, proceedings of the 14th in-
ternational conference on cooperative information systems (coopis'06) , volume
lncs 4275, pages 291{308, montpellier, france, november 2006. springer-verlag.
17.michael adams, arthur h. m. ter hofstede, david edmond, and w.m.p. van der
aalst. facilitating °exibility and dynamic exception handling in work°ows through
worklets. in orlando bello, johann eder, oscar pastor, and jo~ ao falc~ ao e cunha,
editors, proceedings of the caise'05 forum , pages 45{50, porto, portugal, june
2005. feup edicoes.
18.n. russell, w.m.p. van der aalst, and a.h.m. ter hofstede. work°ow exception
patterns. in eric dubois and klaus pohl, editors, proceedings of the 18th interna-
tional conference on advanced information systems engineering (caise 2006) ,
pages 288{302, luxembourg, june 2006. springer.
19.w.m.p. van der aalst and a.h.m. ter hofstede. yawl: yet another work°ow
language. information systems , 30(4):245{275, 2005.
20.w.m.p. van der aalst, l. aldred, m. dumas, and a.h.m. ter hofstede. design
and implementation of the yawl system. in a. persson and j. stirna, editors,
proceedings of the 16th international conference on advanced information sys-
tems engineering (caise 04) , volume 3084 of lncs , pages 142{159, riga, latvia,
june 2004. springer verlag.
21.w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. barros.
work°ow patterns. distributed and parallel databases , 14(3):5{51, july 2003.
22.p. compton and b. jansen. knowledge in context: a strategy for expert system
maintenance. in j.siekmann, editor, proceedings of the 2nd australian joint arti¯-
cial intelligence conference , volume 406 of lecture notes in arti¯cial intelligence ,
pages 292{306, adelaide, australia, november 1988. springer-verlag.
23.tobias sche®er. algebraic foundation and improved methods of induction of ripple
down rules. in proceedings of the paci¯c rim workshop on knowledge acquisition ,
pages 279{292, sydney, australia, 1996.
24.b. drake and g. beydoun. predicate logic-based incremental knowledge acqui-
sition. in p. compton, a. ho®mann, h. motoda, and t. yamaguchi, editors,
proceedings of the sixth paci¯c international knowledge acquisition workshop ,
pages 71{88, sydney, december 2000.
25.fabio casati and giuseppe pozzi. modelling exceptional behaviours in commer-
cial work°ow management systems. in 1999 ifcis international conference on
cooperative information systems , pages 127{138, edinburgh, scotland, 1999.
26.fabio casati, ski ilnicki, lijie jin, vasudev krishnamoorthy, and ming-chien
shan. adaptive and dynamic composition in eflow. in 12th international confer-
ence, caise 2000 , pages 13{31, stockholm, sweden, 2000.
27.clemens hensinger, manfred reichert, thomas bauer, thomas strzeletz, and pe-
ter dadam. adept workflow - advanced work°ow technology for the e±cient sup-
port of adaptive, enterprise-wide processes. in conference on extending database
technology , pages 29{30, konstanz, germany, march 2000.
28.dickson chiu, qing li, and kamalakar karlapalem. a logical framework for ex-
ception handling in adome work°ow management system. in 12th international
conference caise 2000 , pages 110{125, stockholm, sweden, 2000.
29.robert muller, ulrike greiner, and erhard rahm. agentwork: a work°ow sys-
tem supporting rule-based work°ow adaptation. data & knowledge engineering ,
51(2):223{256, november 2004.
30.michael zur muehlen. work°ow-based process controlling. foundation, design,
and implementation of work°ow-driven process information systems , volume 6 of
advances in information systems and management science . logos, berlin, 2004.