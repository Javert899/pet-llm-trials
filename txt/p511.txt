on the maturity of open source bpm systems
petia wohed1, arthur h.m. ter hofstede2, nick russell3, birger andersson1, and wil m.p. van der aalst2;3
1stockholm university/the royal institute of technology
fpetia,ba g@dsv.su.se
2queensland university of technology, australia
a.terhofstede@qut.edu.au
3eindhoven university of technology
fn.c.russell,w.m.p.v.d.aalst g@tue.nl
1 introduction
two major trends in the area of information systems development are the growing interest for workﬂow and busi-
ness process management (bpm) systems and the increasing acceptance and spread of open source software. this
development raises the following questions:
1.what are the prominent representatives of current open source workﬂow and bpm systems?
2.what is the maturity level of these systems?
seeking answers to these questions we have performed a study. first an overview of the existing open source systems
was made and three systems: jbpm, openwfe, and enhydra shark, selected for further analysis. then a detailed
analysis on the selected systems was performed. the results from this analysis were documented and the developers
invited to comment. based on the feedback from the developers the results were revisited and the study ﬁnalized [5].
in this article we summarise the study and reﬂect on the area of open source bpm systems.
2 the study
there is a large number of open source workﬂow and bpm offerings. for instance two separate enumerations (see [3]
and [4]) contain more than 30 references each. after an extensive literature review we selected three from these systems
which we state are good representatives for our study. these are jbpm, openwfe, and enhydra shark and they are
also the systems pointed out by paul harmon in his article from 31st of july 2007 [1] as leading in the area.
a well-established way of determining the functionality of a bpm offering is by conducting a patterns-based
analysis. the workﬂow patterns initiative4started in the late nineties and led to a collection of patterns that among
others have been used to assess the control-ﬂow speciﬁcation, data manipulation and resource handling capabilities of
a process language. since the creation of the original control-ﬂow patterns more than twenty systems, (proposed) stan-
dards and languages have been subjected to a patterns-based evaluation. these analyses provide a detailed comparative
insight which may serve as the basis for tool selection or adaptations.5
we used the workﬂow patterns framework not only because it is a powerful analysis tool, but also because many
evaluation of proprietary tools have already been performed with it. this enables comparison and here we will also
compare the results from our study with the results from corresponding studies performed on staffware6, ibm’s
websphere mq and oracle bpel process manager7.
4www.workflowpatterns.com
5it is worthwhile pointing out that a patterns-based analysis is concerned with suitability rather than expressive power . the latter
is a formal notion that deals with the issue of whether a language can express certain requirements at all, while the former
notion deals with the issue of how easy it is to capture such requirements. clearly the former notion is the more important one
as e.g. java can capture all computing requirements but nonetheless a big number of languages, e.g. jbpm (java for business
process management) are continuously created raising the expectations from these languages with respect to their suitability for
capturing a diversity of business process scenarios!
6staffware was since bought by tibco and used as a base for tibco’s i-process suite. around january 2008 tibco’s i-process
suite migrated to bpmn as a graphical notation (supporting a sub-set of bpmn symbols) and xpdl 2.0 as a process deﬁnition
language.
7as can be read from its name, oracle bpel process manager is based on bpel4ws, i.e. business process execution language
for web services language, which was deﬁned in 2002 as a merge of ibm’s wsfl and microsoft’s xlang languages.downloads in
thousands
2002 2003 2004 2005600
100
50
203040
openwfebonita
open business enginejbpm
ohioedge crm+ bpm servertaverna*wfmopen
enhydra sharkuengine bpm60
yawl
elawoffice*
appache agile/appache ode(openwferu)runa wfeebills*
macdevdownload statistics
(in thousands):
retrieved on 3 june 08
from sourceforge
jbpm             - 674
openwfe    - 125
yawl           - 59
retrieved june-july 08
from the tools' develpers
enhydra shark   -  > 100
bonita                - 70
openwferu      - 5figure 1 open source bpms - history
3 the open source systems
figure 1 shows a snapshot (from 3rd of july 2008) of the most downloaded workﬂow and bpm systems distributed
through a code repository. the systems in the ﬁgure are ordered historically with respect to month and year of their reg-
istration. the code repositories searched for this snapshot were sourceforge, rubyforge, objectwebforge, tigris.org,
bountysource, berlios, javaforge and gnu savannah8. the selection criteria for a system to be captured in the ﬁg-
ure were: 1) at least one of the keywords “workﬂow” and “bpm” appears (at the time point of the search) in the
project name or description; 2) the project is about a workﬂow or bpm system (and not for instance about a document
management system utilizing a bpm solution); 3) the project is active, i.e. at least one ﬁle upload has been made
during the last two years (i.e. since june 2006); and 4) the number of downloads is larger than 20 thousand. most of
the systems in figure 1 are distributed through sourceforge where download statistic is publicly available. for enhy-
dra shark, bonita, and openwferu (i.e. openwfe’s successor), distributed through objectwebforge or rubyforge,
such statistic was retrieved from the developers of the systems.
it should be noted that three of the systems in the ﬁgure, taverna, ebill, and elowofﬁce (marked with an asterisk),
are domain speciﬁc9, hence fall outside our focus on generic workﬂow and process management systems. the remain-
ing of the systems in the ﬁgure can clearly be divided into three distinct groups: systems with more than 100 thousand
downloads, i.e., jbpm, openwfe and enhydra shark; systems with around 60-70 thousand downloads, i.e., bonita
and yawl; and systems with around 20 and 30 thousand downloads. as we are closely involved with the development
of yawl, yawl was kept out of the study, as was bonita which was the only other representative in this group. our
attention was therefore turned into the three systems from the ﬁrst group: jbpm, openwfe and enhydra shark.
jbpm10is a java based workﬂow management system provided by jboss and available on sourceforge. version
3.1.4 of it was evaluated. the offering is distributed with an lgpl license. the components jboss jbpm graphical
process designer, jboss jbpm core component, and jboss jbpm console web application were used during our work.
fig. 2 shows a screenshot from jboss jbpm console and the interface of the tool during the execution of a task.
8hence systems distributed directly from the vendors, such as intalio’s bpm system are not shown in this ﬁgure.
9taverna is a scientiﬁc workﬂow management system, ebills is a system for supporting electronic payment workﬂows, and elow
is tailored to support low ﬁrms.
10www.jboss.com/products/jbpm figure 2 jboss jbpm - execute task window
openwfe11is a workﬂow management system, written in java. version 1.7.3 was studied through the compo-
nents: openwfe engine, openwfe webclient, and an independent xml editor. fig. 3 shows a screenshot from the
webclient and the execution of a task. the development of openwfe has now migrated from java to ruby with the
new implementation referred to as openwferu. openwfe is distributed through sourceforge, while openwferu
is distributed through rubyforge. the java version is distributed with an lgpl license and the ruby version is dis-
tributed with a bsd license.
figure 3 openwfe - execute task window
enhydra shark12is a java workﬂow engine offering from together teaml ¨osungen distributed through ob-
jectwebforge. we worked with the following components: shark tws-community-2.0-1 (tws - together workﬂow
server) and the editor jawe twe-community-2.2-1 (twe - together workﬂow editor). the evaluation was done
through the tws admin client. together teaml ¨osungen provides also a closed-source version of the tool i.e., to-
gether workﬂow editor professional and together workﬂow server professional (which have not been included in
our study). the open source version of the offering is distributed with an lgpl licence. fig. 4 shows a screenshot
from the editor and exempliﬁes the modeling notation used in the tool.
11www.openwfe.org
12http://www.enhydra.org/workflow/shark/index.htmlfigure 4 enhydra shark - together workﬂow editor (twe)
4 the results
the study was carried out as follows. solutions for every pattern, 126 all together, were sought in each of the tools.
where identiﬁed the solutions were deployed, tested, and feedback from the developers considered. tables 1- 3 sum-
marize the results for the control-ﬂow, data, and resource perspectives, correspondingly.
thecontrol-ﬂow patterns systemize different scenarios for how activities are ordered in a process. the data pat-
terns capture different mechanisms for dealing with and distributing data relevant for workﬂow and business process
management systems. the resource patterns outline different scenarios of how work is distributed among the re-
sources/actores in a process.
a ‘+’ in the tables indicates that direct support for a pattern is present, a ‘+/–’ indicates that direct support is present
but in a limited way, and a ‘–’ shows the absence of support for a pattern. overall, one can conclude that the range
of constructs supported by the three systems is somewhat limited, although openwfe tends to offer a considerably
broader range of features than jbpm and enhydra shark.
from a control-ﬂow standpoint, jbpm and enhydra shark support a relatively limited set of control-ﬂow operators
offering little support for patterns other than those related to basic control-ﬂow (see table 1). openwfe offers broader
support for variants of the partial join and discriminator constructs and also for controlled task concurrency (i.e.
multiple instance tasks).
from a data perspective, all three offerings support a limited range of data element bindings and rely heavily on
case-level data elements. whilst simplistic the data passing strategies employed in the three systems are reasonably
effective and include consideration of important issues such as inline data manipulation as data elements are being
passed. there are however limited capabilities for handling external data interaction without programmatic extensions.
it is noticeable that jbpm relies heavily on the use of java for addressing data-related issues and thus its overall level
of direct support for the data patterns is relatively low. openwfe provides a more comprehensive support in this
perspective and supports a wider (but still limited) range of features. in enhydra shark external data communication
is meant to be supported through predeﬁned tool agents, however some of these (e.g. mailtoolagent) did not work
in the evaluated open-source version of the offering.
a notable shortcoming in all three offerings is the minimalistic support for the data perspective to inﬂuence other
aspects of workﬂow operation, esp. the control-ﬂow perspective e.g. no (or limited) postconditions, trigger support
and limited data-based routing support. another concern are the shortcomings when dealing with data manipulation
activities occurring in parallel. (i.e. data is lost either because parallel updates on it are ignored, or because some of
the updates are given overwriting priority). when parallel work items are operating on the same data: jbpm copies
back the corresponding values in the order of work items’ completion (overwriting the values of earlier completed
instances); openwfe copies back the corresponding values according to the speciﬁed strategy i.e. first, last, etc
(overwriting data when the last strategy is applied and ignoring new data when the first strategy is applied); and
enhydra shark does not copy back the variable values (hence also losing data).
for the resource perspective and the results listed in table 3, it can be conclude that only simple notions of
work distribution are supported and typically only one paradigm exists for work item routing in each offering. there
is no support for any form of work distribution based on organizational criteria, resource capabilities or execution
history. all three offerings provide relatively simple facilities for work item management e.g., (for two of them) there
is no ability to conﬁgure work lists at resource or system level, no notion of concurrent work item execution and
no facilities for optimizing work item throughput (e.g. automated work item commencement, chained execution).
one area where openwfe demonstrates noticeably better facilities is in terms of the range of detour patterns (e.g.
deallocation, reallocation) that it supports.basic control–ﬂow a b c 1 2 3 termination a b c 1 2 3
1. sequence + + + + + + 11. implicit termination + + + + + +
2. parallel split + + + + + + 43. explicit termination – – – – – –
3. synchronization + + + + + + multiple instances
4. exclusive choice + + + + + + 12. mi without synchronization + – + + + +
5. simple merge + + + + + + 13. mi with a pri. design time knl + – + – + –
advanced synchronization 14. mi with a pri. runtime knl. + – + – + –
6. multiple choice – + + – +/– + 15. mi without a pri. runtime knl. – – +/– – – –
7. str synchronizing merge – + + – – – 27. complete mi activity – – – – – –
8. multiple merge – – – + – – 34. static partial join for mi – – – – + –
9. structured discriminator – – – – + – 35. static canc. partial join for mi – – – – + –
28. blocking discriminator – – – – – – 36. dynamic partial join for mi – – – – – –
29. cancelling discriminator – – – – + – state-based
30. structured partial join – – – – + – 16. deferred choice – – + + – –
31. blocking partial join – – – – – – 39. critical section – – + – – –
32. cancelling partial join – – – – + – 17. interleaved parallel routing – – – – +/– –
33. generalized and-join – – – + – – 40. interleaved routing – – – – + –
37. local sync. merge – + + – +/– – 18. milestone – – +/– – – –
38. general sync. merge – – – – – – cancellation
41. thread merge – – +/– +/– – – 19. cancel activity + – +/– + – –
42. thread split – – +/– +/– – – 20. cancel case – – + – +/– +
iteration 25. cancel region – – +/– – – –
10. arbitrary cycles + – – + + + 26. cancel mi activity + – + – – –
21. structured loop – + + – + – trigger
22. recursion + + – – + + 23. transient trigger + – – + + –
24. persistent trigger – – + – – –
table 1. support for the control-ﬂow patterns in a–staffware 10, b–websphere mq 3.4, c–oracle bpel pm 10.1.2, 1–jboss jbpm 3.1.4, 2–openwfe 1.7.3, and
3–enhydra shark 2.0
data visibility a b c 1 2 3 data interaction-external (cont.) a b c 1 2 3
1. task data – +/– +/– +/– – +/– 21. env. to case–push +/– +/– – – – –
2. block data + + – – + + 22. case to env.–pull – – – – – –
3. scope data – – + – +/– – 23. workﬂow to env.–push – +/– – – – –
4. mi data +/– + +/– – + + 24. env. to process–pull +/– – – – – –
5. case data +/– + + + + + 25. env. to process–push – +/– – – – –
6. folder data – – – – – – 26. process to env.–pull + + – – – –
7. global data + + + – + – data transfer
8. environment data + +/– + +/– + +/– 27. by value–incoming – + + – – +/–
data interaction-internal 28. by value–outgoing – + + – – +/–
9. task to task + + + + + + 29. copy in/copy out – – + + + +
10. block to subpr. dec. + + – – + + 30. by reference–unlocked + – + – – –
11. subpr. dec. to block + + – – + + 31. by reference–locked – – – – + –
12. to mi task – – +/– – + – 32. data transf.–input +/– – – + + +
13. from mi task – – +/– – – – 33. data transf.–output +/– – – + + +
14. case to case +/– +/– – +/– +/– +/– data-based routing
data interaction-external 34. task precond.–data exist. + – – – + –
15. task to env.–push + +/– + +/– + + 35. task precond.–data value + – + – + –
16. env. to task–pull + +/– + +/– + + 36. task postcond.–data exist. +/– + – – – –
17. env. to task–push +/– +/– + – – – 37. task postcond.–data val. +/– + – – – +/–
18. task to env.–pull +/– +/– + – – – 38. event-based task trigger + +/– + – – –
19. case to env.–push – – – – – – 39. data-based task trigger – – – – – –
20. env. to case–pull – – – – – – 40. data-based routing +/– + + +/– +/– +
table 2. support for the data patterns in a–staffware 9, b–websphere mq 3.4, c–oracle bpel pm 10.1.2, 1–jboss jbpm 3.1.4, 2–openwfe 1.7.3, and 3–enhydra
shark 2.0
5 comparison with closed source systems
we used the workﬂow patterns framework not only because it is a powerful analysis tool, but also because many
evaluation of proprietary tools were already performed with it and their results comparable to the results from sim-
ilar studies. in tables 1- 3 the results from the evaluations of three proprietary offerings taken from [2] are shown:
staffware13, ibm’s websphere mq and oracle bpel process manager14.
when it comes to comparing the state-of-the-art in open source workﬂow systems to that in proprietary systems, the
results in tables 1- 3 show that none of the offerings stands out as being clearly superior to the others, although it can
be argued that oracle bpel pm demonstrates a marginally wider range of features, whilst enhydra shark and jbpm
clearly lag behind in terms of overall patterns support. oracle bpel pm and openwfe tend to demonstrate broader
pattern support in their corresponding tool classes (i.e. open-source vs proprietary), especially in the control-ﬂow
perspective. moreover, it can also be observed that the proprietary tools are generally better equipped in the resource
13staffware was since bought by tibco and used as a base for tibco’s i-process suite. around january 2008 tibco’s i-process
suite migrated to bpmn as a graphical notation (supporting a sub-set of bpmn symbols) and xpdl 2.0 as a process deﬁnition
language
14as can be read from its name, oracle bpel process manager is based on bpel4ws, i.e. business process execution language
for web services language, which was deﬁned in 2002 as a merge of ibm’s wsfl and microsoft’s xlang languagescreation patterns a b c 1 2 3 pull patterns, continuation a b c 1 2 3
1. direct allocation + + + + – + 24. sys.-determ. wl mng. + – – – – –
2. role-based allocation + + + – + + 25. rrs.-determ. wl mng. + + + – – –
3. deferred allocation + + + + + + 26. selection autonomy + + + + + +
4. authorization – – – – – – detour patterns
5. separation of duties – + – – – – 27. delegation + + + – – –
6. case handling – – + – – – 28. escalation + + + – + –
7. retain familiar – + + + – – 29. deallocation – – + – + +
8. capability-based alloc. – – + – – – 30. stateful reallocation +/– + + – + –
9. history-based alloc. – – +/– – – – 31. stateless reallocation – – – – – –
10. organizational alloc. +/– + +/– – – – 32. suspension/resumption +/– +/– + + – –
11. automatic execution + – + + + + 33. skip – + + – – –
push patterns 34. redo – – – – +/– –
12. distr. by offer-single rsr. – – + – – + 35. pre-do – – – – – –
13. distr. by offer-multiple rsr. + + + – + + auto-start patterns
14. distr. by alloc.-single rsr. + + + + – – 36. comm. on creation – – – – – –
15. random allocation – – +/– – – – 37. comm. on allocation – + – – – +
16. round robin alloc. – – +/– – – – 38. piled execution – – – – – –
17. shortest queue – – +/– – – – 39. chained execution – – – – – –
18. early distribution – – – – – – visibility patterns
19. distribution on enablement + + + + + + 40. conﬁg. unalloc. wi vis. – – – – +/– –
20. late distribution – – – – – – 41. conﬁg. alloc. wi vis. – – – – +/– –
pull patterns multiple resource patterns
21. rsr.-init. allocation – – – – – – 42. simultaneous execution + + + – – –
22. rrs.-init. exec.-alloc. wi + + + + – – 43. additional resources – – + – – –
23. rsr.-init. exec.-offered wi + + + – + +
table 3. support for the resource patterns in a–staffware 9, b–websphere mq 3.4, c–oracle bpel pm 10.1.2, 1–jboss jbpm 3.1.4, 2–openwfe 1.7.3, and
3–enhydra shark 2.0
perspective and better able to support interaction with the external environment, whereas the open-source systems
essentially rely on their users having programming experience (e.g., java) to achieve the required integration with
other systems. in the data perspective jbpm, relying heavily on java coding, lags clearly behind the other offerings.
overall one can conclude that the open source systems are geared more towards developers than towards business
analysts. if one is proﬁcient with java, jbpm may be a good choice, although if not, choosing jbpm is less advisable.
similarly, whilst openwfe has a powerful language for workﬂow speciﬁcation in terms of its support for the workﬂow
patterns, we postulate that it will be difﬁcult to understand by non-programmers. finally, endydra shark’s minimalistic
support for the workﬂow patterns may require complicated work arounds for capturing nontrivial business scenarios.
finally, we should note that there are a couple of limitations with our study. first, while the patters framework is
a powerful analysis tool, it does not cover all the aspects of interest for a workﬂow or business process management
system. aspects such as performance capabilities, version management, model analysis capabilities, and administra-
tion facilities are some examples of aspects not covered by the framework. secondly, the way in which the studied
open source offerings were selected provides a limitation. while systematic it leaves out a third category of offerings
namely offerings which were initially developed as proprietary products and lately released as open source, but still
only available through their vendors’ web sites, e.g. intalio bpms.
6 reﬂections
the use of open source software for the deployment of bpm solutions opens up a series of new opportunites for both
open source developers and the user community more generally. unlike other application domains, the bpm area is
relatively new and not polarised by the efforts of any particular mainstream software developer. indeed as recognised
by industry analysts, it is a sector that is in a signiﬁcant state of ﬂux as new entrants identify and capitalise on
opportunities in different aspects of the bpm lifecycle. the dynamic nature of the ﬁeld brings with it both challenges
and opportunities for software developers and users alike. in this section we consider these issues in more depth.
6.1 implications for open source developers
the rapidly evolving nature of the bpm domain makes it a fertile area for open source developers to identify and ex-
ploit innovative niche opportunities. as a relatively immature software domain, it remains an area that is not yet dom-
inated by any particular vendor or standards initiative. hence there is signiﬁcant opportunity for the rapid, grassroots
approach to software development championed by the open source community. in order for open source developers to
succeed in the ﬁeld however, there are both new challenges and considerations that they need to be mindful of.
a new technology landscape for bpm is emerging as the bpm marketplace continues to mature, it is becoming
increasingly evident that it is composed of a series of distinct application areas based around individual segmentsof the process lifecycle. areas such as business process modelling, process enactment, process mining, and business
activity monitoring (amongst many other possibilities) all constitute valid focus areas for bpm tool suppliers, however
the inherent complexity of each of these individual areas means that it is extremely unlikely that a single solution –
commercial or open source – is able to adequately meet the functional demands of more than one bpm application
area. as it is generally the case that open source initiatives are resource constrained, developers should carefully
consider the scope of the solution that they intend to deliver.
effective business solutions are made up of many parts as process thinking becomes more pervasive, process
technology is being increasingly applied to more complex business problems. these solutions cross organisational
and technology boundaries in ways that have not been previously considered and it is now increasingly likely that one
single process technology is not able to fulﬁl the needs of all aspects of a business process. with this in mind, not
only should open source developers focus on delivering a comprehensive solution in a speciﬁc bpm application area,
they should consider their offering as just one part of the overall bpm landscape and actively examine how it can
effectively interoperate with similarly positioned tools (open or closed source) in other related bpm application areas.
standards are a double-edged sword traditionally, it standards have been proposed as a basis for achieving in-
creased interoperability between distinct technological offerings. however in recent years, many standards initiatives
seem increasingly to hamper the entry of new solutions providers. the standards are both informally deﬁned and
subject to ongoing revision meaning developers continually need to update their software (sometimes markedly) in
order to continue to be compliant as the standard(s) evolve. moreover the fundamental intention of many standards
(i.e. a single agreed way of working in a given technical domain) is not even pursued by the parties behind them.
as an example, microsoft is a major contributor to the bpel standard, but only partially supports it in their biztalk
offering and in other initiatives such as the windows workﬂow foundation (part of windows vista) actively promotes
alternate ways of implementing some bpel constructs. while in bpel the <ﬂow>operator can be used to model
graph-based process models, this construct is not available in the workﬂow foundation. instead there is a graph-based
construct that only allows for sequential behaviour and a (structured) parallel composition operator. since the large
software companies do not take their own standardization efforts seriously but still expect other parties to support
them, it seems that smaller competitors (e.g. open source initiatives) can only be slowed down in their development
efforts by paying too much attention to such standards. with this in mind, whilst open source developers need to be
mindful of industry standards, they should not view them as a panacea which will necessarily increase the usage and
relevance of their offering.
open source offers a variety of new distribution possibilities one of the signiﬁcant changes engendered by the
open source movement is a recognition that the value of a software offering lies not simply in having open access
to the associated source code but more speciﬁcally in possessing the knowledge associated with its implementation
and operation. this shift in value recognition opens up a variety of new ways in which open source offerings can
be distributed and deployed. open source developers should be mindful of these alternatives and recognise that it
is no longer necessary to deliver software directly to the end user, but that alternate distribution opportunities exist
such as embedding their offering in other products (possibly offered by other vendors), licensing its deployment and
distributing it as a companion to other suitably aligned products.
6.2 implications for open source users
on the surface, open source bpm solutions seem to offer the end user the answer to their bpm prayers - an innovative,
rapidly evolving and cost-effective source of potential solutions to the wide range of bpm-related issues that they are
currently facing. however despite the promising outlook offered by the open source bpm community, there are some
salient considerations for potential end-users of these offerings.
open source bpm is technology-transfer not product acquisition the acquisition model for open source technol-
ogy is inherently different to that of commercial software offerings. the end deliverable is not carefully packaged and
well documented software marketed to potential users by savvy pre-sales staff and delivered by an experienced tech-
nical team. its more likely to be source code downloaded from a website. the initiative for open source procurement
comes from the user not the vendor. this has a signiﬁcant implication: the end-user cannot expect simply to “use” the
software as they would with any other commercial tool, rather they need to “own” the solution at both a conceptual
and a technical level. this entails a far greater investment in both upfront and ongoing education in the product’s
overall construction and operation than would be the case with commercial off-the-shelf (cots) software. moreover
end-users should anticipate that the deployment of an open source offering will involve some degree of customisation
to their speciﬁc needs and that they will most likely need to commission or undertake this customisation themselves.community engagement is vital to long-term success successful deployments of open source offerings are char-
acterised by users who have successfully engaged with the software developers and continue to do so on a long-term
basis. this is vital as users should not only focus on addressing short-term support issues but also need to provide
broader feedback to developers on the realities of using the software and the opportunities for its longer term devel-
opment. one of the great successes of open source development practices has been the establishment of successful
models and associated technology support for distributed software development. these attributes offer users the abil-
ity to interact with and support development efforts in ways not previously available to them. they also provide the
opportunity for the user to actually guide the long term development plans for the software in a way that is generally
not possible with cots software.
total cost of ownership can be difﬁcult to establish by the time that commercial software offerings are taken to
market, their overall value has been recognised by the vendor and quantiﬁed in terms of their overall purchase price.
moreover, the experiences of other customers give the new user some insight into the total cost of ownership (tco)
for the offering i.e. the overall cost of acquiring and utilising the software over a given period of time. the same
degree of certainty is difﬁcult to establish for open source offerings. although upfront purchase costs are likely to be
minimal (if there are any at all), there is likely to be a signiﬁcant education and technology expense as new users seek
to understand and adapt the software to their speciﬁc needs. the extent of these costs can be difﬁcult to quantify. in
addition, actual operational costs can also be difﬁcult to determine, given that it may not be possible to learn from the
experiences of other users and that there may not be others who are using the software in the same way.
early adopters need to ensure they mitigate their risk in many cases, open source bpm efforts are in the early
stages of their overall development lifecycle. whilst this has the potential advantage that users are able to acquire
innovative bpm software much earlier than might ordinarily be the case, it carries with it the concomitant risk that
the software may deviate from its original stated objectives or that it may just not meet them at all. moreover, given
the rapid evolution of many open source initiatives, it is possible that these issues might arise over a much shorter
timeframe than might normally be the case with cots software. potential open source users need to build these
considerations into their acquisition plans for such software. furthermore, they also need to recognise the potential for
the situation to arise where within their own deployment they choose to deviate from the release sequence adopted by
the open source developer.
licencing considerations need careful attention one of the salient features of open source software is that many
development initiatives in turn rely on other open source software products. as well as introducing some risk into
the correct operation of a given offering along the lines discussed in the previous point, there is also a more subtle
issue with regard to the licencing of any associated products. when a user deploys a software offering, in many cases
they are actually deploying several, each of which has its own set of licencing conditions. whilst these may not be
especially restrictive if the acquired software is purely used internally within an organisation, there can be signiﬁcant
implications if the software or any associated modiﬁcations to it need to be distributed on a wider basis.
references
1.paul harmon. exploring bpms with free or open source products. bptrends, available at www.bptrends.com/
publicationfiles/advisor200707311\%2epdf , july 31 2007. last accessed 27 sep 07.
2.workﬂow patterns initiative. workﬂow patterns - homepage. available at www.workflowpatterns.com . last accessed 27
sep 07.
3.java-source.net. open source workﬂow engines in java. available at enumerationsatjava-source.net/
open-source/workflow-engines . last accessed 06 jun 08.
4.manageability. open source workﬂow engines written in java. available at www.manageability.org/blog/stuff/
workflow\_in\_java . last accessed 06 jun 08.
5.p. wohed, b. andersson, a.h.m. ter hofstede, n.c. russell, and w.m.p. van der aalst. patterns-based evaluation of open
source bpm systems: the cases of jbpm, openwfe, and enhydra shark. bpm center report bpm-07-12, bpmcenter.org,
2007.