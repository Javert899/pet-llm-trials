process querying
polyvyanyy, a.; ouyang, c.; barros, a.; van der aalst, w.m.p.
published in:
decision support systems
doi:
10.1016/j.dss.2017.04.011
published: 01/08/2017
document version
publisher’s pdf, also known as version of record (includes final page, issue and volume numbers)
please check the document version of this publication:
• a submitted manuscript is the author's version of the article upon submission and before peer-review. there can be important differences
between the submitted version and the official published version of record. people interested in the research are advised to contact the
author for the final version of the publication, or visit the doi to the publisher's website.
• the final author version and the galley proof are versions of the publication after peer review.
• the final published version features the final layout of the paper including the volume, issue and page numbers.
link to publication
citation for published version (apa):
polyvyanyy, a., ouyang, c., barros, a., & van der aalst, w. m. p. (2017). process querying: enabling business
intelligence through query-based process analytics. decision support systems, 100, 41-56. doi:
10.1016/j.dss.2017.04.011
general rights
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners
and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights.
            • users may download and print one copy of any publication from the public portal for the purpose of private study or research.
            • you may not further distribute the material or use it for any profit-making activity or commercial gain
            • you may freely distribute the url identifying the publication in the public portal ?
take down policy
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the work immediately
and investigate your claim.
download date: 14. jan. 2018decision support systems 100 (2017) 41–56
contents lists available at sciencedirect
decision support systems
journal homepage: www.elsevier.com/locate/dss
process querying: enabling business intelligence through query-based
process analytics
artem polyvyanyya,*,c h u no u y a n ga, alistair barrosa, wil m. p. van der aalsta,b
aqueensland university of technology, brisbane, australia
beindhoven university of technology, eindhoven, the netherlands
article info
article history:
received 11 july2016received in revised form21april 2017accepted 28 april 2017available online 2may 2017
keywords:process queryingprocess managementprocess analyticsprocess intelligenceprocess sciencebusiness intelligenceabstract
the volume of process-related data is growing rapidly: more and more business operations are being sup-
ported and monitored by information systems. industry 4.0 and the corresponding industrial internet ofthingsareabouttogeneratenewwavesofprocess-relateddata,nexttotheabundanceofeventdataalready
presentin enterprisesystems. however,organizations oftenfail to convertsuchdata into strategic and tac-
ticalintelligence.thisisduetothelackofdedicatedtechnologiesthataretailoredtoeffectivelymanagetheinformation on processes encoded in process models and process execution records. process-related infor-
mation is a core organizational asset which requires dedicated analytics to unlock its full potential. this
paper proposes a framework for devising process querying methods, i.e., techniques for the (automated)management of repositories of designed and executed processes, as well as models that describe relation-
ships between processes. the framework is composed of generic components that can be conﬁgured to
create a range of process querying methods. the motivation for the framework stems from use cases inthe ﬁeld of business process management. the design of the framework is informed by and validated via
a systematic literature review. the framework structures the state of the art and points to gaps in existing
research.processqueryingmethodsneedtoaddressthesegapstobettersupportstrategicdecision-makingand providethe nextgenerationofbusinessintelligence platforms.
© 2017 elsevier b.v. all rights reserved.
1. introduction
business process management (bpm) is the discipline that com-
bines approaches for the design, execution, control, measurement,
and optimization of business processes. most of the larger organi-
zationsadoptedbpmprinciples(e.g.,designingprocessesexplicitly).a growing, but still limited, number of organizations uses explicit
bpmsystems,i.e.,informationsystemsdirectlydrivenandcontrolled
by explicit process models. business intelligence (bi) systems focuson the dissemination of business-related data without considering
process models. hence, one can easily witness the gap between
data-drivenbiapproachesandprocess-centricbpmapproaches.pro-cess mining approaches aim to bridge this gap [1]. like other bpm
approaches,processminingisprocess-centric.however,unlikemost
bpm approaches, it is driven by factual event data rather than
hand-made models.
*corresponding author.
e-mail addresses: artem.polyvyanyy@qut.edu.au (a. polyvyanyy),
c.ouyang@qut.edu.au (c. ouyang), alistair.barros@qut.edu.au (a. barros),
w.m.p.v.d.aalst@tue.nl ( w .m .p .v a nd e ra a l s t ) .processminingiscloselyrelatedtotheterm processanalytics [2,3]
whichreferstoapproaches,techniques,andtoolstoprovideprocess
participants, decision makers, and other stakeholders with insights
about the eﬃciency and effectiveness of operational processes. thesearch, correlation, aggregation, analysis and visualization of pro-
cess events can support insights and improvements in performance,
quality, compliance, forecasting and planning, of processes operat-ing in dynamic commercial settings. most of the commercial toolse.g.,splunk,sapbusinessprocessimprovement,pentaho,andadobe
analytics, focus on purely structural associations in organizational
information,whereprocessexecutionismeasuredviacoarse-grainedevents (e.g., start and end of process execution) in line with classical
performance-oriented business intelligence analysis of organiza-
tionalunits,resources,products,services,etc.thisisinstarkcontrastwith process mining approaches that provide fact-based insights to
support processimprovements [1]. process discovery techniques can
be used to learn process models from event logs. however, process
miningextendsfarbeyondprocessdiscoveryandincludestopicslike
conformancechecking,bottlenecksanalysis,decisionmining,organi-
zationalmining,andpredictiveprocessanalytics.alloftheseprocessminingapproacheshaveincommonthattheyseektheconfrontation
http://dx.doi.org/10.1016/j.dss.2017.04.011
0167-9236/© 2017 elsevier b.v. all rights reserved.42 a. polyvyanyy et al. / decision support systems 100 (2017) 41–56
between event data (i.e., observed behavior) and process models
(hand-made or discovered automatically).
through these developments, at least three broad contexts for
process analytics can be identiﬁed to frame further developmentof supportive techniques. firstly, temporal contexts are important
where past and present process data are retrieved and the future
behavior of processes can be projected. secondly, process behav-ior needs to be understood in different organizational contexts, notonly the operational level, but also at strategic and tactical levels,
given reﬂections of processes in higher-level architecture models.
thirdly, productivity contexts nowadays focus not only on transac-tional considerations, through policy and performance compliance
checks,butalsoontransformationalopportunities,wherebyinsights
intohowprocessescanbestandardized,reused,andrapidlyadapted,are crucial.
process querying studies (automated) methods for managing,
e.g., ﬁltering or manipulating, repositories of models that describeobserved and/or envisioned processes, and relationships between
the processes. a process querying method is a technique that, given
aprocessrepositoryandaprocessquery,systematicallyimplementsthe query in the repository, where a process query is a (formal)
instruction to manage a process repository. the paper addresses
major limitations of techniques for process querying, which often
analyze business processes on a single model scope and ignore pro-cess semantics aspects. note that a recent survey demonstrates the
lack of, and the need for, dedicated precise process querying meth-
ods grounded in execution semantics rather than the structure ofbusinessprocess models [4].
concretely, this paper proposes the process querying framework,
which aims to guide development of process querying methods.given a process repository and a process query that speciﬁes a for-
mal instruction to manage the given repository, the corresponding
process querying problem consists of implementing the instruction
on the repository. the proposed framework is an abstract systemin which components providing generic functionality can be selec-
tively replaced resulting in a new process querying method. the
framework emphasizes uniﬁed process querying based on search-ingprocessstructureandbehavior,whichincludesthedesignedand
observedbehavior.processesoftenexhibitcomplexalignmentswith
higher manifestations of processes through strategic and tacticalmodels in the organizational pyramid. moreover, results of process
querying methods must be effectively interpreted by stakeholders.
theproposed in thispaperframework addresses theseconcerns.
to develop the framework, we use (an adapted version of) the
design science research methodology (dsrm) by peffers et al. [5]
that follows the guidelines by hevner et al. [6]for the required ele-
ments of design research. the framework is a viable artifact that is
producedasanoutcomeofthisdesignendeavor(guideline1:design
of an artifact, refer to ref. [6]for details). the corresponding dsrm
process is depicted in fig. 1. the process is initiated by the problem
of lack of consensus in designs of methods for process querying.first, we perform a systematic crud (create, read, update, and
delete) analysis over process repositories to identify a list of usecases for managing process repositories (guideline 5: research
rigor). the obtained use cases justify relevance of the problem(guideline 2: problem relevance). the core objective of this work
is the development of a framework for devising process querying
methods. hence, in the second step, we employ the identiﬁed use
cases and crud operations to elicit requirements and categories ofprocess querying problems, which in this paper are referred to as
process query intents. third, based on the deduced requirements, we
rigorously deﬁne the process querying problem andprocess query-
ing method , and use these notions as the basis for the design of
the framework (guideline 5: research rigor). fourth, we validate
the proposed framework via a systematic literature review (guide-
line 3: design evaluation; guideline 5: research rigor). the insightsgained from this evaluation are used to iterate the design of the
framework to cater for the features of the state of the art techniques
for managing process repositories while still satisfying the require-ments deduced from the use cases (guideline 6: design as a search
process). the conducted systematic review demonstrates that the
developed framework is consistent with process querying methodsin prior literature. finally, we document and discuss all the steps
taken to design the framework, which is also the main contribution
of this work (guideline 4: research contributions), in the paper athand (guideline7:communicationof research).
the remainder of the paper is organized as follows. the next
section discusses how processes manifest horizontally within thebusiness process management (bpm) lifecycle and vertically at dif-ferent levels of abstraction of the organizational pyramid, and looks
atusecasesformanagingprocessrepositories.basedontheinsights
gainedin section2,section3 givesrigorousdeﬁnitionsoftheprocess
queryingproblemandprocessqueryingmethod. section4 discusses
thedesignoftheprocessqueryingframework,whichisbasedontheformal notions proposed in section 3. then, section 5 suggests how
the proposed framework can be positioned in light of the broader
process analytics and bi. section 6 validates the design of the frame-
workviaanextensiveliteraturereviewandstatestheresearchgaps.
section7 concludesthepaper.
2. process querying requirements
this section provides an exposition of process querying require-
ments, to develop the process querying framework, which is pro-
posed in sections
 3 and 4. section 2.1 provides a contextual back-
ground of bpm generally used to understand different forms ofprocesses,howtheyrelatetoeachother,andhowtheyaremanaged
in the bpm lifecycle. the functional requirements for process query-
ing are then posited along the fundamental operations relevant todata querying, i.e., create, read, update, and delete (crud), appliedto processes managed in process repositories (section 2.2). non-
functional requirements for high performance query execution are
also discussed ( section 2.3). the process of requirements elicitation
is based on considering how these operations support the needs of
processmanagementasunderstoodthroughrelevantbpmusecases,
as proﬁled in a comprehensive bpm survey [7]. the requirements,
focusedoncrudoperations,arereferredtoasprocessqueryintents,
each bearing speciﬁc insights, per process create, read, update, and
delete, which need to be supported through the proposed processqueryingframework.
design and
develop
process querying
frameworkdemonstrate
and evaluate
validation of the
framework via a
systematic
literature reviewhow to
knowle dgeidentify problem
and motivate
lack of
consensus in
research on
methods for
process queryingdefine
objectives of a
solution
develop a
framework for
process querying
methodsinference
theory
disciplinary
knowledgecommunicate
the paper at
hand
fig. 1.dsrm processfor the processquerying framework.a.polyvyanyyet al. / decision support systems 100 (2017) 41–56 43
2.1. contextsforprocessmanagement
webeginbyconsideringthecontextualinsightsinwhichprocesses
aremanaged,and,thus,whereprocessqueryingisapplicable.froma
broad,organizationalperspective,variouspartsofsystems,includingbusiness processes, can be seen at different levels of business to it
systems architecture, typically depicted as a pyramid [8]. seen from
thisperspective,agivenprocessdoesnotexistinisolation,butmani-
festsinvarietyofformsandindifferentsystems,atstrategic,tactical
andoperationallevelsofanorganization.processesmaybecaptured
throughdedicatedmodelinglanguagesandtechniquesandmanagedthroughbpmsystems,e.g.,petrinets,bpmn,umlactivitydiagrams,ortheymayberepresentedinotherforms,e.g.,tasklistsintaskman-
agement systems and transaction processes in enterprise systems.
alternatively, they are less explicit at higher levels of the pyramid.instead, at these levels, processes are instrumental to other meth-
ods or representations, used for broader considerations of systems
planning and coordination. fig. 2shows an organizational pyramid,
illustrating a useful, structural context for process management —
stretching from business strategy down to it systems.
thehighest-levelnotionofprocessesplaysavitalroleinstrategic
planningandthehigh-levelrepresentationoforganizations,through
business models [9]. represented typically through strategic value
chains (general activity dependencies with no control ﬂow), pro-
cesses combine with policies, target customers, product and serviceofferings, organizational structures and partners, to detail business
models. strategic value chains reﬂect not so much process ﬂows
but value accretion, together with key interactions with organiza-tional and partner roles. when linked to processes at lower levels,
they allow lower levels of processes in business and it systems to
be steered through policies and other strategic considerations oforganizations.
over the years, enterprise architecture has become an important
bridgebetweentacticalandoperationallevels,becauseitallowsfur-
ther details of systems (e.g., services, processes, and applications)
to be aligned, thus supporting systems planning and governance
from a cross-systems, i.e., enterprise purview. enterprise architec-ture frameworks such as the zachman framework [10],t o g a f [11],
and rm-odp [12]integrate a number of modeling techniques and
languages in support of this, with processes playing a central role in
yieldingarchitecturecoherence.forexample,inarchimate [13]used
in togaf, processes are deﬁned across business, application and it
infrastructure layers, and are inter-linked across these while also
anchoringintootheraspectssuchasservices,resourcesandinforma-tion. at the operational architecture level, process models take on a
normative role, as opposed to being descriptive at higher levels and
executable through it systems (to use the broad positioning of pro-cesses from ref. [7]). they guide the operations of speciﬁc businessareas and are developed through individual projects. models arecaptured through multi-level process architecture (from operational
valuechainstodetailedprocesses)entailingmany-to-manyrelation-
ships between elements across levels and, thus, complex alignmentchallenges [14,15].
at the lowest level, processes are a core part of it systems design
and implementations. this involves conﬁgurable, solution design
models, executable models, and software applications with codedprocesses. executable processes are also in the form of process or
document workﬂows, tasks lists and other forms supported by bpm
systems such as workﬂow management systems and task managers.software design models also rely on process concepts to capture
and conﬁgure software component dependencies, e.g., erp solution
maps and software component interactions (see exemplar softwarearchitecture of saps business bydesign [16]). ultimately, process
instances are recorded as event sequences in logs. events capturetimestamped data about executed activities and event traces arealigned to process conceptions of software interactions, e.g., trans-
actions steps of asynchronously running business objects in erp
systems [17].
as we can see, processes are effectively reﬁned across the archi-
tecture levelseven if theyare captured through different techniques
and languages having either no, partial, or precise, semantics; cor-
respondingly they are informal (high-level descriptive processes),
semi-formal (lower level descriptive processes) or formal(normative
and executable processes). ideally, they should be aligned withprocesses at across all levels, therefore, requiring correlation of pro-
cesses through query languages (akin to data correlation support in
databasequerylanguages,e.g.,sqljoinsandcorrelatedsub-queries).
complementary to this structural context of bpm, is a functional
context seen through the classical bpm lifecycle [7],w i t hi t s
comparatively narrower focus: process (re)design, implementation/
conﬁguration, and execution/adaptation. the focus of the bpm life-cycle tends to be on lower levels of architecture involving processesmanaged through bpm systems. models may be (re)designed to
capture requirements, reﬁned and conﬁgured as executable mod-
els for orchestration through it systems or as implementation logicin software code. in the execution/adaptation phase, processes are
orchestrated using execution systems and event logs are generated.
through runtime execution and analysis of event data, processes
may be adapted for “in-situ” improvements and overcoming errors.
the
execution/adaptationphasefeedsbackintothe(re)designphase,
whereby event data analysis is used to create long lasting design
improvements of process models. thus, the bpm lifecycle provides
a broader context for process querying requirements, with various
steps in the lifecycle offering indispensable insights for how variousprocess create, read, update, and delete operations are combined insupport of complex process management tasks.
strategic
business
architecture
tactical business architecture
enterprise architecture
operational architecture
it solution architecture and systemsbusiness models
solution design models, configurable software architecture, task and workflow models, system logsprocess architecture, detailed business process models, resource models, target operating modelsbusiness to it integrated modelsbusiness capability mapsstrategic planning
tactical planning
cross systems operational
planning across business and it
operational planning
for supporting
business operations
it planning for developing
or procuring it solutions
fig. 2.processesat differentlevels of the organizational pyramid.44 a.polyvyanyyet al. / decision support systems 100 (2017) 41–56
2.2. functionalrequirementsofprocessquerying
toelicitrequirementsfordifferentclassesofmanagementmeth-
ods over processes, in this section we perform the crud analysis
over an artifact of a process repository; note that the notion of aprocess repository is formalized in section 3. the need for different
crud operations over process repositories is justiﬁed by mappingthem onto (a subset of) the comprehensive set of bpm use casesdescribed in ref. [7]. these use cases refer to the creation of pro-
cessmodelsanddata,andtheirusagetoimprove,enact,andmanage
processes. the bpm uses cases were obtained by identifying interac-tions between artifacts such as descriptive, normative, conﬁgurable,and executable models, it systems, event data, and a range of anal-
ysis results. almost 300 bpm papers were mapped onto these use
cases to justify their importance. the twenty use cases reported inref.[7]are not intended to be deﬁnitive or complete. nevertheless,
they help to structure the possible crud operations over processrepositories. in the context of process querying, we refer to theseoperations as process query intents, which can be seen as seman-
tic classes of management instructions for process repositories. wesee process query intents as one of the conﬁguration points of thedevised process querying framework, refer to section 4 for further
details.
design model . process models are produced in a number of
ways including creating models for the ﬁrst time via design, selec-tion of existing model, and reuse [18]of existing models either via
modelmergeormodelcomposition.thedesignmodelusecasecon-cerns the creation of models from “scratch” by humans, capturinga current-state (as-is) or future-state (to-be) of processes. to sup-
port this, a process query intent, create process, should allow the
insertion of newly designed models in a process repository, e.g.,
when a model being captured is saved in a process modeling tool.
in addition, the intent, update process , should support updates of
model designs, where the model being updated already exists in
the repository. similarly, the delete process , should support in-situ
deletions of models during design, whereby the entire model is
selected through the query conditions/parameters. note, the dis-tinction between deleting an entire model and only deleting partsof a model, where the latter can be rendered through an update
query.
select model. the select model use case relates to the retrieval of
process models from a repository based on structural or behavioralmatchofprocesses.correspondingly, readprocess shouldselectpro-
cess models satisfying structural (graph structures) and behavioral
(activity traces) based conditions. although this use case concerns
models, we extend read process to cover process models, process
fragments, process instances, e.g., sequences of events in logs, and
individual events. in terms of the behavior, the ability to select
event traces should cover executed process, simulated behavior
(based on selected workload and resource conﬁgurations) and per-missible behavior (modeled but not yet executed). for example, itshould be possible to provide as input behavioral activity traces and
retrieve both models (based on permissible behavior) and instances
(executedbehavior)from arepositorydescribingthegiventraces.
speciﬁc details of processes may be projected in query results,
e.g., query results may need to only include start and end activitiesof matched processes. given that processes rarely exist in isolationbut are linked to other processes, e.g., through use cases, collabora-
tive process, and processes at different levels of abstraction in the
systemsarchitecture,the readprocess intentshould supportprocess
correlations in queries. an example is to ﬁnd all executable pro-
cesses linked to a particular part of an operational value chain, e.g.,
a stage of a value chain. in terms of systems architecture, this wouldbeexpandedtoﬁndingallexecutableprocesseslinkedtooperationalprocesses which are linked to the corresponding part of the value
chain. complementary to exact matching, similarity match [19]isalso critical for various management goals of processes, e.g., ﬁnd-
ing similarity of a set of processes to a given process or ﬁnding
processes that are similar. it should be possible to reference similar-
ity search functions as part of read process both prior to, and after
search ﬁlters are evaluated (much like aggregate functions apply in
sql statements).
models merging and model composition use cases are variants of
modelproductionsfromexistingmodels,wheretheresultingmodels
rely on selectionof processes from several models.
merge models. the merge models use case involves the creation
ofanewmodelbasedoncombiningpartsofdifferentmodels.exam-plesincludeextendingaprocessmodelwithpartsofothermodelsor
taking different models and merging them into one model. this usecase is based on an elementary step of merging through automated
techniques [20], as opposed to the preparatory and intermediate
steps of identifying models, updating them for ﬁtness, etc., which
involveupdateordeletionofpartsofmodels.thus,themergemodel
use case, supported through a specialized form of the create process ,
should take as input a set of models, allow a merge function to be
used on these models, and insert the resultant model into a repos-itory. this intent could be practically implemented in a modeling
tool as part of a merge utility, where the merge function auto-
matically generates a create process, which can then be updatedand saved (committed) by a user. since correctness of the result-
ing model is not guaranteed through merging, the update process
applies, to support subsequent reﬁnements of the merged model,
e.g.,
removal or updated connection of activities to ensure correct
execution.
compose model. the compose model use case involves the cre-
ation of a new model based on different, and, typically, reusable
models.likemergemodels,aspeciﬁcvariantof createprocess,appli-
cable for composition, should take as input a set of models, allow
analgorithmiccompositionofthesemodels,andinsertthecomposi-tionintotherepository.unlike,mergemodel,thecomposedmodel’s
partscan berelatedtotheoriginalmodels, and acorrespondingcor-
relation should be explicitly captured. given the more structurednature of composition, the subsequent reﬁnement of models for
correctness through the update process queries is less likely to be
required.
following on from use cases concerning model production, we now
consider use cases related to process execution. these involve thecreation of executable models, typically from non-executable mod-
els, e.g., normative process models designed at the operational
architecture level, the execution of models, the creation of processinstance through events, process monitoring and runtime process
adaptation.
reﬁne model. the need for the detailing of a higher-level model
into an executable model, through the reﬁne model use case, can,in fact, be generalized for model reﬁnement across different lev-
els of systems architecture, refer to fig. 2. each level uses modeling
techniques and languages with different degrees of semantics, with
executable models needing to be precise and free of errors so that
they can be executed. moreover, platform-speciﬁc technical conﬁg-uration details need to be present, e.g., message correlations, data
object mapping to required schemas, for execution readiness. as
such,create process should support the initial creation (including
versioning) of a reﬁned model and linking it and speciﬁc parts of
reﬁnement with the parent model(s). to support this use case, the
update process applies for interim saves during reﬁnement steps
and ﬂagging models that they are in a veriﬁed, error-free form for
execution.
enact model. the enact model use case, relating to the inter-
pretation of executable models by bpm systems, has somewhat asubtle application for process querying. model execution centers ona.polyvyanyyet al. / decision support systems 100 (2017) 41–56 45
the selection, scheduling, and execution of activities, through exe-
cution engines. while the core execution components control the
reading, scheduling and internal state management of individual
activities, the goals of eﬃcient memory management and reducedlatencyrequirethatpartsofmodelspre-fetchedintomemory,ahead
of execution, akin to database query execution strategies. for this,
read process should be used to support sequential “pre-fetch” of
process models in fragments aligned with platform speciﬁc con-
straints, e.g., memory blocks. thus, we envisage process querying
to be better exploited by process execution engines, down to low-
level technical concerns, i.e., read queries are generated throughexecution components of bpm systems. note, given that different
parts of processes are possible for downstream execution through
choice constructs in models, activity traces based on model struc-ture and behavior could be used as part of pre-fetch optimiza-
tion strategies, in line with database query execution optimization
strategies [21].
log event data. when processes are executed the instances
that are generated and run are recorded as events in system logs,addressed through the log event data use case. this can be sup-ported through create process andupdate process query intents,
which should specify instructions to create event logs, traces, and
events, as well as update traces by inserting fresh events into
traces in tandem with process execution. timestamps and otherlogistical details provided by execution engines can be logged in
events.
monitor. the monitor use case, relating to the active reading of
system logs at runtime for evaluating responsiveness, throughput,resource cost, and other performance indicators, can be supported
viareadprocess queries,appliedoverdifferentprocessinstancesets:
individual,case based, systems wide,etc.
adapt while running. the adapt while running use case
addresses ad-hoc, or permanent, model changes required duringruntime due to emergent requirements, e.g., making sequentiallyordered activities run in parallel in urgent situations. these prac-
tices can be supported through update process queries. note that
the impact of runtime adaptations is on process instances, as newly
generated events will result from changed models, which are inter-
linked to events of the previous models. thus, updated models need
to be versioned within a current change release cycle, as well asagainst all the previous changes. a speciﬁc challenge is to ensure
thatupdatesaremadewiththeproperintegrity,andmodelsusedas
inputforchangearecheckedandcomparedagainsttheintended(to-be)processestoensurepropercontinuityofexecution,e.g.,stopping
a process in the middle of iterated activities (within a loop) could
result inintegrityissues.
in addition to being designed, conﬁgured, implemented, and exe-
cuted, processes can be used for non-trivial analysis related to per-formanceandveriﬁcation.ofthese,weconsidertheformerforquery
requirements.
analyze performance based on model. the analyze performance
based on model use case concerns the simulation of executableprocess models for performance analysis in terms of response
times, latencies, resource utilization, throughput, etc. simulationtechniques focus on specialized analysis such as queueing net-
works or markov chains to compute the expected performance.
the results of model simulation, resulting in simulated processinstances,canbestoredinrepositoriesthroughtheuseof createpro-
cessandupdate process queries, generated by simulation tools. in
addition, read process queries should be used through these tools
to retrieve simulated processes for comparing how different sys-tems conﬁgurationsimpact theperformance of models. readprocess
should also support diagnosis of individual processes and the aggre-gate analysis of sets of process instances, e.g., process analyticsfunctions.further use cases concerning process analysis involve both pro-
cess models and event data, concerning conformance checking and
performance analysis.
check conformance using event data. the check conformance
using event data use case covers design-time, runtime, and
post-runtime analysis to check that processes comply with business
rules,businessrequirementsandmodelspeciﬁcations.oneconsider-
ation is conformance checking of normative or executable processesagainst high-level, descriptive models. furthermore, if the models
being compared are formal, behavioral conformance can be checked
based on permissible sequences of activities. where processes havebeen executed, conformance of the speciﬁed behavior in models
can be checked against observed behavior in event logs, to ensure
that the right sequences of activities have been executed. accord-ingly,read process queries should retrieve both models and process
instancesforstructural,behavioralandspeciﬁedvs.observedbehav-
ioral conformance checking. queries reﬂecting this intent should be
integral to higher-level process analytics, since this is a key enablerfor process conformance checking, e.g., conformance checking for
business areas and the generation of reporting capturing statistical
analysis for business compliance thresholds. a major considera-tion for conformance checking lies in collaborative processes, where
cross-process interactions need to be checked for correct executions
and conformanceto businessrules, e.g.,related toservice contracts.
analyze performance using event data. theanalyzeperformance
using event data use case covers runtime monitoring and post-runtime analysis to check processes for execution characteristicssuch as response times, latencies, and throughput of processes. theintent of read process is, thus, similar to that one for the check
conformance using event data use case, but applied for a differ-ent set of analysis considerations. individual and aggregated eventdatashouldbeselectedandcomparedagainstkeyperformanceindi-
cators. future performance could also be checked through perfor-
manceproﬁlesofactivitiesdeterminedfromhistoricaldataandused
as
input for simulation or prediction techniques. thus, this intent
should be integrated into process analytics techniques concernedwithperformance.
the ﬁnal set of bpm use cases we consider relate to the use of diag-
nosticinformationandeventdatathatcanbeusedtorepair,extend,
or improvemodels.
repair model. the repair model use case refers to the problem
of transforming a given process model to better reﬂect the observeddeviating behavior recorded in the corresponding event log [22,23].
thechallengeistoobtainagoodqualitymodel,e.g.,structurallysim-
ple, which reﬂects all the important observed behavior as closelyas possible. the repair model use case can be supported using
update process anddelete process intents over process repositories
byprovidingﬁnegranularoperationsfortransformingmodelsinthe
repository to describe, or not describe, certain processes that are
recorded or, respectively, not recorded in the corresponding event
logs.
extend model. the extend model use case relates to the use of
event data in process models to extend the description of process
models. event data may be annotated with additional informationsuchasthetimestampoftheevent,person/resourceexecutingorini-
tiating the activity, and data elements recorded with the event. this
information can be used to enrich the process model and extend itbeyond a control-ﬂow oriented model with additional perspectives.for example, timestamps of events may be used to add delay distri-
butions to the model. data elements, used as part of decisions, can
be used to enrich models with business rules. resource informationcan be used to confer role assignment on activities in the model.
to support this use case, read process should be able to retrieve
and correlate process model and event data at the level of activities.46 a.polyvyanyyet al. / decision support systems 100 (2017) 41–56
once users have viewed, analyzed and saved the extended models,
updateprocess shouldallowextendedmodelstobestoredinarepos-
itory. alternatively, a create process should support the creation of
extendedmodels, as newmodel versions.
improve model. the improve model use case focuses on how
performance related diagnostics can be used to generate alternative
process designs which represent improvements of processes, e.g.,optimization of resources or reducing response times. process mod-els combine with event data for inferring alternative behavioral
sequences and activity conﬁgurations for processes. thus, read pro-
cessshould retrieve models and event data, which are used as input
into process analysis targeting improvements. as part of this, read
processshould be able to infer gaps between expected and observed
behaviorinordertoidentifyimprovementsconcernedwithaddress-
inggaps.
2.3. non-functional requirements of process querying
the aforementioned intents involving crud operations on pro-
cess repositories impose high performance and scalability require-
ments for process querying engines, considering the high computa-tion overheads involved in matching processes, active monitoring,
and complex conformance checking. mature strategies and tech-
niquesareavailablethroughcontributionstodatabasequeryingovermany years. these have had to content with core challenges of
query processing, which are also relevant to processes. we iden-
tify salient aspects drawn from this tradition for key non-functionalconsiderationsof processquerying.
scanning of logical storage resources, e.g., databases tables, for
processes and process models, inclusive of structural and behav-
ioral data, and covering both executed and simulated data, needs
be done in real-time and scaled out through parallel processing.
whilescanningiseﬃcientthroughin-memorydatabasetechnology,the explosive growth of “big data” through event streaming appli-cations, e.g., sensor data streams in internet of things applications,
nonetheless warrants the use of indexing, e.g., b-tree or r-tree, to
be created for process data, as alternative access paths to sequentialprocess repository scans. proposals for dedicated indexing strategies
for processes involve indexing activity traces and subgraph isomor-
phismalgorithms [24,25].weincludeunderthebannerof“indexing”
pragmatic considerations of pre-processing data, e.g., pre-joining, to
reduce computationallatencyand support rapid retrieval.
prior to query execution, it is crucial that data distributions of
processes and indexes be proﬁled, since ranges of attribute values,sizes of processes and many other insights can be used to elimi-
nate more expensive access strategies and choose the most optimalones, e.g., sequential scan or speciﬁc index. as with database queryengines, process statistics should be collected periodically on pro-
cess repositories. query optimization addresses execution eﬃciency
and is particularly relevant for read, update, and delete queries,
which require evaluation of complex search conditions. it involves
the transformation of a query into an equivalent form ( logical query
optimization), as well as the selection of optimal access paths and
generationof accessplan (physical queryoptimization).
in line with contemporary search engines, frequently executed
queries and corresponding results should be “reusable”, subject tothe consistency of data, related to process update frequency. static
data, through process execution history, or static reference models
aregoodcandidatesforeﬃcientretrievalstrategiesthrough caching.
instrumentalforcachingdecisionsistheavailabilityof processquery-
ing statistics .
3. process querying
based on the various requirements reported in section 2, this
sectiongivesrigorousdeﬁnitionsofthe processqueryingproblem andprocess querying method. the process querying problem is proposed
as an overarching problem of managing, e.g., ﬁltering ormanipulat-
ing, (repositories of) models of observed or envisioned processes,and models that describe relationships between processes. the pro-posed formal notions set the basis for the design of the framework
presentedin thenextsection.
processes are properties of dynamic systems, where a dynamic
systemisasystemthatchangesovertime,e.g.,aprocess-awareinfor-
mationsystemorsoftwaresystem.a processisanorderingofevents
that together strive to achieve a goal state. a stateis a characteristic
of a condition of the system at some point in time, i.e., all the
information that is relevant to the system at a certain moment in
time.an eventindicatesaninstantaneouschangeofthecurrentstate
of the system, e.g., a change of the traﬃc light or change of the read-
ingonadigitalclock.onecandistinguishaneventfromotherevents
via its attributes and attribute values, e.g., a timestamp ‘mon 01-
11-2016 11:06’. events are often induced by activities performed
 by
the system. an event may, for instance, indicate a start or a comple-tionoftheactivity.examplesofactivitiesincludereadingthisarticle,
manufacturing a product,or handlingabank transfer.
let
uanbe the set of all attribute names. we introduce three
special attribute names time,act,rel∈uan,w h e r e time,act,a n d
relare the ‘timestamp’, ‘activity’, and ‘relationship’ attribute names,
respectively.
letuavbe theset ofall attributevalues .
deﬁnition 3.1 (events). anevent e is a partial function from
attributenamesto values, e:uan/notarrowrightuav.
bye, we denote the set of all events. we specify three
special classes of events: etime,eact,a n d erel.b y etimeand
eact, we denote the sets of all events with timestamps, i.e.,
etime:=/braceleftbig
e∈e|time∈dom(e)/bracerightbig
, and activity names, i.e., eact:=/braceleftbig
e∈e|act∈dom(e)/bracerightbig
, respectively. to capture the vertical process
relationships in the context of the organizational pyramid, refer tosection 2.1, we introduce special events
erel. let urel:=℘(e)×
℘(e), where urel⊂uav. then, erelis the set of all events with
the relationship attribute whose values are in urel, i.e., erel:=/braceleftbig
e∈e|rel∈dom(e) ∧e(rel) ∈urel/bracerightbig
. hence, an event in erelrefers to
two sets of events that may stem from two different levels in the
organizationalpyramid.
aprocessdescribesthatsomeeventsareordered,i.e.,someevents
precedeotherevents,whilesomeeventsareunordered,i.e.,forsome
eventsintheprocess theprecedencerelation isunknown.
deﬁnition 3.2 (processes). aprocessis a partially ordered set p:=
(e,≤), where e⊆eis a set of events and ≤⊆e×eis a partial
orderover e,i.e., ≤isareﬂexive,antisymmetric,andtransitivebinary
relation.
twounorderedeventsoftheprocessareofteninterpretedassuch
thatmay beenabledsimultaneouslyor can occurconcurrently,refer
to refs.[26–28].a process thatisa totallyordered setis a trace.
a behavior is a collection of processes that can contain identical
processes.
deﬁnition 3.3 (behaviors). abehaviorb isa multisetof processes.
byb, we denote the set of all behaviors. intuitively, multiple
instances of a process in a behavior represent the fact that the
processwas observed multipletimesin thereal-world.
one can describe behaviors using conceptual models. a con-
ceptual model is composed of the explicit model and the implicitmodel[29].t h e explicit model is the set of all statements explicitlya.polyvyanyyet al. / decision support systems 100 (2017) 41–56 47
madeusingsomemodelinglanguageinordertoconstructthemodel.
theimplicit model is the set of all statements that can be derived
from the explicit model using deduction rules of the modeling lan-guage. we refer to a conceptual model that describes behaviors as abehavior model. based on the requirements listed in section 2,w e
introducefourclassesofbehaviormodels.a behaviormodel isa(for-
mal)descriptionofacollectionofreal-worldorenvisionedprocesses
ofthesamenature(i.e.,processesthataimtoachievethesamegoal),which serves a particular purpose for a target audience. behavior
models of real-world processes encode processes that follow well-
known (already experienced) sequences of events. alternatively,behavior models of envisioned processes describe never observed
sequences of events. for example, event logs [1]are formal mod-
els of events generated by executions of process-aware information
systems and, hence, are examples of behavior models that capture
real-world processes. a design of a new computer algorithm [30]or
a speciﬁcation of an innovative business process [31]are examples
of modelsof envisionedprocesses.
let
a⊂uavbe the set of all activities. let umsbe the set of all
(explicit) model statements . then, m:=℘(a)×℘(ums)i st h es e to f
allactivity models,w h e r e /circlering:= (∅, ∅),/circlering∈m, is the special ‘empty’
model. thus, an activity model m:= (a,s) consists of statements s
overactivities a.
deﬁnition 3.4 (behavior models). abehavior model i sap a i r( m,b),
wherem∈mis an activity model and b⊆bis a set of behaviors.
we introducefour typesof behaviormodels:
◦aneventlog isabehaviormodel(/circlering, {b}),where b∈bisaﬁnite
multisetofﬁnitetraces over eact.
◦asimulation model is a behavior model (m, {b}), where m=
(a,s)∈misanonemptymodeland b∈bisaﬁnitemultisetof
ﬁniteprocessesover eactsuchthatforeveryevent einaprocess
inbit holdsthat e(act)∈a.
◦aprocess model is a behavior model ( m,b), where m=(a,s)∈
mis a nonempty model and every b∈bis a set of processes
over eact/integerdivideetimesuchthatforeveryevent einaprocessin b∈b
itholdsthat e(act)∈a.
◦acorrelation model is a behavior model (m, b), where every b∈
bis a multiset of processes over erelsuch that if m=(a,s)i sa
nonempty model in m, then for every event ein a process in
b∈bitholdsthat act∈dom(e)a nde(act )∈a.
we say that mandbare, respectively, the explicit component
and the implicit component of the behavior model (m, b). a behavior
model (m, ø)i sinformal ; no implicit statement can be deduced from
m. a behavior model (m, {b}), where b∈b,i sformal; the explicit
component of a formal behavior model induces one behavior, i.e.,all the implicit statements are deduced from mdeterministically. a
behavior model (m, b),|b|
>1, issemi-formal; the explicit compo-
nent of a semi-formal behavior model can be interpreted as one ofthebehaviorsin breﬂectingthatthedeductionrulesofthemodeling
language used to construct the explicit model are nondeterminis-
tic.behaviormodelsareimmenseinformationresources. abehavior
modelcharacterizesadynamicsystembydescribingoftenaninﬁnite
collection of processes that suggest the ways to lead the system to apotentiallyinﬁnitenumberofstates [32].
event logs are studied within the process mining discipline [1].
event logs are composed of traces, where each trace is a ﬁnitesequenceofeventsthatdenotestheﬁnite“life”ofaprocessobservedandrecordedinthereal-world.thecorecompetenceofprocessmin-
ing is to connect the observed behavior, i.e., an event log, to an
activity model, e.g., a petri net or bpmn model, which induces theimplicit model that resembles the event log as closely as possible.
the multiplicity of a trace in the only behavior of the implicit com-
ponent of the event log denotes the number of times the trace wasobserved. because the original link between the traces and the cor-
responding activity model is absent, the explicit component of the
eventlogistheemptymodel.however,eventsintracesofeventlogs
have the actattributetorefer toactivitiesthatinducedthem.
asimulationmodel isanactivitymodeltogetherwithaﬁniteimi-
tation of its operations in the real-world [33]. the activity model
represents the key behaviors of the system, while the imitation is
derived based on the deduction rules of the modeling language usedtoconstructtheactivitymodel.thus,everyeventoftheimplicitcom-
ponent of the simulation model has the actattribute to refer to the
activitythatinducedtheevent.notethattheonlybehaviorofasim-
ulationmodel(orthatoneofaneventlog)encodesonlyapartofthe
behaviorthatcanbededucedfromthecorrespondingactivitymodel.
aprocess model is an activity model together with a set of all
possible behaviors that can be deduced from the statements in theactivity model [34,35]. a behavior induced by the explicit compo-
nent of a process model can be inﬁnite, e.g., the set of all processes
inducedbythemodelwhichprescribesthateveryprocessmuststart
by repeating activity xarbitrary number of times before performing
activity yand then concluding that process is inﬁnite. in addition,
a behavior induced by the explicit component of a process model
can contain an inﬁnite process, e.g., the maximal trace induced by
themodelthatprescribestorepeatedlyperformactivity zisinﬁnite.
to capture that events in the implicit components of process mod-
els are envisioned, i.e., did not occur in the real-world, they do not
have timestamps. though the implicit components can be inﬁnite, it
is expected that in most of the practical process querying scenariosexplicit components of behavior models will be ﬁnite, as one must
be ableto store modelson a computer.
acorrelation model is a behavior model in which every event of
the implicit component has the relattribute to refer to two sets of
relatedevents.forexample,conformancechecking [36]referstothe
problem that given an event log and a formal process model checks
whether traces in the event log are in accordance with processes ofthe model. an alignment is an example of a correlation model [36].
analignmentbetweenatraceofaneventlogandaprocessofapro-cess model is a sequence of moves, where a move is a pair in whichthe ﬁrst component refers to an event in the trace and the second
component refers to an event in the process. in general, correlation
models allow relating behavior models at different levels of abstrac-tion and/or granularity, i.e., vertically and/or horizontally within the
organizational pyramid, cf. fig. 2.
in this work, we restrict the scope to the four aforementioned
classes of behavior models. however, we envision that future workson process querying will introduce new classes of behavior models,
and will augment the proposed notion of a behavior model to caterfor theemergingrequirements.
aprocessrepository isanorganizedcollectionofbehaviormodels.
let
urebe the set of all repository elements which are not behav-
ior models, e.g., folder structures for organizing behavior models,
names and values of behavior model attributes (such as authors and
versions of behaviormodels), etc.
deﬁnition 3.5 (process repositories). aprocess repository is a pair
(p,r), where pis a collection of behavior models and r⊆ureis a set
of repositoryelements.
byupr,w ed e n o t et h es e to fa l l process repositories . let uqibe
the set of all query intents that represent the abstract semantics of
methodsforqueryingoverprocessrepositories.weproposethat uqi
consists of create, read, update, and delete (process) query intents,
refer tosection 2.2 for details. then, upq:=uqi×u∗
qcis the set of all
process queries,w h e r e uqcis the set of all query conditions,o rq u e r y
parameters. a process query contains a sequence of parameters toallow distinguishing between several parameters of the same type.
for example, a process query can capture an instruction to update,48 a.polyvyanyyet al. / decision support systems 100 (2017) 41–56
using the update query intent, a process in one of the behaviors
of a process model with a given fresh process. among other con-
ditions, this query should contain two conditions: the process that
needs to be updated and the fresh process. to distinguish betweenthe two processes, they must be placed at two different positions
in the sequence of conditions of the query. note that the above
describedqueryinstructiononthelevelofbehaviorsofprocessmod-els implies changes in the activity models of the resulting updatedprocessmodel.
finally, a process querying method is an (automated) technique
that given a process repository and a process query systematically
performs the query on the given repository. a result of a process
querying method is, again, a process repository which implements
thequeryon theinputrepository.
deﬁnition 3.6 (querying methods). aprocess querying method is a
function m:
upr×upq→upr.
acombinationofaprocessrepositoryandprocessqueryspeciﬁes
theprocess querying problem . to solve process querying problems,
process querying methods rely on theoretical computer science fun-
damentals, e.g., results in distributed and parallel computing, model
checking,andformalmethods. section6 reportsonacomprehensive
reviewof thestate of theart methodsfor processquerying.
4. the process querying framework
based on the formal notions from the previous section, this
sectionproposestheprocessqueryingframework(pqf). section4.1
discussescomponentsandlogicalpartsoftheframework. section4.2
discusses core design decisions that one needs to take when design-
ing a process querying method. section 4.3 states several chal-
lenges that may emerge as consequences of taken decisions. finally,section4.4 suggeststhateveryprocessqueryingmethodresultsfrom
a compromisebetweensolutionstothestated challenges.4.1. componentsandpartsof the framework
the pqf is an abstract system in which components providing
generic functionality can be selectively replaced resulting in a new
process querying method. a schematic view of the framework usingan ad-hoc notation is shown in fig. 3. in this notation, rectangles
denoteactivecomponents,i.e.,actionstobeperformedbytheprocess
querying methods. ovals are used to represent passive components,
i.e.,objectsandaggregationsofobjectsthatareinputsandoutputsof
actions. to denotethata passive componentserves as an inputto an
action,anarcisdrawntopointfromthecomponenttotheaction.anarc that points from an action to a passive component suggests thatthe action produces the component as an output. dashed lines are
used to encode the aggregation relationships, where a component
that is used as an input to an action contains the adjacent passivecomponents, e.g., a process repository is an aggregation of behavior
models (refer to deﬁnitions 3.4 and3.5). the framework is logically
dividedintofourpartsthatare‘responsible’for(i)designingprocess
repositories and process queries, (ii) preparing and (iii) executing
process queries, and (iv) interpreting results of the process querying
methods. in fig. 3, each part of the framework is enclosed in an area
denotedbythedottedborder. next,wedetaileach ofthefour parts.
4.1.1. model,simulate,record, andcorrelate
thispartoftheframework(seethetopof fig.3)isresponsiblefor
acquiring/constructing, behavior models and formalizing/designing,
process queries. behavior models can be acquired in several ways.they may stem from manual, semi-, or fully-automated exercises.
examplesofautomatedexercisesincludemodeldiscoveryusingpro-
cess mining techniques [1]and model construction using process
querying, e.g., a fresh model may result from executing an update
query. behavioral models can be constructed by recording or sim-
ulating execution traces of systems, and by correlating steps oftwo different processes. all these alternatives are captured by themodeling, simulating, recording,a n d correlating active components,
fig. 3.a schematic view of the process querying framework.a.polyvyanyyet al. / decision support systems 100 (2017) 41–56 49
refer to fig. 3. examples of behavior models include computer pro-
grams, business process speciﬁcations (e.g., epc, bpmn, yawl, bpel
models), formal models of computation (ﬁnite automata and petri
nets),eventlogs [1],and alignments [36].
process querying demands mathematically precise and unam-
biguous speciﬁcations of instructions for managing process reposi-
tories. a process querying instruction,o ra query, speciﬁes how pro-
cesses, behaviors, and behavior models should be manipulated in
a process repository. it is composed of a query intent and a list of
query conditions, refer to section 3 for details. the intent speciﬁes
the abstract semantics of the query, e.g., to retrieve/readprocesses,
behaviors, or models, or to remove/delete some processes in cer-
tain behavior models. query conditions are used to parameterizeintents to obtain precise querying instructions. for example, theaforementioned intents must be supplied with conditions to spec-
ify what processes to retrieve and remove. thus, a query condition
may be speciﬁed as a collection of processes, i.e., a behavior model.note that two queries with different intents may have different
query conditions. for example, an update query may use three con-
ditions to specify in what collections of processes (i), which oldprocesses(ii)shouldbereplacedwithwhichfreshprocesses(iii).fora delete query, it may suﬃce to use two conditions that tell in what
collectionsofprocesses(i)whichprocesses(ii)should beremoved.
the pqf relies on formal representations of queries. the for-
malizing component of the framework takes a process querying
instruction as input and produces a (process) query that cap-
tures the instruction in a formal language. concrete instantiationsof the framework may rely on manual, semi-, or fully-automated
components responsible for the formalization of process querying
instructions.
4.1.2. prepare
the“prepare”partoftheframework(seethebottomleftof fig.3)
is responsible for making process repositories ready for eﬃcient
querying. this part includes components for constructing dedicated
data structures that can speed up execution of process queries. we
suggestconstructingthesedatastructuresoﬄine.theyoftenrequireadditional storage space to maintain the extra copy, or even several
copies, of an indexed repository, behavior, or process. the frame-
work suggests two methods for preparing for querying: indexingand caching. in databases, indexing is a technique to construct a
data structure to eﬃciently retrieve data records based on some
attributes. in computing, cachingis a technique to store data so that
futurerequeststothatdatacanbeservedfaster,wherethedatathat
gets stored in a cache might be the result of an earlier computation.
similarideascanbeusedtospeedupexecutionsofprocessqueryingmethods.
theindexing component of the framework takes a process repos-
itory as input and constructs its alternative representations, i.e., an
index. an index can be larger in size than the repository. by using anindex, process querying methods can achieve different space-time
tradeoffs, i.e., they can trade increased space of input process repre-
sentations for a decrease in execution times of process queries. theindexing component is also responsible for collecting statistics over
properties of repositories, behaviors, processes, and index, denotedbyprocess statistics in the ﬁgure. process statistics can be used to
‘guide’ the execution of queries. for example, a process querying
method can proceed by ﬁrst executing queries over small mod-
els. the rationale behind this strategy is based on the assumptionthat execution of queries over small behavior models will take sig-niﬁcantly less time and, hence, ﬁrst query results can be obtained
faster.
thecaching component of the framework relies on process
queryingstatistics todecidewhich(partsof)queryresultstostorefor
later reuse. process querying statistics may include aggregate infor-
mationontheexecutionofprocessqueriesandevaluationofprocessquery conditions, e.g., their frequencies. it gets regularly updated by
theprocess querying component and, thus, is denoted as its output
infig. 3. results of frequent process queries can be stored in a cache
and looked up at a later stage, e.g., when the user requests to evalu-ate
the query again. similarly, results of evaluating frequent process
queryconditionscanbestoredandreused,evenwhennewrequests
to theseconditionsoriginatefrom fresh queries.
one can adopt other standard optimization approaches for pro-
cess querying. these include parallel computing (e.g., map-reduce),
algorithm redesign (e.g., stochastic and dynamic optimization), and
hardware acceleration (e.g., in-memory databases). however, theseapproaches are often inherent to the design of techniques that get
optimized.incontrast,techniquesinthe“prepare”partoftheframe-
work are complement optimizations that are ‘orthogonal’ to thedesign of theprocessquerying methods.
4.1.3. execute
the “execute” part of the framework (see the bottom right of
fig. 3) is responsible for executing process queries. prior to exe-
cuting a query, to avoid unnecessary computations, one can ﬁlterthe repository to remove models, behaviors, and/or processes thatare irrelevant for the purpose of the query. for example, if a query
requeststoretrievemodelsthatdescribeaprocesswithaneventthat
referstoagivenactivity,itmakesnosensetoexecutethequeryoverthemodelsthat donotcontainthat activity.
thefiltering componentisresponsibleforﬁlteringprocessrepos-
itories. the component takes a process repository andprocess query
as input and produces a filtered process repository . the ﬁltered
repository is the input repository with some of its parts marked as
irrelevant for the purpose of executing the query. to identify theirrelevant parts of a repository, the component uses information in
index,process statistics,a n d cache; note that information kept in
thesecomponentscan beused toanticipatequeryresults.
theoptimizing component is responsible for query optimization.
it takes the same input as the filtering component and produces an
execution plan — a list of instructionsthat aim at executingthe input
query using the least possible amount of resources. the optimizing
component may implement two types of optimization: logical andphysical. a logical optimization entails reformulating a given query
into an equivalent but easier – which usually means a faster – to
execute query. a physical optimization is responsible for determin-
ing eﬃcientmeans for carrying out instructions in a given executionplan.
finally, the process querying component takes filtered process
repository ,execution plan, index,process statistics,a nd cacheas input
and applies a process querying method to produce a fresh process
repository that implements the query. based on the query and its
result, the component updates process querying statistics .t h efil-
tered process repository andexecution plan are thecritical inputs of
theprocessquerying component.thequerycannotbeexecutedwith-
out these inputs. all the other inputs can, in principal, be empty. we
refer to the resulting process repository as thecritical output of the
component.
4.1.4. interpret
processqueryingcanleadtotwooutcomes:(i)thequeryinstruc-
tion is successfully implemented in the resulting repository, or (ii)
availableresourcesarenotsuﬃcienttoexecutethequery.thelatter
situation may arise when managing vast (possibly inﬁnite) collec-tions of processes using ﬁnite resources, e.g., ﬁnite computer mem-oryorlimitedprocessingpower.ifitisimpossibletoexecuteaquery
due to the physical limits of available resources, one can proceed in
several ways. sometimes it may suﬃce to reformulate the originalquery to give up on the precision of the expected result. alterna-
tively, one may try to optimize the querying method to handle the
speciﬁcs of the original query. some approaches to managing vast50 a.polyvyanyyet al. / decision support systems 100 (2017) 41–56
collections of processes include the use of symbolic techniques (e.g.,
binarydecisiondiagrams),manipulationswithstructuralregularities
in behaviormodels, and rigorous abstractions of processes.
onceaquerygetsexecuted,itsresultshouldbecommunicatedto
the user. because queries can formulate elaborate instructions thatinduce manipulations over large data sets, the user requires support
to facilitate understanding of query results. to this end, the frame-work includes a dedicated part that is responsible for interpretingresultsofexecutedqueries(seetherightof fig.3).thecommongoal
of all the components of the “interpret” part of the framework is to
contributetowardsuser’sbettercomprehensionofprocessqueryingresults. they are inspired by the various means for improving com-
prehension of conceptual models proposed by lindland et al. [29].
thecomponentsperformwhateverittakestomaketheresultofexe-
cuting a given process query easier to understand by the user. to
identify and explain the differences between the original repository
andtheresultingrepositoryaswellasthereasonsforthedifferences,the components of the “interpret” part of the framework rely on all
the critical inputs and outputs of the process querying component,
i.e.,theytakeallthebitsandpiecesthatareusedtoexecutethequery
as input.
to foster understanding of process query results, one can intro-
duce techniques for inspecting them. indeed, the user can under-standaconceptorphenomenonbyinspecting,orreading,it.variousapproaches can be proposed to facilitate and guide the process of
reading query results. the inspection can be supported by expla-
nation notes predeﬁned by process analysts and domain experts.comprehensionofqueryresultscanbeimprovedbypresentingthem
diagrammatically. the derived visual artifacts can be animated to
demonstrate dynamics of processes that were effected during exe-cution of the query. if artifacts that encode query results get large in
size, their comprehension can be stimulated by projecting, i.e., hid-
ing, some of their parts. one can use simulations to induce sampleprocesses that were effected by the query. finally, query results canbetranslatedtovariousformalismsthatareeasierunderstoodbythe
users.
we anticipate that new means for explaining query results will
emerge, as methods for process querying will become more mature.when explaining results of queries to the users, we recommend
to apply best practices in design of easy-to-comprehend processmodelsand related artifacts, referto refs. [37,38]for details.
4.2. designdecisions
a design decision, or a design rationale, is an explicit argumenta-
tionforthereasonsbehindadecisionmadewhendesigningasystem
or artifact. when designing a new process querying method, oneneeds to take various design decisions. some fundamental decisionsthatemerge from thepqf are discussed below.
4.2.1. dd1:which behaviormodelsto support?
first and foremost, one needs to decide which behavior models
will be supported by the envisaged process querying method. for
example, one may wish to develop a method for managing eventlogs. this method will most likely be different from the one that
managescorrelationmodels(evenifbothmethodssupportthesame
queryintents).thechoiceofbehaviormodelsimplicitlyrestrictstheclass of processes, or languages (in the terminology of computation
theory[39]), supported by the method. for example, if one restricts
behavior models to process models captured using ﬁnite automata,
theclassofsupportedprocesseswillbelimitedbytheclassofregular
languages [39].
4.2.2. dd2:which processesto support?
an activity model, as deﬁned in section 3, can be interpreted as
such that describes several different collections of processes, eachinduced by a different semantics criterion. for example, an activ-
ity model can be interpreted using the ﬁnite, inﬁnite, or fair process
semantics. according to the ﬁnite process semantics, an activity
modelcapturesacollectionofprocessesthatleadtoaterminalstate.ifoneconsiderstheinﬁniteprocesssemantics,anactivitymodelcan
describe processes that never terminate, i.e., processes that describe
inﬁnitely many events. thus, an inﬁnite process strives to, but neverachieves, its goal state. a fair process can be ﬁnite or inﬁnite. a pro-cess in which an event is enabled for execution over and over again
but does not get performed from some state on is unfair [40].a
not unfair process, as per the above principle, is said to be strongly
fair. in ref. [41], the authors study strong fairness and several other
types of fair process semantics criteria. the choice of the corre-spondences between activity models and collections of processesthat they are associated with deﬁnes the problem space for pro-
cess querying methods, i.e., it implies processes to consider when
executingprocess queries.
4.2.3. dd3:which processqueriesto support?
when devising a process querying method, one needs to decide
which types of queries the method will support. the design of a
queryentailschoosingits intentandconditions.achoiceoftheintent
suggests the semantics of the query, e.g., to create, read, update,
or delete behavior models, or parts thereof, in a process repository.
query conditions are used to specify query parameters. the choiceof supported queries determines the expressiveness of the processquerying method, i.e., its ability to describe various problems for
managing processrepositories.
4.3. designchallenges
next, we discuss some challenges that one may face when devel-
oping a process querying method. these challenges stem from the
aforementioned design decisions. the subsequent discussions are
not meant to be exhaustive. we envision that new challenges willarise infuture to address emergingrequirements.
4.3.1. dc1:computability
process queries must be computable, i.e., it should be possible
to solve process querying problems using algorithms (preferably on
a wide range of inputs). this poses a signiﬁcant design challenge.
note that there exist process querying problems that are known to
be undecidable, i.e., it has been demonstrated that they cannot besolved. for example, process queries can be speciﬁed as temporal
logic formulas [42]. however, certain temporal logic formulas are
undecidable on some classes of processes [43]. a query that cannot
be
computed is of no help to the user. thus, one needs to ensure
that queries supported by the devised process querying method are
decidableon theclass of thesupportedbehaviormodels.
4.3.2. dc2:complexity/eﬃciency
process querying aims at providing valuable insights into oper-
ational processes and recorded business cases of modern organiza-
tions.inadditiontotheaforementionedusecases,referto section2,
process querying methods should support users in learning pro-
cesses, behaviors, and models contained in process repositories,
i.e., they should support exploratory querying [44]. this calls for
techniques capable of executing queries eﬃciently. hence, another
fundamentalchallengeofdesigningagoodprocessqueryingmethod
is to propose a fast method that executes using small memory foot-
prints.one can measure theeﬃciencyof aprocessquerying methodusing techniques in computational complexity theory, which study
computation time and storage space required to solve a computa-
tionalproblem.a.polyvyanyyet al. / decision support systems 100 (2017) 41–56 51
4.3.3. dc3: expressiveness/suitability
process querying methods should offer a great variety of con-
ceptsandprinciplestocaptureandexerciseinthecontextofprocess
querying. hence, the third fundamental challenge of process query-ing is to achieve full expressiveness, i.e., the ability to capture all
suitable (useful to the users) process queries that specify instruc-
tions for managing process repositories. a process querying methodshould support all the useful (as perceived by the users) process
queries.thesuitabilityofprocessqueriescanbeassessedempirically
or,similartoref. [45],byidentifyingreoccurringpatternsinqueries.
4.4. processquerying compromise
a process querying method can be characterized by the expres-
sivenessofthesupportedprocessqueriesthatresultfromacompro-mise of selecting computable, eﬃcient, and suitable queries. givenanswerstodesigndecisionsdd1anddd2,i.e.,whichbehaviormod-els and processes to support, cf. section 4.2, one should aim at
supporting as many useful process queriesas possible.
letdbe the set of all computable, or decidable, process queries
(in the context of the supported behavior models). let e⊆dbe the
setofallprocessqueriesthatcanbecomputedeﬃciently.finally,letsbe the set of all process queries that are perceived by the users as
suitable, or useful. then, queries in e∩sare the queries that should
besupportedbytheprocessqueryingmethod.ideally,itshouldholdthats⊆e, i.e., all the queries that are of interest to the users can be
computed eﬃciently. however, in practice, it may be impossible to
fulﬁll the requirement of s⊆d. then, one should strive to improve
the eﬃciency of methods for computing queries in ( s∩d)/integerdividee. note
that to achieve completeness in this endeavor, one should know the
decidabilityof everyquery in s.
5. query-based process analytics and business intelligence
process analytics includes process querying, process analysis,
matching and correlating process execution data and models [3].
accordingtogartner,ciosrankbiandanalyticsasnumberonetech-
nology priority for 2012 through 2016. despite its central role in
assessing the performance of organizations, process analytics, as of
today, remains largely “behavior-unaware”. a notable exception isthe work done by the process mining community [1]. mainstream
bpm approaches tend to treat behavior models as static graphs
rather than dynamic behavior generating artifacts. mainstream biapproachestendtobebehavioragnostic.thetopicofprocessquery-ing, as deﬁned in this paper, remains underdeveloped. a recent
survey, refer to ref. [4], demonstrates the lack of and the need for
process querying methods grounded in behaviors encoded in mod-
els. moreover, it is acknowledged that process analytics remains
mostly limited in its ability to aggregate process performance indi-
cators at thelevelof individualprocesses [3].
process querying can be used to derive analytical insights about
the performance of processes within organizations. we envision
that this can be implemented via process query procedures , i.e.,
orchestrations of process queries. to bridge the gap between high-
level business questions and process analytics, we propose to look
into questionnaire-based approaches. by guiding business analysts
anddomain experts through preconﬁgured and intuitive (semi-
automated) questionnaire instructions, one can attempt to translatebusiness questions into low-level process query procedures that
contribute towards answering the business question. in this light,abusiness question is a collection of inputs (i.e., existing process
knowledge), outputs (i.e., derived process knowledge), and an ana-lytical component. the analytical component of a business questionis composed of manual and automated parts. business questionswith manual parts in analytical componentsseek expert knowledge,
as every manual part is intended to be answered by a business ana-
lystordomainexpert.wesuggestthatautomatedpartsofanalyticalcomponentscan bespeciﬁedas processqueries.
one can formalize a questionnaire as a state machine, where
statesencodeavailableknowledgeandtransitionsrepresentanswerstomanualpartsorexecutionsofautomatedpartsofthecorrespond-
ing analytical component. hence, the user can start a questionnaire
at one of its initial states, the one that encodes the current process
knowledge, and proceed by executing (either manually or automat-
ically)
a predeﬁned sequence of parts of the analytical component
towards one of its accepting states, the one that represents the
derivedknowledgerealizingtheinitialanalytical need.
fig. 4(a) schematizes the envisaged high-level interactions
between stakeholders and components when engaged into thequery-based process analytics experience. business analysts anddomain experts can obtain an answer to a business question by
completing the corresponding questionnaire. by working through a
questionnaire, they conﬁgure process query procedures that real-ize automated parts of the analytical component of the question.
the procedures enact process querying methods that deliver ana-
lytical insights back to the stakeholders who initiated the business
(a) (b)
fig. 4.positioning of process queryingwithin (a) the query-based process analytics and (b) bi.52 a.polyvyanyyet al. / decision support systems 100 (2017) 41–56
question.theobtainedinsightsareusedtocompletemanualpartsof
thequestionnaire.theresultsof theprocessqueryproceduresinﬂu-
ence the process of completing the questionnaire as they impact the
acquired process knowledge. once the questionnaire is completed,the accumulated analytical insights deliver an answer to the orig-
inal business question. the role of a process analyst,o ra process
scientist, is to support process analytics experiences undergone by
business analysts and domain experts. a process scientist is a per-son who has technical skills to design questionnaires and process
query procedures, and to monitor executions of process querying
methods. questionnaires, as well as questionnaire patterns, thatimplement common process analytics scenarios, e.g., those that are
available in the literature [3,42], can be aggregated into an analyti-
calknowledge-base.theusersoftheenvisagedquery-basedprocess
analytics approach will then be able to recompose (and again store
for later reuse) existing and specify new questionnaires that realize
emergingbineeds.
fig. 4(b) puts process querying and the proposed approach to
process analytics into the broader perspective of bi. business ana-lysts refer to bi as a family of technologies that promise to deliveractionable information to support decision making. in our case, theangle is towards process intelligence, i.e., technologies that analyze
the process-related information within process management andexecutionapplications.
6. process querying: state of the art
this section reports on a structured literature review of the exist-
ing research efforts that contribute to process querying. the review
follows the guidelines proposed by webster and watson [46]and
a more rigorous process suggested by vom brocke et al. [47].t h e
review process consists of three main phases: literature search andcollection (section 6.1), literature selection ( section 6.2), and lit-
erature analysis and evaluation (section 6.3). to keep the process
manageable with limited resources, instead of conducting a truly
exhaustive literature review across various domains, we aim for agenerous coverage of representative samples of the research work
in the area of bpm on and closely related to the topic of process
querying.
6.1. literaturesearchandcollection
according to vom brocke et al. [47], before conducting a litera-
turesearch,itisnecessarytodeﬁnearesearchscopeandprovidethe
conceptualizationofthetopic.asdiscussedin sections2–4,thetopic
of concern is process querying for managing collections of processes
speciﬁed in the form of behavior models (e.g., event logs or processmodels). based on the deﬁnition of the process querying problem,
refer to section 3, we identiﬁed four sets of keywords (see below)
and used themtoset theliterature search criteria.
◦keywords-1 :query,queries, querying, search,searches, search-
ing,retrieve,retrieval, retrieving, analysis,analysing, analyzing,
manage,managing, manipulate, manipulating, ﬁlter,ﬁltering
◦keywords-2 :process, processes, workﬂow, workﬂows ,model,
models
◦keywords-3 :process
model,process models, business process,
business processes, event log, event logs, simulation model ,simu-
lationmodels, alignment, alignments, conformancechecking
◦keywords-4 :repository, repositories, collection, collections
for the literature search, we chose two popular scholarly
databases, scopus and web of science, which both are well-knownsources of citations. for each database, we conducted two search
iterations. each iteration was performed from scratch against thewhole database, instead of the search results from the previous
iteration.we appliedthefollowingkeyword-based search criteria:
◦first iteration: (( any word inkeywords-1 )a n d( any word
inkeywords-2 )) in the paper’s titleand (any word in
keywords-3 )in(thepaper’s abstract (ifscopus)orthepaper’s
topic(ifweb ofscience)),
◦second iteration: (any word inkeywords-1 )a n d(any word in
keywords-3 )a n d(any word inkeywords-4 ) in (the paper’s
abstract (if scopus) or thepaper’s topic(ifwebof science)).
inaddition,weappliedfurtherﬁlteringrulestoliteraturesearch:
papers must be (i) written in english, (ii) published as a journal arti-cle, book, book chapter, proceedings paper, or as an article in press(scopusonly),(iii)publishedinthesubjectareaofcomputerscience
in scopus or in the web of science category of computer science
informationsystems,and (iv)publishedbetween2000and 2017.
for each database, the search results of the two iterations were
merged
using the search engine of the database. finally, the search
results in the two databases were manually combined by removing
the duplicates. this led to a collection of 2647 papers. table 1 (a)
summarizes theliteraturesearch statistics.
6.2. literatureselection
the literature selection phase was performed in three sequential
steps. in the ﬁrst step, we identiﬁed and excluded irrelevant papers,
as informed by their titles. the title of an excluded paper indicates
that it is either beyond the scope of bpm or is not related to pro-
cess querying. for example, we identiﬁed a large number of papersthat study service computing (such as web search, service manage-
ment,cloud, service-orientedmodel, etc.; 312 papers), simulation of
systems or system models (but not of processes; 248 papers), datamanagement(irrelevantto process querying; 231papers), modelingingeneral(notonprocessorworkﬂowmodeling;226papers),align-
ment (of policies, systems, etc.; 152 papers), analysis of a process,
workﬂow,logdata(irrelevanttoprocessquerying;167papers),net-work analysis and networks of collaboration (123 papers), resource
and organizational perspective (116 papers), software management
(beyondthescopeofbpm;87papers),enterprisesystem,model,andarchitecture (82 papers), security management (65 papers), and so
on. as a result, 2351 out of 2647 collected papers were excluded
based on theirtitles.
in the second step, we conducted selection based on the papers’
topics. to this end, the abstract and content of a paper were stud-ied to understand the topic of the paper. our decision of selecting orexcluding a paper was made according to the scope of this researchas to study the relevant methods and techniques for querying busi-
ness processes that are speciﬁed in the form of behavior models.
typical examples of excluded literature include: papers on scientiﬁcworkﬂow as the topic has a different focus from business-oriented
processes; papers on the application, rather than the deﬁnition, of
supporting techniques (including process querying) for process ana-lytics; papers on querying different aspects of a business process
(e.g., its business content or performance) other than its control-
ﬂow; papers on querying a business process with a focus on theactivitylabelsorthetextualinformationoftheprocesswithoutcon-
sidering the execution order of the activities in the process; etc. as
a result, a total of 223 papers were removed based on their topics.in addition, we also discovered and removed 22 papers that are notwrittenin english.
in the third step, we performed a paper quality screening. if a
paper does not have a clear contribution or suffers from an unclearsolution to the research question(s) raised in the paper, we do not
consider it qualiﬁed for review and evaluation in the next phase.
another12paperswereexcludedduetoqualityissues.theselectiona. polyvyanyy et al. / decision support systems 100 (2017) 41–56 53
table 1
statistics on (a) the literature search and (b) literature selection.
(a)
by iteration by database total
first 1,586
second 903
first 486
second 336scopus
web of sciencedatabase iteration# hits retrieved
2,386
7732,647(b)
by title by topic non english* by quality
* these papers were retrieved from scopus only. they are written in a language other   
than english except for their title and abstract. # hits retrieved# hits excluded # hits selected
2,351 223 22 12 2,647 39
phase led to a collection of 39 papers. table 1 (b) summarizes the
selectionstatistics.
6.3. literatureanalysisandevaluation
prior to analysis of the 39 selected papers, we categorized them
into fourgroups based on theirtopics.
◦structural querying focuses on the structural topology and
characteristics of behavior models. graph-based search tech-
niques are mostly used in this group of research. two typ-ical examples are bp-ql for querying business processes
speciﬁed in bpel [48]and bpmn-q for querying processes
in bpmn [49–52]. another research stream is on studying
structural similarity between process models which providesuseful underlying techniques for eﬃcient structural query-
ing[24,53,54] . structural matching techniques propose exact
matching between graphs or graph fragments and are applied
in process querying [55,56]. two query languages [57,58]that
focus on pattern-based graph matching techniques are pro-
posed. other relevant work include: semantic querying of
process structural characteristics [59], a querying technique
used for bpmn process models annotated with crosscutting
concerns [60],avisualmodelqueryartifact [61],andadescrip-
tive language to query and change the structural aspect of
processmodels [62].
◦behavioral querying focuses on behaviors induced by activ-
ity models. typical examples are querying techniques basedon petri nets [25,63], yawl nets [64], temporal logics such
as ltl[65], and a process query language [66,67]speciﬁcally
designed to support behavioral querying. another researchstream studies behavioral similarity search [68–71] grounded
in behavioral relations over activities and originates from
the existing research on behavioral proﬁle [72]. there is also
a study on specifying and comparing processes using ﬁnite
automata [73].
◦process execution querying addresses querying the execution
traces of business processes at run-time (for monitoring pur-
poses) or post-execution. both a process model and its event
log are available inputs for the relevant research, and theseare considered simulation models according to deﬁnition 3.4 .
typical examples are bp-mon [74,75], bp-ex [76–78],a n d
bpql[79].
◦event log querying focuses on querying traces of business pro-
cesses in the form of event logs only (i.e., no process model isavailable).onlyafewrelevantresearchoutcomeswerediscov-ered[80–83].mostoftheapproachesconvertprocesslogsinto
graphsandthenapplyfpsparql(anextensionofsparql) [80]
or graph-based search techniques [82,83]to implement pro-
cessquerying.theauthorsofref. [81]useltltoretrievetraces
against a givenbusiness rule from theeventlog.
in addition, three survey papers on the topics of process model
similarity search [84], behavioral similarity metrics and evaluation
[85],
and process querying techniques [4]were selected. in ref. [4],the authors focus on comparing syntactic-based querying and
semantic-based querying to emphasize the importance of consid-
ering the process semantics (i.e., behavior) when querying processrepositories.
before moving to a detailed evaluation of the selected literature,
we deﬁned a set of evaluation metrics as informed by the pqf, refertosection 4. to validate the framework’s design, we were interested
inunderstandingtheselectedliteratureinthefollowingfouraspects.
◦processrepositorydesign aspect:
−what types of behavior models are supported by process
repositories?
−whatmodeling languages are used to specify behavior
models?
−what is the level of formalism of behavior models in process
repositories? for example, a process model may be speci-ﬁed in a formal language such as petri net, a semi-formal
language such as bpmn (which has execution semantics), or
an informal language like value chains; refer to section3 for
more details on formal, semi-formal, and informal behavior
models.
◦processquerydesign aspect:
−whatqueryintents aresupported?the readintentisfurther
subdivided into two intents of ‘retrieve’ and ‘project’, where
‘retrieve’istoknowwhetherornotamodelsatisﬁesaqueryand ‘project’ is to obtain some details about a model (e.g., a
fragmentof themodel) thatsatisﬁes aquery.
−what underlying techniques are applied to support the
querying(querying technique for short)?
−what is the level of formalism with respect to the seman-
tics of querying method (querying semantics for short)? in
otherwords,uptowhatlevelofformalismdoesthequerying
method treat behavior models in process repositories. for
example,theprocessrepositorymaybecomposedofformalmodels but the proposed querying method may be treatingthemas informal models.
−is there a particular research artifact in the form of a query
language?
◦prepare & execute aspect looks into which components of the
“prepare” part and the “execute” part of the framework are
studiedin theliterature.
◦interpret aspect studies which components of the “interpret”
part of the framework for explaining process querying resultsare addressed in thestateof theart querying methods.
next, we analyzed the main research efforts from the selected
literature in process querying using the above evaluation metrics.
the papers are organized into the four topic groups that were men-
tioned earlier, and one key paper is included for each researchitem. note that the three survey papers are not included in the
literature evaluation. detailed evaluation results of these key papers
are presentedin table 2.54 a. polyvyanyy et al. / decision support systems 100 (2017) 41–56table 2
evaluation resultsof the key papers on process querying in the bpm ﬁeld.
topic 
group(short) title
key reference
event log
simulation model
process model
bpmn
bpal (a bpmn variant)
bpel
epc
finite state automaton (fsa)
petri net
yawl net
process graph
direct acyclic graph
process metamodel
formal
semi-formal
informal
read (retrieve)
read (project)
update
graph matching
graph similarity
graph-based search
fsa-based
petri net-based
temporal logic
event correlation
top-k selection
activity label similarity
formal - partial order
semi-formal - partial order
informal
bp-ql
bp-mon
bp-ex
bpmn-q
bpmn vql
dmql
gmql
vmql
descriptive pql
bql
apql / pql
fpsparql
qubpal
bpql
indexing
filtering
optimizing (exec. plan)
projecting
translating
visualizing
querying business processes with bp-ql [48]
bpmn-q: a language to queryi ng business processes [49]
semantic querying of business process models [50]
querying graph-based reposi tories of process models [51]
efficient processing  of bpmn-q queries [52]
query structural information of bpel processes [55]
process matching: a structur al approach for process search [56]
fnet: an index for advance d business process querying [24]
ontology-based querying of c omposite services by processes [59]
crosscutting concern documentation by bpmn vql [60]
dmql: the diagramed model query language [57]
gmql: the generic model query language [58]
querying business process models with vmql [61]
pql: a descriptive language to query, abstract & change process models [62]
indexing business processes via annotated finite state automata [73]
compliance checking using bpmn-q & temporal logic [65]
querying business process models based on semantics [63]
efficient querying of large process model repositories [64]
apql: a process-model query language [66]
indexing and efficient instance- based retrieval of process models [25]
querying process models  by behavior inclusion [71]
monitoring business processes with queries [74]
type inference and checking for queries on e xecution traces [76]
models and query languages for probabilistic processes [78]
process query language to make wo rkflow processes more flexible [79]
a query language for analyzing bus iness processe s execution [80]
log-based understanding of processes via temp oral logic query checking [81]
log-based process fragment querying to support process design [82]
a framework supporting queryi ng analysis of process logs [83]querying 
semanticquery language
structural 
querying
behavioral 
querying
process 
execution 
querying
event log 
queryingliteratureprocess repository design process query design
prepare &
executeintepretbehavior 
modelmodeling languagelevel of 
formalismquery
intentquerying technique
note: the sign of /checkindicates the evaluation item is supported. the sign of ±means there is some intermediate or indirect support. e.g., ref. [51]applies the index-and-ﬁltering functionalities provided by the underlying rdbms
deployed in the research instead of developing its own mechanism, hence it is evaluated ±for both items of indexing and ﬁltering. then, in ref. [52]the authors progressed the work by proposing their own mechanisms for
indexing and ﬁlteringand therefore the workis evaluated /checkfor both items.a.polyvyanyyet al. / decision support systems 100 (2017) 41–56 55
the literature analysis results in table 2justify the design of the
framework proposed in section 4, as most of the proposed compo-
nentsand featuresof thedesign are addressed in theliterature.
none of the existing methods for process querying addresses
all the components of the framework, even for a subset of behav-
ior model types and/or different levels of formalism. the insights
gained from the reported evaluation were used to inform the designof the framework. in particular, the “interpret” part was introducedafter the respective functionality was identiﬁed in the selected
literature.
the identiﬁed in this literature review research gaps include: (i)
absence of querying methods over correlation models, e.g., align-ments[36], (ii) absence of uniﬁed querying methods over several
types of behavior models, (iii) absence of uniﬁed querying methods
over all levels of formalism of behavior models, e.g., informal, semi-
formal, and formal models, (iv) absence of works on caching in the
context of process querying, (v) lack of techniques for indexing pro-cess repositories and optimization of process queries, (vii) lack of
variousmeansforexplainingprocessqueryingresults(asmostofthe
methods rely only on means of translating and visualizing queryingresults), and (viii) lack of works on components that can be used toinstantiatetheproposedframeworkforqueryingoverformalprocess
models with querying semantics grounded in behavior of the pro-
cess models. we believe that the proposed framework for processquerying methods and the insights gained in the conducted litera-
ture review will help to steer as of today somewhat uncoordinated
efforts inresearch on processquerying.
7. conclusion
thispaperproposesaframeworkfordevelopingprocessquerying
methods, i.e., (automated) techniques for managing process repos-
itories. the active components of the framework specify genericfunctionalities that can be conﬁgured and specialized to address aparticular process querying problem. the framework is grounded in
various use cases taken from the bpm ﬁeld and the reported lit-
erature review. the use cases motivate the framework and guideits design. the literature review justiﬁes the design and reveals
research gaps. as of today, comprehensive process querying meth-
ods grounded in behaviors captured by models of dynamic systemsaremissing.theintroductionofthesemethodswillenablethesofar
unmatched experience in process analytics that will lead to the next
generationof smart bi technologies.
acknowledgments
this research is partly supported by the australian research
council discoveryproject dp150103356.
references
[1]w.m.p. van der aalst, process mining–data science in action, 2nd ed. ed.,
springer. 2016.
[2]m. zur muehlen, r. shapiro, business process analytics, handbook on busi-nessprocessmanagement2,internationalhandbooksoninformationsystems,springer. 2015, pp. 243–263.
[3]s. beheshti, b. benatallah, s. sakr, d. grigori, h.r. motahari-nezhad, m.c.barukh, a. gater, s.h. ryu, process analytics — concepts and techniques for
querying and analyzing processdata, springer. 2016.
[4]j. wang, t. jin, r.k. wong, l. wen, querying business process model reposi-tories—asurveyofcurrentapproachesandissues,worldwideweb17(2014)
427–454.
[5]k. peffers, t. tuunanen, m.a. rothenberger, s. chatterjee, a design science
research methodology for information systems research, j. manag. inf. syst. 24
(2008) 45–77.
[6]a.r. hevner,s.t. march,j. park,s. ram,designscienceininformationsystemsresearch,mis q. 28(2004) 75–105.
[7]w.m.p. van der aalst, business process management: a comprehensive survey,isrn softw. eng. 2013(2013)[8]j.l. whitten, v.m. barlow, l. bentley, systems analysis and design methods,
3rded. ed., mcgraw-hill professional. 1997.
[9]a. osterwalder, y. pigneur, designing business models and similar strategicobjects: the contribution of is, jais 14(2013)
[10]j.a. zachman, a framework for information systems architecture, ibm syst. j.
38(1999)454–470.
[11]v. haren, togafversion 9.1, 10th ed. ed., van haren publishing. 2011.
[12]a.p.barros,k.duddy,m.lawley,z.milosevic,k.raymond,a.wood,processes,
roles, and events: uml concepts for enterprise architecture, uml, lncs vol.
1939, springer. 2000, pp. 62–77.
[13]h. jonkers, m.m. lankhorst, r. van buuren, s. hoppenbrouwers, m.m. bon-sangue, l.w.n. van der torre, concepts for modeling enterprise architectures,int. j. coop. inf. syst. 13(3) (2004) 257–287.
[14]m. weidlich, a.p. barros, j. mendling, m. weske, vertical alignment of processmodels — how can we get there? bpmds, lnbip vol. 29, springer. 2009, pp.
71–84.
[15]a.polyvyanyy,m.weidlich,m.weske,isotacticsasafoundationforalignmentand abstraction of behavioral models, bpm, lncs vol. 7481, springer. 2012,
pp. 335–351.
[16]t. schneider, sap business by design studio — application development, sap
press. 2011.
[17]x. lu, m. nagelkerke, d. van de wiel, d. fahland, discovering interactingartifacts from erp systems, ieee tsc8 (2015)
[18]a. koschmider, m. fellmann, a. schoknecht, a. oberweis, analysis of pro-cess model reuse: where are we now, where should we go from here? decis.
support syst. 66(2014) 9–19.
[19]b.f. van dongen, r.m. dijkman, j. mendling, measuring similarity between
business process models, seminal contributions to information systems
engineering, 25years of caise, springer. 2013, pp. 405–419.
[20]f. gottschalk, w.m.p. van der aalst, m.h. jansen-vullers, merging event–driven process chains, otm conferences, lncs vol. 5331, springer. 2008, pp.
418–426.
[21]i. trummer, c. koch, multi-objective parametric query optimization, pvldb 8
(2014)221–232.
[22]d. fahland, w.m.p. van der aalst, model repair — aligning process models toreality, inf. syst. 47(2015) 220–243.
[23]a. polyvyanyy,w.m.p. vanderaalst,a.h.m. terhofstede,m.t. wynn,impact–driven process model repair, acm trans. softw. eng. methodol. 25 (2017)
1–60.
[24]z. yan, r. dijkman, p. grefen, fnet: an index for advanced business process
querying, bpm, lncs vol. 7481, springer. 2012, pp. 246–261.
[25]a. polyvyanyy, m. la rosa, a.h.m. ter hofstede, indexing and eﬃcientinstance-basedretrievalofprocessmodelsusinguntanglings,caise,lncsvol.
8484, springer. 2014, pp. 439–456.
[26]c.a. petri, nicht-sequentielle prozesse, arbeitsberichte des immd 8, univer-sität erlangennürnberg. 1976.
[27]m. nielsen,g.d. plotkin,g. winskel,petrinets,eventstructuresanddomains,part i, theor.comput. sci. 13(1981)
[28]u. goltz, w. reisig, the non-sequential behavior of petri nets, infect. control.
57(1983)
[29]o.i. lindland, g. sindre, a. sølvberg, understanding quality in conceptualmodeling, ieee softw. 11 (1994)42–49.
[30]t.h. cormen, algorithms unlocked, mit press. 2013.
[31]j. recker, evidence-based business process management: using digital oppor-
tunities to drive organizational innovation, bpm–driving innovation in adigital
world, springer. 2015, pp. 129–143.
[32]c. baier, j.-p. katoen, principles ofmodel checking, mit press. 2008.
[33]j.banks,j.s.c.ii,b.l.nelson,d.m.nicol,discrete-eventsystemsimulation, 5thed. ed., pearson education. 2010.
[34]w.m.p. van der aalst, c. stahl, modeling business processes — a petri net-ori-ented approach, mit press. 2011.
[35]w.reisig,understandingpetrinets—modelingtechniques,analysismethods,case studies, springer. 2013.
[36]w.m.p. vanderaalst,a. adriansyah,b.f. vandongen,replaying history on
process models for conformance checking and performance analysis,
wiley interdiscip. rev.-data mining knowl. discov. 2 (2012) 182–
192.
[37]j. mendling, m. strembeck, j. recker, factors of process model comprehen-sion — ﬁndings from a series of experiments, decis. support syst. 53 (2012)
195–206.
[38]j. mendling, h.a. reijers, w.m.p. van der aalst, seven process modeling
guidelines (7pmg), inf. softw. technol. 52(2). (2010)
[39]m. sipser, introduction to the theory of computation, 3rd ed. ed., cengagelearning. 2012.
[40]e. kindler, w.m.p. van der aalst, liveness, fairness, and recurrence in petrinets, inf. process.lett. 70(1999)
[41]k.r. apt, n. francez, s. katz, appraising fairness in languages for distributed
programming, distrib. comput. 2(1988)
[42]m. reichert, b. weber, enabling flexibility in process-aware information sys-tems, springer. 2012,297–317.
[43]j. esparza,m. nielsen,decidabilityissuesforpetrinets—asurvey,bull.eatcs52(1994)244–262.
[44]r.w. white, r.a. roth, exploratory search: beyond the query–responseparadigm, morgan & claypool publishers.2009.
[45]m.dwyer,g.avrunin,j.corbett,patternsinpropertyspeciﬁcationsforfinite-s-
tate veriﬁcation, icse, acm. 1999,56 a.polyvyanyyet al. / decision support systems 100 (2017) 41–56
[46]j. webster, r.t. watson, analyzing the past to prepare for the future: writing
a literature review, mis q. 26(2002) xiii–xxiii .
[47]j. vom brocke, a. simons, b. niehaves, k. riemer, r. plattfaut, a. cleven, et al.reconstructing the giant: on the importance of rigour in documenting the
literature searchprocess., ecis, 2009. pp. 2206–2217.
[48]c. beeri, a. eyal, s. kamenkovich, t. milo, querying business processes with
bp-ql, inf. syst. 33(2008) 477–507.
[49]a. awad, bpmn-q: a language to query business processes, emisa, lni vol.p-119, gi. 2007, pp. 115–128.
[50]a. awad, a. polyvyanyy, m. weske, semantic querying of business processmodels, edoc, ieee comp. society. 2008,
[51]a. awad, s. sakr, querying graph-based repositories of business process
models, dasfaa workshops, lncs vol. 6193, springer. 2010, pp. 33–44.
[52]a. awad, s. sakr, on eﬃcient processing of bpmn-q queries, comput. ind. 63(2012)867–881.
[53]r. dijkman, m. dumas, l. garcía-ba nuelos, graph matching algorithms forbusinessprocessmodelsimilaritysearch,bpm,lncsvol.5701, springer.2009,
pp. 48–63.
[54]z. yan, r. dijkman, p. grefen, fast business process similarity search, distrib.
paralleldatabases 30 (2012)105–144.
[55]z.ma,w.lu,f.leymann,querystructuralinformationofbpelprocesses,iciw,ieee computer society. 2009,
[56]j.zhu,h.k.pung,processmatching:astructuralapproachforbusinessprocesssearch,computationworld, ieee computer society. 2009, pp. 227–232.
[57]p. delfmann, d. breuker, m. matzner, j. becker, supporting informationsystems analysis through conceptual model query — the diagrammed modelquerylanguage (dmql), commun. assoc. inf. syst. 37(2015)
[58]p. delfmann,m. steinhorst,h.-a. dietrich,j. becker,thegenericmodelquerylanguage gmql — conceptual speciﬁcation, implementation, and runtime
evaluation, inf. syst. 47(2015) 129–177.
[59]f. smith, m. missikoff, m. proietti, ontology-based querying of compositeservices, bsme, springer. 2010,
[60]c. di francescomarino, p. tonella, crosscutting concern documentation by
visual query of business processes, bpm workshops, lnbip vol. 17, springer.
2008, pp. 18–31.
[61]h. störrle, v. acretoaie, querying business process models with vmql, bmfa,4, acm. 2013, pp. 1–10.
[62]k. kammerer, j. kolb, m. reichert, pql — a descriptive language for querying,abstracting and changing process models, bpmds, lnbip vol. 214, springer.
2015, pp. 135–150.
[63]t. jin, j. wang, l. wen, querying business process models based on semantics,
dasfaa, springer. 2011,
[64]t. jin,j. wang,m. larosa,a. terhofstede,l. wen,eﬃcientqueryingoflargeprocessmodel repositories, cii 64 (2013)
[65]a. awad, g. decker, m. weske, eﬃcient compliance checking using bpmn-qand temporal logic, bpm, lncs vol. 5240, springer. 2008, pp. 326–341.
[66]a.h.m. ter hofstede, c. ouyang, m. la rosa, l. song, j. wang, a. polyvyanyy,apql: a process-model query language, ap-bpm, lnbip vol. 159, springer.
2013, pp. 23–38.
[67]a. polyvyanyy, l. corno, r. conforti, s. raboczi, m. la rosa, g. fortino,
process querying in apromore, bpm demos, ceur workshop proceedings
1418, ceur-ws.org. 2015, pp. 105–109.
[68]m. kunze, m. weske, metric trees for eﬃcient similarity search in largeprocessmodelrepositories, bpm,lnbipvol.66, springer.2010, pp.535–546.
[69]m. kunze, m. weidlich, m. weske, behavioral similarity — a proper metric,bpm, lncsvol. 6896, springer. 2011,
[70]m. guentert, m. kunze, m. weske, evaluation measures for similarity search
results in process model repositories, er, lncs vol. 7532, springer. 2012, pp.
214–227.
[71]m. kunze, m. weidlich, m. weske, querying process models by behaviorinclusion, softw. syst. model. 14(2015)
[72]m. weidlich, h. ziekow, j. mendling, optimising complex event queries overbusiness processes using behavioural proﬁles, bpm workshops, lnbip vol. 66,springer. 2010, pp. 743–754.
[73]b. mahleko, a. wombacher, indexing business processes based on annotatedﬁnite state automata, icws, ieee. 2006, pp. 303–311.
[74]c.beeri,a.eyal,t.milo,a.pilberg,monitoringbusinessprocesseswithqueries,vldb, acm. 2007, pp. 603–614.
[75]c. beeri,a. eyal,t. milo,a. pilberg,bp-mon:query-basedmonitoringofbpelbusiness processes, sigmod rec. 37(2008)
[76]d.
deutch, t. milo, type inference and type checking for queries on execution
traces, pvldb1 (2008) 352–363.
[77]e. balan, t. milo, t. sterenzy, bp-ex: a uniform query engine for business
processexecution traces, edbt, acm. 2010,
[78]d. deutch,t. milo,onmodelsandquerylanguagesforprobabilisticprocesses,sigmod rec. 39(2010) 27–38.
[79]m. momotko, k. subieta, process query language: a way to make workﬂow
processesmore flexible,adbis, lncs vol. 3255, springer. 2004, pp. 306–321.
[80]s. beheshti, b. benatallah, h.r.m. nezhad, s. sakr, a query language foranalyzing business processes execution, bpm, lncs vol. 6896, springer. 2011,
pp. 281–297.
[81]m. räim, c. di ciccio, f.m. maggi, m. mecella, j. mendling, log-based under-standing of business processes through temporal logic query checking, otm
conferences,lncs vol. 8841, springer. 2014, pp. 75–92.[82]k.yongsiriwit,n.n.chan,w.gaaloul,log-basedprocessfragmentqueryingto
support processdesign, hicss, ieee computer society. 2015, pp. 4109–4119.
[83]b. fazzinga, s. flesca, f. furfaro, e. masciari, l. pontieri, c. pulice, a frameworksupporting the analysis of process logs stored in either relational or nosql
dbmss, ismis, lncs vol. 9384, springer. 2015, pp. 52–58.
[84]r.m. dijkman, m. dumas, b.f. van dongen, r. käärik, j. mendling, similarity
of business process models: metrics and evaluation, inf. syst. 36 (2011)
498–516.
[85]m. kunze, m. weske, methods for evaluating process model search, bpmworkshops, lnbipvol. 171, springer. 2013.
artem polyvyanyy. dr. artem polyvyanyy is a lecturer
at the business process management discipline, school
of information systems, science and engineering faculty,of the queensland university of technology, brisbane,australia. he has a strong background in computer sci-ence, software engineering, and business process man-
agement from the national university of kyiv-mohyla
academy, kyiv, ukraine, and the hasso plattner insti-tute, potsdam, germany. he received a phd degree (dr.rer. nat.) in the scientiﬁc discipline of practical computersciencefromtheuniversityofpotsdam,germany.hisper-sonal research interests include distributed and parallelsystems, concurrency theory, petri nets, formal meth-ods, information systems, software engineering, work-ﬂow management, and business process management.
morerecently,hehasconductedresearchonprocessanalysis,behaviorabstractioninconcurrentsystems, processmining, and process querying.
chun ouyang. dr. chun ouyang is a senior lecturer in
the school of information systems at queensland univer-sity of technology (qut). after she received her phd fromthe university of south australia in 2004, chun becamea member of the business process management (bpm)research group at qut. chuns research interests in bpmrange from underlying techniques (mainly petri nets) forprocess modeling and analytics, process mining, stan-dards and methods used in industry (such as mainstreammodeling languages bpmn, bpel), application of aspect-
orientation to bpm, and application of bpm to various
domains such as screenbusiness and healthcare.
alistair barros. alistair barros is a full professor of infor-
mation systems and head of services science discipline,at quts school of information systems. he has a phdfrom the university of queensland and ict experienceacross industry, technology vendor and research roles,including global research leader and chief develop-ment architect at sap. he has contributed to a num-ber of widely adopted it platform standards/references,including:businessprocessmanagementnotation2.0,the
workﬂow patterns, uniﬁed modelling language 2.0 and
uniﬁed service description language. he has led largeresearch proposals/projects across europe and australiaincluding smart services collaboration research centre,internet of services projects in eu framework program7, german bmbf and a number of australian research
council projects. in addition to his research and teaching roles at qut, alistair is cur-rentlyservingasaconsultantchiefarchitectinanernst&youngledteam,inoneofthefederal government largest service delivery transformation projects, the $1.6 billion
welfarepayments infrastructure transformation project.
wil van der aalst. prof.dr.ir.wilvanderaalstisafullpro-
fessor of information systems at the technische univer-
siteiteindhoven(tu/e).attu/eheisthescientiﬁcdirector
of the data science center eindhoven (dsc/e). since 2003he holds a part-time position at queensland university oftechnology(qut).hispersonalresearchinterestsincludeprocessmining,petrinets,businessprocessmanagement,workﬂow management, process modeling, and processanalysis. he is also a member of the board of governorsof tilburg university and an elected member of the royalnetherlandsacademyofartsandsciences,theroyalhol-
landsocietyofsciencesandhumanities,andtheacademy
of europe.