an evaluation of case handling systems for 
product based workflow design 
irene vanderfeesten, hajo a. reijers  and wil m. p. van der aalst 
department of technology management, technische universiteit eindhoven 
po box 513, 5600 mb eindhoven, the netherlands 
i.t.p.vanderfeesten@t m.tue.nl, h.a.reijers@tm.tue.n l, w.m.p.v.d.aalst@tue.nl  
keywords: product based workflow desi gn, case handling system s, business process rede sign, business process 
management. 
abstract: case handling systems  offer a solution to the lack of flexibility and adaptability in workflow management 
systems. because they are data driven they potentially provide good support for product based workflow 
design  (pbwd). in this paper we investigate to whic h degree current case hand ling systems (flower and 
activity manager) are able to support pbwd. this is done by elaborating the design process of a case from 
industry in both systems. from this evaluation we c oncluded that current case handling systems are not yet 
completely ready for supporting pbwd. therefore, we re cognize that better tool s upport is needed to make 
pbwd more suitable for practical use. 
1 introduction 
in the past decades, process-orientation has gained a 
strong foothold in various fields, notably in the 
business management and information systems 
disciplines. this is illustrated by the emergence of 
process-oriented transformation approaches, like business process redesign (bpr) (davenport, 1993; 
hammer & champy, 1993), on the one hand and 
process-aware information systems, like workflow 
technology (van der aalst & van hee, 2002), on the 
other. with this rise, the historic focus on the data 
that is being processed within businesses settings - and by information systems in particular - has 
blurred. it should be remembered that during the 70s 
and 80s the majority of information systems development projects would start with a thorough 
data analysis, leading to conceptual data models, 
while nowadays similar projects typically start with mapping the business to be supported in the form of 
process models.  
recently, nothing short of a data revival  has set 
in in the business process management (bpm) 
community, bringing back attention for data aspects. 
this phenomenon can be distinguished in at least 
two places. firstly, various problematic issues with 
workflow and bpm systems are being countered with the introduction of systems that put much more emphasis on the data that is being handled (e.g. case 
handling systems (van der aalst & berens, 2001; 
van der aalst, weske & grünbauer, 2005)), in this 
way moving away from a purely control-flow centric 
perspective. secondly, in novative bpr approaches 
are emerging that, rather counter-intuitively, take 
business data processing requirements as starting 
point for generating a new business process design (e.g. reijers, limam, & van der aalst, 2003; sun & 
zhao, 2004). 
in this paper, we will investigate to what extent 
synchronous movements towards a higher data 
awareness in the fields of (i) workflow management 
and (ii) business process design can mutually reenforce each other. in the recent past, we have 
worked on the development and application of the 
method of product-based workflow design (pbwd). this method takes a static description of 
an (information) product as a starting point to derive 
an improved process design. the idea to focus on the product instead of on an existing process when 
redesigning a process was introduced by (van der 
aalst, 1999) and is based on a similar approach in 
manufacturing processes. since its conception, this 
method has been worked out in some detail (reijers, 2003; reijers, limam & van der aalst, 2003; reijers 
& vanderfeesten, 2004) a nd has been successfully 
applied in industry in over a dozen of occasions. at the same time, the manual application of pbwd in 
39 
practice proves to be a time-consuming and error-
prone affair. it is likely that the absence of 
automated tools to support the application of pbwd 
hinders the wider adoption of the method, despite its successes in bringing back cycle time and service 
times of actual business processes with 30% or more 
(reijers, 2003). on the road  to the development of 
pbwd support tools, it seems wise to consider some 
of the existing tools that could already deliver 
(partial) support for the application of pbwd. a notable candidate for such support would be current 
case handling technology. after all, just like 
traditional workflow management systems, case handling systems operate on the basis of a pre-
defined process model. in contrast to workflow 
technology, however, case handling systems implement various data management features (van 
der aalst, weske & grünbauer, 2005). 
the objectives of the paper can now be 
formulated as follows: (i) to determine whether the 
concepts of pbwd can be translated to the concepts 
of current case handling systems, (ii) to establish to 
what extent build-time feat ures of  case handling 
systems support the design of workflow models based on pbwd, and (iii) to find out how current 
case handling tools could be enhanced to support 
pbwd. fulfilling these objectives could also be useful to determine the desirable features of a 
specifically tailored support tool for pbwd, i.e. 
without using current case handling systems.  
the structure of this paper is as follows. in the 
next two sections, we will shortly review case 
handling systems and the pbwd method respectively, forming the fundaments of this paper. 
in section 4, we will present our assessment of two 
existing case handling te chnologies, i.e. pallas 
athena's flower and bpi's activity manager. to 
conclude the paper, we present the major 
implications from our assessment and directions for further research. 
2 case handling systems 
traditional workflow and bpm systems are 
characterized by well-known limitations in terms of 
flexibility and adaptability (van der aalst & 
jablonski, 2000). these limit ations can be associated 
with the dominant paradigm for process modelling 
found in these systems, which is almost exclusively 
activity-centric (dumas, van der aalst & ter hofstede, 2005). the lack of flexibility and 
adaptability leads to many problems and inhibits a 
broader use of workflow technology. in recent years many authors have discussed the problem (van der 
aalst & jablonski, 2000; agostini & de michelis, 
2000; casati et al, 1996; ellis & keddara, 2000; 
herrmann et al, 2000, klein, dellaroca & bernstein, 1998 and 2000) and different solution strategies 
have been proposed. basical ly, there are three ways 
to provide more flexibility: 
• dynamic change  (ellis & keddara, 2000; 
reichert & dadam, 1998; rinderle, reichert & 
dadam, 2004). 
• worklets  (adams et al, 2005; staffware, 2003; 
weske, 2001), and 
• case handling  (van der aalst & berens, 2001; 
van der aalst, weske & grünbauer, 2005). 
 
the basic idea of dynamic change  is to allow 
changes at run-time, i.e., while work is being 
performed processes may be adapted (van der aalst & jablonski, 2000; ellis & keddara, 2000; reichert 
& dadam, 1998; rinderle, reichert & dadam, 
2004). clearly, dynamic ch ange mechanisms can be 
used to support flexibility and adaptability. 
a dynamic change may refer to a single case 
(i.e., process instance) or multiple cases (e.g., all running instances of a pro cess). both changes at the 
instance level and the type level may introduce 
inconsistencies, e.g., data may be missing or activities are unintentionally skipped or executed 
multiple times. a well-known problem is the 
"dynamic change bug'' which occurs when the ordering of activities changes or the process is made 
more sequential (ellis & keddara, 2000). these 
issues have been addressed by systems such as adept (reichert & dadam, 1998; rinderle, 
reichert & dadam, 2004). such a system can 
safeguard the consistency of a process. however, an 
additional complication is that the people changing 
the processes should be able to modify process models and truly understand the effects of a change 
on the whole  process. in real-life applications, with 
hundreds of tasks, few people are qualified to make such changes. 
worklets  (adams et al, 2005) allow for flexibility 
and adaptability by the late binding of process fragments. activities in a process are not bound to a 
concrete application or subprocess and only when 
they need to be executed a concrete application or subprocess is selected. yawl (van der aalst & ter 
hofstede, 2005) is an example of a system that 
implements this idea. in yawl activities may be handled by a worklet handler, this handler uses an 
extensible set of ripple-down rules to select the right 
worklet (i.e., a concrete application or subprocess). similar ideas have been proposed by other authors iceis 2007 - international conference on enterprise information systems
40 
(e.g., weske, 2001) and even implemented in 
commercial systems (cf. the staffware extension that 
allows for process fragments (staffware, 2003)). 
although the worklets mechanism is easier to be used by end-users than most dynamic change 
mechanisms, the scope is limited and only particular 
forms of flexibility and adaptability can be supported. 
case handling is another paradigm for 
supporting flexible and knowledge intensive business processes. the concept of case handling  
offers a solution to the lack of flexibility in 
traditional workflow systems (van der aalst, weske & grünbauer, 2005). case handling is supporting 
knowledge intensive business processes and focuses 
on what can be done instead of on what should  be 
done. to support this, a case handling system is 
much more data driven than a workflow system. the 
central concept for case handling is the case and not 
the routing of work or the activities. the case is the 
product that is manufactured in the process based on 
the data that is processed. the core features of case 
handling are (van der aalst & berens, 2001; van der 
aalst, weske & grünbauer, 2005): 
• to avoid context tunneling by providing all 
information available (i.e., present the case as a 
whole rather than showing just bits and pieces), 
• to decide which activities are enabled on the 
basis of the information available rather than the 
activities already executed, 
• to separate work distribution from authorization 
and allow for additional types of roles, not just 
the execute role, 
• to allow workers to view and add/modify data 
before or after the corresponding activities have 
been executed (e.g., information can be 
registered the moment it becomes available). 
 these core features of case handling are supported 
by systems such as flower (pallas athena, 2006). 
other systems such as bpi's activity manager (gyata bpi, 2006) only support some of these 
features. unlike dynamic change and worklets, case 
handling provides implicit flexibility, i.e., there is no need to change a process model or to select a 
particular worklet. moreov er, as the list of core 
features suggests, case handling takes a broader perspective by also incorp orating aspects as work 
distribution and information collection. 
  
 3 pbwd 
product based workflow design, or in short pbwd, 
(van der aalst, 1999; reijers, 2003; reijers, limam 
& van der aalst, 2003; reijers & vanderfeesten, 
2004) is a revolutionary  approach to workflow 
process design. it is revolutionary because a clean-
sheet of paper is taken to design the complete 
process from scratch. rather than the activities and the workflow process itself, it takes the processing 
of data and the workflow end product as the central 
concepts. this approach has several advantages that are described in (reijers, 2003; vanderfeesten, van 
der aalst & reijers, 2005). the most important 
advantage is that pbwd is rational . in the first 
place because the product specification is taken as 
the basis for a workflow design, each recognized 
information element and each production rule can be justified and verified with this specification. as a 
consequence there are no unnecessary tasks in the 
resulting workflow. secondly, the ordering of (tasks with) production rules themselves is completely 
driven by the performance targets of the design 
effort. 
the workflow product is represented by a product 
data model  (pdm), i.e. a netw ork structure of the 
components of the product. the approach of pbwd 
is very similar to the way in which manufacturing 
processes are structured. this will be explained in more detail in the remainder of this section. 
section 3.1 shortly describes the similar concepts in 
manufacturing, while section 3.2 subsequently elaborates on the important concepts of pbwd. 
finally, section 3.3 introduces an industry case as an 
example of pbwd, which is used throughout the assessment of the two concrete systems, as 
summarized in  section 4. 
3.1 bill-of-material (bom) 
in manufacturing, often a static representation of the 
product is used to organise the assembly lines. figure 1 shows such a representation for the 
assembly of a car. a car is made of 4 wheels, a 
chassis, and an engine. the structure of the assembly line can be derived from the picture as follows: first, 
the four wheels and the chassis are put together, 
resulting in a subassembly product. next, the final 
assembly takes place by putting the subassembly 
product and the engine together. the result is a car. the representation of the product and its parts is 
referred to as the bill-o f-material (bom) (orlicky, 
1972) and is also used in information systems, e.g. an evaluation of case handling systems for product based workflow design 
41 
mrp- and erp-systems for production planning and 
control. 
manufacturing and service-oriented processes have a 
lot in common (platier,  1996), e.g. process 
management in both domains focuses on the routing 
of work and the allocation of work to resources. 
because of these similar ities it was considered 
worthwhile to explore the applicability of some 
concepts from the field of manufacturing to 
administrative and informat ion intensive processes 
(referred to as workflow processes ). the pbwd 
method derives a process model from the structure 
of an (administrative) product. this product structure is represented with a pdm, as explained in 
the next section. 
 
 
figure 1: the bill of material (bom) of a car. 
3.2 product data model (pdm) 
the product of a workflow process can be an 
insurance claim, a mortgage request, a social 
benefits grant, etc. similar to a bom, a pdm of this 
product can be made. however, the building blocks are not the physical parts th at have to be assembled, 
but the data elements (e.g. name, birth date, amount 
of salary, type of insurance and  register of holidays) that have to be processed to achieve new data. 
 
figure 
2 contains a small and simple example, 
comparable to the simple bom of the car in figure 
1. it describes the decision whether an applicant is 
allowed for a training to become a helicopter pilot (see also reijers, 2003). persons that want to 
become a helicopter pilot should meet some 
requirements: they should be  healthy, their eye-sight 
should be excellent, they should pass a 
psychological assessment, and they should not have 
been rejected in the previo us two years. the figure 
shows that the final decision whether a person can 
become a helicopter pilot (data element a) is 
dependent either on the data elements (b) and (c), or on (f), or on (d). in reality, these different 
combinations reflect the different conditions under 
which certain operations can be executed. in case 
there is a result of a recent suitability test (d), this information directly determines the outcome (a). 
also, in case the value for the quality of eye-sight of 
the applicant is bad (f) this directly leads to a rejection (a). in the other cases, the results of both a 
psychological (b) and a physi cal test (c) are needed. 
one level lower, the physical  test (c) consists of the 
results for the quality of reflexes (e) and for the 
quality of eye-sight (f). 
 
 
figure 2: the product data model which represents the 
decision on the suitability to become a helicopter pilot. 
the meaning of the elements is as follows: (a) decision for 
suitability to become a helic opter pilot, (b) psychological 
fitness, (c) physical fitness, (d) latest result of suitability 
test in the previous two years, (e) quality of reflexes, (f) quality of eye-sight. 
the data elements  of the pdm are depicted as 
circles. the operations  on these data elements are 
represented by arcs. the arcs are 'knotted' together 
when the data elements are all needed to execute the 
particular operation. compar e, for instance, the arcs 
from (b) and (c) leading to (a) on the one hand, to 
the arc from (d) leading to (a) on the other in  figure 
2. in the latter case only one data element is 
needed to determine the outcome of (a), while in the 
case of (b) and (c) both elements are needed to 
produce (a). 
 the helicopter pilot example, which we discussed 
here, is very small. typically, in industry the pdms 
are much larger; possibly containing hundreds of data elements. based on such a pdm, a workflow 
process model can be obtained by grouping data 
elements and operations into activities (see also reijers, 2003; reijers & vanderfeesten, 2004), as 
will be illustrated in the next section.  
  iceis 2007 - international conference on enterprise information systems
42 
3.3 the gak case 
in this section we introduce a case from industry as a 
motivating example. this example is used in the 
assessment of the two contemporary case handling systems,  as described in section 4. the subject of 
the case study is the gak agency (currently known 
as uwv) which is responsible for awarding unemployment benefits in the netherlands. the 
process in question deals with the decision that the 
gak has to make on whether or not to grant such benefits once a request has been received. the 
typical factors that should be taken into account are 
the reason for the app licant to have become 
unemployed, the length of the period that the 
previous job was held, and the coverage regulations. 
the pdm for the gak case is shown in figure 3. a detailed description of the case and of the data 
elements can be found in (reijers, 2003). the next 
section describes how we have assessed the process of design in two contemporary case handling 
systems based on the gak pdm. for this 
assessment we have used the process model as it was 
manually derived from the pdm in earlier work. 
because of space limitations we can not show the resulting process model here. however, it can be 
found in (reijers, 2003). 
 
figure 3: the pdm for the gak case. 
designing a process model from a pdm mainly comes down to grouping data elements and 
operations in a smart way, considering several context constraints and requirements on the structure 
(e.g. the processing order should be determined such 
that the expected number of additional work at any point in the process is minimized for the average 
case). as an illustration, we have indicitated in figure 3 the part of the gak pdm that corresponds 
to activity g in the resulting process model (i.e. g 
contains the data elements id10, id13, id14, id34, 
id36, id37, id41, id42 , and  id47  and their 
corresponding operations.) 
4 assessment 
as was explained in the introduction, workflow 
management systems focus on the control-flow perspective, while case handling systems are more 
data-driven. because of their focus on data, case 
handling systems may provide support for pbwd. in order to investigate their possibilities and 
potential support for pbwd, we have selected two 
case handling systems:  
• flower  is a case handling system developed 
by pallas athena (pallas athena, 2006). it 
consists of a number of  components, of which 
flower studio is the graphical design 
environment. flower studio is used at build-
time to define case definitions consisting of 
activities, precedences, data objects, roles and 
forms.  
• activity manager  by bpi is an "add-on" that can 
be used in combination with a workflow 
management system, such as cosa and staffware (kaan, reijers & van der molen, 
2006). for demonstration purposes also a stand-
alone version can be used. in this research we used this stand-alone version because it is easier 
to manage. activity manager combines the 
structure and control of a workflow management system with the flexibility of case 
handling. it imports the process model from the 
workflow management system via a database and provides the means to further define the 
activities in this model by elaborating the 
operations. 
 
when considering the pbwd method in detail, we 
think a system that supports this method in a proper 
way should at least provide for the following: 
• a means to define and view the product 
structure. 
• a way to define and view the content of each 
activity (in terms of data elements and their relationships). 
• proper support for the process of designing a 
process model based on the pdm (for example, it should give the designer some freedom to an evaluation of case handling systems for product based workflow design 
43 
play around with different designs and 
groupings of operations and data elements). 
 
in (vanderfeesten, van der aalst & reijers, 2006) we have elaborated in detail on the way in which 
pbwd can be used to design a process model in 
flower and activity manager, describing all steps taken to translate the pdm into the process model. it 
is illustrated with a series of screenshots for both 
systems (vanderfeesten, van der aalst & reijers, 2006). the focus in both assessments is on the 
process of designing and defining the process model 
based on the pdm
i. in general, the following steps 
should be taken and supported by the system to get 
from a pdm to a process model: 
1. the pdm must be translated to the specific 
system. this means that e ither the data elements 
or the operations (or both) must be mapped on 
concepts in the system and subsequently be specified. 
2. the activities must be defined as groups of data 
elements and/or operations. there must be an 
easy way to transfer an operation or data 
element from one activity to another, as a way of exploring various desi gns. also, the correct 
order of activities must be defined, because 
precedence relationships should be respected. 
3. the process model must be finalized with for 
instance information on resources, conditions, 
or activity duration. 
 
 
figure 4: screenshot of the design environment of activity 
manager. note that on the left-hand side all activities are 
summarized and their content is shown. for example, the 
content of activity g corresponds to the data elements and 
operations indicated in figure 2. the data elements are 
represented by their identifiers (e.g. "id29") and operations 
are represented by tuples (e.g. (id1,{id25, id37})) with one 
output element and a set of on e or more input elements. 
for a more elaborate explanation we refer to 
(vanderfeesten, van der aalst & reijers, 2006).  from our evaluation we can conclude that it was not 
at all straightforward to follow these general steps in 
both systemsii. therefore, we feel the systems do not 
match all requirements that were stated above. for example, they both did not provide a way to 
represent the product structure. in both systems it is 
possible to somehow define data elements (in flower this was easier than in activity manager), 
but the concept of operations and their dependencies 
is less clear to capture with these systems. since operations are the main building blocks for 
activities, the lack of a clear notion of operations in 
the tool might hamper the design process. moreover, activity manager does not provide the 
means to start with defining the data elements. first, 
the order of activities has to be established in this system. this means that there is less freedom in 
grouping operations to activities. on the other hand, 
it was possible to map all concepts from the standard workflow terminology (i .e. process, activity, 
operation, and data element) to concepts in activity 
manager. in principle, this mapping should allow for 
a smoother embedding of pbwd within the activity 
manager. in comparison, flower could not map all workflow 
concepts (there was no equivalent for an operation), 
but it was possible to easily define, view and change the content of an activity. a more extensive 
discussion on these two tools can be found in 
(vanderfeesten, van der aalst & reijers, 2006). 
5 conclusion 
in this paper we have investigated to what extent 
current case handling system s are able to support 
pbwd by evaluating flower and activity manager. both systems still put some emphasis on 
the control-flow of the pr ocess, despite of their 
innovative focus on data. however, in flower we really can start reasoning from the pdm (i.e. by 
starting with the definition of data elements and their 
dependencies). this provides the opportunity to really focus on the grouping  of data elements instead 
of on the definition of activities directly. by putting 
groups of data elements on one form and playing 
around with these combinations it is possible to 
compose activities based on the data and operations of the pdm instead of first defining the activities 
and afterwards determining what should be done in 
these activities. 
by contrast, bpi's activity manager is 
considerably more process driven than data driven, 
as it starts from the definition of a process model. of iceis 2007 - international conference on enterprise information systems
44 
course, this follows from the fact that activity 
manager is "added on" to a workflow system, which 
only allows activity manager to further specify the 
process structure already give n. because of this, it is 
not possible to directly design a process model 
which is purely based on a pdm. the user needs to 
have a good understanding of how the activities are organized and what the content of each activity 
should be. this means that  the process of designing 
a process model based on the pdm should then be done outside the tool, in such a way that the result 
(i.e. the activities including their operations) can be 
implemented in the system. this violates our third requirement, i.e. that the tool itself should provide 
some support in the design process. taking this 
design perspective we can remark that flower offered the best assistance in creating a process 
model based on the product structure. 
looking at the evaluation from a conceptual 
viewpoint, we can conclude that both systems do not 
(yet) provide a facility to display the pdm as a 
hierarchical structure. therefore, this would be a 
nice extension in order to use these systems as 
pbwd support tools. however, all concepts of the pdm and pbwd could be mapped to concepts in 
activity manager, while flower is able to 
represent all concepts ex cept for the operations. 
this evaluation shows th at current case handling 
systems, and thus current workflow technology in 
general, are not yet completely ready for pbwd. the research challenge now is to develop good 
support for applying this method in practice. the 
first contribution of this assessment is an overview of how existing systems can be improved to support 
pbwd. in close cooperatio n with suppliers of case 
handling systems we will further investigate the opportunities of using their systems. secondly, we 
have learned some lessons for the development of 
specific tools for pbwd support. it seems to be important to (i) display and edit the pdm in the tool, 
and (ii) to somehow circumvent direct relations from 
activities to data elements. finally, future work will 
focus on the discovery and collection of data 
elements and their relationships (i.e. the derivation of a pdm). at this point in time, the prom import 
framework for process mining (van der aalst et al, 
2003) already supports mining based on data elements (guenther & van der aalst, 2006). on a 
general level, this research shows that current 
workflow technology is not neutral towards the kind 
of process design. even data-focused technology, 
such as case handling syst ems, still needs some 
control-flow information right from the start of the design process. acknowledgements 
this research is supported by the technology foundation stw, applied science division of nwo 
and the technology programme of the dutch 
ministry of economic affairs. we gratefully acknowledge the technical assistance from pallas 
athena and gyata bpi. 
references 
aalst, w.m.p. van der, 1999. on the automatic generation 
of workflow processes based on product structures. 
computers in industry , 39, pp. 97-111. 
aalst, w.m.p. van der,  berens, p.j.s., 2001. beyond 
workflow management: product-driven case handling . 
in ellis, s., rodden, t., and zigurs, i., editors, 
international acm siggroup conference on 
supporting group work (group 2001), pp. 42-51, 
acm press, new york. 
aalst, w.m.p. van der,  hee, k.m. van, 2002. workflow 
management: models, me thods, and systems . mit 
press, cambridge, ma. 
aalst, w.m.p. van der, ho fstede, a.h.m. ter, 2005. 
yawl: yet another workflow language. 
information systems , 30 (4), pp. 245-275. 
aalst, w.m.p. van der, jabl onski, s., 2000. dealing with 
workflow change: identification of issues and 
solutions. international journal of computer systems, 
science, and engineering , 15 (5), pp. 267-276. 
aalst, w.m.p. van der, donge n, b.f. van, herbst, j., 
maruster, l., schimm, g., and weijters, a.j.j.m., 
2003. workflow mining: a survey of issues and 
approaches. data and knowledge engineering , 47 (2), 
pp. 237-267. 
aalst, w.m.p. van der, weske, m., grünbauer, d., 2005. 
case handling: a new para digm for business process 
support. data and knowledge engineering , 53 (2), pp. 
129- 162. 
adams, m., hofstede, a.h.m. ter, edmond, d., and aalst, 
w.m.p. van der, 2005. facilitating flexibility and 
dynamic exception handling in workflows . in: belo, 
o., eder, j., pastor, o., and falcao e cunha, j., editors, 
proceedings of the caise'05 forum , pp. 45-50, 
feup, porto, portugal. 
agostini, a., de mi chelis, g., 2000. improving flexibility 
of workflow managment systems.  in: aalst, w.m.p. 
van der, desel, j., and oberweis, a., editors, business 
process management: models, techniques and 
empirical studies , volume 1806 of lecture notes in 
computer science, pp. 218-234, springer-verlag, berlin. 
casati, f., ceri, s., pernic i, b., and pozzi, g., 1996. 
workflow evolution. in: proceedings of er '96 , pp. 
438-455, cottubus, germany. an evaluation of case handling systems for product based workflow design 
45 
davenport, t.h., 1993. process innovation: reengineering 
work through information technology . harvard 
business school pr ess, boston. 
dumas, m., aalst, w.m.p. van der, hofstede, a.h.m. ter, 
2005. process-aware information systems: bridging 
people and software through process technology . 
wiley & sons. 
ellis, c.a., keddara, k., 2000. a workflow change is a 
worklfow . in: aalst, w.m.p. van der, desel, j., and 
oberweis, a., editors, business process management: 
models, techniques and empirical studies , volume 
1806 of lecture noted in computer science, pp. 201-
217, springer-verlag, berlin. 
guenther, c.w., aalst, w.m.p. van der, 2006. mining 
activity clusters from low-level event logs . bpm 
report, http://is.tm.tue.nl/staff/wvdaalst/bpmcenter/-
reports.htm . 
gyata bpi, 2006. gyata bp i website. http://www.-
gyatabpi.com, retrieved on november 15, 2006. 
hammer, m., champy, j., 1993. reengineering the 
corporation . nicolas brealey publishing, london. 
herrmann, t., hoffma nn, m., loser, k. u., and moysich, 
k., 2000. semistructured models are surprisingly 
useful for user-centered design . in: de michelis, g., 
giboin, a. karsenty, l., and dieng, r., editors, 
designing cooperative systems  (coop 2000), pp. 159-
174, ios press,  amsterdam. 
kaan, k., reijers, h.a., and molen, p. van der, 2006. 
introducing case mangagement: opening workflow 
management's black box . in s. dustdar, j.l. fiadeiro, 
and a. sheth, editors, proceedings of the 4th 
international conference business process 
management (bpm 2006 ), volume 4102 of lecture 
notes in computer science, pp. 358-367, springer 
verlag, berlin, 2006. 
klein, m., dellarocas, c., and bernstein, a., editors, 1998. 
proceedings of the cscw-98 workshop towards 
adaptive workflow systems , seattle, washington. 
klein, m., dellarocas, c., and bernstein, a., editors, 2000. 
adaptive workflow systems, volume 9 of special 
issue of the journal of computer supported 
cooperative work . 
orlicky, j.a., 1972. structuring the bill of materials for 
mrp . production and inventory management, pp. 19-
42. 
pallas athena, 2006. pall as athena website. 
http://www.pallas-athena.co m, retrieved on november 
15, 2006. 
platier, e.a.h., 1996. a logistical view on business 
processes: bpr and wfm concepts  (in dutch). phd 
thesis, eindhoven university of technology, 
eindhoven, the netherlands. 
reichert, m., dadam, p ., 1998. adeptflex: supporting 
dynamic changes of workflow without loosing control. 
journal of intelligent information systems , 10 (2), pp. 
93-129. 
reijers, h.a., 2003. design and control of workflow 
processes: business process managment for the 
service industry , volume 2617 of lecture notes in 
computers science, springer-verlag, berlin. reijers, h.a., limam, s., a nd aalst, w.m.p. van der, 
2003. product-based workflow design. journal of 
management information systems , 20 (1), pp. 229-
262. 
reijers, h.a., vanderfe esten, i.t.p., 2004. cohesion and 
coupling metrics for wo rkflow process design . in: 
desel, j., pernici, b., and weske, m., editors, 
international conference on business process 
management  (bpm 2004), volume 3080 of lecture 
notes in computer scie nce, pp. 290-305, springer-
verlag, berlin. 
rinderle, s., reichert, m., and dadam, p., 2004. 
correctness criteria for dynamic changes in workflow systems: a survey. data and knowledge engineering , 
50 (1), pp. 9-34. 
staffware, 2003. staffware process suite version 2 – 
white paper . staffware plc, maidenhead, uk. 
sun, s.x., zhao, j.l., 2004. a data flow approach to 
workflow design . in: proceedings of the 14
th 
workshop on information technology and systems 
(wits'04), pp. 80-85. 
vanderfeesten, i., aalst, w.m. p. van der, and reijers, 
h.a., 2005. modelling a product based workflow 
system in cpn tools . in: jensen, k., editor, 
proceedings of the 6th workshop on the practical use of 
coloured petri nets and cpn tools (cpn 2005), 
volume 576 of daimi, pp. 99-118, aarhus, denmark. 
vanderfeesten, i., reijers, h. a., and aalst,  w.m.p. van 
der, 2006. product based workflow design with case 
handling systems . beta working paper, no. 189, 
technische universiteit eindhoven, eindhoven. 
available from http:/ /www.tm.tue.nl/beta/ . 
weske, m., 2001. formal foundation and conceptual 
design of dynamic adaptations in a workflow 
management system . in: sprague, r., editor, 
proceedings of the thirty-fourth annual hawaii 
international conference on systems science (hicss-
34). ieee computer society press, los alamitos, 
california. 
 
 
 
 
 
 
  
 
 
                                                           
i note that the process of desi gning and defining a process model 
based on a pdm is different from the common way in practice to 
design a process model. instead of using a subjective workshop setting (i.e. interviews, observations, etc.) to discover the process 
model, a more objective approach is used starting from the 
product structure.  
ii a detailed description of the tran slation of the pdm to a process 
model in both systems can be f ound in (vanderfeesten, van der 
aalst & reijers, 2006), including two series of screenshots for the two systems. iceis 2007 - international conference on enterprise information systems
46