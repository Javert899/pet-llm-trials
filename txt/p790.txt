supporting process mining workows with
rapidprom
r.s. mans, w.m.p. van der aalst, h.m.w. verbeek
department of mathematics and computer science, eindhoven university of
technology, p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
fr.s.mans,w.m.p.v.d.aalst,h.m.w.verbeek g@tue.nl
abstract. process mining is gaining more and more attention both in
industry and practice. as such, the number of process mining products is
steadily increasing. however, none of these products allow for composing
and executing analysis workows consisting of multiple process mining
algorithms. as a result, the analyst needs to perform repetitive process
mining tasks manually and scientic process experiments are extremely
labor intensive.
to this end, we have rapidminer 5, which allows for the denition and ex-
ecution of analysis workows, connected with the process mining frame-
work prom 6. as such any discovery, conformance, or extension algo-
rithm of prom can be used within a rapidminer analysis process thus
supporting process mining workows.
1 introduction
during last decade, process mining has become a mature technique for analyzing
all kinds of business processes based on a so-called event log [3]. not surpris-
ingly, the number of process mining products has increased. however, for all
products, the analysis steps need to be done in an ad-hoc fashion thereby losing
the overview of all the steps that are done and their order. in other words, within
the process mining domain there is currently no support for the construction and
execution of a workow which describes all analysis steps and their order .
within the scientic workow domain, special kinds of workow manage-
ment systems exist which are designed to compose and execute a series of com-
putational or data manipulation steps (e.g. rapidminer, knime, and taverna).
when applying scientic workow concepts in the process mining eld, several
advantages can be realized. for example, comparable process mining analyses
can be repeated by just one-click of a button and scientic experiments can be ex-
ecuted in an automated fashion. furthermore, within several scientic workow
management systems many data and machine learning techniques are readily
available. as such, dierent techniques can be easily combined for an end-to-end
analysis.
to this end, we have integrated the process mining framework prom 6 [4]
within the scientic workow management system rapidminer 5. that is, pro-
cess mining functionality is added as an extension to rapidminer. in this paper,
this extension, called rapidprom , is discussed in detail.
copyright c2014 for this paper by its authors. copying permitted for private and academic
purposes.2
2 dening and executing process mining workows
we rst provide a general introduction to rapidminer. then we present the
extension which supports process mining analysis workows.
rapidminer is a software product allowing for advanced analytics, i.e. sophis-
ticated quantitative methods (for example, statistics, descriptive and predictive
data mining, simulation and optimization) to produce insights that traditional
approaches to business intelligence (bi) are unlikely to discover [2]. where bi fo-
cusses on querying and reporting combined with simple visualization techniques
showing dashboards and scorecards, advanced analytics aims at automatically
nding hidden patterns too complex for humans to nd. moreover, bi looks back
at the past whereas advanced analytics also aims to provide predictions about
the future. in addition, rapidminer provides a gui to design and execute an
analytical pipeline. after execution the results can be inspected.
prom
operators
fig. 1: a workow in which several prom 6 plug-ins are executed.3
table 1: for each subfolder a brief description is provided and some example operators
are mentioned.
subfolder description example operators
import prom objects are imported from le (e.g. an
event log or a petri net).read log file and read
pnml file .
mining a process mining algorithm is executed. the
algorithms may discover knowledge regarding
the control-ow (e.g. a petri net), organiza-
tional (e.g. a social network), and performance
perspectives (e.g. a dotted chart).ilp miner ,passage miner ,
and inductive miner .
analysis typically an analysis is performed on a pro-
cess mining result. for example, timing infor-
mation is projected on a petri net.replay a log on petri
net for conformance
analysis and repair
model .
export a process mining result is saved to disk. export log and pnml
export .
filtering a lter is applied to an event log. for example,
an articial start and end event is added to
each trace.add artificial start
and end event filter
and add noise log filter
and convert process tree
into a petri net .
conversion one type of process mining result is converted
into another type of process mining result.convert process tree
into a petri net .
looking at advanced analytics in general, one drawback is that processes are
not made explicit. as a result, it is useful to extend rapidminer with process
mining capabilities. in the sequel, we will focus on the process mining capabilities
that are available within the extension. in figure 1 a screenshot of rapidminer
is provided thereby showing a process mining analysis within rapidminer.
first, within the \operators" panel at the left side all the operators that
are available can be selected. there is a special \prom6" folder in which all the
process mining operators can be found. a description can be found in table 1.
most of the operators correspond to existing prom plug-ins.
in the \process" panel in figure 1 some of the available operators can be seen
together with a visualization of the obtained results. first an event log is read
(read log operator). afterwards, a petri net is discovered using the ilp miner
(ilp miner operator) and a dotted chart is created showing events in a graphical
way such that a \helicopter overview" of the process is obtained ( analyse using
dotted chart operator). finally, timing information is projected on the petri
net so that bottlenecks can be identied within the process ( replay a log on
petri net for performance / conformance analysis operator).
a wide variety of workows can be made. some examples are:
{ by using the loop parameters operator it is possible to iterate over a se-
lection of operators for a set of parameter combinations. for example, the
ilp miner is repeated for each dierent option of its \variant" parameter.4
{ for each item in a collection of objects, the same workow can be executed.
for example, the guide tree miner operator provides a collection of logs.
subsequently, for each log the corresponding petri net can be discovered.
{ within rapidminer many data mining algorithms are available which can
be used after converting the log into a feature set. for example, using the
case data extractor operator the log is converted into a feature set and
subsequently a decision tree is obtained using the decision tree operator.
{ within rapidminer also many statistical techniques are available. these can
be used for evaluation of process mining experiments. for example, by using
theloop attributes operator and the replay a log on petri net for
performance / conformance analysis operator, for a varying number of
maximal states, the tness between a log and a petri net can be calculated.
afterwards, using the linear regression operator, the strength of the re-
lationship between the tness and the number of states can be determined.
3 architecture and implementation
in this section, we elaborate on the architecture of prom 6 and rapidminer and
how both are connected. furthermore, we focus on some implementation details.
to this end, in figure 2 an architectural overview of rapidminer and prom
6 is given and how they are connected. first, the most important part of prom 6
is the framework which roughly spoken contains all the necessary functionalities
in order that process mining algorithms can be executed. the algorithms itself
are provided by means of packages . a package may contain one or more plug-ins
and a collection of provided objects that are needed or produced by the plug-
in. furthermore, a plug-in needs a context to run in. depending on the type
of context, the plug-in communicates in a dierent way with a user. here, it is
important that there is a clear separation between the actual process mining
algorithm and the visualization of its results. also, there is a clear separation
between the plug-in and the parameter settings it needs. at the moment, two
types of contexts are available: a gui-aware context, called uitopia, and a
headless context. so, a plug-in that is running in the uitopia context may
communicate with the user through dialogs and/or wizards, whereas for a plug-
in running in a headless context this is not obliged. so, the latter plug-ins can be
ran using a client . in case such a plug-in requires parameter settings, these can
be provided via its own input parameter object. moreover, for the object that
has been obtained, a visualization can be obtained by running the associated
visualization plug-in.
rapidminerprom
frameworkextensions extensions
files
packagesclientprom 6
extension
usercontext
fig. 2: architectural overview of prom and rapidminer and how they are connected.5
the headless context of prom 6 is used in order that prom plug-ins can be
executed within rapidminer. as can be seen in figure 2, rapidminer consists of
a core in order that operators can be executed. new operators can be added by
means of an extension together with the objects that are needed by the operators
[1]. in order to do so, for each operator the algorithm needs to be dened and
which objects it uses and produces. furthermore, for each object it needs to be
dened how it is visualized. in order to run prom 6 plug-ins a special operator
is created for each plug-in. for a provided object that needs to be visualized,
simply the associated prom visualizer is called. for example, regarding figure 1,
for the ilp miner operator the ilp miner plug-in of prom is called and for the
provided petri net the associated visualize petri net visualizer is called.
currently, over 40 operators are available covering a selection of the plug-ins
that are available within prom 6. in case a plug-in runs in a headless context it
can easily be added to the prom extension. in order to speed up this process,
we have developed a specic prom plugin, called rapidminer code generator
plug-in , that generates code for adding the plug-in.
the prom extension has been tested for many scenarios. furthermore, stu-
dents following the \advanced process mining" course at tu/e are using the
software in order to do the assignments. in the end, we want to achieve that the
extension becomes robust and mature in order that it can be successfully used
by many people both from industry and science. currently, the extension has
been downloaded over 850 times at the rapidminer marketplace1.
4 links
for the prom extension of rapidminer, a dedicated website is available: http:
//www.rapidprom.org . amongst others, this website contains instructions for
installing the extension, instructions for using it, it describes several use cases,
and several screencasts.
acknowledgements
this research is supported by the dutch technology foundation stw, applied
science division of nwo and the technology program of the ministry of eco-
nomic aairs.
references
1.how to extend rapidminer 5 . rapid-i, 2012.
2. gartner. magic quadrant for advanced analytics platforms. 2014.
3. w.m.p. van der aalst. process mining: discovery, conformance and enhancement
of business processes . springer-verlag, berlin, 2011.
4. h. m. w. verbeek, j. c. a. m. buijs, b. f. van dongen, and w. m. p. van der
aalst. prom 6: the process mining toolkit. in proc. of bpm demonstration track
2010, volume 615, pages 34{39. ceur-ws.org, 2010.
1http://marketplace.rapid-i.com/