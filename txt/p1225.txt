realizing a digital twin of an organization
using action-oriented process mining
gyunam park and wil m.p. van der aalst
process and data science group (pads)
department of computer science, rwth aachen university ,aachen ,germany
fgnpark, wvdaalstg@pads.rwth-aachen.de
abstract —a digital twin of an organization (dto) is a mir-
rored representation of an organization, aiming to improve the
business process of the organization by providing a transparent
view over the process and automating management actions to
deal with existing and potential risks. unlike wide applications
of digital twins to product design and predictive maintenance, no
concrete realizations of dtos for business process improvement
have been studied. in this work, we aim to realize dtos
using action-oriented process mining, a collection of techniques
to evaluate violations of constraints and produce the required
actions . to this end, we suggest a digital twin interface model as
a transparent representation of an organization describing the
current state of business processes and possible conﬁgurations
in underlying information systems. by interacting with the
representation, process analysts can elicit constraints and actions
that will be continuously monitored and triggered by an action
engine to improve business processes. we have implemented a
web service to support it and evaluated the feasibility of the
proposed approach by conducting a case study using an artiﬁcial
information system supporting an order handling process. key-
words —digital twin, action-oriented process mining, process
improvement, hybrid intelligence, action patterns
i . i n t r o d u c t i o n
organizations are required to continuously improve their
business processes to react to dynamically changing situations
in business environments [1]. while the necessity of continuous
process improvement is hardly questioned, it is non-trivial to
effectively analyze business processes and identify improve-
ment points due to the complexity of business processes
and information systems supporting them [2]. for instance,
a standard business process of an organization supported by an
sap erp system (e.g., order-to-cash and procure-to-pay) may
contain 80,000 variants of process instances, making analysis
of the process challenging.
a digital twin is a digitally mirrored, transparent represen-
tation of a complex real-life object or process [3]. a digital
twin of an organization (dto) is a digital twin extended
to the whole organization where such objects and processes
belong [4]. dtos are used to facilitate analysis of business
processes in the organization and continuously improve the
process with the automated execution of management actions.
despite its tremendous beneﬁts for continuous process improve-
ment, a concrete realization and implementation of dtos are
missing both in research and in practice [5].
in this paper, we aim to realize dtos using action-oriented
process mining, a collection of techniques to continuously
monitor violations of constraints in operational processes andautomatically trigger actions based on the monitoring results
in such a way that they update the conﬁguration of information
systems [6]. if delays (are expected to) happen for approving
orders (i.e., constraint), the approval can be temporarily skipped
for upcoming orders by adjusting the system conﬁguration (i.e.,
action). the techniques include conformance checking [7] and
predictive process monitoring [8].
to that end, we suggest a digital twin interface model
as a representation of a business process and its supporting
information systems in an organization. the representation
provides transparent views of the current state of the process
(e.g., a bottleneck in an activity) and possible conﬁgurations
in the system (e.g., skipping the activity). interacting with it,
process analysts can elicit constraints by analyzing the state
of business processes and deﬁne actions based on the possible
conﬁgurations. subsequently, an action engine continuously
monitors the constraints and automates corresponding actions.
figure 1: an overview of the approach to realize dtos based on action-
oriented process mining
fig. 1 describes the realization more in detail. a digital twin
interface model replicates business processes supported by in-
formation systems, using object-centric petri nets (ocpn) [9]
as formal representations. event data, recorded by the system
during the execution of the process (e.g., object-centric event
log (ocel) [10], are used to construct a digital twin interface
model along with some expert knowledge. an operational
view describes the current status of the process, being updated
using streaming event data. it describes which objects reside
in which phase of the process (e.g., o1and o2waiting for
send notiﬁcation ) and various diagnostics (e.g., the average
waiting time for two days is 2 hours). a control view speciﬁes
the current conﬁguration of the system. for instance, valve1is currently set to 200. based on the operational and control
view, process analysts can deﬁne action patterns specifying the
common pattern between constraints and actions. using the
pattern, an action engine monitors the process and produces
necessary actions that update the conﬁguration of the system.
in order to evaluate the feasibility of realizing dtos, we
have implemented a web application to support the digital twin
interface model and action engine. in addition, we have tested
the implementation with an artiﬁcial information system that
supports an order handling process. the details and sources
of the implementation and the information system are publicly
available via https://github.com/gyunamister/dtween.
the remainder is organized as follows. we discuss the
related work in sec. ii. next, we present the preliminaries
in sec. iii. in sec. iv, we deﬁne a digital twin interface
model along with its operational and control views. next,
sec. v presents action patterns and an action engine. afterward,
sec. vi introduces the implementation of the web application
and sec. vii provides a case study based on a simulated
business process. finally, sec. viii concludes the paper.
i i . r e l at e d wo r k
a. digital twin
a digital twin is a digital replication of a real system, e.g., a
production process or even a whole organization. conceptual
frameworks of various digital twins have been widely studied.
in [11], a conceptual framework for product design, product
manufacturing, and product service has been suggested, while
[12] providing a conceptual model of digital twins for smart
manufacturing service. [4] and [5] propose conceptual frame-
works of dtos by extending a conventional digital twin in a
manufacturing domain to an entire organization.
contrary to various conceptualizations of digital twins in
extensive ﬁelds, concrete realizations only exist for product
designs, product developments, and productions, which focus
on digitalizing physical assets using iot sensors [4]. for in-
stance, nasa applies the digital twin in developing vehicles to
predict the future status of vehicles using simulation models [3].
however, applications of dtos for continuous improvements
of business processes have not been studied. in this work,
we realize dtos aiming at improving business processes by
providing transparent views to the process and automating
necessary actions.
b. action-oriented process mining
we deploy techniques for action-oriented process mining
to realize dtos, including 1) ones for monitoring violations
of constraints and 2) ones for triggering actions based on
monitoring results. first, extensive literature exists for mon-
itoring techniques [7]. [13] suggests a technique to monitor
(temporarily) satisﬁed, (temporarily) violated constraints based
on linear temporal logic (ltl) and colored automata. in [14],
constraints are formulated into petri net patterns, which are
then evaluated by alignment-based conformance checking.
predictive monitoring techniques enable violations to be
detected before they actually happen [8]. in [15], a scenario-
based predictive approach is proposed to predict the futurebehavior of a business process by deploying system dynamics.
recently, techniques based on deep neural networks have been
widely studied, e.g., [16] suggests a predictive method based
on long-short term memory (lstm) networks.
next, several techniques have been proposed to automatically
generate speciﬁc types of actions to improve business processes.
in [17], the resource allocation is optimized by predicting the
risk of process instances. in [18], a prescriptive alarm system
has been proposed to generate alarms by computing trade-offs
among different interventions.
instead of focusing on a speciﬁc type of action, [19] provides
support to turn diagnostics into extensive actions. it generates
signals by analyzing event data and executes different actions
corresponding to the signals to source systems. in [6], a more
systematic approach is proposed to transform the process-
centric diagnostics into management actions.
i i i . p r e l i m i n a r i e s
in this work, we use object-centric petri nets as a core formal
representation of a digital twin interface model. first, a petri
net is a directed graph having places and transitions as nodes,
and ﬂow relations as edges. a labeled petri net is a petri net
where the transitions are labeled.
deﬁnition 1 (labeled petri net) .letuactbe the universe of
activity names. a labeled petri net is a tuple n=(p; t; f; l )
withpthe set of places, tthe set of transitions, p\t=;,
f(pt)[(tp)the ﬂow relation, and l2t6!uact
a labeling function.
a marking mn2b(p)represents the state of a petri net as
a multiset of places. a transition t2tis enabled in marking
mnif its input places contain at least one token, and it may
ﬁreby removing one token from each of the input places and
producing one token for each of the output places.
in an ocpn, each place is associated with an object type,
enabling it to represent interactions among different object
types. moreover, variable arcs are used to represent the con-
sumption/production of a variable amount of tokens in one
step.
figure 2: an example of object-centric petri nets
deﬁnition 2 (object-centric petri net) .letuotbe the
universe of object types. an object-centric petri net is a tuple
on=(n;pt; fvar)where n=(p; t; f; l )is a labeled petri net,
pt2p!uotmaps places onto object types, and fvarf
is the subset of variable arcs.
fig. 2 shows an ocpn: p=fo1; : : : ; o 5; i1; : : : ; i 5g,
t=ft1; t2; : : : ; t 6g,f=f(o1; t1);(i1; t1);(o2; t2); : : :g,l(t1)
=place order ,l(t2)=send invoice , etc., pt(o1)=order ,
pt(i1)=item, etc., and fvar=f(i1; t1);(t1; i2);(i4; t6);(t6; i5
)g, where order; item2uot.a marking represents the state of an ocpn.
deﬁnition 3 (marking) .letuoibe the universe of object
identiﬁers. let on=(n;pt; fvar)be an object-centric petri
net, where n=(p; t; f; l ).otyp2uoi!uotassigns object
types to object identiﬁers. qon=f(p;oi)2puoij
otyp(oi)=pt(p)gis the set of possible tokens. a marking m
ofon is a multiset of tokens, i.e., m2b(qon).
for instance, marking m1=[(o1;0092) ;(i1;10085) ;(i1;100
86);(i1;10087)] denotes four tokens among which place o1
has one token referring to object 0092 andi1has three tokens
referring to objects 10085 ,10086 , and 10087 .
the concept of binding is used to explain the semantics of an
ocpn. a binding describes the execution of a transition con-
suming objects from its input places and producing objects for
its output places. a binding (t; b)is a tuple of transition tand
function bmapping the object types of the surrounding places
to sets of object identiﬁers. for instance, (t1; b1)describes the
execution of transition t1withb1where b1(order )=f0092g
andb1(item )=f10085 ;10086 ;10087g, where order anditem
are the object types of the surrounding places of t1(i.e.,
o1; i1; o2; i2).
a binding (t; b)isenabled in marking mif all the objects
speciﬁed by bexist in the input places of t. for instance, (t1; b1)
is enabled in marking m1since 0092, 10085, 10086, and 10087
exist in its input places, i.e., o1; i1.
ift1ﬁres with (t1; b1),0092 is removed from o1
and added to o2. besides, 10085 ,10086 , and 10087 are
removed from i1and added to i2, resulting in new marking
m2=[(o2;0092) ;(i2;10085) ;(i2;10086) ;(i2;10087)] . for
more details of ocpns, we refer readers to [9].
i v. d i g i ta l tw i n in t e r f a c e mo d e l
in this section, we ﬁrst introduce a digital twin interface
model (dt-im) with its core components. next, we explain
an operational view of the dt-im describing the current states
of business processes. afterward, we introduce a control view
of the dt-im depicting the current conﬁgurations and possible
actions deﬁned over target information systems.
a dt-im represents process behaviors using ocpns as for-
mal representations. moreover, it describes the routing/resource
allocation rules of the process using guards . a guard is
a formula deﬁned over attributes using relational operators
(,,=) as well as logical operators such as conjunction ( ^),
disjunction (_), and negation (:). associated with a transition,
a guard extends the semantics of ocpns by allowing the
transition to ﬁre not only if the transition is enabled in marking
m, but also if the guard evaluates to true. we denote with
f(x)the set of such formulas deﬁned over a set xof attributes.
valves are conﬁguration and options in information systems and
can be used in guards of the ocpn (e.g., minimum threshold
to send notiﬁcations).
deﬁnition 4 (digital twin interface model (dt-im)) .let
uattr be the universe of attribute names. a digital twin
interface model, denoted as dt, is a tuple (on; v; g )where
figure 3: (a) a dt-im replicating an order handling process (b) an operational
state of the dt-im (c) a conﬁguration of the dt-im
on=(n; pt; f var)is an object-centric petri net, where
n= (p; t; f; l ),
vuattris a set of valves, and
g2t!(f(uattr)[ftrueg)associates transitions with
guards.
fig. 3(a) is an example of dt-ims ( dt 1) replicating the
information system that supports an order handling process.
the ocpn in fig. 3(a) describes the control ﬂow of the order
handling process where four different types of objects (i.e.,
order in red, item in blue, route in green, and resource in ivory)
interact. note that some arcs connecting p1and transactions,
e.g.,(p1; t2)and(t2; p1), are omitted for better representations.
dt 1uses valves, such as po-group ,po-price , and capacity to
deﬁne guards. for instance, g1describes a rule that a resource
from the sales department with the role of valve po-group
is eligible to perform the activity. g2describes that only
orders with a price higher than or equal to valve po-price
can be further processed if the current capacity is below valve
capacity .
conceptually, a guard g(t)may consist of two parts: one
formulating the resource allocation rules, gres(t), and the other
formulating the routing rules, grout(t), i.e., g(t)=gres(t)^
grout(t). in fig. 3(a), g1describes a resource allocation rule
forplace order , whereas g2describes the routing rule. the
resource allocation and routing rules form guard g(t1), i.e.,
g(t1)=g1^g2. in other words, t1, when enabled at marking
m, ﬁres only if the corresponding resource is from po-group ,
the price is higher than po-price , and the capacity of the process
is below capacity .
a. operational view of a digital twin interface model
using dt-ims, we can describe the current operational state
of business processes. the state is represented by marking
anddiagnostics . a marking represents which objects reside
in which parts of business processes using ocpns, whilediagnostics represent performance/compliance of business pro-
cesses, e.g., average waiting time for sending notiﬁcations in
the last two days ( avg-wt-sn-2d ). the diagnostics are computed
using data-driven, model-based analysis such as token-based
replay [20]. many diagnostics are available in a dt-im, but
we leave them deliberately vague, denoting dtto be the set
of all possible diagnostics of digital twin interface model dt.
deﬁnition 5 (operational state of a dt-im) .letuvalbe the
universe of attribute values. let uvmap=uattr9 u valbe the
set of all partial functions mapping a subset of attribute names
onto the corresponding values. let dt=(on; v; g )be a dt-
im, where on=(n;pt; fvar). an operational state of dt is
a tuple os=(m; ovmap; dmap )where
m2b(qon)is a marking of on,
ovmap2o!uvmap is an object value assignment
where o=foij(p; oi)2mg, and
dmap2dt9 r is a diagnostics assignment such
that, for any diag2dt,dmap (diag) =?ifdiag =2
dom(dmap ).
we denote 
dtto be the set of all possible states of dt.
fig. 3(b) describes state os 1=(m1; ovmap 1; dmap 1)wh-
erem1=[(p1;nick);(p4;o-56);(p5;i-97)]denotes resource
token nick, order token o-56 , and item token i-97 residing in
p1,p4andp5, respectively. besides, ovmap 1(nick)(group )=
sales ,ovmap 1(o-56)(price)=599 ,ovmap 1(i-97)(material )=
ipad, etc., and dmap (avg-wt-sn-2d )=2 (hour) where
avg-wt-sn-2d2dt1.
operational states of a dt-im change according to events
from information systems. here, we abstract from the mecha-
nism to update states based on events. in sec. vi, we introduce
an implementation based on replaying events on ocpns.
deﬁnition 6 (operation engine) .letdt=(on; v; g )be
a dt-im. an operation engine of dt,opdt, updates the
operational states of dt, i.e., opdt2
dt!
dt.
for instance, an event of send notiﬁcation about order o-56
updates os 1toos 2=(m2; ovmap 2; dmap 2)2
dt1where
m2=[(p1;nick);(p6;o-56);(p5;i-97)],ovmap 2(o-56)(notif-
ied)=true , and dmap 2(avg-wt-sn-2d )=2:5(hour) .
b. control view of a digital twin interface model
a dt-im is also used to describe controls of the information
system. the control is characterized by the value assignment of
valves, called conﬁguration . note that the conﬁguration does
not enforce the behaviors of business processes since deviations
may happen in business processes.
deﬁnition 7 (conﬁguration) .letdt=(on; v; g )be a dt-
im. a conﬁguration conf2v!uvalassigns values to
valves. dtis the set of all possible conﬁgurations of dt.
fig. 3(c) describes the conﬁguration, conf 12dt1where
conf 1(sn-price )=200 ,conf 1(caw-qty )=10 , etc.
deﬁnition 8 (action) .letdt=(on; v; g )be a dt-im. an
action act2dt!dtupdates the conﬁguration. adt
denotes the set of all possible actions deﬁned over dt.for instance, skip-sn2adt1increases valve sn-price
to inﬁnity so that no orders go through send notiﬁca-
tion, i.e., skip-sn (conf 1)=conf 2where conf 22dt1and
conf 2(sn-price )=1.
v. a c t i o n pat t e r n s a n d ac t i o n en g i n e s
using operational and control views of dt-ims, process
analysts can deﬁne action patterns . an action pattern describes
the automated execution of actions to recurring problems in
business processes. each pattern consists of a constraint that
speciﬁes an undesired situation and a corresponding action to
resolve the situation. a constraint is a formula deﬁned over
diagnostics using relational operators and logical operators.
deﬁnition 9 (action pattern) .letdt be a dt-im.
dt=f(dt)adtis the set of all possible action patterns
ofdt.
given dt 1in fig. 3, we can deﬁne action pattern
ap1that skips send-notiﬁcation if the average waiting time
for the activity in the last two days is higher than 2
hours, i.e., ap1=([avg-wt-sn-2d >2h];skip-sn )2dt1where
avg-wt-sn-2d2dt1skip-sn2adt1.
deﬁnition 10 (action engine) .letdt=(on; v; g )be a dt-
im. an action engine aedt2(dt
dtdt)!adt
generates actions given action patterns, operational states, and
conﬁgurations, i.e., for any ap=(constr; act )2dt,os2

dt, and conf2dt,aedt(ap; os; conf )=actifconstr
evaluates to truew.r.t.osandconf .aedt(ap; os; conf )=?
otherwise.
in the remainder, we introduce the taxonomy of constraint
violations and management actions. note that our goal is not
to provide completely exhaustive taxonomies, but to facilitate
the elicitation of various action patterns by providing possible
constraints deﬁned over operational states of a dt-im and
actions based on its conﬁguration.
a. a taxonomy of constraint violations
fig. 4 shows the taxonomy of constraint violations in
uml class diagram. first, violations are categorized by their
orientations: compliance andperformance [21]. compliance-
oriented violations refer to the violations of rules during the
execution of business processes. in the process shown in
fig. 3(a), skipping place order is considered as compliance-
oriented violations. performance-oriented violations concern
undesired performances that are measured with various process
performance metrics. the high average waiting time for the
notiﬁcation to customers in the order handling process is a
performance-oriented diagnostic.
we further distinguish the compliance-oriented violations
based on their types, i.e., existence and non-existence. the
existence concerns unnecessary executions of activities in
business processes, while the non-existence refers to skipping
necessary executions of activities. in fig. 3, notiﬁcations are
sent for the orders higher than $200. sending notiﬁcations
for orders lower than $200 is concerned with the existence,figure 4: a taxonomy of constraint violations
whereas skipping such notiﬁcations for orders higher than $200
is related to the non-existence. furthermore, the violations
can consider either a single activity or a set of activities (i.e.,
sub-process). in fig. 3, a violation of the existence can be
deﬁned not only for sending notiﬁcations, but also together
with collecting payments.
performance-oriented violations are further divided into
temporal and non-temporal ones. the former involves abso-
lute/relative time information in its deﬁnition, whereas the
latter is not concerned with time information. for instance,
the high average sojourn time for sending notiﬁcations relates
to the time information, whereas the high frequency of sending
notiﬁcations does not involve time information.
b. a taxonomy of management actions
fig. 5 shows the taxonomy of management actions to miti-
gate risks resulting from violations of constraints in uml class
diagram. first, inﬂow controls the execution of certain activities
in business processes by blocking or allowing the execution.
in fig. 3, we can block all executions of sending notiﬁcations
by increasing the minimum threshold to inﬁnity. besides, we
can block some of the executions by conﬁguring the threshold
to the value higher than the current one, e.g., $300. in contrast,
we may allow the execution of activities by augmenting valves.
suppose that ap-quantity in fig. 3(a) is set to 0, which means
all items need approvals for checking availability. we can allow
some skips by increasing ap-quantity .
second, routing is to control the routing of objects in busi-
ness processes, including parallelism ,extra ,alternative , and
skipping . first, parallel routing is to parallelize the execution
of activities. in case that a parallel execution exists in the
process model (e.g., a choice between parallelizing send invoice
and send notiﬁcation and sequentially processing them as
described in fig. 3), we can adjust the routing to enable parallel
executions for some/all objects. next, extra routing is to execute
extra activities for certain objects (e.g., further approval steps
for speciﬁc types of items), while alternative routing is to adopt
alternative control ﬂows for certain objects (e.g., customer
pick-ups of items without routes). finally, skip routing is to
deliberately bypass the execution of certain activities. for
instance, we can skip the notiﬁcation for the orders having
a price higher than $200 by setting sn-price to 200 in fig. 3.
figure 5: a taxonomy of management actions. note that we only specify
all/some forblock /decrease , but they exist for all the classes in the same
level.
third, resource allocation is to control the assignment of
resources to activities based on different attributes of resources,
e.g., group ,role, and experience . first, we can change the
resource allocation by adjusting group information. in fig. 3,
we can limit the execution of place order only by resources
from sales department. moreover, the assignment rule can be
changed according to the role and experience of resources. in
fig. 3, by changing po-role tostaff, the resource allocation for
place order can be updated. likewise, by increasing the level
ofpo-exp , the allocation is accordingly updated.
finally, one can control the capacity of business processes
either by increasing or decreasing the maximum amount of
process instances, e.g., manufacturing products, based on the
situation of the process. for instance, we can increase the
capacity of the order handling process by decreasing valve
capacity . contrary to that, we can decrease the capacity by
increasing valve capacity .
v i . i m p l e m e n tat i o n
a cloud-based web service1is implemented to support the
digital twin interface model and action engine with a dedicated
user interface. the implementation consists of four major
functional components: (1) building dt-ims, (2) updating
states of dt-ims, (3) visualizing dt-ims, and (4) evaluating
action patterns. all four functional components are imple-
mented as python packages. being containerized as a docker
container, the functionality of the framework and its functional
components is structured into a coherent set of microservices
that are deployable on any platform.
in the following, we brieﬂy explain each component. we
refer readers to the tool manual1for more details.
a. building digital twin interface models: this compo-
nent aims at building dt-ims given event data and user inputs.
the main inputs of this component are event data, guards,
and valves, whereas the output is a dt-im. the event data
are stored as standard ocel format [10], while the guards
1sources & manuals available at https://github.com/gyunamister/dtweenand valves are stored as json-based formats1. the discovery
technique introduced in [9] is deployed to discover an ocpn
from the event data. user-provided guards and valves are used
to enrich the discovered ocpn, completing a dt-im.
b. updating states of digital twin interface models:
the goal of this component is to update states of a dt-im
accordingly to the updates of information systems. the main
inputs include streaming event data in the standard ocel
format and a dt-im built using the component in sec. vi.
the token-based replay [20] technique is used to compute
diagnostics using the streaming event data in user-deﬁned
intervals (e.g., every 24 hours). likewise, markings and object
value assignments are computed, completing operational states
of the dt-im.
c. visualizing digital twin interface models: this com-
ponent provides visual information to users to facilitate the
elicitation of action patterns. first, it provides the control view
of a dt-im, describing the routing and resource allocation rules
and possible controls. second, it provides the operational view
showing the current states of a dt-im. fig. 6 is a screenshot
of the web service showing the operational state. the ocpn
describes the process model and the green box speciﬁes the
marking at place order3 where four objects reside at 11:22:54,
17.june.2021. the table on the right hand side describes the
object value assignment, e.g., object o22 is an order having
price $174. using operational states in the operational view and
conﬁgurations in the control view, users can deﬁne constraints
and actions, which are used to compose action patterns.
d. action engine: this component aims to continuously
evaluate action patterns by monitoring the business process.
the main inputs include states of a dt-im computed by
the component in sec. vi, current conﬁgurations, and user-
deﬁned action patterns. based on the states, action engine
evaluates the constraint speciﬁed in the action pattern and
produce the corresponding action. the generated actions are
applied to update the conﬁguration of the dt-im, which in turn
is consumed by the target system to update its conﬁguration.
v i i . p r o o f o f co n c e p t
to evaluate the feasibility of realizing dtos, we conduct a
case study using an artiﬁcial information system that supports
the order handling process introduced in sec. iv. the imple-
mentation of the information system is publicly available1to be
used for demonstrations. 14 resources are available in total at
any point in time, each of them being responsible for multiple
activities in the process. orders are randomly placed and the
resources process the orders and the corresponding items and
routes based on first-in-first-out rule.
multiple conﬁgurations are available in the information
system. for instance, sn-price determines the minimum price of
the orders that require the notiﬁcation for payments. moreover,
caw-price determines the minimum price of the items requiring
approvals for checking availability. the information system
generates event logs recording the execution of the process in
the standard ocel format.using the implementation, we 1) construct a dt-im for the
information system, 2) deﬁne action patterns, and 3) evaluate
action patterns by monitoring the process.
a. constructing a digital twin interface model
we ﬁrst build a dt-im ( dt0) that replicates the behavior
of the information system. the ocel containing events
from the information system is used to discover an ocpn.
fig. 7(a) shows a screenshot of the control view of the dt-
im. as described in fig. 3(a), guards are deﬁned with the
valves of the information system. fig. 8(a) is a screenshot
of the operational view showing diagnostics of the process
at 23:59:59, 02.may.2021. the average/median sojourn time
ofsend notiﬁcation for the last two days ( avg-st-sn-2d2
dt0), i.e., between 00:00:00, 01.may.2021 and 23:59:59,
02.may.2021 is 16 hours. the routing probability to check
availability with approval (rout-prob-caw-2d2dt0) for the
last two days is 0:3.
b. deﬁning action patterns
we deﬁne constraints and actions based on the operational
and control view, respectively. by analyzing the diagnostics
from the operational view, we conclude that it is problematic
for the average sojourn time for the previous two days to
be higher than 16 hours, whereas the problematic situation is
considered to be relieved if the average sojourn time reaches
10 hours. based on it, the following constraints are deﬁned:
delay-on-notiﬁcation (c1) evaluates if the average sojourn
time for two days is higher than 16 hours, i.e., [ avg-st-sn-
2d>16(hours)]. fig. 8(b) illustrates how we deﬁne c1
using the user-interface of the implementation.
relaxed-delay-on-notiﬁcation (c2) evaluates if the average
sojourn time for two days is lower than 10 hours, i.e.,
[avg-st-sn-2d <10(hours)]
next, using the valves in the control view, we deﬁne the
following actions:
skip-more-notiﬁcation (a1) 2adt0setssn-price to 220,
i.e., for any conf; conf02dt0,a1(conf )=conf0such
that conf0(sn-price )=220 and8v2dom (conf )nfsn-priceg
conf0(v)=conf (v). fig. 8(a) illustrates how we deﬁne
a1using the user-interface of the implementation.
skip-less-notiﬁcation (a2) 2adt0sets sn-price to 180,
i.e., for any conf; conf02dt0,a2(conf )=conf0such
that conf0(sn-price )=180 and8v2dom (conf )nfsn-priceg
conf0(v)=conf (v).
based on the constraints and actions, we deﬁne following
action patterns: ap1=(c1;a1);ap2=(c2;a2)2dt0.ap1
evaluates if the average sojourn time for two days is higher
than 16 hours and generates actions to skip more notiﬁcations,
whereas ap2 generates actions to skip fewer notiﬁcations by
evaluating if the average sojourn time is lower than 10 hours.
c. monitoring
using action patterns and the action engine of the imple-
mentation, we analyze the event stream, which is continuously
generated by the information system. ap1 and ap2 arefigure 6: operational view of the dt-im replicating the artiﬁcial information system. the green box denotes the objects residing in place order3 and the
orange box indicates the value assignment of each object.
figure 7: (a) control view of the dt-im replicating the artiﬁcial information
system. note that it only describes a part of the guards for a better represen-
tation. (b) deﬁning skip-more-notiﬁcation (a1) using the user interface of the
implementation.
evaluated every 12 hours for 24 days, i.e., from 03.may.2021
to 26.may.2021. fig. 9 reports the average sojourn time of
sending a notiﬁcation for the last two days by time. the
red line denotes the average sojourn time when we trigger
the actions deﬁned by the action patterns. at 12:00:00 on
06.may.2021, a1was triggered since c1was satisﬁed (i.e., the
figure 8: (a) diagnostics between 00:00:00 01.may.2021 and 23:59:59
02.may.2021. (b) deﬁning delay-on-notiﬁcation (c1) using the user interface
of the user interface of the implementation.
average sojourn time was higher than 16). as a result of the
action, sn-price of the dt-im changed to 220, which in turn
updated conﬁgurations of the information system. after a1,
the average sojourn time had decreased until a2was triggeredafter the average sojourn time reached below 10. a1was taken
again on 18.may.2021 and 25.may.2021 to deal with delays
in sending notiﬁcations.
figure 9: the red dotted line depicts the average sojourn time when actions
are triggered, whereas the blue line shows one when actions are not taken.
red/orange dots indicate the execution of a1/a2.
to evaluate the effectiveness of the action, we measure the
average sojourn time when actions are not taken. the blue line
depicts the average sojourn time, showing that the execution
of actions incredibly reduces the average sojourn time after the
ﬁrst execution of a1. for instance, at 12:00:00 10.may.2021,
the average sojourn time with actions is 9, whereas the average
sojourn time without actions is 20.
v i i i . c o n c l u s i o n
in this paper, we proposed a digital twin interface model
to realize dtos based on action-oriented process mining. an
operational view of the interface model reﬂects the current
states of business processes with various diagnostics, while
a control view provides routing and resource allocation rules
of the process. process analysts can deﬁne action patterns
based on the operational and control views, which are eval-
uated by an action engine to produce the required actions.
we have implemented a web service that supports building
digital twins, updating states, visualizing the digital twin, and
monitoring action patterns. to evaluate the feasibility of the
proposed concept, we conducted a case study using an artiﬁcial
information system supporting an order handling process.
however, given the practical relevance of the proposed ap-
proach, the applicability to real-life information systems needs
to be extensively evaluated. the evaluation should include the
construction of dt-ims for real-life business processes, real-
time updates of operational states, and automated execution of
actions. as future work, we plan to conduct case studies with
real-life information systems. moreover, we plan to develop a
feedback loop that provides suggestions to improve the existing
action patterns. finally, we will evaluate the inter-effects of
different actions to provide recommendations for optimizing
existing action patterns.re f e r e n c e s
[1]l. reinkemeyer, “business view: towards a digital enabled organization,”
inprocess mining in action: principles, use cases and outlook , 2020,
pp. 197–206.
[2]y . alotaibi and f. liu, “survey of business process management:
challenges and solutions,” enterprise information systems , vol. 11, no. 8,
pp. 1119–1153, 2017.
[3]e. glaessgen and d. stargel, “the digital twin paradigm for future
nasa and u.s. air force vehicles,” in 53rd aiaa/asme/asce/ahs/asc
structures, structural dynamics and materials conference , 2012.
[4]r. parmar, a. leiponen, and l. d. thomas, “building an organizational
digital twin,” business horizons , vol. 63, no. 6, pp. 725–736, 2020.
[5]m. caporuscio, f. edrisi, m. hallberg, a. johannesson, c. kopf, and
d. perez-palacin, “architectural concerns for digital twin of the organi-
zation,” in software architecture , a. jansen, i. malavolta, h. muccini,
i. ozkaya, and o. zimmermann, eds., 2020, pp. 265–280.
[6]g. park and w. m. p. van der aalst, “a general framework for action-
oriented process mining,” in bpm 2020 workshops , a. del r ´ıo ortega,
h. leopold, and f. m. santoro, eds., 2020, pp. 206–218.
[7]l. t. ly, f. m. maggi, m. montali, s. rinderle-ma, and w. m. p. van der
aalst, “compliance monitoring in business processes: functionalities,
application, and tool-support,” information systems , vol. 54, pp. 209–
234, 2015.
[8]a. e. marquez-chamorro, m. resinas, and a. ruiz-cortes, “predictive
monitoring of business processes: a survey,” ieee transactions on
services computing , vol. 11, no. 6, pp. 962–977, 2018.
[9]w. m. p. van der aalst and a. berti, “discovering object-centric petri
nets,” fundam. informaticae , vol. 175, no. 1-4, pp. 1–40, 2020.
[10] a. f. ghahfarokhi, g. park, a. berti, and w. m. p. van der aalst,
“ocel: a standard for object-centric event logs,” in new trends in
database and information systems , l. bellatreche, m. dumas, p. karras,
r. matulevi ˇcius, a. awad, m. weidlich, m. ivanovi ´c, and o. hartig,
eds., 2021, pp. 169–175.
[11] f. tao, j. cheng, q. qi, m. zhang, h. zhang, and f. sui, “digital twin-
driven product design, manufacturing and service with big data,” the
international journal of advanced manufacturing technology , vol. 94,
no. 9-12, pp. 3563–3576, 2018.
[12] q. qi, f. tao, y . zuo, and d. zhao, “digital twin service towards smart
manufacturing,” procedia cirp , vol. 72, pp. 237–242, 2018.
[13] f. m. maggi, m. montali, m. westergaard, and w. m. p. van der aalst,
“monitoring business constraints with linear temporal logic: an approach
based on colored automata,” in bpm 2011 , s. rinderle-ma, f. toumani,
and k. wolf, eds., vol. 6896, 2011, pp. 132–147.
[14] e. ramezani, d. fahland, and w. m. p. van der aalst, “where did i
misbehave? diagnostic information in compliance checking,” in bpm
2012 , a. barros, a. gal, and e. kindler, eds., vol. 7481, 2012, pp. 262–
278.
[15] m. pourbafrani, s. j. van zelst, and w. m. p. van der aalst, “scenario-
based prediction of business processes using system dynamics,” in otm
2019 , h. panetto, c. debruyne, m. hepp, d. lewis, c. a. ardagna, and
r. meersman, eds., 2019, pp. 422–439.
[16] j. evermann, j.-r. rehse, and p. fettke, “predicting process behaviour
using deep learning,” decision support systems , vol. 100, pp. 129–140,
2017.
[17] r. conforti, m. de leoni, m. la rosa, w. m. p. van der aalst, and a. h.
ter hofstede, “a recommendation system for predicting risks across
multiple business process instances,” decision support systems , vol. 69,
pp. 1–19, 2015.
[18] s. a. fahrenkrog-petersen, n. tax, i. teinemaa, m. dumas, m. de leoni,
f. m. maggi, and m. weidlich, “fire now, fire later: alarm-based
systems for prescriptive process monitoring,” arxiv:1905.09568 [cs,
stat], 2019.
[19] p. badakhshan, g. bernhart, j. geyer-klingeberg, j. nakladal, s. schenk,
and t. v ogelgesang, “the action engine – turning process insights into
action,” in 2019 icpm demo track , 2019, pp. 28–31.
[20] a. berti and w. m. p. van der aalst, “a novel token-based replay
technique to speed up conformance checking and process enhancement,”
trans. petri nets other model. concurr. , vol. 15, pp. 1–26, 2021.
[21] w. m. p. van der aalst, process mining - data science in action , 2016.