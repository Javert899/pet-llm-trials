matching observed behavior and modeled
behavior: an approach based on petri nets and
integer programming
wil m.p. van der aalst
department of technology management
eindhoven university of technology
p.o.box 513,nl-5600 mb eindhoven,the netherlands
w.m.p.v.d.aalst@tm.tue.nl
abstract. inspired by the way sap r/3 and other transactional infor-
mation systems log events,we focus on the problem to decide whether
a process model and a frequency proﬁle “ﬁt” together. the problem
is formulated in terms of petri nets and an approach based on integerprogramming is proposed to tackle the problem. the integer program
provides necessary conditions and,as shown in this paper,for relevant
subclasses these conditions are suﬃcient. unlike traditional approaches,the approach allows for labelled petri nets with “hidden transitions”,
noise,etc.
keywords: concurrency,distributedsystems,petrinets,integerprogramming,
erp, marking equation.
1 introduction
for many processes in practice there exist models. these model are descriptive
orprescriptive ,i.e., theyareusedtodescribeaprocessortheyareusedto con-
trolorguidethesystem.atypicalexamplearetheso-calledreferencemodelsinthe context of enterprise resource planning (erp) systems like sap [6]. the
sap reference models are expressed in terms of so-called event-driven process
chains (epcs) describing how people should/could use the sap r/3 system.
similarly models are used in the workﬂow domain [1], but also in many other
domains ranging from ﬂexible manufacturing and telecommunication to oper-ating systems and software components [7]. in some domains these models are
referredtoas speciﬁcations orblueprints.inreality,therealprocessmaydeviate
from the modeled process, e.g., the implementation is not consistent with thespeciﬁcation or people use sap r/3 in a way not modeled in any of the epcs.
clearly, the problem of checking whether the modeled behavior and the ob-
servedbehaviormatchisnotnew.however,whenweappliedourprocessmining
techniques [2] to sap r/3 we where confronted with the following interesting
problem: the logs of sap do not allow for monitoring individual cases (e.g.,purchase orders). instead sap only logs the fact that a speciﬁc transaction has
been executed (without referring to the corresponding case). hence, tools likethe sap reverse business engineer (rbe) report on the frequencies of trans-
action types and not on the cases themselves. these transactions can be linked
to functions in the epcs, but, as indicated, not to individual cases. moreover,some functions in the epc do not correspond to a transaction code, and there-
fore, are not logged at all. this raises the following interesting question: do the
modeled behavior (i.e., the epc) and the observed behavior (i.e., the transactionfrequencies) match?
ab
de c
p1p2
p3p4
p5p6
fig. 1. ap e t r in e t .
in this paper we consider an abstraction of the problem. consider a petri
netwith some initial marking [8,9] and a frequency proﬁle which is a partial
function indicating how many times certain transitions ﬁred. consider for ex-
ample the marked petri net shown figure 1. a frequency proﬁle fpcould be
fp(a)=3 , fp(b)=2 , fp(c)=2 , fp(d) = 2, and fp(e) = 3, thus indicating the
number of times each transition occurred. however, the modeled behavior (i.e.,the marked petri net) and the observed behavior (the frequency proﬁle fp)d o
not match. it is easy to see that fp(b)+fp(c) cannot exceed fp(a) since band
cdepend on the tokens produced by a. now consider another frequency proﬁle
fp:fp(a)=3 , fp(b)=2 , fp(d) = 2, and fp(e) = 3, i.e., the number of times
coccurred is unknown. now the modeled behavior and the observed behavior
match,i.e.,theobservedtransitionfrequenciesareconsistentwiththepetrinetmodel. moreover, it is clear that in this situation coccurred precisely once.
intheremainderwewillfocusonthisproblemandproposeanapproachbased
oninteger programming (ip)[11,13].usingamarkedpetrinetandafrequency
proﬁle,anipproblemisformulatedtocheckwhetherthemodeledbehaviorand
theobservedbehaviormatchand,ifso,thefrequencyoftransitionsnotrecorded
in the proﬁle is determined. first, we introduce some basic petri net notations.then, we formulate the ip problem and demonstrate its applicability using an
example.finally,webrieﬂydiscussrelatedworkandprovidesomeﬁnalremarks
on practical relevance of the results.2p e t r i n e t s
thissectionintroducesthebasicpetrinetterminologyandnotations(cf.[9,4]).
readers familiar with petri nets can skip this section.
theclassicalpetrinetisadirectedbipartitegraphwithtwonodetypescalled
placesand transitions. the nodes are connected via directed arcs. connections
between two nodes of the same type are not allowed. places are represented by
circles and transitions by rectangles.
deﬁnition 1 (petri net). a petri net is a triple (p,t,f):
-pis a ﬁnite set of places,
-tis a ﬁnite set of transitions ( p∩t=∅),
-f⊆(p×t)∪(t×p)is a set of arcs (ﬂow relation)
a place pis called an input place of a transition tiﬀ there exists a directed
arc from ptot. place pis called an output place of transition tiﬀ there exists
a directed arc from ttop.w eu s e •tto denote the set of input places for a
transition t. the notations t•,•pandp•have similar meanings, e.g., p•is the
set of transitions sharing pas an input place. in this paper, we do not consider
multiplearcsfromonenodetoanother.however,allresultscanbeextendedtopetri nets with arcs weights.
figure 1 shows a petri net with 5 transitions ( a,b,c,d,a n d e) and 6 places
(p1,...p6).
at any time a place contains zero or more tokens, drawn as black dots. the
state,oftenreferredtoas marking,isthedistributionoftokensoverplaces,i.e.,
m∈p→in.wewillrepresentamarkingasfollows:1
/primep1+2/primep2+1/primep3+0/primep4is
the marking with one token in place p1, two tokens in p2, one token in p3a n d
no tokens in p4. we can also represent this marking as follows: p1+2/primep2+p3.
the marking shown in figure 1 is p1. (note the overloading of notation.) to
compare markings we deﬁne a partial ordering. for any two markings m1and
m2,m1≤m2iﬀ for all p∈p:m1(p)≤m2(p).
thenumberoftokensmaychangeduringtheexecutionofthenet.transitions
are the active components in a petri net: they change the marking of the net
according to the following ﬁring rule:
(1) atransition tissaidtobe enablediﬀeachinputplace poftcontainsatleast
one token.
(2) an enabled transition may ﬁre. if transition tﬁres, then tconsumesone
token from each input place poftand producesone token for each output
place poft.
infigure1transition aisenabled.firing aresultsinmarking2/primep1+p2+p3.in
this marking, three additional transitions (besides a) are enabled ( b,c,d). any
of these transitions may ﬁre. however, ﬁring one of these transition will disableone or two other transitions, e.g., ﬁring cwill disable both bandd.
given a petri net ( p,t,f) and a marking m
1, we have the following nota-
tions:-m1t→m2: transition tis enabled in marking m1and ﬁring tinm1results
in marking m2
-m1→m2: there is a transition tsuch that m1t→m2
-m1σ→mn: the ﬁring sequence σ=t1t2t3...t n−1leads from marking
m1to marking mnvia a (possibly empty) set of intermediate markings
m2, ...m n−1, i.e., m1t1→m2t2→...tn−1→mn
a marking mnis called reachablefrom m1(notation m1∗→mn) iﬀ there is a
ﬁring sequence σsuch that m1σ→mn. note that the empty ﬁring sequence is
also allowed, i.e., m1∗→m1.
tomanipulateﬁringsequences,weintroducethe parikh vector πσ∈t→in,
where πσ(t) denotes the number of occurrences of transition tinσ.
we use ( pn,m) to denote a petri net pnwith an initial marking m.a
marking m/primeisa reachable marking of(pn,m)iﬀm∗→m/prime.considerthepetri
net shown in figure 1 with only one token in p1. for this initial marking there
are 6 reachable markings.
3 matching a marked petri net and a frequency proﬁle
petri nets may be used to model a wide variety of processes. a petri net canmodel what we think the process is (i.e., descriptive) but it can also model
what the process should be (i.e., prescriptive). in both cases, the real processmaydeviatefromwhatismodeledinthepetrinet.inthissection,weinvestigate
whetherthemodeledbehavior(i.e.,petrinet)andtheobservedbehaviormatch.
since in reality we often cannot inspect the state and just observe events, it is
realistictoassumethatwecanonlymonitortheﬁringoftransitions.moreover,
weassumethatwecannotlinktransitionoccurrencestospeciﬁctokensorexploittheir ordering in time, i.e., we only know the frequency proﬁle . for a petri net
with transitions tthe frequency proﬁle refers to a subset of t, i.e., frequency
proﬁle fp∈t/negationslash→in is a partial function. for t∈dom(fp),fp(t) is the number
of times toccurred/ﬁred. for t/negationslash∈dom(fp) this is unknown. if dom(fp)=t,
the frequency proﬁle is complete. both for complete and incomplete frequency
proﬁles we deﬁne the predicate match(pn,m, fp).
deﬁnition 2 (match). let(pn,m)be a marked petri net with pn =(p,t,f)
and fp ∈t/negationslash→i n a frequency proﬁle. (pn,m)and fp match if there exists a
ﬁring sequence σenabled in m(i.e., m
σ→) such that for all t∈dom(fp):
fp(t)=πσ(t). (notation: match (pn,m, fp).)
intheintroductionwementionedtwofrequencyproﬁlesforthemarkedpetrinet
shown in figure 1. the ﬁrst one (i.e., fp(a)=3, fp(b)=2, fp(c)=2, fp(d)=2,
and fp(e)=3) does not match while the second one (i.e., fp(a)=3, fp(b)=2,
fp(d)=2, and fp(e)=3) does. note that the ﬁrst proﬁle is complete while the
second is incomplete ( c/negationslash∈dom(fp)). for any marked petri net there is a trivial
matching proﬁle fpwith dom(fp)=∅.even for moderate examples, the number of ﬁring sequences may be too
large to check match(pn,m, fp). therefore, in the spirit of [3,7], we can try to
formulate a linear algebraic representation. given the discrete nature of ﬁring
transitions, we propose an integer programming (ip) problem rather than an
linear programming (lp) problem [11,13].
deﬁnition 3 (integer programming problem). let(pn,m)be a marked
petri net with pn =(p,t,f)and fp ∈t/negationslash→i n a frequency proﬁle. ip (pn,m, fp)
is the corresponding integer programming (ip) problem:
min/summationtext
t∈tft
s.t.ft=fp(t) for all t∈dom(fp)
f(t,p)=ftfor all ( t, p)∈f∩(t×p)
f(p,t)=ftfor all ( p, t)∈f∩(p×t)
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥0 for all p∈p
ft≥0 for all t∈t
ftinteger for all t∈t
f(x,y )integer for all ( x, y)∈f
there are two types of positive integer variables: ftfor transition frequencies
andf(x,y )for arc frequencies. the ﬁrst constraint speciﬁes that the transition
frequencies should match the frequency proﬁle. note that for some transitions
there may not be a frequency in the frequency proﬁle. the second and thirdconstraint refer to the fact that transition frequencies and arc frequencies need
tobealigned.thefourthtypeofconstraintisthemostinterestingone.foreach
place,thereshouldbeabalancebetweentheinﬂowoftokensandtheoutﬂowoftokens, i.e., it is not possible to consume more tokens than the initial ones plus
theproducedones.theobjectivefunctionminimizesthenumberofﬁrings.given
the nature of the problem this is of less importance and alternative objectivefunctions can be deﬁned, e.g., an objective function maximizing or minimizing
the number of tokens in the net.
beforewediscusstherelationbetween match(pn,m, fp)and ip(pn,m, fp),
letusreturntothepetrinetshowninfigure1.assumingsomeinitialmarkingmand some frequency proﬁle fp,ip(pn,m, fp) is formulated as follows.
minfa+fb+fc+fd+fe
s.t.fa=fp(a)
...
f(a,p2)=fa
...
f(p1,a)=fa
...
m(p1)−f(p1,a)≥0
m(p2)+f(a,p2)−f(p2,b)−f(p2,c)≥0
m(p3)+f(a,p3)−f(p3,c)−f(p3,d)≥0
m(p4)+f(b,p4)+f(c,p4)−f(p4,e)≥0
m(p5)+f(c,p5)+f(d,p5)−f(p5,e)≥0
m(p6)+f(e,p6)≥0
fa≥0
...f
ainteger
...
f(p1,a)integer
...
applying this to the initial marking shown in figure 1 and the frequency
proﬁle fp(a)=3 , fp(b)=2 , fp(c)=2 , fp(d) = 2, and fp(e) = 3 indeed results
inanipproblem without a solution. whileapplying it to thesecondfrequencyproﬁle fp(a)=3 , fp(b)=2 , fp(d) = 2, and fp(e) = 3 yields the solution where
f
c=1. in the latter case the value of the objective function is 11.
intheremainderofthissectionweinvestigatetherelationbetween match(pn,
m,fp)a n d ip(pn,m, fp), i.e., “can the ip problem be used to determine
whether the modeled and observed behavior match?”. the following theoremshowsthat,asexpected,theipproblemindeedprovidesnecessaryrequirements.
theorem 1. let(pn,m)be a marked petri net with pn =(p,t,f)and
fp∈t/negationslash→i n a frequency proﬁle. if match (pn,m, fp), then ip(pn,m, fp)has
as o l u t i o n .
proof.ifmatch(pn,m, fp), then there exists a ﬁring sequence σenabled in m
(i.e., mσ→)suchthatforall t∈t:fp(t)=πσ(t).let m/primebetheresultingmark-
ing.nowconsidertheipproblem.theonlyconstraintthatcouldbeviolatedism(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥0forsome p∈p.however,thisconstraint
followsdirectlyfromtheﬁringrule.infact, m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=
m/prime(p). /intersectionsq/unionsq
the result does not hold in the opposite direction, as can be shown by an
exampletakenfrom[4].figure2showsamarkedpetrinet.let fp(t)=1forall
transitions texcept for t=gwhich occurs twice (i.e., fp(g) = 2). it is easy to
verifythat ip(pn,m, fp)hasasolution.however,themarkedpetrinetandthebc
ga
p1d
e
fp2
p3
p4
p5p6
p7
fig. 2. counter example.
frequency proﬁle do not match because there is no ﬁring sequence (starting in
theinitialmarkingshowninfigure2)thatﬁres gtwiceandallothertransitions
once.(notethatitisimpossibletoreturntotheinitialmarking.)fortunately,for
certain subclasses the result does hold in the opposite direction as is illustratedby the following theorem.
theorem 2. let(pn,m)be an acyclic marked petri net with pn =(p,t,f)
and fp ∈t/negationslash→i n a frequency proﬁle such that ip (pn,m, fp)has a solution.
there exists a ﬁring sequence σenabled in msuch that for all t∈dom(fp):
fp(t)=π
σ(t), i.e., match (pn,m, fp).
proof.inthesolutionof ip(pn,m, fp)eachtransition t∈tﬁresfttimes.let
n=/summationtext
t∈tft.ifn=0,theemptysequenceisenabledandthetheoremholds.if
n>0,removealltransitions tforwhich ft=0.moreover,removeallplacesand
arcs not connected to a transition tfor which ft>0. let pn/primebe the resulting
netand m/primetheresultingmarking.clearly, pn/primeisacyclic.atleastonetransition
is enabled in ( pn/prime,m/prime). (if not, the fact that pn/primeis acyclic would imply that
thereisanemptysourceplace pwithsomeoutputtransition t/prime.however, m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=m/prime(p)+0−f(p,t/prime)−...=0+0 −ft/prime−...≥0.
clearly,thisleadstoacontradiction.)firethisenabledtransition t∗andlet m∗
betheresultingmarkingand fp∗suchthat fp∗(t∗)=fp(t∗)−1andforallother
t∈dom(fp):fp∗(t)=fp(t).clearly, ip(pn,m∗,fp∗)hasasolution.repeatthe
above process until n= 0. in each step, a transition t∗is ﬁred thus forming a
sequence σenabled in m. /intersectionsq/unionsq
note that the proof of this theorem is similar to theorem 16 in [7]. consider
figure 2 with the arc from gtop1 removed and a new place p8 added as an
output place of g. now for any marking mand any frequency proﬁle fpsuch
that ip(pn,m, fp) has asolution, thereexists a correspondingﬁring sequence,
i.e., match(pn,m, fp). for example, given the marking shown in figure 2 and
the acyclic variant of the net, the ip problem has a solution for the followingfrequency proﬁle fp:fp(a)= fp(b)= fp(d)= fp(e)=0, fp(c)= fp(f)= fp(g)=
1. indeed, as suggested by theorem 2, there is a ﬁring sequence ﬁring c,fand
g(e.g., cfg).
thecounterexampleshowninfigure2isfree-choice[4].therefore,onecould
considertoprovingtheorem2forsubclassesoffree-choicenets(i.e.,replacetherequirement that the net is acyclic with some other structural requirement).
twowell-knownsubclassesaretheclassof marked graphs andtheclassof state
machines[4,7,9].
amarked graph isapetrinetwithforeachplace p∈p:|•p|=|p•|=1(i.e.,
places cannot have multiple input or output transitions). a circuitis a circular
pathinthepetrinetsuchthatnoelement(i.e.,placeortransition)occursmorethan once. it is easy to see that in a marked graph the number of tokens in a
circuit is constant. therefore, a circuit remains (un)marked if it is (un)marked
in the initial marking. using existing results it is easy to prove that theorem 2
applies to (cyclic) marked graphs where each circuit is marked.
theorem 3. let(pn,m)be an marked graph with pn =(p,t,f)and fp ∈
t/negationslash→i n a frequency proﬁle. if each circuit is initially marked, then ip (pn,m, fp)
has a solution if and only if match (pn,m, fp).
proof.a ss h o w ni nt h e o r e m1 , match(pn,m, fp) implies that ip(pn,m, fp)
hasasolution.remainstoprovethat ip(pn,m, fp)hasasolutionalsoimplies
match(pn,m, fp).considerasolutionassigningvaluestoeach f
tandf(x,y ).let
m/primebeamarkingdeﬁnedasfollows: m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=m/prime(p)
for all p∈p. note that m/primeis indeed a marking, i.e., for each p∈p,m/prime(p)i s
anon-negativeinteger.thisimpliesthatthemarkingequation m+n.x=m/prime
has a solution. ( nis the incidence matrix and xis a vector.) this solution is
givenbythevaluesassignedto ft.becausethereisasolution, mandm/primeagree
on all place invariants. for live marked graphs a marking m/primeis reachable from
mif and only if both agree on all place invariants (cf. theorem 3.21 in [4]). a
marked graph where each circuit is initially marked is live (cf. theorem 3.15 in
[4]). therefore, m/primeis reachable from mand match(pn,m, fp). /intersectionsq/unionsq
figure3showsamarkedgraph.foranyinitialmarking m,theipproblemhas
asolutionifandonlyif match(pn,m, fp)(providedthateverycircuitisinitially
marked).
apetrinetisa state machine iﬀtransitionscannothavemorethanoneinput
oroutputplace,i.e.,foreachtransition t∈t:|•t|=|t•|=1.itiseasytoprove
that theorem 3 also holds for state machines as long as the the net is strongly
connected(i.e.,thereisadirectedpathfromanynodetoanyothernodeinthenet) and initially there is at least one token.
theorem 4. let(pn,m)be a strongly-connected state machine with pn =
(p,t,f)and a non-empty initial marking mand fp ∈t/negationslash→i n a frequency
proﬁle. ip(pn,m, fp)has a solution if and only if match (pn,m, fp).
proof.a ss h o w ni nt h e o r e m1 , match(pn,m, fp) implies that ip(pn,m, fp)
hasasolution.remainstoprovethatthereversealsoholds.considerasolutionb
e a
p1c
dp2
p3
p4p5
p6
p7
fig. 3. marked graph.
assigning values to each ftandf(x,y ).l e t m/primebe a marking deﬁned as follows:
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=m/prime(p)forall p∈p.notethat m/primeisindeed
a marking, i.e., for each p∈p,m/prime(p) is a non-negative integer. the number
of tokens in mequals the number of tokens in m/prime,i nf a c t mandm/primeagree on
allplaceinvariants.moreover,themarkedstatemachineislivebecause pnisa
strongly-connected state machine and mis non-empty (cf. theorem 3.3 in [4]).
using the second reachability theorem (cf. theorem 3.8 in [4]), it follows thatm
/primeis reachable from mand match(pn,m, fp). /intersectionsq/unionsq
figure 4 shows a strongly connected state machine. for any non-empty initial
marking mip(pn,m, fp) has a solution if and only if match(pn,m, fp).
b
e a
p1c
dp2 p3
fig. 4. state machine.
inthissection,weexploredtherelationbetween match(pn,m, fp)(i.e.,the
predicate indicating that a process model and observed transition frequencies
ﬁt together) and ip(pn,m, fp) (i.e., an integer programming problem). in the
remainder, we consider a larger example, possible extensions, and related work.4 example
after showing a number of abstract examples, we now use the more realistic
example shown in figure 5. it describes the workﬂow [1] of handling orders.
theupperhalfmodelsthelogistical subprocesswhilethelowerhalfmodelstheﬁnancial subprocess. most of the workﬂow should be self explanatory except
perhapsfortheconstructinvolving c7and t10(reminder):aremindercanonly
be sent if the goods have been shipped.
t1t1t5t6
t7
t9t11t8
t10t12
start register
send_billreceive_paymentarchiveship_goodscheck_availability
replenishupdate
reminderendc1
c2c3
c4
c5
c6c7
c8t4t3
t2
c0out_of_stock_no_repl
out_of_stock_repl
in_stock
t13
destroyt0
create fp 1 fp2 fp 3 fp 4 
t1 80 80 80 80 
t6 0 10 10 10 
t8 80 80 80 70 
t9 80 85 70 85 
t11 80 80 80 80 
t12 80 80 80 80 
 
fig. 5. a petri net modeling the processing of customer orders and four frequency
proﬁles.
unliketheothertwopetrinets,theinitialmarkingisempty.insteadasource
and a sink transition have been added. transition t0(create) creates the order
while t13 ( destroy) marks the end of the order. this pattern is often used to
model an unknown number of cases.
suppose that only the steps t1(register),t6(replenish),t8(ship goods),t9
(send bill),t11(receive payment),and t12(archive)arerecorded.figure5shows
four frequency proﬁles ( fp1,fp2,fp3,a n d fp4). the ip problems corresponding
totheﬁrsttwoproﬁles( fp1and fp2),bothhaveasolution.itisalsoeasytosee
that fp1and fp2both indeed match with the petri net. note that in the ﬁrst
proﬁle there are no replenishment orders and no reminders, i.e., t4,t6a n d t10
donotﬁre.itisalsointerestingtonotethatthenumberoftimes t3and t7ﬁreis
not constrained by fp1, however, by the objective function their frequencies are
setto0.inthesecondproﬁlethereare10replenishmentordersand5reminders.
the ip problems corresponding to the last two proﬁles ( fp3and fp4), both do
not have a solution and, indeed, fp3and fp4do not match with the petri net.infp3therearenotenoughbills(70)tojustifythenumberofpayments(80).in
fp4there are not enough shipments.
5 extensions
alinearprogramming(lp)problemcanbesolvedinpolynomialtimewhilean
ipproblemisnpcomplete[11,13].therefore,itmaybeinterestingtoconsider
the lp relaxation of ip(pn,m, fp). we expect that in some cases this will
provide good results. note that often the rounded lp relaxation provides a
feasible but non-optimal solution (but not always, cf. the example net shown
on page 269 in [3]). since the objective function is of less interest, this is not aproblem. also note that if the ip problem has a solution the lp problem will
also have a solution. therefore, theorem 1 also holds for the lp relaxation. as
aresultthelpproblemcanbeusedtoquicklypointoutdiscrepanciesbetweenthe process model and the frequency proﬁle.
the lp relaxation is also interesting if the frequency proﬁle is not exact
or if we want to abstract from exceptions, i.e., if we consider noisewe are not
interestedintheexactnumberofﬁringsbutinanapproximatenumber.suppose
we want to allow a margin of 10 percent. to specify this we replace the ﬁrst
constraint in deﬁnition 3 ( f
t=fp(t)) by two weaker constraints: ft≥0.9fp(t)
andft≤1.1fp(t). such approximations are also needed if we collect data for a
limited period with an unknown number of tokens in the initial marking.
deﬁnition 4. let(pn,m)be a marked petri net with pn =(p,t,f),f p∈
t/negationslash→i n a frequency proﬁle, and αthe noise level ( 0≤α≤1) . the corresponding
lp (ip) problem allowing for αnoise:
min/summationtext
t∈tft
s.t.ft≥(1−α)fp(t) for all t∈dom(fp)
ft≤(1+α)fp(t) for all t∈dom(fp)
f(t,p)=ftfor all ( t, p)∈f∩(t×p)
f(p,t)=ftfor all ( p, t)∈f∩(p×t)
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥0 for all p∈p
ft≥0 for all t∈t
ft(integer) for all t∈t
f(x,y )(integer) for all ( x, y)∈f
notethatdeﬁnition4deﬁnesbothanlpandandipproblem.theonlydiﬀer-
ence is that for the lp problem the variables do not need to be integers.
another extension is the situation where multiple transitions refer to the
same event, e.g., in sap multiple functions in the epc may generate the same
transaction. this corresponds to a labeled petri net with multiple transitions
having the same label. again this is easy to incorporate in the ip problem.thefrequencyproﬁleisnolongeramappingfromtransitionstofrequenciesbut
from transition labels to frequencies and the ﬁrst constraint should be replaced
as indicated below.deﬁnition 5. let(pn,m)be a marked petri net with pn =(p,t,f),las e t
of labels, lab ∈t/negationslash→la labeling function, and fp ∈l/negationslash→i n a frequency proﬁle.
the corresponding ip problem is:
min/summationtext
t∈tft
s.t./summationtext
t∈dom (lab)|lab(t)=lft=fp(l) for all l∈l
f(t,p)=ftfor all ( t, p)∈f∩(t×p)
f(p,t)=ftfor all ( p, t)∈f∩(p×t)
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥0 for all p∈p
ft≥0 for all t∈t
ftinteger for all t∈t
f(x,y )integer for all ( x, y)∈f
all results given in section 3 can be extended to labeled petri nets.
note that deﬁnitions 4 and 5 can be combined. these extensions show that
the formulation in terms of an lp/ip problem is easy to reﬁne or extend.
6 related work
theworkpresentedismostrelatedtothe“markingequation”knownfrompetri
nettheory[7,3,12]andthispaperbuildsonsomeoftheseresults.however,the
approachpresenteddiﬀersinatleasttwoways.firstofall,themarkingequationconsiders the initial andresulting marking while we only consider the initial
marking. second, we allow for transition frequencies that are unknown, i.e.,
the frequency proﬁle may be incomplete. moreover, the approach allows for theextensions described in section 5 while the marking equation does not. clearly
therearealsorelationswiththeclassicalresultsonplaceandtransitioninvariants
[4,12,8]. however, these are less direct. as indicated in the introduction, theproblem addressed resulted from the application of process mining techniques
[2]tosap.thiswasdoneinthecontextofconﬁgurableprocessmodels,cf.[10]
for more details.
7 conclusion
inspiredbyaproblemencounteredwhenapplyingprocessminingtechniquestosaptransactionlogs,thepapertackledtheproblemofcheckingwhetherapetrinet and a frequency proﬁle match. an ip problem was proposed to eﬃciently
implement a necessary but not suﬃcient condition. the approach allows for
extensions not possible in the traditional linear algebraic approaches [7,3,12].clearly, the application is not limited to sap transaction logs but is applicable
in any situation where processes are only monitored at an aggregate level, i.e.,
frequency proﬁles rather than event traces.
future research is aiming at a better characterization of the class of nets
for which ip(pn,m, fp) has a solution if and only if match(pn,m, fp). in this
paper, it was shown that for acyclic nets, marked graphs, and state machinesthis is the case. it seems that the characterizations given in [5] and the class of
st-nets (nets obtained by composing marked graphs and state machines) are agoodstartingpointforabeterunderstandingwhensolutionsoftheipproblem
are actually realizable.
acknowledgments. the author would like to thank eric verbeek of proof-
readingthepaperandmoniquejansen-vullersandmichaelrosemannfortheir
jointworkonminingsapandconﬁgurableprocessmodelswhichuncoveredtheproblem addressed in this paper.
references
1. w.m.p. van der aalst. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers ,8(1):21–66,1998.
2. w.m.p. van der aalst,b.f. van dongen,j. herbst,l. maruster,g. schimm,and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering ,47(2):237–267,2003.
3. j. desel. basic linear algebraic techniques of place/transition nets. in w. reisig
and g. rozenberg,editors, lectures on petri nets i: basic models ,volume 1491 of
lecture notes in computer science ,pages 257–308. springer-verlag,berlin,1998.
4. j. desel and j. esparza. free choice petri nets ,volume 40 of cambridge tracts
in theoretical computer science . cambridge university press,cambridge,uk,
1995.
5. k. van hee,n. sidorova,and m. voorhoeve. soundness and separability of work-
ﬂow nets in the stepwise reﬁnement approach. in w.m.p. van der aalst and
e. best,editors, application and theory of petri nets 2003 ,volume 2679 of lec-
ture notes in computer science ,pages 335–354. springer-verlag,berlin,2003.
6. g. keller and t. teufel. sap r/3 process oriented implementation . addison-
wesley,reading ma,1998.
7. t. murata. petri nets: properties,analysis and applications. proceedings of the
ieee ,77(4):541–580,april 1989.
8. w. reisig. petri nets: an introduction ,volume 4 of eatcs monographs in the-
oretical computer science . springer-verlag,berlin,1985.
9. w. reisig and g. rozenberg,editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag,berlin,1998.
10. m. rosemann and w.m.p. van der aalst. a conﬁgurable reference modelling lan-
guage. qut technical report,fit-tr-2003-05,queensland university of tech-
nology,brisbane,2003.
11. a. schrijver. theory of linear and integer programming . john wiley & sons,new
york,1998.
12. m. silva,e. teruel,and j.m. colom. linear algebraic and linear programming
techniques for the analysis of place/transition net systems. in w. reisig and
g. rozenberg,editors, lectures on petri nets i: basic models ,volume 1491 of
lecture notes in computer science ,pages 309–373. springer-verlag,berlin,1998.
13. l.a. wolsey. integer programming . john wiley & sons,new york,1998.