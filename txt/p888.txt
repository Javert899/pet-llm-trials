interactively exploring logs and mining models with
clustering, filtering, and relabeling
xixi lu, dirk fahland, wil m.p. van der aalst
eindhoven university of technology, the netherlands
fx.lu,d.fahland,w.m.p.v.d.aalst g@tue.nl
abstract. real-life event logs often contain many data quality issues, which ob-
struct existing discovery algorithms from discovering meaningful process models
and process analysts from conducting further process analysis. in this paper, we
present an integrated tool that provides support for dealing with three of these
data issues: logs comprising recordings of multiple heterogeneous variants of a
process; traces containing multitude of deviating events in an infrequent context;
event labels being imprecise. the tool is called log to model explorer and helps
users in interactively and iteratively exploring and preprocessing a log by clus-
tering, Ô¨Åltering and event relabeling, enabling them to discover more meaningful
process models.
keywords: process mining, log exploration, log preprocessing, trace clustering, log filter-
ing, duplicated tasks, event label reÔ¨Ånement, process discovery
1 exploring log for complementing process discovery
process mining takes as input an event log that contains event data about past process
executions. real-life event logs may have many data quality issues. for example, they
often contain various heterogeneous variants of the process. every case going through
the process may have some deviating events. moreover, events may have imprecise
and ambiguous labels. these data quality issues cause process discovery algorithms to
fail in extracting meaningful process models. although many methods and techniques
have been proposed for handling some particular data quality issues, no integrated,
explorative approach and support for preprocessing an event log has been proposed yet.
we discuss the use case using the the road trafÔ¨Åc fine log [1]. a user may start with
applying a discovery algorithm on the log. however, due to aforementioned data quality
issues, the user could obtained a rather complex model unsuitable for understanding the
process. fig. 1 shows a discovered model which contains a large loop in which each
activity can be either executed or skipped, suggesting that in this part activities have
been executed arbitrarily. however, there is no (set of) traces in the log showing this
arbitrary behavior. rather the log contains multiple different variants that are shown
in fig. 4. in order to identify these variants, the user would now have to pre-process the
copyright c2016 for this paper by its authors. copying permitted for private and academic
purposes.interactively exploring logs and mining models 45
this model has a large tau -loop with every activity in the loop can be skipped.
fig. 1: model discovered with inductive miner from a log with data quality issues.
log (by choosing from various techniques), then discover a model and evaluate whether
the model is good or further/different preprocessing is required. user would have to try
dozens clustering plugins, Ô¨Ålter the log in various ways and apply multitude discovery
algorithms, not to mention the parameters he/she need to set when trying them. this
makes exploring a log a rather laborious task, especially if the user does not know
where the issue lies and the methods he needs may be distributed over different tools.
support for interactively exploring a log for discovering suitable models is missing.
this paper describes the plugin log to model explorer in the tracematching pack-
age of the process mining framework prom2. the plugin allows users explore different
views on a log by integrating the support for three main preprocssing functionalities:
clustering traces into variants, Ô¨Åltering infrequent behavior, and reÔ¨Åning imprecise la-
bels. the tool immediately shows the result of each preprocessing step by for example
visualizing the model discovered. this allows user interactively and iteratively explore
the log and discover models of interest. it integrates our previous work on clustering,
Ô¨Åltering [2] and relabeling techniques [3] for control-Ô¨Çow behavior.
the aim of this demo paper is to demonstrate the basic concepts of the log to model
explorer and illustrate its general functionality and suitable use cases. we demonstrate
our ideas on a random sample of 1000 traces of the road trafÔ¨Åc fine (rtf) log [1].
a screencast which demonstrates the features of the plugin and how it can be used in
practice using the same log can be downloaded3. in sect. 2, we Ô¨Årst give an overview of
the tool and explain the three main functionalities: clustering, Ô¨Åltering and relabeling.
in the end, we discuss related tools and future work as we conclude.
2 the log to model explorer
our tool integrates three pre-processing operations on the log (clustering, Ô¨Åltering and
relabeling) with immediate discovery of a model on (parts of) the pre-processed log.
fig. 2 shows an overview of possible paths comprising these four steps. given an input
log, the tool starts with clustering the traces based on their behavioral similarity (1). by
selecting a cluster, the user is shown the corresponding sublog or the model discovered
on this sublog (4). optionally, the user may apply a Ô¨Ålter on this sublog to remove
infrequent events (2) and view the result of such Ô¨Ålter (4). next, for a cluster, the user
may choose to reÔ¨Åne event labels (3) while exploring different representations of models
(4). after reÔ¨Åning the labels, the user may decide to cluster the relabeled sublog again,
and so on, iteratively. fig. 3 shows the main gui of the tool, highlighted with the
enumerated sections that correspond to the aforementioned steps. both logs and models
at any stage can be exported for further analysis.
2availabel in the prom nightly builds under: http://promtools.org
3https://svn.win.tue.nl/repos/prom/documentation/tracematching/2016demo.mp4 or watch
online at https://vimeo.com/17672100946 lu et al.
event log
model n 
cluster 1
cluster n
 cluster n 
model 1
cluster n  
model n  
1. cluster 2. filter 3. relabel (repeat )4. discover4. discover
4. discover 4. discover
  
fig. 2: possible interactive exploration paths in the log to model explorer .
1. cluster view
2. filter view
3. relabel view
info view
 4. discover/visualize view 
4
fig. 3: the main gui of the log to model explorer plugin in the prom framework.
trace clustering . trace clustering is an essential step of log-preprocessing to identify
variants of the process in the log that are behaviorally similar [4]. a sublog of behav-
iorally similar traces is more likely to yield a more coherent and structured model. we
use the clustering technique of [2] that measures behavior similarities of traces and
builds a hierarchy of clusters, which we visualize as a tree in the cluster view (1) as
shown in fig. 3. the root node has a set of main clusters as its children. each main
cluster can be further expanded to view its sub-clusters. the user may select any (sub-
)cluster and explore the cluster further. when a user selects a cluster, the plugin invokes
the current visualizer, for example the inductive miner [5], which immediately shows
the model descovered that represents this part of the log. it is also possible to view
the selected cluster and its child-clusters together by checking the radio-button ‚Äú show
child-clusters ‚Äù. for example, fig. 4 shows that the user selected cluster 1982; the right-
hand side of the screen shows at the top the model discovered for cluster 1982 and below
the models for the two children of cluster 1982, i.e., the sub-variants. when inspecting
the two sub-clusters, we see that the Ô¨Årst one shows multiple executions ‚Äú payment ‚Äù
(in a loop) whereas the second sub-cluster shows no ‚Äú payment ‚Äù has been executed; the
model of the parent cluster 1982 combines both into a loop that can be skipped.
context-aware event filtering . next, the user may decide to Ô¨Ålter infrequent behav-
ior, sometimes interchangeably called deviations ornoise , from the traces of a cluster
to reveal the main behavior of the cluster. this Ô¨Åltering technique is based on the devi-
ation/noise detection described in [2] which does not requiring any normative process
model. we consider an event eof activity a infrequent (uncommon, deviating) if ehas a
context of preceding and succeeding events that is different from most other occurrencesinteractively exploring logs and mining models 47
parent -cluster 1982
sub-cluster 1
sub-cluster 2
0..ùëõpayments
1..ùëõpayments
no payment
fig. 4: interactive, visual comparison of a cluster and its sub-variants.
fig. 5: the models discovered by Ô¨Åltering events based on the frequency of their
context for 0%, 1% and 5% threshold.
of activity a. for example, assume a log with 99 traces habcd iand 1 trace habdbde i;
activity bhas two contexts, between aandc, and between candd; the latter one is
infrequent. in a similar way, the single occurrence of ecan be classiÔ¨Åed as infrequent.
our plugin provides a Ô¨Ålter to remove all such infrequently classiÔ¨Åed events below a
user-chosen threshold. the Ô¨Åltered log only shows the frequent behavior. selecting a
cluster (1993) in the rtf sample, we respectively obtain three models shown in fig. 5
by Ô¨Åltering the cluster by 0%, 1% and 5%. note that when setting the threshold to 5%,
the loop around ‚Äú payment ‚Äù is removed, revealing that less than 5% of the cases have a
second ‚Äú payment ‚Äù.
event relabeling . in addition to clustering and Ô¨Åltering, we also provide support for
reÔ¨Åning event labels. relabeling events allows user explore different representations
of the same log, in particular when events of the same activity have clearly different
contexts that are equally frequent. for example, assume the traces 1=habcd iand
2=habcbde iare equally frequent. rather than Ô¨Åltering out the second bin2, the
user may want to view and analyze all behavior in the log. giving the log as-is to a
discovery algorithm would introduce a loop for repeated execution of b, but also several
skip steps to allow dto occur after c(as in 1) and after b(as in 2), thus introducing
many more behaviors. alternatively, our plugin detects that the second bin2has
a different context and allows to relabel it to b2allowing to discover a more precise
model [3]. the user can inÔ¨Çuence the amount of relabeling by threshold parameters.
together with a discovery algorithm that guarantees discovering a Ô¨Åtting model, the user48 lu et al.
appeal to judge
appeal to prefecturepayment
skip
payment
the plugin automatically suggests imprecise labels for relabeling.   
the user may also select a set of labels for relabeling. 
the two sliders for influencing the amount of 
relabeling: to the left more relabeling; to the right 
less relabeling.
fig. 6: identifying two different variants within a process through event relabeling.
may now explore different models for the (sub)log that are all Ô¨Åtting but have different
precision (generalization). taking the rtf sample, the relabeling allowed us to Ô¨Ånd the
duplicated tasks (‚Äú payment ‚Äù, ‚Äúadd pentaly ‚Äù and ‚Äú send for credit collection ‚Äù) and to
discover two alternative paths in the model as shown in fig. 6: if offenders decide to
‚Äúappeal to judge ‚Äù, then there is always a ‚Äú payment ‚Äù; if offenders decide to ‚Äú appeal to
prefecture ‚Äù, then there are alternatives to skip ‚Äú payment ‚Äù. user may export discovered
models, relabeled logs or original logs of cluster in prom for further analysis.
conclusion, limitation and future work . in this paper, we presented the log to
model explorer as an integrated tool for log preprocessing and discovering more suit-
able models for a log. we showed that the tool supports three main functionalities: trace
clustering, infrequent event Ô¨Åltering, and event label reÔ¨Ånement. currently, commercial
tools such as disco and celonis4have extensive support for Ô¨Åltering a log for obtaining
a variant but require the user to know which variant he/she want to have. furthermore,
these tools also suffer from the imprecise label problems and often discover spaghetti-
like process maps. available academic tools focus on solving one particular data qual-
ity issue; using them iteratively is tedious. a limitation of our tool is its performance
in handling large logs; the running time scales polynomial in number of events. cur-
rently, random sampling is used for improving the performance. as next step, we plan
to generalize the tool into a framework for exploring an event log, allowing different
clustering, Ô¨Åltering and log visualization techniques to be integrated.
references
1. de leoni, m., mannhardt, f.: road trafÔ¨Åc fine management process. technical report,
eindhoven university of technology (2015)
2. lu, x., fahland, d., van den biggelaar, f.j.h.m., van der aalst, w.m.p.: detecting deviating
behaviors without models. in: bpm 2015, workshops, springer (2015) (to appear)
3. lu, x., fahland, d., van den biggelaar, f.j.h.m., van der aalst, w.m.p.: handling duplicated
tasks in process discovery by reÔ¨Åning event labels. in: bpm 2016, springer (2016) (to appear)
4. greco, g., guzzo, a., pontieri, l., sacc `a, d.: discovering expressive process models by
clustering log traces. ieee trans. knowl. data eng. 18(8) (2006) 1010‚Äì1027
4disco : https://fluxicon.com/disco/ ; and celonis : http://www.celonis.de/interactively exploring logs and mining models 49
5. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured process
models from event logs - a constructive approach. in: application and theory of petri
nets and concurrency. (2013) 311‚Äì329