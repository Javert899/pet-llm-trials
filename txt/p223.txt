process mining for ubiquitous mobile systems:
an overview and a concrete algorithm
a.k.a. de medeiros, b.f. van dongen, w.m.p. van der aalst, and a.j.m.m.
weijters
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
{a.k.medeiros, b.f.v.dongen, w.m.p.v.d.aalst, a.j.m.m.weijters }@tm.tue.nl
abstract. ubiquitous mobile systems (umss) allow for automated cap-
turing of events. both mobility and ubiquity are supported by electronicmeans such as mobile phones and pdas and technologies such as rfid,
bluetooth, wlan, etc. these can be used to automatically record hu-
man behavior and business processes in detail. umss typically also allowfor more ﬂexibility. the combination of ﬂexibility (i.e., the ability to de-
viate from standard procedures) and the automated capturing of events,
provides an interesting application domain for process mining . the goal
of process mining is to discover process models from event logs. the α-
algorithm is a process mining algorithm whose application is not limited
to ubiquitous and/or mobile systems. unfortunately, the α-algorithm is
unable to tackle so-called “short loops”, i.e., the repeated occurrence of
the same event. therefore, a new algorithm is proposed to deal with
short loops: the α
+-algorithm. this algorithm has been implemented in
the emit tool.
keywords : process mining, workﬂow mining, petri nets, mobile computing, ubiquitous
computing.
1 process mining in ubiquitous mobile systems
since mark weiser ﬁrst described it in 1991 [19], ubiquitous computing has trans-
formed from a fairy-tale to reality. unlike the traditional situation where people
share a computer (mainframe) or where there is a one-to-one correspondencebetween people and computers (pc), people are surrounded by computing de-
vices. these devices may have a ﬁxed location (cf. “smart homes”), but increas-
ingly these devices are mobile. typical examples that exist today are pda’s
and mobile phones. new concepts like “smart clothes” or “wearable comput-
ers” illustrate future applications. research projects such as uwa (ubiquitousweb applications, cf. www.uwaproject.org) and motion (mobile teamwork
infrastructure for organizations networks, cf. www.motion.softeco.it) illustrate
the scientiﬁc challenges ubiquitous and/or mobile systems are posing.
clearly, ubiquitous mobile systems (umss) will change the way people work
[10]. however, in this paper we do not discuss the impact of new technologies on
people and organizations but focus on the use of process mining to monitor theprocesses where umss are involved. the main contribution is an extension of
theα-algorithm [7] to tackle so-called “short loops” [13], i.e., the paper consists
of two clearly distinguishable parts: (1) an introduction to process mining andits relevance for umss and (2) a concrete algorithm called the α+-algorithm.
we start with the ﬁrst part and discuss the relation between process mining andumss.
umss are enabled by recent developments in various ﬁelds. miniaturization
and mass fabrication of “computer-like devices” allows for an omnipresence of
computing power. this combined with advances in wireless communication havemade mobile computing a reality. the diﬀerence between phones and portable
computers (e.g., pdas) is fading, thus illustrating this trend. current technolo-
gies such as bluetooth and wlan enable new ways of cooperation. rfid tagsallows for new ways of “synchronizing” the physical and electronic worlds. these
technologies have in common that potentially it can be used to automatically
capture data on work processes and other human behavior. humans are very
good in problem solving but are typically not very accurate or thorough in
recording information on events that take place. a human’s sensory and shortterm memories have limited capacity and data entry is considered a tedious job.
therefore, umss can serve as natural assistants to record events.
1
umss typically allow for more ﬂexibility than traditional information sys-
tems. for many work processes this increased ﬂexibility will trigger the need tomonitor things more closely. the combination of availability of event data and
the desire to monitor suggests the use of process mining techniques. fueled by
the omnipresence of event logs in transactional information systems (cf. wfm,erp, crm, scm, and b2b systems), process mining has become a vivid re-
search area [5, 6]. until recently, the information in these event logs was rarely
used to analyze the underlying processes. process mining aims at improving thisby providing techniques and tools for discovering process, control, data, orga-
nizational, and social structures from event logs, i.e., the basic idea of process
mining is to diagnose business processes by mining event logs for knowledge.
the event log typically contains information about events referring to an ac-
tivity and a case. the case (also named process instance) is the “thing” which is
being handled, e.g., a customer order, a job application, an insurance claim, abuilding permit, etc. the activity (also named task, operation, action, or work-
item) is some operation on the case. typically, events have a timestamp indicat-
ing the time of occurrence. moreover, when people are involved, event logs willtypically contain information on the person executing or initiating the event,
i.e., the originator . based on this information several tools and techniques for
process mining have been developed [2, 4, 5, 7–9, 11, 12, 15, 17, 18]. in this paperwe present the α
+-algorithm. this is a new algorithm focusing on the control-
ﬂow (i.e., process) perspective. it extends the α-algorithm [7] by addressing the
problem of “short loops” [13].
the remainder of this paper is organized as follows. section 2 introduces the
concept of process mining. section 3 describes the α-algorithm and its supporting
1note that in most mobile systems there is a communication asymmetry, i.e., the
bandwidth downstream (server-to-client) is much larger than upstream. this may
complicate data collection in a mobile system. however, the bandwidth required to
record events is typically moderate.deﬁnitions. section 4 presents the new approach to tackle length-two loops using
theα-algorithm. section 5 shows how to extend the approach in section 4 to
mine also length-one loops. section 6 discusses related works. section 7 has the
conclusions.
2 process mining: an introduction
we assume that in umss, information on events (e.g., the execution of a task
by a worker) is recorded in a log.
to illustrate the principle of process mining,case identiﬁer task identiﬁer
case 1 task a
case 2 task a
case 3 task a
case 3 task b
case 1 task b
case 1 task c
case 2 task c
case 4 task a
case 2 task b
case 2 task d
case 5 task e
case 4 task c
case 1 task d
case 3 task c
case 3 task d
case 4 task b
case 5 task f
case 4 task d
table 1. an event log.we consider the event log shown in table 1. this
log contains information about ﬁve cases (i.e.,process instances) and six tasks (a..f). based
on the information shown in table 1 and by
making some assumptions about the complete-ness of the log (i.e., if a task can follow another
task, there is an event trace to show this) we can
deduce for example the process model shown infigure 1. the model is represented in terms of
a petri net [16]. after executing a, tasks b and
c are in parallel. note that for this examplewe assume that two tasks are in parallel if they
appear in any order. by distinguishing between
start events and end events for tasks it is pos-
sible to explicitly detect parallelism. instead of
starting with a the process can also start withe. task e is always followed by task f. table 1
contains the minimal information we assume to
be present.
for this simple example, it is quite easy to
construct a process model that is able to regen-
erate the event log. for larger process models this is much more diﬃcult. for
example, if the model exhibits alternative and parallel routing, then the processlog will typically not contain all possible combinations. moreover, certain paths
through the process model may have a low probability and therefore remain
undetected. noisy data (i.e., logs containing exceptions) can further complicatematters [18]. these are just some of the problems that we need to face in process
mining research. in this paper we assume perfect information: (i) the log must
be complete (i.e., if a task can follow another task directly, the log contains an
example of this behavior) and (ii) the log is noise free (i.e., everything that is
registered in the log is correct).
process mining can be viewed as a three-phase process: pre-processing ,pro-
cessing and post-processing . in the pre-processing phase, based on the assump-
tion that the input log contains enough information, the ordering relations be-
tween tasks are inferred. the processing phase corresponds to the execution ofab
cd
e f
fig. 1. a process model corresponding to the event log.
the mining algorithm, given the log and the ordering relations as input. in our
case, the mining algorithm is the α-algorithm [7]. during post-processing, the
discovered model (in our case a petri-net) can be ﬁne-tuned and a graphicalrepresentation can be build.
the focus of most research in the domain of process mining is on mining
heuristics based on ordering relations of the events in the event log. consid-erable work has been done on heuristics to mine event-data logs to produce a
process model. typically these models can be characterized as workﬂow models.
existing heuristic-based mining algorithms have limitations as indicated in [13].typically, more advanced process constructs are diﬃcult to handle for existing
mining algorithms. some of these problematic constructs are common in work-
ﬂow applications and, therefore, need to be addressed to enable application inpractice. among these constructs are short loops (see figure 2) .
the main aim of our research is to extend the class of nets we can correctly
mine. the α-algorithm is able to correctly mine sound swf-nets without short
loops [7]. in this paper we prove that it is possible to correctly mine all nets
in the class of sound swf-nets . the new mining algorithm is called α
+and is
b a s e do nt h e α-algorithm.
original net:
i a o f
eb
c
ddiscovered net
ia
o
f ebc
d
fig. 2. an example of a sound swf-net the α-algorithm cannot correctly mine.
3 wf-nets and the α-algorithm
this section contains the main deﬁnitions used in the α-algorithm that are also
relevant to the new α+-algorithm presented in this paper. for more information
on the α-algorithm and structured workﬂow nets (swf-nets) the reader is
referred to [7]. we assume some basic knowledge of petri nets. readers notfamiliar with basic concepts such as ( p,t,f ) as a representation for a petri net,
the ﬁring rule, ﬁring sequences, preset •x, postset x•, boundedness, liveness,
reachability, etc. are referred to [1, 16].3.1 workﬂow nets
before introducing the α-algorithm we brieﬂy discuss a subclass of petri nets
called a workflow nets (wf-nets). this subclass is tailored towards modeling
the control-ﬂow dimension of a workﬂow.2it should be noted that a wf-net
speciﬁes the dynamic behavior of a single case in isolation [1].
deﬁnition 3.1. (workﬂow nets) letn=(p,t,f ) be a petri net and ¯ta
fresh identiﬁer not in p∪t.nis a workﬂow net (wf-net) iﬀ:
1.object creation :pcontains an input place isuch that •i=∅,
2.object completion :pcontains an output place osuch that o•=∅,
3.connectedness :¯n=(p,t∪{¯t},f∪{(o,¯t),(¯t, i)}) is strongly connected,
the petri net shown in figure 1 is a wf-net. note that although the net is
not strongly connected, the short-circuited net with transition ¯tis strongly con-
nected. even if a net meets all the syntactical requirements stated in deﬁni-tion 3.1, the corresponding process may exhibit errors such as deadlocks, tasks
which can never become active, livelocks, garbage being left in the process after
termination, etc. therefore, we deﬁne the following correctness criterion.
deﬁnition 3.2. (sound) letn=(p,t,f ) be a wf-net with input place i
and output place o.nissound iﬀ:
1.safeness :(n,[i]) is safe,
2.proper completion : for any marking s∈[n,[i]/angbracketright,o∈simplies s=[o],
3.option to complete : for any marking s∈[n,[i]/angbracketright,[o]∈[n,s/angbracketright,a n d
4.absence of dead tasks :(n,[i]) contains no dead transitions.
the set of all sound wf-nets is denoted w.
the wf-net shown in figure 1 is sound. soundness can be veriﬁed using stan-
dard petri-net-based analysis techniques [1, 3].
most workﬂow systems oﬀer standard building blocks such as the and-split,
and-join, xor-split, and xor-join [3]. these are used to model sequential,
conditional, parallel and iterative routing. clearly, a wf-net can be used to
specify the routing of cases. tasks , also referred to as activities , are modeled by
transitions and causal dependencies are modeled by places and arcs. in fact,a place corresponds to a condition which can be used as pre- and/or post-
condition for tasks. an and-split corresponds to a transition with two or more
output places, and an and-join corresponds to a transition with two or moreinput places. xor-splits/xor-joins correspond to places with multiple outgo-
ing/ingoing arcs. given the close relation between tasks and transitions we use
the terms interchangeably.
our process mining research aims at rediscovering wf-nets from event logs.
however, not all places in sound wf-nets can be detected. for example places
may be implicit which means that they do not aﬀect the behavior of the process.these places remain undetected. therefore, we limit our investigation to wf-
nets without implicit places.
2note that we use the words workﬂow and process interchangeably.deﬁnition 3.3. (implicit place) letn=(p,t,f ) be a petri net with initial
marking s. a place p∈pis called implicit in ( n,s) if and only if, for all reachable
markings s/prime∈[n,s/angbracketrightand transitions t∈p•,s/prime≥•t\{p}⇒s/prime≥•t.3
figure 1 contains no implicit places. however, adding a place pconnecting tran-
sition aanddyields an implicit place. no mining algorithm is able to detect
psince the addition of the place does not change the behavior of the net and
therefore is not visible in the log.
(i) (ii)
fig. 3. constructs not allowed in swf-nets.
for process mining it is very important that the structure of the wf-net
clearly reﬂects its behavior. therefore, we also rule out the constructs shown in
figure 3. the left construct illustrates the constraint that choice and synchro-
nization should never meet. if two transitions share an input place, and therefore
“ﬁght” for the same token, they should not require synchronization. this means
that choices (places with multiple output transitions) should not be mixed withsynchronizations. the right-hand construct in figure 3 illustrates the constraint
that if there is a synchronization all preceding transitions should have ﬁred, i.e.,
it is not allowed to have synchronizations directly preceded by an xor-join.wf-nets which satisfy these requirements are named structured workﬂow nets
and are deﬁned as:
deﬁnition 3.4. (swf-net) a wf-net n=(p,t,f )i sa n swf-net (struc-
tured workﬂow net) if and only if:
1. for all p∈pandt∈twith ( p, t)∈f:|p•|>1 implies |•t|=1 .
2. for all p∈pandt∈twith ( p, t)∈f:|•t|>1 implies |•p|=1 .
3. there are no implicit places.
this paper introduces the α
+-algorithm, which mines allswf-nets. the α+-
algorithm is based on the α-algorithm, which correctly mines swf-nets without
short loops . in our solution, we ﬁrst tackle length-two loops (see section 4) and
then also length-one loops (see section 5). while tackling length-two loops only,
we do not allow the nets to have length-one loops. that is why we introduce the
deﬁnition of one-loop-free workﬂow nets .
deﬁnition 3.5. (one-loop-free workﬂow nets) letn=(p,t,f )b ea
workﬂow net. nis a one-loop-free workﬂow net if and only if for any t∈t,
t•∩• t=∅.
3[n,s/angbracketrightis the set of reachable markings of net nwhen starting in marking s,p•is the
set of output transitions of p,•tis the set of input places of t,a n d ≥is the standard
ordering relation on multisets.3.2 the α-algorithm
the starting point for process mining is the event log. a log is a set of traces.
event traces and logs are deﬁned as:
deﬁnition 3.6. (event trace, event log) lettbe a set of tasks. σ∈t∗is
anevent trace andw∈p(t∗)i sa n event log .4
from an event log, ordering relations between tasks can be inferred. in the case
of the α-algorithm, every two tasks in the event log must have one of the follow-
ing four ordering relations: >w(follows), →w(causal), /bardblw(parallel) and # w
(unrelated). these ordering relations are extracted based on local information
in the event traces. the ordering relations are deﬁned as:
deﬁnition 3.7. (log-based ordering relations) letwbe an event log over
t, i.e., w∈p(t∗). let a, b∈t:
–a>wbif and only if there is a trace σ=t1t2t3...t n−1andi∈{1,...,n −2}
such that σ∈wandti=aandti+1=b,
–a→wbif and only if a>wbandb/negationslash>wa,
–a#wbif and only if a/negationslash>wbandb/negationslash>wa,a n d
–a/bardblwbif and only if a>wbandb>wa.
to ensure the event log contains the minimal amount of information necessary
to mine the process, the notion of log completeness is deﬁned as:
deﬁnition 3.8. (complete event log) letn=(p,t,f ) be a sound wf-net,
i.e.,n∈w.wis an event log of nif and only if w∈p(t∗) and every trace
σ∈wis a ﬁring sequence of nstarting in state [ i] and ending in state [ o], i.e.,
(n,[i])[σ/angbracketright(n,[o]).wis a complete event log of nif and only if (1) for any event
logw/primeofn:>w/prime⊆>w, and (2) for any t∈tthere is a σ∈wsuch that t∈σ.
for figure 1, a possible complete event log wis:abcd,acbd and ef. from this
complete log, the following ordering relations are inferred:
–(follows) a>wb,a>wc,b>wc,b>wd,c>wb,c>wdande>wf.
–(causal) a→wb,a→wc,b→wd,c→wdande→wf.
–(parallel) b/bardblwcandc/bardblwb.
now we can give the formal deﬁnition of the α-algorithm followed by a more
intuitive explanation.
deﬁnition 3.9. (mining algorithm α)letwbe an event log over t.t h e
α(w) is deﬁned as follows.
1.tw={t∈t|∃σ∈wt∈σ},
2.ti={t∈t|∃σ∈wt=ﬁrst(σ)},
3.to={t∈t|∃σ∈wt=last(σ)},
4t∗is the set of all sequences that are composed of zero of more tasks from t.p(t∗)
is the powerset of t∗, i.e., w⊆t∗.4.xw={(a, b)|a⊆tw∧b⊆tw∧∀a∈a∀b∈ba→wb∧∀a1,a2∈aa1#wa2∧
∀b1,b2∈bb1#wb2},
5.yw={(a, b)∈xw|∀ (a/prime,b/prime)∈xwa⊆a/prime∧b⊆b/prime=⇒(a, b)=(a/prime,b/prime)},
6.pw={p(a,b )|(a, b)∈yw}∪{iw,ow},
7.fw={(a, p (a,b ))|(a, b)∈yw∧a∈a}∪{ (p(a,b ),b)|(a, b)∈
yw∧b∈b}∪ { (iw,t)|t∈ti}∪ { (t, ow)|t∈to},a n d
8.α(w)=(pw,tw,fw).
theα-algorithm works as follows. first, it examines the event traces and (step
1) creates the set of transitions ( tw) in the workﬂow, (step 2) the set of output
transitions ( ti) of the source place , and (step 3) the set of the input transitions
(to) of the sink place5. in steps 4 and 5, the α-algorithm creates sets ( xwand
yw, respectively) used to deﬁne the places of the discovered wf-net. in step 4,
theα-algorithm discovers which transitions are causally related. thus, for each
tuple ( a, b)i nxw, each transition in set acausally relates to alltransitions
in set b, and no transitions within a(orb) follow each other in some ﬁring
sequence. these constraints to the elements in sets aandballow the correct
mining of and-split/join and xor-split/join constructs. note that the xor-
split/join requires the fusion of places. in step 5, the α-algorithm reﬁnes set xw
by taking only the largest elements with respect to set inclusion. in fact, step
5 establishes the exact amount of places the discovered net has (excluding the
source place iwand the sink place ow). the places are created in step 6 and
connected to their respective input/output transitions in step 7. the discovered
wf-net is returned in step 8.
finally, we deﬁne what it means for a wf-net to be rediscovered .
deﬁnition 3.10. (ability to rediscover) letn=(p,t,f ) be a sound wf-
net, i.e., n∈w, and let αbe a mining algorithm which maps event logs of n
onto sound wf-nets, i.e., α:p(t∗)→w . if for any complete event log wof
nthe mining algorithm returns n(modulo renaming of places), then αis able
torediscover n.
note that no mining algorithm is able to ﬁnd names of places. therefore, we
ignore place names, i.e., αis able to rediscover nif and only if α(w)=n
modulo renaming of places.
4 length-two loops
in this section we ﬁrst show why a new notion of log completeness is necessary tocapture length-two loops in swf-nets and why the α-algorithm does not capture
length-two loops in swf-nets (even if the new notion of log completeness is
used). then a new deﬁnition of ordering relations is given, and ﬁnally we provethat this new deﬁnition of ordering relations is suﬃcient to tackle length-two
loops with the α-algorithm.
5in a wf-net, the source place ihas no input transitions and the sink place ohas no
output transitions.log completeness as deﬁned in deﬁnition 3.8 is insuﬃcient to detect length-
two loops in swf-nets. as an example, consider the swf-net in figure 2 (left-hand side). this net can have the complete log: ab, acdb, edcf, ef . however, by
looking at this log it is not clear whether transitions cand dare in parallel
or belong to a length-two loop. thus, to correctly detect length-two loops inswf-nets, the following new deﬁnition of complete log is introduced.
deﬁnition 4.1. (loop-complete event log) letn=(p,t,f )b eas w f -
net and wa log of n.wis a loop-complete event log of nif and only if wis
complete and for all event logs w
/primeofn: if there is a ﬁring sequence σ/prime∈w/prime
with σ/prime=t1t2t3...t n/primeandi/prime∈{1,...,n/prime−2}such that ti/prime=ti/prime+2=aand
ti/prime+1=b, for some a, b∈t:a/negationslash=b, then there is a ﬁring sequence σ∈wwith
σ=t1t2t3...t nandi∈{1,...,n −2}such that ti=ti+2=aandti+1=b.
note that a loop-complete event log for the net in figure 2 will contain one or
more traces with the substrings “ cdc” and “ dcd”. by deﬁnition, all loop-complete
event logs are also complete event logs.
the new notion of a loop-complete event log is necessary but not suﬃcient
to mine length-two loops. the main reason is that the tasks in the length-two
loop are inferred to be in parallel. for example, for the net in figure 2, any loop-complete event log will lead to c/bardbl
wdandd/bardblwc. however, these transitions are
not in parallel. in fact, they are connected by places that can only be correctly
mined by the α-algorithm if at least c→wdandd→wc. using this insight,
we redeﬁne deﬁnition 3.7, i.e., we provide the following new deﬁnitions for the
basic ordering relations →wand/bardblw.
deﬁnition 4.2. (ordering relations capturing length-two loops) letw
be a loop-complete event log over t, i.e., w∈p(t∗). let a, b∈t:
–a/trianglewbif and only if there is a trace σ=t1t2t3...t nandi∈{1,...,n −2}
such that σ∈wandti=ti+2=aandti+1=b,
–a/diamondmathwbif and only if a/trianglewbandb/trianglewa,
–a>wbif and only if there is a trace σ=t1t2t3...t n−1andi∈{1,...,n −2}
such that σ∈wandti=aandti+1=b,
–a→wbif and only if a>wband ( b/negationslash>waora/diamondmathwb),
–a#wbif and only if a/negationslash>wbandb/negationslash>wa,a n d
–a/bardblwbif and only if a>wbandb>waanda/negationslash/diamondmathwb.
note that, in the new deﬁnition 4.2, aandbare also in the a→wbrelation if
a>wbandb>waand the substrings abaandbabare contained in the event
traces.
however, there is still a problem. length-one loops in the net may also pro-
duce “ cdc” and “ dcd” patterns in the event traces, cf. figure 4. therefore, to
prove that the α-algorithm can correctly mine length-two loops when using the
new deﬁnitions of loop-complete event log and ordering relations, we assume
that the net is a sound one-loop-free swf-net .a b
dc
i o a b
dc
i o
fig. 4. example illustrating why length-one loops are not allowed when mining length-
two loops. note that both nets have loop-complete event logs that contain traces withthe substrings “ cdc”o r“ dcd”.
theorem 4.3. letn=(p,t,f ) be an one-loop-free sound swf-net. let w
be a loop-complete event log of n. for any a, b∈t, such that •a∩b•/negationslash=∅and
a•∩• b/negationslash=∅,a/trianglewbimplies b/trianglewa.
proof. for a detailed proof we refer to [14]. ✷
using this result, it is possible to prove the following theorem which shows that
the new ordeing relations solve the problem of length-two loops.
theorem 4.4. letn=(p,t,f ) be a sound one-loop-free swf-net and let w
be a loop-complete event log of n. then α(w)=nmodulo renaming of places.
proof. see [14] for a detailed proof. ✷
in the next section, we show how to handle the general case (all sound swf-
nets).
5 length-one loops
in this section we ﬁrst show some of the properties of length-one loops in sound
swf-nets. then we present an algorithm (called α+) that correctly mines all
sound swf-nets.
length-one loops are connected to a single place in any sound swf-net and
this place cannot be the source or the sink place of the sound swf-net, as is
stated in the following theorem:
theorem 5.1. letn=(p,t,f ) be a sound swf-net. for any a∈t,a•∩•a/negationslash=
∅implies a/negationslash∈i•,a/negationslash∈•o,a•=•aand|•a|=1 .
proof. see [14]. ✷
property 5.2. letn=(p,t,f ) be a sound swf-net. let wbe a complete
event log of n. for any a∈t:•a∩a•/negationslash=∅implies there are b, c∈t:a/negationslash=band
b/negationslash=canda/negationslash=candb→waanda→wcandb→wcand•c=•a.
theorem 5.3. letn=(p,t,f ) be a sound swf-net. let n/prime=(p/prime,t/prime,f/prime)
be a one-loop-free pt-net such that p/prime=p,t/prime={t∈t|•t∩t•=∅},a n d
f/prime=f∩(p/prime×t/prime∪t/prime×p/prime). let wbe a loop-complete event log of nand
letw−l1lbe the log created by excluding the occurrences of length-one-loop
transitions from every event trace in w. then:
1.n/primeis a sound one-loop-free swf-net,2.α(w−l1l)=n/primemodulo renaming of places.
proof. see [14]. ✷
theorem 5.3 states that the main net structure (called n/primein the theorem) of
any sound swf-net can be correctly discovered by the α-algorithm whenever
length-one-loop transitions are removed from the input log. consequently, sincelength-one-loop transitions are always connected to a single place in sound swf-
net (theorem 5.1), we can use the α-algorithm to mine the main net structure
n
/primeand then connect the length-one-loop transition to this net.
the solution to tackle length-one loops in sound swf-nets focuses on the
pre- and post-processing phases of process mining. the key idea is to identify
the length-one-loop tasks and the single place to which each task should beconnected. any length-one-loop task tcan be identiﬁed by searching a loop-
complete event log for traces containing the substring tt. to determine the correct
place pto which each tshould be connected in the discovered net, we must check
which transitions are directed followed by tbut do not direct follow t(i.e.pis an
output place of these transitions) and which transitions direct follow tbuttdoes
not direct follow them (i.e. pis the input place of these transitions). figure 5
shows the basic idea by illustrating a pre- and post-processing phase.
original net:
pre-processing phase
1-length-loop tasks:
"a": leftneighbor ="x", rightneighbor="y"
cleaned log:
xy
post-processing phasexy
xaay
xayoriginal loop
complete logprocessing phase
i x y o
i x y o
ainferred ordering relations:x -> yi x
ao y
fig. 5. example of the approach to tackle length-one loops in sound swf-net.
the algorithm - called α+- to mine sound swf-nets is formalized as follows.
note that the function eliminatetask maps any event trace σto a new one σ/prime
without the occurrence of a certain transition t.
deﬁnition 5.4. (mining algorithm α+)letwbe a loop-complete event log
over t,t h e α-algorithm as in deﬁnition 3.9 and the ordering relations as in
deﬁnition 4.2.
1.tlog={t∈t|∃σ∈w[t∈σ]}
2.l1l={t∈tlog|∃σ=t1t2...t n∈w;i∈{1,2,...,n }[t=ti−1∧t=ti]}
3.t/prime=tlog\l1l4.fl1l=∅
5. for each t∈l1l do:
(a)a={a∈t/prime|a>wt}
(b)b={b∈t/prime|t>wa}
(c)fl1l:=fl1l∪{(t, p (a\b,b\a)),(p(a\b,b\a),t)}
6.w−l1l=∅
7. for each σ∈wdo:
(a)σ/prime=σ
(b) for each t∈l1l do:
i.σ/prime:=eliminatetask (σ/prime,t)
(c)w−l1l:=w−l1l∪σ/prime
8. (pw−l1l,tw−l1l,fw−l1l)=α(w−l1l)
9.pw=pw−l1l
10.tw=tw−l1l∪l1l
11.fw=fw−l1l∪fl1l
12.α+=(pw,tw,fw)
theα+works as follows. first, it examines the event traces (step 1) and identi-
ﬁes the length-one-loop transitions (step 2). in steps 3 to 5, the places to whicheach length-one-loop transition should be connected to are identiﬁed and the
respective arcs are included in f
l1l. then, all length-one-loop transitions are
removed from the input log w−l1lto be processed by the α-algorithm (steps 6
and 7). in step 8, the α-algorithm discovers a workﬂow net based on the loop-
complete event log w−l1land the ordering relations as deﬁned in deﬁnition 4.2.
in steps 9 to 11, the length-one-loop transitions and their respective input andoutput arcs are added to the net discovered by the α-algorithm. the workﬂow
net with the added length-one loops is returned in step 12.
theorem 5.5. letn=(p,t,f ) be a sound swf-net and let w be a loop-
complete event log of n. using the ordering relations as in deﬁnition 4.2,
α
+(w)=nmodulo renaming of places.
proof. see [14]. ✷
the original net in figure 2 and the nets n1−4in figure 6 satisfy the require-
ments stated in theorem 5.5. therefore, they are all correctly discovered by the
α+-algorithm. in fact, the α+can be extended to correctly discover nets beyond
the class of sound swf-net (cf. [14]).
6 related work
the idea of process mining is not new [2, 5, 7–9, 11–13, 15, 17, 18] and most tech-niques aim at the control-ﬂow perspective. however, process mining is not limitedn1i a o db
c
i a o d
cn2
n3b
i a o hc
df
gb e
n4
i aib
cf
e
d h
eo j
fig. 6. examples of sound swf-nets that the α+-algorithm correctly mines.
to the control-ﬂow perspective. for example, in [4] we use process mining tech-
niques to construct a social network. for more information on process miningwe refer to a special issue of computers in industry on process mining [6] and
a survey paper [5]. in this paper, unfortunately, it is impossible to do justice to
the work done in this area.
the focus of this paper is on an extension of the α-algorithm. for more
information on the α-algorithm, we refer to [2, 7, 13, 18]. this paper tackles one
of the problems raised in [13] and should be considered as an extension of [7].for more detailed proofs we refer to a technical report [14].
to support our mining eﬀorts we have developed a set of tools including emit
[2], thumb [18], and minson [4]. these tools share a common xml format. formore details we refer to www.processmining.org.
7 conclusion
new technologies such as rfid, bluetooth, wlan, etc. and the omnipresenceof small computing devices (e.g., mobile phones and pdas) enable umss that
can be used to record human behavior and business processes in detail. the
combination of ﬂexibility (i.e., the ability to deviate from standard procedures)
and the automated capturing of events, suggests that umss form an interesting
application domain for process mining. in this paper, we did not elaborate on theapplication of process mining in this domain. instead, we focused on an extension
of the α-algorithm such that it can mine all sound swf-nets. the new algorithm
is called α
+.t h e α-algorithm is proven to correctly discover sound swf-nets
without length-one or length-two loops. the extension involves changes in the
pre- and post-processing phases. first, length-two loops are tackled by redeﬁning
the notion of log completeness and the possible ordering relations among tasks inthe process. this solution is addressed in the pre-processing phase only. then, the
solution to tackle length-two loops is extended to tackle also length-one loops.
the key property is that length-one-loop tasks are connected to single placesin sound swf-nets. therefore, the α+-algorithm (1) removes all occurrences
of length-one loops from the input log, (2) feeds in the α-algorithm with this
log and the new deﬁned ordering relations, and (3) reconnects all the length-
one loop tasks to their respective place in the net the α-algorithm produced.
in this paper and a technical report [14], we provide a formal proof that theα
+-algorithm correctly mines nets in the whole class of sound swf-nets.
through our website, www.processmining.org, we provide the tool emit that
implements the α+-algorithm. note that emit uses a generic xml-based input
format. in addition, emit provides adapters for tools like staﬀware, inconcert,
aris ppm, etc. we invite people developing umss to log information in our
xml format (cf. www.processmining.org). examples of possible applications weenvision include:
–patients and medical equipment are tagged while the medical staﬀ is equipped
with small computing devices. this way health-care processes can be moni-
tored to audit medical protocols, support the medical staﬀ (e.g, alerts), andsuggest improvements.
–service engineers are equipped with pdas, mobile phones (for internet con-
nection), and gps (for location). this way service processes can be analyzed.
–students use ubiquitous/mobile technologies to study anytime/anywhere. to
monitor progress and act accordingly, process mining is used to analyze thelearning process.
note that in each of these applications there will be repetitions. therefore, it is
essential that the α
+-algorithm is able to tackle short loops.
acknowledgements
the authors would like to thank minseok song, laura maruster, eric verbeek,
monique jansen-vullers, hajo reijers, michael rosemann, and peter van den
brand for their joint eﬀorts on process mining techniques and tools at eindhovenuniversity of technology.
references
1. w.m.p. van der aalst. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers , 8(1):21–66, 1998.
2. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
models from timed logs. in y. han, s. tai, and d. wikarski, editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
3. w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
4. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in m. weske, b. pernici, and j. desel, editors,
international conference on business process management (bpm 2004) ,l e c t u r e
notes in computer science, springer-verlag, berlin, 2004.5. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267, 2003.
6. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining ,s p e c i a l
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
7. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: dis-
covering process models from event logs. qut technical report, fit-tr-2003-03,
queensland university of technology, brisbane, 2003. (accepted for publication
in ieee transactions on knowledge and data engineering.).
8. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.
9. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
10. s. dustdar, h. gall, and r. schmidt. web services for groupware in distributed
and mobile collaboration. in p. cremonesi, editor, proceeding of the 12th ieee
euromicro conference on parallel, distributed and network based processing (pdp
2004) , pages 241–247. ieee computer society, los alamitos, ca, 2004.
11. j. herbst. a machine learning approach to workﬂow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
12. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
13. a.k.a. de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. workﬂow
mining: current status and future directions. in r. meersman, z. tari, and d.c.
schmidt, editors, on the move to meaningful internet systems 2003: coopis,
doa, and odbase , volume 2888 of lecture notes in computer science ,p a g e s
389–406. springer-verlag, berlin, 2003.
14. a.k.a. de medeiros, b.f. van dongen, w.m.p. van der aalst, and a.j.m.m. wei-
jters. process mining: extending the α-algorithm to mine short loops. beta
working paper series, wp 113, eindhoven university of technology, eindhoven,
2004.
15. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1–10. ieee computer society press, los alamitos, california, 2000.
16. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
17. m. sayal, f. casati, and m.c. shan u. dayal. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb’02) ,
pages 880–883. morgan kaufmann, 2002.
18. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151–162, 2003.
19. m. weiser. the computer for the 21st century. scientiﬁc american , 265(3):94–104,
1991.