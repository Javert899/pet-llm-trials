hybrid business process simulation: updating
detailed process simulation models using
high-level simulationsâˆ—
mahsa pourbafrani and wil m. p. van der aalst
chair of process and data science, rwth aachen university, germany
fmahsa.bafrani,wvdaalst g@pads.rwth-aachen.de
abstract. process mining techniques transfer historical data of orga-
nizations into knowledge for the purpose of process improvement. most
of the existing process mining techniques are \backward-looking" and
provide insights w.r.t. historical event data. foreseeing the future of pro-
cesses and capturing the eect of changes without applying them to the
real processes are of high importance. current simulation techniques that
benet from process mining insights are either at detailed levels, e.g.,
discrete event simulation (des), or at aggregated levels, e.g., system
dynamics (sd). system dynamics represents processes at a higher degree
of aggregation and account for the inuence of external factors on the
process. in this paper, we propose an approach for simulating business
processes that combines both types of data-driven simulation techniques
to generate holistic simulation models of processes. these techniques
replicate processes at various levels and for dierent purposes, yet they
both present the same process. sd models are used for strategical what-if
analysis, whereas des models are used for operational what-if analysis.
it is critical to consider the eect of strategical decisions on detailed
processes. we introduce a framework integrating these two simulation
models, as well as a proof of concept to demonstrate the approach in
practice.
keywords: process mining Â·discrete event simulation Â·hybrid process
simulation Â·scenario-based predictions Â·system dynamics
1 introduction
after bringing transparency into processes, the process mining mission is to nd
data-supported ways to improve the processes in dierent aspects, e.g., per-
formance metrics. in [2], the capability of process mining techniques to design
realistic simulation models is discussed. process mining supports designing the
simulation models by capturing all the aspects of the process in detail. however,
some inuential factors remain undiscovered. these undiscovered factors even-
tually aect the simulation results. for instance, the eciency of resources or
âˆ—funded by the deutsche forschungsgemeinschaft (dfg, german research foundation) under
germany's excellence strategy-exc-2023 internet of production - 390621612. we also thank the
alexander von humboldt (avh) stiftung for supporting our research.2 m. pourbafrani and wil m. p. van der aalst
fig. 1: general idea of designing comprehensive simulation models for business processes. we up-
date the detailed simulations (des) by the aggregated simulation (sd) results to take the high-
level/strategical eects into account. the dotted arrows represent the optional steps in the approach,
e.g., sd models can be given as inputs or can be derived from sd-logs (left). the dierent aggregated
levels of data used in or generated by des and sd simulations (right).
the eect of workload on the speed of resources is not taken into account when
a discrete event simulation model for a process is designed.
the presented approach in [11] is based on using process mining and system
dynamics (sd) to tackle these types of problems. system dynamics techniques
model a system and its boundary, i.e., environmental variables which inuence
the system and capture these inuences over steps of time. the advantage of
this approach is that the process variables are designed based on event logs at
higher levels, i.e., not a matter of single instances. for instance, the average
waiting time of customers in the process per day has a more signicant inu-
ence on the number of allocated resources per day than a long waiting time of
a single customer. it should be noted that high-level simulation techniques such
table 1: the general comparison of discrete event simulation (des) and system dynamics (sd)
techniques in process mining.
des in pm sd in pm
goal{detailed simulation of processes
{mimicking processes
{operational{high-level simulation of processes
{policy and decision-making
{strategical
usage operational strategical
data detailed event logs{coarse-grained process log:
{aggregated process variables over time
simulation
stepevents time steps, e.g., day
weakness not capturing external factors evaluation of results
as sd ignore the provided detail, which improves the accuracy of the simulation
results to some extent. on the contrary, detailed simulations in process mining,
i.e.,discrete event simulation (des), lack the high-level eects of process vari-
ables on each other as well as quality-based variables, e.g., the eect of tiredness
of resources on the execution time of cases. the overview of the comparison of
des and sd techniques in process mining simulation is shown in table 1. note
that standard event logs and aggregated process variables (higher level logs) are
referred to as detailed event logs and coarse-grained process logs, respectively.hybrid process simulation models 3
figure 1 (right) depicts the data granularity level in process mining for both
designing and re-generating simulation results, i.e., events in dess are trans-
formed into aggregated process variables such as v1andv2at each time step tw
in sds.
the raised concerns for simulation in process mining as mentioned speci-
cally for discrete event simulation in [1] show that only des models in process
mining for simulating processes are not sucient. a comprehensive business pro-
cess simulation should be able to exploit the detailed process steps, i.e., workow
and resources for every single case, and the strategical perspective, and external
factors at the same time. des and sd are at dierent levels and for dierent
purposes, yet, represent the same process with two views. therefore, exploiting
these two techniques in process mining makes designing a comprehensive simu-
lation of a business process possible. the direction of interaction between these
two techniques is based on business processes and scenarios [5]. the direction
can be one model updating the second model or both models updating each
other, resulting in bi-directional interaction.
in this paper, we propose a framework to generate comprehensive simulation
models for business processes. the framework aims to combine the advantages
of both simulation techniques as shown in fig. 1. using an event log of a pro-
cess that also can be generated by the process des model, we extract possible
aggregated process variables, e.g., average arrival rate per day. the event log
can be achieved by a des model of the business process using approaches such
as [16]. sd models are designed based on the generated coarse-grained process
logs, i.e., sd-logs, out of event logs [13]. the preprocessing step of our frame-
work is generating an event log, the corresponding sd-log, and two models at
dierent levels. using the provided input from the preprocessing step, we design
a method to dene and discover the overlapping variables between two process
simulation models since they are at dierent levels. the transformation phase to
update the des model using the updated variable from the sd model is the crit-
ical step of our approach, in which we use the designed detail simulation models
in process mining and a list of possible variables in an sd-log. for instance, the
eciency of resources, in reality, is not 100%, therefore, using an sd model, we
can incorporate the eect of tiredness, workload per day on the resources' e-
ciency, or the eect of their expertise and then update the resource service time
in the des model. with the continuation of des execution with the updated
variables, a new event log is generated, which includes the simulated eect from
the sd model.
the remainder of this paper is organized as follows. in section 2, we present
related work. in section 3, we introduce background concepts and notation. in
section 4, we present the proposed approach, which we evaluate in section 5.
section 7 concludes this work.4 m. pourbafrani and wil m. p. van der aalst
2 related work
employing discrete event simulation (des) in process mining is a common
approach to simulate business processes. the provided insights by process mining
help the traditional business process simulation techniques to generate more
accurate results based on the history of the business processes. in [16], all the
aspects of a process from control-ow, organizational, performance status, and
decision points are discovered from process mining techniques and considered
in designing the simulation model. colored petri net (cpn) models help in
capturing both the activity-ow of processes as well as other aspects. cpn tools
[14] oers a platform for designing and simulating the cpn models. in [15], an
approach for the automatic generation of cpn models for running on the cpn
tools is presented. other approaches in the area of business process simulations
exploit the process model based on the bpmn notation and improve the quality
of the models using the provided information on the corresponding event logs [4].
conducting high-level simulation models for processes is proposed in [11].
the feature extraction from event logs with a given period of time, e.g., one day,
is performed before designing a model and the exploited modeling technique is
system dynamics (sd). the variables are captured with their relations and the
generated model is used for simulating the process on the given time window.
these two approaches have weaknesses that can be covered by each other
[6]. using only aggregated level modeling, the details of process instances are
neglected. at the same time, in detailed simulation techniques, external factors,
as well as aggregated inuences are ignored. in dierent simulation areas, the
combination of des and sd are exploited [7]. to connect two simulation models,
three directions are specied [5]: (1) des results update sd model, (2) sd
results update the des before simulation, and (3) both update each other in
dierent phases. according to [3], the rst sort of interaction is more common.
it is usually more important to capture the inuence of high-level decisions on
detailed systems. in [18], the combination is used to perform simulation for a
case study in the healthcare area where the number of newly infected patients
is predicted using sd and inserted into the des model of the serving patients
in the hospital.
in process mining, both simulation techniques are proposed to be used indi-
vidually on processes based on event logs. in our approach, we propose to exploit
high-level simulation results for strategical scenarios and consider detailed sim-
ulation modeling of processes. these two types of modeling are supported by
event data and the generated models are valid due to the existence of the previ-
ous executions of processes, event logs. to the best of our knowledge, this is the
rst time that both high-level and detailed simulation techniques for business
processes are taken into account together.
3 preliminaries
in this section, we dene the concepts and notations used in process mining and
system dynamics simulation including coarse-grained process logs, i.e., aggre-hybrid process simulation models 5
table 2: a part of an event log for a sample process inside a hospital. each row represents a unique
event indicating a specic case id, activity, resources, and timestamps.
case id activity start timestamp complete timestamp resource
154 registration 01.01.2021 11:45:00 01.01.2021 11:57:00 resource 1
155 admission to the ward 01.01.2021 11:57:10 01.01.2021 12:40:52 resource 1
154 registration 01.01.2021 11:47:17 01.01.2021 12:05:01 resource 2
156 registration 01.01.2021 12:51:23 01.01.2021 13:02:47 resource 1
...............
gated process variables over time. since these coarse-grained logs are utilized for
sd simulation, they are referred to as sd-logs.
3.1 process mining
the stored event data of processes in the form of event logs are used for process
mining techniques. the form of logs which we use in our approach is dened in
denition 1.
denition 1 (event log). letcbe the universe of cases, abe the universe
of activities,rbe the universe of resources and tbe the universe of timestamps.
we call=cart t the universe of events. the event eis a tuple
e=(c;a;r;ts;tc), wherec2cis the case identier, a2ais the corresponding ac-
tivity for the event e,r2r is the resource, ts2tis the start time, and tc2t
is the complete time of the event e, wheretstc. we assume that events are
unique and an event log lis a set of events, i.e., l.
we also dene projection functions, c:! c ,a:! a ,r:! r ,
ts:!t andtc:!t for attributes of events. a sequence of events w.r.t.
timestamp with the same case identier represents a process instance (trace).
consider table 2 where the rst row is the event e=(c;a;r;ts;tc) for the patients
with case id \154" as c, the activity \admission to the ward" as awhich was
started at timestamp \01.01.2021 11:45:00" as tsby resource \resource 1" as r
and was completed at timestamp \01.01.2021 11:57:00" as tc.
fig. 2: a simple example stock-ow diagram.6 m. pourbafrani and wil m. p. van der aalst
table 3: a part of an sd-log for the sample hospital event log. the columns represent the process
variables and the rows represent the steps.
time window daily arrival rate finish rate (release rate) avg service time (time in the hospital) avg waiting time in process
1 180 180 0.3590 0.6099
2 147 140 0.4156 0.5409
3 160 162 0.4011 0.5961
4 116 119 0.4455 0.4908
...............
3.2 system dynamics
system dynamics techniques model complex systems and their environment
at a higher level of aggregation over time [17]. the causal-loop diagram
and the stock-ow diagram are the essential diagrams in system dynam-
ics by which the relations between all the inuential factors in/outside
a system in both conceptual and mathematical ways are represented, re-
spectively [17]. figure 2 shows a simple stock-ow diagram where the
number of patients in the ward in each day is calculated as follows:
numberof patientsintheward =numberof patientsalreayintheward +todayinfectedpeople
 todatyintensivecure  todayrelease .the values of stock-ow elements get updated
in each step based on the current/previous values of the other elements that in-
uence them.
sd-logs in order to design system dynamics models for processes, event logs
should be transformed into the sd-logs. sd-logs are required for generating
simulation models as well as populating them using the values of variables with
the purpose of validation [9].
denition 2 (sd-log). letlbe an event log, let vbe a set of process
variables, and let 2nbe the selected time window. an sd-log of l, given,
sdl;issdl;2f1;:::;kgv! r, s.t.,sdl;(i;v)represents the value of process
variablev2vin theith-time window ( 1ik) wherek=d(pc(l) ps(l))
e.
iflandare clear from the context, we exclude them from the generated sd-
logs and write sdinstead. denition 2 also indicates the format of generated
outcomes as an sd model simulation in which the values of the variables in the
simulation are generated. table 3 is a part of a sample sd-log which shows the
generated sd-log with = 1daythat includes dierent process variables, e.g.,
in the rst time window (day) 180 cases arrived at the process.
4 approach
figure 3 represents the framework including three main components: des, sd
simulation, and developing and updating interface variables. components (1)
and (2) each have two steps: discovering/designing simulation models and exe-
cuting the discovered simulation models. given an event log, and the discovered
des simulation model, the process can be simulated (1). the generated eventhybrid process simulation models 7
log is inserted into the sd-log generator and the output is used to populate the
sd model (2). having both models populated with the data and ready to run,
it is time to design the connection to update des based on sd results (3). we
use des models in the form of colored petri net (cpn) models. in the second
component, event logs are transformed automatically into multiple variables de-
scribing the process (sd-logs) over a specic period of time, e.g., per day, as
introduced in [9].
fig. 3: the framework starts with the design and simulation of des models ( mdes) and generates
an event log (1). the event log is transformed into sd-logs for generating/populating the sd model
(msd) (2). possible interaction interfaces between two models are discovered (3), e.g., simulation
parameters in both models ( vdes\vsd). then, the detailed simulation model parameters for
execution (vdes) get updated by the results of the high-level simulation model. dashed lines indicate
the optional steps in designing des and sd models.
to systematically address the connection between two models, we consider
designing detailed simulation models based on the process mining insights. fur-
thermore, we dene and extract a collection of possible variables for designing
high-level simulation models from an event log [9]. the next step is to use the
provided framework to update the interface variables, i.e., variables that exist in
both detailed and high-level models, see fig. 3 (part 3). consider that the target
scenario is to measure the inuence of advertising investment on the acquisition
rate of new customers (cases) in the process in two months. the des model
used to generate the event log is designed to simulate a specic number of cases
per day. the corresponding sd model is developed based on the event log and
the relevant scenario, and the new arrival rate value is predicted, e.g., as a result
of viral marketing or eects of billboard sites. when the new des model is run
with the new arrival rate, the event log is updated. the updated event log clearly
reveals whether the process is capable of handling the additional cases in terms
of resources.
4.1 des simulation
simulation parameters such as arrival rate and average service duration of vari-
ous activities for regenerating the process should be initialized before running a
des model. as a result, the rst component considers the des model discovery
and execution steps separately.8 m. pourbafrani and wil m. p. van der aalst
fig. 4: using process mining to generate simulation models of processes at dierent levels. detailed
process simulation models (bottom) include process activities, their performance metrics, resources,
and all the possible design choices for handling the cases in the simulation, e.g., queue strategies. our
proposed framework for using process mining and system dynamics together in order to design valid
models to support the scenario-based prediction of business processes at higher levels (up). discovery
and conformance techniques in process mining provide insights into the processes in dierent aspects,
e.g., a set of activities, which are the potential design choices for aggregated simulation models.
4.1.1 designing des model the process of designing a detailed simula-
tion model of a process using process mining is started with discovering a process
model and enriching that with other aspects. for instance, for the simulation
environment, often the arrival process is sampled from a negative-exponential dis-
tribution. to capture possible executable aspects of processes, we design process
simulations based on the process mining insights as shown in fig. 4 (bottom).
in this work, we consider the designing process of the des simulation model
starting from an event log or designed based on the highlighted parameters in
fig. 4 by domain knowledge.
4.1.2 executing des model while simulating a process, all the mentioned
aspects in the process simulation model can be changed for simulating dierent
scenarios. parameters such as the arrival rate function and performance pa-
rameters of activities in the process such as duration, number of resources can
be changed as well as changing the serving queuing strategy and the ow of
activities for applying dierent scenarios on the process. the designed des sim-
ulation using process mining enables us to discover the change points in the
process which can be updated by high-level simulation models of the process. in
the des execution step, the parameters require to be initialized. we refer to the
set of simulation parameters in a des model as vdes.
denition 3 (des simulate). letbe the universe of events, n2n,
andmdes be the universe of discrete event simulation models. simdes :
mdesn!2. given simulation model mdes, its set of initial values of
paramtersvdes, the specied period of time nand the start time of the simula-
tion,simdes(mvdes
des;n)=lsimulates the process.hybrid process simulation models 9
table 4: list of possible process variables generated from coarse-grained event logs [9]. the variables
can be generated at dierent levels, e.g., the whole process or single activity level. the table shows
the possibility of applying dierent aggregation functions (af) on top of the performance indicators
(in) for dierent aspects (as). the valid combinations provide process features, which along with
the selected design choices form process variables [9].
validatorin
value countservice
timewaiting
timetime in
process
afas numerical
variablecategorical
variablenumerical
variablecase resource activity case resource activity case resource activity case
sum true false true false false false true true true true true true true
average true false true false false false true true true true true true true
median true false true false false false true true true true true true true
null false true false true true true false false false false false false false
functionsimdes illustrates the simulation process for a given des model of
a process at an abstract level. note that, in the approach, the kpis are measured
over simulated event logs in a specic period of time. therefore, in simdes, we
consider the simulation duration, e.g., one day, to be a given input by the user.
4.2 sd simulation
the second component aims to deliver data-driven sd simulations of processes
in order to integrate detailed and high-level simulation. to accomplish this, we
use event logs of processes to extract a number of performance parameters from
the current state of the process and provide an interactive platform for modeling
the performance metrics as system dynamics models. the models that are built
can address what-if queries.
4.2.1 designing sd model the advantage of the introduced approach
in [11] for generating high-level simulation models is that the variables, i.e.,
simulation elements, are directly generated based on real values and can be val-
idated. the relations that form the models are also supported by the detected
behavior in event logs as shown in fig. 4 (top). to dene aggregated process
variables over steps of time on the specied part of the process for simulation,
the performance indicators (in), process aspects (as), and aggregation func-
tions (af) are required. the list of possible process variables given the three
criteria for the selected focus of simulation is determined using the valid com-
binations in table 4. for instance, the average (af) number (in) of resources
(as) is a process variable that can be measured over steps of time, e.g., daily.
the provided list will eventually be used to facilitate the integration phase of
two simulation models for determining interface variables for updates. we refer
to the generated values of the possible process variables ( v) over time steps as
sd-logs (denition 2).
denition 4 (sd-log generation). letlbe an event log, 2n
be the selected time window, and lsdbe the universe of sd-logs dened in
denition 2. sdgen : 2n! lsd, such that, for the given land,
sdgen (l;)=sdl;generates the corresponding sdl;2lsd.10 m. pourbafrani and wil m. p. van der aalst
in denition 4, we dene a function to generate sd-logs based on event logs.
given event log land time window , function sdgen generates the correspond-
ing sd-log sdl;. the size of the time window used to generate the sd-logs
is critical. in [12], multiple time series models are trained, and the sd-logs are
generated using the one with the smallest error.
4.2.2 executing sd model the sd models are designed with the help of
extracted sd-logs along with users and high-level target scenarios. for a process,
sd simulation is performed for the given time step ( ) using function simsd.
the generated sd-log ( sdl;) of the process and the designed sd model ( msd)
are the inputs. the set of simulation variables in an sd model is referred to as
vsd. the future values of variables are produced in the form of sd-logs as a
result of sd simulations.
the set of sd simulation variables ( vsd) can include all or some of the pro-
cess variables (v) in the generated sd-log from an event log, as well as a set of
external variables ( vex), i.e.,vsdv[vex. the sd models should be pop-
ulated with the values and equations to be executable and generate simulation
results in the form of sd-logs. consider the model in fig. 2, where variable daily
infected people should be populated, e.g., from the sd-log, in order to create
future values of variable the number of patients in the ward over time. it should
be noted that the number of patients in the ward in the model is derived using
an equation and does not need to be directly supplied. for variable v2vsd\v,
there are multiple possibilities of initializing and populating the sd model. for
instance, for every simulation step, the value of vis taken from the corresponding
row in the sd-log, or generated by a random generator function. the random
generator function is based on the distribution of values of variable vover time.
denition 5 (sd simulate). letlsdbe the universe of sd-logs, msdbe
the universe of system dynamics models, and j2nbe the number of time steps.
simsd:lsdmsdn!lsd. for instance, simsd(sd;msd;j)=sd02lsd
simulates the given msd2msdoverjtime steps using the provided values in
thesdand the simulation result is represented as an sd-log ( sd0).
the dened sdgen andsimsdenable the main steps in simulating the pro-
cess models at higher levels for the focused parts of the processes as the targets
of high-level simulation. these functions are used later in our framework for in-
tegrating high-level simulations and detailed simulations for business processes.
4.3 designing and updating the interface variables
the activity ow of a process, duration of each activity, batching, or queuing
strategies can be updated based on high-level decisions derived from simulation
models. the provided list of the changeable parameters in the detailed simula-
tion models and the presented process variables in sd models are the baseline
of nding the interfaces between these two types of models for interactions. ex-
ploiting the simulation parameters in the detailed simulation models, we discoverhybrid process simulation models 11
table 5: the sample mapping table for nding the interface variables in sd-logs and des param-
eters, which enables interaction of the two models of processes possible. the table is generalized,
e.g., type of cases (categorical and numerical attributes), organizations and type of resources, and
activities follow the same mapping table.
des process insights sd process variables
simulation parameters
execution congurationsimulation aspects
casenumber of cases
(case intervals)=number of cases case
activity processing time =service time activity
resourceprocessing time =service timeresourcenumber of resources =number of resources
the ones which can be changed or get inuenced by external factors or high-level
decisions. in des models of processes, all the shown process mining insights in
fig. 4 are considered to be simulation parameters that can be changed in order
to perform dierent simulation scenarios of the processes. the changes of the
des simulation parameters can be driven from the high-level simulation model
of the process, e.g., the ow of activities, the policy of handling the queues in
activities, or resources based on the designed sd models. however, our goal is
to automate the interaction between the two simulation models. therefore, we
focus on the parameters that can be found directly in the sd-logs and not rely
on the design choices of sd models.
table 5 shows the overview of a sample interface variables that can be found
in both the des model and the sd model of a process. these parameters and
aspects enable the automatic updating of their values in one of the models based
on the other. they can get extended w.r.t. designed models and used parameters.
to eliminate the development details of the interaction from sd results to the
des model, the process is considered as a general method. the method looks
for all the existing variables in the sd simulation results ( vsd) which are in
the form of sd-logs. afterward, it updates the values of the corresponding
simulation parameters in the des model ( vdes) with the last values in the
simulated sd-log, i.e., the predicted values of variables in the last simulated
steps. for instance, for the variable average service time of resources from sells
department , i.e.,v, a new des model is generated in which the value of vis
replaced by the last values of vin the simulated sd-log. as a result, if the time
window is one day and the sd model is run for 30 days, the value of vis taken
fromsd(30;v).
algorithm 1 presents the interaction between two simulation models as de-
scribed. the algorithm starts with simulating the des model for a specic period
of time with the real values of the simulation parameters from process mining
insights. considering as the time window, the simulation duration is derived
fromkwherekis the number of steps (window of time) for simulation, e.g.,
k= 20 and=1day, the simulation duration is 20 days. the simulated event
log with the same time window is used to generate an sd-log, which is used
to populate the sd model. note that for generating sd-logs can be dier-
ent. after the sd model renement, i.e., adding external factors, the values of
interface variables in the des model are updated by their new values as sd12 m. pourbafrani and wil m. p. van der aalst
algorithm 1: general algorithm of updating process mining detailed
simulation based on the changed in the gateway variables.
input: detailed process simulation model mvdes
des initialized withe a set of
parameters vdes, high-level simulation model msdand its variables
vsd, time window , andkthe number of time steps
output: updated event log using the sd results l0
1l=simdes(mvdes
des;k);
2sd=sdgen (l;);
3sd0=simsd(msd;sd;1);
4foreachvinvdes\vsddo
5 set value of vinmdes to besd0(k;v)) ;
6end
7return updated mdes asm0
des;
8l0=simdes(m0vdes
des;k);
9returnl0;
model simulating results. running the des model, a new event log is generated
in which the kpis can be measured and the eects of high-level changes can be
tracked.
5 proof of concept
we designed a scenario to demonstrate the need for hybrid simulation of pro-
cesses and how to address that using the proposed data-driven approach. a
process is designed using cpn tools in the form of a colored petri net. we sim-
ulate the process and generate simulated event logs. the corresponding sd-logs
are extracted from the simulated event logs, and nally, both cpn models and
sd models are considered as inputs of the approach. the sd models are used to
update the cpn models for the next simulation step. in each step of simulating
the process, specic process kpis are calculated. these kpis represent the eect
of high-level simulation models on the detailed process.
5.1 implementation
as a proof of concept, the platform for running and updating a des model
of a process (cpn model) based on the results of simulating the correspond-
ing sd model is developed. the platform is in the form of a jupyter notebook,
which includes the instructions for re-running the experiments and performing
additional analysis. the designed cpn model, the sml1le, the sd-log, the
sd-model, and the python platform are publicly accessible.2the supplied tool
in [10] enables producing a ready-to-execute cpn model in the cpn tools from
1standard machine language
2https://github.com/mbafrani/pmsd/tree/master/hybridsiminpmsharedmaterialforreviewhybrid process simulation models 13
an event log3for the purpose of dening dierent processes and scenarios. the
automatically generated models are able to generate event logs following various
changes, e.g., incorporating the eects of high-level simulation models as pre-
sented in this paper. in addition, given an event log, the presented tool in [8]
supports the data-driven sd model generation.
fig. 5: the designed cpn simulation model using cpn tools for handling the requests in one of the
departments in the sample company.
5.2 designed process and scenario
we created a process within a process mining rm that oers customer support
by handling two types of requests in two departments, namely new client in-
quiries and current customer support. working days are from monday to friday
and the working hours are from 9:00 am to 5:00 pm (including 1-hour lunchtime).
the process is modeled using the cpn tools, as partly shown in fig. 5. on
average, every 5 minute, one new request is received by the company. the re-
quest arrival is modeled as a negative exponential distribution. the number of
requests in the queue is limited to 20 and more upcoming requests will be auto-
matically rejected. the service time spent by the resources in each department
for executing requests is derived from a normal distribution. we designed the
process model, such that resources perform the process of the request faster if
the number of requests in the line is higher. this eect, i.e., the queue length on
the processing time of requests, is modeled as an exponential nonlinear relation
between the number of people in the queue and the service time.
in the current scenario, the company is looking to increase the number of
handled requests, decrease the rejected requests, and have a more realistic simu-
lation of their process. in the detailed simulation model, the resources considered
working with full eciency, e.g., %100 of the available time during the day. it
is also considered that all the resources have the same level of expertise, e.g.,
the same speed in handling requests. one of the potential actions is to increase
3https://cpn-model-process-discovery-1.herokuapp.com/generate-cpn-model/14 m. pourbafrani and wil m. p. van der aalst
fig. 6: the designed stock-ow diagram based on the generated event log using the cpn model in
fig. 5. the model extended by capturing the eect of training over three months on the resource
eciency, which shows the actual service time considering their eciency per day.
626466686106126
0 20 40 60 80 100number of cases
time window (day)accepted cases
rejected cases
fig. 7: a part of the process kpis in 4 months. the number of successfully handled requests, rejected
request and average service time of handling the requests by resources for the base cpn model and
the updated ones with sd model results, i.e., the dashed lines.
the expertise level of resources by means of training. to capture the eects of
training and resource eciency on the process kpis, a higher-level simulation
model is required. this model should have aggregated time since training re-
quires time to eventually appear in the service time of handling cases, e.g., not
all the resources get trained at once.
5.3 hybrid simulation of the sample process
running the detailed simulation model for 30 days, we calculate a set of im-
portant kpis, such as the number of addressed requests and rejected requests.
using the generated event log of the cpn model, we generate sd-log for daily
process variables and generate the sd model using the tool presented in [8]. as
shown in fig. 6, the sd model includes the external factors of eciency and
training into account. in this scenario, after a specic amount of training, e.g.,
300 hours, the resources become more experts, and they are able to handle morehybrid process simulation models 15
requests in less time, e.g., %20 faster on average. the training hours per month
and the percentage of resources that receive the training aect the resources'
eciency, the number of nished and rejected cases over time. to capture these
eects on the des model of the company, we run the sd model for a couple of
months, e.g., 4 months. the result of changing the eciency of resources on the
available time and number of handled requests is derived from running the sd
model. the sml function, in the cpn model, checks for new updates on the av-
erage service time, i.e., the interface variable which is common in two simulation
models, before execution. for instance, equation 1 presents the sml function
that reads the values of variables and their function from \currentvalues.sml"
and check if the new updates are available in the updated \updatedvalues.sml"
for the execution. the average service time gets overwritten by the execution of
sd models in the corresponding sd-logs.
fun checktime () =
if os:filesys:compare (os:filesys:fileid ("currentvalues:sml ");
os:filesys:fileid ("updatedvalues:sml ")) =equal
then use "currentvalues:sml "
else use "updatedvalues:sml ";(1)
using our framework, we update the average duration of handling requests
by resources with the new value of service time from the sd model. variables
such as training and expertise of the resources are not easy to be captured and
included in the discrete event simulation, i.e., the aggregated timing simulation
is required to reect the eect of changes such as training as well as dening the
eect quantitatively is not a straight-forward step. system dynamics modeling
enables us to handle such eects in detailed simulation models of processes.
as illustrated in fig. 7, the impact of training on average service time and,
eventually, the number of handled cases are obvious after about 2 months. the
impact of eciency and training is considered, resulting in more accurate kpis.
6 discussion
the primary goal of this paper is to demonstrate the importance of comprehen-
sive data-driven process simulation modeling at various levels and their inter-
action for businesses. furthermore, the potential of creating various simulation
models from event logs and applying results of higher-level and what-if analy-
ses on the specic operational process is demonstrated by means of a sample
scenario. it should be noted that providing a general framework for automati-
cally combining and executing both des and sd models at the same time is a
challenging task. moreover, even if the bases of models are built automatically
using process mining insights, human domain knowledge is still crucial. we do
not focus on eliminating the role of the user in the modeling phase, as it is
an essential component of any eective simulation model design, specically in
strategical simulation models, e.g., sd. there are further considerations such as
dening and locating interface variables. this issue can also be mitigated using
the simulation parameters in des and the provided set of process variables in16 m. pourbafrani and wil m. p. van der aalst
sd-logs. there are a few steps that will be needed in the future to make the
technique more eective. for instance, (1) predened scenarios that are simple
and restricted to the variables in the extracted sd-logs, or (2) substituting
the des engine with a simple yet powerful engine that requires less expertise of
modeling, e.g., sml programming in this work, will improve the framework. the
assessment is a simple version of a real-world scenario with a synthetically con-
structed process, intended primarily to highlight the necessity and practicality
of integrating two simulation-driven processes based on event data.
7 conclusion
simulating business processes enables organizations to examine the consequences
of changes on their processes without implementing them directly. however, most
simulation models are unable to capture reality. although forward-thinking pro-
cess mining techniques such as discrete event simulations attempt to address the
accuracy issue of simulation models by leveraging process mining insight, there
are a few unexpected issues such as the eects of external factors in the process or
the role of quality-based variables. in this research, we suggested a strategy that
takes advantage of both discrete event simulation approaches in process min-
ing and high-level simulation techniques such as system dynamics simulation to
mimic processes at a detailed level while applying high-level decisions. we sim-
ulate the processes with both models, and the interplay of the models results
in simulation models including detailed and high-level aspects. using common
scenarios in businesses, we demonstrated the use of our technique, including the
evaluation of simulation ndings.
references
1. van der aalst, w.m.p.: business process simulation survival guide. in: handbook
on business process management 1, introduction, methods, and information sys-
tems, 2nd ed., pp. 337{370. springer (2015)
2. van der aalst, w.m.p.: process mining and simulation: a match made in heaven!
in: computer simulation conference. pp. 1{12. acm press (2018)
3. brailsford, s.c., desai, s.m., viana, j.: towards the holy grail: combining system
dynamics and discrete-event simulation in healthcare. in: proceedings of the 2010
winter simulation conference. pp. 2293{2303. ieee (2010)
4. camargo, m., dumas, m., gonz alez, o.: automated discovery of business process
simulation models from event logs. decis. support syst. 134, 113284 (2020)
5. jovanoski, b., minovski, r., voessner, s., lichtenegger, g.: combining system
dynamics and discrete event simulations - overview of hybrid simulation models.
journal of applied engineering science 10, 135{142 (01 2012)
6. morecroft, j., robinson, s., et al.: explaining puzzling dynamics: comparing the
use of system dynamics and discrete-event simulation. in: proceedings of the 23rd
international conference of the system dynamics society. pp. 17{21. system dy-
namics society boston, ma (2005)hybrid process simulation models 17
7. morgan, j., belton, v., howick, s.: lessons from mixing or methods in practice:
using des and sd to explore a radiotherapy treatment planning process. health
systems 5(06 2016)
8. pourbafrani, m., van der aalst, w.m.p.: pmsd: data-driven simulation using sys-
tem dynamics and process mining. in: demonstration and resources track at
bpm 2020 co-located with the 18th international conference on business pro-
cess management (bpm 2020). pp. 77{81 (2020), http://ceur-ws.org/vol-2673/
paperdr03.pdf
9. pourbafrani, m., van der aalst, w.m.p.: extracting process features from event
logs to learn coarse-grained simulation models. in: advanced information systems
engineering - 33rd international conference, caise 2021, proceedings. pp. 125{
140. springer (2021). https://doi.org/10.1007/978-3-030-79382-1 8
10. pourbafrani, m., balyan, s., ahmed, m., chugh, s., van der aalst, w.m.p.:
gencpn: automatic generation of cpn models for processes. in: proceedings of
demonstration track at icpm 2021 co-located with 3rd international conference
on process mining (2021)
11. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: scenario-based prediction
of business processes using system dynamics. in: otm 2019 conferences, 2019. pp.
422{439 (2019). https://doi.org/10.1007/978-3-030-33246-4 27
12. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: semi-automated time-
granularity detection for data-driven simulation using process mining and system
dynamics. in: conceptual modeling - 39th international conference, er 2020,
proceedings. pp. 77{91. springer (2020). https://doi.org/10.1007/978-3-030-62522-
16
13. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting automatic
system dynamics model generation for simulation in the context of process mining.
in: bis 2020, proceedings. pp. 249{263 (2020). https://doi.org/10.1007/978-3-030-
53337-3 19
14. ratzer, a.v., wells, l., lassen, h.m., laursen, m., qvortrup, j.f., stissing, m.s.,
westergaard, m., christensen, s., jensen, k.: cpn tools for editing, simulating,
and analysing coloured petri nets. in: applications and theory of petri nets 2003,
24th international conference, icatpn 2003, proceedings. pp. 450{462 (2003)
15. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering colored
petri nets from event logs. sttt 10(1), 57{74 (2008)
16. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation
models. inf. syst. 34(3), 305{327 (2009)
17. sterman, j.d.: business dynamics: systems thinking and modeling for a complex
world. mcgraw-hill (2000)
18. viana, j., brailsford, s., harindra, v., harper, p.: combining discrete-event simu-
lation and system dynamics in a healthcare setting: a composite model for chlamy-
dia infection. european journal of operational research 237(1), 196 { 206 (2014)