diagnostic information for compliance checking of
temporal compliance requirements
elham ramezani, dirk fahland, boudewijn van dongen, and wil van der aalst
eindhoven university of technology, the netherlands
{e.ramezani,d.fahland,b.f.v.dongen,w.m.p.v.d.aalst}@tue.nl
abstract. compliance checking is gaining importance as today‚Äôs organizations
need to show that operational processes are executed in a controlled manner while
satisfying predeÔ¨Åned (legal) requirements or service level agreements. deviations
may be costly and expose an organization to severe risks. compliance checking is
of growing importance for the business process management and auditing com-
munities. this paper presents an approach for checking compliance of observed
process executions recorded in an event log to temporal compliance requirements ,
which restrict when particular activities may or may not occur. we show how
temporal compliance requirements discussed in literature can be uniÔ¨Åed and for-
malized using a generic temporal compliance rule. to check compliance with
respect to a temporal rule, the event log describing the observed behavior is aligned
with the rule. the alignment then shows which events occurred out of order and
which events deviated by which amount of time from the prescribed behavior.
this approach integrates with an existing approach for control-Ô¨Çow compliance
checking, allowing for multi-perspective diagnostic information in case of compli-
ance violations. we show the feasibility of our technique by checking temporal
compliance rules of real life event logs.
keywords: compliance checking, process mining, data aware conformance check-
ing, petri nets
1 introduction
processes supported by information systems need to comply with regulations, laws and
service level agreements set by both internal and external stakeholders. failing to comply
may be costly, therefore organizations need to continuously check whether processes are
executed within a given set of boundaries. deviations of the observed behavior from the
speciÔ¨Åed compliant behavior may point to fraud, malpractice, risks, and inefÔ¨Åciencies.
five types of compliance-related activities can be identiÔ¨Åed [8, 23, 7, 19]: (1) determine
compliance requirements that have to be satisÔ¨Åed by the particular process and system,
(2)formalize compliance requirements in a suitable form, (3) implement and conÔ¨Ågure
information systems such that they fulÔ¨Ål compliance requirements, (4) check whether
compliance requirements are met, and (5) improve the process and underlying systems
based on diagnostic information to improve compliance.
compliance checking is gaining importance because of the availability of event data
on one hand and changing legislations on the other hand. the organizations are not only2 elham ramezani et al.
required to obey the laws and regulations but often required to comply with standards
and contractual obligations. in many standards such as clinical guidelines and constraints
governing cooperative business such as service level agreements, time is of utmost
signiÔ¨Åcance. in processes that are subject to such guidelines and agreements, it is often
extremely important to meet deadlines, optimize response time, stay compliant about
durations, adhere to constraints about delay between activities and periodic repetition of
actions. at the same time, new technologies are providing opportunities to systematically
observe processes at a detailed level by recording all process relevant events.
there are two basic types of compliance checking: (1) forward compliance checking
aims to design and implement processes where compliant behavior is enforced and (2)
backward compliance checking aims at detecting and localizing non-compliant behavior.
this paper focuses on backward compliance checking based on event data.
the compliance requirements considered in this paper constrain at which time
activities may, must or must not occur. compliance violations regarding time cannot be
detected using existing control-Ô¨Çow checking techniques such as [21]; as these techniques
abstract from a concrete notion of time, both when specifying compliance rules and
when checking reality recorded in the event log against speciÔ¨Åed behavior. therefore
for temporal compliance checking, it is required to express temporal constraints with an
explicit notion of time, capture notion of time in the event log and compare the speciÔ¨Åed
time in temporal constraints with time recorded in the event log.
this paper addresses the problem of backward compliance checking for temporal
compliance requirements (i.e., compliance requirements restricting process time). we
propose a technique for temporal compliance checking that seamlessly integrates with
control-Ô¨Çow compliance checking. most importantly, the technique provides detailed
diagnostic information in case of non-compliant behavior: it shows for each case which
events violated temporal requirements and when the event should have occurred to be
compliant. our temporal compliance checking technique leverages a recent data-aware
conformance checking technique [13] that allows to check conformance of a log with
respect to a data-aware petri net . we show that every temporal compliance requirement
discussed in literature (and many more) can be formalized in a simple data-aware petri
net, by making time a data attribute of the speciÔ¨Åcation. the conformance checker [13]
then compares the observed temporal behavior in the event data to the compliant temporal
behavior speciÔ¨Åed in the petri net. in case of deviations, the conformance checker
highlights which events occurred out of order, and by how much time an event deviated
from the compliant behavior. moreover, we show how this temporal compliance checking
can be combined with control-Ô¨Çow compliance checking to check complex compliance
requirements involving control-Ô¨Çow and temporal aspects. the technique has been
implemented as a prom plug-in and has been applied in a case study using event data
and compliance requirements for a real-life business process in the public sector.
the remainder of this paper is organized as follows. we recall conformance checking
techniques for control-Ô¨Çow and data-Ô¨Çow in sect. 2. in sect. 3 introduces the problem
of temporal compliance checking and our proposed solution. experimental results are
presented and discussed in sect. 4. we discuss related work in sect. 5 and conclude in
sect. 6.diagnostic information in temporal compliance checking 3
2 preliminaries
this section recalls basic conformance checking notions for control-Ô¨Çow conformance [1,
3] and data-Ô¨Çow conformance [13] on which we build for temporal compliance checking.
logs. conformance checking relates behavior that has happened and was recorded in
an event log lto a formal speciÔ¨Åcation sthat describes which behavior should have
happened . in this context, an event loglis asetoftraces . each trace l2ldescribes
a particular case (i.e., a process instance) as a sequence of eventsl=e1e2:::en. an
eventehas a number of attributes, typically referring to the activity executed or the time
of its execution. for instance, we write e:activity =aande:time =tto refer to the
value of the activity and of the time attribute of event e, respectively; as a shorthand, we
may writee= (a;t). an example of a log trace is l=h(a;1)(c;3)(c;7)(d;12)i
statingahappened at time 1,chappened at 3, anotherchappened at 7and Ô¨Ånallyd
happened at 12.
speciÔ¨Åed behaviors. the speciÔ¨Åcation of behavior that should have happened can be
expressed in various ways, for instance as a petri net [1] or as declarative constraints [12]
or predicate logic. in essence, each speciÔ¨Åcation describes a set sofadmissible behaviors,
again being sequences of events having attributes. typically, the set sis very large,
varying over all admissible attribute value combinations. the set sis the semantic notion
of all compliant traces. for example, a speciÔ¨Åcation could describe the traces sshown
in fig. 1(left). the traces state that ahappens at time 1,bhappens at time 4,chappens
any time between 1:1and7, anddalways happens 10time units after c. note that the
ordering ofbandcdepends on the times of their occurrences.
in this paper, we use petri nets to specify the admissible behavior sin a compact
form. figure 1(right) shows a petri net variant, called data-aware petri net [13], that
speciÔ¨Åes the above admissible sequences of events including the values of the time
attribute . that is, the Ô¨Åring sequences of the petri net nsis the setsgiven in fig. 1(left).
inns, transitions have additional annotations that specify attribute values of the event e
that is created by the occurrence of a transition. for instance, the guard [e:time = 1] of
transitionaexpresses that the event ecreated byahas the value 1of its time attribute.
likewise, an event created by bhas value 4of its time attribute. the guard of cpermits
any value between 1:1and7for attribute time ofc. the relation between events of c
anddis expressed by the help of variabletc. the time value of the most recent event
produced by cis stored in variable tc, expressed by the write statementft0
c=e:timeg
annotated at c. the guard of dthen expresses that the time value ofdhas to be exactly
10time units after the value stored in tc. note that the net in fig. 1 has no explicit notion
of time; the annotations simply constrain numerical values of the event attribute time .
s=f h(a,1)(c,1.1)(b,4)(d,11.1) i,
. . . ,
h(a,1)(c,3.9)(b,4)(d,13.9) i,
. . . ,
h(a,1)(b,4)(c,4.1)(d,14.1) i,
. . . ,
h(a,1)(b,4)(c,7)(d,17) ig
b
{tc‚Äô = e.time}a
cd
[e.time = 1][e.time = 4]
[1.1 ‚â§ e.time ‚â§ 7][e.time = tc +10]var: tc
fig. 1. data-aware petri net nsspecifying admissible times of occurrences of activities.4 elham ramezani et al.
aligning observed to speciÔ¨Åed behaviors. an observed trace in a log may deviate from
speciÔ¨Åed behaviors. for instance, the non-compliant trace l=h(a;1)(c;3)(c;7)(d;12)i
is not speciÔ¨Åed by nsof fig. 1. to understand where and how ldeviates from the
behaviorss, we alignltos, as follows [1, 3, 13].
the idea is to Ô¨Ånd a speciÔ¨Åed trace s2sthat is as similar as possible to l;
the differences between sandlthen indicate deviations. we relate lto any trace
s2sby pairing events. let alandasbe the activity names of events in lands,
respectively. let `:as!2almap each speciÔ¨Åed activity to a set of log activities.
intuitively, an event fof the speciÔ¨Åcation spairs with an event ein the loglif
e:activity2`(f:activity ).
letelandesbe the universe of all possible log events and of all speciÔ¨Åcation
events, respectively. a move of (lands) is a pair (x;y)2(el[fg )(es[f
g)nf(;)g. forx2elandy2es, we call
1.(x;)amove on log ,
2.(;y)amove on speciÔ¨Åcation s,
3.(x;y)asynchronous move iffx:activity2`(y:activity )andx:attr=y:attr for
every other attribute attr ofxandy, and
4.(x;y)a synchronous move with data deviation iffx:activity2`(y:activity )and
x:attr6=y:attr for some other attribute attr ofxandy.
analignment of a tracel2ltosis a sequence =h(x1;y1):::(xn;yn)iof
moves (oflands) such that the projection x1:::xntoelis the original trace l
(i.e.,hx1:::xnijel=l), and the projection y1:::yntoesis a speciÔ¨Åed trace (i.e.,
hy1:::ynijes2s.
for example, the trace l=h(a;1)(c;3)(c;7)(d;12)ihas among others the
following three alignments to the traces sof fig. 1:1=(a;1)(c;3)(c;7)(d;12)
(a;1)(c;2)(b;4)(d;12),2=
(a;1)(c;3)(c;7)(d;12)
(a;1)(c;2)(b;4)(d;12), and3=(a;1)(c;3)(c;7)(d;12)
(a;1)(b;4)(c;7)(d;17). alignments 1and
2yield the same speciÔ¨Åed trace h(a;1)(c;2)(b;4)(d;12)i;3yields a different trace
h(a;1)(b;4)(c;7)(d;17)i.
diagnostic information from deviations. all alignments differ in the kind of deviations
they show. a move on log (x;)indicates that trace lhad an event xthat was not
supposed to happen according to speciÔ¨Åcation swhereas a move on speciÔ¨Åcation
s(;y)indicates that lwas missing an event that was expected according to s.
synchronous moves with data deviations indicate that the observed event had other
attribute values than speciÔ¨Åed. as the alignment preserves the position relative to trace
l, we can locate the exact position where lhad an event too much or missed an event
compared to s.
according to 1, thetime attribute of the Ô¨Årst ciswrong (it should have been 2
instead of 3according to the synchronous move with data deviation ),bshould have
occurred (according to the move on s), and the second cshould not have occurred
(move on log). according to 2, none of the cevents was correct, but there should have
been another cevent at time 2. according to 3, the second cevent was correct at time
7, the Ô¨Årstcevent at time 3was wrong, and dshould instead have occurred at time 17
(synchronous move with data deviation ).diagnostic information in temporal compliance checking 5
computing alignments. the conformance checking problem in this setting is to Ô¨Ånd for
a given trace land speciÔ¨Åcation sabestalignmentofltoss.t. no other alignment
has fewer non-synchronous moves or moves with data deviations. the techniques of [1,
3] and [13] Ô¨Ånd such a best alignment using a cost-based approach: a cost-function 
assigns each move (x;y)a cost(x;y)s.t. a synchronous move (without data deviations)
has cost 0and all other types of moves have cost >0. the choice of costs depends
on the particular domain and can be set for instance based on how likely a particular
deviation is known to happen. by giving frequent deviations fewer costs than infrequent
deviations, the best alignment is the one giving the most probable compliant trace. for
example, assuming cost 10for all non-synchronous moves (knowing control-Ô¨Çow is
usually followed), cost 3for data deviations by c(typically happens as speciÔ¨Åed) and
costs 1for data deviations by d(typically known to deviate), 1has cost 23,2has cost
40, and3has cost 21, making3the best alignment to the most probable trace.
the a?-based search on the space of (all preÔ¨Åxes of) all alignments of ltos
described in [1, 3] can be used to Ô¨Ånd a best alignment for lands(when attributes
other than activity are ignored). this approach is extended in [13] to Ô¨Ånd data-aware
alignments ; an ilp solver Ô¨Ånds among all synchronous moves values for attribute of s
such that the data deviations are minimized. in the following, we apply alignments for
temporal compliance checking.
3 temporal compliance checking
this section presents our main contribution, an approach for checking temporal compli-
ance on past executions recorded in event logs. we Ô¨Årst recall different dimensions of
compliance requirements. after that we present our approach that allows to integrate
checking for control-Ô¨Çow and temporal compliance requirements together with a generic
framework for formalizing various temporal requirements.
3.1 compliance requirements
compliance requirements prescribe how internal or cross-organizational business pro-
cesses have to be designed or executed. they originate from legislations and restrict
one or several perspectives of a process (control Ô¨Çow, data Ô¨Çow, process time or or-
ganizational aspects), they can restrict each case individually or a group of cases, or
prescribe properties of process executions or process design [21]. these different aspects
of compliance give rise to the compliance rule framework shown in fig. 2. a complex
compliance requirement covering several perspectives of a process can be decomposed
into smaller compliance rules, each covering a single aspect along the dimensions of this
framework.
for example, a compliance requirement might state: ‚Äúthe treatment with antibiotics
must be administered with one dose per day for 3days in a row. after each cycle of 3
treatments, in case of necessity, the treatment can be extended for other cycles; but there
should be delay of at least one week between two subsequent cycles of treatment‚Äù.6 elham ramezani et al.
fig. 2. compliance rule frame-
work [21]this requirement can be divided into three different
compliance rules: (1) (control Ô¨Çow) ‚Äúantibiotics must
be administered in cycles of 3occurrences‚Äù, (2) (pro-
cess time) ‚Äúbetween two subsequent administration of
antibiotics in a cycle, there should be one day delay‚Äù,
and (3) (process time) ‚Äúbetween two subsequent cycles,
there should be at least one week delay‚Äù, each taking
only one perspective (control Ô¨Çow or process time) into
account. the compliance checking technique of [21] is
able to check control-Ô¨Çow compliance rules, but does not
provides a notion of time and therefore cannot check tem-
poral compliance rules. in the following, we investigate
the relation between the control-Ô¨Çow and time perspec-
tive, then present a new technique that supports time to
check temporal compliance rules, and Ô¨Ånally show how
to integrate diagnostic information from both perspectives for comprehensive compliance
diagnostics.
3.2 separating temporal- and control-flow compliance checking
we conducted an extensive literature survey and identiÔ¨Åed numerous works [11, 18, 10,
24, 14, 2] discussing temporal compliance rules and their formalization. typically every
compliance requirement restricting the process time implies a control Ô¨Çow compliance
rule in addition to a temporal compliance rule. even if the ordering of activities is
not restricted in the compliance requirement, at least the existence of some activities
is speciÔ¨Åed. in the general case, the control-Ô¨Çow rule constrains more than just the
existence of activities, for instance that ‚Äúantibiotics must be administered in cycles of 3
occurrences‚Äù. this leads to a simple assumption for temporal compliance requirements:
a temporal compliance rule constrains the occurrences of events speciÔ¨Åed in a given
control-Ô¨Çow rule (e.g., ‚Äúbetween two subsequent administration of antibiotics in a cycle,
there should be one day delay‚Äù); a ‚Äúlarger‚Äù temporal rule simply implies a larger control-
Ô¨Çow rule.
a control-Ô¨Çow rule may have to hold multiple times in a trace [16], based on repeated
occurrences of events. for instance, if antibiotics are administered 6 times in total, the
control-Ô¨Çow rule given above has to hold twice; the associated temporal rule has to hold
whenever the control-Ô¨Çow rule occurs. we collected and categorized available temporal
compliance rules (15 temporal compliance rules) in a framework distributed over 7
categories shown in tab. 1. some example rules with their category are given next. the
complete collection of compliance rules and their formalization is described in [22].
‚Äìrepetition.rule2 : ‚Äúthe delay between execution of two subsequent activities aand
bwithin all occurrences of a control-Ô¨Çow rule, must be within [;]time units‚Äù
‚Äìinstance duration.rule1 : ‚Äúevery occurrence of a control Ô¨Çow rule must be com-
pleted within [;]time units since time t.‚Äù
‚Äìvalidity.rule1 : ‚Äúevery activity awithin all occurrence of a control Ô¨Çow rule must
be completed within [;]time units since it starts.‚Äùdiagnostic information in temporal compliance checking 7
category (rules) description
instance duration (2) limits the time length in which a control-Ô¨Çow rule instance
must hold. [24]
delay between instances (1) limits the delay between two subsequent instances of a
control-Ô¨Çow rule [11, 10, 18, 2]
validity (3) limits the time length in which an activity can be exe-
cuted.[11, 10, 18, 24]
time restricted existence (2) limits the execution time of an activity in calendar.[11, 10,
18]
repetition (2) limits the delay between execution of two subsequent activ-
ities.[11, 10, 18, 24, 14, 2]
time dependent variability(1) limits choice of a process path among several ones with
respect to temporal aspects.[11, 10, 18, 24]
overlap (4) limits start and completion of an activity with respect to
start and completion of another activity.[11, 10, 18, 24]
table 1. categorization of the 15 temporal compliance rules
event log
petri-net 
specificationalignment
control flow 
alignment
projected log 
enriched with 
additional 
information
data-aware 
petri-net 
specification
data flow 
alignmentalignment
control flow 
compliance 
rule
a
a
temporal 
compliance 
rule
fig. 3. temporal compliance checking overview
‚Äìtime restricted existence.rule1 : ‚Äúevery activity awithin all occurrences of a
control Ô¨Çow rule may only be executed at times t1;:::;tn‚Äù.
‚Äìtime dependent variability.rule1 : ‚Äúwithin all occurrences of a control Ô¨Çow rule,
activitybmust be executed within [1;1]time units since time t1ifahas occurred
within [2;2]time units since time t2.‚Äù
the dependency between control-Ô¨Çow rules and temporal rules raises a challenge for
temporal compliance checking: we Ô¨Årst have to identify the different occurrences of a
control-Ô¨Çow rule, for which then the temporal rule can be checked. this gives rise to our
approach shown in fig. 3.
we decompose a complex compliance requirement into a control-Ô¨Çow rule and a
temporal rule. the event log is Ô¨Årst aligned to the control-Ô¨Çow rule using the technique
of sect. 2 to identify control-Ô¨Çow violations in terms of missing or inserted events;
this alignment will also distinguish multiple occurrences of the same control-Ô¨Çow rule
within one trace. for each alignment, we enrich the log with information about multiple
occurrences of rules and control-Ô¨Çow violations. the enriched log is then used to check
temporal compliance using the data-aware alignments of sect. 2.8 elham ramezani et al.
however, there is a small challenge in decomposing control-Ô¨Çow and temporal
compliance checking. in case a control-Ô¨Çow violation can be attributed to different
occurrences of a control-Ô¨Çow rule, there exist more than one alignment of a trace to
the control-Ô¨Çow rule. picking the wrong control-Ô¨Çow alignment could introduce false
positives on temporal compliance, which we eliminate as follows: we compute for each
trace all its control-Ô¨Çow alignments; each alignment leads to an enriched trace variant
for which we compute temporal compliance; the trace variant with the best temporal
compliance (containing only real violations) is returned and all other variants (containing
false positives) are discarded.
aligning control-Ô¨Çow and temporal checking has an advantage regarding diagnostic
information. a severe control-Ô¨Çow violation implies a violation of the temporal compli-
ance rule. checking temporal compliance alone might obscure insights into the nature
of the violation. by integrating control-Ô¨Çow and temporal compliance checking, we
can present more meaningful diagnostic information to a user. for this, the existing
control-Ô¨Çow checking technique has to be extended, as we describe next.
3.3 extended control-flow compliance checking
a control-Ô¨Çow compliance checking technique based on alignments was presented
in [21]. in this technique, a compliance rule is formalized as a petri net that describes
all admissible sequences of activities. a collection of over typical 50 control-Ô¨Çow
compliance rules and their formalization as parameterized petri net patterns are available
from a comprehensive repository [22]. in this section, we show how to extend the
patterns of [21] to distinguish multiple occurrences of the same rule in a trace. checking
control-Ô¨Çow compliance of a log to an extended pattern then allows to enrich the log
with information needed for temporal compliance checking.
icmpœâ 
a3initial
finalœâ start
p1done3
isttodo
end
fig. 4. petri net formalizing a control-Ô¨Çow rule.for example, the petri net pattern of
fig. 4 formalizes the compliance rule ‚Äúac-
tivityamust be executed in groups of
koccurrences‚Äù (shown for k= 3). the
core of the rule is formalized in the grey-
shaded part between transitions istand
icmp. the rule becomes active whenist
occurs. then activity ahas to occur 3
times before the rule can complete (each time aoccurs, one token is taken from todo
and put on done ). in between, arbitrary other activities can occur, expressed by transition

. the compliance rule may hold multiple times in a trace; this behavior is captured by
the cycle involving istandicmp. wheneveristoccurs, it puts 3tokens in the place todo
which activates a new instance of the rule ‚Äúactivity aoccurs in groups of 3‚Äù; the instance
completes with transition icmpwhich removes all tokens from done and puts a token on
p1. the entire petri net of fig. 4 thus allows for multiple instances of the compliance
rule, each instance is framed by the istandicmptransitions; between two instances
arbitrary other activities are allowed as expressed by the 
-transition attached to place
p1. the net has a dedicated place initial and a place final , astart and an end transition.
a compliant behavior takes the net from the initial marking to the Ô¨Ånal marking (just one
token in final ) showing arbitrary many instances of the compliance rule. every petridiagnostic information in temporal compliance checking 9
net of [21] formalizing a control-Ô¨Çow rule can be extended in this way to distinguish
multiple instances of the same rule in a trace; see [22] for the complete pattern repository.
the alignments of sect. 2 can be used to check compliance of a trace to the com-
pliance rule ‚Äúactivity amust be executed in groups of koccurrences‚Äù. assume the
trace=h(b;1)(a;2)(a;30)(a;54)(a;100)(c;123)(a;162)(d;173)ito be given.
for control-Ô¨Çow compliance checking, we ignore attributes other than activity and
thus align the trace =hbaaaacadito the net of fig. 4. when aligning ,a
maps toaand
maps to all other events b;c;d which are not relevant for the rule.
additionally, we assume transitions start ,end,istandicmpto be silent so that moves
on the speciÔ¨Åcation (without corresponding event in ) have cost 0. the approach of
sect. 2 yields a best alignment 1=baaaacad
start
istaaaicmpista
aaicmp
endshowing 1
instance of the rule with 3 occurrences of aand 1 instance of the rule with 2 occurrences
ofa. the alignment also shows a missing event ain the second instance by the move on
speciÔ¨Åcation (;a). note thathas 6 more best alignments to the net of fig. 4 varying
in where the move (;a)is placed. the subsequent steps (shown for 1) would have to
be executed for each of these alignments.
to align temporal compliance checking with control-Ô¨Çow compliance checking, we
enrich the original trace with information about rule instances and control-Ô¨Çow devia-
tions, as follows. (1) translate each move of the alignment into a log event, where each
event originating in a non-synchronous move is marked by a special ‚Äúmove‚Äù attribute.
(2) enrich each event of a synchronous move with all attributes of the original event in
trace. (3) provide each event of a move on speciÔ¨Åcation with missing attributes, in
particular an event without a time attribute gets the time value of the directly preceding
event (except start andistwhich get the time value of the succeeding event).
for example, using alignment 1we enrich trace given above to the traces ;1=
h(start;1)(b;1)(ist;2)(a;2)(a;30)(a;54)(icmp;54)(ist;100)(a;100)(c;123)(a;123;
missing )(a;162)(icmp;162)(d;173)( end;173) . this traces now contains enough in-
formation to check temporal compliance.
3.4 formalizing and checking temporal compliance rules
this section introduces a new technique to check temporal compliance. we express
temporal compliance rules using the data-aware petri nets of sect. 2, which allow to
describe and constrain time in processes. the corresponding alignments of a data-aware
petri net to a log [13] will then allow to check for temporal compliance and provide
detailed diagnostic information. for the alignment, we use the enriched log provided by
the technique of sect. 3.3. this enriched log distinguishes all different instances of the
control-Ô¨Çow rule that underlies the temporal rule to be checked. in addition, it allows
to integrate diagnostic information for violations in the control-Ô¨Çow and the temporal
perspective.
formalizing temporal constraints. we explain the formalization of temporal compli-
ance rules by the Ô¨Årst temporal rule of our running example. the concrete temporal rule
reads ‚Äúbetween two subsequent administration of antibiotics in a cycle, there should be
one day delay,‚Äù which we abstract to ‚Äúthe delay between two subsequent executions of10 elham ramezani et al.
initial
finalistœâ 
icmp{tx1‚Äô= e.time}
xn{ti-st‚Äô = e.time,
tx1‚Äô = undef,
‚Ä¶
txn‚Äô = undef}
{ti-cmp‚Äô = e.time}x1
. . .
{txn‚Äô = e.time}œâ start
endvar: tstart, tend, ti-st, ti-cmp,
        tx1, ‚Ä¶,txn
{tend‚Äô = e.time}{t‚Äôstart = e.time}
initial
finalistœâ 
icmp
a{ta‚Äô = undef}
{ta‚Äô = e.time}œâ start
end
[delay(a,24hrs,24hrs]var: ta
fig. 5. temporal petri-net pattern, generic (left) and instantiated (right)
activityain an instance of a control-Ô¨Çow rule, must be within [;]time units.‚Äù the
data-aware petri net of fig. 5(right) formalizes this rule.
the petri net has a very simple control-Ô¨Çow structure that just distinguishes begin
and end of a trace (places initial andfinal ), and whether the trace is within an instance
of a control-Ô¨Çow rule (after istoccurred) or outside a control-Ô¨Çow rule (after icmp
occurred). transitions labeled 
allow occurrences of all other activities not constrained
by the temporal rule. the actual temporal aspect is described by the variable taand
the data annotations at transition aandist. annotationft0
a=e:timegataensures
thattaholds the timestamp of the most recent occurrence of activity a. the most
important annotation is the guard [delay (a;; )]deÔ¨Åned by delay (a;; )t0
a2
[ta+;ta+]_ta=undef . the guard states that the time t0
aof the current occurrence
ofahas to be in the interval [ta+;ta+], wheretais the timestamp of the most
recent occurrence of a. as the rule only ranges over occurrences of awithin the same
instance of the control-Ô¨Çow rule, we have to take special care for the Ô¨Årst occurrence
ofain an instance. the annotation at istinitializesta=undef so that the guard of
aalso holds for the Ô¨Årst a. by setting parameters a=antibiotic administration and
== 24 hours, the pattern of fig. 5 formalizes the given temporal rule.
checking temporal compliance. we check compliance of a trace to the formalized rule
on the enriched log trace obtained in sect. 3.3, for instance trace ;1. the data-aware
alignment technique explained in sect. 2 compares the time stamp of events in ;1with
admissible time stamps deÔ¨Åned in the guards of the data-aware petri net and will give a
data-aware alignment t
1, with the least cost, as follows: t
1=(start;1)(b;1)(ist;2)(a;2)...
(start;1)(
;1)(ist;2)(a;2)...
...(a,30) (a;54)(icmp;54)(ist;100) (a;100) (c;123) (a,123,missing) (a,162) (icmp;162) (d;173) (end; 173)
...(a,26) (a;54)(icmp;54)(ist;100) (a;100) (
;123) (a,124,missing) (a,148) (icmp;162) (
;173) (end; 173).
as is shown in the alignment t
1the secondain the Ô¨Årst instance occurred 28time
units after the preceding a, which violates the temporal rule. the data-aware alignment
in addition returns the time at which the event should have occurred at the bottom row of
the alignment. in the same way, two deviations in the second iteration are highlighted.
however, the ‚Äúcorrect‚Äù timestamps 124and148suggested by the alignment have to be
inspected carefully as in the second instance the second awas missing in the original log
(a control-Ô¨Çow violation indicated by the attribute value missing ). recall from sect. 3.2
that we may have to check several enriched variants of the same original trace (differing
in control-Ô¨Çow violations); after checking all variants, the one with the least temporal
violations is returned and all other are discarded.
a generic temporal pattern. as said in sect. 3.2, we identiÔ¨Åed 15 generic temporal
compliance rules [22]. each rule can be formalized in a data-aware petri net similardiagnostic information in temporal compliance checking 11
to fig. 5(right). the generic pattern is shown in fig. 5(left). it permits to constrain
occurrences of ngeneric activities x1;:::;xn, as well as the start andend of a trace
and start and end of each instance (by istandicmp). each formalization of a compliance
rule assigns a guard to one or more transitions of the pattern, depending on the particular
temporal property. we show some more formalizations next.
the rule ‚Äúthe delay between execution of two subsequent instances of a control-Ô¨Çow
rule, must be within [;]time units.‚Äù (which expresses the second temporal rule of our
running example of sect. 3.1.) the formalization of this rule instantiates fig. 5(left) with
n= 0(no activityxi), variablestistandticmpand the guard delay2 (icmp;ist;;)
t0
ist2[ticmp+;ticmp+]_ticmp=undef assigned to transition tist. this way,ist
is only allowed to occur between ticmp+andticmp+whereticmpis the last time
icmpoccurred (if there was a last occurrence). checking temporal compliance of ;1of
sect. 3.3 to this rule for = 7days and=1(and mapping all activities to 
), we
obtain the following data-aware alignment:
t
3=(start;1)(b;1)(ist;2)(a;2)(a;30)(a;54)(icmp;54)(ist,100) (a;100) (c;123) ...
(start;1)(
;1)(ist;2)(
;2)(
;30)(
;54)(icmp;54)(ist,242) (
;100) (
;123) ....
the alignment t
3highlights a deviation for the start of the second instance of ‚Äú 3
administrations of antibiotics .‚Äù according to the log, the second administration started
just 46 hours after the preceding treatment where the rule requires a delay of at least 1
week (= 168 hours); the correct time is shown in the bottom row of the alignment.
also compliance rules requiring the absence of an activity in a particular interval
can be formalized: ‚Äúno activity awithin all instances of a control Ô¨Çow pattern may
be executed within [;]time units since time t.‚Äù for this temporal rule, the generic
temporal pattern of fig. 5, has n= 1 transition. the guard for this temporal rule is:
negation activity execution (x1;t;; )t0
x162[t+;t+]. here, the time tcan
be a Ô¨Åxed time, or the time of some other activity (e.g., include x2in the pattern and
deÔ¨Ånet=tx2).
many temporal compliance requirements found in literature combine several con-
straints on the relation between the start andcompletion of two different activities; for in-
stance, ‚Äúwithin all instances of a control Ô¨Çow rule, activity bmust start within [st;st]
time units after activity astarts, and activity bmust complete within [cmp;cmp]
time units before activity acompletes.‚Äù for this temporal rule, the generic temporal
pattern of fig. 5, has n= 4 transitions labeled ast,acmp,bstandbcmpexpress-
ing the start and completion of aandb, respectively. the pattern uses the generic
guard after(x;y;; )t0
y2[tx+;tx+]_tx=undef twice: once as
after(ast;bst;st;st)at transition bstand once as after(bcmp;acmp;cmp;cmp)
at transition acmp. other combinations of this temporal constraint can be expressed in
the same way varying the parameters of the guards.
similarly, all other identiÔ¨Åed temporal compliance constraints identiÔ¨Åed in literature
can be formalized by instantiating the generic temporal pattern of fig. 5; see [22] for
details. each formalization is then eligible for temporal compliance checking using
data-aware alignments. our temporal compliance checking technique is not limited
to predeÔ¨Åned control-Ô¨Çow rules and temporal rules, but is extendible. in sect. 4 we
show how we can adapt a generic temporal compliance rule for compound and complex
temporal restrictions.12 elham ramezani et al.
4 experimental results
our temporal compliance checking technique is implemented in process mining toolkit
prom, available from www.promtools.org , and was applied in a case study on
real-life logs. we brieÔ¨Çy discuss the implementation in prom and then provide details
on the case study.
implementation in prom. the temporal compliance checker is available in the package
compliance that provides 2 user-friendly plugins for temporal compliance checking. the
Ô¨Årst plugin provides control-Ô¨Çow compliance checking as described in sect. 3.3: it takes
as input a log and returns compliance diagnostics in form of an alignment, the control-
Ô¨Çow rule to check compliance for is picked by the user from a rule repository[22] using
a wizard. the second plugin takes the control-Ô¨Çow alignment, produces an enriched
log and then checks temporal compliance of the log to a temporal rule that can be
speciÔ¨Åed by the user through a wizard. the resulting alignment then provides diagnostic
information by showing control-Ô¨Çow compliance violations and temporal violations
projected into the events of the original log.
case study. we applied this implementation of the compliance checker in a case study
for checking compliance of the building permit processes of Ô¨Åve dutch municipalities.
the municipalities may carry out the building permit process in different ways, as
long as it is compliant to a number of regulations issued by the dutch legislative. to
test the feasibility of our temporal compliance checking technique, we selected a rather
involved temporal compliance requirement that combines static and dynamic temporal
aspects.
the compliance requirement was given informally: ‚Äúevery application must be
processed within at most 8weeks from the date of a submitted request. if during the
processing of the request, the organization requires additional information from the
applicant, the time interval between asking for additional information and providing the
information by the client must be added to the 8weeks.‚Äù this requirement is decomposed
into two control-Ô¨Çow compliance rules and one temporal compliance rule:
control-flow compliance rule 1 : ‚Äúevery time activity ais executed, it must be
followed eventually by activity d.‚Äù
control-flow compliance rule 2 : ‚Äúthe sequence of activities bandcmay only be
executed after the execution of activity aand before the execution of activity d.‚Äù
temporal compliance rule : ‚Äúthe delay between execution of two subsequent activities
aanddin all instances of a control-Ô¨Çow pattern, must be [;+2]time units since
timet, where2is the time between executing bandc.‚Äù
we formalized the two control-Ô¨Çow compliance rules by instantiating a corresponding
petri net pattern from the compliance rule repository in [22]. their generic parameters
were mapped as follows: a=submit request ,b=request additional information ,
c=receive additional information andd=publish result . the formalization of the
temporal compliance rule was derived by instantiating the generic temporal pattern of
fig. 5(left) as follows. the temporal rule requires 4 activities a,b,c, anddand a
variation of the guard delay2 introduced earlier. the guard delay3 (a;b;c;d;; )
t0
d2[ta+;ta++(tc tb)]_ta=undef is assigned to transition dwith= 0
and=8 weeks . as activities bandcare optional, we have to provide valid timediagnostic information in temporal compliance checking 13
municip. cases violations
# delay (months)
avg. max.
m1 257 51 3 8
m2 166 37 4 15
m3 353 54 3 10
m4 269 38 3 11
m5 319 53 4 9
table 2. temporal compliance violations
0
10
20
30
40
50
60
70
0%
20%
40%
60%
80%
100%
25
30
35
40
45
50
55
60
65
70
% violated
# cases
trend (% violated) fig. 6. violations vs. handover of work
stamps in variables tbandtcin each iteration. therefore, the instance start transition ist
of the temporal pattern (fig. 5(left)) initializes both variables to 0, i.e.,ft0
b= 0;t0
c= 0g,
making their difference 0 if bandcare absent.
in order to check compliance of the building permit process to these requirements,
we obtained Ô¨Åve event logs, each coming from a different municipality. each log was
extracted from the municipality‚Äôs case handling system and contained all activities
performed for a case together with time stamps and resource information. in total we
obtained 1408 cases as shown in table 2 together containing 35352 events. cases had 37
events in average and 97 events at most, distributed over 178 different event classes.
we Ô¨Årst checked for compliance violations of the control-Ô¨Çow rules, followed by
temporal compliance checking. in our analysis of the control-Ô¨Çow violations, we found
4real violations and 40false positives out of total number of 1408 cases in all munici-
palities. most of the false positives occurred due to inaccurate time stamps and mistakes
in data entries by a human user. the remaining real violations were mostly caused by
the publication of the result before the municipality processed the additional information
provided by the applicants. in general, the control-Ô¨Çow violations have not been severe
because the process under analysis is quite standardized in all 5municipalities. however
the temporal violations in all municipalities seem to be signiÔ¨Åcant. table 2 shows the
result of temporal compliance checking in different municipalities.
based on the diagnostic information we got from the temporal compliance checking,
we investigated the cause of the high number of temporal violations. we found that in
compliant cases requests for additional information were issued no later than 2 months
after receiving the application. in all violating cases, requests for additional information
were made only later than 2 months after receiving the application, i.e., when compliance
was violated already. this suggests that the process primarily needs to be improved
in the initial phase when employees gather and assess information about a particular
application.
another inÔ¨Çuential factor in increasing the violations, is the number of handovers
among employees working on a case. the diagram of fig. 6 shows the distribution
of cases and the percentage of violating cases over the number of resource handovers
happening in a case, for m1. the red squares indicate for a particular value xon the
x-axis how many cases of m1hadxhandovers of work; the blue diamond at xindicate
the percentage of cases with xhandovers of work that had a compliance violation. the
share of violations increases as handovers increase. this observation suggests that less
compliance violations occur when an employee handles several subsequent activities of14 elham ramezani et al.
a case. though, further analysis on organizational structure and division of work in m 1
is required. a process oriented division of work could decrease the number of handovers.
in addition, a job rotation programme could enrich the skill set of employees to be able
to execute more activities with respect to one case, hence decreasing the number of
handovers and improve compliance.
applying the technique presented in this paper, we were able to check compliance
of all the traces in the event logs rather than being limited to sample based compliance
checking. the technique is fast and works on large event logs because we can focus
on events relevant to a speciÔ¨Åc compliance rule and abstract from all other events. the
remaining effort for a human user is in formalizing the compliance requirements and
analyzing results. the effort in formalizing requirements was kept low in our case study.
we could pick available control-Ô¨Çow compliance patterns from an existing repository. a
wizard helped in selecting the right pattern. the main effort was in expressing the tem-
poral compliance requirement as the guard delay3 (a;b;c;d;; )presented earlier;
once the guard was identiÔ¨Åed, the constraint could quickly be formalized by instantiating
the generic pattern through a wizard. note that this formalization need to be done once.
checking could then be continued for all cases automatically.
the technique could identify, locate, and determine the extent of deviations. these
diagnostic information can be used by the business analyst to analyze the cause of the
deviations.
5 related work
existing work in temporal compliance checking primarily focuses on veriÔ¨Åcation at
design time or at run time.
it is possible to derive temporal properties of acyclic process models by annotating
tasks with intervals of execution and waiting times; execution times and waiting times of
the entire process can then be derived by interval computations and compared against
predeÔ¨Åned constraints of total execution times [5]. in addition, the time-critical paths
of a process model can be computed [20]. in a similar fashion, the approach in [15]
formulates temporal constraints in terms of deadlines for completing an activity (relative
to another activity). reasoning on time intervals is used to verify whether a constraint is
violated.
for verifying that a process with loops satisÔ¨Åes a general time-related constraint,
typically temporal model checking techniques are applied. the properties of interest are
metric temporal constraints, e.g., deadline on execution of activities in a business process.
metric temporal logic (mtl), a temporal logic with metric temporal constraints, can
express typical compliance requirements as presented in this paper. unfortunately, the
model checking problem for mtl is undecidable over models with inÔ¨Ånite traces [9]. by
introducing so called observers on atomic propositions, the problem whether a process
model, given as a timed transition system (tts), satisÔ¨Åes an mtl formula becomes
decidable by a reduction to ltl modelchecking [2]. this approach allows to check
temporal compliance of a real-time extension of dwyer‚Äôs speciÔ¨Åcation patterns [4]. a
similar approach is followed in [6] for checking whether an extended ccsl (clockdiagnostic information in temporal compliance checking 15
constraint speciÔ¨Åcation language) speciÔ¨Åcation holds in a timed petri net; ccsl is less
expressive than the constraints that can be expressed and checked with our technique.
an alternative approach to describe temporal constraints is timed declare [24] in
which ltl-like constraints are extended with the notion of time. by a translation to timed
automata, such constraints can be monitored at runtime to evaluate whether a process
instance might or will violate a temporal constraint. a similar approach is proposed
in [17].
in comparison, the technique presented in this paper focuses on backwards checking
of temporal constraints in execution logs. the generic petri net pattern proposed in
sect. 3.4 is capable to express all temporal constraints that we encountered in the works
discussed above, and other temporal constraints such as cyclic temporal constraints not
discussed elsewhere; see [22] for a detailed discussion. our technique detects alltemporal
violations in a trace, not just the Ô¨Årst temporal violation encountered as it happens in
model checking approaches. in case of violations also the compliant behavior (when a
non-compliant event should have happened) is returned as diagnostic information.
6 conclusion
in this paper, we provided an approach for temporal compliance checking of behavior
recorded in execution logs. we developed a generic technique for formalizing all kinds
of temporal compliance constraints, including all temporal compliance constraints docu-
mented in literature. in addition, we provide a general temporal compliance checking
technique based on alignments. our technique separates control-Ô¨Çow and temporal com-
pliance checking to the possible extent, and provides integrated diagnostic information
about both control-Ô¨Çow violations and temporal compliance violations. in particular, our
technique is capable of Ô¨Ånding all violations in a trace and highlights what the most
likely compliant behavior should have been.
we provide a repository of compliance rules and an implementation of our compli-
ance checker in the compliance package of prom. the software has been tested in a case
study involving real-life logs from Ô¨Åve dutch municipalities. the results are encouraging:
we were able to uncover various violations and no performance issues were encountered.
future research aims at making the approach more user friendly. eliciting and
formalizing compliance rules, and mapping compliance diagnostics back to the original
data is still a challenging step. hence, higher-level compliance languages and more
intuitive diagnostics are needed for end-users.
acknowledgements. we thank massimiliano de leoni, joos c.a.m.buijs for their substantial
support in writing this paper.
references
1.van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on process
models for conformance checking and performance analysis. wiley interdisc. rew.: data
mining and knowledge discovery 2(2), 182‚Äì192 (2012)
2.abid, n., dal-zilio, s., botlan, d.l.: real-time speciÔ¨Åcation patterns and tools. in: fmics.
lncs, vol. 7437, pp. 1‚Äì15. springer (2012)16 elham ramezani et al.
3.adriansyah, a., van dongen, b., van der aalst, w.m.: conformance checking using cost-
based fitness analysis. edoc‚Äô11 0, 55‚Äì64 (2011)
4.dwyer, m.b., avrunin, g.s., corbett, j.c.: patterns in property speciÔ¨Åcations for Ô¨Ånite-state
veriÔ¨Åcation. in: icse. pp. 411‚Äì420 (1999)
5.eder, j., panagos, e., rabinovich, m.: time constraints in workÔ¨Çow systems. in: caise.
lncs, vol. 1626, pp. 286‚Äì300. springer (1999)
6.ge, n., pantel, m., cr ¬¥egut, x.: formal speciÔ¨Åcation and veriÔ¨Åcation of task time constraints
for real-time systems. in: isola (2). lncs, vol. 7610, pp. 143‚Äì157. springer (2012)
7.giblin, c., liu, a.y ., m ¬®uller, s., pÔ¨Åtzmann, b., zhou, x.: regulations expressed as logical
models (realm). in: jurix 2005. frontiers in artiÔ¨Åcial intelligence and applications, vol.
134, pp. 37‚Äì48. ios press (2005)
8.kharbili, m.: business process regulatory compliance management solution frameworks: a
comparative evaluation. in: apccm 2012. crpit, vol. 130, pp. 23‚Äì32. acs (2012)
9.koymans, r.: specifying real-time properties with metric temporal logic. real-time systems
2(4), 255‚Äì299 (1990)
10.lanz, a., weber, b., reichert, m.: time patterns in process-aware information system - a
pattern based analysis - revised version. tech. rep. uib-2009, university of ulm, germany
(2009)
11.lanz, a., weber, b., reichert, m.: workÔ¨Çow time patterns for process-aware information
systems. in: bmmds/emmsad. lnbip, vol. 50, pp. 94‚Äì107. springer (2010)
12.de leoni, m., maggi, f.m., van der aalst, w.m.p.: aligning event logs and declarative
process models for conformance checking. in: bpm‚Äô12. lncs, vol. 7481, pp. 82‚Äì97.
springer (2012)
13.leoni, m., aalst, w.: aligning event logs and process models for multi-perspective confor-
mance checking: an approach based on integer linear programming. tech. rep. bpm center
report bpm-13-05, bpmcenter.org (2013)
14.li, h., yang, y .: veriÔ¨Åcation of temporal constraints for concurrent workÔ¨Çows. in: apweb.
lncs, vol. 3007, pp. 804‚Äì813. springer (2004)
15.li, h., yang, y .: dynamic checking of temporal constraints for concurrent workÔ¨Çows. elec-
tronic commerce research and applications 4(2), 124‚Äì142 (2005)
16.ly, l.t., rinderle-ma, s., knuplesch, d., dadam, p.: monitoring business process compliance
using compliance rule graphs. in: otm‚Äô11. lncs, vol. 7044, pp. 82‚Äì99. springer (2011)
17.montali, m.: speciÔ¨Åcation and veriÔ¨Åcation of declarative open interaction models - a
logic-based approach, lnbip, vol. 56. springer (2010)
18.niculae, c.c.: time patterns in workÔ¨Çow management systems. tech. rep. bpm-11-04,,
bpm center report, bpmcenter.org (2011)
19.pitzmann, b., powers, c., waidner, m.: ibm‚Äôs uniÔ¨Åed governance framework (ugf). tech. rep.,
ibm research division, zurich (2007)
20.pozewaunig, h., eder, j., liebhart, w.: epert: extending pert for workÔ¨Çow management
system. in: adbis. pp. 217‚Äì224. nevsky dialect (1997)
21.ramezani, e., fahland, d., aalst, w.: where did i misbehave? diagnostic information in
compliance checking. in: business process management. lncs, vol. 7481, pp. 262‚Äì278.
springer (2012)
22.ramezani, e., fahland, d., van dongen, b., van der aalst, w.: diagnostic information in
temporal compliance checking. tech. rep., bpm center report bpm-12-17, bpmcenter.org
(2012)
23.ramezani, e., fahland, d., werf, j.m.e.m.v.d., mattheis, p.: separating compliance man-
agement and business process management. in: bpm workshops 2011. lnbip, vol. 100, pp.
459‚Äì464. springer (2012)
24.westergaard, m., maggi, f.m.: looking into the future: using timed automata to provide a
priori advice about timed declarative process models. in: coopis 2012. springer (2012)