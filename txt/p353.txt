matching observed behavior and modeled behavior: an
approach based on petri nets and integer programming
wil m.p. van der aalst
department of technology management
eindhoven university of technology
p.o.box 513, nl-5600 mb eindhoven, the netherlands
w.m.p.v.d.aalst@tm.tue.nl
abstract. inspired by the way sap r/3 and other transactional information systems log events,
we focus on the problem to decide whether a process model and a frequency proﬁle “ﬁt” together.
the problem is formulated in terms of petri nets and an approach based on integer programmingis proposed to tackle the problem. the integer program provides necessary conditions and, as
shown in this paper, for relevant subclasses these conditions are suﬃcient. unlike traditional
approaches, the approach allows for labelled petri nets with “hidden transitions”, noise, etc.
keywords: process mining, reference models, petri nets, integer programming, sap r/3,
marking equation, conformance testing.
1 introduction
for many processes in practice there exist models. these model are descriptive orprescriptive ,
i.e., they are used to describe a process or they are used to control or guide the system. a typicalexample are the so-called reference models in the context of enterprise resource planning
(erp) systems like sap [24]. the sap reference models are expressed in terms of so-called
event-driven process chains (epcs) [23] describing how people should/could use the sap r/3system. similarly models are used in the workﬂow domain [1], but also in many other domainsranging from ﬂexible manufacturing and telecommunication to operating systems and software
components [27]. in some domains these models are referred to as speciﬁcations orblueprints .
in reality, the real process may deviate from the modeled process, e.g., the implementation isnot consistent with the speciﬁcation or people use sap r/3 in a way not modeled in any of
the epcs.
clearly, the problem of checking whether the modeled behavior and the observed behavior
match is not new. however, when we applied our process mining techniques [4] to sap r/3
we where confronted with the following interesting problem: the logs of sap do not allowfor monitoring individual cases (e.g., purchase orders). instead sap only logs the fact that a
speciﬁc transaction has been executed (without referring to the corresponding case). hence,
tools like the sap reverse business engineer (rbe) report on the frequencies of transaction
types and not on the cases themselves. these transactions can be linked to functions in theepcs, but, as indicated, not to individual cases. moreover, some functions in the epc do not
correspond to a transaction code, and therefore, are not logged at all. this raises the following
interesting question: do the modeled behavior (i.e., the epc) and the observed behavior (i.e.,
the transaction frequencies) match?
ab
de c
p1p2
p3p4
p5p6
fig. 1. ap e t r in e t .
the problem of checking whether the modeled behavior and the observed behavior match
is not only relevant in the context of sap. in a wide variety of applications only frequencies arebeing recorded and/or it is impossible to link events to speciﬁc cases. therefore, we consider
an abstraction of the problem. consider a petri net with some initial marking [28,29] and
afrequency proﬁle which is a partial function indicating how many times certain transitions
ﬁred. consider for example the marked petri net shown figure 1. a frequency proﬁle fpcould
befp(a)=3 , fp(b)=2 , fp(c)=2 , fp(d) = 2, and fp(e) = 3, thus indicating the number of
times each transition occurred. however, the modeled behavior (i.e., the marked petri net) and
the observed behavior (the frequency proﬁle fp) do not match. it is easy to see that fp(b)+fp(c)
cannot exceed fp(a)s i n c e bandcdepend on the tokens produced by a. now consider another
frequency proﬁle fp:fp(a)=3 , fp(b)=2 , fp(d) = 2, and fp(e) = 3, i.e., the number of times
coccurred is unknown. now the modeled behavior and the observed behavior match, i.e., the
observed transition frequencies are consistent with the petri net model. moreover, it is clear
that in this situation coccurred precisely once.
2in the remainder we will focus on this problem and propose an approach based on integer
programming (ip) [33,36]. using a marked petri net and a frequency proﬁle, an ip problem
is formulated to check whether the modeled behavior and the observed behavior match and, if
so, the frequencies of transitions not recorded in the proﬁle are determined. first, we introducesome preliminaries, i.e., process mining, petri nets, and integer programming, and discuss re-
lated work. then we focus on the core problem and formulate the ip problem. we demonstrate
the applicability of our approach using an example. moreover, we show in more detail why theproblem is relevant in the context of sap and apply the approach to an sap process model.
finally, we conclude the paper by summarizing the results and discussing future work.
2 preliminaries
this section presents some preliminaries needed in the remainder of the paper. we ﬁrst discussthe concept of process mining and then introduce the two techniques used in this paper: petri
netsand integer programming . finally, we present some related work.
2.1 process mining
the research reported in this paper is part of our work on process mining [4,5, 14, 35]. the
goal of process mining is to extract information about processes from transaction logs [4]. wetypically assume that it is possible to record events such that (i) each event refers to an activity
(i.e., a well-deﬁned step in the process), (ii) each event refers to a case(i.e., a process instance),
(iii) each event can have a performer also referred to as originator (the person executing or
initiating the activity), and (iv) events have a timestamp and are totally ordered.
1table 1
shows an example of a log involving 19 events, 5 activities, and 6 originators. in addition to
the information shown in this table, some event logs contain more information on the case
itself, i.e., data elements referring to properties of the case.
event logs such as the one shown in table 1 are used as the starting point for mining.
we distinguish three diﬀerent perspectives: (1) the process perspective, (2) the organizational
1note that in table 1 we abstract from event types , i.e., we consider activities to be atomic. in real logs
events typically correspond to the start or completion of an activity. this way it is possible to measure
the duration of activity and to explicitly detect parallelism. moreover, there are other event types related
to failures, scheduling, delegations, etc. for simplicity we abstract from this in this paper. however, in ourprocess mining tools we take event types into account.
3case id activity id originator timestamp
case 1 activity a john 9-3-2004:15.01
case 2 activity a john 9-3-2004:15.12
case 3 activity a sue 9-3-2004:16.03
case 3 activity b carol 9-3-2004:16.07
case 1 activity b mike 9-3-2004:18.25
case 1 activity c john 10-3-2004:9.23
case 2 activity c mike 10-3-2004:10.34
case 4 activity a sue 10-3-2004:10.35
case 2 activity b john 10-3-2004:12.34
case 2 activity d pete 10-3-2004:12.50
case 5 activity a sue 10-3-2004:13.05
case 4 activity c carol 11-3-2004:10.12
case 1 activity d pete 11-3-2004:10.14
case 3 activity c sue 11-3-2004:10.44
case 3 activity d pete 11-3-2004:11.03
case 4 activity b sue 11-3-2004:11.18
case 5 activity e clare 11-3-2004:12.22
case 5 activity d clare 11-3-2004:14.34
case 4 activity d pete 11-3-2004:15.56
table 1. an event log.
perspective and (3) the case perspective. the process perspective focuses on the control-ﬂow,
i.e., the ordering of activities. the goal of mining this perspective is to ﬁnd a good character-
ization of all possible paths, e.g., expressed in terms of a petri net or event-driven processchain (epc). the organizational perspective focuses on the originator ﬁeld, i.e., which per-
formers are involved and how are they related. the goal is to either structure the organization
by classifying people in terms of roles and organizational units or to show relation betweenindividual performers (i.e., build a social network). the case perspective focuses on properties
of cases. cases can be characterized by their path in the process or by the originators working
on a case. however, cases can also be characterized by the values of the corresponding dataelements. for example, if a case represents a replenishment order it is interesting to know the
supplier or the number of products ordered.
the prom framework [4, 5,14] has been developed to extract information from event logs.
2
it oﬀers a wide varieties of so-called “plug-ins”. there are mining plug-ins for each of the three
perspectives. figure 2 shows a screenshot of the prom tool while analyzing the event log shown
in table 1.
2the prom framework can be downloaded from http://www.processmining.org.
4fig. 2. some mining results obtained using our prom tool (see http://www.processmining.org). the results
shown are based on the event log shown in table 1.
the petri net [13] shown on the right-hand side in figure 2 is the result of applying the
αalgorithm plug-in to the event log shown in table 1. this is one of the ﬁve mining plug-ins
focussing on the process perspective . note that the event log contains information about ﬁve
cases (i.e., process instances). the log shows that for four cases (1, 2, 3, and 4) the activities a,b, c, and d have been executed. for the ﬁfth case only three activities are executed: activities
a, e, and d. each case starts with the execution of a and ends with the execution of d.
if activity b is executed, then also activity c is executed. however, for some cases activityc is executed before activity b. the αalgorithm [5] translates this information into causal
dependencies and generates the petri shown in figure 2. it is easy to see that this is indeed the
most likely process model explaining the behavior observed in the log. the petri net starts withactivity a and ﬁnishes with activity d. these activities are represented by transitions. afterexecuting a there is a choice between either executing b and c in parallel or just executing
activity e.
prom also has plug-ins to analyze the organizational perspective . an example is shown on
the left-hand side in figure 2. using the social network mining plug-in [3] a so-called social
5network is generated. the social network shown in figure 2 is based on the transfer of work
from one individual to another, i.e., the focus is on relations among individuals (or groups
of individuals) based on how work ﬂows through the organization. consider again table 1.
although carol and mike can execute the same activities (b and c), mike is always workingwith john (cases 1 and 2) and carol is always working with sue (cases 3 and 4). probably carol
and mike have the same role but based on the small sample shown in table 1 it seems that
john is not working with carol and sue is not working with carol. these examples show thatthe event log can be used to derive relations between performers of activities, thus resulting in
a sociogram as shown in figure 2. the sociogram shows that work is transferred to pete but
not vice versa. mike only interacts with john and carol only interacts with sue. clare is theonly person transferring work to herself.
besides the “how?” and “who?” question (i.e., the process and organization perspectives),
there is the case perspective that is concerned with the “what?” question. the case perspective
looks at the case as a whole and tries to establish relations between the various properties (i.e.,
data) of a case. prom also allows for the analysis of this perspective (e.g., through the ltl
checker plug-in). however, table 1 does not show any data elements. therefore, we do notelaborate on this and simply refer to [4, 14].
as figure 2 shows, an event log such as the one shown in table 1 can be the starting point of
a wide variety of analysis techniques. unfortunately, these classical forms of process mining only
work if the identities of individual cases are logged . in reality, like in sap, often only frequencies
of activities are known or the ﬁrst column in table 1 is missing (case id’s). therefore, we would
like to extend our work on process mining to situations were only frequencies are known as
described in the introduction.
2.2 petri nets
this section introduces the basic petri net terminology and notations (cf. [29,12]). readers
familiar with petri nets can skip this section.
the classical petri net is a directed bipartite graph with two node types called places and
transitions . the nodes are connected via directed arcs. connections between two nodes of the
same type are not allowed. places are represented by circles and transitions by rectangles.
6deﬁnition 1 (petri net). a petri net is a triple (p,t,f ):
-pis a ﬁnite set of places,
-tis a ﬁnite set of transitions ( p∩t=∅),
-f⊆(p×t)∪(t×p)is a set of arcs (ﬂow relation)
ap l a c e pis called an input place of a transition tiﬀ there exists a directed arc from ptot.
place pis called an output place of transition tiﬀ there exists a directed arc from ttop.w e
use•tto denote the set of input places for a transition t. the notations t•,•pandp•have
similar meanings, e.g., p•is the set of transitions sharing pas an input place. in this paper, we
do not consider multiple arcs from one node to another. however, all results can be extended
to petri nets with arcs weights.
figure 1 shows a petri net with 5 transitions ( a,b,c,d,a n d e) and 6 places ( p1,...p6).
at any time a place contains zero or more tokens , drawn as black dots. the state, often
referred to as marking , is the distribution of tokens over places, i.e., m∈p→i n .w ew i l l
represent a marking as follows: 1/primep1+2/primep2+1/primep3+0/primep4 is the marking with one token in place
p1, two tokens in p2, one token in p3 and no tokens in p4. we can also represent this marking
as follows: p1+2/primep2+p3. the marking shown in figure 1 is p1. (note the overloading of
notation.) to compare markings we deﬁne a partial ordering. for any two markings m1and
m2,m1≤m2iﬀ for all p∈p:m1(p)≤m2(p).
the number of tokens may change during the execution of the net. transitions are the active
components in a petri net: they change the marking of the net according to the following ﬁring
rule:
(1) a transition tis said to be enabled iﬀ each input place poftcontains at least one token.
(2) an enabled transition may ﬁre. if transition tﬁres, then tconsumes one token from each
input place poftand produces one token for each output place poft.
in figure 1 transition ais enabled. firing aresults in marking 2/primep1+p2+p3. in this marking,
three additional transitions (besides a) are enabled ( b,c,d). any of these transitions may ﬁre.
however, ﬁring one of these transition will disable one or two other transitions, e.g., ﬁring c
will disable both bandd.
7given a petri net ( p,t,f ) and a marking m1, we have the following notations:
-m1t→m2: transition tis enabled in marking m1and ﬁring tinm1results in marking m2
-m1→m2: there is a transition tsuch that m1t→m2
-m1σ→mn: the ﬁring sequence σ=t1t2t3...tn−1leads from marking m1to marking mnvia
a (possibly empty) set of intermediate markings m2, ...m n−1, i.e.,m1t1→m2t2→...tn−1→mn
a marking mnis called reachable fromm1(notation m1∗→mn) iﬀ there is a ﬁring sequence
σsuch that m1σ→mn. note that the empty ﬁring sequence is also allowed, i.e., m1∗→m1.
to manipulate ﬁring sequences, we introduce the parikh vector πσ∈t→i n, where πσ(t)
denotes the number of occurrences of transition tinσ.
we use ( pn,m)t od e n o t eap e t r in e t pnwith an initial marking m. a marking m/primeis
areachable marking of (pn,m)i ﬀm∗→m/prime. consider the petri net shown in figure 1 with
only one token in p1. for this initial marking there are 6 reachable markings.
2.3 integer programming
besides petri nets we use integer programming (ip) to address the problem of checking whether
the modeled behavior and the observed behavior match. an ip problem can be seen as a variant
of the classical linear programming (lp) problem [33, 36]. therefore, before introducing the
ip problem, we brieﬂy introduce the basic idea of an lp problem. first, we deﬁne the lp
problem. the standard form of an lp problem is:
min (c1,c2,...,c n)(x1,x2,...,x n)
s.t.a(x1,x2,...,x n)=(b1,b2,...,b m)
xi≥0 for all 1 ≤i≤n
where x1,x2,...,x narenvariables forming a (unknown) vector ( x1,x2,...,x n),ais a matrix
of known coeﬃcients, and ( c1,c2,...,c n)a n d( b1,b2,...,b m) are vectors of known coeﬃcients.
the expression ( c1,c2,...,c n)(x1,x2,...,x n) takes the product of two vectors and is called the
objective function . the equations formed by a(x1,x2,...,x n)=(b1,b2,...,b m) are called the
constraints. all these entities must have consistent dimensions.3. note that nis the number of
variables and mis the number of constraints. the goal is to minimize the objective function
while respecting the constraints.
3technically, one should add transpose symbols to vector/matrix multiplications.
8although all linear programs can be put into the standard form, in practice it may not
be necessary to do so. for example, although the standard form requires all variables to be
non-negative it is possible to rewrite k≤xi≤linto the standard form by using two new
variables xk=xi−kandxl=l−xiand require xk≥0a n d xl≥0. similarly, inequalities
in the constraints can be replaced by equalities by introducing explicit slack variables. the
simplex method was the ﬁrst method developed to solve lp problems. a much more eﬃcient
(polynomial time) algorithm was found by karmarkar in 1984 [22].
for many applications the assumption that the variables are continuous is unrealistic.
in many practical applications, some variables will denote decisions, e.g., xi=0o r xi=1
rather than any value between 0 and 1. in an integer programming (ip) problem the variablesare integers, i.e., it is like an lp problem but now x
ishould be integer for all 1 ≤i≤n.
unfortunately, the ip problem can no longer be solved in polynomial time and one needs to
resort to computationally expensive methods like branch and bound [33, 36].
in some cases it is useful to consider the lp relaxation of an ip problem. in this case
the objective function and constraints are the same but the integer variables are replaced
by appropriate continuous variables and constraints. for example xi=0o r xi= 1 is then
replaced by 0 ≤xi≤1. the lp solution might turn out to have all variables taking integer
values at the lp optimal solution. in this case we obtain an optimal integer solution. if we
have variables taking fractional values at the lp optimal solution, then we can round these to
the nearest integer value. however, in many cases the rounded lp relaxation solution eitherviolates a constraint or yields a non-optimal solution, i.e., lp relaxation is fast (polynomial
time) but is may be inaccurate to some degree. nevertheless, ip problems are typically easier
to solve than methods requiring the construction of the full state space.
2.4 related work
the starting point of this work is the literature on process mining [4–6, 8, 18, 20,26, 32, 35]. the
idea of applying process mining in the context of workﬂow management was ﬁrst introduced
in [6]. since then several researchers have been working on this topic and we refer to [4] for asurvey on process mining. prom [14] is an example of a tool for process mining. an example of
a commercial tool is the aris process performance manager (ppm) [20]. some of the ideas
9developed in the context on the prom tool have been adopted in tools like ppm (e.g., the
organalyzer in version 4).
although not explicitly addressed in this paper, our work is related to reference modeling
[7, 30]. one of the most comprehensive models is the sap reference model [9, 24]. its data
model includes more than 4000 entity types and the reference process models cover more
than 1000 business processes and inter-organizational business scenarios. most of the otherdominant erp vendors have similar or alternative approaches towards reference models. wehave developed a new reference modeling language: conﬁgurable epcs [31], i.e., an extension
of the epc language [23] used by sap and aris. using classical process mining techniques
we have developed an approach to discover the conﬁguration [21].
in a technical sense, the work presented is most related to the “marking equation” known
from petri net theory [27,11, 34] and this paper builds on some of these results. however, theapproach presented diﬀers in at least two ways. first of all, the marking equation considersthe initial andresulting marking while we only consider the initial marking. second, we allow
for transition frequencies that are unknown, i.e., the frequency proﬁle may be incomplete.
moreover, the approach allows for the extensions described in section 5 while the markingequation does not. clearly there are also relations with the classical results on place and
transition invariants [12,34, 28]. however, these are less direct.
3 matching a marked petri net and a frequency proﬁle
as indicated in the introduction, we use petri nets to model processes. however, other types
of models, e.g., the epcs used by the sap reference model, can be mapped onto petri nets.4
petri nets may be used to model a wide variety of processes. a petri net can model what wethink the process is (i.e., a descriptive model) but it can also model what the process should be
(i.e., a prescriptive model). in both cases, the real process may deviate from what is modeled
in the petri net. in this section, we investigate whether the modeled behavior (i.e., petri net)
and the observed behavior match. since in reality we often cannot inspect the state and justobserve events, it is realistic to assume that we can only monitor the ﬁring of transitions.
4note that the mapping of semi-formal models such as epcs is a not a trivial task. it may be necessary to
remove ambiguities before mapping the model onto a petri net [2, 10,25].
10moreover, we assume that we cannot link transition occurrences to speciﬁc tokens or exploit
their ordering in time, i.e., we only know the frequency proﬁle .
ab
de c
p1p2
p3p4
p5p6
pn = (p,t,f) , with
 p={p1,p2,p3,p4},
 t={a,b,c,d},
 f={(p1,a),(a,p2),(a,p3),(p2,b),(p2,c),(p3,c),(p3,d),
     (b,p4),(c,p4),(c,p5),(d,p5),(p4,e),(p5,e),(e,p6)}
m = {(p1,3),(p2,0),(p3,0),(p4,0),(p5,0),(p6,0)}
(a)(b) (c)3 e2 d2 c2 b3 afp(p) p
3 e2 d2 c2 b3 afp(p) p
3 e2 d? c2 b3 afp(p) p
3 e2 d? c2 b3 afp(p) p
fig. 3. a process model with two frequency proﬁles.
to illustrate the problem, we again show the petri net used in the introduction. figure 3,
shows a petri net and two frequency proﬁles. both the graphical and textual representation of
the marked petri net are given in figure 3(a). for a petri net with transitions t, the frequency
proﬁle refers to a subset of t, i.e., frequency proﬁle fp∈t/negationslash→i n is a partial function. for
t∈dom(fp),fp(t) is the number of times toccurred/ﬁred. for t/negationslash∈dom(fp) this is unknown.
ifdom(fp)=t, the frequency proﬁle is complete . figure 3(b) shows a complete frequency
proﬁle. the frequency proﬁle shown in figure 3(c) is incomplete because fp(c) is not given
(i.e.,c/negationslash∈dom(fp)).
the marked petri net shown in figure 3(a) and frequency proﬁle given in figure 3(b) do
not “match”, because there is no ﬁring sequence starting from the initial marking resulting inthefpshown ( fp(b)+fp(c) cannot exceed fp(a)s i n c e bandcdepend on the tokens produced
bya, but it does). however, a match with the frequency proﬁle given in figure 3(c) is possible.
the ﬁring sequence ( a, b, d, e, a, b, d, e, a, c, e ) ﬁres aandethree times, banddtwo times, and
conce, i.e., it is consistent with the fpshown in figure 3(c).
both for complete and incomplete frequency proﬁles we deﬁne the predicate match (pn,m, fp)
to formalize the notions just introduced.
11deﬁnition 2 (match). let(pn,m)be a marked petri net with pn =(p,t,f )and fp ∈
t/negationslash→i n a frequency proﬁle. (pn,m)and fp match if there exists a ﬁring sequence σenabled
inm(i.e.,mσ→) such that for all t∈dom(fp):f p(t)=πσ(t). (notation: match (pn,m, fp).)
clearly, match (pn,m, fp)= falsefor figure 3(b) and match (pn,m, fp)= truefor fig-
ure 3(b). note that for any marked petri net there is a trivial matching proﬁle fpwith
dom(fp)=∅.
deﬁnition 2 refers to the existence of one ﬁring sequence σ. this ﬁring sequence may refer
to multiple process instances (called “cases” in workﬂow jargon) as shown in the example.
(a, b, d, e, a, b, d, e, a, c, e ) symbolizes the complete processing of the three cases in place p1. in
figure 3(a) the initial marking determines the number of cases. however, it is also possibleto add source transitions (i.e., transitions without any input places) and sink transitions (i.e.,
transitions without any output places). in the example of figure 3 we could have started
with an empty initial marking (no tokens) and a source transition t
startwith•tstart=∅
andtstart•={p1}. in this case, figure 3(b) still does not match while figure 3(c) does.
this example shows that match (pn,m, fp) can be applied to “open nets” (source and sink
transitions and no initial tokens), “closed nets” (no source and sink transitions and initiallysome places are marked), and mixtures of the latter two.
even for moderate examples, the number of ﬁring sequences may be too large to check
match (pn,m, fp). therefore, in the spirit of [11, 27], we can try to formulate a linear alge-
braic representation. given the discrete nature of ﬁring transitions, we propose an integerprogramming (ip) problem rather than an linear programming (lp) problem [33, 36]. in
other words, we consider the function match (pn,m, fp) and try to formulate it in terms of
an ip problem.
deﬁnition 3 (integer programming problem). let(pn,m)be a marked petri net with
pn=(p,t,f )and fp ∈t/negationslash→i n a frequency proﬁle. ip (pn,m, fp)is the corresponding
12integer programming (ip) problem:
min/summationtext
t∈tft
s.t.ft=fp(t) for all t∈dom(fp)
f(t,p)=ftfor all ( t, p)∈f∩(t×p)
f(p,t)=ftfor all ( p, t)∈f∩(p×t)
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥0 for all p∈p
ft≥0 for all t∈t
ftinteger for all t∈t
f(x,y)integer for all ( x, y)∈f
there are two types of positive integer variables: ftfor transition frequencies and f(x,y)for
arc frequencies. the ﬁrst constraint speciﬁes that the transition frequencies should match the
frequency proﬁle. note that for some transitions there may not be a frequency in the frequencyproﬁle. the second and third constraint refer to the fact that transition frequencies and arc
frequencies need to be aligned. the fourth type of constraint is the most interesting one. for
each place, there should be a balance between the inﬂow of tokens and the outﬂow of tokens,i.e., it is not possible to consume more tokens than the initial ones plus the produced ones. the
objective function minimizes the number of ﬁrings. given the nature of the problem this is of
less importance and alternative objective functions can be deﬁned, e.g., an objective functionmaximizing or minimizing the number of tokens in the net.
before we discuss the relation between match (pn,m, fp)a n d ip(pn,m, fp), let us return
to the petri net shown in figure 3(a). assuming some initial marking mand some frequency
13proﬁle fp,ip(pn,m, fp) is formulated as follows.
minfa+fb+fc+fd+fe
s.t.fa=fp(a)
...
f(a,p2)=fa
...
f(p1,a)=fa
...
m(p1)−f(p1,a)≥0
m(p2) +f(a,p2)−f(p2,b)−f(p2,c)≥0
m(p3) +f(a,p3)−f(p3,c)−f(p3,d)≥0
m(p4) +f(b,p4)+f(c,p4)−f(p4,e)≥0
m(p5) +f(c,p5)+f(d,p5)−f(p5,e)≥0
m(p6) +f(e,p6)≥0
fa≥0
...
fainteger
...
f(p1,a)integer
...
applying this to the initial marking shown in figure 3(a) and the frequency proﬁle fp(a)=
3,fp(b)=2 , fp(c)=2 , fp(d) = 2, and fp(e) = 3 indeed results in an ip problem without a
solution. while applying it to the second frequency proﬁle fp(a)=3 , fp(b)=2 , fp(d)=2 ,
and fp(e) = 3 yields the solution where fc= 1. in the latter case the value of the objective
function is 11.
in the remainder of this section we investigate the relation between match (pn,m , fp)
and ip(pn,m, fp), i.e., “can the ip problem be used to determine whether the modeled and
observed behavior match?”. it is important to establish this relation because, ip(pn,m, fp)
an be solved more eﬃciently than determining match (pn,m , fp) on the basis of constructing
and traversing the coverability graph [12, 27, 29].
the following theorem shows that, as expected, the ip problem indeed provides necessary
requirements.
theorem 1. let(pn,m)be a marked petri net with pn =(p,t,f )and fp ∈t/negationslash→in a
frequency proﬁle. if match (pn,m, fp), then ip (pn,m, fp)has a solution.
proof. ifmatch (pn,m, fp), then there exists a ﬁring sequence σenabled in m(i.e.,mσ→)
such that for all t∈t:fp(t)=πσ(t). let m/primebe the resulting marking. now consider the ip
14problem. the only constraint that could be violated is m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥
0 for some p∈p. however, this constraint follows directly from the ﬁring rule. in fact,
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=m/prime(p). /intersectionsq/unionsq
the theorem shows that, if ip(pn,m, fp) does not have a solution, match (pn,m, fp)
does not hold. this allows for the quick detection of mismatches between the model and the
observed behavior.
bc
ga
p1d
e
fp2
p3
p4
p5p6
p7
fig. 4. counter example.
unfortunately, the result does not hold in the opposite direction, as can be shown by an
example taken from [12]. figure 4 shows a marked petri net. let fp(t) = 1 for all transitions t
except for t=gwhich occurs twice (i.e., fp(g) = 2). it is easy to verify that ip(pn,m, fp)h a s
a solution. however, the marked petri net and the frequency proﬁle do not match because thereis no ﬁring sequence (starting in the initial marking shown in figure 4) that ﬁres gtwice and all
other transitions once. (note that it is impossible to return to the initial marking.) fortunately,
for certain subclasses the result does hold in the opposite direction. in the remainder we willexplore some of these subclasses for which match (pn,m, fp)i fa n do n l yi f ip(pn,m, fp)h a s
a solution. the following theorem, shows that this is the case for allacyclic processes.
theorem 2. let(pn,m)be an acyclic marked petri net with pn =(p,t,f )and fp ∈t/negationslash→
i n a frequency proﬁle such that ip (pn,m, fp)has a solution. there exists a ﬁring sequence σ
enabled in msuch that for all t∈dom(fp):f p(t)=π
σ(t), i.e., match (pn,m, fp).
15proof. in the solution of ip(pn,m, fp)e a c ht r a n s i t i o n t∈tﬁresfttimes. let n=/summationtext
t∈tft.
ifn= 0, the empty sequence is enabled and the theorem holds. if n>0, remove all transitions
tfor which ft= 0. moreover, remove all places and arcs not connected to a transition tfor
which ft>0. let pn/primebe the resulting net and m/primethe resulting marking. clearly, pn/primeis
acyclic. at least one transition is enabled in ( pn/prime,m/prime). (if not, the fact that pn/primeis acyclic
would imply that there is an empty source place pwith some output transition t/prime. however,
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=m/prime(p)+0−f(p,t/prime)−...=0+0 −ft/prime−...≥0. clearly,
this leads to a contradiction.) fire this enabled transition t∗and let m∗be the resulting
marking and fp∗such that fp∗(t∗)= fp(t∗)−1 and for all other t∈dom(fp):fp∗(t)= fp(t).
clearly, ip(pn,m∗,fp∗) has a solution. repeat the above process until n=0 .i ne a c hs t e p ,
a transition t∗is ﬁred thus forming a sequence σenabled in m. /intersectionsq/unionsq
note that the proof of this theorem is similar to theorem 16 in [27]. consider figure 4 with
the arc from gtop1 removed and a new place p8 added as an output place of g.n o wf o ra n y
marking mand any frequency proﬁle fpsuch that ip(pn,m, fp) has a solution, there exists a
corresponding ﬁring sequence, i.e., match (pn,m, fp). for example, given the marking shown
in figure 4 and the acyclic variant of the net, the ip problem has a solution for the followingfrequency proﬁle fp:fp(a)= fp(b)= fp(d)= fp(e)=0 , fp(c)= fp(f)= fp(g) = 1. indeed, as
suggested by theorem 2, there is a ﬁring sequence ﬁring c,fandg(e.g., cfg).
the counter example shown in figure 4 is free-choice [12]. therefore, one could consider to
proving theorem 2 for subclasses of free-choice nets (i.e., replace the requirement that the netis acyclic with some other structural requirement). two well-known subclasses are the class of
marked graphs and the class of state machines [12, 27,29].
amarked graph is a petri net with for each place p∈p:|•p|=|p•|= 1 (i.e., places
cannot have multiple input or output transitions). a circuit is a circular path in the petri net
such that no element (i.e., place or transition) occurs more than once. it is easy to see that
in a marked graph the number of tokens in a circuit is constant. therefore, a circuit remains
(un)marked if it is (un)marked in the initial marking. using existing results it is easy to prove
that theorem 2 applies to (cyclic) marked graphs where each circuit is marked.
16theorem 3. let(pn,m)be an marked graph with pn =(p,t,f )and fp ∈t/negationslash→in a
frequency proﬁle. if each circuit is initially marked, then ip (pn,m, fp)has a solution if and
only if match (pn,m, fp).
proof. as shown in theorem 1, match (pn,m, fp) implies that ip(pn,m, fp) has a solution.
remains to prove that ip(pn,m, fp) has a solution also implies match (pn,m, fp). consider
a solution assigning values to each ftandf(x,y).l e t m/primebe a marking deﬁned as follows:
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=m/prime(p) for all p∈p. note that m/primeis indeed a marking,
i.e., for each p∈p,m/prime(p) is a non-negative integer. this implies that the marking equation
m+n.x=m/primehas a solution. ( nis the incidence matrix and xis a vector.) this solution
is given by the values assigned to ft. because there is a solution, mandm/primeagree on all place
invariants. for live marked graphs a marking m/primeis reachable from mif and only if both
agree on all place invariants (cf. theorem 3.21 in [12]). a marked graph where each circuit
is initially marked is live (cf. theorem 3.15 in [12]). therefore, m/primeis reachable from mand
match (pn,m, fp). /intersectionsq/unionsq
figure 5 shows a marked graph. for any initial marking m, the ip problem has a solution if
and only if match (pn,m, fp) (provided that every circuit is initially marked).
b
e a
p1c
dp2
p3
p4p5
p6
p7
fig. 5. marked graph.
a petri net is a state machine iﬀ transitions cannot have more than one input or output
place, i.e., for each transition t∈t:|•t|=|t•|= 1. it is easy to prove that theorem 3 also
holds for state machines as long as the the net is strongly connected (i.e., there is a directed
path from any node to any other node in the net) and initially there is at least one token.
17theorem 4. let(pn,m)be a strongly-connected state machine with pn =(p,t,f )and
a non-empty initial marking mand fp ∈t/negationslash→i n a frequency proﬁle. ip (pn,m, fp)has a
solution if and only if match (pn,m, fp).
proof. as shown in theorem 1, match (pn,m, fp) implies that ip(pn,m, fp) has a solution.
remains to prove that the reverse also holds. consider a solution assigning values to each ft
andf(x,y).l e tm/primebe a marking deﬁned as follows: m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)=m/prime(p)
for all p∈p. note that m/primeis indeed a marking, i.e., for each p∈p,m/prime(p) is a non-negative
integer. the number of tokens in mequals the number of tokens in m/prime, in fact mandm/prime
agree on all place invariants. moreover, the marked state machine is live because pnis a
strongly-connected state machine and mis non-empty (cf. theorem 3.3 in [12]). using the
second reachability theorem (cf. theorem 3.8 in [12]), it follows that m/primeis reachable from m
and match (pn,m, fp). /intersectionsq/unionsq
figure 6 shows a strongly connected state machine. for any non-empty initial marking m
ip(pn,m, fp) has a solution if and only if match (pn,m, fp).
b
e a
p1c
dp2 p3
fig. 6. state machine.
in this section, we explored the relation between match (pn,m, fp) (i.e., the predicate indi-
cating that a process model and observed transition frequencies ﬁt together) and ip(pn,m, fp)
(i.e., an integer programming problem). in the remainder, we consider a larger example, pos-
sible extensions, and the application of the results in the sap context.
4 example
after showing a number of abstract examples, we now use the more realistic example shown in
figure 7. it describes the workﬂow [1] of handling orders. the upper half models the logistical
18subprocess while the lower half models the ﬁnancial subprocess. most of the workﬂow should be
self explanatory except perhaps for the construct involving c7a n d t10 (reminder ): a reminder
can only be sent if the goods have been shipped.
t1t1t5t6
t7
t9t11t8
t10t12
start register
send_billreceive_paymentarchiveship_goodscheck_availability
replenishupdate
reminderendc1
c2c3
c4
c5
c6c7
c8t4t3
t2
c0out_of_stock_no_repl
out_of_stock_repl
in_stock
t13
destroyt0
create fp 1 fp2 fp 3 fp 4 
t1 80 80 80 80 
t6 0 10 10 10 
t8 80 80 80 70 
t9 80 85 70 85 
t11 80 80 80 80 
t12 80 80 80 80 
 
fig. 7. a petri net modeling the processing of customer orders and four frequency proﬁles.
unlike the other two petri nets, the initial marking is empty. instead a source and a sink
transition have been added. transition t0(create ) creates the order while t13 (destroy ) marks
the end of the order. this pattern is often used to model an unknown number of cases.
suppose that only the steps t1(register ),t6(replenish ),t8(ship goods),t9(send bill),
t11 (receive payment ), and t12 (archive ) are recorded. figure 7 shows four frequency proﬁles
(fp1,fp2,fp3,a n d fp4). the ip problems corresponding to the ﬁrst two proﬁles ( fp1and fp2),
both have a solution. it is also easy to see that fp1and fp2both indeed match with the petri
net. note that in the ﬁrst proﬁle there are no replenishment orders and no reminders, i.e.,
t4,t6a n d t10 do not ﬁre. it is also interesting to note that the number of times t3a n d t7
ﬁre is not constrained by fp1, however, by the objective function their frequencies are set to
0. in the second proﬁle there are 10 replenishment orders and 5 reminders. the ip problems
corresponding to the last two proﬁles ( fp3and fp4), both do not have a solution and, indeed,
fp3and fp4do not match with the petri net. in fp3there are not enough bills (70) to justify
the number of payments (80). in fp4there are not enough shipments.
195 extensions
a linear programming (lp) problem can be solved in polynomial time while an ip problem
is np complete [33,36]. therefore, it may be interesting to consider the lp relaxation of
ip(pn,m, fp). we expect that in some cases this will provide good results. note that often
the rounded lp relaxation provides a feasible but non-optimal solution (but not always, cf.the example net shown on page 269 in [11]). since the objective function is of less interest,
this is not a problem. also note that if the ip problem has a solution the lp problem will
also have a solution. therefore, theorem 1 also holds for the lp relaxation. as a result thelp problem can be used to quickly point out discrepancies between the process model and the
frequency proﬁle.
the lp relaxation is also interesting if the frequency proﬁle is not exact or if we want to
abstract from exceptions, i.e., if we consider noise we are not interested in the exact number
of ﬁrings but in an approximate number. suppose we want to allow a margin of 10 percent.
to specify this we replace the ﬁrst constraint in deﬁnition 3 ( f
t=fp(t)) by two weaker
constraints: ft≥0.9fp(t)a n d ft≤1.1fp(t). such approximations are also needed if we collect
data for a limited period with an unknown number of tokens in the initial marking .
deﬁnition 4. let(pn,m)be a marked petri net with pn =(p,t,f ),f p∈t/negationslash→in a
frequency proﬁle, and αthe noise level ( 0≤α≤1) . the corresponding lp (ip) problem
allowing for αnoise:
min/summationtext
t∈tft
s.t.ft≥(1−α)fp(t) for all t∈dom(fp)
ft≤(1 +α)fp(t) for all t∈dom(fp)
f(t,p)=ftfor all ( t, p)∈f∩(t×p)
f(p,t)=ftfor all ( p, t)∈f∩(p×t)
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥0 for all p∈p
ft≥0 for all t∈t
ft(integer) for all t∈t
f(x,y)(integer) for all ( x, y)∈f
note that deﬁnition 4 deﬁnes both an lp and and ip problem. the only diﬀerence is that for
the lp problem the variables do not need to be integers.
deﬁnition 4 allows for the application of our approach in the context of noise. moreover, it
can also resolve issues such as partial or inaccurate knowledge of the initial marking. however,
20we would also like to point at the fact that the addition of source and sink transitions can be
used to make the whole approach more robust (cf. beginning of section 3).
another extension is the situation where multiple transitions refer to the same event, e.g.,
in sap multiple functions in the epc may generate the same transaction. this correspondsto a labeled petri net with multiple transitions having the same label. again this is easy to
incorporate in the ip problem. the frequency proﬁle is no longer a mapping from transitions to
frequencies but from transition labels to frequencies and the ﬁrst constraint should be replacedas indicated below.
deﬁnition 5. let(pn,m)be a marked petri net with pn =(p,t,f ),la set of labels,
lab∈t/negationslash→la labeling function, and fp ∈l/negationslash→i n a frequency proﬁle. the corresponding ip
problem is:
min/summationtext
t∈tft
s.t./summationtext
t∈dom(lab)|lab(t)=lft=fp(l) for all l∈l
f(t,p)=ftfor all ( t, p)∈f∩(t×p)
f(p,t)=ftfor all ( p, t)∈f∩(p×t)
m(p)+/summationtext
t∈•pf(t,p)−/summationtext
t∈p•f(p,t)≥0 for all p∈p
ft≥0 for all t∈t
ftinteger for all t∈t
f(x,y)integer for all ( x, y)∈f
all results given in section 3 can be extended to labeled petri nets.
note that deﬁnitions 4 and 5 can be combined. these extensions show that the formulation
in terms of an lp/ip problem is easy to reﬁne or extend.
6 application in the context of sap
the problem addressed in this paper applies to a wide variety of systems. however, the ﬁrsttime we were confronted with this phenomenon was when we started to apply process mining
in the context of sap r/3 [19, 24]. given the widespread use of sap, this has been the main
motivation for the research reported in this paper. based on a detailed analysis of the varioussap logs we discovered that there is no event log that allows for the type of log as shown
in table 1 [16]. there are two reasons why we have been unable to obtain references to case
identiﬁers in sap r/3. first of all, most logs only cover a small part of the sap system, e.g.,just the workﬂow module. second, the logging facilities in sap r/3 at a system-wide scope
can be linked to transaction codes but not to individual cases.
21this section will show that the approach described in this paper can be applied in the
context of sap r/3. we will show this in two steps. first, we show that the sap logs allow
for the discovery of a frequency proﬁle fp. second, we show that it is possible to obtain
predeﬁned process models (i.e., models of a descriptive or prescriptive nature) and map themonto petri nets.
6.1 obtaining a frequency proﬁle in sap
if we look at a logging facility in sap r/3 with a system-wide scope, then the so-called
transaction monitor
5is the most obvious candidate to start. every transaction that is executed
is stored in the transaction monitor together with some basic information as is shown in
figure 8. transaction codes can be linked to concrete activities and also information such a
timestamp, originator, etc. are supplied. as indicated, there is no way to link transactions inthe transaction monitor to cases. therefore, classical process mining techniques do not apply.
fortunately, it is possible to obtain a frequency proﬁle as shown in figure 8. the ﬁrst column
on the right gives the transaction code ( tcode ) and the second column gives the frequency
(dialog steps ). as shown it is possible to reﬁne the frequency into a frequency for every user
(see smaller window).
instead of directly using the st03 transaction monitor, one can also use the reverse busi-
ness engineer (rbe). rbe is a tool for analyzing run-time sap r/3 data. rbe is based ontransaction frequencies and provides a more convenient way to obtain the information needed.
we also tried to use a completely diﬀerent approach using the so-called document ﬂows .
sap r/3 contains thousands of tables and an activity in some process often generates a recordin a speciﬁc table. the problem is that these tables are linked and a-priori knowledge about the
relations between these tables is needed to link the addition of a record to a concrete case. for
example, when a purchase requisition is entered into sap r/3 (via transaction code me51),a new record is added to the purchase requisition table eban. the purchase requisition is
uniquely identiﬁed by the purchase requisition number (banfn). however, if for the same
case a purchase order is created (via transaction code me21), this purchase order results in theaddition of a record in the purchasing table ekko without a link to the purchase requisition
5the transaction monitor can be accessed via transaction code st03.
22 
fig. 8. a screenshot of the sap r/3 transaction monitor (st03).
number (banfn). however, the record in the eban will get a pointer to the corresponding
record in the ekko table. an approach based on document ﬂows requires knowledge of the
underlying database. therefore, it can only be supported for speciﬁc processes [16]. in fact,the aris ppm tool [20] of ids scheer provides a kind of process mining for some of the
(hard-coded) sap processes.
to summarize: it is possible to derive the transaction frequencies for fpbut there is no way
to link transactions to cases in a generic manner.
6.2 obtaining a process model in sap
the approach presented in this paper not only requires a frequency proﬁle fp, it also needs
an explicit process model pnexpressed in terms of a petri net. fortunately, sap has a
comprehensive reference model including more than 4000 entity types and more than 1000
business processes and inter-organizational business scenarios [9, 24]. these models describethe functionality of sap and can be used to understand and/or conﬁgure the system. given the
nature of this paper, we focus on the reference models expressed in the so-called event-driven
23process chains (epcs) [23,24]. figure 9 shows a screenshot of aris showing a fragment of a
reference model.
fig. 9. a screenshot of an sap reference model in aris for mysap. the purchase requisition epc is shown
on the left and right half is used to navigate this epc and other sap reference models.
an epc consists of three main elements. combined, these elements deﬁne the ﬂow of a
business process as a chain of events. the elements used are:
–functions , which are the basic building blocks. a function corresponds to an activity (task,
process step) which needs to be executed. a function is drawn as a box with roundedcorners.
–events , which describe the situation before and/or after a function is executed. functions
are linked by events. an event may correspond to the position of one function and act asa precondition of another function. events are drawn as hexagons.
–connectors , which can be used to connect functions and events. this way, the ﬂow of
control is speciﬁed. there are three types of connectors: ∧(and), ×(xor) and ∨(or).
connectors are drawn as circles, showing the type in the center of the circle.
functions, events and connectors can be connected with edges in such a way that (i) events
have at most one incoming edge and at most one outgoing edge, but at least one incident
edge (i.e. an incoming or an outgoing edge), (ii) functions have precisely one incoming edge
24and precisely one outgoing edge, (iii) connectors have either one incoming edge and multiple
outgoing edges, or multiple incoming edges and one outgoing edge, and (iv) in every path,
functions and events alternate.
figure 9 shows part of a bigger epc. the left window shows four events, three functions,
and one connector. the connector is an xor-split (denoted by the ×symbol). the three func-
tions are non-atomic, i.e., they can be further decomposed. there are several approaches to
map an epc onto a petri net. in this paper we will not elaborate on this, because this isfar from trivial and, depending on the epc, this can only be partly automated. instead we
refer to only a few of the many papers on this topic [2,10, 15, 25]. moreover, we would like to
emphasize that in the context of the prom framework there is a plug-in to translate an epcinto a petri net [15].
functions in the sap reference model can be linked to the sap transaction codes. for
example, aris for mysap shows the transaction codes of functions that can be directlylinked to sap. this mapping is partial, but our approach does not require a full mapping.
(note that fp∈t/negationslash→i n is a partial function.)
using the sap reference model and the transaction monitor (or rbe) we can deduce in a
number of steps the frequency proﬁle fpand process model pn. however, we cannot deduce
the initial marking without more knowledge of the sap system. fortunately, as shown in
section 5, there are ways to work around the problem. by observing the process over a longer
period of time and allowing for a noise level, the initial marking becomes of less importance.
6.3 sap example
let us consider the fragment of the invoice veriﬁcation process to illustrate the overall approach
in sap. figure 10 shows a fragment of the process in terms of an epc. we focus on the four
functions in this epc fragment. for convenience these functions have been renamed to a,b,
c,a n d d. using the transaction monitor (st03) or rbe we can obtain the frequencies of the
corresponding transactions. the upper half of the diagram refers to the information obtained
from sap and aris for mysap. the lower half shows the translation into the notations usedin this paper, i.e., the frequency proﬁle fpand process model pn. both can be translated into
an ip problem using deﬁnition 4, i.e., fp(a) = 56, fp(b) = 876, fp(c) = 323, fp(d) = 1278,
25 goods receipt
postedservice
is accepted
invoice
received
release
invoiceinvoice processing
with referencepurchase
order
created
evaluated
receipt
settlementinvoicing plan
settlement
payment
must
be effectedgoods receipt
postedpurchase
order
createdgoods receipt
postedpurchase
order
created
invoice
postedfunction 
event 
excl. or and 
or legend 
 56
323
1278ab
c
d
dcbafp(p) p
...dcb56 afp(p) p
...323867
1278867st03/rbe
ab
c
d
.........
...
fig. 10. the application of the approach in the context of sap.
26and pnas as shown in figure 10. the initial marking of the place connecting a,b,c,a n d
dcan be assumed to be zero (of some better guess). if α=0.05, then ip(pn,m, fp)h a s
a solution because fp(a)+ fp(b)+ fp(c) = 1246 ≥(1−0.05)fp(d) = 1214 .1. this suggests
that the reference model and the frequency proﬁle match. however, if fp(d) would have been
substantially larger, e.g., 1500, the ip problem would not have had a solution thus indicating
that both do not match.
7 conclusion
inspired by a problem encountered when applying process mining techniques to sap transac-tion logs, the paper tackled the problem of checking whether a petri net and a frequency proﬁle
match. an ip problem was proposed to eﬃciently implement a necessary but not suﬃcientcondition. the approach allows for extensions not possible in the traditional linear algebraicapproaches [27, 11, 34]. clearly, the application is not limited to sap transaction logs but
is applicable in any situation where processes are only monitored at an aggregate level, i.e.,
frequency proﬁles rather than event traces.
future research is aiming at a better characterization of the class of nets for which ip(pn,m, fp)
has a solution if and only if match (pn,m, fp). in this paper, it was shown that for acyclic
nets, marked graphs, and state machines this is the case. it seems that the characterizationsgiven in [17] and the class of st-nets (nets obtained by composing marked graphs and state
machines) are a good starting point for a beter understanding when solutions of the ip problem
are actually realizable.
acknowledgments. the author would like to thank eric verbeek of proof-reading an early
version of the paper and monique jansen-vullers and michael rosemann for their joint workon mining sap and conﬁgurable process models which uncovered the problem addressed in
this paper. moreover, martijn van giessel contributed with his master thesis on mining sap
logs.
references
[1] w.m.p. van der aalst. the application of petri nets to workﬂow management. the journal of circuits,
systems and computers , 8(1):21–66, 1998.
27[2] w.m.p. van der aalst. formalization and veriﬁcation of event-driven process chains. information and
software technology , 41(10):639–650, 1999.
[3] w.m.p. van der aalst and m. song. mining social networks: uncovering interaction patterns in business
processes. in j. desel, b. pernici, and m. weske, editors, international conference on business process
management (bpm 2004) , volume 3080 of lecture notes in computer science , pages 244–260. springer-
verlag, berlin, 2004.
[4] w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and a.j.m.m. weijters.
workﬂow mining: a survey of issues and approaches. data and knowledge engineering , 47(2):237–267,
2003.
[5] w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: discovering process models
from event logs. ieee transactions on knowledge and data engineering , 16(9):1128–1142, 2004.
[6] r. agrawal, d. gunopulos, and f. leymann. mining process models from workﬂow logs. in sixth
international conference on extending database technology , pages 469–483, 1998.
[7] j. becker, m. kugeler, and m. rosemann, editors. process management: a guide for the design of
business processes . springer-verlag, berlin, 2003.
[8] j.e. cook and a.l. wolf. discovering models of software processes from event-based data. acm
transactions on software engineering and methodology , 7(3):215–249, 1998.
[9] t. curran and g. keller. sap r/3 business blueprint: understanding the business process reference
model . upper saddle river, 1997.
[10] j. dehnert and w.m.p. van der aalst. bridging the gap between business models and workﬂow speciﬁ-
cations. international journal of cooperative information systems , 13(3):289–332, 2004.
[11] j. desel. basic linear algebraic techniques of place/transition nets. in w. reisig and g. rozenberg,
editors, lectures on petri nets i: basic models , volume 1491 of lecture notes in computer science ,p a g e s
257–308. springer-verlag, berlin, 1998.
[12] j. desel and j. esparza. free choice petri nets ,v o l u m e4 0o f cambridge tracts in theoretical computer
science . cambridge university press, cambridge, uk, 1995.
[13] j. desel, w. reisig, and g. rozenberg, editors. lectures on concurrency and petri nets , volume 3098 of
lecture notes in computer science . springer-verlag, berlin, 2004.
[14] b. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters, and w.m.p. van der aalst.
the prom framework: a new era in process mining tool support. in g. ciardo and p. darondeau,
28editors, application and theory of petri nets 2005 , volume 3536 of lecture notes in computer science ,
pages 444–454. springer-verlag, berlin, 2005.
[15] b.f. van dongen, w.m.p. van der aalst, and h.m.w. verbeek. veriﬁcation of epcs: using reduction
rules and petri nets. in o. pastor and j. falcao e cunha, editors, proceedings of the 17th conference
on advanced information systems engineering (caise’05) , volume 3520 of lecture notes in computer
science , pages 372–386. springer-verlag, berlin, 2005.
[16] m. van giessel. process mining in sap r/3. master’s thesis, eindhoven university of technology, eind-
hoven, 2004.
[17] k. van hee, n. sidorova, and m. voorhoeve. soundness and separability of workﬂow nets in the stepwise
reﬁnement approach. in w.m.p. van der aalst and e. best, editors, application and theory of petri nets
2003, volume 2679 of lecture notes in computer science , pages 335–354. springer-verlag, berlin, 2003.
[18] j. herbst. a machine learning approach to workﬂow management. in proceedings 11th european con-
ference on machine learning , volume 1810 of lecture notes in computer science , pages 183–194. springer-
verlag, berlin, 2000.
[19] j. hernandez. the sap r/3 handbook, 1997.[20] ids scheer. aris process performance manager (aris ppm): measure, analyze and optimize your busi-
ness process performance (whitepaper). ids scheer, saarbruecken, gemany, http://www.ids-scheer.com,2002.
[21] m.h. jansen-vullers, w.m.p. van der aalst, and m. rosemann. mining conﬁgurable enterprise informa-
tion systems. bpm center report bpm-05-09, bpmcenter.org, 2005. (accepted for publication in data
and knowledge engineering .).
[22] n. karmarkar. a new polynomial-time algorithm for linear programming. combinatorica , 4(4):373–396,
1984.
[23] g. keller, m. n¨ uttgens, and a.w. scheer. semantische processmodellierung auf der grundlage ereignis-
gesteuerter processketten (epk). ver¨ oﬀentlichungen des instituts f¨ ur wirtschaftsinformatik, heft 89 (in
german), university of saarland, saarbr¨ ucken, 1992.
[24] g. keller and t. teufel. sap r/3 process oriented implementation . addison-wesley, reading ma, 1998.
[25] e. kindler. on the semantics of epcs: a framework for resolving the vicious circle. in j. desel,
b. pernici, and m. weske, editors, international conference on business process management (bpm
2004), volume 3080 of lecture notes in computer science , pages 82–97. springer-verlag, berlin, 2004.
29[26] m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and controlling - technical and
organizational issues. in r. sprague, editor, proceedings of the 33rd hawaii international conference on
system science (hicss-33) , pages 1–10. ieee computer society press, los alamitos, california, 2000.
[27] t. murata. petri nets: properties, analysis and applications. proceedings of the ieee , 77(4):541–580,
april 1989.
[28] w. reisig. petri nets: an introduction ,v o l u m e4o f eatcs monographs in theoretical computer science .
springer-verlag, berlin, 1985.
[29] w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,v o l u m e1 4 9 1o f lecture notes
in computer science . springer-verlag, berlin, 1998.
[30] m. rosemann. application reference models and building blocks for management and control (erp
systems). in p. bernus, l. nemes, and g. schmidt, editors, handbook on enterprise architecture ,p a g e s
596–616. springer-verlag, berlin, 2003.
[31] m. rosemann and w.m.p. van der aalst. a conﬁgurable reference modelling language. qut technical
report, fit-tr-2003-05, queensland university of technology, brisbane, 2003. (accepted for publication
ininformation systems .).
[32] m. sayal, f. casati, u. dayal, and m.c. shan. business process cockpit. in proceedings of 28th interna-
tional conference on very large data bases (vldb’02) , pages 880–883. morgan kaufmann, 2002.
[33] a. schrijver. theory of linear and integer programming . john wiley & sons, new york, 1998.
[34] m. silva, e. teruel, and j.m. colom. linear algebraic and linear programming techniques for the analysis
of place/transition net systems. in w. reisig and g. rozenberg, editors, lectures on petri nets i: basic
models , volume 1491 of lecture notes in computer science , pages 309–373. springer-verlag, berlin, 1998.
[35] a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models from event-based data
using little thumb. integrated computer-aided engineering , 10(2):151–162, 2003.
[36] l.a. wolsey. integer programming . john wiley & sons, new york, 1998.
30