an open-source integration of process mining features into the camunda workÔ¨Çow
engine: data extraction and challenges
alessandro berti, wil van der aalst, david zangy, magdalena langy
process and data science department, rwth aachen university
process and data science department, lehrstuhl fur informatik 9 52074 aachen, germany
emails: a.berti@pads.rwth-aachen.de, wvdaalst@pads.rwth-aachen.de
yviadee unternehmensberatung ag
konrad-adenauer-ufer 7, 50668
emails: david.zang@viadee.de, magdalena.lang@viadee.de
abstract ‚Äîprocess mining provides techniques to improve the
performance and compliance of operational processes. although
sometimes the term ‚ÄúworkÔ¨Çow mining‚Äù is used, the application
in the context of workÔ¨Çow management (wfm) and business
process management (bpm) systems is limited. the main reason
is that wfm/bpm systems control the process, leaving less room
for Ô¨Çexibility and the corresponding deviations. however, as this
paper shows, it is easy to extract event data from systems like
camunda, one of the leading open-source wfm/bpm systems.
moreover, although the respective process engines control the
process Ô¨Çow, process mining is still able to provide valuable
insights, such as the analysis of the performance of the paths
and the mining of the decision rules. this demo paper presents
a process mining connector to camunda that extracts event
logs and process models, allowing for the application of existing
process mining tools. we also analyzed the added value of
different process mining techniques in the context of camunda.
we discuss a subset of process mining techniques that nicely
complements the process intelligence capabilities of camunda.
through this demo paper, we hope to boost the use of process
mining among camunda users.
index terms ‚Äîprocess mining; workÔ¨Çow management; data
extraction and preprocessing; process engine
i. i ntroduction
the vast majority of business processes (including enter-
prise resource planning, customer relationship management,
document management) are nowadays supported by informa-
tion systems. these systems manage (but not always regulate)
the execution of a business process, and record event data
with Ô¨Åne detail about each step of the process. in this context,
process mining [1] allows to improve operational processes by
exploiting the event data recorded by such systems. an event
logcan be extracted from an information system‚Äôs database
in order to apply the process mining algorithms. an event
log contains event data of multiple executions of the business
process. process mining techniques include: process discovery ,
i.e., the automated discovery of a process model from event
data; conformance checking , i.e., the comparison between a
process model and the event data; model enhancement , i.e.,
the enrichment of the model with additional perspectives (for
example, execution guards [2]), prediction and simulation
algorithms. open-source software supporting process mining
includes prom, apromore and pm4py.process mining techniques have been applied to work-
Ô¨Çow management (wfm) and business process management
(bpm) systems. there are connectors to the yawl wfm
system [3] and some other wfm/bpm systems, including
signavio, bizagi, and bonita, that allow to to extract the event
data and operate on the process models contained in such
systems. this paper focuses on camunda and is a result of a
collaborative project between the rwth aachen university
and viadee unternehmensberatung ag . before, there was
no open-source connector to extract logs useful for process
mining purposes from camunda, although camunda is open-
source and holds detailed event data. therefore, we developed
and evaluated such a connector, and viadee has integrated
event log extraction techniques in its software stack.
camunda is widely used, e.g., by deutsche telekom,
warner music, allianz, db, zalando and generali. camunda
uses the bpmn 2.0 notation for modeling. among the main
selling points of camunda are high throughput and collab-
oration and integration possibilities. camunda can be easily
integrated with different information systems, business intelli-
gence and big data systems such as qlikview, apache spark
and kafka. this explains our goal to provide process mining
for the large camunda user base.
in this demo paper, (a) we present our implementation of a
process mining extractor for camunda, that is able to extract
a set of event logs for the processes executed by camunda,
and (b) we discuss the existing process mining techniques that
complement the business intelligence capabilities of camunda.
figure 1 provides an overview of the approach implemented
in the paper. the extractor is publicly available. for demon-
strative purposes, it is integrated with a graphical interface
based on pm4py that offers basic process mining functions.
moreover, the techniques analyzed in this paper are available
in open-source software.
the remainder of this demo paper is organized as follows.
section ii describes the basic structure of the camunda
database, along with a methodology of extraction of event logs
and process models from the camunda database. section iii
discusses the added value of process mining techniques for
camunda users. section iv describes the set-up of the tool.
copyright ¬© 2020 for this paper by its authors. use permitted under creative commons license attribution 4.0 international (cc by 4.0).
fig. 1. overview of the toolchain supporting process mining in the context of camunda. in this paper, we provide (a) a connector to camunda that is
able to extract event logs and the bpmn diagrams modeling the processes. (b) an overview on the most valuable process mining techniques complementing
camunda. although the connector is generic, we showcase the integration using pm4py.
finally, section v concludes the paper.
ii. e xtracting event logs and process models
from camunda
in this section, we will focus on how to extract logs
containing the historical executions of the processes supported
by camunda, and how to extract the process models of such
processes.
1) extracting event logs: the extraction is done directly
at the database level. the camunda workÔ¨Çow engine sup-
ports different relational databases (e.g., postgresql, oracle,
mysql). we will focus exclusively on the completed execu-
tions, and ignore ongoing executions.
the table containing the historical executions of the pro-
cesses is the acti hiactinst table. the rows of this table
are the events thrown by camunda. the table contains all the
basic information that is needed to extract event logs:
the identiÔ¨Åer of the process that is executed is stored
in the proc defkey column. this column contains as
many different values as processes are executed via the
camunda process engine.
the identiÔ¨Åer of the process execution (case id) is stored
inside the proc inst idcolumn.
the name of the bpmn element that are executed via the
camunda process engine is stored inside the actname
column.
the type of the bpmn element is stored inside the
acttype column.
the start and end timestamps are stored inside the
start time and the end time columns, respectively.
the identiÔ¨Åer of the resource that performs the event is
stored inside the assignee column.
basically, an event log is created for each distinct value
of the proc defkey column. the resulting table for an
individual process is enough to analyze the control Ô¨Çow of
the process and its bottlenecks. other attributes at the event
level can be obtained by merging the act hiactinst table
with the act hidetail table. the latter contains a row
for each distinct attribute that is associated with an event.these attributes can be useful to investigate the process more
thoroughly, also for predictive analyses.
an important point is that also the traversal of gateways
and internal or boundary events are included in the event log.
so, not only the tasks are recorded, but the exact path of
the model. this can simplify the frequency or performance
decoration of the process model: performing token-based
replay or alignments to Ô¨Ånd the path that is followed is not
necessary. a postprocessing activity is only necessary when
the execution of tasks needs to be analysed.
we will present the implementation of an connector in sec-
tion iv. a property of the connector is that it is incremental:
the Ô¨Årst extraction extracts all the events from the beginning
of the time, while the following extractions extract only the
events that are inserted since the previous extraction. this
permits to keep the log updated, keeping the workload low.
2) extracting process models: aside from event logs, we
can also extract the bpmn models of the processes sup-
ported by the workÔ¨Çow engine. in a tomcat distribution of
camunda, each process supported by camunda has its own
folder in path-to-camunda-server/webapps/ . as exam-
ple, if a process has name invoice , its corresponding folder is
path-to-camunda-server/webapps/invoice . to extract
the bpmn model associated to the invoice process, the content
of the path-to-camunda-server/webapps/invoice/web-
inf/classes folder should be taken. as another possibility, we
could refer to querying the rest api for the process diagram.
the extracted bpmn models can be imported in different
process mining tools. in order to perform analyses such as
decision mining and conformance checking (see section iii),
the bpmn model should be converted to a petri net model.
this is difÔ¨Åcult for many constructs (for example, or-joins
and or-splits, swimlanes, subprocesses) and thus can lead to
problems for complex real-life processes. an overview of the
problematics of conversion from a bpmn model to a petri net
is found in [4].
iii. p rocess mining on top of camunda
in the previous section, we have described an approach
to extract event logs for the different processes supported
table i
analysis of the pros and cons of the application of several process mining techniques in the context of the camunda engine .
many observations here hold generally for any wfm/bpm system .
technique pros cons
process discovery it is possible to show the frequent paths in processes.
moreover, it becomes visible when people bypass the
system.the process model underlying the event data is
already contained in camunda and probably not
surprising.
conformance checking it is possible to measure the precision of the pro-
cess model, in order to understand how much extra
behavior is allowed.it is expected that the event data already follows the
model. hence, some measures such as the calculation
of Ô¨Åtness are not useful.
decision mining it is possible to enrich the bpmn model with guards
that describe and regulate the behavior of the process
at the decision points.many execution guards are already inserted in the
bpmn diagrams during the design phase. the dis-
covered guards might be trivial or overÔ¨Åt the data.
concept drift analysis process mining can be used to detect process
changes. possible reasons include changes of the
process model or day-night shifts.many of the possible change points are known or
deliberate.
prediction of the remain-
ing timethe technique provides an estimation of the remain-
ing time for the process instances, in order to detect
possible service level agreements violations.the quality of the predictions performed by state-of-
the-art approaches on real datasets must be improved.
social network analysis the collaboration between the resources can be an-
alyzed from different angles (e.g., to see the effect
on performance).roles are often set and controlled by the system.
model enhancement it is possible to identify the bottlenecks of the
process, and the most frequent paths.basic performance measurements are already pro-
vided by the wfm/bpm system.
by camunda. this enables the application of several process
mining tools and techniques. in this section, we want to
analyze which process mining techniques are most useful in
the context of the camunda processes. the techniques are
implemented and released as open-source software, including
the one based on pm4py presented in section iv. table i
provides an overview of the approaches, along with their pros
and cons.
1) process discovery and conformance checking: the two
most popular process mining disciplines are process discovery
and conformance checking. the scope of application of pro-
cess discovery is pretty limited, since the event data contained
in the database is regulated by the process models inserted in
camunda. a bpmn model is also a formal model that enables
the application of conformance checking techniques. for less
regulated processes, the goal of conformance checking is to
identify deviations in the process model, and the executions
of the process are evaluated by their Ô¨Åtness according to the
process model. for wfm/bpm systems, we can expect to have
perfect Ô¨Åtness for all the process executions. however, another
application of conformance checking is the measurement of
precision . a model is precise when it does not allow for extra
behavior, i.e., behavior that does not appear in the event data.
models can have low precision when they Ô¨Çexibly allow the
execution sequence of activities. hence, measuring precision
can provide a measure for the ‚ÄúÔ¨Çexibility‚Äù of the process
model. a popular measure for precision is proposed in [5].
2) decision mining: the application of a decision mining
technique allows to enrich the model with execution guards
that are extracted automatically from the event data. these are
conditions that are required in order to execute a path in the
model. hence, decision mining helps to reduce the amount of
behavior allowed in the process model by an adaptation of the
model towards the guards that are discovered by the technique.
a mature approach for decision mining is proposed in [2]. on
the other hand, bpmn models are often already decoratedwith execution guards that are deÔ¨Åned in the design phase.
hence, decision mining could end up Ô¨Ånding exactly the same
guards without adding anything new. another problem is the
discovery of trivial guards, or guards that overÔ¨Åt the data. a
careful selection of the guards is necessary after performing
the analysis.
3) concept drift analysis: aconcept drift analysis allows
to identify the points in time where the execution of the
process changes. different types of concept drifts exist: sudden
drifts (where the process becomes immediately signiÔ¨Åcantly
different), gradual drifts and seasonal drifts. an approach for
the detection of concept drifts is described in [6]. while the
technique is interesting, many concept drift points are already
known in the context of wfmss as camunda: for example, the
underlying bpmn schema changes, or there are differences in
the execution of a process between day and night.
4) prediction: given an incomplete process execution, it
may be useful to estimate the remaining execution time
based on historical executions. several approaches have been
proposed [7], [8], however in our experiments the quality of
predictions on top of real-life datasets is still not completely
satisfying. moreover, this paper only covers the extraction of
complete (historical) process instances.
5) other analyses: in this category, we include social
network analysis [9], that with different metrics (such as the
handover of work, the working together, the similar activities
metric) calculates the collaboration between the different orga-
nizational resources. model enhancement with frequency and
performance metrics is particularly important to identify the
bottlenecks of the process (from a performance point of view)
and the most frequent paths.
iv. s et-up of the connector
the connector presented in this section is
completely open-source and is available at
https://github.com/javert899/incremental-camunda-parquet-
exporter . a completely working demo environment can be
easily obtained by using docker-compose inside the folder of
the project1. in the prepared environment, there are:
a postgresql relational database that is supporting the
camunda bpm engine and is exposed at port 5432 .
the camunda bpm engine, that is running at port 8080 .
the camunda interface can be reached at http://localhost:
8080/camunda-welcome/index.html. the installation con-
tains some demonstrative models and event data that can
be extracted by the connector and used for process mining
analysis.
the connector, that is written in the python language
and is conÔ¨Ågured to reach the postgresql database (for
the extraction of the event data) and the camunda bpm
docker container (to extract the bpmn models).
an open-source process mining solution [10], [11], with
its own event logs database, that is reachable at port
80, providing admin /admin as access credentials for the
interface. the services and the web interface are offering
the logs for all the processes contained in camunda. in
the demo interface, a single process is offered to the user.
the processes contained in camunda are offered, through
the connector, in the web interface, graphically allowing for
the following operations:
process discovery of a directly-follows graph, and of a
process tree or petri net discovered using the inductive
miner algorithm. while the model itself is already known,
the frequency and performance information are important
to understand which parts of the process are more critical
for key performance indicators and service level agree-
ments.
cases exploration: understanding which cases have
longer duration, and which are the events of such cases.
social network analysis: shows the interaction between
the organizational resources using the camunda bpm
engine through some classic metrics.
the deployment of the connector through docker-compose is
integrated with the process mining tool, but the event log
is available for usage in other process mining platforms. an
example log that is extracted by the technique is available at
http://www.alessandroberti.it/invoice.xes.
v. c onclusion
in this paper, we presented a tool to extract event logs
and process models from the camunda system and analyzed
the applicability of process mining tools on such models
and logs. thereby, process mining comes into reach of all
organizations using camunda with almost no effort. the
extractor we implemented was also integrated with the open-
source process mining tool pm4py, along with instructions
1the command docker-compose up starts the docker containers that are
referred in the docker-compose.yml Ô¨Åleon how to deploy a complete environment that contains
camunda supported by the postgresql database, the process
mining tool, and the extractor. the deployment shows how
camunda can be extended with process mining capabilities
in a straightforward way. while the pm4py deployment is
for demonstrative purposes, the extractor can be used on real-
life deployments of camunda and combined with any process
mining tool. an example use case for our tool is proposed at
http://www.alessandroberti.it/only appendix.pdf.
next to process discovery and conformance checking, our
integration allows to discover the bottlenecks of the processes
and to identify execution guards that are not contained in
the process model, but implicitly assumed by the resources
performing the process. thereby, the analysis can help to
improve the quality of the bpmn model. other analysis, such
as the detection of concept drifts, and the prediction of the
remaining time, can also be useful.
as a result of this project, process mining techniques have
been integrated in the viadee unternehmensberatung ag soft-
ware stack. the project located at https://github.com/viadee/
camunda-kafka-polling-client proposes an implementation of
a polling client on top of the apache kafka event streaming
platform to poll data from camunda, and the project located at
https://github.com/viadee/bpmn.ai proposes a data preparation
pipeline for such process data.
references
[1] w. van der aalst, process mining: discovery, conformance and enhance-
ment of business processes . springer, 2011, vol. 2.
[2] m. de leoni and w. van der aalst, ‚Äúdata-aware process mining:
discovering decisions in processes using alignments,‚Äù in proceedings
of the 28th annual acm symposium on applied computing . acm,
2013, pp. 1454‚Äì1461.
[3] a. rozinat, m. wynn, w. van der aalst, a. ter hofstede, and c. fidge,
‚ÄúworkÔ¨Çow simulation for operational decision support using yawl and
prom,‚Äù bpm center report bpm-08-04, bpmcenter. org , vol. 298, pp.
302‚Äì306, 2008.
[4] r. m. dijkman, m. dumas, and c. ouyang, ‚Äúsemantics and analysis of
business process models in bpmn,‚Äù information and software technology ,
vol. 50, no. 12, pp. 1281‚Äì1294, 2008.
[5] j. mu Àúnoz-gama and j. carmona, ‚Äúa fresh look at precision in process
conformance,‚Äù in international conference on business process man-
agement . springer, 2010, pp. 211‚Äì226.
[6] r. j. c. bose, w. van der aalst, i. Àázliobait Àôe, and m. pechenizkiy,
‚Äúhandling concept drift in process mining,‚Äù in international conference
on advanced information systems engineering . springer, 2011, pp.
391‚Äì405.
[7] m. polato, a. sperduti, a. burattin, and m. de leoni, ‚Äútime and activity
sequence prediction of business process instances,‚Äù computing , vol. 100,
no. 9, pp. 1005‚Äì1031, 2018.
[8] n. tax, i. verenich, m. la rosa, and m. dumas, ‚Äúpredictive business
process monitoring with lstm neural networks,‚Äù in international confer-
ence on advanced information systems engineering . springer, 2017,
pp. 477‚Äì492.
[9] w. van der aalst, h. a. reijers, and m. song, ‚Äúdiscovering social
networks from event logs,‚Äù computer supported cooperative work
(cscw) , vol. 14, no. 6, pp. 549‚Äì593, 2005.
[10] a. berti, s. j. van zelst, and w. van der aalst, ‚Äúprocess mining for
python (pm4py): bridging the gap between process-and data science,‚Äù
inicpm demo track (ceur 2374) , 2019, p. 13‚Äì16.
[11] a. berti, s. van zelst, and w. van der aalst, ‚Äúpm4py web services: easy
development, integration and deployment of process mining features
in any application stack,‚Äù in bpm demo track , 2019.
