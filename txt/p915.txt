discovering causal factors explaining business process
performance
hompes, b.f.a.; maaradji, abderrahmane; la rosa, m.; dumas, m.; buijs, j.c.a.m.; van der
aalst, w.m.p.
published in:
caise 2017
doi:
10.1007/978-3-319-59536-8_12
published: 12/06/2017
document version
publisher’s pdf, also known as version of record (includes final page, issue and volume numbers)
please check the document version of this publication:
• a submitted manuscript is the author's version of the article upon submission and before peer-review. there can be important differences
between the submitted version and the official published version of record. people interested in the research are advised to contact the
author for the final version of the publication, or visit the doi to the publisher's website.
• the final author version and the galley proof are versions of the publication after peer review.
• the final published version features the final layout of the paper including the volume, issue and page numbers.
link to publication
citation for published version (apa):
hompes, b. f. a., maaradji, a., la rosa, m., dumas, m., buijs, j. c. a. m., & van der aalst, w. m. p. (2017).
discovering causal factors explaining business process performance. in caise 2017 (vol. 10253, pp. 177-191).
essen: springer international publishing ag. doi: 10.1007/978-3-319-59536-8_12
general rights
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners
and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights.
            • users may download and print one copy of any publication from the public portal for the purpose of private study or research.
            • you may not further distribute the material or use it for any profit-making activity or commercial gain
            • you may freely distribute the url identifying the publication in the public portal ?
take down policy
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the work immediately
and investigate your claim.
download date: 14. jan. 2018discovering causal factors explaining
business process performance variation
bart f.a. hompes1,2(b), abderrahmane maaradji3, marcello la rosa3,
marlon dumas4, joos c.a.m. buijs1, and wil m.p. van der aalst1
1eindhoven university of technology, eindhoven, the netherlands
{b.f.a.hompes,j.c.a.m.buijs,w.m.p.v.d.aalst }@tue.nl
2philips research, eindhoven, the netherlands
3queensland university of technology, brisbane, australia
{abderrahmane.maaradji,m.larosa }@qut.edu.au
4university of tartu, tartu, estonia
marlon.dumas@ut.ee
abstract. business process performance may be aﬀected by a range
of factors, such as the volume and characteristics of ongoing cases or
the performance and availability of individual resources. event logs col-
lected by modern information systems provide a wealth of data about theexecution of business processes. however, extracting root causes for per-
formance issues from these event logs is a major challenge. processes may
change continuously due to internal and external factors. moreover, theremay be many resources and case attributes inﬂuencing performance. this
paper introduces a novel approach based on time series analysis to detect
cause-eﬀect relations between a range of business process characteristicsand process performance indicators. the scalability and practical rele-
vance of the approach has been validated by a case study involving a
real-life insurance claims handling process.
keywords: process mining
·performance analysis ·root cause analysis
1 introduction
improving process performance can lead to signiﬁcant cost and time savings, and
to better service levels (e.g. better response times). accordingly, process perfor-
mance analysis and optimization has been an active ﬁeld of research in recentyears [ 1,2]. business process performance is generally aﬀected by a plethora of
factors. for example, the waiting time for a procedure in a hospital may depend
on the amount of scheduled staﬀ; the duration of a credit check in a creditapproval process might depend on the number of clients waiting to be approved;
the waiting time for a payment receipt might depend on the time of day, etc.
it is often not known to process owners which factors aﬀect which performanceindicators. consequently, it is hard to identify the best actions to be taken when
performance is unsatisfactory. for instance, when process owners have a limited
set of resources available, it is often not known to which tasks these resources
c/circlecopyrtspringer international publishing ag 2017
e. dubois and k. pohl (eds.): caise 2017, lncs 10253, pp. 177–191, 2017.doi: 10.1007/978-3-319-59536-8
12178 b.f.a. hompes et al.
should be allocated in order to redress the performance issues. the latter is
especially important in processes that have a high level of variability and do notfollow a ﬁxed process model.
although several techniques have been proposed to automatically discover
process performance bottlenecks and deviations based on event data (e.g. [ 1,2]),
little research has gone into the automated discovery of causal factors of business
process performance. as a result, a number of hypotheses typically have to be
tested manually in order to identify causal factors for process performance issues.additionally, factors can have both a direct and indirect eﬀect on process perfor-
mance. for example, factors may inﬂuence other factors that in the end inﬂuence
performance. hence, new analysis techniques are required that are able to dis-cover such chains of causal relations between causal factors and the performance
indicators of interest.
in this paper, we propose a technique that, given an event log of a business
process, generates a graph of causal factors explaining process performance. the
technique identiﬁes causal relations between a range of business process charac-teristics and process performance indicators such as case duration (a.k.a. cycle
time) and activity waiting time. in order to detect causal relations, we test for
granger causality [ 3], a statistical test that is widely used for causal analysis of
time series in a range of ﬁelds, e.g. economics and neuroscience [ 4,5]. the idea
is that values for performance indicators are seen as time series. a factor is said
to be causal to another when past values of this factor provide information thatcan help predict the other factor above and beyond the information contained
in the past values of the latter factor alone. this idea is illustrated in fig. 1.
given the large number of factors that may aﬀect process performance and
their possible combinations, one of the main bottlenecks when extracting a causal
graph is to prune down the number of causal relations to be tested. to this end,
the paper proposes an approach to prune the space of causal relations in orderto identify a manageable subset of candidate causal relations. the proposed
approach has been validated via a case study involving an insurance claims
handling process at a large australian insurer.
the remainder of this paper is structured as follows. section 2discusses
related work. section 3introduces preliminary deﬁnitions. our causal discovery
approach is detailed in sect. 4and validated in sect. 5. the paper is concluded
with views on future work in sect. 6.
b
a
tba
c d
fig. 1. factor a causes b which in turn causes c, whereas factor d does not have any
observed eﬀect. in order to improve c, a and b should be improved.discovering causal factors explaining business process performance 179
2 related work
techniques that exploit process execution data collected by information systems
have gained increased interest from both industry and the research community.
model-based techniques such as alignments compare the observed behavior with
either a discovered or manually designed process model and can be used forconformance checking as well as performance analysis [ 1]. an extensive literature
review of process measures that can be used in this context can be found in [ 2].
other studies addressed the interplay between diﬀerent perspectives of a busi-
ness process in order to provide more targeted insights. the method proposed
in [6] for example aims at identifying cases that might exceed certain deadlines
based on predeﬁned process risk indicators such as activity duration. if a case
contains at least one outlier value of the deﬁned indicators, the case is labeled
as being at risk. a framework for inferring new event and case attributes is pro-p o s e di n[ 7]. inferred attributes are subsequently used as cause-eﬀect variables in
a decision tree classiﬁer in order to discover business rules. a related technique
is proposed in [ 8], where process characteristics are correlated using decision tree
learning. this approach is extended in [ 9] with a technique for recommending
business decisions based on risk. the authors of [ 10] use decision tree learning
to ﬁnd process paths and contexts that lead to improved performance. in [ 11],
the notion of process cubes is proposed. process cubes are based on the olap
data cube concept, and deﬁne a set of actions and operations that can be used
to explore event data based on diﬀerent business process perspectives. a similarframework is presented in [ 12].
though the methods described above have their individual merits and appli-
cations, they provide limited insight into what cause-eﬀect relationships might
exist in event data. in [ 13], the authors establish the need for techniques that are
able to provide actionable insights, rather than merely showing low-level analyt-ical insights, and provide a framework to aid in this translation. in our work, we
hypothesize that causal factors can be discovered for and between performance
indicators, and test this hypothesis statistically using an established techniquefrom the time series domain.
whereas existing techniques focus mainly on ﬁnding diﬀerences in perfor-
mance and on general statistics, in this paper, we focus on supporting businessprocess decision making by discovering and providing the causal factors for busi-
ness process performance. actionable insights can then be obtained by looking
at causal factors. we base our idea on methods proposed in [ 14] where we pro-
posed a technique that automatically discovers statistically signiﬁcant diﬀerences
in performance between diﬀerent contexts. this paper speciﬁcally considers the
time dimension, which allows for more elaborate analysis, including the cause-eﬀect relations focused on in this paper.
3 preliminaries
the executed events of multiple cases of a process are usually recorded by some
information system . these so-called event logs serve as input for any process180 b.f.a. hompes et al.
mining technique. typically, diﬀerent attribute values are recorded for these
events, such as the time they took place, which activity was performed, andwhich resources were involved. deﬁnitions for universes and event bases used in
this paper are based on those in [ 11].
deﬁnition 1 (universes). u
vis the universe of possible attribute values (e.g.
strings, numbers, etc.). us=p(uv)is the universe of value sets1.uh=p(us)
is the universe of value set collections (set of sets), and t⊆ u vis the universe
of time stamps.
note that v∈uvis a single value (e.g. v= 10), s∈usis a set of values (e.g.
s={gold,silver,bronze }), and h∈uhis a collection of sets. for example,
h={{bob,john }{mary,sue }},o rh={{x∈n|x<12},{x∈n|12≤
x<55},{x∈n|x≥55}}.a n y t∈trepresents a unique time stamp (e.g.
2016-1-4 9:15). time stamps can have diﬀerent levels of granularity (e.g. week,
hour, millisecond).
deﬁnition 2 (event base). an event base eb=(e,p,π )deﬁnes a set of
events e, a set of event properties p,a n daf u n c t i o n π∈p→(e/notarrowrightuv).f o r
any property p∈p,π(p)(denoted πp) is a partial function mapping events onto
values. if πp(e)=v, then event e∈ehas a property p∈pand the value of this
property is v∈uv.i fe/∈dom(πp), then event edoes not have property pand
we write πp(e)=⊥.
the set erefers to individual events, recorded by some information system. the
event base can either consist of a single event log, or, alternatively, multiple event
logs can be combined to create an aggregated event base. note that e∈eis a
unique identiﬁer and function πis needed to attach meaning to e.pis the set of
properties that events may or may not have. for example, p={case, age, type,
activity, instance, time, resource, transition, cost }corresponds to the columns
in table 1. here, πcase(1) = 1, πactivity (1) = a,πresource (1) = john,e t c .a n
execution of an activity in the process is represented by one or more events that
are associated with a lifecycle state transition for the activity instance. these
states are used to calculate performance information such as activity durationsand waiting times. events belonging to the same activity instance have the same
value for the instance property.
given an event base, one can derive additional event properties. for example,
diﬀerent event properties can be aggregated together to form new properties, e.g.
π
ar=(πactivity ,πresource ). alternatively, functions that operate on other proper-
ties can be deﬁned. for example, function πagegroup (e)=(πage(e)−πage(e)div 20)
20
can be used to group events for cases in age groups of 20 years, etc. such
derived event properties may also be based on other events. for example,
πcase start (e)=min{πtime(e/prime)|e/prime∈e∧πcase(e/prime)=πcase(e)}. we use these
calculated properties to create speciﬁc projections of the event base, in order to
deﬁne potential causal factors for business process performance.
1p(y) denotes the powerset of a set y, i.e. x∈p(y)⇐⇒ x⊆y.discovering causal factors explaining business process performance 181
table 1. example event log l1. events can be characterized by multiple properties.
case id case attributes event id event attributes
agetype time activity transition resource instance
1 33gold 1 2016-1-4 8:00 a start john 1
2 2016-1-4 9:15 a complete john 1
3 2016-1-4 10:12 b complete bob 2
4 2016-1-4 14:00 c start sue 3
5 2016-1-4 14:05 c complete sue 3
2 27silver 6 2016-1-6 10:43 a start bob 4
7 2016-1-6 11:00 a complete bob 4
8 2016-1-7 09:33 b complete john 5
9 2016-1-7 09:35 c start sue 6
10 2016-1-7 09:35 c complete sue 6
3 18silver 11 2016-1-7 9:27 a start john 7
12 2016-1-7 10:40 a complete john 7
13 2016-1-7 15:03 b complete bob 8
4 ⊥gold 14 2016-1-7 12:10 a start bob 9
15 2016-1-7 12:24 a complete bob 9
16 2016-1-8 08:47 b complete john 10
5 41silver 17 2016-1-8 15:32 a start bob 11
18 2016-1-8 15:51 a complete bob 11
... ...... ... ... ... ... ... ...
4m e t h o d
our causal factor detection approach consists of three main steps, as shown
in fig. 2. in the ﬁrst step, the event base is systematically decomposed into a
directed acyclic graph, in which each node represents a collection of events thatshare certain business process characteristics and can be considered a poten-
tial causal factor (subsect. 4.1). nodes in this so-called decomposition graph are
connected by an edge when the target node is the result of further decomposi-tion of the source node using any (additional) process characteristic. in the sec-
ond step, this decomposition graph is converted into a so-called inclusion graph
(subsect. 4.2). the edges of the inclusion graph represent candidate causal rela-
tions between factors (nodes), and will be used in the third and ﬁnal step. in
the causal discovery step, we test for causality between factors in a pair-wise
manner (subsect. 4.3). for every pair of connected nodes in the inclusion graph,
the performance values for events in each node are converted into time series
and tested for causality. this three-step approach results in a graphical causal
model referred to as a causality graph .182 b.f.a. hompes et al.
event base decomposition
graphinclusion
graphcausality
graph
fig. 2. the steps of our approach (from left to right). a decomposition graph is created
from the event base (step 1). next, it is converted into an inclusion graph (step 2).
from the inclusion graph, a causality graph is discovered (step 3).
4.1 systematic decomposition
the ﬁrst step in the approach takes as input the complete event base and returns
as output a so-called decomposition graph in which each node represents a set ofevents that share certain process characteristics. for example, a decomposition
can be made by diﬀerentiating between activity names, the resource that was
responsible for the execution of an event, the type of case, etc. it also possibleto diﬀerentiate by any combination of properties, as discussed in sect. 3.
the decomposition step works as follows. we decompose the event collection
ein an event base eb=(e,p,π ) by the set of event properties pusing function
π. as such, any combination of values for the event properties in pis considered
to be a unique process characteristic. conceptually, our goal is to test whetherprocess performance of a certain set of events that share one or multiple process
characteristics causes process performance of another set of events sharing other
process characteristics. for example, one such test could test whether the waitingtime of all pay invoice activities with a cost greater than 100causes the case
duration for gold customers. if causality is conﬁrmed, it can be said that the
former is a causal factor of the latter. consequently, when the case duration forgoldcustomers is unsatisfactory, process optimization eﬀorts should be directed
towards improving the waiting time of activities pay invoice in which the cost
was greater than 100. formally, decomposition graphs are deﬁned as follows.
deﬁnition 3 (decomposition graph). leteb=(e,p,π )be an event base.
g
d(eb)=(n,r d)denotes a decomposition graph over eb ,w h e r e :
–n=/braceleftbig/parenleftbig
e/prime,{p1,...,p n}/parenrightbig
∈p(e)×p(p)/vextendsingle/vextendsinglee/prime/negationslash=∅∧
∃v1,...,v n∈u ve/prime={e∈e/vextendsingle/vextendsingle∀1<i<nπpi(e)=vi}/bracerightbig
is the set of nodes, and
–r=/braceleftbig/parenleftbig
(e1,p1),(e2,p2)/parenrightbig
∈n×n/vextendsingle/vextendsinglep1⊆p2∧e2⊆e1/bracerightbig
the set of edges.
note that each decomposition graph is a directed acyclic graph with a root node
(e,∅). all events in a node in the decomposition graph share a common value fordiscovering causal factors explaining business process performance 183
root
silver
...gold
...
sue,
gold...john
john,
goldjohn,
silverbob
...
fig. 3. the decomposition graph created from the event base eb 1. only selected nodes
and edges are shown for sake of simplicity.
each property deﬁned for that node. additionally, directed edges exist between
any pair of nodes for which it holds that the set of properties deﬁned for thesource node is included in the set of properties of the target node, and the set of
events of the target node is a subset of the set of events of the source node. note
that as only observed values are considered, the decomposition graph is ﬁnite.additionally, context functions can be used to discretize continuous values.
for example, consider the event base eb
1=(l1,p,π) created from event log
l1in table 1, the event properties p={resource,type }, and function π. apply-
ing the decomposition step for this event base leads to a decomposition graph as
illustrated in fig. 3. here, the node labeled “john, gold” holds all events that
were performed by resource johnfor cases of type gold, i.e. events 1, 2, and 16.
these events are in the intersection of the sets of events in the nodes labeled
“john” (events 1 ,2,8,11,12,16) and “ gold” (events 1 ,2,3,4,5,14,15,16).
4.2 candidate causal factor selection
the second step in the approach takes as input the decomposition graph and
produces as output a so-called inclusion graph in which each edge represents acandidate causal relation. formally, inclusion graphs are deﬁned as follows.
deﬁnition 4 (inclusion graph). leteb=(e,p,π )be an event base.
g
i(gd(eb)) = ( n,r i)denotes an inclusion graph over a decomposition graph
gd(eb)=(n,r d),w h e r e :
–n=/braceleftbig/parenleftbig
e/prime,{p1,...,p n}/parenrightbig
∈p(e)×p(p)/vextendsingle/vextendsinglee/prime/negationslash=∅∧
∃v1,...,v n∈u ve/prime={e∈e/vextendsingle/vextendsingle∀1<i<nπpi(e)=vi}/bracerightbig
is the set of nodes, and
–ri=/braceleftbig/parenleftbig
(e1,p1),(e2,p2)/parenrightbig
∈n×n/vextendsingle/vextendsingle/vextendsingle/parenleftbig
(e
1,p1),(e2,p2)/parenrightbig
/∈r+
d∧/parenleftbig
(e2,p2),(e1,p1)/parenrightbig
/∈r+
d/bracerightbig
the set of edges.
every edge in the inclusion graph represents one candidate causal relation
in the data. the performance related to events of the source node of such an
edge is a potential causal factor for the performance related to events of the184 b.f.a. hompes et al.
target node. since our approach is automated, in order to test all combinations
of factors, all pairs of nodes are initially connected. however, edges betweenthose pairs of nodes that have an ancestry relationship in the decomposition
graph are removed from the inclusion graph, as for those pairs, neither node
can be a causal factor of the other. to illustrate this, take the decompositiongraph of the running example (depicted in fig. 3). any causal relation between
the performance related to events performed by john for cases of type gold,
with the performance related to all events performed by john would not have
any logical meaning. note that we are testing a time-lagged causal relationship
rather than a compositional relationship (i.e. we do not aim to ﬁnd which factor
contributes most), rather we look at which factor has predictive power overanother.
in order to reduce the risk of discovering spurious causalities, and in order
to optimize the performance of the causality detection technique, the inclusion
graph can be pruned further by removing nodes and/or edges that do not make
sense from a business point of view. multiple such pruning techniques can beconstructed, from domain knowledge-based manual selection to automatic clus-
tering and ﬁltering of the data represented by the nodes. any further pruning
of the inclusion graph however falls beyond the scope of this paper.
4.3 discovering causality
once the inclusion graph has been created, it serves as input for the causality
discovery step, where individual pairs of nodes in the inclusion graph are checked
for cause-eﬀect relationships.
for many years, the concept of causality has received continuing interest in
various domains of research. over the years, the concept has evolved, and as a
result, a variety of deﬁnitions have been proposed, many of which have a sta-
tistical foundation. techniques such as structural equation modeling [ 15]a n d
bayesian networks [ 16] have been widely used to assess cause-eﬀect relationships
between a set of observable and latent variables. in [ 17], for example, dynamic
bayesian network inference is used to discover causal relations in biological data.however, these techniques are generally more applicable for conﬁrmatory causal-
ity analysis based on predeﬁned hypotheses.
other techniques have been proposed to ﬁnd causal relationships in case no
a-priori knowledge is available about the causal structure in the data [ 18,19].
these techniques often return a set of causal models which are either hard tointerpret, assume the input data to be of a certain restrictive form, or do not
consider the time perspective in the data. for business process performance
analysis however, the time perspective is of particular importance. in the con-text of econometric models, granger has introduced a framework for testing
predictive causality that can be used to discover causality between two time
series and can be used to create graphical models of causality [ 3–5,20,21]. in
this paper, in order to detect causal factors for business process performance, we
test for granger causality between time series that represent business process
performance of diﬀerent potential causal factors.discovering causal factors explaining business process performance 185
business process performance. we deﬁne business process performance
indicators as functions over events. diﬀerent performance functions can havediﬀerent input and output. whereas most performance analysis techniques will
take only a collection of events as input, other functions can be constructed
that take additional input as well. for example, the ﬁtness of a speciﬁc case toa process model [ 1] can be a useful performance function when ﬁnding causal
factors for non-conformance or when looking for root causes for protocol viola-
tions. in this paper, we limit the domain of performance functions to a set ofevents and the range to timed real values. however, our approach can easily be
extended and integrated in situations that require performance functions with
diﬀerent input and output.
deﬁnition 5 (performance function). ideﬁnes a set of performance indi-
cators. a performance function is a function θ∈i→(e/notarrowrightr×t)where for
any performance indicator i∈i,θ(i)(denoted θ
i) is a partial function mapping
events onto timed real values. if θi(e)=(r, t)(denoted rt), then the performance
of event e∈eisr∈rand the associated time stamp is t∈t .i fe/∈dom(θi),
then event edoes not have a value for performance indicator iand we write
θi(e)=⊥.
typical performance functions are case duration, activity duration, activity
waiting time, activity sojourn time, etc. below, we give deﬁnitions for the case
duration (eq. 1), activity sojourn time (eq. 2) and activity duration (eq. 3).
other performance functions can be deﬁned analogously.
θcaseduration (e)=/parenleftbig
max{πt(e/prime)|e/prime∈e∧πc(e/prime)=πc(e)}−
min{πt(e/prime)|e/prime∈e∧πc(e/prime)=πc(e)},
max{πt(e/prime)|e/prime∈e∧πc(e/prime)=πc(e)}/parenrightbig(1)
θactivityduration (e)=/parenleftbig
max{πt(e/prime)|e/prime∈e∧πi(e/prime)=πi(e)}−
min{πt(e/prime)|e/prime∈e∧πi(e/prime)=πi(e)},
max{πt(e/prime)|e/prime∈e∧πi(e/prime)=πi(e)}/parenrightbig(2)
θactivitysojourntime (e)=/parenleftbig
max{πt(e/prime)|e/prime∈e∧πi(e/prime)=πi(e)}−
max{πt(e/prime)|e/prime∈e∧πc(e/prime)=πc(e)∧πi(e/prime)/negationslash=πi(e)
πt(e/prime)≤min(πt(e/prime/prime)|e/prime/prime∈e∧πi(e/prime/prime)=πi(e))},
max{πt(e/prime)|e/prime∈e∧πi(e/prime)=πi(e)}/parenrightbig
(3)
where πt=πtime,πc=πcaseandπi=πinstance .
time series. by applying a performance function to a collection of events we
obtain a set of timed real values. these values can be represented as a time
series, which form the basis of the granger causality detection technique.186 b.f.a. hompes et al.
deﬁnition 6 (time series). letutsbe the universe of time series. any time
series s∈uts={st|s∈r∧t∈t} deﬁnes a time-ordered collection of real
values.
in business processes, the measurements of most process performance indica-
tors arrive at irregular time intervals. in order to perform the granger causality
test, time series regularization needs to be performed. therefore, we regularize
the time series by re-sampling to a common measurement interval. to this end,
values for time intervals that do not have any recorded values are imputed (e.g.
by linear interpolation), and values for intervals with multiple values are aggre-gated (e.g. averaged). during analysis, a threshold must be set to avoid a high
number of imputed values relative to the number of actual values.
causality detection. each edge in the inclusion graph indicates a candidate
causal relation between the source and target nodes. this relation is tested for
granger causality. a time series s∈u
tsis said to granger cause another time
series s/prime∈utsif the past values of shelp predict future values of s/primebetter than
the past values of s/primecan predict itself. three steps are needed to perform the
granger test (denoted gs→s/prime). first, a linear univariate autoregressive model
ofs/primeis ﬁtted.
s/prime
t=l/summationdisplay
k=1a/prime
k·s/prime
t−k+/epsilon1/prime
t, (4)
here, lis the lag of granger test, t=l+1,...,|s/prime|,a/primeis a vector of
parameters for eq. 4,a n d/epsilon1/primeis the residual. next, a bivariate linear autoregressive
model for s/primeincluding the past values of sis ﬁtted as well:
s/prime
t=l/summationdisplay
k=1ak·s/prime
t−k+l/summationdisplay
k=1bk·st−k+/epsilon1t, (5)
here, aandbare vectors of parameters for eq. 5,a n d /epsilon1is the residual. the
residuals of eqs. 4and5can be estimated using a maximum likelihood estimator
(in this paper we use the ordinary least squares estimator). finally, the granger-sargent statistic is computed as follows.
g
s→s/prime=(/epsilon1/prime−/epsilon1)/l
/epsilon1/(|s/prime|−2l). (6)
informally, a large value for gs→s/primeindicates that the past information in
sis useful for predicting the future values of s/prime. the granger-sargent test is
performed to test the null hypothesis of no causality. if the returned p-value isless than the test threshold (typically 5%), sis said to “granger cause” s
/prime.
4.4 interpretation
it is worth mentioning here that any statistical causality technique, including
ours, discovers only statistically plausible causal structures, and causal factors
that are extraneous to the event data cannot be detected.discovering causal factors explaining business process performance 187
complexity. the time-complexity of the approach is bounded by the number
of nodes in the inclusion graph times the number of pair-wise tests performed,
i.e.o/parenleftbig/summationtext|p|
i=0/parenleftbig|p|
i/parenrightbig
·p2
2|i|/parenrightbig
. this can be reduced to o/parenleftbig
|p|2|p|+2·|i|!/parenrightbig
. however, it
should be noted that as explained in subsect. 4.2, many combinations will not be
tested due to their ancestry relationship. therefore, this upper bound is purely
theoretical, and not representative for the real-world complexity.
5 case study
the approach presented in this paper has been implemented in the process min-
ing tool prom2, and evaluated with a case study using a dataset provided by
one of australia’s largest insurance providers. the obtained results were inter-
preted and validated by a domain expert from this company who is involved
in process standardization and optimization eﬀorts. the results were found toprovide sensible and actionable insights related to business process performance.
the process that was analyzed is a variant of an automotive claims handling
process for which events are recorded by a claims handling system. the provided
dataset consists of 17,474 events that have been recorded for 2,577 claims (cases),
spanning a total of 13 months. there are 14 distinct activities in the process,and information is recorded about which of the 739 resources was involved in
the execution of activities. the total runtime of our technique on this real-life
dataset is in the order of several minutes (on modern hardware).
the following subsections correspond to the diﬀerent steps involved in our
causality detection approach, as described in sect. 4. we complete this section
with a discussion on the result.
5.1 systematic decomposition
in order to decompose the event collection into a decomposition graph, the fol-
lowing process characteristics were used. we used the activity name as diﬀerent
activities can clearly have diﬀerent inﬂuences on process performance. addition-
ally, in the process in question, not every activity is mandatory, i.e. not everyactivity was recorded for every case. as many resources are involved in this
process, their performance is an interesting potential cause for the selected per-
formance indicators. thus, besides the activity name, we used the resource thatexecuted the activity as a process characteristic. in order to have enough mea-
surements per causality analysis, nodes that contained less than 250 events or
less than 250 values in their respective time series were ﬁltered out. in total, theobtained decomposition graph contains 25 nodes and 27 edges (after ﬁltering).
5.2 candidate causal factor selection
from the decomposition graph obtained in the previous step, an inclusion graph
was created by applying the technique described in subsect. 4.2. no additional
2seehttp://promtools.org and the rootcauseanalysis package for more information.188 b.f.a. hompes et al.
graph pruning techniques were used other than the (automatic) removal of edges
between nodes for which an ancestry relation exists in the decomposition graph.the resulting inclusion graph contained 1,161 edges, representing 1,161 candi-
date causal relations per performance function.
5.3 discovering causality
in the dataset provided by the insurance company, only events referring to the
completion of activities were available. consequently, the activity duration could
not be calculated, as no events representing the beginning of activities wererecorded. we selected the case duration and the activity sojourn time, as deﬁned
in sect. 4.3, as business process performance indicators.
considering the time-granularity of the recorded data, the time series for
the two performance functions for each candidate factor were re-sampled to
daily intervals in order to obtain regular time series. when multiple values were
available for any given period, the average value was taken. missing values werereplaced by linearly interpolated values. as a ﬁltering step, time series for which
more than one out of ten values were imputed were not considered in the analysis.
in the granger causality test, the maximum lag value was set to 7, in orderto incorporate time-lagged eﬀects of up to one week. the resulting causality
graph showed a total of 16 causal relations involving 11 factors. out of these, 11
relations between 10 factors were selected for further analysis and explanation
in this paper, and can be seen in fig. 4.
5.4 discussion of results
visual analysis of the selected causal relations discovered by our technique
showed ﬁve main observations.
observations 1: one part of the causality graph consists of a set of three
activities for which the sojourn times are all causal factors for the sojourn time
of the close claim activity.
resource x
resource yreview
documentsreview and
approve paym.
review invoice
motor glass
review invoice
motor repairpayment 
thresholdfinal payment
requestedno recovery
or setllementclose claim
fig. 4. the causality graph obtained by applying the technique on the insurance claims
dataset. five main observations are found.discovering causal factors explaining business process performance 189
observations 2: the sojourn time of these three activities resulted to be
caused by the sojourn time of an activity representing the review of documents .
observations 3: in turn, the causal factor of the sojourn time for this activity
was the sojourn time of any activity performed by a speciﬁc resource (resource
x in fig. 4). on close inspection of the event log, we found that the close claim
activity was the last activity in about 30% of cases, and that the identiﬁed
resource was in the top ﬁve resources that frequently performed this activity.
observations 4: remarkably, the review document node also caused the
sojourn time of a ﬁfth activity (‘no recovery or settlement’), which did not seemto cause the performance of the close claim activity.
observations 5: finally, one node in the causality graph involves the sojourn
time of an activity representing the review invoice for the vehicle repair. this
factor seems to be caused by the sojourn time of a speciﬁc resource (resource y in
fig.4), and is itself a causal factor for the sojourn time of an activity representing
some payment threshold being reached .
the domain expert was presented with these ﬁve observation and was asked
to validate the results. with respect to the observations 1, 2 and 3, the explana-
tion given by the domain expert is that claims can only be closed once a checklistof other activities has been completed. the activities on this list correspond to
the activities for which the sojourn time was found to be a direct causal factor
for the sojourn time of the close claim activity. since the resource names were
made anonymous in our dataset, the speciﬁc resource could not be identiﬁed.
however, the domain expert suggested that the identiﬁed resource could be an
over-utilized person with a validation role, hence the eﬀect on the sojourn time(which includes both waiting and processing time).
based on the identiﬁed factors and the explanation provided by the domain
expert, we have suggested (i) to make use of an early-knockout strategy ratherthan waiting until the claim is about to be closed to check all activities [ 22], and
(ii) to allocate more resources for the validations, or to remove workload from
the resources involved in the validation.
additionally, the activity of which the performance was caused by the sojourn
time of the review document activity but that did not cause the performance of
the close claim activity (observation 4), was found to be an activity in which
repair costs were recovered from a third-party insurance company. in such cases,
the claim may be closed (i.e. this activity is not on the checklist).
finally, with respect to observation 5, the domain expert explained that
the repair of vehicles in this process is performed by a third party. as such,
occasionally, an invoice needs to be reviewed. for cases in which this invoiceexceeds a certain threshold, a resource having the manager role is involved.
since the performance of this resource is a causal factor, it might indicate an
over-utilization. discussing these cause-eﬀect factors with the domain expert leadto the following recommendations: (i) allocate more resources to review invoices,
and/or (ii) increase the threshold for the total amount on the invoice, in order
to decrease the number of invoices that need to be reviewed by a manager.190 b.f.a. hompes et al.
6 conclusions and future work
we proposed a novel technique to automatically discover root causes for business
process performance issues such as bottlenecks from event data. to the best of
our knowledge, this is the ﬁrst technique of its kind. the technique supports arange of business process characteristics to perform the analysis and information
from additional inputs such as process models may be used to provide speciﬁc
performance insights. a case study on a real-life dataset showed that the tech-nique has practical relevance and can be used to provide actionable insights to
analysts.
one limitation of the current implementation of our technique is that the
original deﬁnition for granger causality does not account for latent confounding
eﬀects and does not capture instantaneous and non-linear causal relationships. in
future work, we would like to explore extensions or alternative causality detec-
tion techniques, such as those deﬁned on a structure of relations rather than
on pairwise connections. the performance of the technique can be improved byfurther pruning the inclusion graph by means of clustering and ﬁltering tech-
niques. we would also like to investigate how obtained insights can be used
for monitoring, prediction and recommendation of business process performanceoptimization strategies.
acknowledgments. this research is funded by the australian research coun-
cil (grant dp150103356), the estonian research council (grant iut20-55) and therise
bpm project (h2020 marie curie program, grant 645751).
references
1. van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on
process models for conformance checking and performance analysis. wiley inter-
disc. rev.: data min. knowl. discov. 2(2), 182–192 (2012)
2. gonz´ alez, l.s., rubio, f.g., gonz´ alez, f.r., velthuis, m.p.: measurement in busi-
ness processes: a systematic review. bus. process manag. j. 16(1), 114–134 (2010)
3. granger, c.w.j.: some recent development in a concept of causality. j. economet-
rics 39(1), 199–211 (1988)
4. kami´ nski, m., ding, m., truccolo, w.a., bressler, s.l.: evaluating causal rela-
tions in neural systems: granger causality, directed transfer function and statisticalassessment of signiﬁcance. biol. cybern. 85(2), 145–157 (2001)
5. roebroeck, a., formisano, e., goebel, r.: mapping directed inﬂuence over the
brain using granger causality and fmri. neuroimage 25(1), 230–242 (2005)
6. pika, a., van der aalst, w.m.p., fidge, c.j., ter hofstede, a.h.m., wynn, m.t.:
predicting deadline transgressions using event logs. in: rosa, m., soﬀer, p. (eds.)
bpm 2012. lnbip, vol. 132, pp. 211–216. springer, heidelberg (2013). doi: 10.
1007/978-3-642-36285-9
22
7. suriadi, s., ouyang, c., van der aalst, w.m.p., ter hofstede, a.h.m.: root
cause analysis with enriched process logs. in: rosa, m., soﬀer, p. (eds.) bpm2012. lnbip, vol. 132, pp. 174–186. springer, heidelberg (2013). doi: 10.1007/
978-3-642-36285-9
18discovering causal factors explaining business process performance 191
8. de leoni, m., van der aalst, w.m.p., dees, m.: a general process mining framework
for correlating, predicting and clustering dynamic behavior based on event logs.
inf. syst. 56, 235–257 (2016)
9. conforti, r., de leoni, m., la rosa, m., van der aalst, w.m.p., ter hofstede, a.h.m.:
a recommendation system for predicting risks across multiple business process
instances. decis. support syst. 69(1), 1–19 (2015)
10. ghattas, j., soﬀer, p., peleg, m.: improving business process decision making based
on past experience. decis. support syst. 59, 93–107 (2014)
11. van der aalst, w.m.p.: process cubes: slicing, dicing, rolling up and drilling
down event data for process mining. in: song, m., wynn, m.t., liu, j. (eds.)
ap-bpm 2013. lnbip, vol. 159, pp. 1–22. springer, cham (2013). doi: 10.1007/
978-3-319-02922-1 1
12. vogelgesang, t., appelrath, h.-j.: pmcube: a data-warehouse-based approach
for multidimensional process mining. in: reichert, m., reijers, h.a. (eds.)bpm 2015. lnbip, vol. 256, pp. 167–178. springer, cham (2016). doi: 10.1007/
978-3-319-42887-1
14
13. tan, s., chan, t.: deﬁning and conceptualizing actionable insight: a conceptual
framework for decision-centric analytics. in: australasian conference on informa-
tion systems (2015)
14. hompes, b.f.a., buijs, j.c.a.m., van der aalst, w.m.p.: a generic framework
for context-aware process performance analysis. in: debruyne, c., et al. (eds.)
otm 2016. lncs, vol. 10033, pp. 300–317. springer, cham (2016). doi: 10.1007/
978-3-319-48472-3 17
15. bollen, k.a.: structural equations with latent variables. wiley, hoboken (2014)
16. jensen, f.v.: an introduction to bayesian networks, vol. 210. ucl press, london
(1996)
17. yu, j., smith, v.a., wang, p.p., hartemink, a.j., jarvis, e.d.: advances to
bayesian network inference for generating causal networks from observational bio-
logical data. bioinformatics 20(18), 3594–3603 (2004)
18. shimizu, s., hoyer, p.o., hyvarinen, a., kerminen, a.: a linear non-gaussian
acyclic model for causal discovery. j. mach. learn. res. 7, 2003–2030 (2006)
19. richardson, t.: a polynomial-time algorithm for deciding markov equivalence of
directed cyclic graphical models. in: proceedings of the twelfth international con-
ference on uncertainty in artiﬁcial intelligence, pp. 462–469. morgan kaufmann
publishers inc., burlington (1996)
20. granger, c.w.j.: investigating causal relations by econometric models and cross-
spectral methods. econometrica 37(3), 424 (1969)
21. dahlhaus, r., eichler, m.: causality and graphical models in time series analysis.
in: oxford statistical science series, pp. 115–137 (2003)
22. van der aalst, w.m.p.: re-engineering knock-out processes. decis. support syst.
30(4), 451–468 (2001)