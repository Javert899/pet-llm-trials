multi-phase process mining:
building instance graphs
b.f. van dongen, and w.m.p. van der aalst
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
{b.f.v.dongen,w.m.p.v.d.aalst }@tm.tue.nl
abstract. deploying process-driven information systems is a time-con-
suming and error-prone task. process mining attempts to improve this
by automatically generating a process model from event-based data. ex-isting techniques try to generate a complete process model from the data
acquired. however, unless this model is the ultimate goal of mining, such
a model is not always required. instead, a good visualization of each indi-vidual process instance can be enough. from these individual instances,
an overall model can then be generated if required. in this paper, we
present an approach which constructs an instance graph for each indi-
vidual process instance, based on information in the entire data set. the
results are represented in terms of event-driven process chains (epcs).
this representation is used to connect our process mining to a widelyused commercial tool for the visualization and analysis of instance epcs.
keywords : process mining, event-driven process chains, workﬂow management, busi-
ness process management.
1 introduction
increasingly, process-driven information systems are used to support operational
business processes. some of these information systems enforce a particular way
of working. for example, workﬂow management systems (wfmss) can be usedto force users to execute tasks in a predeﬁned order. however, in many cases
systems allow for more ﬂexibility. for example transactional systems such as
erp (enterprise resource planning), crm (customer relationship manage-ment) and scm (supply chain management) are known to allow the users to
deviate from the process speciﬁed by the system, e.g., in the context of sap r/3
the reference models, expressed in terms of event-driven process chains (epcs,
cf. [13, 14, 19]), are only used to guide users rather than to enforce a particular
way of working. operational ﬂexibility typically leads to diﬃculties with respectto performance measurements. the ability to do these measurements, however,
is what made companies decide to use a transactional system in the ﬁrst place.
to be able to calculate basic performance characteristics, most systems have
their own built-in module. for the calculation of basic characteristics such as the
average ﬂow time of a case, no model of the process is required. however, for more
complicated characteristics, such as the average time it takes to transfer workfrom one person to the other, some notion of causality between tasks is required.
this notion of causality is provided by the original model of the process, but
deviations in execution can interfere with causalities speciﬁed there. therefore, inthis paper, we present a way of deﬁning certain causal relations in a transactional
system. we do so without using the process deﬁnition from the system, butonly looking at a so called process log. such a process log contains information
about the processes as they actually take place in a transactional system. most
systems can provide this information in some form and the techniques used toinfer relations between tasks in such a log is called process mining .
the problem tackled in this paper has been inspired by the software package
aris ppm (process performance monitor) [12] developed by ids scheer. aris
ppm allows for the visualization, aggregation, and analysis of process instances
expressed in terms of instance epcs (i-epcs). an instance epc describes the
the control-ﬂow of a case, i.e., a single process instance. unlike a trace (i.e., a se-quence of events) an instance epc provides a graphical representation describing
the causal relations. in case of parallelism, there may be diﬀerent traces having
the same instance epc. note that in the presence of parallelism, two subsequentevents do not have to be causally related. aris ppm exploits the advantages
of having instance epcs rather than traces to provide additional management
information, i.e., instances can be visualized and aggregated in various ways. in
order to do this, ids scheer has developed a number of adapters, e.g., there is an
adapter to extract instance epcs from sap r/3. unfortunately, these adapterscan only create instance epcs if the actual process is known. for example,
the workﬂow management system staﬀware can be used to export staﬀware
audit trails to aris ppm (staﬀware spm, cf. [20]) by taking projections ofthe staﬀware process model. as a result, it is very time consuming to build
adapters. moreover, the approaches used only work in environments where there
are explicit process models available.
in this paper, we do not focus on the visualization, aggregation, and analysis
of process instances expressed in terms of instance epc or some other notation
capturing parallelism and causality. instead we focus on the construction ofinstance graphs . an instance graph can be seen as an abstraction of the instance
epcs used by aris ppm. in fact, we will show a mapping of instance graphs
onto instance epcs. instance graphs also correspond to a speciﬁc class of petrinets known as marked graphs [17], t-systems [9] or partially ordered runs [8, 10].
tools like viptool allow for the construction of partially ordered runs given an
ordinary petri net and then use these instance graphs for analysis purposes. in
our approach we do not construct instance graphs from a known petri net but
from an event log. this enhances the applicability of commercial tools such asaris ppm and the theoretical results presented in [8, 10]. the mapping from
instance graphs to these petri nets is not given here. however, it will become
clear that such a mapping is trivial.
in the remainder of this paper, we will ﬁrst describe a common format to store
process logs in. then, in section 3 we will give an algorithm to infer causality at
an instance level, i.e. a model is built for each individual case. in section 4 wewill provide a translation of these models to epcs. section 5 shows a concrete
example and demonstrates the link to aris ppm. section 6 discusses related
work followed by some concluding remarks.2 preliminaries
this section contains most deﬁnitions used in the process of mining for instance
graphs. the structure of this section is as follows. subsection 2.1 deﬁnes a process
log in a standard format. subsection 2.2 deﬁnes the model for one instance.
2.1 process logs
information systems typically log all kinds of events. unfortunately, most sys-
tems use a speciﬁc format. therefore, we propose an xml format for storing
event logs. the basic assumption is that the log contains information about spe-
ciﬁc tasks executed for speciﬁc cases (i.e., process instances). note that unlike
aris ppm we do not assume any knowledge of the underlying process. ex-
perience with several software products (e.g., staﬀware, inconcert, mqseries
workﬂow, flower, etc.) and organization-speciﬁc systems (e.g., rijkswater-staat, cjib, and several hospitals) show that these assumptions are justiﬁed.
fig. 1. xml schema for process logs.
figure 1 shows the schema deﬁnition of the xml format. this format is sup-
ported by our tools, and mappings from several commercial systems are avail-
able. the format allows for logging multiple processes in one xml ﬁle (cf. ele-ment “process”). within each process there may be multiple process instances
(cf. element “processinstance”). each “processinstance” element is composed
of “audittrailentry” elements. instead of “audittrailentry” we will also use
the terms “log entry” or “event”. an “audittrailentry” element corresponds to
a single event and refers to a “workﬂowmodelelement” and an “eventtype”.a “workﬂowmodelelement” may refer to a single task or a subprocess. the
“eventtype” is used to indicate the type of event. typical events are: “sched-
ule” (i.e., a task becomes enabled for a speciﬁc instance), “assign” (i.e., a taskinstance is assigned to a user), “start” (the beginning of a task instance), “ com-
plete” (the completion of a task instance). in total, we identify 12 events. when
building an adapter for a speciﬁc system, the system-speciﬁc events are mappedon these 12 generic events.
as figure 1 shows the “workﬂowmodelelement” and “eventtype” are manda-
tory for each “audittrailentry”. there are three optional elements “data”,“timestamp”, and “originator”. the “data” element can be used to store data
related to the event of the case (e.g., the amount of money involved in the trans-action). the “timestamp” element is important for calculating performance
metrics like ﬂow time, service times, service levels, utilization, etc. the “origi-
nator” refers to the actor (i.e., user or organization) performing the event. thelatter is useful for analyzing organizational and social aspects. although each
element is vital for the practical applicability of process mining, we focus on
the “workﬂowmodelelement” element. in other words, we abstract from the“eventtype”, “data”, “timestamp”, and “originator” elements. however, our
approach can easily be extended to incorporate these aspects. in fact, our tools
deal with these additional elements. however, for the sake of readability, in thispaper events are identiﬁed by the task and case (i.e., process instance) involved.
case identiﬁer task identiﬁer
case 1 task s
case 2 task s
case 1 task a
case 1 task b
case 2 task b
case 2 task a
table 1. a process log.
table 1 shows an example of a small log after abstracting from all elements
except for the “workﬂowmodelelement” element (i.e., task identiﬁer). the log
shows two cases. for each case three tasks are executed. case 1 can be described
by the sequence sab and case 2 can be described by the sequence sba.i nt h e
remainder we will describe process instances as sequences of tasks where each
element in the sequence refers to a “workﬂowmodelelement” element. a process
log is represented as a bag (i.e., multiset) of process instances.
deﬁnition 2.1. (process instance, process log) lettbe a set of log
entries, i.e., references to tasks. let t+deﬁne the set of sequences of log entries
with length at least 1. we call σ∈t+a process instance (i.e., case) and w∈
t+→in a process log.
ifσ=t1t2...tn∈t+is a process instance of length n, then each element
ticorresponds to “audittrailentry” element in figure 1. however, since we
abstract from timestamps, event types, etc., one can think of tias a reference to
a task. |σ|=ndenotes the length of the process instance and σithei-th element.
we assume process instances to be of ﬁnite length. w∈t+→in denotes a
bag, i.e., a multiset of process instances. w(σ) is the number of times a process
instance of the form σappears in the log. the total number of instances in a bag
is ﬁnite. since wis a bag, we use the normal set operators where convenient.
for example, we use σ∈was a shorthand notation for w(σ)>0.
2.2 instance nets
after deﬁning a process log, we now deﬁne an instance net. an instance net is
a model of one instance. since we are dealing with an instance that has beenexecuted in the past, it makes sense to deﬁne an instance net in such a way that
no choices have to be made. as a consequence of this, no loops will appear in aninstance net. for readers familiar with petri nets it is easy to see that instance
nets correspond to “runs” (also referred to as occurrence nets) [8].
since events that appear multiple times in a process instance have to be
duplicated in an instance net, we deﬁne an instance domain. the instance domain
will be used as a basis for generating instance nets.
deﬁnition 2.2. (instance domain) letσbe a process instance such that
σ=t
1t2...tn∈t+, i.e.,|σ|=n. we deﬁne dσ={1...n}as the domain of σ.
using the domain of an instance, we can link each log entry in the process
instance to a speciﬁc task, i.e., i∈dσcan be used to represent the i-th element
inσ. in an instance net, the instance σis extended with some ordering relation
/turnstilerightσto reﬂect some causal relation.
deﬁnition 2.3. (instance net) letn=(σ,/turnstilerightσ) such that σis a process
instance. let dσbe the domain of σand let /turnstilerightσbe an ordering on dσsuch that:
–/turnstilerightσis irreﬂexive, asymmetric and acyclic,
–∀i,j∈dσ(i<j⇒j/negationslash/turnstilerightσi),
–∀i,j∈dσ(i/turnstilerightσj⇒/negationslash∃k∈dσ(i/turnstilerightσk∧k/turnstileright+
σj), where /turnstileright+
σis the smallest relation
satisfying: i/turnstileright+
σjif and only if i/turnstilerightσjor∃k(i/turnstilerightσk∧k/turnstileright+
σj)
–∀i,j∈dσ(ti=tj⇒(i/turnstileright+
σj)∨(j/turnstileright+
σi))
we call nan instance net.
the deﬁnition of an instance net given here is rather ﬂexible, since it is deﬁned
only as a set of entries from the log and an ordering on that set. an important
feature of this ordering is that if i/turnstilerightjthen there is no set {k1,k2,...,k n}such
thati/turnstilerightk1,k1/turnstilerightk2,...,k n/turnstilerightj. since the set of entries is given as a log, and an
instance mapping can be inferred for each instance based on textual properties,
we only need to deﬁne the ordering relation based on the given log. in section 3.1it is shown how this can be done. in section 4 we show how to translate an
instance net to a model in a particular language (i.e., instance epcs).
3 mining instance graphs
as seen in deﬁnition 2.3, an instance net consists of two parts. first, it requiresa sequence of events σ∈t
+as they appear in a speciﬁc instance. second, an or-
dering /turnstilerighton the domain of σis required. in this section, we will provide a method
that infers such an ordering relation on tusing the whole log. furthermore, we
will present an algorithm to generate instance graphs from these instance nets .
3.1 creating instance nets
deﬁnition 3.1. (causal ordering) letwbe a process log over a set of log
entries t, i.e.,w∈t+→in. let b∈tandc∈tbe two log entries. we deﬁne
a causal ordering →wonwin the following way:–b>wcif and only if there is an instance σandi∈dσ\{ |σ|}such that
σ∈wandσi=bandσi+1=c,
–b/trianglewcif and only if there is an instance σandi∈dσ\{ |σ|−1,|σ|}such
thatσ∈wandσi=σi+2=bandσi+1=candb/negationslash=cand not b>wb,
–b→wcif and only if b>wcand (c/negationslash>wborb/trianglewcorc/trianglewb), orb=c.
the basis of the causal ordering deﬁned here, is that two tasks aandbhave
a causal relation a→bif in some process instance, ais directly followed by
bandbis never directly followed by a. however, this can lead to problems
if the two tasks are in a loop of length two. therefore, a→balso holds if
there is a process instance containing aba orbab andanorbcan directly
succeed themselves. if adirectly succeeds itself, then a→a. for the example
log presented in table 1, t={s,a,b }and causal ordering inferred on tis
composed of the following two elements s→waands→wb.
by deﬁning the →wrelation, we deﬁned an ordering relation on t. this
relation is not necessarily irreﬂexive, asymmetric, nor acyclic. this →wrelation
however can be used to induce an ordering on the domain of any instance σthat
has these properties. this is done in two steps. first, an asymmetric order isdeﬁned on the domain of some σ. then, we prove that this relation is irreﬂexive
and acyclic.
deﬁnition 3.2. (instance ordering) letwbe a process log over tand let
σ∈wbe a process instance. furthermore, let →
wb eac a u s a lo r d e r i n go n
t. we deﬁne an ordering /followsσon the domain of σ,dσin the following way. for
alli,j∈dσsuch that i<j we deﬁne i/followsσjif and only if σi→wσjand
/negationslash∃i<k<j(σi→wσk)o r/negationslash∃i<k<j(σk→wσj).
the essence of the relation deﬁned here is in the ﬁnal part. for each entry
within an instance, we ﬁnd the closest causal predecessor and the closest causal
successor. if there is no causal predecessor or successor then the entry is in
parallel with all its predecessors or successors respectively. it is trivial to see thatthis can always be done for any process instance and with anycausal relation.
in the example log presented in table 1 there are two process instances, case
1 and case 2. from here on, we will refer to case 1 as σ
1and to case 2 as σ2.w e
know that σ1=sab and that dσ1={1,2,3}. using the causal relation →the
relation /followsσ1is inferred such that 1 /followsσ12 and 1 /followsσ13. for σ2this also applies.
it is easily seen that the ordering relation /followsσis indeed irreﬂexive and asym-
metric, since it is only deﬁned on iandjfor which i<j. therefore, it can easily
be concluded that it is irreﬂexive and acyclic . furthermore, the third property
holds as well. therefore we can now deﬁne an instance net as ( σ,/followsσ).
3.2 creating instance graphs
in this section, we present an algorithm to generate an instance graph from an
instance net. an instance graph is a graph where each node represents one log
entry of a speciﬁc instance. these instance graphs can be used as a basis to
generate models in a particular language.deﬁnition 3.3. (instance graph) consider a set of nodes nand a set of
edges e⊆n×n. we call g=(n,e)σan instance graph of an instance net
(σ,/followsσ) if and only if the following conditions hold.
1.n=dσ∪{0,|dσ|+1}is the set of nodes.
2. the set of edges eis deﬁned as e=erel∪einitial ∪efinal, where
erel={(n1,n2)∈n×n|(n1/followsσn2)}and
einitial ={(0,n)∈n×n|/negationslash∃n1(n1/followsσn)}and
efinal={(n,|n|−1)∈n×n|/negationslash∃n1(n/followsσn1)}
an instance graph as described in deﬁnition 3.3 is a graph that typically
describes an execution path of some process model. this property is what makes
an instance graph a good description of an instance. it not only shows causalrelations between tasks but also parallelism if parallel branches are taken by
the instance. however, choices are not represented in an instance graph. the
reason for that is obvious, since choices are made at the execution level and donot appear in an instance. with respect to these choices, we can also say that
if the same choices are made at execution, the resulting instance graph is the
same. note, that the fact that the same choices are made does not imply thatthe process instance is the same. tasks that can be done in parallel within one
instance can appear in any order in an instance without changing the resulting
instance graph.
012
34sa
b
fig. 2. instance graph for σ1.
for case 1 of the example log of table 1 the instance graph is drawn in
figure 2. note that in this graph, the nodes 1,2 and 3 are actually in the domainofσ
1and therefore, they refer to entries in table 1. it is easily seen that for
case 2 this graph looks exactly the same, although the nodes refer to diﬀerent
entries.
in order to make use of instance graphs, we will show that an instance graph
indeed describes an instance such that an entry in the log can only appear if all
predecessors of that entry in the graph have already appeared in the instance.
deﬁnition 3.4. (pre- and postset) letg=(n,e)σbe an instance graph and
letn∈n. we deﬁne •gnto be the preset of nsuch that •gn={n/prime∈n|(n/prime,n)∈
e}. we deﬁne n•gto be the postset of nsuch that n•g={n/prime∈n|(n,n/prime)∈e}.
property 3.5. (instance graphs describe an instance) every instance
graph g=(n,e)σof some process instance σdescribes that instance in such
a way that for all i,j∈nholds that for all j∈• giimplies that j<i. this
ensures that every entry in process entry σoccurs only after all predecessors in
the instance graph have occurred in σ.proof. to prove that this is indeed the case for instance graph g=(n,e)σ,
we consider deﬁnition 3.3 which implies that for “internal nodes” we know that(n
1,n2)∈eif and only if n1/followsσn2. furthermore, from the deﬁnition of /followsσwe
know that n1/followsσn2implies that n1<n 2. for the source and sink nodes, it is
also easy to show that n1∈• gn2implies that n1<n 2because 0 is the smallest
element of nwhile |n|−1 is the largest. 2
property 3.6. (strongly connectedness) for every instance graph
g=(n,e)σof some process instance σholds that the short circuited graph
g/prime=(n,e∪{(|n|−1,0)}) is strongly connected.1
proof. from deﬁnition 3.3 we know that for all i∈dσsuch that there does
not exist a j∈dσsuch that j/followsσiholds that (0 ,i)∈e. furthermore, we know
that for all i∈dσsuch that there does not exist a j∈dσsuch that i/followsσj
holds that ( i,|σ|+1)∈e. therefore, the graph is strongly connected if the edge
(|n|−1,0) is added to e. 2
in the remainder of this paper, we will focus on an application of instance
graphs. in section 4 a translation from these instance graphs to a speciﬁc model
are given.
4 instance epcs
in section 3 instance graphs were introduced. in this section, we will present an
algorithm to generate instance epcs from these graphs. an instance epc is a
special case of an epc (event-driven process chain, [13]). for more information
on epcs we refer to [13, 14, 19]. these instance epcs (or i-epcs) can onlycontain and-split and and-join connectors, and therefore do not allow for
loops to be present. these i-epcs serve as a basis for the tool aris ppm
(process performance monitor) described in the introduction.
in this section, we ﬁrst provide a formal deﬁnition of an instance epc. an
instance epc does not contain any connectors other than and-split and and-
joins connectors. furthermore, there is exactly one initial event and one ﬁnalevent. functions refer to the entries that appear in a process log, events however
do not appear in the log. therefore, we make the assumption here that each
event uniquely causes a function to happen and that functions result in one ormore events. an exception to this assumption is made when there are multiple
functions that are the start of the instance. these functions are all preceded
by an and-split connector. this connector is preceded by the initial event.
consequently, all other connectors are preceded by functions and succeeded by
events.
deﬁnition 4.1. (instance epc) consider a set of events e, a set of functions
f, a set of connectors cand a set of arcs a⊆((e∪f∪c)×(e∪f∪c))\
1a graph is strongly connected if there is a directed path from any node to any other
node in the graph.((e×e)∪(f×f)). we call ( e,f,c,a ) an instance epc if and only if the
following conditions hold.
1.e∩f=f∩c=e∩c=∅
2. functions and events alternate in the presence of connectors: ∀n1,n2∈e∪f
∀(c1,c2)∈(a∩(c×c))+∪i((n1,c1)∈a∧(c2,n2)∈a)⇒(n1∈e⇔n2∈f),
where i={(c,c)|c∈c}.
3. the graph ( e∪f∪c,a) is acyclic.
4. there exists exactly one event ei∈esuch that there is no element n∈f∪c
such that ( n,ei)∈a. we call eithe initial event.
5. there exists exactly one event ef∈esuch that there is no element n∈f∪c
such that ( ef,n)∈a. we call efthe ﬁnal event.
6. the graph ( e∪f∪c,a∪{(ef,ei)}) is strongly connected.
7. for each function f∈fthere are exactly two elements n1,n2∈e∪csuch
that ( f,n 1)∈aand (n2,f)∈a. functions only have one input and one
output.
8. for each event e∈e/{ei,ef}there are exactly two elements n1,n2∈f∪c
such that ( e,n1)∈aand (n2,e)∈a. events only have one input and one
output, except for the initial and the ﬁnal event. for them the following
holds. for eithere is exactly one element n∈f∪csuch that ( ei,n)∈a
and for efthere is exactly one element n∈f∪csuch that ( n,ef)∈a.
4.1 generating instance epcs
using the formal deﬁnition of an instance epc from deﬁnition 4.1, we introduce
an algorithm that produces an instance epc from an instance graph as deﬁned
in deﬁnition 3.3. in the instance epc generated it makes sense to label thefunctions according to the combination of the task name and event type as they
appear in the log. the labels of the events however cannot be determined from
the log. therefore, we propose to label the events in the following way. theinitial event will be labeled “initial”. the ﬁnal event will be labeled “ﬁnal”. all
other events will be labeled in such a way that it is clear which function succeeds
it. connectors are labeled in such a way that it is clear whether it is a split ora join connector and to which function or event it connects with the input or
output respectively.
deﬁnition 4.2. (converting instance graphs to epcs) letwbe a process
log and let g=(n
g,eg)σbe an instance graph for some process instance
σ∈w. to create an instance epc, we need to deﬁne the four sets e,f,cand
a.
–the set of functions fis deﬁned as f={fi|i∈dσ}. in other words, for
every entry in the process instance, a function is deﬁned.
–the set of events eis deﬁned as e={efi|fi∈fand∃j∈dσ(j/followsσi)}∪
{einitial,efinal}. in other words, for every function there is an event preceding
it, unless it is a minimal element with respect to /followsσ. furthermore, there is
an initial event einitial and a ﬁnal event efinal.–the set of connectors cis deﬁned as c=csplit∪cjoin∪ci∪cfwhere
csplit={c(split,f i)|fi∈f∧|i•g|>1}and
cjoin={c(join,e fi)|efi∈e∧|• gi|>1}and
ci={c(split,e initial )||0•g|>1}and
cf={c(join,e final )|| • g(|ng|−1)|>1}.
here, the connectors are constructed in such a way that connectors are al-
ways preceded by a function, except in case the process starts with parallel
functions, since then the event einitial is succeeded by a split connector.
–the set of arcs ais deﬁned as a=aef∪afe∪asplit∪ajoin∪ai∪afwhere
aef={(efi,fi)∈(e×f)}and
afe={(fi,efj)∈(f×e)|(i,j)∈eg∧|i•g|=1∧|• gj|=1}
asplit={(fi,c(split,f i))∈(f×csplit)}∪
{(c(split,f i),efj)∈(csplit×e)|(i,j)∈eg∧|• gj|=1}∪
{(c(split,f i),c(join,e fj))∈(csplit×cjoin)|(i,j)∈eg}and
ajoin={(c(join,e fi),efi)∈(cjoin×e)}∪
{(fi,c(join,e fj))∈(f×cjoin)|(i,j)∈eg∧|i•g|=1}and
ai={(einitial,c(split,e initial ))∈(e×ci)}∪
{(c(split,e initial ),fi)∈(ci×f)|(0,i)∈eg}and
af={(c(join,e final ),efinal)∈(cf×e)}∪
{fi,(c(join,e final ))∈(f×df)|(i,(|ng|−1))∈eg}.
it is easily seen that the instance epc generated by deﬁnition 4.2 is indeed
an instance epc, by verifying the result against deﬁnition 4.1.
initialstatus
change to a
status
change to bfinala
bs /\ /\
fig. 3. instance epc for σ1.
in deﬁnitions 3.3 and 4.1 we have given an algorithm to generate an instance
epc for each instance graph. the result of this algorithm for both cases in the
example of table 1 can be found in figure 3. in section 5 we will show the
practical use of this algorithm to aris ppm.
5 example
in this section, we present an example illustrating the algorithms described insections 3 and 4. we will start from a process log with some process instances.
then, we will run the algorithms to generate a set of instance epcs that can be
imported into aris ppm.
5.1 a process log
consider a process log consisting of the following traces.case identiﬁer task executions
case 1 s1,a2,b3,f4,c5,d6,h7,g8,t9
case 2 s1,a2,c3,b4,e5,h6,f7,g8,t9
case 3 s1,a2,d3,b4,c5,f6,h7,g8,t9
case 4 s1,a2,e3,b4,c5,h6,f7,g8,t9
case 5 s1,a2,b3,d4,f5,h6,c7,g8,t9
case 6 s1,a2,b3,e4,f5,h6,c7,g8,t9
case 7 s1,a2,b3,f4,d5,c6,h7,g8,t9
case 8 s1,a2,b3,f4,e5,c6,h7,g8,t9
case 9 s1,a2,d3,c4,b5,h6,f7,g8,t9
case 10 s1,a2,c3,e4,h5,b6,f7,g8,t9
table 2. a process log.
the process log in table 2 shows the execution of tasks for a number of
diﬀerent instances of the same process. to save space, we abstracted from the
original names of tasks and named each task with a single letter. the subscript
refers to the position of that task in the process instance.
using this process log, we will ﬁrst generate the causal relations from deﬁ-
nition 3.1. note that casual relations are to be deﬁned between tasks and not
between log entries. therefore, the subscripts are omitted here. this deﬁnition
leads to the following set of causal relations: {s→a, a →b, a →c,
a→d, a →e, b →f, d →h, e →h, f →g,
c→g, h →g, g →t}.
using these relations, we generate instance graphs as described in section 3
for each process instance. then, these instance graphs are imported into aris
ppm and a screenshot of this tool is presented (cf. figure 5).
5.2 instance graphs
to illustrate the concept of instance graphs, we will present the instance graph
for the ﬁrst instance, “case 1”. in order to do this, we will follow deﬁnition 3.2
to generate an instance ordering for that instance. then, using these orderings,
an instance graph is generated. applying deﬁnition 3.2 to case 1 in the log
presented in table 2 using the casual relations given in section 5.1 gives the
following instance ordering: 0 /follows1,1/follows2,2/follows3,3/follows4,4/follows8,8/follows9,2/follows
5,5/follows8,2/follows6,6/follows7,7/follows8,8/follows9,9/follows10.
using this instance ordering, an instance graph can be made as described
in deﬁnition 3.3. the resulting graph can be found in figure 4. note that the
instance graphs of all other instances are isomorphic to this graph. only, the
numbers of the nodes change.
01s
2a3b
4f
5c
6d
7h8g
9t
10
fig. 4. instance graph for case 1.for each process instance, such an instance graph can be made. using the
algorithm presented in section 4 each instance can than be converted into aninstance epc. these instance epcs can be imported directly into aris ppm for
further analysis. here, we would like to point out again that our tools currently
provide an implementation of the algorithms in this paper, such that the instanceepcs generated can be imported into aris ppm directly. a screenshot of this
tool can be found in figure 5 where “case 1” is shown as an instance epc.
furthermore, inside the boxed area, the aggregation of some cases is shown.note that this aggregation is only part of the functionality of aris ppm. using
graphical representations of instances, a large number of analysis techniques is
available to the user. however, creating instances without knowing the originalprocess model is an important ﬁrst step.
fig. 5. aris ppm screenshot.
6 related work
the idea of process mining is not new [1, 3, 5–7, 11, 12, 15, 16, 18, 21] and most
techniques aim at the control-ﬂow perspective. for example, the α-algorithm
allows for the construction of a petri net from an event log [1, 5]. however, process
mining is not limited to the control-ﬂow perspective. for example, in [2] we use
process mining techniques to construct a social network. for more informationon process mining we refer to a special issue of computers in industry on process
mining [4] and a survey paper [3]. in this paper, unfortunately, it is impossible
to do justice to the work done in this area. to support our mining eﬀorts wehave developed a set of tools including emit [1], thumb [21], and minson [2].
these tools share the xml format discussed in this paper. for more details we
refer to www.processmining.org.the focus of this paper is on the mining of the control-ﬂow perspective.
however, instead of constructing a process model, we mine for instance graphs.the result can be represented in terms of a petri net or an (instance) epc.
therefore, our work is related to tools like aris ppm [12], staﬀware spm [20],
and viptool [10]. moreover, the mining result can be used as a basis for applyingthe theoretical results regarding partially ordered runs [8].
7 conclusion
the focus of this paper has been on mining for instance graphs. algorithms are
presented to describe each process instance in a particular modelling language.
from the instance graphs described in section 3, other models can be created as
well. the main advantage of looking at instances in isolation is twofold. first, it
can provide a good starting point for all kinds of analysis such as the ones imple-mented in aris ppm. second, it does not require any notion of completeness
of a process log to work. as long as a causal relation is provided between log
entries, instance graphs can be made. existing methods such as the α-algorithm
[1, 3, 5] usually require some notion of completeness in order to rediscover the
entire process model. the downside thereof is that it is often hard to deal with
noisy process logs. in our approach noise can be ﬁltered out before implying thecausal dependencies between log entries, without negative implications on the
result of the mining process.
aris ppm allows for the aggregation of instance epcs into an aggregated
epc. this approach illustrates the wide applicability of instance graphs. how-
ever, the aggregation is based on simple heuristics that fail in the presence of
complex routing structures. therefore, we are developing algorithms for the inte-gration of multiple instance graphs into one epc or petri net. early experiments
suggest that such a two-step approach alleviate some of the problems existing
process mining algorithms are facing [3, 4].
references
1. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
models from timed logs. in y. han, s. tai, and d. wikarski, editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
2. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in m. weske, b. pernici, and j. desel, editors,
international conference on business process management , volume 3080 of lec-
ture notes in computer science , pages 244–260. springer-verlag, berlin, 2004.
3. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267, 2003.
4. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining ,s p e c i a l
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.5. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: dis-
covering process models from event logs. qut technical report, fit-tr-2003-03,
queensland university of technology, brisbane, 2003. (accepted for publicationin ieee transactions on knowledge and data engineering.).
6. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.
7. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
8. j. desel. validation of process models by construction of process nets. in w.m.p.
van der aalst, j. desel, and a. oberweis, editors, business process management:
models, techniques, and empirical studies , volume 1806 of lecture notes in com-
puter science , pages 110–128. springer-verlag, berlin, 2000.
9. j. desel and j. esparza. free choice petri nets ,v o l u m e4 0o f cambridge tracts
in theoretical computer science . cambridge university press, 1995.
10. j. desel, g. juhas, r. lorenz, and c. neumair. modelling and validation with
viptool. in w.m.p. van der aalst, a.h.m. ter hofstede, and m. weske, editors,international conference on business process management (bpm 2003) ,v o l u m e
2678 of lecture notes in computer science , pages 380–389. springer-verlag, 2003.
11. j. herbst. a machine learning approach to workﬂow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
12. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
13. g. keller, m. n¨ uttgens, and a.w. scheer. semantische processmodellierung auf
der grundlage ereignisgesteuerter processketten (epk). ver¨ oﬀentlichungen des
instituts f¨ ur wirtschaftsinformatik, heft 89 (in german), university of saarland,
saarbr¨ ucken, 1992.
14. g. keller and t. teufel. sap r/3 process oriented implementation . addison-
wesley, reading ma, 1998.
15. a.k.a. de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. workﬂow
mining: current status and future directions. in r. meersman, z. tari, and d.c.schmidt, editors, on the move to meaningful internet systems 2003: coopis,
doa, and odbase , volume 2888 of lecture notes in computer science ,p a g e s
389–406. springer-verlag, berlin, 2003.
16. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1–10. ieee computer society press, los alamitos, california, 2000.
17. t. murata. petri nets: properties, analysis and applications. proceedings of the
ieee, 77(4):541–580, april 1989.
18. m. sayal, f. casati, and m.c. shan u. dayal. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb’02) ,
pages 880–883. morgan kaufmann, 2002.
19. a.w. scheer. business process engineering, reference models for industrial en-
terprises . springer-verlag, berlin, 1994.
20. staﬀware. staﬀware process monitor (spm). http://www.staﬀware.com, 2002.
21. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151–162, 2003.