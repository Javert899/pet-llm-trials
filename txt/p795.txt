a general framework for correlating business process
characteristics
massimiliano de leoni1;2?, wil m.p. van der aalst2, and marcus dees3
1university of padua, padua, italy
2eindhoven university of technology, eindhoven, the netherlands
3uitvoeringsinstituut werknemersverzekeringen (uwv), the netherlands
fm.d.leoni, w.m.p.v.d.aalst g@tue.nl,marcus.dees@uwv.nl
abstract. process discovery techniques make it possible to automatically derive
process models from event data. however, often one is not only interested in dis-
covering the control-ﬂow but also in answering questions like “what do the cases
that are late have in common?”, “what characterizes the workers that skip this
check activity?”, and “do people work faster if they have more work?”, etc. such
questions can be answered by combining process mining with classiﬁcation (e.g.,
decision tree analysis). several authors have proposed ad-hoc solutions for spe-
ciﬁc questions, e.g., there is work on predicting the remaining processing time
and recommending activities to minimize particular risks. however, as shown in
this paper, it is possible to unify these ideas and provide a general framework
for deriving and correlating process characteristics. first, we show how the de-
sired process characteristics can be derived and linked to events. then, we show
that we can derive the selected dependent characteristic from a set of indepen-
dent characteristics for a selected set of events. this can be done for any process
characteristic one can think of. the approach is highly generic and implemented
as plug-in for the prom framework. its applicability is demonstrated by using
it to answer to a wide range of questions put forward by the uwv (the dutch
employee insurance agency).
1 introduction
the interest in process mining is fueled by the rapid growth of event data available for
analysis. moreover, there is increasing pressure to make business process management
(bpm) more “evidence based”, i.e., process improvements and innovations are more
and more driven by facts. process mining often starts with process discovery , i.e., au-
tomatically learning process models based on raw event data. once there is a process
model (discovered or made by hand), the events can be replayed on the model to check
conformance and to uncover bottlenecks in the process. however, such analyses are
often only the starting point for providing initial insights. when discovering a bottle-
neck or frequent deviation, one would like to understand why it exists. this requires the
correlation of different process characteristics . these characteristics can be based on
the control-ﬂow (e.g., the next activity going to be performed), the data-ﬂow (e.g., the
amount of money involved), the time perspective (e.g., the activity duration or the re-
maining time to the end of the process), the organization perspective (e.g., the resource
?the work of dr. de leoni is supported by the eurostars - eureka project prompt (e!6696).fig. 1. the general framework proposed in this paper: based on an analysis use case the event log
is preprocessed and used as input for classiﬁcation. based on the analysis result, the use case can
be adapted to gather additional insights.
going to perform a particular activity), or, in case a normative process model exists, the
conformance perspective (e.g., the skipping of a mandatory activity).
the study of these characteristics and how they inﬂuence each other is of crucial im-
portance when an organization aims to improve and redesign its own processes. many
authors have proposed techniques to relate speciﬁc characteristics in an ad-hoc manner.
for example, several approaches have been proposed to predict the remaining process-
ing time of a case depending on characteristics of the partial trace executed [1–3]. other
approaches are only targeted to correlating certain predeﬁned characteristics to the pro-
cess outcome [4–6] or the violations of business rules [7].
these problems are speciﬁc instances of a more general problem, which is con-
cerned with relating any process or event characteristic to other characteristics asso-
ciated with single events or the entire process . this paper proposes a framework to
solve the more general correlation problem and provides a very powerful tool that uni-
ﬁes the ad-hoc approaches described in literature. this is achieved by providing (1)a
broad and extendable set of characteristics related to time, routing, ordering, resource
allocation, workload, and deviations, and (2)a generic framework where any character-
istic (dependent variable) can be explained in term of correlations with any set of other
characteristics (independent variables), for instance, the involvement of a particular re-
source or routing decision can be related to the elapsed time, but also the other way
around: the elapsed time can be related to resource behavior or routing.
figure 1 illustrates the framework proposed in this paper. starting point is an event
log. for each process instance (i.e., case) there is a trace, i.e., a sequence of events.events have different characteristics . mandatory characteristics are activity andtimes-
tamp . other standard characteristics are the resource used to perform the activity, trans-
actional information (start, complete, suspend, resume, etc.), and costs . however, any
other characteristics can be associated to an activity (e.g., the age of a patient or size of
an order). characteristics are attached to events as name-value pairs:
(name ofcharacteristic ;value ). event characteristics can be also concerned with the
context of the event, case, process, or organization. the process context is acknowl-
edged to be very important to ﬁnd correlations with process and event characteristics [8–
10].
for instance, it is possible to add case-related contextual information, such as the
remaining ﬂow time or the elapsed time since the process instance started. also prop-
erties of the resource executing the event (e.g., workload of the resource) can be added.
we can also add the next activity as a characteristic of an event. one can even add con-
formance checking results and external context such as weather information to events
as characteristics. the ultimate goal of our framework is to mine decision trees that ex-
plain the value of one characteristic, the dependent characteristic , in terms of the other
characteristics, the independent characteristics .
in addition to decision trees, many other machine-learning techniques exist and
some have already been applied in bpm, such as bayesian networks [11], case-based
reasoning [12] and markov models [3]. these are certainly valuable but they are only
able to make correlations for single instances of interest or to return signiﬁcant exam-
ples of relevant instances. conversely, we aim to aggregate knowledge extracted from
the event logs and return it as decision rules. association rules [8] could have been an
alternative, but decision trees have the advantage of clearly highlighting the character-
istics that are most discriminating. regression analysis [13] would be only applicable
to ﬁnd numerical correlations and, hence, it could not be employed if the dependent
characteristic is nominal or boolean.
the approach is fully supported by a new package that has been added to the open-
source process mining framework prom .4the evaluation of our approach is based on a
case study involving uwv , a dutch governmental institute in charge of supplying ben-
eﬁts. in particular, we have employed the approach to answer process-related questions
that were relevant for the institution. the results were extremely positive: we could
answer the uwv’s questions regarding the causes of observed problems (e.g., recla-
mations of customers). for some problems, we could show surprising root causes. for
other problems, we could only show that some suspected correlations were not present.
section 2 presents the framework and highlights that several well-studied problems
are speciﬁc instances of the more general problem considered in this paper. section 3
shows the application of our framework and implementation in the context of uwv .
finally, section 4 concludes the paper.
2 the framework
the main input of our framework is an event log.
deﬁnition 1 (events, traces and log). letcandube the universe of characteristics
and the universe of possible values respectively. an eventeis an assignment of values
4thefeatureprediction package, see http://www.promtools.org.to characteristics, i.e. e2c!u . in the remainder e=c!u is the universe of
events. a tracet2eis a sequence of events. let t=ebe the universe of traces.
anevent loglis a multi-set of traces, i.e. l2b(t)
for each characteristic c2c,type (c)u denotes the set of possible values. we use
a special value?for any characteristic cwhich an event eis not assigning a value to,
i.e.e(c) =?ifc62dom (e). typically, an event refers to an activity that is performed
within a certain case by a resource at a given timestamp. in our framework, these are
merely treated as any event characteristics: activity ,case ,resource ,timestamp , re-
spectively. the occurrence of an event, i.e. the execution of an activity, can assign new
values to any subset of characteristics.
our framework aims to support so-called analysis use cases .
deﬁnition 2 (analysis use case). ananalysis use case is a triple (cd;cr;f)consist-
ing of
–a dependent characteristic cr2cnc d,
–a setcdc of independent characteristics,
–an event-selection ﬁlter fe, which characterizes the events that are retained for
the analysis.
the output of an analysis use case is a decision tree. decision trees classify in-
stances (in our case events) by sorting them down in a tree from the root to some leaf
node. each non-leaf node speciﬁes a test of some attribute (in our case, an independent
characteristic) and each branch descending from that node corresponds to a range of
possible values for this attribute. each leaf node is associated to a value of a class at-
tribute (in our case, the dependent characteristic). a path from root to a leaf represents
a classiﬁcation rule. there exist many algorithms to build a decision tree starting from
a training set [13]. our framework is agnostic with respect to speciﬁc algorithms used
for decision-tree learning. in our implementation we rely on the c4.5 algorithm, which
can handle continuous attributes efﬁciently and is good at pruning the ﬁnal decision
tree [13]. however, any other classiﬁcation algorithm could have been used. in the re-
mainder, given a set of instances (i.e. events) i2 2(c!u ), a setcdc of independent
variables (i.e., the independent characteristics) and a dependent variable cr2cnc d,
the procedure to train a decision tree is denoted as generatetree (i;cd;cr).
algorithm 1 describes our approach to build a decision tree based on an event log
and an analysis use case. the input consists of an event log and an analysis use case.
at the end, seticontains all instances that are used to train the decision tree. this set
is populated with every event eof the log that is not ﬁltered out by the event-selection
ﬁlterf.
if the dependent characteristic cris deﬁned over a continuous domain, value e(cr)
is discretized before event eis added to the instance set i. decision trees do not support
continuous class variables. therefore, continuous characteristics need to be discretized
to be used as dependent. in the algorithm, the procedure of discretization is abstracted
as a function discretize (val;c;l;n )that, given a characteristic c, a valueval2type (c),
the set of values observed in an event log l, and a number nof discretization intervals,
returns a value over a discrete domain. literature provides several ways to discretizealgorithm 1: generate decision tree
input : event log l2b(t), an analysis use case (cd; cr; f), the number nof
discretization intervals.
result : decision tree
i ?
foreach t2ldo
foreach e2ldo
ife2fthen
iftype (cr)is continuous then
e(cr) discretize (e(cr); cr; l; n )
end
i i[f eg
end
end
end
generatetree (i;cd; cr)
dependent variables. while our approach can use any discretization technique, our im-
plementation provides two speciﬁc ones: equal-width binning andequal-frequency bin-
ning [14]. given a number nof intervals, the former divides the set of possible values
type (c)intonequal-width intervals, assigning a discrete value to each of them. contin-
uous values are transformed into discrete values according to the intervals they fall into.
theequal-frequency binning approach tries to transform values more evenly: intervals
are of different sizes, choosing them such that (roughly) the same number of observed
values falls into each one.
as mentioned before, for many analysis use cases we need dependent or indepen-
dent characteristics that are not readily available in the event log. similarly, using busi-
ness domain knowledge, an analyst may want to verify a reasonable hypothesis of the
existence of a correlation to a given set of independent characteristics, which may not
be explicitly available in the event log. however, values for many interesting charac-
teristics can easily be derived from the event data in the event log. in some cases we
will even derive characteristics from information sources outside the event log (weather
information, stock index, etc.).
we provide a powerful framework to manipulate event logs and obtain a new event
log that suits the speciﬁc analysis use case, e.g. events are enriched with additional
characteristics.
deﬁnition 3 (trace and log manipulation). lettbe the universe of traces and event
logs and letl2b(t)be an event log. a trace manipulation is a function l2t !t .
in the remainder, given a trace-manipulation function l, we also allow lto be applied
to an entire log l, thus returning a new log obtained by applying the trace-manipulation
function to all traces in l.
table 1 shows a taxonomy of trace manipulations, grouping them by the process per-
spective that they take into account. all manipulations shown have been implemented
in prom; the generality of the framework also makes it easy to add new manipulations.
due to space limitations, we can only discuss some of them:table 1. a taxonomy of trace manipulations currently available in the operationalization.
perspective trace manipulations
control-ﬂow number of executions of activity a, next activity in the trace, previous
activity in trace.
resource workload per resource, total workload.
time time elapsed since the start of the case, remaining time until the end of
case, activity duration.
data-ﬂow latest recorded value of characteristic cbefore current event e, latest
recorded value of characteristic cafter event e, case-level abstraction.
conformance trace fitness, number of not allowed executions of activity athus far
(moves on log in alignment), number of missing executions of activity a
thus far (moves on model in alignment), number of correct executions of
activity athus far (synchronous moves), satisfaction of formula fconsid-
ering the preﬁx trace until current event e.
– next activity in the trace. it augments each event with an extra attribute that
contains the name of the next activity in the trace (or ?for the last event)
– latest recorded value of characteristic cbefore current event e.it enriches
each eventewith the latest value assigned to characteristic cbeforeein the trace.
– latest recorded value of characteristic cafter current event e.it enriches
each eventewith the latest value assigned to characteristic cafterein the trace.
it differs from the manipulation latest recorded value of characteristic cbefore
current event ein that the value is taken after the execution of e. ifedoes not write
a value forc, the value before and after ecoincides.
– case-level abstraction. this replaces all the events the trace with two events,
thecase-start andcase-complete event. the case-start event is associated with the
same values of the characteristics as the ﬁrst event of the trace. the case-end event
is associated with the last recorded values for all characteristics. for both events,
the value of the activity characteristic is overwritten with value “case”.
– workload per resource. it associates each event ewith the work-load for the
resource that has triggered the event, i.e. the number of activities under execution
bye(resource ), at the time the event occurred.
– total workload. it associates events with the number of activities being executed
at the time the event occurred.
– activity duration. each (complete) event is associated with a (integer-typed) char-
acteristic that indicates the duration of completing the activity associated with the
event.
the last three characteristics in the list require an analysis of the entire log, i.e., the
scope is not limited to a single trace. this is the reason why trace-manipulation function
l(t)depends not just on trace tbut alsol.
indeed, the values to associate with each event can be derived by replaying the event
log and counting the number of activities being executed in each moment in time. it is
not necessary that the event log records the starting and completion of each activity.
although that would be preferred as the workload would be calculated exactly, we
have implemented algorithms that can estimate the workload by only using the activity
completion events. in our implementation, we estimate the start time of activities astable 2. fragment of a hospital’s event log with four traces. the gray columns have been added
after applying two of the trace manipulations in table 1: next activity in the trace and time
elapsed since the start of the case. nextactivityintrace andelapsedtime are the
names of the characteristics that are added as result of these manipulations.
case timestamp activity resource cost nextactivityintrace elapsedtime
1 1-12-2011:11.00 preoperative screening giuseppe 350 laparoscopic gastrectomy 0 days
1 2-12-2011:15.00 laparoscopic gastrectomy simon 500 nursing 1.16 days
1 2-12-2011:16.00 nursing clare 250 laparoscopic gastrectomy 1.20 days
1 3-12-2011:13.00 laparoscopic gastrectomy paul 500 nursing 2.08 days
1 3-12-2011:15.00 nursing andrew 250 first hospital admission 2.16 days
1 4-12-2011:9.00 first hospital admission victor 90? 3.92 days
2 7-12-2011:10.00 first hospital admission jane 90 laparoscopic gastrectomy 0 days
2 8-12-2011:13.00 laparoscopic gastrectomy giulia 500 nursing 1.08 days
2 9-12-2011:16.00 nursing paul 250? 2.16
3 6-12-2011:14.00 first hospital admission gianluca 90 preoperative screening 0 days
3 8-12-2011:13.00 preoperative screening robert 350 preoperative screening 1.96 days
3 10-12-2011:16.00 preoperative screening giuseppe 350 laparoscopic gastrectomy 4.08 days
3 13-12-2011:11.00 laparoscopic gastrectomy simon 500 first hospital admission 6.88 days
3 13-12-2011:16.00 first hospital admission jane 90? 7.02 days
4 7-12-2011:15.00 first hospital admission carol 90 preoperative screening 0 days
4 9-12-2011:7.00 preoperative screening susanne 350 laparoscopic gastrectomy 0.66 days
4 13-12-2011:11.00 laparoscopic gastrectomy simon 500 nursing 5.84 days
4 13-12-2011:13.00 nursing clare 250 nursing 5.92 days
4 13-12-2011:19.00 nursing vivianne 250? 6.16 days
table 3. the results after applying the case-level manipulation to the event log shown in table 2.
case timestamp activity resource cost nextactivityintrace elapsedtime
1 1-12-2011:11.00 case giuseppe 350 laparoscopic gastrectomy 0 days
1 4-12-2011:9.00 case victor 90? 3.92 days
2 7-12-2011:10.00 case jane 90 laparoscopic gastrectomy 0 days
2 9-12-2011:16.00 case paul 250? 2.16 days
3 6-12-2011:14.00 case gianluca 90 preoperative screening 0 days
3 13-12-2011:16.00 case jane 90? 7.02 days
4 7-12-2011:15.00 case carol 90 preoperative screening 0 days
4 13-12-2011:19.00 case vivianne 250? 6.16 days
proposed in [15]: assuming no waiting time, the start time of an activity is the latest
between the time of completion of the previous activity within the same process instance
and the time of completion of the previous activity by the same resource (possibly in a
different process instance).
tables 2 and 3 illustrate the application of some of the manipulation functions of
table 1 to a fragment of an event log. in general, when multiple trace-manipulation
functions are applied, the order of application may be important. table 3 shows the
result of the application of the case-level abstraction manipulation after applying next
activity in the trace andtime elapsed since the start of the case . if case-level abstrac-
tion was applied before the other two, the ﬁnal result would be different: characteristic
next activity in the trace would be given either value “case” or ?.
table 1 also illustrates a number of trace manipulations that require additional
sources/inputs, such as a process model, declarative or procedural, or a (temporal) log-
ical formula f:
– trace fitness. given a process model, it augments each event with a continuous
value between 0 and 1, denoting the level of the ﬁtness of the model and the trace towhich the event belongs. values 1 and 0 denote perfect and extremely poor ﬁtness,
respectively.
– number of not allowed executions of activity athus far, number of miss-
ing executions of activity athus far, and number of correct executions of
activityathus far. these manipulations augment each event with an integer
characteristic that denotes the number of “moves on logs” (occurs in reality but
disallowed according to the model), “moves on model” (should have occurred ac-
cording to the model but did not), and “synchronous moves” (model and reality
agree) respectively in the preﬁx until the current event.
– satisfaction of formula fconsidering the preﬁx trace until current event
e.it augments each event with a boolean value that states whether a given formula
fwas satisﬁed after the event occurred.
the third manipulation in the above list builds on the prom operationalization of the
technique described in [16]. here linear temporal logic (ltl) is used to specify f.
the others rely on the prom implementation of the techniques discussed in [17, 18],
which are concerned with ﬁnding an alignment of traces in the log with, respectively,
procedural and declarative process models.
tables 4 and 5 show how six examples of correlation problems can be formulated
as analysis use cases. in the tables, the original log denotes the log before any trace
manipulation. trace manipulations are applied in the exact order as they are enumerated
in the list. as the examples show, prediction problems are, in fact, correlation problems.
when a correlation is observed in the past, one can predict that the same correlation is
going to be observed for future process instances, as well.
for most of the problems shown in tables 4 and 5, research work has already been
conducted, yielding ad-hoc solutions. our framework attempts to solve the more general
problem, i.e., ﬁnding any type of correlation among arbitrary process characteristics at
any level (event, case, process, resource, etc.). by solving the more general problems,
we can support existing analyses but also many more.
some of the analysis use cases in tables 4 and 5 have been used as intermediate
results to solve other problems. for instance, ghattas et al. [4] uses the answer to prob-
lem #2 as information to drive how to redesign the process to improve the process’
outcomes. similarly, the solutions of problems #1 and #4 are used in [7] and [6], re-
spectively, as input to provide a run-time support to suggest the next activities to work
on.
3 evaluation with a real-life case study
this section illustrates how our framework can be used to help uwv . uwv (employee
insurance agency) is an autonomous administrative authority to implement employee
insurances and provide labor market and data services. one of the core tasks of uwv is
ensuring that beneﬁts are provided quickly and correctly when a dutch resident, here-
after customer, cannot immediately ﬁnd a new job after ceasing the previous. uwv is
facing various undesired process executions and is interested in discovering the root-
causes of a variety of problems identiﬁed by uwv’s management. in these analysis use
cases, we are looking at the process to deal with requests of unemployment beneﬁts.
an instance of this process starts when a customer applies. subsequently, checks aretable 4. five example analysis use cases illustrating the generic nature of the framework pre-
sented.
problem #1: run-time predictions of violations of formula f.
description: the aim is to predict, given the current status of the process instances, the next activities to work on to maximize
the chances of achieving certain business goals expressed as formula f. in [7], an ad-hoc solution is proposed for this problem
where formulas are expressed in ltl.
dependent characteristic: satisfaction of formula f considering the preﬁx trace until current event.
independent characteristics: for each characteristic cof the original event log, the latest recorded value of cbefore the
current event; activity name; the resource name.
event filter: every event is retained.
trace manipulation: satisfaction of formula f considering the preﬁx trace until current event; for each characteristic c
of the original event log, the latest recorded value of cbefore the current event.
problem #2: prediction of the outcomes of the executions of process instances.
description: the aim is to predict the outcome of a case. predictions are computed using a set of complete process instances
that are recorded in the event log. the last event of each trace is associated with a characteristic outcome to which it is
assigned a numeric value that indicates the quality of the outcome. the prediction is done at case level: one instance for
learning is created for each trace in the event log. the outcome of the entire trace is predicted rather than of single activities.
in [4], an ad-hoc solution is proposed for this problem.
dependent characteristic: outcome
independent characteristics: each characteristic cof the original event log, except outcome .
event filter: every case-complete event is retained.
trace manipulation: case-level abstraction.
problem #3: mining of decisions that determine the activity to execute after the execution of an activity a.
description: the purpose is to predict the conditions that discriminate which activity is executed after a given activity a.
predictions are computed using a set of complete process instances that are recorded in the event log. in particular, only the
events referring to activity aare used. in [19], an ad-hoc solution is proposed for this problem.
dependent characteristic: next activity in the trace.
independent characteristics: for each characteristic cof the original event log, the latest recorded value of cafter the
current event.
event filter: every event efor activity ais retained, i.e. every event esuch that e(activity ) =a.
trace manipulation: for each characteristic cof the original event log, the latest recorded value of cafter the current
event; next activity in the trace.
problem #4: prediction of faults during business process executions.
description: the purpose is to predict whether or not a running instance is going to complete with a fault. if completed with
a fault, its magnitude is also predicted. predictions are computed using a set of complete process instances that are recorded
in the event log. if a fault has occurred for a given completed instance, the ﬁrst event of the corresponding trace is associated
with a characteristic fault to which a value is assigned that indicates the magnitude. if no fault is occurred, the ﬁrst event is
associated with a characteristic fault to which a value 0 is assigned. in [6], an ad-hoc solution is proposed for this problem.
dependent characteristic: the value of fault after the current event.
independent characteristics: for each characteristic cof the original event log besides fault , the latest recorded value
ofcafter the current event; for each activity a, the number of executions of a; elapsed time since the start of the case;
activity name; resource name.
event filter: every event is retained.
trace manipulation: for each characteristic cof the original event log, the latest recorded value of cafter the current
event; for each activity a, the number of executions of activity a; the elapsed time since the start of the case.
problem #5: prediction of the executor of a certain activity a.
description: the purpose is to mine the conditions that determine which resource is going to work on a given activity aat
a certain moment during the process execution.
dependent characteristic: resource name
independent characteristics: potentially, any characteristic of the original event log as well as any characteristic with
which events can be augmented. every characteristic can be relevant for this prediction.
event filter: every event for activity ais retained, i.e. every event esuch that e(activity ) =a.
trace manipulation: depending on the scenario, any manipulation but case-level abstraction can be relevant.table 5. an additional analysis use case illustrating the generic nature of the framework pre-
sented.
problem #6: prediction of the remaining time to the end of process instances.
description: the purpose is to predict the remaining time until the end of process instances on the basis of the current state,
which consists of the number of executions of each process activity and the current values of process variables. it is similar
to [2] when a multi-set abstraction is used, with, additionally, the current values of process variables are also taken into
account.
dependent characteristic: remaining time until the end of the case.
independent characteristics: for each process activity a, the number of executions of activity a; for each characteristic c
of the original event log, the latest recorded value of cafter the current event.
event filter: every event is retained.
trace manipulation: for each characteristic cof the original event log, the latest recorded value of cafter the current
event; for each process activity a, the number of executions of activity a; the remaining time until the end of the case.
performed to verify the entitlement conditions. if the checks are positive, the instance
is being executed for the entire period in which the customer receives the monetary
beneﬁts, which are paid in monthly installments. entitled customers receive as many
monthly installments as the number of years for which they were working. therefore,
an instance can potentially be executed for more than one year. during the entire period,
customers must comply with certain duties, otherwise a customer is sanctioned and a
reclamation is opened. when a reclamation occurs, this directly impacts the customer,
who will receive lower beneﬁts than expected or has to return part of the beneﬁts. it also
has negative impact from uwv’s viewpoint, as this tends to consume lots of resources
and time. therefore, uwv is interested to know the root causes of opening reclama-
tions to reduce their number. if the root causes are known, uwv can predict when a
reclamation is likely going to be opened and, hence, it can enact appropriate actions
to prevent it beforehand. in order to discover the root causes, uwv formulated four
questions:
q1are customer characteristics linked to the occurrence of reclamations? and if so,
which characteristics are most prominent?
q2are characteristics concerned with how process instances are executed linked to
the occurrence of reclamations? and if any, which characteristics matter most?
q3if the prescribed process ﬂow is not followed, will this inﬂuence whether or not a
reclamation occurs?
q4when an instance of the unemployment-beneﬁt payment process is being handled,
is there any characteristic that may trigger whether a reclamation is going to occur?
table 6 enumerates some of the analysis use cases that have been performed to answer
the questions above. the analyses have been performed using a uwv’s event log con-
taining 2232 process instances and 77551 events. since the original event log contains
more than 100 characteristics, it is not possible to punctually detail single characteristics
that have been included or excluded from the analyses. the remainder of this section
details how the analysis use cases have been used to answer the four questions above.
question q1. to answer this question, we performed the use case u1in table 6. the
results of performing this analysis are represented through the decision tree in figure 2.
in particular, the screenshot refers to our implementation in prom. the implementationtable 6. some of the analysis use cases analyzed to provide an answer to the correlation problems
raised by uwv .
u1. are customer characteristics linked to the occurrence of reclamations?
description: we aim to correlate the number of executions of activity reclamation to the customer characteristics. we are
interested in all decision-tree paths that lead to a number of executions of activity reclamation greater than 0.
dependent characteristic: number of executions of activity reclamation .
independent characteristics: all characteristics of the events in the original log that refer to customers properties.
event filter: every case-complete event is retained.
trace manipulation: number of executions of activity reclamation ; case-level abstraction
u2. are characteristics concerned with how process instances are executed linked to the occurrence of reclamations?
– iteration 1
description: we aim to correlate the number of execution of activity reclamation to process characteristics, the number
of executions of all activities and the elapsed time, i.e., the time to complete a process instance. we are interested in all
decision-tree paths that lead to a number of executions of activity reclamation greater than 0.
dependent characteristic: number of executions of activity reclamation .
independent characteristics: for each process activity abesides reclamation , number of executions of a; time elapsed
since the start of the case; all characteristics of the events of the original log that refer to the outcomes of process instances;
timestamp.
event filter: every case-complete event is retained.
trace manipulation: for each process activity a, number of executions of a; time elapsed since the start of the case;
case-level abstraction.
u3. are characteristics concerned with how process instances are executed linked to the occurrence of reclamations?
– iteration 9
description: we aim to correlate the number of execution of activity reclamation to process characteristics and the number
of executions of most of activities. we are interested in all decision-tree paths that lead to a number of executions of activity
reclamation greater than 0.
dependent characteristic: number of executions of activity reclamation .
independent characteristics: for each process activity abesides reclamation andcall contact door hh deskundige ,
number of executions of a; all characteristics of the events in the original log that refer to the outcomes of process instances,
besides soort vaststelling and 49 more.
event filter: every case-complete event is retained.
trace manipulation: for each process activity a, number of executions of a; case-level abstraction.
u4. if the prescribed process ﬂow is not followed, will this inﬂuence whether or not a reclamation occurs?
description: we aim to correlate the number of execution of activity reclamation to process characteristics, the number
of executions of most of activities as well as to the deviations wrt. the prescribed process model. we are interested in all
decision-tree paths that lead to a number of executions of activity reclamation greater than 0.
dependent characteristic: number of executions of activity reclamation .
independent characteristics: trace fitness; for each process activity abesides reclamation , the number of not-allowed
executions of a, the number of missing executions of aand the number of correct executions of a; number of executions
of activity reclamation .
event filter: every event is retained.
trace manipulation: trace fitness; for each process activity a, the number of not-allowed executions of athus far, the
number of missing executions of athus far and the number of correct executions of athus far; number of executions
of activity reclamation .
u5. when an instance of the unemployment-beneﬁt payment process is handled, is there any characteristic that may
trigger whether a reclamation is going to occur?
description: we aim to predict when a reclamation is going to follow any process activity. for this purpose, we predict
which activity is going to follow any process activity and, then, we focus on those paths leading to predicting reclamation as
next activity in trace.
dependent characteristic: next activity in trace.
independent characteristics: for each process activity abesides call contact door hh deskundige , the number of exe-
cutions of a; all characteristics of the events in the original log that refer to the outcomes of process instances
event filter: every event is retained.
trace manipulation: for each process activity a, number of executions of a; next activity in the trace.fig. 2. a screenshot of the framework’s implementation in prom that shows the decision tree
used to answer question q1.
allows the end user to conﬁgure a number of parameters, such as the level of decision-
tree pruning, the minimum number of instances per leaf or the discretization method.
in this way, the user can try several conﬁgurations, thus, e.g., balancing between over-
and under-ﬁtting. in particular, the screenshot refers to the conﬁguration in which the
minimum number of instances per leaf is set to 100 and the number of executions of
reclamation is discretized as two values: (0.0,0.0) and(0.0,5.0) . when the
number of executions of reclamation is 0, this is shown as (0.0,0.0) ; conversely,
any value greater than 0 for the number of executions is discretized as (0.0,5.0) .
the use cases u2,u3,u4also use the number of executions of reclamation as depen-
dent characteristic. we used the same discretization for those use cases, as well.
looking at the tree in figure 2, some business rules seem to be derived. for in-
stance, if the customer is a recurrent customer ( wwindherleving > 0), a
reclamation occurs, i.e. the leaf is labelled as (0.0,5.0) .5if this correlation really
held, it would be quite unexpected: recurrent customers tend to disregard their duties.
nonetheless, the label is also annotated with 318.0/126.0 , which indicates that a
reclamation is not opened for 126 out of the 318 recurrent customers (39%). though
not very strong, a correlation seems to exist between being recurrent customers and
incurring in reclamations. further investigation is certainly needed; perhaps, additional
customer’s characteristics might be needed to better discriminate but they are currently
not present in the event log used for analysis.
question q2. firstly, we performed the analysis use case u2. we obtained a decision
tree that showed correlations between the number of reclamations and certain charac-
5customers are recurrent if they apply for monetary beneﬁts multiple times because they ﬁnd
multiple temporary jobs and, hence, they become unemployed multiple times.fig. 3. the decision tree used to answer question q2.
teristics that are judged as trivial by uwv . for instance, there was a correlation of
the number of reclamations with (1.)the method of payment of the beneﬁt install-
ments to customers and (2.)the number of executions of activity call contact door
hh deskundige , which is executed to push customers to perform their duties. being
these correlations considered trivial by uwv , the respective characteristics should be
left out of the analysis. so, we excluded these characteristics from the set of indepen-
dent characteristics and repeated the analysis. we reﬁned the use case analysis multiple
times by removing more and more independent characteristics. after 9 iterations, we
performed an analysis use case that led to satisfactory results. this use case is denoted
asu3in table 6. the results of performing this analysis are represented through the
decision tree in figure 3, which classiﬁes 77% of the instances correctly.
this tree illustrates interesting correlation rules. reclamations are usually not opened
in those process instances in which (1.)uwv never informs (or has to inform) a cus-
tomer about changes in his/her beneﬁts (the number of executions of brief uitkering
gewijzigd ww is 0), (2.)uwv’s employees do not hand over work to each other (the
number of executions of brief interne memo is 0) and (3.)either of the following con-
ditions holds:
–no letter is sent to the customers (the number of executions of brief van uwv aan
klant is 0);
–at least one letter is sent but uwv never calls the customer (the number of exe-
cutions of call telefoonnotitie is equal to 0) and, also, the number of months for
which the customer is entitled to receive a beneﬁt is more than 12.
from this analysis, we can conclude that uwv should reduce the hand-over of work.
moreover, it should pay more attention to customers when their situation changes, e.g.
they ﬁnd a new job. when customers ﬁnd a job, they start having a monetary income,
again. the problem seems to be related to the customers who often do not provide
information about the new job on time. in these cases, their beneﬁts are not stopped
or reduced when they should. consequently, a reclamation needs to be opened because
these customers need to return the amount that was overpaid to them. conversely, if a
customer has already received beneﬁts for 12 months, it is unlikely that a reclamationfig. 4. the decision tree used to answer question q3.
is going to occur. this can be motivated quite clearly and it is again related to the
presence of changes of the customer’s job situation. if beneﬁts are received for more
than 12 months, the customer has not found a job in latest 12 months and, thus, it is
probably going to be hard for him to ﬁnd one. so, uwv does not have to pay much
attention to customers entitled to long beneﬁts when they aim to limit the number of
reclamations.
question q3. the answer to this question is given by performing the analysis use case
u4. this use case relies on a process model that describes the normal execution ﬂow.
this model was designed by hand, using knowledge of the uwv domain. the results of
performing u4is represented by the decision tree in figure 4. trace fitness is measured
as a value between 0 and 1 (see [17]). values 1 and 0, respectively, denote perfect and
poor ﬁtness between the expected behaviour, represented by the process model, and
the actual behaviour, which is recorded in the event log. analyzing the decision tree, a
correlation is clear between trace ﬁtness and the number of reclamations. 610 out of the
826 process executions (nearly 70%) with ﬁtness higher than 0.89 do not comprise any
reclamation. therefore, it seems crucial for uwv to make the best to follow the normal
ﬂow, although this is often made difﬁcult by a hasty behavior of customers. this rule
seems quite reliable and is also conﬁrmed by the fact that 70% of the executions with
ﬁtness lower than 0.83 incur in reclamations.
the decision tree contains an intermediate node labelled mreal for ikf van klant
aan uwv . this characteristic refers to the number of missing executions of activity
ikf van klant aan uwv . this activity is executed in a process instance every time
that uwv receives a declaration form from the customer. uwv requests customers
to send a form every month to declare whether or not their condition has changed in
the last month, e.g. they found a job. the decision tree states that, when an execution
deviates moderately, i.e. the ﬁtness is roughly between 0:83and 0:89, a reclamation
is still unlikely being opened if the customer forgets to send the declaration form for
less than 3 months (not necessarily in a row). please note that, since traces are quite
long, considering how ﬁtness is computed, a difference of 0:06in ﬁtness can be quite
remarkable. this rule is quite reliable since it holds in 79% of cases. therefore, it isworthwhile for uwv to enact appropriate actions (such as calling by phone) to increase
the chances that customers send the declaration form every month.
question q4. the answer to this question is given by performing the analysis use
case u5. we built a decision tree for this use case by limiting the minimal number of
instances per leaf to 50. we are interested in tree paths that lead to reclamation as
next activity in the trace. unfortunately, the f-measure for reclamation was very low
(0.349), which indicates that it is not possible to reliably estimate if a reclamation is
going to occur at a certain moment of the execution of a process instance . we also
tried to reduce the limit of the minimum number of instances per leaf. unfortunately,
the resulting decision tree was not valuable since it overﬁtted the instance sets: the
majority of the leaves were associated to less than 1% of the total number of instances.
conversely, the decision tree with 50 as minimum number of instance per leaf could be
useful to predict when a payment is sent out to a customer: the f score for the payment
activity is nearly 0.735. unfortunately, ﬁnding this correlation does not answer question
q4.
4 conclusion
process mining is not just about discovering the control-ﬂow or diagnosing deviations.
it is crucial that certain phenomena can be explained, e.g., “why are these cases delayed
at this point?”, “why do these deviations take place?”, “what kind of cases are more
costly due to following this undesirable route?”, and “why is the distribution of work
so unbalanced”. although numerous analysis approaches have been proposed for spe-
ciﬁc questions, a generic framework for correlating business process characteristics was
missing. in this paper, we presented such a framework and its implementation in prom.
by deﬁning an analysis use case composed of three elements (one dependent charac-
teristic, multiple independent characteristics and a ﬁlter), we can create a classiﬁcation
problem. the resulting decision tree aims to describe the dependent characteristic in
terms of the independent characteristics. the approach has been evaluated using a case
study within the uwv .
future work aims at making a more extensive taxonomy of analysis use cases. in
this paper only a few examples were mentioned. moreover, we would like to support the
user in selecting the right use case using a questionnaire-based approach. this can be
done by building on the current framework and implementation. regarding improving
the correlation accuracy, we also plan to investigate random decision forests, where
several decision trees are built in multiple steps. we also acknowledge the limitations
of our framework when the dependent characteristic is numerical. the results are not
very “stable”: a small change in how the characteristic is discretized may have large
repercussions on the resulting decision tree. we also plan to investigate solutions to
overcome this problem.
references
1. folino, f., guarascio, m., pontieri, l.: discovering context-aware models for predicting
business process performances. in: on the move to meaningful internet systems: otm
2012. v olume 7565 of lncs. springer berlin heidelberg (2012) 287–3042. van der aalst, w.m.p., schonenberg, m.h., song, m.: time prediction based on process
mining. information systems 36(2) (2011) 450–475
3. lakshmanan, g., shamsi, d., doganata, y ., unuvar, m., khalaf, r.: a markov prediction
model for data-driven semi-structured business processes. knowledge and information sys-
tems (2013) 1–30
4. ghattas, j., soffer, p., peleg, m.: improving business process decision making based on past
experience. decision support systems 59(2014) 93 – 107
5. kim, a., obregon, j., jung, j.y .: constructing decision trees from process logs for performer
recommendation. in: proceedings of 2013 business process management workshops. v ol-
ume 171 of lnbip., springer (2014) 224–236
6. conforti, r., de leoni, m., la rosa, m., van der aalst, w.m.p.: supporting risk-informed de-
cisions during business process execution. in: proceedings of the 25th international confer-
ence on advanced information systems engineering (caise’13). v olume 7908 of lncs.,
springer-verlag (2013) 116–132
7. maggi, f.m., francescomarino, c.d., dumas, m., ghidini, c.: predictive monitoring of
business processes. in: proceedings of the 26th international conference on advanced in-
formation systems engineering (caise 2014). v olume 8484 of lncs. (2014) 457–472
8. dohmen, a., moormann, j.: identifying drivers of inefﬁciency in business processes: a
dea and data mining perspective. in: enterprise, business-process and information sys-
tems modeling. v olume 50 of lnbip. springer berlin heidelberg (2010) 120–132
9. zeng, l., lingenfelder, c., lei, h., chang, h.: event-driven quality of service prediction.
in: proceedings of the 8th international conference of service-oriented computing (icsoc
2008). v olume 5364 of lncs. springer berlin heidelberg (2008) 147–161
10. van der aalst, w.m.p., dustdar, s.: process mining put into context. ieee internet comput-
ing16(1) (2012) 82–86
11. sutrisnowati, r.a., bae, h., park, j., ha, b.h.: learning bayesian network from event
logs using mutual information test. in: proceedings of the 6th international conference
on service-oriented computing and applications (soca). (2013) 356–360
12. aamodt, a., plaza, e.: case-based reasoning: foundational issues, methodological varia-
tions, and system approaches. ai communication 7(1) (1994) 39–59
13. mitchell, t.m.: machine learning. 1 edn. mcgraw-hill, inc., new york, ny , usa (1997)
14. dougherty, j., kohavi, r., sahami, m.: supervised and unsupervised discretization of contin-
uous features. in: proceedings of the twelfth international conference on machine learning
(icml’95), morgan kaufmann (1995) 194–202
15. nakatumba, j.: resource-aware business process management: analysis and support. phd
thesis, eindhoven university of technology (2014) isbn: 978-90-386-3472-2.
16. van der aalst, w.m.p., beer, h.t., van dongen, b.f.: process mining and veriﬁcation of
properties: an approach based on temporal logic. in: conference on the move to meaningful
internet systems 2005: coopis, doa, and odbase. v olume 3760 of lncs., springer
berlin heidelberg (2005) 130–147
17. de leoni, m., van der aalst, w.m.p.: aligning event logs and process models for multi-
perspective conformance checking: an approach based on integer linear programming.
in: proceedings of the 11th international conference on business process management
(bpm’13). v olume 8094 of lncs., springer-verlag (2013) 113–129
18. de leoni, m., maggi, f.m., van der aalst, w.m.p.: an alignment-based framework to check
the conformance of declarative process models and to preprocess event-log data. information
systems (2014) to appear. doi: 10.1016/j.is.2013.12.005.
19. rozinat, a., van der aalst, w.m.p.: decision mining in prom. in: proceedings of the
4th international conference on business process management (bpm’06). lncs, springer-
verlag (2006) 420–425