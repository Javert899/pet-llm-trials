conformance checking in healthcare based on
partially ordered event data
xixi lu, ronny s. mans, dirk fahland and wil m.p. van der aalst
department of mathematics and computer science
eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
abstract —there is a continuous pressure to make healthcare
processes more efﬁcient and effective without sacriﬁcing quality.
conformance checking can be used to improve processes by
analyzing event data and directly relating observed behavior and
modeled behavior. conformance checking provides diagnostics
that go far beyond measuring traditional key performance
indicators. however, current conformance checking techniques
focus on a rather simplistic setting where executions of process
instances are sequential and homogeneous whereas healthcare
processes are known to be dynamic, complex, and ad-hoc. in
healthcare process instances of patients often follow a unique path
through the process with one-of-a-kind deviations. moreover,
timestamps are often rather coarse (the date is known, but not
the time) resulting in an unreliable ordering of events. as current
techniques are unable to handle concurrent events, and the
obtained sequential alignments are unable to provide structural
information about deviations, the diagnostics provided are often
insufﬁcient and misleading. this paper presents a novel approach
using partially ordered traces and partially ordered alignments
which aims to incorporate unreliability and concurrency in the
input while providing diagnostics about deviations that take
causalities into account. the approach has been implemented in
prom and was evaluated using event data from a dutch hospital.
i. i ntroduction
there is a tremendous pressure to improve healthcare pro-
cess quality, efﬁciency and effectiveness [1], [2]. as part
of this undertaking, processes need to be optimized. a way
to improve processes is to describe processes in terms of
models and investigate their run-time execution using these
models. typically the models only provide an idealized view
on how healthcare processes are really executed, i.e, only
frequent or idealized scenarios are modeled whereas in reality
many more occur. therefore, various conformance checking
techniques were proposed to show diagnostic information
about deviations observed in real executions with respect to
a given process model [3]. moreover, insights into relations
between a model and observed behavior obtained using con-
formance checking techniques can be used to enable auditing,
compliance analysis, performance analysis and process model
enhancements [4]–[7].
current conformance checking techniques focus more on
static environments, such as business processes, where process
instances often follow a well-deﬁned workﬂow. the executions
of these process instances are well recorded and have similar
conforming and deviating behaviors. in contrast, in healthcare
processes are known to be ﬂexible, complex, and ad-hoc [8].as a result, workﬂow models are rather considered as guide-
lines, i.e. it may be well acceptable to deviate from parts of
the model. this ﬂexibility leads to a large number of cases
deviating from the model. moreover, a case (e.g. patient) often
follows a unique path through the process and may have very
speciﬁc deviations (e.g. an examination is done twice on a
day) which may require the case to be inspected individually.
from the aforementioned healthcare process characteristics
it can be concluded that current conformance techniques are
unable to deal with cases in ﬂexible and dynamic environ-
ments. more speciﬁcally, there are two main limitations: (1)
using sequential traces as inputs is too rigid and unable to
describe concurrent events (e.g. events happened on the same
day), and (2) the diagnostic information obtained in sequential
alignments gives insufﬁcient and misleading insights into the
nature of deviations. both limitations will be explained in more
detail below.
the ﬁrst limitation is that conformance checking techniques
currently use sequential traces as input which heavily rely
on the total ordering of events in the traces. in healthcare,
the timestamps of events are often too coarse, incorrect, or
recorded at a different level of granularity. this issue may lead
to an unreliable or incorrect ordering of events in a recorded
trace. figure 1 shows a subset of events of a case found in the
case study presented in this paper, which illustrates nicely that
timestamps are recorded at different levels of granularity. the
timestamp of event preoperative assessment (p) (i.e.pane in
figure 1) has both a date and a time whereas the timestamps
of other events (e.g. meeting surgeon (v m)(vervolgconsult
algemeen - hee )) reveal only date information. according
to the documented model used in the case study (shown in
figure 7 and discussed in section iv), ﬁrst event pand then
event vmshould happen whereas the two events are now
ordered incorrectly due to the coarse timestamps. using a
non-trustworthy total ordering of the events for computing
alignments may result in classifying abnormal behavior as con-
forming and normal behavior as deviating. in addition, using
sequential traces it is not possible to explicitly describe set of
events as concurrent. for example, none of the conformance
checking techniques use the information that the mri and the
x-ray recorded on the same day can happen in any order.
the other main limitation is that current conformance
approaches are often limited to the provision of purely se-
quential alignments. as a result the moves are totally orderedfig. 1: timestamps of events (labeled with activities
names in dutch) recorded at different levels of granu-
larity.
without explicit dependencies between moves nor their relation
to the model. this limitation makes it difﬁcult to inspect
an individual alignment while relating the alignment to the
process model. moreover, the diagnostics may point out cases
as deviating that are not (false positives) or miss important
deviations (false negatives).
to overcome the aforementioned limitations, we propose to
usepartially ordered events rather than totally ordered events.
moreover, we want to compute partially ordered alignments
rather than totally ordered alignments. using a partial order
over events, we are able to express causal dependencies,
uncertainty, and concurrency in a better and more explicit way ,
which provides the ﬂexibility to deal with coarse timestamps
and unreliable ordering of events. by computing partially or-
dered alignments, we can also provide diagnostic information
about dependencies deﬁned in the model in comparison to
dependencies found in the log. this additional information
helps us to pinpoint the deviation found both in the model
and in the log much more precisely.
in this paper, we formally deﬁne partially ordered traces
and partially ordered alignments . moreover, we discuss our
approach to compute partially ordered traces using timestamps
and to compute partially ordered alignments using partially
ordered traces. finally, we discuss the case study which we
conducted to evaluate our approach.
the remainder of this paper is structured as follows. sec-
tion ii recalls basic concepts related to logs and models. in
section iii, we formally deﬁne the partially ordered traces
and alignments and illustrate our partially ordered alignment
approach. section iv presents the result of case study and
discusses the insights we obtained. related work is discussed
in section v. section vi concludes the paper.
ii. p reliminaries
in this section, we recall preliminaries related to logs and
models. in addition, we introduce a running example.
a. running example
figure 2 shows a simpliﬁed healthcare process in a hospital.
the process starts with a patient visiting the outpatient clinic
(v). after the visit, both a ct scan ( c) and an x-ray scan
(x) are performed in parallel (i.e., in any order or at the same
time). based on the result of both scans, a treatment plan for
the patient is proposed ( t). the patient is then either having
4 p1 
x c 
t v o 
l t8 t5 
h p3 p2 
p5 p4 
p6 p7 
p8 p9 
p10 p11 
visit  
outpatient  
clinic  ct scan  
x-ray treatment  
plan  
 surgery  
lab test  
home treatment  
x c 
t v o 
l t8 t5 
𝑒1𝑅 𝑒2𝑅 
𝑒3𝑅 𝑒4𝑅 𝑒5𝑅 𝑒6𝑅 
𝑒7𝑅 𝑒8𝑅 
x c 
t v 
𝑒9𝑅 𝑒10𝑅 
𝑒11𝑅 𝑒12𝑅 h 
𝑒13𝑅 𝑝𝑖=𝑅1 
𝑝𝑖=𝑅2 fig. 2: a simpliﬁed healthcare process: each visible
transition (i.e. an activity) is denoted by a blue rectangle;
an invisible transition is denoted by a gray rectangle;
places are denoted by circles; [p1]is the initial marking;
[p11]is the ﬁnal marking.
a surgery ( o) or sent home ( h). in parallel to the surgery, a
lab test is conducted ( l).
b. behavior
both event logs and process models serve as the starting
point for process conformance checking. a process model de-
scribes the life-cycle of cases of a particular type (e.g. patient
treatment) as a collection of possible behaviors . in contrast,
an event log can be seen as a speciﬁc observed behavior
consisting of recorded events. each case going through the
process is a process instance of the process resulting in a
trace of events in the event log.
deﬁnition 1 (universes). in the remainder we assume the
following universes of names, identiﬁers, and values: act
is the set of all possible activity names; attr is the set of
all possible attribute names; v al is the set of all possible
attribute values; piis the set of all possible process instance
identiﬁers; eiis the set of all possible event identiﬁers.
process instances and events are represented by unique
identiﬁers. this formalization allows us to refer to a speciﬁc
event or process instance. this way two events with the same
properties and two behaviorally equivalent process instances
can be distinguished.
deﬁnition 2 (partial orders). apartial order over a set e is
a binary relationee which is (1) irreﬂexive, i.e. x x,
(2) antisymmetric, i.e. x y implies yx and (3) transitive,
i.e. if xy and yz, then xz.
deﬁnition 3 (behavior). b= (e; act; attr; pi;)is abehav-
iorif and only if:
eeiis a set of events,
act2e!act maps events onto activities,
attr2e!(attr6!v al)maps events onto a partial
function assigning values to some attributes,1
pi2e!pimaps events onto process instances, and
 ee is a set of dependencies between events and
is a partial order on events.
bh is the set of all behaviors.
1f2x6!yis a partial function with domain dom (f)x.5  v e2 
 c e3  t 
e7 
 x e4  c e1  v e5  t e8  x e6  o e9 
 h e10 
t1 t2  t3 t4 t5 timeline  𝑝𝑖=𝑝1 
𝑝𝑖=𝑝2 fig. 3: a log which is
a behavior consisting of
events (triangles) related
to two process instances
p1andp2.
4 p1 
x c 
t v o 
l t8 t5 
h p3 p2 
p5 p4 
p6 p7 
p8 p9 
p10 p11 
visit  
outpatient  
clinic  ct scan  
x-ray treatment  
plan  
 surgery  
lab test  
home treatment  
x c 
t v o 
l t8 t5 
𝑒1𝑅 𝑒2𝑅 
𝑒3𝑅 𝑒4𝑅 𝑒5𝑅 𝑒6𝑅 
𝑒7𝑅 𝑒8𝑅 
x c 
t v 
𝑒9𝑅 𝑒10𝑅 
𝑒11𝑅 𝑒12𝑅 h 
𝑒13𝑅 𝑝𝑖=𝑝1 
𝑝𝑖=𝑝2 fig. 4: a run rof
a model mod involves
two process instances p1
andp2(rectangles denote
events in the run).
given an behavior b= ( e; act; attr; pi;)and event
e2e:act(e)is the activity corresponding to e,pi(e)
is the process instance corresponding to e,attr(e)deﬁnes
a mapping from selected attributes onto attribute values.
dom(attr(e))is the set of attributes having a value in e.
suppose time2dom(attr(e)), then attr(e)(time)is the
value of the time attribute for event e. figure 32exempliﬁes
a behavior b= (e; act; attr; pi;)comprised of 10 events
which are involved in two process instances p1andp2:
the set eof events isfe1;;e10g;
act(e1) =c,act(e10) =h, etc.;
for1i4,attr(ei)(time) = t1,attr(e5)(time) = t2,
e.g., if t2=“2014-05-30 11:00”, attr(e5)(date) =“2014-
05-30”, etc.;
fori2f2;3;4;7;10g,pi(ei) =p2, etc.;
e1e5,e2e7,e2e5,e2e6, etc.;
is a partial order.
for deﬁning behavior, we assume a partial order on events.
xyindicates that ydepends on the execution of x. note that
a total order is by deﬁnition also a partial order.
deﬁnition 4 (event logs, runs and models). l is an event
logif l2bh, i.e., l is a behavior. mod is a model if
modbh andmod6=?, i.e., a model is a non-empty set
of behaviors. r is a run of model mod if r2mod, i.e. a run
is a behavior allowed by some model.
both events logs and runs of a process model can be
described as behaviors (e.g., figure 3 also shows a log). a
process model can have an inﬁnite set of runs (i.e. potential
behaviors). if a run of a model is correctly recorded, the
run results in a behaviorally equivalent event log. a labeled
marked petri net [9] can be deﬁned as a model mod and have a
set of runs. figure 4 illustrates one run r= (e; act; attr; pi;
)of the petri net model shown in figure 2. the run r
involves two process instances p1andp2. figure 4 shows that
e=fer
1;;er
13g,act(er
1) = v,er
1er
2,pi(e1) = p1, etc.
note that by the deﬁnition of a behavior, figure 4 can also be
perceived as two runs p1andp2.
2for clarity figure 3 does not show the transitive closure of all depen-
dencies. in general, any directed acyclic graph deﬁnes a partial order. for
visualization we will often just show the transitive reduction, i.e., the minimal
set of arcs whose transitive closure deﬁnes a partial.iii. p artially ordered traces and alignments
next, we formally deﬁne partially ordered traces and align-
ments, followed by our approach to compute them.
a. deﬁnitions
classical process mining often assumes a total order of
events. we generalize the key notions to partial orders.
deﬁnition 5 (p-trace). c= (ec; actc; attrc; pic;c)is
a partially ordered trace (p-trace) if and only if (1) c is a
behavior (i.e., c2bh) and (2)8e1;e22ecpic(e1) =pic(e2),
i.e. all events in c belong to the same process instance.
figure 3 exempliﬁes two p-traces p1andp2if we neglect
the dependencies between the events of different process
instances.
deﬁnition 6 (concurrency). let c = (ec; actc; attrc; pic;
c)be a p-trace, two events e 1;e22ecareconcurrent to
each other, i.e. e 1jje2, if and only if e 1ce2and e 2ce1.
an alignment relates observed behavior (e.g. a trace) to
modeled behavior (e.g. a run) in terms of moves and identiﬁes
behavior that can not be mimicked between them as deviations.
we use the symbol to denote a “no move”: 62 ei. for
any set eei:e=e[fg . let ecbe a set of log events
anderbe a set of run events. (ec;er)2((ec)(er))
is a move. there are four types of moves:
(ec;er)is asynchronous move ifec6=ander6=
(ec;er)is alog move ifec6=ander=,
(ec;er)is amodel move ifec=ander6=, and
(ec;er)is an invalid move ifec=ander=.
we use a notion of alignments different from literature. the
moves are partially ordered rather than totally ordered.
deﬁnition 7 (p-alignment). let mod be a model and
c= (ec; actc; attrc; pic;c)2bh be a p-trace, a =
(c;r;m;m)is a partially ordered alignment ( p-alignment )
between the p-trace c and the model mod if and only if (a)
r= (er; actr; attrr; pir;r)2mod is a run of the model,
(b) m((ec)(er))nf(;)gis a set of moves , and
(c)mmm is a partial order such that:
1)8e2ecjf(ec;er)2mje=ecgj= 1, i.e., for each event
in the log there is precisely one corresponding move;
2)8e2erjf(ec;er)2mje=ergj= 1, i.e., for each event
in the run there is precisely one corresponding move;
3)8ec2ec;er2erpic(ec) =pir(er), i.e., events involved in
the alignment belong to the same process instance3;
4)8(ec;er)2m\(ecer)actc(ec) = actr(er), i.e., events
involved in a synchronous move refer to the same activity;
5)8(ec
1;er
1);(ec
2;er
2)2m((ec
1;er
1)m(ec
2;er
2)),((er
1;er
22
er^er
1rer
2)_(ec
1;ec
22ec^ec
1cec
2)), i.e.,
the ordering of the moves in the alignment respects the
ordering in the trace or the ordering in the run.
3note that the deﬁnitions of p-traces and p-alignments restrict the events
of the run of a p-alignment to be related to a single process instance.fig. 5: an optimal p-alignment between the p-trace
p1and the run p1: ﬁve-sided green polygons denote
synchronous moves; blue rectangles denote visible model
moves; gray rectangles denote invisible model moves;
yellow triangles denote log moves; blue and green arcs
denote dependencies in the run; yellow and green arcs
denote dependencies in the p-trace.
fig. 6: an optimal p-alignment between the p-trace p2
and the run p1.
given a p-trace and a model, inﬁnitely many alignments are
possible, many of which poorly map the observed behavior
onto the modeled behavior. therefore, we typically deﬁne a
notion of optimal alignments using a cost function for moves
where model and log deviate (i.e. log moves or model moves).
thestandard cost function assigns each possible log move and
model move a cost of 1. the alignment with the least cost is
considered to be optimal.
figures 5 and 6 respectively show two optimal p-alignments
between the model in figure 2 and the two process instances
p1andp2(of which the p-traces are shown in figure 3, and
the runs are shown in figure 4). figure 5 shows that the p-
alignment of p1has the following moves:
one log move denoted by the yellow triangle labeled with
c(i.e. event e1in the p-trace p1shown in figure 3);
two visible model moves denoted by the two blue rect-
angles labeled with candl, respectively;
two invisible model moves denoted by the two gray
rectangles labeled with 5and8, respectively;
four synchronous moves denoted by the four ﬁve-sided
green polygons labeled v,x,tando.
moreover, the same color code is used for dependencies
between moves: yellow and green dependencies between
moves are found in the p-trace (i.e. in c); blue and green
dependencies are found in the run. in addition, projecting a p-
alignment on the yellow and green parts, we obtain the original
p-trace; and projecting a p-alignment on the blue, gray and
green parts, we obtain the run. for example, the yellow and
green parts of the p-alignment in figure 5 show the originaltotally ordered case p1, with a log move on c, whereas the
blue, gray and green parts of the p-alignment shows the run p1
in figure 4 with a model move on cand two invisible model
moves on t5andt8.
b. computing p-traces
one of the situations observed in healthcare domain is that
the timestamps of events are often coarse or recorded using
different level of granularity (e.g. the timestamps of some
events only have the date whereas other events have both date
and times), as shown in figure 1. this quality issue of the
timestamps leads to an unreliable ordering of events which
the sequential alignment approach can not handle. in contrast,
our partial order approach can treat these events as concurrent
(i.e., they can occur in any order or at the same time).
a simple approach to compute p-traces in this situation is
to assume that the events that happened on the same day
are concurrent and neglect the time at which the events are
executed. formally, given a set ecof events related to a
single process instance and functions actc,attrcandpic,
we compute a p-trace c= (ec; actc; attrc; pic;c)with
the set of dependencies c=fe1ce2je1;e22ec^
attr(e1)(date)<attr(e2)(date)g.
c. computing p-alignments
our method to compute optimal p-alignments extends the
aapproach proposed in [10] and uses p-traces as input.
using the approach of [11], we ﬁrst convert a given p-
trace into a labeled marked petri net, also called an event net
in [10], which represents the observed behavior of the p-trace.
after obtaining the event net, we compute the synchronous
product between the event net and the process model [9].
each transition in the synchronous product is a possible move.
the synchronous transitions are composed of two transitions
referring to the same activity, one in the event net and one
in the process model. the two transitions are fused into one.
assigning each transition a cost, we can reuse the aalgorithm
in [10] to obtain an optimal ﬁring sequence with lowest cost
from the initial marking to the ﬁnal marking. based on the
obtained optimal ﬁring sequence in the synchronous product,
we can unfold the synchronous product to compute an optimal
concurrent run by [12]. this optimal concurrent run can be
converted into a partial order of moves, which is our optimal
partially ordered alignment [9]. the corresponding run of the
alignment is obtained by projecting the moves on the process
model transitions.
iv. e xperimental evaluation
we implemented our p-alignment approach in the enriched-
logreplayer package of the process mining toolkit prom4.
the package provides the plug-ins named advanced partial
replayer ,visualize ptraces as graphs andvisualize palign-
ments as graphs . these plug-ins are used to conduct a case
study of a real-life log of a healthcare process.
4www.processmining.orgn
c xlm
vp nt
e
l
o pvma
ls d
v cs vgvsfig. 7: the process model used in the case study.
xmcx
x
fig. 8: a p-trace with an undesired, highly sequentialized structure which indicates the patient has to visit the hospital
multiple days in which only a single activity is performed.
c
m
cmc
c
fig. 9: a p-trace with a more concurrent structure (i.e. more activities are scheduled on the same day); the two mri
events (m) are scheduled on a single day indicating a potential bottleneck.
a. case study settings and preprocessing
the process model and the (anonymized) event log of this
case study were provided by maastricht university medical
center (mumc+), a large academic hospital in the nether-
lands5. figure 7 shows the process model for diagnosing
and performing surgery on patients with rectal cancer. the
process starts with a patient visiting the outpatient clinic
(transition v). this visit may also be skipped ( skip) (for
example, when the patient is sent by the ﬁrst aid department or
a general practitioner). after the visit to the outpatient clinic
a coloscopy is performed ( cs) followed by another visit to
the outpatient clinic of gastro-enterology ( vg) or surgery ( vs).
next, the patient visits the colon care nurse ( n) during which
the plan for work-ups are made. various lab tests ( l), ct-
scans ( c), mri’s ( m), and x-ray scans ( x) are made before
the patient visits the outpatient clinic again ( vp). during this
meeting the treatment plan is proposed. next, the patient visits
the colon care nurse ( n) again to commence the surgery
process. in sequence, a surgery is ordered ( o) and preoperative
assessment is conducted ( p), whereas an electrocardiography
(e) and lab tests ( l) are conducted concurrently. after having
a meeting with the surgeon ( vm), the patient is admitted to the
hospital and the surgery is executed ( s). finally, the patient is
discharged ( d).
we obtained a log containing all relevant information for
5http://www.mumc.nl
o
asdfig. 10: a p-trace in which the order surgery (o),
admission (a), surgery (s) and discharged (d) are
executed in close proximity (few intermediate events).
34 patients following this process. the events in the log are
labeled with 25 distinct activities each of which map to one or
multiple transitions in the model. the resulting log consists of
1937 events. the traces have on average 57 events (between
16 and 137 per trace).
b. observations obtained using p-traces
we used the method of section iii-b to obtain p-traces
for the case study. figures 8 to 11 demonstrate a subset of
the p-traces we obtained. we highlight the relevant nodes by
annotating them with a letter that indicates the activity name.
we recall that events concurrent to each other (i.e. in this
particular case study, events occurring on the same day) appear
on the same vertical line in the ﬁgures. based on the structural
perception of these partial orders on events, we discuss three
main observations.
first, the structure of the obtained p-traces show that the
cases are executed rather sequentially. the p-traces shown in
figures 8 and 11 exemplify this claim. in these two p-traces,doo
dda
ds
d
dd
da
afig. 11: a p-trace with a highly sequential initial part followed by a fragment having a more parallel structure; the order
surgery (o) and the surgery events are executed far apart from each other.
v v v v v vl l l l l l l l l l l l
v v
v v
v l l l ll l v
vl
l ll
dd
fig. 12: two p-alignments showing the patterns 1(a) “ visit oc log moves (v) in concurrent with lab test events (l)”.
most events are executed on distinct days. in addition, events
labeled with the four activities mri (m), lab test (l), x-
ray(x) and ct scan (c) should occur in parallel but are
often executed on consecutive, distinct days. obviously, this
is not desired. we also notice that mri events often occur
in isolation (no other events on the same day). moreover,
mri events are also rarely executed concurrently with other
events. this observation indicates a potential bottleneck. the
observed highly sequential structure of the p-traces indicates
that patients on average have to visit the hospital frequently
for a small set of events.
we also noticed that for 17 out of the 34 cases, two ct
scans (c) are performed concurrently but no x-ray scan is
performed. figure 9 exempliﬁes one of these traces. using
domain knowledge, we infer that one of the ct scans (i.e.
ct thorax ) is performed instead of the x-ray scan (x) (i.e.
x-thorax ). the reason for this replacement is to decrease the
number of appointments patients have to make.
another interesting observation is that in general when event
order surgery (order ok (o)) is executed close to surgery
(ok anker (s)), the overall structure of the entire p-traces
of these cases are more simple than the ones of the p-traces
in which these two events are executed far from each other.
for 14 out of the 34 cases, a surgery event (s) is executed
within 7 dependencies after an order surgery event (o), and
for these p-traces, the average length of a shortest path from
a start event to an end event (i.e. 20:2dependencies) is two
times less than the average length (i.e. 43:6dependencies) of
a path in the p-traces in which the two events are executed
greater than 7 dependencies apart. figures 10 show one case
in which these events are executed closely after each other
resulting into a much simpler p-trace. figure 11 exempliﬁes
a case in which these events are executed far apart from each
other.
vv v v v v
vl lv
v
v
v
v
v
v
v
v
vcsfig. 13: two p-alignments showing the pattern 1(b) “ visit
oc(v) highly in concurrent with itself”.
c. observations obtained using p-alignments
the p-traces obtained are used to compute p-alignments as
described in section iii-c. figures 12 to 17 show a subset of
the p-alignments we obtained. we discuss three of our main
observations related to the p-alignments:
(1) in the obtained p-alignments, we observe many log
moves related to activity visit oc (v) (i.e. events labeled with
vervolg consult algemeen ) which are found in three different
patterns.
a) figure 12 illustrates the ﬁrst pattern in two alignments:
a sequence of multiple visit oc log moves (v) is often
found concurrent to lab test events (l). using domain
knowledge, we know that a lab test is typically performed
before a chemotherapy treatment, which indicates that
visit oc log moves may be recorded instead of this
treatment.
b) figures 13 and 14 exemplify the second observed pattern:
multiple log moves of visit oc (v) in parallel with itself,
i.e. recorded on same days.
c) the third pattern shows that visit oc log moves (v) are
executed repetitively in consecutive days, illustrated in
figure 16.
due to the large amount of the duplicated visit oc log moves
(v) found in the log and their general meaning (i.e. canddd
ac
xv
csdd
da
l
v
vv
v
v
vvfig. 14: a p-alignment showing the pattern 1(b) and the pattern (2) “ discharged
log moves (d) in combination with admission (a)”.
v
cs
lcs
cs
sdfig. 15: a p-alignment
showing the pattern (3)
“duplicated coloscopy log
moves ( cs)”.
vv v v v v
vl lv
v
v
v
fig. 16: a p-alignment showing the pattern 1(c) “ visit
oclog moves (v) in sequence”.
be mapped to many activities in the model), it may be an
interesting direction for business users to further investigate
the causes of these log moves. for example, these duplicated
log moves may refer to a single visit of the patient in which
multiple medical specialists participate or are they related to
erroneous registrations.
(2) we also found log moves labeled with discharged
(d)(i.e. events labeled with ontslag ziekenhuis ) in the early
stage of some process instances and in parallel with other
moves such as coloscopy (c s)(labeled with dikke darm-
coloscopy , 21 times), admission hospital (a) (labeled with
opname ziekenhuis , 12 times), or visit oc (v) (14 times).
this is illustrated in figures 14 and 17. this indicates that the
meaning of the discharged log moves (a) is rather confusing
and the logging is inconsistent. using domain knowledge, we
infer that a discharged (d) in combination with admission
hospital (a) indicates that the patient is admitted to the hopital
(e.g. because of surgery). otherwise, the patient simply visits
the daycare center (e.g. because of a colonoscopy) and left the
hospital after the visit.
(3) next we consider the duplicated log moves involving
activity coloscopy (c s)which are found in parallel or on
consecutive days in the alignments (see figure 15). this
observation may indicate multiple specialists involved in the
examination or duplicated logging in systems which can poten-
tially obstruct the accounting processes (e.g. an expensive test
for a patient is logged multiple times in different departments).
despite the many log moves we discussed, the obtained
p-alignments reveal a certain “conforming” path of the execu-
tion: a path of synchronous moves through the process. this
suggests that the processes are following the general procedure
documented in the process. the log moves indicate additional
events required for the particular patient and situation.
d. discussion
recall the two aims described in section i, we would like (1)
to use the more ﬂexible partial order structure while being able
to handle concurrent events for conformance checking, and
dcsd
afig. 17: a p-alignment showing the pattern (2) “ dis-
charge log moves (d) in concurrent to coloscopy (cs)
andadmission (a)”.
(2) to obtain individual alignments in which the dependencies
between moves and its relation to the model are clearly and
explicitly deﬁned. the result of the case study shows that par-
tially ordered alignments have indeed achieved these two aims.
the p-traces obtained show useful insights into the structure
and parallelism of executions. in addition, relaxing the total
ordering of events to a partial order, our partially ordered
alignment approach identiﬁes 28 (out of 1479) synchronous
moves more than the sequential alignment approach.
more importantly, the obtained p-alignments show deviat-
ing patterns in structure and concurrency that can be easily
recognized. each deviation is nicely positioned concurrently
or between synchronous moves and can be discussed in this
context and in a structured way. both moves and dependencies
found in the p-alignments are explicit and their relations to the
model are preserved. these properties allow users to inspect
radically deviating cases in a structured way, which might be
more appropriate than discussing all cases together in a single
analysis.
also from a practical point of view our results are in-
teresting for experts of the hospital that provided the log.
for example, from a service level point of view we noticed
that at many days only one appointment is taking place.
in general patients prefer to have multiple appointments on
one day so that they have to travel less to the hospital. as
a suggestion, more appointments may be scheduled on one
day. furthermore, from our observations it could also be seen
that registrations may be confusing. so, from an accounting
perspective it could be potentially problematic for the hospital
to demonstrate which services have been delivered to patients.
from a costing point it may be the case that services have been
delivered and that the hospital is not paid for them or the other
way around. finally, from a planning point of view, erroneous
registrations may lead to wrong calculations with regard to e.g.resource utilization or waiting times of activities. for example,
do events labeled with visit oc (v) refer to a visit of a patient
to the outpatient clinic or do they refer to a chemotherapy that
is given. to summarize, the way services are registered may
be improved to further optimize the process.
v. r elated work
many approaches have been proposed to check conformance
between observed behavior and modeled behavior. in [4] a
token-based replay approach is discussed which measures the
number of remaining and missing tokens when replaying the
observed behavior in the model and consider these as devia-
tions. andriansyah et al. present an alignment approach using
theaalgorithm [10]. the alignment approach uses sequential
traces as input and computes a sequential run allowed by the
model that has the least number of deviations (e.g. missing
events or observed prohibited events) compared to the traces.
various applications are built on the resulting diagnostics
provided by conformance checking techniques. for example,
model repair techniques use the diagnostics to improve the
model structure [13]. moreover, the diagnostics are enriched
with data attributes and timestamps to conduct data-aware
conformance checking [14], root cause analysis [15], and
performance analysis [3]. in combination with classiﬁcation
techniques, the results of alignments are also used to ﬁnd
decision points in process model.
in the context of petri nets, many publications related to
partial orders of events can be found. nielsen et al. deﬁned
elementary event structure and discussed the construction of
partially ordered runs [11]. desel et al. [12] and lorenz et
al. [16] discussed in their work the construction of partially
ordered runs by unfolding the net using traces and analyzed
the properties of petri nets using partially ordered runs. on
the contrary, little work in the literature considers incorpo-
rating partial orders of events in process mining techniques.
both process discovery and process conformance checking
techniques often assume a total ordering of events. lassen et
al. discussed an approach to convert basic message sequence
charts (mscs) that already have explicit partial order structure
into p-traces to synthesize a high-quality process model from
mscs [17]. fahland and van der aalst used partially ordered
runs of ﬁtting traces to simplify process models [13]. our
approach distinguishes itself from other conformance check-
ing techniques by using partially ordered events as input.
moreover, we compute partially ordered alignments between
partially ordered events and runs thereby providing much
better diagnostics.
vi. c onclusion
in this paper, we formally deﬁned partially ordered traces
and partially ordered alignments using a uniﬁed notion of
behavior. the approach presented in this paper for computing
partially ordered alignments by using partially ordered traces is
generic and can also be used for sequential traces. a case study
shows that both partially ordered traces and partially ordered
alignments are able to handle concurrency and reveal usefulinsights into the structural information of process executions
in addition to deviating events. future work aims at applying
partially ordered alignments in various contexts such as model
repair and data ﬂow analysis and using the partial orders to
compute alignments in a distributed manner.
acknowledgment
this research is supported by the dutch cyber security
program in the context of the price project and by the
dutch technology foundation stw, applied science division
of nwo and the technology program of the ministry of
economic affairs.
references
[1] b. cardoen, e. demeulemeester, and j. beli ¨en, “operating room
planning and scheduling: a literature review,” european journal of
operational research , vol. 201, no. 3, pp. 921–932, 2010.
[2] m. t. taner, b. sezen, and j. antony, “an overview of six sigma
applications in healthcare industry,” international journal of health
care quality assurance , vol. 20, no. 4, pp. 329–340, 2007.
[3] w. m. p. van der aalst, a. adriansyah, and b. van dongen, “replaying
history on process models for conformance checking and performance
analysis,” wiley interdisciplinary reviews: data mining and knowledge
discovery , vol. 2, no. 2, pp. 182–192, 2012.
[4] a. rozinat and w. m. p. van der aalst, “conformance checking of
processes based on monitoring real behavior,” information systems ,
vol. 33, no. 1, pp. 64–95, 2008.
[5] e. ramezani, d. fahland, and w. m. p. van der aalst, “where did i
misbehave ? diagnostic information in compliance checking,” 2012,
pp. 262–278.
[6] m. de leoni, m. dumas, and l. garc ´ıa-ba ˜nuelos, “discovering branch-
ing conditions from business process execution logs,” in fundamental
approaches to software engineering . springer, 2013, pp. 114–129.
[7] d. fahland and w. m. p. van der aalst, “model repair aligning process
models to reality,” information systems , 2013.
[8] a. rebuge and d. ferreira, “business process analysis in healthcare
environments: a methodology based on process mining,” information
systems , vol. 37, no. 2, 2012.
[9] g. winskel, “petri nets, algebras, morphisms, and compositionality,”
information and computation , vol. 72, no. 3, pp. 197–238, 1987.
[10] a. adriansyah, b. f. van dongen, and w. m. p. van der aalst, “memory-
efﬁcient alignment of observed and modeled behavior,” bpmcenter.
org, tech. rep , 2013.
[11] m. nielsen, g. plotkin, and g. winskel, “petri nets, event structures
and domains, part i,” theoretical computer science , vol. 13, no. 1, pp.
85–108, 1981.
[12] j. desel and w. reisig, “place/transition petri nets,” in lectures on
petri nets i: basic models , ser. lecture notes in computer science.
springer berlin heidelberg, 1998, vol. 1491, pp. 122–173.
[13] d. fahland and w. m. p. van der aalst, “simplifying discovered process
models in a controlled manner,” information systems , vol. 38, no. 4,
pp. 585–605, 2013.
[14] m. de leoni, w. m. p. van der aalst, and b. f. van dongen, “data-
and resource-aware conformance checking of business processes,” in
business information systems . springer, 2012, pp. 48–59.
[15] s. suriadi, c. ouyang, w. m. p. van der aalst, and a. h. m. ter hofstede,
“root cause analysis with enriched process logs,” in business process
management workshops . springer, 2013, pp. 174–186.
[16] r. lorenz, j. desel, and g. juh ´as, “models from scenarios,” in trans-
actions on petri nets and other models of concurrency vii . springer,
2013, pp. 314–371.
[17] k. b. lassen and b. f. van dongen, “translating message sequence
charts to other process languages using process mining,” in trans-
actions on petri nets and other models of concurrency i . springer,
2008, pp. 71–85.