ieee transactions on industrial informatics, vol. x, no. x, x 20xx 1
managing process model complexity via
concrete syntax modiﬁcations
marcello la rosa, arthur h.m. ter hofstede, petia wohed, hajo a. reijers, jan mendling
and wil m.p. van der aalst
abstract —while business process management (bpm) is an
established discipline, the increased adoption of bpm technology
in recent years has introduced new challenges. one challenge
concerns dealing with the ever-growing complexity of business
process models. mechanisms for dealing with this complexity
can be classiﬁed into two categories: i) those that are solely
concerned with the visual representation of the model, and ii)
those that change its inner structure. while signiﬁcant attention
is paid to the latter category in the bpm literature, this paper
focuses on the former category. it presents a collection of patterns
that generalize and conceptualize various existing mechanisms
to change the visual representation of a process model. next, it
provides a detailed analysis of the degree of support for these
patterns in a number of state-of-the-art languages and tools. the
paper concludes with the results of a usability evaluation of the
patterns conducted with bpm practitioners.
index terms —process model, pattern, complexity, presenta-
tion, secondary notation.
i. i ntroduction
business process management (bpm) deals with the life-
cycle of business process models which includes their de-
sign, execution and analysis [59]. through the application of
bpm technology, businesses may realize cost reductions, time
savings, and an increased agility to deal with change. many
organizations have been investing in this technology and the
interest in bpm surged in recent years. despite advancements
in the ﬁeld of bpm—both in academia and in industry—
important challenges still remain. these need to be dealt with
in order to fully realize the potential of bpm technology.
one of these challenges concerns the management of com-
plex process models. business process models may contain
many elements which may have numerous and intricate depen-
dencies among them. the more complex a business process
model is, the harder it is to determine if it properly captures
the right business practices, to use it to communicate with
stakeholders, and to evolve it over time (e.g. due to unforeseen
circumstances or changing business requirements).
m. la rosa and a.h.m. ter hofstede are with the queens-
land university of technology. e-mail: see http://marcellolarosa.com and
http://yawlfoundation.org/ »arthur. ter hofstede is also with eindhoven uni-
versity of technology.
p. wohed is with stockholm university, sweden. e-mail: see
http://people.dsv.su.se/ »petia.
h.a. reijers and w.m.p. van der aalst are with eindhoven university
of technology, the netherlands. e-mail: see http://www.reijers.com and
http://www.vdaalst.com. van der aalst is also with queensland university
of technology.
j. mendling is with humboldt university of berlin, germany. e-mail: see
http://mendling.com.
manuscript received xx, 2011; revised xx, 20xx.there is a substantial body of literature on process model
complexity and understandability on the one hand (e.g. [11],
[31], [36], [39], [4], [52], [48]) as well as on proposed mecha-
nisms to deal with managing this complexity on the other hand
(e.g. [55], [58], [20]). however, what is lacking is a language-
independent overview of, and a motivation for, the various
features that exist to managing complexity in process models.
such an overview could ultimately pave the way for more
comprehensive support for complexity management in process
modeling languages, standards and tools. a variety of process
model stakeholders may beneﬁt from this, e.g., those designing
and standardizing process modeling languages such as bpmn,
those developing modeling tools to support such languages,
and those currently using a speciﬁc language/tool in order
to evaluate its strengths and weaknesses. these observations
triggered the development of a language-independent overview
of the various features that exist to reduce the complexity of
a process model.
in this paper we follow the established approach of cap-
turing a comprehensive range of desired capabilities through
a collection of patterns (e.g. the workﬂow patterns [60]
provide a language-independent description of expressiveness
requirements in process modeling languages). the patterns
capture features to manage process model complexity as they
are found in the literature, in process modeling languages or
in their tool implementations.
in line with the ﬁeld of programming languages [40], we
distinguish between concrete syntax andabstract syntax of a
model. the concrete syntax of a process modeling language
deals only with representational aspects such as symbols,
colors and position, of the various types of nodes in a
process model (e.g. tasks, events, gateways, roles). in cognitive
sciences [45], this corresponds to the cognitive dimension of
secondary notation . the abstract syntax of a process modeling
language is not concerned with representational aspects but
captures the various types of process elements and the struc-
tural relationships between them. hence, changing the graph-
ical appearance of a process model (e.g. by rearranging nodes
or modifying the symbol of a certain node type) should not
have any consequences for its abstract syntax representation.
modularizing a process model in a hierarchy of nested sub-
processes can be used to simplify a model without changing its
behavior. however, modularization affects the abstract syntax.
abstracting from certain elements of the model (e.g. in order to
create a process view for a speciﬁc class of users) also affects
the abstract syntax of a process model—in fact certain model
elements are replaced or removed altogether. accordingly, we
classify features to reduce the complexity of a process modelieee transactions on industrial informatics, vol. x, no. x, x 20xx 2
into two categories: those that affect the concrete syntax of a
model only , and those that primarily affect its abstract syntax ,
and, as a consequence, may also impact on its concrete syntax.
in this paper, we focus on complexity reduction features that
only affect the concrete syntax of a process model.
the patterns description is language-independent, but typi-
cally the realization of these patterns in one or more existing
approaches is discussed to reinforce understanding and to
demonstrate relevance. this description is complemented by
an overview of the degree of patterns support in a number
of well-known process modeling languages and language
implementations, which provides insights into comparative
strengths and weaknesses. moreover, we report on the results
of a usability evaluation of the patterns that we conducted with
bpm practitioners.
the remainder of this paper is structured as follows. sec-
tion ii describes and justiﬁes the approach used. section iii
presents the various patterns while section iv evaluates the
support offered by mainstream bpm languages and tools for
the identiﬁed patterns. section v presents ﬁndings from the
usability evaluation. next, section vi discusses related work
and section vii concludes the paper.
ii. m ethodology
in this paper we identify patterns to reduce the perceived
model complexity without changing the abstract syntax, i.e.,
the goal is to simplify the representation of the process model.
the most well-known patterns collection in the it domain
is the set of design patterns documented by gamma, helm,
johnson, and vlissides [19]. this collection describes a set
of problems and solutions frequently encountered in object-
oriented software design. the success of the patterns described
in [19] triggered many patterns initiatives in the it ﬁeld,
including the workﬂow patterns initiative [60]. the idea to
use a patterns-based approach originates from the work of
the architect christopher alexander. in [5], he provided rules
and diagrams describing methods for constructing buildings.
the goal of the patterns documented by alexander is to pro-
vide generic solutions for recurrent problems in architectural
design. the idea to use patterns for design problems in the
it domain is appealing as is reﬂected by the many patterns
collections that emerged in the last decade.
the patterns described in this paper have been collected
by extensively analyzing existing bpm literature. in addition,
we analyzed existing or proposed standards governed by stan-
dardization bodies such as oasis, omg, w3c, and wfmc.
we also analyzed the features of existing tools (business
process modeling tools, wfm systems, and bpm systems).
finally, we asked bpm experts and practitioners to comment
on the patterns we identiﬁed. this resulted in the eight patterns
presented in this paper. all operate on the concrete syntax of
a process model and aim to reduce the perceived complexity
of the model. we could have documented more patterns.
however, an important requirement is that a pattern should
recur frequently. for each pattern in this paper, we found more
than ﬁve languages, research approaches or tools that use it.
as it is usual in this domain, we used a ﬁxed pattern-format
to document each pattern and used this to evaluate existinglanguages and tools in a systematic manner. the format lists
ﬁve elements for each pattern: (a) description, (b) purpose, (c)
rationale, (d) realization, and (e) example.
iii. p atterns for concrete syntax modification
as a result of our study, we identiﬁed eight patterns operat-
ing exclusively on the concrete syntax of a process model and
classiﬁed them according to the hierarchy shown in figure 1.
the ﬁrst pattern, namely layout guidance , describes features
to modify the process model layout. four patterns outline
visual mechanisms to emphasize certain aspects or parts of
a process model (node highlight in figure 1). these are
enclosure highlight ,graphical highlight , and two annotation
patterns: pictorial annotation and textual annotation . two
representation patterns, explicit representation and alterna-
tive representation , refer to the availability of explicit and
alternative visual representations for process modeling con-
structs. the last pattern, naming guidance , refers to naming
conventions or advice to be used in a process model.
in the following we provide a detailed description of each
pattern. for illustration purposes, we use the bpmn (business
process modeling notation) standard [43]. an overview of the
graphical representation of the main concepts of this notation
can be found in figure 2. detailed knowledge of this standard
is not required to understand the various examples in this
paper.
pattern 1 (layout guidance )
description this pattern refers to the availability of layout
conventions or advice to organize the various model elements
on a canvas. these include indications on the orientation,
alignment and spacing of model elements in the space.
purpose to reduce clutter, especially in large process models
or models that have undergone a number of updates.
rationale neat and tidy process models are generally easier
to comprehend than chaotic and cluttered ones [36]. crossing
edges negatively affect model understanding [46].
realization some languages provide general guidelines on
how a model should be laid out on the canvas. eepcs [25], [14]
prescribe to model processes from top to bottom [25], while
the bpmn speciﬁcation recommends “to pick a direction
of sequence flow, either left-to-right or top-to-bottom” as
well as to “direct the message flow at a 90±angle to the
sequence flow” [43, p. 30]. tool-wise, we can distinguish
three categories. some tools offer algorithms to lay out process
models. these can be very sophisticated, such as in the case
of software ag aris which supports both eepcs and bpmn
layout guidelines, and where elements orientation, alignment
and spacing can be customized, or simple ones, such as in
the case of the yawl editor. other tools, such as oracle
jdeveloper, impose a ﬁxed layout. a third category which
includes the sparx enterprise architect and pallas athena pro-
tos, provides limited to no layout support. in the literature, the
problem of ﬁnding an optimal placement of model elements
on the canvas has received quite some attention. alpfelbacher
et al. [6] suggest to place related elements spatially close
to each other, huotari et al. [23] and purchase [46] pointieee transactions on industrial informatics, vol. x, no. x, x 20xx 3
alternative explicitrepresentation
enclosurehighlightconcrete
syntax
modification
naming
guidance
annotation
pictorial textualgraphicallayout
guidance
fig. 1. patterns for concrete syntax modiﬁcation.
not cond. cond. 
task catching 
link event throwing 
link event end event start event sequence 
flow xor-split xor-join and-join and-split 
fig. 2. bpmn 1.2 modeling elements used in this paper.
out that crossing edges should be avoided if possible, while
jensen [24] suggests that incoming and outgoing edges are
placed on the opposite sides of a colored petri net node
to improve readability. bpmn-speciﬁc layout algorithms have
been discussed in [26], while [17] provides a prototype im-
plementation of a bpmn-layouter tool. finally, initial work
towards determining the inﬂuence of various layout factors on
process model understanding has been done in [52].
example figure 3a shows a bpmn model that does not follow
any layout guideline: i) the elements are not oriented in a
consistent direction (e.g. the ﬁrst two tasks have a top-to-
bottom orientation, while the remaining ones are oriented
from left-to-right); ii) subsequent elements are not closely
positioned to each other (e.g. task create new entry is far from
task insert invoice details and from the and-split in-between);
iii) there are several crossing edges. figure 3b shows the same
model after repositioning the elements according to the bpmn
guidelines.
pattern 2 (enclosure highlight )
description this pattern refers to the availability of modeling
constructs to visually enclose a set of logically-related model
elements, and add a comment to characterize the group.
purpose to visually accentuate a set of model elements based
on some shared property, e.g. enclosing all elements that need
revision or all elements that refer to a given resource.
rationale visually enclosing a set of elements increases the
perceptual discriminability of the enclosed elements from the
others [28].
realization as per languages, bpmn is the only on that
supports this pattern via the notion of grouping—a dashed-
line, rounded corner rectangle with a name, used to enclose
a set of model elements. the elements in a bpmn grouping
are only grouped informally. the majority of modeling edi-
tors provide a drawing palette to allow drawing a shape to
enclose model elements, and to attach textual comments tothe drawing. for example, aris allows one to draw shapes
such as rectangles or circles, add a comment via the free-
form text feature, and group the shape with the text in one
element. similarly, in protos a modeling area can be encircled
via rectangles or ellipses. the background color of this area
can be changed and a text area can be added to provide
comments. enterprise architect offers a non-uml element
called system boundary to deﬁne conceptual boundaries from
a visual perspective. visual enclosure has been recognized
as a means to discriminate among visual elements already
by the gestalt psychologists [28] in 1935, via the perceptual
relationship of containment. however, to our knowledge the
use of this mechanism has not yet been investigated in the
context of business process modeling.
example figure 4 shows the use of the bpmn grouping
construct to emphasize all tasks related to the sap system
and all tasks that need revision, for the model in figure 3b.
pattern 3 (graphical highlight )
description this pattern refers to the availability of features
to change the visual appearance of model elements, such as
shape, line thickness and type, background color, font type
and color.
purpose to visually accentuate some properties or aspects of
model elements.
rationale using a range of appearance properties results in
a perceptually enriched representation that can reduce the
cognitive overhead of associating syntactic elements with their
semantics [33], [27], [41].
realization eepcs prescribe the use of different colors for
each construct, e.g. functions are represented in green, events
in purple, connectors in grey and positions in yellow. in protos
only the status construct is colored in blue. bpmn allows
ﬂexibility in elements’ size, color and line style, except for
speciﬁc elements such as throwing and catching events, for
which speciﬁc guidelines are indicated. tools that supportieee transactions on industrial informatics, vol. x, no. x, x 20xx 4
a)
b)no 
mismatches create 
new entry check 
invoice 
details mismatch 
exists block 
invoice 
invoice 
present invoice 
not present 
create 
new entry insert 
invoice 
details 
insert 
customer 
details invoice 
in check 
invoice 
details 
mismatch 
exists invoice 
out 
block 
invoice mismatch 
checking invoice 
present invoice 
not present invoice 
in 
mismatch 
checking insert 
invoice 
details 
insert 
customer 
details invoice 
out 
no 
mismatches 
fig. 3. a) a bpmn model not following any layout guidelines. b) the same model after applying the bpmn layout guidelines.
no 
mismatches create 
new entry 
check 
invoice 
details 
mismatch 
exists block 
invoice invoice 
present invoice 
not present 
invoice 
in 
mismatch 
checking insert 
invoice 
details 
insert 
customer 
details invoice 
out 
to be revised sap system 
fig. 4. an example of enclosure highlight using the bpmn grouping construct.
eepcs such as microsoft visio, aris and oryx, visualize
eepc models in their default colors. in aris an element’s
background color, line thickness and line type can be changed,
while in enterprise architect fonts’ color can also be changed.
other tools such as oryx and the yawl editor only allow
customizing the background color. in the literature, the use
of colors is suggested to identify edge ends and matching
splits and joins in workﬂow nets [49], while in [15] the idea
of color-coding matching splits and joins is implemented for
the woped tool. moreover, in [16] a method is presented
to represent different types of bpmn elements by objects
differing in color and shape; in [21] color variations and line
brightness are used to highlight the most signiﬁcant behavior
of unstructured process models mined from logs, while in
[1] line thickness is suggested to indicate the most traversed
process path.
example figure 5 uses colors to highlight matching splits and
joins, and thick edges to highlight the most traversed path, for
the model in figure 3b.
pattern 4 (pictorial annotation )description this pattern denotes the availability of features to
assign pictorial elements, such as icons or images, to modeling
elements.
purpose to strengthen model-speciﬁc concepts (e.g. annotat-
ing a receive task with an envelope), or to add domain-speciﬁc
information (e.g. annotating a task with an exclamation mark
to indicate criticality).
rationale associating pictorial elements with textual descrip-
tions improves model understanding [44] by speeding up
recognition and recall, especially for naive users [41].
realization in bpmn 2.0 [42], a task can be annotated with
an icon indicating its type. for example, an empty envelope
can be used to indicate a receive task, while a hand can
be used to indicate a manual task. similarly, protos makes
use of icons to distinguish among various activity types, e.g.
basic, logistics, and authorize. features to assign icons or
images to modeling elements are recurrent in modeling editors.
in some tools such as jdeveloper and intalio jdesigner icons
are automatically assigned to tasks and cannot be customized.
for example, in intalio jdesigner they are used to distinguish
manual from automated bpmn tasks. in other tools, such asieee transactions on industrial informatics, vol. x, no. x, x 20xx 5
create
newentryinsert
invoice
details
insert
customer
detailsinvoice
incheck
invoice
details
mismatch
existsinvoice
out
block
invoicemismatch
checkinginvoice
presentinvoice
notpresent
no
mismatches
fig. 5. two examples of graphical highlight: coloring and line thickening.
enterprise architect and the yawl editor, icons or images are
fully customizable. for example, in enterprise architect one
can replace the background of a uml activity with an image.
mendling et al. [35] recognize the importance of annotating
process models with icons to convey domain-speciﬁc informa-
tion, and propose a set of 25 icons to graphically represent 25
frequently occurring task label categories.
example in figure 6 each task from figure 3b has been
annotated with an icon. for example, task “block invoice”
features an icon indicating danger while task “check invoice
details” features a lens (reinforcing purpose).
pattern 5 (textual annotation )
description this pattern denotes the availability of features to
visually represent free-form text in the canvas, which can be
attached to modeling elements without changing semantics.
purpose to add domain-speciﬁc information (e.g. annotating
an automated task with a text caption to explicate the task’s
inner working).
rationale textual annotations can either improve understand-
ing of diagrams as comments can improve understanding of
source code [41] or augment the model with further informa-
tion such as time, cost, or quality [53].
realization uml and bpmn provide a visual construct to
attach free-form text to modeling elements called, respectively,
comment and text annotation . this construct is supported
by the main uml and bpmn editors (see e.g. enterprise
architect, intalio jdesigner, aris and oryx). many modeling
editors offer proprietary features to visualize free-form text,
e.g., aris and protos have text areas while oryx has text
notes for eepcs.
example the model in figure 6 is also annotated with text
captions to highlight those tasks that require access to an
sap system, to list all possible mismatches, and to indicate
the procedure to follow in case of blocked invoices (all with
explicative purpose).
pattern 6 (explicit representation )
description this pattern denotes the ability to capture process
modeling concepts via a dedicated graphical notation.
purpose to visualize and distinguish the various ingredients
of a process model.
rationale explicit representation can reduce the cognitive
overhead of associating syntactic elements to their seman-
tics [33].realization the majority of process modeling languages pro-
vide graphical notations for a subset of their concepts only.
in uml ads, addstructuralfeaturevalueaction and apply-
functionaction are two examples of concepts that are only
represented textually. similarly, in bpmn 1.2 the various task
types (e.g. receive, service, manual), and the difference be-
tween embedded andreusable sub-process, are two examples
of concepts that can only be distinguished via a task’s textual
attribute. although these concepts have now been given a
graphical notation in bpmn 2.0, still there are numerous
element attributes that do not have one. in yawl [22] none
of the concepts related to data and resourcing aspects are
visually represented. in protos joins and splits are always
subsumed by an activity’s multiple incoming, respectively,
outgoing edges. this is the same in petri nets for and joins
and splits. only a few languages such as eepcs and workﬂow
nets [3], have a graphical notation covering all modeling
concepts (i.e., all notions supported are visualized). however,
these two languages provide only few concepts. a third class
of languages including bpel, xpdl and languages from the
past such as bpml and xlang, does not have a graphical
notation. in the case of bpel, the majority of bpel editors
provide a proprietary graphical notation (see e.g. jdeveloper or
the eclipse bpel editor), while others provide a bpmn skin
to a bpel model (e.g. intalio jdesigner). such a skin however
often imposes restrictions based on the underlying model, e.g.,
the bpmn models need to be block-structured such that each
split has a corresponding join of the same type.
example the models in ﬁgures 3-6 are all examples of pro-
cess models whose modeling concepts (task, gateway, events,
sequence ﬂow) are explicitly represented via a dedicated
graphical notation.
pattern 7 (alternative representation )
description this pattern denotes the ability to capture process
modeling concepts without the use of their primary graphical
notation.
purpose to avoid cluttering and potentially reduce model size,
especially in large or complex models.
rationale speciﬁc classes of users may be more familiar with
certain symbols. reducing model size positively affects model
understanding [36].
realization a typical case of alternative (shorthand) represen-
tation is that of the or-split gateway, which replaces a com-
bination of xor and and split gateways. this is supportedieee transactions on industrial informatics, vol. x, no. x, x 20xx 6
mismatch
checking
invoice
outinsert
customer
detailsinsert
invoice
details
invoice
in
clientneeds
beassessed
againstfinancial
policiessapsystem
possiblemismatches:
1)wrongclientdetails
2)wrongpaymentdetails
3)invoicebackdatedno
mismatchescreate
newentry
check
invoice
details
mismatch
existsblock
invoiceinvoice
presentinvoice
notpresent
sapsystem
sapsystem
fig. 6. examples of pictorial and textual annotations for the model in figure 8b.
by eepcs, bpmn and yawl. bpmn also offers a number
of alternative representations. for example, an and-split can
be replaced by specifying multiple outgoing edges from an
activity; an (x)or split can be replaced by conditional flows ;
an xor-join can be subsumed by multiple incoming edges to
an activity; an incoming/outgoing message ﬂow can be directly
connected to an activity (thus avoiding the use of a message
event or a receive/send activity); a structured loop can be
replaced by an activity annotated with a loop marker. uml
ads offer similar alternative notations for the and-split and
the (x)or split, while the and-join is subsumed by multiple
incoming edges to an activity. semantically, conditions and
tasks need to alternate in yawl. however conditions can be
omitted from the graphical representation of a model when
connected only to one preceding and to one subsequent task.
these alternative representations are generally supported by
the main modeling editors, see e.g. enterprise architect for
uml ads, aris and oryx for bpmn, and the yawl
editor for yawl. moreover, enterprise architect allow one
to replace the predeﬁned shape of a modeling element with
an image whereas aris provides a symbol editor to create
alternative representations for each modeling element. these
symbols can be organized in templates for speciﬁc needs (e.g.
a template for presentation to a business audience) and be
applied systematically to a process model. in the literature, this
feature was already envisaged by becker et al. [8] under the
name of representation variation , through which the classical
epc symbols can be replaced with custom-made ones, as
part of adapting a process model to the requirements of an
organization. an occurrence of this pattern is in [16], [17],
where the authors deﬁne an alternative representation for those
edges with numerous bends or that cross other edges: they cut
the edge and insert two pointers at the two ends. in this way,
clutter can be reduced.
example figure 7 shows the model in figure 3b after applying
the bpmn alternative representation for xor-split, xor-join
and and-split.
pattern 8 (naming guidance )
description this pattern refers to the availability of naming
conventions or advice for model elements’ labels, which can
be syntactic (e.g. using a verb-object style) or semantic (e.g.
using a domain-speciﬁc vocabulary).
purpose to bring clarity and convey domain-speciﬁc informa-
tion.rationale names that follow a verb-object style are less am-
biguous [37]. names that better convey the modeler’s intention
improve understanding [9].
realization none of the languages examined provides naming
conventions or advice. on the other hand, the problem of
establishing naming conventions for task names in process
models has gained growing attention in academia and in the
industry. from a syntactic perspective, mendling et al. [37]
conducted a systematic study of different syntactic styles for
task names in process models. the result is that task names
in the verb-object style are perceived as less ambiguous and
more useful than names in other styles (e.g. action-noun). the
use of the verb-object style for task names is also proposed
as a modeling guideline in [38] and in [54]. silver [54] also
proposes naming guidelines for gateways and certain types of
events in bpmn 2.0. from a semantic perspective, becker et
al. [9] envisage using a business term catalogue to establish
and relate the main terms in an organization, which can be
ﬁltered depending on a speciﬁc user group. rosemann [50]
further develops this idea and recommends a preparatory step
to process modeling where the involved terms are separately
captured in a hierarchy with their semantic relations. using a
controlled vocabulary taken from a domain-speciﬁc reference
model is suggested in [18], while in [37] the possibility of
using a general data dictionary to control the object part of
verb-object names is also envisaged. regarding the verb part,
mendling et al. [35] propose a set of 25 frequently occurring
verbs of general use, which they extracted from the sap
r/3 reference model [12] and generalized via established verb
taxonomies. tool-wise, renaming features for task and process
labels are explored (but not implemented) in [58], as part
of a set of refactoring mechanisms for process models. a
ﬁrst effort towards the automation of renaming mechanisms
is made in [7], where a prototype implementation is shown
that can enforce speciﬁc naming conventions for eepc ele-
ments, via thesauri and linguistic grammars. [32] implements
a tool to automatically refactor action-noun labels into verb-
object labels in process models. the aris documentation [14]
indicates general semantic guidelines for eepcs (e.g. avoiding
generic verbs such as “to process”) while signavio features a
central dictionary of terms which provides auto-completion of
labels. however, major tools still neglect the importance of
providing automated naming guidance.
example figure 8 shows the model in figure 3b after renam-ieee transactions on industrial informatics, vol. x, no. x, x 20xx 7
no 
mismatches create 
new entry 
check 
invoice 
details 
mismatch 
exists block 
invoice invoice 
present invoice 
not present 
invoice 
in 
mismatch 
checking insert 
invoice 
details 
insert 
customer 
details invoice 
out 
fig. 7. alternative representation of splits and joins for the model in figure 3b.
ing all activity labels in the verb-object style.
iv. b enchmarking
in this section, we report the results of evaluating a number
of languages and tools against their support for the iden-
tiﬁed patterns. the languages selected for this evaluation
are mainstream process modeling languages deriving from
standardization efforts, large-scale adoptions or established
research initiatives. we selected four languages for concep-
tual process modeling (uml ads 2.1.1, eepcs, bpmn 1.2
and bpmn 2.0) and four languages for executable process
modeling (bpmn 2.0, bpel 1.2/2.0, yawl 2.0 and protos
8.0.21). for each language, we also evaluated at least one
supporting modeling editor. for uml ads 2.1.1 we evaluated
sparx enterprise architect 7.1; for eepcs and bpmn 1.2
we evaluated aris 7.1 from software ag and oryx 2.0
beta; for bpmn 2.0 we evaluated oryx 2.0 beta; for bpel
1.2 oracle jdeveloper 11.1.1.1.0; for yawl 2.0 the yawl
editor 2.0 and for protos the protos editor 8.0.2 from pallas
athena. table i shows the results of this analysis, where
tool evaluations are shown next to the evaluations of their
languages, except for protos, where the language cannot be
separated from its implementation because it is vendor speciﬁc
(although based on petri nets). in particular, for a tool the
rationale was to measure the extent by which it facilitates
the support for a pattern, as it is offered by a language.
accordingly, for layout guidance, we decided to rate as ‘-
’ all tools providing limited layout support (e.g. alignment
only). for graphical highlight, we rated jdeveloper ‘+/-’ as
the appearance of model elements cannot be customized. for
pictorial annotation, jdeveloper and protos received a ‘+/-
’ as default icons or images are automatically assigned to
model elements and cannot be customized. for alternative
representation, we rated tools with a ‘+’ only if they provide
a means to replace standard symbols with custom-made ones.
for naming guidance, aris received a ‘+/-’ as it provides
general semantic guidelines for eepc labels but does not offer
renaming capabilities to enforce these guidelines. regarding
languages evaluation, we rated uml ads 2.1, bpmn 1.2/2.0,
yawl 2.0 and protos 8.0.2 ‘+/-’ for explicit representation,
1protos is now part of the bpm jone suite that allows protos models to
be executed. however, the meaningful enactment of such models requires
more modeling efforts, e.g., designing data structures and forms. in most
organizations, protos is mainly used for process modeling and analysis and
not for enactment.as they do not have a graphical representation for some
concepts.
 
 
uml ad 2.1  
enterprise  
architect 7.5  
eepcs  
aris 7.1  
(eepcs)  
oryx 2.0  
(eepcs)  
bpmn 1.2  
aris 7.1  
(bpmn 1.2)  
oryx 2.0  
(bpmn 1.2 /2.0 ) 
bpmn 2.0  
bpel 1.2/2.0 
jdeveloper 
11.1.1.1.0  
yawl 2.0  
yawl  
editor 2.0  
protos 8.0.2    
      	  
                 

 
    
  
              
  
  
 
  
           
    
      

 
       
           
   
 
    

 
       
              
 
   !     
      

     
   
   
  
"

   
    # !     
      
              $ %
 &  
   	  
      
          
table i
evaluation results .
from the table we can make the following observations.
first, as expected, the selected tools generally offer wider
pattern support than the respective languages. consider, for
example, the differences between uml ads and enterprise
architect, between eepcs and aris for eepcs, and between
yawl and the yawl editor. a possible reason is that
languages typically focus on deﬁning the process syntax and
semantics, but not on visualization features that are convenient
in a modeling environment. when implementing support for
these languages in a modeling editor, visualization features
become a major concern. clearly, language support being
equal, the more sophisticated visualization features an editor
can offer, the more competitive it is on the market. second,
the tools that are primarily developed for conceptual process
modeling provide better patterns support than those developed
for executable process modeling. for example, aris fully
supports six patterns, while jdeveloper offers full support for
two patterns only, and partial support for other two patterns.
this can be explained by the fact that the visualization features
in the second class of tools are not the main focus, as opposed
to other features such as data speciﬁcation, role allocation
and application integration. third, we observe an increase
in patterns support from uml ads to eepcs, bpmn 1.2
and ﬁnally to bpmn 2.0. this clearly reﬂects the evolution
of process modeling languages. on the other hand, bpel is
the only language that does not support any pattern. this is
justiﬁed by the fact that bpel does not deﬁne an ofﬁcial
graphical notation. nonetheless, we included bpel in our
analysis for completeness. fourth, the limited support forieee transactions on industrial informatics, vol. x, no. x, x 20xx 8
no
mismatchescreate
newentryenter
invoice
details
enter
customer
detailsreceive
invoicecheck
invoice
details
mismatch
existssend
invoice
block
invoicecheck
invoice
mismatchesinvoice
presentinvoice
notpresent
fig. 8. renaming the activity labels in figure 3 according to the verb-object style.
pictorial annotation can be explained by the fact that, until
recently, such things could not be supported easily. recent
advances in computer graphics make it possible to use pictorial
annotations. moreover, there is a growing need for decorating
process models with attributes familiar to business users (e.g.,
icons). finally, the even less support for naming guidance
derives from the fact that traditionally the development of
modeling languages has not been concerned with the use of
linguistic support such as ontologies. however, we can observe
a growing academic interest in this pattern, as evidenced by
recent publications on the topic.
v. u sability evaluation
in order to evaluate the patterns from a usability perspective,
we turned to the technology acceptance model [13] and
its adaptation to conceptual modeling [34]. in essence, this
theory postulates that actual usage of an information tech-
nology artifact—patterns in the case of this paper—is mainly
inﬂuenced by the perceptions of potential users regarding
usefulness and ease of use. accordingly, a potential user who
perceives a pattern to be useful andeasy to use would be likely
to actually adopt it.
we conducted a series of focus group sessions with profes-
sionals to discuss the patterns. altogether, 15 process modeling
experts participated in these sessions, which took place in
eindhoven and in berlin. while the ﬁve persons in eindhoven
had a consulting background, the ten persons in berlin worked
for vendors of business process modeling tools. on average,
the participants had seven years of experience with process
modeling. they estimated that they had studied about 300
models in the last 12 months, each having on average 20
activities. due to this extensive exposure to process modeling,
they can be considered to be experts.
we used a questionnaire with seven-point scale items
adopted from [34] to measure the participants’ perceptions
on usefulness and ease of use for each of the patterns.
cronbach’s ®was used as an ex post reliability check. the
values determined were 0.92 for usefulness and 0.84 for ease
of use, which both point at a high internal consistency of the
used question items. the boxplots in ﬁgures 9 and 10 display
the outcomes of the data analysis for the patterns’ usefulness
and ease of use respectively. in a boxplot, the median is shown
as a horizontal line in a box representing the interval between
lower and upper quartile.
in figure 9, it can be seen that all patterns are perceived
to be useful (median equals 4 or greater). the patterns that
fig. 9. perceived usefulness of the patterns.
fig. 10. perceived ease of use of the patterns.
receive the highest scores in this respect are patterns 1, 2, and
8. figure 10 shows that ease of use is overall considered even
more positively with median values of 5 or more for all but
patterns 6 and 7. we also recorded statements about the various
patterns in a group discussion, which complemented the quan-
titative assessment. highly useful patterns were emphasized in
this discussion, e.g. a participant from eindhoven commented
on pattern 2 that it is “very often used”. in addition, there
were interesting comments revealing a trade-off that seems toieee transactions on industrial informatics, vol. x, no. x, x 20xx 9
exist with respect to individual pattern usage. for instance, an
eindhoven participant remarked with respect to pattern 5: “i
am very much in favor of keeping all models clean. adding
text makes the view very complex and reduces transparency.”
in a similar vein, a participant from berlin stated that using this
pattern “may lead to semantical problems, since it is easier to
create a note than to model correctly” hinting at likely misuse
of this pattern. also, pattern 3 appears to bear the risk of
being used too excessively, since “overstressing [this pattern]
leads potentially to unreadable models.” while the beneﬁts of
pattern 7 were noted, a participant from berlin stated that it
is “very difﬁcult to explain to beginners. a language should
only provide one way to model a scenario.”
altogether, the focus group sessions reveal that industry
experts found the patterns to be useful and in general easy
to use. many of them, however, have to be applied in a
parsimonious way to live up to their full potential. the experts
stressed that novice modelers need additional training to utilize
the patterns in an efﬁcient and effective way, and that there is
a risk of misuse. finally, the assessments on ease of use might
also reﬂect the experts’ perception of lacking tool support for
applying the patterns at this stage. in this regard, there seems
to be a need for innovations; in particular for the support
of patterns 6 and 7. indeed, these areas are not yet heavily
investigated and require future research.
vi. r elated work
three main benchmarking frameworks have been used
to evaluate process modeling languages: the workﬂow pat-
terns framework [60], bunge, wand and weber’s (bww)
framework [57], and the semiotic quality framework (se-
qual) [29]. the workﬂow patterns provide a language-
independent description of control-ﬂow, resource, data and
exception handling aspects in workﬂow languages. their
development started as a bottom-up, comparative analysis
of process modeling languages and tools, with the purpose
to evaluate their suitability and determine similarities and
differences between them. to date, the workﬂow patterns have
been used to examine the capabilities of numerous process
modeling/workﬂow languages, standards and tools [60]. our
work is complementary to this framework since it describes
recurring features (patterns) to reduce the complexity of pro-
cess models, and can be used for the evaluation of process
modeling languages and tools.
the bww framework refers to wand and weber’s tailoring
and application of bunge’s ontology [10] to information
systems. it was initially used for analysis and comparison of
conceptual modeling languages, and later also used for the
analysis of process modeling languages [51], [47]. however,
the bww framework lacks conceptual structures central to
process modeling such as various types of splits and joins, it-
eration and cancelation constructs, and different forms of con-
currency restrictions. thus, despite its utilization in practice,
its suitability for evaluating process modeling languages can
be questioned. also, its application as a theoretical foundation
for conceptual modeling has been criticized [61].
the sequal framework introduces and reasons about
different aspects relevant to model quality. these aspectsspan different quality notions, including physical, empirical,
syntactic, semantic, pragmatic and social quality. particularly
relevant to our work are the empirical quality, which deals
with readability matters such as graph aesthetics, and the
pragmatic quality, which deals with the understanding of
a model by its audience. sequal has been used for the
evaluation of process modeling languages [56], and has later
been extended to deal speciﬁcally with quality of process
models [30]. nonetheless, the authors themselves acknowledge
sequal’s “disability (sic) to facilitate precise, quantitative
evaluations of models” [30, p. 101]. in contrast, our patterns
collection provides a concrete means to evaluate the pragmatic
and empirical quality of process modeling languages, and can
also be applied to evaluate supporting tools.
our work can be related to [41], where a theory of general
principles for designing cognitive-effective visual notations is
proposed. speciﬁcally, our patterns can be seen as an imple-
mentation of the complexity management principle, which
recommends that a visual notation should include explicit
mechanisms to simplify a model’s appearance. moreover, the
textual annotation pattern can be seen as an implementation
of the dual coding principle, which prescribes the use of
text to complement graphics, while the graphical highlight
pattern can be seen as an implementation of the semantic
transparency principle, which prescribes the use of visual
representations whose appearance suggests their meaning.
our work has also commonalities with cartography. the
ﬁrst geographical maps date back to the 7th millennium
bc. since then cartographers have improved their skills and
techniques to create maps thereby addressing problems such
as clearly representing desired traits, eliminating irrelevant
details, reducing complexity, and improving understandability.
cartographers use colors to highlight important cities and
roads. the thickness of a line representing a road reﬂects its
importance. this corresponds to pattern 3. also, annotations
are used to point out important things, e.g., a road that is
closed during night or a tunnel where users need to pay toll
(cf. patterns 4 and 5).
vii. c onclusion
the main contribution of this paper is a systematic analysis
of concrete syntax modiﬁcations for reducing process model
complexity, as they occur in the literature, in process modeling
languages and tool implementations. the result of this analysis
took the form of a collection of patterns, complemented by
an evaluation of state-of-the-art languages and language im-
plementations in terms of these patterns, and an usability test
with practitioners. the results of the usability test demonstrate
that all identiﬁed patterns are indeed perceived as useful and
easy of use, while the evaluation of languages and tools
shows that there is generally good support for the majority
of these patterns. this collection can be useful for different
process model stakeholders, including those designing and
standardizing process modeling languages (such as bpmn and
uml ads), those developing modeling tools to support such
languages, those currently using a speciﬁc language/tool in
order to evaluate its strengths and weaknesses, and those who
plan to do so.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 10
while one cannot prove that the patterns collection is com-
plete (as there is no reference framework that could be used
for this purpose), conﬁdence about the comprehensiveness of
this patterns collection is derived from a careful survey of the
relevant literature, standards and tools for process modeling.
although some of these patterns may be applied to other
types of models, e.g. data models, our focus was solely on
process models. this pattern-based analysis of the state-of-
the-art in process modeling, identiﬁed relative strengths and
weaknesses among the languages and tools considered. this
analysis may provide a basis for further language and tool
development. for example, contemporary tools could support
naming conventions or guidelines, from both a syntactic and
a semantic perspective, or more, allow modelers to easily
switch between shorthand notations and their full expansions
depending on user preferences.
the evaluation reported in this paper shows whether or not
a given pattern is supported by the various tools. however,
one may be interested in a more accurate evaluation of the
degree of support for each pattern, especially for tool selection
purposes. for example, the majority of tools offer layouting
algorithms. still, some of these algorithms (e.g. the one in
aris) provide better results in terms of elements alignment,
distribution and spacing than others. in order to determine
ﬁner grained pattern support, we plan to conduct experiments
with end users to compare the perceived model understand-
ability after using different tool features (e.g. different layout
algorithms). another aspect worth investigating through ex-
perimentation is which subsets of patterns can be combined
to increase process model understanding. in fact, there might
be cases in which the application of particular combinations of
patterns may actually decrease the understanding of a process
model, e.g. using pictorial annotation with graphical highlight.
our patterns refer to features that affect the concrete syntax
of a process model only, i.e. its visual appearance. the auto-
matic generation of models using process mining techniques
[2] provides new insights on the importance of a model’s
concrete syntax. in fact, process models discovered from event
logs typically tend to be overly complex and thus difﬁcult to
read [21]. in these cases, it is of utmost importance to simplify
the visual representation of such models for the end user. on
the other hand, information extracted from event logs can be
used to enrich the visual appearance of existing process models
(e.g., by highlighting frequent activities and paths). this is yet
another application of the patterns identiﬁed in this paper.
there are however other equally important complexity re-
duction features, e.g. structuring a model, modularizing it into
sub-processes or abstracting from certain modeling elements,
which we left out. although these features also affect the
visual appearance of a process model, they primarily operate
on its abstract syntax and as a result, may lead to changes
in its appearance. a complementing patterns collection that
systematically describes such features is under development.
references
[1]w.m.p. van der aalst. tomtom for business process management
(tomtom4bpm). in caise , volume 5565 of lncs , pages 2–5. springer,
2009.[2]w.m.p. van der aalst. process mining: discovery, conformance and
enhancement of business processes . springer, 2011.
[3]w.m.p. van der aalst and kees m. van hee. workﬂow management:
models, methods, and systems . mit press, 2002.
[4]a.a. abdul, g.k. tieng wei, g.m. muketha, and w.p. wen. complexity
metrics for measuring the understandability and maintainability of
business process models using goal-question-metric (gqm). int. journal
of computer science and network security , 8(5):219–225, 2008.
[5]c. alexander. a pattern language: towns, building and construction .
oxford university press, 1977.
[6]r. alpfelbacher, a. knopfel, p. aschenbrenner, and s. preetz. fmc
visualization guidelines. http://www.fmc-modeling.org/visualization
guidelines, 2006. accessed: nov 2009.
[7]j. becker, p. delfmann, s. herwig, l. lis, and a. stein. towards
increased comparability of conceptual models – enforcing naming
conventions through domain thesauri and linguistic grammars. in
proceedings of ecis , 2009.
[8]j. becker, p. delfmann, and r. knackstedt. adaptive reference
modeling: integrating conﬁgurative and generic adaptation techniques
for information models. in j. becker and p. delfmann, editors, reference
modeling conference , pages 27–58. springer, 2007.
[9]j. becker, m. rosemann, and c. von uthmann. guidelines of business
process modeling. in proc. of bpm , volume 1806 of lncs , pages 30–
49. springer, 2000.
[10] m. bunge. treatise on basic phylosphy volume 3: ontology i – the
furniture of the world . kluwer academic publishers, 1977.
[11] j. cardoso, j. mendling, g. neumann, and h.a. reijers. a discourse
on complexity of process models. in bpm workshops , volume 4103 of
lncs , pages 117–128. springer, 2006.
[12] t. curran and g. keller. sap r/3 business blueprint: understanding
the business process reference model . upper saddle river, 1997.
[13] f.d. davis. perceived usefulness, perceived ease of use, and user
acceptance of information technology. mis quarterly , 13(3):319–340,
1989.
[14] r.b. davis. business process modelling with aris: a practical guide .
springer, 2001.
[15] a. eckleder, t. freytag, j. mendling, and h.a. reijers. realtime
detection and coloring of matching operator nodes in workﬂow nets.
in t. freytag and a. eckleder, editors, algorithms and tools for petri
nets, pages 56–61. ceur, 2009.
[16] p. efﬁnger, m. kaufmann, and m. siebenhaller. enhancing visualizations
of business processes. in ioannis g. tollis and maurizio patrignani, ed-
itors, graph drawing , volume 5417 of lncs , pages 437–438. springer,
2008.
[17] p. efﬁnger, m. siebenhaller, and m. kaufmann. an interactive layout
tool for bpmn. e-commerce technology , 0:399–406, 2009.
[18] r. eshuis and p.w.p.j. grefen. constructing customized process views.
data & knowledge engineering , 64(2):419–438, 2008.
[19] e. gamma, r. helm, r. johnson, and j. vlissides. design patterns: el-
ements of reusable object-oriented software . professional computing
series. addison wesley, reading, ma, usa, 1995.
[20] v . gruhn and r. laue. reducing the cognitive complexity of business
process models. in ieee icci , pages 339–345, 2009.
[21] c.w. g ¨unther and w.m.p. van der aalst. fuzzy mining - adaptive
process simpliﬁcation based on multi-perspective metrics. in proc. of
bpm , volume 4714 of lncs , pages 328–343. springer, 2007.
[22] a.h.m. ter hofstede, w.m.p. van der aalst, m. adams, and n. russell.
modern business process automation: yawl and its support environ-
ment . springer, 2010.
[23] j. huotari, k. lyytinen, and m. niemel ¨a. improving graphical informa-
tion system model use with elision and connecting lines. acm tchi ,
11(1):26–58, 2004.
[24] k. jensen. coloured petri nets. basic concepts, analysis methods and
practical use. eatcs monographs on theoretical computer science.
springer, 1996.
[25] g. keller, m. n ¨uttgens, and a.-w. scheer. semantische processmod-
ellierung auf der grundlage ereignisgesteuerter processketten (epk).
technical report, university of saarland, germany, 1992 (in german).
[26] i. kitzmann, c. k ¨onig, d. l ¨ubke, and l. singer. a simple algorithm for
automatic layout of bpmn processes. in proc. of ieee conference on
commerce and enterprise computing , pages 391–398. ieee computer
society, 2009.
[27] a. knopfel, b. grone, and p. tabeling. fundamental modeling con-
cepts: effective communication of it systems . john wiley & sons,
2006.
[28] k. koffka. principles of gestalt psychology . harcourt, brace and co.,
1935.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 11
[29] j. krogstie, o.i. lindland, and g. sindre. deﬁning quality aspects for
conceptual models. in proc. of isco , pages 216–231, 1995.
[30] j. krogstie, g. sindre, and h. jorgensen. process models representing
knowledge for action: a revised quality framework. eur. j. inf. syst. ,
15(1):91–102, 2006.
[31] r. laue and v . gruhn. technologies for business information systems ,
chapter approaches for business process model complexity metrics,
pages 13–24. springer, 2007.
[32] h. leopold, s. smirnov, and j. mendling. refactoring of process
model activity labels. in proc. of natural language processing and
information systems , lncs, pages 268–276. springer, 2010.
[33] g.l. lohse. a cognitive model for understanding graphical perception.
human-computer interaction , 8:353–388, 1993.
[34] a. maes and g. poels. evaluating quality of conceptual modelling
scripts based on user perceptions. data & knowledge engineering ,
63(3):701–724, 2007.
[35] j. mendling, j. recker, and h.a. reijers. on the usage of labels and
icons in business process modeling. int. journal of information system
modeling and design , 1(2):40–58, 2009.
[36] j. mendling, h.a. reijers, and j. cardoso. what makes process models
understandable? in proc. of bpm , volume 4714 of lncs , pages 48–63.
springer, 2007.
[37] j. mendling, h.a. reijers, and j. recker. activity labeling in process
modeling: empirical insights and recommendations. information sys-
tems, 2009.
[38] j. mendling, h.a. reijers, and w.m.p. van der aalst. seven process
modeling guidelines (7pmg). information and software technology ,
52(2):127–136, 2010.
[39] j. mendling and m. strembeck. inﬂuence factors of understanding
business process models. in proc. of bis , lnbip, pages 142–153.
springer, 2008.
[40] b. meyer. introduction to the theory of programming languages .
prentice-hall, englewood cliffs, new jersey, 1990.
[41] d.l. moody. the “physics” of notations: toward a scientiﬁc basis
for constructing visual notations in software engineering. ieee
transactions on software engineering , 35:756–779, 2009.
[42] omg. business process model and notation (bpmn), ver. 2.0 beta ,
may 2009. http://www.omg.org/cgi-bin/doc?dtc/10-06-04.
[43] omg. business process modeling notation (bpmn),version 1.2 ,
january 2009. http://www.omg.org/docs/formal/09-01-03.pdf.
[44] a. paivio. dual coding theory: retrospect and current status. canadian
journal of psychology , 45(3):255–287, 1991.
[45] m. petre. cognitive dimensions beyond the notation. j. vis. lang.
comput. , 17(4):292–301, 2006.
[46] h.c. purchase. which aesthetic has the greatest effect on human
understanding? in g. di battista, editor, graph drawing , volume 1353
oflncs , pages 248–261. springer, 1997.
[47] j. recker, m. indulska, m. rosemann, and p. green. how good is
bpmn really? insights from theory and practice. in proc. of ecis ,
2006.
[48] j. recker, m. zur muehlen, k. siau, j. erickson, and m. indulska.
measuring method complexity: uml versus bpmn. in amcis , pages
1–12. ais, 2009.
[49] h.a. reijers, t. freytag, j. mendling, and a. eckleder. syntax
highlighting in business process models. decision support systems ,
2011 (doi:10.1016/j.dss.2010.12.013).
[50] m. rosemann. process management: a guide for the design of
business processes , chapter preparation of process modeling, pages 41–
78. springer, 2003.
[51] m. rosemann, j. recker, m. indulska, and p. green. a study of
the evolution of the representational capabilities of process modeling
grammars. in proc. of caise , pages 447–461, 2006.
[52] m. schrepfer, j. wolf, j. mendling, and h.a. reijers. the impact of
secondary notation on process model understanding. in a. persson and
j. stirna, editors, poem , pages 161–175. ifip, 2009.
[53] d. schumm, f. leymann, and a. streule. process viewing patterns.
inenterprise distributed object computing conference (edoc), 2010
14th ieee international , pages 89–98. ieee, 2010.
[54] b. silver. bpmn method & style . cody-cassidy press, 2009.
[55] a. streit, b. pham, and r. brown. visualization support for managing
large business process speciﬁcations. in bpm , volume 3649 of lncs ,
pages 205–219. springer, 2005.
[56] t. wahl and g. sindre. advanced topics in database research ,
volume 5, chapter an analytical evaluation of bpmn using a semiotic
quality framework. igi global, 2006.[57] y . wand and r. weber. on the ontological expressiveness of informa-
tion systems analysis and design grammars. journal of information
systems , 3:217–237, 1993.
[58] b. weber and m. reichert. refactoring process models in large process
repositories. in caise , volume 5074 of lncs . springer, 2008.
[59] m. weske. business process management: concepts, languages,
architectures . springer, 2007.
[60] workﬂow patterns initiative. home page. http://www.workﬂowpatterns.
com. accessed: february 2010.
[61] b. wyssusek. on ontological foundations of conceptual modelling.
scandinavian journal of information systems , 18(1):63–80, 2006.
marcello la rosa is a senior lecturer with the
bpm research group at the queensland university
of technology, brisbane, australia. he obtained his
phd in computer science with the same research
group in 2009. his research interests embrace differ-
ent topics in the bpm area, such as management of
large process model collections, process modeling,
conﬁguration and automation. marcello is a senior
trainer for professional education courses on bpm
and service-oriented architecture topics.
arthur h.m. ter hofstede received his phd in
computer science from the university of nijmegen
in the netherlands in 1993. currently he works as a
professor at the faculty of science & technology of
queensland university of technology in brisbane,
australia. he is co-leader of the bpm research
group in this faculty. he is also a professor in the
information systems group at eindhoven university
of technology in eindhoven, the netherlands. his
main research interests lie in the area of business
process automation. he is involved in both the
workﬂow patterns initiative and the yawl initiative.
petia wohed is an associate professor at the
department of computer and systems sciences at
stockholm university, where she is a member of
the information system laboratory. since her grad-
uation in 2000, wohed’s main interest is in the
area of business process management, in which she
has worked on a series of patterns-based analyses
of modern process modeling languages and open-
source workﬂow systems.
hajo a. reijers is an associate professor in the
information systems group at technische univer-
siteit eindhoven and an afﬁliated professor with
the tias/nimbas business school of tilburg uni-
versity. before that, he worked as a management
consultant for accenture and deloitte. his research
interests cover business process redesign, business
process modeling, workﬂow management technol-
ogy, and simulation. he has published over 75
refereed papers and recently served as the co-chair
of the int. conference on bpm in 2009.ieee transactions on industrial informatics, vol. x, no. x, x 20xx 12
jan mendling is a junior-professor with the insti-
tute of information systems at humboldt-universit ¨at
zu berlin, germany. his research areas include busi-
ness process management, conceptual modeling and
enterprise systems. he has published more than 100
research papers and articles. jan is member of the
editorial board of three international journals. he
served as co-chair for the int. conference on bpm in
2010 and was the initiator of the bpmn workshop
series.
wil m.p. van der aalst is a full professor of
information systems at the technische universiteit
eindhoven and an adjunct professor at queensland
university of technology working within the bpm
group there. his research interests include workﬂow
management, process mining, petri nets, process
modeling and analysis. many of his papers are
highly cited (he has an h-index of more than 75
according to google scholar, making him the dutch
computer scientist with the highest h-index) and his
ideas have inﬂuenced researchers, software develop-
ers, and standardization committees on process support.