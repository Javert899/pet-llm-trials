decision mining in business processes
a. rozinat and w.m.p. van der aalst
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands
{a.rozinat,w.m.p.v.d.aalst }@tm.tue.nl
abstract. many companies have adopted process-aware information systems
(pais) for supporting their business processes in some form. these systems typ-
ically log events (e.g., in transaction logs or audit trails) related to the actual
business process executions. proper analysis of pais execution logs can yield
important knowledge and help organizations improve the quality of their ser-
vices. starting from a process model as it is possible to discover by conventional
process mining algorithms we analyze how data attributes inﬂuence the choices
made in the process based on past process executions. decision mining, also re-
ferred to as decision point analysis, aims at the detection of data dependencies
that aﬀect the routing of a case. in this paper we describe how machine learn-
ing techniques can be leveraged for this purpose, and discuss further challenges
related to this approach. to verify the presented ideas a decision miner has
been implemented within the prom framework.
keywords : business process intelligence, process mining, petri nets, decision trees.
1 introduction
process mining techniques have proven to be a valuable tool in order to gain insight
into how business processes are handled within organizations. taking a set of real
process executions (the so-called “event logs”) as the starting point, these techniques
can be used for process discovery andconformance checking . process discovery [2, 3]
can be used to automatically construct a process model reﬂecting the behavior that
has been observed and recorded in the event log. conformance checking [1, 11] can be
used to compare the recorded behavior with some already existing process model to
detect possible deviations. both may serve as input for a design and improvement of
business processes, e.g., conformance checking can be used to ﬁnd problems in existing
processes and process discovery can be used as a starting point for process analysis
and system conﬁguration. while there are several process mining algorithms dealing
with the control ﬂow perspective of a business process [2] less attention has been paid
to how the value of a data attribute may aﬀect the routing of a case .
most information systems, cf. wfm, erp, crm, scm, and b2b systems, provide
some kind of event log (also referred to as transaction log or audit trail) [2] where an
event refers to a case (i.e., process instance) and an activity, and, in most systems,
also a timestamp, a performer, and some additional data. nevertheless, many process
mining techniques only make use of the ﬁrst two attributes in order to construct aprocess model which reﬂects the causal dependencies that have been observed among
the activities. in addition, machine learning algorithms have become a widely adopted
means to extract knowledge from vast amounts of data [9, 13]. in this paper we explore
the potential of such techniques in order to gain insight into the data perspective of
business processes. the well-known concept of decision trees will be used to carry out a
decision point analysis , i.e., to ﬁnd out which properties of a case might lead to taking
certain paths in the process. starting from a discovered process model (i.e., a model
discovered by conventional process mining algorithms), we try to enhance the model
by integrating patterns that can be observed from data modiﬁcations, i.e., every choice
in the model is analyzed and, if possible, linked to properties of individual cases and
activities.
fig. 1. the approach pursued in this paper
figure 1 illustrates the overall approach. first of all, we assume some process-aware
information system (pais) [5] (e.g., a wfm, crm, erp, scm, or b2b system), that
records some event log. note that this pais may interact with humans, applications,
or services in order to accomplish some business goal. the top-half of figure 1 sketches
the content of such an event log and lists some example systems we have used to obtain
this data from. in the context of the prom framework we have analyzed such event
logs from a wide variety of systems in application domains ranging from health care to
embedded systems. as figure 1 shows the event log may contain information about the
people executing activities (cf. originator column), the timing of these activities, and
the data involved. however, classical process mining approaches (e.g., the α-algorithm
[3]) tend to only use the ﬁrst two columns to obtain some process model. (note that in
figure 1 only a subset of the whole event log is depicted.) the petri net shown in the
middle of the lower half of figure 1 illustrates the result of applying the α-algorithm to
the event log of some survey process. many other process mining algorithms could have
been used to discover this process. moreover, the fact that the result is a petri net is not
2essential, it could have been any other process model (e.g., an epc or uml activity
diagram). what is essential is that the process mining algorithm identiﬁes decision
points. figure 1 highlights one decision point in the survey process. (there are two
additional decision points but for decision mining we focus on one decision point at a
time.) the decision point considered is concerned with the choice between a timeout
activity that leads to the repetition of certain steps in the process (such as re-sending
the survey documents) and a process answer activity that concludes the process. the
petri net shows no information regarding this choice. the goal of decision mining is
to ﬁnd “rules” explaining under which circumstances the timeout activity is selected
rather than the process answer activity. the result is a rule as shown in figure 1.
this decision rule indicates that survey documents sent by letter to the participant
are very often not returned in time, just like documents sent shortly before christmas.
consequently, an extension of the time limit in these cases could help to reduce mailing
expenses.
clearly, the application of (existing) data mining techniques for detecting frequent
patterns in the context of business processes has the potential to gain knowledge about
the process, or to make tacit knowledge explicit. moreover, the type of dependency
which may be discovered is very general. besides data attributes, resource information,
and timestamps, even more general quantitative (e.g., key performance indicators like
waiting time derived from the log) and qualitative (i.e., desirable or undesirable proper-
ties) information could be included in the analysis if available. to directly support data
analysis for business processes we have implemented a decision miner in the context
of the prom framework1, which oﬀers a wide range of tools related to process mining
and process analysis.
the paper is organized as follows. first, section 2 introduces a simple example
process that is used throughout the paper. then, the use of machine learning techniques
in the context of the decision point analysis is discussed in section 3, and the challenges
with respect to this application area are highlighted in section 4. section 5 presents
the decision miner plug-in of the prom framework. finally, related work is discussed
in section 6, and the paper concludes by pointing out future research directions.
2 running example
as depicted in figure 1, the ﬁrst step comprises the application of some process mining
algorithm in order to obtain a process model. figure 2(a) shows an event log in a
schematic way. it has been grouped by instances (according to the case id), and all
information except the executed activities has been been discarded. based on this log
theα-algorithm [3] induces the process model shown in figure 2(b), which in turn
serves as input for the decision mining phase.
the example process used throughout the paper sketches the processing of a liability
claim within an insurance company: at ﬁrst there is an activity where data related to
the claim gets registered ( a), and then either a full check or a policy-only check is
performed ( borc). afterwards the claim is evaluated ( d), and then it is either
1both documentation and software (including the source code) can be downloaded from
www.processmining.org .
3rejected ( f) or approved and paid ( gande). finally the case is archived and closed
(h)2.
fig. 2. process mining phase
entering the second stage of the approach we keep the mined process model in
mind and take a closer look at the event log, now also taking data attributes into
account. figure 3 depicts a screenshot of the log in mxml3format. one can observe
that only activities aanddhave data items associated. here a data item within an
audit trail entry is interpreted as a case attribute that has been written, or modiﬁed.
so during the execution of activity “register claim” information about the amount of
money involved ( amount ), the corresponding customer ( customerid ), and the type of
policy ( policytype ) are provided, while after handling the activity “evaluate claim” the
outcome of the evaluation is recorded ( status ). semantically, amount is a numerical
attribute, the customerid is an attribute which is unique for each customer, and both
policytype andstatus are enumeration types (being either “normal” or “premium”,
or either “approved” or “rejected”, respectively).
as illustrated in figure 1 the discovered process model andthe detailed log are the
starting point for the decision mining approach, which is explained in the next section.
3 using decision trees for analyzing choices in business
processes
in order to analyze the choices in a business process we ﬁrst need to identify those parts
of the model where the process is split into alternative branches, also called decision
points (section 3.1). subsequently, we want to ﬁnd rules for following one way or the
other based on data attributes associated to the cases in the event log (section 3.2).
3.1 identifying decision points in a process model
in terms of a petri net, a decision point corresponds to a place with multiple outgoing
arcs. since a token can only be consumed by one of the transitions connected to these
2note that the letters only serve as a shorthand for the actual activity names.
3both the corresponding schema deﬁnition and the promimport framework, which converts
logs from existing (commercial) pais to the xml format used by prom, can be downloaded
from www.processmining.org .
4fig. 3. fragment of the example log in mxml format viewed using xml spy
arcs, alternative paths may be taken during the execution of a process instance. the
process model in figure 2(b) exhibits three such decision points: p0(if there is a token,
either borccan be performed), p2(if there is a token, either eorfcan be executed)
andp3(if there is a token, either forgmay be carried out).
in order to analyze the choices that have been made in past process executions we
need to ﬁnd out which alternative branch has been taken by a certain process instance.
therefore, the set of possible decisions must be described with respect to the event log.
starting from the identiﬁcation of a choice construct in the process model a decision
can be detected if the execution of the activity in the respective alternative branch
of the model has been observed, which requires a mapping from that activity to its
“occurrence footprint” in the event log. so if a process instance contains the given
“footprint” it means that there was a decision for the associated alternative path in
the process. the example model in figure 2(b) has been mined from the given event
log, and therefore all the activity names already correspond to their log event labels.
for example, the occurrence of activity “issue payment” is recorded as “issue payment”
in the log4, which can be directly used to classify the decision made by that process
instance with respect to decision point p2. so, for the time being it is suﬃcient to
consider the occurrence of the ﬁrst activity per alternative branch in order to classify
4note that the two labels match. this is not always the case (e.g., multiple activities may
be logged using the same label or activities may not be logged at all). initially, we assume
that the activity label denotes the associated log event but later we will generalize this to
also allow for duplicate and invisible activities.
5the possible decisions, and we know enough to demonstrate the idea of such decision
point analysis. however, in order to make decision mining operational for real-life
business processes additional complications such as loops need to be addressed. they
are discussed in section 4.
3.2 turning a decision point into a learning problem
having identiﬁed a decision point in a business process we now want to know whether
this decision might be inﬂuenced by case data, i.e., whether cases with certain prop-
erties typically follow a speciﬁc route. machine learning techniques [9] can be used to
discover structural patterns in data based on a set of training instances. for example,
there may be some training instances that either do or do not represent a table, accom-
panied by a number of attributes like height, width, and number of legs. based on these
training instances a machine learning algorithm can “learn” the concept table, i.e., to
classify unknown instances as being a table or not based on their attribute values. the
structural pattern inferred for such a classiﬁcation problem is called a concept descrip-
tion, and may be represented, e.g., in terms of rules or a decision tree (depending on
the algorithm applied). although such a concept description may be used to predict the
class of future instances, the main beneﬁt is typically the insight gained into attribute
dependencies which are “explained” by the explicit structural representation.
using decision point analysis we can extract knowledge about decision rules as
shown in figure 4. each of the three discovered decision points corresponds to one of the
choices in the running example. with respect to decision point p0the extensive check
(activity b) is only performed if the amount is greater than 500 and the policytype is
“normal”, whereas a simpler coverage check (activity c) is suﬃcient if the amount is
smaller than or equal to 500, or the policytype is “premium” (which may be due to
certain guarantees by “premium” member corporations). the two choices at decision
point p2andp3are both guided by the status attribute, which is the outcome of the
evaluation activity (activity d). in the remainder of this section we describe how these
rules can be discovered.
fig. 4. enhanced process model
6the idea is to convert every decision point into a classiﬁcation problem [9, 13, 10],
whereas the classes are the diﬀerent decisions that can be made. as training examples
we can use the process instances in the log (for which it is already known which alter-
native path they have followed with respect to the decision point). the attributes to
be analyzed are the case attributes contained in the log, and we assume that all at-
tributes that have been written before the considered choice construct may be relevant
for the routing of a case at that point. so for decision point p0only the data attributes
provided by activity aare considered (i.e., amount ,clientid , and policytype ), and in
figure 5(a) the corresponding values contained in the log have been used to build a
training example from each process instance (one training example corresponds to one
row in the table). the last column represents the (decision) class, which denotes the
decision that has been made by the process instance with respect to decision point
p0(i.e., whether activity borchas been executed). similarly, figure 5(c) and (e)
represent the training examples for decision point p2and p3, respectively. here, an
additional attribute (i.e., status ) has been incorporated into the data set because it is
provided by activity d, which is executed before p2andp3are reached. furthermore,
theclass column reﬂects the decisions made with respect to decision point p2andp3
(i.e., eorf, and gorf, respectively).
fig. 5. decision points represented as classiﬁcation problems
in order to solve such a classiﬁcation problem there are various algorithms available
[9, 13]. we decided to use decision trees (such as c4.5 [10]), which are among the
most popular of inductive inference algorithms and provide a number of extensions
7that are important for practical applicability. for example, they are able to deal with
continuous-valued attributes (such as the amount attribute), attributes with many
values (such as the clientid attribute), attributes with diﬀerent costs, and missing
attribute values. furthermore, there are eﬀective methods to avoid overﬁtting the data
(i.e., that the tree is over-tailored towards the training examples). a decision tree
classiﬁes instances by sorting them down the tree from the root to some leaf node,
which provides the classiﬁcation of the instance. figure 5(b), (d), and (f) show the
decision trees that have been derived for decision point p0,p2, and p3, respectively.
because of the limited space we cannot provide further details with respect to the
construction of decision trees. but since we rely on existing techniques the interested
reader is kindly referred to [9, 13].
from the decision trees shown in figure 5(b), (d), and (f) we can now infer the
logical expressions that form the decision rules depicted in figure 4 in the following
way. if an instance is located in one of the leaf nodes of a decision tree, it fulﬁlls all the
predicates on the way from the root to the leaf, i.e., they are connected by a boolean
and operator. for example, class bin figure 5(b) is chosen if ( policytype = “normal”)
and ( amount >500). when a decision class is represented by multiple leaf nodes in the
decision tree the leaf expressions are combined via a boolean or operator. for example,
class cin figure 5(b) is chosen if (( policytype = “normal”) and ( amount ≤500))
or ( policytype = “premium”), which can be reduced to ( policytype = “premium”)
or ( amount ≤500).
4 challenges for decision mining in business processes
if we want to apply decision mining to real-life business processes, two important
challenges need to be addressed.
the ﬁrst challenge relates to the quality of data, and the correct interpretation
of their semantics. for example, there might be a loss of data or incorrectly logged
events, which is typically referred to as noise . the analysis (and thus the applied data
mining algorithms) must be suﬃciently robust to deal with “noisy” logs. moreover, the
interpretation of a data attribute, e.g., whether it is relevant, what it actually means,
in what quantities it is measured etc., still needs human reasoning. in fact, human
involvement is inherent to all data mining applications, no matter in what domain.
the techniques cannot be put to work until the problem has been formulated (like a
concrete classiﬁcation problem) and learning instances have been provided (properly
preprocessed, so that the results are likely to exhibit real patterns of interest). for this
reason it will remain a semi-automatic analysis technique, and for a software tool that
“intelligently” supports decision mining it is crucial to oﬀer the full range of adjust-
ment parameters to the business analyst. these parameters include tuning parameters
with respect to the underlying algorithms (such as the degree of noise, which kind of
validation is to be used etc.) and the possibility to include/exclude certain attributes.
the second challenge relates to the correct interpretation of the control-ﬂow se-
mantics of a process model when it comes to classifying the decisions that have been
made. the example process from figure 2(b) is rather simple and does not show more
8advanced issues that must be addressed in order to make decision mining operational
for real-life business processes. in fact, providing a correct speciﬁcation of the possible
choices at a decision point, which can be used to classify learning examples, can be
quite diﬃcult. in the remainder of this section we highlight problems related to the
control-ﬂow semantics of real-life business processes, namely invisible activities ,dupli-
cate activities , and loops , and we point out how they can be solved in order to provide
proper decision mining support through a software tool.
as a ﬁrst step, we need to elaborate on the mapping of an activity in the pro-
cess model onto its corresponding “occurrence footprint” in the log. this mapping is
provided by the labeling function l, which is deﬁned as follows.
deﬁnition 1 (labeling function). lettbe the set of activities in a process model
andla set of log events, then l∈t/negationslash→lis a partial labeling function associating each
activity with at most one (i.e., either zero or one) log event.
as stated in section 3.1, with respect to the example model in figure 2(b) all the
activity names already correspond to their log event labels, and no two activities have
the same label. furthermore, there is no activity in the model that has no log event
associated. however, real-life process models may contain activities that have no cor-
respondence in the log, e.g., activities added for routing purposes only. these activities
are called invisible activities .
deﬁnition 2 (invisible activity). an activity t∈tis called invisible activity iﬀ
t /∈dom(l).
figure 6 shows a fragment of a process model that contains a decision point at the
place p1where each of the alternative paths starts with an invisible activity (denoted
as small activities ﬁlled with black color). since these activities cannot be observed in
the log it means that considering the occurrence of the ﬁrst activity in each alternative
branch is not always suﬃcient in order to classify the possible choices relating to a
decision point.
fig. 6. a decision point involving invisible activities
instead, the occurrence of each of the activities aorbindicates that the ﬁrst (i.e.,
upmost) alternative branch has been chosen during the process execution. similarly,
the occurrence of each of the activities cordindicates the decision for the third
9branch5. so, invisible activities need to be traced until the next visible activities have
been found, which may lead to a set of activities whose occurrences each indicate the
decision for the respective alternative branch.
however, this tracking can also reach too far. looking for visible successors of the
invisible activity which starts the second branch (see figure 6) results in ﬁnding activ-
ityf, whose occurrence, however, does not necessarily indicate that the second branch
had been chosen at p1. since fis preceded by a join construct the ﬁrst or third path
might have been followed as well. similarly, the occurrence of gis not suﬃcient to con-
clude that the fourth branch has been followed. therefore, we stop tracking invisible
activities as soon as a join construct is encountered, and those alternative paths that
cannot be speciﬁed in the described way are discarded from the analysis.
an additional challenge in classifying the possible choices at a decision point with
respect to the log is posed by duplicate activities . they emerge from the fact that
real-life process models often contain multiple activities that have the same log event
associated (i.e., lis not an injective function), which means that their occurrences
cannot be distinguished in the log.
deﬁnition 3 (duplicate activity). an activity t∈tis called duplicate activity iﬀ
∃t/prime∈tt/negationslash=t/prime∧l(t) =l(t/prime).
figure 7 shows a fragment of a process model that contains a decision point where each
of the alternative paths starts with a duplicate activity a, which in the ﬁrst branch is
followed by another duplicate activity b. although duplicate activities (highlighted in
grey color) have an associated log event, its occurrence cannot be used to classify the
possible choices related to a decision point as it could also stem from another activity.
fig. 7. a decision point involving duplicate activities
a possible solution to deal with duplicate activities is to treat them in the same
way as invisible activities, that is, to trace their succeeding activities until either an
unambiguous activity (i.e., a non-duplicate visible activity) or a join construct has
been encountered. with respect to figure 7, therefore, only canddcan be used to
determine which path has been taken by a speciﬁc process instance.
algorithm 1 summarizes how a decision point found in a petri net process model
can be expressed as a set of possible decisions with respect to the log. the starting point
is a place with more than one outgoing arc, i.e., a decision point. then, each of the
outgoing arcs is considered as an alternative branch, and thus as a potential decision
class. if the ﬁrst transition found in such a branch is neither invisible nor duplicate,
5note that, although the activities cand dare in parallel, and therefore will both be
executed, observing the occurrence of one of them is already suﬃcient.
10algorithm 1 recursive method for specifying the possible decisions at a decision point
in terms of sets of log events
determinedecisionclasses :
1:decisionclasses←new empty set
2:while outgoing edges left do
3: currentclass←new empty set
4: t←target transition of current outgoing edge
5: if(t/negationslash= invisible activity) ∧(t/negationslash= duplicate activity) then
6: add l(t) tocurrentclass
7: else
8: currentclass←tracedecisionclass (t)
9: end if
10: ifcurrentclass/negationslash=∅then
11: add currentclass todecisionclasses
12: end if
13:end while
14:return decisionclasses
tracedecisionclass :
1:decisionclass←new empty set
2:while successor places of passed transition left do
3: p←current successor place
4: ifp= join construct then
5: return∅ // (a)
6: else
7: while successor transitions of pleftdo
8: t←current successor transition
9: if(t/negationslash= invisible activity) ∧(t/negationslash= duplicate activity) then
10: add l(t) todecisionclass
11: else
12: result←tracedecisionclass (t)
13: ifresult =∅then
14: return∅ // (a)
15: else
16: result∪decisionclass
17: end if
18: end if
19: end while
20: end if
21:end while
22:return decisionclass // (b)
11the associated log event can be directly used to characterize the corresponding decision
class. with respect to the example model in figure 2(b) this is the case for all three
decision points. following the described procedure decision point p0yields {{b},{c}},
p2yields {{e},{f}}, and p3yields {{f},{g}}.
however, if the ﬁrst transition found in such a branch is an invisible or duplicate
activity, it is necessary to trace the succeeding transitions until either a join construct
has been encountered and the whole decision class is discarded (a) or all the succeed-
ing transitions (or recursively all their succeeding transitions) could be used for the
speciﬁcation of that class (b). with respect to the decision point p1in figure 6 the
described procedure yields {{a, b},{c, d}}. so the second and the fourth branch are
not represented as a decision class since a join construct was encountered before a
visible activity had been reached, and the ﬁrst and the third branch are described as a
set of log events whose occurrence each indicates the respective decision class. finally,
the decision point in figure 7 results in {{d},{c}}, i.e., the duplicate activities were
traced as they could not be used for an unambiguous decision class speciﬁcation.
fig. 8. loop semantics aﬀect the interpretation of decision occurrences
another obstacle to be overcome can be seen in the correct interpretation of the loop
semantics of a process model. figure 8 shows a fragment of a process model containing
three decision points that can all be related to the occurrence of activity band c.
however, as discussed in the remainder, the corresponding interpretations diﬀer from
each other.
decision points contained in a loop (a) multiple occurrences of a decision related
to this decision point may occur per process instance, and every occurrence of b
andcis relevant for an analysis of this particular choice. this means that, opposed
to the procedure described in section 3.2, one process instance can result in more
than one training example for the decision tree algorithm.
decision points containing a loop (b) although a process instance may contain
multiple occurrences of activity band c, only the ﬁrst occurrence of either of
them indicates a choice related to this decision point.
decision points that areloops (c) this choice construct represents a post-test loop
(as opposed to a pre-test loop), and therefore each occurrence of either borcex-
cept the ﬁrst occurrence must be related to this decision point.
this example demonstrates that in the presence of loops it is not suﬃcient to consider
the mere occurrence of activity executions in order to correctly classify the training
examples (i.e., the past process executions that are used to derive knowledge about
12data dependencies). instead, it may be important that a log event xis observed after
log event ybutbefore log event z. similarly, the non-occurrence of a log event can be
as important as its occurrence. therefore, a more powerful speciﬁcation language (e.g.,
some temporal logic) must be developed in order to express such constraints. finally,
the possibility to express non-occurrence also enables the treatment of alternative paths
that are discarded by the current approach. for example, the second branch in figure 6
can be speciﬁed if we are able to say that fhappened but e,c, and ddid not.
5 decision mining with the prom framework
the approach presented in this paper has been implemented as a plug-in for the prom
framework. the decision miner plug-in6determines the decision points contained in a
petri net model7, and speciﬁes the possible decisions with respect to the log while being
able to deal with invisible and duplicate activities in the way described in section 4.
figure 9(a) shows the model view of the decision miner, which provides a visualization
of each decision point with respect to the given process model.
the attribute view shown in figure 9(b) allows for the selection of those attributes
to be included in the analysis of each decision point. here the advantage of a tool
suite like prom becomes visible. the tight integration of further analysis components
available in the framework can be used to add meta data to the event log before start-
ing the actual decision point analysis. for example, a previous performance analysis
evaluating the timestamps of each log event (see figure 1) can provide additional at-
tributes, such as the ﬂow time and waiting time, to speciﬁc activities or the whole
process instance. these attributes then become available for analysis in the same way
as the initial attributes.
while the decision miner formulates the learning problem, the actual analysis is
carried out with the help of the decision tree algorithm j48 provided by the weka
software library [13], which is their implementation of an algorithm known as c4.5
[10]. the parameters view oﬀers the modiﬁcation of the full range of parameters that
are available for the used decision tree algorithm from the weka library.
in addition, the log view provides a means to manually inspect the process instances
categorized with respect to the decisions made at each decision point in the model.
finally, there is the possibility to export the enhanced process model as a colored
petri net (cpn) to a tool called cpn tools [7, 12], which, e.g., enables the subsequent
use of the simulation facilities that are available in cpn tools. however, a detailed
description of the cpn representation is beyond the scope of this paper.
6both the decision miner, which is embedded in the prom framework, and the log
ﬁle belonging to the example process used in this paper can be downloaded from
www.processmining.org .
7note that although only petri net process models are directly supported by the decision
miner, various other process model types (epc, yawl, etc.) are indirectly supported via
conversion tools available in prom.
13fig. 9. screenshots of the the decision miner in prom
146 related work
the work reported in this paper is closely related to [6], where the authors describe
the architecture of the business process intelligence (bpi) tool suite on top of the hp
process manager (hppm). whereas they outline the use of data mining techniques for
process behavior analysis in a broader scope, we show in detail how a decision point
analysis can be carried out also in the presence of duplicate and invisible activities. in [8]
decision trees are used to analyse staﬀ assignment rules. additional information about
the organizational structure is incorporated in order to derive higher-level attributes
(i.e., roles) from the actual execution data (i.e., performers). in [4] the authors aim
at the integration of machine learning algorithms (neural networks) into epc process
models via fuzzy events and fuzzy functions. while this approach may support, e.g.,
a concrete mortgage grant decision process, we focus on the use of machine learning
techniques as a general tool to analyze business process executions.
7 conclusion
in this paper we have highlighted the challenges that underlie the application of ma-
chine learning techniques in order to support the analysis of choices in the context of
business processes. for such an analysis tool it is crucial to provide the greatest possible
ﬂexibility to the business analyst (e.g., with respect to the modiﬁcation of algorithm
parameters, and to the selection and interpretation of data attributes) when applying
these techniques. furthermore, the control ﬂow semantics of the given process model
need to be respected in order to provide meaningful results. finally, a close integration
of the results provided by other analysis techniques (such as performance analysis) is
expected to increase the potential of decision mining in real-life business processes. a
decision miner that analyzes the choice constructs of petri net process models using
decision trees has been developed within the prom framework.
future research plans include the support of further types of process models (such as
epcs), and the provision of alternative algorithms already available in the data mining
ﬁeld (and related software libraries). for example, sometimes a concept description can
be better directly captured in rules than in a decision tree. the reason for this is a
problem known as the replicated subtree problem, which may lead to overly large
decision trees.
finally, the application of data mining techniques in the context of business pro-
cesses can be beneﬁcial beyond the analysis of decisions that have been made. instead,
a free speciﬁcation of the learning problem on the available data can be used to, e.g.,
mine association rules, or to assess potential correlations to the fact that a case does
or does not comply with a given process model (whereas process compliance has been
previously examined by a technique called conformance checking [11]).
acknowledgements
this research is supported by eit and the iop program of the dutch ministry of eco-
nomic aﬀairs. the authors would also like to thank ton weijters, boudewijn van don-
gen, ana karla alves de medeiros, minseok song, laura maruster, christian g¨ unther,
15eric verbeek, monique jansen-vullers, hajo reijers, michael rosemann, huub de beer,
peter van den brand, et al. for their on-going work on process mining techniques.
references
1. w.m.p. van der aalst. business alignment: using process mining as a tool for delta
analysis. in j. grundspenkis and m. kirikova, editors, proceedings of the 5th workshop on
business process modeling, development and support (bpmds’04) , volume 2 of caise’04
workshops , pages 138–145. riga technical university, latvia, 2004.
2. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data and
knowledge engineering , 47(2):237–267, 2003.
3. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: dis-
covering process models from event logs. ieee transactions on knowledge and data
engineering , 16(9):1128–1142, 2004.
4. o. adam, o. thomas, and p. loos. soft business process intelligence — verbesserung von
gesch¨ aftsprozessen mit neuro-fuzzy-methoden. in f. lehner et al., editor, multikonferenz
wirtschaftsinformatik 2006 , pages 57–69. gito-verlag, berlin, 2006.
5. m. dumas, w.m.p. van der aalst, and a.h.m. ter hofstede. process-aware information
systems: bridging people and software through process technology . wiley & sons, 2005.
6. d. grigori, f. casati, m. castellanos, u. dayal, m. sayal, and m.-c. shan. business
process intelligence. computers in industry , 53(3):321–343, 2004.
7. k. jensen. coloured petri nets. basic concepts, analysis methods and practical use .
springer-verlag, 1997.
8. l. t. ly, s. rinderle, p. dadam, and m. reichert. mining staﬀ assignment rules from
event-based data. in c. bussler et al., editor, business process management 2005 work-
shops , volume 3812 of lecture notes in computer science , pages 177–190. springer-verlag,
berlin, 2006.
9. t. m. mitchell. machine learning . mcgraw-hill, 1997.
10. j. r. quinlan. c4.5: programs for machine learning . morgan kaufmann, 1993.
11. a. rozinat and w.m.p. van der aalst. conformance testing: measuring the fit and
appropriateness of event logs and process models. in c. bussler et al., editor, business
process management 2005 workshops , volume 3812 of lecture notes in computer science ,
pages 163–176. springer-verlag, berlin, 2006.
12. a. vinter ratzer, l. wells, h. m. lassen, m. laursen, j. f. qvortrup, m. s. stissing,
m. westergaard, s. christensen, and k. jensen. cpn tools for editing, simulating, and
analysing coloured petri nets. in w.m.p. van der aalst and e. best, editors, applications
and theory of petri nets 2003: 24th international conference, icatpn 2003 , volume
2679 of lecture notes in computer science , pages 450–462. springer verlag, 2003.
13. i. h. witten and e. frank. data mining: practical machine learning tools and techniques,
2nd edition . morgan kaufmann, 2005.
16