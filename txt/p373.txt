business process mining:
an industrial application
w.m.p. van der aalst1, h.a. reijers1, a.j.m.m. weijters1, b.f. van dongen1,
a.k. alves de medeiros1, m. song2;1, and h.m.w. verbeek1
1department of technology management, eindhoven university of technology, p.o.
box 513, nl-5600 mb, eindhoven, the netherlands. w.m.p.v.d.aalst@tm.tue.nl
2dept. of industrial engineering, pohang university of science and technology, san
31 hyoja-dong, nam-gu, pohang, 790-784, south korea.
abstract. contemporary information systems (e.g., wfm, erp, crm,
scm, and b2b systems) record business events in so-called event logs .
business process mining takes these logs to discover process, control,
data, organizational, and social structures. although many researchers
are developing new and more powerful process mining techniques and
software vendors are incorporating these in their software, few of the
more advanced process mining techniques have been tested on real-life
processes. this paper describes the application of process mining in one
of the provincial o±ces of the dutch national public works department,
responsible for the construction and maintenance of the road and water
infrastructure. using a variety of process mining techniques, we analyzed
the processing of invoices sent by the various subcontractors and suppli-
ers from three di®erent perspectives: (1) the process perspective, (2) the
organizational perspective and (3) the case perspective. for this pur-
pose, we used some of the tools developed in the context of the prom
framework. the goal of this paper is to demonstrate the applicability of
process mining in general and our algorithms and tools in particular.
key words : process mining, social network analysis, work°ow management, business
process management, business process analysis, data mining, petri nets.
1 introduction
today, many enterprise information systems store relevant events in some struc-
tured form. for example, work°ow management systems typically register the
start and completion of activities [2]. erp systems like sap log all transactions,
e.g., users ¯lling out forms, changing documents, etc. business-to-business (b2b)
systems log the exchange of messages with other parties. call center packages
but also general-purpose crm systems log interactions with customers. these
examples show that many systems have some kind of event log often referred
to as \history", \audit trail", \transaction log", etc. [5, 8, 19, 39]. the event log
typically contains information about events referring to an activity and a case.
the case (also named process instance ) is the \thing" which is being handled,
e.g., a customer order, a job application, an insurance claim, a building permit,etc. the activity (also named task,operation ,action , orwork-item ) is some op-
eration on the case. typically, events have a timestamp indicating the time of
occurrence. moreover, when people are involved, event logs will characteristi-
cally contain information on the person executing or initiating the event, i.e.,
theperformer .
besides the availability of event logs there is an increased interest in monitor-
ing business processes. on the one hand, new legislation such as the sarbanes-
oxley (sox) act [38] and increased emphasis on corporate governance is forcing
organizations to follow their business activities more closely [22]. on the other
hand, there is a constant pressure to improve the performance and e±ciency
of business processes. this requires more ¯ne-grained monitoring facilities as is
illustrated by today's buzzwords such as bam (business activity monitoring),
bom (business operations management), and bpi (business process intelli-
gence). however, the functionality o®ered by tools such as cognos and busi-
nessobjects is limited to simple performance indicators such as °ow time and
utilization. unfortunately, most of these systems do not focus on causal and dy-
namic dependencies in processes and organizations. one of the few commercial
software tools adopting a more process-oriented view on monitoring is the aris
process performance monitor (aris ppm) [23].
business process mining , orprocess mining for short, aims at the automatic
construction of models explaining the behavior observed in the event log. for
example, based on some event log, one can construct a process model expressed
in terms of a petri net. over the last couple of years many tools and tech-
niques for process mining have been developed [1, 4, 5, 7, 8, 12, 21, 23, 30, 39, 44].
although process mining is very promising, most of the techniques make assump-
tions which do not hold in practical situations. for example, some techniques
assume that there is no noise and have di±culties dealing with exceptions. other
approaches are limited to processes having a particular structure. therefore, it
is important to confront existing tools and techniques with event logs taken
from real-life applications. in this paper we describe a case study based on a log
of the process of handling invoices in a provincial o±ce of the dutch national
public works department . this o±ce is one of twelve o±ces, employing about
1,000 civil servants. the o±ce is responsible for the construction and mainte-
nance of the road and water infrastructure in its province, and in order to do
this it subcontracts work to various parties such as road construction compa-
nies, cleaning companies, and environmental bureaus. also, the provincial o±ce
purchases services and products to support its construction, maintenance, and
administrative activities. we have used an event log containing information on
more than 14,000 invoices as a starting point for mining the process perspec-
tive (how?), the organizational perspective (who?), and the case perspective
(what?). (these perspectives are presented in detail in section 3.) the results
are reported in this paper and demonstrate the applicability of our tools in an
industrial setting.
the remainder of this paper is organized as follows. section 2 brie°y dis-
cusses related work. section 3 introduces the concept of business process mining
2and section 4 discusses the prom framework used for the case study. section 5
describes the case study. sections 6, 7, and 8 present the results of mining the
process, organizational, and case perspective of the invoice handling process.
section 9 re°ects on these results and concludes the paper.
2 related work
in our case study we analyze the event log generated by the work°ow manage-
ment system (wfms) of the organization involved. clearly, most of the work°ow
literature [2, 24, 28] has been focusing on modeling, veri¯cation, simulation, and
enactment rather than process mining. the idea of applying process mining in
the context of work°ow management was ¯rst introduced in [8]. cook and wolf
have investigated similar issues in the context of software engineering processes
using di®erent approaches [12]. herbst and karagiannis also address the issue of
process mining in the context of work°ow management using an inductive ap-
proach [21]. they use stochastic task graphs as an intermediate representation
and generate a work°ow model described in the adonis modeling language.
the®algorithm [7] can be seen as the ¯rst algorithm to truly capture concur-
rency in business processes. this algorithm was proven to be correct for a large
class of processes [7], but like most other techniques it has problems in dealing
with noise and incompleteness. therefore, we developed the heuristic approach
used in this paper [43, 44].
the focus of this paper is not limited to the control-°ow perspective. in the
case study we also investigate the organizational perspective. this work uses
social network analysis (sna) [40, 42] techniques and tools. sna can be seen
as part of sociometry, the roots of which can be found in the early work of
moreno [29]. although sna has been around for a long time, recently its ap-
plication increased because of the availability and widespread use of electronic
communication and information facilities. for example, several studies have gen-
erated sociograms from email logs [15{17, 31, 33] to analyze the communication
structure inside or between organizations. such studies have resulted in the iden-
ti¯cation of relevant, recurrent aspects of interaction in organizational contexts
[10, 17]. however, these studies are unable to relate the derived social networks
to a particular business process, as the analyzed data does not reveal to what
activity or case it applies. this paper builds on the results presented in [3, 4]
where sna is related to process mining.
as indicated in the introduction, business process mining can be seen in the
broader context of business (process) intelligence (bpi) and business activity
monitoring (bam). in [18, 19, 39] a bpi toolset on top of hp's process manager
is described. the bpi toolset includes a so-called \bpi process mining engine".
in [30] zur mä uhlen describes the pisa tool which can be used to extract perfor-
mance metrics from work°ow logs. similar diagnostics are provided by the aris
process performance manager (ppm) [23]. the latter tool is commercially avail-
able and a customized version of ppm is the sta®ware process monitor (spm)
[41] which is tailored towards mining sta®ware logs.
3for more information on process mining we refer to a special issue of com-
puters in industry on process mining [6] and a survey paper [5]. given the scope
of this paper, we are unable to provide a complete listing of the many papers on
process mining published in recent years. however, in the next section we give
a brief overview of the ¯eld.
3 business process mining: an overview
the goal of process mining is to extract information about processes from trans-
action logs [5]. we assume that it is possible to record events such that (i) each
event refers to an activity (i.e., a well-de¯ned step in the process), (ii) each event
refers to a case (i.e., a process instance), (iii) each event can have a performer
also referred to as originator (the person executing or initiating the activity),
and (iv) events have a timestamp and are totally ordered. table 1 shows an ex-
ample of a log involving 19 events, 5 activities, and 6 originators. in addition to
the information shown in this table, some event logs contain more information
on the case itself, i.e., data elements referring to properties of the case. for ex-
ample, the case handling system flower [34] logs every modi¯cation of every
data element.
table 1. an event log.
case id activity id originator timestamp
case 1 activity a john 9-3-2004:15.01
case 2 activity a john 9-3-2004:15.12
case 3 activity a sue 9-3-2004:16.03
case 3 activity b carol 9-3-2004:16.07
case 1 activity b mike 9-3-2004:18.25
case 1 activity c john 10-3-2004:9.23
case 2 activity c mike 10-3-2004:10.34
case 4 activity a sue 10-3-2004:10.35
case 2 activity b john 10-3-2004:12.34
case 2 activity d pete 10-3-2004:12.50
case 5 activity a sue 10-3-2004:13.05
case 4 activity c carol 11-3-2004:10.12
case 1 activity d pete 11-3-2004:10.14
case 3 activity c sue 11-3-2004:10.44
case 3 activity d pete 11-3-2004:11.03
case 4 activity b sue 14-3-2004:11.18
case 5 activity e clare 17-3-2004:12.22
case 5 activity d clare 18-3-2004:14.34
case 4 activity d pete 19-3-2004:15.56
event logs such as the one shown in table 1 are used as the starting point
for mining. we distinguish three di®erent perspectives: (1) the process perspec-
4tive (\how?"), (2) the organizational perspective (\who?") and (3) the case
perspective (\what?").
theprocess perspective focuses on the control-°ow, i.e., the ordering of ac-
tivities. the goal of mining this perspective is to ¯nd a good characterization
of all possible paths, e.g., expressed in terms of a petri net [36] or event-driven
process chain (epc) [26].
theorganizational perspective focuses on the originator ¯eld, i.e., which per-
formers are involved and how are they related. the goal is to either structure
the organization by classifying people in terms of roles and organizational units
or to show relations between individual performers (i.e., build a social network
[29, 32, 40, 42]).
thecase perspective focuses on properties of cases. cases can be characterized
by their path in the process or by the originators working on a case. however,
cases can also be characterized by the values of the corresponding data elements.
for example, if a case represents a replenishment order, it may be interesting to
know the supplier or the number of products ordered.
ab
cd e(a) the control-flow structure expressed in terms of a petri net.
(b) the organizational structure expressed in
terms of a activity-role-performer diagram.john sue mike carol pete clarerole x role y role zjohn sue
mike
carol peteclare
(c) a sociogram based on transfer of work.
fig. 1. some mining results for the process perspective (a) and organizational (b and
c) perspective based on the event log shown in table 1.
to illustrate the ¯rst two perspectives consider figure 1. the log shown in
table 1 contains information about ¯ve cases (i.e., process instances). the log
5shows that for four cases (1, 2, 3, and 4) the activities a, b, c, and d have been
executed. for the ¯fth case only three activities are executed: activities a, e,
and d. each case starts with the execution of a and ends with the execution of
d. if activity b is executed, then also activity c is executed. however, for some
cases activity c is executed before activity b. based on the information shown
in table 1 and by making some assumptions about the completeness of the log
(i.e., assuming that the cases are representative and a su±cient large subset
of possible behaviors is observed), we can deduce the process model shown in
figure 1(a). the model is represented in terms of a petri net [36]. the petri
net starts with activity a and ¯nishes with activity d. these activities are
represented by transitions. after executing a there is a choice between either
executing b and c in parallel or just executing activity e. note that for this
example we assume that two activities are in parallel if they appear in any order.
by distinguishing between start events and complete events for activities it is
possible to explicitly detect true parallelism, i.e., concurrent execution of tasks.
figure 1(a) does not show any information about the organization, i.e., it
does not use any information on the people executing activities. however, ta-
ble 1 shows information about the performers. for example, we can deduce that
activity a is executed by either john or sue, activity b is executed by john,
sue, mike or carol, c is executed by john, sue, mike or carol, d is executed by
pete or clare, and e is executed by clare. we could indicate this information in
figure 1(a). the information could also be used to \guess" or \discover" organi-
zational structures. for example, a guess could be that there are three roles: x,
y, and z. for the execution of a role x is required and john and sue have this
role. for the execution of b and c role y is required and john, sue, mike and
carol have this role. for the execution of d and e role z is required and pete
and clare have this role. for ¯ve cases these choices may seem arbitrary but for
larger data sets such inferences capture the dominant roles in an organization.
the resulting \activity-role-performer diagram" is shown in figure 1(b). the
three \discovered" roles link activities to performers. figure 1(c) shows another
view on the organization based on the transfer of work from one individual to an-
other, i.e., not focusing on the relation between the process and individuals but
on relations among individuals (or groups of individuals). consider for example
table 1. although carol and mike can execute the same activities (b and c),
mike is always working with john (cases 1 and 2) and carol is always working
with sue (cases 3 and 4). probably carol and mike have the same role but based
on the small sample shown in table 1 it seems that john is not working with
carol and sue is not working with mike.1these examples show that the event
log can be used to derive relations between performers of activities, thus result-
ing in a sociogram. for example, it is possible to generate a sociogram based on
the transfers of work from one individual to another as is shown in figure 1(c).
each node represents one of the six performers and each arc represents that there
1clearly the number of events in table 1 is too small to establish these assumptions
accurately. however, for the sake of argument we assume that the things that did
not happen will never happen.
6has been a transfer of work from one individual to another. there is a \transfer
of work from a to b" if, for the same case, an activity executed by a is directly
followed by an activity executed by b. for example, both in case 1 and 2 there is
a transfer from john to mike. figure 1(c) does not show frequencies. however,
for analysis purposes these frequencies can be added. the arc from john to mike
would then have weight 2. (typically, we do not use absolute frequencies but
weighted frequencies to get relative values between 0 and 1.) figure 1(c) shows
that work is transferred to pete but not vice versa. mike only interacts with
john and carol only interacts with sue. clare is the only person transferring
work to herself.
besides the \how?" and \who?" question (i.e., the process and organization
perspectives), there is the case perspective that is concerned with the \what?"
question. figure 1 does not address this. in fact, focusing on the case perspec-
tive is most interesting when also data elements are logged but these are not
listed in table 1. the case perspective looks at the case as a whole and tries to
establish relations between the various properties of a case. note that some of
the properties may refer to the activities being executed, the performers working
on the case, and the values of various data elements linked to the case. using
clustering algorithms it would for example be possible to show a positive corre-
lation between the size of an order or its handling time and the involvement of
speci¯c people.
orthogonal to the three perspectives (process, organization, and case), the
result of a mining e®ort may refer to logical issues and/or performance issues.
for example, process mining can focus on the logical structure of the process
model (e.g., the petri net shown in figure 1(a)) or on performance issues such
as °ow time. for mining the organizational perspectives, the emphasis can be
on the roles or the social network (cf. figure 1(b) and (c)) or on the utilization
of performers or execution frequencies.
4 prom: a process mining framework
as indicated in the introduction the functionality of commercial tools is typi-
cally limited to measuring and analyzing performance indicators such as °ow
times, failure rates, and frequencies. as shown in the previous section, process
mining involves the construction of models and is not limited to simple metrics.
although buzzwords such as bam (business activity monitoring), bom (busi-
ness operations management), and bpi (business process intelligence) suggest
di®erently, commercial systems are typically unable to discover non-trivial mod-
els. in the last 5 years, several mining tools have been developed at eindhoven
university of technology, e.g., emit [1], thumb [44], and mison [4]. these
tools refer to di®erent perspectives and use di®erent mining techniques. how-
ever, they work on the same type of event logs and may create similar types of
models. therefore, these tools have been integrated in the prom framework [14].
7fig. 2. screenshot of prom showing two plug-ins applied to the event log shown in
table 1.
the prom framework has been developed as a completely plug-able environ-
ment. it can be extended by simply adding plug-ins, i.e., there is no need to
know or recompile the source code. currently, more than 90 plug-ins have been
added. the most interesting plug-ins are the mining plug-ins and the analysis
plug-ins. the architecture of prom allows for ¯ve di®erent types of plug-ins:
mining plug-ins which implement some mining algorithm, e.g., mining algo-
rithms that construct a petri net based on some event log.
export plug-ins which implement some \save as" functionality for some ob-
jects (such as graphs). for example, there are plug-ins to save epcs, petri
nets, spreadsheets, etc.
import plug-ins which implement an \open" functionality for exported ob-
jects, e.g., load instance-epcs from aris ppm.
analysis plug-ins which typically implement some property analysis on some
mining result. for example, for petri nets there is a plug-in which constructs
place invariants, transition invariants, and a coverability graph.
conversion plug-ins which implement conversions between di®erent data for-
mats, e.g., from epcs to petri nets.
earlier tools such as emit [1], thumb [44], and mison [4] have been refactored
as plug-ins in the prom framework. figure 2 shows a screenshot of prom. note
that one plug-in shows the discovered process model in terms of a petri net. this
petri net is identical to the one shown in figure 1(a). the other plug-in shows
the sociogram also depicted in figure 1(c). both models have been constructed
automatically from the event log shown in table 1.
8fig. 3. the mxml format for process mining (xml schema).
the prom import can be used to import event logs from various systems (e.g.,
sta®ware and flower) such that they can be analyzed using prom. prom uses
a standard xml format, named mxml [13]. in our case study the proprietary
format of the work°ow management system used by provincial o±ce was mapped
onto the xml format. therefore, we discuss the format in some more detail.
understanding the format is also important for understanding the applicability
of prom.
figure 3 illustrates the standard xml format. the source element contains
the information about software or system that was used to record the log. the
process element represents one process holding multiple cases. the processin-
stance elements correspond to cases. one processinstance element may hold
multiple audittrailentry elements. each of these elements represents an event,
i.e., one line in a table like table 1. each audittrailentry element may contain
work°owmodelelement ,eventtype ,timestamp , and originator elements. the
work°owmodelelement andeventtype are mandatory elements as shown in fig-
ure 3. the work°owmodelelement element refers to an activity, a subprocess,
or some other routing element in the process model. the eventtype element can
be used to record the type of event (e.g., the start or completion of an activity
or some exceptional behavior like the cancellation of a case). table 1 does not
show any event types. however, one can always use the default event type com-
plete. the timestamp element can be used to record the time of occurrence. the
originator element refers to the performer, e.g., the person executing the corre-
sponding activity. to make the format more expressive, we de¯ne data element
that can be used at various levels (i.e., work°owlog ,process ,processinstance ,
9andaudittrailentry level). if users want to specify additional information, this
can be recorded using the data element (e.g., data elements linked to cases).
in the subsequent sections we will provide more information on the mining
tools we are using in this case study but ¯rst we provide more information on
the case study itself.
5 the public works department
the industrial application in this paper involves one of the twelve provincial
o±ces of the dutch national public works department. in the netherlands this
department is referred to as \rijkswaterstaat", abbreviated as \rws". like
all other rws o±ces, the particular o±ce studied here is primarily responsible
for the construction and maintenance of the road and water infrastructure in its
province. about 1,000 civil servants work for this o±ce. to perform its functions,
the rws o±ce subcontracts various parties such as road construction companies,
cleaning companies, and environmental bureaus. also, it purchases services and
products to support its construction and maintenance activities on the one hand
(e.g., mechanical tools, fuel, and rasters) and its administrative activities on the
other (e.g., o±ce supplies). in 2001, the rws o±ce processed 20,000 invoices
from various subcontractors and suppliers.
before 2001, the twelve provincial o±ces maintained 18 di®erent process
versions to handle the various invoices. this diversity made it di±cult and time-
consuming to update all local payment processes to adhere to changing national
regulations. in addition, the performance of all these di®erent process versions
varied. an important performance indicator for the processing of invoices is the
timeliness of payment. for legitimate invoices holds that payment should take
place within 31 days from the moment the invoice was received. after this period,
the creditor is entitled (on the basis of dutch law) to receive interest over the
outstanding sum. clearly, a slack payment attitude negatively in°uences the
¯nancial position of an rws o±ce. for the o±ce studied in this particular case,
it became clear that the norms for payment timeliness were not met (see table 2).
as shown, the norm states that 90% or more of the invoices must be payed before
the appointed time of 31 days, a maximum of 5% should be paid within 31 to
62 days, and again up to a maximum of 5% may be paid after 62 days. in the
second column, the actual performance of the rws o±ce in question is given.
table 2. the time until invoices are paid (i.e., norms and actual performance before
the implementation of a work°ow management system).
payment duration (days) norm actual
0¡31 90% 70%
32¡62 5% 22%
63¡ 5% 8%
10in response to these issues, the national rws management decided to unify
invoice processing across the various provincial o±ces in search of e±ciency
gains. the momentum of change was seized to develop a proprietary work°ow
management system to support and further optimize the processing of invoices.
one of the main promises of work°ow technology is that it supposedly speeds
up the processing, by liberating workers from routine work they need for coordi-
nation and by handing out work to exactly the right resources at the right time
[27]. in 2002, the work°ow management system was implemented at the rws
o±ce involved in our case study.
the contact with the rws o±ce was established in 2001, when eindhoven
university of technology in a joint e®ort with deloitte management consultancy
initiated a longitudinal study into the e®ectiveness of work°ow management sys-
tems. the aim of the study - which is still running - is to quantify the contri-
bution of work°ow technology to improved business process performance with
respect to lead time, wait time, service time, and utilization of resources. more
information on this study including its preliminary results can be found in [35].
the rws o±ce expressed its interest in the mentioned study and partici-
pated as one of the 10 dutch organizations where work°ow management e®ec-
tiveness would be measured. during the years 2001 and 2002, information was
gathered for comparison purposes on the performance of the invoice processing,
both before and after the implementation of the work°ow management system.
the data which is analyzed and mined in this paper involves the situation after
which the work°ow management system was implemented. this data was gath-
ered after the system had been running for a number of months (to avoid any
startup e®ects). the management of the provincial o±ce supported this analysis
and was interested to see how mining techniques could contribute to a better
understanding of the performance of the process and perhaps identify opportu-
nities for improvement. therefore, rws provided us with the logs of the invoice
payment process.
the invoice process analyzed in this paper consists of 17 real activities, aside
from logistic steps and splits. the rws event log (or `rws log' for short) con-
tains 14,279 cases. the total number of logged events is 147,579 and 487 employ-
ees participated in the process execution. figure 4 shows a snippet of the rws
log. the left-hand side shows the native format of the work°ow management
system used by the rws o±ce. the right-hand side shows the same log in the
mxml format described in section 4.
6 mining the process perspective
as indicated before, we will analyze the rws log from three perspectives. in
this section, we focus on the process perspective , also known as the control-°ow
perspective. before presenting the results of applying process mining in the case
study, we ¯rst need to tell more about the particular process mining technique
being used.
11fig. 4. a snippet of the rws log in its native format (left) and the mxml format
(right).
for the process perspective, we only consider the case and activity attributes
of an event log, e.g., in table 1 we only need to consider the ¯rst two columns.
to construct a process model like in figure 1(a), we need to be able to discover
causal dependencies and decide on the types of splits and joins. a!wbdenotes
the casual dependency between activities aandb, i.e., ais (directly) followed
bybbutbis not (directly) followed by a. this is indeed the case in table 1.
moreover, a!wc,a!we,b!wd,c!wd, and e!wd. for this
simple example it is easy to discover the causal dependencies, however, for more
realistic logs (such as the rws log) there are two complicating factors:
{completeness
for larger or more complicated processes the log will typically not contain
all possible routes. consider 10 activities which can be executed in parallel.
the total number of interleavings is 10! = 3,628,800. it is not realistic that
each interleaving is present in the log. moreover, certain paths through the
process model may have a low probability and therefore remain undetected.
as a result the log is not complete in the sense that it does not capture all
possible behavior.
{noise
parts of the log may be incorrect, incomplete, or refer to exceptions. events
can be logged incorrectly because of human or technical errors. events can be
missing in the log if some of the activities are manual or handled by another
system/organizational unit. events can also refer to rare or undesired events.
12clearly, exceptions which are recorded only once should not automatically
become part of the regular process model.
to tackle these problems we have chosen to use the heuristic approach de-
scribed in [43, 44]. this approach is relatively robust (i.e., it can deal with noise
and incompleteness) and has options to focus on the main process instead of
trying to model the full details of the behavior reported in the event log. for
a better understanding of the approach we shortly discuss the ideas to discover
causal dependencies in the presence of noise.
we use a frequency based metric to indicate how certain we are that there is
a dependency relation between two activities a and b (notation a)wb). the
basic idea is that if activity a is often directly followed by activity b, but the
opposite (b directly followed by a) never occurs, then there is a high probability
that there is a dependency relation between a and b. below, we ¯rst de¯ne the
)wmetric. after that we will illustrate how we can use this metric in a simple
heuristic in which we search for reliable dependency relations (the a!wb
relation).
lettbe a set of activities, wbe an event log over t, and a; b2t:
{ja >wbjis the number of times a >wboccurs in w(i.e., the number of
times event ais directly followed by event b),
{a)wb=µja >wbj ¡ jb >waj
ja >wbj+jb >waj+ 1¶
first, note that the value of a)wbis always between -1 and 1. some
simple examples demonstrate the rationale behind this de¯nition. if we use this
de¯nition in the situation that, in 5 cases, activity a is directly followed by
activity b but the other way around never occurs, the value of a)wb= 5=6 =
0:833 indicating that we are not completely sure of the dependency relation. after
all, there are only 5 observations and these may correspond to noise. however,
if there are 50 cases in the event log in which a is directly followed by b but the
other way around never occurs, the value of a)wb= 50=51 = 0 :980 indicates
that we are more con¯dent about the causality relation. if there are 50 traces in
which activity a is directly followed by b and noise caused b to follow a once,
the value of a)wbis 49=52 = 0 :94 indicating that we are pretty sure of a
causal relation.
a high a)wbvalue strongly suggests that there is a causal relation be-
tween activities a and b. but what is a high value? what would be a good
threshold to take the decision that b truly depends on a (i.e., a!wbholds)?
such a threshold appears sensitive for the amount of noise, the degree of con-
currency in the underlying process, and the frequency of the involved activities.
on closer inspection, it appears unnecessary to use a threshold value. after
all, we know that each non-initial activity must have at least one other activity
that is its cause, and each non-¯nal activity must have at least one dependent
activity. using this information in a heuristic approach we can limit the search
13and take the best candidate (with the highest a)wbscore)2. this simple
heuristic helps us enormously in ¯nding reliable causality relations even if the
event log contains noise.
although the heuristic formulated above is not complete and has to be ex-
tended to recognize (i) recursion, (ii) short loops, and (iii) the type of joins and
splits (i.e., and or xor) we can now understand the meaning of a statement
like \ a)wb= 0:98" (i.e., the dependency value between activity aandb
calculated equals 0 :98).
applying the approach described above (with default parameter settings) to
the rws log results in the dependency graph of figure 5. each node in the
dependency graph represents an activity. note that the activity names are in
dutch. since these are the names that appear in the log, we cannot change them
without changing the entire log. (figure 5 is generated automatically on the basis
of the event log containing 147,579 events.) the arcs in the graph represent the
causal dependencies.
d:exprwsrws1df.dotbbb
14279
020_contr_betstuk
142801.000|14279|
030_1e_vastlegging
156601.000|14029|
210_afvoeren_betstuk
12360.963|185|050_adm_akkoord
200210.998|15086|
170_parkeer
36180.958|107|
eee
142790.975|194|0.926|272|0.998|1516|
070_pv
165980.999|14014|
0.998|1405|
0.979|237|
080_contract_akkoord
42210.987|2290|0.833|370|160_wachten_op_vpl
1890.975|189| 0.999|2973|
180_verificatie
135891.000|11132|
0.994|729|
0.968|152|0.996|747|110_afhandelen_afw
14390.994|865|
0.978|195|
150_2e_vastlegging
133161.000|13316|0.915|71|0.958|107|
0.998|1391|
0.994|725|
0.978|191|
0.997|1167|
130_aanpassen_code
12360.995|1015|
220_afsluiten
134721.000|12293|0.995|943|0.956|287|
1.000|13472|0.987|365|
0.996|1859|
0.991|569|
0.997|1182|0.969|156|
190_wachten_op_pv
170.783|17|0.915|654|
0.956|221|0.914|409|
200_wachten_op_cf
1290.861|129|0.833|17|
0.996|1179|0.914|31|0.975|189|
0.952|99|0.861|29|
0.783|17|
fig. 5. the resulting dependency graph of applying the mining algorithm with default
parameter settings.
activities bbbandeeein figure 5 are arti¯cially added begin andendactiv-
ities. adding the extra end activity eeemakes it clear that not all instances end
with the intended end activity 220afsluiten ; also, activities 0301evastlegging ,
070pv, and 050admakkoord appear as end-activities. the number in the ac-
tivity box indicates the frequency of that activity (e.g., the frequency of the ¯rst
2or the best candidate plus all candidates with a a)wbscore close (default 95%)
to the value of the best candidate.
14real activity 020contr betstuk is 14,280). the string 1 :000j14029jclose to the
arrow from activity 020contr betstuk to activity 0301evastlegging means
that in the rws log there are 14,029 registrations of activity 020contr betstuk
directly followed by activity 0301evastlegging ; for this reason the calculated
dependency value between this two activities is very high (i.e., 1 :000).
a close observation of figure 5 reveals that there are many loops in the
model, speci¯cally around the activity 170parkeer . the way this activity is
connected with other activities indicates the special status of this activity; after
some discussion with the owners of the process it appears that 170parkeer is
not really an activity but a way to suspend the processing of the case temporar-
ily. with respect to the other loops, many of these re°ect how cases are at times
classi¯ed incorrectly at the start of the process, which then after some time re-
quires a re-evaluation of the case. for example, the case is routed to a department
supposedly managing the involved contract. furthermore, this process involves a
number of checks (e.g., activity 180verificatie ,080contract akkoord ) that
lead to re-iterations in case the quality of processing is not satisfactory.
after discussing the various issues with the process owners of the rws
the decision was taken to concentrate on the main process and to ignore the
suspension facility 170parkeer and all low frequent activities (i.e., activities
with a frequency below 1% of the total number of events (147,579)). this re-
sults in ignoring the following 6 activities: 190wachten oppv(frequency=17),
200wachten opcf(129), 160wachten opvpl(189), 210afvoeren betstuk
(1,226), 130aanpassen code (1,236), and 110afhandelen afw(1,439). the de-
pendency graph resulting from this abstraction is presented in figure 6.
figure 6 gives a good impression of the main °ow (the vertical axis of the
graph) in the rws-process. the relatively high values between vertical bars
(i.e., the \direct followed by" measure) indicate that the process has a strong
sequential character with some alternative paths and some loops. during the
mining of the process also the type of each split and join is discovered. for
instance, the ¯rst split (i.e., after 020contr betstuk ) is an xor-split and the
last join (i.e., before 220afsluiten ) is an xor-join. this information is not
shown in figure 6 but is present and can be used to generate a process model in
terms of a petri net or epc. using the information on splits and joins we can
easily check the quality of the model by trying to parse the material in the log.
an incomplete model (i.e., a model with missing causal dependencies) or errors
in the type of splits and joins will result in parsing errors. the mined model
partly presented in figure 6 (the and/xor information is not presented in the
¯gure) is able to parse 13,465 of the 14,279 cases completely correct. with 814
cases there are parsing problems (i.e., 812 of them leave some enabled activities
and in 101 cases there are activities that can not be parsed). note that the total
sums up to a higher value than 814 because a case can have more than one
parsing problem.
from the perspective of rws, the mining analysis delivered a highly infor-
mative process model. in comparison with the prede¯ned process model that the
work°ow management system uses to operate, the mined model clearly shows
15d:exprwsplaatje41.dotbbb
14279
020_contr_betstuk
142801.000|14279|
030_1e_vastlegging
156601.000|14029|
220_afsluiten
134720.974|184|0.958|115|
050_adm_akkoord
200210.998|15086|
0.981|264|
eee
142790.975|194 |0.998|1516|
0.997|1597|
070_pv
165980.999|14014|
0.986|353|
0.980|251|080_contract_akkoord
42210.987|2290|
0.999|2973|
0.993|725|
180_verificatie
135891.000|11798|
0.973|179|
0.972|176|0.996|747|
0.981|253|
150_2e_vastlegging
133160.997|13316| 0.997|902|
1.000|12401|
1.000|13472|0.987|365|
0.996|1859|
0.992|635|
0.945|86|
0.948|92|0.996|1184|fig. 6. the resulting dependency graph after ignoring the arti¯cial activity
170parkeer and six other low frequent activities.
16the same main °ow of invoices being handled. in this way, infrequently executed
activities can be left out for a better understanding of the process. further-
more, the mined model indicates that many cases will go through loops during
their life-cycle. this in particular cannot be deduced from the prede¯ned process
model which, by its very nature, lacks information on actual behavior.
in the remainder, we focus on the organizational perspective and the case
perspective. we show how we used additional mining analyses to provide more
insight into the nature of the loops shown in figure 6 and their e®ect on the
performance of the process.
7 mining the organizational perspective
in this section, we examine the organizational perspective . in other words, we
focus on \who" performs the di®erent steps and how performers are related. one
of the basic ideas is that relationships between workers may be derived from the
frequency of passing a case from one performer to another. for analyzing such
relationships, the tool mison has been developed [4]. the functionality of mison
has been embedded in the prom framework (see figure 2 for a screenshot). based
on the event logs extracted from these systems, our tool constructs sociograms
that can be used as a starting point for social network analysis (sna) [40, 42].
the derived relationships can be exported in a matrix format and used by most
sna tools, such as agna and netminer. with an sna tool, several techniques
can be applied to analyze social networks, e.g., ¯nd interaction patterns, evaluate
the role of an individual in an organization, etc.
when we consider the rws log, an obvious way to start is to look for direct
hand-overs of work within cases between performers (see the discussion of fig-
ure 1(c) in section 3). from an analysis of the rws log, we can derive a social
network as shown in figure 7. a directed arc between user32 anduser28 , for ex-
ample, represents that on some occasion a case was handed over from user32 to
user28 .3it can easily be veri¯ed that the presented network contains no isolated
nodes.
note that the represented network contains only 43 nodes, all representing
human users, while the original rws log contains 487 performers. for the pur-
pose of clarity, we have decided to select the users that are responsible for the
core of the process. the 43 users as shown take care of 15 out of 17 activities.
the activities not considered in this initial analysis are 070pvand170parkeer .
the former of the two is only performed by project leaders, whose only respon-
sibility in the project is to approve project-related invoices. this is not a major
part of their regular work, while the inclusion of these dozens of project leaders
would make the diagram unreadable. the latter activity, 170parkeer , is not a
real activity, as we explained in the previous section.
some sna diagnostics look at the social network as a whole while others
focus on a single node (i.e., performer). for example, if all other individuals are
3note that, throughout the paper, the real user names are changed into anonymous
identi¯ers like userxx to ensure con¯dentiality and privacy.
17fig. 7. social network based on the handover of work metric.
18in short distance to a given node and all geodesic paths (i.e., the shorted paths
in the graph between two nodes) visit this node, clearly the node is very central
- like a spider in the web. there are di®erent metrics for this intuitive notion
ofcentrality , such as betweenness, in and out closeness, and power [11] of each
node. table 3 shows both the top and bottom ranked performers based on the
betweenness metric (note that the bottom performers in the table all share the
same value). betweenness expresses the extent to which a node lies between all
other pairs of nodes on their geodesic paths. formally, for a node i:
betweenness (i) =gx
j=1; k=1gpaths j!i!k
gpaths j!k
where gis the size of the network, gpaths j!kis the total number of geodesic
paths from node jto node kandgpaths j!i!kis the number of geodesic
paths from node jto node kinvolving node i. in other words, the betweenness
value for a node becomes higher when it is visited more often on a shortest path
between two other points.
table 3. performers having high and low values for betweenness when analyzing the
social network shown in figure 7.
ranking name betweenness
1 user1 0.152
2 user4 0.141
3 user23 0.085
4 user5 0.079
5 user16 0.065
6 user13 0.057
7 user18 0.052
8 user2 0.049
9 user7 0.04
.. .. ..
35 user9 0
36 user20 0
37 user22 0
38 user30 0
39 user35 0
40 user36 0
41 user39 0
42 user41 0
43 user42 0
from the responses of the rws process owners to this analysis, we learned
that, typically, performers with high scores (e.g. user1 anduser4 in table 3)
work for the administrative department in supportive functions. this con¯rms a
19general insight that highly connected people often are assistants. because the ad-
ministrative department is responsible for both the preparation and completion
of the handling of each invoice, its sta® is involved in the handling of each case,
giving them strong ties with other performers. the managers of rws indicated,
however, that not all of the people in these positions were present in the top of
the lists, indicating that having a supportive function is not su±cient in itself
to become highly connected.
the performers with bottom scores could be categorized as follows. first
of all, project leaders were highly represented in the bottom of the lists (e.g.,
user9 ). they play an isolated role in the handling of invoices, normally they
are not involved in any steps other than approving invoices related to their
own projects. second, performers with limited formal veri¯cation responsibilities
could identi¯ed as well (e.g., user22 ).
the second category of relatively unconnected performers could be traced
back to auxiliary logins (e.g., user30 ), used by system administrators and man-
agement to deal with exceptional circumstances. an example of an exception is
an invoice that is being withdrawn while its processing has already started. the
isolated `participation' of this category of users is therefore not very surprising.
it did, however, make the managers conscious of the visibility of this type of ir-
regular interference. one manager remarked: \so, auditors can derive this type
of information too...".
the third category turned out to be more surprising, as it involved senior
positions in the contractual and ¯nancial departments (e.g., user41 ). at least
nominally, they are expected to be actively involved in the process. their low po-
sition could indicate that a large amount of work being executed with a work°ow
management system is delegated to their juniors. also, one of these performers
was about to retire in a couple of weeks, explaining her current low centrality.
so far we only looked at sociograms based on the transfer of work metric
(i.e., the frequency of passing work from one performer to another). however,
we can also use the subcontracting metric which is related to the transfer of work
metric. the main idea behind the subcontracting metric is to count the number
of times individual jexecuted an activity in-between two activities executed by
individual i. in a sense, there is a loop of work between such individuals. this
may indicate that work was subcontracted from itoj. to ¯nd subcontracting
relationships between people, we analyzed the occasions where a direct succession
of contractor and subcontractor takes place with only one event in between the
steps performed by the contractor. figure 8 shows the resulting social network.
in this network, the direction of arcs is important. the start node of an arc
represents a contractor, while the end node of an arc represents a subcontractor.
the displayed network has 43 nodes and 146 links. it also contains 8 nodes
that are isolated from the network, which means they are not involved in a direct
subcontracting relation.
triggered by the many loops uncovered in the process mining analysis (see
section 6) and the social network based on the subcontracting metric, the rws
process owners were interested to learn more about the places in the process
20fig. 8. social network based on subcontracting metric.
where work seemed to circle. after some discussion, they selected four places in
the process where going \back-and-forth" is particularly undesirable. the four
loops of interest, which can all be clearly distinguished in figure 6, are as follows:
{0301evastlegging !050admakkoord !0301evastlegging
{050admakkoord !080contract akkoord !050admakkoord
{050admakkoord !070pv!050admakkoord
{080contract akkoord !070pv!080contract akkoord
each occurrence of this pattern is highly undesirable, as it slows down the
processing of the invoice without any progress being made. note that from an
organizational perspective, it is just as undesirable when the work package is
routed back to the original contractor as to a colleague with a similar organiza-
tional role.
in extending our analysis, it turned out that in the handling of over 17% of
all invoices, at least once an undesired subcontracting takes place at either of the
four identi¯ed places in the process. the exact distribution is shown in figure 9.
as can be seen, there are cases where 10 or more erroneous routings take place.
as this ¯gure seemed rather excessive, we carried out a further analysis.
as it turned out, from the 4,592 cases of undesired loops/subcontracting it
happened 2,087 times (45%) that the routing back was initiated by the work°ow
management system without any human performer initiating this action. this
could be seen in the rws log, since no human performer of an activity was
210%2%4%6%8%10%12%
percentage of
total invoices
1 2 3 4 5 6 7 8 9 >10
number of undesired subcontracting occurences within the handling of a single invoicefig. 9. distribution of undesired loops within the handling of invoices.
registered, but instead a time-out message appeared. the work°ow management
system had been con¯gured in such a way that whenever a step becomes ready
to be executed because a preceding step is completed, it starts keeping track of
the time the case is idle. when this time exceeds a time period of two weeks, the
system passes the case back to the last performer being active on the case. in
the extreme case of the loop 050admakkoord !070pv!050admakkoord ,
this active involvement of the work°ow management system was responsible for
57% of the iterations. so, at least in part, the loops can be explained by an overly
long passivity of performers in combination with the particular con¯guration of
the work°ow management system to act on that automatically. it is interesting to
note here that the performers responsible for 070pvare the project leaders, who
normally operate outside the main rws building where the invoice processing
takes place. as we mentioned before, the approval of invoices amounts to only a
very small part of their work, which is focused on the execution of infrastructural
projects.
based on these insights, the rws management took steps to improve the
process. before we discuss these steps, we will ¯rst show the additional analyses
from a case perspective in the following section. as will be shown, the case per-
spective helped to develop an even better understanding of the looping behavior.
8 mining the case perspective
in this section we will illustrate business process mining from the third and
last perspective: the case perspective . in other words, the emphasis is on the
\what" question in the handling of invoices. focusing on the case perspective
is most interesting when di®erent properties of individual cases are available.
some properties may refer to the activities being executed and the performers
working on a speci¯c case. other properties are directly linked to a case (i.e.,
22independent of the way the case has been processed in the work°ow management
system), such as, for instance, the amount of money of an invoice. however, there
are possibly interesting correlations between the practical processing of a case
and properties directly linked to case. as the mining of data already has a long
tradition, standard knowledge discovering techniques can be used to search for
this kind of relations.
information that could be directly distilled from the rws log relates to the
timeliness of payments now that a work°ow management system is operational
(see table 4). the third column reports the invoice payment results as registered
in the rws log. the other information has been already presented in table 2,
but is repeated for clarity.
table 4. the time until invoices are paid (i.e., norms and actual performance before
and after the implementation of a work°ow management system).
payment duration (days) norm before wfms after wfms
0¡31 90% 70% 84%
32¡62 5% 22% 12%
63¡ 5% 8% 4%
as can be seen, the implementation of the work°ow management system
has accelerated the payment of invoices, but the norms are still not met. this
triggers the following question: \is there is a relation between the time that
an invoice is being payed and the amount of money being involved with the
invoice?". suppose that the payment of invoices with a small amount of money
are the ones that are delayed the most, perhaps because they are considered
as less important. if this is the case, the negative ¯nancial e®ects would not
be so bad for the ¯nancial position of the rws o±ce. after all, the interest
is proportional to the invoice sum. to address this speci¯c question, the spss
tool answer tree was used, resulting in 5 categories (automatically generated
by answer tree) with values as reported in table 5.
table 5. the time of payment related to the amount of money.
time of payment overall ·24 >24·172 >172·1618 >1618·8377 >8377
0¡31 84% 86% 87% 86% 80% 76%
32¡62 12% 10% 11% 11% 15% 15%
63¡ 4% 3% 2% 3% 5% 9%
#n 14043 1403 2810 5619 2807 1404
unfortunately for the rws o±ce in question, it appears that speci¯cally
invoices with a high payment sum - the ones above 1,618 k euro - are delayed
23more strongly than others. it follows from the table that 20% of the cases between
1,618 and 8,377 k euro are paid too late and this is the case for even 24% of the
cases above 8,377 k euro. for the categories with lower payment sums (below
1,618 k euro), overly late payments are between 13% and 14%. an explanation
for this phenomenon may be that people are reluctant to accept the responsibility
for approving an invoice involving a high sum of money. be it as it may, this
clearly illustrates the kind of insight that can be gained from a case analysis. it
also once more emphasizes the need to improve the invoice handling process.
here, we present the further steps taken in the case analysis of the rws log
that follow up on the results of the analyses as presented before. as we identi¯ed
from the mining of the process control °ow, various loops are a signi¯cant part of
the main process, as many cases follow these paths (see section 6). furthermore,
we took a closer look at the performers responsible for the various steps involved
in these loops, in particular considering four speci¯c parts in the process (see
section 7).
by taking a case perspective, in particular by combining the information
on the execution history of speci¯c cases and their corresponding processing
times, we try to gain a deeper understanding of the impact of these loops.
we will once more focus on the loop behavior involving the four activities
0301evastlegging ,050admakkoord ,070pv, and 080contract akkoord .
note that the loops prioritized by the rws process owners themselves are com-
posed of precisely these activities. again, we used answer tree with the three
payment classes (a: ·31, b: ¸32 and ·62, c: ¸63) as the target classi¯-
cation on the one hand and the number of times a case visits one of the four
activities as predictors on the other. all other answer tree parameters are set to
default values. below, we discuss the information in the automatically generated
decision tree.
first of all, activity 050admakkoord appears the best predictor for the
payment classi¯cation (see table 6). this is the activity where the registration
takes place of the invoice's payment sum, the relevant budgets for paying it, and
the required distribution over these budgets. the actual veri¯cation whether
the payment should be done needs then yet to take place. normally, such a
veri¯cation is either done by a project leader in the case that the payment
involves a speci¯c project or by a clerk if the invoice falls within the conditions
of a long-running contract.
table 6. the time of payment distribution related to the number of times activity
050admakkoord is processed.
time of payment overall 0 1 2 >2
0¡31 84% 99% 91% 77% 36%
32¡62 12% 1% 8% 18% 40%
63¡ 4% 0% 1% 5% 24%
#n 14043 364 10680 1782 1218
24from table 6 it clearly follows that when activity 050admakkoord is exe-
cuted twice for a particular case, the probability of the involved payment being
delayed beyond the 31 day limit is much higher (23%) than when this activity is
not executed at all (1%) or just once (9%). if the activity 050admakkoord is pro-
cessed more than two times, the probability of a payment being too late even in-
creases to 64%. note that considering the four places of undesired subcontracting
identi¯ed earlier, the repeated execution of activity 050admakkoord may indi-
cate occurrences of either the loop 050admakkoord !080contract akkoord
!050admakkoord or050admakkoord !070pv!050admakkoord .
it is now interesting to ¯nd out whether it is activity 080contract akkoord
or activity 070pvthat is most related to late payments. these are the two
alternatives for a loop involving 050admakkoord , being the two principal ways
that the actual veri¯cation of the invoice can take place. by examining the lower
leaves of the decision tree, we found that it is in fact activity 070pvthat best
explains these delays in the case that 050admakkoord is processed more than
two times. it is exactly this activity that needs to be executed by the project
leaders, who often work remotely from the rws main o±ce. if the activity
070pvis processed more than two times, the probability of the payment being
too late increases to 75%.
the analysis presented in this section clearly identi¯es how multiple execu-
tions of speci¯c activities contribute to the late processing of invoices. in response
to this insight, the rws process owners informed the project leaders responsi-
ble for executing 070pvon how their purported passivity a®ected the overall
performance of the payment process. recall that the analysis from the organi-
zational perspective already indicated that the work°ow management system
often acted by itself to hand back a case to a previous performer, because the
intended performer of an activity did not respond in time. as it turned out, the
project leaders were not aware of the impact of their actions. they agreed to
give the invoice approval a higher priority in their work load, even though it is
not a core part of their daily work. this nicely illustrates the phenomenon that
performers often do not have a good insight into the wider context of a business
process [20].
9 re°ection and conclusions
in this paper, we presented a case study illustrating the practical application
of process mining. to present the case study we used three perspectives: the
process, organization, and case perspective. as a starting point, we used an
industrial event log extracted from an operational work°ow management system.
this proprietary work°ow management system is being used (amongst others) to
support the process of handling invoices at a local rws o±ce in the netherlands.
we described how one can use a mixture of standard and speci¯c mining tools
to carry out this analysis.
the most important outcome from a process mining perspective was the dis-
covery of the main °ow in the invoice handling process. because the generated
25process model incorporated information on the execution frequencies of activi-
ties, it could clearly be seen that loops in this process are far from exceptional.
inspired by this observation, process mining from an organizational perspective
focused on the subcontracting metric in particular, leading to the identi¯cation
of places in the process where the circling of work is undesirable. by inspecting
these places more closely, the speci¯c roles of two kinds of process performers
were identi¯ed: the work°ow management system itself and the project lead-
ers. additional mining from the case perspective revealed that the various loops
indeed have a great impact on the process performance. it con¯rmed that the
activity that needs to be executed by project leaders, who often work remotely,
is strongly a®ecting the performance of the process in terms of timeliness.
based on this industrial application of process mining, we can make three
important observations . first of all, the practical application of business process
mining is already feasible using the techniques embedded in the prom frame-
work. nonetheless, it seems necessary to take realistic characteristics of event
logs into account, such as e.g. the existence of noise. the successful application
of our heuristics-based mining approach illustrates this point. second, business
process mining is a promising and potentially e®ective way to deal with real
organizational challenges. the results from our analyses enabled the involved
management to formulate and target speci¯c organizational measures. the min-
ing results could be used as an objective support for these measures. as a side
e®ect, process mining made the management aware of the visibility of irregu-
lar behavior. finally, the case study showed that it is worthwhile to combine
di®erent mining perspectives to reach a richer understanding of the process. in
this case, for example, the control °ows revealed the various loops, but it took
an organizational perspective to identify the key players, and a case-oriented
analysis to understand the impact of these loops on the process performance.
in performing this business process mining project, we learned an important
lesson . it seems crucial to be closely involved with the people of the organization
itself to carry out a meaningful analysis. as a small illustration of this point, it
would have been impossible to determine the real value of the oddly connected
activity 170parkeer on the basis of the event log itself (i.e., without direct in-
volvement of the process owner). this activity turned out not to be an activity
at all, but rather a work°ow management system facility to suspend an opera-
tion. more importantly, it took the input of the rws process owners to identify
and prioritize four locations of the process that seemed of interest to subject to
a closer analysis. this certainly helped to speed up the identi¯cation of relevant
results.
furthermore, the case study also showed that process mining also has a num-
ber of obvious limitations . first of all, we can only monitor the events that are
actually logged. this implies that some interactions may not be visible. more-
over, people may ¯nd ways to work around the system. second, the system may
enforce certain interaction patterns. if workers are completely controlled by the
system, the discovered process models and sociograms re°ect the system rather
than the organization. fortunately, most systems o®er a lot of °exibility when
26it comes to the selection and ordering of work-items. even work°ow manage-
ment systems allow for a pull mechanism where workers select work-items from
a shared pool in any order. moreover, other types of process-aware information
systems (e.g., erp, crm, pdm systems) tend to allow for even more °exibility.
finally, it is clear that there are privacy issues that may complicate the appli-
cation of process mining (in particular the organizational perspective). it would
have been relatively easy on the basis of the logged information to determine
which speci¯c individual performers are responsible for the slow processing of
invoices. although this might be important information to optimize the process
further, we did not carry out this analysis. privacy issues, labor contracts, and
other agreements are crucial to determine to what level practical mining analyses
may proceed.
to conclude this paper, we brie°y discuss our plans for future work. we are
currently extending and improving our mining techniques and continue to do so
given the many challenges and open problems. for example, we are developing
genetic algorithms to improve the mining of noisy logs. recently, we added a
lot of new functionality to the prom framework.4therefore, our ¯rst priority
is to apply process mining in a wide variety of practical situations. interesting
application domains that we would like to target (and where we already have
some limited experiences) are:
{health care
the °ow of patients in a hospital and other health-care related processes
could be discovered using process mining. just measuring performance in-
dicators such as °ow times and frequencies does not provide enough insight
in the actual process. e®ective health-care management requires more ¯ne-
grained information that is truly process-oriented. hence process mining
could really help to improve processes here.
{web services
cross-organizational work°ows are enabled by web-services technology, but
also require an agreement on a common process. however, one party cannot
force the other party to work in a certain way. therefore, one can make
agreements and check these or try to discover the behavior of the other
parties involved. process mining can be used to discover the \choreography"
of web-services and detect deviations. this is a way to operationalize the
notion of abstract processes in bpel [9] and choreographies in [25].
{case handling
case handling systems such as flower [34] extend existing work°ow tech-
nology with more °exibility. as a result, users can deviate from the \normal"
°ow of work. process mining can be used to discover and quantify these de-
viations. prom is already able to mine from flower logs and we applied
this in a dutch social security agency. however, we would also like to apply
our tools to the change logs of systems such as adept [37].
4see www.processmining.org for more information and to download the tools used in
this paper.
27related to the application of the prom framework in real-life situations is the
transfer of ideas to commercial tools. in our collaboration with ids scheer some
of our results have been incorporated in aris ppm. we hope that more software
vendors will adopt more of the ideas presented in this paper.
acknowledgements
the authors would like to thank andriy anikolov, laura maruster, anne rozi-
nat, christian gä unther, huub de beer, monique jansen-vullers, michael rose-
mann, and peter van den brand for their on-going work on process mining
techniques and tools at eindhoven university of technology. minseok song vis-
ited eindhoven university of technology with funding by the bk21 program. he
would like to thank the ministry of education of korea for its ¯nancial support
through the bk21 program.
references
1.w.m.p. van der aalst and b.f. van dongen. discovering work°ow performance
models from timed logs. in y. han, s. tai, and d. wikarski, editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45{63.
springer-verlag, berlin, 2002.
2.w.m.p. van der aalst and k.m. van hee. work°ow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
3.w.m.p. van der aalst, h.a. reijers, and m. song. discovering social networks
from event logs. computer supported cooperative work , 14(6):549{593, 2005.
4.w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in j. desel, b. pernici, and m. weske, editors,
international conference on business process management (bpm 2004) , volume
3080 of lecture notes in computer science , pages 244{260. springer-verlag, berlin,
2004.
5.w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. work°ow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237{267, 2003.
6.w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining , special
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
7.w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
8.r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
°ow logs. in sixth international conference on extending database technology ,
pages 469{483, 1998.
9.a. arkin, s. askary, b. bloch, f. curbera, y. goland, n. kartha, c.k. liu,
s. thatte, p. yendluri, and a. yiu. web services business process execution
language version 2.0. ws-bpel tc oasis, 2005.
10.j. begole, j. tang, r. smith, and n. yankelovich. work rhythms: analyzing vi-
sualizations of awareness histories of distributed groups. in c. neuwirth and
t. rodden, editors, proceedings of the 2002 acm conference on computer sup-
ported cooperative work , pages 334{343, new york, ny, usa, 2002. acm press.
2811.p. bonacich. power and centrality: a family of measures. american journal of
sociology , 92:1170{1182, 1987.
12.j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215{249, 1998.
13.b.f. van dongen and w.m.p. van der aalst. a meta model for process mining
data. in j. casto and e. teniente, editors, proceedings of the caise'05 workshops
(emoi-interop workshop) , volume 2, pages 309{320. feup, porto, portugal,
2005.
14.b.f. van dongen, a.k. alves de medeiros, h.m.w. verbeek, a.j.m.m. weijters,
and w.m.p. van der aalst. the prom framework: a new era in process mining
tool support. in g. ciardo and p. darondeau, editors, application and theory
of petri nets 2005 , volume 3536 of lecture notes in computer science , pages
444{454. springer-verlag, berlin, 2005.
15.s. farnham, s.u. kelly, w. portnoy, and j.l.k. schwartz. wallop: designing
social software for co-located social networks. in proceedings of the 37th annual
hawaii international conference on system sciences (hicss'04) . ieee computer
society press, los alamitos, california, 2004.
16.s. farnham, w. portnoy, and a. turski. using email mailing lists to approximate
and explore corporate social networks. in d.w. mcdonald, s. farnham, and
d. fisher, editors, proceedings of the cscw'04 workshop on social networks ,
2004.
17.d. fisher and p. dourish. social and temporal structures in everyday collabo-
ration. in e. dykstra-erickson and m. tscheligi, editors, proceedings of the 2004
conference on human factors in computing systems (chi2004) , pages 551{558,
new york, ny, usa, 2004. acm press.
18.d. grigori, f. casati, m. castellanos, u. dayal, m. sayal, and m.c. shan. business
process intelligence. computers in industry , 53(3):321{343, 2004.
19.d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,
p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors, proceedings of 27th international conference on very large data bases
(vldb'01) , pages 159{168. morgan kaufmann, 2001.
20.m. hammer and j. champy. reengineering the corporation . nicolas brealey pub-
lishing, london, 1993.
21.j. herbst. a machine learning approach to work°ow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183{194. springer-verlag, berlin, 2000.
22.t. ho®man. sarbanes-oxley sparks forensics apps interest: vendors o®er moni-
toring tools to help identify incidents of financial fraud. computerworld , 38:14{
14, 2004.
23.ids scheer. aris process performance manager (aris ppm): measure, ana-
lyze and optimize your business process performance (whitepaper). ids scheer,
saarbruecken, gemany, http://www.ids-scheer.com, 2002.
24.s. jablonski and c. bussler. work°ow management: modeling concepts, architec-
ture, and implementation . international thomson computer press, london, uk,
1996.
25.n. kavantzas, d. burdett, g. ritzinger, t. fletcher, and y. lafon. web services
choreography description language version 1.0(w3c working draft 17 december
2004). http://www.w3.org/tr/2004/wd-ws-cdl-10-20041217/, 2004.
2926.g. keller and t. teufel. sap r/3 process oriented implementation . addison-
wesley, reading ma, 1998.
27.p. lawrence, editor. work°ow handbook 1997, work°ow management coalition .
john wiley and sons, new york, 1997.
28.f. leymann and d. roller. production work°ow: concepts and techniques .
prentice-hall ptr, upper saddle river, new jersey, usa, 1999.
29.j.l. moreno. who shall survive? nervous and mental disease publishing com-
pany, washington, dc, 1934.
30.m. zur mä uhlen and m. rosemann. work°ow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1{10. ieee computer society press, los alamitos, california, 2000.
31.b.a. nardi, s. whittaker, e. isaacs, m. creech, j. johnson, and j. hainsworth.
integrating communication and information through contactmap. communica-
tions of the acm , 45(2):89{95, 2002.
32.h. nemati and c.d. barko. organizational data mining: leveraging enterprise
data resources for optimal performance . idea group publishing, hershey, pa,
usa, 2003.
33.h. ogata, y. yano, n. furugori, and q. jin. computer supported social net-
working for augmenting cooperation. computer supported cooperative work ,
10(2):189{209, 2001.
34.pallas athena. flower user manual . pallas athena bv, apeldoorn, the nether-
lands, 2002.
35.h.a. reijers and w.m.p. van der aalst. the e®ectiveness of work°ow manage-
ment systems: predictions and lessons learned. international journal of infor-
mation management , 25(5):458{472, 2005.
36.w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
37.s. rinderle, m. reichert, and p. dadam. correctness criteria for dynamic
changes in work°ow systems: a survey. data and knowledge engineering ,
50(1):9{34, 2004.
38.p. sarbanes and g. oxley et. al. sarbanes-oxley act of 2002, 2002.
39.m. sayal, f. casati, u. dayal, and m.c. shan. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb'02) ,
pages 880{883. morgan kaufmann, 2002.
40.j. scott. social network analysis . sage, newbury park ca, 1992.
41.tibco. tibco sta®ware process monitor (spm). http://www.tibco.com, 2005.
42.s. wasserman and k. faust. social network analysis: methods and applications .
cambridge university press, cambridge, 1994.
43.a.j.m.m. weijters and w.m.p. van der aalst. work°ow mining: discovering
work°ow models from event-based data. in c. dousson, f. hä oppner, and
r. quiniou, editors, proceedings of the ecai workshop on knowledge discovery
and spatial data , pages 78{84, 2002.
44.a.j.m.m. weijters and w.m.p. van der aalst. rediscovering work°ow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.
30