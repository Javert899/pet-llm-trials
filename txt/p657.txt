comparing business processes to determine the
feasibility of conﬁgurable models: a case study
j.j.c.l. v ogelaar, h.m.w. verbeek, b. luka, and w.m.p van der aalst
technische universiteit eindhoven
department of mathematics and computer science
p.o. box 513, 5600 mb eindhoven, the netherlands
{h.m.w.verbeek,w.m.p.v.d.aalst}@tue.nl
abstract. organizations are looking for ways to collaborate in the area of pro-
cess management. common practice until now is the (partial) standardization of
processes. this has the main disadvantage that most organizations are forced to
adapt their processes to adhere to the standard. in this paper we analyze and
compare the actual processes of ten dutch municipalities. conﬁgurable process
models provide a potential solution for the limitations of classical standardiza-
tion processes as they contain all the behavior of individual models, while only
needing one model. the question rises where the limits are though. it is ob-
vious that one conﬁgurable model containing all models that exist is undesir-
able. but are company-wide conﬁgurable models feasible? and how about cross-
organizational conﬁgurable models, should all partners be considered or just cer-
tain ones? in this paper we apply a similarity metric on individual models to
determine means of answering questions in this area. this way we propose a
new means of determining beforehand whether conﬁgurable models are feasible.
using the selected metric we can identify more desirable partners and processes
before computing conﬁgurable process models.
key words: process conﬁguration, yawl, coselog, model merging
1 introduction
the results in this paper are based on 80 process models retrieved for 8 different busi-
ness processes from 10 dutch municipalities. this was done within the context of the
coselog project [1, 5]. this project aims to create a system for handling various types
of permits, taxes, certiﬁcates, and licenses. although municipalities are similar in that
they have to provide the same set of business processes (services) to their citizens, their
process models are typically different. within the constraints of national laws and reg-
ulations, municipalities can differentiate because of differences in size, demographics,
problems, and policies. supported by the system to be developed within coselog, in-
dividual municipalities can make use of the process support services simultaneously,
even though their process models differ. to realize this, conﬁgurable process models
are used.
conﬁgurable process models form a relatively young research topic [7, 9, 10, 3].
a conﬁgurable process model can be seen as a union of several process models into
one. while combining different process models, duplication of elements is avoided by2 j.j.c.l. v ogelaar, h.m.w. verbeek, b. luka, and w.m.p van der aalst
matching and merging them together. the elements that occur in only a selection of the
individual process models are made conﬁgurable. these elements are then able to be
set or conﬁgured. in effect, such an element can be chosen to be included or excluded.
when for all conﬁgurable elements such a setting is made, the resulting process model is
called a conﬁguration. this conﬁguration could then correspond to one of the individual
process models for example.
conﬁgurable process models offer several beneﬁts. one of the beneﬁts is that there
is only one process model that needs to be maintained, instead of the several individual
ones. this is especially helpful in case a law changes or is introduced, and thus all
municipalities have to change their business processes, and hence their process models.
in the case of a conﬁgurable process model this would only incur a single change.
when we lift this idea up to the level of services (like in the coselog project [1, 5]),
we also only need to maintain one information system, which can be used by multiple
municipalities.
conﬁgurable process models are not always a good solution however. in some cases
they will yield better results than in others. two process models that are quite similar
are likely to be better suited for inclusion in a conﬁgurable process model than two
completely different and independent process models. for this reason, this paper strives
to provide answers to the following three questions:
1.which business process is the best starting point for developing a conﬁgurable pro-
cess model? that is, given a municipality and a set of process models for every
municipality and every business process, for which business process is the conﬁg-
urable process model (containing all process models for that business process) the
less complex?
2.which other municipality is the best candidate to develop conﬁgurable models
with? that is, given a municipality and a set of process models for every municipal-
ity and every business process, for which other municipality are the conﬁgurable
process models (containing the process models for both municipalities) the less
complex?
3.which clusters of municipalities would best work together, using a common con-
ﬁgurable model? that is, given a business process and a set of process models for
every municipality and every business process, for which clustering of municipal-
ities are the conﬁgurable process models (containing all process models for the
municipalities in a cluster) the less complex?
the remainder of this paper is structured as follows. section 2 introduces the
80 process models and background information about these process models. section 3
makes various comparisons to produce answers to the proposed questions. finally, sec-
tion 4 concludes the paper. for additional details, we refer the interested reader to [13],
which is the technical report which underlies this paper.
2 ya wl models
we collected 80 yawl[8] models in total. these yawl models were retrieved from
the ten municipalities, which are partners in the coselog project: bergeijk, bladel,comparing business processes to determine the feasibility of conﬁgurable models 3
coevorden, eersel, emmen, gemert-bakel, hellendoorn, oirschot, reusel-de mierden
and zwolle. in the remainder of this paper we will refer to these municipalities as mun a
tomun j(these are randomly ordered).
for every municipality, we retrieved the yawl models for the same eight business
processes, which are run by any dutch municipality. hence, our process model collec-
tion is composed of eight sub-collections consisting of ten yawl models each. the
yawl models were retrieved through interviews by us and validated by the municipal-
ities afterwards.
the eight business processes covered are:
1. the processing of an application for a receipt from the people registration (3 vari-
ants):
a) when a customer applies through the internet: gba 1.
b) when a customer applies in person at the town hall: gba 2.
c) when a customer applies through a written letter: gba 3.
2. the method of dealing with the report of a problem in a public area of the munici-
pality: mor .
3. the processing of an application for a building permit (2 parts):
a) the preceding process to prepare for the formal procedure: wabo 1.
b) the formal procedure: wabo 2.
4. the processing of an application for social services: wmo .
5. the handling of objections raised against the taxation of a house: woz .
fig. 1: gba 1yawl model for mun e
to give an indication of the variety and similarity between the different yawl
models some examples are shown. figure 1 shows the gba 1yawl model of mun e,
whereas figure 2 shows the gba 1yawl model of mun g. the yawl models of these
two municipalities are quite similar. nevertheless, there are some differences. recall
thatgba 1is about the application for a certain document through the internet. the
difference between the two municipalities is that mun ehandles the payment through
the internet (so before working on the document), while mun ghandles it manually
after having sent the document. however, the main steps to create the document are
the same. this explains why the general ﬂow of both models is about the same, with
exception of the payment-centered elements.
people can apply for this document through different means too. figure 3 shows the
gba 2yawl model for mun e. this model seems to contain more tasks than either4 j.j.c.l. v ogelaar, h.m.w. verbeek, b. luka, and w.m.p van der aalst
fig. 2: gba 1yawl model for mun g
fig. 3: gba 2yawl model for mun e
of the gba 1models. this makes sense, since more communication takes place during
the application. the employee at the town hall needs to gain the necessary information
from the customer. in the internet case, the customer had already entered the informa-
tion himself in the form, because otherwise the application could not be sent digitally.
as the yawl model still describes a way to produce the same document, it is to be ex-
pected that gba 2models are somewhat similar to gba 1models. indeed, the general
ﬂow remains approximately the same, although some tasks have been inserted. this
is especially the case in the leftmost part of the model, which is the part where in the
internet case the customer has already given all information prior to sending the digital
form. in the model shown in figure 3 the employee asks the customer for information in
this same area. this extra interaction also means more tasks (and choices) in the yawl
model.
fig. 4: woz yawl model for mun ecomparing business processes to determine the feasibility of conﬁgurable models 5
figure 4 shows the woz yawl model for mun e, which is clearly different from
the three gba models. the woz model shown in figure 4 is more time-consuming.
customers need to be heard and their objections need to be assessed thoroughly. next,
the grounds for the objections need to be investigated, sometimes even leading to a
house visit. after all the checking and decision making has taken place, the decision
needs to be communicated to the customer, several weeks or months later. the woz
models are quite a bit different from the gba models, where information basically
needs to be retrieved and documented.
the remainder of this paper presents a case study of the 80 yawl models (which
can found in appendix a of [13]), and compares them within their own sub-collections.
this way, we show that the yawl models for the municipalities are indeed different,
but not so different that it justiﬁes the separate implementation and maintenance of ten
separate software systems.
3 comparison
this section compares all yawl models from each of the sub-collections. as certain
models are more similar than others, we want to give an indication on which processes
are very similar, and which are more different. this similarity we will use as an indi-
cation of which models have more or less complexity when merged into a conﬁgurable
model. the higher the similarity between models, the lower we expect the complexity
to be for the conﬁgurable models. making a conﬁgurable model for equivalent models
(similarity score 1:0) approximately results in the same model again (additional com-
plexity approx. 0:0), since no new functionality needs to be added to any of the original
models.
first, we apply a combination of three known complexity metrics to all yawl
models. second, we compare the models using a combination of two known similarity
metrics. third and last, we answer the three questions as proposed earlier using these
metrics.
3.1 complexity
for every yawl model, we calculated the cfc [4], density [11], and cc metric [12]
(see also [13] for details) to get an indication of its complexity. the complete results
can be found in appendix b of [13]. figure 5 shows the relation between the cfc
metric and the other two complexity metrics. clearly, these relations are quite strong:
the higher the cfc metric, the lower the other two metrics. although this is to be
expected for the cc metric, this is quite unexpected for the density metric. like the
cfc metric, the density metric was assumed to go up when complexity goes up, hence
the trend should be that the density metric should go up when the cfc metric goes
up. obviously, this is not the case. as a result, for the remainder of this paper we will
assume that the density metric goes down when complexity goes up.
based on the strong relations as suggested in figure 5 ( cc(g) = 0 :4611 
cfc (g) 0:851anddensity (g) = 1 :1042 cfc (g) 0:791) we can now transform6 j.j.c.l. v ogelaar, h.m.w. verbeek, b. luka, and w.m.p van der aalst
fig. 5: comparison of the cfc metric with the cc and density metrics.
table 1: comparison of the business processes on the complexity metrics.
gba 1gba 2gba 3 mor wabo 1wabo 2wmo woz
cfc 5.100 14.400 9.800 15.400 4.700 29.800 33.800 12.000
density 0.383 0.165 0.170 0.159 0.305 0.061 0.080 0.132
cc 0.147 0.038 0.088 0.035 0.119 0.034 0.024 0.064
uniﬁed 5 15 9 17 5 30 33 13
the other two complexity metrics to the scale of the cfc metric. as a result, we can
take the rounded average over the resulting three metrics and get a uniﬁed complexity
metric. table 1 shows the average complexity metrics for all business processes. as this
table shows, the processes wabo 2andwmo are the most complex, and gba 1and
wabo 1the least complex.
3.2 similarity
for every pair of yawl models from the same sub-collection, we calculated the ged
and sps metric [6] (see also [13] for details) to get an indication of their similarity.
the complete results can be found in appendix c of [13]. figure 6 shows the relation
between the ged and the sps metric. although the relation between these metrics
(sps (g1; g2) = 2 :0509 ged (g1; g2) 1:082) is a bit less strong as the relationcomparing business processes to determine the feasibility of conﬁgurable models 7
fig. 6: comparison of the ged metric with the sps metric.
table 2: average similarity values
gba 1gba 2gba 3 mor wabo 1wabo 2wmo woz
ged 0.829 0.916 0.828 0.797 0.871 0.891 0.830 0.820
sps 0.646 0.759 0.632 0.556 0.774 0.725 0.546 0.615
uniﬁed 0.632 0.778 0.624 0.554 0.739 0.735 0.583 0.607
between the complexity metrics, we consider this relation to be strong enough to unify
both metrics into a single, uniﬁed, metric. this uniﬁed similarity metric uses the scale
of the sps metric, as the range of this scale is wider than the scale of the ged metric.
table 2 shows the averages over the values for the different similarity metrics for each
of the processes. from this table, we conclude that the gba 2models are most similar
to each other, while the mor models are least similar.
recall that a conﬁgurable process model “contains” all individual process models.
whenever one wants to use the conﬁgurable model as an executable model, it needs
to be conﬁgured by selecting which parts should be left out. the more divergent the
individuals are, the more complex the resulting conﬁgurable process model needs to
be to accommodate all the individuals. so, the more similar models are, the easier to
construct and maintain the conﬁgurable model will most likely be.
the similarity value for the gba 1models for mun aandmun hequals 1:0. merg-
ing these models into a conﬁgurable model, yields an equivalent model, which we ﬁnd8 j.j.c.l. v ogelaar, h.m.w. verbeek, b. luka, and w.m.p van der aalst
not so interesting. taking a look at another high similarity value in the table, we con-
struct the conﬁgurable gba1 model for mun dandmun i. the complexity metrics for
the conﬁgurable model yield 7(cfc), 0:238(density), 0:091(cc), and 7(uniﬁed).
similarly we construct a conﬁgurable model for the two least similar models: mun g
andmun f. the resulting complexity values are 34(cfc), 0:108(density), 0:026(cc),
and 28(uniﬁed). these results are in line with our expectations, as the former metrics
are all better than the latter.
to conﬁrm these relation between similarity on the one hand and complexity on the
other, we have selected 100 pairs of models (each pair from the same sub-collection),
have merged every pair, and have computed the complexity metrics of the resulting
model. figure 7 shows the results: when similarity goes down, complexity tends to go
fig. 7: uniﬁed similarity vs. uniﬁed complexity for 100 pairs of models.
up.
based on the illustrated correlations, we assume that the uniﬁed similarity metric
gives a good indication for the uniﬁed complexity of the resulting conﬁgurable model.
therefore, we use this metric to answer the three questions stated in the introduction.
3.3 question 1: which business process is the best starting point for developing a
conﬁgurable process model?
to answer this question we select a speciﬁc business process pand compute the aver-
age similarity between the yawl model of process pin a selected municipality andcomparing business processes to determine the feasibility of conﬁgurable models 9
table 3: average similarity values per model
munamunbmuncmundmunemunfmungmunhmunimunj
gba 10.631 0.612 0.560 0.703 0.645 0.641 0.354 0.631 0.715 0.442
gba 20.766 0.821 0.667 0.602 0.807 0.771 0.751 0.821 0.725 0.821
gba 30.530 0.513 0.486 0.607 0.550 0.587 0.678 0.551 0.678 0.664
mor 0.496 0.548 0.501 0.482 0.585 0.488 0.573 0.468 0.430 0.491
wabo 10.501 0.483 0.602 0.776 0.818 0.662 0.818 0.818 0.818 0.818
wabo 20.646 0.419 0.730 0.800 0.746 0.741 0.800 0.800 0.750 0.644
wmo 0.621 0.539 0.543 0.426 0.491 0.503 0.496 0.625 0.615 0.522
woz 0.507 0.448 0.447 0.601 0.562 0.616 0.600 0.651 0.657 0.561
table 4: comparing wabo 2andwmo formun d
munamunbmuncmunemunfmungmunhmunimunjaverage
wabo 2 92 72 71 51 55 32 32 34 64 56
wmo 105 112 84 95 78 85 102 102 82 94
all models of pin other municipalities. take for example mun d. for the gba 1pro-
cess, the average value for mun d(that is, average distance to other municipalities) is
0:735+0 :777+0 :670+0 :741+0 :818+0 :430+0 :735+0 :898+0 :526
9= 0:703. table 3 shows the av-
erages for each municipality and each business process. in this table we can see that
formun dthewabo 2process scores highest, followed by wabo 1andgba 1. note
that for ease of reference, we have highlighted the best (bold) and worst (italics) simi-
larity scores per municipality. so, from the viewpoint of mun d, these three are the best
candidates for making a conﬁgurable model. in a similar way we can determine such
best candidates for any of the municipalities.
we now construct conﬁgurable models for the wabo 2model for mun dand each
of the other municipalities and take the average complexity metrics for these. we do
the same for the wmo model. table 4 shows the results. although the complexities
of the wabo 2models ( 30) and the wmo models ( 33) are quite similar, it is clear
that merging the latter yields worse scores on all complexity metrics than merging the
former yields. therefore, we conclude that the better similarity between the wabo 2
models resulted in a less-complex conﬁgurable model, while the worse similarity be-
tween the mor models resulted in a more-complex conﬁgurable model.
from table 3 we can also conclude that the gba 2,wabo 1, and wabo 2pro-
cesses are, in general, good candidates to start a conﬁgurable approach with, as they
turn out best for 5, 3, and 2 municipalities.
3.4 question 2: which other municipality is the best candidate to develop
conﬁgurable models with?
the second question is not so much about which process suits the municipality best,
but which other municipality. to compute this, we take the average similarity over all
models for every other municipality. table 5 shows the results for all municipalities.10 j.j.c.l. v ogelaar, h.m.w. verbeek, b. luka, and w.m.p van der aalst
table 5: average similarity values per municipality
munamunbmuncmundmunemunfmungmunhmunimunj
muna 0.556 0.546 0.555 0.598 0.585 0.591 0.682 0.644 0.527
munb 0.556 0.508 0.538 0.559 0.547 0.512 0.595 0.591 0.525
munc 0.546 0.508 0.580 0.617 0.552 0.575 0.604 0.569 0.552
mund 0.555 0.538 0.580 0.638 0.630 0.642 0.702 0.717 0.619
mune 0.598 0.559 0.617 0.638 0.672 0.692 0.679 0.705 0.696
munf 0.585 0.547 0.552 0.630 0.672 0.675 0.651 0.671 0.651
mung 0.591 0.512 0.575 0.642 0.692 0.675 0.656 0.687 0.672
munh 0.682 0.595 0.604 0.702 0.679 0.651 0.656 0.801 0.664
muni0.644 0.591 0.569 0.717 0.705 0.671 0.687 0.801 0.677
munj0.527 0.525 0.552 0.619 0.696 0.651 0.672 0.663 0.676
table 6: comparing mun handmun aformun d
gba 1gba 2gba 3mor wabo 1wabo 2wmo woz average
munh 13 29 47 41 12 32 102 26 38
muna 13 38 34 55 16 92 105 42 49
again, we have highlighted the best match. this table shows that mun handmun iare
most similar to mun d. apparently, these municipalities are best suited to start working
withmun don an overall conﬁgurable approach.
we calculated the average complexity of the conﬁgurable models for mun dand
mun hand for mun dandmun a. table 6 shows the results. clearly, the average com-
plexity scores when merging mun dwithmun hare better than the scores when merg-
ingmun dwithmun a. this is in line with our expectations. also note that only for the
gba 3process a conﬁgurable model with mun amight be preferred over a conﬁgurable
model with mun h.
from table 5 we can also conclude that mun iandmun eare preferred partners for
conﬁgurable models, as mun iare the preferred partner for 3 of the municipalities.
3.5 question 3: which clusters of municipalities would best work together, using
a common conﬁgurable model?
the third question is a bit trickier to answer, but this can also be accomplished with
the computed metrics. to answer this question, we only need to consider the values
in one of the comparison tables (see appendix c of [13]). we now want to see which
clusters of municipalities could best work together in using conﬁgurable models. there
are different ways to approach this problem. one of the approaches is using the k-
means clustering algorithm [2]. applying this algorithm to the mentioned metrics, we
obtain the clusters mun b+mun d+mun e+mun f+mun i,mun g+mun j, and
mun a+mun c+mun h.
table 7 shows the complexity for all processes, where cluster kis the cluster as
selected by the k-means clustering technique and cluster 1 up to 10 are 10 randomlycomparing business processes to determine the feasibility of conﬁgurable models 11
table 7: comparing clusters on cc
cluster gba 1gba 2gba 3 mor wabo 1wabo 2wmo woz
k 15 25 48 50 19 76 101 59
1 15 29 54 75 26 92 117 75
2 28 32 47 67 21 95 116 74
3 23 33 52 73 27 88 115 88
4 26 32 45 81 24 87 103 76
5 27 32 49 69 18 84 130 85
6 26 30 46 77 27 100 113 80
7 26 34 48 66 27 90 121 82
8 24 33 50 71 22 92 107 82
9 25 32 45 77 24 92 128 80
10 27 31 51 76 26 77 133 77
average 24 31 49 71 24 88 117 78
selected clusters per process (see appendix e of [13] for the cluster details). this table
clearly shows that the clusters as obtained by the k-means clustering technique are
quite good. only in the case of the gba 3andwabo 1processes, we found a better
clustering, and in case of the latter process the gain is only marginal.
4 conclusion
first of all, in this paper we have shown that similarity can be used to predict the com-
plexity of a conﬁgurable model. in principle, the more similar two process models are,
the less complex the resulting conﬁgurable model will be.
we have used the control-ﬂow complexity (cfc) metric from [4], the density metric
from [11], and the cross-connectivity (cc) metric from [12] as complexity metrics. we
have shown that these three metrics are quite related to each other. for example, when
the cfc metric goes up, the density and cc go down. based on this, we have been able
to unify these metrics into a single complexity metric that uses the same scale as the
cfc metric.
the complexity of the 80 yawl models used in this paper ranged from simple
(gba 1andwabo 1processes, uniﬁed complexity approx. 5) to complex ( wabo 2
andwmo processes, uniﬁed complexity approx. 30). the complexity of the conﬁg-
urable models we obtained were typically quite higher (up to approx. 450). this shows
that complexity can get quickly out of control, and that we needs some way to predict
the complexity of a conﬁgurable model beforehand.
to predict the complexity of a conﬁgurable model, we have used the ged metric
and the sps metric as deﬁned in [6]. based on the combined similarity of two process
models a prediction can be made for the complexity of the resulting conﬁgurable model.
by choosing to merge only similar process models, the complexity of the resulting
conﬁgurable model is kept at bay.12 j.j.c.l. v ogelaar, h.m.w. verbeek, b. luka, and w.m.p van der aalst
we have shown that the cfc and uniﬁed metric of the conﬁgurable model are posi-
tively correlated with the similarity of its constituting process models, and that the den-
sity and cc metric are negatively correlated. the behavior of the density metric came
as a surprise to us. the rationale behind this metric clearly states that a density and the
likelihood of errors are positively correlated. as such, we expected a positive correla-
tion between the density and the complexity. however, throughout our set of models
we observed the trend that less-similar models yield less-dense conﬁgurable models,
whereas the other complexity metrics behave as expected. as a result, we concluded
that the density is negatively correlated with the complexity of models.
references
1. w. m. p. van der aalst. conﬁgurable services in the cloud: supporting variability while
enabling cross-organizational process mining. in international conference on cooperative
information systems (coopis 2010) , volume 6426 of lecture notes in computer science ,
pages 8–25. springer-verlag, 2010.
2. w. m. p. van der aalst. process mining: discovery, conformance and enhancement of
business processes . springer-verlag, 2011.
3. w. m. p. van der aalst, m. dumas, f. gottschalk, a. h. m. ter hofstede, m. la rosa, and
j. mendling. preserving correctness during business process model conﬁguration. formal
aspects of computing , 22:459–482, may 2010.
4. j. cardoso. how to measure the control-ﬂow complexity of web processes and workﬂows.
2005.
5. coselog. conﬁgurable services for local governments (coselog) project home page.
www.win.tue.nl/coselog .
6. r. m. dijkman, m. dumas, b. f. van dongen, r. krik, and j. mendling. similarity of
business process models: metrics and evaluation. information systems , 36(2):498–516,
april 2011.
7. f. gottschalk. conﬁgurable process models . phd thesis, eindhoven university of technol-
ogy, the netherlands, december 2009.
8. a. hofstede, w. m. p. van der aalst, m. adams, and n. russell. modern business process
automation: yawl and its support environment . springer-verlag, 2009.
9. m. la rosa. managing variability in process-aware information systems . phd thesis,
queensland university of technology, brisbane, australia, april 2009.
10. m. la rosa, m. dumas, a. h. m. ter hofstede, and j. mendling. conﬁgurable multi-
perspective business process models. information systems , 36(2):313–340, 2011.
11. j. mendling. testing density as a complexity metric for epcs. in german epc workshop
on density of process models , 2006.
12. i. t. p. vanderfeesten, h. a. reijers, j. mendling, w. m. p. van der aalst j., and cardoso. on
a quest for good process models: the cross-connectivity metric. in advanced information
systems engineering , pages 480–494. springer, 2008.
13. j. j. c. l. v ogelaar, h. m. w. verbeek, b. luka, and w. m. p. van der aalst. comparing
business processes to determine the feasibility of conﬁgurable models: a case study.
bpm center report bpm-11-17, bpmcenter.org, 2011.