apromore: an advanced process model repository
marcello la rosa,a, hajo a. reijersb, wil m.p. van der aalstb, remco m. dijkmanb, jan mendlingc, marlon dumasd, luciano
garc ´ıa-ba ˜nuelosd
aqueensland university of technology, gpo box 2434, brisbane 4001, australia
beindhoven university of technology, po box 513, 5600 mb eindhoven, the netherlands
chumboldt-universit¨ at zu berlin, unter den linden 6, 10099 berlin, germany
duniversity of tartu, j liivi 2, tartu 50409, estonia
abstract
business process models are becoming available in large numbers due to their popular use in many industrial applications such as
enterprise and quality engineering projects. on the one hand, this raises a challenge as to their proper management: how can it be
ensured that the proper process model is always available to the interested stakeholder? on the other hand, the richness of a large
set of process models also o ers opportunities, for example with respect to the re-use of existing model parts for new models. this
paper describes the functionalities and architecture of an advanced process model repository, named apromore. this tool brings
together a rich set of features for the analysis, management and usage of large sets of process models, drawing from state-of-the
art research in the ﬁeld of process modeling. a prototype of the platform is presented in this paper, demonstrating its feasibility, as
well as an outlook on the further development of apromore.
key words: repository, business process model, process collection.
1. introduction
business process modeling has become a very popular form
of conceptual modeling [davies et al., 2006]. a process model
describes, often in some graphical notation, how a certain pro-
cedure is composed out of di erent tasks, which resources are
involved in carrying out these tasks, and which objects are be-
ing manipulated [curtis et al., 1992, giaglis, 2001]. one can
roughly distinguish between process models that describe pro-
cedures as they exist (e.g., to show compliance with quality
standards), or that capture alternative ways to produce a par-
ticular product or service (e.g., as blueprints for improvement
projects). a process model can be used both within the speciﬁc
context of it deployment and for more business-oriented pur-
poses [bandara et al., 2005]. respective examples for these two
types of process model usage are the conﬁguration of a work-
ﬂow management system, and the support of an activity-based
calculation of a product’s cost price.
the wide application of process modeling has led con-
temporary organizations to create dozens, hundreds, and even
thousands of process models [becker et al., 2000, gulla and
brasethvik, 2000, reijers et al., 2009, siegeris and grasl,
2008]. with such volumes, an apparent issue is how to sen-
sibly deal with these models, in particular when considering
corresponding author. tel.: +61731389482; fax: +61731389390.
email addresses: m.larosa@qut.edu.au (marcello la rosa),
h.a.reijers@tue.nl (hajo a. reijers), w.m.p.v.d.aalst@tue.nl (wil
m.p. van der aalst), r.m.dijkman@tue.nl (remco m. dijkman),
jan.mendling@wiwi.hu-berlin.de (jan mendling),
marlon.dumas@ut.ee (marlon dumas), lgbanuelos@gmail.com (luciano
garc ´ıa-ba ˜nuelos)that process models may need to be consulted, updated, and re-
used over longer periods of time by various stakeholders. this
paper is concerned with proposing an architecture for an ad-
vanced process model repository – apromore – which of-
fers rich features to maintain, analyze, and exploit the content
of process models. the features that we envision go well be-
yond the data-management oriented functionalities that are of-
fered by commercial process repositories. instead, the empha-
sis is on sophisticated, state-of-the art functionalities such as
advanced models analysis, comparison and merge, which can
be provided on both separate andrelated process models.
apromore has been implemented as an open-source
saas (software-as-a-service). it is thought to be of interest
to practitioners who wish to extract greater value from their
process models’ content, technology vendors that wish to ex-
tend their o erings by tapping into apromore’s features,
and researchers who wish to beneﬁt from synergies by incor-
porating their techniques in the platform and re-using available
techniques.
the structure of this paper is as follows. section 2 provides
a background on data repository technologies and speciﬁcally
on process model repositories. this paves the way for section 3
and section 4, which respectively describe the envisioned main
features of apromore and the service-oriented architecture
to support and realize these features. section 5 presents the
internal process deﬁnition adopted by apromore, which is
essential to deal with the multitude of process modeling nota-
tions. section 6 provides a glimpse of the current prototype
implementation and describes two typical application scenarios
that are supported by this implementation. finally, section 7
preprint submitted to expert systems with applications september 22, 2009concludes the paper with a summary and a look at future work
in this area.
2. background
this section discusses the background of advanced process
model repositories. in section 2.1 we present concepts and so-
lutions related to general data repositories. in section 2.2 we
then focus on commercial and academic process model reposi-
tories.
2.1. data repositories
data repositories have been discussed for quite some time
in the database research community. the term repository in
this context refers to an extension of a database management
system with an explicit control layer with a strong emphasis on
metadata management. a repository can then be deﬁned as a
“shared database of information about engineered artifacts pro-
duced and used by an enterprise” [bernstein and dayal, 1994].
database repositories are closely interrelated with the manage-
ment of static data models. model management addresses chal-
lenges in this area on di erent levels, from representational
questions on a structural level, to processing issues, and topics
of organizational embeddedness in the socio-technical system
of an enterprise [dolk and konsynski, 1984, blanning, 1993].
the main concepts of model management are models and map-
pings between models [bernstein, 2003]. the major share of
mappings can be related to the areas of data warehousing [jarke
et al., 1999] and schema integration [melnik et al., 2003]. re-
search in all these areas is well-established for static data mod-
els, but an overarching approach for process model repositories
with integrated model management functionalities is still miss-
ing these days.
2.2. process model repositories
process model repositories have been designed both with
a focus on workﬂow execution and on conceptual modeling.
in an execution environment, the major focus is on the provi-
sion of features for the deﬁnition of process control-ﬂow, data
structures, resources, and program interfaces [leymann and al-
tenhuber, 1994]. these main aspects are also present in con-
temporary bpm tools, but extended e.g. with discovery com-
ponents for dynamic composition [weber et al., 2007]. in con-
trast, the focus of conceptual modeling frameworks is more on
extension features. for example, ids scheer’s aris process
modeling tool supports the extension of the process metamodel
along with customization of symbols [scheer and n ¨uttgens,
2000]1. standard features include model creation, modiﬁcation
and deletion, accompanied by simple lexical search (e.g. search
all models containing ’shipment payment’) and reporting func-
tionalities [lee and joung, 2000]. similar functionalities are
oered by adonis [karagiannis and k ¨uhn, 2002]. other solu-
tions, such as lombardi’s blueprint2and the aris governance
1www.aris.com
2www.lombardisoftware.com/bpm-blueprint-product.phpengine, allow users to visualize changes between multiple ver-
sions of a process model. all these systems also o er access
control. speciﬁc requirements on a distributed environment in-
cluding access rights are discussed in [theling et al., 2005].
the application of semantic technologies has been consid-
ered from various angles for process repositories. work on the
commercial tool semtalk has early recognized the potential of
formal ontologies for adding and dynamically changing meta-
models in a process repository [fillies et al., 2003]. formal
ontologies are also used in the work of klein and bernstein
[2004]. the authors utilize extensive metadata in the process
repository for reasoning and process model retrieval. for query-
ing process repositories, they deﬁne the process query lan-
guage (pql) [klein and bernstein, 2004]. repositories also
play an important role for an overarching concept of seman-
tic business process management (sbpm) [hepp et al., 2005].
in [karastoyanova et al., 2008], the authors identify modeling,
system conﬁguration, execution and analysis as key features of
a respective sbpm architecture. this architecture builds on
three layers: persistence layer, service layer (including lock-
ing, version control, and rule inference), and a repository api
on top.
3. capabilities of an advanced process model repository
besides the standard repository functionalities currently of-
fered by commercial and academic products, such as check-
in/check-out, access control, simple search queries, there are
several functional areas that can be envisioned when consider-
ingadvanced support for dealing with process model collec-
tions. in this section, we distinguish four areas to discuss such
advanced features: i) evaluation , ii)comparison , iii) manage-
ment , and iv) presentation , and use this distinction to propose
the capabilities of apromore, as reported in table 1.
as it will be shown, this proposal builds on a large set of
existing contributions in terms of approaches and techniques
which can be adapted to be incorporated in apromore. it
should be noted, however, that each of these contributions fo-
cus only on a small piece of the overall landscape of function-
alities we envision, and tend to look at process models in isola-
tion, rather than looking at a process model in relation to other
models. moreover, the majority of these approaches and tech-
niques has been devised to work for speciﬁc process model lan-
guages only. at the same time, the existence of the various
approaches and techniques demonstrates the potential power of
apromore.
3.1. evaluation
evaluation is concerned with establishing the adherence of
process models to various quality notions. this area includes
three topics: correctness analysis, performance analysis, and
usability analysis. there is a rich body of knowledge that
discusses correctness properties like lifeness, boundedness or
soundness, mainly based on petri net concepts [murata, 1989b,
aalst, 1996, hee et al., 2006]. empirical research has shown
2evaluation comparison management presentation
quality analysis similarity search harmonization-driven creation abstraction
correctness analysis conformance analysis pattern-based creation secondary notation
performance analysis pattern-based analysis reference-based completion reporting
pattern-based completion
individualization
extension control
table 1: classiﬁcation of advanced process model repository functionalities according to service areas.
that process model collections from practice include a substan-
tial rate of error models [mendling, 2009]. the formal con-
cepts, like advanced graph parsing, are utilized in [fahland
et al., 2009] to provide e cient veriﬁcation, but these tech-
niques are not yet supported by commercial tools.
performance analysis is also a well-established discipline
with its roots in operations research and operations manage-
ment [anupindi et al., 1999]. it is a notorious problem to get
meaningful durations, data on execution times and probabilities
of alternative branches for performance analysis. recent re-
search derives simulation parameters from operational systems
using process mining techniques [rozinat et al., 2008]. such
features are still missing in commercial tools.
the evaluation of process models has become subject to us-
ability considerations. research on process model understand-
ing aims to identify the factors that foster or impede model qual-
ity [mendling et al., 2007]. structural metrics such as size or
complexity have proven to be closely connected with under-
standing and error probability [mendling, 2008]. process mod-
eling guidelines such as the seven process modeling guide-
lines (7pmg) [mendling et al., 2009b] or [becker et al., 2000]
have been proposed. future tools might directly support them
by keeping track of complexity metrics.
3.2. comparison
comparison oers capabilities to determine similarities be-
tween models or identify relevant patterns. this area covers
the topics of similarity search, conformance analysis, patterns-
based analysis and extension analysis.
the heterogeneous representation of comparable behavior
has raised the issue of similarity calculation [dijkman, 2007,
dijkman et al., 2009]. in essence, process model similarity
determines how close the behavior of two process models is.
it can be associated with syntactical, semantical, and contex-
tual aspects of activities in a process model [van dongen et al.,
2008]. taking process behavior into account yields better re-
sults than classical metadata based process query techniques
such as [momotko and subieta, 2004, klein and bernstein,
2004]. query languages such as bpmn-q [awad et al., 2008]
can use similarity calculations for ranking query results.
the calculation of similarity is on a conceptual level closely
related to checking whether certain patterns or process frag-
ments are contained in process models ( pattern-based anal-
ysis). dedicated query languages such as bpmn-q or pql
[klein and bernstein, 2004] support the formulation of queries
to ﬁnd such patterns.conformance analysis evaluates to which extent an input
model conforms to a reference process model in a given do-
main. respective research is discussed in [de medeiros et al.,
2008].
3.3. management
management refers to di erent ways of creation, modiﬁ-
cation and completion of process models, potentially based on
existing content.
harmonization-driven creation uses merging algorithms to
create a new process from a set of similar models (which can
be retrieved via similarity analysis). related work has dis-
cussed process model integration techniques [preuner et al.,
2001, grossmann et al., 2005, mendling and simon, 2006,
gottschalk et al., 2008], but these techniques are still embry-
onic and only work for speciﬁc process modeling languages.
moreover, commercial tool support is still missing. pattern-
based creation allows one to create a process model based on
the composition of a set of process fragments (so called “busi-
ness patterns”) for a speciﬁc domain. the general idea of cre-
ating a process model based on predeﬁned building blocks has
been presented in [thom et al., 2007].
individualization relates to the area of conﬁgurable process
models [rosemann and aalst, 2007, la rosa, 2009]. it builds
on algorithms to derive a correct process model from a con-
ﬁgured process model [aalst et al., 2009], potentially covering
control ﬂow, data and resources involved in a process [la rosa
et al., 2008].
over time new versions of reference models may be
shipped, e.g. resulting from bug-ﬁxes or changes to legislative
rules. similarly, a reference model individualization may also
be extended, e.g. to cover customer requirements that are not
captured by the reference process model. in this context, exten-
sion control is required. it has to establish extension points to
control the evolution of conﬁgurable reference models and of
their individualizations, such that the two types of models can
be kept in synchronization. this idea is illustrated in [balko
et al., 2009] but it has not yet been implemented.
3.4. presentation
presentation provides support for improving the under-
standing of large process models and collections thereof. it
relates to useful abstraction mechanisms, secondary notation,
graph layout, and reporting.
3abstraction is an important concept to achieve a task-
oriented presentation of content for a particular user of a pro-
cess repository. di erent abstraction concepts such as col-
lapse, decimation or clustering, have been introduced for pro-
cess models, e.g. in [streit et al., 2005, g ¨unther and aalst, 2007,
eshuis and grefen, 2008, polyvyanyy et al., 2008].
secondary notation [green and petre, 1996] is a powerful
tool to emphasize relevant information without touching the
formal structure of a process model. it includes the use of color
palettes, e.g. by highlighting the most followed process ﬂow de-
pending on a given user context [aalst, 2009], icons [mendling
et al., 2009a], and the change of the graph layout. the impor-
tance of graph layout is well understood in the conceptual mod-
eling area [ware et al., 2002, schrepfer et al., 2009]. speciﬁc
layout requirements of bpmn [object management group,
2008] models have been recently discussed in [kitzmann et al.,
2009, e nger et al., 2009].
finally, reporting provides a range of model statics such
as number of users or density of decisions, to accompany the
more traditional visual representation of process models.
the four functional areas that have been discussed up to
this point – evaluation, comparison, management, and presen-
tation – characterize the main types of functionalities that can
be oered by an advanced process model repository. we fore-
see scenarios where end users will be combining functionalities
from di erent service areas. for example, the result of a process
model evaluation could lead to an improvement plan describing
a number of modiﬁcations on the process model ( management )
to align the latter to a reference model ( comparison ). or more,
after evaluating the quality of a collection of process models,
the best performing models are selected and compared to each
other in order to detect similarities. this result is used to merge
the selected models into a conﬁgurable reference model ( man-
agement ), which is then presented to the user via a combination
of abstraction techniques.
in the next section, we will consider an architecture for
apromore to support the envisioned functionalities and sce-
narios.
4. architecture
we propose to implement apromore via a service-
oriented architecture as illustrated in figure 1. this architecture
follows a three-tier model composed of an enterprise layer, an
intermediary layer and a basic layer. the enterprise layer is the
front-end of the repository. it hosts the repository manager – a
public service which exposes the typical amenities of a repos-
itory [bernstein and dayal, 1994], such as check-in /check-out,
simple querying, views, version control, change notiﬁcation,
context management and security. this service is the unique en-
try point to the repository and can be accessed directly by bpm
suites (bpms) or reference model vendors for cross-enterprise
integration, or via a web portal by the users of an organization.
the basic layer encapsulates the business logic and data of
a traditional software architecture. the business logic consistsof the algorithms to operate over process model collections, e.g.
matching algorithms, merging algorithms, individualization al-
gorithms. these are needed to provide the advanced function-
alities described in section 3. each class of algorithms is en-
capsulated by a logic-centric service for reusability and main-
tenance purposes.
the repository manager accesses these logic-centric ser-
vices via the batcher service sitting in the intermediary layer.
this service acts as a fac ¸ade over the algorithms and allows
users to batch operations via simple scripts that can be submit-
ted through the repository manager. for example, one could
search for all models similar to an input process model, merge
the result and visualize it in a given notation according to spe-
ciﬁc abstraction preferences.
the basic layer also hosts a set of data-centric services
which serves as an interface to access the underlying persis-
tent data – the core of the repository. each data-centric service
wraps one or more speciﬁc data entities and exposes the con-
ventional functionalities of the related dbms. these include
data storage and retrieval, access control, integrity control and
transactionality. five data entities compose this layer:
models archive : business process models in their na-
tive xml formats, e.g. bpmn models in xpdl [work-
ﬂow management coalition] or epc models in
epml [mendling et al.];
canonical models archive : a canonical representation of
each of these models in xml. this canonical format ﬁl-
ters out the speciﬁcities of a process modeling language,
allowing the various repository algorithms to operate on
a common process deﬁnition (more details in section 5);
annotations archive : meta-data associated with the
canonical models, e.g. layout information for visualiza-
tion, or search indexes. this meta-data is captured in the
form of annotations to canonical models and organized
in proﬁles;
patterns archive : reusable libraries of process deﬁnitions
for speciﬁc industry verticals, deﬁned in canonical for-
mat. these can be used, e.g. for model creation, com-
pletion or pattern-based evaluation;
relations archive : the relations between canonical repre-
sentations of di erent process models, e.g. relations be-
tween conﬁgurable process models and their individual-
izations, or between process models and their extensions,
used for change notiﬁcation and adaptation control.
the repository manager accesses both process models and
their canonical representation via the (de)canonization service
– an intermediary adapter equipped with format conversion ca-
pabilities. this service is invoked the ﬁrst time a request is
made by the user to check-in a new process model in the reposi-
tory. this service converts the model from its native format into
its canonical representation; the latter model is indexed by the
repository manager and stored in the canonical models archive.
from that time onwards, a process model is always accessed
4enterprise layer
intermediary layer
basic layer
relations patternspatternsarchive
(data-centric)relationsarchive
(data-centric)portal
(web application)organization bpms / reference model
vendorapplication
web service
algorithm
data entity
repository manager
(public)
logic-centric 
servicesbatcher
(façade)
algorithms models(de)canonization
(adapter)
modelsarchive
(data-centric)
c. modelscmodelsarchive
(data-centric)
annotationsfigure 1: service-oriented architecture of a process model repository.
through its canonical representation, although it is also per-
sisted in the models archive in its native format (synchroniza-
tion between the two formats is achieved through meta-data).
since the algorithms operate on the canonical format, new mod-
els generated through these algorithms, e.g. when merging a set
of similar processes into a conﬁgurable model, are produced
directly in the canonical format. the (de)canonization service
is also invoked to convert a canonical representation of a pro-
cess into a native format when users check-out content from
the repository, e.g. when importing a newly created model into
a third-party application.
5. canonical process format
the canonical process format provides a common, unam-
biguous representation of business processes captured in di er-
ent notations and /or at di erent abstraction levels, such that all
process models can be treated alike. the idea behind this for-
mat is to represent only the structural characteristics of a pro-
cess model that are in common to the various modeling lan-
guages. language-speciﬁc concepts are omitted because they
cannot be meaningfully interpreted when dealing with process
models originating from di erent notations, i.e. when “cross-
language” operations are performed. moreover, this canonical
format is agnostic to graphical information such as shapes, line
thickness and positions, which is contained in a concrete pro-
cess deﬁnition. this information is stored separately in the form
of annotations, and only used when a canonical model needs to
be presented to the user or converted to a native format.we identify ﬁve advantages in using a canonical format for
the provision of advanced process model repository functional-
ities:
1standardization : a canonical format makes it possi-
ble to standardize software access to process deﬁni-
tions via a set of apis. this is achieved through the
(de)canonization adapter, which allows the various al-
gorithms to work on a common process structure. in
this way, cross-language operations can be directly per-
formed and concatenated, i.e. without the need to ﬁrst
convert a model into another model’s notation.
2eciency : avoiding language conversions in turn im-
proves the overall system e ciency, as each operation
can be completed in reasonably less time. moreover, an-
notations can be used to index canonical elements with
speciﬁc meanings, with the purpose to expedite queries.
3interchangeability : annotations also capture non-
structural aspects of a process model, such as graphical
information or process semantics, which can be automat-
ically inferred from a concrete process deﬁnition. by or-
ganizing these annotations in proﬁles, a proﬁle inferred
from a process model can be applied to another canonical
model, and a canonical model can have multiple proﬁles.
in this way it is e.g. possible to switch between di erent
graphical representations while keeping the same process
structure.
4reusability : the canonical format is also used as the for-
mat for storing business process patterns and industry ref-
5erence models. on the one hand, this facilitates the exe-
cution of those operations that involve such content, e.g.
conformance analysis or pattern-based completion. on
the other hand, it makes this content virtually available in
every process modeling language that is supported by the
repository.
5flexibility : the elements of a canonical format are de-
ﬁned through an inheritance mechanism such that at the
highest abstraction level a process is simply seen as a di-
rected, attributed graph. this allows algorithms to treat
process models at di erent levels of granularity, depend-
ing on the type of operation required by the user.
we observe that without a common process format, a vari-
ant of each algorithm would need to be implemented for every
(new) process modeling language. moreover, conversions from
one language to another would need to be put in place, to allow
cross-language operations such as comparisons and merges.
in the next section we provide a detailed characterization of
the canonical format adopted in apromore.
5.1. meta-model
the meta-model of the canonical process format as a uml
class diagram is shown in figure 2. a canonicalprocess is
a container for a set of nets ,resourcetypes andobjects .
each net is a directed, attributed graph made up of nodes and
edges , and represents a process or a subprocess. the top pro-
cess is indicated as ‘root’, while all other nets are marked as
‘subnets’. nodes can be of type routing orwork , while edges
represent links between nodes. routing nodes capture all ele-
ments of a process model which are used for routing purposes
(i.e. no work is performed from a business perspective), and
as such they have more than one incoming edge and /or more
than one outgoing edge. they can be splits (orsplit for in-
clusive data-driven choice, xorsplit for exclusive data-driven
choice and andsplit for parallel branching), joins (orjoin
for synchronizing merge, xorjoin for simple merge and and-
join for synchronization), and states (to indicate the state be-
fore an event-driven decision is made or soon after a merge).
splits have one incoming edge and multiple outgoing edges,
joins have multiple incoming edges and one outgoing edge,
states can have multiple incoming and outgoing edges. the
conditions upon which an (x)orsplit choice is made, must be
speciﬁed via the attribute ’condition’ of each edge leaving the
(x)orsplit. also, one such an edge can be marked as ’default’
to indicate the default branch to be chosen if the conditions as-
sociated with all other edges leaving the same split evaluate to
false.
dierent from routing nodes, work nodes capture those
elements of a process which are relevant from a business per-
spective. work nodes have at most one incoming edge and one
outgoing edge and divide in tasks andevents . a task node
models a process element which actively performs some work
as part of a process, e.g. preparing an invoice or processing a
message. task nodes can be atomic, or compound if they en-
close a net describing their behavior. the enclosed net is in-
dicated as ‘subnet’. events are used to signal the beginning orthe end of a process, or to signal something that has happened
during a process execution. events can be specialized into mes-
sage events to capture a message being sent or receipt, and time
events to capture e.g. a timeout or a delay.
work nodes can be associated with one or more resource-
types andobjects . each resoucetype captures a class of orga-
nizational resources participating in the process, i.e. a group of
concrete resources rather than the resources themselves. these
can be human , e.g. a position or role in an organization, or
nonhuman , e.g. an information system or equipment. for in-
stance, the human resourcetype “finance o cer” models the
set of persons of an organization with role finance o cer. re-
sourcetypes can have one or more specializations, e.g. “fi-
nance o cer” may be specialized in “senior finance o cer”
and “junior finance o cer”. this relation is transitive and
antisymmetric, and typically indicates a separation of duties.
each association between a work node and a resourcetype in-
dicates that a resource of that resourcetype is required to carry
out the work node. therefore, a work node associated with the
same resourcetype ntimes, means that nresources of that re-
sourcetype are required to carry out the given work node (e.g.
this captures the concept of teamwork for human resources, i.e.
a set of persons all working on the same task). the association
between work nodes and resourcetypes can specify a ‘quali-
ﬁer’ to indicate the status a given resourcetype takes when per-
forming the associated work node, e.g. only one person of all
the persons with role “finance o cer” associated with work
node “prepare invoice” is qualiﬁed as “responsible” person.
the association between work node and resourcetype can be
‘optional’ to indicate that the work may be performed without
involving the speciﬁc resource.
objects capture organizational business objects that are in-
volved in the process. these can be physical artifacts, e.g. a
paper-based invoice ( hard object) or information artifacts, e.g.
a ﬁle or variable representing an electronic invoice ( soft ob-
ject). for the latter, the ‘type’ of the object must be speciﬁed,
e.g. the ﬁle extension or variable type. objects can be associ-
ated with a work node via an ‘input’ relation if they are uti-
lized by the work node, and /or via an ‘output’ relation if they
are produced by the work node. these relations correspond to
read/write operations in the case of soft objects. an object used
as both input and output of a work node indicates that the object
is updated, e.g. an invoice is ﬁlled-out or a variable changes its
content. moreover, input objects can be marked as ‘consumed’
if they are destroyed while being used by a work node. similar
to resourcetypes, the association between objects and work
nodes can also be ‘optional’ to capture a situation where the
work node may be performed without using or producing the
speciﬁc object.
nodes, resourcetypes and objects can be conﬁgurable.
this is denoted by their optional attribute ‘conﬁgurable’. a
node’s conﬁguration options are indicated through annotations
outside a canonical representation, since these options depend
on the concrete modeling language adopted.
in the next section we motivate the choice for such elements
and show how these are mapped to elements in concrete process
modeling languages.
6figure 2: the uml meta-model of the canonical process format.
5.2. methodology and mapping
the elements to be included in the canonical format were
identiﬁed from an analysis of commonalities among six widely
adopted business process modeling languages. these are two
languages for conceptual process modeling: epcs [keller et al.,
1992] and bpmn 1.2 [object management group, 2008], and
four languages for executable process modeling: protos 8.0,3
wf-nets [aalst, 1998], yawl 2.0 [aalst and hofstede, 2005]
and ws-bpel 2.0 [oasis, 2007].
to date, epcs (event-driven process chains) are proba-
bly the most used process modeling notation among practi-
tioners. initially developed for the design of the sap r /3
reference process model [curran and keller, 1997], they later
became the core modeling language of the aris platform,
and were adopted by other vendors for the design of sap-
independent reference models (e.g. the aris-based reference
models for itil [ids scheer, a] or scor [ids scheer, b]).
we support epcs along with two extensions: eepcs (extended
epcs) [scheer, 1999] and iepcs (integrated epcs) [la rosa
et al., 2008]. these cater for the representation of organiza-
tional resources and objects participating in a process, and for
the representation of variation points on top of these elements
respectively.
bpmn (business process modeling notation) is an emerg-
ing notation alternative to epcs, designed with the intent to
enable both business users and technical developers to model
readily understandable graphical representations of business
processes. the bpmn speciﬁcation is driven by the omg [ob-
3http://www.pallas-athena.comject management group] standardization committee and is sup-
ported by a growing number of organizations and it vendors.
wf-nets (workﬂow nets) are a class of petri nets [petri,
1962] speciﬁcally designed for modeling executable business
processes. as such, they beneﬁt from a rich body of theoretical
results, analysis techniques and tools [murata, 1989a]. wf-
nets have been extensively applied in academia to the formal
veriﬁcation of business process models [verbeek et al., 2001].
speciﬁcally, we chose to adopt the standard wf-net notation
which does not feature triggers, explicit splits and joins, and
hierarchical transitions, to avoid overlaps with the yawl lan-
guage.
protos is the modeling language of pallas athena’s
bpmjone platform, which has been used for the design and im-
plementation of various bpm solutions worldwide. besides its
use in practice, we chose protos for the availability of a number
of large models that the research team obtained via case studies
conducted with european organizations.
yawl (yet another workﬂow language) is an expressive
language to describe, analyze and automate complex business
process speciﬁcations, which builds on top of wf-nets and pro-
vides comprehensive support for the workﬂow patterns [aalst
et al., 2003]. yawl is widely used in teaching and research,
and is facing an increased uptake in industry [yawl founda-
tion].
finally, ws-bpel (web service business process execu-
tion language) is an alternative to yawl, which describes
business process models as a composition of web services. for
this reason, bpel represents a convergence between web ser-
vices and business process technology. its speciﬁcation derives
from the joint e ort of a number of it vendors and has been
7standardized by the oasis [oasis] consortium.
we compared all modeling elements in the above languages
with each other, by looking at the underlying concepts cap-
tured by each element. for example, epc functions were com-
pared with bpmn tasks, wf-nets transitions, protos activities,
yawl tasks and bpel activities, since they all capture the con-
cept of “performing some work”. in order to do so, we ﬁrst de-
composed any concrete language construct in its fundamental
concepts. for example, in yawl splits and joins are always
attached to tasks, so we extrapolated the join and split behav-
ior from a yawl task, and compared the former two with the
routing elements of the other languages (more details on the
conversion of language constructs are provided below). from
this analysis, we created a canonical element for each concept
that was shared by at least four languages out of the six taken
into account
table 2 illustrates how the canonical elements from fig-
ure 2 are mapped to concrete modeling elements. we can
observe that basic concepts such as ’edge’, ’task’, ’event’
and ’andsplit /join’ are shared by all languages, others such
as ’state’, ’xorsplit /join’ and ’object’ are only shared by
ﬁve languages, while more advanced concepts such as ’or-
split/join’, ’resourcetype’ and the speciﬁc event types ’mes-
sage’ and ’timer’, are only supported by four languages out of
six. the table also lists at the bottom those elements that are not
supported by the canonical format. these elements refer to con-
cepts that are not su ciently represented in the six languages
examined, such as error handling, cancelations or multiple in-
stance tasks. hence, supporting these concepts would have led
to canonical elements being too language-speciﬁc. moreover,
these concepts are typically not interpreted by the various al-
gorithms available in the literature. nonetheless, the canoni-
cal format can be extended without varying its core structure,
should new concepts be needed in future.
figure 3 concludes the discussion on the canonical for-
mat by illustrating the canonical representation of twelve com-
mon language constructs, according to the mapping in table 2.
each construct (central column) is converted into a directed, at-
tributed graph (right column) made up of a number of nodes
and edges which are annotated with a reference to the respec-
tive element in the concrete language (trivial edge annotations
are omitted).
the ﬁrst construct is taken from epcs and represents a data-
driven decision. epcs only provide three modeling elements
to capture a process control-ﬂow: functions, connectors and
events. functions are always mapped to tasks while connec-
tors are mapped to splits and joins, depending on their type.
events are mapped to canonical events if they do not imme-
diately follow an (x)or-split connector, otherwise to edges.
this is because in epcs the events following an (x)or-split
are actually used to represent the conditions upon which the
(x)orsplit choice is made. therefore, in this example the
two epc events in the example of figure 3 are mapped to
two edges, and their labels to the attribute ’condition’ of these
edges.
the second and third constructs are two examples of syn-
tactic sugar o ered by bpmn, i.e. more concise representations
acanonical representation concrete construct
work
@:
 a event
@:
 q
state
@:
 qwork
@:
 byawlwf-net/
protos
ws-bpel <if> 
<condition>c 1</condition> 
<a/>
<elseif>* 
<condition>c 2</condition> 
<b/>
</elseif> <else>? 
<c/>
</else> 
</if> c2 c1 default
xorjoin
@:
 </if>xorsplit
@:
 <if>
<while> 
<condition>c</condition> 
<a/>
</while>default
xorsplit
@:
 </while>xorjoin
@:
 <while>
cwork
@:
 <a/>
<repeatuntil> 
<a/>
<condition>c</condition> 
</repeatuntil> defaultxorsplit
@:
 </repeatuntil>xorjoin
@:
 <repeatuntil>
cwork
@:
 <a/>
<flow> 
<links> 
<link name="atoc"/> 
<link name="dtoc"/> 
</links> <sequence>  
<a> 
<sources> 
<source 
linkname="atoc"/> 
</sources> 
</a> <b/>
</sequence><c>
<targets> 
<target
linkname="atoc"/> 
<target
linkname="dtoc"/> 
</targets>
</c><d>  
<sources> 
<source
linkname="ytob"/> 
</sources>
</d>
</flow> andjoin
@:
 </flow>work
@:
 <d/>andsplit@:
<flow>
work@:
<a/>
andsplit@:
<sources> in a
andjoin@:
<targets> in candsplit
@:
 <sources> in c
edge
@:
 link atocedge
@:
 link dtoc
work@:
<b/>
work@:
<c/>work
@:
 <a/>work@:
<c/>work@:
<b/>language
baprotosa
c1
c2(x)orjoin
@:
 ajwork
@:
 a
(x)orsplit
@:
 asc3
c4andjoin
@:
 ajwork
@:
 a
andsplit
@:
 as
andjoin
@:
 ajorsplit
@:
 asc1
c2work
@:
 a
a
c1
c2
cx= flow predicate
qa
c1 c2x/vwork
@:
 a
(x)orsplit
@:
 pc1
c2pepcedge@:
c1
edge@:
c2
cx= connection condition as= split component of a aj= join behavior of aabpmn
xorjoin
@:
 ajwork
@:
 a
andsplit
@:
 as
awork
@:
 a
orsplit
@:
 asc1
c1
(c3)c2
(c3),default
cx= flow condition cx= edge with attribute condition="c x"= node
= edge
@: = annotation
= refers to [concrete element]
= edge with attribute default="true" defaultfunction
event(x)or connector
task
transition activity
taskand-join or-split
input
conditiondefault flowconditional flow
c2
ac1 c2
c3 c4
note: the type of split and join (xor or or) can be determined 
only if this is explicitly set in a protos activity
work
@:
 a
event
@:
 qstate
@:
 q
work
@:
 ba
b qoutputconditionfigure 3: canonical representation of common concrete language constructs.
8canonical element (e/i)epc bpmn 1.1 wf-net protos 8.0 yawl 2.0 ws-bpel 2.0
net epc, compound (sub)process (sub)process (sub)net process, scope
function
edge arc, event subsequent sequence flow, flow connection flow sequence, link
to (x)or-split conditional flow,
connector default flow
task function task transition activity task assign, empty,
extensionactivity
event event not subsequent plain event, input place, sese status input condition, [mapped directly to
to (x)or-split start rule event output place, output condition, speciﬁc types message
connector sese4place sese condition and timer]
message event message event message wsinvoker task invoke, receive,
trigger reply, onmessage
in pick
timer event timer event timer timer task wait, on alarm
trigger in pick
andsplit and-split parallel-split transition’s activity’s task’s flow (opening tag),
connector gateway, and-split and-split and-split source link
task’s parallel-split
orsplit or-split inclusive-split activity’s task’s
connector gateway, task’s or-split or-split
inclusive-split
xorsplit xor-split data-based activity’s task’s if (opening tag),
connector exclusive-split xor-split xor-split while (opening tag),
gateway repeatuntil
(opening tag)
andjoin and-join parallel-join transition’s activity’s task’s flow (closing tag),
connector gateway and-join and-join and-join target link
orjoin or-join inclusive-join activity’s task’s
connector gateway or-join or-join
xorjoin xor-join exclusive-join activity’s task’s if (closing tag),
connector gateway, xor-join xor-join while (closing tag),
task’s exclusive-join repeatuntil
(closing tag)
pick (closing tag)
state event-based non-sese non-sese non-sese pick (opening tag)
exclusive-split (input /output) status (input /output)
gateway place condition
resourcetype org. unit (eepc), pool, lane role, role, org. group,
(human /nonhuman) position (eepc), role group, position,
supporting responsible capability
system (eepc), (resource), custom service
role (iepc) application
object object data object document, task variable variable,
(hard /soft) (eepc,iepc) folder, for and until
data group, in wait and
data element onalarm
processinterface, terminate, complex multiple, cancelation, exit, foreach,
person (eepc) gateway, events: buer, team, multiple instance, throw, validate,
link, error, multiple, batch participant handlers,
compensation, can- correlations
cel, signal; events
on task boundary,
multiple instance,
block repetition,
adhoc, transaction,
message flow,
exception flow
table 2: conversion chart for the canonical format, including concrete elements not supported.
9of a given concept. the two incoming flows to task a in the
second construct, are a compact notation for an exclusive-join
gateway, while the two outgoing flows are a compact notation
for a parallel-split gateway. this translates to a canonical graph
with one work node preceded by an xorjoin node (mapping
the implicit join) and followed by an andsplit node (map-
ping the implicit split). similarly, the third construct shows the
compact notation for an inclusive-split gateway via two con-
ditional flows (each capturing a condition for the choice) and
one default flow (capturing the default condition). the corre-
sponding canonical graph will have an orsplit node to capture
the inclusive choice and one edge for each outgoing flow, with
the default flow being mapped into an edge with attribute ’de-
fault’ set to true.
the fourth construct shows how and-join and and-split
are modeled in wf-nets and protos. this behavior is never ex-
plicitly represented, but captured via incoming /outgoing flows
(or connections in the case of protos) to /from a transition (ac-
tivity). furthermore, protos allows one to specify the (x)or-
join and -split behavior for an activity. again, this is not ex-
plicitly shown and must be speciﬁed through an activity’s prop-
erties (ﬁfth construct). in both cases, we need to add two extra
routing nodes in the canonical representation to explicitly cap-
ture the split and join behavior, besides a work node to capture
the transition or activity.
as opposed to bpmn, wf-nets and protos, in yawl splits
and joins must be explicitly represented as task decorations
(sixth construct). this is because they are semantically bound
to the task’s behavior. therefore in the canonical format we
need to separate a task from its routing behavior. another
yawl example is provided by the seventh construct, in which
two tasks follow an input condition (the node used to capture
the beginning of a yawl process). as per table 2, in this
case the canonical representation of the inputcondition will be
made up of an event to signal the beginning of the process,
plus a state to indicate the event-driven decision. similarly, the
eight construct shows the canonical representation for an out-
put condition preceded by two tasks in yawl.
the last four examples show the canonical representation of
the routing constructs provided by ws-bpel: if (to model ex-
clusive data-driven choices), while and repeatuntil (to model
loops) and flow (to model parallelism). ws-bpel does not of-
fer an o cial visual representation for its processes, therefore
we used the ws-bpel xml format to illustrate these exam-
ples.
6. prototype implementation
as a proof of concept, we implemented a prototype of
apromore according to the architecture described in sec-
tion 4.5the prototype supports the following features:
basic functionalities: model import /export, model
search, model classiﬁcation;
5the propotype is available at http://is.tm.tue.nl:8080/proscomparison functionality: similarity search;
management functionality: harmonization-driven cre-
ation.
these functionalities can be consumed via a web portal, or
directly by using the available web services. the portal ex-
poses the above functionalities through a graphical interface to
provide process models visualization and editing capabilities
(see figure 4). speciﬁcally, the portal is implemented using a
model-view-controller pattern, where the portal itself is merely
a view on the models stored in the underlying database with
java methods acting as controllers. the algorithms for simi-
larity search and harmonization-driven creation, as well as the
(de)canonization adapter, are exposed as web services through
a standard wsdl interface.
internally, the models archive and the canonical models
archive are implemented through a single mysql database,
although these are exposed as two separate logical entities
through data-centric web services. currently, the process mod-
eling languages that are supported are epcs and bpmn.
figure 4: a screenshot of the prototype implementation of the web portal.
in the following we describe two example scenarios that are
supported by the prototype repository.
in the ﬁrst scenario an organization can use the business
process repository for advanced search functionalities. the col-
lection of process models to be analyzed can be developed in a
separate bpms and then imported into the repository. depend-
ing on the functionalities provided by the external bpms and
the level of integration between the latter and the repository,
bpms users can proﬁt from the advanced functionalities pro-
vided by the repository. for example, they can search for a par-
ticular model based on keywords, on models classiﬁcation (e.g.
5single-entry single-exit
10per industry vertical) or by using an input model that is similar
to the model to be searched for. at the tightest level of inte-
gration, this integration is made possible by invoking the web
services provided by the repository directly from the bpms.
alternatively, a link is established between the repository web-
portal and the bpms such that users can use the web-portal to
perform their searches and upon opening a process model in the
portal, the bpms is launched.
in the second scenario the harmonization-driven creation
provided by the repository can be used to assist an organization
integrating their process models with those of another organi-
zation, e.g. as part of a merger or acquisition. both organiza-
tions can import their sets of business processes in the reposi-
tory (provided that they are in a format that the repository sup-
ports). subsequently, they can use the similarity search function
to search for pairs of models that are similar. in a next step they
can be aided in establishing a match between elements from
one process and elements from the other process and merge
the two models into a conﬁgurable process model, using this
match. the resulting model will capture both the commonali-
ties between the two models, and their di erences, in the form
of variation points. this new model can then provide a roadmap
for implementing changes to the current business services and
it infrastructure supporting the business process, in order to
rationalize them.
7. conclusion
this paper presents apromore, which is an advanced
repository to hold, analyze and re-use large sets of process mod-
els. apromore is an open source platform implemented ac-
cording to the principles of service-oriented architectures, and
exposed to the end user via a web interface. the canonical for-
mat for process modeling notations is an essential ingredient for
dealing with the diversity of available notations. a prototype
displaying the feasibility of apromore is also presented in
this paper.
the contribution of apromore can be discussed from
two angles. considering the interests of practitioners , the tool
is thought to be helpful in dealing with many of the challenges
that stakeholders face when dealing with large numbers of pro-
cess models. in this respect, apromore goes well beyond
the typical capabilities o ered by commercial tools, such as
access control and simple version control, in the sense that it
particularly provides advanced support for dealing with models
in dierent notations, platform-independent access, and main-
taining the relations that exist between models. also, apro-
more is capable of incorporating a collection of state-of-the-
art techniques for analyzing, visualizing, transforming, and cre-
ating process models, which hitherto have mostly been known
to the research community but hardly used in practice. in this
way, apromore can be regarded to as a tangible means for
knowledge transfer to the process modeling praxis.
from a research perspective, it is noteworthy that apro-
more is open to all researchers who have an interest in ap-
plying and developing techniques dealing with the analysis andoptimization of process models. due to its service-oriented ar-
chitecture, it will be relatively easy for researchers to develop
their own services and web plug-ins, o ering new capabilities
while interacting with existing ones, by relying on the common
infrastructure of apromore. in this way, apromore of-
fers a separation of concerns that we hope is appreciated by our
fellow researchers. an initiative that inspired us in this respect
is prom,6which is highly successful as an open research plat-
form in the ﬁeld of event log analysis.
at present, one of the challenges is to populate the reposi-
tory with large sets of process models to be used as a test-bed
and which can help to unleash the capabilities of apromore.
already, due to the involvement of four research groups in the
apromore project we have some 2000 +models available,
most of them of medium size (20-100 tasks), which have been
developed either in an academic or in an industry context. at
this stage, we are in touch with various industrial partners in the
ﬁnancial, healthcare, governmental, and creative industries do-
mains to interest them in this initiative. other challenges relate
to more technical and operational issues, such as adding open,
web-based interfaces to proprietary implementations of anal-
ysis techniques, ensuring that the hardware can scale with the
use in apromore, aligning with access models such as the
openid initiative,7and integrating with other open platforms
such as prom and the oryx visual editor8.
with respect to future research, our e orts will be devoted
to the development of new analysis and management techniques
to be integrated in apromore. one example would be the de-
velopment of an advanced version control system that can pro-
vide a semi-automatic resolution of conﬂicting process model
updates. this is a relevant characteristic for a modern collab-
orative process modeling environment where it is realistic to
assume that many stakeholders with di erent skills and respon-
sibilities will partake in the modeling activity, thus potentially
generating conﬂicting versions that need to be harmonized.
in conclusion, we believe that apromore is an important
step in reaching a more mature level of dealing with the man-
agement of large volumes of process models, which is com-
plex but highly relevant for practice and an enticing area for
research. we hope that both practitioners and researchers will
join us in its further development.
references
w.m.p. van der aalst. structural characterizations of sound workﬂow nets.
computing science reports 96 /23, eindhoven university of technology,
eindhoven, 1996.
w.m.p. van der aalst. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers , 8(1):21–66, 1998.
w.m.p. van der aalst. tomtom for business process management (tom-
tom4bpm). in proceedings of the 21st international conference on ad-
vanced information systems engineering (caise’09) – keynote , pages 8–12,
2009.
w.m.p. van der aalst and a.h.m. ter hofstede. yawl: yet another workﬂow
language. information systems , 30(4):245–275, 2005.
6www.processmining.org
7http://openid.net
8http://bpt.hpi.uni-potsdam.de/oryx
11w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. barros.
workﬂow patterns. distributed and parallel databases , 14(1):5–51, 2003.
w.m.p. van der aalst, m. dumas, f. gottschalk, a.h.m. ter hofstede, m. la
rosa, and j. mendling. preserving correctness during business process
model conﬁguration. formal aspects of computing , 2009. (forthcoming).
r. anupindi, s. chopra, s.d. deshmukh, j.a. van mieghem, and e. zemel.
managing business process flows . prentice hall, 1999.
a. awad, g. decker, and m. weske. e cient compliance checking using
bpmn-q and temporal logic. in m. dumas, m. reichert, and m.-c. shan,
editors, proc. of the 6th international conference on business process man-
agement , volume 5240 of lecture notes in computer science , pages 326–
341. springer, 2008. isbn 978-3-540-85757-0.
s. balko, a. barros, a.h.m. ter hofstede, m. la rosa, and m. adams. con-
trolled ﬂexibility and lifecycle management of business processes through
extensibility. in w. esswein, j. mendling, and s. rinderle-ma, editors, pro-
ceedings of the 4th workshop on enterprise modelling and information sys-
tems architectures (emisa) , volume 152 of lectures notes in informatics ,
pages 97–110. gi, 2009. (forthcoming).
w. bandara, g. gable, and m. rosemann. factors and measures of business
process modelling: model building through a multiple case study. european
journal of information systems , 14(4):347–360, 2005.
j. becker, m. rosemann, and c. von uthmann. guidelines of business process
modeling. in w.m.p. van der aalst, j. desel, and a. oberweis, editors,
business process management. models, techniques, and empirical studies ,
volume 1806 of lecture notes in computer science , pages 30–49. springer,
2000.
p.a. bernstein. applying model management to classical meta data problems.
inconference on innovative data systems research (cidr) , pages 209–
220, 2003.
p.a. bernstein and u. dayal. an overview of repository technology. in pro-
ceedings of the 20th very large data bases conference (vldb’94) , pages
705–713. m. kaufmann, 1994.
r.w. blanning. model management systems: an overview. decision support
systems , 9(1):9–18, 1993.
t. curran and g. keller. sap r /3 business blueprint: understanding the busi-
ness process reference model . upper saddle river, 1997.
b curtis, m.i. kellner, and j. over. process modeling. communications of the
acm , 35(9):75–90, 1992.
i. davies, p. green m. rosemann, m. indulska, and s. gallo. how do practi-
tioners use conceptual modeling in practice? data &knowledge engineer-
ing, 58(3):358–380, 2006.
a. k. alves de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. quan-
tifying process equivalence based on observed behavior. data &knowledge
engineering , 64(1):55–74, 2008.
r.m. dijkman. a classiﬁcation of di erences between similar business pro-
cesses. in proceedings of the 11th ieee international enterprise dis-
tributed object computing conference (edoc’07) , pages 37–50, annapo-
lis, maryland, usa, 2007. ieee.
r.m. dijkman, m. dumas, and l. garcia-banuelos. graph matching algo-
rithms for business process model similarity search. in proceedings of the
7th international conference on business process management (bpm’09) ,
lncs. springer, 2009.
d.r. dolk and b.r. konsynski. knowledge representation for model manage-
ment systems. ieee transactions on software engineering , 10(6):619–627,
1984.
p. enger, m. kaufmann, and m. siebenhaller. an interactive layout tool for
bpmn. in bpmn 2009 – 1st international workshop on bpmn (cec09 -
11th ieee conference on commerce and enterprise computing) , 2009.
r. eshuis and p.w.p.j. grefen. constructing customized process views. data
&knowledge engineering , 64(2):419–438, 2008.
d. fahland, c. favre, b. jobstmann, j. koehler, n. lohmann, h. v oelzer, and
karsten wolf. instantaneous soundness checking of industrial business pro-
cess models. in proceedings of bpm 2009 , lecture notes in computer
science. springer-verlag, 2009.
c. fillies, g. wood-albrecht, and f. weichhardt. pragmatic applications of the
semantic web using semtalk. computer networks , 42(5):599–615, 2003.
g.m. giaglis. a taxonomy of business process modeling and information
systems modeling techniques. international journal of flexible manufac-
turing systems , 13(2):209–228, 2001.
f. gottschalk, wil m. p. van der aalst, and m.h. jansen-vullers. merging
event-driven process chains. in r. meersman and z. tari, editors, pro-ceedings of the 16th international conference on cooperative information
systems (coopis’08) , volume 5331 of lecture notes in computer science ,
pages 418–426. springer, 2008.
t.r.g. green and m. petre. usability analysis of visual programming environ-
ments: a ’cognitive dimensions’ framework. j. vis. lang. comput. , 7(2):
131–174, 1996.
g. grossmann, y . ren, m. schreﬂ, and m. stumptner. behavior based integra-
tion of composite business processes. in w.m.p. van der aalst, b. benatal-
lah, f. casati, and f. curbera, editors, business process management, 3rd
international conference, bpm 2005, nancy, france, september 5-8, 2005,
proceedings , volume 3649 of lecture notes in computer science , pages
186–204. springer, 2005.
j.a. gulla and t. brasethvik. on the challenges of business modeling in
large-scale reengineering projects. in proceedings of the 4th international
conference on requirements engineering , pages 27–38. ieee computer
society washington, dc, usa, 2000.
c.w. g ¨unther and w.m.p. van der aalst. fuzzy mining – adaptive process
simpliﬁcation based on multi-perspective metrics. in g. alonso, p. dadam,
and m. rosemann, editors, proceedings of the 5th international conference
on business process management (bpm’07) , volume 4714 of lecture notes
in computer science , pages 328–343. springer, 2007.
k. van hee, o. oanea, n. sidorova, and m. v oorhoeve. verifying general-
ized soundness for workﬂow nets. in i. virbitskaite and a. v oronkov, ed-
itors, proc. of the 6th international conference on perspectives of system
informatics, psi’2006 , volume 4378 of lecture notes in computer science ,
pages 231–244, novosibirsk, june 2006. springer-verlag.
m. hepp, f. leymann, c. bussler, j. domingue, a. wahler, and d. fensel.
semantic business process management: using semantic web services for.
business process management. in ieee international conference on e-
business engineering , pages 535–540, beijing, china, 2005. ieee.
ids scheer. aris itil. home page, a. http://www.ids-scheer.com/en/
aris/aris_reference_models_/aris_itil/3742.html . accessed:
august 2009.
ids scheer. aris scor. home page, b. http://www.ids-scheer.com/
en/aris/aris_reference_models_/scor/81882.html . accessed:
august 2009.
m. jarke, m.a. jeusfeld, c. quix, and p. vassiliadis. architecture and quality
in data warehouses: an extended repository approach. information systems ,
24(3):229–253, 1999.
d. karagiannis and h. k ¨uhn. metamodelling platforms. invited paper. in k.
bauknecht and a. min tjoa and g. quirchmayer, editor, proceedings of the
3rd international conference ec-web 2002 - dexa 2002, aix-en-provence,
france , volume 2455 of lecture notes in computer science , pages 182–196,
2002.
d. karastoyanova, t. van lessen, f. leymann, z. ma, j. nitzsche, b. wet-
zstein, s. bhiri, m. hauswirth, and m. zaremba. a reference architecture
for semantic business process management systems. gito-verlag, berlin,
2008.
g. keller, m. n ¨uttgens, and a.-w. scheer. semantische processmod-
ellierung auf der grundlage ereignisgesteuerter processketten (epk).
ver¨oentlichungen des instituts f ¨ur wirtschaftsinformatik, university of
saarland, saarbr ¨ucken, germany, 1992. (in german).
i. kitzmann, c. k ¨onig, d. l ¨ubke, and l. singer. a simple algorithm for auto-
matic layout of bpmn processes. in bpmn 2009 – 1st international work-
shop on bpmn (cec09 - 11th ieee conference on commerce and enter-
prise computing) , 2009.
m. klein and a. bernstein. towards high-precision service retrieval. ieee
internet computing , 8(1):30–36, 2004.
m. la rosa. managing variability in process-aware information systems .
ph.d. thesis, queensland university of technology, brisbane, australia,
april 2009.
m. la rosa, m. dumas, a.h.m. ter hofstede, j. mendling, and f. gottschalk.
beyond control-flow: extending business process conﬁguration to roles
and objects. in q. li, s. spaccapietra, e. yu, and a. oliv ´e, editors, pro-
ceedings of the 27th international conference on conceptual modeling
(er’08) , volume 5231 of lecture notes in computer science , pages 199–
215. springer, 2008.
h. lee and j.-w. joung. an enterprise model repository: architecture and
system. j. database manag. , 11(1):16–28, 2000.
f. leymann and w. altenhuber. managing business processes as an information
resource. ibm systems journal , 33(2):326–348, 1994.
12s. melnik, e. rahm, and p.a. bernstein. rondo: a programming platform for
generic model management. in proceedings of the 2003 acm sigmod in-
ternational conference on management of data , pages 193–204. acm new
york, ny , usa, 2003.
j. mendling. metrics for process models: empirical foundations of veriﬁca-
tion, error prediction and guidelines for correctness , volume 6 of lecture
notes in business information processing . springer, berlin, germany, 2008.
j. mendling. empirical studies in process model veriﬁcation. lncs transac-
tions on petri nets and other models of concurrency , 2:208–224, 2009.
j. mendling and c. simon. business process design by view integration. in jo-
hann eder and schahram dustdar, editors, proceedings of bpm workshops
2006 , volume 4103 of lecture notes in computer science , pages 55–64,
vienna, austria, 2006. springer-verlag.
j. mendling, m. n ¨uttgens, and m. la rosa. epml schema 2.0. http://www.
processconfiguration.com/schemas/epml_2.0.xsd . accessed: au-
gust 2009.
j. mendling, h.a. reijers, and j. cardoso. what makes process models un-
derstandable? in gustavo alonso, peter dadam, and michael rosemann,
editors, business process management - bpm 2007 , volume 4714 of lec-
ture notes in computer science , pages 48–63. springer, brisbane, australia,
2007.
j. mendling, j. recker, and h.a. reijers. on the usage of labels and icons
in business process modeling. international journal of information system
modeling and design , 2009a. (forthcoming).
j. mendling, h.a. reijers, and w.m.p. van der aalst. seven process modeling
guidelines (7pmg). information and software technology (ist) , 2009b. in
press.
m. momotko and k. subieta. process query language: a way to make workﬂow
processes more ﬂexible. in g. gottlob, a.a. bencz ´ur, and j. demetrovics,
editors, advances in databases and information systems, 8th east european
conference, adbis 2004, budapest, hungary, september 22-25, 2004, pro-
ceesing , volume 3255 of lecture notes in computer science , pages 306–
321. springer, 2004.
t. murata. petri nets: properties, analysis and applications. proceedings of
the ieee , 77(4):541–580, april 1989a.
tadao murata. petri nets: properties, analysis and applications. proceedings
of the ieee , 77(4):541–580, 1989b.
oasis. home page. hhttp://www.oasis-open.org . accessed: august
2009.
oasis. web services business process execution language (ws-bpel), ver-
sion 2.0. oasis standard . oasis, 2007. http://docs.oasis-open.
org/wsbpel/2.0/os/wsbpel-v2.0-os.pdf . accessed: august 2009.
object management group. home page. http://www.omg.org . accessed:
august 2009.
object management group. business process modeling notation (bpmn),
version 1.1. omg speciﬁcation . omg, 2008. http://www.bpmn.org/
documents/bpmn\%201-1\%20specification.pdf . accessed: august
2009.
c.a. petri. kommunikation mit automaten . phd thesis, fakult ¨at f¨ur mathe-
matik und physik, technische hochschule darmstadt, darmstadt, germany,
1962. (in german).
a. polyvyanyy, s. smirnov 0002, and m. weske. process model abstraction:
a slider approach. in 12th international ieee enterprise distributed ob-
ject computing conference, ecoc 2008, 15-19 september 2008, munich,
germany , pages 325–331. ieee computer society, 2008.
g. preuner, s. conrad, and m. schreﬂ. view integration of behavior in object-
oriented databases. data &knowledge engineering , 36(2):153–183, 2001.
h.a. reijers, r.s. mans, and r.a. van der toorn. improved model manage-
ment with aggregated business process models. data &knowledge engi-
neering , 68(2):221–243, 2009.
m. rosemann and wil van der aalst. a conﬁgurable reference modelling
language. information systems , 32:1–23, 2007.
a. rozinat, m.t. wynn, w.m.p. van der aalst, a.h.m. ter hofstede, and c.j.
fidge. workﬂow simulation for operational decision support using design,
historic and state information. in m. dumas, m. reichert, and m.-c. shan,
editors, business process management, 6th international conference, bpm
2008, milan, italy, september 2-4, 2008. proceedings , volume 5240 of lec-
ture notes in computer science , pages 196–211. springer, 2008.
a.-w. scheer. aris – business process frameworks . springer, 3rd edition,
1999.
a.-w. scheer and m. n ¨uttgens. aris architecture and reference models forbusiness process management. pages 376–389, 2000.
m. schrepfer, j. wolf, j. mendling, and h.a. reijers. the impact of secondary
notation on process model understanding. in proceedings of practice of en-
terprise modeling (poem’09) , lecture notes in business information pro-
cessing, 2009.
j. siegeris and o. grasl. model driven business transformation – an experi-
ence report. in m. dumas, m. reichert, and m.-c. shan, editors, proceed-
ings of the 6th international conference on business process management
(bpm’08) , volume 5240 of lecture notes in computer science . springer,
2008.
a. streit, b. pham, and r. brown. visualization support for managing large
business process speciﬁcations. in w.m.p. van der aalst, b. benatallah,
f. casati, and f. curbera, editors, proceedings of the 3rd international con-
ference on business process management (bpm’05) , volume 3649 of lec-
ture notes in computer science , pages 205–219. springer, 2005.
t. theling, j. zwicker, p. loos, and d. vanderhaeghen. an architecture for
collaborative scenarios applying a common bpmn-repository. in l. kutvo-
nen and n. alonistioti, editors, distributed applications and interoperable
systems, 5th ifip wg 6.1 international conference, dais 2005, athens,
greece, june 15-17, 2005, proceedings , volume 3543 of lecture notes in
computer science , pages 169–180. springer, 2005.
l.h. thom, j.m. lau, c. iochpe, and j. mendling. extending business process
modeling tools with workﬂow pattern reuse. in j. cardoso, j. cordeiro, and
j. filipe, editors, iceis 2007 - proceedings of the ninth international con-
ference on enterprise information systems, volume eis, funchal, madeira,
portugal, june 12-16, 2007 , pages 447–452, 2007.
b.f. van dongen, r.m. dijkman, and j. mendling. measuring similarity be-
tween business process models. in proceedings of the 20th international
conference on advanced information systems engineering (caise) , vol-
ume 5074 of lncs , pages 450–464. springer, 2008.
h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing workﬂow
processes using woﬂan. the computer journal , 44(4):246–279, 2001.
c. ware, h.c. purchase, l. colpoys, and m. mcgill. cognitive measurements
of graph aesthetics. information visualization , 1(2):103–110, 2002.
i. weber, i. markovic, and c. drumm. a conceptual framework for composition
in business process management. lecture notes in computer science , 4439:
54, 2007.
workﬂow management coalition. xpdl home page. http://www.wfmc.
org/xpdl.html . accessed: september 2009.
yawl foundation. yawl adoption. http://www.yawlfoundation.org/
about/adoption.html . accessed: august 2009.
13