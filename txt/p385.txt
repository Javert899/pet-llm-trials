trends inbusiness process analysis
fromveriﬁcation to processmining
wil m.p.vanderaalst
department of mathematics and computer science, eindhoven university of technology,
p.o.box 513, 5600 mb,eindhoven, the netherlands
w.m.p.v.d.aalst@tue.nl
keywords: business process management, process mining, petrinets, v eriﬁcation,simulation,workﬂow management.
abstract: businessprocessanalysisrangesfrommodelveriﬁcationat design-timetothemonitoringofprocesses atrun-
time. muchprogresshasbeenachievedinprocessveriﬁcatio n. todayweareabletoverifytheentirereference
model of sap without any problems. moreover, more and more pr ocesses leave their “trail” in the form of
eventlogs. thismakesitinterestingtoapplyprocessminin gtotheselogs. interestingly,practicalapplications
of process mining reveal that reality is often quite differe nt from the idealized models, also referred to as
“powerpointreality”. futureprocess-awareinformations ystemswillneedtoprovidefullsupport oftheentire
life-cycle of business processes. recent results in busine ss process analysis show that this is indeed possible,
e.g.,thepossibilitiesofferedbyprocess miningtoolssuc haspromarebreathtakingbothfromascientiﬁcand
practical perspective.
1 introduction:the role
of models
modelsplayanimportantroleininformationsystems
and it is clear that the importance of models will in-
crease. models can be used to specify systems and
processesandcanbeusedfortheiranalysis. someof
today’sinformationsystems are even drivenby mod-
els (cf. workﬂow management systems). although
the general vision of a “model driven architecture”
(mda) is appealing, it is not yet realistic/practical
for many applications. only in speciﬁc niches such
as workﬂow technology, mda is already a reality
and has proven to be valuable. in the context of en-
terprise resource planning (erp) systems, i.e., the
world of sap, peoplesoft, oracle, etc., models play
a less prominent role. these systems offer a work-
ﬂowcomponent,butmostoftheirfunctionalityisstill
hard-coded. the well-know reference model of sap
(curran and keller, 1997) contains 604 event-driven
process chains (epcs) modeling the different busi-
ness processes supported by the r/3 system. how-
ever, these epc models are not used for enactment
and serve more as backgroundinformation. it seems
vitalthaterpsystemslikesapstartusingmodelsasa starting point, rather than just as a means to docu-
mentthingsafterwards. itseemsparticularlyinterest-
ing to use conﬁgurable process models (aalst et al.,
2006a)asastartingpoint. forexample,onecanmake
epcsconﬁgurableasshownin(rosemannandaalst,
2006; jansen-vullers et al., 2006) and use models to
conﬁgurethesystem toﬁt a certainbusinesscontext.
although models are highly relevant for the en-
actment of systems, this paper will not focus on this
aspect of modeling. the interested reader may con-
sultworkﬂowliteraturetolearnmoreaboutthis(aalst
and hee, 2004; aalst, 2004; leymann and roller,
1999; georgakopoulos et al., 1995) and play with
an open-source workﬂow management system like
yawl (aalst and hofstede, 2005). instead we focus
on theanalysis of business processes and try to pro-
vide anoverviewof recent developmentsin this area.
we will focus on two types of analysis: (1) analysis
atdesign-time and (2) analysis at run-time. at de-
sign time, the only basis for analysis is a model, e.g.,
a workﬂow (re)design (netjes et al., 2006). at run-
time,onecanalsoobservetheactualbehavioranduse
thisasinputforanalysis.
figure 1 showsan overviewof the differenttypes
of analysis discussed in this paper. to explain themodels
analyzes
discoveryrecords
events, e.g., 
messages,
transactions,
etc.specifies
configures
implements
analyzessupports/
controls
extensionconformancepeople machines
organizationscomponentsbusiness processes
verification
performance
analysisperformance
analysis
recommendation
design-time
analysisrun-time
analysis
figure 1: the relationships between reality, systems, logs , and models and the different types of design-time and run-t ime
analysis.
diagram let us ﬁrst consider the top part showing
the interaction between the “world” and some (soft-
ware) system. any informationsystem ultimately in-
teracts with some physical environment; otherwise it
serves no purpose. the system may support or con-
trol all kinds of processes taking place in the real
world. moreover, most systems also record events
taking place inside and outside the system as indi-
cated by the arrow connecting the “world” to event
logs via the (software) system. today’s information
systems log enormous amounts of events. classi-
cal workﬂow management systems (e.g. staffware),
erp systems (e.g. sap), case handling systems (e.g.
flower), pdm systems (e.g. windchill), crm sys-
tems (e.g. microsoft dynamics crm), middleware
(e.g., ibm’s websphere), hospital information sys-
tems(e.g.,chipsoft),etc. provideverydetailedinfor-
mation about the activities that have been executed.
even embedded systems are connected to the inter-
nettoday,thusallowingforunprecedentedstreamsof
data. on the other hand, models play a prominent
roleasindicatedinfigure1. examplesofmodelsare
processmodelssuchasbpmndiagrams,epcs,petri
nets, bpel speciﬁcations, uml activity diagrams,
but also other types of models such as social net-
works, organizationalcharts, data models, etc. thesemodels can be used to model the “world”. however,
theycanalsobeusedtomodelthesystem. inthiscon-
text it is important to note that most informationsys-
tems have a model of reality, i.e., a software system
thathasno“mentalimage”oftheorganizationalcon-
text and the processes it should support is of limited
use. it isoftenremarkableto see the resemblancebe-
tween simulation modelsand workﬂowmodels. this
supports the earlier observation that information sys-
tems need to have a model of reality. in an mda or
workﬂowsetting,modelsareusedtoconﬁgurethein-
formation system as shown in figure 1. however, in
thispaperwe focusonthe analysisaspectandnoton
enactment .
figure 1 clearly shows the two types of analysis:
(1) analysis at design-time and (2) analysis at run-
time. intheremainder,wewillelaborateonthediffer-
ent types of analysis. on the one hand, this provides
a comprehensiveoverviewof businessprocessanaly-
sis. on the other hand, we will use this to express
ourviewsontheinterestingresearchquestionsinthis
area. inparticular,wewouldlike tomakethefollow-
ingstatements:
•veriﬁcationofreal-lifeprocesseshasbecomeare-
ality!it is possible to verify large sets of compli-
catedmodelsandtheseeffortspayoffbecauseof-ten many errors are found. for example, the 604
epcs of the sap reference models can be easily
analyzedandmanydesignerrorsareuncoveredby
doingso(mendlingetal.,2006a;mendlinget al.,
2006b).
•the abundanceof event logs allows for new and
exciting forms of process analysis. process min-
ingcan use this information in various ways. it
may be used to discover the way that people re-
ally work, it may be used to ﬁnd out where there
aredeviations,itmaybeusedtosupportpeoplein
performing their duties, and ultimately it can be
usedforall kindsofprocessimprovement.
•usingtheslogan “the worldisnot apetri net”
we would like to emphasize that reality is often
verydifferentfromwhat is modeledor what peo-
ple think. whatever representation is used (petri
nets or any other modeling language), the model
isanabstraction(i.e.,thingsareleft out)andmay
not reﬂect reality. the ﬁrst observation (abstrac-
tion) is unavoidable and should be accepted as
a fact of life. however, the second observation
is more problematic and should be addressed ur-
gently. as long as managersand system designer
take a “powerpoint” reality as starting point, in-
formation systems will remain to have serious
alignmentproblems.
•there is a need for the academic community
to share software and to build mature business
processanalysistools . withthepromframework
we try to do so. prom provides an open-source
environment where people can plug-in their own
analysistools. currently,promhasmorethan150
plug-ins covering the whole spectrum of process
analysis, but with a clear emphasis on process
miningandmodeltranslations.
in the remainder of this paper, these statements are
explainedandputintocontext.
2 analysis atdesign-time
thissectionelaboratesonmodel-basedanalysisatde-
sign time. note that we focus on process models but
donotlimit ourselvestothecontrol-ﬂowperspective.
2.1 different types ofanalysis
the correctness, effectiveness, and efﬁciency of the
business processessupported by the informationsys-
temare vitaltothe organization. a processdeﬁnition
which contains errors may lead to angry customers,
back-log,damageclaims,andlossofgoodwill. flawsin the design of a process deﬁnition may also lead to
high throughputtimes, low service levels, and a need
for excesscapacity. this is why it is importantto an-
alyze a process before it is put into production. as
shownin figure1,therearethreetypesofanalysis:
•validation , i.e., testing whether the process be-
havesasexpected,
•veriﬁcation , i.e., establishing the correctness of a
processdeﬁnition,and
•performance analysis , i.e., evaluating the ability
to meet requirements with respect to throughput
times, servicelevels,andresourceutilization.
validation can be done by interactive simulation: a
number of ﬁctitious cases are fed to the system to
see whether they are handled well. for veriﬁca-
tion and performance analysis more advanced analy-
sis techniques are needed. fortunately, many power-
fulanalysistechniqueshavebeendevelopedandsome
ofthecorrespondingtoolshavebecomematurein re-
cent years. as an example, consider the petri-net-
based techniques and tools available for the model-
ing and analysis of workﬂows (aalst and hee, 2004;
aalst, 2004; verbeek et al., 2001). linear algebraic
techniques can be used to verify many properties,
e.g., place invariants, transition invariants, and (non-
)reachability. coverability graph analysis, model
checking, and reduction techniques can be used to
analyze the dynamic behavior of a petri net. simu-
lationandmarkov-chainanalysiscanbeusedforper-
formanceevaluation.
2.2 veriﬁcation techniques have
become mature!
acompleteoverviewofthedifferenttypesofdesign-
time analysisisoutsidethe scopeofthispaper. how-
ever, we would like to emphasize that already to-
day there are mature tools and techniques to verify
large collectionsof non-trivialmodels. tools such as
woﬂan (verbeek et al., 2001) have played a pioneer-
ing role in this domain.1using woﬂan it is possible
toextractmodelsfromallkindsofsystemsandcheck
these models for deadlocks, etc. to illustrate the
maturity of process veriﬁcation we brieﬂy describe
the analysis of the entire sap reference model (cur-
ran and keller, 1997) described in (mendling et al.,
2006a;mendlinget al.,2006b).
the sap reference model contains more than
600 non-trivial process models expressed in terms of
1asubstantial partofthe functionalityof woﬂaninem-
bedded inprom(dongen et al.,2005).event-driven process chains (epcs). we have au-
tomatically translated these epcs into yawl mod-
els (aalst and hofstede, 2005) and analyzed these
modelsusingwofyawl,averiﬁcationtoolbasedon
petri nets extending woﬂan (verbeek et al., 2001).
the translation from epcs to yawl is trivial be-
cause epcs can be considered a subset of the much
more expressive yawl language (aalst and hofst-
ede, 2005). the yawl models are then translated to
petri nets and these petri nets are analyzed using the
well-known petri-net invariants. this approach does
not ﬁnd all errors. however, all errors found are real
errors, i.e., the approach is sound but not necessarily
complete. nevertheless, we discovered that at least
34 of these epcs contain errors (i.e., at least 5.6%
is ﬂawed). we analyzed which parts of the sap ref-
erence model contain most errors. moreover, based
on 15 characteristics (e.g., the size of the model), we
usedlogisticregressiontoﬁndpossiblepredictorsfor
these errors showing that complexity of epcs has a
signiﬁcant impact on error probability. this system-
atic analysis of the sap reference model illustrates
thematurityofprocessveriﬁcation.
the interested reader is referred to (mendling
et al., 2006a; mendling et al., 2006b) for details and
pointers to the analysis of similar datasets covering
thousands of epcs. moreover, using improved tech-
niques we are even able to ﬁnd much more errors.
in this work we also predict the occurrence of errors
based on features such as size, complexity,modeling
constructs used, etc. as indicated above, logistic re-
gression can be used to develop useful error predic-
tors. this is related to the complexity metrics pre-
sentedin(cardoso,2006). thehypothesisisthatpeo-
ple aremorelikely tomakeerrorsif theyuse particu-
lar techniquesand/orconstructs.
3 analysis atrun-time
afterdiscussingtechniquestobeusedatdesign-time,
we now focuson run-timeanalysis(cf. figure 1). as
indicatedintheintroduction,today’ssystemsprovide
detailed event logs. process mining has emerged as
a way to analyze systems and their actual use based
on the event logs they produce (aalst et al., 2003;
aalst et al., 2004; agrawal et al., 1998; datta, 1998;
dongen and aalst, 2004; herbst, 2000; rozinat and
aalst, 2006a; weijters and aalst, 2003). note that,
unlikeclassicaldatamining,thefocusofprocessmin-
ing is on concurrent processes and not on static or
mainly sequentialstructures. also note that commer-
cial “business intelligence” (bi) tools are not doing
any process mining. they typically look at aggre-gate data seen from an external perspective(frequen-
cies,averages,utilization,servicelevels,etc.). unlik e
bi tools, process mining looks “inside the process”
(whatarethecausaldependencies?,whereisthebot-
tleneck?, etc.) and at a veryreﬁned level. in the con-
text of a hospital, bi tools focus on performance in-
dicators such as the number of knee operations, the
lengthofwaitinglists,andthesuccessrateofsurgery.
processminingis moreconcernedwith the pathsfol-
lowedbyindividualpatientsandwhethercertainpro-
ceduresarefollowedornot.
the omnipresence of event logs is an important
enabler of process mining, i.e., analysis of run-time
behavior is only possible if events are recorded. as
indicatedearlierallkindsofinformationsystemspro-
vide such logs, e.g., classical workﬂow management
systems (e.g. staffware), erp systems (e.g. sap),
case handling systems (e.g. flower), pdm sys-
tems (e.g. windchill), crm systems (e.g. microsoft
dynamics crm), middleware (e.g., ibm’s web-
sphere), hospital information systems (e.g., chip-
soft), etc. these systems providevery detailed infor-
mation about the activities that have been executed.
however,alsoallkindsofembeddedsystemsincreas-
ingly log events. an embedded system is a special-
purpose system in which the computer is completely
encapsulated by or dedicated to the device or sys-
tem it controls. examples are medical systems (e.g.,
x-ray machines), mobile phones, car entertainment
systems, production systems (e.g., wafer steppers),
copiers, sensor networks, etc. software plays an in-
creasinglyimportantroleinsuchsystemsand,already
today,manyofthesesystemsrecordevents. anexam-
ple is the “customercare remote services net-
work” of philips medical systems (pms). this is a
worldwide internet-based private network that links
pms equipment to remote service centers. an event
thatoccurswithinanx-raymachine(e.g.,movingthe
table, setting the deﬂector, etc.) is recorded and ana-
lyzed. the logging capabilities of the machines of
pms illustrate the way in which embedded systems
produceeventlogs.
the goal of process mining is to extract in-
formation (e.g., process models) from these logs,
i.e., process mining describes a family of a-
posteriori analysistechniquesexploitingtheinforma-
tion recorded in the event logs. typically, these ap-
proaches assume that it is possible to sequentially
record events such that each event refers to an ac-
tivity (i.e., a well-deﬁned step in the process) and is
related to a particular case (i.e., a process instance).
furthermore, some mining techniques use additional
informationsuchastheperformerororiginatorofthe
event (i.e., the person / resource executing or initiat-ing the activity), the timestamp of the event, or data
elements recorded with the event (e.g., the size of an
order).
3.1 process discovery
traditionally, process mining has been focusing on
discovery (cf. figure 1), i.e., deriving information
about the original process model, the organizational
context, and execution properties from enactment
logs. an example of a technique addressing the con-
trol ﬂow perspective is the α-algorithm, which con-
structs a petri net model (desel and esparza, 1995;
reisig and rozenberg,1998)describingthe behavior
observed in the event log. however, process mining
is not limited to process models (i.e., control ﬂow)
and recent process mining techniques are more and
more focusing on other perspectives, e.g., the orga-
nizational perspective or the data perspective. for
example, there are approaches to extract social net-
works from event logs and analyze them using social
network analysis (aalst et al., 2005). this allows or-
ganizations to monitor how people, groups, or soft-
ware/systemcomponentsareworkingtogether.
therearemanydifferenttypesofdiscovery. how-
ever, to understand the basic idea let us consider the
problemofconstructingapetrinetfromaneventlog.
letabeasetof activitynames. forevery process
instance(oftenreferredto as case),a sequenceof ac-
tivities is recorded. such a sequence of activities is
called as a trace.a∗is the set of all possible traces
given a set of activities a. anevent log is a set
of process instances. since only the corresponding
traces are of interest here, an eventlog lis described
by a bag (i.e., a multi-set) of traces. in other words:
l∈a∗→in, i.e., for any possible σ∈a∗,l(σ)de-
notes the number of process instances having a se-
quenceofactivities σ.
as an example consider the process of han-
dling customer orders. an example of a trace
would be (register, ship, send bill, payment, ac-
counting, approved, close) . this trace represents a
sequence of 7 activities. to represent the log we use
more convenient (i.e., shorter) names: r=register ,
s=ship,sb=send bill,p=payment ,ac=accounting ,
ap=approved ,c=close. moreover, there are
additional activities such as em=express mail,
rj=rejected , andrs=resolve . using this shorter
notation we now consider a log lwhere each of the
following traces occurs once (r,s,sb,p,ac,ap,c),
(r,sb,em,p,ac,ap,c), (r,sb,p,em,ac,rj,rs,c),
(r,em,sb,p,ac,ap,c), (r,sb,s,p,ac,rj,rs,c),
(r,sb,p,s,ac,ap,c), and(r,sb,p,em,ac,ap,c). it is
easy to imagine that such traces could be extractedfrom the logs of some information system (e.g., a
sap r/3 system). it should be noted that all traces
start with r(register order) and end with c(close
order). moreover, some of the other activities also
appear in all traces, e.g., sb(send bill), p(payment),
andac(accounting). inalltraceseither s(ship)orem
(expressmail)occurs. if ap(approved)occursin this
small set of traces, then rj(rejected)and rs(resolve)
do not occur (and vice versa). note that for the
human eye it is difﬁcult to make these conclusions
andconstructaprocessmodelthatcorrespondstothe
behavior recorded in event log l. therefore, many
process discovery algorithms have been proposed to
automatically construct process models (e.g., a petri
net) (aalst et al., 2003; aalst et al., 2004; agrawal
et al., 1998; datta, 1998; dongen and aalst, 2004;
herbst, 2000; weijters and aalst, 2003). figure 2
shows a petri net discovered using the α-algorithm
(aalst et al., 2004), i.e., based on the event log l
automatically a model is constructed. in section 5,
when we discuss tool support for process analysis,
we willprovidesomemoreexamples.
3.2 conformance checking
the second type of analysis based on event logs is
conformance checking (cf. figure 1). unlike process
discovery,itisassumedthatthereisana-priorimodel.
this model is used to check if reality conforms to
the model. for example, there may be a process
model indicating that purchase orders of more than
one million euro require two checks. another exam-
ple is the checking of the four-eyes principle. con-
formance checking may be used to detect deviations,
tolocateandexplainthesedeviations,andtomeasure
theseverityofthese deviations.
in (rozinat and aalst, 2006a) it is shown how
a process model (e.g., a petri net) can be evaluated
in the context of a log using metrics such as “ﬁt-
ness” (is the observed behavior possible according
to the model?) and “appropriateness” (is the model
“typical” for the observed behavior?). however, it is
also possible to check conformancebased on organi-
zational models, predeﬁned business rules, temporal
formulas,qualityofservice(qos)deﬁnitions,etc.
note that conformance checking seems particu-
larly interesting in the context of web services (aalst
et al.,2006b;cardosoetal., 2004).
3.3 extension
the third type of process mining assumes again both
a log anda model(cf.figure1). however,the model
is not checked for correctness, instead it is used asfigure2: apetrinet discovered by promusing the α-algorithm.
a basis, i.e., the model is extended with a new as-
pect or perspective. there are different ways to ex-
tenda given process model with additional perspec-
tives based on event logs, e.g., decision mining, per-
formance analysis, and user proﬁling. decision min-
ing, also referred to as decision point analysis, aims
at the detection of data dependencies that affect the
routing of a case (rozinat and aalst, 2006b). start-
ing from a process model, one can analyze how data
attributes inﬂuence the choices made in the process
basedonpast processexecutions. classical datamin-
ingtechniquessuchasdecisiontreescanbeleveraged
for this purpose. similarly, the process model can
beextendedwith timinginformation(e.g.,bottleneck
analysis).
3.4 process mining and simulation
simulationistypicallyusedatdesign-time. however,
giventhe abundanceof data aboutthe actual process,
it is interestingto combineprocessminingand simu-
lation. in our research we envision at least two inter-
estingapproachesto linkbothtopics:
•simulationmodeldiscovery (rozinatetal.,2006).
process mining is not limited to the control-ﬂow
perspective. using discovery and extension it is
possible to build process models adequately de-
scribingmultipleperspectives(control-ﬂow,data,
resources, timing, etc.). this model can directly
be used for simulation purposes as demonstrated
in (rozinat et al., 2006). the possibility to ex-
tract simulation model from event logs opens-up
all kinds of application possibilities and signiﬁ-
cantly lowers the threshold for using simulation.
moreover, most simulation tools are able to gen-
erate event logs. therefore, it is also possible to
useprocessminingtoolstoanalyzesimulationre-
sults. therefore,itispossibletomakeaverytight
connection between process mining and simula-
tion.•short-term simulation (reijers and aalst, 1999).
one canthinkofshort-termsimulationasaquick
look in the near future, i.e., a kind of “fast for-
ward” button. by pushing this button, it is pos-
sible to see what happens if the current situation
is extrapolated. it is also possible to see the ef-
fect of certain decisions (e.g. hiring additional
employees or renounce new orders) in the near
future. in this way, short-term simulation be-
comes a powerful tool for management control
and operation control. in order to apply this idea
three ingredients are essential: (1) a parameter-
ized processmodelthatcan besimulated,(2)his-
toric data to estimate parameters, (3) the current
state of the workﬂows (i.e., the states of all cases
inthepipeline). inthecontextofaworkﬂowman-
agementsystemallthisinformationisavailableas
shown in (reijers and aalst, 1999). process min-
ing can be used to extract the required informa-
tion from historic data, parameterize the simula-
tionmodel,andtoanalyzethesimulationresults.
3.5 recommendation
process mining is not limited to analyzing processes.
the results can also be used to act. one of the ideas
we are working on is the development of so-called
recommendation services . the idea is as follows.
using process mining one can analyze which strate-
gies are successful and which are not, i.e., everycase
(process instance) that was executed can be rated in
termsof ﬂow time, costs, quality,etc. therefore,it is
possible to build a model predicting the performance
of a case with respect to the selected metric. this
can be used to recommendparticular executions,i.e.,
given a partial execution of a case (the sequence of
steps executed so far), the recommendation service
suggests the next step. different variants are possi-
bleandimplementedinprom.4 the world is nota petri
net!
the title of this section “the world is not a petri
net!” is intendedto provokedesigners,manager,and
academics that actually think that real-life processes
behave as modeled in some process model. note
that this applies to any process model having some
kind of semantics, i.e., not just petri nets but also
bpmnmodels,epcs,bpelspeciﬁcations,umlac-
tivitydiagrams,processalgebraicspeciﬁcations,etc.2
this is not a notational problem, i.e., it is not caused
by the modeling language but by the idealized views
people have when describing processes. real-life
processes turn out to be less structured than people
tend to believe. unfortunately, traditional process
mining approaches have problems dealing with un-
structured processes. the discovered models are of-
ten“spaghetti-like”showingalldetailswithoutdistin-
guishingwhatisimportantandwhat isnot.
figure3: aprocessmodelbasedontheﬂowof874patients
having heart surgery.
to illustrate this consider figure 3 showing a
process model obtained using the process mining
technique described in (weijters and aalst, 2003)
2modelswithoutanysemanticsare“safe”inthisrespect
but provide noinformation.which is supported by the heuristics miner of prom
(see section 5). the model is based on an event log
with 10478events. these eventwererecordedbythe
information system of a dutch hospital for a group
of 874 patients. this was a relatively homogeneous
group of patients: each patient had a heart surgery.
thereare 181differentevents,i.e.,eventtypescorre-
sponding to possible activities in the context of heart
surgery. ascanbeseen,themodelis“spaghetti-like”.
one may think that figure 3 suggest a poor perfor-
manceoftheprocessminingtechnique. however,this
is not the case, figure 3 reﬂects reality and reality is
often “spaghetti-like” and not as structured as people
wantto believe.
over the last couple of years we obtained much
experienceinapplyingthetried-and-testedsetofmin-
ing algorithms to real-life processes. existing algo-
rithms tend to perform well on structured processes
but often fail to provide insightful models for less
structuredprocesses,cf.figure3. theproblemisnot
that existing techniques produce incorrect results. in
fact, some of the more robust process mining tech-
niquesguaranteethat theresultingmodelis “correct”
in the sense that realityﬁts into the model. the prob-
lemisthat theresultingmodelshowsall detailswith-
outprovidingasuitableabstraction. thisiscompara-
bletolookingatthemapofacountrywhereall cities
and town are represented by identical nodes and all
roads are depicted in the same manner. the result-
ing map is correct but not very suitable. therefore,
the concept of a roadmap can used as a metaphor to
visualize the resulting models. based on an analysis
of the log the importance of activities and relations
among activities are taken into account. activities
and their relations can be clustered or removed de-
pending on their role in the process. moreover, cer-
tain aspects can be emphasized graphically just like
aroadmapemphasizeshighwaysandlargecitiesover
dirt roadsandsmall towns. the fuzzyminerin prom
isusingtheroadmapmetaphortopresentmoremean-
ingfulprocessmodels.
5 towardscomprehensive
tool support
in this paper, we already referred to analysis tools
suchaswoﬂan(verbeeketal.,2001)andprom(don-
genetal., 2005).
the focus on woﬂanis on design-time analysis
and in particular on veriﬁcation. woﬂan was de-
signed to address the problem that today’s workﬂow
products have no support for workﬂow veriﬁcation.
errors made at design-time are not detected and re-sult in very costly failures at run-time. woﬂan ana-
lyzes workﬂow process deﬁnitions downloaded from
commercial workﬂow products using state-of-the-art
petri-net-basedanalysistechniques. recently, part of
thefunctionalityofwoﬂanwasembeddedintoprom.
initiallythefocusof promwasonrun-timeanaly-
sis and in particular on process mining. however,
over the last couple of years the scope of prom has
been extended to all kinds of process analysis as
shown in figure 1. for example,prom offersseveral
ways to verify models and can export to all kinds of
tools,e.g.,toolsforsimulationorperformanceanaly-
sis. it also allows for all kinds of model transforma-
tions,e.g.,anepcdiscoveredviaprocessminingcan
be convertedinto a petri net or yawl model. prom
also offers a recommendation service and allows for
different types of conformance checking. currently,
prom contains 150 plug-ins and it is impossible to
give a complete overview here. therefore, we only
elaborate a bit on the plug-ins related to process dis-
covery.
prom implements about 20 different process dis-
coveryalgorithms. sinceacompletereviewofthedif-
ferentalgorithmsisoutsidethescopeofthispaper,we
just show three examples. in section 3.1 we already
showed a petri net discovered using the α-algorithm
(aalst et al., 2004). figure 2 shows a process model
generatedbyprombasedontheeventlog ldescribed
insection3.1. itiseasytoseethatthetracesinthelog
can indeed be reproducedby this petri net. note that
theα-algorithm“discovers”choicesandconcurrency.
although the example does not contain any loops,
theα-algorithm can also discover iterations. the α-
algorithm is rather sensitive to noise and exceptional
behavior and has problems handling more advanced
control-ﬂow patterns. figure 4 shows two alterna-
tivetechniquesthat aremorerobust. themulti-phase
miner always produces a model that can replay the
log (dongen and aalst, 2004). it uses event-driven
process chains (epcs) as a default representation as
shownontheleft-hand-sideoffigure4. however,the
epcs can be convertedin other formatssuch as vari-
oustypesofpetrinets,yawlmodels,bpel speciﬁ-
cations, etc. the drawback of the technique used by
themulti-phasemineristhatithasatendencytoover-
generalize, i.e., sometimes the model allows for too
much behavior. the model shown on the right-hand-
side of figure 4 is produced by the heuristics miner
(weijters and aalst, 2003). the heuristicsminer rep-
resents processes in a notation dedicated to process
mining. however,itsresultscanbeconvertedtoother
notations. the heuristicsminerspecializesin dealing
with noise and exceptional situations, e.g., situations
suchasdepictedinfigure3.
figure 4: two process models discovered using the multi-
phase miner (left)andthe heuristics miner (right).
it is not necessary to understandthe three discov-
ered models shown in ﬁgures 2 and 4. however, it
is important to note that there are various process
mining algorithms that perform well on structured
processes. prom offersa wide varietyof processdis-
covery techniques. using prom the discovered mod-
els can be convertedto the desired format(petri nets,
epcs, yawl,etc.).
prom is an open-source framework that can be
downloadedfrom www.processmining.org .6 conclusion
in this paper, we provided a, rather personalized,
overview of interesting trends in business process
analysis. this overview is far from complete and
the main purpose of this paper is to make a num-
ber of speciﬁc statements related to business process
analysis. first of all, we argued that the practical
veriﬁcation of real-life processes has become a re-
ality. the veriﬁcation of the entire sap reference
model is a nice illustration of this (mendling et al.,
2006a; mendling et al., 2006b). second, we mo-
tivated that the abundance of event logs allows for
new and exciting forms of process analysis. we pro-
vided an overview of the different types of analy-
sis offered by process mining techniques. third, we
showed, using the slogan “the world is not a petri
net”, that reality is often very different from what
is modeled or what people think. figure 3 shows
a model describing the ﬂow of patients having heart
surgery. it shows a “spaghetti-like” model and for
manyotherreal-lifeprocessessimilar-lookingmodels
areobtained. thisdoesnotimplyapoorperformance
of the corresponding process mining techniques. it
merely reﬂects that reality is often “spaghetti-like”
and not as structured as people want to believe, i.e.,
reality does not ﬁt onto a powerpoint slide. finally,
we showed some of the analysis tools developed at
eindhovenuniversityof technology. we focused on
the prom framework. prom provides an extensive
set of analysis techniques which can be applied to
real-lifelogswhilesupportingmanypartsofthespec-
trum depicted in figure 1. we encourage people de-
velopingand/orusing business processanalysis tools
to join this initiative and download the toolset from
www.processmining.org .
acknowledgements
this research is supported by eit, nwo-ew, the
technologyfoundationstw,andthesuperproject
(fp6). moreover, we would like to thank the many
peopleinvolvedin thedevelopmentofprom.
references
van der aalst, w. (2004). business process management
demystiﬁed: a tutorial on models, systems and
standards for workﬂow management. in desel, j.,
reisig, w., and rozenberg, g., editors, lectures on
concurrency and petri nets , volume 3098 of lecture
notes in computer science , pages 1–65. springer-
verlag, berlin.van der aalst, w., dreiling, a., gottschalk, f., rosemann,
m., and jansen-vullers, m. (2006a). conﬁgurable
processmodelsasabasisforreferencemodeling. in
bussleretal.,c.,editor, bpm2005workshops(work-
shop on business process reference models) , volume
3812 oflecture notes in computer science , pages
512–518. springer-verlag,berlin.
van der aalst, w., dumas, m., ouyang, c., rozinat, a.,
and verbeek, h. (2006b). choreography mining and
conformance checking. in leymann, f., reisig, w.,
thatte, s., and van der aalst, w., editors, the role of
business processesinservice orientedarchitectures ,
number6291indagstuhlseminarproceedings.inter-
nationales begegnungs- und forschungszentrum fuer
informatik(ibfi),schloss dagstuhl, germany.
van der aalst, w. and hee, k. (2004). workﬂow manage-
ment: models, methods, and systems . mit press,
cambridge, ma.
van der aalst, w. and ter hofstede, a. (2005). yawl:yet
another workﬂow language. information systems ,
30(4):245–275.
van der aalst, w., reijers, h., and song, m. (2005). dis-
covering social networks from event logs. com-
puter supported cooperative work , 14(6):549–593.
van der aalst, w., van dongen, b., herbst, j., maruster,
l., schimm, g., and weijters, a. (2003). workﬂow
mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267.
van der aalst, w., weijters, a., and maruster, l. (2004).
workﬂow mining: discovering process models from
event logs. ieee transactions on knowledge and
dataengineering , 16(9):1128–1142.
agrawal,r.,gunopulos, d.,andleymann,f.(1998). min-
ingprocess models fromworkﬂowlogs. in sixthin-
ternational conference on extending database tech-
nology, pages 469–483.
cardoso,j.(2006). processcontrol-ﬂowcomplexitymetric :
an empirical validation. in ieee international con-
ference on services computing (scc 2006) , pages
167–173. ieeecomputer society.
cardoso,j.,sheth,a.,miller,j.,arnold,j.,andkochut,k .
(2004). qualityofserviceforworkﬂows andwebser-
vice processes. journal of web semantics , 1(3):281–
308.
curran, t. and keller, g. (1997). sap r/3 business blue-
print: understanding the business process reference
model. upper saddle river.
datta, a. (1998). automating the discovery of as-is
business process models: probabilistic and algo-
rithmic approaches. information systems research ,
9(3):275–301.
desel, j. and esparza, j. (1995). free choice petri nets ,
volume 40 of cambridge tracts in theoretical com-
puter science . cambridge university press, cam-
bridge, uk.
vandongen, b.and van der aalst,w. (2004). multi-phase
processmining: buildinginstancegraphs. inatzeni,
p.,chu,w.,lu,h.,zhou,s.,andling,t.,editors, in-
ternational conference on conceptual modeling (er2004), volume 3288 of lecture notes in computer
science, pages 362–376. springer-verlag, berlin.
van dongen, b., medeiros, a., verbeek, h., weijters, a.,
and van der aalst, w. (2005). the prom framework:
a new era in process mining tool support. in cia-
rdo, g. and darondeau, p., editors, application and
theory of petri nets 2005 , volume 3536 of lecture
notesincomputerscience ,pages444–454. springer-
verlag, berlin.
georgakopoulos,d.,hornick,m.,andsheth,a.(1995). an
overview of workﬂow management: from process
modeling to workﬂow automation infrastructure.
distributedand paralleldatabases , 3:119–153.
herbst, j. (2000). a machine learning approach towork-
ﬂow management. in proceedings 11th european
conference on machine learning , volume 1810 of
lecture notes in computer science , pages 183–194.
springer-verlag,berlin.
jansen-vullers, m., van der aalst, w., and rosemann,
m. (2006). mining conﬁgurable enterprise infor-
mation systems. data and knowledge engineering ,
56(3):195–244.
leymann, f. and roller, d. (1999). production workﬂow:
concepts and techniques . prentice-hall ptr, upper
saddle river, new jersey, usa.
mendling, j., van der aalst, w., dongen, b., and verbeek,
e. (2006a). errors in the sap reference model. bp-
trends, 4(6):1–5.
mendling, j., moser, m., neumann, g., verbeek, h., don-
gen, b., and van der aalst, w. (2006b). faulty epcs
inthesapreferencemodel. industdar,s.,faideiro,
j.,andsheth,a.,editors, internationalconferenceon
business process management (bpm 2006) , volume
4102 oflecture notes in computer science , pages
451–457. springer-verlag,berlin.
netjes,m.,vanderfeesten,i.,andreijers,h.(2006). “int el-
ligent” tools for workﬂow process redesign: a re-
search agenda. in bussler, c. and haller, a., edi-
tors,businessprocessmanagement workshops (bpm
2005), volume 3812 of lecture notes in computer
science, pages 444–453. springer-verlag, berlin.
reijers, h. and van der aalst, w. (1999). short-term sim-
ulation: bridging the gap between operational con-
trol and strategic decision making. in hamza, m.,
editor,proceedingsoftheiastedinternational con-
ferenceonmodellingandsimulation ,pages417–421.
iasted/actapress,anaheim, usa.
reisig, w. and rozenberg, g., editors (1998). lectures on
petri nets i: basic models , volume 1491 of lecture
notes incomputer science . springer-verlag,berlin.
rosemann, m. and van der aalst, w. (2006). a conﬁg-
urable reference modelling language. information
systems, 32(1):1–23.
rozinat, a. and van der aalst, w. (2006a). conformance
testing: measuring the fit and appropriateness of
event logs and process models. in bussler et al.,
c., editor, bpm 2005 workshops (workshop on busi-
ness process intelligence) , volume 3812 of lecture
notesincomputerscience ,pages163–176. springer-
verlag, berlin.rozinat,a.andvanderaalst,w.(2006b). decisionmining
in prom. in dustdar, s., faideiro, j., and sheth, a.,
editors,internationalconferenceonbusinessprocess
management (bpm 2006) , volume 4102 of lecture
notesincomputerscience ,pages420–425. springer-
verlag,berlin.
rozinat, a., mans, r., and van der aalst, w. (2006). min-
ing cpn models: discovering process models with
datafromeventlogs. injensen, k.,editor, proceed-
ings of the seventh workshop on the practical use of
coloured petri nets andcpn tools (cpn2006) , vol-
ume 579 of daimi, pages 57–76, aarhus, denmark.
universityof aarhus.
verbeek,h.,basten,t.,andvanderaalst,w.(2001). diag-
nosing workﬂow processes using woﬂan. the com-
puter journal , 44(4):246–279.
weijters, a. and van der aalst, w. (2003). rediscovering
workﬂow models from event-based data using lit-
tle thumb. integrated computer-aided engineering ,
10(2):151–162.