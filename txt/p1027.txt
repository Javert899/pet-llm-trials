unbiased, fine-grained description of processes
performance from event data
vadim denisov1, dirk fahland1, and wil m.p. van der aalst1;2
1eindhoven university of technology, the netherlands,
2department of computer science, rwth aachen, germany,
v.denisov@tue.nl ,d.fahland@tue.nl ,wvdaalst@pads.rwth-aachen.de
abstract. performance is central to processes management and event data pro-
vides the most objective source for analyzing and improving performance. current
process mining techniques give only limited insights into performance by aggre-
gating all event data for each process step. in this paper, we investigate process
performance of all process behaviors without prior aggregation. we propose the
performance spectrum as a simple model that maps all observed Ô¨Çows between
two process steps together regarding their performance over time. visualizing the
performance spectrum of event logs reveals a large variety of very distinct patterns
of process performance and performance variability that have not been described
before. we provide a taxonomy for these patterns and a comprehensive overview
of elementary and composite performance patterns observed on several real-life
event logs from business processes and logistics. we report on a case study where
performance patterns were central to identify systemic, but not globally visible
process problems.
keywords: process mining, performance analysis, visual analytics
1 introduction
performance analysis is an important element in process management relying on precise
knowledge about actual process behavior and performance to enable improvements [11].
descriptive performance analysis has been intensively studied within process mining,
typically by annotating discovered or hand-made models with time-related information
from event logs [3, 2, 1, 23] as illustrated in fig. 1(left). these descriptive models provide
aggregate measures for performance over the entire data such as average or maximum
waiting times between two process steps. models for predicting waiting times until
the next step or remaining case duration learned from event data distinguish di erent
performance classes or distribution functions based on case properties [4, 5, 12, 15].
however, these techniques assume the timed-related observations to be taken from
stationary processes that are executed in isolation, i.e., that distribution functions de-
scribing performance of a case do not change over time and do not depend on other
cases. these assumptions are often made by a lack of a more precise understanding of
the (changes in) process performance across cases and over time.
in this paper, we consider the problem of descriptive analytics of process behavior
and performance over time . in particular, we aim to provide a comprehensive description89 d
16 mths 36.4 wks5 d16 d
60 d
create fine
send fine
insert fine
notification
add penalty
send for
credit collection
payment
create fine :
payment
create fine :
send fine
send fine :
insert fine notification
insert fine notification :
add penalty
add penalty :
payment
add penalty :
send for credit collectionfig. 1. performance analysis using a graph-based model (left) and the performance spectrum
(right); see online version for colored Ô¨Ågures.
of raw process behavior without enforcing prior aggregation of data. note that fig. 1(left)
only shows aggregates performance and no temporal patterns or changes over time. the
objective of this comprehensive description is to identify patterns, trends, and properties
of interest without the representational bias of an algorithm or a particular formal model.
we approach the problem through visual analytics which employs structuring of data
in a particular form that, when visualized, allows o oading the actual data processing
to the human visual system [7] to identify patterns of interest for subsequent analysis.
we propose a new simple model for event data, called the performance spectrum and a
corresponding visualization. figure 1(right) shows the performance spectrum of the data
used to the discover the model in fig. 1(left) over a 20month period. the performance
spectrum describes the event data in terms of segments , i.e., pairs of related process
steps; the performance of each segment is measured and plotted for any occurrences of
this segment over time and can be classiÔ¨Åed, e.g., regarding the overall population.
the visualization in fig. 1(right) shows that di erent cases perform very di erently
due to systematic and unsystematic variability of performance in the di erent steps
over time and synchronization of multiple cases. we implemented this visualization in
aninteractive exploration tool (prom package ‚Äúperformance spectrum‚Äù) allowing for
zooming, Ô¨Åltering, and performance classiÔ¨Åcation and aggregation of the data.
exploring the performance spectrum of real-life logs typically reveals numerous,
novel patterns in process performance and behavior as shown in fig. 1(right) that cannot
be seen in process models as in fig. 1(left). to enable documenting and conceptualizing
these patterns for further analysis, we propose a taxonomy for describing elementary
patterns in the performance spectrum. we evaluated the performance spectrum and the
taxonomy on 12 real-life logs of business and logistics processes. numerous elementary
patterns as well as larger patterns composed of elementary ones recur throughout di erent
event logs. we show how these patterns reveal novel insights into the interplay of control-
Ô¨Çow, resource, and time perspective of processes. the performance spectrum of real-life
logs reveals that performance in a case may be dependent on the performance of other
cases, performance generally varies over time (non-stationary), and many processesexhibit temporary or permanent concept drift. we report on a case study performed with
vanderlande industries to identify control-Ô¨Çow problems in very large logistics processes.
further, we found that each process has a characteristic signature of the patterns in its
performance spectrum and that similar signatures indicate extremely similar processes
not only in control-Ô¨Çow but also in the performance perspective.
the remainder of this paper is structured as follows. we discuss work related to per-
formance analysis in sect. 2. we formally deÔ¨Åne the performance spectrum in section 3
and introduce the taxonomy for patterns in the performance spectrum in sect. 4. we
report on our evaluation on real-life event logs in sect. 5 and discuss our Ô¨Åndings and
future work in sect. 6.
2 related work
analysis of process performance from event data can be divided into descriptive, predic-
tive, and visual analysis, which we summarize here; see [12] for an extensive discussion.
commonly, process performance is described by enhancing a given or discovered
process model with information about durations of activities (nodes in a model) or
waiting times between activities (edges in a model) [1]. in the visualization, each
node and edge can be annotated with one aggregate performance measure (avg., sum,
min, max) for all cases passing through this node or edge, as illustrated in fig. 1(left).
visualization of performance on a model is more accurate if the discovery algorithm
takes the underlying performance information into account [8, 18]. a non-Ô¨Åtting log
can be aligned to a model to visualize performance [2]. more detailed visualization of
performance requires more dimensions. wynn et al. [23] plot di erent process variants
(with di erent performance) into a 3-dimensional space ‚Äúabove‚Äù the process model.
transition system discovery allows to split occurrences of an activity based on its context
and visualize performance each context separately [3].
performance prediction for the remaining time until completion of a given case can be
predicted by regression models [5], by annotating transition system states with remaining
times [4], by learning a clustering of transition system states [6], by combining models
for prediction of the next activity in a case with regression models [12]. completion
time of the next activity can be predicted by training an lstm neural network [22], or
by learning process models with arbitrary probability density functions for time delays
through non-parametric regression from event logs [14] that can also be used for learning
simulation models to predict performance [17, 15]. these models predict performance
of a single case based on case-speciÔ¨Åc features. performance of cases synchronizing
on shared resources can be analyzed through simulation models [16] or from queuing
models [19] learned from event logs. synchronization in batch activities can be studied
through queue models [13], or through aggregating event logs into a matrix [10].
the above techniques assume that probability densities for time delays are stationary
for the whole process (do not change over time) or only depend on the individual
case ( isolation between cases). techniques for describing the performance of all cases
construct simpler models through stronger aggregation [3]. also, the recent temporal
network representation abstracts non-stationary changes in performance over time [18].
techniques for predicting performance of a single case construct more complex modelsfor higher precision, e.g., [22]; precision increases further when more assumption are
dropped, e.g., di erent distribution functions [15], queues [19], non-stationarity [12].
no current model learning technique can describe process performance without making
assumptions about the data. however, the results of this paper show that in particular
stationarity and isolation of cases do not hold in the performance perspective.
assumptions and representational bias of models can be avoided through visualiza-
tion and visual analytics [7]. dotted chart [21] plots all events per case ( y-axis) over
time ( x-axis) allowing to observe arrival rates and seasonal patterns over time. story
graphs [20] plot a case as poly-line in a plane of event types ( y-axis) and time ( x-axis)
allowing to observe patterns of similar cases wrt. behavior and performance over time
but convolutes quickly with many crossing lines.
in sect. 3 we propose a model and visualization that avoids the problems of [20]
in describing the performance of each process step without assumptions about the
data (except having a log of discrete events). the visualization shall reveal where a
process violates typical assumption about performance such as non-stationarity or cases
inÔ¨Çuencing each other; we provide a taxonomy to describe these phenomena in sect. 4.
3 performance spectrum
we Ô¨Årst establish some basic notations for events and logs, and then introduce our model
to describe the performance of any observable dynamic process over time.
letabe a set of event classiÔ¨Åers ;ais usually the set of activity names, but it may
also be the set of resource names, or a set of locations. let ( t;;+;;0) be a totally
ordered set (with addition +, multiplication, and 0) of timestamps, e.g., the rational
numbers q. an event e=(a;t)2(at) describes that observation aoccurred at time t.
atrace2(at)is a Ô¨Ånite sequence of related events. an event log l2b((at))
is a multi-set of traces. for =he1;:::; eni, we writejj=nandi=ei;i=1;:::; n.
the goal of the performance spectrum is to visualize the performance of process
steps over time. we call ( a;b)2aaaprocess segment describing a step from activity
ato activity b, hand-over of work from resource atobor the movement of goods from
location atob. we Ô¨Årst formalize the performance spectrum for a single process segment,
and then lift this to views on a process.
each occurrence of a segment ( a;b) in a traceh:::;(a;ta);(b;tb);:::iallows to
measure the time between occurrences of aandb. a histogram h=h(a;b;l)2b(t)
describes how often all the time di erences tb tabetween aandbhave been observed
inl. in contrast, the performance spectrum s(a;b;l) collects the actual time intervals
(ta;tb) observed in l. to aid recognition of patterns, we allow users to classify each
interval ( ta;tb) wrt. other observations. the speciÔ¨Åc classiÔ¨Åcation depends on the analysis
at hand, for example, the actual duration t=tb ta, or whether t=tb tais in the
25%-quartile of the histogram h, or other properties such as remaining time until case
completion. generally, a performance classiÔ¨Åcation function c2ttb((at))!c
maps any interval ( ta;tb) into a class c(ta;tb;l)=c2c. fig. 1 classiÔ¨Åes intervals based
on the quartile of the duration in the histogram.
deÔ¨Ånition 1 (detailed performance spectrum). theperformance spectrum of a seg-
ment (a;b)is the bag of all its observation intervals in a trace (in a log l):s(a;b;)=[(ta;tb)j91i<jj(a;ta)=i;(b;tb)=i+1]2b(tt); we lift stolby bag union
s(a;b;l)=p
2l(l()s(a;b;)). the detailed performance spectrum of a segment
(a;b)in log lwrt. performance classiÔ¨Åcation cissc(a;b;l)=[(ta;tb;c)j(ta;tb)2
s(a;b;l);c=c(ta;tb;l)]2b(ttc).
figure 1(right) visualizes the detailed performance spectrum s=s(a;b;l) of six
dierent segments. for each segment ( a;b) we Ô¨Åx coordinates yaandybon the y-axis and
plot each classiÔ¨Åed observation ( ta;tb;c)2sc(ai;bi;l) as a line from ( ta;ya) to ( tb;yb).
in fig. 1 each line is colored based on the quartile of the duration tb ta.
the detailed performance spectrum visualizes variability of durations in a segment
across cases and time. to capture and visualize also the amount of cases of particular
performance over time, we deÔ¨Åne an aggregate performance spectrum . we group seg-
ments into bins of a user-chosen period pdepending on whether they start,stop, or are
pending in a bin, and then aggregating the observations ( ta;tb;c) in each bin wrt. their
class c(forÔ¨Ånitely many classes c), akin to relational algebra or sql operations.
deÔ¨Ånition 2 (aggregated performance spectrum). lets=s(a;b;l)be a detailed
performance spectrum with Ô¨Ånite performance classes c=fc1;:::; ckg. let period p2t
and grouping g2fstart;stop;pendingg. the binning ofswrt.pandgis the sequence of
multisetshb0;b1;:::isuch that for i =0;1;:::holds
‚Äìbi=[(ta;tb;c)2sjipta<(i+1)p]if g=start,
‚Äìbi=[(ta;tb;c)2sjiptb<(i+1)p]if g=stop, and
‚Äìbi=[(ta;tb;c)2sjiptbandta<(i+1)p]if g=pending (the segment started
before the end of the bin, and ends after the start of the bin).
theaggregation ofswrt.pandgis the sequence aggg(s;p)of vectorshv0;v1;:::iwhere
each vi=(v1
i;:::; vj
i;:::; vk
i)2nkcounts how often performance class cjoccurred in
binbi:vj
i=jf(ta;tb;cj)j(ta;tb;cj)2bigj. the aggregated performance spectrum of a
segment (a;b)in a log l is then sc
g;p(a;b;l)=aggg(sc(a;b;l);p).
an aggregated performance spectrum aof one segment ( a;b) can be visualized as a
series of stacked bar-charts as shown in fig. 7 where the k-th bar starts at x-coordinate
kpand has width p; the bottom-line of the series of bar-charts is at y-coordinate yband
the height of all bars is normalized wrt. yb ya.
visualizing the performance spectrum of multiple process segments on a 2d plane
requires some compromises. as the x-axis of the plane is used for visualizing time, we
can only visualize control-Ô¨Çow by mapping segments along the single dimension of the
y-axis. this forces to visualize even alternative segments ( a;b) and ( b;c) in a sequential
manner. to give the user control over this sequentialization we let a user specify the
(sub-)trace variants varthat shall be mapped (one after the other) onto the y-axis as in
fig. 1(right). the notion of a view provides all parameters for a performance spectrum.
deÔ¨Ånition 3 (view). aview v=(var;c;g;p)is a set varof (sub-)trace variants var=
f0;:::;kga, a performance classiÔ¨Åcation c, a grouping g2fstart;stop;pending;
nonegand period p2t. the segment sequence of varianti=hai
1;ai
2;:::; ai
nii2var
isseg(i)=h(ai
1;ai
2);:::; (ai
ni 1;ai
ni)i. the segment sequence of all variants varis their
concatenation, i.e., seg (var)=seg(1)seg(2):::seg(k).for example, for traces ha;b;c;d;ei;ha;b;f;d;ei;ha;b;c;b;f;ei, the variants var=
fhb;c;d;ei;hf;d;eigyield the segment sequence seg(var)=h(b;c);(c;d);(d;e);(f;d);(d;e)i.
letlbe a log, v=(var;c;g;p) be a view. the performance spectrum oflwrt.v
with g=none is the sequence of the detailed performance spectra along the segment
sequence seg(var):s(l;v)=hsc(a;b;l)i(a;b)2seg(var). the aggregated performance
spectrum oflwrt.vwith g,none is the sequence of aggregated spectra sg;p(l;v)=
hsc
g;p(a;b;l)i(a;b)2seg(var).
for the visualization in figure 1, the segments seg(var) are mapped to the y-axis
in order of seg(var) in equidistant steps for some length ydist : in the i-th segment
(ai;bi)=seg(var)i,aiandbigety-coordinates ya;i=iydist andyb;i=(i+1)ydist . by
default any two consecutive segments touch at yb;i=ya;i+1; an extra gap can be added
whenever b,a. figure 7 visualizes the view of an aggregate performance spectrum.
an optimal deÔ¨Ånition of varfor a given log is outside the scope of this paper, and
we assume user input. yet we identiÔ¨Åed some principles. there are two canonical trace
variants varfor views on a log l. the minimal variant deÔ¨Ånes the most frequent variant
inl, visualizing all its process segments consecutively. the maximal variant includes all
individual observed process segments var max(l)=fh(a;b)ijh:::;(a;ta);(b;tb);:::i2lg
in no speciÔ¨Åc order. mapping segments consecutively along the y-axis allows to follow
the Ô¨Çow of multiple cases over time as shown in fig. 1(right). choices in a process can
be handled by deÔ¨Åning two alternative trace variants in the view; thereby segments ( a;b)
occurring multiple times in varare replicated (with the entire performance spectrum),
allowing to see the Ô¨Çow of the variant through this segment in the performance context of
other variants. handling loops and concurrency requires event log pre-processing. loops
can be unrolled through label reÔ¨Ånement [9] in the log. in case of concurrency, analyzing
the performance of segment ( a;b) with def. 1 requires Ô¨Åltering from the log all activities
concurrent to aandb. in case studies with vanderlande, var max(l) in combination with
a hierarchical naming scheme of events allowed to visually group and analyze related
segments even in very complex processes (of 10000s of segments).
4 performance patterns
performance spectra of processes may contain an overwhelming amount of information
and are ‚Äì for the untrained eye ‚Äì more di cult to read and interpret than known visu-
alizations. however processes with similar performance characteristics show similar
patterns in their performance spectra, and vice versa, similar patterns mean similar per-
formance characteristics. such patterns introduce a higher abstraction level over ‚Äòplain‚Äô
performance spectra, thereby aiding in description and analysis of performance. next,
we illustrate the idea of patterns in the performance spectrum distinguishing elementary
andcomposite patterns. we provide a taxonomy of elementary patterns in sect. 4.2. we
discuss composite patterns in sect. 4.3, but posit their systematization in future work.
4.1 elementary patterns
intuitively, a performance pattern is a speciÔ¨Åc conÔ¨Åguration of the lines and bars in a
performance spectrum that (1) is visually distinct within a larger part of the spectrum,(2) describes a particular performance scenario (ofmultiple cases over time), and (3)
repeats when this scenario repeats. an elementary pattern relates to a single segment
and cannot be broken down further without loss of its meaning.
fig. 2. the elementary pattern shows a fifo
behavior with constant waiting timethe elementary pattern shown in fig. 2
occurred in segment ( insert fine notiÔ¨Åcation ,
add penalty ) of the road tra c fines man-
agement (rf) log3and consists of many par-
allel inclined lines of the same color, corre-
sponding to multiple observations distributed
over time. non-crossing lines show a strict fifo order and identical inclinations show a
constant waiting time for all cases. variation in density of the lines (and in the height
of the bars of the aggregated performance spectrum) shows continuous, varying work-
load throughout the entire log. patterns with such characteristics are typical for highly
standardized automated activities with strict time constraints. note that existing models
describe the performance of this segment as ‚Äúconstant‚Äù delay of 60d.
we consider the pattern to be ‚Äúelementary‚Äù in the sense that we cannot decompose it
further without losing its key qualities: single segment, strict fifo with constant time,
workload is continuous and varying.
4.2 taxonomy of elementary patterns
we observed a great variety of elementary patterns and combinations of patterns in the
performance spectra of real-life processes (see sect. 5). that makes it impossible to
provide a comprehensive catalog. nevertheless, we are able to provide a comprehen-
sive taxonomy of parameters of elementary patterns. it allows us to completely and
unambiguously describe performance of a process over time in a way that patterns that
correspond to similar performance scenarios have identical descriptions and identical
descriptions of patterns mean similar performance scenarios, while changing the value
of any parameter in a pattern would mean a di erent performance scenario.
the taxonomy provides parameters to characterize the shape of lines and bars in a
process in a particular scope over time; line density and bar height describe workload
while their color describes performance . the parameter values form a hierarchy which
is shown together with typical patterns having these characteristics in fig. 3. we provide
a unique short-hand value [ in brackets ] for each parameter, to allow succinct notation of
patterns.
scope parameters capture the place of pattern in the performance spectrum.
‚Äìsize: one segment [ 1 seg ], one subsequence [ 1 sub-seq ], several subsequences [ >1
sub-seq ]
‚Äìoccurrence : globally [ glob], as a local instance [ loc]
‚Äìrepetitions (for patterns occurring in local instance): once [ once ], regular [ reg],
periodic [ per=t], arbitrary [ arb],
‚Äìoverlap (for repeating patterns): overlapping [ overlap ], non-overlapping
‚Äìduration: absolute value [ d=t]
3https://doi.org/10.4121/uuid:270fd440-1057-4fb9-89a9-b699b47990f5type
detailed comb ined aggregated
<number of classes>
<subset of classes>fifo -variable speedperf ormance
classifiers: quartile -based [ 25% ], 
median -proportional [ x¬∑med ]shape order
unord ered fifo lifo
batch ingon start batch ing on endfifo -const ant speed
batch ing on start + endclasses presented
1 >1as a local instance
repetitions
periodic
regular
aggregation functions: {cases start ed, cases stop ped, cases pend ing}peak s<period =t>
workload character
cont inuous sparsework loadscope
duration= <abs. value>once
arbitrary
workload  trends
(total / for class c )
steady variable
grow ing fallingamount of workload
zero [ 0] non-zero [ >0]
low med ium highsize
segment 1 sub -sequence>1 sub -sequenceoccurrence
glob ally
overlap pingoverlapping
non-overlapping
drop sfig. 3. taxonomy of elementary patterns
size describes the pattern length from the control-Ô¨Çow perspective: a single segment ,
a single subsequence orseveral subsequences of event classiÔ¨Åers. although all
elementary patterns have size 1 seg , we include this parameter in the taxonomy for
compatibility with composite patterns. a pattern occurrence can be either global , when
it occurs continuously throughout a segment without clear boundaries, otherwise it
distinctly occurs as a local instance . pattern instances may occur once orrepeat
(1)periodic ally in particular intervals t, (2)regular ly, i.e., seemingly systematic but
not periodic, or (3) arbitrarily . repeated pattern instances can be overlapping ornon-
overlapping in time. parameter duration describes the absolute duration over time (e.g.
as an interval in seconds).
shape parameters describe the appearance of lines and bars in the visualization of the
performance spectrum.
‚Äìtype: detailed [ det], aggregated [ agg], combined [ comb ]‚Äìorder : unordered [ unord ], lifo [ lifo ], fifo with variable time [ fifo-var ], fifo
with constant time [ fifo-const ], batching on start [ batch(s) ], batching on end
[batch(e) ], batching on start and end [ batch(s+e) ]
a pattern described just in terms of lines (bars) of a detailed (aggregated) performance
spectrum is detailed (aggregated ); if it requires both it is combined .order describes
the conÔ¨Åguration of lines in a detailed pattern: (1) unordered when lines irregularly
cross each other, (2) lifo when lines end in reversed order of starting, (3) fifo when
lines never cross. (3b) non-crossing lines of variable inclination mean variable time
[fifo-var ], where multiple lines starting (or ending) in a very short period show multiple
cases batching on start (oron end ). (3c) lines of identical inclination show constant
time [fifo-const ], where multiple lines starting and ending in a very short period (with
no lines before /after) show batching on start and end .
workload describes the height of bars in aggregated orcombined patterns, and the
density of lines in detailed patterns over time.
‚Äìaggregation function : segment instances started [ start ], stopped [ stop], cases pend-
ing [pend ], see def. 2
‚Äìworkload character : continuous [ cont], sparse [ sparse ]
‚Äìamount of workload : zero [ 0], non-zero [ >0], low [ low], medium [ med], high [ high]
‚Äìworkload trends (for a performance class or in total): can be steady [ steady ],
variable [ var], growing [ grows ], falling [ falls], showing peaks [ peak ] or drops
[drop ]
workload is characterized by the aggregation function deÔ¨Åned in the view of the
performance spectrum (def. 3). workload character can be continuous orsparse
(when there are longer gaps between lines or bars), and it is visible in both detailed and
aggregated patterns. amount of workload is categorized as zero ornon-zero , the latter
can be categorized further as low,medium orhigh in relation to the maximum number
of observations made on a segment (within the time period pof the view, see def. 3).
thetrend over time can be steady (bars have about same height) or variable , the latter
splits further into steadily growing ,falling workload or showing peaks (a few high bars
surrounded by lower bars) or drops .
performance is described in terms of the performance classes present in the pattern
with respect to the classiÔ¨Åer cof the view (def. 3) chosen by the user.
‚Äìclasses presented : 1,>1, number of classes, subset of classes
‚ÄìclassiÔ¨Åers : various, we discuss quartile-based [ 25% ] (e.g., all observations belong-
ing to the 26%-50% quartile), median-proportional [ xmed] (e.g., all observations
2-3 times longer than the median duration)
in the visualization of the performance spectrum, classes are coded by colors. a
monochrome pattern has 1 class presented while a multi-colored one has >1classes
presented .
now we show how the taxonomy describes the elementary patterns e1-e3 found
in the rf log and highlighted in fig. 4(left). pattern e1 occurs in a single segment in
local instances with a duration of 6 months, instances repeat regularly andoverlap ; thefig. 4. three elementary patterns e1, e2, and e3 (left) and two occurrences of a composite pattern
consisting of e1-e3 (right).
detailed pattern shows batching on end in acontinuous workload for4 performance
classes in aquartile-based classiÔ¨Åer. using the short-hand notation, we write e1 =
[scope(seg,loc,reg,overlap,d=6mo), shape(det,batch(e)), work(cont), perf(25%,4
classes)] . similarly, we can characterize e2 = [scope(seg,glob), shape(det,fifo-
const), work(sparse), perf(25%,1 class)] ande3 = [scope(seg,loc,reg,overlap,d=1mo),
shape(det,batch(s)), wo(cont), perf(25%,4 classes)] .
in case of creating a catalog of elementary patterns, some additional information can
be added to pattern descriptions: a unique identiÔ¨Åer and name and a meaning depending
on the domain and the chosen event classiÔ¨Åer, e.g., resources in a business process, or
physical locations of a material handling system.
4.3 composite patterns
in the previous sections, we described performance of single process segments through
elementary patterns. however, the performance spectrum of real-life processes gives rise
tocomposite patterns comprised of several elementary ones. while a full taxonomy is
beyond the scope of this paper, we outline some basic principles for describing composite
patterns by relating elementary patterns to each other in their context.
thecontext of a pattern p1 as shown in fig. 5(a) consists of (1) observations earlier
andlater than p1 in the same process segment, (2) observations before andafter p1 in
the control Ô¨Çow perspective, and (3) a distinct pattern p2occurring simultaneously to
p1 in the same segment. using this context, the taxonomy can be extended with further
parameters. for instance, observations before and after can be used to characterize
performance of a pattern in context and the performance variants contained in the
same timed period as shown in fig. 5(b).
figure 4(right) shows two instances of a composite pattern consisting of the elemen-
tary patterns e1, e2, and e3, described in sec. 4.2. e1 and e3 align at a synchronization
point sp, that shows synchronization of multiple cases in a ‚Äúsand clock‚Äù pattern, while
the cases in e2 do not synchronize with the cases in e1 or e3: we can clearly see
2 variants of behavior contained (e1+e3 and e2). the performance context of the
composite pattern is diverse .
performance in context
slower faster
the samediverse
emptyvariants contained
1 >1
<number of 
variants>afterearlier laterbefore
p1
p2
contextcontext (a) (b)
fig. 5. (a) pattern context, and (b) context parameterss1
s2
s3
s4
s5
s6r1
r2
r3
0-25% 26-50% 51-75% 76-100%p2
p4
p5p1
p3fig. 6. detailed performance spectrum of road tra c fines man-
agement log for years 2002 and 2003 for trace variants r1:
hcreate fine ;paymenti, r2:hcreate fine ;send fine;insert fine notif. ;paymenti, and r3:
hcreate fine ;send fine;insert fine notif. ;add penalty ;send for cci.
the taxonomy of fig. 3 and the new parameters of fig. 5 only partially describe
composite patterns. in particular, a comprehensive taxonomy for precisely describing
the alignment of patterns to each other in their context is subject of future work.
5 evaluation
we implemented the transformation of logs into detailed and aggregated performance
spectra and their visualization through an interactive prom plug-in in package ‚Äúper-
formance spectrum‚Äù.4we applied our implementation on 11 real-life event logs from
business processes (bpi12, bpi14, bpi15(1-5), bpi17, hospital billing, rf)5and on
1 real-life log from logistics (bhs) provided by vanderlande. we illustrate how the
performance spectrum provides detailed insights into performance for rf; for bhs
we report on a case study for identifying performance problems; and we summarize
performance characteristics of the 11 business process logs.
5.1 road tra c fine management process (rf)
event log and view the rf event log consists of 11 activities, more than 150.000
cases and 550.000 events over a period of 12 years. we analyze the 3 trace variants
r1-r3 of fig. 6, which cover >80% of the events in the log, by deÔ¨Åning a view for the
sub-sequencesfhcreate fine ;paymenti;hcreate fine ;send fine;insert fine notif. ;add
penalty;paymenti;hadd penalty ;send for ccigand quartile-based performance classes.
4source code and further documentation available at https://github.com/vadimmidavvv/
psm
5available at https://data.4tu.nl/repository/collection:event\_logs\_real(a)
(b)spgap
gap
gaplow load
concept
driftfig. 7. aggregated performance spectrum of road tra c fines management log (2000-2012)
first, we discuss the detailed patterns p1-p5 that can be observed in the performance
spectrum of a 2-years period in fig. 6 which represents behavior typical for the entire
12-years period. all cases start from activity create fine and continue either with activity
payment (variant r1) or activity send fine (r2 and r3).
p1: segment s1 create fine :payment globally contains many traces of variable
duration, which are continuously distributed over time and can overtake each other, i.e.,
p1 = [scope(seg,glob), shape(det,unord), work(cont), perf(25%,4 classes)] . we can
clearly observe that tra c oenders pay at various speeds.
p2: the performance spectrum of fig. 6 shows that the sub-trace hcreate fine ,send
fine insert fine notiÔ¨Åcation ishared by r2 and r3 contains the composite pattern p2
which we already discussed in sect. 4.3. p2 consists of two dierent performance vari-
ants. the ‚Äúsand clock‚Äù pattern of e1 +e3 of sect. 4.1 shows that cases are accumulated
over a period of 6 months; the period until insert Ô¨Åne notiÔ¨Åcation varies from zero up to
4 months. cases in pattern e2 of sect. 4.1 are not synchronized but processed instantly.
p3: the two variants e1+e3 and e2 vanish in the next segment s3 insert fine
notif. :add penalty where all cases show a strong fifo behavior: p3 = [scope(seg,glob),
shape(det,fifo-const), work(cont), perf(25%,2 classes)] ; the switch from cest to
cet in october shows as a slower performance class in fig. 6. after add penalty , r2
continues with payment (s5 in fig. 6) and r3 continues with send for cc (s6 in fig. 6).
p4: on segment s5 add penalty :payment we surprisingly observe emergent batching
on start despite the absence of batching on end in the preceding segment s4. the
‚Äúsand-clock‚Äù batching in p2 results in groups of ‚Äúfast‚Äù cases which are forwarded by the
fifo pattern p3 and together create a new batching on start pattern p4 (similar to e2) in
segment s5 that can take months to years to complete the payment .
p5: the alternative segment s6 add penalty :send for cc shows batching on
end every 12 months for cases that entered the batch 20 to 6 months prior: p5 =
[scope(seg,loc,per= 12mo,d=20mo), shape(det,batch(e)), work(cont), perf(25%,4
classes)] . the 6-month delay revealed by p5 is mandated by italian law. a unique
pattern for this process occurs in segment add penalty :send appeal to prefecture in
fig. 7(b) where a batch on end pattern occurs only once with a duration of 10 years .
aggregated patterns are shown in fig. 7(a), where every bar shows how many segments
start every month. here we can see patterns related to workload , for example, in the Ô¨Årsta1:a2
a2:a3
a5:ss1
s2
s3
s4
s5yp1p2p1
p3p2 p1 z1
p3p6p4
z1
p3 z1 p3
p5
l l with contextnormal speed 2 times slower 3 times slower very slow
other patternsa3:a4
a4:a5p6fig. 9. performance spectrum of bags movements between check-in counters and the main sorter
quarter of 2004 we can see a gap pattern of 3months, gap=[scope(seg,loc,once,d=3mo),
shape(agg,batch(e)), work(0)] . this gappattern propagates to subsequent segments
creating a composite pattern surrounded by context with much higher load . fig. 7(a) also
reveals concept drift in the control-Ô¨Çow perspective: the medium non-zero workload in
segments insert fine notiÔ¨Åcation :payment andpayment :add penalty drops to 0 in 2007
(up to some outliers).
5.2 baggage handling system of a major european airport (bhs)
event log and view in this case study, we analyzed Ô¨Çows of bags through a vanderlande-
built baggage handling system (bhs). in the event log, each case corresponds to one bag,
events are recorded when bags pass sensors on conveyors, and activity names describe
locations of sensors in the system. for 1 day of operations, an event log contains on
average 850 activities, 25.000-50.000 cases and 1-2 million events.
a1 a2 a3 a4 a5 s
fig. 8. the path from check-in counter a1
to sorter entry point sto provide examples of the bhs perfor-
mance spectrum and patterns, we selected con-
veyor subsequence ha1;a2;a3;a4;a5;sithat
moves bags from check-in counter a1to a
main sorter entry point s. cases starting in a1
correspond to the bhs registering that a pas-
senger put a bag onto the belt of the check-in
counter. we chose this particular part because (1) any bhs has such paths and (2) it
shows many typical performance patterns of a bhs. the diagram of the corresponding
system part in fig. 8 shows that more bags join from other check-in counters on the way
in points a2-5. we Ô¨Årst discuss elementary detailed patterns in the performance spectrum
and then show how their compositions explain complex system behavior.
the detailed performance spectrum in fig. 9 shows events over the period of 1
hour in a median-proportional performance classiÔ¨Åcation. in the Ô¨Årst segment s1 a1:a2
we can observe pattern p1 (fifo, constant waiting time, variable workload, normal
performance) and p2 (batching on start and end with very slow performance). empty
zone z1 shows zero workload . in bhs, fifo behavior is typical for conveyors, where
bags cannot overtake each other, and variable workload is typical for manual operations:table 1. presence of selected pattern classes in real-life event logs.
bpi12 bpi14 bpi15-1 bpi15-2 bpi15-3 bpi15-4 bpi15-5 bpi17 hospital h-billing road fine
unord,low glob glob glob glob glob gob glob glob glob
unord,high glob glob glob
fifo glob glob glob
fifo+unord reg glob
fifo (weekly) glob glob arb glob
batching arb per per reg
workload spikes arb reg
concept drift once once once arb arb arb once reg
sparse work reg reg glob* glob* glob* glob* glob* glob glob
a counter‚Äôs arrival process depends on a passenger Ô¨Çow and their service times, which
vary from passenger to passenger. despite conveyors having constant speed s1 shows
not only p1 but also p2 and z1: some conveyors were temporarily stopped and all bags
on them ‚Äòshare‚Äô the same delay, as in p2.
by looking at s1 alone, we cannot explain causes of the delays in those pattern
instances. but as segments in a bhs are synchronized through movement of physical
objects on conveyors, we can identify the cause by following the control-Ô¨Çow of fig. 8.
after p4 in s2 we observe z1 in s3 and s4, both having non-zero workload earlier (p3)
and later (p3,p6), followed by non-zero workload p5 in s5 (fifo, constant waiting
time, high workload, normal performance). this gives rise to pattern l and its context
highlighted in fig. 9. reading pattern l from s4 backwards gives the following interpre-
tation: the conveyors in s3 and /or s4 stopped operation, so bags from s2 could not move
further to s3. when s2 was stopped, s1 also was stopped (point y), because bags could
not enter s2. the slow cases of p2 and p4 are the bags waiting on a stopped conveyor.
this is called a die-back scenario, where delays or non-operation (in s3,s4) propagate
backwards through the system. when s3 and s4 return to operations, waiting bags of s1
and s2 (and from other parts that are not included in fig. 9) resume their movement. the
two times slower performance in p6 shows that s2 and s3 are at their capacity limits
in this restart phase until all workload decreased. figure 9 shows that pattern l repeats
regularly during the day.
using the same reasoning as explained above, we identiÔ¨Åed the root cause of critical
performance problems in the bhs of a large european airport which could not be
identiÔ¨Åed with existing process mining tools. our analysis took one week and was
conÔ¨Årmed as correct by experts of vanderlande who required several weeks of manual
data analysis and years-long experience to identify the root cause.
5.3 comparison of event logs
we compared the 11 real-life business process event logs regarding the types of perfor-
mance patterns they contain. we visualized the performance spectrum of each log and
noted the properties of the immediately visible patterns (in terms of the taxonomy of
sect. 4.2), see https://github.com/vadimmidavvv/psm for details.
table 1 shows the results. we identiÔ¨Åed combined patterns of unordered behavior
with lowandhigh workload; detailed patterns of fifo behavior, also overlaid with
an unordered variant, fifo+unord , and occurring only mon-sat, fifo(weekly) , and
various forms of batching . the aggregate patterns showed workload spikes , concept
drift, and sparse work.the cells in table 1 indicate for each log the occurrence andrepetition values of the
patterns according to the taxonomy of fig. 3. the logs di er strongly in the presence
and repetition of patterns, indicating that very di erent performance scenarios occur in
these processes. interestingly, the bpi15 logs which all relate to the same kind of process
that is being executed in di erent organizations all show very similar patterns: glob* for
sparse work means that sparse work co-occurs globally in a synchronized way: a large
number of segments show behavior during exactly the same days.
6 conclusion
in this paper, we proposed the performance spectrum as a novel visualization of process
performance data in event logs. we project each process step (from one activity to
the next) in a log over time. by making time explicit and avoiding aggregation, the
performance spectrum reveals non-stationarity of performance and synchronization of
dierent cases over time. we provided a taxonomy to isolate and describe various perfor-
mance phenomena in terms of distinct elementary and composite patterns. applying the
technique on 12 real-life event logs validated its usefulness in exploration of data for
identifying expected and unusual performance patterns and in conÔ¨Årming that process
performance is neither stationary nor are cases isolated from each other. future research
is to automatically identify performance patterns from event logs and annotating process
models with identiÔ¨Åed patterns. we believe the insights obtained through visual analysis
to be useful in further research on performance prediction: improve queueing-based
predictions based on fifo-related patterns, aid discovery and identiÔ¨Åcation of batch-
ing activities, aid in developing improved prediction models, simulation models, and
prescriptive models that incorporate insights on non-stationary, or cross-case confor-
mance checking of performance models. the identiÔ¨Åed patterns suggest also the need
for performance-based Ô¨Åltering and sorting of event data.
our technique is currently limited by the fact that process logic has to be Ô¨Çattened
into sequences along the y-axis of the visualization, lack of support for concurrency and
choices, and the very large variety of composite patterns cannot be described well by
our taxonomy. future work comprises the extension of the taxonomy, enhancement of
process models with performance patterns, identifying ‚Äúoptimal‚Äù views for a particular
analysis questions, and improved visualizations to handle concurrency and choices.
acknowledgements. the research leading to these results has received funding from
vanderlande industries in the project ‚Äúprocess mining in logistics‚Äù. we thank elena
belkina for support in the tool development.
references
1.van der aalst, w.m.p.: process mining - data science in action, second edition. springer
(2016)
2.van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on process
models for conformance checking and performance analysis. wiley interdisc. rew.: data
mining and knowledge discovery 2(2), 182‚Äì192 (2012)3.van der aalst, w.m.p., pesic, m., song, m.: beyond process mining: from the past to present
and future. in: caise (2010)
4.van der aalst, w.m.p., schonenberg, h., song, m.: time prediction based on process mining.
inf. syst. 36, 450‚Äì475 (2011)
5.van dongen, b.f., crooy, r.a., van der aalst, w.m.p.: cycle time prediction: when will this
case Ô¨Ånally be Ô¨Ånished? in: otm conferences (2008)
6.folino, f., guarascio, m., pontieri, l.: discovering context-aware models for predicting
business process performances. in: otm conferences 2012. lncs, vol. 7565, pp. 287‚Äì304.
springer (2012)
7.keim, d.a., andrienko, g.l., fekete, j., g ¬®org, c., kohlhammer, j., melan c ¬∏on, g.: visual
analytics: deÔ¨Ånition, process, and challenges. in: information visualization, lncs, vol. 4950,
pp. 154‚Äì175. springer (2008)
8.leemans, s.j.j., fahland, d., van der aalst, w.m.p.: using life cycle information in process
discovery. in: bpm workshops 2015. lnbip, vol. 256, pp. 204‚Äì217. springer (2015)
9.lu, x., fahland, d., van den biggelaar, f.j.h.m., van der aalst, w.m.p.: handling duplicated
tasks in process discovery by reÔ¨Åning event labels. in: bpm 2016. lncs, vol. 9850, pp.
90‚Äì107. springer (2016)
10.martin, n., swennen, m., depaire, b., jans, m., caris, a., vanhoof, k.: retrieving batch
organisation of work insights from event logs. decision support systems 100, 119‚Äì128 (2017)
11.maruster, l., van beest, n.r.t.p.: redesigning business processes: a methodology based on
simulation and process mining techniques. knowl. inf. syst. 21(3), 267‚Äì297 (2009)
12.polato, m., sperduti, a., burattin, a., de leoni, m.: time and activity sequence prediction of
business process instances. computing pp. 1‚Äì27 (2018)
13.pufahl, l., bazhenova, e., weske, m.: evaluating the performance of a batch activity in
process models. in: bpm workshops 2014. lnbip, vol. 202, pp. 277‚Äì290. springer (2014)
14.rogge-solti, a., van der aalst, w.m., weske, m.: discovering stochastic petri nets with
arbitrary delay distributions from event logs. in: bpm workshops 2013. lnbip, vol. 171, pp.
15‚Äì27. springer (2014)
15.rogge-solti, a., weske, m.: prediction of business process durations using non-markovian
stochastic petri nets. inf. syst. 54, 1‚Äì14 (2015)
16.rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation models.
inf. syst. 34, 305‚Äì327 (2009)
17.senderovich, a., rogge-solti, a., gal, a., mendling, j., mandelbaum, a., kadish, s., bunnell,
c.a.: data-driven performance analysis of scheduled processes. in: bpm 2015. lncs, vol.
9253, pp. 35‚Äì52. springer (2015)
18.senderovich, a., weidlich, m., gal, a.: temporal network representation of event logs for
improved performance modelling in business processes. in: bpm 2017. lncs, vol. 10445,
pp. 3‚Äì21. springer (2017)
19.senderovich, a., weidlich, m., gal, a., mandelbaum, a.: queue mining for delay prediction
in multi-class service processes. inf. syst. 53, 278‚Äì295 (2015)
20.shrestha, a., miller, b., zhu, y ., zhao, y .: storygraph: extracting patterns from spatio-
temporal data. in: acm sigkdd workshop idea‚Äô13. pp. 95‚Äì103. acm (2013)
21.song, m., van der aalst, w.m.: supporting process mining by showing events at a glance. in:
proceedings of the 17th annual workshop on information technologies and systems (wits).
pp. 139‚Äì145 (2007)
22.tax, n., verenich, i., rosa, m.l., dumas, m.: predictive business process monitoring with
lstm neural networks. in: caise 2017. lncs, vol. 10253, pp. 477‚Äì492. springer (2017)
23.wynn, m.t., poppe, e., xu, j., ter hofstede, a.h.m., brown, r., pini, a., van der aalst,
w.m.p.: processproÔ¨Åler3d: a visualisation framework for log-based process performance
comparison. decision support systems 100, 93‚Äì108 (2017)