accelerating process mining using relational
databases
alifah syamsiyah, boudewijn f. van dongen, wil m.p. van der aalst
eindhoven university of technology, eindhoven, the netherlands
a.syamsiyah@tue.nl, b.f.v.dongen@tue.nl, w.m.p.v.d.aalst@tue.nl
abstract. given the abundance of event data, the challenge of process
mining today is to enable process mining in the large . this research
aims to address scalability problem in terms of memory use and time
consumption. to this end, we use relational databases as the framework
to both store event data and do process mining analysis. we conduct a
pre-computation of intermediate structures during insertion time of the
data. finally, we implement the existing process mining algorithms to
be compatible with relational database settings.
keywords: process mining, big event data, relational database
this document contains the phd research plan and is organized as follows.
in section 1 we dene what will be accomplished by eliciting relevant research
questions. in section 2 we present the background knowledge. in section 3 we
explain the signicance of the research contribution. then in section 4 we de-
scribe the method adopted in the research. finally, in section 5 we present what
we have done so far.
1 research questions
this work is conducted to answer these following research questions:
{how to deal with tremendous event data in process mining?
{how to do process mining analysis with event data taken from databases?
{how to gain performance benet from relational databases in terms of mem-
ory use and time consumption?
2 background
process mining is introduced as a research discipline that sits between machine
learning and data mining on the one hand and process modeling and analysis
on the other hand. it can be viewed as a means to bridge the gap between
data science and process science. the goal of process mining is to turn event
data into insights and actions in order to improve processes [12]. given the
137rapid development of event data, the challenge is to enable process mining in the
large. this work will be focused on the use of relational databases as a storage
of event data and as an engine to pre-compute process mining metrics.
there are some works related to the use of databases in process mining.
xesame [15] is one of the tools to extract event data from databases. this work
provides an interactive interface where users can select data from the database
and then match it with xes elements. the downside of this work is the lack
of direct access to the database since it is only considered as a storage place of
data.
another technique for extracting event data from databases was presented
in [3]. this work uses two types of ontologies. the rst is called domain ontol-
ogy which gives a high level view of the data stored in the database. the second
is called event ontology which contains the xes structure. data in databases
is extracted through these ontologies using a well-establish technology called
ontology-based data access [7]. although this work is promising, the perfor-
mance issues make it unsuitable for large databases.
rxes was introduced in [13] as the relational representation of the xes
standard for event logs. the work presents the database schema as well as some
experiments showing that rxes uses less memory compared to the standard
approach. rxes puts the initial stone for direct access to the database, however,
this research has no longer continued.
in addition to database approaches, some other techniques for handling big
data in process mining have been proposed [2,8,9], two of them are decomposing
event logs [1] and streaming process mining [5]. in decomposition, a large process
mining problem is broken down into smaller problems focusing on a restricted
set of activities. process mining techniques are applied separately in each small
problem and then they are combined to get an overall result. this approach deals
with exponential complexity in the number of activities of most process mining
algorithms [11]. in streaming process mining, process mining framework prom
is integrated with distributed computing environment apache hadoop. hence
we can analyze event data whose size exceeds the computers physical memory.
streaming process mining also provides online-fashioned process mining where
the event data is freshly produced, i.e. it does not restrict to only process the
historical data as in traditional process mining. however, neither decomposition
nor streaming are directly applicable to existing process mining technique. both
approaches require some changes in the algorithms.
3 signicance
relational database is one of the technologies used in big data computing. this
research uses relational databases as the framework to enable process mining in
the large. we argue that relational databases are the most suitable approach
for process mining compared to other types of databases. the xes standard re-
quires a relational representation between its elements, for example, an event
must belong to a trace and a trace is part of a log. therefore, aggregate-
138attribute
id varchar(50)
type varchar(50)
key_ varchar(50)
value_ varchar(250)
ext_id varchar(50)
parent_id varchar(50)
indexes
classifier
id varchar(50)
name varchar(50)
key_ varchar(250)
indexes
dfr
id varchar(50)
eventclass1 varchar(150)
eventclass2 varchar(150)
freq int(11)
indexes
event
id varchar(50)
attr_id varchar(50)
event_coll_id varchar(50)
indexes
event_collection
id varchar(50)
name varchar(50)
indexes
extension
id varchar(50)
name varchar(50)
prefix varchar(50)
uri varchar(250)
indexes
log
id varchar(50)
attr_id varchar(50)
indexes
log_has_classifier
log_id varchar(50)
classifier_id varchar(50)
indexes
log_has_dfr
log_id varchar(50)
classifier_id varchar(50)
dfr_id varchar(50)
indexes
log_has_ext
log_id varchar(50)
ext_id varchar(50)
indexes
log_has_global
log_id varchar(50)
attr_id varchar(50)
scope varchar(50)
indexes
log_has_trace
log_id varchar(50)
trace_id varchar(50)
sequence int(11)
indexes
trace
id varchar(50)
attr_id varchar(50)
indexes
trace_has_event
trace_id varchar(50)
event_id varchar(50)
sequence int(11)
indexes
triggersfig. 1. db-xes schema
oriented nosql databases [14] such as key-value store databases, document
databases, and columned-oriented databases are not appropriate for xes event
data. relation-oriented nosql such as graph databases may be suitable, how-
ever, it does not provide supports for complex queries such as trigger.
given the result from this research, process mining is able to handle big event
data for discovering process models, doing conformance checking, and enhancing
the process model. moreover, process mining can be applied to the whole data
to get insight from exceptional behavior.
4 research design and methods
in this section we describe and motivate the method adopted in the research.
we rst introduce a relational representation of xes, called db-xes. dif-
ferently from normal process mining analysis which uses event log les, we use
event data stored in relational databases. in other words, we move the location
of data from les to databases. this provides scalability in terms of memory use
due to the fact that memory is not bounded to the computer's disk size.
second, we move some computations from analysis-time to insertion-time.
we pre-compute intermediate structures of process mining algorithms in the
database and keep the computed tables up-to-date of the insertion of new events.
using this approach, we maintain the intermediate structure to be always ready
139and can be directly accessed by users whenever it is needed. this provides scal-
ability in terms of time consumption since we cut the computation time inside
process mining tools.
figure 1 shows the db-xes schema. as the xes structure [4], the schema
contains main elements of event data, i.e. log, trace, event, andattribute. these
elements are connected through table loghastrace andtrace hasevent. global
attributes, extensions, and classiers are linked to the log. furthermore, table
event collection is used to store the source of an event.
db-xes also contains table dfrandloghasdfr. this table is used to store
directly follows relation (dfr), i.e. a pair of event classes (a,b) where ais
directly followed by bin the context of a trace. dfr is one of the intermediate
structures used by various process mining algorithms, such as alpha miner [10]
and inductive miner [6].
for doing the experiment, we use real life event data from a company which
contains 29,640 traces, 2,453,386 events, 54 dierent event classes, and 17,262,635
attributes. then we extend this log in two dimensions, i.e. we increase (1) the
number of event classes and (2) the number of traces, events and attributes.
we extend the log by inserting copies of the original event log data with some
modications in the identier, task name, and timestamp. we extend the number
of event classes as a separate dimension since the growth of event classes gives
exponential inuences.
at the current stage, this work has limitation in the sql query execution.
the number of joins explodes and makes the query inecient. although the
framework is still able to handle 108number of traces, events, and attributes
(the largest number used in the experiment), the need of optimizing the query
still exists.
5 research stage
this research has been started since december 2015. in the rst stage, we create
a relational representation of xes called db-xes. then, using openxes as the
interface, we create an access from db-xes to prom. hence, any prom plug-ins
can work with db-xes similarly as working with xes event log les.
in the next stage, we focus on enabling process discovery in large event data.
we create a representation of the most common used intermediate structure,
i.e. directly follows relations, in db-xes. this structure is pre-computed and
maintained to be up-to-date of the insertion of new events. then, we conduct
experiments using the state-of-the-art process discovery techniques, namely in-
ductive miner. the result shows that the proposed solution gives performance
benet in terms of memory use and time consumption.
the experiment result is paving the way of applying other process mining
techniques. in the current stage, we are implementing handover of work in db-
xes. the metrics have been translated into database tables, and some experi-
ments are being run. in the following we briey list the future research steps:
140{extend the approach with other advanced intermediate structures, such as
the intermediate structures of declarative process mining.
{apply the event removal feature in database while keeping the intermediate
structures live under insertion and deletion of event data.
{optimize the query performance through indexing and possibly apply more
advanced big data technologies, such as spark sql.
{implement conformance checking in the context of db-xes.
references
1. w.m.p. van der aalst. decomposing petri nets for process mining: a generic
approach. distributed and parallel databases , 31(4):471{507, 2013.
2. a. azzini and p. ceravolo. consistent process mining over big data triple stores.
in2013 ieee international congress on big data , pages 54{61, june 2013.
3. diego calvanese, marco montali, alifah syamsiyah, and wil mp van der aalst.
ontology-driven extraction of event logs from relational databases. in business
process intelligence 2015. 2015.
4. c.w. g unther. xes standard denition. www.xes-standard.org, 2014.
5. sergio hern andez, sebastiaan j. van zelst, joaqu n ezpeleta, and wil m. p. van der
aalst. handling big(ger) logs: connecting prom 6 to apache hadoop. in bpm demo
session 2015.
6. sander j. j. leemans, dirk fahland, and wil m. p. van der aalst. discovering
block-structured process models from event logs - a constructive approach. in
petri nets 2013.
7. antonella poggi, domenico lembo, diego calvanese, giuseppe de giacomo, mau-
rizio lenzerini, and riccardo rosati. journal on data semantics x. chapter linking
data to ontologies, pages 133{173. springer-verlag, berlin, heidelberg, 2008.
8. hicham reguieg, boualem benatallah, hamid r. motahari nezhad, and farouk
toumani. event correlation analytics: scaling process mining using mapreduce-
aware event correlation discovery techniques. ieee trans. services computing ,
8(6):847{860, 2015.
9. w. v. d. aalst and e. damiani. processes meet big data: connecting data science
with process science. ieee transactions on services computing , 8(6):810{819,
nov 2015.
10. w. van der aalst, t. weijters, and l. maruster. workow mining: discovering
process models from event logs. ieee transactions on knowledge and data en-
gineering, 16(9):1128{1142, sept 2004.
11. wil m. p. van der aalst. distributed process discovery and conformance checking.
infase 2012.
12. w.m.p. van der aalst. process mining: data science in action. 2011.
13. boudewijn f. van dongen and shiva shabani. relational xes: data management
for process mining. in caise 2015.
14. meenu dave vatika sharma. sql and nosql databases. international journal of
advanced research in computer science and software engineering, 2(8):20{27,
august 2012.
15. h.m.w. verbeek, j.c.a.m. buijs, b.f. van dongen, and w.m.p. van der aalst.
xes, xesame, and prom 6. in p. soer and e. proper, editors, information
systems evolution, volume 72, pages 60{75, 2010.
141