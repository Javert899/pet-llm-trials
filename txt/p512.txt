anomaly detection using process mining
f´ abio bezerra1, jacques wainer1, and w.m.p. van der aalst2
1institute of computing - unicamp
av. albert einstein, 1251
campinas, s˜ ao paulo, brazil
{fbezerra,wainer}@ic.unicamp.br
2dep. of mathmatics and computer science - tu/e
den dolech 2, 5600 mb
eindhoven, the netherlands
w.m.p.v.d.aalst@tm.tue.nl
abstract. recently, several large companies have been involved in ﬁ-
nancial scandals related to mismanagement, resulting in ﬁnancial dam-
ages for their stockholders. in response, certiﬁcations and manuals for
best practices of governance were developed, and in some cases, tougher
federal laws were implemented (e.g. the sarboness oxley act). com pa-
nies adhered to these changes adopting the best practices for corporate
governance by deploying process aware information systems (paiss ) to
automate their business processes. however, these companies dem and a
rapid response to strategic changes, so the adoption of normative paiss
may compromise their competitiveness. on one hand companies need
ﬂexible paiss for competitiveness reasons. on the other hand ﬂexib ility
may compromise security of system because users can execute tasks t hat
could result into violation of ﬁnancial loses. in order to re-balance thi s
trade-oﬀ, we present in this work how prom tools can support anomaly
detection in logs of pais. besides, we present the results of the app lica-
tion of our approach with a real case.
key words: process mining, anomaly detection, auditing systems
1 introduction and motivation
management trends in the early 1990’s largely motivated the adoption of process
awareinformation systems (paiss) by organizations [1]. the use of paiss il-
lustrates a shift from data to process-oriented systems, which clearly separa tes
business process logic from application programs, facilitating redesign and ex ten-
sion of process models. moreover, legal requirements are also motivating co m-
panies to adopt paiss and follow best practices of governance (e.g. cobit,
control objectives for information and related technology) in order to suppo rt
the control of their business processes. for example, we can cite the sarbanes-
oxley act, which is a united states federal law enacted in response to a number
of major corporate and accounting scandals (e.g. enron and worldcom).
despite the automation provided by pais, the business process control of
competitive companies should not be supported by normative tools like a clas si-2 f´ abio bezerra, jacques wainer, and w.m.p. van der aalst
cal production wms (workﬂow management system). these companies demand
a ﬂexible automation of their business processes, since they need to respond
rapidly to new market strategies or new business models. on the other hand, a
ﬂexible system may be vulnerable to fraudulent or undesirable executions. these
considerations illustrate the trade oﬀ between ﬂexibility and security. in other
words, the system should provide ﬂexibility for competitiveness reasons, but it
also should avoid or identify misuse of system.
therefore, there is clearly a demand for auditing systems, and buzzwords
such as bam (business activity monitoring), bom (business operations man-
agement), and bpi (business process intelligence) illustrate the interest of v en-
dors to support the monitoring and analysis of business activities [2]. besides ,
the spectacular growth of log data in the form of audit trails, transactio n logs,
and data warehouses, and the requirement from a bpm (business process man-
agement) perspective, have stimulated and enabled the development of process
mining techniques. the process mining is mainly concerned with the discovery
of process models from logs generated by information systems [3, 4]. recent
developments in the ﬁeld of process mining have led to a renewed interest in
anomaly detection [5, 6, 7] and security issues [8]. thus, this paper presents
an approach to detect anomalous traces using available process mining tools of
prom framework1.
process models
greater or
equal to
p% fitnessless than 
p% fitnesssplitting
anomalous
tracesnormal
tracesoriginal
logfiltered
log
mprocess discovery
algorithmsscoping
filtering and
selectionoutput
input
fig. 1. overview of our anomaly detection approach.
figure 1 provides an overview of our proposed approach which is organized
in ﬁve steps: (i) scoping, (ii) process discovery, (iii) ﬁltering of ﬁtting models ,
(iv) model selection, and (v) splitting of log. the scoping phase is a domain
dependent step by applying some ﬁlters where instances and activities that are
1http://www.processmining.organomaly detection using process mining 3
out-of-scope are removed from the original log. the next two steps deal with
discovering models and ﬁltering of ﬁtting models , i.e. the selection of models
that satisfy a minimum (p%) ﬁtness criteria - the degree of ﬁtness refers to the
ability to reproduce the log. then, we select the most appropriate model among
ﬁtting models. an appropriate model is a structuraly simple and behavioraly
speciﬁc model. finally, we classify the instances of log in anomalous and normal
instances using the selected model. in this approach, which focuses on analysis
of control-ﬂow perspective, if an execution trace in the log is not an instance of
(or does not ﬁt) the appropriate model, it is an anomalous trace.
the remainder of this paper is organized as follow. in section 2 we present
some related work in the area of process mining, conformance checking, trace
clustering, and auditing. albeit it is hard to present a precise deﬁnition for
anomaly in process-aware context, specially when we consider very dynamic
application domains (e.g. health care systems), in section 3 we present what we
believe to be a suitable anomaly deﬁnition. in section 4 we present how prom
framework can be applied to operationalize this deﬁnition. besides, we provide
a case study in section 5 to show how our anomaly detection approach can be
applied in a real scenario, and we provide a ﬁnal discussion and directions for
future work in section 6.
2 related work
process mining techniques allow for various types of analysis based on so-call ed
event logs. for example, using process mining one can reconstruct a process
model from a log generated by some information system. in the last ten year s
researchers around the world have been working on such techniques [3, 9, 10].
the term was ﬁrst coined in the context of software processes. cook and wolf,
in [11], present process discovery as a tool to support the design of software
processes because it is a hard, expensive, and a error prone activity, specially for
big and complex processes. also a forerunner work in process mining, the paper
of agrawal et al, in [12], present an algorithm that mine models having three
properties in mind: completeness, minimality, and irredundancy.
among the recent process mining approaches, the most visible one is the
α−algorithm [10, 4]. the eﬀectiveness of that algorithm was formally proved for
a class of process models, the wf-nets ( workﬂow net ), which are petri nets
that require: (i) a single start place, (ii) a single end place, and (iii) every node
must be on some path from start to end. however, such an algorithm has severe
limitations, for example, the inability to deal with short loops.
noise in the event log is closely related to anomaly detection. some process
mining methods deal with the mining of noisy logs [12, 3, 13, 14, 15], yet their
approaches are limited to the frequency evaluation of dependency relation be-
tween two activities. for example, infrequent dependency relations between two
activities may not be modeled in the resulting process model. a more sophisti-
cated and promising approach, called genetic mining, was proposed in [16]. this4 f´ abio bezerra, jacques wainer, and w.m.p. van der aalst
algorithm is based on genetic algorithms, which search for a solution (a n individ-
ual) that satisﬁes a selection criteria, called ﬁtness function. the individuals are
generated based on genetic operators such as crossover, mutation, and elitism.
all previously mentioned process mining methods are mainly concerned with
the modeling of normal behavior, yet some of them also deal with noisy logs.
however, abnormal behavior was not deeply studied by process mining com-
munity, although it is a clearly important subject to the development of more
accurate auditing systems. then, in order to ﬁll this gap, recent researches have
been addressing the problem of identifying anomalous trace in logs of paiss
[8, 17, 7, 6]. in [8], aalst and medeiros present two anomaly detection methods
that are supported by α-algorithm. a drawback of this work is that it demands
a known “normal” log, but a known “normal” log may not be available in ap-
plications domains that demand ﬂexible support. in [17], the authors present a
framework to detect fraud and abuse in health insurance systems. in this work
clinical pathways are used to construct a detection model, whose features are
based on frequent control-ﬂow patterns inferred from two datasets, one with
fraudulent instances and other with normal instances. in [6] and [7], bezerra
and wainer present three diﬀerent approaches to detect anomalous traces: sam-
pling, threshold, and iterative approaches. nevertheless, as pointed out by the
authors, the methods presented in [6, 7] have serious practical limitations, di-
rectly resulting from the adopted process mining algorithm, which can not deal
with larger logs.
3 formal anomaly deﬁnition
there are many meanings associated with the deﬁnition of anomaly. an anomaly
can be an exceptional execution, a noise in the log, possibly caused by system
failure or error in data input, or even a fraud attempt. an exception character-
izes an abnormal or unusual execution, but it can be supported by the business.
whereas a fraud attempt and an operational error are unusual executions that
lead to undesirable results from a business point of view. however, despite diﬀer-
ent meanings associated with the term anomaly, there are some common generic
deﬁnitions such as: (i) a rare or infrequent event; (ii) a deviation from a norm al
form or rule; (iii) an unexpected result; or (iv) a state outside the usual range
of variations.
nevertheless, a precise deﬁnition of normal, norm, or rule is diﬃcult, or even
impossible, if one assumes a generic context, e.g. an arbitrary pais. note t hat, in
very dynamic environments, like health care systems, each instance (e.g. pati ent
treatment) may be diﬀerent from others, so each instance can be viewed as an
unexpected occurrence. next, we present a deﬁnition for anomalous traces. we
believe that such a deﬁnition is a ﬁrst step towards a more accurate and generic
deﬁnition. we will make this deﬁnition operational using prom framework, and
we point out in section 4 how prom can address this deﬁnition.
throughout this paper the term trace will be used to refer to an execution
path (or process instance) of a business process model, and it represents theanomaly detection using process mining 5
order that the activities of this path were completed. thus, a trace [ a b c d e ]
indicates that activity aﬁnished before activity b, and that activity bﬁnished
before activity c, and so on. using the notion of a trace, we deﬁne the concept
of an event log.
deﬁnition 1 trace.
given that ais a set of activities. then, a trace trepresents a sequence of
activities such that t∈a∗. that is, assuming that ais an alphabet, and a∗
denotes all possible words over a, then tis a word based on this alphabet.
deﬁnition 2 log.
given tas the set of all traces deﬁned over aandt′⊆t, then a log lis
deﬁned as l⊆t′2.
timestart
end today start date
a)
b)
c)
d)
fig. 2. problems related with an imported log.
in the scoping step of our anomaly detection approach (see figure 1) the
domain analyst will deﬁne which activities and traces may be removed from log
before anomaly detection. we call the ﬁrst step scoping because it represents
the moment when the domain analyst deﬁnes what is important to consider in
the analyses. also, traces that are clearly not fully recorded should be removed.
for example, we show in figure 2 four traces (a, b, c, and d) from a log, and
we indicate with dashed lines the period that was used to import the traces
for analysis. thus, it is clear in this ﬁgure that: (i) trace a) should be rem oved
because it does not have the expected start activity; (ii) trace b) should be
removed because it does not have the expected start and end activities; and (iii)
trace d) should be removed because it does not have the expected end activity.
the scoping step is formally deﬁned below.
deﬁnition 3 scoped log.
given a log las deﬁned in deﬁnition 2, and a set asof scoped activities such
2note that for simplicity we assume that a log is a set of traces. however , in re-
ality a log is a bag (i.e. multiset) of traces since each sequence of act ivities may
appear multiple times in the log. although we use set in our formal deﬁni tion, our
implementation in prom takes frequencies of traces into account.6 f´ abio bezerra, jacques wainer, and w.m.p. van der aalst
thatas⊆a. then, an scoped log lsis a set of traces tbased on scoped activities
assuch that:
ls={filter (t,as)|t∈l∧complete (t)}
where ﬁlter removes all activities in tthat are not in as, and complete(t) is a
boolean function that evaluates to false if tis not complete or inappropriate.
in order to classify the traces of a log as anomalous and normal, we have to us e
what we call an appropriate model , which is a model that has a minimum ﬁtness
support (see deﬁnition 5) and maximizes a function called appropriateness (see
deﬁnition 6). the minimum ﬁtness support is a parameter used to ﬁlter the
models that can be discovered from the log, that is, among the models (possibly
inﬁnitely many) we are interested in the models that can classify at least p% of
traces as normal, where p% refers to the minimum ﬁtness support.
deﬁnition 4 fitness instance test function.
fm:l→ibis the ﬁtness instance test function that indicates if a trac e from a
loglis an instance of a model m. a trace tis instance of a model miftcan
be completely parsed by m. it can be deﬁned as follows:
fm(t) =/braceleftbigg
true, if t can be replayed by model m
false, otherwise
deﬁnition 5 fitness model test function.
it is a function f:{(m,l)|mis a model ∧lis a log } →[0,1]that indicates
the degree of ﬁtness between a model mand a log l, that is, how many traces
from log lﬁt or can be completely parsed in model m. function f is deﬁned as
follows:
f(m,l) =|{t∈l|fm(t)}|
|l|
a b
c d
fig. 3. example of a generic model (flowered model).
therefore, the ﬁtness model test function indicates how much of the observed
behavior in the log can be supported by a model. that is, a ﬁtness of 100% means
that the model supports the whole log, so it is able to replay each trace from
the log correctly. nevertheless, a model with 100% of ﬁtness does not mean an
appropriate model. for example, the generic model depicted in figure 3 can
replay whatever trace deﬁned over the set of activities {a, b, c, d }, so this
model will never be able to detect anomalous traces in a log whose traces areanomaly detection using process mining 7
based on these activities. on the other hand, a model with low ﬁtness value would
classify many traces in log as anomalous. hence, appropriateness test function
is important to help us choose which ﬁtting model is more appropriate, that
is, given two ﬁtting models which one better describes the log in a simple and
speciﬁc way. therefore, we present a formal deﬁnition of appropriateness test
function , which supports the fourth step of our anomaly detection approach, the
model selection step. then, after selecting the appropriate model , a trace from
the log is anomalous if it is not ﬁtting model (cf. deﬁnition 7).
deﬁnition 6 appropriateness test function.
a:{(m,l)|mis a model ∧lis a log } →[0,1]is a function that indicates how
appropriate is a model mwhen compared with log l, where appropriate means
that a simple model is preferable than complex one, and that “ too much” addi-
tional behavior is undesirable. therefore, such a function represents a balance
between structural complexity and extra-behavior support.
finally, once we selected an appropriate model, we perform the last step
of our anomaly detection approach, the splitting of log in two sets: anomalous
traces andnormal traces . below, we present a formal deﬁnition of anomalous
trace.
deﬁnition 7 anomalous trace.
given log l,p∈[0,1]the desired minimal degree of ﬁtness between a model and
a log, and m∗anappropriate model such that:
–f(m∗,l)≥p;
–∀m′f(m′,l)≥p⇒a(m′,l)≤a(m∗,l).
then, an anomalous trace t′∈lis deﬁned as follows: ¬fm∗(t), i.e.
{t∈l| ¬fm∗(t)}is the set of anomalous traces.
summarizing, among the models that can be discovered from a scoped log
ls, we are interested in the model m∗, which we call appropriate model and
has a minimum ﬁtness degree p, but whose appropriateness is greater or equal
to the appropriateness of all others models with minimum ﬁtness pthat can also
be discovered from this log ls. then, the anomalous traces are those traces
from log that do not ﬁt the appropriate model m∗. in the following section we
address this formal anomaly deﬁnition operational by using prom.
4 application based on prom
the prom framework is a pluggable environment for process mining [18]. it is
platform independent as it is implemented in java, and it is open-source. the
framework is ﬂexible with respect to the input and output format, and it is also
open enough to allow for the easy reuse of code during the implementation of new
process mining techniques. prom supports the analysis of three main perspec-
tives: (i) the process perspective that focuses on the control-ﬂow mining; (ii) t he8 f´ abio bezerra, jacques wainer, and w.m.p. van der aalst
organizational perspective that focuses on the performers of activities; and (iii)
the case perspective that focuses on properties, data, and values manipulated
by activities. because our anomaly detection approach is focusing on control-
ﬂow deviations, we are specially interested in the plug-ins dealing with process
perspective in prom. in this section, we show how the prom framework can be
used in the identiﬁcation of anomalous traces based on our formal deﬁnition (cf.
deﬁnition 7).
4.1 scoping
the ﬁrst step of our anomaly detection approach is concerned with the removal
of activities and traces from log that are not interesting for analysis or that may
lead the deﬁnition of anomalies that are the result of an incomplete log. prom
has a lot of log ﬁltering tools that can be applied in this step. for example, in
prom is possible to indicate what are the start and end activities of traces f rom
log, so every trace that does not start and end with selected activities will be
removed from log.
prom also provides inspecting tools that can be used to evaluate the fre-
quency of activities. using ﬁltering it is possible to perform an analysis ba sed
only on frequent traces. besides, prom provides an analysis plug-in called ltl
checker that can be used to ﬁlter traces that satisfy certain properties, for ex-
ample, traces with a causal relation between two activities.
4.2 process discovery and ﬁltering
the next two steps of our anomaly detection approach address the discovery and
ﬁltering of models. the process discovery step deals with the automated con-
struction of a process model that describes the log used during discovery, while
the ﬁltering step is related with the selection of models that satisfy a minimum
ﬁtness constraint (the p value in deﬁnition 7). in order to address the discov-
ery process step, prom provides several algorithms, and all available process
discovery algorithms can be used. on the other hand, the ﬁtness instance test
function, as described in deﬁnition 4, is not provided separately by prom, yet
it can be obtained indirectly through the conformance checker plug-in [18]. the
ﬁtness (f) metric of conformance checker plug-in is a more ﬁne-grained metric
that evaluates how much a model ﬁts a log considering both trace and activity
perspectives.
moreover, the ﬁtness of a model can be evaluated through a metric in prom
called pm(parsing measure ) that directly supports deﬁnition 5. such a metric
can be used with control-ﬂow benchmark plug-in, but it works only with heuris-
tic models, and because there is not a direct conversion plug-in from petri nets
to heuristic models, we can not use this metric with process mining algorithms
that output petri nets models. on the other hand, we can accomplish this lim-
itation using conformance checker plug-in, which provides an interface where it
is possible to select only the ﬁtting traces (100% of ﬁtness), and then we can see
the percentage of traces that ﬁts the model.anomaly detection using process mining 9
4.3 model selection
model selection is the fourth step of our approach, and it is concerned with the
selection of what we call appropriate model , that is, a simple and non-generic
model. in order to objectively help us choose such an appropriate model we need
an appropriateness test function that supports deﬁnition 6. although prom does
not provide a plug-in that directly selects the most appropriate model, the appro-
priateness metrics implemented in both conformance checker andcontrol-ﬂow
benchmark plug-ins can be used in for a suitable deﬁnition of an appropriateness
test function (cf. equation (1)). hence the appropriateness test function may be
evaluated in prom as follows:
– using a metric called structural appropriateness , which assesses the complexity
of a model, and we represent here as a function fs(m), where mis a model;
– using a metric called behavioral appropriateness , which assesses how speciﬁc is
a model regarding a log, and we represent here as a function fb(m,l), where
mis a model and lis a log;
– ﬁnally, since both functions are deﬁned for the same codomain ([0 ,1]), we could
objectively deﬁne appropriateness as a balance value between these structural
and behavioral metrics, as follows:
a(m,l) =fs(m) +fb(m,l)
2(1)
4.4 splitting
finally, since we have an appropriate model , the last step of our anomaly de-
tection approach can be easily achieved through conformance checker plug-in
of prom. that is, once we have got a model that supports a minimum ﬁtness
threshold (value pof deﬁnition), and such a model also has the greatest appro-
priateness value amongst other models, we can simply select those traces that
do not ﬁt the model as follows: (i) selecting ﬁtting traces as normal traces; and
then (ii) inverting selection to identify the anomalous traces.
5 municipal household support system
in this section we present a real application of prom tools for supporting our
anomaly detection approach. it refers to a log of the information system of t he
dutch municipality. the process is about supporting citizens that need help
in the form of a wheelchair, scootmobiel, adaptation of house (elevator), and
household help. the log used in this analysis comprises event data from january
2007 to august 2008, and it contains information of 876 process instances tha t
together represent 5497 activities, among 10 diﬀerent activities available i n the
log. besides, the shortest trace from log has 1 activity, while the longest ha s 12
activities. on average, the traces have 6 activities.10 f´ abio bezerra, jacques wainer, and w.m.p. van der aalst
because many models can be discovered from a log (maybe inﬁnite), and
considering the lack of automated tools to generate all possible candidates, we
explored the set of possible process models in a semi-automatic fashion, i.e., t he
appropriate model was discovered through manual parameter selection. in the
following we present how we applied our anomaly detection approach.
5.1 scoping
during scoping, we ﬁrst made an analysis based on frequencies of start and
end activities. as stated in section 3, depending of period used to import the
log, some traces may start and/or end with an intermediate activity. these
incomplete traces were removed. then we applied the following ﬁlters on the
original log, which were also supported by users of the system.
– deﬁne “request registration” as the unique start activity because it is a pre-
dominant start activity, as we can notice in table 1;
– deﬁne “final phase” as the unique end activity (see table 1);
table 1. frequency of start and end activities obtained from prom
frequency of start activities frequency of end activities
activity frequency activity frequency
request registration 96,12% final phase 94,52%
reporting & decision 3,43% reporting & decision 2,06%
private research 0,34% request registration 1,03%
research 0,11% left ﬁling 0,91%
keys and decide 0,69%
accounting 0,34%
waiting recovery 0,23%
research 0,11%
return 0,11%
in the end of scoping step we obtained a log with 796 traces that as a whole
comprise 5191 activities. besides, the shortest trace from log has 5 activi ties,
while the longest has 12 activities. on average, the traces have 6 activities.
5.2 discovering, ﬁltering, and selection
our proposal approach deals with the search of an appropriate model, which
satisﬁes a minimum ﬁtness and maximizes appropriateness. figure 4 depicts
three models that we mined from the scoped log, and their respective properties
(ffor ﬁtness, sfor structural appropriateness, bfor behavioral appropriateness,
andafor appropriateness). we considered 80% as the minimum ﬁtness support
in this analisys. we used heuristics mining plug-in for process discovery because
it is robust for noise and exceptions since it outputs a model based on frequent
patterns.
then, we got the petri net a (after converting from a heuristic net model).
speciﬁcally in the case of this log, whose activity frequencies are reported inanomaly detection using process mining 11
fig. 4. petri net models based on frequency ﬁltering analysis.
table 2. activity frequencies
model element occurrences (relative)
keys and decide 16,41%
reporting & decision 15,43%
left ﬁling 15,39%
request registration 15,33%
final phase 15,33%
accounting 11,42%
waiting recovery 9,59%
return 1,00%
private research 0,04%
research 0,04%
table 2, the two most infrequent activities (“private research” and “resear ch”)
add an unnecessary complexity to model a although they are signiﬁcantly infre-
quent when compared with other activities. for that reason, we applied heuristic
mining over a ﬁltered version of scoped log, which does not consider activities
“private research” and “research”. this way, we got petri net b, which is a
model more appropriate than model a.
however, although “return” activity is signiﬁcantly more frequent than “pri -
vate research” and “research” activities, it is also signiﬁcantly infrequent when
compared with other activities of log (see table 2). that is, “return” activi ty
adds an unnecessary complexity to model in figure 4 a. for that reason, we
also mined scoped log, but ﬁltered from “private research”, “research”, and
“return”. as a result, we obtained the petri net c, which is more appropriate
than other models, and it also has a better ﬁtness. therefore, we selected petri
net c as the appropriate model, so it was utilized for splitting step. note that12 f´ abio bezerra, jacques wainer, and w.m.p. van der aalst
the selection of this model was not automated and we did not do an exhaus-
tive search. moreover, manual inspection showed that this is indeed the most
appropriate model having a ﬁtness of at least 80%.
5.3 splitting
finally, we got the ﬁtting and non-ﬁtting traces using the appropriate model
(petri net c in figure 4). in this analysis we considered 80% for p(minimum
ﬁtness support), so we supported to ﬁnd at most 20% of anomalous traces in the
log. however, because we got an appropriate model whose ﬁtness was 99%, we
detected only 6 anomalous traces from a total of 796 traces of scoped log .
6 conclusion and future work
recent management trends and the adoption of rigorous best practices of corpo-
rate governance stimulated companies to deploy pais in order to automate and
control their business processes, and also to track misuse of their systems (e.g .
ﬁnancial scandals related to mismanagement). however, the control provided
by normative systems may compromise the necessary ﬂexibility to companies
in being agile and competitive in the market. this work presents an approach
to identify anomalous traces, which may represent a misuse, for deal with this
problem. for example, the identiﬁcation of anomalous traces can lead to an in-
vestigation and probable evolution of the business process models. our approach
is based on a formal deﬁnition of anomalous trace, which is deﬁned through two
parameters: (i) ﬁtness model degree (p%); and (ii) appropriateness of model ( a).
we described how prom framework can be utilized for support this formal def-
inition. then, we carried out an application of approach with a real log from a
dutch municipality.
the presented anomaly detection approach is limited to the control-ﬂow per-
spective. for example, fraud may follow a normal ﬂow, but producing anomalous
data (e.g. very large amount of money) or being executed by unauthorized roles
or users (e.g. violation of four eyes principle). therefore, we believe that data a nd
organizational perspectives should also be considered to provide more accuracy,
yet they may require a more complex anomaly detection framework. because
our approach relies on the selection of an appropriate model , we believe that a
precise appropriateness metric should be deﬁned. besides, we think that an au-
tomated solution might be implemented, for example, through the use of genetic
algorithms.
references
1. dumas, m., van der aalst, w., ter hofstede, a.: process-aware inf ormation sys-
tems: bridging people and software through process technology. wiley ( 2005)
isbn 13 978-0-471-66306-5.anomaly detection using process mining 13
2. rozinat, a., van der aalst, w.: conformance checking of processes bas ed on
monitoring real behavior. information systems 33(1) (march 2008) 64–95
3. van der aalst, w.m.p., van dongen, b.f., herbst, j., maruster, l., schimm, g.,
weijters, a.j.m.m.: workﬂow mining: a survey of issues and approach es. data &
knowledge engineering 47(2) (november 2003) 237–267
4. van der aalst, w.m.p., weijters, a.j.m.m.: process mining: a r esearch agenda.
computers in industry 53(3) (april 2004) 231–244
5. bezerra, f., wainer, j.: towards detecting fraudulent executi ons in business pro-
cess aware systems. in: wfpm 2007 - workshop on workﬂows and process man-
agement, timisoara, romania (september 2007) in conjunction with synasc
2007.
6. bezerra, f., wainer, j.: anomaly detection algorithms in logs of proces s aware
systems. in: sac ’08: proceedings of the 2008 acm symposium on applied c om-
puting, new york, ny, usa, acm (2008) 951–952
7. bezerra, f., wainer, j.: anomaly detection algorithms in business p rocess logs.
in: iceis 2008: proceedings of the tenth international conference on ent erprise
information systems. volume aidss., barcelona, spain (june 2008) 11–18
8. van der aalst, w.m.p., de medeiros, a.k.a.: process mining and s ecurity: detect-
ing anomalous process executions and checking process conformance. e lectronic
notes in theoretical computer science 121(4) (february 2005) 3–21
9. de medeiros, a.k.a., van der aalst, w.m.p., weijters, a.: workﬂ ow mining:
current status and future directions. in meersman, r., tari, z., s chmidt, d., eds.:
on the move to meaningful internet systems. volume 2888 of lncs. (2003)
10. van der aalst, w.m.p., weijters, t., maruster, l.: workﬂow mini ng: discover-
ing process models from event logs. ieee transactions on knowledge and data
engineering 16(9) (september 2004) 1128–1142
11. cook, j.e., wolf, a.l.: discovering models of software processe s from event-based
data. acm trans. softw. eng. methodol. vol. 7 (3) (1998) p. 215–249
12. agrawal, r., gunopulos, d., leymann, f.: mining process models f rom workﬂow
logs. in: edbt ’98: proceedings of the 6th international conference on ext ending
database technology, london, uk, springer-verlag (1998) 469–483
13. cook, j.e., du, z., liu, c., wolf, a.l.: discovering models of b ehavior for con-
current workﬂows. computers in industry 53(3) (2004) 297–319
14. pinter, s.s., golani, m.: discovering workﬂow models from activ ities’ lifespans.
computers in industry 53(3) (2004) 283–296
15. herbst, j., karagiannis, d.: workﬂow mining with inwolve. compute rs in industry
53(3) (2004) 245–264
16. de medeiros, a.k.a., weijters, a.j.m.m., van der aalst, w.m.p .: genetic process
mining: a basic approach and its challenges. in: business process manage ment
workshops. volume 3812 of lecture notes in computer science., nancy, fr ance
(september 2006) 203–215 isbn 978-3-540-32595-6.
17. yang, w.s., hwang, s.y.: a process-mining framework for the detect ion of health-
care fraud and abuse. expert systems with applications 31(1) (july 2006) 56–68
18. van dongen, b., de medeiros, a., verbeek, h., weijters, a., van de r aalst, w.: the
prom framework: a new era in process mining tool support. in: appli cations and
theory of petri nets 2005. volume 3536 of lecture notes in computer science. ,
springer berlin / heidelberg (2005) 444–454