software and systems modeling manuscript no.
(will be inserted by the editor)
workow patterns put into context
w.m.p. van der aalst1;2, a.h.m. ter hofstede2;1
1eindhoven university of technology, the netherlands
e-mail: w.m.p.v.d.aalst@tue.nl
2queensland university of technology, brisbane, australia
e-mail: a.terhofstede@qut.edu.au
received: date / revised version: date
abstract in his paper \approaches to modeling business processes. a
critical analysis of bpmn, workow patterns and yawl" egon b orger
criticizes the work of the workow patterns initiative in a rather provoca-
tive manner. although the workow patterns and yawl are well-established
and frequently used, b orger seems to misunderstand the goals and contri-
butions of the workow patterns initiative. therefore, we put the workow
patterns and yawl in their historic context. moreover, we address some
of the criticism of b orger by pointing out the real purpose of the workow
patterns and their relationship to formal languages (petri nets) and real-life
wfm/bpm systems.
key words workow patterns { yawl { petri nets { business process
management
1 introduction
in [9], egon b orger states that the patterns by the workow patterns ini-
tiative are \not well founded", \badly described", and \no suitable bpm
benchmark". moreover, he criticizes the semantical foundation of yawl.
b orger makes these claims in a rather provocative and emotional manner.
therefore, the editors encouraged us to write this rebuttal.
in the remainder, we rst sketch the workow patterns initiative in its
historic context. in [9], a substantial number of sentences are quoted from
ten of our publications, which appeared between 2000 and 2011. many of
these quotations are out of context, e.g., quotations related to specication,
analysis, and implementation are muddled up. therefore, section 2 describes
the developments related to the workow patterns initiative over the last2 w.m.p. van der aalst, a.h.m. ter hofstede
decade thereby clarifying the purpose of the patterns and the role of yawl.
in section 3, we argue that patterns need to balance between generality and
precision and should notbe viewed as a formal specication of behavioral
properties. patterns should allow for multiple modeling techniques and not
impose very specic semantics, e.g., the well-known design patterns [11]
also do not impose the use of java or any other programming language. in
section 4, we point out the complexity of the various interacting workow
perspectives and argue that there is no \silver bullet formalism" that will
make everything as simple as suggested in [9]. finally, in section 5, we
acknowledge the need for empirical validation and discuss our eorts to nd
out what is happening in realworkow processes and wfm/bpm tools.
2 history of the workow patterns
in the mid-nineties, wil van der aalst got involved in the sagitta project
when he was working as a part-time workow consultant for bakkenist
management consultants. the goal of this project was to realize a workow
system for supporting the key processes within the dutch customs [3].
he was surprised by the way the workow management (wfm) system
was selected. stakeholders had problems describing its desired functionality.
for example, they did not distinguish between { what is called today {
thedeferred choice (pattern 16) and the exclusive choice (pattern 4).
although the dutch customs clearly had many processes that required
support for the deferred choice , they were about to select a wfm system
that did not support this at all [3]. this experience and also several similar
experiences of the rst author in the second half of the nineties, clearly
showed the need for describing workow patterns.
however, the real start of the workow patterns initiative was in 1999
when the authors met at coopis 1999 in edinburgh. this resulted in the
rst paper on the workow patterns at the same conference one year later [2].
initially, the work received little attention, but this changed when the www.
workflowpatterns.com website was launched and started to attract the at-
tention of people involved in the selection and use of wfm systems. several
reports on the patterns appeared in dutch it journals and this encouraged
vendors to study the workow patterns more closely. in parallel, we rened
and extended the patterns and started to systematically evaluate commer-
cial wfm systems [6,20,21]. we also evaluated emerging standards such as
bpel4ws, bpml, xlang, wsfl and wsci.
initially, the focus was on control-ow only. this changed in 2004 when
nick russell joined the workow patterns initiative. over time, we added
patterns for the other core perspectives such as the workow resource pat-
terns [18], the workow data patterns [19], and the exception handling pat-
terns [17]. later also patterns related to service interaction and exibility
were added. whereas the control-ow patterns could be used to evaluate a
language or notation, for the other patterns it made more sense to considerworkow patterns put into context 3
them in the context of a wfm/bpm system. in 2006 the original set of 20
control-ow patterns was revisited with the goal to provide a more precise
description of each of the patterns and also to identify any potential gaps in
the original set of patterns. as a result the number roughly doubled. in [9],
b orger criticizes the growing number of patterns: \an exponential growth
can be observed starting with 20 workow patterns in 2003 going through
43 wps in 2006 and reaching a praised 126 patterns (obtained by adding
patterns for the so-called data and resource perspectives) in 2010. no rea-
son is given that this growth has a fundamentum in re and a limit." (note:
references in this quote were removed). the reason for the growing number
of patterns was the expanding scope of the workow patterns initiative
and our experiences with a wide range of systems and standards. more-
over, as was clearly stated in our publications, we do not claim that wfm
systems/languages should support all patterns. users should rst analyze
which patterns they need and then use this short-list of patterns to select
a system.
in parallel with the renement and extensions of the patterns, we also
started the development of the yawl language and system [5,12]. yawl is
inspired by the workow patterns and extends petri nets to facilitate the use
of more advanced patterns [4]. b orger is very critical about the development
of yawl as a reference implementation of the workow patterns. he talks
about \an obvious group interest" (section 4.1 in [9]) suggesting that the
patterns were used to promote yawl. however, b orger misunderstands the
true intentions of yawl. the development of yawl started in 2002 and
was triggered by frequent discussions with practitioners that had problems
understanding the subtle but important dierences between the various pat-
terns. some vendors doubted that comprehensive patterns support could be
achieved (without adding a lot of complexity). they would often ask \how
do you do this?" and wanted to see concrete examples. this instigated the
development of yawl. the acronym (yet another workow language)
clearly shows that yawl was not intended as a commercial eort trying
to gain competitive advantage by exploiting the patterns. however, yawl
has had a very positive eect on the workow patterns initiative. when
implementing yawl new questions emerged, especially with respect to the
interaction of the various patterns. the yawl environment also helped to
provide a proof-of-concept for various innovative research ideas related to
workow exibility, work distribution, worklist visualization, congurable
process models, verication, simulation, and process mining [12]. yawl is
one of the most visible open source wfm systems (see [22] for a patterns-
based analysis of the other main open source wfm systems). yawl has
been downloaded approx. 120,000 times and the key paper [5] has been
cited more than 800 times according to google scholar. overall, we think
that yawl helped to progress wfm/bpm research and it is unclear why
b orger goes to great lengths to denounce it (in [9] no other wfm systems
are singled out for criticism).4 w.m.p. van der aalst, a.h.m. ter hofstede
in our view, the workow patterns have had a very positive eect on
wfm/bpm research and wfm/bpm products. today, the patterns are
widely used to describe workow functionality in a language/system-inde-
pendent manner. in addition, the patterns are also highly visible. the www.
workflowpatterns.com website has been one of the most visited websites
in the eld of bpm averaging more than 300 visitors per working day over
the last decade. moreover, [6] is the most cited workow paper ever (it has
more than 2,250 citations according to google scholar).
3 balancing between generality and precision
in [9] both the informal descriptions of the workow patterns and the ex-
ample formalizations using yawl and cpn tools are criticized. surpris-
ingly, despite his criticism, egon b orger has published various papers on
formalizing the control-ow patterns in terms of abstract state machine
(asms) [8]. on the one hand, he claims that our informal descriptions are
vague and ambiguous. on the other hand, b orger does not like the expla-
nations/formalizations in terms of (colored) petri nets. in this section, we
address these comments.
the notion of patterns as a means of categorizing recurring problems
and solutions in a particular domain is generally attributed to christo-
pher alexander [7]. later the concept of patterns was adopted in soft-
ware development, resulting in well-known patterns collections such as the
design patterns by the \gang of four" [11], the business analysis pat-
terns [10], and the enterprise application integration patterns [13]. see http:
//hillside.net/patterns/patterns-catalog for pointers to other col-
lections. all of these collections have in common that they do not impose a
particular language and that the description of the pattern is deliberately
kept informal. when describing a pattern one needs to resort to concrete
examples, e.g., the design patterns book by the \gang of four" [7] includes
many examples using c++ and smalltalk. however, these examples should
not be confused with the actual patterns. we often use petri nets to ex-
plain patterns. however, this does not imply that these petri nets should be
viewed as formal specications of the pattern. moreover, as our evaluations
show, systems not based on petri nets can also support any of the patterns
if they provide the desired functionality. it is quite ok to formulate pattern
examples in terms of asms, just like they have been formulated in vari-
ous process algebras (e.g. in [14]). however, this does not touch upon the
essence of the workow patterns which are representation independent.
in section 4.2 of [9], b orger argues that (colored) petri nets are un-
suitable \for the practice of bpm". as indicated in [4] and [5], we agree
that petri nets are unsuitable as a business process modeling language for
end users. (this is the reason for developing more suitable notations like
yawl.) however, asms are even less suitable as an end-user language for
modeling processes as they are not graphical and very dierent from main-workow patterns put into context 5
stream languages such as bpmn, uml, epcs, etc. we do not propose petri
nets as an end-user language. instead we use it for:
{clarication: petri nets are graphical, well-known, and widely used.
therefore, it makes sense to illustrate the basic patterns in terms of
small petri net examples.
{semantics: yawl and various workow functionalities (e.g., work dis-
tribution mechanisms) can be formalized in terms of colored petri nets.
moreover, using cpn tools such models are directly executable and can
be used for analysis (simulation and state-space exploration).
{analysis: petri nets allow for dierent types of analysis. not just model
checking but also for various linear-algebraic techniques (invariants and
the marking equation), markov analysis, simulation, etc.
clearly, many properties are undecidable unless rigorous abstractions are
used. however, there is a large body of knowledge on analyzing workows
using petri nets. a system such as yawl provides support for checking
soundness [12], but other techniques in areas such as process mining [1] and
simulation [15] have been developed to support specic types of analysis
relevant for the eld of bpm. such dedicated techniques do not exist for
asms. in his paper, b orger refers to work on \software product lines" for
solutions. however, he is not very clear about this as it is just a side remark
in the four page discussion on the \unsuitability" of petri nets.
4 make things as simple as possible, but not simpler
in [12] we discuss the semantics of yawl and in the phd thesis of nick
russell [16] a formalization of yawl's control-ow, data, and resource per-
spectives is given in terms of colored petri nets. the formal model of yawl
can be executed using cpn tools. b orger complains that the cpn tools
model is not shown in [12]. the model is indeed large: 55 pages, 480 places,
and 138 transitions. however, this model covers all three aforementioned
perspectives and also the interactions between these perspectives. it is ab-
surd to think that another formalization technique like asms will suddenly
make things simple. the cpn tools model describes many essential and
complex mechanisms.
egon b orger seems to advocate a \silver bullet formalism" that will
make things simple and manageable. there is denitely room for improve-
ment. however, making such claims without having specied or imple-
mented a wfm system that is able to support a reasonable number of
patterns covering the control-ow, data, and resource perspectives is not
very convincing.
5 need for empirical validation
in section 3.1 of [9], b orger writes \in fact there is no statistical underpin-
ning showing how frequently which patterns appear in real-life business pro-6 w.m.p. van der aalst, a.h.m. ter hofstede
cesses. experimental data like that produced for bpmn constructs in [61]
should have been put in place to validate the pattern selection." we acknowl-
edge the importance of empirical validation. however, the workow patterns
have been validated. first of all, the patterns are based on a detailed analysis
of various wfm/bpm systems. moreover, practical experiences obtained
through a multitude of evaluations resulted in reformulations and further
renements of the patterns. systems such as staware, websphere mq
workow, flower, cosa, iplanet, sap workow, filenet, jbpm, open-
wfe, enhydra shark, websphere integration developer and oracle bpel,
and languages/standards such as bpmn, xpdl, bpel, uml and epcs
have been analyzed using the patterns. moreover, we have been interact-
ing with workow vendors, consultants, end-users and analysts regarding
the patterns. second, we looked at the frequencies of patterns in real-life
projects. see for example the work done by kristiaan de vries and oscar
ommert [20,21]. under the supervision of the rst author they evaluated
ve workow projects conducted by atos/origin to get quantitative data
about the frequency of patterns. each of these projects involved multiple
processes for which the number of activities ranged from dozens to hun-
dreds. the systems eastman enterprise workow, staware, and domino
workow were used in these projects. empirical ndings showed that in
many of atos/origin's projects workow designers were forced to adapt
the process or had to resort to spaghetti-like diagrams or coding because
particular patterns were not supported by the wfm system. the project
also showed a positive correlation between the patterns being used and
the patterns that were well supported, e.g., the processes developed using
staware had much more parallelism than the processes developed using
eastman enterprise workow. this example shows that patterns tend to
be used frequently if they are supported well. this indicates that process
design is inuenced by patterns support.
a more elaborate empirical validation of the workow patterns is wel-
come. moreover, we would also like to refer to our work on process min-
ing [1]. in this work we analyze processes based on event logs, i.e., we dis-
cover, monitor and improve real processes (i.e., not assumed processes) by
extracting knowledge from event logs readily available in today's informa-
tion systems. experience obtained by applying process mining in over 100
organizations shows that processes are often much more involved than what
people would like to think. typically, 80% of the process instances can be
described by a rather simple process model. however, to model the remain-
ing 20% more advanced patterns are needed.
acknowledgements the authors would like to thank all that contributed to the
workow patterns initiative and the development of yawl. in particular nick
russell, nataliya mulyar, bartek kiepuszewski, alistair barros, petia wohed, and
michael adams.workow patterns put into context 7
references
1. w.m.p. van der aalst. process mining: discovery, conformance and en-
hancement of business processes . springer-verlag, berlin, 2011.
2. w.m.p. van der aalst, a.p. barros, a.h.m. ter hofstede, and b. kie-
puszewski. advanced workow patterns. in o. etzion and p. scheuermann,
editors, 7th international conference on cooperative information systems
(coopis 2000) , volume 1901 of lecture notes in computer science , pages
18{29. springer-verlag, berlin, 2000.
3. w.m.p. van der aalst and k.m. van hee. workow management: models,
methods and systems (in dutch) . academic service, schoonhoven, 1997.
4. w.m.p. van der aalst and a.h.m. ter hofstede. workow patterns: on the
expressive power of (petri-net-based) workow languages. in k. jensen,
editor, proceedings of the fourth workshop on the practical use of coloured
petri nets and cpn tools (cpn 2002) , volume 560 of daimi , pages 1{20,
aarhus, denmark, august 2002. university of aarhus.
5. w.m.p. van der aalst and a.h.m. ter hofstede. yawl: yet another work-
ow language. information systems , 30(4):245{275, 2005.
6. w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. bar-
ros. workow patterns. distributed and parallel databases , 14(1):5{51, 2003.
7. c. alexander. a pattern language: towns, building and construction . ox-
ford university press, 1977.
8. e. b orger. modeling workow patterns from first principles. in c. par-
ent, k.d. schewe, v. storey, and b. thalheim, editors, conceptual modeling
(er 2007) , volume 4801 of lecture notes in computer science , pages 1{20.
springer-verlag, berlin, 2007.
9. e. b orger. approaches to modeling business processes. a critical analysis
of bpmn, workow patterns and yawl. software and systems modeling ,
??(??):??{??, 2012.
10. m. fowler. analysis patterns: reusable object models . addison-wesley, read-
ing, massachusetts, 1997.
11. e. gamma, r. helm, r. johnson, and j. vlissides. design patterns: ele-
ments of reusable object-oriented software . professional computing series.
addison wesley, reading, ma, usa, 1995.
12. a.h.m. ter hofstede, w.m.p. van der aalst, m. adams, and n. russell.
modern business process automation: yawl and its support environment .
springer-verlag, berlin, 2010.
13. g. hohpe and b. woolf. enterprise integration patterns . addison-wesley
professional, reading, ma, 2003.
14. f. puhlmann and m. weske. a look around the corner: the pi-calculus. in
k. jensen and w.m.p. van der aalst, editors, transactions on petri nets and
other models of concurrency ii , volume 5460 of lecture notes in computer
science , pages 64{78. springer-verlag, berlin, 2009.
15. a. rozinat, m. wynn, w.m.p. van der aalst, a.h.m. ter hofstede, and
c. fidge. workow simulation for operational decision support. data and
knowledge engineering , 68(9):834{850, 2009.
16. n. russell. foundations of process-aware information systems . phd thesis,
queensland university of technology, 2007.
17. n. russell, w.m.p. van der aalst, and a.h.m. ter hofstede. workow ex-
ception patterns. in e. dubois and k. pohl, editors, proceedings of the8 w.m.p. van der aalst, a.h.m. ter hofstede
18th international conference on advanced information systems engineer-
ing (caise'06) , volume 4001 of lecture notes in computer science , pages
288{302. springer-verlag, berlin, 2006.
18. n. russell, w.m.p.van der aalst, a.h.m. ter hofstede, and d. edmond.
workow resource patterns: identication, representation and tool sup-
port. in o. pastor and j. falcao e cunha, editors, proceedings of the 17th
conference on advanced information systems engineering (caise'05) , vol-
ume 3520 of lecture notes in computer science , pages 216{232. springer-
verlag, berlin, 2005.
19. n. russell, a.h.m. ter hofstede, d. edmond, and w.m.p. van der aalst.
workow data patterns: identication, representation and tool support. in
l. delcambre, c. kop, h.c. mayr, j. mylopoulos, and o. pastor, editors,
24nd international conference on conceptual modeling (er 2005) , volume
3716 of lecture notes in computer science , pages 353{368. springer-verlag,
berlin, 2005.
20. k. de vries and o. ommert. advanced workow patterns in practice (1):
experiences based on pension processing (in dutch). business process mag-
azine , 7(6):15{18, 2001.
21. k. de vries and o. ommert. advanced workow patterns in practice (2): ex-
periences based on judicial processes (in dutch). business process magazine ,
8(1):20{23, 2002.
22. p. wohed, n.c. russell, a.h.m. ter hofstede, b. andersson, and w.m.p. van
der aalst. patterns-based evaluation of open source bpm systems: the
cases of jbpm, openwfe, and enhydra shark. information and software
technology , 51(8):1187{1216, 2009.