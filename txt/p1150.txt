conformance checking approximation using
simulation
mohammadreza fani sani1, juan j. garza gonzalez1, sebastiaan j. van zelst2,1, and wil m.p . van der aalst1,2
1-process and data science (pads) chair, rwth-aachen university, germany
2-fraunhofer fit, birlinghoven castle, sankt augustin, germany
email:{fanisani, s.j.v.zelst, wvdaalst }@pads.rwth-aachen.de
abstract —conformance checking techniques are used to com-
pute to what degree a process model and real execution data
correspond to each other . in recent years, alignments haveproven to be useful for calculating conformance statistics. mostalignment techniques provide an exact conformance value. how-ever, in many applications, it sufﬁces to have an approximatedalignment value. speciﬁcally, for large event data and usingstandard hardware, current alignment techniques are time-consuming and sometimes intractable. this paper proposes touse simulated behaviors of process models to approximate theconformance checking value. to simulate a process model, weexploit the behavior in the given event data. this method isindependent from the process model notation and provides upperand lower bounds for the approximated alignment value. weassess the quality of our approximations and compare it toexisting approximation techniques. the experiments on real eventdata show that using the proposed method, it is possible to achievesigniﬁcant performance improvements.
index t erms—process mining, conformance checking ap-
proximation, alignment, simulation, edit distance
i. i ntroduction
conformance checking aims to investigate the conformity
of a discovered/designed process model w.r.t., real process
executions [1]. conformance checking techniques are usedto detect deviations and to measure how accurate a processmodel is. it is possible to apply this branch of techniques toassess both event data and the process model. alignments [2]were developed with the concrete goal to describe and quantifydeviations in a non-ambiguous manner. computing alignmentshas rapidly turned into the de facto standard conformancechecking technique [3]. moreover, alignments serve as abasis for other process mining methods that link event datato process models, e.g., they support performance analysis,decision mining [4], business process model repair [5], andprediction techniques. however, alignment computations maybe time-consuming for real large event data.
in some scenarios, the diagnostic information that is pro-
duced by alignments is not required and we simply need anobjective measure of model quality to compare process mod-els, i.e., the alignment value. moreover, in many applications,it is required to compute alignment values several times. forexample, if we aim to discover an appropriate process modelfrom event data, it is required to discover several process mod-els using various process discovery algorithms with differentsettings, and, measure how each process model ﬁts, w.r.t., theevent data, i.e., by applying alignment techniques. as normalalignment methods take a considerable time for large real eventdata, analyzing many candidate process models is impractical.therefore, by decreasing the alignment computation time, itis possible to consider more candidate process models in alimited time. thus, by having an approximated conformancevalue, we are able to ﬁnd a suitable process model faster. byproviding bounds, we guarantee that the accurate alignmentvalue does not exceed a range of values, and, consequentlywe determine if it is required to do further analysis or not,which saves a considerable amount of time. thus, it is valuableto have a quick approximated conformance value and it isexcellent worth to let users adjust the level of approximation.
it is shown in [6] that using the edit distance function,
a subset of model behaviors can be used instead of theprocess model for conformance approximation. it suggests tosample some behaviors from the event log and approximatetheir alignments. in this paper, we extend the previous workby proposing to use process model simulation (i.e., someof its possible executable behaviors) to create a subset ofprocess model behaviors. the core idea of this paper is tohave simulated behaviors close to the recorded behaviors inthe event log. moreover, we provide bounds for the actualconformance value. using the proposed method, users are ableto adjust the amount of process model behaviors consideredin the approximation, which affects the computation timeand the accuracy of alignment values and their bounds. asthe proposed method just uses the simulated behaviors forconformance approximation, it is independent of any processmodel notation. because we use the edit distance function anddo not compute any alignment, even if there is no referenceprocess model and just some of the correct behaviors of theprocess (e.g., some of the valid variants) are known, theproposed method is able to approximate the conformancevalue. the method additionally returns problematic activities,based on their deviation rates.
we implemented the proposed method using both the
prom [7] and rapidprom [8] platforms. moreover, we appliedit to several large real event data and process models. wealso compared our approach with the state-of-the-art alignmentapproximation method [6]. the results show that the proposedsimulation method improves the performance of the confor-mance checking process while providing approximations closeto the actual values.the remainder of this paper is structured as follows. in sec-
tion ii, we discuss related work. section iii deﬁnes preliminary
notation. we explain the proposed method in section iv andevaluate it in section v. section vi concludes the paper andpresents some future work.
ii. r
ela ted work
in this section, we explain some conformance checking
and simulation techniques in the process mining domain. fora complete overview of conformance checking techniquesin process mining, we refer to [9] and [10]. early workin conformance checking uses token-based replay [11]. thistechnique replays a trace of executed events from the eventlog on a petri net and adds missing tokens if transitionsare not able to ﬁre. after the replay phase, the conformancestatistic is computed based on remaining and missing tokens.alignments were introduced in [12] and have rapidly devel-oped into the standard conformance checking technique [3].in [13] and [14], decomposition techniques are proposed foralignment computation. applying decomposition techniquesgenerally improves computation time. these techniques usethe divide-and-conquer paradigm. however, these techniquesare primarily beneﬁcial when there are lots of unique activitiesin the process [15]. the authors in [3] and [16] also propose toincrementally compute preﬁx-alignments, and providing real-time conformance checking for event data streams. recently, ageneral stochastic conformance checking method is proposedin [17] which requires a stochastic process model that is notavailable in many cases.
some research has been done to approximate the alignment
value. [18] uses deep learning to approximate alignment statis-tics. moreover, a recursive general approach for approximatingthe alignment, i.e., computation of near-optimal alignments,has been proposed in [19]. moreover, [20] uses a statisticaltrace sampling approach that approximates the conformancevalue without proving bounds for the actual alignment value.the authors of [21] suggest a conformance approximationmethod that applies relaxation labeling methods to a par-tial order representation of a process model. similar to theprevious method, it does not provide any guarantee for theapproximated value. furthermore, it needs to preprocess theprocess model each time. finally, [6] recommends using asubset of model behaviors for conformance approximation andbounds for the actual value. it suggests applying the alignmenttechnique for some traces to build the subset of model behav-iors. in this paper, we propose a guided simulation method tobuild the subset of model behavior to generate behaviors thatare closer to recorded behaviors in the event data. unlike manyconformance checking methods, this method is independent ofprocess model notation and considers a process model as a setof possible behaviors.
different approaches to simulation in process mining have
been proposed. these approaches are mostly at an instancelevel, i.e., a detailed level such as the framework presentedin [22], which uses the process detailed information to createa cpn model for simulation. moreover, [23] recommends anapproach to simulate an event log based on a given (stochastic)process model. in [24], a simulation approach to simulatebusiness process models that uses information in event logsis proposed. another direction of the simulation in processmining is an aggregated level simulation, e.g., [25], in whichthe system dynamics modeling technique is introduced for“what-if” analysis in processes.
iii. p
reliminaries
in this section, we brieﬂy introduce basic process mining
and, speciﬁcally, conformance checking terminology and no-tations that ease the readability of this paper.
given a set x, a multiset boverx is a function
b:x→n
≥0that allows certain elements of xto appear
multiple times. we write a multiset as b=[ek1
1,ek2
2,...,eknn],
where for 1≤i≤n,w eh a v eb (ei)=kiwithki∈n≥0.i fki=1,
we omit its superscript, and if for some e∈xwe haveb(e)=0 ,
we omit it from the multiset notation. b={e∈x|b(e)>0}is
the set of unique elements present in the multiset. the set ofall multisets over a set xis written as b(x).
a sequence of length nover members of set xis a function
σ:{1,2,...,n}→x which deﬁnes the occurrence order of
elements of set x. we show a sequence using the notation
σ=/angbracketlefts
1,...,sn/angbracketrightwheresi=σ(i), for1≤i≤n. we denote with
si∈σthatsiis an element of the sequence σ. moreover, the
set of all possible sequences over set xis shown by x∗.
the empty sequence is denoted with /epsilon1. furthermore, |σ|indi-
cates the length of sequence σ, e.g.,|/angbracketlefta,d,d,e/angbracketright|=4. function
hd:x∗×n≥0→x∗, returns the “head” of a sequence, i.e.,
given a sequence σ∈x∗,hd(σ,k)=/angbracketlefts1,s2,..,sk/angbracketright, i.e., the se-
quence of the ﬁrst kelements of σ.i fk≥|σ|, thenhd(σ,k)=σ .
symmetrically, tl:x∗×n≥0→x∗returns the “tail” of a se-
quence and is deﬁned as tl(σ,k)=/angbracketleftsn−k+1,sn−k+2,...,sn/angbracketright,
i.e., the sequence of the last kelements of σ.i fk≥|σ|,
tl(σ,k)=σ . we deﬁne that hd(σ,0)=tl(σ,0)=/epsilon1. the concate-
nation of two sequences σ1andσ2with length mandnis
sequence σ3=σ1·σ2with length m+nwhereσ3(i)=σ1(i)for
1≤i≤mandσ3(i)=σ2(i−m) form+1≤i≤m+n. a subse-
quenceσsofσis obtained by removing |σ|−|σs|elements of
σwhere the result equals σs. for example, /angbracketleftb,d/angbracketright is a subse-
quence of /angbracketlefta,b,c,d,e/angbracketright . moreover, σ/primeis a strict subsequence
of sequence σif there exist σ1andσ2such that σ=σ1·σ/prime·σ2
and we denote it by σ/prime/subsetsqequalσ; furthermore, if σ1=/epsilon1, we say that
σ/primeis a preﬁx of σ.
having two sequences, function ω:x∗×x∗→x∗re-
turns one of the longest common subsequence of them.for example, ω(/angbracketlefta,b,d,e/angbracketright,/angbracketleftc,a,d,f,e/angbracketright )=/angbracketlefta,d,e/angbracketright . finally,
fq:x
∗×x∗→n≥0is a function that returns how many
times in a sequence a subsequence is present. for example,fq(/angbracketleftd,a,d,e/angbracketright ,/angbracketleftd/angbracketright)=2 .
event logs are the starting point of many process mining al-
gorithms. for alignment computation, we just use the control-ﬂow information of the event logs. therefore, we deﬁne anevent log as follows.
deﬁnition 1 (event log): letabe the universe of activities
anda⊆a is a set of activities. an event log is a multiset of
106sequences over a, i.e.,l∈b(a∗). moreover, we refer to each
σ∈las a ”variant ” whereas l(σ)denotes how many traces
of the form σare presented within the event log. moreover,
|l|refers to the number of variants in the event log.
for example, in the event log that is presented in figure 1,
a={a,b,c,d,e },|l|=5, andl(/angbracketlefta,b,e/angbracketright)=2 .
there are many notations to describe the possible behaviors
described by a process model. here, we deﬁne a process modelusing a set of all its possible replayable behaviors as follows.
deﬁnition 2 (process model): letabe the universe of
activities and a⊆a is a set of activities. a process model is
a set of sequences over a, i.e.,m⊆a
∗.
for example, in the process model that is presented in fig-ure 1 in a petri net notation, we have /angbracketlefta,b,d,b,c,e/angbracketright∈m ,
/angbracketlefta,b,e/angbracketright∈m , and/angbracketlefta,b,d,b,e/angbracketright∈m . note that in case of having
an unbounded loop in a process model, set mis inﬁnite.
as we deﬁne event logs and process models as collections
of sequences of activities, we are able to use edit distance andthe optimal alignment functions to compute their alignment.
deﬁnition 3 (edit distance and optimal alignment
cost): leta be a set of activities and σ
l,σm∈a∗
be two traces. /triangle:a∗×a∗→n≥0is a function such that
/triangle(σl,σm)=|σl|+|σm|−2×|ω(σl,σm)|returns the minimal
number of required edits to transform σltoσm. in addition,
we deﬁne δ:a∗×a∗→b(a)×b(a)that returns two multisets
of synchronous and asynchronous moves. synchronous movescorrespond to one of the longest common subsequences ofthe given sequences and asynchronous moves represents theedited activities that are required to transform subsequences.moreover, γ:a
∗×p(a∗)→n≥0is a function that returns the
minimum number of edits to transfer a trace to one of thetraces in a set of traces, i.e., the optimal alignment cost.
for example, /triangle(/angbracketlefta,b,d,b,e /angbracketright,/angbracketlefta,c,d,e/angbracketright)=3 that corresponds
two deletions (i.e., b) and one insertion (i.e., c). therefore,
δ(/angbracketlefta,b,d,b,e/angbracketright ,/angbracketlefta,c,d,e/angbracketright)=([a,d,e] ,[b
2,c]). by using /harpoonupright1and
/harpoonupright2, we retrieve the synchronous and asynchronous moves
respectively. for example, ([a,d,e],[b2,c1])/harpoonupright2=[b2,c]are the
asynchronous moves. note that, there may exist more than one
longest common subsequence for two sequences and the δis
non-deterministic. moreover, for the model that is presentedin figure 1, γ(/angbracketlefta,c,e/angbracketright,m)=1 that corresponds to transfer
/angbracketlefta,c,e/angbracketright to/angbracketlefta,b,c,e/angbracketright∈m or/angbracketlefta,c,b,e/angbracketright∈m . in [6], it is shown
thatγ(σ,m)equal to the optimal alignment cost.
to compute the ﬁtness value of a trace and a model we use
the following equation.
fitness trace(σl,m)=γ(σl,m)
|σl|+ms(1)
in the above equation, ms=m i n
σ∈m(|σ|)is the length of the
shortest trace in the model. to compute the ﬁtness value of anevent log and a process model, we use the following formula.
fitness(l,m )=/summationtext
σ∈ll(σ)×fitness trace(σ,m)
/summationtext
σ∈ll(σ)(2)
figure 1: an example event log, a petri net, and a preﬁx tree.
figure 2: a schematic view of the proposed method.
iv . a pproxima ting alignments using subset of
model beha vior
in this section, we present the proposed conformance ap-
proximation method. we aim to approximate the alignmentvalue without any alignment computation. a schematic viewof this method is shown in figure 2. we ﬁrst analyze theevent log; then, based on the probabilities of subsequences,we provide characteristics of the process model using thesimulation method. afterwards, based on these characteristics,we provide preﬁxes for the alignment approximation. in thefollowing, each stage is explained in more details.
a. event log analysis
in this stage, we traverse the event log to ﬁnd all the activ-
ities and variants in the event log. moreover, we compute the
occurrence probability of different sequences with a speciﬁclength. these probabilities guide the simulation algorithm togenerate model traces close to the available traces in the eventlog. the occurrence probability of a subsequence σ
/prime∈a∗is
computed as follows.
prob(σ/prime,l)=/summationtext
σ∈ll(σ)×fq(σ,σ/prime)
/summationtext
σ∈l(/summationtext
σ”/subsetsqequalσ∧|σ”|=|σ/prime|(l(σ)×fq(σ,σ”))(3)
for example, for the event log that is presentedin figure 1, prob(/angbracketlefta,b,c/angbracketright,l)=
10
10+10+3+3+3+2or
prob(/angbracketlefta,b,c,e/angbracketright,l)=10
10+3+3. by getting the maximum
length of subsequence from the user, we are able to computethe probabilities of them.
b. simulation
the input of the simulation algorithm is a process model
and an event log and it provides a model characterization that
is deﬁned as follows.
deﬁnition 4 (model characterization): letm⊆a
∗be a
process model, a 4-tuple mc=(sl,p k,k,ms)be a model
characterization of m, wheresl⊆m is a subset of model
traces and ms=m i n
σ∈m(|σ|)is the length of the shortest trace in
model m. moreover, pk={hd(σ,i)|σ∈m∧i≤k}is the set
of all preﬁxes in mwith length less or equal to k.
107to simulate the process model, we use a preﬁx tree. in
figure 1 a process model and a part of its preﬁx tree are
shown. we consider sequence σ/primeas a preﬁx of model mif
∃σ∈m∧l∈n≥0(hd(σ,l)=σ/prime).w eu s ep kto show the informa-
tion of the preﬁx tree that contains all the observed preﬁxes.
most process model notations, e.g., bpmn and petri net,
allow us to clarify which activities are executable after theexecution of sequence of activities (i.e., a preﬁx). thus, wedeﬁne preﬁx extension as follows.
deﬁnition 5 (preﬁx extension): letabe a set of
activities and let σ
/prime∈a∗be a sequence of activities
and let m⊆a∗be a process model. the preﬁx ex-
tension function α:a∗×p(a∗)/mapsto →p(a∗)returns the set of
all possible extensions of preﬁx σ/prime. in other words,
α(σ/prime,m)={σ/prime·/angbracketlefta/angbracketright|∃σ∈m(σ/prime·/angbracketlefta/angbracketright=hd(σ,|σ/prime|+1)}.
for example, if m is corresponding to the
process model that is presented in figure 1,α(/angbracketlefta,b/angbracketright,m)={/angbracketlefta,b,c/angbracketright,/angbracketlefta,b,d/angbracketright,/angbracketlefta,b,e/angbracketright}.
the simulation algorithm starts with initializing p={/epsilon1}and
sl={}. at each step, we select one of the non-extended
preﬁxes in pand discover all its possible extensions, i.e.,
α(σ
/prime,m), and append them to p. moreover, if any of the
newly extended preﬁxes are complete trace, we append themtosl. therefore, the updated sets are p=p∪(α(σ
/prime,m))and
sl=sl∪{σ∈α(σ/prime,m)|σ∈m}. note that a preﬁx σ/prime∈pis
non-extended if ∄σ”∈p\{σ/prime}(σ/prime=hd(σ”,|σ/prime|)).
the simulation method is guided to select the preﬁx
with the highest probability according to equation 3.in this regard, for all non-extended preﬁxes in p, the
method computes prob(tl(σ
/prime,l),l), where lindicates the
maximum length of subsequences that is given by theuser. for example, in figure 1, if p={/epsilon1,/angbracketlefta/angbracketright,/angbracketlefta,b/angbracketright,/angbracketlefta,c/angbracketright} ,
we know that /angbracketlefta,b/angbracketrightand/angbracketlefta,c/angbracketright are non-extended preﬁxes.
therefore, the method chooses /angbracketlefta,b/angbracketrightwhich has a higher
probability in the event log. by extending this preﬁx, wehavep={/epsilon1,/angbracketlefta/angbracketright,/angbracketlefta,b/angbracketright,/angbracketlefta,c/angbracketright}∪{/angbracketlefta,b,c /angbracketright,/angbracketlefta,b,d/angbracketright,/angbracketlefta,b,e/angbracketright},
andsl={/angbracketlefta,b,e/angbracketright}.
by having the kvalue, we guarantee that all possible
preﬁxes of the model with length less or equal to kare present
inp
k. the proposed simulation method ﬁnds kbased on the
length of the shortest non-extended preﬁx in p.
we continue the simulation procedure until at least one
of the following conditions is satisﬁed: 1) the number ofsimulated traces, i.e., |sl|reaches to the simulation size, i.e.,
given by the user 2) there exist no non-extended preﬁx in p
which means we could not simulate any new traces 3) havingk≥2×max
σ∈l(|σ|)+msthat indicates all the unseen preﬁxes are
longer than two times of the longest trace in the event log plusthe shortest path in the model. in the next subsection, we provethat if we have the third condition, we are able to ﬁnd theoptimal alignment cost using the simulated traces. moreover,we usep
knotation to show a set of all observed preﬁxes with
length less or equal to kwherepk={σ/prime∈p||σ/prime|≤k}.
to sum up, the output of the simulation stage is
mc=(sl,p k,k,ms). note that any other simulation methodthat generates a model characterization can be used in theproposed approximation method. for example, it is possibleto extend the preﬁx tree in a breadth ﬁrst traversal order.if the simulation method could not guarantee to have a setof complete preﬁxes with a speciﬁc length, we should usep
k={/epsilon1}andk=0 in the corresponding mc .
c. computing alignment cost bounds and approximation
in this stage, for each variant σ∈l, we compute the
bounds and an approximation for its alignment cost basedon a model characterization mc=(sl,p
k,k,ms)which can
be produced by any simulation method. thus, the proposedapproach is independent of the process model notation andthe simulation method to provide bounds and approximationvalues. here, we ﬁrst explain how to compute the upper andlower bounds; then, the approximation method is described.
upper bound: for the upper bound of the alignment cost,
we compute ub(mc,σ)=γ(σ,sl). it is shown in [6] that
γ(σ,sl)≥γ(σ,m)asγreturns the distance of the most
similar trace and sl⊆m. in the following, we prove that if
k≥2×|σ|+m
s, thenγ(σ,sl)returns the optimal alignment.
note that by having pk,sl contains all the model traces with
length less or equal to k.
lemma 1 (maximum required length of preﬁxes):
we know that γ(σ,m)≤|σ|+ms. suppose that σ/prime
m∈m
corresponds to the optimal alignment of σ, i.e.,
γ(σ,m)=/triangle(σ,σ/prime
m). therefore, /triangle(σ,σ/prime
m)≤|σ|+msand
according to deﬁnition 3, |σ|+|σ/prime
m|−2×|ω(σ,σ/prime
m)|≤|σ|+ms.
note that the maximum length of the longest commonsubsequence of two sequences is at most the length of theshorter sequence. thus, in the worst case, |σ
/prime
m|≤2×|σ|+ms.
therefore, the length of the model trace corresponds to theoptimal alignment of trace σshould be less or equals to
2×|σ|+m
s. in other words, if k≥2×max
σ∈l(|σ|)+ms, we re-
turn the actual ﬁtness value using sl.
lower bound: for the lower bound, we use the maximum
value of three values, i.e., lb(mc,σ)=max(lb1,lb2,lb3).
leta/prime⊆a be the set of all activities in the model,
lb1(mc,σ)=|σ|−|σ /harpoonuprighta/prime|whereσ/harpoonuprighta/primeis a projection of se-
quenceσon activities in set a/prime. it means if we have some
activities in the trace that are not present in the model, wecan easily consider them as asynchronous moves. moreover,as discussed in [6], lb
2(mc,σ)=max(m s−|σ /harpoonuprighta/prime|,0)is a
lower bound for the optimal alignment cost that is usefulif the length of the trace is shorter than the shortest pathin the model. note that both lb
1andlb2are independent
from the simulation result. finally, we compute the thirdlower bound as lb
3(mc,σ)=γ(hd(σ,k),pk).a sw eh a v ea l l
possible preﬁxes of model m with length less or equal to
kinpk,lb3computes the minimum number of edits that
is required to have a valid preﬁx for trace σ.a s/epsilon1∈pk,w e
always have 0≤lb3(mc,σ)≤min(k,|σ|). alllb1,lb2andlb3
are valid lower bounds for the actual alignment cost; therefore,we use the highest number to have a tighter bound.
approximation: in both sl and
l, because of the presence
of loops in the process, it is possible that a subsequence is
108table i: result of using the proposed approximation method for the event log that is given in figure 1, using model
characterization mc=({/angbracketlefta,b,e/angbracketright},{/epsilon1,/angbracketlefta/angbracketright,/angbracketlefta,b/angbracketright,/angbracketlefta,c/angbracketright},2,3}.
trace/ event log γ(σ,m)γ(σ,sl ) actual fitness lower bound fitness upper bound fitness approximated fitness frequency
/angbracketlefta,b,c,e/angbracketright 0 1 1.0 0.857 1.0 0.857 10
/angbracketlefta,e/angbracketright 1 1 0.8 0.8 0.8 0.8 4
/angbracketlefta,c,b,d,e/angbracketright 1 2 0.875 0.75 1 0.75 3
/angbracketlefta,b,e/angbracketright 0 0 1 1 1 1 2
/angbracketleftd,e/angbracketright 3 3 0.6 0.4 0.6 0.4 1
l ∼ ∼ 0.921 0.821 0.94 0.821 ∼
present several times in a trace. the repetitive patterns increasethe number of unique behaviors which leads to inaccurateapproximations considering a constant mc . we deﬁne the
repetitive patterns of a sequence as follows.
deﬁnition 6 (repetitive patterns ):letσ∈x
∗be a sequence.
given a non-empty strict subsequence σ/prime/subsetsqequalσ, we call σ/primea
repetitive pattern ifσ/prime·σ/prime/subsetsqequalσ. moreover, we deﬁne function
λ:x∗→p(x∗)that receives a sequence and returns the set of
allrepetitive patterns in it.
for instance, we have λ(/angbracketlefta,d,d,d,d,e/angbracketright )={/angbracketleftd/angbracketright,/angbracketleftd,d/angbracketright} and
λ(/angbracketlefta,f,g,f,g,e /angbracketright)={/angbracketleftf,g/angbracketright}.
to deal with the problem of the existence of repetitive
patterns, we propose to compress sequences and keep onlyone repetition of repetitive patterns. the sequence compressionfunction is deﬁned as follows.
deﬁnition 7 (sequence compression): letσ
/primebe a repet-
itive pattern ofσandσ=σ1·σ/prime..σ/prime·σ2. we say that σcis a
compression ofσbyσ/primeifσc=σ1·σ/prime·σ2·. moreover, we deﬁne
sequence compression functionθ:(x∗\{/epsilon1})×(x∗\{/epsilon1})→x∗
is a function such that θ(σ,σ/prime)=σc.
therefore, if θ(σ,σ/prime)=σc, thenσ/prime/negationslash∈λ(σc). for example,
θ(/angbracketlefta,d,d,d,d,e/angbracketright ,/angbracketleftd/angbracketright)=/angbracketlefta,d,e/angbracketright .
to approximate the alignment cost, we consider both
original and compressed traces of the simulated logand the original event log. therefore, we computeapx(mc,σ)= min
σ”∈{θ(σ,σ/prime)|σ/prime∈λ(σ)}(γ(σ”,sl∪slc)).h o w -
ever, by compressing the traces, it is possible to removesome asynchronous moves which causes to have approxi-mated alignment cost smaller than the lower bound. there-fore, if the computed apx(mc,σ)<lb(mc,σ),w eu s e
apx(mc,σ)=
lb(mc,σ)+ub(mc,σ)
2.
to compute the ﬁtness bounds and approximation for traces,
ub ,apx, and lb values should be used instead of γ(σ,m)
in equation 1, e.g., fitness lb(mc,σ)=ub(mc,σ)
|σ|+ms. to com-
pute the lower bound for the ﬁtness we need to use ub and to
have the ﬁtness upper bound, lb should be used. moreover,
to have ﬁtness bounds and approximation for an event logand a model characterization, we use the weighted average ofvalues for the variants in the event log similar to equation 2,
e.g.,fitness
apx(l,mc)=/summationtext
σ∈ll(σ)×fitness apx(mc,σ)
/summationtext
σ∈ll(σ).
in table i, the computed bounds and the approximated
ﬁtness value for each variant and the overall event log of
figure 1 is given based on having only one simulated trace andk=2, i.e.,mc=({/angbracketlefta,b,e/angbracketright},{/epsilon1,/angbracketlefta/angbracketright,/angbracketlefta,b/angbracketright,/angbracketlefta,c/angbracketright},2,3}. the
approximated ﬁtness is 0.821 and the proposed ﬁtness bounds
are0.94and0.821. by increasing |sl|, we expect to havetable ii: the real event logs that are used in the experiment.artiﬁcial start and end activities are inserted in all the traces.
event log activities# traces# variants#
bpic-2012 [26] 25 13087 4336
bpic-2017 [27] 28 31509 15930
bpic-2018-inspection [28] 17 5485 3190
bpic-2019 [29] 44 251734 11973
hospital-billing [30] 20 100000 1020
rtfm [31] 13 150370 231
sepsis [32] 18 1050 846
more accurate approximations and bounds. furthermore, usingtheδfunction, we ﬁnd the number of asynchronous moves for
each activity which is 1fora,2forb,c, and d, and0fore.
v. e
v alua tion
in this section, we aim to explore the accuracy and the
performance of the proposed method. we ﬁrst explain theimplementation and the experimental setting. thereafter, theexperimental results and a discussion of results are provided.
a. implementation
to apply the proposed conformance approximation method,
we implemented the conformance approximation using sim-
ulation plug-in in the prom framework
1[7]. it takes an
event log and a process model as inputs and returns the
conformance approximation, its bounds, and the deviationrates of different activities. in this implementation, we considera petri net representation. however, other notations can besupported using our proposed method. the given petri net canhave silent transitions or duplicate labels, however, it shouldbe sound. the user is able to adjust the maximum numberof the simulated traces. another parameter of this plug-inis the maximum length of subsequence in computation ofprobabilities according to equation 3.
to apply the method on various event logs with different
parameters, we ported the developed plug-in to rapidprom,
i.e., an extension of rapidminer and combines scientiﬁc
work-ﬂows with a several process mining algorithms [8].
b. experimental setup
we applied the proposed methods on seven different real
event logs. some information about these logs is given in
table ii. to discover models, we used the inductive miner [33]with infrequent thresholds equal to 0.2,0.3,0.5, and0.7.
in the ﬁrst experiment, we compared the proposed method
with the sampling method [6] that generates a subset of model
traces by alignment computation of some traces in the eventlog. here, we use its default setting, i.e., computing alignment
1svn.win.tue.nl/repos/prom/packages/logfiltering and http://www.
promtools.org/doku.php
109table iii: comparison of approximating the conformance checking using the proposed simulation method and the sampling
method that is proposed in [6]. for the sampling method, we selected the 10% of the most frequent variants in the event logs
and for the simulation method, we used |sl|equal to the generated model traces by the sampling method.
of10% of the most frequent variants. however, the generated
model traces using this method could be less than the numberof computed alignments. therefore, we use the simulationmethod with |sl|equal to the number of unique model
behaviors that are generated by sampling method.
in the second experiment, we analyse the effect of changing
the simulation parameters on the accuracy and performanceof the proposed method. therefore, we used the simula-tion method with |sl|equals to 100,500, and1000 and
the subsequence length equals 1,2,3,and4. moreover, in
the last experiment, we compared the proposed simulationmethod, with a random simulation method. in this regard, weused the subsequence length equal to 2 and |sl|equal to
10,50,100,500,1000, and10000 for sepsis event log.
in all the experiments and for all methods, we used one
thread of cpu. moreover, each experiment was repeated fourtimes, since the conformance checking and simulation timesare not deterministic, and the average values are shown. forcomputing the normal conformance checking, we used themethod that is proposed in [34].
to evaluate whether the proposed simulation method is
able to improve the performance of the conformance checkingprocess, we measure pi=
normal conformance time
approximated conformance time. in this
formula, a higher pi value means conformance is computed
in less time. as both approximation methods need a prepro-cessing phase (e.g., traversing the event log and computing asubset of model behaviors), we compute pi considering the
preprocessing time.
the approximation error, i.e., the difference between ap-
proximated ﬁtness value and the actual ﬁtness value showshow the accuracy of approximation that is computed byappxerr =|actualfitness −appxfitness| . also, we mea-
sure the bound width of an approximation by computingboundwidth= ubfitness −lbfitness. a tighter bound
width means we have more accurate bounds.
c. experimental result and discussion
in table iii, we show how different approximation methods
improve the performance of conformance checking. for both
sampling and simulation methods, in most of the cases, wehave improvement in the performance of conformance check-ing (i.e.,pi>1). this improvement for the simulation method
is much higher in all the the cases. it is mainly because,the required time to generate model traces is less than usingalignments. when we have complex process models and largeevent logs, the improvement is higher. however, in these cases,we have a higher approximation error and the provided boundsare not accurate enough. however, the provided bounds forthe conformance value are always worse when the simulationmethod is used. it is because, the sampling method knows theexact conformance values of the 10% of the most frequent
variants. due to a pareto-line distribution a small number ofvariants may account for a large number of traces.
110table iv: analysing the effect of the simulation size on the
approximation time and the accuracy results. here, the averagevalue are shown when the subsequence length for computingprobabilities equals to 2 and imi=0 .2.
the result shows that we are able to have more accurate
approximations using the simulation method speciﬁcally whenwe have more precise process models (that are discoveredusing a higher threshold in the inductive miner) even withjust few simulated traces. note that the corresponding modelbehavior for alignment of several variants may be similar.therefore, the sampling method usually generates fewer modeltraces compared to the number of computed alignments. forexample, for rftm event log and process model that isdiscovered using imi=0. 7, it computed alignments of 24
variants to generate 6model traces.
for some logs, none of the methods are able to provide
accurate bounds (with the applied setting). speciﬁcally, whenthe process model is imprecise, the output of the proposedmethod is not accurate. the simulation of an imprecise processmodel usually generates many behaviors that may be far fromvariants that are in the event log. thus, the provided boundsare far from each other which is a limitation of our method. tohave more accurate results in these cases, we should simulatemore traces that decrease the performance improvement.
in the next experiment, we analyze the effect of the number
of simulated traces on the simulation and approximation timesand the accuracy of the approximation. in this experiment, weconsidered subsequences in equation 3 equals to 2 and usedthe process models with threshold equals to 0,2.
the results of this experiment are shown in table iv. the
results indicate that increasing the size of |sl|increases the
required time for simulation and ﬁnding the distance of themost similar trace (i.e., the approximation time). results showthat for some event logs which have simple structured processmodels, e.g., rtfm, even with 100 simulated traces, we are
able to detect accurate conformance value. moreover, for sometable v: comparison of using the proposed simulation methodwith random simulation technique [6] for sepsis event logwhen the inductive miner with threshold 0.2is used.
event logs, it is not possible to generate the speciﬁed numberof unique model traces, which is the reason that pi does
not decrease as expected. also, by increasing the size of thesimulated traces, we provide more accurate approximationsand bounds. therefore, the user is able to trade-off between theperformance improvement and accuracy of the approximatedvalue by adjusting this parameter. we also conducted a similarexperiment for analyzing the effects of changing the length ofsubsequences when we compute probabilities. we found thatthis parameter has no signiﬁcant impact on the performance ofthe proposed method. however, when |sl|is low, the length
of subsequence affects the accuracy of approximation valueand the provided bounds.
finally, we analyzed the effect of considering log behaviors
in the simulation process on the accuracy of provided confor-mance approximation and its bounds. as the base line, we usedthe random simulation method that was originally proposed
by [35] and used for conformance checking approximation in[6]. the results of this experiment are presented in table vwhich show that the proposed method detects more accurateapproximation and bounds. also, the random sampling methodis faster than our method. it is because there is no need tohave a probability computation in this method and also it maygenerate traces that are already presented in sl.
vi. c
onclusion
in this paper, we proposed an approximation method for
computing conformance values including providing upper andlower bounds based on process model simulation. we considera process model as a set of all possible behaviors than can beexecuted by the process. this assumption allows us to obtainconformance checking results even for the cases that we donot have a descriptive process model. using the simulationmethod, we generate a subset of the model’s behaviors. weguide the simulation method to generate traces that are moresimilar to the recorded behaviors in the event log. we applythese simulated traces for approximating the conformancevalue using the edit distance function. moreover, the methodprovides lower and upper bounds for the approximated valuebased on the seen simulated behaviors.
to evaluate the proposed method, we implemented our
technique using both prom and rapidprom and applied ourimplementation to seven real event logs and 28 discovered
111process models. the results show that the proposed method
is able to decrease the conformance checking computationtime and simultaneously ﬁnd approximated values close to theactual alignment value. we found that when the process modelis imprecise, the accuracy of the approximation degrades.furthermore, experiments show that considering behaviors inthe event log in simulation improves the accuracy of theapproximation value and bounds compared to the case thata process model is simulated randomly.
as future work, we aim to provide a platform in which gives
us qualitative feedback in a faster way. moreover, it is possibleto provide an incremental approximation tool that increases thenumber of simulated traces incrementally and lets the end-userdecide when the accuracy is enough.
a
cknowledgment
we thank the alexander von humboldt (avh) stiftung for
funding this research.
references
[1] w. m. p . van der aalst, process mining - data science in action, second
edition. springer berlin heidelberg, 2016.
[2] a. adriansyah, j. munoz-gama, j. carmona, b. van dongen, and
w. m. p . van der aalst, “alignment based precision checking,” in
international conference on business process management. springer,2012, pp. 137–149.
[3] s. j. van zelst, a. bolt, m. hassani, b. f. van dongen, and w. m.
van der aalst, “online conformance checking: relating event streams toprocess models using preﬁx-alignments,” international journal of data
science and analytics, pp. 1–16, 2017.
[4] m. de leoni and w. m. van der aalst, “data-aware process mining:
discovering decisions in processes using alignments,” in proceedings of
the 28th annual acm symposium on applied computing. acm, 2013,pp. 1454–1461.
[5] d. fahland and w. m. p . van der aalst, “model repair—aligning
process models to reality,” information systems, vol. 47, pp. 220–243,
2015.
[6] m. fani sani, s. j. van zelst, and w. m. p . van der aalst,
“conformance checking approximation using subset selection andedit distance,” in advanced information systems engineering -
32nd international conference, caise 2020, grenoble, france, june8-12, 2020, proceedings, 2020, pp. 234–251. [online]. available:https://doi.org/10.1007/978-3-030-49435-3
15
[7] w. m. p . van der aalst, b. van dongen, c. w. g ¨unther, a. rozinat,
e. v erbeek, and t. weijters, “prom: the process mining toolkit,” bpm
(demos), vol. 489, no. 31, 2009.
[8] w. m. p . van der aalst, a. bolt, and s. van zelst, “rapidprom: mine
y our processes and not just y our data,” corr, vol. abs/1703.03740,
2017.
[9] m. elhagaly, k. drvoderi ´c, r. g. kippers, and f. a. bukhsh, “evolution
of compliance checking in process mining discipline,” in 2019 2nd
international conference on computing, mathematics and engineeringtechnologies (icomet). ieee, 2019, pp. 1–6.
[10] j. carmona, b. van dongen, a. solti, and m. weidlich, conformance
checking. springer, 2018.
[11] a. rozinat and w. m. van der aalst, “conformance checking of
processes based on monitoring real behavior,” information systems,
vol. 33, no. 1, pp. 64–95, 2008.
[12] w. m. p . van der aalst, a. adriansyah, and b. f. van dongen,
“replaying history on process models for conformance checkingand performance analysis,” wiley interdiscip. rev. data min. knowl.
discov., vol. 2, no. 2, pp. 182–192, 2012. [online]. available:https://doi.org/10.1002/widm.1045
[13] w. m. van der aalst, “decomposing petri nets for process mining: a
generic approach,” distributed and parallel databases, vol. 31, no. 4,
pp. 471–507, 2013.
[14] j. munoz-gama, j. carmona, and w. m. van der aalst, “single-entry
single-exit decomposed conformance checking,” information systems,
vol. 46, pp. 102–122, 2014.[15] h. m. w. v erbeek, w. m. p . van der aalst, and j. munoz-gama, “divide
and conquer: a tool framework for supporting decomposed discoveryin process mining,” comput. j., vol. 60, no. 11, pp. 1649–1674, 2017.
[online]. available: https://doi.org/10.1093/comjnl/bxx040
[16] d. schuster and s. j. van zelst, “online process monitoring using
incremental state-space expansion: an exact algorithm,” in bpm
2020, proceedings, ser. lecture notes in computer science. springer,2020. [online]. available: https://sebastiaanvanzelst.com/wp-content/uploads/2020/06/2020
bpm schuster zelst incremental alignments.pdf
[17] s. j. j. leemans and a. polyvyanyy, “stochastic-aware conformance
checking: an entropy-based approach.”
[18] t. nolle, a. seeliger, n. thoma, and m. m ¨uhlh ¨auser, “deepalign:
alignment-based process anomaly correction using recurrent neural net-works,” in international conference on advanced information systems
engineering. springer, 2020, pp. 319–333.
[19] f. taymouri and j. carmona, “a recursive paradigm for aligning
observed behavior of large structured process models,” in international
conference on business process management. springer, 2016, pp.197–214.
[20] m. bauer, h. van der aa, and m. weidlich, “estimating process
conformance by trace sampling and result approximation,” pp. 179–197, 2019.
[21] l. padr ´o and j. carmona, “approximate computation of alignments
of business processes through relaxation labelling,” in international
conference on business process management. springer, 2019, pp.250–267.
[22] a. rozinat, m. t. wynn, w. m. p . van der aalst, a. h. m. ter
hofstede, and c. j. fidge, “workﬂow simulation for operationaldecision support,” data knowl. eng., vol. 68, no. 9, pp. 834–850,
2009. [online]. available: https://doi.org/10.1016/j.datak.2009.02.014
[23] a. rogge-solti, r. s. mans, w. m. p . van der aalst, and m. weske,
“improving documentation by repairing event logs,” in ifip working
conference on the practice of enterprise modeling. springer, 2013,pp. 129–144.
[24] m. camargo, m. dumas, and o. g. rojas, “automated discovery
of business process simulation models from event logs,” vol.abs/1910.05404, 2019. [online]. available: http://arxiv.org/abs/1910.05404
[25] m. pourbafrani, s. j. van zelst, and w. m. p . van der aalst,
“scenario-based prediction of business processes using systemdynamics,” in on the move to meaningful internet systems:
otm 2019 conferences - confederated international conferences:coopis, odbase, c&tc 2019, rhodes, greece, october 21-25, 2019, proceedings, 2019, pp. 422–439. [online]. available:https://doi.org/10.1007/978-3-030-33246-4
27
[26] v an dongen, b.f. (boudewijn), “bpi challenge 2012,”
2012. [online]. available: https://data.4tu.nl/repository/uuid:3926db30-f712-4394-aebc-75976070e91f
[27] v an dongen, b.f., “bpic 2017. eindhoven university of
technology,” 2017. [online]. available: https://doi.org/10.4121/uuid:5f3067df-f10b-45da-b98b-86ae4c7a310b
[28] v an dongen, b.f. (boudewijn) and borchert, f. (florian),
“bpi challenge 2018,” 2018. [online]. available: https://data.4tu.nl/repository/uuid:3301445f-95e8-4ff0-98a4-901f1f204972
[29] v an dongen, b.f. (boudewijn), “bpi challenge 2019,”
2019. [online]. available: https://data.4tu.nl/repository/uuid:d06aff4b-79f0-45e6-8ec8-e19730c248f1
[30] f. mannhardt, “hospital billing-event log,” eindhoven university of
technology. dataset, pp. 326–347, 2017.
[31] m. de leoni and f. mannhardt, “road trafﬁc ﬁne management process,”
eindhoven university of technology. dataset, 2015.
[32] f. mannhardt, “sepsis cases-event log. eindhoven university of
technology,” 2016. [online]. available: https://doi.org/10.4121/uuid:915d2bfb-7e84-49ad-a286-dc35f063a460
[33] s. j. leemans, d. fahland, and w. m. p . van der aalst, “discovering
block-structured process models from event logs containing infre-quent behaviour,” in bpi, 2014, pp. 66–78.
[34] b. f. van dongen, “efﬁciently computing alignments - algorithm and
datastructures,” in business process management workshops - bpm
2018 international workshops, sydney, nsw, australia, september 9-14, 2018, revised papers, 2018, pp. 44–55.
[35] a. rogge-solti and m. weske, “prediction of business process durations
using non-markovian stochastic petri nets,” vol. 54, 2015, pp. 1–14.[online]. available: https://doi.org/10.1016/j.is.2015.04.004
112