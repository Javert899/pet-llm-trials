process and deviation exploration with
inductive visual miner
sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
eindhoven university of technology, the netherlands
fs.j.j.leemans, d.fahland, w.m.p.v.d.aalst g@tue.nl
abstract process mining aims to extract information from recorded
process data, which can be used to gain insights into the process. this
requires applying a discovery algorithm and settings its parameters, after
which the discovered process model should be evaluated. both steps may
need to be repeated several times until a satisfying model is found; we
refer to this as process exploration . existing commercial tools usually do
not provide models having executable semantics, thereby disallowing for
accurate map evaluation, while most academic tools lack features and by
the repetitive nature of process exploration, their use is tedious. in this
paper, we describe a novel process exploration tool: the inductive visual
miner . it aims to bridge this gap between commercial and academic
tools, by combining the executable semantics of academic tools with
the exploration support of commercial tools. it also adds animation and
deviation visualisation capabilities.
keywords: process mining, process exploration, deviation analysis
1 process exploration
to gain insights in business processes based on factual knowledge, recorded event
data can be analysed using process mining. process mining aims to extract in-
formation from recorded process data, stored in an event log, and starts with
discovering a process model from the event log. however, many process discov-
ery algorithms exist, their parameters have to be set, and the question at hand
might require to focus on specic parts of the event log. the implications of these
choices are, although well-studied for academic approaches, unclear for the av-
erage user, which makes it dicult to obtain a model that is suitable to answer
the question at hand. in this paper we focus on process exploration , which is the
process of repeatedly trying settings until a satisfactory model is discovered [4].
the rst step to take in process exploration is to select a process discovery
algorithm and to set its parameters. moreover, the scope of the exploration needs
to be set by applying all kinds of lters and choosing a perspective, e.g. one can
focus on the control ow or resource perspective.2 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
set scope
discover 
process map evaluate
process mapuse
process map
figure 1: exploration cycle.in the second step of the exploration
cycle, one needs to apply the algorithm in
the selected scope to the event log to ob-
tain a process model. before conclusions
can be drawn and insights can be gained,
the model should be evaluated. for in-
stance, compliance related questions, such
as whether the four-eyes principle was ad-
hered to, can only be answered if the model represents a large part of the be-
haviour in the event log, and future related questions should only be answered
using models that are likely able to represent future behaviour. evaluation of a
model with respect to an event log can only be done accurately if the behaviour
that the model allows is well-dened, i.e. if it has executable semantics, and
dierent parts of the model might have dierent problems.
often, general questions, such as what a process looks like, lead to more
specic questions such as where in the process delays or deviations occur, or to
questions that need to be answered using other perspectives on the event log. or,
the evaluation shows that the question cannot be answered with the discovered
process model. then, the parameters need to be set again and a new model must
be discovered; process exploration is a highly iterative process.
after a user has found a suitable model, that model can be used in for instance
automatic enactment of models in systems [5], in automatic prediction [7] and in
compliance checking [6]. the full process exploration cycle is shown in figure 1.
all of these uses for process models require that the model can be processed
automatically, for which it needs to have executable semantics.
current commercially available process exploration tools oer plenty of op-
tions to set the scope of the exploration, but usually do not produce models
having executable semantics, which thus cannot be used for automated evalua-
tion or further use. there is plethora of academic tools available to set the scope
of the exploration, to discover a process model and to evaluate it, but given the
nature of process exploration, using them iteratively is tedious. in this paper,
we introduce a tool, inductive visual miner (ivm), that aims to bridge this gap
between commercial and academic tools. it supports the steps of process explo-
ration by chaining existing academic tools and streamlining their use. moreover,
it improves on evaluation by a new notation and the addition of animation and
quick node selection ltering. thus far, such capabilities only existed for tools
having no or just weak semantics or without formal guarantees (fuzzy miner,
disco, bpm jone, celonis, perceptive, etc.).
ivm has been implemented as a plug-in of the prom framework, which can be
obtained by installing the prom nightly build from http://promtools.org and,
using the prom package manager, installing the plug-in inductive visual miner.
example event logs can be obtained from http://www.processmining.org/
logs/start ; a screencast is available at http://vimeo.com/user29103154/
inductivevisualminer .inductive visual miner 3
in the remainder of this paper, we explain the implementation of ivm, high-
light the deviation visualisation and give an example. for a detailed comparison
with existing exploration approaches, please refer to [4].
2 inductive visual miner: implementation
the architecture of ivm resembles a chain of analysis and visualisation tasks,
shown in figure 2. to encourage exploration, a user can change any parameter
at any time. ivm will ensure that the current computation is discarded and the
chain is restarted from the rst task that is inuenced by the parameter change.
for instance, if the user selects or deselects a node, only the tasks `lter node
selection' and `animate' are redone. as especially the align task can take some
time, intermediate visual results are shown to the user until the next task is
nished.
/f_ilter
node selection/f_ilter
activitiesdiscover align
activity thresholdmodel
noise threshold selected nodesanimated model enriched model highlighted model
animateprepare
log
perspective
figure 2: chain of tasks, their parameters (bottom) and their visual results (top).
if a user changes a parameter, the necessary tasks restart immediately.
in the prepare log task, the events in the log are classied using the provided
perspective classier. next, in the lter activities task, given a threshold value,
the most-frequent activities are kept, the events of other activities are ltered
out. the inductive miner - infrequent (imi) [3] discovery algorithm is applied
in the discover task. imi takes as an input parameter the amount of noise l-
tering to be applied to paths and produces a process tree. in the align task, the
traces of the event log are aligned to nd the best matching runs through the
model (needed in case of deviations between model and log) [1]. this provides
the information needed to enrich the model with information how often model
elements were executed in the event log. the lter node selection task lters the
aligned traces to keep only those that go through a selected node. the nal task,
animate , computes when traces passed model elements; this information is used
to show a quick animated preview of traces in the log onto the model1. if the
log contains no timestamps, random timestamps are inserted for demonstration
purposes.
once the model is available, it can be exported to prom for further analysis,
both as a petri net and as a process tree; a user can perform its own evaluation
without waiting for the evaluation of ivm to nish. at any point during the
exploration, the model can be saved as bitmap (png) and vector (pdf, svg) image
formats. the full animation of the complete log can be exported to bitmap (avi)
and vector (svg) based movie formats once it is computed.
1at time of writing, we limited the quick preview to 50 traces for performance reasons.4 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
1c
7 1
figure 3: model with the result of
the align task. the edge circumvent-
ing c denotes a model move; the
self-edge on the right a log move.deviations. deviations are a crucial part
of the evaluation: they show precisely
what parts of the model deviate with
respect to the log. deviations are visu-
alised to show shich parts of the model t
well and which parts do not. this is im-
portant for drawing reliable conclusions.
two types of deviations have been identi-
ed [1]: if a trace contains an event that is
not allowed by the model, it is a log move ;
if the model requires an event that is not
present in the trace, it is a model move . log and model moves are identied
by the align task, that chooses a run through the process model such that the
number of such deviating moves is minimal. as shown in figure 3, ivm visualises
both of them using dashed red edges; such an edge that circumvents an activity
represents a model move, while a self-edge represents a log move.
example. figure 4 shows the initial model with default values for all parameters.
looking at this model, the question rose what the happy ow of the process
was, i.e. the most frequently taken path. after a few iterations, parameters were
settled: using only the 50% most frequent activities and applying noise ltering
of 20%, a happy ow of 6 activities was uncovered. before exporting this model
for further analysis, the deviation visualisation was turned on, resulting in the
model shown in figure 4b. this shows that the fourth and fth activity are often
skipped.
(a) default parameters.
(b) after a few iterations; with deviations and animation.
figure 4: screenshot of ivm applied to `a' activies of [2]; default parameters.inductive visual miner 5
3 conclusion
in this paper, we discussed the cycle of process exploration, consisting of re-
peatedly setting parameters, discovering a process model and evaluating it. we
identied a gap between existing commercial and academic process exploration
tools: commercial tools usually do not provide models having executable seman-
tics, thereby disallowing for accurate map evaluation, while most academic tools
lack features such as seamless zooming and animation, thus do not support the
repetitive nature of process exploration well.
we introduced a process exploration tool, inductive visual miner (ivm), that
aims to bridge this gap. when started, ivm immediately applies a chain of
analysis and visualisation tasks to show the user not only a model, but also the
traces of the event log animated on it, and where the log and model deviate from
one another. ivm encourages the user to interact by enabling setting parameters
at anytime: computations will be restarted as necessary in the background. ivm
is not as feature-rich as some of the commercial tools, but shows that it is
possible to use powerful techniques with formal guarantees in a user-friendly
package. we hope that ivm will inspire commercial vendors to consider models
with executable semantics and support deviation analysis. extensions to ivm
can be made in all tasks, for instance other process tree discovery algorithms
can be plugged in instead of imi.
in the future, we'd like to include approximation algorithms to compute the
alignments in order to speed it up. to allow for even better evaluation, several
extensions are possible, such as global quality measures (tness, precision and
generalisation) and identication of traces in the animation. furthermore, several
other lters such as lters on specic activity, timestamp, resource and on data
could be included to give a user more freedom in setting the scope.
references
1. adriansyah, a.: aligning observed and modeled behavior. ph.d. thesis, eindhoven
university of technology (2014)
2. van dongen, b.: bpi challenge 2012 dataset (2012), http://dx.doi.org/10.4121/
uuid:3926db30-f712-4394-aebc-75976070e91f
3. leemans, s., fahland, d., van der aalst, w.: discovering block-structured process
models from event logs containing infrequent behaviour. in: business process man-
agement workshops. pp. 66{78 (2013)
4. leemans, s., fahland, d., van der aalst, w.: exploring processes and deviations.
in: business process management workshops (2014), to appear
5. meyer, a., pufahl, l., fahland, d., weske, m.: modeling and enacting complex data
dependencies in business processes. in: bpm. lecture notes in computer science,
vol. 8094, pp. 171{186. springer (2013)
6. ramezani, e., fahland, d., van der aalst, w.: where did i misbehave? diagnostic
information in compliance checking. in: bpm. lecture notes in computer science,
vol. 7481, pp. 262{278. springer (2012)
7. wynn, m., rozinat, a., van der aalst, w., ter hofstede, a., fidge, c.: process
mining and simulation. in: modern business process automation, pp. 437{457.
springer (2010)