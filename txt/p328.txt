supporting the bpm life-cycle with filenet
mariska netjes, hajo a. reijers, wil m.p. van der aalst
eindhoven university of technology, department of technology management,
po box 513, nl-5600 mb eindhoven, the netherlands
m.netjes@tm.tue.nl
abstract. business process management (bpm) systems provide a broad
range of facilities to enact and manage operational business processes.
ideally, these systems should provide support for the complete bpm
life-cycle: (re)design, conﬁguration, execution, control, and diagnosis of
processes. in the research presented, we evaluate the support provided
by the filenet p8 bpm suite, which is consistently ranked as one of the
leading commercial bpm systems. taking realistic business scenarios as
starting point, we completed a full pass through the bpm cycle with
several tools from the filenet p8 bpm suite. we checked whether the
expected support was provided by these tools and we also tested their
interoperability. the outcome of our evaluation is that although strong
support exists for the conﬁguration, execution and control phase, process
diagnosis and process redesign receive limited support. interoperability
exists between all phases, except between the diagnosis and the design
phase.
keywords : business process management, workﬂow technology, business process
simulation, business process intelligence, filenet.
1 introduction
business process management (bpm) systems can be seen as successors of work-
ﬂow management (wfm) systems, which became popular in the mid-nineties.
however, already in the seventies people were working on oﬃce automation sys-
tems which are comparable with today’s wfm systems. consider, for example,
the oﬃcetalk system developed by ellis et al. at xerox that was already able
to support administrative processes based on petri-net-based speciﬁcations of
procedures [6]. today, many wfm systems are available [2,11,13,14]. the core
functionality of these systems can be described as the ability to support an oper-
ational business process based on an explicit process model , i.e., automating the
“ﬂow of work” without necessarily automating individual activities.
recently, wfm vendors started to position their systems as bpm systems.
we deﬁne bpm as follows: supporting business processes using methods, tech-
niques, and software to design, enact, control, and analyze operational processes
involving humans, organizations, applications, documents and other sources ofinformation [4]. this deﬁnition restricts bpm to operational processes, i.e., pro-
cesses at the strategic level and processes that cannot be made explicit are
excluded. it also follows that systems supporting bpm need to be “process
aware”. after all, without information about the operational processes at hand
little support is possible. when comparing classical deﬁnitions of wfm [13] with
the above deﬁnition of bpm, it can be observed that we assume bpm to oﬀer
a broader set of functionalities and support of the whole process life-cycle. this
is also the “sales pitch” that many vendors use to market their products.
designconfiguration
execution
control diagnosis
fig. 1. the bpm life-cycle
the goal of this paper is to analyze whether today’s bpm systems actually
support the bpm life-cycle. to do this we use the bpm life-cycle as depicted in
figure 1. this life-cycle identiﬁes ﬁve phases ( design ,conﬁguration ,execution ,
control , and diagnosis ), which will be described later. the depicted life-cycle is
a combination of the life-cycles presented in [4] and [20]. we will discuss the
desired functionality in each of the phases. to make things more concrete, we
have evaluated one particular system in detail: filenet p8 bpm suite (version
3.5). we have selected this system because it is considered as one of the leading
commercial bpm systems [7,8,9]. moreover, the system is explicitly positioned
by the vendor as a tool to support the whole bpm life-cycle.
we analyze the support of the filenet p8 bpm suite in each of the ﬁve
phases shown in figure 1. for our evaluation we performed a full pass through
these phases using ﬁve realistic workﬂow scenarios, each including a concrete
workﬂow process and life cycle context. we have used ﬁve workﬂows to be able
to obtain additional insights when necessary. as starting point for our evaluation,
we will assume that each workﬂow has already made one pass through the bpm
cycle. the name and the related literature for each of the workﬂows is provided
in table 1. these particular workﬂows have been selected because the papers
describing them provide a diagnosis of the improvement points and one or morealternative designs. also, the original workﬂows and the alternatives have already
been tested and the underlying data were available to us.
table 1. the workﬂows used in our analysis
workﬂow name reference
intake admin reijers, 2003 [18]
credit application reijers, 2003 [18]
intake meetings jansen-vullers, reijers, 2005 [12] ; reijers,
2003 [18]
bank account netjes, van der aalst, reijers, 2005 [15]
mortgage request van der aalst, 2001 [1] ; netjes, vander-
feesten, reijers, 2006 [17]
the remainder of this paper is organized as follows. first, we describe the
bpm life-cycle in more detail and discuss the requirements that follow from it.
then, in section 3, we evaluate the filenet p8 bpm suite for each of the phases
and in section 4 we present our conclusions.
2 evaluation approach based on the bpm life-cycle
in this section we discuss a system-independent approach to evaluate bpm sys-
tems. pivotal to our evaluation approach is the bpm life-cycle depicted in figure
1. clearly, we want to evaluate the degree to which each phase is facilitated by
a bpm system. moreover, we want to asses the interoperability among phases,
i.e., can information obtained or created in one phase be used in another phase?
for example, a bpm system may incorporate a simulation tool, but it may be
the case that the simulation model and the model used for execution are incom-
patible, forcing the user to re-create models or to set parameters twice.
first, we focus on the design phase . in case of an already existing process
the goal of this phase is to create an alternative for the current process. this
alternative should remedy the diagnosed weaknesses of the process according to
the identiﬁed improvement possibilities. as indicated in figure 1, this phase is
in-between the diagnosis phase and the conﬁguration phase, i.e., input from the
diagnosis phase is used to identify improvement opportunities (e.g., bottlenecks
or other weaknesses) and the output is transferred towards the conﬁguration
part of the bpm system. the resulting process deﬁnition consists of the following
elements [3]:
–the process structure,
–the resource structure,
–the allocation logic, and
–the interfaces.we would like to emphasize that a graphical editor by itself does not oﬀer full
support for the design phase. in the design phase the designer wants to exper-
iment with designs, evaluate designs, and use input from the diagnosis phase.
some systems oﬀer a simulation tool to support the design phase. unfortunately,
such a tool is often disconnected from the diagnosis phase, i.e., it is impossible to
directly use historic data (e.g., to estimate service time distributions or routing
probabilities). moreover, simulation tools typically oﬀer only what-if analysis,
i.e., the designer has to come up with ideas for alternative designs and needs to
analyze each alternative separately without suﬃcient tool support [17].
theconﬁguration phase focuses on the detailed speciﬁcation of the selected
design. note that in the design phase the emphasis is on the performance of the
process, while in the conﬁguration phase the emphasis shifts to the realization
of the corresponding system. in principle, the design and conﬁguration phase
could use a common graphical editor, i.e., the conﬁguration phase details the
process deﬁnition created in the design phase. however, it is important (a) that
the user is not forced to bypass the editor to code parts of the process and (b)
that technical details do not need to be addressed in the design phase. if both
phases use diﬀerent tools or concepts, interoperability issues may frustrate a
smooth transition from design to conﬁguration.
in the execution phase the conﬁgured workﬂow becomes operational by trans-
ferring the process deﬁnition to the workﬂow engine. for the workﬂow execution
not only the process deﬁnition data is required, but also context data about
the environment with which the bpm system interacts. relevant environmental
aspects are:
–information on arriving cases,
–availability and behavior of internal/external resources and services.
the execution part of the bpm system captures the context data and relates it
to speciﬁc instances of the workﬂow.
the execution of the operational business process is monitored in the control
phase . the control part of the bpm system monitors on the one hand individ-
ual cases to be able to give feedback about their status and on the other hand,
aggregates execution data to be able to obtain the current performance of the
workﬂow. the monitoring of speciﬁc cases is done with the data from individual
process executions without any form of aggregation, while obtaining the perfor-
mance indicators requires aggregation of these data. information about running
cases can be used as input for the diagnosis phase. however, it can also be used
to make changes in the process. for example, temporary bottlenecks do not re-
quire a redesign of the process, but require the addition of resources or other
direct measures (e.g., not accepting new cases). hence, the control phase also
provides input for the execution phase.
in the diagnosis phase information collected in the control phase is used
to reveal weaknesses in the process. in this phase the focus is usually on ag-
gregated performance data and not on individual cases. this is the domain of
process mining [5], business process intelligence [10], data warehousing, and clas-
sical data mining techniques. this diagnosis information is providing ideas forredesign (e.g., bottleneck identiﬁcation) and input for the analysis of redesigns
(e.g., historic data) in the design phase.
as indicated, it is not suﬃcient to support each of the ﬁve phases in isola-
tion: interoperability among phases is vital for the usability of a bpm system.
consider for example the role of simulation. in a worst case scenario, a bpm
system could oﬀer a simulation tool that, on the one hand, cannot directly read
the current workﬂow design used for execution (or relevant information is lost
in some translation) and, on the other hand, cannot use any historic data to ex-
tract information about service times, routing probabilities, workloads, resource
availability. such a simulation tool probably oﬀers little support for the bpm
life-cycle [19].
3 applying the evaluation approach to filenet
we will evaluate the available bpm support by conducting a full pass through
the bpm cycle with the aid of several tools from the filenet p8 bpm suite. we
have evaluated the filenet p8 bpm suite, version 3.5. the system has been
used with microsoft windows 2000 as operating system, a microsoft sql server
as database, bea weblogic as j2ee application server and microsoft internet
explorer as browser. the p8 bpm suite consists of six parts: workﬂow manage-
ment, process design, process simulation, process tracking, process analysis and
document review & approval (www.filenet.com). the evaluation of filenet’s
bpm abilities focuses on the tools supporting the ﬁrst ﬁve parts. document
review & approval is not relevant for the evaluation; it only facilitates process
management. in the remainder of this section, we consider filenet’s capabilities
for each of the ﬁve bpm phases (design, conﬁguration, execution, control, and
diagnosis). a detailed illustration of the bpm support oﬀered by filenet can be
found in [16] where we present the full pass through the bpm life-cycle for one
of the ﬁve workﬂow scenarios.
3.1 design
we start our evaluation with the design phase. for each of the ﬁve workﬂow
scenarios mentioned in table 1 we would like to create an alternative workﬂow
with help from the filenet p8 bpm suite. we assume these workﬂows have al-
ready made one pass through the bpm cycle, meaning that the original workﬂow
model and data from execution are present in the filenet system. a workﬂow
model for which an alternative should be made can be loaded in the filenet
process designer , which, however, does not support the creation of one or more
alternatives. the redesign of the original model to obtain a better performing
alternative should be done manually. for each of the workﬂows we take the al-
ternatives described in the related paper and use the process designer to change
the original model to the alternative model. one of the alternative designs made
with the process designer is shown in figure 2. the depicted design presents a
medical process in which a mental patient is registered and assigned to medicalemployees (intakers), and for which intake meetings are planned. a detailed de-
scription of the process is available in [18]. more information on the modelling
of workﬂows with the filenet process designer can be found in [16].
fig. 2. workﬂow model in the process designer
the performance of each of the created alternatives should be evaluated to
ﬁnd the best alternative. for this we use the filenet process simulator . for
each alternative we create a simulation scenario for which we import the process
steps, their order and the allocation logic deﬁned with the process designer . the
imported data can not be changed in the process simulator , but a replacement
can be imported from the process designer without the loss of settings. other
process deﬁnition data should be added to the simulation scenario manually.
jobs are connected to the process steps and assigned to resources which are
allocated according to shifts . the notion of shifts allows for the scheduling of
resources over the available working hours. relating these jobs,resources and
shifts to each other is rather complicated, because only one deﬁnition window
can be open at the time and relations should also be indicated when deﬁning a
job,resource orshift.
in addition to the deﬁnition data there is context data required to perform
a simulation. historic data is present in the system, but it can only be used in
a limited way. historic information on arriving cases can be transferred to the
process simulator , but all other data, like processing times and routing proba-bilities, should be derived from the execution data and included manually. it is
only possible to provide constant values for the simulation parameters, so the
simulation results will only provide a rough indication for the performance of
a scenario. simulation results are generated fast and with no additional eﬀort.
the use of the filenet process simulator is in detail explained in [16]. a simu-
lation scenario with simulation results is depicted in figure 3. for each of the
ﬁve workﬂows we choose the best alternative which we specify in detail in the
conﬁguration phase.
3.2 conﬁguration
the filenet process designer is also used for the conﬁguration of the chosen
alternative workﬂows and oﬀers interoperability between the design and the
conﬁguration phase. in the design phase we already speciﬁed the process struc-
ture and the mapping of resources to tasks for each workﬂow with the process
designer . the more complicated parts of the process structure are detailed out
in the conﬁguration phase. each workﬂow model contains one or more complex
constructs, but besides one construct, we have been able to conﬁgure them all
with the process designer . the resource structure, the allocation rules and the
interfaces are deﬁned outside the process designer . deﬁning outside the process
designer allows for sharing with other processes, making the resource structure
and the allocation rules reusable for other process deﬁnitions. all ﬁve workﬂows
use the same allocation rules and some workﬂows have the same resource struc-
ture. the complete conﬁguration of the ﬁve workﬂows, both inside and outside
theprocess designer has been done in two working days. the conﬁguration phase
is strongly supported by the filenet p8 bpm suite.
as closure of the conﬁguration phase, the workﬂow model is checked for
completeness by the system and a workﬂow instance could be launched to pretest
the execution of the workﬂow. another possible check would have been a check
on the correctness of the model, conform the veriﬁcation of workﬂow processes
provided by the woﬂan tool [21], but such a veriﬁcation is not supported by
the filenet system. the conﬁguration of the workﬂows is necessary for their
execution.
3.3 execution
the execution phase is started with the transfer of the workﬂow conﬁgurations
to the filenet process engine . all process deﬁnition data are transferred to the
process engine providing interoperability between the conﬁguration and the ex-
ecution phase. resources work on the processes in operation via an inbox. the
filenet p8 bpm suite oﬀers integration with external applications, document
management, integration with content management, and interaction between
inter-related processes. the filenet system supports the execution phase in an
excellent way. we expected mature support for execution, because this support
has traditionally been the heart of a wfm system and many systems provide
extended support for the execution phase. in the execution phase context data isrelated to each speciﬁc instance of a workﬂow and this combination of deﬁnition
and context data is used for the control of a workﬂow.
3.4 control
in the control phase, the operational business process is monitored to follow
individual cases and to obtain the performance of a workﬂow. the ﬁrst way of
monitoring is supported by the filenet process administrator and the second by
theanalysis engine , providing a strong support for the control phase.
the execution data for individual cases and other workﬂow events are logged
by the process engine . the history of a certain workﬂow, step or work item can be
tracked in the log through the filenet process administrator . for the workﬂows
with conditional routing this gives the opportunity to determine which steps
were executed for a speciﬁc case. with the process administrator it can also be
determined how certain decisions were made during execution allowing us to see
at which point and why a certain case was rejected.
the performance of a workﬂow is read from aggregated execution data. the
execution data present in the process engine is aggregated and parsed to the
filenet analysis engine . interoperability exists between the execution and the
control phase, because all execution data necessary for control are available either
through the process engine or the analysis engine . the aggregated performance
data resides on a separate engine to not aﬀect the performance of the process
engine . reporting and analysis of the aggregated data is facilitated by twenty
out-of-the-box reports; each graphically presenting the data related to one per-
formance indicator. it is possible to specify custom reports, but this requires
advanced excel skills. the representation of the data can be manipulated by
adjusting the detail level or by ﬁltering the data.
an analysis of the work present in the queues gives insight in the existence of
temporary bottlenecks in the process. this information is used as feedback for the
execution phase. the feedback, however, is obtained from human interpretation
of the analysis results and does not contain suggestions for the removal of the
bottleneck. more permanent weaknesses in the process could also be revealed
based on the analysis of performance data and this is done in the diagnosis
phase.
3.5 diagnosis
in the diagnosis phase, problems and improvement possibilities are identiﬁed
through analysis of the operational process. the analysis engine facilitates the
control and the diagnosis phase, creating interoperability between the two phases.
analysis reports present an aggregated view on the performance data and weak-
nesses in the process are derived from this. the derivation, however, is not sup-
ported by the filenet p8 bpm suite and is based on human insights. a system
not capable of identifying process weaknesses is certainly unable to provide im-
provement suggestions for these weaknesses. the filenet p8 bpm suite providesfig. 3. simulation results from the process simulator
limited support for the diagnosis phase and the creation of ideas for process im-
provement should be done manually.
the ideas for redesign generated in the diagnosis phase could result in another
pass through the bpm cycle starting with a new design phase. when we started
our pass in the design phase it became clear that historic performance data is
necessary to obtain the performance of the created redesigns with simulation.
we already mentioned that only historic arrival data could be used, making
the interoperability between the diagnosis and the design phase limited. we did
not mention yet that data generated with simulation can also be transferred
to the analysis engine and presented in the performance reports. this provides
a comprehensive view on the simulation results. nevertheless, presenting the
correct data becomes problematic when multiple scenarios of the same simulation
model have been simulated over the same simulation time. it is not possible to
select the data of only one of the scenarios, while the aggregation of all simulation
data leads to unusable results. the only solution for this is clearing the analysis
engine before each new simulation run, which does not only lead to unworkable
situations, but will also remove the historic execution data from the analysis
engine .
4 conclusions
the conclusions from this study are summarized in table 2. in table 2 we
present the support required for each phase in the bpm life-cycle and the support
provided by the filenet p8 bpm suite. from our evaluation we conclude thatfilenet provides strong support for the conﬁguration, the execution and the
control phase. in particular,
–the conﬁguration phase is well supported by the process designer .
–the execution of the workﬂow is strongly supported by the process engine .
–the control phase is supported by the process administrator and the analysis
engine .
less explicit support is available for the diagnosis and design phase. some sup-
port in the diagnosis phase is provided by the process analyzer , which gives an
aggregate view on the data. however, the search for weaknesses in the process
is not supported and certainly no improvement suggestions are generated. fur-
thermore, in the design phase the creation of the alternatives is not supported.
limited support is available through the representation of the alternatives as
facilitated by the process designer and the selection of the best alternative by
theprocess simulator .
table 2. summary of the evaluation
phase required support filenet support
design make redesign -
model designs process designer
evaluate designs process simulator
compare designs -
input from diagnosis phase available - (only arrival data)
output for conﬁguration phase available through process designer
conﬁguration model detailed designs process designer
input from design phase available through process designer
output for execution phase available transfer of process deﬁnition
execution workﬂow engine process engine
capture context data process engine
input from conﬁguration phase available transfer to process engine
output for control phase available transfer from process engine
control monitor speciﬁc cases process administrator
aggregation of execution data analysis engine
monitor performance process analyzer
input from execution phase available transfer to analysis engine
output for diagnosis phase available through analysis engine
output for execution phase available -
diagnosis reveal weaknesses process analyzer
identify improvement points -
input from control phase available through analysis engine
output for design phase available - (only arrival data)
- : not supported by filenet, should be done manually.
the conclusion for our interoperability evaluation is that the interoperability
of the filenet process tools is notably supported in the transitions between thedesign, the conﬁguration, the execution, the control and the diagnosis phase. at
the same time, the interoperability between the diagnosis and the design phase
is limited to the use of historic arrival data (present in the analysis engine ) for
the simulation. all other performance data present in the analysis engine can
not be passed to the process simulator and should be copied manually. although
interoperability exists between the execution and control phase, the loop back
from control to execution is not supported. in the control phase temporary bot-
tlenecks can be identiﬁed, but human intervention is required to interpret the
ﬁndings and tune the operational process.
these insights are in line with the support that could be expected from
a wfm system, as these systems are well-known for their emphasis on the
conﬁguration, execution and control phase. nonetheless, it is also clear that
opportunities exist to improve the support that so-called bpm systems oﬀer to
execute the entire bpm life-cycle. we consider the filenet p8 bpm suite as a
relevant benchmark for many of the other available systems, because of its broad
range of features and market dominance. the improvement opportunities also
set the stage for further research, which in our view should focus on transforming
available bpm theory into bpm system support. in particular, our future work
will focus on addressing the gap between redesign theory and practice with the
development of redesign tools [17].
acknowledgement
we would like to thank the consultancy and it support staﬀ from filenet for
their kind assistance in carrying out this study. this research is supported by
the technology foundation stw, applied science division of nwo and the
technology programme of the dutch ministry of economic aﬀairs.
references
1.w.m.p. van der aalst. reengineering knock-out processes. decision support
systems , 30(4):451–468, 2001.
2.w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
3.w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods
and systems (in chinese) . tsingua university press, beijing, china, 2004.
4.w.m.p. van der aalst, a.h.m. ter hofstede, and m. weske. business process man-
agement: a survey. in w.m.p. van der aalst, a.h.m. ter hofstede, and m. weske,
editors, international conference on business process management (bpm 2003) ,
volume 2678 of lecture notes in computer science , pages 1–12. springer-verlag,
berlin, 2003.
5.w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267, 2003.
6.c.a. ellis. information control nets: a mathematical model of oﬃce information
flow. in proceedings of the conference on simulation, measurement and modeling
of computer systems , pages 225–240, boulder, colorado, 1979. acm press.7.gartner. gartner’s magic quadrant for pure-play bpm. http://www.gartner.com,
2003.
8.gartner. gartner’s magic quadrant for pure-play bpm. http://www.gartner.com,
2004.
9.gartner. gartner’s magic quadrant for pure-play bpm. http://www.gartner.com,
2005.
10.d. grigori, f. casati, m. castellanos, u. dayal, m. sayal, and m.c. shan. business
process intelligence. computers in industry , 53(3):321–343, 2004.
11.s. jablonski and c. bussler. workﬂow management: modeling concepts, architec-
ture, and implementation . international thomson computer press, london, uk,
1996.
12.m.h. jansen-vullers and h.a. reijers. business process redesign at a mental
healthcare institute: a coloured petri net approach. in k. jensen, editor, pro-
ceedings of the sixth workshop on the practical use of coloured petri nets and
cpn tools (cpn 2005) , volume 576 of daimi , pages 21–38, aarhus, denmark,
october 2005. university of aarhus.
13.p. lawrence, editor. workﬂow handbook 1997, workﬂow management coalition .
john wiley and sons, new york, 1997.
14.m. zur muehlen. workﬂow-based process controlling: foundation, design and
application of workﬂow-driven process information systems . logos, berlin, 2004.
15.m. netjes, w.m.p. van der aalst, and h.a. reijers. analysis of resource-
constrained processes with colored petri nets. in k. jensen, editor, proceedings
of the sixth workshop on the practical use of coloured petri nets and cpn tools
(cpn 2005) , volume 576 of daimi , pages 251–266, aarhus, denmark, october
2005. university of aarhus.
16.m. netjes, h.a. reijers, and w.m.p. van der aalst. filenet’s bpm life-cycle
support. bpm center report bpm-06-07, bpmcenter.org, 2006.
17.m. netjes, i. vanderfeesten, and h.a. reijers. ”intelligent” tools for workﬂow
process redesign: a research agenda. in c. bussler and a. haller, editors, busi-
ness process management workshops: bpm 2005 , volume 3812 of lecture notes
in computer science , pages 444–453. springer-verlag, berlin, 2006.
18.h. reijers. design and control of workﬂow processes: business process manage-
ment for the service industry , volume 2617 of lecture notes in computer science .
springer-verlag, berlin, 2003.
19.h.a. reijers and w.m.p. van der aalst. short-term simulation: bridging the gap
between operational control and strategic decision making. in m.h. hamza,
editor, proceedings of the iasted international conference on modelling and
simulation , pages 417–421. iasted/acta press, anaheim, usa, 1999.
20.h.a. reijers and k.m. van hee. business process management in een notendop
(in dutch). vip: vakblad voor documentmanagement , 10(6):30–32, 2004.
21.h.m.w. verbeek, t. basten, and w.m.p. van der aalst. diagnosing workﬂow
processes using woﬂan. the computer journal , 44(4):246–279, 2001.