conformance checking in the large:
partitioning and topology
jorge munoz-gama1, josep carmona1, and wil m.p. van der aalst2
1universitat politecnica de catalunya, barcelona (spain)
2eindhoven university of technology, eindhoven (the netherlands)
jmunoz@lsi.upc.edu ,jcarmona@lsi.upc.edu ,w.m.p.v.d.aalst@tue.nl
abstract. the torrents of event data generated by today's systems are
an important enabler for process mining. however, at the same time, the
size and variability of the resulting event logs are challenging for today's
process mining techniques. this paper focuses on \conformance checking
in the large" and presents a novel decomposition technique that parti-
tions larger processes into sets of subprocesses that can be analyzed more
easily. the resulting topological representation of the partitioning can be
used to localize conformance problems. moreover, we provide techniques
to rene the decomposition such that similar process fragments are not
considered twice during conformance analysis. all the techniques have
been implemented in prom, and experimental results are provided.
keywords: process mining, conformance checking, process diagnosis
1 introduction
the interest in process mining is increasing because of the widespread avail-
ability of event data and the desire to improve performance and compliance of
operational processes. process mining relates modeled behavior and observed
behavior [1,2]. this novel discipline tackles three challenges relating event data
(i.e., log les) and process models: the discovery of a process model from an
event log, checking the conformance of a process model and a log, and the en-
hancement of a process model with the information extracted from a log. process
mining research resulted in a variety of algorithms that demonstrated to be of
great value for undertaking small or medium-sized problem instances. however,
real-life experiences show that most of the existing algorithms have diculties
dealing with industrial-sized problems (cf. section 6).
this paper proposes a decomposition technique for determining the confor-
mance of a petri net with respect to a log (i.e., how good is the model describ-
ing the behavior of the log). instead of trying to asses the conformance of the
whole event log and the complete petri net, we check conformance for selected
subprocesses (subnets of the initial petri net and corresponding sublogs). sub-
processes are identied as fragments of the petri net that have a single-entry
and a single-exit node ( sese ), thus representing an isolated part of the model
with a well-dened interface to the rest of the net [3].in [4], we presented a conformance checking approach using the so-called
rened process structure tree (rpst). the rpst [3] allows for the construc-
tion of hierarchy of seses. this paper extends the approach presented in [4]
as follows: first of all, we present a new strategy to compute tness (i.e., the
dimension of conformance that focuses on analyze if the traces in the log are
valid sequences of the model) by selecting a partitioning of the rpst. then this
partitioning is extended with a new set of fragments corresponding to the inter-
face between place-bordered seses. with this extension, it is guaranteed that
the tness of the whole petri net can be computed directly from the tness of
the fragments forming the partition. experiments show a considerable reduction
(orders of magnitude) in the tness checking, and moreover the techniques allow
for identifying those subnets that have tness problems, allowing the process
owner to focus on the problematic parts of a large model.
the rpst-based decomposition is not only used for eciency reasons. we
also use it to provide diagnostics that help the analyst in localizing conformance
problems. we create a topological structure of seses in order to detect the
larger connected components that have tness problems. moreover, problematic
parts can be analyzed in isolation and independently of the rest of the model.
finally, the approach is rened to avoid considering the same problem multiple
times. for example, it makes no sense to consider small or highly similar process
fragments.
related work. cook et al. [5] were among the rst to quantify the relation-
ship between event logs and process models. they compared event streams of the
model with event streams generated from the event log. several authors propos-
ing process discovery algorithms also provide a quality metric (often related to
tness). for example, in [6] the authors dene a tness function for searching
for the optimal model using a genetic approach.
the rst comprehensive approach to conformance analysis was proposed in
[7]. two dierent types of metrics are proposed: (a) tness metrics , i.e., the
extent to which the log traces can be associated with valid execution paths
specied by the process model, and (b) appropriateness metrics , i.e., the degree
of accuracy in which the process model describes the observed behavior in the
log, combined with the degree of clarity in which it is represented. one of the
drawbacks of the approach in [7] and most other approaches that \play the
token game", is that tness is typically overestimated. when a model and log
do not t well together, replay will overload the process model with superuous
tokens. as a result, the model will allow for too much behavior. approaches such
as the one in [7] also have problems when the model has \invisible activities"
(silent steps that are not recorded in the event log) or \duplicate activities"
(multiple transitions bearing the same label). to deal with such phenomena
state-space exploration and heuristics are needed to replay the event log. in
fact, most conformance techniques give up after the rst non-tting event or
simply \guess" the corresponding path in the model. therefore, adriansyah et
al. formulated conformance checking problems as an optimization problem [8,9].lion's share of attention in conformance checking has been devoted to check-
ing tness. however, in recent papers researchers started to explore the other
quality dimensions [1,8,10]. for example, munoz-gama et al. quantied the pre-
cision dimension [11,12].
in [13] various process mining decomposition approaches are discussed. in
[14] the notion of passages is used to decompose a process model and/or event
log into smaller parts that can be checked or discovered locally. this approach
is generalized in [15] where it is shown that tness-related problems can be
decomposed as long as the dierent process fragments only share transitions
having unique labels. this idea is used in this paper. however, unlike [14,15]
we use an rpst-based decomposition that also allows for place-boundaries.
moreover, the rened rpst-based decomposition and the topological structure
enable additional diagnostics not considered before.
outline. section 2 provides some preliminaries, before describing our partition-
ing approach (section 3). section 4 presents the notion of a topological graph
to show conformance diagnostics. in section 5 we discuss a renement to avoid
inspecting small or highly similar process fragments. experimental results are
presented in section 6. section 7 concludes the paper.
2 preliminaries
to explain our conformance checking approach we introduce some basic notions.
we use petri nets (workow nets to be precise) to model processes.
denition 1 (petri net, workow net). apetri net [16] is a tuple pn=
(p;t;a )having a nite set of places pand a nite set of transitions twhere
p\t=;, and a ow relation a(pt)[(tp).3thepreset andpostset of
a node are dened asx=fyj(y;x)2agandx=fyj(x;y)2ag, respectively.
the state of a petri net is dened by its marking , i.e., a multiset over p. a
workow net (wf-net)wn = (p;t;a;i;o )is a particular type of petri net
where the net has one source place iand one sink place o, and all the other
nodes are in a path between them.
denition 2 (workow graph). given a petri net pn = (p;t;a ), we
dene its workow graph simply as the structural graph g= (v;e)with no
distinctions between places and transitions, i.e., v=p[tande=a.
denition 3 (system net, full firing sequences). asystem net is a tuple
sn= (pn;m i;mo)wheremiandmodene the initial and nal marking of the
net, respectively. (pn;m 1)[i(pn;m 2)denotes that a sequence of transitions
2tis enabled in marking m1and executing inm1results in marking m2.
fj(pn;m i)[i(pn;m o)gare all full ring sequences of sn.
3although the approach is valid also for weighted petri nets, for the sake of clarity
in this paper we restrict to the case with no weights on the arcs.anevent log is a multiset of traces. each trace is a sequence of activities (in this
paper corresponding to the set of transitions t). multiple cases may follow the
same trace.
denition 4 (event log). anevent logl2i b(t)is a multiset of traces.
fitness can be dened in various ways [1,8,10]. in this paper, we just classify
traces into tting or non-tting. fitting traces correspond to full ring sequences.
denition 5 (fitting trace). a trace2ttssn= (pn;m i;mo)if
(pn;[mi])[i(pn;[mo]), i.e.,corresponds to a full ring sequence of sn. an
event logl2i b(t) tssn if(pn;[mi])[i(pn;[mo])for all2l.
to decompose conformance checking problems, we identify so-called sese com-
ponents . in the remainder, the following context is assumed: let gbe the work-
ow graph of a given wf-net wn, and letgs= (vs;s) be a connected sub-
graph ofgformed by a set of edges sand the vertexes vs=(s) induced by
s.4
denition 6 (interior, boundary, entry and exit nodes [3]). a node
x2vsisinterior with respect to gsi it is connected only to nodes in vs;
otherwisexis aboundary node ofgs. a boundary node yofgsis an entry of
gsi no incoming edge of ybelongs tosor if all outgoing edges of ybelong to
s. a boundary node yofgsis an exit ofgsi no outgoing edge of ybelongs
tosor if all incoming edges of ybelong tos.
for example, given the model in fig. 1a and its corresponding workow graph in
fig. 1b, let consider the subgraph s4containing the arcs b;d;f;h and the vertexes
induced by them. the nodes corresponding with t1andt4are boundary nodes,
whilep2,t2andp4are interior nodes. moreover, the node t1is an entry node,
whilet4is an exit.
(a) workflow net
(b) workflow graph and sese descompositiont1t2
t3t4t5
t6t7
p1p2
p3p4
p5p6 p7 p8
ab
cd
ef
gh
ijk
lm
no ps6
s7s3
s4
s5s s 2s s1s1s
s2s s3sjop a
s4s s5s s6s s7s
bdfhcegikm ln
(c) rpst
fig. 1: a wf-net, its workow graph and the rpst and sese decomposition.
4(r) =s
(a;b)2rfa;bgis the set of elements referred to by relation xab.denition 7 (sese, trivial sese and canonical sese [3]). seis
asese (single-exit-single-entry) of graphg= (v;e)igshas exactly two
boundary nodes: one entry and one exit. a sese is trivial if it is composed of a
single edge. sis acanonical sese ofgif it does not partially overlap with any
other sese of g, i.e., given any other sese s0ofg, they are nested ( ss0or
s0s) or they are disjoint ( s\s0=;). by denition, the source of a wf-net
is an entry to every fragment it belongs to and the sink of the net is an exit from
every fragment it belongs to.
the decomposition based on canonical seses is a well studied problem in the
literature, and can be computed in linear time. in [17], the authors proposed the
algorithm for constructing the rened process structure tree (rpst) , i.e., an
hierarchical structure containing all the canonical seses of a model. in [3], the
computation of the rpst is considerably simplied and generalized by introduc-
ing a pre-processing step that reduces the implementation eort considerably.
denition 8 (rpst-based decomposition [3]). letgbe the workow
graph of the wf-net wn .5the rened process structured tree (rpst) of
gis the tree composed by the set of all its canonical seses, such that, the par-
ent of a canonical sese sis the smallest canonical sese that contains s. the
root of the tree is the entire graph, and the leaves are the trivial seses. the set
of all the nodes of the tree is denoted as s.
figure 1c shows the rpst for the given example. in the remainder of the paper,
we will refer to canonical seses resulting from the rpst decomposition simply
as seses. also note that the seses are dened as a set of edges (i.e., s) over the
workow graph (not as subgraphs, i.e., gs). however, for simplicity and when
the context is clear, we will use the term sese to refer also to the subgraph of
the workow graph or petri net induced by those edges ( pns= (p\(s);t\
(s);a\s)). for example, the sese s4of fig. 1b containing the edges b;d;f
andh, refers also to the petri net composed by the transitions t1;t2andt4, the
placesp2andp4, and the arcs between them in the wf-net of fig. 1a.
3 partitioning conformance diagnosis
in this section, we propose a divide-and-conquer approach for conformance check-
ing, preserving the sese decomposition's underlying semantics. moreover, we
show that a trace is tting the overall model if and only if it is tting the indi-
vidual fragments. the proposed approach is based on selecting a set of rpst
nodes that partition the set of arcs of the process model. the maximum size
of the components to be analyzed can be limited in order to deal with compu-
tation time restrictions or to control the complexity of individual components.
formally:
5although the approach presented in this paper can be generalized to graphs with
several sources and sinks, for the sake of clarity in this paper we restrict to the case
with only one source and only one sink [3].algorithm 1 k-partitioning algorithm
procedure k-part (rpst,k)
v=froot(rpst )g
p=;
whilev6=;do
v pop(v)
ifjv:arcs ()jkthen p=p[fvg
elsev=v[fchildren (v)g
denition 9 ( k-partitioning over a sese decomposition). given the
sese decomposition sof a wf-net wn , we dene p=fs1;:::;s ng s:
apartitioning of seses such that each arc in wn is contained in exactly one
si. ak-partitioning ofsis a set of seses p=fs1;:::;s ngswhere each si
contains at most karcs.
proposition 1 ( k-partitioning existence). given a sese decomposition s
over the wf-net wn = (p;t;a;i;o ), and given any ksuch that 1kjaj,
there always exists a k-partitioning ofs.
proof. by denition, any edge is a sese (and they appear as leaves of the
rpst). therefore, a trivial partitioning with all parts being trivial seses is
always possible. u t
algorithm 1 shows how to compute a k-partitioning. the algorithm has linear
complexity (with respect to the size of the rpst) and termination is guaranteed
by the fact that fragments size is reduced with every iteration.
given a partitioning, we use it to decompose conformance checking. remem-
ber that seses only interface the rest of the net through the single entry and
single exit nodes, which may be shared by dierent seses. the rest of nodes of
a sese (i.e., the interior nodes) have no connection with other seses. for the
boundary nodes, we distinguish two cases: transition bounded andplace bounded .
as proven in [15], transition bounded net fragments can be checked in iso-
lation. for a partitioning into seses where all entry and single nodes are tran-
sitions the following holds: a trace perfectly tting the whole wf-net will also
t all individual seses (projected trace on corresponding transitions) and vice
versa. for example, consider the wf-net in fig. 2a, and the partitioning shown
in fig. 2b. the existence of din boths1ands2ensures that both subnets move
synchronously when replaying a trace. for instance, trace abcddefg (non-tting
in the original net due the double d) is tting on s2(ons2, the preset of dis
empty), but not in s1. on the other hand, trace abcefg (also non-tting in the
original net) is tting in neither s1nors2.
however, the case of place bounded seses (i.e., entry and/or exit nodes cor-
respond to places) is completely dierent. places, unlike transitions, have no
reection in the log, and therefore, cannot be used to synchronize the individual
seses during replay. consider, for example, the net in fig. 3a, and the parti-
tioning shown in fig. 3b. there is a strong dependency between the execution of(a) original model
(b) original partitioningab
cs1
de
fgs2ab
cs1
d
de
fgs2fig. 2: example of partitioning with transition boundary.
s1and the initial marking considered for s2. for example, consider a marking
of one token on pand the trace abcdef . such trace ts the original model, but it
does not t s2(i.e., it requires two tokens on p). on the other hand, considering
an initial marking of s2with two tokens on p, the trace abdecf tss1ands2
but does not t the original net.
ab
cd
ef
pab
cp
d
ef
p
ab
cd
efb
cd
eps1 s2s1
s2
s'1 s'2b1(a) original model
(c) extended partitioning(b) original partitioning
fig. 3: example of partitioning with place boundary.
thus, in case of place-boundaries, we extend the isolated tness calculation
by considering a new element that we call bridge . a bridge simply contains the
pre and post sets of the boundary place. bridges replicate the behavior on the
boundary places thus synchronizing all components connected to such place. for
example, given the place boundary of fig. 3a, besides the two sese components
s0
1ands0
2, a third component b1is constructed explicitly, containing the place
p, its preset, and its postset (cf. fig. 3c). although bridges do not satisfy the
sese denition, their structure is very specic (i.e., nets with only one place).
given that the bridge makes the synchronization explicit on the boundary place,
seses having this boundary place no longer need it, and therefore, it is removed
from all the seses (cf. s0
1ands0
2on fig. 3c). note that the modied seses do
not longer satisfy the sese denition, but have a set of input and output tran-
sitions. remarkably, the removal of boundary places in the original seses and
the introduction of bridges ensures transition bounded fragments, and therefore,
the results of [15] can be applied directly. we now formally dene the so-called
extended partitioning:denition 10 (extended partitioning over a sese decomposition). let
p=fs1;:::s ngbe a partitioning of the wf-net wn = (p;t;a;i;o ). letip=
fi1;:::;i ngandop=fo1;:::;o ngbe the set of all entry and exit nodes of the
seses in p.b=fp1;:::;p kg= ((ip[op)\p)nfi;og= (ip\op)\pis the
set of boundary places, i.e., entry and exit nodes of the seses that are places
but not the source or sink place of the wf-net wn . the extended partitioning
p0=fs0
1;:::s0
n;b1:::b kgofpis constructed as follows:
for all 1in:s0
i=f(x;y)2sijfx;yg\b=;g(boundary places are
removed from the seses).
for1jk:bj=f(x;y)2ajpj2fx;ygg(bridges are added).
note that, a bridge may not satisfy the k-size property. however, its size is
limited because it contains a single place. lemma 1 shows that, given any ex-
tended partitioning, tness is preserved among its components, i.e., a trace ts
the whole wf-net if and only if it ts all the parts of the extended partitioning.
lemma 1 (decomposed fitness checking). letlbe a log and sn =
(wn;m i;mo)be a system net where wn = (p;t;a;i;o )is a wf-net. let p0be
any extended partitioning over wn . a trace2ltssn(i.e., (wn; [mi])[i
(wn; [mo])) if and only if it ts all the parts, i.e., for all s2p0, pn s=
(ps;ts;as) = (p\(s);t\(s);a\s):(pns;[mi#ps])[#tsi(pns;[mo#ps])).6
proof. special case of the more general theorem 2 in [15]. if the overall trace
tssn, then each of the projected traces #txts the corresponding sese.
if this is not the case, then at least there exist one projected trace #txthat
does not t. if the projected traces #txt the corresponding seses, then these
traces can be stitched back into a trace that tssn.
although the use of a partitioning makes it possible to decompose a complex
problem as conformance checking into smaller subproblems, there are applica-
tions (e.g., process diagnosis) where a more ned-grained analysis is required. in
other words, we need to be able to navigate zooming in and out of the model,
to get a better understanding (see chapter 13 in [1]). with this idea in mind,
the theory proposed on this section can be combined with the properties of the
rpst to obtain a hierarchy of tness results based on seses. therefore, given
an rpst, an extension based on bridges is performed over each level of the tree,
and the tness is checked for the complete level. unlike other techniques (like
in [4]), this analysis guarantees the tness for the complete level. note that, the
rpst contains the whole net as its root. therefore, in those cases where the
complete system cannot be checked due its complexity, this is also not possible
with this technique. however, a greedy procedure can be developed, that starts
processing the higher levels of the rpst hierarchy (root is at level 0), and goes
up until it reaches a level non-computable due to complexity or time reasons.
algorithm 2 describes the resulting conformance checking technique.
6#tis the projection of sequence onto transitions tandm#pis the projection of
markingmonto the multiset of places p.algorithm 2 extended rpst conformance algorithm
procedure confextrpst (rpst,log)
level heigth (rpst )
whilelevel0andlevel computable do
fs1:::s ng find partitioning containing the seses in level of the rpst
fs0
1:::s0
n;b1:::b kg extend partitioning fs1:::s ngwith bridges
check tness for the pairs ( s0
1;log#t1);:::; (bk;log#tk)
level level 1
4 topological graph of a partitioning
in this section we present the topological graph of a partitioning, and some tech-
niques that can use it to improve the diagnosis. given an extended partitioning,
the topological graph is the directed graph that represents the connections via
boundary nodes between the parts. formally:
denition 11 (topological graph of a partitioning). letp=fs1;:::s ng
be a partitioning of the wf-net wn = (p;t;a;i;o ), with boundary places
fp1;:::;p kg. given an extended partitioning p0=fs0
1;:::s0
n;b1;:::b kg(cf.
def. 10), we dene its topological graph t= (p0;c)as the graph whose vertexes
are the parts of p0, and the set of edges is c=f(s0
i;s0
j)j1i;jn^(y;x)2
si^(x;z)2sjg[f (s0
i;bj)j1in^1jk^(y;pj)2sig[
f(bj;s0
i)j1in^1jk^(pj;y)2sig.
(a) partition of the net in seses (s1..s8) and its additional bridges (b1 and b2)
(b) topological graph and fitness for the trace <t1,t3,t4,t5,t7,t7,t9>t1t2
t3t4t5
t6t9
p1p2
p3p4
p5p6 p9 p10
s6 s3s4 s5
ss2s s1
p7
p8t7
t8t4t5
t6 p6t9
p9t7
t82b b1
s1s2s
s3ss4 b1s5
s62b s7s8
t5 t9
p6 p9 p7t7
t8t1 t4
p4 p2t2
t1 t4
p4 p2t2 t5 t9
p6 p9 p7t7
t8 t8(c) non fitting connected components
(d) non fitting net resulting of combining s2, s4, b1, s5 and b2 s7 s8
s5 2b+2s
fig. 4: example of partitioning, topological graph, and its corresponding non-
tting connected components, and non-tting net.
note that the topological graph has as vertexes the transition-bordered parts of
the extended partitioning, but some arcs of this graph (those regarding connec-
tion to bridges) are dened over the parts of the original partitioning p, since
in the extended partitioning boundary places have been removed. one of the
functions of the topological graph is to aid in the visualization of the extendedpartitioning resulting from applying the techniques developed in sec. 3. for ex-
ample, let us consider an extended partitioning that arises from a 4-partitioning
of the wf-net in fig. 4a (a slight modication of the model in fig. 1). the
resulting extended partitioning is composed by the seses s0
1:::s0
8and the two
bridgesb1andb2corresponding with the two boundary places p6andp9. the
corresponding topological graph is shown in fig. 4b. besides simply showing the
connections through boundary nodes, the topological graph can be enhanced
with other information. for instance, in this example, bridges are represented
with dotted borders, while seses with solid borders. moreover, the size of the
nodes in the graph is directly related with the size of the corresponding parts,
i.e., larger parts will have more importance in the representation and will appear
larger than smaller parts. finally, the graph can be enhanced with the confor-
mance analysis results. in this example we have considered the tness dimension
of the model with respect to the log composed by only one trace t1t3t4t5t7t7t7.
considering this trace, three parts contain tness anomalies (lled in gray): in
s0
2,t4is red without ring t2; ins0
5,t7is executed twice, but this requires the
ring oft5also twice; nally, in the bridge b2,t7is red twice, but t9only once,
leaving a token remaining in p9.
although the topological graph is an important aid for the process diagnosis
by itself, it can also guide subsequent analysis. in the remainder of this section
we present and motivate some ideas.
the topological graph extended with conformance information can be used
toidentify maximal process fragments with tness problems . this allows us to
focus on the problematic parts of a model, discarding those parts of the model
perfectly tting. algorithm 3 describes a procedure that is based on detect-
ing connected components on the graph induced by the non-tting vertexes.
first, the topological graph is ltered, leaving only non-tting vertexes, and the
edges connecting them. then, for each set of weakly connected components (i.e.,
connected vertexes without considering the direction of the edges), we project
the elements of the original net they refer to. note that this algorithm priori-
tizes the connectivity among vertexes resulting in weakly connected components.
however, alternative versions of the algorithm yielding strongly connected com-
ponents are possible. for instance, given the example of fig. 4b, two connected
components are found as shown in fig. 4c: s2ands5+b2.
the topological graph extended with conformance information can also be
used to create one complete subnet that includes all non-tting parts of the
extended partitioning. we use a heuristic based on the greedy expansion of
the largest non-tting connected component (based on algorithm 3), to get
connected with the second largest component, until all the non-tting behavior
is connected, trying to include as few tting nodes as possible. a schema of
the procedure is shown in algorithm 4. given the example of fig. 4b, the net
resulting (shown in fig. 4d) contains the elements of s2,s4,b1,s5andb2. in
sec. 6 we provide experimental results on large models for the two techniques
proposed in this section.algorithm 3 non-fitting weakly connected components algorithm
function nfwcc (t,v) .letvbe the non-tting vertexes
cc=;
remove from tall arcsc=fx;ygsuch thatx;y62v . graph induced by v
remove from tall vertexes z62v
while thas vertexes do .find weakly connected components
v1 select random vertex on t
fv1;:::v ng get vertexes weakly connected with v1using depth-rst search
removefv1;:::v ngfromt
cc=cc[f(sn
1places (vi);sn
1trans (vi);sn
1arcs(vi))g
returncc
algorithm 4 non-fitting subnet algorithm
function nfn(t,v) .letvbe the non-tting vertexes
while graphginduced by vontis not connected do
c1 get the largest connected component of g
c2 get the second largest connected component of g
fv1:::vng shortest path vertexes( t;c1;c2)
v=v[fv1:::vng.
return petri net induced by v
5 rpst simplications
although the decomposition of a model based on seses and their rpst is in-
tuitive and ne-grained, it remains dierent from the conceptual decomposition
typically on the mind of the process analysts. in [4], the results of an experiment
performed over 7 subjects identify three main dierences between their manual
decomposition and the one provided by the rpst: 1) predisposition of the ana-
lysts to discard small components , 2) to not consider twice similar components ,
and 3) to not make grow the depth of the hierarchy unnecessarily . in this section
we formalize the two last items into a similarity metric between parent-child
seses, enabling discarding child components when the similarity with the par-
ent is above some threshold. also we tackle 1) by dening a threshold on the
minimal size of a sese to consider. note that in the case of 1), lemma 1 may not
be applicable (since a partitioning of the net may not be possible) and therefore
these rpst simplications can only be applied without any guarantee.
in particular we present a metric (cf. def.12) for estimating the similarity
between a node sand its single child s0based on two factors: sizeand sim-
plicity . the size factor is straightforwardly related with the number of arcs of s
not included on s0. the more arcs shared by both components, the more simi-
lar they are. for instance, considering the component s1of fig. 5a, all its arcs
are included in s2except two, i.e., s2is in essence s1. therefore, a detailed
conformance diagnosis over s1may be sucient for understanding both subpro-
cesses. the simplicity factor refers to the simplicity of part of the parent snot
included on the child s0. when such part denes a simple behavior (e.g., thestrictly sequential behavior of s3not included in s4, in fig. 5b ), the analysis
and understanding of the parent may again be enough. on the other hand, when
the behavior not included in s0contains complex constructions (e.g., mixtures of
concurrency and choice) it may be more advisable to analyze both subprocesses.
(a) similar size among sesess3s4s s2ss1
(b) high simplicity among seses
fig. 5: example of cases with high similarity between nested seses.
denition 12 (similarity metric). letsp= (vp;fp)be an rpst node,
and letsc= (vc;fc)be its only child. let size dene the dierence on size
between them, i.e., size =jfcj=jfpj. letfo=fpnfcbe the set of non-
intersecting arcs. let f
obe the arcs in fothat have a source vertex with only
one outgoing edge, and a target vertex with only one incoming edge, i.e., f
o=
f(x;y)2fo:j(x;v)2foj= 1^ j(w;y)2foj= 1g. let simplicity dene
the simplicity of the non-intersecting arcs, i.e., simplicity =jf
oj=jfoj. the
similarity betweenspandscis the harmonic mean between size and simplicity:
similarity = 2sizesimplicity
size+simplicity
although the similarity merging is restricted to single-child nodes, our exper-
imental results show that the reduction achieved on the tree may be consider-
able. both simplication techniques (small components and similarity merging)
have been implemented and tested. the next section shows the eects of their
application on large models.
6 experimental results
all techniques presented in this paper have been implemented within prom
framework and are accessible through the jorgemunozgama package.7to test
performance we created various benchmarks generated by plgtool [18]8in this
section we rst highlight the empirical dierences with related conformance
checking approaches described in the literature and the partitioning-based pro-
posed in this paper. second, we provide some results on the application of the
topological graph algorithms. finally, we illustrate the eects of the simplica-
tion methods proposed on large models.
table 1 shows the ability to handle conformance problems of industrial size
using our approach. the experiment is composed of several large models (having
pplaces andttransitions), and their corresponding logs. for each benchmark,
the table contains the tness value ( f) and the time required for analyzing their
7download from http://www.promtools.org/prom6/nightly/ .
8http://dx.doi.org/10.4121/uuid:44c32783-15d0-4dbd-af8a-78b97be3de49conformance using the approach proposed in [9,11] ( t). dashes denote the lack of
results after 10 hours of computation. the rest of the table contains the results
of applying the same conformance technique over a 50, 100 or 200 sese-based
extended partitioning, respectively. for each k-partitioning the table provides
the number of parts ( sseses and bbridges), the number of non-trivial small
parts (>5) containing more than 5 arcs (threshold extracted from the study
in [4]), and the total time required for the tness analysis ( t). in addition, the
table shows the number of parts with a tness value lower than one (i.e., non-
ttingnf) and the percentage of arcs they represent within the whole model.
remarkably, the time required to compute the rpst and the k-partitioning is
negligible (i.e., never more than few seconds).
table 1: comparison between k-partitioning and [9,11].
[9,11] k= 50 k= 100 k= 200
p t f t s=b > 5 nf ts=b > 5 nf ts=b > 5 nf t
pram6 347 363 0.92 75 129/57 29 7(3%) 423 62/27 14 1(9%) 323 27/12 7 1(10%) 180
prbm6 317 317 1 88 93/38 22 0(0%) 608 66/29 14 0(0%) 318 36/16 8 0(0%) 114
prcm6 317 317 0.57 2743 93/38 22 58(92%) 189 66/29 14 41(94%) 185 36/16 8 22(96%) 502
prdm6 529 429 - - 105/34 33 5(8%) 1386 60/23 18 4(14%) 986 33/15 9 4(23%) 1284
prem6 277 275 0.97 3566 82/35 20 2(5%) 529 35/13 11 2(5%) 343 15/7 5 2(6%) 211
prfm6 362 299 - - 108/43 28 2(6%) 1667 57/23 15 2(21%) 863 21/9 5 1(23%) 562
prgm6 357 335 - - 94/37 25 2(8%) 867 67/31 15 2(8%) 850 51/25 11 2(8%) 474
table 1 shows that partitioning yields signicant speedups in case event logs
are not perfectly tting the model [9,11]. in cases with a perfect tting (e.g.,
prbm6) the time required for the proposed approach is higher, due the over-
head caused by creating and storing in memory the generated parts. however,
in real cases where the log is poorly tting the model, the time needed for con-
formance checking is reduced in one order of magnitude using k-partitioning.
more important, the proposed approach is able to tackle and provide confor-
mance information for those cases where [9,11] is not able to provide a result
(e.g., prdm6, prfm6 and prgm6).
table 1 also shows the capability of the proposed approach to detect and
isolate the subprocesses causing the tness problems. in particular, the approach
is able to identify those cases were all the tness problems are located in only
a few parts of the process, e.g., in prem6, all the tness problems of a net with
277 transitions can be restricted to 2 subprocesses that represent only the 5% of
the model. note that, although the number of parts generated by the approach
can be considered high, most of them are trivial parts with less than 5 arcs.
importantly, the number of large parts remains low, and its maximum size can
be controlled by the parameter kof algorithm 1.
the second experiment aims at illustrating the role of the topological graph.
figure 6 shows a graphical example on how the techniques of sec. 4 can be used
for diagnosis: given a large model having conformance problems (denoted in red),
algorithms nfwcc andnfncan be used to identify one subprocess with confor-
mance problems or a connected subnet including all the subprocesses with con-
formance problems, respectively. table 2 reports on the performance of these two
algorithms using the examples of the previous experiment.9for the experiments,
9only non-tting models of table 1 are considered in table 2.fig. 6: the 50-partition as a diagnosis tool for the prfm6 benchmark.
table 2: results of nfwcc andnfnalgorithms.
nfwcc nfn
p tjccjjvj jpj jtjjvjjpjjtj
pram6 317 317 7 1 2.1 3 14 15 14
prcm6 317 317 38 1.5 8.2 9.5 113 315 317
prdm6 529 429 5 1 9.4 9.4 31 55 52
prem6 277 275 2 1 1 2 31 29 40
prfm6 362 299 2 1 13 11 7 27 25
prgm6 357 335 2 1 16.5 14.5 5 34 29
we have considered the topological graph resulting from the 50-partitioning for
the dierent log-model combinations. for the nfwcc algorithm, the table con-
tains the number of non-tting weakly connected components ( jccj), the average
size (placesjpjand transitionsjtj) and average number of vertexes ( jvj) whose
connected components are composed of. for the nfnalgorithm, the table pro-
vides the size of the derived non-tting net ( jpjandjtj), and the number of
topology vertexes it includes. the table illustrates the benets of the proposed
algorithms to detect and isolate the tness mismatches. in case the tness prob-
lems are spread all over the whole model, the resulting net is almost the original
net (e.g., prcm6). however, when the tness problems are local, the net that
encloses all problem spots may be orders of magnitude smaller than the original
net, thus easing the diagnosis.
the nal experiment illustrates the eects of the simplication over the
rpst decomposition on the number of components and hierarchy levels. fig-
ure 7 shows the simplication of two models used in the previous experiments
of this section. for each model, the gure provides the number of components
(y-axis) at each level of the rpst tree (being 1 the root of the rpst, and 14
the deepest level). the gure contains the number components for the original
rpst, after removing the small components (less than 10 arcs), and after merg-
ingsimilar nested nodes (i.e., similarity degree over 0 :8). both charts reect the
dierence between the number of components on the original rpst and the one
after removing the small components, i.e., most of the rpst nodes are small.after removing small nodes the depth of the rpst only decreases two levels
(from 14 to 13). on the other hand, the eect on the depth after merging similar
nodes is high. in both cases, the number of levels of the tree is reduced signi-
cantly (from 12 to 6), providing a decomposition with less redundancy and more
aligned with human perception [4].
1 2 3 4 5 6 7 8 910 11 12 13 14
rpst 1 9 339 19133 53201 56211 40160 25 76
small 1 1 3 813 12 21 12 13 7 8 3
similar 1 3 915 23 23050100150200250prcm6  
(a) prcm6
1 2 3 4 5 6 7 8 910 11 12 13 14
rpst 1 7 215 840 21111 62328 127 501 73248
small 1 1 2 3 8 821 21 46 29 29 9
similar 1 2 512 33 660100200300400500600prdm6  (b) prdm6
fig. 7: eect of the simplication techniques.
7 conclusions and future work
the practical relevance of process mining increases as more event data becomes
available. more and more events are being recorded and already today's event
logs provide massive amounts of process related data. however, as event logs
and processes become larger, many computational challenges emerge.
in this paper, we presented an approach that makes use of the well-known
sese and rpst analysis to decompose the problem of conformance checking
and process diagnosis. the approach makes it possible to discover conformance
problems more eciently both in terms of computation and diagnostics. al-
though our experimental results support these claims, more real-life case studies
need to be conducted. for example, we would like to empirically show that the
diagnostics based on the topological graph are indeed more insightful because
the analyst can focus on the problem spots. moreover, the inclusion of other con-
formance dimensions into the approach, together with the possibility of tackling
invisible and duplicate transitions, is another direction for future work.
acknowledgments
the authors would like to thank dr. artem polyvyanyy for his comments and
help. this work has been partially supported by the ministerio de educaci on
(ap2009-4959) and by the projects tin-2011-22484 and tin-2007-66523.
references
1. van der aalst, w.m.p.: process mining: discovery, conformance and enhancement
of business processes. springer (2011)2. ieee task force on process mining: process mining manifesto. in daniel, f.,
barkaoui, k., dustdar, s., eds.: business process management workshops. vol-
ume 99 of lecture notes in business information processing., springer (2012)
169{194
3. polyvyanyy, a., vanhatalo, j., v olzer, h.: simplied computation and generaliza-
tion of the rened process structure tree. in bravetti, m., bultan, t., eds.: ws-fm.
volume 6551 of lecture notes in computer science., springer (2010) 25{41
4. munoz-gama, j., carmona, j., van der aalst, w.m.p.: hierarchical conformance
checking of process models based on event logs. in: applications and theory of
petri nets. tr: http://www.lsi.upc.edu/ ~techreps/files/r13-5.zip . (2013)
5. cook, j., wolf, a.: software process validation: quantitatively measuring the cor-
respondence of a process to a model. acm transactions on software engineering
and methodology 8(2) (1999) 147{176
6. de medeiros, a.k.a., weijters, a.j.m.m., van der aalst, w.m.p.: genetic process
mining: an experimental evaluation. data mining and knowledge discovery
14(2) (2007) 245{304
7. rozinat, a., van der aalst, w.m.p.: conformance checking of processes based on
monitoring real behavior. inf. syst. 33(1) (2008) 64{95
8. van der aalst, w.m.p., adriansyah, a., van dongen, b.: replaying history on
process models for conformance checking and performance analysis. wires
data mining and knowledge discovery 2(2) (2012) 182{192
9. adriansyah, a., van dongen, b.f., van der aalst, w.m.p.: conformance checking
using cost-based tness analysis. in: edoc, ieee computer society (2011) 55{64
10. weerdt, j.d., backer, m.d., vanthienen, j., baesens, b.: a multi-dimensional
quality assessment of state-of-the-art process discovery algorithms using real-
life event logs. information systems 37(7) (2012) 654{676
11. adriansyah, a., munoz-gama, j., carmona, j., van dongen, b.f., van der aalst,
w.m.p.: alignment based precision checking. in rosa, m., soer, p., eds.: busi-
ness process management workshops, international workshop on business pro-
cess intelligence (bpi 2012). volume 132 of lecture notes in business information
processing., springer (2013) 137{149
12. munoz-gama, j., carmona, j.: enhancing precision in process conformance:
stability, condence and severity. in chawla, n., king, i., sperduti, a., eds.:
ieee symposium on computational intelligence and data mining (cidm 2011),
paris, france, ieee (april 2011) 184{191
13. van der aalst, w.m.p.: distributed process discovery and conformance checking.
in lara, j., zisman, a., eds.: international conference on fundamental approaches
to software engineering (fase 2012). volume 7212 of lecture notes in computer
science., springer (2012) 1{25
14. van der aalst, w.m.p.: decomposing process mining problems using passages. in
haddad, s., pomello, l., eds.: applications and theory of petri nets 2012. volume
7347 of lecture notes in computer science., springer (2012) 72{91
15. van der aalst, w.m.p.: decomposing petri nets for process mining: a generic
approach. bpmcenter.org bpm-12-20, (accepted for distributed and parallel
databases) (2012)
16. murata, t.: petri nets: properties, analysis and applications. proceedings of the
ieee 77(4) (april 1989) 541{580
17. vanhatalo, j., v olzer, h., koehler, j.: the rened process structure tree. data
knowl. eng. 68(9) (2009) 793{818
18. burattin, a., sperduti, a.: plg: a framework for the generation of business process
models and their execution logs. in zur muehlen, m., su, j., eds.: business process
management workshops. volume 66 of lecture notes in business information
processing., springer (2010) 214{219