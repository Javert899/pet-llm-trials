decision mining revisited - discovering
overlapping rules
felix mannhardt1,2(b), massimiliano de leoni1, hajo a. reijers1,3,
and wil m.p. van der aalst1
1eindhoven university of technology, eindhoven, the netherlands
{f.mannhardt,m.d.leoni,h.a.reijers,w.m.p.v.d.aalst }@tue.nl
2lexmark enterprise software, naarden, the netherlands
3vrije universiteit amsterdam, amsterdam, the netherlands
abstract. decision mining enriches process models with rules underlying deci-
sions in processes using historical process execution data. choices between mul-
tiple activities are speciﬁed through rules deﬁned over process data. existing
decision mining methods focus on discovering mutually-exclusive rules, whichonly allow one out of multiple activities to be performed. these methods assume
that decision making is fully deterministic, and all factors inﬂuencing decisions
are recorded. in case the underlying decision rules are overlapping due to non-determinism or incomplete information, the rules returned by existing methods
do not ﬁt the recorded data well. this paper proposes a new technique to discover
overlapping decision rules, which ﬁt the recorded data better at the expense ofprecision, using decision tree learning techniques. an evaluation of the method on
two real-life data sets conﬁrms this trade off. moreover, it shows that the method
returns rules with better ﬁtness and precision in under certain conditions.
keywords: decision mining
·process mining ·overlapping rules
1 introduction
organizations use process models representing their business processes for multiple
reasons. process models are used, for example, to document, specify, and analyze
processes [ 1]. generally, process models depict activities (i.e., units of work) and their
dependencies in a graph representation, which speciﬁes the order of activities in theprocess execution. during the execution of non-trivial processes, next to the order-
ing of activities, decisions between multiple alternative activities needs to be made.
those choices are explicitly modeled in process models as so-called decision points .
a decision point speciﬁes the alternatives available. an important challenge when using
process models is to understand the decision that need to be made in a process, and
the conditions under which certain alternative activities are performed. awareness thatmodeling and analyzing decisions is key in process management is increasing. see for
the work of dr. de leoni has received funding from the european community’s seventh
framework program fp7 under grant agreement num. 603993 (core).
c/circlecopyrtspringer international publishing switzerland 2016
s. nurcan et al. (eds.): caise 2016, lncs 9694, pp. 377–392, 2016.doi: 10.1007/978-3-319-39696-5
23378 f. mannhardt et al.
fig. 1. fragment of a process model taken from a road trafﬁc ﬁne management process with
overlapping rules governing an exclusive choice based on the payment of the ﬁne.
example the interest in the decision model and notation (dmn) standard [ 2] supported
by vendors such as signavio and camunda.
process mining methods are able to discover process models with decision points by
using event logs. event logs contain information on performed activities (i.e., sequences
of events) and are available in today’s information systems [ 1].decision mining aims
to discover the rules that are underlying those decisions. those rules are determinedusing data recorded by information systems that support the process [ 3,4]. events in
event logs used for decision mining need to contain process data, which was available
when the activity was performed (i.e., attributes). take, for instance, the process modelfragment depicted in fig. 1, which shows a simpliﬁed fragment of a road-trafﬁc ﬁne
management process [ 5]. after creating a ﬁne notice ( create fine ) and recording
the amount ( amount ), an exclusive choice between three alternatives has to be made.
either a payment is received ( payment ), possibly in multiple installments, the ﬁne is
closed ( close fine ), or the police sends a ﬁne notice ( send fine ) and the process
continues with further management of the ﬁne. please note, that only one out of these
three alternatives can be taken, which is different to an inclusive choice that allows
the execution of multiple alternatives. the rules depicted in fig. 1drive this choice.
activity close fine can only be executed if the value of attribute status ispaid .
thus, the process can only ﬁnish directly if the ﬁne has been paid in a timely manner.
rules deﬁned over the process data are an integral part of this process. traditionally,decision mining methods [ 3,4,6] use decision tree learning techniques such as c4.5 [ 7]
to determine rules governing the process execution based on event logs. for example,
attribute values recorded for status andamount are used as feature , while the choice
between payment ,send fine ,close fine is used as target class . then, mutually
exclusive rules for each activity are built using the obtained decision tree, thus, the
choice at the decision point is completely determined by the values of status and
amount .
existing decision mining techniques for exclusive choices rely on the strong
assumption that the rules attached to the alternative activities of a exclusive choice needto be mutually exclusive . however, business rules are often non-deterministic and this
“cannot be solved until the business rule is instantiated in a particular situation” [8].
this ambiguity can occur due to conﬂicting rules or missing contextual information [ 8].
for example, decisions taken by process workers may depend on contextual factors,
which are not encoded in the system and, thus, not available in event logs. moreover,
even if those factors are encoded in the system event logs are often incomplete [ 9].
without complete information in the event log the mutually exclusive rules underlyingdecision mining revisited - discovering overlapping rules 379
decision-making cannot be discovered. hence, this assumption is typically not met in
reality. for example, the process model shown in fig. 1, which is taken from a real-
life process, contains overlapping rules for an exclusive choice. this means that on a
decision point more than one of multiple activities may be executed under the same con-
dition, i.e., when the same attribute values have been observed beforehand. in case thepayment status isunpaid , the choice between payment andsend fine is deferred,
i.e., an unpaid ﬁne can be either paid directly or a notiﬁcation is sent to the offender.
the actual decision between either of those activities is not speciﬁed. it might dependon an unavailable contextual factor, e.g., some ﬁnes can be paid on-the-spot depending
on the context. please note that an exclusive choice with overlapping rules is different
to an inclusive choice, which, for certain process executions, prescribes multiple alter-natives activities to be executed. for example, in case of an inclusive choice, if status
isunpaid , both payment and send ﬁne are prescribed to occur. state of the art tech-
niques [ 3,4,6] only use decision trees, and, hence, cannot discover overlapping rules on
exclusive choices. for instance, current techniques fail to discover the rule in fig. 1.
this paper proposes a technique that discovers overlapping rules in those cases that
the underlying observations are characterized better by such rules. the technique is able
to deliberately trade the precision of mutually-exclusive rules, i.e., only one alternative
is possible, against ﬁtness, i.e., the overlapping rules that are less often violated. inshort, as in [ 3,4,6], our technique builds an initial decision tree based on observations
from the event log. then, for each decision tree leaf, the wrongly classiﬁed instances
are used to learn a new decision tree leading to new rules. these new rules are used indisjunction with the initial rules yielding overlapping rules of the form rule
1∨rule 2.w e
evaluate our technique on two real-life data sets: an event log taken from a road trafﬁc
ﬁne management process and an event log with pathways of patients in a hospital. theevaluation shows that our technique discovers overlapping rules in real-life data, and
that those rules provide a better balance in terms of ﬁtness and precision. for example,
our technique discovers overlapping rules similar to the ones depicted in fig. 1, whereas
traditional method fail, e.g., to discover a rule for activity payment .
as to the structure of this paper, we introduce necessary formalisms for process
models and event logs (sect. 2). then, we present our discovery technique for process
models with overlapping rules (sect. 3). we evaluate our technique based on real-life
event logs (sect. 4). we discuss related work (sect. 5), and conclude with a summary
and sketched future work (sect. 6).
2 background
we present necessary preliminaries such as the formalism we use to represent process
models and event logs, and criteria used to determine the quality of decision rules.
2.1 process model
generally, our decision mining technique is independent of the formalism used to model
the process, e.g., bpmn, uml-activity diagrams, epcs or y awl. we choose data
petri nets (dpn) [ 4] as modeling language because it has simple and clear semantics.380 f. mannhardt et al.
adpn is a petri net [ 10] that is extended with variables (i.e., data attributes). a petri
net consists of a set of places ,as e to f transitions and the ﬂow relations that describe
the bipartite graph between places and transitions. transitions correspond to activities
in the process. the state of a petri net is deﬁned by its marking. the marking of a
petri net assigns a number of tokens to each place. executing a transition consumes onetoken from each of its input places and produces one token on each of its output places.
we denote with output transitions of a place the set of transitions for which there is a
directed edge from the place to those transitions. a transition can only can be executed(ﬁred) when there is at least one token in every input place.
a dpn is a petri net with additional components: a set of variables deﬁned
over a universe of possible values; a set of write operations for each transition; a
guard expression (guard) for each transition. transitions update the values of vari-
ables through write operations. furthermore, guards deﬁned over the variables of the
dpn further constrain when transitions may be executed. a transition in a dpn can be
executed only if all its input places contain at least one token and the guard is satisﬁed
by the current variable assignment. unless speciﬁed otherwise we assume the guardtrue for each transition, i.e., the transition can ﬁre regardless of the current variable
assignment. the state of a dpn is deﬁned by both the marking and the current values
of all its variables. the behavior of a dpn corresponds to all sequences of transitionﬁrings starting from an initial state to any ﬁnal state. the initial state is made of the
initial marking, i.e., the initial number of tokens in each place and an empty set of vari-
able values. final states are all ﬁnal markings. for sake of space we refer to [ 5]f o ra
comprehensive introduction to dpns.
example 1. figure 1shows a simpliﬁed process in the dpn notation. the process starts
with executing transition create fine , which writes attribute status . when execut-
ing transition create fine a token is removed from the place source and a new token
is put in place p
1. now, a choice between the output transitions of p1,payment ,send
fine , and close fine , has to be made. therefore, place p1is called decision point .
as there are guards placed on all three transitions their enablement depends on the
current assignment of attribute status . for example, both transitions send fine and
payment can only be executed when status isunpaid . as the guards of send fine
andpayment overlap, the choice between both transitions is non-deterministic. assum-
ing transition create fine assigned the value paid tostatus , i.e., the ﬁne has been
paid directly, then, only transition close fine can be executed and the process ends
by reaching the ﬁnal marking of the dpn.
2.2 event log
an event log stores information about the executed activities in a process [ 1]. given a
set of transitions, variables, and variable values, we deﬁne an event log eas a collection
of unique events [1,11]. each event e∈eis associated with a set values (e)containing
the latest values of all attributes recorded before the event occurred starting with an
initial value. moreover, each event refers to the execution of a transition trans (e)and
the set of variables that are written by event eis obtained by writes (e). table 1shows
an event log for the process model introduced in fig. 1. each row represents a uniquedecision mining revisited - discovering overlapping rules 381
table 1. event log ewith data attributes status andamount
idcase acti vity status amo unt
e113 0
e21-
e31- -
e423 0
e52- -e633 0
e73-
e83
 --
... ... ... ...
recorded activity execution (i.e., event) together with the produced data (i.e., attributes).
special attributes like an id, the case identiﬁer case , and the activity name activity are
recorded for each event. the location of an event in the case, i.e., the order in which theevents occurred, is uniquely identiﬁed through the idattribute.
example 2. for the example event log in table 1we can determine the transition cor-
responding to event e
2astrans (e2)=payment . moreover, we can obtain the value of
all attributes at the moment when e2occurred as values (e2)=( ( status =unpaid ),
(amount =30)). finally, the variables written by e2arewrites (e2)={status }.
2.3 quality criteria - fitness and precision
we use two criteria to determine the quality of the guards deﬁned on the output transi-
tions of place pof a dpn given an event log e: place ﬁtness and place precision. we
denote the set of events for transitions in the output transition of a place pwith ep, i.e.,
e∈eifftrans (e)is an output transition of p. we deﬁne the place ﬁtness of a place
based on the number of events in epfor which the guard is violated:
ﬁtnesse,p=1−/vextendsingle/vextendsingle{e∈ep|guard of trans (e)is violated }/vextendsingle/vextendsingle
/vextendsingle/vextendsinglee
p/vextendsingle/vextendsingle
the place ﬁtness linearly decreases with an increase of the fraction of output transi-
tions that ﬁre violating the respective guard. the place precision of a place pis deﬁned
as is based on the possible behavior at pdeﬁned by the dpn, and actual behavior
observed in ep. we use functions posp:e→ nandobs p:e→ nreturning the pos-
sible and observed executions of output transitions of place pbefore event eoccurred.
work [ 12] describes how to obtain values for pospandobs pgiven an event log and a
dpn. using pospandobs p, we deﬁne the place precision as:
precisione,p=∑e∈ep/vextendsingle/vextendsingleobs p(e)/vextendsingle/vextendsingle
∑e∈ep/vextendsingle/vextendsingleposp(e)/vextendsingle/vextendsingle
given a data set that allows for precise disjunctive guards, the place precision gets
lower when guards on the output transitions are more overlapping.382 f. mannhardt et al.
3 discovery of dpn with overlapping decision rules
given an event log containing information about process executions and a process
model, the problem of decision mining can be regarded as that of discovering a dpn
that characterizes the process: given a petri net, we aim to discover the variables, writeoperations and guards of a dpn. without loss of generality, we assume that event log
eis deﬁned over the same transitions, variables and universe of values as the dpn.
furthermore, we make four assumptions on the input event log e. first, we assume
that ignoring the variables, all recorded process instances are compliant with regard
to the process represented by the petri net. second, for each event e∈ethe executed
transition can be uniquely determined, i.e., there are no unobservable transitions andeach event can be uniquely mapped onto a single transition of the model. third, we
assume that events write attributes consistently, i.e., if an event writes an attribute v
then all other events corresponding to the same transition also write attribute v. fourth,
we assume an initial value for each attribute. we show later in sect. 3.3that any event
log can be transformed to an event log fulﬁlling these assumptions.
we discover the write operations of the dpn as follows. for each transition tof the
petri net, variable vis written by transition tif there exists an event e∈e:trans (e)=t
that assigns a value to variable v(i.e., v∈writes (e)). we discover the guards for each
transition tas described the next sect. 3.1.
3.1 overall discovery procedure
for each decision point p(i.e., places with more than two output transitions) we con-
struct a set of observation instances related to pto be used to discover the guards. given
as e t x, we denote the set of all multi-sets over a set xwith b(x). moreover, we use
notation x=[a
2,b]as short-hand notation to denote the multi-set x=[a,a,b]. finally,
we use/unionmultitextto denote the sum of two multi-sets, i.e., x/unionmultitext[b,c]=[a2,b2,c].
deﬁnition 1 (observation instances). let v be a set of variables and let u be a uni-
verse of possible values. let p be the set of places of a petri net and let p ∈pb ea
decision point. we denote with p•={t1,..., tm}the output transitions of p. function
i∈p→ b((v→u)×t)returns the multi-set of observation instances for p:
i(p)=/unionmultidisplay
e∈e,trans (e)∈p•[(values (e),trans (e))]
for each event e∈ethat refers to an output transition of p, i.e., trans (e)∈p•,t h e
set of observation instances of pcontains an instance (x,t)∈i(p), with x∈(v→u)
being the observed values of the attributes, and tthe observed transition. the values of
xare obtained by taking the latest observed value for the attributes in preceding events.
example 3. given the process model introduced in example 1and the event log e
introduced in example 2the multiset of observation instances for place p1isi(p1)=
[((status =unpaid ,amount =30),payment )2,((status =unpaid ,amount =30),
send fine )2,((status =paid ,amount =30),close fine )].decision mining revisited - discovering overlapping rules 383
algorithm 1. discoverguards
input : petri net (places p, transitions t), compliant event log ( e), minimum instances ( ν), merge ratio ( ε)
result : guards of the dpn g)
1foreach p∈ps . t .|p•|>1doψp←buildestimator( p,i,ν·|i(p)|,ε)
2foreach t∈tdo
3 g(t)←true
4 foreach p∈•tdog(t)←g(t)∧ψp(t)
5end
6return g
algorithm 1describes the overall discovery method for the entire petri net. using
the observation instances ip, we build the guard function ψpfor each decision point
p∈pthrough function buildestimator . having obtained the guard function, we
assign each transition the conjunction of all rules obtained from their input places [ 4].
function buildestimator is described in the next sect. 3.2.
3.2 discovering overlapping rules
whereas the construction of the observation instances i(p)and the overall discovery
procedure share similarities with the previous work [ 4], our technique considerably
differs in how the actual rules are obtained through function buildestimator .o u r
contribution is a new algorithm that discovers guards that may be partially overlapping,i.e., two or more transitions may be enabled for some state reachable in the dpn. we
now describe how to compute function buildestimator , which discovers overlapping
guards for place pgiven the observation instances i(p)and two user-deﬁned parame-
ters, the minimum number of instances nand the merge ratio
ε. as our approach makes
use of decision trees, we introduce the concept of decision tree builder.
deﬁnition 2 (c4.5 decision tree builder). let t be a set of transitions. let o =
b((v→u)×t)be a multi-set of observation instances over a set v of variables with
values u. let n ∈nbe the minimum number of instances on a leaf for the splitting
criterion in the decision tree induction. let f(v)be the universe of formulas over
variable v . function buildtree n(o)∈2f(v)×treturns the leaves of a c4.5 decision
tree built using the supplied set of instances. a leaf (expr ,t)∈buildtree n(o)predicts
transition t ∈t under condition expr ∈f(v).
the rule for a leaf of the decision tree is obtained by taking the conjunction of all
conditions represented by those nodes that are encountered on a path from the leaf
up to the root node [ 4]. as in [ 4], abase decision tree basetree =buildtree n(i(p))
is ﬁrst built. we obtain the initial guard of transition tby taking the disjunction of all
rules predicting t:
ψ(t)←/braceleftbigg/logicalortext
(expr ,t)∈basetree (expr )if∃expr/primes.t. (expr/prime,t)∈basetree
false otherwise
for each leaf l=(expr ,t)of the base decision tree, we extract those instances ¯il
that have been wrongly classiﬁed by the base classiﬁer: ¯ilcontains all those instances384 f. mannhardt et al.
(x,t/prime)∈i(p)such that the predicted transition t/primeis different from the transition tin
leafl, i.e., t/prime/negationslash=t. next, we build an new decision tree subtree based on ¯ilfor each
leaf, i.e., subtree =buildtree n/prime(¯il). since the size of ¯ilcan be signiﬁcantly smaller
than that of i, we scale down the parameter nton/prime=n·|¯il|/|i|. the idea is that the
second decision tree subtree lcanfurther discriminate between the observed transitions
among the wrongly classiﬁed instances, thus, possibly introducing partial overlap with
the existing rule. there are two possible cases:
1. a decision tree with more than one leaf is found: |subtree l|>1;
2. a single-node decision tree with a single leaf (true ,t/prime):subtree l=(true ,t/prime)
in the ﬁrst case , we build rules for each leaf l/prime=(subexpr ,t/prime)∈subtree lby taking
the conjunction of the rule expr from leaf lof tree basetree and the newly discovered
rule subexpr . we obtain the new guard of transitions t/primeby adding newly discovered
rules in disjunction to the existing ones:
ψ(t/prime)←ψ(t/prime)∨/logicalordisplay
(subexpr ,t/prime)∈subtree l(expr∧subexpr ).
in the second case the decision tree represents a majority vote, i.e., the transition
that was most often observed within the wrong instances is predicted. in this case we
add rule expr to the existing guard ψ(t/prime), i.e., ψ(t/prime)←ψ(t/prime)∨(expr ), but only if two
conditions are met that avoid overﬁtting the data. first, |¯il|>n, and, second, the fraction
of observation instance in ¯ilreferring to t/primeis larger than the user-speciﬁed merge ratio
ε. finally, we assume that all transitions for which no rule could be found are always
enabled. for a formal discussion of our algorithm refer to the technical report [ 13].
fig. 2. two decision trees that are discovered on the example data set. the number of instances
is written in the root node (rectangle). the number of wrongly and correctly predicted instances
is written next to leaf nodes (circle)
example 4. given the multi-set of observations for place p1obtained from the events
given in table 1, we build the guard estimation functions for each output transition of
p1. first an initial decision tree is built. assume that this initial decision tree consists of
two leafs l1=(status =paid ,close fine )andl2=(status =unpaid ,send fine )
as shown in fig. 2. ten of the 30 instances classiﬁed as close fine are wrongly clas-
siﬁed. in all those instances transition payment was observed. those wrongly classi-
ﬁed instances give evidence that also transition payment is performed when status
isunpaid . as depicted on the right-hand side of fig. 2an additional decision tree is
built for those 10 instances. as the set of wrong observation instances ¯il2only contains
instances for transition payment , the additional decision tree only consists of one leafdecision mining revisited - discovering overlapping rules 385
that always predicts transition payment by majority vote. if the user-deﬁned thresh-
oldnis below the number of wrongly classiﬁed instances/vextendsingle/vextendsingle¯il2/vextendsingle/vextendsingle=10, then, the condition
status =unpaid will be added to the guard function of payment . the same rule as
shown in fig. 1is then discovered. please note that this example is deliberately simpli-
ﬁed. in a real-life setting event logs contain more than two attribute and, therefore, theadditional decision would consist of multiple leafs.
3.3 dealing with real-life event logs
in sect. 3we have made several assumptions to explain the key idea: the event log ﬁts
the petri net perfectly, the set of attributes written by an event is consistent throughout
the log, and every attribute value is initialized in the event corresponding to the ﬁrsttransition. generally, real-life event logs do not satisfy this requirement. however, we
can deal with these issues as shown next.
non-compliant event log and duplicate transitions. an event log might contain
events that cannot be matched reliably to a single transition in the dpn (e.g., in pres-
ence of noise or duplicate transitions). similarly, for some transitions that are requiredaccording to the model no event has been recorded (e.g., when the recording is incom-
plete or for invisible routing transitions). therefore, it might not be possible to deter-
mine trans (e)for every event e∈e.u s i n g alignment-based techniques such as [ 5,11]
we can determine a closest corresponding process trace , i.e., the sequence of transition
executions leading to a ﬁnal state of the dpn, for each log trace .w o r k[ 4]u s e st h e
same technique to deal with non-compliant event logs and shows that for reasonablycompliant event logs the error introduced by such an alignment is negligible.
inconsistent attributes. in sect. 3, we restricted the set of write operations for a transi-
tion to those variables that are consistently given a value by every event eintrans (e).i n
real-life logs attribute values can be missing due to temporary recording errors leading
to an inconsistent recording of attributes for some transitions. moreover, the alignment-
based techniques might need to introduce artiﬁcial events with missing attribute values.
therefore we introduce a user-deﬁned threshold kl i k ei n[ 4], but add a way to deal with
missing values to it. a variable vis added to the set of write operations of a transition
twhen the variable is observed to be given a value by k% of the events eoft(i.e.,
trans (e)=t). as a result, attributes might be missing from the set of attributes written
for an event e∈e.e v e r yt i m ea ne v e n t edoes not assign a value to variable veven
though it should, we assume its value values
(e)(v)to be/diamondmath. symbol /diamondmathindicates that the
value is missing . the c4.5 algorithm can deal with such missing values.
unassigned attributes. decision trees cannot deal with uninitialized attributes (similar
tonull values in databases). in real-life event logs, attributes might be uninitialized if
some of the ﬁrst events of the log’s traces do not assign a value to all attributes. this
issue can be mitigated by deﬁning default values that are used when attribute have nottaken on values yet. as an example, let us assume an attribute approval with two
literal values assigned by events: noandyes. as default value, we can introduce a third
possible value unknown , make it possible to discover rules approval =unknown .386 f. mannhardt et al.
4 evaluation
we evaluate our technique using two real-life data sets, and compare the obtained results
to standard methods like decision tree induction algorithms. an implementation of our
technique is available in the multiperspectiveexplorer [14] package of the open-source
process mining framework prom.
4.1 evaluation setup
approaches. we compared the performance of our approach expressed in terms of
place ﬁtness and place precision with three other methods. we choose two methods at
the extreme ends of the respective measure, and one method that na ¨ıvely introduces
overlap. in total, we compared the following four approaches:
wo. the model without rules, i.e., the guard true is used for all transitions. this
results in a perfect place ﬁtness, no guard is violated.
dtf. the model with rules discovered by a decision tree as in work [ 4]u s i n g false
as guard for transitions that are not observed in the tree. this method will always
result in a perfect place precision as there is only one enabled transition.
dtt. the model with rules discovered by a decision tree as in work [ 4]u s i n g true
as guard for transitions not observed in the tree. this method na ¨ıvely introduces
overlap by enabling all those transitions.
dto. the model with rules discovered by the approach reported on in this paper as
described in sect. 3.1.
the dtf and wo methods are at the extreme ends of the respective measures. our
approach aims at providing better place ﬁtness (i.e., less violated guards) at the expense
of some place precision (i.e., multiple enabled transitions). therefore, our approachshould provide better place ﬁtness than the dtf method together with better place
precision than the a model without rules (wo). method dtt is included to investigate
whether our approach improves over a na ¨ıve method to introduce overlap.
event logs and process models. we used two anonymized real-life data sets: road
ﬁnes andsepsis . the road ﬁnes event log was taken from an information system han-
dling road-trafﬁc ﬁnes by an italian local police force [ 15]. the road ﬁnes log contains
more than 150,000 cases with approximately 500,000 events. there are 9 data attributes
recorded including the ﬁne amount and the payment amount. the sepsis event log con-tains events about the pathways of patients within a hospital that have a suspicion for
sepsis, a life threatening condition typically caused by an infection. this event log con-
tains data recorded during a full year resulting in 1056 cases with about 15,000 events.there are 39 data attributes recorded, e.g., the results of blood tests and information
about the patient from checklists ﬁlled in by nurses. for both event logs, we obtained
a normative process model of the control-ﬂow, thus, without any guards. we used the
control-ﬂow of the process model presented in [ 5] for the road ﬁnes data set. for the
sepsis data set, we created a model with help of domain experts from the hospital. bothmodels allow for most the behavior observed in the logs, but are lacking precision.decision mining revisited - discovering overlapping rules 387
we checked this using the ﬁtness measure deﬁned for dpns in work [ 5] (road ﬁnes:
99.7 %, sepsis: 98.6 %) and the precision measure for dpns proposed by [ 12] (road
ﬁnes: 63.9 % , sepsis: 16.5 %). therefore, both models are good candidates for adding
precision through discovered rules.
experimental design. we performed experiments for every decision point for the road-
ﬁnes and sepsis models, with the exception of four decision points of the sepsis model
for which no technique was able to discover rules. we use the c4.5 implementationof the weka toolkit with the pruning feature activated; the merge ratio
εwas set to
0.5 in all experiments. for each technique, we used 10 different values of minimum
number of instances (mininstances ) parameter that were equally distributed within
a certain interval, which is determined as follows. the smallest value of the interval
was chosen such that the discovered guards were not composed by more than 7 atoms.
this choice was based on the assumption that guards with more than 7 atoms are too
complex and humanly unreadable and, hence, of no business value. the upper bound
of the interval was the smallest value that could still return a rule, i.e. larger valueswould return no rules. in fact, a too large value of the mininstances parameter would
constrain the decision tree to be representative of so many instances that no reliable rule
can be returned. it is worth observing that the interval potentially changed with varyingthe decision point and the technique (dto, dtt and dtf) being considered.
4.2 results and discussion
we conducted the experiments and recorded the obtained place ﬁtness and place preci-
sion for 15 places and 10 parameter settings
1. the boxplot in fig. 3shows the results.
in the following paragraphs, we compare our method to the three other approaches.
fig. 3. place ﬁtness and local precision achieved by the proposed method (dto) compared to the
standard decision tree classiﬁer (dtf), and the model without guards (wo)
1the data used for the evaluation is available under http://purl.tue.nl/844997340832257 .f o r
conﬁdentiality reasons we cannot share the sepsis event log.388 f. mannhardt et al.
dto vs. wo. compared to wo, the results from our experiment (fig. 3(b)) show
clearly that dto provides rules that increase the place precision against the processmodel without guards. the large spread of the obtained place precision indicates that,
for some decision points and some parameter settings, our approach deliberately trades
precision to obtain better ﬁtting guards. this result is in line with the expectation thatour approach returns overlapping rules that lose some precision for a better ﬁtness.
dto vs. dtf . the experimental results show that dto discovers decision rules that
lead to a better place ﬁtness than the rules discovered by dtf (fig. 3(a)) with, on aver-
age, a limited trade-off for lower precision. the outliers for dto in fig. 3(a) deserve
some discussion. we inspected them and found that for some combinations of parame-ter settings and places, our approach failed to discover overlapping guards. it discovers
the exact same rules as returned by dtt. mostly, this happens for decision points with
only two outgoing transitions and high settings of the mininstances parameter. this
can be expected, as for decision trees with instances from two classes {a,b}the wrong
instances on a leaf l=(expr ,a)predicting transition acan only belong to the other
transition b. therefore, our approach will not discover a second decision tree with leafs
predicting b, but rather use rule expr from leaf lfor the majority vote transition b.
our approach only allows this if the number of instances for bis above the setting of
themininstances parameter. therefore, for high settings of mininstances and deci-
sion points with two outgoing transitions our approach is unlikely to improve over the
normal decision tree classiﬁer approach.
dto vs. dtt. we also compare dto against dtt, which na ¨ıvely assumes the guard
true for transitions that are not predicted by the decision tree. for this comparison,
we compare the results for decision points with more than two outgoing transitions,
|p
•|>2, as the results obtained through dtt differ from the results of dtf only for
those decision points. figure 4(b) shows the ﬁtness and precision for those places aver-
aged over 10 parameter settings as discussed in sect. 4.1. each place is given a name for
reference. the results in fig. 4(b) show that dto is able to discover overlapping guards
that ﬁt the observations better: for all of the considered decision points, the decision
fig. 4. average place ﬁtness and place precision achieved by the dto method compared to the
dtt method. only decision points with more than two choices are shown.decision mining revisited - discovering overlapping rules 389
rules returned by our approach increase the place ﬁtness against those rules returned
by dtt. furthermore, the results show that for all except one decision point our app-roach discovers rules with higher place precision. in other words, it discovers more
precise guards without loosing ﬁtness. in fact, for decision point s-p31 our approach
obtained an average place precision of 0 .58 whereas the rule returned by the dtt app-
roach scores only 0 .26. our approach discovers guards for all six outgoing transitions
whereas dtt only discovers guards for three transitions. on the remaining three dtt
uses true as a guard, i.e., always enabled. the only decision point for which dto
obtains a worse precision score than dtt is s-p15 . our approach discovers guards that
correspond to true for all three alternatives. however, this is not necessarily a bad rep-
resentation of the observed data. in fact, the guards discovered by dtt cause the lowestplace ﬁtness in our experiment 0 .65, i.e., the discovered guards are wrong in one third
of the cases.
example. figure 5shows a part of the dpn that we used for the sepsis data set.
table 2shows the guards discovered by dtf, dtt and dto, the approach presented
in this paper, for the three alternative activities on decision point s-p5 . all rules are
based on two attributes: lactate (l) and hypotensie (h). dtf discovers the rule
that patients with a lactate measurement (i.e., l>0) are generally admitted to normal
care and patients without lactate measurement ( l≤0) leave the hospital. the guard for
the admission to intensive care is returned as false . this leads to the situation where
patients are never admitted to intensive care even if it is part of the model and observed.obviously, this cannot be correct. dtf is unable to ﬁnd a mutually-exclusive rule that
includes this alternative activity given the information recorded in the event log. dtt
discovers the same rules but na ¨ıvely assumes the guard true for admission to inten-
sive care. clearly, the dtt results are not satisfying as dtt would convey no rules
about the admission of patients to intensive care. our approach - dto - discovers that
patients with a lactate measurement ( l>0) can always be admitted to normal care. as
an alternative to normal care, if attribute h=true then patients can also be admitted to
intensive care; otherwise, if h=false patients leave the hospital. the guards for the
activities overlap and the ﬁnal decision is likely to be made on the basis of contextual
factors, which are not encoded in the event log.
fig. 5. fragment of the process model used for the sepsis data set. after a triage form is ﬁlled,
infusions are given and blood tests are taken patients are admitted to normal care, intensive care,or not admitted (skip). two relevant attributes are recorded: lactat (l)a n d hypotensie (h).
limitations and threats to validity. the results show that our technique is successful
in uncovering overlapping rules in processes from event logs, and that these rules pro-
vide in some cases a much better characterization of the observed behavior. still, the390 f. mannhardt et al.
table 2. guards discovered by the compared approaches at decision point s-p5
approach normale care intensive care not admitted
dtf l>0 false l≤0
dtt l>0 true l≤0
dto l>0 l>0∧h=true (l>0∧h=false )∨l≤0
proposed technique has some limitations and we evaluated our technique using only
two real-life event logs. more experimental validation using event logs from differentsettings is required. an inherent limitation of our approach is that it can only use the
majority vote to introduce overlapping guards for a decision point with two output tran-
sitions. this might cause the guard of one transition to be turned into the rule true ,
e.g. when the initial guards were based on a single condition. our approach tends to
discover guards that are more complex: guard may become unreadable if algorithm’s
parameters are not carefully chosen.
5 related work
there are several approaches for decision mining given an event log with historicaldata about the process [ 1,3,4,6,16–21]. in all of these approaches, the decision-mining
problem is translated into a classiﬁcation problem, and solved using classiﬁcation analy-
sis techniques such as c4.5 [ 7]. however, every approach only discovers mutually-
exclusive rules. most related from the traditional classiﬁcation ﬁeld to our approach
is work about multi-label classiﬁcation [ 22,23]. in a multi-label classiﬁcation problem
classes are not mutually exclusive, instances can be labeled with multiple classes, andthe goal is to ﬁnd the correct set of classes for unseen instances. our setting is still differ-
ent as we deal with instances that are only associated with one class, i.e., the executed
transition. so, there is no work about discovering overlapping rules in the context of
process models. classiﬁer chains methods are the closest to our work. they decompose
the problem into multiple binary classiﬁcation problems, one for each label [ 24]. this
method assumes that instances are labeled with multiple classes. also related to our
work are methods for association rule mining [ 25]. the main problem of association-
rule mining is that a potentially large set of rules is usually returned, failing to provideinsights that are easy to interpret.
6 conclusion
we propose a new technique for the discovery of overlapping rules in process models
using event data. existing techniques only return rules that assume completely deter-
ministic decisions. this assumption rarely holds in reality. our technique is the ﬁrst
proposal of a discovery technique that introduces overlapping rules. the technique aims
to create process models that trade the precision of mutually-exclusive rules for the ﬁt-
ness of overlapping rules when the observed behavior gives evidence to such rules.decision mining revisited - discovering overlapping rules 391
the evaluation using several real data sets shows that our technique is able to produce
models with overlapping rules that ﬁt the observed behavior better without loosing toomuch precision. for some decision points, with more than 2 alternative activities, our
technique returns rules that are both more ﬁtting and more precise than the existing
method [ 4]. as future work, we aim to investigate the application of other machine-
learning techniques to decision mining. moreover, we want to address limitations of
decision mining techniques for data sets with imbalanced distributions of classes. we
found that our technique helps to reveal rules when one transition is only observed fora small fraction of the cases, but a more thorough investigation of this phenomenon is
needed.
references
1. van der aalst, w.m.p.: process mining - discovery, conformance and enhancement of busi-
ness processes. springer, heidelberg (2011)
2. object management group (omg): decision model and notation (dmn) version 1.0,
formal/2015-09-01 (2015)
3. rozinat, a., van der aalst, w.m.p.: decision mining in prom. in: dustdar, s., fiadeiro, j.l.,
sheth, a.p. (eds.) bpm 2006. lncs, vol. 4102, pp. 420–425. springer, heidelberg (2006)
4. de leoni, m., van der aalst, w.m.p.: data-aware process mining: discovering decisions in
processes using alignments. in: sac 2013, pp. 1454–1461. acm (2013)
5. mannhardt, f., de leoni, m., reijers, h.a., van der aalst, w.m.p.: balanced multi-
perspective checking of process conformance. computing 98(4), 407–437 (2016)
6. grigori, d., casati, f., castellanos, m., dayal, u., sayal, m., shan, m.c.: business process
intelligence. comput. ind. 53(3), 321–343 (2004)
7. quinlan, j.r.: c4.5: programs for machine learning. morgan kaufmann publishers inc.,
san francisco (1993)
8. rosca, d., wild, c.: towards a ﬂexible deployment of business rules. expert syst. appl.
23(4), 385–394 (2002)
9. bose, r.p.j.c., mans, r.s., van der aalst, w.m.p.: wanna improve process mining results?
in: ieee symposium on computational intelligence and data mining, pp. 127–134 (2013)
10. desel, j., esparza, j.: free choice petri nets. cambridge university press, new york (1995)11. van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on process
models for conformance checking and performance analysis. wiley interdiscip. rev. data
min. knowl. discov. 2(2), 182–192 (2012)
12. mannhardt, f., de leoni, m., reijers, h.a., van der aalst, w.m.p.: measuring the precision
of multi-perspective process models. in: business process management workshops - bpm2015 (2015, to appear)
13. mannhardt, f., de leoni, m., reijers, h.a., van der aalst, w.m.p.: decision mining revisited -
discovering overlapping rules. technical report, bpmcenter.org, bpm center report bpm-01-06 (2016)
14. mannhardt, f., de leoni, m., reijers, h.a.: the multi-perspective process explorer. in: bpm
demo session 2015, vol. 1418, pp. 130–134. ceur-ws.org (2015)
15. de leoni, m., mannhardt, f.: road trafﬁc ﬁne management process. eindhoven university
oftechnology. dataset (2015). doi: 10.4121/uuid:270fd440-1057-4fb9-89a9-b699b47990f5
16. jareevongpiboon, w., janecek, p.: ontological approach to enhance results of business
process mining and analysis. bus. process. manag. j. 19(3), 459–476 (2013)392 f. mannhardt et al.
17. catalkaya, s., knuplesch, d., chiao, c., reichert, m.: enriching business process models
with decision rules. in: lohmann, n., song, m., wohed, p. (eds.) bpm 2013 workshops.
lnbip, vol. 171, pp. 198–211. springer, heidelberg (2014)
18. ghattas, j., soffer, p., peleg, m.: improving business process decision making based on past
experience. decis. support syst. 59, 93–107 (2014)
19. bazhenova, e., weske, m.: deriving decision models from process models by enhanced deci-
sion mining. in: business process management workshops - bpm 2015 (2015, to appear)
20. dunkl, r., rinderle-ma, s., grossmann, w., anton fr ¨oschl, k.: a method for analyzing
time series data in process mining: application and extension of decision point analysis. in:
nurcan, s., pimenidis, e. (eds.) caise forum 2014. lnbip, vol. 204, pp. 68–84. springer,
heidelberg (2015)
21. de leoni, m., dumas, m., garc ´ıa-ba ˜nuelos, l.: discovering branching conditions from busi-
ness process execution logs. in: cortellessa, v ., varr ´o, d. (eds.) fase 2013 (etaps 2013).
lncs, vol. 7793, pp. 114–129. springer, heidelberg (2013)
22. boutell, m.r., luo, j., shen, x., brown, c.m.: learning multi-label scene classiﬁcation.
pattern recogn. 37(9), 1757–1771 (2004)
23. tsoumakas, g., katakis, i.: multi-label classiﬁcation: an overview. int. j. data warehouse.
min. 2007 , 1–13 (2007)
24. read, j., pfahringer, b., holmes, g., frank, e.: classiﬁer chains for multi-label classiﬁcation.
mach. learn. 85(3), 333–359 (2011)
25. agrawal, r., imieli ´nski, t., swami, a.: mining association rules between sets of items in
large databases. sigmod rec. 22(2), 207–216 (1993)