detecting changes in process behavior using
comparative case clustering
hompes, b.f.a.; buijs, j.c.a.m.; van der aalst, w.m.p.; dixit, p.m.; buurman, j.
published in:
data-driven process discovery and analysis
doi:
10.1007/978-3-319-53435-0_3
published: 01/01/2017
document version
publisher’s pdf, also known as version of record (includes final page, issue and volume numbers)
please check the document version of this publication:
• a submitted manuscript is the author's version of the article upon submission and before peer-review. there can be important differences
between the submitted version and the official published version of record. people interested in the research are advised to contact the
author for the final version of the publication, or visit the doi to the publisher's website.
• the final author version and the galley proof are versions of the publication after peer review.
• the final published version features the final layout of the paper including the volume, issue and page numbers.
link to publication
citation for published version (apa):
hompes, b. f. a., buijs, j. c. a. m., van der aalst, w. m. p., dixit, p. m., & buurman, j. (2017). detecting
changes in process behavior using comparative case clustering. in p. ceravolo, & s. rinderle-ma (eds.), data-
driven process discovery and analysis: 5th ifip wg 2.6 international symposium, simpda 2015, vienna,
austria, december 9-11, 2015, revised selected papers (pp. 54-75). (lecture notes in business information
processing; vol. 244). dordrecht: springer. doi: 10.1007/978-3-319-53435-0_3
general rights
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners
and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights.
            • users may download and print one copy of any publication from the public portal for the purpose of private study or research.
            • you may not further distribute the material or use it for any profit-making activity or commercial gain
            • you may freely distribute the url identifying the publication in the public portal ?
take down policy
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the work immediately
and investigate your claim.
download date: 14. jan. 2018detecting changes in process behavior
using comparative case clustering
b.f.a. hompes1,2(b), j.c.a.m. buijs1, wil m.p. van der aalst1, p.m. dixit1,2,
and j. buurman2
1department of mathematics and computer science,
eindhoven university of technology, eindhoven, the netherlands
{b.f.a.hompes,j.c.a.m.buijs,w.m.p.v.d.aalst }@tue.nl
2philips research, eindhoven, the netherlands
{prabhakar.dixit,hans.buurman }@philips.com
abstract. real-life business processes are complex and often exhibit a
high degree of variability. additionally, due to changing conditions and
circumstances, these processes continuously evolve over time. for exam-
ple, in the healthcare domain, advances in medicine trigger changes indiagnoses and treatment processes. case data (e.g. treating physician,
patient age) also inﬂuence how processes are executed. existing process
mining techniques assume processes to be static and therefore are less
suited for the analysis of contemporary, ﬂexible business processes. this
paper presents a novel comparative case clustering approach that is able
to expose changes in behavior. valuable insights can be gained andprocess improvements can be made by ﬁnding those points in time where
behavior changed and the reasons why. evaluation using both synthetic
and real-life event data shows our technique can provide these insights.
keywords: process mining
·trace clustering ·concept drift ·process
comparison
1 introduction
the execution of business processes is typically inﬂuenced by many external
factors. due to changing conditions and circumstances, these processes contin-
uously evolve over time. for example, advances in medicine can change how
patients are treated or how diagnoses are made in hospitals. other changing
circumstances could be legislation, seasonal eﬀects or even involved resources.as a result, in these ﬂexible processes, many cases follow a unique path through
the process. this variability causes problems for existing process mining tech-
niques that assume processes to be structured and in a steady state. contem-porary process mining techniques return spaghetti-like processes and potentially
misleading results when this is not the case [ 3,9,18]. the discovered process
models capture behavior possible at any given point in time. often, however,
c/circlecopyrtifip international federation for information processing 2017
published by springer international publishing ag 2017. all rights reservedp. ceravolo and s. rinderle-ma (eds.): simpda 2015, lnbip 244, pp. 54–75, 2017.doi: 10.1007/978-3-319-53435-0
3detecting changes in process behavior using comparative case clustering 55
fig. 1. demonstration of (sudden) concept drift. the upper process models (petri nets)
accurately describe behavior before and after a change point tc,w h e r e a st h el o w e r
model tries to capture all behavior, thereby returning a misleading process model thatallows for too much behavior that is not seen in the event log.
the process context changes and what was possible before is no longer possi-
ble or vice-versa. figure 1shows the relevance of the problem with an example
process that has changed over time. this so-called concept drift is one of the
key challenges in process mining, as discussed in the process mining manifesto
[2]. few techniques have been proposed to deal with concept drift in a busi-
ness process setting [ 5,7,11,13,19]. where existing techniques focus mainly on
change in control-ﬂow, our focus is on detecting changing behavior including
data aspects.
we identify two types of change for which existing techniques do not work
well: individual cases for which behavior changed, and changes in the overall
process. the former are typically seen as outliers, because those cases are usually
infrequent or dissimilar to the majority of other cases. however, speciﬁc changesin context might require cases to change behavior. alternatively, processes them-
selves can be subject to change, due to changing conditions and circumstances.
finding changes in behavior can be of great value to process owners. detect-
ing unwanted changes, for example, can identify potential risks while positive
change can lead to perdurable process improvement. techniques that consider
the entire event log at once cannot show the individual changes that occurthroughout the lifetime of a process [ 5]. for example, speciﬁc types of behavior
might occur for a limited time only, or can have a seasonal nature. behavior can
also merge with, or emerge from other behavior.
recently a novel technique for the detection of common and deviating behav-
ior using trace clustering was proposed in [ 10]. here, the process context is con-
sidered by taking both control-ﬂow as well as case and event data into account.56 b.f.a. hompes et al.
fig. 2. a graphical overview of the approach. the event log is split into sublogs.
diﬀerences in behavior can be compared using comparative case clustering.
hence, clustering of cases is not limited to ﬁnding similar execution paths. in
this paper, we extend the work in [ 10] by providing a novel technique for change
point detection and a means to compare case clustering results. figure 2shows
a high-level overview of our approach. event logs are split up and the behaviorof cases in the resulting sublogs is compared. our technique aids the analyst
by providing indications of the points in time where behavior changed and thus
where interesting comparisons can be made. the case clustering technique isbased on the markov cluster (mcl) algorithm [ 17]. it is able to autonomously
discover a (non-predeﬁned) number of clusters of diﬀerent sizes and densities,
leading to the separation of mainstream and deviating behavior.
by utilizing the time dimension we can discover temporal evolutions in
process behavior. in order to detect change points, we look at how similarities
between cases evolve over time. we consider the eﬀect propagated by new eventson a clustering of cases as an indicator of changing behavior. we account for the
eﬀect of case maturity in similarity calculation using an aging strategy. for exam-
ple, it might be the case that certain behavior has not been seen for a while oris seasonal of nature. it would be of interest to analysts to discover the points
in time where this behavior has returned. as such, in our technique, similarity
between cases is corrected for age. diﬀerences in behavior are then analyzed by
comparing clusterings created for two selected partitions of the event logs before
and after the detected change point. partitions include diﬀerent customer types,cases handled by diﬀerent resources, etc.
the remainder of this paper is organized as follows. section 2brieﬂy intro-
duces necessary preliminary deﬁnitions. section 3describes the case clustering
technique on which our method is built. the detection of change points and
related considerations are described in sect. 4. section 5describes the compara-
tive trace clustering approach. an experimental evaluation on a synthetic anddetecting changes in process behavior using comparative case clustering 57
two real-life event logs is performed in sect. 6. section 7discusses related work.
the paper concludes with a summary and planned future work in sect. 8.
2 preliminaries
typically, the executed events of multiple cases of aprocess are recorded in an
event log . an event represents one execution of an activity for a case, and poten-
tial contains additional data attributes such as a timestamp or the responsible
resource. a trace is a ﬁnite sequence of events, and describes one speciﬁc instance(i.e. a case) of the process at hand in terms of the executed events. a case can
also have additional (case-level) attributes such as a patient birthdate or customer
type. deﬁnitions for events and cases are based on those in [ 1].
deﬁnition 1 (event, attribute). letebe the event universe, i.e. the set of
all possible event identiﬁers. events may be characterized by various attributes,e.g. an event may have a timestamp, correspond to an activity, be executed by a
particular person, etc. let nbe a set of attribute names. for any event e∈e
and attribute name n∈n:n(e)is the value of attribute nfor event e. if event
edoes not have an attribute named n, then n(e)=⊥(null value).
typically, the following attributes are present in all events: activity (e)i st h e
activity associated to event e,time(e)i st h e timestamp ofe,a n d resource (e)i s
theresource associated to e. additional event attributes can be the cost associ-
ated with the event, the outcome of an activity (e.g. diagnosis result), etc.
deﬁnition 2 (case, trace, event log). letcbe the case universe, i.e. the
set of all possible case identiﬁers. cases, like events, have attributes. for anycasec∈cand attribute name n∈n:n(c)is the value of attribute nfor case c
(n(c)=
⊥ifchas no attribute named n). each case has a mandatory attribute
‘trace’: trace(c)∈e∗.ˆc=trace(c)is a shorthand notation for referring to the
trace of a case. a trace is a ﬁnite sequence of events σ∈e∗, such that each
event appears only once, i.e. for 1≤i≤j≤|σ|:σi/negationslash=σj. for any sequence
s=/angbracketlefts1,s2,...,s n/angbracketright,set(s)={s1,s2,...,s n}converts a sequence into a set, e.g.
set(/angbracketlefta,b,c,b,c,d /angbracketright)={a,b,c,d }.a nevent log is a set of cases l⊆csuch that
each event appears at most once in the entire log, i.e. for any c,c/prime∈lsuch that
c/negationslash=c/prime:set(ˆc)∩set(ˆc/prime)=∅.
in the example cases in figs. 1and4a simpliﬁed form is used where events
are represented solely by the activities they represent. in this form, a trace
is a sequence of activities and an event log a multiset of traces (since in this
simpliﬁed form cases can share the same sequence of events, and no additionaldata attributes are present).
in order to automatically separate the event log into multiple sublogs and to
detect changes in behavior, we use a time window. time windows are deﬁnedby their length, either in time units or in a speciﬁc number of events. this has
as an eﬀect that their length in real-time can vary. behavior in time periods58 b.f.a. hompes et al.
at which less events are recorded (such as low seasons) can thus be represented
by a single window, whereas high-frequency periods are divided in more timewindows. here, we use a tumbling time windowing strategy. more detail about
the diﬀerent possible types of time windows is given in subsect. 4.1.
deﬁnition 3 (time window). letwbe a time window (window). a window
whas two properties: w
s,a n d w e, which denote the start and end times of w.
the length of wis denoted by |w|=w e−w s.l/harpoonuprightw=lw⊆ldenotes
the projection of an event log l⊆cto window w.i nlw, case information
(attribute values, events) known after time w einlis removed, i.e. for all cases,
the preﬁx up to w eof their trace and case information known at time w eis kept.
cases in an event log can be clustered based on multiple perspectives. per-
spectives can be based on case and/or event attributes (such as the age of a
patient), simple or more advanced control-ﬂow patterns, or can be derived val-
ues such as the time spent in the hospital. by using both control-ﬂow and dataperspectives the process context is considered.
deﬁnition 4 (perspective). letpbe a perspective. /harpoonupright
p:c→ rmdenotes the
function mapping a case to a real vector of length maccording to perspective p.
mis the number of attributes in p. for example, mcan be the number of diﬀerent
resources in the log or the amount of distinct diagnoses there are. c/harpoonuprightpdenotes the
projection of case c∈cto a perspective p. furthermore, we let c/harpoonupright{p1,p2,...,p k}=
c/harpoonuprightp1/bardblc/harpoonuprightp2/bardbl.../bardblc/harpoonuprightpk, i.e. the resulting proﬁle vectors from projection to multiple
perspectives are concatenated.
the markov cluster algorithm uses a similarity matrix between cases as its
input. this matrix holds pair-wise similarity values between the proﬁle vectors
obtained by projecting each case to the selected perspectives.
deﬁnition 5 (case similarity matrix). letl⊆cbe an event log.
m(l)=(l×l)→[0.0,1.0]denotes the set of all possible case similarity
matrices over l.f o rc a s e s c,c/prime∈land a case similarity matrix m∈m(l),
m(c,c/prime)denotes the similarity between candc/prime.
similarity values for cases are multiplied by an age factor that decreases with
time in order to correct for the similarity between current and older cases in the
change detection process. this way, we account for seasonal temporal changes,
or temporally infrequent behavior.
deﬁnition 6 (age vector). letl⊆cbe an event log. /vectora(l,w)=l→
[0.0,1.0]denotes an age vector aoverl, for time window w. for any case
c∈l,/vectora(c,w)denotes the age factor of cfor window w.
deﬁnition 7 (case clustering). letl⊆cbe an event log. a case cluster
(cluster) over lis a subset of l. a case clustering tc⊆p(l)1is a set of case
clusters over l. we assume every case to be part of at least one cluster, i.e./uniontexttc=l. cases can be in multiple clusters, i.e. cluster overlap is allowed.
1p(l) denotes the powerset over event log l, i.e. all possible sublogs of l.detecting changes in process behavior using comparative case clustering 59
3 case clustering
discovering a process model on an entire real-life event log will often lead to
a spaghetti model since it has to represent all past traces [ 3,9,18]. similarly,
clustering the entire event log will show groups of behavior that were possibleat any given point in time. the temporal evolution of the behavioral diﬀerences
captured by the clustering is not shown.
our change detection technique is based on the technique proposed in [ 10]
where case clustering and outlier detection are combined in order to ﬁnd main-
stream and deviating behavior. this technique relies on the markov cluster
(mcl) algorithm [ 17] to ﬁnd clusters of cases that share behavior on a set
of selected perspectives. by incorporating both control-ﬂow and case data, the
process context is taken into account. mcl was chosen over alternative clus-
tering techniques because of the following properties. the number of clusters is
discovered rather than set beforehand, hence changes in behavior will be reﬂected
in change in the clustering. because mcl is neither biased towards globular orlocal clusters and is able to ﬁnd clusters of diﬀerent density, exceptional cases will
not be clustered together with common behavior, i.e. they can be distinguished
based on cluster sizes. as a result, new types of cases will result in new clustersrather than to be added to existing clusters. since cluster overlap is possible,
evolution of cases from one cluster to another over time can be detected as well.
for more details on diﬀerences with alternative clustering approaches the readeris referred to [ 10].
mcl uses a stochastic similarity matrix between cases as its input. it alter-
nates an expansion step that raises the matrix to a given power with the inﬂationstep. inﬂation raises each element to a given power and normalizes the matrix
such that it is stochastic again. as such, there are two parameters to mcl: the
expansion and inﬂation parameter, which both inﬂuence clustering granularity.this alternation eventually results in the separation of the matrix into diﬀerent
components, which are interpreted as clusters. in our case, the mcl algorithm
takes as input a left stochastic version of the case similarity matrix, i.e. the
columns are normalized. in order to create a case similarity matrix, cases in the
event log are mapped to a proﬁle vector by projecting them to a selected set ofperspectives. a pair-wise similarity score is then calculated between these pro-
ﬁle vectors. applying the mcl algorithm to the resulting case similarity matrix
gives us a case clustering over the log. the process of applying mcl to caseclustering is visualized in fig. 3.
more formally, for all cases c∈l⊆c, we project cto our chosen set of
perspectives p, i.e. c/harpoonupright
p. next, for each pair of the resulting proﬁle vectors, we
compute the pair-wise vector similarity. in this paper we use the cosine sim-
ilarity, i.e. m(c,c/prime)=c/harpoonuprightp·c/prime/harpoonuprightp
||c/harpoonuprightp|| || c/prime/harpoonuprightp||,∀c,c/prime∈l, where m∈m(l). however,
any vector similarity metric can be used. cosine similarity was chosen because
of its proven eﬀectiveness, eﬃcient calculation and boundedness to [0 ,1]. also,
it is able to represent non-binary term weights and allows for partial matching.a typical downside of vector similarity measures is that the order of terms is lost.60 b.f.a. hompes et al.
fig. 3. overview of the application of the markov cluster algorithm.
this problem can be solved by incorporating order in the perspectives, such as
the occurrence of frequent patterns.
4 detecting change in behavior
in the extreme case, we could cluster the cases in the event log after every new
event that arrives, with the aim of ﬁnding signiﬁcant changes in behavior. how-
ever, due to the nature of diﬀerent clustering algorithms (including the markovcluster algorithm), this is too time and resource consuming. often, even cluster-
ing after a speciﬁc number of new events or time units would be too expensive
still, or would need excessively large window sizes to be feasible.
the markov cluster algorithm autonomously discovers a number of clusters
with varying sizes and densities based on its input. over time, the occurrenceof new events will change the similarity between cases, which is reﬂected in the
similarity matrix. as this matrix is the input for the clustering algorithm, the
impact on the case similarity matrix is a good indicator for how much the clus-tering will change. hence, we can use the evolution of this matrix over time
as a reliable predictor for change in the clustering output. therefore, we pro-
pose to detect changes in behavior by utilizing the change over time of the casesimilarity matrix. similar to the approaches that use statistical tests [ 5,12,13],
diﬀerences in the matrix indicate change in behavior. an overview of our app-
roach is illustrated in fig. 4, where ﬁve simple example traces are drawn over
time.
4.1 splitting the event log
in order to calculate change in behavior, the events belonging to the diﬀerent
cases are split over several consecutive time windows. diﬀerent windowing strate-
gies exist in literature, such as adaptive, tumbling, sliding, and ﬂexible windows.in our case, we use a tumbling windowing technique that facilitates the compar-
ison of cases from their start to the end of the window. for each time window,
cases that have events in or before that window are considered in the calcula-tion of the similarity matrix, as is depicted in fig. 5. events occurring after the
current time window are not considered. as such, for each case, only the known
attributes and preﬁx of its trace are taken into account. diﬀerent window sizescan be considered. for example, we can compute a new similarity matrix everydetecting changes in process behavior using comparative case clustering 61
fig. 4. a graphical overview of the change detection approach. in order to detect
changes in behavior, the diﬀerence in similarity matrices over time is calculated. inthis example, signiﬁcant change occurred in window w
4.62 b.f.a. hompes et al.
10 events, or after every 30 min. the choice for sensible window sizes depends
entirely on the type of event data that is being analyzed. as such, no rule ofthumb can be provided.
fig. 5. selection of cases using a
time window. cases are represented
by horizontal bars. all events forall cases up to w
eare taken into
account.note that it is not possible to use win-
dowing techniques that vary the windowsize based on the automated detection of
changes in the data, since this detection
is the goal of our approach. we considerattributes that are not speciﬁcally output
by events (such as patient age) to be known
from the very ﬁrst event in the trace of acase. as a result, when looking at this type
of case-level data, a change point will be
shown for the ﬁrst event of a case. related
research has been performed in the ﬁeld of
streaming data [ 8], and process mining in a
streaming setting in particular [ 6].
formally, for every time window w
i,
where i∈[1,n], an event log l⊆c is
projected to wi, resulting in nsublogs l/harpoonuprightwi. note that wi
s=wi−1
e, for all
1<i≤n, i.e. all windows are consecutive, and there is no overlap in their start
and end times. for every wi,l/harpoonuprightwicontains all events in lup to time wi
e.a l s o
note that as discussed, |wi|is not necessarily equal to |wi+1|, for example when
we choose a number of events as the size of the time windows.
4.2 calculating case similarity
after splitting the events in the event log over consecutive time windows, a
similarity matrix is calculated for each sublog and compared with the similarity
matrix calculated for the sublog that was obtained by projecting the event log
to the previous time window. before this is done, however, we account for case
age.
without correcting for the age of cases, the eﬀect of seasonal temporal behav-
ior patterns are hidden. for example, imagine a process that is executed dif-
ferently in winter (low season) compared to the other three season. withoutaccounting for case age, cases that are observed in winter will exhibit a high
similarity with those cases observed in winter the previous year. no change will
be detected in the transition from fall to winter. similarly, cases that are excep-tional but not unique will become less detectable over time.
in order to correct for the age of cases, we keep a vector of case age factors,
that are used to decrease case similarity for those cases further back in history.this factor can be reduced over time in diﬀerent ways (e.g. exponentially or
linearly), in order to consider only recent cases or also the earlier ones. so, for
every sublog l/harpoonupright
wi, we create a case similarity matrix mi, as described in sect. 3.
this matrix is corrected for age by multiplying it by ai=/summationtext|l/harpoonuprightw i|
j=1/vectora(l,wi)j·ej,detecting changes in process behavior using comparative case clustering 63
where ejis the |l/harpoonuprightwi|×|l/harpoonuprightwi|matrix with a 1 on position ( j,j) and zeros
everywhere else. in the resulting case similarity matrix only the upper trianglehas been accounted for age. we mirror the upper triangle downwards to make
the matrix symmetrical again. to exponentially decrease the impact of a case
to the case similarity matrix, we multiply the age vector with some aging factorin every new time window, i.e. /vectora(l,w
i)=/vectora(l,wi−1)·s, where s∈[0,1].
alternatively, in order to decrease the age linearly, we can subtract a value for
each element in the vector instead of multiplying with a factor.
note that this type of correction for age combined with the windowing tech-
nique described in subsect. 4.1diﬀers in eﬀect from traditional sliding window
techniques, since similarity between cases might result from attributes or eventsthat were known before a certain time window. as such, we decrease the impact
of the similarity value obtained by comparing all case data known so far, rather
than computing similarity only on a subset of that data.
4.3 computing change
once age has been accounted for, the diﬀerence in similarity matrices can be cal-
culated. for the calculation of the change in similarity matrices, we look at the
change in the matrix values. the maximal diﬀerence equals the amount of cells
we have in the case similarity matrix of the latest time window divided by two(since the matrix is symmetrical). hence, we calculate the change value as a per-
centage of this amount. formally, the change between two case similarity matri-
cesm
1andm2of size kequals2
k×/summationtext(|m2−m1|), where/summationtextm=/summationtext
c,c/primem(c,c/prime).
note that the dimensionality of similarity matrices changes over time due to the
cases that are included in the respective time windows. when two matrices of
diﬀerent dimensions are compared, both matrices are extended with empty cellsreferring to cases that are only present in the other time window.
interesting change points can be deduced from the evolution of the change
value over time. an increase indicates that in this window, more things changed
compared to in the previous window. a drop indicates less change. accordingly,
interesting change points are those points in time where the change value exhibitsspikes. once changes in behavior have been discovered, clusterings can be created
in order to compare behavior before and after the identiﬁed change points.
for example, take the cases depicted in fig. 4, and consider cases to be similar
when they share activities. at ﬁrst, up to event window w
3,c a s e c4seems to be
quite similar to the other three cases seen so far. however, in window w4this
changes due to activity fwhich has replaced activity e. this change is reﬂected
in the similarity matrices m1tom5. consequently the value for δ3indicates a
possible change point in w4.
5 comparative clustering
the previous two sections describe how to identify change in process behavior
based on the change in similarity between cases. once interesting change points64 b.f.a. hompes et al.
have been identiﬁed, diﬀerent clusterings can be created and compared, both
programmatically and visually, in order to analyze the eﬀect of changing behaviorin a process. by comparing clusterings created for diﬀerent sublogs (i.e. before
and after an identiﬁed change point), we can see where behavior changed and
analyze why. of course, it is also possible to manually create selections of casesbased on time or data attributes in order to compare behavior. this can, for
example, be used to compare behavior for diﬀerent age groups, for patients from
diﬀerent geographical locations, diﬀerent years, etc.
due to the properties of the mcl algorithm discussed in sects. 3and4,
changing behavior is reﬂected in changes in the cluster structure. for exam-
ple, cluster sizes indicate the frequency of the captured behavior. behavior thatused to be common but is becoming less frequent will still be clustered sepa-
rately rather than get merged with diﬀerent or common behavior, as long as the
behavior remains dissimilar.
clusters of cases are represented as nodes in a partially connected, undi-
rected graph. node sizes indicate the number of clustered cases. two nodes areconnected when there is a positive similarity between at least one pair of cases
between the two represented clusters. in more advanced visualizations, these
edges could be given a weight to represent minimum, maximum, or average sim-ilarity, etc. this can be used to visually show inter-cluster similarity. also, edge
weights can be used in layout calculation for complex cluster graphs. clusters
are annotated with descriptions about the cases that are present. shared activ-ities between traces and similar data values are a few of the possibilities. for
example, a cluster that groups cases of patients that all share a certain diagnosis
can be annotated with that diagnosis description.
in fig. 6, two example clusterings are compared. in the left clustering, one
cluster is selected. by highlighting those clusters in the right clustering that share
behavior with the selected cluster(s) on the left, we can interactively analyzehow behavior has changed. it is possible to see how cases are clustered or what
annotations are shared. for example, we might compare two sublogs of patient
data, before and after an identiﬁed change in behavior. patients that are present
fig. 6. two clusterings are compared. highlighted clusters on the right clustering show
how behavior captured by the cluster selected on the left has changed.detecting changes in process behavior using comparative case clustering 65
in both years are highlighted as shared cases (in dark gray), while clusters that
share some or all diagnoses (similar annotations) are highlighted (in light gray).within a case clustering, clusters that share behavior are connected. as such,
when comparing two clusterings, clusters that are split into or have emerged from
multiple clusters can be found by looking at the clusters sharing annotationsand/or cases. this can, for example, indicate that behavior has become more
speciﬁc or more general. besides visual approaches, techniques such as [ 20] that
aim to explain clusters of cases can be used as well.
6 evaluation
in order to evaluate our change detection technique we use a synthetic eventlog and two publicly available real-life event logs. in subsect. 6.1we show how
change in behavior over time can be detected using our approach. in subsect. 6.2
we apply our technique to uncover useful and interesting insights from real-lifedata. our technique has been implemented in the process mining tool prom
2,
and is publicly available through the traceclustering package.
6.1 synthetic evaluation
for the synthetic evaluation, an event log was generated from a ﬁctive, manually
created radiology process with 17 unique activities. 1,000 cases were generatedspanning one year. the control-ﬂow of this process heavily depends on the data-
attributes ‘age’ and ‘bodypart’, as well as the time of year the patient arrives. as
a result, there are many possible control-ﬂow variants recorded in the event log.
fig. 7. changes in behavior over time are hid-
den when clustering the entire synthetic event
log and disregarding time.we distinguish four diﬀerent
scenarios, based on patient age and
the part of the body the radiol-ogy exam is to be made of. at the
same time, the process has been
constructed in such a way that tem-poral patterns in behavior occur,
as the inﬂow of types of patients is
seasonal. special patients (patients
younger than 10 years old that need
a head exam) were modeled toarrive only in the months march
and april, july and august, and in
november and december. patientsof other ages and types can arrive
all year long. in other words, the
behavior of cases changes overtime.
2seehttp://promtools.org .66 b.f.a. hompes et al.
fig. 8. change in behavior over time for the synthetic event log. changes in behavior
can be identiﬁed by comparing case similarity matrices for consecutive time windows.
figure 7shows an example result of clustering the entire event log on the
occurrence of activities, without regarding the time aspect. clustering all cases
in the log shows all behavior that was possible at any given point in time. asa result, we can only identify the diﬀerent groups of patients, no changes in
behavior or seasonal pattern are discovered.
by applying our change detection technique we can ﬁnd changes in behavior
over time. a new similarity matrix was created for the event log and compared
with the previous matrix, every 100 events. note that the choice of window size
aﬀects the perceived change, as larger window sizes smooth out local changes inbehavior. figure 8shows the calculated change over time. the horizontal axis
represents time whereas the vertical axis indicates the percentage of change
occurring in each time window compared to the previous window. the changevalues indicate a change in behavior when the ﬁrst special patients started to
arrive in march. in fig. 8, the age of cases is accounted for, according to the
technique described in subsect. 4.2. for every time window, the age factor of
each case was multiplied by 0.95 in order to make sure that ages of older cases
were accounted for. we can see that new change points are discovered in july
and november, indicating a (potential) seasonal pattern, and interesting points
in time to create new clusterings upon. as is expected, the ﬁrst event windows
indicate big change values since all information seen in them is new.
6.2 real-life data
the ﬁrst real-life log comes from a dutch academic hospital that contains cases
pertaining to cancer treatment procedures. it was originally used in the ﬁrst
business process intelligence contest (bpic 2011) [ 15]. the second event log
contains cases of building permit applications provided by a dutch municipality.detecting changes in process behavior using comparative case clustering 67
this log is part of the 2015 edition of the bpi challenge (bpic 2015) [ 16]. these
event logs were used so that the results can be reproduced. in the results shownhere, we used the following mcl parameters: expansion = 2, inﬂation = 15.
the ﬁrst event log contains cases of diﬀerent stages of malignancy and of dif-
ferent parts of the body. also, information is present about the diagnosis, treat-ment, specialism required, patient age, organisational group (hospital depart-
ment), etc. this log contains 1,143 cases, 150,291 events and 624 distinct activ-
ities. there are 981 diﬀerent executions paths (activity sequences). there aremany attributes present on both the event and case level. all of these attributes
can obtain several diﬀerent values, leading to a large heterogeneity in the log.
as cases are recorded between january 2005 and march 2008, the event log islikely to exhibit drifts in control-ﬂow and changes in process behavior.
for each case in the hospital log, there are 16 attributes for ‘diagnosis code’,
referring to the diagnoses the patient received for diﬀerent parts of their body.
by comparing on these attributes and calculating the change in behavior over
time, we found that near july 2006, a change in diagnoses occurred. the changein behavior was calculated every 5,000 events, and every window the age factor
of cases was multiplied by 0.95.
fig. 9. change in behavior over time for the hospital log, for the year 2006 and early
2007. cases are compared on diagnosis code. potential change in behavior is indicated
in july 2006.
figure 9shows how the behavior has evolved. in fig. 10, the clustering on the
left represents cases two months before the change point whereas the clustering
on the right represents cases two months after. patients that were in the selectedcluster and have had activities in both years are highlighted in dark gray. groups
of patients that have had (partially) shared diagnoses are marked light gray. we
can see that some diagnoses are present for more body parts and now occur68 b.f.a. hompes et al.
fig. 10. hospital log clustered on diagnosis code for cases active in may–june 2006
(left) and july–august 2006 (right). changes in diagnoses are discovered. more body-parts are diagnosed with codes m13, 822 and 106.
fig. 11. change in behavior over time for the hospital log compared on diagnosis code
and treatment code, for the year 2006. potential change in behavior is indicated in
november 2006.detecting changes in process behavior using comparative case clustering 69
fig. 12. hospital log clustered on diagnosis code and treatment code for cases active
in september–october 2006 (left) and november–december 2006 (right). additional
diagnoses and treatments are found.
in other combinations. this could indicate a trend in diseases or be due to an
improvement in diagnosis detail. as there are many smaller clusters in july-august that have additional diagnoses (light gray), we can deduce that for the
selected diagnosis, the related diagnoses have become more speciﬁc and diagnoses
are also made on other parts of the body. in fig. 10process maps and diﬀerences
in activities are shown for two highlighted clusters.
besides diagnosis codes, every case has 16 possible attributes for ‘treatment
code’, referring to the treatments the patient received on diﬀerent parts of theirbody. this leads to many possible treatment combinations for diﬀerent diag-
noses. we inspect the change in behavior over time for the year 2006, when
looking at diagnosis code and treatment code. as can be seen in fig. 11,u s i n g
our technique, a potential change point can be found in november 2006. by com-
paring the clustering results for september–october and november–december,
changes in treatments for speciﬁc diagnoses become visible. as we can see from
fig.12, treatment for some diagnoses have changed. again cases active in the
two months before the change point are shown on the left and cases active in thetwo months after are shown on the right. we can see that there are two clusters
that contain patients that were active in september–october, one of which is
much smaller than the other. for the larger cluster, additional diagnoses weremade and additional treatments were performed. as a result, more cases share70 b.f.a. hompes et al.
this behavior. the call-outs in fig. 12again show diﬀerences in activities between
the two periods.
these diﬀerences indicate that, over time, treatments for certain diagnoses
have changed. considering the type of process, this could be due to speciﬁc
patient needs, changes in protocols or advances in medicine. a probable reasonis that diagnoses were made (or recorded) with greater detail. insights such as
these can be gained easily and can be used to verify or specify protocols, check
whether certain behavior is changing or for auditing purposes.
the second real-life event log contains cases of building permit applications in
a dutch municipality. information is present about the type of permit, the costs
associated with the permit, the involved resources, etc. again, each attributecan have several diﬀerent values. this log contains 1,199 cases recorded between
late 2010 and early 2015 with in total 52,217 events and 398 distinct activities.
as there are 1,170 diﬀerent execution paths, almost all cases are unique from
the control-ﬂow perspective.
each case in the municipality log has an attribute ‘parts’ that refers to the
diﬀerent permit types that are involved in the case it describes. each case is also
labeled with the attribute ‘term name’, describing which status has been assigned
to the permit application. possible values are ‘permit granted’, ‘additional infor-mation required’, ‘term objection and appeal’, etc. figure 13shows the change in
behavior over time when comparing cases on these two attributes, for the years
2012–2013. the change in behavior was calculated every 2,500 events, and inevery window the age factor of cases was multiplied by 0.95. a potential change
point is indicated near mid january 2013. we cluster the cases in the log on
both permit type and term name and compare cases in december 2012–january2013 with cases in february–march 2013. the results are shown in fig. 14.a sw e
can see, few clusters are discovered, indicating only slight diﬀerences in behavior
on these perspectives. a group of cases pertaining to mainly construction andenvironmental permits that are in the ‘objection and appeal’ term is selected in
the left clustering. during the selected period, most of this behavior has merged
with the biggest group of cases, which now represents almost all behavior in the
log in the right clustering.
6.3 eﬀect of parameters
as explained, several parameters are important for obtaining the points in time
where behavior has changed. firstly, the perspectives used to create a case sim-ilarity matrix decide on which perspective change is detected. it is therefore
important to choose those perspectives that are of interest to the analysis.
the mcl clustering technique uses two parameters, expansion and inﬂation,
which both aﬀect clustering granularity. when change on a low level is of interest,
expansion can be decreased and inﬂation increased, and vice-versa for when only
high-level change points are required. besides the mcl parameters, the windowsize can also be adjusted to aﬀect the detection span of the approach. bigger
window sizes will result in more global, high-level changes being detected while
small windows will also reveal smaller changes in behavior.detecting changes in process behavior using comparative case clustering 71
fig. 13. change in behavior over time for the municipality log compared on permit
type and term description, for 2012–2013. potential change in behavior is indicated in
january 2013.
fig. 14. municipality log clustered on permit type and term description for cases active
in december 2012–january 2013 (left) and february–march 2013 (right).72 b.f.a. hompes et al.
the eﬀect of long-running cases and seasonal behavior can be controlled by
adjusting the age factor. increasing the age factor (to a value close to 1) willlead to longer lasting eﬀects whereas decreasing the age factor will also show
seasonal temporal behavior. in conclusion, the setting of parameter values needs
to be decided on a case-per-case basis. most interesting insights will be gainedwhen the approach is used in an iterative process.
7 related work
although concept drift is a well-studied topic in the data mining and machine
learning communities, little work has been done on detecting concept drift in
business processes. bose et al. were the ﬁrst to consider concept drift and changedetection in a process mining setting [ 5]. in their work, a classiﬁcation of possible
changes in business processes is given, and statistical hypothesis tests are used
to detect regions of change. even tough the authors consider the possibility ofchange in data attributes, the scope of their work is limited to the detection of
control-ﬂow changes in a process manifested as sudden drifts over a period of
time. more recently, martjushev et al. built on this work by looking at grad-ual and multi-order dynamics to detect concept drift in control-ﬂow [ 13]. they
extend the work in [ 5] by providing solutions to detect gradual change as well. by
considering multi-order dynamics through the use of an adaptive window tech-
nique, process change occurring at multiple levels of mixed time granularity can
be detected. maaradji et al. employ statistical tests over the distributions of runsobserved in two consecutive time windows in order to detect concept drift [ 12].
as noted by the authors, in order to ﬁnd diﬀerences in process behavior a notion
of equivalence is necessary. in their paper, a notion of run-equivalence is used.it is shown that drift can be identiﬁed fast and accurately by using an adaptive
sliding window technique. as a result, it can be used in an online (streaming)
setting as an oracle as to when a discovered model should be updated.
weber et al. employ probabilistic deterministic ﬁnite automata (pdfa) to
represent the probability distributions generated by process models [ 19]. similar
to [5,12], statistical hypothesis tests are used to detect whether or not a distribu-
tion has changed signiﬁcantly from a ground truth. the aim of their technique is
to identify process change as soon as possible, but with conﬁdence that change is
signiﬁcant, in order to discover a model representing reality as good as possible.as such, only drift in control-ﬂow is considered. in [ 7] a diﬀerent technique is
proposed to automatically detect and manage concept drift in an online setting.
here, concept drift is detected real-time using an estimation technique based on
abstract interpretation of the process and sequential sampling of the log. the
ﬁtness of preﬁxes of new samples taken from the log is checked against that ofpreﬁxes of initial samples. a change point is identiﬁed when there is a signiﬁcant
diﬀerence between these two points. in the above-mentioned techniques however,
data attributes are not considered. as such, only changes in control-ﬂow behav-ior can be discovered. moreover, case maturity is not accounted for, leading to
issues in discovering seasonal temporal changes in behavior.detecting changes in process behavior using comparative case clustering 73
trace clustering techniques are often used to ﬁnd diﬀerent process variants.
several trace clustering techniques have been proposed in the ﬁeld of processmining, and an extensive comparative analysis of trace clustering techniques
has recently been performed in [ 14]. often, however, the temporal dimension
is not considered. in [ 11], the starting time of each process instance is used as
an additional feature in trace clustering. by combining control-ﬂow and time
features, the clusters formed share both a structural similarity and a temporal
proximity. the technique is based on the technique proposed in [ 4] and considers
diﬀerent types of changes, including sudden, recurring, gradual, and incremental
changes. in more complex evolving business processes however, including the
temporal proximity of cases might lead to misleading results. for example whenseasonal drifts are intertwined with gradual changes in the process.
the technique proposed in this paper uses similar ideas and concepts as used
in the papers mentioned above. however, trace clustering techniques and con-
cepts are used to ﬁnd changes in common and deviating process behavior. by
taking into account both the control-ﬂow and the data aspects, the techniqueis made context-aware. we extend the technique in [ 10] by including change
detection in behavioral similarities between cases. the input is limited to the
perspectives on which we want to cluster and compare behavior, and the twonumerical parameters for the markov cluster algorithm. it is not necessary to
manually select the number of desired clusters, as that is determined by the
underlying cluster algorithm, along with the cluster sizes and densities. addi-tionally, diﬀerent windowing strategies, sizes and aging factors can be used to
ﬁnd diﬀerent types of drift.
8 conclusions and future work
real-life business processes are often complex while exhibiting a high degree
of variability. due to changing conditions and circumstances, these processescontinuously evolve over time. existing process mining techniques assume the
process to be static and are less suited for the analysis of contemporary busi-
ness processes. in this paper we presented a novel comparative case clustering
approach that is able to expose temporal changes in behavior in a process. by
using both control-ﬂow and case data we take the process context into account.
insights can be gained into how and why behavior has changed by comparingchanges in clusterings over diﬀerent partitions of the log. interesting points in
time can be discovered as to give an idea on where to partition the event log.
the discovered information can then be used for further analysis, e.g. to design
protocols, for early detection of unwanted behavior or for auditing purposes.
besides the time dimension, diﬀerent data and control-ﬂow attributes can beutilized in order to distinguish groups of behavior.
our results show that indeed promising insights can be achieved. nonetheless
there are drawbacks. it is necessary to manually select the perspectives on whichcase similarity is calculated and what window size is used. also, once change
points have been identiﬁed, the parameters for the markov cluster algorithm74 b.f.a. hompes et al.
need to be chosen. besides the parameters, at the moment, it is not possible to
distinguish between changing behavior localized to a speciﬁc cluster and moreglobal change. additional research is needed to further automate the analysis
process, for example by automatically detecting discriminating clustering per-
spectives or by suggesting parameters for the clustering algorithm. in the futurewe would also like to look into how changes in process behavior can be analyzed
in an online, streaming event data, setting. diﬀerent ways to visualize change in
behavior can be explored as well.
references
1. van der aalst, w.m.p.: process mining: discovery, conformance and enhancement
of business processes. springer, heidelberg (2011)
2. van der aalst, w.m.p., et al.: process mining manifesto. in: daniel, f., barkaoui,
k., dustdar, s. (eds.) bpm 2011. lnbip, vol. 99, pp. 169–194. springer, heidelberg
(2012). doi: 10.1007/978-3-642-28108-2 19
3. bose, r.p.j.c., van der aalst, w.m.p.: context aware trace clustering: towards
improving process mining results. in: proceedings of the siam international con-
ference on data mining, pp. 401–412. society for industrial and applied mathe-matics (2009)
4. bose, r.p.j.c., van der aalst, w.m.p.: trace clustering based on conserved pat-
terns: towards achieving better process models. in: rinderle-ma, s., sadiq, s.,leymann, f. (eds.) bpm 2009. lnbip, vol. 43, pp. 170–181. springer, heidelberg
(2010). doi: 10.1007/978-3-642-12186-9
16
5. bose, r.p.j.c., van der aalst, w.m.p., ˇzliobait˙ e, i., pechenizkiy, m.: handling
concept drift in process mining. in: mouratidis, h., rolland, c. (eds.) caise
2011. lncs, vol. 6741, pp. 391–405. springer, heidelberg (2011). doi: 10.1007/
978-3-642-21640-4 30
6. burattin, a., cimitile, m., maggi, f.m., sperduti, a.: online discovery of declara-
tive process models from event streams. ieee trans. serv. comput. 8(6), 833–846
(2015)
7. carmona, j., gavald` a, r.: online techniques for dealing with concept drift
in process mining. in: hollm´ en, j., klawonn, f., tucker, a. (eds.) ida
2012. lncs, vol. 7619, pp. 90–102. springer, heidelberg (2012). doi: 10.1007/
978-3-642-34156-4 10
8. gama, j.: knowledge discovery from data streams. crc press, boca raton
(2010)
9. goedertier, s., de weerdt, j., martens, d., vanthienen, j., baesens, b.: process
discovery in event logs: an application in the telecom industry. appl. soft comput.11(2), 1697–1710 (2011)
10. hompes, b.f.a., buijs, j.c.a.m., van der aalst, w.m.p., dixit, p.m., buurman,
j.: discovering deviating cases and process variants using trace clustering. in: pro-ceedings of the 27th benelux conference on artiﬁcial intelligence (bnaic), 5–6
november, hasselt (2015)
11. luengo, d., sep´ ulveda, m.: applying clustering in process mining to ﬁnd diﬀerent
versions of a business process that changes over time. in: daniel, f., barkaoui, k.,
dustdar, s. (eds.) bpm 2011. lnbip, vol. 99, pp. 153–158. springer, heidelberg
(2012). doi: 10.1007/978-3-642-28108-2
15detecting changes in process behavior using comparative case clustering 75
12. maaradji, a., dumas, m., rosa, m., ostovar, a.: fast and accurate business
process drift detection. in: motahari-nezhad, h.r., recker, j., weidlich, m. (eds.)
bpm 2015. lncs, vol. 9253, pp. 406–422. springer, heidelberg (2015). doi: 10.
1007/978-3-319-23063-4 27
13. martjushev, j., bose, r.p.j.c., van der aalst, w.m.p.: change point detection and
dealing with gradual and multi-order dynamics in process mining. in: matuleviˇ cius,
r., dumas, m. (eds.) bir 2015. lnbip, vol. 229, pp. 161–178. springer, heidelberg
(2015). doi: 10.1007/978-3-319-21915-8 11
14. thaler, t., ternis, s.f., fettke, p., loos, p.: a comparative analysis of process
instance cluster techniques. in: proceedings of the 12th international conference
on wirtschaftsinformatik. internationale tagung wirtschaftsinformatik (wi-15),3–5 march, osnabrck. universitt osnabrck (2015)
15. dongen, b.f.: real-life event logs - hospital log (2011). doi: 10.4121/uuid:
d9769f3d-0ab0-4fb8-803b-0d1120ﬀcf54
16. van dongen, s.: bpi challenge 2015 (2015). doi: 10.4121/uuid:31a308ef-c844-
48da-948c-305d167a0ec1
17. van dongen, s.: a cluster algorithm for graphs. technical report, national
research institute for mathematics and computer science in the netherlands
(2000)
18. veiga, g.m., ferreira, d.r.: understanding spaghetti models with sequence cluster-
ing for prom. in: rinderle-ma, s., sadiq, s., leymann, f. (eds.) bpm 2009. lnbip,
vol. 43, pp. 92–103. springer, heidelberg (2010). doi: 10.1007/978-3-642-12186-9
10
19. weber, p., bordbar, b., tino, p.: real-time detection of process change using
process mining. in: imperial college computing student, workshop, pp. 108–114
(2011)
20. weerdt, j., vanden broucke, s.: secpi: searching for explanations for clustered
process instances. in: sadiq, s., soﬀer, p., v¨ olzer, h. (eds.) bpm 2014. lncs, vol.
8659, pp. 408–415. springer, heidelberg (2014). doi: 10.1007/978-3-319-10172-9 29