process mining: on the balance between
under¯tting and over¯tting
w.m.p. van der aalst
eindhoven university of technology,
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tue.nl
abstract. process mining techniques attempt to extract non-trivial
and useful information from event logs. one aspect of process mining is
control-°ow discovery , i.e., automatically constructing a process model
(e.g., a petri net) describing the causal dependencies between activities.
one of the essential problems in process mining is that one cannot assume
to have seen all possible behavior . at best, one has seen a representative
subset. therefore, classical synthesis techniques are not suitable as they
aim at ¯nding a model that is able to exactly reproduce the log . existing
process mining techniques try to avoid such \over¯tting" by generalizing
the model to allow for more behavior. this generalization is often driven
by the representation language and very crude assumptions about com-
pleteness. as a result, parts of the model are \over¯tting" (allow only
what has actually been observed) while other parts may be \under¯tting"
(allow for much more behavior without strong support for it). this talk
will present the main challenges posed by real-life applications of process
mining and show that it is possible to balance between over¯tting and
under¯tting in a controlled manner.
1 process mining
more and more information about processes is recorded by information systems
in the form of so-called \event logs". despite the omnipresence and richness of
these event logs, most software vendors use this information for answering only
relatively simple questions under the assumption that the process is ¯xed and
known , e.g., the calculation of simple performance metrics like utilization and
°ow time. however, in many domains processes are evolving and people typically
have an oversimpli¯ed and incorrect view of the actual business processes. hence,
the goal of process mining [1] is to learn about processes by observing them
through event logs.
process mining addresses the problem that most organizations have very
limited information about what is actually happening in their organization. in
practice, there is often a signi¯cant gap between what is prescribed or supposed
to happen, and what actually happens. three basic types of process mining can
be identi¯ed: (1) discovery , (2) conformance checking, and (3) model extension .these three types may be applied to the di®erent perspectives of business pro-
cesses, e.g., the control-°ow perspective , the case/data perspective , the resource
perspective , etc.
although it is important to view process mining in a broader context, most
interesting and most challenging is the discovery of the control-°ow perspective.
today, there are many techniques that, based on an event log, are able to con-
struct a process model. for example, using the ®-algorithm [3] a petri net can be
discovered based on sequences of events. a tool like prom o®ers a wide variety
of control-°ow discovery algorithms (cf. www.processmining.org).
2 balancing between under¯tting and over¯tting
prom has been applied in several hospitals (amc and catherina hospitals),
banks (ing), high-tech system manufacturers (asml and philips medical sys-
tems), software repositories for open-source projects, several municipalities (heus-
den, alkmaar, etc.), etc. these experiences show that the main problem is ¯nd-
ing a balance between \over¯tting" and \under¯tting". some algorithms have
a tendency to over-generalize, i.e., the discovered model allows for much more
behavior than actually recorded in the log. the reason for over-generalizing is of-
ten the representation used and a coarse completeness notion. other algorithms
have a tendency to \over¯t" the model. classical synthesis approaches such as
the \theory of regions" aim at a model that is able to exactly reproduce the
log. therefore, the model is merely another representation of the log without
deriving any new knowledge.
this talks will focus on ¯nding a balance between \over¯tting" and \under-
¯tting". one approach is to do process mining in two steps [2]. in the ¯rst step,
a transition system is constructed. while constructing the transition system one
can choose from various abstractions. in the second step, the transition system
is transformed into a process model. this step is needed because the transition
system is not able to show concurrency and parallel branches typically result
in an explosion of states making the transition system unreadable. hence, the
goal of the second step is to provide a compact representation of the selected
behavior. note that the ¯rst step is mainly concerned with abstraction, while
the second step is mainly concerned with representation issues.
references
1.w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b.f. van dongen, a.k.
alves de medeiros, m. song, and h.m.w. verbeek. business process mining: an
industrial application. information systems , 32(5):713{732, 2007.
2.w.m.p. van der aalst, v. rubin, b.f. van dongen, e. kindler, and c.w. gä unther.
process mining: a two-step approach using transition systems and regions. bpm
center report bpm-06-30, bpmcenter.org, 2006.
3.w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.