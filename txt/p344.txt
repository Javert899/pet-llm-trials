configurable reference 
modeling languages 
 
jan recker1), michael rosemann1), wil van der aalst1,2), monique jansen-vullers2), alexander 
dreiling3)
1) faculty of information technology 
queensland university of technology 
126 margaret street, brisbane qld 4000, australia 
phone: +61 7 3864 9473, fax: +61 7 3864 9390 
{j.recker, m.rosemann, w.vanderaalst}@qut.edu.au 
2) eindhoven university of technology 
p.o. box 513, 5600 mb eindhoven, the netherlands 
phone: +31 40 247 4295, fax: +31 40 243 2612 
{w.m.p.v.d.aalst, m.h.jansen-vullers}@tm.tue.nl 
3) sap research cec brisbane , sap australia pty ltd 
133 mary street, brisbane qld 4000, australia 
phone: +61 7 3259 9512, fax: +61 7 3259 9599 
alexander.dreiling@sap.com configurable 
reference modeling languages 
 
abstract 
this chapter discusses refere nce modeling languages for busine ss systems analysis and design. 
in particula r, it repo rts on refere nce models in the context of the design-for/by-reuse paradigm, 
explains how traditional modeling techniques fail to provide ade quate conceptual expressiveness 
to allow for easy model reuse by configura tion or adaptation, and elabor ates on the need for 
reference m odeling languages to be configur able. we discuss requirements for and the 
development of reference modeling la nguages tha t reflect the need for con figurability. 
exemplarily we report on the development, de finition and configuration of configurable event-
driven process chains. we fur ther o utline how  configurab le referen ce modeling lang uages and 
the corresponding design principles can be used in future scenarios such as process mining and 
data modeling. 
keywords 
is models, system s developm ent technique s, conceptual design, process design 
introduction 
business system s have evolved as computer-based  inform ation system s that pres ent th emselves 
as com prehensive commercial packages for th e support of business requirem ents. being it-
supported software solutions, they presum ptively support and enhance organi zations in all their 
business operations. first attem pts towards such corporate-wide integrated inform ation system s 
were develo ped in the 1 960s (beer, 1966). th e huge success of this idea has led to th e 
proliferation of com prehensive busin ess inform ation system s such as enterprise resou rce 
planning (e rp) system s or enterprise system s (es), the current generation of which is known 
under the label of process-aware information systems (dumas, van der aalst, & ter hofstede, 
2005). this label has emerged from  an act of “s ilent revolution” that has embraced the is 
discip line o ver the las t decades and which has star ted to shift the focus of atten tion from  a data 
perspective towards a process perspective. as  a result, an increasing num ber of business 
processes are now conducted under the governance of  process-aware inform ation system s, with 
the intention of bridging not only business and it but also people  and software through process-
based technology. 
the success ful im plem entation of process-aware business sy stem s is, however, dependent on a 
seam less alignm ent between the sys tem capabilitie s and the organizational requirem ents of the 
enterprise. the process of aligning organiza tional requirem ents and system  functionality 
(rosem ann, vessey, & weber, 2004) is known as configuration  and rests on the assumption of 
similarity b etween ente rprises, in th e sense tha t generic busin ess system  functiona lity, with som e 
custom ization, is assum ed to be applicable to al l enterprises in a given industry sector. following 
the idea of process-orientation, business system  vendors often offer their solutions in the for m of 
pre-defined generic business proces ses for a set of industry sectors. oracle, for exam ple, offers 
system -supported business process solutions that cover 19 industrial sector s (oracle, 2006) while 
copyright © 2006 by idea  group inc. 2sap offers business process solutions for 24 industrial sectors (sap, 2006). these industry-
specific p rocess “tem plates” are in troduced to or ganizations to offer a final im plem entation of 
the business system  in the for m of a c onfigured, enterprise-sp ecific set of business p rocesses that 
are enabled, enacted and supported by the system. 
yet, the act of aligning generic industry-specific to enterprise-s pecific business processes that 
reflect o rganizational req uirements has been sho wn to im ply extensive configuration efforts and 
may lead to significan t implem entation costs th at exceed th e price of soft ware licenses by factor 
five to ten (davenport, 2000). som e instances ev en indicate that a m isalignm ent m ay result in 
severe business failure if  conducted badly. consid er the example of foxm eyer, once a $5 billion 
wholesale drug distributor, which filed for ba nkruptcy in 1996 after andersen consulting 
concluded that the insufficiently aligned sap installati on crippled the firm' s distribution (stein, 
1998). other exam ples include mobil eur ope and dow che mical (davenport, 1998). 
business system s vendors are aware of these proble ms and try to increase the m anageability of 
the configuration process of their sof tware solu tions. one res pectiv e measure is to deliver the 
products along with extensive docum entation an d specific implem entation and configuration 
support tools. conceptual m odels play a central role within such docum entation. they describe 
functionality and structure of the business sy stems on a sem i-formal level and have becom e 
popular under the notion of reference models . though such reference m odels for business 
system s exist in the form of function, data, sy stem organization, object and process models, the 
latter is by far the m ost popular m odel type (r osemann, 2000) and often for ms a constitu ent part 
of the docum entation of software packages. 
while the ex isten ce of  such ref erence models as part of the system  documentation in general is 
valuable in software im plem entation projec ts (kesari, chang, & seddon, 2003), traditional 
reference m odels offer little or no support for conf iguration (daneva, 2000) this is m ainly due to 
a lack of conceptual support in the form  of a configurable  modeling language underlying the 
reference m odels (rosem ann & van der aalst, in press). 
nevertheless, the business system  configuration process can significantly benefit from the usage 
of reference models, for instan ce in te rms of consistency, com pleten ess, ad aptability an d 
communicability. since most business inform ation sy stem s are quite extensiv ely d epicted in their 
reference m odels, it m otivate s the id ea of  utiliz ing these reference m odels for the configuration 
task. however, the language that is used to form ulate reference m odels for  the task of system  
configuration needs to be configurable to suppo rt this delicate task. a configurable reference 
process m odel should, for instance, provide ru les defining how a gene ric reference process 
model can b e adapted to suit a specific organizational context. 
this chapter provides an introduction to conf igurable reference m odeling languages and their 
role in the configuration process of business inform ation system s. it covers discussions of current 
shortcom ings of reference m odeling languages, th e need for configurable reference m odels, and 
the different stages towards the dev elopm ent and application of configurable reference m odeling 
languages, particularly in the context of busines s inform ation system s. while we will, during the 
course of  this chapte r, address m ultiple persp ectiv es using th e exam ples of  process and data 
models, our f oremost focus lies on th e process p erspective. w e will exp licate our argu mentations 
using the exam ple of a c onfigurable re ference process m odeling language called configurable 
epcs (rosem ann & van der aalst, in press). 
forthcom ing from  this introduction we will fi rst discuss trad itional reference m odeling 
languages. t hen, we will present and discuss de sign principles for the design of configurable 
reference m odeling languages and then apply the principles in the developm ent of epcs. next, 
copyright © 2006 by idea  group inc. 3we will briefly outline future scenarios for c onfigurable reference m odeling languages and their 
design principles. w e close this chapter by discussing som e conclusions from  our work. 
reference modeling languages 
reference models are generic concep tual m odels  that form alize recomm ended practices for a 
certain domain (fettke & loos, 2003; misic & zh ao, 2000). often labeled with the term  'best 
practice'  reference m odels claim  to capture reus able state-of-the-art practices (silverston, 2001a, 
2001b). the depicted dom ains can be very differe nt and range from  selected functional areas 
such as financial accounting or custom er relati onship managem ent to the scope of an entire 
industry sector, e.g., higher education. 
the m ain objective of reference m odels is to  stream line the design of  enter prise-individual 
(particular) models by provi ding a generic solution (rosem ann, 2000). the application of 
reference m odels is m otivated by the ‘design- for/by-reuse’ paradigm , postulating that they 
should accelerate the m odeling process by providing a repository of potentia lly relevant business 
processes an d structures,  ideally in an easy ‘p lug & play’ m odus. thus, reference m odeling is 
closely related to the reuse of information models  (wisse, 2000) by providing a generic m odel 
solution tha t can be adap ted to a spec ific model reflecting individual requirem ents. 
reference models are often used for describi ng the structure and functionality of business 
system s. in these cas es, a reference m odel can be interpreted as a structured sem i-formal 
description of a partic ular application. such application reference models  correspond to an 
existing off-the-shelf-solution that supports the f unctionality and structure described in the m odel 
(rosem ann, 2002). they can for example be used  for a better understand ing and evaluation of 
the approp riateness of th e software. 
one of the most com prehensive m odels is th e sap reference m odel (curran, keller, & ladd, 
1997). in its version 4.6 its data model includes more than 4,000 entity types and the reference 
process m odels cover m ore than 1,000 system  processes and inter-o rganizational business 
scenarios. most of the other m arket leading bus iness system s vendors have alternative or sim ilar 
approaches towards such reference m odels. 
foundational conceptual work for the sap refere nce m odel had been conducted by s ap ag and 
the ids scheer ag in a collaborative research project in the years 1990-1992 (keller, nüttgens, 
& scheer, 1992). the outcom e of this pr oject was the process m odeling language event-driven 
process chains  (epcs) (keller et al., 1992; scheer, 2000) , which has been used for the design of 
the reference process m odels in sa p. epcs have becom e one of the m ost popular ref erence 
modeling languages overall and has for instan ce been used for the design of m any sap-
independent reference m odels (e.g., si ebel crm, itil, etom, or pmbok). 
epcs basically denote directed graphs, which vi sualize the control flow and consist of  events, 
functions and connectors. each epc starts with at leas t one ev ent and e nds with at least one 
event. an event triggers a f unction, which leads to a new even t. three types of connectors 
(logical and ∧, logical exclus ive or xor , logical or ∨) can be used to specify the logical 
links th at ex ist be tween sequences of events and functions in  process chains. they m odel control 
flow splits and joins. an and- split activates all outgoing branch es in concurrency while an 
and-join waits for all incom ing branches to synchronize before propagating control to the 
following epc elem ent. an or-split activates o ne, two or u p to all outg oing branch es based on 
certain conditions while an or-joi n synchronizes all incom ing branch es that are active and then 
propagates c ontrol to the  following epc elem ent. an xor-split activates one of  multiple 
copyright © 2006 by idea  group inc. 4outgoing branches based on certain conditions w hile an or-join propagates control to the 
following epc elem ent when the first active incom ing branch arriv es. 
figure 1 gives an exam ple for an epc as it potentia lly can be found as part of a reference m odel. 
this m odel shows an extract of a procurem ent pr ocess. the epc contains 8 events, 6 functions, 
and 3 connectors. the events can be seen as pre- and/or post-conditions of functions. for 
exam ple, the function verify invoice  can be executed if event invoice posted  is received and the 
completion of  this f unction will trigg er the event payment to be effected . there are tw o functions 
trigg ering e vent invoice arrived . the xor-connector in the lower ha lf of the diagram shows that 
there is no need to synchronize these two functions, e.g., the com pletion of store  goods  directly 
trigg ers ev ent invoice posted. the xor-connector in the upper half of the diag ram splits the 
contro l flow in acco rdance to th e con dition wheth er the pu rchase perform ed relates to goods (left 
branch) or services (right branch). the rem aining connector denotes an  and-join, m eaning that 
both input events need to be tri ggered in order to  enable function create  purchase  order . 
copyright © 2006 by idea  group inc. 5figure 1. an example for a potential  reference m odel in epc notation 
demand 
exists
create 
purchase 
order
purchase 
approved
perform 
purchase
evaluate 
goods 
receiptrecord 
servicegoods a rrivedservices
to be
recorded
invoice poste d
verify invoice
paymen t to b e 
effecte dstore goodsgood s to be  
stored
vfunding exists
x
xan event represents a 
state tha t influences or 
controls the further flow of 
one or more business 
processes. events trigger 
functions and are  results 
of functions.a function is a task or activity 
performed on an object in 
order to support one  or 
several bus iness objectives. 
a function is triggered by an 
event and results in one or 
more events.
logical operators allow 
specifying the logi cal link s 
that exist between  events and 
functions in process chains. 
splits activate one or more 
outgoing branches based on 
certain conditions while joins 
synchronize one or more  
active incoming branches to 
propagate cont rol to a 
following epc element.directed arcs are used to 
connect epc elements 
and depict the time- logical 
flow of the process.
 
as can be observed from figure 1, regular epcs  do not contain any conf iguration infor mation. 
therefore, valuable inform ation is lack ing. for exam ple, it is not shown that record s ervice , i.e., 
the scenario in which procured se rvices need to be audited during execution, is only of interest 
for a subset of all procu rement scenarios, na mely those where services are being procured 
instead of goods. there are cases im aginable wher e enterprises only enact a procurement process 
for goods but not services. in these cases the acc ordant part of the reference m odel is not 
applicable to the organization and should be e liminated from the enterprise-specific process 
copyright © 2006 by idea  group inc. 6model. this im plies that the xor connector m ay be a choice m ade for the whole process rather 
than for an individual process instance. consid er a second exam ple. th e epc shown in figure 1 
neithe r shows that store  goods  is only relevant if  evaluate  goods  receipt  is conducted. if 
organizations opt never to proc ure goods but only services th ere is no need to im plement 
functionality for goods storage. al so, the m odel neither gives any in sights into the necessity or 
criticality of potential configur ation s nor into pos sible inte r-dependencies between configuration 
decisions. t hus, the m odel expressive power is limited and cannot guide th e configuration of a 
corresponding business system . hence, a referen ce m odel designed using a traditional reference 
modeling language is only of lim ited use for the configuration process du e to lacking support on 
a conceptu al level. 
 
design of configurable reference modeling 
languages 
design principles  for a configu rable ref erence m odeling l anguage 
following the elabo rations in the p receding s ection and follo wing the idea of reference 
modeling, i.e., the stream lined developm ent of i ndividual models through “design-for/by-reuse”, 
we postulate that reference m odeling languages ought to be configurab le. we can reason our 
argum entation by introducing a sim ple reference m odel lifecy cle th at dep icts th e different stages 
of a reference m odel, ranging from  model design to execution (see figure 2). 
figure 2. reference mod el lifecycle 
 
the lifecycle is initiated by es vendors who depict the functionality of their software packages 
in reference models ( design time ). such a reference m odel typi cally not includes m erely one 
proposed alternative for conducting business in a certain domain but a range of often mutually 
exclusive alternatives it denotes an ‘upper-bound ’ of business system  models that m ay possibly 
be im plem ented in a p articular en terprise. an  organization m ight m erely favor one of the 
depicted alternatives and thus only to a subset of system  functionality to be im plemented. 
accordingly they only refer to a subset of th e reference m odel. figure 2 demonstrates this 
problem  in a sim ple example. the upper-bound refe rence m odel depicts two m utually exclusive 
alternatives of conducting business,  either the sequence a-b-c or a- b-d. a particular enterprise 
has to select one of these two substitutiv e alternatives of c onducting business under the 
copyright © 2006 by idea  group inc. 7governance of the respective bus iness system . the xor split in this case represen ts a decis ion 
point that is of  relevance during configuration tim e. note that a m odel in this phase cannot 
necessarily be executed.  it rather cap tures d ifferent  alternatives for a domain and thus needs to be 
configured b efore it can serve as the actual build time  model, a tem plate for im plementing and 
executing process ins tances at run time . 
these types of decision cannot be  reflected in trad itional reference m odels due to lacking 
conceptual support of the underlying reference modeling language. existing reference m odeling 
techniques do not support the highlighting and sel ection of dif ferent alternatives. the resulting 
lack of expressiveness denotes a m ajor issue for model users, as (a) it does not becom e obvious 
what configuration alternatives exist during sy stem i mplementation, and (b) the m odels do not 
provide any decision support towards the selection of differe nt alterna tives. 
contem plating the reference m odel lifecycle and the shortcom ings of traditional ref erence 
modeling languages, we have identified the following design principles for a configurable 
reference m odeling language: 
 
(a) a configurable m odeling language is characte rized by its capability to support decisions 
for the transfor mation of reference m odels from  configuration tim e to build tim e, i.e., the 
model user can individualize the m odel by se lecting from  alternative options before 
instances will be derived from  it. such confi guration decisions on a t ype level have to be 
clearly differentiated from d ecisions on an instan ce level and can be highlighted as 
variation points  in a m odel (halm ans & pohl, 2003) that should captu re a decis ion point 
together with the re lated possible choices. 
(b) a configurable m odeling language has to s upport configurations of business system s 
regarding processes, functions, control fl ow and data. in term s of processes, 
configuration should address the active parts  of process m odels, i. e., functiona lity 
(functions, tasks, transitions, a nd the like) and control flow. as  events (o r states) as more 
passive parts of processes cannot actively be  influenced by an organization, these should 
not be covered by a configurable reference process m odeling language. 
(c) it should be possible to differentia te configuration decisions into mandatory  and option al 
decisions . mandatory decisions have to be m ade before the very first instance can be 
derived from this m odel. optional decisions  can initially be neglected. it should be 
possible to m aintain def aults f or optional configuration decisions. this allows the 
instan tiation of the m odel even witho ut explicitly m aking all possible decisions. 
(d) configuration should be  differentiated into global  and local  decisions. global decisions 
are based on the general contex t, including factors such as in dustry, country, size etc. t he 
relevant context factors have to be m aintained for every variation point. as soon as 
inform ation regarding the relevant contex t has been provided, a first (hidden or 
background) configuration of the reference m odel can take place, which would lead to 
“context-aw are m odels”. local configurations  require an explicit study of the relevant 
reference m odel as the related decisions m ay be based on local or individual factors such 
as available budget, risk profile, tim e etc. 
(e) configuration decisions should be dif ferentiated into critica l and non-critical  decisions . 
critical decisions have signifi cant impact on th e use of th e system  and other business 
processes, can often not be re-done and shoul d be m ade by the project team. non-critical 
decisions are of m inor importance, can be m ade by individual team  members and change 
over tim e. 
copyright © 2006 by idea  group inc. 8(f) configuration decisions can have interrela tionsh ips. such pre-requisites for a 
configuration decision should be clearly highlig hted. this can include other decisions that 
have to be m ade before . moreover, any im pact of one decision on other decisions has to 
be depicted. this m eans, a logical order between configuration decisions has to be 
consider ed. this inc ludes inte rrelationships within one m odel, between tw o process 
models, or even interrelationships between reference process and related data m odels 
(rosem ann & shanks, 2001). 
(g) variation points should refer to furth er related information  within the pa rt of the busin ess 
system  it depicts. this m ay include the syst em online help and the system  configuration 
module, such as the sap im plementation gu ide (img) (bancroft, seip, & sprengel, 
1997). such inform ation can provide valu able support for the decision m aker. 
(h) the entire configuration process should be  guided by recomm endations in the form  of 
guidelines . such information could com e as benc hmarking data from  the outside of the 
system  if a critical m ass of system  users is willing to provide such  data. it m ay include 
inform ation such as the processing tim e of a given process path, the num ber of tim es a 
decision has been m ade in the sam e industry or the required investm ents and 
implementation tim e for a certain configuration. s uch recommendations may as well 
assist reference m odel users in assessing the compliance of their conf iguration to industry 
best practices. 
(i) reference models can be very com prehensive. a ny extension of the underlying m odeling 
languages has to carefully consider the im pact on the perceived m odel com plexity. it is 
advisable to extend  existing referen ce modeling  languages  rather than developing new  
ones. 
 
in the f ollowing we will apply these  design pr inciples in th e developm ent of  a conf igurable 
reference m odeling language. as process m odeling is key to acqui ring, comm unicating and 
validating b usiness requ irements (daneva, 2004; w elti, 1999 ) we will focus the process 
perspec tive, i.e., the alig nment of it functionality to the ac tual business processes of an 
organization. the following section introduces configurable epcs  as the repres entation 
language of a reference process m odeling approach that considers the configurable nature of a 
business system  and reflects the design princi ples for configurable m odeling techniques. 
configurable event-driven process chains 
this section introduces the noti on of a configurable epc (c-epc ).we start our elaborations by 
referring back to the procurem ent exam ple give n before. figure 1 shows a potential reference 
model for the process of procurem ent in form  of a class ical epc. following this diagra m, 
procurem ent starts with the crea tion of a purchase order (function create purchase order ) when 
a dem and for services or goods exists (event demand exists ) and (logical and-conn ector 
∧) when sufficient funding for the procurem ent exists (event funding exists ). once th e created 
purchase order has been approved, the procuremen t can be conducted. t he process succeeds with 
either reception and storage of the arrived goods, or  recording of the enactm ent of the requested 
service. in either case, an i nvoice will arrive at som e point in tim e demanding paym ent for the 
delivery of goods or services. then, the invoice need s to be verified, which in turn triggers the 
effectuation of paym ent, which ends the process. 
however, not all organizations im plem ent proc urem ent the sam e way. for exam ple, not only 
goods m ay be purchased but also services, with the for mer being in a need for appropriate 
copyright © 2006 by idea  group inc. 9storage while the latter need to be audited du ring enactm ent. a particul ar organization may only 
want to im plem ent procurem ent functionality of a business system  for either services or goods. 
furtherm ore, f or illus tration purposes  let us assu me that a purchase m ay or m ay not be related to 
a purchase order. sim ilarly, the verification of invoices m ay or m ay not be essential for the 
effectuation of paym ent, for exam ple in cases wh ere long term  contracts to trusted vendors or 
sophisticated support exists, e.g., in  form of evaluated receipt sett lement functionality. none of 
these potential configuration decisions can be visualized usin g the traditio nal epc ref erence 
modeling language. in particular, the m odel does not  express possible confi guration alternatives 
and scena rios with resp ect to the pro cess it rep resents. 
this sec tion introdu ces configurable epcs  as an approach to depi ct variation points in a 
reference p rocess m odel as well as f urther c onfiguration inform ation (rosem ann & van der 
aalst, in pr ess). 
adhering to design principle (b) we seek to m ake the active parts of proces ses configurable, i.e., 
functionality and control flow . accordingly, in a c-epc, f unctions and connectors can be 
configured. as an example, figure 3 shows the procurem ent reference process m odel introduced 
in the preceding section depicted  in c-epc notation. w e will us e this example m odel throughout 
the rem ainder of  this se ction to  introduce the notion of c-epcs. 
figure 3. potential configurable reference model for the procurement p rocess, depicted in c-
epc notation 
copyright © 2006 by idea  group inc. 10 
adhering to design principle (i) c- epcs extend regular epcs with the specification of variation 
points (configurable functions and connectors), configuration requirem ents and configuration 
guidelines. 
configurable functions  may be included (on), excluded (off) , or cond itionally skipped (opt). 
to be m ore specific, a decision has to be m ade whether to perfor m such a function in every 
process instance during run tim e (on), whethe r to exclude this function perm anently,  i.e., it will 
not be executed in any process instance (off), or  whether to def er this d ecision to run  time, i.e., 
for each pro cess ins tance it has to be decided whether o r not to execu te the function (opt). 
copyright © 2006 by idea  group inc. 11referring to the exam ple given in figure 3, it  is fo r instance po ssible to con figure the 
procurem ent process in a way that create  purcha se order  and verify  invoice are not to be 
implem ented; therefore they are to b e excluded from the enterprise-individual process m odel. 
reflecting this decision in the c onfigurable reference process model, the a ccordan t configurable 
functions can be switched off. 
configurable connectors  subsum e possible build tim e conn ectors that are less or equally 
expressive. hence, a configurable connector can only be mapped to a connector type that 
restricts its behavior. a confi gurable or-connector m ay be mappe d to a regular or-, xor-, or 
and-connector. or, the or-connector m ay be ma pped to a single sequence of events and 
functions (indicated by seq n for some process path starting with node n). that is, out of the 
incom ing/outgoing branches of a configurable o r-conn ector, a single branch is chosen that is to 
be included in the individual m odel while the re maining branches  are to be excluded from  the 
model. a configurable a nd-connector m ay only be m apped to a regular and-connector with a 
decision being m ade as to how m any of n availab le process p aths are to b e executed in 
synchronization. a configurable xor-connector m ay be m apped to  a regular xor-connector, or 
the xor-connector m ay be m apped to a single process sequence seq n. table 1 summarizes 
these m apping constraints. 
table 1. constraints for the configuration of connectors 
 
referring back to the example given in figure 3, cons ider the decis ion tha t a particular enterp rise 
does not want to im plement procurem ent for bot h goods and services but instead only for goods. 
the assessm ent and reco rding of serv ices would then be deemed unnecess ary. in th e reference 
process m odel, such a decision can be reflecte d by m apping the configurable xor-connector to 
a single seq uence seq goods arrived  specifying the process branch containing the handling of 
received goods. 
in order to depict inter-dependenc ies between configurable e pc nodes, configuration 
requirements  can be introduced to lim it the configurat ion possibilities be tween inter-related 
configurable nodes. these constraints are best de fined via logical expressions in the form  of if-
then -statements and denote predicates fo r a set of configurable nodes that must  hold true for a 
valid configuration. consider ag ain the exam ple given in figu re 3. if the goods receipt sub-
process is deem ed unnec essary, there is no need for the storage of goods, as services cannot be 
physically stored. a configuration constraint could be that if evaluate  goods  receip t is switch ed 
off, so m ust be function store  goods . 
in order to provide input in  term s of r ecomm endat ions and proposed best practices, configuration 
guidelines  may be depicted (also in the form  of logical expressions) to gu ide the con figuration 
process semantically. they, too, m ay be expressed in the form of if-then -statements. they 
denote logical predicates for a set of configurable nodes that may but not need  hold true for a 
given configuration. ag ain, consider figure 3. verify invoice may be an unnecessary task if long-
term procurem ent contracts with tru sted vendor s or advanced  evaluated receipt settlem ent 
copyright © 2006 by idea  group inc. 12functionality exists that autom atically settles invoices  based on goods issues. for these scenarios 
a configuration guideline suggests sw itching verify invoice  off. 
in summ ation, the notion of a c-epc potentially  facilitates a selecti on and modification of 
process flow s and process activit ies within a reference p rocess model. as can be seen from  
figure 3, configurable nodes are denoted as usua l epc nodes shaped by thick circles, while both 
configuration requirem ents and guidelines are depi cted as notes-like boxes attached to a num ber 
of configurable nodes. 
configuration using configurable epcs 
according to the referen ce m odel lifecycle (see fi gure 2), at configuration tim e a configurable 
reference process m odel can be configured in the sense tha t configuration  alternatives within th e 
model are selected in a w ay that a con figuration scenario is created which is deem ed desirab le 
for the particular organization. such a configur ation m aps all configurable nodes to concrete 
values, i.e., regular epc nodes, while adhering to  configuration requirem ents (and possibly also 
configuration guidelines). figure 4 shows tw o possible regular epcs resulting from  a 
configuration of the c-epc shown in figure 3. cons ider the epc depicted in the left part of 
figure 4: in this case, the part icular enterprise decided to re late purchase requests to purchase 
orders, hence, the function create p urchase order  is included. sim ilarly, as the organization 
only purchases from  long-known, trusted vendors , an extra invoice veri fication activity was 
deem ed unnecessary. hence, the accordant function verify in voice was excluded from  the m odel. 
furtherm ore, procurem ent in this case has to ca ter for either physical goods or services. hence, 
the configurable xor-connector has been m apped to a regular xor-connector, allowing at run 
time for the procurem ent of either s ervices or goo ds, for both of which accordant activ ities h ave 
been included as well. in the le ft part of figure 4, configura tion (a) shows th e process model 
resulting from the configuration {(create purchase order,on) ,(xor,xor) ,(evaluate goods 
receipt,on),(store goods,on) ,(rec ord serv ice,on),(xor,xor) ,(verify invoice,off) }. 
 
figure 4. two possible configurations  of the c-epc shown in figure 3 
copyright © 2006 by idea  group inc. 13demand 
exists
perform 
purchase
recor d 
serviceservices
to be
recorded
invoice poste d
verify invoice
payme nt to b e 
effected
vfund ing and 
purchase 
approveddemand 
exists
create 
purcha se 
order
purcha se 
approved
perform 
purcha se
evaluate 
goods 
receiptrecor d 
servicegoods a rrivedservices
to be
recor ded
invoice po sted 
and to be 
settledstore  goodsgood s to be 
stored
vfundi ng exists
x
x
configurat ion (a) configuration (b)
 
configuration (b) shows an epc resulting from  the configuration {(create purchase 
order,off),(xor,seq services to be recor ded),(goods receipt,of f),(storage,off) ,(service 
recording,o n),(xor,seq services to be r ecorded ),(verify invoice,on) }. as both epc m odels do not 
conflict ag ainst the conf iguration req uirements depicted in figure 3, bot h configurations are 
valid . note here th at a v alid configuration is also suitable  if it further sa tisfies all configuration 
guidelines. 
strictly speaking, deriving a correct build tim e epc from  a configured c-epc involves three 
kinds of task s: (a) derivation of a partial epc model for each configured  function, (b) d erivation 
of a partial epc m odel for each co nfigured conn ector, and (c) recalcu lation of the complete epc 
process g raph by excluding unnecessary paths. t he calcu lation of the build tim e epc should be 
governed by  the m inimality criterion : if elem ents have to be added by configuration, add as few 
elem ents as possible; if elem ents have to be rem oved by configuration, remove as m any as 
copyright © 2006 by idea  group inc. 14possible, an d optim ize the graph so as to include no unnecessary paths (mendling, recker, 
rose mann, & van der a alst, in press; recker , rosem ann, van der aalst, & mendling, 2006). 
theoretically, there are f our constellations in which a configured func tion m ay appear in a c-
epc (dreiling, chiang, rose mann, & van der a alst, 2005; recker, rosem ann et al., 2006): (a) 
between two events, (b) between a connector and an event, (c) be tween an event and a connector, 
and (d) between two connectors. f igure 5 illust rates th e der ivation rules f or these f our cases 
(connectors labeled with any indicate that any connector type  is allowed to m ake the r ule 
applic able). in case (a) a conf igurable  function m apped to opt genera tes two addition al xor-
connecto rs. this m apping is proposed in acco rdance to the minim ality criterion as it introduces a 
minimal set of additional elem ents. in case (b) the configurable function m apped to opt 
generates an additional f unction and two xor-c onnectors. t his additional function allows for 
the xor-split decision, otherwise th ere would h ave been a s plit connector subsequent to a join 
connecto r, which is not lawful. case (c) is sim ilar to case (a ) – instead o f the succeeding event a 
successo r split connecto r (any) is giv en. in case  (d) the config urable function m apped to off 
may not si mply be excluded. as the any join m ay be the last connector in a chain of several 
connectors, the exclusion of the configurable f unction m ay not be possibl e in every cas e (if the 
connecto r chain is com posed of join connecto rs only, events p receding the connecto r chain can 
be elim inated together with the function. if the connector chain also incl udes split connectors, 
there are further functio ns at th e end  of the chain  that require the even ts in order to co mply with 
the epc alte rnation rule) . the option al function f ollows a sim ilar idea as a pplied in cas e (b). all 
of these derivation rules preserve  the correctness of the m odel. 
figure 5. derivation rules fo r configured functions 
copyright © 2006 by idea  group inc. 15 
configured connectors can m ostly be derived in a straight-forward m anner. if a configurable 
connector is not configured to a sequence, only its label has to be adopted. if a connector is 
configured to a sequence seq n, those succeed ing paths th at are not  to be included in the build 
time model have to be elim inated. this m eans th at all subsequ ent elem ents are to b e excluded 
from  the m odel until a join connector is reached. if there are no m ore paths to be elim inated, it 
must further be checked whether th ere are join connectors in the m odel that do not link to any 
incom ing arc. paths starting with these joins have  to be elim inated, too, and the check m ust be 
repeated. th is procedu re is iterated u ntil ther e are no m ore connectors without incom ing arcs. 
figure 6 illu strates this p rocedure by presen ting the case of a split connector whose outgoing 
paths are elim inated. following our argum entation th is connector and its successor path m ust be 
eliminated u ntil a join co nnector is r eached. again, these de rivation rules preserv e the 
correctness of the m odel. 
figure 6. example: connector configured to se q2
copyright © 2006 by idea  group inc. 16 
after deriving configured func tions and configured connector s, the resulting epc m ay still 
include unnecessary process graph structures. functions that ar e switched  off and connectors 
that are conf igured to seq n may lead to em pty paths or connectors with only one incom ing and 
one outgoing arc (for instance th e xor connector in the resulting m odel shown in figure 6). in 
order to comply with th e minimality criterion, cer tain graph reduction rules have to be applied. 
figure 7 gives five reduction rule s that are sufficient to derive  epcs that c omply with the 
minimality criterion. rule (a) elim inates arcs a from an and-split to an  and-join if there is a 
path f rom the split to the  join th at do es not pass a. rule (b) de letes a path of concurrency if that 
path only includes an event and no function. rule (c) elim inates connectors that only have one 
incom ing and one outgoing arc. rule (d) delete s an arc be twee n an or split or an xor split and 
a join conn ector if  there is anoth er arc between th em. rule (e) m erges two events if they both are 
successo rs of an or split or an xor split and predecesso r of the sam e join connecto r. these 
reduction rules preserve a m inimal process graph structure that repr esents the control flow of the 
configured process flow variant. 
figure 7. reduction rules to derive minimal epcs 
copyright © 2006 by idea  group inc. 17 
the previous derivation rules can be summarized  in the definition of a respective derivation 
algorithm . the algorithm  includes the steps 1-4 for connector configur ation, 5-6 for graph 
reduction, 7 for function configuration, and 8- 9 for graph reduction. w e start with the 
configuration of connectors as  sequence configurations m ight already red uce the m odel; in 
particular, it m ay lead to the exclusion of c onfigurable functions. furtherm ore, connector 
configuratio n may result in unnecessary connector s. the graph is reduced in steps 5 -6, as the 
removal of unnecessary connectors before handlin g configurable functions  allows applying the 
derivation rules (a) and (c) of figur e 7, which in turn re sult in  a smaller graph than rules (b) and 
(d). still, fu nction configuration m ay also resu lt in unnecessary connectors that h ave to be 
removed in steps 8-9. 
1. map configured connectors to re gular connectors in adherence to the configuration value. 
2. if the configurat ion value is seq n elim inate paths (including all nodes) i ≠ n, until a join 
connector or an end node is reached. 
3. check whether there is a connecto r c without any incom ing arcs. if yes, goto 4. if no, 
goto 5. 
4. elim inate all paths s tarting with con nector c until a join connector or an end node is 
reached. goto 3. 
5. check whether one of the reduction rules shown in figure 7 is applicable. if yes, goto 6. 
if no, goto 7. 
6. apply one reduction rule and goto 5. 
7. configure functions according to the rules shown in figure 5. 
8. check whether one of the reduction rules shown in figure 7 is applicable. if yes, goto 9. 
if no, end. 
9. apply one reduction rule and goto 7.  
copyright © 2006 by idea  group inc. 18steps 1 to 9 ensure that all c onfigurable nodes in a c-epc are e ither deleted from  the model or 
mapped to regular epc counterparts. at this stage, we can ensure that the resulting process graph 
does neither contain semantically ambiguous pr ocess path s nor unnecessary ones. what we 
cannot ensure is a form al sem antics of the re sulting epc (kindler, 2005 ; van der aalst, 1999). 
yet, our extension (and the respect ive reduction) approach allows for the applic ation of  existing 
formalization approaches, e.g., (kindler, 2005; van der aalst, 1999) as a sem antic foundation for 
(deriv ed) ep cs. 
the algorithm as shown here rests on the specif ication of c-epcs in xml (mendling, recker, 
rose mann, & van der a alst, 2005; recker, rosem ann et al., 2006) using the interchange for mat 
epml (mendling & nüttgens, in press) and can be im plemented using the object-oriented 
scripting language xotcl (neum ann & zdun, 2000)  (the prototype program  and the epml 
specification s can be do wnloaded from  http://wi.wu-wien.ac .at/~m endling/epml ). 
future trends 
mining configurable  reference models 
most of the work reported in this  chapter d iscusses the us e of configurable process models as a 
way to actually configure an es, i.e., the m odel is used to r ealize the sys tem. however, 
configurable process m odels (e.g., c -epcs) can also  be used as a way to  analyze the processes 
supported by the system and to “discover” the actua l system  configuration. as a starting point for 
such types of analysis one can use audit trails (also known as event or tr ansaction logs) and apply 
process mining techniques . 
the goal of process m ining is to extract inform ation about processes from event logs (van der 
aalst et al., 2003). process m ining techniques su ch as the alpha algorithm  (van der aalst, 
weijters, & maruster, 20 04) typically  assum e that it is po ssible to sequen tially record e vents 
such that (a) each even t refers to an activ ity (i.e ., a well-d efined step in th e process ) and (b) ea ch 
event r efers to a cas e (i.e., a process instance ). moreover, ther e are o ther techniques e xplic itly 
using additional information such as  (c) the pe rform er also referred to as origin ator o f the event 
(i.e., the person/resource executing or initia ting the activity ), (d) th e tim estam p of the event, or 
(e) data elem ents recorded with the event (e.g., the size of an order). this inform ation can be 
used to au tomatically co nstruc t process m odels. for exam ple, the multi-phase mining approach 
(van dongen & van der aalst, 2004) can be used to construct an epc describing the behavior 
observed in the log. there are m ature tools such  as the prom fra mework (van dongen, alves de 
medeiro s, verbeek, w eijters, & van der aalst, 2 005) availab le to con struct different types of 
models based on process executions. 
figure 8: the relation between re ference models and process mining 
copyright © 2006 by idea  group inc. 19 
there are several ways to use ev ent logs in the co ntext of configurable reference m odels (see 
figure 8). r eference m odels can be descrip tive or prescr iptive , i.e., they are used to d escrib e a 
process or control respectively guide the system . the sap reference m odels are expressed in 
terms of epcs describing how people should/coul d use the sap system . in reality, however, the 
real process m ay deviate from  the m odeled pro cess, e.g., the implem entation is not consistent 
with the specification, or peopl e use a sap solution in a way not  modeled in any of the epcs. 
even if reference m odels are m ore of a prescrip tive natur e, it is still inte resting to inves tigate 
how people really use the system . 
figure 8 shows that reference m odels can be used to configure an inform ation system  
(prescriptive) or to m erely m odel the desired pr ocess (des criptive). ind ependent of the way the 
reference m odel is used; m ost inform ation system s log events in the form  of audit trails or 
transaction logs. the inform ation can be used for process d iscovery  and conformance testing . 
process discovery aim s at the construction of m odels based on the logs without explicitly using 
some a-priori reference model. th is approach is used to construc t models that can be used for 
comparison with existing referen ce models, or to generate input  for the construction of new 
reference m odels. conform ance testing can be us ed to com pare real pro cesses with so me a-
priory know ledge represented in the for m of a refe rence m odel. it m ay be used to see if som e 
descrip tive reference m odel is actua lly followed in  reality. note that system users m ay deviate 
from  the procedure p rescribed in the referen ce m odels. such inform ation can be used for 
auditing or process im provem ent. moreover, the configuration itself can be investigated, e.g., 
which configuration is used, what is the eff ect of using a specific configuration, etc. 
process m ining is far from trivial. knowledge of  the m any ways in which a system  may be used, 
can assist process m ining techniques, as illu strated by jansen-vullers, van der aalst, & 
rose mann (2006). based on inspecting the event l ogs it is relatively easy to discover the 
particular configuration being used. moreover,  event logs can be used to “diagnose” a 
copyright © 2006 by idea  group inc. 20configuration. for example, using process m ining it is po ssible to au tomatically loca te the 
bottlenecks and present them  in th e context of the configurable process m odel (e.g., a function in 
the c-epc). this m ay assist the reconfigurati on of the system. furthe rmore, process m ining 
techniques can be used to com pare different c onfigurations and their e ffects on the perform ance 
of the resulting process, which supports an “evi dence-based” approach towards business process 
manage ment. 
configurable data modeling langua ges 
so far we have covered the configurability of re ference process m odels. yet, given that reference 
models are often used in the cont ext of business system s, there are m ore perspectives to consider. 
business system s are not only popular since they provide process-orient ed support for typical 
functional areas such as procurem ent or materi als managem ent but also since they provide 
integ rated d ata repositories across th e whole ente rprise. accordingly, available reference m odels 
not only depict business processe s but also the data structure o f business sy stem s. as an 
exam ple, the sap reference data m odel covers in the version 4.6 m ore than 230 business objects 
clustering m ore than 4,0 00 entity typ es. a conf iguration approach needs to place em phasis on th e 
configuration of reference data m odels as we ll. consider an organi zational perspective: 
reference data m odels are of particular im portan ce to the configuration of  system  organizational 
units as they precisely depict the given opportunities of a business system . a subset of the sap 
reference data m odel (approx. 30-40 entity types)  allows for a com plete description of the 
interrelations between sy stem  organizational units such as  company, factory, or distribution 
channel, which facilitates configuration decisions  as to the system  organizational structure. 
similar to th e process p erspective, cu rrent re ference data m odels are typically based on 
traditional modeling te chniques su ch as the entity-rela tionship modeling (erm) notation 
(chen, 1976). entity typ es are used to group and depict di stinct subjects of interest, e.g., 
custom ers, organizations, sales order item s etc. these entities m ay possess various attributes for 
further specification. relationships between such  elem ents of interest  are depicted using 
relationship types  that sp ecify the typ e of associ ation between distinct entities. cardina lities  can 
further be us ed to spec ify the extent o f dependency between a ssocia ted en tity types. 
classical data m odeling techniques do not allow for the depiction of configuration inform ation 
such as variation points or configuration requirem ents (rosem ann & sha nks, 2001). in the 
following we discuss som e confi guration decisions that can be made and how they could be 
depicted in reference data m odels. extracts of  the sap reference data m odel are used as an 
exam ple. the structure o f this analy sis follo ws the m ain constructs of entity-relationship-
models, i.e., entity types and relationship types (chen, 1976). note that the variant used here is 
called sap-structured e rm, refer, for instance,  to (seubert, schäfer, schorr, & w agner, 1994). 
transparent exam ples for m odel configurations related to optional entity types  can be found in 
enterprise s ystem s in the definition of sy stem  organizational structures. the sales & 
distribution solution in s ap, for example, requires for a decision whether shipping points of an 
enterprise are to be subdivided  into loading points. the img (b ancroft et al., 1997) m arks this 
decision as optional. this variat ion point, however, cannot be reflec ted in the available reference 
data m odel (see figure 9) as the da ta structure is statically fixed. 
figure 9. configuration  of reference  data models  – entity typ es 
copyright © 2006 by idea  group inc. 21traditional reference d ata model configurable reference dat a mod el
potential data configurationsshipping pointhloading point
shipping po inthloading point shipping point
confi gurati on (b) configuration ( a)an entity type  is a 
collection of th ings 
that can be  
distinctively 
identified. 
a relationshi p type  is an 
associ ation am ong entity 
types a nd hol d true for 
each entity of t he 
associated e ntity types.a confi gurable entity type is a 
variation point in a data  mod el 
concerning a regular entity 
type.  it can i ncluded in the 
model (on) or exc luded from 
the model (off). 
 
in a configurable reference data m odel, optiona l entity types such as loading point could be 
highligh ted with a dotte d line, th ereby indicating that such orga nizational stru cture may (a) o r 
may not be implem ented (b). 
the configuration of optional relationship types includes two decisions. firs t, if the relationsh ip 
type is required at all. if th e relationship is required, a second  decision is related to what 
cardinalities the relationship s hould have. again, consider an organizational perspective: the 
img allows for the decision whether or not to  assign a purchasing orga nization to a company 
code, i.e., w hether procur ement m ay be effectuated company-specific  for all p lants ass igned to 
that com pany (figure 10, configuration (a)), or whe ther procurement may be effectuated plant-
specific  for all the plants assigned to the purchasing organization (figure 10, configuration (b)), 
irrespective of the super-ordina te company code. again, the available reference data model 
cannot reflect th is decision as the relationsh ip between the en tity types co mpany code and 
purchasing organization is fixed. 
figure 10. configuration of referen ce data models – relationship types 
copyright © 2006 by idea  group inc. 22confi gurabl e refe rence data mo del
potential d ata configu rations
config uration (b) configuration (a)purchasing 
organizationcompany code
material valuation 
area
plantpurchasing 
organization -
plant -assignmentr
r
rtraditio nal reference data model
purchasing 
organizationcompany code
material valuation 
area
plantpurchasing 
organization -
plant -assignmentr
rpurchasing 
organizationcompany code
material valuation 
area
plantpurchasing 
organization -
plant -assignmentr
ra configurable 
relationship type is a 
variation point in a da ta 
model concerning a 
regular relationship 
type. it can included in 
the model (on) or 
excluded from the 
model (off) . 
aa
aar
aa
 
a configurable reference data m odel could highli ght this variation point by using a dotted line 
for the conn ection b etween these entity types. 
there is a n eed to further expl ore configurability of reference data m odels. w e only presented a 
brief outline of a proposed conceptual extension to existing reference data m odeling techniques. 
our short discussion revealed that, f ollowing the idea of configurab le reference p rocess 
modeling, the design principles that led to the developm ent of c-epcs may also be used to 
extend or refine other ref erence m odeling tec hniques towards configurability (leading for 
exam ple to c-erms). exem plarily we elabor ated on the conceptual developm ent of a  
configurable data m odeling technique that allows  for the m odeling of optional entity types and 
optional relationship types. clearl y, this has to be considered work-in-progress but nevertheless 
denotes an important and interest ing resea rch facet in the f uture of (conf igurable ) reference 
modeling. 
conclusions 
this chapter discussed and intr oduced extensions to conceptual m odeling la nguages in order to 
facilitate the configuration of reference m odels. these m odeling languages have been developed 
in light of a num ber of critical design princi ples which are of  relevance following the paradigm  
of infor mation m odel reuse. w e used an exte nsion of the event-driven p rocess chain to 
demonstrate the design of a configurable refere nce process m odeling language. furtherm ore, we 
gave first insights into how configurable m odels can be derived via process m ining fr om 
copyright © 2006 by idea  group inc. 23executed business system -supported processes. in principle, other m odeling languages could be 
extended in sim ilar ways. it has been discussed how the idea of configuring process m odels can 
be applied to other views, such as the data pe rspective. w e briefly reported on the developm ent 
of a configurable data m odeling language as an exam ple. 
we expect research on configurable reference modeling to give a stim ulating input to both 
academ ic and practical work around  reference m odels  in the future. the developm ent of generic, 
configurable languages such as the c -epc and th e establishm ent of tool -neutral interchange 
formats such as epml (mendling & nüttgens, in press) or the xml metadata interchange 
(xmi) format (omg, 2005) provide prom ising prot otype exam ples that strive for practical 
adoption in the for m of commercial solutions. co nfigurable reference m odels m ay be used to 
facilitate a model-driven im plementation pro cess of business system s (recker, mendling, van 
der aalst, & rose mann, 2006). or, the usage of conf igurable reference m odels can lead to the 
cross-o rganization al con solidation of  previous process config urations, thereby accum ulating an 
evidence-based body of knowledge as to the conf iguration and enactm ent of business processes 
across m ultiple industry sectors, regions and culture s. these are just a few ideas but they already 
indica te that ref erence m odeling and model conf igurability co ntinue to emerge as a vib rant and 
influential r esearch disc ipline in th e future. 
references 
bancroft, n. h., seip, h., & sprengel, a. (1997). implementing sap r/3: how to introduce a 
large system into a large organization  (2nd ed.). englewood cliffs, ne w jersey: 
prentice hall. 
beer, s. (1966). decision and control: the meaning of  operational research and management 
cybernetics . london, uk: john w iley & sons. 
chen, p. p.-s. (1976). the entity relationship model - toward a unified view of dat a. acm 
transactions on database systems, 1 (1), 9-36. 
curran, t., keller, g., & ladd, a. (1997). sap r/3 business blueprint: understanding the 
business process reference model . upper saddle river, ne w jersey: pr entic e hall. 
daneva, m. (2000). practical reuse measurem ent in erp requirem ents engineering. in b. 
wangler & l. bergm ann (eds.), advanced information sy stems engineering: 12th 
interna tiona l conferenc e (vol. 1789, pp. 309-324). stockholm, sweden: springer. 
daneva, m. (2004). erp requirem ents e ngineering practice: lessons learned. ieee  software, 
21(2), 26-33. 
davenport, t. h. (1998). putting the ente rprise into the enterpris e system. harvard business 
review, 76 (4), 121-131. 
davenport, t. h. (2000). miss ion critical: rea lizing the promise of enterprise systems . boston, 
massachusetts: harvard business school press. 
dreiling, a., chiang, m., rose mann, m., & van der aalst, w . m. p. (2005). towards an 
understanding of model-driven process configur ation and its support at large. in n . c. 
rom ano (ed.), 2005 americas conference on information systems  (pp. 2084-2092). 
omaha, nebraska: asso ciation for inform ation system s. 
dum as, m., van der aalst, w . m. p., & ter hofstede, a. h. m. (eds.). (2005). process aware 
information systems: bridging peopl e and softw are through process technology . 
hoboken, new jersey: john w iley & sons. 
fettke, p., & loos, p. (2003). classif ication of reference models - a methodology and its 
application. information systems and e-business management, 1 (1), 35-53. 
copyright © 2006 by idea  group inc. 24halm ans, g., & pohl, k. (2003). communicating the variability of a software-product fa mily to 
custom ers. software and system modeling, 2 (1), 15-36. 
jansen-vullers, m. h., van der aalst, w . m. p., & rosem ann, m. (2006). mining configurable 
enterprise infor mation syst ems. data & knowledge engineering, 56 (3), 195-244. 
keller, g., nüttgens, m., & scheer, a.- w. (1992). semantische prozessm odellierung auf der 
grundlage "ereignisgesteuert er prozessketten (epk) " (working paper n o. 89). 
saarbrück en, germ any: institu t für wirtschaftsinformatik, universität sa arbrücken ( in 
germ an). 
kesari, m., chang, s., & seddon, p. b. (2003). a c ontent-analytic s tudy of  the advantages and 
disadvantages of process modelling. in j. ang & s.-a. knight (eds.), 14th australasian 
conference on information systems . perth, australia: school of  management inform ation 
system s. 
kindler, e. (2005). on the sem antics of  epcs: re solving the vicious circle. data & knowledge 
engineering, 56 (1), 23-40. 
mendling, j., & nüttgens, m. (in press). ep c markup language (epml) - an xml-based 
interchange form at for event-driven process c hains (epc). information systems and e-
business management . 
mendling, j., recker, j., rose mann, m., & van der aalst, w . m. p. (2005). towards the 
interchange of configurable epcs: an xml-based approach for reference model 
configuration. in u. frank & j. desel (eds.), enterprise modelling and information 
systems architectures 2005  (vol. p-75, pp. 8-21). klagenfurt, germ any: germ an 
com puter society. 
mendling, j., recker, j., rose mann, m., & van de r aalst, w . m. p. (in press). generating 
correct epc s from  configured cepcs. in 21th annual acm symposium on applied 
computing . dijon, france: acm. 
misic, v. b. , & zhao, j. l. (2000). evaluating th e quality of reference models. in a. h. f. 
laender, s. w. liddle & v. c. storey (eds.), conceptual modeling - er 2000  (vol. 
1920, pp. 484-498). salt lake city, utah: springer. 
neum ann, g., & zdun, u. (2000). xotcl, an object-oriented scri pting language. in 7th 
usenix tcl/tk conference  (pp. 163-174). austin, texas. 
omg. (2005). mof 2.0/xmi mapping specification, v2.1 . retrieved january 17, 2006, from  
http://www.o mg.org/docs/form al/05-09-01.pdf  
oracle. (2006). oracle c onsulting business solutions . retrieved january 13, 2006, from 
http://www.oracle.com /consulting/solutions/index.htm l 
recker, j., mendling, j., van der aalst, w . m. p., & rosem ann, m. (2006). model-driven 
enterprise s ystem s configuration. in e. dubois & k. pohl (eds.), advanced inform ation 
systems engineering - c aise 2006  (pp. forthcom ing). luxe mbourg, grand-duchy of 
luxem bourg: springer. 
recker, j., rose mann, m., van der aalst, w . m. p., & mendling, j. (2006). on the syntax of 
reference model configuration. transform ing the c-epc into lawful epc models. in 
c. bussler & a. haller (eds.), business process management workshops  (vol. 3812, pp. 
497-511). berlin, germ any et al.: springer. 
rose mann, m. (2000). using reference models within the enterpri se resource planning 
lifecycle. australian accounting review, 10 (3), 19-30. 
copyright © 2006 by idea  group inc. 25rose mann, m. (2002). application reference mode ls and building blocks for managem ent and 
control (er p system s). in p. ber nus, l. ne mes & g. schm idt (eds.), handbook of 
enterpris e architectur e (pp. 595-616). berlin, germ any: springer. 
rose mann, m., & shanks, g. (2001). extension a nd configuration of reference models for 
enterprise r esource plan ning system s. in g. finnie, d. cecez-kecm anovic & b. lo 
(eds.), 12th australasian conferen ce on information systems  (pp. 537-546). coffs 
harbour, australia: scho ol of mu ltimedia and inform ation technology. 
rose mann, m., & van der aalst, w . m. p. (in press). a configurable  reference modelling 
language. information systems . 
rose mann, m., vessey, i., & w eber, r. ( 2004). alignm ent in enterprise system s 
implementations: the r ole of ontological distance. in 25th international conference on 
information systems  (pp. 439-448). washington d.c.: association for inform ation 
system s. 
sap. (2006). sap business maps: solution com poser . retrieved january 13, 2006, from  
http://www.sap.com /solutions/businessm aps/composer/  
scheer, a.-w. (2000). aris - business process modeling  (3rd ed.). berlin, germ any et al.: 
springer. 
seubert, m., schäfer, t., schorr, m., & w agner,  j. (1994). praxisorient ierte datenm odellierung 
mit der sap-serm-methode. emisa forum, 4 (2), 71-79 (in  germ an). 
silverston, l. (2001a). the data model resource book, volume 1: a library of universal data 
models for all enterp rises . new york, new york: john w iley & sons. 
silverston, l. (2001b). the data model resource book, volume 2: a library of data models for 
specific ind ustries  (2 ed.). new york, new yor k: john w iley & sons. 
stein, t. (1998, august 31). sap sued over r/3 . informatio n week,  p. 134. 
van der aalst, w . m. p. ( 1999). formalization an d verification of event-driven process chains. 
information and softw are technology, 41 (10), 639-650. 
van der aalst, w . m. p., van dongen, b. f., herb st, j., maruster, l., schimm, g., & weijters, a. 
j. m. m. (2003). w orkflow mining: a survey of issues and approaches. data & 
knowledge engineering, 47 (2), 237-267. 
van der aals t, w. m. p., weijters, a. j. m.  m., & maruster, l.  (2004). w orkflow mining: 
discovering process models from  event logs. ieee transactions on knowledge and 
data engineering, 16 (9), 1128-1142. 
van dongen, b. f., alves de medeiros, a. k., ve rbeek, m., weijters, a. j. m. m., & van der 
aalst, w . (2005). the prom fram ework: a ne w era in process mining t ool support. in 
g. ciardo & p. darondeau (eds.), applications and theory of petri nets 2005  (vol. 
3536, pp. 444-454). berlin et al.: springer. 
van dongen, b. f., & van der aalst, w. m. p.  (2004). multi-phase pr ocess mining: building 
instance graphs. in p. atzeni, w . w. chu, h. lu, s. zhou & t. w . ling (eds.), 
conceptual modeling - er 2004  (pp. 362-376). shanghai, china: springer. 
welti, n. (1 999). successful sap r/3  implementa tion: practical managem ent of erp projects . 
reading, ma: addison-wesley. 
wisse, p. (2000). metapattern: context and tim e in information models . boston, massachusetts: 
addison-w esley. 
 
mr. jan recker (1979) is a phd student at the business process managem ent research group at 
the faculty of infor mation technology at qu eensland u niversity of technology brisbane, 
copyright © 2006 by idea  group inc. 26australia. his research inte rests include b usiness process modeling, conceptual model 
evaluation, process configuration and reference m odeling for enterprise system s. he is also a 
part-tim e teacher of business process managem ent-related units at the school of inform ation 
system s at queensland university of technology. 
 
prof. mich ael rosemann, phd (1967) is a full professor of infor mation system s and co-leader 
of the business process managem ent research group at the faculty of infor mation technology 
at queensland university of technology. he is also a mem ber of the australian research 
council college of experts. his research in terests include business process m anagem ent, 
inform ation system s, pr ocess m odels, workflow manage ment system s, enterp rise system s and 
ontologies. he is the author and editor of fi ve books and published m ore than 120 refereed 
journal papers, book chapters and co nference papers on these topics. 
 
prof. wil van der aalst, phd (1966) is a full professor of in formation system s and head of the 
inform ation system s sub-department of th e departm ent of technology managem ent at 
technische universiteit eindhoven. he is also an adjunct professor at the faculty of inform ation 
technology of queensland university of technology. he directs the eindhoven digital 
laboratory for business processe s (edl-bp) and is a fellow a nd m anagem ent team  member of 
the rese arch institu te beta. his resear ch inte rests in clude business process m anagem ent, 
inform ation system s, simulation, p etri nets, pr ocess m odels, workflow m anage ment system s, 
process m ining, verification tech niques, enterprise resource planning system s, com puter  
supported cooperative work and in terorganizational busin ess processes. he published m ore than 
200 books, journal papers, book chapters, conferen ce papers and reports on these topics. 
 
ass. prof. monique jansen-vullers, phd  (1969) is an assistant prof essor at the departm ent of 
technology managem ent at eindhoven university  of technology (tue), and m ember of the 
beta research group. c urrently she is working on (i) configurable reference m odels, (ii) 
process m ining in enterprise resource pla nning environm ents and (iii) business process 
redesign. sh e is th e auth or of several academ ic publications in the m entioned research  fields. 
 
alexander dreiling, p hd (1975) is a researcher at sap resear ch in brisbane, australia. prior to 
joining sap he worked as a res earch  assis tant at  the european research center for infor mation 
system s (ercis) in münster, germ any and at the centre for inform ation technology 
innovation in brisbane, australia.  his research interests com prise conceptual data warehouse 
modeling, conceptual process m odeling, and proce ss configuration. his research so far led to 
approx. 25 refereed journal and conf erence publications. 
copyright © 2006 by idea  group inc. 27