on petri-net synthesis and attribute-based
visualization
h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
technische universiteit eindhoven
po box 513, 5600 mb eindhoven, the netherlands
fh.m.w.verbeek, a.j.pretorius, w.m.p.v.d.aalst, j.j.v.wijk g@tue.nl
abstract. state space visualization is important for a good understand-
ing of the system's behavior. unfortunately, today's visualization tools
typically ignore the fact that states might have attributes. based on these
attributes, some states can be considered equivalent after abstraction,
and can thus be clustered, which simpli¯es the state space. attribute-
based visualization tools are the exception to this rule. these tools can
deal with attributes. in this paper, we investigate an approach based on
petri nets . places in a petri net correspond in a straightforward way to
attributes. furthermore, we can use existing techniques to automatically
derive a petri net from some state space, that is, to automatically add
attributes to that state space. as a result, we can use attribute-based
visualization tools for any state space. unfortunately, the approach is
hampered by the fact that not every state space results in a usable petri
net.
1 introduction
state spaces are popular for the representation and veri¯cation of complex sys-
tems [4]. system behavior is modeled as a number of states that evolve over time
by following transitions . transitions are \source-action-target" triplets where the
execution of an action triggers a change of state. by analyzing state spaces more
insights can be gained into the systems they describe.
in this paper, we assume the presence of state spaces that are obtained
viamodel-based state space generation or through process mining [1]. given a
process model expressed in some language with formal semantics (e.g., petri
nets, process algebras, state charts, epcs, uml-ads, mscs, bpel, yawl,
etc.), it is possible to construct a state space (assuming it is ¯nite). often the
operational semantics of these languages are given in terms of transition systems,
making the state space generation trivial.
state spaces describe system behavior at a low level of detail. a popular
analysis approach is to specify and check requirements by inspecting the state
space, e.g., model checking approaches [7]. for this approach to be successful,
the premise is that all requirements are known. when this is not the case, the
system cannot be veri¯ed.
interactive visualization is another technique for studying state spaces. we
argue that it o®ers three advantages:2 h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
1.by giving visual form to an abstract notion, communication among analysts
and with other stakeholders is enhanced.
2.users often do not have precise questions about the systems they study, they
simply want to \get a feeling" for their behavior. visualization allows them
to start formulating hypotheses about system behavior.
3.interactivity provides the user with a mechanism for analyzing particular
features and for answering questions about state spaces and the behavior
they describe.
attribute-based visualization enables users to analyze state spaces in terms of
attributes associated with every state. users typically understand the meaning
of this data and can use this as a starting point for gaining further insights. for
example, by clustering on certain data, the user can obtain an abstract view
(details on the non-clustered data have been left out) on the entire state space.
based on such a view, the user can come to understand how the originating
system behaves with respect to the clustered data. in this paper we investigate
the possibility of automatically deriving attribute information for visualization
purposes. to do so, we use existing synthesis techniques to generate a petri net
from a given state space. the places of this petri net are considered as new
derived state attributes.
the remainder of the paper is structured as follows. section 2 provides a
concise overview of petri nets, the petrify tool, and the diagraphica tool. the
petrify tool implements the state-of-the-art techniques to derive a petri net
from a state space, whereas diagraphica is a state-of-the-art attribute-based
visualization tool. section 3 discusses the approach using both petrify anddia-
graphica . section 4 shows, using a small example, how the approach could work,
whereas section 5 discusses the challenges we faced while using the approach.
finally, section 6 concludes the paper.
2 preliminaries
2.1 petri nets
a classical petri net can represented as a triplet ( p; t; f ) where pis the set of
places, tis the set of petri net transitions1, and fµ(p£t)[(t£p) the set
of arcs. for the state of a petri net only the set of places pis relevant, because
the network structure of a petri net does not change and only the distribution
of tokens over places changes. a state, also referred to as marking , corresponds
to a mapping from places to natural numbers. any state scan be presented as
s2p! f0;1;2; : : :g, i.e., a state can be considered as a multiset, function, or
vector. the combination of a petri net ( p; t; f ) and an initial state sis called
1the transitions in a petri net should not be confused with transitions in a state space,
i.e., one petri net transition may correspond to many transitions in the corresponding
state space. for example, many transitions in fig. 2 refer to the petri net transition
t1 in fig. 3.on petri-net synthesis and attribute-based visualization 3
a marked petri net ( p; t; f; s ). in the context of state spaces, we use places as
attributes. in any state the value of each place attribute is known: s(p) is the
value of attribute p2pin state s.
a petri net also comes with an unambiguous visualization. places are repre-
sented by circles or ovals, transitions by squares or rectangles, and arcs by lines.
using existing layout algorithms, it is straightforward to generate a diagram for
this, for example, using dot[10].
2.2 petrify
thepetrify [6] tool is based on the theory of regions [9, 11, 5]. using regions
it is possible to synthesize a ¯nite transition system (i.e., a state space) into a
petri net.
a (labeled) transition system is a tuple ts= (s; e; t; s i) where sis the set
of states, eis the set of events, tµs£e£sis the transition relation, and
si2sis the initial state. given a transition system ts= (s; e; t; s i), a subset
of states s0µsis aregion if for all events e2eone of the following properties
holds:
{all transitions with event eenter the region , i.e., for all s1; s22sand
(s1; e; s 2)2t:s162s0ands22s0,
{all transitions with event eexit the region , i.e., for all s1; s22sand ( s1; e; s 2)2
t:s12s0ands262s0, or
{all transitions with event edo not \cross" the region , i.e., for all s1; s22s
and ( s1; e; s 2)2t:s1; s22s0ors1; s262s0.
the basic idea of using regions is that each region s0corresponds to a place in
the corresponding petri net and that each event corresponds to a transition in
the corresponding petri net. given a region all the events that enter the region
are the transitions producing tokens for this place and all the events that exit
the region are the transitions consuming tokens from this place. fig. 1 illustrates
how regions translate to places. a region rreferring to a set of states in the state
space is mapped onto a place: aandbenter the region, canddexit the region,
andeandfdo not cross the region.
in the original theory of regions many simplifying assumptions are made,
e.g., elementary transitions systems are assumed [9] and in the resulting petri net
there is one transition for each event. many transition systems do not satisfy such
assumptions. hence many re¯nements have been developed and implemented in
tools like petrify [5, 6]. as a result it is possible to synthesize a suitable petri
net for any transition system. moreover, tools such as petrify provide di®erent
settings to navigate between compactness and readability and one can specify
desirable properties of the target model. for example, one can specify that the
petri net should be free-choice. for more information we refer to [5, 6].
with a state space as input petrify derives a petri net for which the reacha-
bility graph is bisimilar to the original state space. we already mentioned that
the petri net shown in fig. 3 can be synthesized from the state space depicted in4 h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
a
b
fe
c
d r
renter
regionexit
regiondo not cross 
region
a
b
a
a
bc
d
d
d
cf
e
f
ee f
(a) state space with region r. (b) petri net with place r.
fig. 1. translation of regions to places.
s40s39 s38s37s36 s35
s34 s33s32 s31s30 s29
s28 s27s26 s25
s24 s23
s22 s21
s20 s19 s18s17 s16 s15s14 s13 s12s11
s182s181s180
s179s178 s177s176s175
s174s173s172 s171s170 s169
s168s167 s166s165
s164
s163s162s161 s160s159s158 s157
s156s155
s154 s153s152s151
s100s99 s98
s97s96 s95 s150s94
s149s93
s148
s92s147
s91s146s145 s144
s143s142 s141
s90s89 s88
s87 s86s85s140
s84s139
s83s138
s82s137
s81
s136s135s134s133 s132
s131s80 s79s78 s77
s76
s75s130
s74s129
s73s128
s72s127
s71s126
s125
s124s123 s122s121s70
s69 s68s67 s66s65
s120s64
s119s63
s118s62
s117s61s10
s116s9
s115s8
s114s7
s113s6
s112s5
s111s4 s3s2s1
s60 s59 s58s57 s56 s55
s110s54
s109s53
s108s52 s107 s51s106
s105s104
s103 s102s101
s50s49 s48 s47 s46s45 s44 s43s42 s41t3
t6t7
t9t7 t2
t9t3
x1
t3t6 t12
t6
t8t12
t7t6
t3t13t12
x3
t12x3
t10t4
t3t4
t14
t14t8t11t4
t5t1
t6t1 t5
t1
t7t2
t12
t10 t14 t7t5
t12 t6t12
t1x1
t14t7
t4
t7t7t9t14
t12t7 t5t12
t1 t8
t8t10t11
t9t11t12t2
t1
t13t12
t10t13t2
x2t6t2
t14t14
t6t2
t3
t4t11 t8
t14t5
t8t8
t3
t6t1
t11t10t9
t8 t12
t4 t2
t14t11
t3t12
t13t10
t4 t13
tot1
t7
t14t13
t11
t12t5
t10t3
t13t13 t13
t8t3
t6t3
t13t6x1
t1
t6
t14t8x2
t7t8
t5
t7t5t13
t9t8t2
t10t13
t12t2
t11
t5t11
t13
t8t11
t5t13t14
t8
t9t7
t1
t14t2
x2
t9t4
t10t6
t4t13t13
t14t4
t4t4
t11t4
t10t11
t9t2
t8
t12t10t1
t10t12
t9t6t3
t12t1
t14t3
t6t11t13t3
t10t1
t3t10t1
t11
t12
t9t1
t10t6t6
t6t12
t4t9t4
t5t2
t4t7
t8t4
t7t3
t3t8t11
t14t8
t13t3
t14t5t3
t10
t3t4
t9t14t11
t2
t10t11 t11 t2
t3 t11t11 t1
x3t5t2
t11
t10t13t2
t13t4t3
t14 t8t2
t13x3
t7t2
t7 t9
x1
t10 t11
t12t8t13
t7t5
t10
t5t12
t3 t8t9 t3t12
t14t7 t2
t7t6t2
t5t1
t5 t3
t6 t13
t9t4
t14 t3 t11t7
t12t7
t14 t7t1t6
t7x2t12
t7t11t6
t8t13
t9t2
t14t11
t1 t10
t8t7t10t11
t9t2
t10
t8t12
t14t1
t9 t6t12t4
t6
t5 t9t6
t8 t2
t6t8
t5
t1 t10
t12t1
t11t13 t5
t5 t9
t9 t4t12t1t11
t14t5
t4t3t11
t11
t13
t13t3
t9t9 t14
t7
t6
t8t3
t11t5
t2t6t1
t10t14t5
t1 t1
t14t14t4 t8
t13
t13t8t6 t14
x3
t9t6t4
t14
t7t5
t2t2
t13
t10t1
t11t9
t12
x3
t9t13t12
t7 t12
t2t14t1
t9t4t13t13
t4t4
t11t14 t5
t5
x2t2
t10ti
t2
t2 t12
t13t9t3
t12 t13t8
t9x1
t12
t13t11 t5
t14
t10t4
t5t4 t14t1
t11t11
t12t7
t1
t14t5
t10t10
fig. 2. state space visualization with o®-the-shelf graph-drawing tools.
t5
t9
x3
t14t3
t6x2
tot7
t2x1
t10
t12t8t1
t11ti
t13t4
fig. 3. petri net synthesized from the state space in fig. 2.
fig. 2. this petri net is indeed bisimilar to the state space. for the sake of com-
pleteness we mention that we used petrify version 4.1 (www.lsi.upc.es/petrify/)
with the following options: -d2(debug level 2), -opt (¯nd the best result), -pon petri-net synthesis and attribute-based visualization 5
(generate a pure petri net), -dead (do not check for the existence of deadlock
states), and -ip(show implicit places).
2.3 diagraphica
diagraphica is a prototype for the interactive visual analysis of state spaces with
attributes and can be downloaded from www.win.tue.nl/~apretori/diagraphica/.
it builds on a previous work [12] and it primary purpose is to address the gap
between the semantics that users associate with attributes that describe states
and their visual representation. to do so, the user can de¯ne custom diagrams
that re°ect associated semantics. these diagrams are incorporated into a number
of correlated visualizations.
diagrams are composed of a number of shapes such as ellipses, rectangles and
lines. every shape has a number of degrees of freedom (dofs) such as position
and color. it is possible to de¯ne a range of values for a dof. such a dof is
then parameterized by linking it with a state attribute. for an attribute-dof
pair the values for the dof are calculated by considering the values assumed
by the attribute.
in the context of this paper this translates to the following. suppose we have
a state space that has been annotated with attributes that describe the di®erent
places in its associated petri net. it is possible to represent this petri net with
a diagram composed out of a number of circles, squares and lines corresponding
to its places, transitions and arcs. now, we can parameterize all circles in this
diagram by linking one of more of their dofs with the attributes representing
their corresponding places. for example, their colors can be parameterized such
that circles assume a speci¯c color only when the corresponding place is marked.
diagraphica has a ¯le format for representing parameterized diagrams. the
tool was originally developed with the aim of enabling users to edit and save
custom diagrams. however, this facility also makes it possible to import diagrams
regardless of where they originate from. moreover, this allows us to import petri
nets generated with petrify as diagrams.
parameterized diagrams are used in a number of correlated visualizations.
as starting point the user can perform attribute based clustering. the results
are visualized in the cluster view (see fig. 4(a)). here a node-link diagram,
a bar tree and an arc diagram are used to represent the clustering hierarchy,
the number of states in every cluster, and the aggregated state space [12]. by
clicking on clusters they are annotated with diagrams where the dofs of shapes
are calculated as outlined above. a cluster can contain more than one state and
it is possible to step through the associated diagrams and transitions. transitions
are visualized as arcs. the direction of transitions is encoded by the orientation
of the arcs which are interpreted clockwise.
the user can also load a diagram into the simulation view as shown in
fig. 4(b). this visualization shows the \current" state as well as all incom-
ing and outgoing states as diagrams. this enables the user to explore a local
neighborhood around an area of interest. transitions are visualized by arrows
and an overview of all action labels is provided. the user can navigate through6 h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
fig. 4. diagraphica incorporates a number of correlated visualizations that use pa-
rameterized diagrams.
the state space by selecting any incoming our outgoing diagram, by using the
keyboard or by clicking on navigation icons. consequently, this diagram slides
toward the center and all incoming and outgoing diagrams are updated.
the inspection view enables the user to inspect interesting diagrams more
closely and to temporarily store them (see fig. 4(c)). first, it serves as a magni-
fying glass. second, the user can use the temporary storage facility. users may,
for instance, want to keep a history, store a number of diagrams from various
locations in the state space to compare, or keep diagrams as seeds for further
discussions with colleagues. these are visualized as a list of diagrams through
which the user can scroll.on petri-net synthesis and attribute-based visualization 7
diagrams can be seamlessly moved between di®erent views by clicking on an
icon on the diagram. to maintain context, the current selection in the simulation
or inspection view is highlighted in the clustering hierarchy.
3 using petrify to obtain attributed state spaces
fig. 5 illustrates the approach. the behavior of systems can be captured in
many ways. for instance, as an event log , as a formal model or as a state space .
typically, system behavior is not directly described as a state space. however,
as already mentioned in the introduction, it is possible to generate state spaces
from process models (i.e., model-based state space generation) and event logs
(i.e., process mining [1, 3]). this is shown by the two arrows in the lower left
and right of the ¯gure. the arrow in the lower right shows that using model-
based state space generation the behavior of a (¯nite) model can be captured as
a state space. the arrow in the lower left shows that using process mining the
behavior extracted from an event log can be represented as a state space [2]. note
that an event log provides execution sequences of a (possibly unknown) model.
the event log does not show explicit states. however, there are various ways to
construct a state representation for each state visited in the execution sequence,
e.g., the pre¯x or post¯x of the execution sequence under consideration. similarly
transitions can be distilled from the event log, resulting in a full state space. fig. 5
also shows that there is a relation between event logs and models, i.e., a model
can be used to generate event logs with example behavior and based on an event
log there may be process mining techniques to directly extract models, e.g., using
the®-algorithm [3] a representative petri net can be discovered based on an event
log with example behavior. since the focus is on state space visualization, we do
not consider the double-headed arrow at the top and focus on the lower half of
the diagram.
we make a distinction between event logs, models and state spaces that have
descriptive attributes and those that do not (inner and outer sectors of fig. 5).
for example, it is possible to model behavior simply in terms of transitions
without providing any further information that describes the di®erent states
that a system can be in. fig. 2 shows a state space where nodes and arcs have
labels but without any attributes associated to states. in some cases it is possible
to attach attributes to states. for example, in a state space generated from a
petri net, the token count for each state can be seen as a state attribute. when
a state space is generated using process mining techniques, the state may have
state attributes referring to activities or documents recorded earlier.
it is far from trivial to generate state spaces that contain state attributes
from event logs or models where this information is absent. moreover, there
may be an abundance of possible attributes making it is di±cult to select the
attributes relevant for the behavior. for example, a variety of data elements
may be associated to a state, most of which do not in°uence the occurrence
of events. fortunately, as the upward pointing arrow in fig. 5 shows, tools like
petrify cantransform a state space without attributes into a state space with8 h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
with
attributes
attribute-based
visualizationstandard
visualizationpetri
nets
petrify
fig. 5. the approach proposed in this paper.
attributes . consider the state space in fig. 2. since it does not have any state
attributes, we cannot employ attribute-based visualization techniques. when we
perform synthesis, we derive a petri net that is guaranteed to be bisimilar to
this state space. that is, the behavior described by the petri net is equivalent
to that described by the state space [6]. fig. 3 shows a petri net derived using
petrify .
note that the approach, as illustrated in fig. 5, does not require starting with
a state space. any petri net can also be handled as input, provided that its state
space can be constructed within reasonable time. for a bounded petri net, this
state space is its reachability graph, which will be ¯nite. the approach can also
be extended for unbounded nets by using the coverability graph. in this case,
s2p! f0;1;2; : : :g[f!gwhere s(p) =!denotes that the number of tokens in p
is unbounded. this can also be visualized in the petri net representation. we also
argue that our technique is applicable to other graphical modeling languages with
some form of semantics, e.g., the various uml diagrams describing behavior. in
the context of this paper, we use state spaces as starting point since, in practice,
one will encounter a state space more easily than a petri net.
4 proof of concept
to illustrate how the approach can assist users, we now present a small case
study, using the implementation of the approach as sketched in [14]. fig. 6 illus-
trates the route we have taken in terms of the strategy introduced in section 3.
we started with an event log from the widely used work°ow management system
sta®ware . the log contained 28 process instances (cases) and 448 events. fig. 7
shows a fragment of this log after importing it into the prom framework[8, 13].on petri-net synthesis and attribute-based visualization 9
staffware log
w/o attributes
state space 
w/o attributespetri net
state space 
w/ attributes
fig. 6. the approach taken with the case study.
fig. 7. a snapshot of prom with the imported sta®ware log.
next, we generated a state space from the event log, using the transition sys-
tem generator plug-in in prom2. the resulting state space is shown in fig. 8.
from the state space, we derived a petri net using petrify (see fig. 9). finally,
all states in the state space were annotated with the places of this petri net as
attributes.
it is possible to take di®erent perspectives on the state space by clustering
based on di®erent subsets of state attributes. for example, we were interested in
2inprom the following options were selected: generate ts with sets (basic al-
gorithm) ,extend strategy (algorithm adds additional transitions) ,the log has
timestamps ,use ids (numbers) as state names , and add explicit end state [2].10 h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
22 7819
50
14 2912 279 2464210
a
d._c._b
h
ff h._b
h._gcase start
gf
f._g
case terminationh h
h._g
gfa._case start
case terminationd._a._c._b
c._b._e
f._g
fig. 8. the state space generated from the sta®ware log.
fa
g case terminationd._c._b case start
h._g hd._a._c._b
f._gf._2 f._g._1
h._g._1f._1
h._1c._b._ea._case start
h._b
fig. 9. the petri net derived from the state space in fig. 8.
studying it from the perspective of the places p3,p6,p7andp10(see fig. 10).
when we clustered the state space based on these places we got the clustering
hierarchy shown at the top of fig. 10.
next, we clicked on the leaf clusters and considered the marked petri nets
corresponding to these. from these diagrams we learned that p3,p6,p7andp10
contain either no tokens (fig. 10(a)) or exactly two of these places contain a token
(fig. 10(b){(f))3. by considering the clustering hierarchy and these diagrams we
also discover the following place invariant: (p3 + p10) = (p6 + p7) . that is,
ifp3orp10are marked, then either p6orp7is marked and vice versa.
by considering the arcs between the leaf nodes of the clustering hierarchy
we learned that there is no unrelated behavior possible in the net while one of
3the tokens in these places may be hard to see in fig. 10. however, using the fact
that a darker colored node means no tokens whereas a lighter colored node means
one token, we can simply derive the markings from the tree. as an example, in the
middle diagram (c), place p3contains no tokens whereas place p6contains one token.on petri-net synthesis and attribute-based visualization 11
fig. 10. visualizing event log behavior using a state space and petri net.
the places p3,p6,p7orp10is marked: every possible behavior changes at least
one of these four places. this holds because the only leaf node that contains a
self-loop, represented by an arc looping back to its originating cluster, is the left-
most cluster. however, as we noted above, this cluster contains all states where
neither p3,p6,p7norp10are marked. as an aside, by loading the current state
into the simulation view at the bottom right, we saw that this state has ¯ve
possible predecessors but only a single successor.
we also clustered on all places not selected in the previous clustering. this
results in the clustering in fig. 11. in a sense this can be considered as the dual
of the previous clustering. here we found an interesting result. note the diagonal
line formed by the lighter colored clusters in fig. 11. below these clusters the
clustering tree does not branch any further. this means that only one of the
places, apart from those we considered above ( p3,p6,p7and p10), can be12 h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
fig. 11. visualizing the clustering dual of fig. 10.
marked at the same time. again, this observation is much more straightforward
when we consider the diagrams representing these clusters. the leaf clusters
below the diagonal contain no self loops. similar to an earlier observation, this
means that there is no unrelated behavior possible in the net while any one of
the places we consider is marked.
5 challenges
the synthesis of petri nets from state spaces is a bottle-neck. more speci¯cally,
we have found the space complexity to be an issue when attempting to derive
petri nets from state spaces using petrify .petrify is unable to synthesize petri
nets from large state spaces if there is little \true" concurrency. if aandbcan
occur in parallel in state s1, there are transitions s1a!s2,s1b!s3,s2b!s4,
ands3a!s4forming a so-called \diamond" in the state space. if there are fewer
\diamonds" in the state space, this results in a poor con°uence and petri nets
with many places.
fig. 12 shows a petri net obtained by synthesizing a relatively small state
space consisting of 96 nodes and 192 edges. the resulting net consists of 50
places and more than 100 transitions (due to label splitting) and is not very
usable and even less readable than the original state space. this is caused by
the poor con°uence of the state space and the resulting net nicely shows the
limitations of applying regions to state spaces with little true concurrency.on petri-net synthesis and attribute-based visualization 13
tau._55
tau._54tau._53tau._52
tau._51
tau._50tau._49
tau._48tau._47enter(f)._3tau._46
tau._45
tau._44
tau._43tau._42
tau._41leave(f)._3
tau._40
tau._39
tau._38
tau._37tau._36
tau._35csetflag(f,f)._4
tau._34
csetflag(f,t)._4enter(f)._2
leave(f)._2
tau._33tau._32enter(t)._3tau._31
tau._30
csetflag(t,t)._3tau._29tau._28
csetflag(f,f)._3tau
request(f)leave(f)
request(t)csetflag(t,t)
csetflag(f,f)leave(t)
enter(t)enter(f)
csetflag(t,f)
tau._27tau._26
enter(t)._2tau._25
tau._24
tau._23tau._22
tau._21enter(f)._1
tau._20 tau._19
tau._18
csetflag(f,t)._3tau._17enter(t)._1
leave(t)._3tau._16csetflag(t,f)._4
request(t)._4leave(t)._2tau._15 tau._14
tau._13leave(f)._1
tau._12tau._11
csetflag(f,f)._2
csetflag(t,t)._2tau._10
leave(t)._1tau._9
csetflag(t,f)._3tau._8
csetflag(t,f)._2
request(t)._3
csetflag(t,t)._1tau._7csetflag(f,f)._1
csetflag(f,t)._2tau._6
request(t)._2csetflag(t,f)._1
csetflag(f,t)._1request(t)._1tau._5tau._4
tau._3
tau._2tau._1
csetflag(f,t)
fig. 12. suboptimal petri net derived for a small state space.
fig. 12 illustrates that the use of petrify is not always suitable. if the system
does not allow for a compact and intuitive representation in terms of a labeled
petri net, it is probably not useful to try and represent the system state in
full detail . hence more abstract representations are needed when showing the
individual states. the abstraction does not need to be a petri net. however,
even in the context of regions and petri nets, there are several straightforward
abstraction mechanisms .
first of all, it is possible to split the sets of states and transitions into in-
teresting and less interesting. for example, in the context of process mining
states that are rarely visited and/or transitions that are rarely executed can
be left out using abstraction or encapsulation. there may be other reasons for
removing particular transitions, e.g., the analyst rates them as less interesting.
using abstraction (transitions are hidden, i.e., renamed to ¿and removed while
preserving branching bisimilarity) or encapsulation (paths containing particular
transitions are blocked), the state space is e®ectively reduced. the reduced state
space will be easier to inspect and allows for a simpler petri net representation.
another approach is not to simplify the state space but to generate a model
that serves as a simpli¯ed over-approximation of the state space . consider for
example fig. 12 where the complexity is mainly due to the non-trivial relations
between places and transitions. if places are removed from this model, the result-
ing petri net is still able to reproduce the original state space (but most likely
also allows for more and in¯nite behavior). in terms of regions this corresponds to14 h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk
only including the most \interesting" regions resulting in an over-approximation
of the state space. future research aims at selecting the right abstractions and
over-approximations.
6 conclusions and future work
in this paper we have investigated an approach for state space visualization with
petri nets. using existing techniques we derive petri nets from state spaces in
an automated fashion. the places of these petri are considered as newly derived
attributes that describe every state. consequently, we append all states in the
original state space with these attributes. this allows us to apply a visualization
technique where attribute-based visualizations of state spaces are annotated with
petri net diagrams.
the approach provides the user with two representations that describe the
same behavior: state spaces and petri nets. these are integrated into a number
of correlated visualizations. by presenting a case study, we have shown that the
combination of state space visualization and petri net diagrams assists users in
visually analyzing system behavior.
we argue that the combination of the above two visual representations is
more e®ective than any one of them in isolation. for example, using state space
visualization it is possible to identify all states that have a speci¯c marking for
a subset of petri net places. using the petri net representation the user can
consider how other places are marked for this con¯guration. if we suppose that
the user has identi¯ed an interesting marking of the petri net, he or she can
identify all its predecessor states, again by using a visualization of the state
space. once these are identi¯ed, they are easy to study by considering their
petri net markings.
in this paper, we have taken a step toward state space visualization with
automatically generated petri nets. as we have shown in section 4, the ability
to combine both representations can lead to interesting discoveries. the approach
also illustrates the °exibility of parameterized diagrams to visualize state spaces.
in particular, we are quite excited about the prospect of annotating visualizations
of state spaces with other types of automatically generated diagrams.
finally, as indicated in section 5, current synthesis techniques are not al-
ways suitable: if not elegant petri net exists for a given state space, than petrify
will not be able to ¯nd such a net. in such a situation, allowing for some addi-
tional behavior in the petri net, that is, by over-approximating the state space,
might result in a far more elegant net. therefore, we are interested in automated
abstraction techniques and over-approximations of the state space. of course,
there's also a downside: the state space corresponding to the resulting petri
net is not longer bisimilar to the original state space. nevertheless, we feel that
having an elegant approximation is better than having an exact solution that is
of no use.on petri-net synthesis and attribute-based visualization 15
acknowledgements
we are grateful to jordi cortadella for his kind support on issues related to the
petrify tool. hannes pretorius is supported by the netherlands organization for
scienti¯c research (nwo) under grant 612.065.410.
references
1.w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. work°ow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237{267, 2003.
2.w.m.p. van der aalst, v. rubin, b.f. van dongen, e. kindler, and c.w. gä unther.
process mining: a two-step approach using transition systems and regions. tech-
nical report, bpmcenter.org, 2006.
3.w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. work°ow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
4.a. arnold. finite transition systems . prentice hall, 1994.
5.j. cortadella, m. kishinevsky, l. lavagno, and a. yakovlev. synthesizing petri
nets from state-based models. in iccad '95: proceedings of the 1995 ieee/acm
international conference on computer-aided design , pages 164{171, washington,
dc, usa, 1995. ieee computer society.
6.j. cortadella, m. kishinvesky, l. lavagno, and a. yakovlev. deriving petri nets
from ¯nite transition systems. ieee transactions on computers , 47(8):859{882,
august 1998.
7.d. dams and r. gerth. abstract interpretation of reactive systems. acm trans-
actions on programming languages and systems , 19(2):253{291, 1997.
8.b.f. van dongen, a.k.a. de medeiros, h.m.w. verbeek, a.j.m.m. weijters, and
w.m.p. van der aalst. the prom framework: a new era in process mining tool
support. in g. ciardo and p. darondeau, editors, applications and theory of
petri nets 2005 , volume 3536 of lecture notes in computer science , pages 444{
454. springer, berlin, germany, 2005.
9.a. ehrenfeucht and g. rozenberg. partial (set) 2-structures - part 1 and part 2.
acta informatica , 27(4):315{368, 1989.
10.e.r. gansner, e. koutso¯os, s.c. north, and k.-p. vo. a technique for drawing
directed graphs. ieee transactions on software engineering , 19(3):214{230, 1993.
11.m. nielsen, g. rozenberg, and p. s. thiagarajan. elementary transition systems.
inselected papers of the second workshop on concurrency and compositionality ,
pages 3{33, essex, uk, 1992. elsevier science publishers ltd.
12.a.j. pretorius and j.j. van wijk. visual analysis of multivariate state transition
graphs. ieee transactions on visualization and computer graphics , 12(5):685{
692, 2006.
13.h.m.w. verbeek, b.f. van dongen, j. mendling, and w.m.p. van der aalst. in-
teroperability in the prom framework. in t. latour and m. petit, editors, pro-
ceedings of the caise'06 workshops and doctoral consortium , pages 619{630,
luxembourg, june 2006. presses universitaires de namur.
14.h.m.w. verbeek, a.j. pretorius, w.m.p. van der aalst, and j.j. van wijk. visu-
alizing state spaces with petri nets. computer science report 07/01, eindhoven
university of technology, eindhoven, the netherlands, 2007.