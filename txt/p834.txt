avoiding over-fitting in ilp-based process discovery
s.j. van zelst, b.f. van dongen, w.m.p. van der aalst
department of mathematics and computer science
eindhoven university of technology, the netherlands
fs.j.v.zelst,b.f.v.dongen,w.m.p.v.d.aalst g@tue.nl
abstract. the aim of process discovery is to discover a process model based on
business process execution data, recorded in an event log. one of several exist-
ing process discovery techniques is the ilp-based process discovery algorithm.
the algorithm is able to unravel complex process structures and provides for-
mal guarantees w.r.t. the model discovered, e.g., the algorithm guarantees that a
discovered model describes all behavior present in the event log. unfortunately
the algorithm is unable to cope with exceptional behavior present in event logs.
as a result, the application of ilp-based process discovery techniques in every-
day process discovery practice is limited. this paper addresses this problem by
proposing a ﬁltering technique tailored towards ilp-based process discovery. the
technique helps to produce process models that are less over-ﬁtting w.r.t. the event
log, more understandable, and more adequate in capturing the dominant behavior
present in the event log. the technique is implemented in the prom framework.
keywords: process mining, process discovery, integer linear programming, ﬁl-
tering
1 introduction
process mining [1] aims to assist in the improvement and understandability of business
processes. the basic input of process mining is process execution data, stored in an
event log . we identify three process mining branches. process discovery aims at con-
structing a process model given an event log. conformance checking aims at assessing
the conformance of an event log to a given process model. process enhancement aims
at extending, improving or repairing existing process models using the two aforemen-
tioned disciplines as a basis. in process mining, a process model’s quality is evaluated
w.r.t. four essential quality dimensions [2]. replay ﬁtness describes to what extent a
model is able to reproduce the behavior present in an event log. precision describes
what fraction of the behavior allowed by a model is present in an event log. general-
ization describes to what extent a model is able to reproduce future, unseen, behavior
of a process. simplicity describes the (perceived) complexity of a process model.
the ilp-based process discovery algorithm [3] encodes an event log as a set of
linear inequalities that act as a core constraint body of a number of integer linear pro-
grams (ilps) aimed at process model construction. the algorithm ensures perfect re-
play ﬁtness, i.e., all behavior present in the event-log can be reproduced by the resulting
process model. under the assumption that the event log only holds frequent behavior,2
the algorithm works well. real event logs typically include low-frequent exceptional
behavior, e.g. caused by employees deviating from some normative process. as the al-
gorithm guarantees perfect replay-ﬁtness, it guarantees that the resulting model allows
for all exceptional behavior present in the event log. in practice this leads to models that
are incapable of capturing the dominant behavior present in the event log.
to leverage the strict replay-ﬁtness guaranteed by the ilp-based process discovery
algorithm we present a ﬁltering technique that exploits the underlying data abstraction
used within the ilp formulation. using a simple running example we show that the
approach enables us to ﬁlter exceptional behavior from event logs and results in models
that do not have perfect replay-ﬁtness w.r.t. the input data. however, the models are
simpler and less over-ﬁtting. to evaluate the technique we have applied it on a set of
artiﬁcially generated event logs with varying levels of exceptional behavior.
the outline of this paper is as follows. in section 2 we motivate the need for an
ilp-based process discovery algorithm able to cope with the presence of exceptional
behavior. in section 3 we explain the effect of exceptional behavior. in section 4 we
introduce the concept of sequence encodings. in section 5 we present a sequence en-
coding based ﬁltering technique. in section 6 we evaluate the approach in terms of its
effects on model quality. section 7 concludes the paper.
2 motivation
the ilp-based process discovery algorithm uses petri nets without arc-weights1as a
process model formalism. petri nets allow for expressing complex control ﬂow pat-
terns within event data, a valuable property from a business management perspective.
consider the two models depicted in figure 1a and figure 1b which depict the result
of applying the ilp-based process discovery algorithm and the inductive miner [4]
on event log l= [ha;c;d;e;fi10;ha;c;b;d;fi10;ha;c;e;d;fi10;ha;e;c;d;fi10]2.l
contains behavior generated by a model exhibiting a milestone pattern [5]. the ilp-
based discovery algorithm allows us to discover the milestone pattern whereas the in-
ductive miner neglects the pattern and results in an under-ﬁtting petri net, i.e., it allows
for much more behavior compared to the behavior present in the event log. this is due
to the fact that the inductive miner assumes that the resulting model is block-structured .
(a) result of the ilp-based algorithm.
(b) result of the inductive miner.
fig. 1: process discovery results of the conventional ilp-based discovery and the in-
ductive miner [4] based on a log consisting of milestone pattern based behavior.
1we assume the reader to be acquainted with of petri nets and refer to [1] for an overview.
2for event logs we use the notion of a mutliset of traces, using a control-ﬂow perspective.3
(a) resulting model using an event log
without exceptional behavior.
(b) resulting model using an event log
with a minimal amount of exceptional behavior.
fig. 2: discovered petri nets after applying conventional ilp-based process discovery
on event logs with and without the presence of exceptional behavior in the event log.
many process discovery algorithms assume models to be (semi)-structured or as-
sume that only local dependencies exist amongst activities. as a side effect, the algo-
rithms are not able to ﬁnd complex control ﬂow patterns. examples of such techniques
are the heuristics miner [6], the fuzzy miner [7] and the genetic miner [8]. a selec-
tion of patterns that the ilp-based process discovery algorithm is able to reproduce are
patterns like interleaved parallel routing ,critical section andarbitrary cycles .
the impact of exceptional behavior present in event logs becomes clear when re-
garding the two petri nets depicted in figure 2. the models are discovered using con-
ventional ilp-based process discovery. the event log used to discover the model in
figure 2a only consists of traces that ﬁt the model presented, i.e. no exceptional behav-
ior. the event log used for discovery of the model in figure 2b is a slightly manipulated
version of the event log used for figure 2a. the event log contains little exceptional be-
havior, i.e., 5%of the traces in the event log is manipulated. clearly, the model depicted
in figure 2b is not capturing the dominant behavior present in the event log.
the ilp-based process discovery algorithm allows for ﬁnding complex patterns
within business process event data yet at the same time the algorithm suffers drastically
from the presence of exceptional behavior in event logs. therefore we need means to
cope with exceptional behavior in order to enable the algorithm to discover models that
more accordingly represent the dominant behavior present in an event log.
3 exceptional behavior & ilp-based discovery
the essential component of the ilp-based process discovery algorithm is a set of linear
inequalities, based on the event log, that is used as a basic ilp constraint body. the
global constraint expressed by these inequalities is best explained by the following sen-
tence: any place present in the resulting petri net must allow for each event in the input
event log to be executed . this leads to the fact that every trace in the log is completely
reproducible by the resulting process model, i.e. replay ﬁtness is perfect. it is also the
root cause of the algorithm’s behavior w.r.t. to exceptional behavior, e.g. figure 2.
consider event log l= [ha;b;c;d;e;gi105;ha;c;b;d;e;gi98;ha;b;c;d;e;f;e;gi87;
ha;c;b;d;e;f;e;gi117]which could be a result of 407 executions of the process model4
p1ap2
p3b
cp4
p5d
p6e
fp7g
(a) petri net corresponding to example event log l.a
c
p0
5d
(b) place p0
5.
fig. 3: a petri net corresponding to event log l, discoverable by the ilp-based process
discovery algorithm (3a) and an alternative place p0
5for placep5givenl0(3b).
depicted in figure 3a. consider place p5having an incoming arc from transition cand
an outgoing arc to transition d. as placep5is not having an outgoing arc to transitions
a;b;c;e;f andgit does not interfere with ﬁring these transitions at any point in time.
the outgoing arc of place p5allows for ﬁring d, only after ﬁring transition c. this is in
line with the event log because if event doccurs, it is always (indirectly) preceded by
eventc. in fact, each place within the petri net allows for the execution of every activity
inl. hence, the petri net is discoverable by the ilp-based process discovery algorithm.
consider the addition of the single trace ha;b;d;e;gito event log l, resulting in
l0, consisting of 408traces. arguably we can deem the newly added trace as excep-
tional behavior. the newly added trace can not be executed by the petri net depicted
in figure 3a due to the presence of p5, as it prevents transition dfrom ﬁring as long
as transition chas not ﬁred. consequently, given event log l0which only consists of
one additional exceptional trace ha;b;d;e;giw.r.t. event log l, the ilp-based process
discovery algorithm is unable to ﬁnd the petri net of figure 3a. if we replace p5byp0
5
(figure 3b), the resulting petri net is again able to execute every activity in l0.
4 sequence encoding
the exact construction of the linear inequalities used by the ilp-based process discov-
ery algorithm is outside of the scope of this paper, hence we refer to [3, 9]. it sufﬁces
to know that the set of linear inequalities is solely based on the preﬁx closure of the
event log. the preﬁx closure of l0is the set of sequences l0s.t. each sequence in l0
is either a preﬁx of a sequence in l0or a preﬁx of a sequence in l0. extrapolation
of trace frequency information present in the event log to the preﬁx closure is triv-
ial, i.e.,l0= [408;hai408;ha;bi193;ha;ci215;ha;b;ci192;ha;b;di;ha;c;bi215:::;ha;b;
c;d;e;f;e;gi87;ha;c;b;d;e;f;e;gi117].
each non-empty sequence in l0is mapped to a linear inequality, representing an
ilp constraint. these linear inequalities can be represented by a pair consisting of the
parikh-based multiset representation of the sequence’s preﬁx and the last event of the
sequence. such tuple is deemed a sequence encoding . the parikh-based multiset rep-
resentation of a sequence is just a mutliset denoting the number of occurrences of each
element in the sequence, e.g. given sequence ha;b;b;ci, its parikh-based multiset repre-
sentation is [a;b2;c]. computing sequence encodings is straightforward, e.g. for haiwe
have([];a), forha;biwe have ([a];b), forha;c;b;d;e;f;e;giwe have ([a;b;c;d;e2;5
f];g), etc. different sequences can have the same sequence encoding and therefore map
to the same constraint. consider ha;b;c;diandha;c;b;diboth mapping to ([a;b;c ];d).
the sequence encoding of is deﬁned as ([];).
5 sequence encoding filtering
the presence ofha;b;d;e;giinl0causes the ilp-based process discovery algorithm
to be unable to ﬁnd place p5of the petri net depicted in figure 3a. as the body of con-
straints of the ilp-based process discovery algorithm, i.e., the set of linear inequalities,
speciﬁes this behavior, we need means to remove the inequalities related to ha;b;d;e;gi
from the constraint body. we do so by constructing a directed acyclic graph where each
sequence encoding, i.e., each constraint, acts as a vertex. the sequence encoding ([];)
always acts as a root vertex. two vertices are connected by an arc if the arc’s source
could be a preﬁx of the arc’s target. the arcs are labeled using sequence frequencies
present in the preﬁx closure of the event log. an example of such graph, based on l0is
depicted in figure 4.
inl0the empty sequence acts as a preﬁx of hai. hence ([];)has an outgoing
arc to ([];hai)labeled with 408, i.e., in 408casesacts as a preﬁx of hai. sequence
haion its turn acts as a preﬁx of ha;biandha;ci, thus, ([];a)is connected to ([a];b)
and([a];c). the edge weights of the arcs from haitoha;biandha;ciare related to the
number of timeshaiacts as a preﬁx ofha;bi,ha;cirespectively. applying the previous
rationale on all nodes yields the graph as presented in figure 4.
after constructing the graph, we traverse it in a breadth-ﬁrst manner and cut off
branches that represent exceptional behavior. we start at its root and assess what outgo-
ing arcs have a too low arc weight given some decision function. once we have decided
what outgoing arcs should remain we traverse each of these arcs. from the end-point
of such arc we again evaluate all outgoing arcs. only those constraints corresponding
to a vertex present in the ﬁltered sequence encoding graph will be added to the ilp
constraint body. the decision function that decides whether we cut off a certain branch
is a parameter of the approach.
([];)([];a)([a];b)
([a];c)([a;b];d)
([a;b];c)
([a;c];b)([a;b;d ];e)
([a;b;c ];d)([a;b;d;e ];g)
([a;b;c;d ];e)([a;b;c;d;e ];f)
([a;b;c;d;e ];g)([a;b;c;d;e;f ];e) ([a;b;c;d;e2;f];g)
408193
215192
215192
215407204
203204204
111
fig. 4: sequence encoding graph based on event log l0. filtering affected the branch
starting at ([a];b)and ending in ([a;b;d;e ];g).6
in the implementation of the algorithm we have adopted the following approach.
for each vertex that we decide to keep, we always include the outgoing edge with
the maximum edge label value. additionally we include all other edges ethat have
a lower (or equal) value than (to) the maximum value, as long as the difference of e’s
value w.r.t. the maximum is within some bounded range. the bounded range is typically
some fraction of the maximum, this fraction is deemed the cut-off coefﬁcient cc. as an
example we apply this technique on the graph depicted in figure 4 with cc= 0:25.
the root has one arc and thus we keep this arc. traversing the arc leads us to vertex
([];a)which has two outgoing arcs. the outgoing arc from ([];a)with the maximum
label is the arc to ([a];c), labeled 215. this arc will be kept in the graph. the bounded
range for any other arc starting from vertex ([];a)is computed by multiplying the cut-
off coefﬁcient with the maximum value for this node, i.e., the bounded range is 0:25
215 = 53:75. any edge going out of ([];a)that has a value greater than or equal to
215 53:75 = 161:25is kept in the graph. in this case the arc from ([];a)to([a];
b)will remain as it has a value of 193. in vertex ([a];b)we identify that we keep the
edge to ([a;b];c), which has the maximum label. we only keep outgoing arcs from
([a;b];c)with a label value greater than or equal to 192 0:25192 = 144 . as a
result we will drop the edge to ([a;b];d)as it only has a label value of 1. the result of
repeating the ﬁltering procedure on all vertices is visualized figure 4 where the ﬁltered
branch, i.e., starting at ([a];b)and ending in ([a;b;d;e ];g), is graying out. note that
using the aforementioned approach all constraints related to (preﬁxes of) ha;b;d;e;gi
are remove from the constraint body. as a consequence, place p5in figure 3a becomes a
feasible place again. thus, the model depicted in figure 3a can be found using sequence
encoding ﬁltering applied on l0. as the model does not allow for ha;b;d;e;gi, we no
longer guarantee perfect replay ﬁtness w.r.t. l0.
6 evaluation
for evaluation we used an implementation of sequence encoding ﬁltering present in
thehybridilpminer3package within the prom framework (http://www.promtools.org ).
here we discuss effects on model quality. for a quantiﬁcation of the effect on ilp solve
time we refer to [9]. the event logs used for evaluation are artiﬁcially generated event
logs originating from a study related to the impact of exceptional behavior on rule-
based approaches in process discovery [10]. the event logs contain different levels of
exceptional behavior and are based on two ground truth event logs. the ground truth
event logs, a22f0n00 anda32f0n00 , are free of exceptional behavior, i.e. all traces ﬁt
the originating model. a22f0n00 consists of 22 different event classes whereas a32f0n00
consists of 32 different event classes. out of each ground truth event log a total of four
new logs is generated, consisting of either 5%, 10%, 20% or 50% of manipulated traces.
manipulation of traces is performed by either tail/head of sequence removal, random
part of sequence body removal or interchange of two randomly chosen events [10].
we primarily focus on precision, i.e. the amount of behavior allowed by the model
also present in the event log. if all behavior allowed by the model is present in the event
3https://svn.win.tue.nl/repos/prom/packages/hybridilpminer/branches/
experiments/2015_bpm_ilp_filtering-0.2.1/7
log, precision is maximal and equals 1. the more behavior is allowed by the model that
is not present in the event log, the lower the precision value will be. by deﬁnition, the
conventional ilp-based process discovery algorithm will result in models that allow
for all behavior present in the event log. thus, if we use the conventional algorithm
on a manipulated event log, the resulting model will allow for all exceptional behavior.
as the exceptional behavior is not present in the ground truth events log, computing
precision of the resulting model based on the ground truth log is expected to be low. on
the other hand, if we discover models using an algorithm that is more able to handle the
presence of exceptional behavior, we expect the algorithm to allow for less exceptional
behavior and, w.r.t. the ground truth model, we expect a higher precision value.
in figure 5 the results of applying the conventional ilp-based process discovery
algorithm and three different sequence encoding ﬁltering instantiations for each event
log are depicted. we used the branch cut-off technique as described in section 5 with
cut-off coefﬁcients1
4,1
2,3
4. we measured both the replay-ﬁtness and precision based on
the ground truth event logs. replay-ﬁtness of the discovered models w.r.t. the ground
truth event logs using all four approaches remains 1 in all cases4. due to the incapability
of handling exceptional behavior of the conventional algorithm, as expected, precision
drops rapidly. for the sequence encoding ﬁltering we identify the1
4variant to outper-
form the other two. this is explained by the fact that this variant is the most rigorous
ﬁlter and removes the most constraints. it is clear that the decrease of precision for the
sequence encoding based approaches is less severe compared to the conventional ap-
proach. this is in line with the rationale presented before, i.e., we expect the ﬁltering
based approaches to be more able in handling exceptional behavior. therefore, we con-
clude that the ﬁltering based models discover petri net patterns that more accurately
represent the dominant behavior in the input event log. thus, the newly presented tech-
0% 5%10% 20% 50%00:20:40:60:81
% exceptional behaviorprecisiona22f0nxx
0% 5%10% 20% 50%00:20:40:60:81
% exceptional behaviorprecisiona32f0nxx
conv. sefcc=3
4sefcc=1
2sefcc=1
4
fig. 5: precision measurements based on event logs with exceptional behavior. conven-
tional ilp-based process discovery (conv.) and sequence encoding ﬁltering (sef) was
used for porcess model discovery.
4one exception for sef with cc=1
2, where replay ﬁtness equals 0:99515 .8
niques allow us to successfully apply ﬁltering whilst using ilp-based process discovery
as a basis.
7 conclusion
the work presented in this paper is motivated by the observation that the existing ilp-
based process discovery algorithm is unable to cope with exceptional behavior in event
logs. ilp-based process discovery has several advantages, but the inability to abstract
from infrequent exceptional behavior makes it unusable in real-life settings. we pre-
sented the sequence encoding ﬁltering technique which enables us to apply ﬁltering
exceptional behavior within the ilp-based process discovery algorithm. the technique
allows us to ﬁnd models with acceptable trade-offs w.r.t. replay ﬁtness and precision.
we showed that the technique enables us to ﬁnd petri net structures in data consisting
of exceptional behavior, using ilp-based process discovery as an underlying technique.
references
1. aalst, w.m.p.v.d.: process mining: discovery, conformance and enhancement of business
processes. springer (2011)
2. buijs, j.c.a.m., dongen, b.f.v., aalst, w.m.p.v.d.: on the role of fitness, precision, gen-
eralization and simplicity in process discovery. in meersman, r., panetto, h., dillon, t.,
rinderle-ma, s., dadam, p., zhou, x., pearson, s., ferscha, a., bergamaschi, s., cruz, i.f.,
eds.: on the move to meaningful internet systems: otm 2012. v olume 7565 of lecture
notes in computer science. springer berlin heidelberg (2012) 305–322
3. werf, j.m.e.m.v.d., dongen, b.f.v., hurkens, c.a.j., serebrenik, a.: process discovery
using integer linear programming. fundamenta informaticae 94(3) (2009) 387–412
4. leemans, s.j.j., fahland, d., aalst, w.m.p.v.d.: discovering block-structured process mod-
els from event logs - a constructive approach. in: application and theory of petri nets
and concurrency - 34th international conference, petri nets 2013, milan, italy, june
24-28, 2013. proceedings. (2013) 311–329
5. aalst, w.m.p.v.d., hofstede, a.h.m.t., kiepuszewski, b., barros, a.p.: workﬂow patterns.
distributed and parallel databases 14(1) (2003) 5–51
6. weijters, a.j.m.m., ribeiro, j.t.s.: flexible heuristics miner (fhm). in: proceedings of
the ieee symposium on computational intelligence and data mining, cidm 2011, part of
the ieee symposium series on computational intelligence 2011, april 11-15, 2011, paris,
france. (2011) 310–317
7. g ¨unther, c.w., aalst, w.m.p.v.d.: fuzzy mining - adaptive process simpliﬁcation based on
multi-perspective metrics. in: business process management, 5th international conference,
bpm 2007, brisbane, australia, september 24-28, 2007, proceedings. (2007) 328–343
8. buijs, j.c.a.m., dongen, b.f.v., aalst, w.m.p.v.d.: a genetic algorithm for discovering
process trees. in: proceedings of the ieee congress on evolutionary computation, cec
2012, brisbane, australia, june 10-15, 2012. (2012) 1–8
9. zelst, s.j.v., dongen, b.f.v., aalst, w.m.p.v.d.: filter techniques for region-based process
discovery. technical report 15-4, bpm center.org (2015)
10. maruster, l., weijters, a.j.m.m., aalst, w.m.p.v.d., bosch, a.v.d.: a rule-based approach
for process discovery: dealing with noise and imbalance in process logs. data min.
knowl. discov. 13(1) (2006) 67–87