ieee transactions on services computing, november 2011 1
service mining: using process mining to
discover, check, and improve service
behavior
wil van der aalst, senior member, ieee
abstract ‚Äîweb services are an emerging technology to implement and integrate business processes within and across
enterprises. service-orientation can be used to decompose complex systems into loosely coupled software components that
may run remotely. however, the distributed nature of services complicates the design and analysis of service-oriented systems
that support end-to-end business processes. fortunately, services leave trails in so-called event logs and recent breakthroughs
inprocess mining research make it possible to discover, analyze, and improve business processes based on such logs.
recently, the task force on process mining released the process mining manifesto . this manifesto is supported by 53
organizations and 77 process mining experts contributed to it. the active participation from end-users, tool vendors, consultants,
analysts, and researchers illustrate the growing signiÔ¨Åcance of process mining as a bridge between data mining and business
process modeling.
in this paper, we focus on the opportunities and challenges for service mining , i.e., applying process mining techniques to
services. we discuss the guiding principles and challenges listed in the process mining manifesto and also highlight challenges
speciÔ¨Åc for service-orientated systems.
index terms ‚Äîprocess mining, business process management, service discovery, conformance checking
f
1 i ntroduction
web services have emerged as an established
paradigm for architecting and implementing busi-
ness collaborations within and across organizational
boundaries [1], [2]. in this paradigm, the functionality
provided by business applications is encapsulated
within web services, i.e., software components de-
scribed at a semantic level, which can be invoked
by application programs or by other services through
a stack of internet standards including http , xml,
soap , wsdl and uddi [1], [2], [3], [4], [5]. once
deployed, web services provided by various organi-
zations can be inter-connected in order to implement
business collaborations, leading to composite web
services.
in the context of web services, typically all kinds
ofevents are being recorded. it is possible to record
events related to activities inside services orinteractions
between services (e.g., messages) [6], [7], [8], [9]. the
autonomous nature of services and the fact that they
are loosely coupled makes it important to monitor and
analyze their behavior. in this paper, we will refer to
this as service mining .
process mining is an enabling technology for service
mining. process mining aims to discover, monitor and
improve real processes by extracting knowledge from event
wil van der aalst is with the department of mathematics and
computer science of eindhoven university of technology in the
netherlands and queensland university of technology in brisbane,
australia. e-mail: see vdaalst.comlogs readily available in today‚Äôs information systems
[10], [11], [12].
starting point for process mining is an event log .
each event in such a log refers to an activity (i.e., a
well-deÔ¨Åned step in some process) and is related to
a particular case (i.e., a process instance). the events
belonging to a case are ordered and describe one
‚Äúrun‚Äù of the process. event logs may store additional
information about events. in fact, whenever possi-
ble, process mining techniques use supplementary
information such as the resource (i.e., person, device,
or software component) executing or initiating the
activity, the timestamp of the event, and other data
attributes (e.g., the size of an order).
typically, three types of process mining can be dis-
tinguished: (a) process discovery , (b) conformance check-
ing, and (c) model enhancement [10]. discovery tech-
niques learn a model from an event log without using
any additional information. this results in a so-called
initial process model. this model can also be made by
hand. in both situations, conformance checking tech-
niques can be used to compare the observed behavior
(event logs) with the modeled behavior (initial process
model). this results in diagnostics showing deviations
between model and log. after conformance checking,
model and log are aligned and information from the
log may be used to enhance the model. the model
may be repaired or extended with other perspectives
such as the time or resource perspective. for example,
timestamps in the event log may be used to add
timing information (waiting times and service times)ieee transactions on services computing, november 2011 2
to the model. such an extended model can be used
for decision support.
recently, the ieee task force on process mining
released the process mining manifesto [13]. this man-
ifesto describes guiding principles and challenges for
process mining. in this paper, we will summarize
these and relate them to service mining. in particular,
we will highlight two challenges speciÔ¨Åc for service
mining: (a) ‚Äúhow to correlate instances?‚Äù and (b)
‚Äúhow to analyze services out of context?‚Äù.
the Ô¨Årst challenge looks at the problem that process
instances (i.e., cases) in one service need to be related
to process instances in other services. for example,
one customer order may relate to several deliveries
in another service. it does not make much sense to
look at one service in isolation. therefore, correlation
between services is important.
the second challenge speciÔ¨Åc for service mining
is the problem that one can only observe services
running in a particular environment. the behavior
may change dramatically when a service is embedded
in another environment. the performance or correct-
ness of a service in one context may say very little
about the performance or correctness of the very same
service in another context.
the remainder of this paper is organized as follows.
section 2 brieÔ¨Çy introduces our view on service orien-
tation. then, we introduce the topic of process mining
using an example involving two services (section 3).
section 4 summarizes the guiding principles and chal-
lenges described in the process mining manifesto by
the ieee task force on process mining. in section 5
we elaborate on the two challenges speciÔ¨Åc for service
mining. section 6 concludes the paper.
2 s ervices
although the term ‚Äúweb services‚Äù is often associated
to a stack of internet standards, we take a more
broader perspective in this paper. service-orientation
does not depend on a particular technology as is elo-
quently described in the introduction of the ‚Äúservice
sciences research manifesto‚Äù [14]. the key idea of
service-orientation is to subcontract work to specialized
services in a loosely coupled fashion .
in a service oriented architecture (soa) services are
interacting, e.g., by exchanging messages. by com-
bining basic services more complex services can be
created [1], [2]. orchestration is concerned with the
composition of services seen from the viewpoint of
single service (the ‚Äúspider in the web‚Äù). choreography
is concerned with the composition of services seen
from a global viewpoint focusing on the common and
complementary observable behavior. choreography is
particularly relevant in a setting where there is no
single coordinator.
the terms orchestration and choreography describe
two aspects of integrating services to create end-to-end business processes. the two terms overlap some-
what and the distinction has been heavily discussed in
the last decade. orchestration and choreography can
be seen as different ‚Äúperspectives‚Äù. choreography is
concerned with the overall set of interactions between
several services that do not need to be in some
hierarchical relationship to one another. orchestration
is concerned with the interactions of a single service
with its environment (classical composition).
a servicexmay have both a sell side and buy side .
the sell side describes the interface that the service
offers to its service consumers, i.e., other services that
usex. the buy side describes the interface that is
used to interact with other service providers, i.e., the
services used by x. a service having both a sell side
and a buy side may act as a service producer and a
service consumer .
interactions between services may be synchronous
orasynchronous . in the context of web services, most
interactions are asynchronous and realized through
message passing. we consider three types of commu-
nication primitives: synchronize (synchronous commu-
nication), send (asynchronous communication), and
receive (asynchronous communication) [15].
in many service-oriented systems it is possible to
record communicative actions. for example, it may
be possible to tap-off the messages that are being
exchanged. in some systems it is also possible to
observe the activities inside a service. for example,
middleware products and bpm/wfm systems often
provide detailed audit trails covering all activities
supported [9].
it is relatively easy to collect all events related to
an orchestration as one service serves as the ‚Äúspider
in the web‚Äù. for choreographies this is often more
difÔ¨Åcult as control is distributed. even when each
service records events in a detailed manner, it may
still be impossible to merge all event data into a single
overall event log.
in the remainder, we Ô¨Årst focus on process mining
and the manifesto by the ieee task force on process
mining. subsequently, we zoom in on challenges spe-
ciÔ¨Åc for service mining.
3 u sing process mining for the anal-
ysis of services
process mining techniques are able to extract knowl-
edge from event logs commonly available in today‚Äôs
information systems [10]. these techniques provide
new means to discover, monitor, and improve processes
in a variety of application domains. in this section
we introduce the three basic types of process min-
ing: process discovery (section 3.1), conformance checking
(section 3.2), and model enhancement (section 3.3).
3.1 process discovery
as indicated earlier, a so-called event log serves as a
starting point for analysis. an event log can be seenieee transactions on services computing, november 2011 3
as a collection of events. an example of an event may
be:
caseid :customer order 7564
activity :place order
timestamp :28-11-2011@16:54
resource :john
amount :e2500
ordereditems : [ipod;iphone 4;ipad 2 ]
depending on the event log, there may be thousands
or even millions of such events. although all event
attributes can be used for process mining, we focus on
the Ô¨Årst two attributes that are mandatory for process
mining. any event should refer to a case (i.e., a process
instance) and an activity. moreover, events related to a
particular case should be ordered.
if we limit ourselves to the minimal information
needed for process mining, then an event log
can be described as a multiset of traces where each
trace corresponds to a sequence of activities . given a
set of activities a1=fpo;rg;sp;rr;cg;pc;clg, an
example trace is hpo;rg;cg;sp;pc;cli. this trace
represents the sequence of activities executed for a
particular instance. an example of an event log is
l1= [hpo;rg;cg;sp;pc;cli20;hpo;rg;sp;cg;pc;cli18;
hpo;sp;rg;cg;pc;cli17;hpo;sp;rg;pc;cg;cli13;
hpo;sp;pc;rg;cg;cli12;hpo;rg;sp;pc;cg;cli8;
hpo;rr;cli7]. this event log contains 7 different
traces describing 95 cases. for example, there are 7
cases that follow trace hpo;rr;cli.
the goal of process discovery is to discover process
models from logs such as l1. for example, the 
algorithm [16] will automatically construct the petri
net depicted in the left subprocess of fig. 1. this petri
net models that all cases start with activity po(‚Äúplace
order‚Äù) and end with activity cl(‚Äúclose‚Äù). in-between
these two activities either the set of four activities rg,
sp,cgand pc, or just activity rr(‚Äúreceive rejection‚Äù)
is executed. activity rgis always followed by cgand
activity spis always followed by pc. however, rgmay
be before or after sp, etc. the left subprocess shown
in fig. 1 allows for seven different traces. these are
exactly the traces that can be found in event log l1.
now consider the right subprocess shown in
fig. 1. this process has six activities a2=
fro;sg;rp;cp;gc;srg. an example of an event log over
a2isl2= [hro;sg;rp;cp;gci88;hro;sri7]. this log also
describes 95 cases and can be seen as the counterpart
ofl1. the subprocess on the right-hand side of fig. 1
can be discovered from l2using process mining
techniques such as the algorithm [16].
one can view fig. 1 as a model of two interact-
ing services. whereas l1andl2describe the event
logs of individual services, one can also look at an
event log describing the combined overall behavior.
an example of a trace possible according to fig. 1
is1=hpo;ro;sg;rg;cg;sp;rp;cp;pc;gc;cli. another
example trace is 2=hpo;ro;sr;rr;cli. if we project1and2ontoa1, we Ô¨Ånd traces present in l1.
projecting these traces onto a2yields traces in l2.
in our example logs, events refer to activity names.
an event log could also hold events related to mes-
sages being sent or received. in some logs one may
even Ô¨Ånd events related to the start and completion of
activities. this way one can measure the duration of
activities. fig. 1 only shows asynchronous communi-
cation as both services are connected through message
placesm1;:::;m 6. it is also possible to model syn-
chronous interaction by transition fusion. for exam-
ple, if poand rointeract synchronously, one can model
this by merging both transitions into one. however,
all of these variations do not change the basic idea of
process discovery for services: automatically learning
the behavior of services based on event data.
one could argue that there is no need to discover
services since they have been implemented before.
instead of process discovery based on event logs,
one could also refactor models based on source code
or documentation. however, given the autonomous
nature of services, one party may not have models
of the services of another party, services may change
their behavior over time, or only use a fraction of the
possible modeled behavior. therefore, it may be more
reliable and efÔ¨Åcient to discover service behavior from
real event data. moreover, the discovered model is
only the starting point for other types of analysis as
is explained next. the alignment of real event data
and models is the key ingredient of process mining.
3.2 conformance checking
combining services to realize desired end-to-end pro-
cesses is a far from trivial and error prone process.
it is easy to inadvertently introduce deadlocks and
other behavioral anomalies. for example, the com-
bined model in fig. 1 contains a subtle error. this error
has been added to illustrate the need for veriÔ¨Åcation
techniques. consider the trace: hpo;ro;sp;sri. this
trace results in the state where the places p2,p5,m3,
m4, and p14 each contain one token, i.e., the process
on the right rejected the order whereas the process
on the left already paid for it. the resulting state is a
so-called deadlock.
the two individual processes have no such prob-
lems when analyzed in isolation. the left subprocess
has 11 possible states and it is always possible to end
with a token in p8. the right subprocess has 6 states
and it is always possible to end with a token in p14.
the combined process has 26 reachable states. there
are two states where no transitions are enabled: the
desired Ô¨Ånal state with tokens in p8and p14 and the
deadlock just described.
the lion‚Äôs share of attention in service analysis has
been devoted to design-time veriÔ¨Åcation. however,
correctness issues are not limited to design-time. at
run-time the actual behavior may deviate from the mod-
eled behavior. conformance checking techniques aimieee transactions on services computing, november 2011 4
poplace 
order
rrreceive 
rejectionrgreceive 
goodsspsend 
payment
cgconfirm 
goodspcpayment 
confirmed
cl closeroreceive 
order
rpreceive 
paymentsgsend 
goods
cpconfirm 
payment
gcgoods 
confirmedsrsend 
rejection
m4
m5
m6m2m1
m3p1
p2 p3
p4
p5
p6 p7
p8p9
p10
p11
p12
p13
p14customer
servicesupplier
service
fig. 1. a process composed of two services modeled in terms of petri nets.
to Ô¨Ånd discrepancies between the modeled behavior
and the real behavior recorded in event logs. for
example, suppose that an event log contains the trace:
hpo;rg;ro;sg;rp;cp;cg;sp;pc;gc;cli. this trace is not
possible according to the combined model in fig. 1.
first of all, the goods are received by the customer ser-
vice without ever being sent by the supplier service.
second, the payment is received before being sent.
figure 2 shows an alternative model for the cus-
tomer service. if the original customer service in fig. 1
is replaced by this service, the deadlock is removed.
hence, from a (design-time) correctness point of view
the service in fig. 2 is better than the original one.
however, if event log l1(the log describing 95 cases)
describes the observed behavior, then conformance is
poor because many traces in the log are impossible
according to the model. only the eight cases fol-
lowing tracehpo;rg;sp;pc;cg;cliand the seven cases
following tracehpo;rr;cliÔ¨Åt completely. the other
95 (8 + 7) = 80 cases deviate from the model and,
therefore, do not Ô¨Åt.
conformance can be viewed from two angles: (a)
the model does not capture the real behavior (‚Äúthe
model is wrong‚Äù) and (b) reality deviates from the
desired model (‚Äúthe event log is wrong‚Äù). the Ô¨Årst
viewpoint is taken when the model is supposed to be
descriptive , i.e., capture or predict reality. the second
viewpoint is taken when the model is normative , i.e.,
used to inÔ¨Çuence or control reality.
conformance checking is very important for com-
po place 
order
rrreceive 
rejectionrgreceive 
goods
spsend 
payment
cgconfirm 
goodspcpayment 
confirmed
cl closem4
m5
m6m2m1
m3p1
p2
p3
p4
p5
p6
p7customer
servicefig. 2. a sequential customer service.
pliance checking, auditing, certiÔ¨Åcation, and run-time
monitoring. moreover, it can be used to judge the
quality of discovered or hand-made models. typically,ieee transactions on services computing, november 2011 5
four quality dimensions for comparing model and log
are considered: (a) Ô¨Åtness , (b) simplicity , (c) precision ,
and (d) generalization [10].
a model with good Ô¨Åtness allows for most of the
behavior seen in the event log. a model has perfect
Ô¨Åtness if all traces in the log can be replayed by the
model from beginning to end. there are various ways
of quantifying Ô¨Åtness [10], [17], [18]. often Ô¨Åtness is
described by a number between 0(very poor Ô¨Åtness)
and1(perfect Ô¨Åtness).
obviously, the simplest model that can explain the
behavior seen in the log is the best model. this
principle is known as occam‚Äôs razor.
po place 
order
rrreceive 
rejectionrgreceive 
goods
spsend 
payment
cgconfirm 
goodspcpayment 
confirmed
cl closem4
m5
m6m2m1
m3p1
p2
p3customer
service
fig. 3. a so-called ‚ÄúÔ¨Çower model‚Äù allowing for too much
behavior.
fitness and simplicity alone are not sufÔ¨Åcient to
judge the quality of a discovered process model. for
example, it is very easy to construct an extremely
simple petri net (‚ÄúÔ¨Çower model‚Äù) that is able to replay
all traces in an event log (but also any other event
log referring to the same set of activities). see for
example the customer service shown in fig. 3. after po
all other transitions are enabled and remain enabled
until the end. for example, traces such as hpo;cli
andhpo;rg;rg;rg;rg;cliare possible according to this
‚ÄúÔ¨Çower model‚Äù but very unlikely given the observed
behavior recorded in event log l1.
similarly, it is often undesirable to have a model
that only allows for the exact behavior seen in the
event log. remember that the log contains only ex-
ample behavior and that many traces that are possible
may not have been seen yet. (note that in our simple
example all traces are frequent, so the problem does
not apply here.)
a model is precise if it does not allow for ‚Äútoo much‚Äùbehavior. clearly, the ‚ÄúÔ¨Çower model‚Äù lacks precision.
a model that is not precise is ‚ÄúunderÔ¨Åtting‚Äù. under-
Ô¨Åtting is the problem that the model over-generalizes
the example behavior in the log (i.e., the model allows
for behaviors very different from what was seen in the
log).
a model should also generalize and not restrict
behavior to just the examples seen in the log. a model
that does not generalize sufÔ¨Åciently is ‚ÄúoverÔ¨Åtting‚Äù.
overÔ¨Åtting is the problem that a very speciÔ¨Åc model
is generated whereas it is obvious that the log only
holds example behavior (i.e., the model explains the
particular sample log, but a next sample log of the
same process may produce a completely different
process model).
all four quality dimensions for comparing model
and log can be quantiÔ¨Åed in various ways. see [10],
[17], [18] for more details. also see [7], [8] for a
more declarative constraint-based modeling language
suitable for conformance checking in the context of
services.
3.3 model enhancement
it is also possible to extend or improve an existing pro-
cess model using the event log. a non-Ô¨Åtting process
model can be corrected using the diagnostics provided
by the alignment of model and log. moreover, event
logs may contain information about resources, times-
tamps, and case data. for example, an event referring
to activity ‚Äúplace order‚Äù and case ‚Äúcustomer order
7564‚Äù may also have attributes describing the person
that entered the order (e.g., ‚Äújohn‚Äù), the time of the
event (e.g., ‚Äú28-11-2011@16:54‚Äù), the ordered amount
(e.g., ‚Äú e2500‚Äù), and the multiset of items ordered.
after aligning model and log it is possible to replay
the event log on the model. while replaying one
can analyze these additional attributes and add other
perspectives to the model.
for example, as fig. 4 shows, it is possible to
analyze waiting times in-between activities. simply
measure the time differences between causally related
events and compute basic statistics such as averages,
variances, and conÔ¨Ådence intervals. this way it is
possible to identify the main bottlenecks [10], [19].
information about resources can be used to discover
roles, i.e., groups of people frequently executing re-
lated activities [20]. here, standard clustering tech-
niques can be used. it is also possible to construct
social networks based on the Ô¨Çow of work and ana-
lyze resource performance (e.g., the relation between
workload and service times).
standard classiÔ¨Åcation techniques can be used to
analyze the decision points in a process model. for
example, after receiving the order (place p10) there are
two possibilities: the goods are sent ( sg) or a rejection
is sent ( sr). using the data known about the case
prior to the decision, we can construct a decision tree
explaining the observed behavior [10], [21].ieee transactions on services computing, november 2011 6
poplace 
order
rrreceive 
rejectionrgreceive 
goodsspsend 
payment
cgconfirm 
goodspcpayment 
confirmed
cl closeroreceive 
order
rpreceive 
paymentsgsend 
goods
cpconfirm 
payment
gcgoods 
confirmedsrsend 
rejection
m4
m5
m6m2m1
m3p1
p2 p3
p4
p5
p6 p7
p8p9
p10
p11
p12
p13
p14m4
m5
m6m2m1
m3pete
mike
ellenrole a:
sue
seanrole e:
sararole m:
a
em
atom
may
jillrole b:
sam
jeffrole c:
bc
cb
b
bm
performance information (e.g., the 
average time between two subsequent 
activities) can be extracted from the 
event log and visualized on top of the 
model.decision rules (e.g., a decision tree based 
on data known at the time a particular 
choice was made) can be learned from 
the event log and used to annotate 
decisions.the event log can be used to discover roles 
in the organization (e.g., groups of people 
with similar work patterns). these roles can 
be used to relate individuals and activities.
discovery techniques can be used to 
find a control-flow model (in this case 
in terms of a petri net) that describes 
the observed behavior best.
customer
servicesupplier
service
fig. 4. by replaying the event log on the process model for a service it is possible to analyze bottlenecks,
decision points, and the distribution of work over roles and resources.
figure 4 illustrates that process mining is not lim-
ited to control-Ô¨Çow discovery. in fact, process min-
ing may cover a variety of perspectives. the control-
Ô¨Çow perspective only focuses on the control-Ô¨Çow, i.e.,
the ordering of activities. the goal of mining this
perspective is to Ô¨Ånd a good characterization of all
possible paths. the result is typically expressed in
terms of a petri net or some other process notation
(e.g., epcs, bpmn, or uml activity diagrams). the
organizational perspective focuses on information about
resources hidden in the log, i.e., which actors (e.g.,
people, systems, roles, or departments) are involved
and how are they related. the goal is to either struc-
ture the organization by classifying people in terms
of roles and organizational units or to show the social
network. the system architecture perspective focuses
on the it infrastructure, i.e., the decomposition into
services and other software components. techniques
for mining the organizational perspective [20] can
also be applied to this more technical perspective.
for example, social network analysis can be used to
visualize the communication among services. the case
perspective focuses on properties of cases. obviously, a
case can be characterized by its path in the process or
by the actors working on it. however, cases can also
be characterized by the values of the corresponding
data elements. for example, if a case represents a
replenishment order, it may be interesting to know
the supplier or the number of products ordered. the
time perspective is concerned with the timing andfrequency of events. when events bear timestamps
it is possible to discover bottlenecks, measure service
levels, monitor the utilization of resources, and predict
the remaining processing time of running cases.
process mining is not restricted to ofÔ¨Çine analysis
and can also be used for predictions and recommenda-
tions at runtime. for example, the completion time of
a partially handled customer order can be predicted
using a discovered process model with timing infor-
mation [19].
4 p rocess mining manifesto
the ieee task force on process mining recently re-
leased a manifesto describing guiding principles and
challenges [13]. the manifesto aims to increase the
visibility of process mining as a new tool to improve
the (re)design, control, and support of operational
business processes. it is intended to guide software
developers, scientists, consultants, and end-users. be-
fore summarizing the manifesto, we brieÔ¨Çy introduce
the task force.
4.1 task force on process mining
the growing interest in log-based process analysis
motivated the establishment of the ieee task force
on process mining . the goal of this task force is to
promote the research, development, education, and
understanding of process mining. the task force was
established in 2009 in the context of the data miningieee transactions on services computing, november 2011 7
technical committee of the computational intelli-
gence society of the ieee. members of the task force
include representatives of more than a dozen commer-
cial software vendors (e.g., pallas athena, software
ag, futura process intelligence, hp , ibm, fujitsu,
infosys, and fluxicon), ten consultancy Ô¨Årms (e.g.,
gartner and deloitte) and over twenty universities.
concrete objectives of the task force are: to make
end-users, developers, consultants, managers, and
researchers aware of the state-of-the-art in process
mining, to promote the use of process mining tech-
niques and tools, to stimulate new process mining
applications, to play a role in standardization ef-
forts for logging event data, to organize tutorials,
special sessions, workshops, panels, and to publish
articles, books, videos, and special issues of jour-
nals. for example, in 2010 the task force standard-
ized xes (www.xes-standard.org), a standard log-
ging format that is extensible and supported by the
openxes library (www.openxes.org) and by tools such
as prom, xesame, nitro, etc. see http://www.win.
tue.nl/ieeetfpm/ for recent activities of the task force.
4.2 guiding principles
as with any new technology, there are obvious mis-
takes that can be made when applying process mining
in real-life settings. therefore, the six guiding princi-
ples listed in table 1 aim to prevent users/analysts
from making such mistakes. as an example, consider
guiding principle gp4: ‚Äúevents should be related to
model elements‚Äù. it is a misconception that process
mining is limited to control-Ô¨Çow discovery, other
perspectives such as the organizational perspective,
the time perspective, and the data perspective are
equally important. however, the control-Ô¨Çow per-
spective (i.e., the ordering of activities) serves as the
layer connecting the different perspectives. therefore,
it is important to relate events in the log to activi-
ties in the model. conformance checking and model
enhancement heavily rely on this relationship (cf.
sections 3.2 and 3.3). after relating events to model
elements, it is possible to ‚Äúreplay‚Äù the event log
on the model [10]. replay may be used to reveal
discrepancies between an event log and a model, e.g.,
some events in the log are not possible according to
the model. techniques for conformance checking can
be used to quantify and diagnose such discrepancies.
timestamps in the event log can be used to analyze
the temporal behavior during replay. time differences
between causally related activities can be used to
add average/expected waiting times to the model.
these examples illustrate the importance of guiding
principle gp4; the relation between events in the log
and elements in the model serves as a starting point
for different types of analysis.4.3 challenges
process mining is an important tool for modern orga-
nizations that need to manage non-trivial operational
processes. on the one hand, there is an incredible
growth of event data. on the other hand, processes
and information need to be aligned perfectly in order
to meet requirements related to compliance, efÔ¨Åciency,
and customer service. despite the applicability of
process mining there are still important challenges
that need to be addressed; these illustrate that process
mining is an emerging discipline. table 2 lists the
eleven challenges described in the manifesto [13].
as an example consider challenge c4: ‚Äúdealing
with concept drift‚Äù. the term concept drift refers to the
situation in which the process is changing while being
analyzed [22]. for instance, in the beginning of the
event log two activities may be concurrent whereas
later in the log these activities become sequential. pro-
cesses may change due to periodic/seasonal changes
(e.g., ‚Äúin december there is more demand‚Äù or ‚Äúon
friday afternoon there are fewer employees avail-
able‚Äù) or due to changing conditions (e.g., ‚Äúthe market
is getting more competitive‚Äù). such changes impact
processes and it is vital to detect and analyze them
[22].
the manifesto is supported by 53 organizations and
77 process mining experts from all over the globe
contributed to it. the manifesto is available in chi-
nese, dutch, english, french, german, greek, italian,
japanese, korean, portuguese, spanish, and turkish
(cf. www.win.tue.nl/ieeetfpm).
5 s pecific challenges for service
mining
the challenges mentioned in the manifesto apply to
wide range of application domains (including services
computing). however, for service mining, i.e., apply-
ing process mining to services, we also discuss two
more speciÔ¨Åc challenges.
5.1 how to correlate instances?
figure 1 describes two interacting services. although
there may be many orders, the petri net describes
only one instance of the customer service and one
instance of the supplier service. these two instances
relate to the same order. because there may be many
orders, instances of the customer service need to be
related to instances of the supplier service and vice
versa. relating instances of different services is com-
monly referred to as correlation . for example, when
the supplier service receives a payment (activity rp),
this payment needs to be correlated to the order for
which the goods have been sent.
in general there is not a one-to-one correspondence
between instances (i.e., cases) of different services.
this is illustrated in fig. 5 which sketches instancesieee transactions on services computing, november 2011 8
table 1
six guiding principles listed in the manifesto
event data should be treated as first-class citizens
gp1 events should be trustworthy , i.e., it should be safe to assume that the recorded events actually happened and
that the attributes of events are correct. event logs should be complete , i.e., given a particular scope, no events
may be missing. any recorded event should have well-deÔ¨Åned semantics . moreover, the event data should be
safein the sense that privacy and security concerns are addressed when recording the event log.
log extraction should be driven by questions
gp2 without concrete questions it is very difÔ¨Åcult to extract meaningful event data. consider, for example, the
thousands of tables in the database of an erp system like sap . without questions one does not know where
to start.
concurrency, choice and other basic control-flow constructs should be supported
gp3 basic workÔ¨Çow patterns supported by all mainstream languages (e.g., bpmn, epcs, petri nets, bpel, and
uml activity diagrams) are sequence ,parallel routing (and-splits/joins), choice (xor-splits/joins), and loops .
obviously, these patterns should be supported by process mining techniques.
events should be related to model elements
gp4 conformance checking and enhancement heavily rely on the relationship between elements in the model and
events in the log . this relationship may be used to ‚Äúreplay‚Äù the event log on the model. replay can be used to
reveal discrepancies between event log and model (e.g., some events in the log are not possible according to
the model) and can be used to enrich the model with additional information extracted from the event log (e.g.,
bottlenecks are identiÔ¨Åed by using the timestamps in the event log).
models should be treated as purposeful abstractions of reality
gp5 a model derived from event data provides a view on reality . such a view should serve as a purposeful abstraction
of the behavior captured in the event log. given an event log, there may be multiple views that are useful.
process mining should be a continuous process
gp6 given the dynamical nature of processes, it is not advisable to see process mining as a one-time activity. the
goal should not be to create a Ô¨Åxed model, but to breathe life into process models such that users and analysts
are encouraged to look at them on a daily basis.
table 2
some of the most important process mining challenges identiÔ¨Åed in the manifesto
finding, merging, and cleaning event data
c1 when extracting event data suitable for process mining several challenges need to be addressed: data may be
distributed over a variety of sources, event data may be incomplete , an event log may contain outliers , logs may
contain events at different level of granularity , etc.
dealing with complex event logs having diverse characteristics
c2 event logs may have very different characteristics. some event logs may be extremely large making them
difÔ¨Åcult to handle whereas other event logs are so small that not enough data is available to make reliable
conclusions.
creating representative benchmarks
c3 good benchmarks consisting of example data sets and representative quality criteria are needed to compare
and improve the various tools and algorithms.
dealing with concept drift
c4 the process may be changing while being analyzed. understanding such concept drifts is of prime importance
for the management of processes.
improving the representational bias used for process discovery
c5 a more careful and reÔ¨Åned selection of the representational bias is needed to ensure high-quality process mining
results.
balancing between quality criteria such as fitness, simplicity, precision, and generalization
c6 there are four competing quality dimensions: (a) Ô¨Åtness, (b) simplicity, (c) precision, and (d) generalization.
the challenge is to Ô¨Ånd models that score good in all four dimensions.
cross-organizational mining
c7 there are various use cases where event logs of multiple organizations are available for analysis. some
organizations work together to handle process instances (e.g., supply chain partners) or organizations are
executing essentially the same process while sharing experiences, knowledge, or a common infrastructure.
however, traditional process mining techniques typically consider one event log in one organization.
providing operational support
c8 process mining is not restricted to off-line analysis and can also be used for online operational support. three
operational support activities can be identiÔ¨Åed: detect ,predict , and recommend .
combining process mining with other types of analysis
c9 the challenge is to combine automated process mining techniques with other analysis approaches (optimization
techniques, data mining, simulation, visual analytics, etc.) to extract more insights from event data.
improving usability for non-experts
c10 the challenge is to hide the sophisticated process mining algorithms behind user-friendly interfaces that
automatically set parameters and suggest suitable types of analysis.
improving understandability for non-experts
c11 the user may have problems understanding the output or is tempted to infer incorrect conclusions. to avoid
such problems, the results should be presented using a suitable representation and the trustworthiness of the
results should always be clearly indicated.ieee transactions on services computing, november 2011 9
co
45customer order service
co
46co
44ol
61order line service
ol
63ol
66
ol
67ol
68
ol
72ol
62
delivery service
del
83del
88
del
89del
82
fig. 5. three services having several instances each.
of three related services. the customer order service
has three instances: co44 ,co45 , and co46 . each of
these instances corresponds to a customer order. the
customer order service uses an order line service
which handles individual order lines. for example,
payments are handled at the order level, but order
picking is done at the level of individual items. cus-
tomer order co44 consists of three order lines ( ol61 ,
ol62 , and ol63 ), i.e., three items have been ordered.
the actual delivery of such items is subcontracted
to a delivery service. the delivery service tries to
combine multiple items into a single delivery. how-
ever, this is not always possible. for example, order
co44 is related to two delivery instances: del88 and
del89 . it may also be the case that one delivery is
related to order lines of different customer orders (see
for example del88 ). hence, there is a many-to-many
relationship between customer order instances and
delivery instances.
situations similar to the one described in fig. 5 oc-
cur frequently in real-life processes. however, existing
process notations and process mining algorithms have
difÔ¨Åculties dealing with many-to-many relationships
between service instances. in fact, three related prob-
lems can be identiÔ¨Åed. first of all, there is a represen-
tation problem. traditional process notations such as
bpmn, epcs, and uml activity diagrams model the
life-cycle of one instance in isolation. notable excep-
tions are proclets [23] and other artifact-centric process
models [24]. second, there is the problem of relating
messages to instances. there are various approaches
that all suggest analyzing the content of each message.
subsequently, messages are related based on reoccur-
ring pieces of text (e.g., an identiÔ¨Åer or a customer
name) [6], [25], [26]. finally, there is a lack of process
mining techniques able to discover process models
with many-to-many relationships. some initial work
has been done in the context of the acsi project [27].
for example, it is possible to do conformance checking
on proclets [28], [29]. however, better techniques are
needed to truly support more complex correlation
patterns.as discussed in [10], instance correlation and pro-
cess views are closely related. process models should
be seen as views on reality. the scope of such a view
depends on the correlations deemed to be relevant.
for example, one may want to view customer or-
ders in isolation (abstracting away order lines and
deliveries) or view these orders from the viewpoint
of deliveries. the empirical nature of process mining
helps us to understand the ‚Äúfabric of real business
processes‚Äù better whereas conventional process mod-
eling languages are tailored towards straightjacketing
instances into monolithic process models.
5.2 how to analyze services out of context?
for the second challenge we return to the problem
that the two interacting services shown in fig. 1 can
deadlock. although each of the services in isolation
has no problem, the composed service deadlocks
when tracehpo;ro;sp;sriis executed. the reason is
that the customer may decide to pay whereas the
supplier may decide to reject the order. in fact, there
is no supplier service that can work properly with
the customer service modeled in fig. 1. the choice
between rgand rris controlled by the environment
via places m2and m3. however, independent of this
external decision, the customer service may decide
to pay ( sp). because asynchronous message passing
is used, these two choices cannot be coordinated
properly. this illustrates the subtle interplay between
a service and it environment.
let us now consider the two alternative services
depicted in fig. 6. the process resulting from these
combined services does not have any deadlocks or
other anomalies. inspection of the state space consist-
ing of 16 states shows that it is always possible to
reach the desired Ô¨Ånal state with tokens in p8and
p16.
a possible event log generated by
the two services in fig. 6 is l0=
[hpo;ro;sg;rg;sp;rp;cp;pc;cg;gc;;cli40;
hpo;ro;sg;rg;sp;rp;cp;pc;cg;gc;cl;i28;
hpo;ro;sg;rg;sp;rp;cp;pc;cg;cl;gc;i20;
hpo;ro;sr;rr;cli7]. this log describes 95 cases
distributed over four possible traces. event log l0can
be projected onto the customer service (left-hand side
of fig. 6) yielding log l0
1= [hpo;rg;sp;pc;cg;cli88;
hpo;rr;cli7]. similarly, l0can be projected onto
the supplier service resulting in event log
l0
2= [hro;sg;rp;cp;gc;i88;hro;sri7].
althoughl0
1andl0
2do not reveal any problems,
it should be noted that the two services are lim-
iting each other‚Äôs behavior. for example, a possi-
ble trace of the customer service that was not ob-
served ishpo;rg;pc;sp;cg;cli. this trace could not
be observed because the supplier service only con-
Ô¨Årms the payment after it has been received (which
makes sense). possible traces of the supplier serviceieee transactions on services computing, november 2011 10
poplace 
order
rrreceive 
rejection
rgreceive 
goods
spsend 
payment
cgconfirm 
goodspcpayment 
confirmed
cl closeroreceive 
order
rpreceive 
paymentsgsend 
goods
cpconfirm 
payment
gc
goods 
confirmedsrsend 
rejection
m4
m5
m6m2m1
m3p1
p2
p5
p8p9
p10
p11
p12
p14
p15customer
servicesupplier
service
p4p3
p6
p7
fi
finishp13
p16
fig. 6. another process composed of two services that limit each other‚Äôs behavior.
that were not observed are hro;sg;gc;rp;cp;iand
hro;sg;rp;gc;cp;i. the reason is that the customer
service only conÔ¨Årms the receipt of the goods after it
has gotten a payment conÔ¨Årmation. these examples
show that the environment of a service may severely
limit the behavior that can actually be observed. one
can only record the behavior of a service in a partic-
ular context. this implies that certain anomalies do
not surface in one context and only emerge if the
environment of the service is changed.
the observation that service behavior is limited by
its context has implications for both process discovery
and conformance checking.
the discovered process model may only show a
fraction of the potential service behavior. for example,
based on event log l0
2, process discovery techniques
will discover a sequential model for the supplier
service. the conclusion that the goods can only be
conÔ¨Årmed after all payment related activities have
completed only holds in the context depicted in fig. 6.
the same phenomenon makes it difÔ¨Åcult to reason
about precision. based on event log l0
2, analysis may
suggest that the model in fig. 6 is ‚ÄúunderÔ¨Åtting‚Äù be-
cause only two of the four possible traces are actually
observed.
today‚Äôs process mining techniques do not take the
direction of messages (send or receive) and the nature
of choices into account. for example, consider the
choice between rrand rg. this choice is controlled by
inbound messages m2 and m3. the choice betweensgand sron the other hand is not controlled by the
environment and is made inside the supplier service.
the challenge is to adapt discovery techniques and
conformance checking techniques to incorporate such
distinctions.
5.3 related work
after describing the two challenges speciÔ¨Åc for service
mining, we brieÔ¨Çy point out related work on the
analysis of services based on event data.
in [9] a concrete application of process mining to
web services is described. ibm‚Äôs websphere product
is used as a reference system and its cei (common
event infrastructure) logs are analyzed using prom.
an approach to check the conformance of web
services was described in [6]. the paper includes
a description of various experiments using oracle
bpel. the token-based replay techniques presented
in [18] were used to measure conformance.
in [7], [8] an ltl-based approach to check confor-
mance was proposed. this approach uses a graph-
ical declarative language to describe the normative
behavior of services. rather than modeling a detailed
process, this approach allows for checking graphically
speciÔ¨Åed constraints such as ‚Äúa payment should al-
ways be conÔ¨Årmed‚Äù.
the topic of event correlation has been investigated
in the context of system speciÔ¨Åcation, system devel-
opment, and services analysis. in [15] and [30] various
interaction and correlation patterns are described. inieee transactions on services computing, november 2011 11
[25] a technique is presented for correlating messages
with the goal to visualize the execution of web ser-
vices.
dustdar et al. [31], [32], [33] proposed techniques
for services interaction mining, i.e., applying process
mining techniques to the analysis of service interac-
tions.
nezhad et al. [26], [34] developed techniques for
event correlation and process discovery from web
service interaction logs. the authors introduce the
notion of a ‚Äúprocess view‚Äù which is the result of a
particular event correlation. however, they argue that
correlation is subjective and that multiple views are
possible. a collection of process views is called the
‚Äúprocess space‚Äù.
in [35], simmonds et al. propose a technique for
the run-time monitoring of web service conversations.
the authors monitor conversations between partners
at runtime as a means of checking behavioral correct-
ness of the entire web service system. this is related
to the earlier work on conformance checking [6], [7],
[8], [17], [18] mentioned before.
in [36], a web service mining framework is pro-
posed that allows unexpected and interesting service
compositions to automatically emerge in a bottom-up
fashion. the authors propose some mining techniques
aiming at the discovery of such service compositions.
an event-driven approach to validate the transac-
tional behavior of service compositions was proposed
in [37]. veriÔ¨Åcation is done at design-time or run-time
using the event calculus formalism.
within the acsi project [27] the focus is on many-
to-many relationships between instances. so-called
‚Äúproclets‚Äù [23] are used to model artifact centric
models. a conformance checking approach for such
models is presented in [28], [29] and implemented in
prom.
in [38] the topic of ‚Äúcross-organizational mining‚Äù
was introduced. here the goal is not to analyze inter-
acting services but to compare services that are vari-
ants of one another. cross-organizational mining can
be used for benchmarking and reference modeling.
6 c onclusion
process mining aims to bridge the gap between
business intelligence (bi) and business process manage-
ment (bpm). bi techniques are typically not process-
centric and provide rather simplistic reporting and
dashboard functionalities. sometimes bi tools offer
more advanced data mining capabilities. however,
classical data mining techniques [21] such as classi-
Ô¨Åcation, clustering, regression, association rule learn-
ing, and sequence/episode mining are not process-
centric at all. bpm techniques on the other hand
gravitate around process models [39]. these models
are typically made by hand and are used for analysis
(e.g., simulation and veriÔ¨Åcation) and enactment bybpm systems. however, mainstream bpm approaches
are not using event data. yet, activities executed by
people, services, machines, and software components
leave trails in so-called event logs . process mining
techniques use such logs to discover, analyze, and
improve business processes.
in this paper, we discussed process mining in the
context of services. we used the guiding principles
and challenges described in the recently released pro-
cess mining manifesto [13] to describe the state-of-the-
art in process mining. given the abundance of event
logs in the context of web services, we advocate the
use of such techniques for what we call service mining .
service mining is concerned with (a) the discovery
of service behavior, (b) checking conformance of ser-
vices, and (c) service model extension (e.g., showing
bottlenecks based on event data). we also discussed
two challenges speciÔ¨Åc for service mining: (a) ‚Äúhow
to correlate instances?‚Äù and (b) ‚Äúhow to analyze
services out of context?‚Äù. these challenges show
that, despite the huge potential of service mining,
additional research is needed to improve the appli-
cability of process mining in distributed and loosely
coupled systems.
acknowledgments
the author would like to thank all that contributed
to the process mining manifesto: arya adriansyah,
ana karla alves de medeiros, franco arcieri, thomas
baier, tobias blickle, jagadeesh chandra bose, peter
van den brand, ronald brandtjen, joos buijs, an-
drea burattin, josep carmona, malu castellanos, jan
claes, jonathan cook, nicola costantini, francisco
curbera, ernesto damiani, massimiliano de leoni,
pavlos delias, boudewijn van dongen, marlon du-
mas, schahram dustdar, dirk fahland, diogo r.
ferreira, walid gaaloul , frank van geffen, sukriti
goel, christian g ¬®unther, antonella guzzo, paul har-
mon, arthur ter hofstede, john hoogland, jon es-
pen ingvaldsen, koki kato, rudolf kuhn, akhil
kumar, marcello la rosa, fabrizio maggi, donato
malerba, ronny mans, alberto manuel, martin mc-
creesh, paola mello, jan mendling, marco montali,
hamid motahari nezhad, michael zur muehlen, jorge
munoz-gama, luigi pontieri, joel ribeiro, anne rozi-
nat, hugo seguel p ¬¥erez, ricardo seguel p ¬¥erez, marcos
sep¬¥ulveda, jim sinur, pnina soffer, minseok song,
alessandro sperduti, giovanni stilo, casper stoel,
keith swenson, maurizio talamo, wei tan, chris
turner, jan vanthienen, george varvaressos, eric ver-
beek, marc verdonk, roberto vigo, jianmin wang,
barbara weber, matthias weidlich, ton weijters, lijie
wen, michael westergaard, and moe wynn.
references
[1] g. alonso, f. casati, h. kuno, and v . machiraju, web ser-
vices concepts, architectures and applications . springer-verlag,
berlin, 2004.ieee transactions on services computing, november 2011 12
[2] l. zhang, j. zhang, and h. cai, services computing, core
enabling technology of the modern services industry . springer-
verlag, berlin, 2007.
[3] w. van der aalst, ‚Äúdon‚Äôt go with the Ô¨Çow: web services com-
position standards exposed,‚Äù ieee intelligent systems , vol. 18,
no. 1, pp. 72‚Äì76, 2003.
[4] f. casati, e. shan, u. dayal, and m. shan, ‚Äúbusiness-oriented
management of web services,‚Äù communications of the acm ,
vol. 46, no. 10, pp. 55‚Äì60, 2003.
[5] b. benatallah, f. casati, and f. toumani, ‚Äúrepresenting,
analysing and managing web service protocols,‚Äù data and
knowledge engineering , vol. 58, no. 3, pp. 327‚Äì357, 2006.
[6] w. van der aalst, m. dumas, c. ouyang, a. rozinat, and
h. verbeek, ‚Äúconformance checking of service behavior,‚Äù
acm transactions on internet technology , vol. 8, no. 3, pp. 29‚Äì59,
2008.
[7] w. van der aalst and m. pesic, ‚Äúchapter 2: specifying and
monitoring service flows: making web services process-
aware,‚Äù in test and analysis of web services , l. baresi and
e. nitto, eds. springer-verlag, berlin, 2007, pp. 11‚Äì56.
[8] ‚Äî‚Äî, ‚Äúdecserflow: towards a truly declarative service flow
language,‚Äù in international conference on web services and
formal methods (ws-fm 2006) , ser. lecture notes in computer
science, m. bravetti, m. nunez, and g. zavattaro, eds., vol.
4184. springer-verlag, berlin, 2006, pp. 1‚Äì23.
[9] w. van der aalst and h. verbeek, ‚Äúprocess mining in web
services: the websphere case,‚Äù ieee bulletin of the technical
committee on data engineering , vol. 31, no. 3, pp. 45‚Äì48, 2008.
[10] w. van der aalst, process mining: discovery, conformance and
enhancement of business processes . springer-verlag, berlin,
2011.
[11] w. van der aalst, b. van dongen, j. herbst, l. maruster,
g. schimm, and a. weijters, ‚ÄúworkÔ¨Çow mining: a survey
of issues and approaches,‚Äù data and knowledge engineering ,
vol. 47, no. 2, pp. 237‚Äì267, 2003.
[12] w. van der aalst, h. reijers, a. weijters, b. van dongen,
a. medeiros, m. song, and h. verbeek, ‚Äúbusiness process min-
ing: an industrial application,‚Äù information systems , vol. 32,
no. 5, pp. 713‚Äì732, 2007.
[13] ieee task force on process mining, ‚Äúprocess mining man-
ifesto,‚Äù in bpm workshops , ser. lecture notes in business
information processing, vol. 99. springer-verlag, berlin, 2011.
[14] h. chesbrough and j. spohrer, ‚Äúa research manifesto for
services science,‚Äù communications of the acm , vol. 49, no. 7,
pp. 35‚Äì40, 2006.
[15] w. van der aalst, a. mooij, c. stahl, and k. wolf, ‚Äúservice
interaction: patterns, formalization, and analysis,‚Äù in formal
methods for web services , ser. lecture notes in computer
science, m. bernardo, l. padovani, and g. zavattaro, eds.,
vol. 5569. springer-verlag, berlin, 2009, pp. 42‚Äì88.
[16] w. van der aalst, a. weijters, and l. maruster, ‚ÄúworkÔ¨Çow
mining: discovering process models from event logs,‚Äù ieee
transactions on knowledge and data engineering , vol. 16, no. 9,
pp. 1128‚Äì1142, 2004.
[17] a. adriansyah, b. van dongen, and w. van der aalst, ‚Äúconfor-
mance checking using cost-based fitness analysis,‚Äù in ieee
international enterprise computing conference (edoc 2011) .
ieee computer society, 2011.
[18] a. rozinat and w. van der aalst, ‚Äúconformance checking
of processes based on monitoring real behavior,‚Äù information
systems , vol. 33, no. 1, pp. 64‚Äì95, 2008.
[19] w. van der aalst, m. schonenberg, and m. song, ‚Äútime pre-
diction based on process mining,‚Äù information systems , vol. 36,
no. 2, pp. 450‚Äì475, 2011.
[20] m. song and w. van der aalst, ‚Äútowards comprehensive
support for organizational mining,‚Äù decision support systems ,
vol. 46, no. 1, pp. 300‚Äì317, 2008.
[21] d. hand, h. mannila, and p . smyth, principles of data mining .
mit press, cambridge, ma, 2001.
[22] r. bose, w. van der aalst, i. zliobaite, and m. pechenizkiy,
‚Äúhandling concept drift in process mining,‚Äù in international
conference on advanced information systems engineering (caise
2011) , ser. lecture notes in computer science, h. mouratidis
and c. rolland, eds., vol. 6741. springer-verlag, berlin, 2011,
pp. 391‚Äì405.
[23] w. van der aalst, p . barthelmess, c. ellis, and j. wainer,
‚Äúproclets: a framework for lightweight interacting workÔ¨Çowprocesses,‚Äù international journal of cooperative information sys-
tems , vol. 10, no. 4, pp. 443‚Äì482, 2001.
[24] k. bhattacharya, c. gerede, r. hull, r. liu, and j. su, ‚Äúto-
wards formal analysis of artifact-centric business process
models,‚Äù in international conference on business process man-
agement (bpm 2007) , ser. lecture notes in computer science,
g. alonso, p . dadam, and m. rosemann, eds., vol. 4714.
springer-verlag, berlin, 2007, pp. 288‚Äì304.
[25] w. pauw, m. lei, e. pring, l. villard, m. arnold, and j. morar,
‚Äúweb services navigator: visualizing the execution of web
services,‚Äù ibm systems journal , vol. 44, no. 4, pp. 821‚Äì845, 2005.
[26] h. montahari-nezhad, r. saint-paul, f. casati, and b. bena-
tallah, ‚Äúevent correlation for process discovery from web
service interaction logs,‚Äù vlbd journal , vol. 20, no. 3, pp.
417‚Äì444, 2011.
[27] acsi, ‚Äúartifact-centric service interoperation (acsi) project
home page,‚Äù www.acsi-project.eu.
[28] d. fahland, m. de leoni, b. van dongen, and w. van der aalst,
‚Äúconformance checking of interacting processes with over-
lapping instances,‚Äù in business process management (bpm
2011) , ser. lecture notes in computer science, s. rinderle,
f. toumani, and k. wolf, eds., vol. 6896. springer-verlag,
berlin, 2011, pp. 345‚Äì361.
[29] d. fahland, m. leoni, b. van dongen, and w. van der aalst,
‚Äúbehavioral conformance of artifact-centric process models,‚Äù
inbusiness information systems (bis 2011) , ser. lecture notes in
business information processing, a. abramowicz, ed., vol. 87.
springer-verlag, berlin, 2011, pp. 37‚Äì49.
[30] a. barros, g. decker, m. dumas, and f. weber, ‚Äúcorrelation
patterns in service-oriented architectures,‚Äù in proceedings of
the 10th international conference on fundamental approaches
to software engineering (fase 2007) , ser. lecture notes in
computer science, m. dwyer and a. lopes, eds., vol. 4422.
springer-verlag, berlin, 2007, pp. 245‚Äì259.
[31] s. dustdar, r. gombotz, and k. baina, ‚Äúweb services interac-
tion mining,‚Äù technical report tuv-1841-2004-16, information
systems institute, vienna university of technology, wien,
austria, 2004.
[32] s. dustdar and r. gombotz, ‚Äúdiscovering web service work-
Ô¨Çows using web services interaction mining,‚Äù international
journal of business process integration and management , vol. 1,
no. 4, pp. 256‚Äì266, 2006.
[33] r. gombotz and s. dustdar, ‚Äúon web services mining,‚Äù in
bpm 2005 workshops (workshop on business process intelligence) ,
ser. lecture notes in computer science, c. bussler et al., ed.,
vol. 3812. springer-verlag, berlin, 2005, pp. 216‚Äì228.
[34] h. nezhad, r. saint-paul, b. benatallah, and f. casati, ‚Äúde-
riving protocol models from imperfect service conversation
logs,‚Äù ieee transaction on knowledge and data engineering ,
vol. 20, no. 12, pp. 1683‚Äì1698, 2008.
[35] j. simmonds, y. gan, m. chechik, s. nejati, b. farrell, e. litani,
and j. waterhouse, ‚Äúruntime monitoring of web service con-
versations,‚Äù ieee transactions on services computing , vol. 2,
no. 3, pp. 223‚Äì244, 2009.
[36] g. zheng and a. bouguettaya, ‚Äúservice mining on the web,‚Äù
ieee transactions on services computing , vol. 2, no. 1, pp. 65‚Äì78,
2009.
[37] w. gaaloul, s. bhiri, and m.rouached, ‚Äúevent-based design
and runtime veriÔ¨Åcation of composite service transactional
behavior,‚Äù ieee transactions on services computing , vol. 3, no. 1,
pp. 32‚Äì45, 2010.
[38] w. van der aalst, ‚ÄúconÔ¨Ågurable services in the cloud: sup-
porting variability while enabling cross-organizational pro-
cess mining,‚Äù in otm federated conferences, 18th international
conference on cooperative information systems (coopis 2010) , ser.
lecture notes in computer science, r.meersman, t. dillon,
and p . herrero, eds., vol. 6426. springer-verlag, berlin, 2010,
pp. 8‚Äì25.
[39] m. weske, business process management: concepts, languages,
architectures . springer-verlag, berlin, 2007.ieee transactions on services computing, november 2011 13
wil van der aalst prof.dr.ir. wil van der
aalst is a full professor of information sys-
tems at the technische universiteit eind-
hoven (tu/e). currently he is also an ad-
junct professor at queensland university of
technology (qut) working within the bpm
group there. his research interests include
workÔ¨Çow management, process mining, petri
nets, business process management, pro-
cess modeling, and process analysis. he is
also editor/member of the editorial board of
several journals, including the distributed and parallel databases,
the international journal of business process integration and man-
agement, the international journal on enterprise modelling and
information systems architectures, computers in industry, business
& information systems engineering, ieee transactions on services
computing, lecture notes in business information processing, and
transactions on petri nets and other models of concurrency. he
is also a member of the royal holland society of sciences and
humanities (koninklijke hollandsche maatschappij der wetenschap-
pen) and the academy of europe (academia europaea).