detecting system-level behavior leading to
dynamic bottlenecks
zahra toosinezhad∗, dirk fahland∗,¨ozge k ¨oroˇglu∗, wil m.p. van der aalst†∗
∗eindhoven university of technology, eindhoven, the netherlands, email: z.toosinezhad@tue.nl, d.fahland@tue.nl
†rwth aachen, department of computer science, aachen, germany, wvdaalst@pads.rwth-aachen.de
abstract —dynamic bottlenecks occur when some cases in
a particular part of the process are temporarily delayed. in
performance-optimized systems such as production systems,warehouse automation systems, and baggage handling systems,such bottlenecks are rare, bounded in time and location, butcostly when they occur and propagate through the system. detect-ing and understanding the situations that cause such bottlenecksis crucial for mitigating and preventing processing delays. clas-sical process mining techniques that analyze performance alongindividual cases cannot detect these phenomena and their causes.we show that undesired system-level behavior can be detectedwhen identifying temporal event patterns across different cases inthe same process step. conceptualizing these patterns as system-level events allows us to correlate them into cascades of system-level behavior using spatio-temporal conditions. we discoverclasses of frequent patterns in these cascades that describebehaviors that precede bottlenecks. applied on event data of amajor european airport, our approach could fully automaticallydetect cascades of undesired system-level behavior leading todynamic bottlenecks. each detected cascade was veriﬁed as acorrect causal explanation for a dynamic bottleneck due to thephysical system layout and its processing.
index t erms—process mining, performance analysis, dynamic
bottlenecks, event aggregation, event correlation
i. i ntroduction
a primary objective of applying process mining is detecting
and understanding process performance problems to prevent
unnecessary delays or bottlenecks through process redesign
or early detection and mitigation. bottlenecks are observedwhen cases or items are processed too slow, leading to anaccumulation of unprocessed work. bottlenecks are causedby the unavailability of a worker or machine or when workvolume exceeds work capacity, resulting in growing queuesand longer waiting times [1]. the most common approach foridentifying bottlenecks from event logs is to calculate for eachcase or item the time difference between any two subsequentprocess steps [2]. aggregating these time differences over allcases reveals which process steps take longer than average,indicating a “static” bottleneck observed for the majority of
the cases due to structural capacity problems.
a. dynamic bottlenecks
performance-optimized processes in production systems,
warehouse automation systems, and baggage handling sys-
tems (bhs) already established sufﬁcient processing capacityto avoid static bottlenecks, often through a lean design pro-cess [3]. here, bottlenecks only arise dynamically when the
process operates outside its standard operating conditions, suchl1 l2 l3 l4 l5 l6 6543
2 1
l1 l2 l3 l4 l5 l6 5342 6 1 77
blockage
+2mins delayhigh load
3mins later
high load
fig. 1: formation of a dynamic bottleneck.
as work volume temporarily exceeding expected capacity orprocessing capacity temporarily falling below intended levels.fig. 1 illustrates an example from a bhs. we observe a higherload of cases (bags) 4,5,6between l1andl2that can still
be processed normally with additional cases 3and7about to
enter. this high load propagates forward via conveyor beltstol2,l3,l4. between l4andl5cases2,4,3,5saturate
the physical system capacity. processing at l4is temporarily
slowed down by stopping the conveyor belt from l3tol4,
and cases 6,7are blocked for 2 minutes.
such dynamic bottlenecks are rare, bounded in time and
location, but costly when they occur. in the bhs example,a delay of 2 minutes could mean bags 6,7might miss
a scheduled ﬂight. bottlenecks may propagate through thesystem similar to a trafﬁc jam: processing at l3in fig. 1
may slow down as well, causing further bottlenecks beforel3. understanding under which circumstances dynamic bot-tlenecks emerge and propagate (and how far) would enableprocess redesign or the development of suitable early-warningprediction models enabling human or automated intervention.
b. research problem
in this paper, we consider the research problem of (1)
detecting dynamic bottlenecks and (2) detecting the process
behavior which frequently precedes dynamic bottlenecks frombasic process event logs. the process behavior leading toa bottleneck cannot be described in terms of a single case
or group of cases: {4,5,6}between l1andl2form the
initial high-load situation, but {2,3,4,5}between l4and
l5form the later high-load situation causing the blocking of
{6,7}before l4. if the bottleneck propagates further towards
l2, completely different cases will be affected. as a resultcase-oriented process mining techniques are unable to detectdynamic bottlenecks and how they form and propagate.
17c. approach
we argue that solving the above problems requires studying
“system-level” behavior which can only be observed indirectly
from case-level events (of different cases) that have a speciﬁccharacteristic in a speciﬁc part of the process, e.g., eventsrelated to bags {4,5,6}between l1andl2forming a “high-
load” dynamic. from this angle, the following three sub-problems arise which we propose to solve as follows.
(1) automatically detect “outlier” system-level behaviors
that are different from normal operations and bounded inlocation and in time, i.e., the speciﬁc process steps andtime interval where the process operated outside its regularparameters. formally, given an event log lof case-level
events echaracterized by activity, time, and case identiﬁer,
identify all sub-sets s
1, ..., s n⊆eof events of lwhose
characteristics signiﬁcantly deviate from other sets of events,e.g., higher load and dynamic bottlenecks. the subsets s
imay
overlap if they represent different overlapping characteristics.in this paper, we conceptualize the problem in a general wayand propose to aggregate each set s
iinto a system-level event
for further analysis; we provide efﬁcient techniques to detecttime-bounded high-load situations and dynamic bottlenecks inperformance-optimized systems such as a bhs.
(2) automatically identify those system-level events which
are meaningfully correlated to each other and can be con-
sidered as a cascade of causally related system-level events.this necessitates the inclusion of domain-knowledge. in thispaper, we conceptualize the problem in terms of temporal andspatial distance properties between system-level events. wethen identify correlated events by querying for system-level
events with low temporal and spatial distance, i.e., dynamicsin adjacent process steps that overlap in time. we show thatthe correlated, viz. queried, system-level events describe apartially-ordered system-level behavior that we call a cascade.
(3) automatically identify frequent patterns of correlated
system-level events in system-level cascades that result indynamic bottlenecks. we show that applying existing sub-
graph mining algorithms can efﬁciently detect such frequentpatterns in cascades.
d. results
we applied the above techniques of system-level event
detection, querying, and grouping into system-level cascades,
and frequent pattern detection on the complete baggage-levelevent data of 7 days of a bhs of a major european airport.we identiﬁed 1029 instances of dynamic bottlenecks and123187 instances of other outlier behaviors. we identiﬁed fourbasic types of frequent patterns that precede these bottlenecks;all identiﬁed patterns were conﬁrmed as correctly describingcause-effect behavior for forming dynamic bottlenecks.
in the following, we discuss related work in sect. ii. we
then introduce an event model that considers events at differentlevels of abstraction in sect. iii to structure our researchproblem. we discuss how to detect system-level events insect. iv, how to detect cascades of correlated system-levelevents in sect. v, and how to ﬁnd patterns in cascades insect. vi. we report on our results on synthetic and real-lifeevent logs in sect. vii and discuss our ﬁndings and futurework in sect. viii.
ii. r
elated work
the primary approach for performance outlier analysis in
process mining is to aggregate time differences between any
two process steps and identify outlier values [2]. however,these techniques can only identify static bottlenecks affectingall (or most) cases. event interval analysis [4] allows analyzingdurations between any two process steps on a more ﬁne-grained level based on event and case attributes, but cannotcapture patterns involving multiple cases. the visual analyticstechnique of the performance spectrum reveals time-boundedperformance patterns [5] over multiple process steps. theseperformance patterns can be understood as emergent system-level behavior formed by a group of cases in a speciﬁctime-window, such as batching [6]. we contribute techniquesto detect performance patterns of multiple cases (system-level events) with a negative impact on performance, esp.bottlenecks, and how they propagate in time and to otherprocess steps (as system-level dynamic).
behavioral outlier analysis techniques in process mining
identify infrequent event sequences [7] or infrequent eventcontexts [8] in a case of correlated events. the problem of thispaper is to identify frequent patterns over emergent system-level events that are initially uncorrelated.
techniques for ﬁnding sequential patterns in spatio-temporal
event data [9] are inapplicable due to the distributed natureof processes. process event correlation techniques either usecase-level attributes to correlate events [10] or a process modeldescribing the expected behavior [11]. this information is notavailable for emergent system-level events. by abstracting aprocess as a sequence of queues and visualizing the queueparameters over time, staged process flows [12] allow visu-ally analyzing how performance problems propagate througha process and affect multiple cases. this technique howeverassumes a sequential process and outlier behavior is notcaptured as a data feature for further analysis.
queueing concepts are also used to discover congestion
graphs [13] which model workload and resource availabilityover time in a markov state for improved remaining timeprediction. the congestion graph model is local to one processstep and does not consider how performance problems maypropagate. our work aims at detecting, for instance, situationsof high workload and resource unavailability and how theypropagate to other process steps, thus providing a large de-scription of performance dynamics.
outside process mining, studies in distributed system failure
analysis [14], [15] revealed the importance of analyzing cor-
relations of outlier behavior and failures to increase resilienceand performance in it systems [16] and in iot environments[17]. no existing work studies cascades of correlated failuresfor frequent patterns. various works address ﬁnding outliersand their causal relations in trafﬁc data streams . outliers are
identiﬁed through temporal properties in a speciﬁc spatial area
18system-level event (blockage)
segment-
level event system-level event (high load)case-level event
timel3
l4
l5e1
56 7 8 1 34 9 2
5 6 7 8 1 34 9 2
5 3 4 1 8 7 6 9 2
h4h5
s2e2
e3
fig. 2: case, segment, and system-level events.
[18]–[20]. outliers of a single type are correlated by building
trees based on spatial and temporal properties of outliers [18]or by training a deep neural network which also allows short-term prediction [19]. spatio-temporal correlations betweendifferent outliers can be learned through an attention network[20]. however, these works do not distinguish different typesof outlier behavior. these techniques cannot visualize andexplain longer cascades of multiple outlier events over timeand their frequencies.
iii. e
vent definitions on different levels
to precisely formulate the three research questions of
sect. i, we introduce a conceptual event model having 3 levels.case-level events records updates to a case as usual; segment-
level events capture behavioral properties of pairs of directly
related events; system-level events describe sets of consecutive
segment-level events with speciﬁc properties. figure 2 illus-trates all 3 event notions for the behavior described in fig. 1.
we assume our input events to be records of actions that
happened to a speciﬁc case or object at a speciﬁc point intime, i.e., the standard event notion in process mining. wecall a relation <⊆e×eanacyclic order iff its transitive
closure <
∗is irreﬂexive, i.e., <has no (self-)cycle.
deﬁnition 1 (case-level event log). acase-level event log
lc=(ec,#c,<c)is a set ecof events; #cdeﬁnes attributes
such as case id #c
id(e), activity #c
act(e), and time #c
time(e)
for each e∈ec; events are ordered by an acyclic order wrt.
case id and time <c⊆{(e1,e2)∈ec×ec|#c
id(e1)=
#cid(e2)∧#c
time(e1)≤#c
id(e2)}.
note that <corders only events in the same case and
according to time, but <ccan be stricter than a partial order. in
the following, we assume that <cdescribes “directly causally
precedes” which can be derived using binary token ﬂows [21],
transitive reduction of a partial order [8], or may simply holdin the data, e.g., a bag moving on a physical conveyor belt.in fig. 2, each square shows a case-level event, each diagonalline between two case-level events shows <
c. tab. i shows
a part of a case-level event log for our running example offig. 1 (not visualized in fig. 2); e
15<ce18ande18<ce22
bute15/negationslash<ce22.
the set of activities in lcisς={#c
act(e)|e∈ec}.w e
call a pair (a, b)∈σ×σasegment of the process describing
the passage from activity ato the next activity b[5]. twotable i: case-level events of running example
id act time
... ... ... ...
e10 1 l4 10:21:30
e11 1 l5 10:21:50
e12 2 l4 10:23:10
e13 2 l5 10:23:30
e14 4 l4 10:23:25
e15 5 l3 10:23:40
e16 4 l5 10:23:45
e17 3 l4 10:23:40
e18 5 l4 10:23:55
... ... ... ...... ... ... ...
e19 3 l5 10:24:00
e20 6 l3 10:23:55
e21 7 l3 10:24:30
e22 5 l5 10:24:05
e23 6 l4 10:26:00
e24 8 l3 10:24:40
e25 7 l4 10:26:15
e26 6 l5 10:26:20
e27 8 l4 10:26:20
case-level events e1<ce2with#cact(e1)=a,#cact(e2)=b
describe that the cases or objects #c
id(e1)and#cid(e2)passed
through segment (a, b). we capture this behavioral observation
as an aggregate event, called a segment-level event as shown
in fig. 2. the segment-level events are fully deﬁned by the
case-level event log lcas follows.
deﬁnition 2 (segment-level log). letlc=(ec,#c,<c)be a
case-level event log. a segment-level log ls=(es,#s,<s)
oflchas events es=<c(the causally related events of lc)
where each segment-level event s=(e1,e2)∈eshas case
id#s
id(s)=#cid(e1)=#cid(e2), source and target activity
#s
src(s)=#cact(e1),#stgt(s)=#cact(e2), start and end time
#sstart(s)=#c
time(e1),#s
end(s)=#c
time(e2). events are
acyclically ordered wrt. segment and time by <s⊆{(s1,s2)∈
es×es|#s
src(s1)=#ssrc(s2)∧#stgt(s1)=#stgt(s2)∧
(#sstart(s1)<#sstart(s2)∨#s
end(s1)<#send(s2))}.
each diagonal line between two case-level events in fig. 2
is a segment-level event. table ii shows the segment-level
event log for the case-level events in tab. i; for instances
75=(e15,e18)ands77=(e18,e22). each segment-level
event deﬁnes a spatio-temporal interval from #s
src(s)to
#stgt(s)during time [#sstart(s);#s
end(s)].
in contrast to case-level events, <sorders the segment-level
events of cases per segment, e.g., in tab. ii s75<ss78(for
cases5and6in(l3,l4)). def. 2 requires that the order
<sis consistent with at least start or end time. though, <s
can be stricter than the temporal order (as in def. 1). in the
following, we assume s1<ss2iffs1directly starts before s2,
i.e., their start events are neighbors on the time-axis of theirstart activity in fig. 2. we write e
s(a, b)for events s∈es
with#s
src(s)=aand#stgt(s)=bin segment (a, b).
fig. 2 shows how a set of consecutive segment-level events
may form a behavior that we can recognize as a pattern at
the system level. for instance, the segment-level events ofcases2,3,4,5in(l4,l5)have a shorter arrival rate than other
segment-level events causing a short interval of high-load. the
segment-level events of cases 6,7,8in(l3,l4)have a longer
duration causing a dynamic bottleneck.
to be able to reason about how the high-load interval relates
to the bottleneck, we aggregate a set of consecutive segment-level events into a system-level event.
19table ii: segment-level event log
id src tgt start end
s72 1 l4 l5 10:21:30 10:21:50
s73 2 l4 l5 10:23:10 10:23:30
s74 4 l4 l5 10:23:25 10:23:45
s75 5 l3 l4 10:23:40 10:23:55
s76 3 l4 l5 10:23:40 10:24:00
s77 5 l4 l5 10:23:55 10:24:05
s78 6 l3 l4 10:23:55 10:26:00
s79 7 l3 l4 10:24:30 10:26:15
s80 8 l3 l4 10:24:40 10:26:20
s81 6 l4 l5 10:26:00 10:26:20
deﬁnition 3 (system-level event log). letlsbe a segment-
level event log. a system-level event log lh=(eh,#h,<h
)(over ls) deﬁnes a set of system-level events eh
where for each h∈eh,#h
type(h) is the event type,
#hsrc(h) and#htgt(h) are source and target, #hsev(h)⊆
es(#hsrc(h),#htgt(h)) are segment-level events from ls,
#hstart(h)=m i n s∈#h
sev(h)#s
start(s)is the start time and
#h
end(h)=m a x s∈#h
sev(h)#s
end(s)is the end time. event
h∈ehisclosed iff for any two segment-level events s1,s2∈
#h
sev(h)any event x∈es(#hsrc(h),#htgt(h)),s 1<sx<ss2
is also in h, i.e., x∈#hsev(h). the order <hof system-level
events is acyclic and must respect time: <h⊆{(h1,h2)∈
eh×eh|#sstart(s1)<#sstart(s2)∨#s
end(s1)<#send(s2)}.
figure 2 indicates two closed system-level events h4and
h5, i.e., two closed sets of consecutive segment-level events.
in a real bhs, the higher load in (l4,l5)may cause the
conveyor belt (l3,l4)to stop.
in contrast to def. 2, def. 3 allows two design decisions.
(1)which sets of segment-level events shall be aggregated into
a system-level event? (2) which system-level events might be
causally related and hence should be ordered by <h?these
design decisions correspond to our research questions (1) and
(2) which we answer in sect. iv and v-b, respectively. therewe will call sets of system-level events connected by <
ha
cascade of system-level behavior. we then show in sect. vi
that we can answer research question (3) be searching forfrequent patterns in l
h=(eh,#h,<h)along <h.
iv . d etecting system -level events
we consider how to detect “outlier” system-level events
ehof interest to build a system-level event log lh=
(eh,#h,<h)from a normal case-level event log lc, i.e.,
research question (1). we already obtained the segment-levelevent log l
s=(es,#s,<s)oflcas described in sect. iii
and shown in tab. ii. we are interested in detecting closed
system-level events h, i.e., sets of consecutive segment-level
events, that together show a “different” behavioral character-istic than other events in the segment, as shown in fig. 2.
detecting such differences requires a separate detection
method for each type of behavioral characteristic. thus, solv-ing this problem requires the analyst to deﬁne a set of system-level event detection methods d={detect
1, ...,detect k}blockagetimesrc
tgt#start(h)
#end(h)
fig. 3: segment-level events forming a system-level blockage.
where each detection method detect i(es,#s,<s)=eh
i
returns a set of system-level events of a speciﬁc type ac-
cording to def. 3. the set of system-level events is thene
h=/uniontext
detect i∈ddetect i(es,#s,<s).
in the following, we deﬁne two speciﬁc system-level event
detection methods to detect dynamic bottlenecks (sect. iv-a)and high-load situations (sect. iv-b) for the domain of mate-rial handling systems (mhs).
a. detecting dynamic bottlenecks as blockages
a dynamic bottleneck emerges when one or more cases take
signiﬁcantly higher times to ﬂow from activity ato activity b
than the baseline duration for segment (a, b).i f˜tis the baseline
duration for cases traversing (a, b), then we can observe a
signiﬁcant delay as a segment-level event s∈e
s(a, b)where
the time-duration δt(s)=#s
end(s)−#s
start(s)is signiﬁcantly
higherδt(s)/greatermuch˜tthan the baseline.
in highly optimized systems such as mhs, the median
duration in a segment does form the intended baseline, i.e., ˜t
is the median of δt(es)={δt( s)|s∈es}. any segment-
level event swhereδt(s)is an outlier wrt. δt(es)in a
statistical sense would show a signiﬁcant delay. we analyzed
and compared 4 univariate outlier detection methods and iden-tiﬁed the modiﬁed z-score as the most reliable technique. [22,
ch. 5.2]
the modiﬁed z-score relates a concrete deviation (δt(s)−˜t)
of a segment-level event sto the median absolute deviation
mad=m e d i a n
s∈es(|δt(s)−˜t|)of all events:
m(s)=( 0 .6745·(δt(s)−˜t))/mad (1)
the factor 0.6745 allows approximating a standard normal
distribution. if msis higher than a threshold kdelay , the
δt(s)is an outlier wrt. δt(es)and we consider the case
#s
id(s)to suffer a signiﬁcant delay, i.e., delay(s)=true iff
ms>k delay . for the domain of material handling systems,
we conﬁrmed normality of the data and identiﬁed kdelay=5 0
as reliable together with domain experts. [22, ch. 5.2]
adynamic bottleneck emerges when several consecutive
cases experience a delay. for example, in a mhs it may be that
multiple cases are stuck behind each other in the same queue(red cases in fig. 3) while other cases wait either before theblocked queue or are routed around and only enter the queueafter the blockage ends (green cases at the end of fig. 3).we can formally describe a blockage as a set of consecutivesegment-level events swith delay(s)=true.
we detect all blockages in a segment (a, b)as follows.
assuming all start time-stamps to be distinct, e
s(a, b)=
20time
high-loadsrc
tgt#start(h)
#end(h)
fig. 4: segment-level events forming high-load at system-level
/angbracketlefts1,...,s n/angbracketrightdeﬁnes a sequence of segment-level events. iter-
ating over /angbracketlefts1,...,s n/angbracketrightwe ﬁnd all subsequences /angbracketleftsv,...,s w/angbracketright
with delay(si)= true,v≤i≤w. each such subsequence
deﬁnes a new system-level event hof#h
type(h)=blockage
over#hsev(h)={sv,...,s w}(see def. 3).
suppose that in our running example (l3,l4)has a median
duration of ˜t=1 0 secs and mad=1 sec. then for
kdelay=5 0 , segment-level events s78,s79,s80of tab. ii have
delay(si)= true, e.g., m(s78)=0 .6745·(125−10)/1=
77.56>k delay , resulting in the blockage (bl) system-level
event h5in tab. iii.
b. detecting high-load
a process having to handle a signiﬁcantly higher number
of cases in a process step may face performance problems.
we can quantify the workload in a segment during a time-interval as the number of segment-level events crossing thistime interval. if this workload is signiﬁcantly above a baselineworkload, then this time-interval describes a high-load outlier
situation as illustrated in fig. 4.
to detect high-load events in segment (a, b), we bin all
segment-level events into bins of length k
bin, i.e., bin i=
{s∈es(a, b)|#s
start(s)∈[i·kbin;(i+1 )· kbin)}with
load i=|bin i|. we then use the iqr-method to classify bins
as outliers wrt. load. let p75
(a,b)be the 75th percentile of the
load i,i >0. for a bin holds highload(bin i)=true iff
load i>p75
(a,b). as for blockages, we search for subsequences
/angbracketleftbin v,..., bin w/angbracketrightwith highload(bin i)= true,v≤i≤w.
each such subsequence deﬁnes a new system-level event hof
#htype(h)= highload over#hsev(h)= bin v∪...∪bin w(see
def. 3).
suppose that in our running example segment (l4,l5)for
kbin=1min hasp50=2 andp75=3, i.e., 75% of the
bins see at most 3 bags per minute. then s73,s74,s76,s77of
tab. ii fall into a bin with load=4, resulting in the high-load
(hl) system-level event h4in tab. iii.
v. d etecting system -level event cascades
in sect. iv, we detected system-level events ehfrom a
given case-level event log lc, for example the events in
tab. iii. in this section, we detect which system-level events
might be causally related, i.e., research question (2). weﬁrst discuss how to identify whether two events in e
hare
correlated in sect. v-a. ordering correlated events by timeyields the relation <
hof a system-level event log lh=
(eh,#h,<h)(see sect. iii). we then observe that a set of
events connected by <hforms a cascade of system-level
behavior; we formalize this in sect. v-b.table iii: detected system-level events
type src tgt start end sev
h1 hl l1 l2 10:20 10:23 s65,...,s 68
h2 hl l2 l3 10:21 10:23 s61,...,s 64
h3 hl l3 l4 10:22 10:24 s69,...,s 71
h4 hl l4 l5 10:23 10:24 s73,s74,s76,s77
h5 bl l3 l4 10:23 10:26 s78,s79,s80
h6 hl l5 l6 10:25 10:26 s82,...,s 84
a. correlating system-level events
in contrast to case-level events, the system-level events
ehlack a unique case identiﬁer that describes which events
belong to the same observable dynamic. rather, we infer from
emergent system-level event properties whether two eventsmight be connected by a direct material cause that explains
why one event has an inﬂuence on another event. the examplein fig. 2 illustrates this: h
4andh5originate from segment-
level events of disjoint sets of cases, yet the high-load h4in
segment (l4,l5)prevents cases on (l3,l4)from entering
(l4,l5)which causes the blockage h5in(l3,l4).i nt h e
following, we discuss which emergent properties we can use toexplain possible causal relations between system-level events.
each system-level event hin our event model has two
emergent properties at the system-level: a spatial property (it
is located on segment (#
h
src(h),#htgt(h))) and a temporal
property (it happens in the interval [#hstart(h);#h
end(h)]).
there can only be a direct material cause between two system-
level events if they are “sufﬁciently” close to each other inspace and time, i.e., events that are too far apart cannot berelated. for example, in fig. 2, h
4andh5are spatially close
(share activity l4) and temporally close (overlap in time).
we propose to use a spatial distance measure ds:eh×
eh→dsand a temporal distance measure dt:eh×
eh→dtto characterize the distance between two events
byds(h1,h2)anddt(h1,h2). from domain-knowledge we
can derive which spatial and temporal distances together areclose⊆d
s×dt. then two events h1,h2∈ehare correlated
when(ds(h1,h2),dt(h1,h2))∈close. note that distance
does not have to be continuous.
•measuring spatial distance: the spatial distance measured
scould be based on the physical distance of the locations
ofh1andh2or whether particular materials or infor-
mation is being exchanged. for the case of a mhs withphysical conveyor belts, we assume that two system-levelevents are correlated more likely if they happen on neigh-bouring conveyor belts. we deﬁne distance d
s(h1,h2)
as “proximity” in terms of locations shared betweenh
1andh2, i.e., ds(h1,h2)=|{#h
src(h1),#htgt(h1)}∩
{#hsrc(h2),#htgt(h2)}|. we consider h1andh2spatially
close if they are spatially connected, ds(h1,h2)>0.
•measuring temporal distance: the temporal distance mea-
sure dtcould be based on time distance or the amount
of overlap between the intervals h1and h2. for the
case of a mhs, we consider system-level events as
21related if they overlap in time or contain each other in
terms of allen algebra. formally, dt(h1,h2)is the allen
relation [23] that holds for [#h
start(h1);#h
end(h1)]and
[#h
start(h2);#h
end(h2)]; speciﬁcally [t1;t/prime
1]overlaps with
[t2;t/prime2]iff:t/prime2−t/prime1>0andt2−t1>0;[t1;t/prime1]contains
[t2;t/prime2]iff:t/prime1−t/prime2>0andt2−t1>0. we deﬁne that
h1andh2are close if dt(h1,h2)∈{overlaps ,contains}.
note that dt(h1,h2)deﬁnes that h1andh2are close only
ifh1starts before h2, i.e., dt(h1,h2)is directed.
altogether, two events h1,h2are correlated iff they are
spatially and temporally close, i.e., ds(h1,h2)>0and
dt(h1,h2)∈{overlaps ,contains}. in fig. 2, h4andh5are
correlated.
b. cascades of correlated events
we now want to order the correlated system-level events
over time to study system-level behavior. technically, we will
end up deﬁning an acyclic order <hof a system-level event
log (def. 3). we conceptualize this problem as a directedgraph g=(e
h,fh)where each system-level event is a node
h∈eh. there is a directed edge (h1,h2)∈fhbetween any
two events that describes that h1andh2potentially occur in
the same dynamic(directed clique). from this graph, we retainonly those edges (h
1,h2)where h1andh2are spatially and
temporally close as described in sect. v-a.
in other words, we query the graph gfor the sub-graph
of edges (h1,h2)where(ds(h1,h2),dt(h1,h2))∈close.
each queried edge (h1,h2)states that h1andh2are corre-
lated by overlapping spatially and temporally andh1starts
before h2. this satisﬁes our requirement for the acyclic
ordering relation <hof system-level event logs (def. 3).
we thus can deﬁne <h={(h1,h2)∈eh×eh|
(ds(h1,h2),dt(h1,h2))∈close}. the resulting system-level
event log lh=(eh,#h,<h)can be understood as directed
acyclic graph of correlated events. in general, the system-level event log l
h=(eh,#h,<h)is not connected when
interpreting <has directed edges over nodes eh.
deﬁnition 4 (cascade). acascade is a connected component
in the system-level event log lh=(eh,#h,<h). the events
in a cascade are acyclically by local correlations that goforward in time (along the correlation edges <
h).
for instance, the conceptual graph for the system-level
events in tab. iii has nodes h1,...,h 6that are all connected
to each other. querying this graph for correlated events returnsthe edges (h
1,h2),(h2,h3),(h3,h4),(h4,h5),(h4,h6)result-
ing in the system-level event log of fig. 5 for the process infig. 1. together they describe that a high-load h
1in(l1,l2)
propagated forward to h4in(l4,l5)from where it further
propagated in parallel: backwards as a blockage h5in(l3,l4)
and forward as high-load h6in(l5,l6).
vi. d etecting frequent patterns in cascades
figure 6 shows some cascades of system-level events de-
tected on real-life data of a bhs. these cascades are complexin structure and not all correlated outlier dynamics may bel3:l4*hl l4:l5*hll3:l4*bl
l5:l6*hll2:l3*hl l1:l2*hl
fig. 5: cascade of the system-level events of tab. iii
systematic, that is, occur frequently or even describe cause-effect relations. in the following, we discuss how to identifyfrequently occurring patterns in the cascades of a system-levelevent log l
h=(eh,#h,<h), i.e., research question (3).
given the graph-based nature of lh, we propose to describe
these patterns as sub-graphs.
deﬁnition 5 (cascade pattern). acascade pattern is a con-
nected labeled graph p=(np,#p,fp); each node n∈
npdescribes a system-level event by type #p
type(n), and
source#p
src(n) and target #p
tgt(n) activity; each directed
edge(n1,n2)describes that n1“causes” n2in the sense
of sect. iii. a cascade pattern poccurs in a system-level
event log lhiffpis an isomorphic sub-graph in lhwrt.
#ptype(n),#p
src(n),#p
tgt(n), i.e., ignoring time-intervals of
events in lh.
finding all frequent cascade patterns becomes a frequent
sub-graph mining problem. frequent sub-graph mining is a
data mining task of ﬁnding all sub-graphs that appear in atleast k
mingraphs of a graph database. in our situation, lhis
the graph database, each cascade is a graph in lh, and the
frequent sub-graphs are the cascade patterns we are interestedin. various sub-graph mining techniques are available; in ourevaluation we use tkg [24] which returns the top-k sub-
graphs wrt. their frequency (support) and has low runningtimes also on large problem instances.
vii. e
v aluation
we implemented and released the ﬁrst version of our tech-
nique (https://github.com/processmining-in-logistics/cascades/releases/tag/v1.0) and evaluated it on real-life event data ofa bhs of a major european airport to answer the followingquestions. (1) are there dynamic bottlenecks and do they occuralone or are they correlated? (2) what is the structure andfrequency of cascades that precede dynamic bottlenecks? (3)are there frequent patterns in the cascades that are describingcause-effect relations of a bhs?
(1) in the bhs, each bag is a case and events are recorded
when bags pass sensors on conveyors, the sensor location isrecorded as activity name. we applied our implementationon an event log which contains 4,220,897 case-level eventsof 152,518 bags over 7 days. table iv provides statistics ofdetected system-level events per day. we distinguish betweenblockage and high-load events that were isolated (iso) andcorrelated in a cascade (co): most of the outlier behaviors arecorrelated. we also report the average delay due to blockagesand the maximum number of bags in a blockage (size):the frequency and duration of blockages varies, but overallhundreds of bags are blocked each day, an average 4 minutesof delay may cause bags checked in late to miss their ﬂight.
22l155:l154*hl
l256:l155*hl
l253:l155*bll257:l155*hl
l258:l155*hl
l256:l155*bl
l249:l155*hl l259:l155*hl l155:l195*hl l252:l155*hll13:l9*bl
l171:l9*hl l26:l13*hll166:l9*hl
l31:l166*hl
l224:l166*hll20:l166*hl
l13:l166*hl l12:l166*hll34:l38*hl
l60:l34*hll261:l34*hl
l57:l38*bll57:l38*hl
l38:l303*hl
l60:l57*hl l60:l40*hl l60:l42*hll60:l364*hl l60:l199*hl l303:l128*hll365:l261*hl
l9:l17*hl
l13:l9*hll166:l9*hl
l13:l18*hll13:l9*bl
l168:l13*hl
l11:l13*hl
l169:l13*hll23:l13*hl
l13:l170*hl
l8:l13*hll13:l30*hl
l171:l13*hll13:l166*hl
l170:l171*hl l13:l33*hll171:l172*hl
l172:l14*hll32:l170*hl
l199:l198*hl
l34:l199*bl
l198:l200*hll198:l201*hll248:l155*hl
l249:l155*hll155:l154*hl
l250:l155*hll251:l154*hl l252:l155*hl l253:l155*bll254:l251*bll251:l195*hl
l155:l195*hll255:l251*bl
fig. 6: detected cascades of system-level events.
table iv: detected system-level events and cascades
high-load blockage # cascades
day iso co iso co delay size total block.
mon 1073 15876 23 41 214s 4 586 23
tue 924 16582 57 115 294s 13 785 40
wed 920 15719 51 109 243s 9 869 47
thu 1287 15871 30 71 454s 6 904 38
fri 1390 18428 55 83 266s 6 1090 50
sat 1069 16802 38 146 290s 6 1029 55
sun 1183 16063 59 151 220s 12 991 56
(2) table iv also reports the number of cascades found
in total and cascades with at least one blockage event: most
cascades contain no blockage but several cascades containmultiple correlated blockage events. we detect more cascadeswith and without blockages on friday to sunday which is inline with higher ﬂight trafﬁc. fig. 6 shows a few examplecascades: cascades greatly vary in size and complexity.
(3) we applied the frequent subgraph mining algorithm
tkg of smpf [25] on the detected cascades with at leastone blockage. we detected 4591 frequent subgraphs; 500subgraphs contained at least one blockage with a minimumsupport of 3. we analyzed the structure of the frequentsubgraphs and identiﬁed the following 4 types, also shownin fig. 7.
1) fig. 7a illustrates the ﬁrst cascade pattern type. next
to each system-level event h
1we visualize its segment
h1
h3 h2
b:cbackward forwardh2
h3h1
b:c c:d a:bforwardforward
h1
h2
c:bb:c c:d a:bh2
h3h1 backward
backward
(a) forward
(c) parallel(b) backward
(d) mixeda:b a:b c:d
fig. 7: frequent types of cascade patterns.table v: frequency of detected cascade patterns per type
patterntype frequency minsupport maxsupport
forward 50 3 6
backward 60 3 5
parallel 68 3 6
mixed 322 3 4
as a node #h
src(h1):#htgt(h1)connected via a dashed
edge. the red edge from one segment node to the next
indicates that the target activity of the ﬁrst is the sourceof the second activity (they form a sequence). we cansee that the causal order h
1<hh2<hh3follows the
direction of the segments, i.e., the cascade propagatesforward in the process.
2) fig. 7b illustrates the second pattern where h
1<h
h2<hh3are ordered in opposite direction of the
segments, i.e., the cascade propagates backwards in the
process.
3) fig. 7c illustrates the third pattern where the segments
are not sequentially ordered but diverge from the samesource or converge to the same target, i.e., the cascadepropagates in parallel.
4) fig. 7d illustrates the fourth pattern where the cascade
propagates mixed through the process, i.e., forward,
backward, and parallel.
table v shows how many patterns of each type were
found in the data and their minimum and maximum support.the large number of mixed patterns suggests that dynamicbottlenecks are most often preceded by complex dynamics.
fig. 8 shows 3 detected mixed frequent subgraphs with at
least one blockage with the physical layout. fig 8a showsa simple subgraph detected close to the end of the process.we indicate the average delay between start times of twosystem-level events on the edge. high-load (h1) on segmentl13:l14 propagates forward (h2) and causes a blockage (h3)
after 143 secs at up-stream segment l16:l13. this pattern
is causally explained by the system: l13:l14 is overloaded
causing l16:l13 to stop forwarding bags. subgraph 8b was
found in baggage screening and is similar to subgraph 8ahigh-load (h2) on l3:l2 causes a blockage (h3) at upstream
segment l4:l3. interestingly (h2) is preceded in this frequent
pattern by a parallel high-load (h1). the blockage (h3) isexplained causally by (h2) whereas the preceding high-load(h1) is only frequently correlated to (h2) but both causally linkto (h4). fig. 8c illustrates a bigger subgraph detected at theend of the process. here, high-loads (h1) and (h2) convergevial6:l7 andl8:l7 to location l7, propagate backwards
as high-load (h3) to l9:l8. location l8is a split to three
different locations l7,l10, l11. the high-load propagates
downstream and causes a blockage (h5) on l8:l10. this
complex dynamic occurred repeatedly and the ﬁrst high-loadoccurred 194 secs before the blockage.
23/g1/g2/g3/g4/g5/g6/g7
/g1/g2/g3/g4/g5/g8/g7/g9/g6/g3/g10/g11/g12/g10
/g13/g2/g3/g4/g5/g14/g7/g6/g15/g9/g3/g10/g11/g12/g10
/g2/g6/g14/g16/g2/g6/g15 /g2/g6/g15/g16/g2/g6/g17 /g2/g6/g18/g16/g2/g6/g14
(a)
/g1/g2/g3/g4/g5/g6/g7
/g2/g6/g8/g2/g9/g1/g2/g3/g4/g5 /g9/g7/g10/g11/g3/g12/g13/g14/g12
/g2/g9/g8/g2/g15 /g2/g16/g8/g2/g9/g1/g2/g3/g4/g5 /g11/g7/g16/g17/g3/g12/g13/g14/g12
/g18/g2/g3/g4/g5/g16/g7/g9/g16/g3/g12/g13/g14/g12
/g2/g11/g8/g2/g16
(b)/g1/g2/g3/g4/g5/g6/g7
/g2/g8/g9/g2/g10 /g1/g2/g3/g4/g5 /g11/g7/g8/g10/g3/g12/g13/g14/g12
/g2/g15/g9/g2/g10/g1/g2/g3/g4/g5 /g16/g7/g17/g18/g3/g12/g13/g14/g12
/g2/g19/g9/g2/g15/g20/g2/g3/g4/g5/g21/g7/g15/g10/g3/g12/g13/g14/g12
/g1/g2/g3/g4/g5 /g17/g7/g21/g11/g3/g12/g13/g14/g12
/g2/g15/g9/g2/g6/g18/g2/g15/g9/g2/g6/g6/g1/g2/g3/g4/g5 /g8/g7/g10/g16/g17/g3/g12/g13/g14/g12
/g2/g6/g11/g9/g2/g19
(c)
fig. 8: examples of detected cascade patterns.
viii. c onclusion
we presented and validated a new method to detect cascades
of system-level behavior which frequently precede dynamic
bottlenecks from regular event logs. we could detect dynamicbottlenecks in a highly optimized bhs of a major europeanairport. the bottlenecks occur in cascades of high-load situa-tions that propagate through the system. we veriﬁed that allpropagation dynamics are causally explained by the underlyingsystem dynamics.
the current approach has several limitations. the identiﬁed
patterns occur relatively infrequently in the cascades and showa large variety. all the patterns have low support whichrequires further investigation. analysis of longer time scalesis required to increase conﬁdence in the ﬁndings. currently,we only consider high-load as an explanation for dynamicbottlenecks. other causes such as availability of workers andequipment have to be included in future work. we onlydetect dynamic bottlenecks but would like to predict thosebottlenecks, e.g., by splitting patterns in prediction ruleswith antecedent and consequent. we only demonstrated theapplicability of our approach to bhs. the applicability toother systems with strict queuing has to be conﬁrmed whilegeneralization to business processes requires further research.
a
cknowledgment
the research leading to these results has received funding
from vanderlande in the project “process mining in logistics”.
¨ozge k ¨oroˇglu worked at vanderlande industries, veghel, the
netherlands for parts of this study. we thank marwan hassanifor his valuable input on formulating the research problem ina clear manner.
r
eferences
[1] r. w. hall, “queueing methods: for services and manufacturing,” 1991.[2] f. milani and f. m. maggi, “a comparative evaluation of log-based
process performance analysis techniques,” in bis 2018, vol. 320 of
lnbip, pp. 371–383, springer, 2018.
[3] t. l. graafmans, o. turetken, j. h. poppelaars, and d. fahland,
“process mining for six sigma: a guideline and tool support,” bise,
2020.
[4] s. suriadi, c. ouyang, w. m. p. van der aalst, and a. h. m. ter hofstede,
“event interval analysis: why do processes take time?,” decis. support
syst., vol. 79, pp. 77–98, 2015.
[5] v . denisov, d. fahland, and w. m. p. van der aalst, “unbiased, ﬁne-
grained description of processes performance from event data,” in bpm
2018, vol. 11080 of lncs, pp. 139–157, springer, 2018.
[6] e. l. klijn and d. fahland, “performance mining for batch processing
using the performance spectrum,” in bpm 2019 workshops, vol. 362 of
lnbip, pp. 172–185, springer, 2019.
[7] f. folino, g. greco, a. guzzo, and l. pontieri, “mining usage scenarios
in business processes: outlier-aware discovery and run-time prediction,”
data knowl. eng., vol. 70, no. 12, pp. 1005–1029, 2011.
[8] x. lu, d. fahland, f. j. h. m. van den biggelaar, and w. m. p. van der
aalst, “detecting deviating behaviors without models,” in bpm 2015
workshops, vol. 256 of lnbip, pp. 126–139, springer, 2015.
[9] y . huang, l. zhang, and p. zhang, “a framework for mining sequential
patterns from spatio-temporal event data sets,” ieee trans. knowl. data
eng., vol. 20, no. 4, pp. 433–448, 2008.
[10] h. reguieg, b. benatallah, h. r. m. nezhad, and f. toumani, “event
correlation analytics: scaling process mining using mapreduce-awareevent correlation discovery techniques,” ieee trans. serv. comput.,
vol. 8, no. 6, pp. 847–860, 2015.
[11] s. pourmirza, r. m. dijkman, and p. grefen, “correlation miner: mining
business process models and event correlations without case identiﬁers,”int. j. cooperative inf. syst., vol. 26, no. 2, pp. 1742002:1–1742002:32,2017.
[12] h. nguyen, m. dumas, a. h. m. ter hofstede, m. l. rosa, and
f. m. maggi, “business process performance mining with staged processﬂows,” in caise 2016, vol. 9694 of lncs, pp. 167–185, springer, 2016.
[13] a. senderovich, j. c. beck, a. gal, and m. weidlich, “congestion
graphs for automated time predictions,” in eaai 2019, pp. 4854–4861,
aaai press, 2019.
[14] s. nath, h. yu, p. b. gibbons, and s. seshan, “subtleties in tolerat-
ing correlated failures in wide-area storage systems,” in nsdi 2006,
usenix, 2006.
[15] m. sedaghat, e. wadbro, j. wilkes, s. de luna, o. seleznjev, and
e. elmroth, “diehard: reliable scheduling to survive correlated failuresin cloud data centers,” in ccgrid 2016, pp. 52–59, ieee computer
society, 2016.
[16] d. tang and r. k. iyer, “analysis and modeling of correlated failures
in multicomputer systems,” ieee trans. computers, vol. 41, no. 5,
pp. 567–577, 1992.
[17] a. perer and f. wang, “frequence: interactive mining and visualization
of temporal frequent event sequences,” in iui 2014, pp. 153–162, acm,
2014.
[18] w. liu, y . zheng, s. chawla, j. yuan, and x. xie, “discovering spatio-
temporal causal interactions in trafﬁc data streams,” in sigkdd 2011,
pp. 1010–1018, acm, 2011.
[19] y . wu and h. tan, “short-term trafﬁc ﬂow forecasting with spatial-
temporal correlation in a hybrid deep learning framework,” corr,
vol. abs/1612.01022, 2016.
[20] s. guo, y . lin, n. feng, c. song, and h. wan, “attention based spatial-
temporal graph convolutional networks for trafﬁc ﬂow forecasting,” inaaai 2019, pp. 922–929, aaai press, 2019.
[21] w. m. p. van der aalst, d. t. g. unterberg, v . denisov, and d. fahland,
“visualizing token ﬂows using interactive performance spectra,” inpetri nets 2020, vol. 12152 of lncs, pp. 369–380, springer, 2020.
[22] ¨ozge k ¨oroˇglu, “outlier detection in event logs of material handling
system,” master’s thesis, eindhoven university of technology, 2019.
[23] j. f. allen, “maintaining knowledge about temporal intervals,” commun.
acm , vol. 26, no. 11, pp. 832–843, 1983.
[24] p. fournier-viger, c. cheng, j. c. lin, u. yun, and r. u. kiran, “tkg:
efﬁcient mining of top-k frequent subgraphs,” in bda 2019, vol. 11932
oflecture notes in computer science, pp. 209–226, springer, 2019.
[25] p. fournier-viger, j. c. lin, a. gomariz, t. gueniche, a. soltani,
z. deng, and h. t. lam, “the spmf open-source data mining libraryversion 2,” in pkdd 2016, vol. 9853 of lncs, pp. 36–40, springer,
2016.
24