evaluating workﬂow process designs using
cohesion and coupling metrics?
irene vanderfeesten, hajo a. reijers, wil m.p. van der aalst
technische universiteit eindhoven, department of technology management,
po box 513, nl-5600 mb eindhoven, the netherlands,
fh.a.reijers, i.t.p.vanderfeesten, w.m.p.v.d.aalst g@tm.tue.nl
abstract
building on the similarities between software programs and workﬂow processes, this
paper proposes a heuristic that oﬀers guidance for the creation and evaluation of
process designs in administrative settings. designers can use it to select from several
alternatives the process design that is strongly cohesive and weakly coupled. it is
argued that such a design will result in fewer errors during information exchanges
and in more understandable activity descriptions. the paper includes an application
of the heuristic in an industrial workﬂow setting, which supports its feasibility and
practical value. the paper also presents the freely available cocoflow tool that
implements the metrics and the heuristic.
key words: business process modelling, workﬂow management, quality metrics.
1 introduction
in 2006, one of the world’s largest asset managing companies redesigned its
business process to produce the annual reports for its investment funds. on
the basis of a meticulous analysis of the essential information processing func-
tion of the process, a new process design was developed using the method of
product-based workﬂow design (pbwd) [45]. the new design reshuﬄes the
order of the original steps and exploits the opportunities of an automated,
xml-based message exchange between investment managers, accountants,
print shop, etc. it is anticipated that this new way of working will cut the
?this research is supported by the technology foundation stw, applied science
division of nwo and the technology programme of the dutch ministry of economic
aﬀairs.cycle time of the process by half. not only does this imply a better service
to the company’s customers, e.g., corporate investors and pension funds, it
facilitates compliance with deadlines from the ﬁnancial authorities.
this case illustrates that the combination of process redesign and the applica-
tion of it is viable today, even though business process reengineering (bpr)
was introduced over a decade ago [25]. particularly in administrative settings,
where the focus is on information processing (e.g. the evaluation of a dam-
age claim, the issuing of a building permit, or the handling of a mortgage
application), various redesign opportunities exist [39]. for example, by using
electronic documents and workﬂow technology it is relatively easy to change
the routing of a ﬁle along the various decision-making steps in a process. when
doing this properly, the average execution cost of the overall process can be
minimized [3].
however, to cope with this design freedom may also be problematic. the main
issue that we focus on in this paper is the proper size of the individual activi-
ties(ortasks ) in a process. this design choice is known as the issue of process
granularity [18]. badly chosen sizes of activities in a process may negatively
aﬀect its performance when being executed or enlarge the maintenance burden
of the process model in case of updates. small activities, on the one hand, may
increase the number of hand-oﬀs between activities leading to an increase of
errors [42,49]. large activities, on the other hand, may become unworkable to
be executed well by humans [18,42].
this paper addresses the problem of activity design in the domain of information-
intensive processes, typically found in the service industry. this issue is par-
ticularly relevant within the setting of bpr projects [26] where also the ap-
plication is being considered of workﬂow management technology [5]. in the
remainder of this paper, we shall refer to such processes as workﬂow processes
or simply as workﬂows . we will present cohesion andcoupling metrics that
focus on the content of activities, i.e. their operations . by using the proposed
set of metrics, it can be quantitatively expressed to what extent operations
“belong” to each other within one activity or, in other words, how cohesive
such an activity is. in addition, it is important to measure to what extent the
various activities are dependent on each other or, in other words, how much
they are coupled . the inspiration for the proposed metrics comes from software
engineering, where an old design aphorism is to strive for strong cohesion, and
loose coupling .
we build on work by selby and basili [50] and xenos et al. [58], who deﬁned
coupling and cohesion metrics for software programs. the proposed solution
based on comparable metrics ﬁts conceptually with the pbwd method, as
applied in the case we mentioned in the opening. pbwd is a bpr method
which is adopted and actively applied by one of the big four consultancy ﬁrms
[45]. for a more detailed application of the method in the ﬁnancial services,
see [41].
in this paper, ﬁndings from our earlier work [43,46] are integrated and ex-
tended in several directions. a ﬁrst version of the workﬂow cohesion metric
2was introduced in [43], but it lacked some facilities. for example, it could not
handle conditional alternatives to achieve the same output (xor-construct),
which is a construct very common in workﬂow processes [6]. secondly, we intro-
duced in [46] an additional coupling metric, but the integrated design heuristic
did not yet consider resource issues that in real life impose constraints on good
designs. thirdly, in our experiments we noticed that the manual application
of the metrics can be time-consuming and may easily lead to human errors.
therefore, this paper introduces the freely available cocoflow tool that can
be used for the automatic computation of the metrics. finally, we applied
the integrated design heuristic to the case of a dutch governmental agency to
demonstrate its feasibility and practical value.
the structure of this paper is as follows. in the next section, we introduce a
motivating example that clariﬁes the goal of our research. section 3 describes
the cohesion and coupling metrics and the heuristic for selecting a favorable
design among various alternatives. the fourth section contains an application
in an industrial setting, which is followed by a description of the cocoflow
tool in section 5. in section 6, we elaborate on related work in the ﬁelds of
software engineering and workﬂow to position our contribution. the paper
ends with a discussion and prospects for future work.
2 motivating example
to motivate the application of cohesion and coupling metrics on the one hand
and to introduce some relevant concepts on the other, we present in this section
a workﬂow process that deals with requests for governmental student grants
in the netherlands. the presented process is a simpliﬁed version of the actual
procedure as implemented by the informatie beheer groep1(ibg) under the
authority of the dutch ministry of education, culture and science. we will
ﬁrst present the essential information processing function that the workﬂow
process must perform. then, we will illustrate the design dilemma that we
focus on in this paper, by representing three alternative process designs.
2.1 an information processing perspective
as in many other workﬂow processes, the essential output of the ibg workﬂow
process can be clearly distinguished. in this case, it is the calculation of the
government grant that any new student can apply for. the proper amount
of money to be granted must be determined by taking several factors into
account: the student’s background, the income of the student’s parents, the
1http://www.ib-groep.nl
3student’s living situation, the kind of study grant the student applied for, etc.
each of these factors in turn may rely on other factors.
we shall refer to the various relevant factors as information elements. in the
activities of a workﬂow process the values of information elements are used to
produce new values for other information elements. in the end, the essential
output is produced as a set of information element values2.
an activity in a workﬂow process will now be considered as a number of oper-
ations on information elements. each operation has one or more input infor-
mation elements and one or more output information elements. an operation
is an atomic processing step, so it cannot have “half-assembly” products, i.e.
intermediate information element values. a workﬂow activity, on the contrary,
is composed of one or more operations. therefore, it can have “half-assembly”
products. the problem we raised in the introduction can now be reformulated
asthe proper clustering into activities of operations on information elements .
in figure 1, the complete information element structure of the ibg process
can be found. at the top, information element 42 can be distinguished, which
represents the total grant amount that is decided to be assigned to the appli-
cant. (note that a complete description of the individual information elements
is provided in appendix a.) the information element structure expresses that
a value for information element 42 can be determined on the basis of val-
ues for information elements 39, 40 and 41, which respectively represent the
granted amount of supplementary scholarship, basic scholarship, and the loan
component. this relation between information elements 39, 40, 41, and 42 is
expressed by arrows leading from the input elements, “knotted” together, to
the output element. the operation to be performed on the input elements in
this case is to simply add their values3.
considering the information element structure for this case again (figure 1),
it is interesting to note that a value for information element 42 can also be
computed in a diﬀerent way. this diﬀerent computation is based on the value
of information element 27 alone, which represents the outcome of the decision
whether the respective student may receive a government grant at all. if this
value is determined to be “no” – which is the case if the student is older than
thirty or does not have the dutch nationality – the value of information ele-
ment 42 can be produced directly (leading to a zero grant). when the value of
information element 27 equals “yes”, a number of other steps have to be exe-
cuted before the value of information element 42 can be properly determined.
as the reader can observe in figure 1, some of the information elements are
no output of any operation, e.g. information element 37 has no incoming arcs.
such an information element does not require a computation or decision within
the process, but its value is obtained from other sources. in this case, it repre-
sents the size of the loan that the applicant requests for as part of the grant. it
is therefore provided by the applicant himself/herself. also, some information
2typically, one value is of prime interest.
3note that the content of operations is not expressed in this ﬁgure.
4elements are not integrated in any of the operations, i.e. information elements
1-11 and 14-17. the kind of information they represent is typically required
for proper identiﬁcation, registration, and communication with various par-
ties, but plays no important role in the workﬂow’s information processing. for
completeness’ sake, they have been included in the example.
the use of an information element structure to capture the essential infor-
mation function of a workﬂow processes is very similar to the use of a bill
of material (bom) [38] for the design of assembly lines in manufacturing.
the information input-output perspective on workﬂow processes is taken from
the methodology of product-based workﬂow design (pbwd) [2,42,45], which
has been successfully applied in practice to analyze and redesign workﬂow pro-
cesses in banking and social services domains. also, some contemporary work-
ﬂow management systems adopt a comparable information-centered mod-
elling and execution approach [4].
2.2 three alternative designs
let us now consider a proper design of a workﬂow process that (i) includes all
information elements and operations from the ibg information element struc-
ture, (ii) respects their dependencies. another important aspect of a proper
workﬂow design would be that only operations that require similar skills or
authorization levels should be grouped together within the same activity. al-
though we capture this requirement in our formalization of the design problem
later in this paper, we abstract from it in this motivating example.
in figure 2, a preliminary design is presented that implements the informa-
tion structure of figure 1. the design is represented as a workﬂow net [5].
the individual seven activities are represented as labelled rectangles, which
contribute to the processing as follows. first, in activity c it is determined
whether the applicant is entitled to a governmental grant at all. if so, the
period/year of student grant and a reference year are determined in activity
b. in the parallel activities f, a and d, the loan amount, the income of the
applicant’s parents, and the amount of basic scholarship are determined re-
spectively. activity e follows up on activity a by determining the amount of
supplementary scholarship. finally, in activity g the total grant amount can
be determined (which is zero if activity c leads to a “knock-out”).
figure 3 shows how this design exactly partitions the information element
structure over the various activities. for example, activity g incorporates both
operations to determine a value for information element 42. the structure of
the process model ensures that the correct information element values have
been determined before activity g can be executed at all.
5as an alternative to this design, a model can be considered where activities
a and e are split up into four new activities: a1, a2, a3, and a4. in this
alternative design, the activities are considerably smaller. for example, the
operations to determine values for respectively information elements 28 and
29 used to be clustered within activity a, but here become separate activities
(a1 and a2). still, the overall design conforms to the information element
structure (see figure 4 and 5). the total number of activities in this alternative
is nine.
yet another alternative would be to merge activities a and e from the origi-
nal design together (see figure 6 and 7). this proper process design has six,
somewhat larger activities. looking at the three proposed designs, the design
dilemma of interest is: “which design is preferable?”. each of the presented
alternatives is a correct translation of the information element structure, as
they cover all relevant information elements and operations and respect their
dependencies. the alternatives only diﬀer in the choices with respect to dis-
tribution of operations over activities.
earlier experiments we carried out with a group of experienced workﬂow de-
signers suggest that they would favor the ﬁrst process design, because it incor-
porates activities which are neither too large nor too small [43]. in [18] similar
guidance can be found (see section 6). as will be shown in the remainder of
this paper, the proposed heuristic will oﬀer concrete guidance for dealing with
this design dilemma.
3 cohesion and coupling metrics
as brieﬂy mentioned in the introduction of this paper, we have been inspired
to use the notion of cohesion and coupling for workﬂow design by the work
of selby and basili [50] and xenos et al. [58] in the software quality metrics
domain. to argue the viability of this idea, it is important to note that software
programs and workﬂow processes are quite similar in some respects. this was
also noted recently in [24]. we distinguish the following similarities:
²they both focus on information processing . within each step, one or more
outputs are produced on the basis of one or more inputs.
²they have a similar compositional structure . a program — functional or
object-oriented — can be split up into modules or classes. every module
consists of a number of statements, and every statement contains a number
of variables and constants. likewise, a workﬂow process has activities. each
activity is composed of elementary operations and each operation uses one
or more pieces of information to produce new information.4
4note that the resources executing a program or process are diﬀerent; the steps of
6²their dynamic execution is derived from a static structure. when instan-
tiating either a software program or a workﬂow process, an execution ﬂow
of their elements takes place in accordance with their static representation.
this ﬂow may involve consecutive executions, concurrency, conditional rout-
ings, etc.
because of these similarities, it is conceivable that metrics used in software
engineering are applicable in the domain of workﬂow processes as well. in
software engineering, manipulations (declarations, assignments, invocations,
etc.) that are strongly related are preferably grouped together within the same
module or class [53]. there are clear implications for a better maintainability
of programs by using this approach and there is also considerable empirical
evidence that the resulting computer programs contain fewer run-time errors
[12,50]. yet, none of the existing software engineering metrics we studied seem
to be directly applicable to workﬂow processes [46].
by adapting and translating quality metrics from the software engineering to
the workﬂow domain, we expect to oﬀer concrete guidance for improving upon
the following workﬂow model properties:
²execution quality , which can be measured by the number of errors being
made during execution of the captured process or by the degree to which
accomplished work meets common standards.
²maintainability , which can be deﬁned as the ease with which a workﬂow
process model can be updated because it is easily understood.
based on the strong similarities between software programs and workﬂow
processes, we consider high cohesion and loose coupling as a valuable design
maxim in the workﬂow domain as well. a loose coupling of activities will re-
sult in few information elements that need to be exchanged between activities
in a workﬂow process, reducing the probability of run-time mistakes. highly
cohesive activities, in turn, are likely to be understood and performed bet-
ter by people than large chunks of unrelated work being grouped together.
because the creation of large activities will decrease the degree of coupling
and the creation of small activities will increase cohesion, it seems that high
cohesion and loose coupling is providing the right balance to improve upon
both execution quality and maintainability of a workﬂow model.
a software programs are run automatically on a computer, while the activities of a
business process often are performed by humans.
73.1 formalization
the main objective in the formalization of cohesion and coupling metrics is
to support the job of workﬂow process design . this job can be understood as
imposing on a set of operations a number of activities that partition that set
(cf. the grouping of operations into activities for the three alternative designs
of our motivating example, section 2.2). first the structure of information
processing is formalized using a concept that is called the operations structure .
deﬁnition 1 (operations structure) .
an operations structure is a tuple (d; w; o )with:
²d: the set of information elements that are being processed,
²w: the set of resource classes or roles that are available to the process. a
relation ¹is deﬁned on these resource classes5. ‘v¹w’ means that a person
with role wis allowed to do all the work vis allowed to do (and potentially
more).6
²oµd£w£ p(d): the set of operations on the information elements,
such that there are no “dangling” information elements and no value of an
information element depends on itself, i.e. the graph (v; e)withv=dand
e=f(p; c)2d£dj9(p;w;cs )2o(c2cs)gis connected and acyclic
so, if operation ( p; w; cs )2ofor a given operations structure ( d; w; o ),
this means that it is possible for a resource with role wto produce a value for
information element pon the basis of values for the set of information elements
cs. for convenience, we introduce the following notations as shorthand:
¯o=f(p; cs)j9(p;w;cs )2og, for operations without reference to resources, and
˜o=f(p; c)j9(p;w;cs )2o(c2cs)g, for relations between information elements.
5note that the ¹-relation is a partial order, i.e. it is transitive and reﬂexive, but
not symmetric.
6for instance, if the head of a ﬁnancial department is allowed to do the jobs of his
accountant and of his secretary (besides his own jobs involved with being the head
of the department), it can be formalized as follows: accountant ¹head of ﬁnancial
department ,secretary ¹head of ﬁnancial department .
8let us consider the ibg process introduced in section 2 again, in particular
the information element structure of figure 1. we assume that there is just
a single resource type wof relevance within this context, so w=fwg.
the operations structure for the ibg process is then deﬁned as follows:
²d=f1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;
23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42g
²w=fwg
²o=f(18; w;f12;13g);(23; w;f19;20g);(25; w;f18g);
(27; w;f21;22;23g);(28; w;f24;25g);(29; w;f25;26g);
(30; w;f28;29g);(31; w;f22;27;30g);(34; w;f22;27g);
(35; w;f18;32g);(36; w;f30;31g);(38; w;f18g);
(39; w;f35;36g);(39; w;f31g);(40; w;f18;27;32;33g);
(41; w;f34;37;38g);(41; w;f34g);(42; w;f39;40;41g);
(42; w;f27g)g
²¯o=f(18;f12;13g);(23;f19;20g);(25;f18g);
(27;f21;22;23g);(28;f24;25g);(29;f25;26g);
(30;f28;29g);(31;f22;27;30g);(34;f22;27g);
(35;f18;32g);(36;f30;31g);(38;f18g);
(39;f35;36g);(39;f31g);(40;f18;27;32;33g);
(41;f34;37;38g);(41;f34g);(42;f39;40;41g);
(42;f27g)g
²˜o=f(18;12);(18;13);(23;19);(23;20);(25;18);
(27;21);(27;22);(27;23);(28;24);(28;25);(29;25);(29;26);
(30;28);(30;29);(31;22);(31;27);(31;30);(34;22);(34;27);
(35;18);(35;32);(36;30);(36;31);(38;18);
(39;35);(39;36);(39;31);(40;18);(40;27);(40;32);(40;33);
(41;34);(41;37);(41;38);(41;34);(42;39);(42;40);(42;41);
(42;27)g
the set of information elements dfor the ibg operations structure for
example includes elements 27, 39, 40, 41, and 42. the set of operations
oalso includes (42, w,f39, 40, 41 g) and (42, w,f27g), expressing that a
value for information element 42 can be determined by a resource of type
won basis of either the values of elements 39, 40 and 41 or on the basis
of 27 alone. note that for most other information elements just a single
operation is available to determine its value.
the operations structure ( d; w; o ) can be considered as the starting point for
a workﬂow process design, capturing the essential information processing that
has to be performed. to discuss how the activities of a design may properly
partition such an operations structure, we deﬁne the notion of an activity and
aprocess on the operations structure.
9deﬁnition 2 (activity) .
an activity ton operations structure (d; w; o )is a tuple (t; e)2 p(o)£w
with
²t: a set of operations (t=f(p1; w1; cs1);(p2; w2; cs2); :::g), and
²e: the resource that is allowed to execute the activity, fulﬁlling the following
requirement:
8(p;w;cs )2t(w¹e):
as a shorthand we introduce the following notations, assuming t= (t; e):7
¯t=f(p; cs)j9(p;w;cs )2tg, for the operations within an activity without refer-
ences to resources,
˜t=f(p; c)j9(p;w;cs )2t(c2cs)g, for the input-output relations in an activity,
and
ˆt=s
(p;c)2˜tfp; cg, for the information elements processed in an activity.
in essence, any group of operations may be clustered together into an activity,
as long as a resource type can be distinguished within the available ones
that is capable of performing all operations. after all, only fully qualiﬁed
and authorized employees may execute a workﬂow activity (see e.g. [5]).
in the ibg process all operations and activities have the same resource
for reasons of understandability. thus, we could for instance deﬁne
an activity t = ( t; w) consisting of operations (31 ; w;f22;27;30g) and
(36; w;f30;31g). the accompanying notations have the following elements
for this example:
¯t=f(31;f22;27;30g);(36;f30;31g)g
˜t=f(31;22);(31;27);(31;30);(36;30);(36;31)g
ˆt=f22;27;30;31;36g
note that the proposed activity tis not part of one of the alter-
native designs of the motivating example.
at this point it becomes important how the various activities together con-
stitute a workﬂow process. several issues emerge when considering this, most
importantly (i) how the control ﬂow is to be speciﬁed and (ii) which correctness
criteria we consider relevant. with respect to the control ﬂow, many diﬀer-
ent process modelling languages are available and, on a more abstract level,
several routing constructs exist[6]. with respect to correctness, an important
7thus, ¯tµ¯o,˜tµ˜o, and ˆtµd.
10criterion that comes to mind is e.g. soundness [1], which ensures completion
and proper termination of a workﬂow process. considering the operations that
are used in activities, it also seems reasonable to require some guarantee that
information is indeed available when it is to be used as input to calculate
new information. however, for the purpose of this paper these issues are less
relevant, as they do not aﬀect the computation of the various metrics. we will
therefore restrict ourselves to simply considering a process as a set of activi-
ties. for a more formal treatment of this subject the reader is referred to [42].
note that for all examples in this paper holds that workﬂow nets are used
as modelling technique and only simple sequential and choice constructs are
applied (control ﬂow issues). also, all process models cover all available oper-
ations from the information element structure, the models are all sound, and
the speciﬁed control ﬂow ensures that the value of an information element
is determined when it is to be used as an input element (correctness issues).
depending on the speciﬁc context and one’s preferences, alternative choices
for these issues may be considered in other cases.
deﬁnition 3 (process) a process son an operations structure (d; w; o )
is a set of activities:
sµ p(o)£w
again we introduce a simpliﬁed notation as a shorthand:
¯s=ftj9(t;e)2sg, for activities without reference to resources.
the ﬁrst alternative process in the ibg case contains a set of seven
activities: s=fa; b; c; d; e; f; g g, which is shown in figure 2 and 3.
the partitioning of the operations over activities a to g is captured as
follows:
oa=f(28; w;f24;25g);(29; w;f25;26g);(30; w;f28;29g)g
ob=f(18; w;f12;13g);(25; w;f18g)g
oc=f(23; w;f19;20g);(27; w;f21;22;23g)g
od=f(40; w;f18;27;32;33g)g
oe=f(31; w;f22;27;30g);(35; w;f18;32g);(36; w;f30;31g);
(39; w;f35;36g);(39; w;f31g)g
of=f(34; w;f22;27g);(38; w;f18g);(41; w;f34;37;38g);(41; w;f34g)g
og=f(42; w;f39;40;41g);(42; w;f27g)g
11building on this simple notion of a process, a cohesion metric can now be
deﬁned as follows. its ﬁrst component, the relation cohesion , quantiﬁes how
much the diﬀerent operations within one activity are related. it does so by
determining for each operation of an activity with how many other operations
it overlaps by sharing an input or output, i.e. a non-empty intersection.
in this determination conditional alternatives are treated as separate oper-
ations, because in an instantiation only one of the alternatives will be exe-
cuted. the overlap between these operations (i.e. the same output element) is
therefore not considered. this explains why the expression p16=p2is in the
formula.
next, the average overlap per operation is computed by dividing the total
amount of overlaps by the number of operations. finally, note that all overlaps
are counted twice, because we considered all pairs of operations separately (for
example distinguishing ( p1; w1; cs1), (p2; w2; cs2) and ( p2; w2; cs2), (p1; w1; cs1)
as diﬀerent pairs). therefore, to get a relative metric score between 0 and
1, the average overlap per operation over all operations within an activity is
divided by the maximal overlap, i.e. the number of operations minus one.
deﬁnition 4 (activity relation cohesion) .
for an activity t= (t; e)on an operations structure (d; w; o ), the activity
relation cohesion ¸(t)is deﬁned as follows:
¸(t) =8
><
>:jf((p1;cs1);(p2;cs2))2¯t£¯tj((fp1g[cs1)\(fp2g[cs2))6=;^p16=p2gj
j¯tj¢(j¯tj¡1);forj¯tj>1
0;forj¯tj ·1
the other component of our cohesion metric, the activity information cohe-
sion, focuses on all information elements that are used either as input or as
output by any operation within the respective activity. it determines how
many information elements are used more than once in proportion to all the
information elements used. it does so by counting all diﬀerent information
elements that appear in the intersection of a pair of operations, considering
all pairs. this number is divided by the total number of information elements
in the activity, i.e. ( jˆtj).
deﬁnition 5 (activity information cohesion) .
for an activity t= (t; e)on an operations structure (d; w; o ), the informa-
tion cohesion ¹(t)is deﬁned as follows:
¹(t) =8
><
>:jfd2dj9(p1;cs1);(p2;cs2)2¯t(d2((fp1g[cs1)\(fp2g[cs2))^(p16=p2))gj
jˆtj;forjˆtj>0
0;forjˆtj= 0
12the total cohesion of an activity is now given as the product of both the
relation and information cohesion. this is to reﬂect that in our opinion an
activity has to score high on both cohesion aspects to say it is cohesive. in
other words, the operations clustered together should (i) be interrelated to
each other and (ii) information should be shared to a certain degree.
deﬁnition 6 (activity cohesion) .
for an activity t= (t; e)on an operations structure (d; w; o ), the activity
cohesion c(t)is deﬁned as follows:
c(t) =¸(t)¢¹(t)
getting back to the ibg example, the relation cohesion, the information
cohesion and the total activity cohesion of activity ein the ﬁrst ibg
design are:
¸(e) =jf((31;f22;27;30g);(36;f30;31g)); :::gj
5¢4=10
20= 0:5
¹(e) =jf30;31;35;36gj
9=4
9¼0:444
c(e) = 0 :5¢4
9¼0:222
the overall cohesion of the workﬂow process can then be determined by the
average activity cohesion.
deﬁnition 7 (process cohesion) .
for a process which consists of a set of activities ( s) on the operations struc-
ture (d; w; o ), the average cohesion, or process cohesion ch, is deﬁned as
follows:
ch=p
t2¯sc(t)
j¯sj
as an extension and a natural counterpart of cohesion we also deﬁne a metric
forcoupling in a process. coupling focuses on how strongly the activities in a
13workﬂow process are related, or connected, to each other. a certain activity
is connected to another one if and only if they share one or more information
elements. the coupling metric determines the number of related activities
for each activity. first, the average coupling is determined by adding up the
number of connections for all activities and dividing this number by the total
number of activities. now all pairs of activities have been counted twice. to
get a relative score for this metric, the average coupling is divided by the
maximal number of coupling, i.e. the number of activities minus one.
deﬁnition 8 (process coupling) .
for a process that consists of a set of activities ( s) on the operations structure
(d; w; o ), the process coupling cpis deﬁned as follows:
cp=8
><
>:jf(t1;t2)2s£sj¯t16=¯t2^(ˆt1\ˆt2)6=;gj
j¯sj¢(j¯sj¡1);forjsj>1
0;forjsj ·1
inspired by the work of selby and basili [50], we now deﬁne a coupling/cohesion
ratio. this ratio enables the comparison between various design alternatives.
deﬁnition 9 (process coupling/cohesion ratio) .
for a process which consists of a set of activities ( s) on an operations structure
(d; w; o ), the process coupling/cohesion ratio ½is deﬁned as follows:
½=cp
ch
again we can calculate these metrics for our example. the process cohesion
of the ibg design is:
ch=0:5 + 0 :25 + 0 :167 + 0 + 0 :22 + 0 :143 + 0
7¼0:183
in the ibg process design activity eis for example coupled with 6 other
activities. the total process coupling of the ibg design is:
cp=jf(a; b);(a; e);(b; a); :::;(g; e);(g; f)gj
7¤6=30
42¼0:714
14for the ﬁrst alternative design in the ibg case the coupling/cohesion ratio
is:
½=0:714
0:183¼3:9
the previously deﬁned metrics can be used to ﬁnd the preferable workﬂow de-
sign among a number of alternative designs, considering its execution quality
and maintainability. the design with the minimal process coupling/cohesion
ratio is the most favorable design. note that we do not describe how the alter-
native designs can be determined. the ratio can only help to choose the best
option from already speciﬁed alternatives.
in case of our motivating example the coupling/cohesion ratios for the
three alternative designs are 3.9, 5.8, and 7.0, respectively. therefore, the
ﬁrst design is preferable, which seems to be conﬁrmed by our intuition: it
contains activities which are neither too large nor too small.
4 application
to show the feasibility and practical relevance of the previously deﬁned met-
rics, we will study an industrial case in this section. the subject is the gov-
ernmental uwv agency8(formerly known as gak) which is responsible for
awarding unemployment beneﬁts in the netherlands. the process in question
deals with the decision that the uwv has to make on whether or not to grant
such beneﬁts once a request has been received. typically, factors should be
taken into account such as the reason for the applicant to have become unem-
ployed, the length of the period that the previous job was held, etc.
in our previous research, a design for this particular process was derived using
the pbwd method we mentioned before. for more detailed information on
this case and the derivation of the design, the reader is referred to [42,45].
in this section we will reconsider this design primarily from an activity de-
sign perspective. note that this issue was not considered in much depth in
the original redesign project, where the main driver was to look for a way to
minimize the average eﬀort per case in terms of human labor hours.
figure 8 displays the information element structure for the uwv case. the
resulting workﬂow design can be seen in figure 9. originally, the design was
8http://www.uwv.nl
15derived taking into account several requirements and restrictions. for exam-
ple, the processing order of the various operations was determined such that
the expected number of additional work at any point in the process was min-
imized for the average case. in this application, it turned out to be wise to
check the conditions ﬁrst that would most likely lead to a knock-out [3], i.e.
a decision not to grant any unemployment beneﬁts. also, the management of
the uwv found it very important to retrieve all information from the client
directly at the start of the process. in this way, there would never be any need
for contacting the client again during process execution, avoiding long delays.
this is one of the so-called “best practices” that can often be distinguished
in redesign projects, as discussed in more detail in [44]. together, these con-
siderations motivate the exact ordering of activities of the workﬂow design in
question.
eventually, after the proper processing order had been established, the deﬁ-
nition of the activities was determined as follows: groups of operations would
be split up into several activities if (i) diﬀerent types of resources would be
required to process these groups or (ii) the logic context for executing one
group would be diﬀerent from those of another.
the ﬁrst consideration still seems reasonable, as it is not sensible to combine
operations that cannot be executed by a single resource (see section 3.1). most
of the operations in the uwv case turned out to be performable by (newly de-
veloped) computer programs. therefore, this resource constraint was perhaps
not as pressing as can be imagined in other situations where more diﬀerent
kinds of people are involved.
the second consideration, in hindsight, may easily lead to rather fragmented
designs. for example, even if a similar set of operations would be required un-
der diﬀerent logical circumstances, e.g. diﬀerent routes through the process,
this would always result in diﬀerent activities for these diﬀerent situations.
on the basis of the original process design, two alternatives are now consid-
ered. alternative 1 is a slight modiﬁcation of the original design. because the
original design contains a number of activities that only contain a single op-
eration, i.e. activity c, d, e, and f in figure 9, these were combined into
one larger activity. alternative 2 takes this approach one step further by not
only joining activities c, d, e, and f, but by also merging the activities that
(partly) contain the same operations (i.e. activities j and m). overall, both
alternatives aim to counter the fragmentation of the original design.
table 2 shows the values for cohesion and coupling metrics for the original
design and the two alternatives. based on a desirable low value for the cou-
pling/cohesion ratio, alternative 2 is the best option. considering this alterna-
tive, it can be noticed that it does not contain unnecessary small or superﬂuous
activities. this appeals to our intuition that work should not become too frag-
mented (see section 3). as a result, we expect this alternative design to be
the one that is more easily understood and that experiences fewer hand-oﬀ
mistakes at run-time.
16in our view, the case reveals that the results from seemingly reasonable crite-
ria for deﬁning activities as applied during a redesign project can be improved
using the proposed metrics. at the same time, the application of the metrics
does not interfere with the main objectives of the original redesign, as it keeps
the processing order of operations intact and does not interfere with other
objectives. so, this case illustrates that our heuristic provides added value on
top of more high-level redesign objectives.
5 tool support
even though it provides concrete support for process designers, the calcula-
tion of the previously deﬁned metrics for a given process design can be quite
laborious. in our experimentation we found that human mistakes are easily
made when performing such calculations manually. therefore, we developed
a tool to support the design of a workﬂow process model based on the de-
scribed coupling and cohesion metrics. we will refer to it as the cocoflow tool
(cohesion- coupling metrics for work flow models). it is freely available for
download and experimentation from http://cocoflow.process-redesign.org .
the user interface of the cocoflow tool consists of three diﬀerent sheets, i.e.
the metrics sheet, the visualisation sheet, and the xml-ﬁle sheet. its main
functionality is the calculation of the design metrics and the decision for the
best design. this is supported by the metrics sheet, which is shown in figure
10.
the cocoflow tool reads an xml-ﬁle containing the information element
structure and several process designs deﬁned for this structure. the xml-ﬁle
can be opened by using the ‘open xml-ﬁle button’. in the current version of
the tool some example xml-ﬁles are available, such as the xml ﬁle for the
ibg case described in section 2. when the xml ﬁle is opened and read by the
tool the values for the metrics can be calculated. in the upper left corner the
best design can be determined automatically by clicking the ‘ﬁnd best design’
button. in the box below, the cohesion and coupling values for the selected
design are shown and at the bottom left corner some checks on the selected
design can be performed. at the right-hand side of the the metrics sheet ﬁrst
some descriptions of the process and the selected design are given. in the lower
right corner the activity cohesion metrics can be determined for the selected
design. in figure 10 all values for the ﬁrst design of the ibg case are shown
(cf. the outcomes of the calculations in section 3.1).
besides the calculation of the metrics, the cocoflow tool is able to generate
a graphical depiction of the information element structure in the visualisation
sheet (see figure 11). by selecting a design and one of its activities, the tool
17highlights the corresponding information elements and operations. finally, it
is possible to edit and check the input xml ﬁle through the interface provided
in the xml ﬁle sheet (figure 12).
6 related work
the work reported in this paper relates to existing research in the area of
workﬂow [5,19,22,32,33,57]. it is most related to quality metrics in the domains
of software engineering and workﬂow. therefore, we discuss the work in these
two domains in more detail.
6.1 quality metrics in the software engineering domain
in the area of software engineering a wide variety of software quality metrics
has been developed. the main purpose of software quality metrics is to obtain
program designs that are better structured. some of the most important ad-
vantages of a structured design are, as pointed out in [17], that (i) the overall
program logic is easier to understand for both the programmers and the users
and (ii) the identiﬁcation of the modules is easier, since diﬀerent functions are
performed by diﬀerent modules, which makes the maintenance of the software
program easier. according to [17,51,54] the quality of a design is related to
ﬁve design principles:
²coupling - coupling is measured by the number of interconnections among
modules. coupling is a measure for the strength of association established
by the interconnections from one module of a design to another. the degree
of coupling depends on how complicated the connections are and also on the
type of connections. it is hypothesized that programs with a high coupling
will contain more errors than programs with lower coupling.
²cohesion - cohesion is a measure of the relationships of the elements within
a module. it is also called module strength. it is hypothesized by [17,51,54]
that programs with low cohesion will contain more errors than programs
with higher cohesion.
²complexity - a design should be as simple as possible. design complexity
grows as the number of control constructs grows, and also as the size — in
number of modules — grows. the hypothesis is that the higher the design
complexity the more errors the design will contain.
²modularity - the degree of modularization aﬀects the quality of a de-
sign. over-modularization is as undesirable as under-modularization. the
hypothesis is that low modularity generally relates to more errors than high
modularity.
18²size - a design that exhibits large modules or a deep nesting is considered
undesirable. it is hypothesized that programs of large size will contain more
errors than smaller programs.
in literature coupling and cohesion are generally considered to be the most
important metrics for software quality, although researchers do not agree on
their relative importance. in [51,54], results of analyses are presented that in-
dicate that coupling is the most inﬂuential of the design principles under con-
sideration. however, in [37] cohesion and coupling are considered as equally
important. in this paper, we have adopted the latter view and combined a
notion of workﬂow process cohesion with a notion of coupling.
in addition, various researchers carried out studies to gather empirical evidence
that coupling and cohesion quality metrics do indeed improve the quality of a
software design. bieman and kang, in particular, have shown various examples
how cohesion metrics can be used to restructure a software design [11,28,29].
also, in [50] evidence is presented that low coupling and high strength (co-
hesion) are desirable. by calculating coupling/strength ratios of a number of
routines in a software library tool it was found that routines with low cou-
pling/strength ratios had signiﬁcantly fewer errors than routines with high
coupling/strength ratios. in [12], a number of fortran modules from a na-
tional aeronautics and space administration project were examined. it was
found that 50 percent of high-strength (high cohesion) modules were fault free,
whereas only 18 percent of low-strength modules were fault free. no relation-
ship was observed between fault rate and coupling. the results of [12] indicate
that modules with more descendants (modules that call many other modules)
have a higher fault rate. among the conclusions of this work there are two
important results: (i) high cohesion reduces fault rate, and (ii) modules with
many descendants (high coupling) are more fault prone than those with few.
from these three empirical studies, we again conclude that both coupling and
cohesion are important measures for the quality of a software design.
6.2 quality metrics in the workﬂow domain
because of the similarities between software programs and workﬂow processes,
explained in section 3 and table 1, the application of similar quality metrics
to the workﬂow ﬁeld seems worthwhile to explore. we conducted a literature
review on business process metrics and found out that, despite the vast liter-
ature on software engineering metrics, there is not much substantial research
on business process metrics available yet.
it is important to stress here that this paper’s focus is on quality metrics
aimed at the design orbuild time aspect of workﬂow processes, while in the
workﬂow domain “metrics” are often discussed as the evaluation of workﬂow
data logs [34]. various tools exist, e.g. pisa [36], prom [40], and the aris pro-
19cess performance manager [27], to determine values for performance metrics ,
such as average processing times, deadline reliabilities and risk indices, on the
basis of historical execution data. we do not deal with such run-time metrics
in this paper.
research into quality metrics for the analysis of workﬂow designs is very lim-
ited, as also noted recently in [14]. yet, the issue of process granularity and its
eﬀect on the understandability and execution of process models was already
explicitly identiﬁed in a seminal paper on process modelling [18]. the authors
suggest that if humans should interpret a process model then it should be rep-
resented in larger units than in scripts for automatic execution, but “in many
domains, descriptions for process scripts are presented to humans at too high
a level of abstraction (large-grained) and they do not provide suﬃcient detail
for guiding actual execution”. clearly, this work identiﬁes the design dilemma
we addressed in this paper.
interestingly, in [7,8] the use of cohesion and coupling metrics was already sug-
gested as a means to decompose a workﬂow model into sub-processes. however,
no additional guidance is given. the suggestion does not seem to be motivated
to increase the execution quality or understandability of the workﬂow model
per se .
in [9] an overview of guidelines is given that should be taken into account dur-
ing the creation of a process model. besides the basic guidelines of correctness,
relevance, and economic eﬃciency, there is the additional guideline of clar-
ity, which encompasses understandability. the authors state that “without
a readable, understandable, useful model all other eﬀorts become obsolete.”,
stressing the relevance of this guideline. the proposed heuristic in this paper
can be seen as support for following up on this guideline.
to our knowledge, the ﬁrst concrete metric in the workﬂow domain is the
soundness notion [1]. a workﬂow design is sound if each of its invocations (to
deal with a speciﬁc case) can be guaranteed to terminate successfully. in par-
ticular, a sound workﬂow model does not contain deadlocks. soundness can
be determined on the basis of formal, structural characteristics of a workﬂow
design. the woflan software tool [55] is able to check soundness for workﬂow
designs, allowing a variety of modelling techniques to be used. from a met-
rics point of view, soundness is a direct and binomial indicator for a speciﬁc
correctness notion for workﬂow designs. it may also be seen as a minimum re-
quirement that any workﬂow design should satisfy. this metric is not derived
from any similar metric from software engineering, but is based on general
notions used for the analysis of petri nets, such as liveness and boundedness.
more recent work on the analysis of the workﬂow design quality has indeed
been inspired by software practices. in [24], the iso/iec 9126 software prod-
uct quality model is used as a starting point for an evaluation framework
for workﬂow designs. in this work, workﬂow process quality is a hierarchically
layered structure, where metrics are used to measure the functionality, relia-
20bility, and usability of the design. the various metrics are illustrated in [24]
with a realistic workﬂow case: for each metric a simple count takes place of
the activities in the workﬂow design that satisfy it. this results in relative
strengths and weaknesses of the design with respect to the various quality
aspects. the authors argue that this approach can help organizations to select
the most suitable alternatives to their processes. although the breadth of the
considered quality measures is considerable, exact deﬁnitions of the metrics
are lacking.
also conducted very recently, research is available on the adaptation of the ﬁve
types of metrics from the software engineering domain to workﬂow processes.
at this moment three surveys are available in which researchers describe the
opportunities to apply software engineering metrics, and in particular com-
plexity, to business process designs. they also investigate how these software
engineering metrics can be adopted to the bpm ﬁeld ([15,23,31]). however,
none of these metrics has been made very concrete and practical yet. further-
more, they have not yet been tested and a number of limitations is identiﬁed
for each metric. with the ﬁve design principles of the software engineering
domain in mind, we give an overview of the research that was done so far in
this area:
²coupling - coupling measures the number of interconnections among the
modules of the model. we have identiﬁed two studies using a coupling
measure to determine the quality of a business process design. although
mendling [35] calls his density metric a complexity metric, he is actually
measuring the interconnections among several tasks in a business process
model based on theory of social network analysis. thus, this metric should
be classiﬁed as a coupling metric. moreover, reijers and vanderfeesten [46]
also developed a similar coupling metric counting the overlap of data ele-
ments for each pair of activities. however, both metrics do not deal with
how complicated the connections are.
²cohesion - cohesion measures the coherence within the parts of the model.
reijers and vanderfeesten [46] developed a cohesion metric for workﬂow
processes that looks at the coherence of the steps within the activities of
the process model.
²complexity - complexity measures the simpleness and understandability
of a design. in this area most of the research on business process metrics
has been done [15,23,31] since there is also a wide range of complexity
measures for software engineering. for instance, both [23] and [15] consider
the adaptation of mccabes’ cyclometric number as a complexity metric for
business processes. in [13] the control-flow complexity (cfc) metric is de-
ﬁned, which is also derived from software engineering. the cfc metric can
be used to analyze the degree of complexity of a workﬂow design. it is for-
mally evaluated in [14], using a well-known approach in software engineering
[56]. other researchers propose graph complexity metrics, for instance [31].
cardoso et al [15] have identiﬁed three diﬀerent types of business process
21complexity: (i) computational complexity, (ii) psychological complexity, and
(iii) representational complexity.
²modularity - modularity measures the degree to which a design is split op
into several modules. from our literature review we have to conclude that
there is no research done yet on modularity metrics for business process
models.
²size - size simply measures how big a model is. the size of a business
process model can be measured by simple measures similar to the number
of lines of code in software engineering metrics. cardoso et al., gruhn
& laue and latva-koivisto [15,23,31] all propose to count the number of
activities to establish this measure for instance.
from this overview of the state of the art in business process metrics, we con-
clude that this ﬁeld of research is just at its start and that there is a lot of
potential for further development of business process metrics. this classiﬁca-
tion, which was adopted from the software engineering ﬁeld, is not yet very
precise. mendling uses a coupling metric as means to calculate complexity
and latva-koivisto, gruhn & laue, and cardoso et al. also use size as a mea-
sure for complexity [15,23,31]. perhaps, this classiﬁcation of business process
metrics should be revised when this area becomes more mature.
in our earlier work [43], which we brieﬂy discussed in the introduction of this
paper, we compared the application of a simple cohesion metric on work-
ﬂow models to the decisions of 14 experienced workﬂow designers. we showed
these designers ten design dilemmas inspired by practical workﬂow models,
presenting them two alternative designs for each dilemma. for each dilemma
the respondents indicated whether they preferred to combine the operations
into one large activity or to split up the operations in two activities. their
answers were compared to the outcomes that the application of the simple
cohesion metric suggested. a strong correspondence was established between
these ouctomes. in particular, the correlation between the average respondent
score and the heuristics’ outcome turned out to be approximately 0.810. this
signiﬁcant result (assuming a two-tailed 99% conﬁdence interval) supported
the validity of the cohesion metrics and the viability of the underlying idea
that we expanded on in this paper.
7 conclusion
our claim in this paper is that the proposed cohesion and coupling metrics will
help designers in the creation of workﬂow models that have a better execution
quality and that are easier to understand by people. understandability in its
turn will cause a better maintainability of the workﬂow model. our overall
claim is based on the following assertions:
22²the heuristic leads to intuitive outcomes. in our earlier experiments, i.e.
the ibg toy example (section 2), and an industrial case (section 4), design
alternatives are selected that incorporate activities which are neither too
large nor too small. such a balance is necessary because a great number
of small activities will lead to a tightly coupled process with many error-
prone hand-oﬀs, while activities that are too large will lack cohesiveness
and cannot be understood or performed well by humans. involving a small
group of experienced workﬂow designers in our research, we already showed
that the cohesion metric conforms with expert decisions (see section 6).
²similar heuristics in software engineering are eﬀective . cohesion and cou-
pling are good indicators for software quality with respect to the reduction
of errors and maintainability. considering workﬂow processes that are tar-
geted at information processing and show similarities to software programs
(see section 3), similar results may be expected.
²the application of the heuristic in realistic workﬂow design settings is fea-
sible. the computation of the cohesion and coupling metrics is supported
by the cocoflow tool, which will limit the risk of human mistakes that
can occur when manually determining these values (see section 5). the
focus on the information processing function is also compatible with the
industry-strength workﬂow design method pbwd [2,42,45].
further support for the viability of the metrics may be found in earlier sugges-
tions by workﬂow researchers to use coupling and cohesion metrics for workﬂow
model decomposition [7,8]. as we have argued in section 6, we believe that
our presented work delivers concrete design guidance, which is often absent in
related work.
clearly, broader empirical evidence that support the eﬀectiveness of the pre-
sented heuristic needs to be gathered. this will require extensive ﬁeldwork,
because the results of the workﬂow design with respect to its execution quality
will only be measurable after the implementation of the design. in a typical
workﬂow project, this period may span several months or even years. for the
understandability of the workﬂow models, it is feasible to set up experiments
which are not attached to actual projects. we are thinking about conducting
experiments in the spirit of [48], where respondents will be asked to evaluate
alternative designs under laboratory conditions.
we have used software engineering metrics as a source of inspiration, but it
should be noted that software engineers use metrics for a much wider range of
properties than we have considered here. in this paper, we have aimed for a
modest goal with respect to workﬂow process design, focusing only on execu-
tion quality and maintainability issues. these properties have led to the most
tangible results in the software engineering domain. a comprehensive quality
concept for a workﬂow design should perhaps encompass additional aspects
such as reliability, security, interoperability, etc. [24].
one of the drawbacks of the presented heuristic is its elaborate mechanics. in
23contrast to the metrics as proposed in [13], it is not likely that the metrics
will acquire popularity on the basis of their simplicity (as, for instance, the
“number of lines code” metric in software engineering). the development of
thecocoflow tool can be expected to counter this eﬀect for some part. for-
tunately, in settings where the pbwd method is applied, the step towards
the application of the proposed heuristic is rather small because the ﬁne-
grained analysis of information elements and operations has already taken
place. pbwd has been adopted as one of the standard innovation methods
by the management consultancy ﬁrm deloitte and is frequently applied.
from a scientiﬁc perspective, the greatest challenge lies in the fact that the
heuristic does not suggest any clustering or ordering of information elements
itself. an extension of the heuristic so that it can eﬃciently generate (semi ¡)
optimal activity deﬁnitions itself would generate a quantum leap in this do-
main.
references
[1]aalst, w.m.p. van der. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers , 8, 1 (1998), 21-66.
[2]aalst, w.m.p. van der. on the automatic generation of workﬂow processes
based on product structures. computers in industry , 39, 2 (1999), 97-111.
[3]aalst, w.m.p. van der. reengineering knock-out processes. decision support
systems , 30, 4 (2001), 451-468.
[4]aalst, w.m.p. van der, and berens, p.j.s. beyond workﬂow management:
product-driven case handling. in ellis, s.; rodden, t.; and zigurs, i.
(eds), international acm siggroup conference on supporting group work
(group 2001) , pages 42-51. acm press, new york, 2001.
[5]aalst, w.m.p. van der, and hee, k.m. van. workﬂow management: models,
methods, and systems , mit press, cambridge, ma, 2002.
[6]aalst, w.m.p. van der; hofstede, a.h.m. ter; kiepuszewski, b.; and barros,
a.p. workﬂow patterns. distributed and parallel databases , 14, 1 (2003), 5-51.
[7]baresi, l.; casati, f.; castano, s.; fugini, m.; mirbel, i.; and pernici, b.
wide workﬂow development methodology. proceedings of international joint
conference on work activities coordination and collaboration , pages 19-28,
1999.
[8]baresi, l.; casati, f.; castano, s.; fugini, m.; grefen, p.; mirbel, i.; pernici, b.;
and pozzi, g. workﬂow design methodology. in: grefen, p.; pernici, b.; and
sanchez, g. (eds.) database support for workﬂow management: the wide
project , 1999, pages 47-94. kluwer academic publishers.
24[9]becker, j.; rosemann, m.; von uthmann, c. guidelines of business process
modeling. in: aalst, w.m.p. van der; desel, j.; oberweis, a. (eds.) business
process management: models, techniques, and empirical studies , lecture
notes in computer science 1806, pages 30-49, 2000.
[10]berg, a. van den, and pottjewijd, p. workﬂow: continuous improvement by
integral process management , academic service, 1997 (page 77). (in dutch)
[11]bieman, j.m., and kang, b-k. measuring design-level cohesion. ieee
transactions on software engineering , 24, 2 (1998), 111-124.
[12]card, d.n.; church, v.e.; agresti, w.w. an empirical study of software
design practices. ieee transactions on software engineering , 12, 2 (1986),
264-271.
[13]cardoso, j. how to measure the control-ﬂow complexity of web processes
and workﬂows. in: fischer, l. (ed.) workﬂow handbook , 2005, pages 199-212.
lighthouse point.
[14]cardoso, j. control-ﬂow complexity measurement of processes and weyuker’s
properties. proceedings of the sixth international enformatika conference
(iec 2005) , pages 213-218, 2005.
[15]cardoso, j., mendling, j., neumann, g., and reijers, h.a. a discourse on
complexity of process models. in: eder, j., dustdar, s., et al, editors, bpm 2006
workshops, lecture notes in computer science 4103, springer-verlag berlin,
pages 115-126, 2006.
[16]cardoso, j., “process control-ﬂow complexity metric: an empirical validation”,
ieee international conference on services computing (ieee scc 06),
chicago, usa, september 18-22, 2006. pp. 167-173, ieee computer society.
isbn: 0-7695-2670-5
[17]conte, s.d.; dunsmore, h.e.; and shen,v.y. software engineering metrics and
models , benjamin/cummings publishing company, inc., 1986.
[18]curtis, b.; kellner, m.i.; and over, j. process modeling. communications of
the acm , 35, 9 (1992), 75-90.
[19]dumas, m.; aalst, w.m.p. van der; and hofstede, a.h. ter. process-
aware information systems: bridging people and software through process
technology . wiley, 2005.
[20]emerson, t.j. a discriminant metric for module cohesion. proceedings of the
7th international conference on software engineering (icse-7) , pages 294-303,
1984.
[21]fenton, n., and melton, a.. deriving structurally based software measures.
journal of systems and software , 12, (1990), 177-187.
[22]fischer, l. workﬂow handbook 2005 . future strategies, 2005.
25[23]gruhn, v., and laue, r. complexity metrics for business process models. in:
witold abramowicz and heinrich c. mayr, editors, 9th international conference
on business information systems (bis 2006), volume 85 of lecture notes in
informatics, pages 1-12, 2006.
[24]guceglioglu, a.s., and demiros, o. using software quality characteristics
to measure business process quality. proceedings of the 3rd international
conference on business process management (bpm 2005) , lecture notes in
computer science 3649, pages 374-379, 2005.
[25]hammer, m. reengineering work: don’t automate, obliterate. harvard
business review , 70-91, 1990.
[26]hammer, m., and champy, j. reengineering the corporation; a manifesto for
business revolution . harper business, 1993.
[27]ids scheer. aris process performance manager: measure, analyze and
optimize your business process performance. product description and fact
sheet . http://www.ids-scheer.com, 2002.
[28]kang, b-k., and bieman, j.m. using design cohesion to visualize,
quantify, and restructure software. 8th international conference on software
engineering and knowledge engineering , knowledge systems institute, skokie
il, pages 222-229, 1996.
[29]kang, b-k., and bieman, j.m. a quantitative framework for software
restructuring. journal of software maintenance , 11, (1999), 245-284.
[30]lakhotia, a. rule-based approach to computing module cohesion.
proceedings of the 15th international conference on software engineering ,
pages 35-44, 1993.
[31]latva-koivosto, a.m. finding a complexity measure for business process
models. helsinki university of technology, systens analysis laboratory, 2001.
[32]leymann, f., and roller, d. production workﬂow: concepts and techniques .
prentice hall, 2000.
[33]marinescu, d.c. internet-based workﬂow management: towards a semantic
web. john wiley & sons, 2002.
[34]mclellan, m. workﬂow metrics one of the great beneﬁts of workﬂow
management. in: sterle, h., and vogler, p. (eds.) praxis des workﬂow-
management , 1996, pages 301-318. braunschweig.
[35]mendling, j. testing density as a complexity metric for epcs. german epc
workshop on density of process models, 2006. retrieved from: http://wi.wu-
wien.ac.at/home/mendling/publications/tr06-density.pdf
[36]muehlen, m. zur, and rosemann, m. workﬂow-based process monitoring
and controlling: technical and organizational issues. proceedings of the 33rd
hawaii international conference on system science (hicss-33) , pages 1-10,
2000.
26[37]myers, g.j. composite/structured design . van nostrand reinhold, new york
ny, 1978.
[38]orlicky, a. structuring the bill of materials for mrp. production and inventory
management , december 1972, pp.19-42.
[39]platier, e.a.h. a logistical view on business processes: concepts for business
process redesign and workﬂow management . phd thesis, eindhoven university
of technology, eindhoven, 1996.
[40]process mining research website, http://www.processmining.org, accessed on
february 21, 2006.
[41]reijers, h.a. product-based design of business processes applied within the
financial services. journal of research and practice in information technology ,
34, 2 (2002), 34-46.
[42]reijers, h.a. design and control of workﬂow processes: business process
management for the service industry . lecture notes in computer science 2617.
springer-verlag, berlin, 2003.
[43]reijers, h.a. a cohesion metric for the deﬁnition of activities in a workﬂow
process. proceedings of the eighth caise/ifip8.1 international workshop on
evaluation of modeling methods in systems analysis and design 2003 , pages
116-125, 2003.
[44]reijers, h.a., and limam mansar, s. best practices in business process
redesign: an overview and qualitative evaluation of successful redesign
heuristics. omega: the international journal of management science , 33, 4
(2005), 283-306.
[45]reijers, h.a.; limam mansar, s; and aalst, w.m.p. van der. product-based
workﬂow design. journal of management information systems , 20, 1 (2003),
229-262.
[46]reijers, h.a., and vanderfeesten, i.t.p. cohesion and coupling metrics for
workﬂow process design. proceedings of the 2nd international conference on
business process management (bpm 2004) , lecture notes in computer science
3080, pages 290-305, 2004.
[47]rupp, r.o., and russell, j.r. the golden rules of process redesign. quality
progress , 27, 12 (1994), 85-92.
[48]sarshar, k., and loos, p. comparing the control-flow of epc and petri net
from the end-user perspective. proceedings of the 3rd international conference
on business process management (bpm 2005) , lecture notes in computer
science 3649, pages 434-439, 2005.
[49]seidmann, a., and sundararajan, a. the eﬀects of task and information
asymmetry on business process redesign. international journal of production
economics , 50, 2-3 (1997), 117-128.
27[50]selby, r.w., and basili, v.r. analyzing error-prone system structure. ieee
transactions on software engineering , 17, 2 (1991), 141-152.
[51]shepperd, m. software engineering metrics volume i: metrics and validations .
mcgraw-hill, 1993.
[52]simon, f.; l¨ oﬄer, s.; and lewerentz, c. distance based cohesion measuring.
proceedings of the 2nd european software measurement conference (fesma)
1999, pages 69-83, 1999.
[53]stevens, w.p.; myers, g.j.; and constantine, l.l. structured design. ibm
systems journal , 13, 2 (1974), 115-139.
[54]troy, d.a., and zweben, s.h. measuring the quality of structured designs.
journal of systems and software , 2, (1981), 113-120.
[55]verbeek, h.m.w.; basten, t.; and aalst, w.m.p. van der. diagnosing workﬂow
processes using woﬂan. the computer journal , 44, 4 (2001), 246-279.
[56]weyuker, e.j. evaluating software complexity measures. ieee transactions
on software engineering , 14, 9 (1988), 1357-1365.
[57]the workﬂow management coalition, website, http://www.wfmc.org, accessed
on february 21, 2006.
[58]xenos, m.; stavrinoudis, d.; zikouli, k.; and christodoulakis, d. object-
oriented metrics - a survey. proceedings of the federation of european software
measurement association (fesma) 2000 , pages 1-10, 2000.
28a request for student grant example
table a.1: description of information elements of the in-
formation element structure in figure 1.
number description
1 last name applicant
2 first name(s) applicant
3 address applicant
4 telephone number(s) applicant
5 sex applicant
6 social security number applicant
7 country where applicant lives
8 birth place applicant
9 account number applicant
10 identiﬁcation number applicant (student grant institute)
11 signature applicant
12 first day of study
13 date from which applicant wants to receive a scholarship
14 signature father applicant
15 signature mother applicant
16 identiﬁcation number father of applicant
17 identiﬁcation number mother of applicant
18 period or year for which applicant requests a grant
19 date of request
20 birth date applicant
21 nationality applicant
22 the kind of student grant the applicant requests
(there are four possibilities for its value:
(1) a basic scholarship
(2) basic scholarship and supplementary scholarship
29(3) basic scholarship, supplementary scholarship and loan
(4) basic scholarship and loan )
23 age applicant
24 social security number father of applicant
25 reference year for tax authorities
26 social security number mother of applicant
27 applicant has a right to receive a student grant
28 income father of applicant
29 income mother of applicant
30 income applicant’s parents
31 applicant has a right to receive a supplementary scholarship
32 kind of health insurance of applicant
33 living situation applicant
34 applicant has a right to receive a loan from
the student grant institute
35 maximum amount that can be received for
supplementary scholarship
36 parental contribution
37 the amount of loan the applicant requests
38 maximum amount of loan
39 the amount of supplementary scholarship that
is assigned to applicant
40 the amount of basic scholarship assigned to applicant
41 the amount of loan that is assigned to applicant
42 the total amount of student grant assigned to applicant
3022
1221
2039 40
1833
32
1319233136
3038 37 35
24 2542
2741
34
2628 29value(31)
= "yes"value(31)="no"value(34)
= "yes"value(34)="no"
value(27)
="yes"value(27)=
"yes"value(27)
="yes"
value(27)
="no"
84 11
73 10
62 9
51
16 14 17 15figure 1. information element structure for the process “handling of requests for
governmental student grants”.
31c b ef
a
dgvalue
(27)
=
”yes”
value(27) = ”no”figure 2. process model of the ﬁrst alternative.
3242
39 40 41 27g38 3741
34
27 22 18f
39
3136 35
30 2732 18e
22
40
33 32 27 18d
22 21
20 192327c
1218
13b
2530
24 25 2628 29afigure 3. the partitioning of the information element structure for the ﬁrst alter-
native design.
33c bf
a2
dg
a1a3 a4
value(27) = ”no”value
(27)
=
”yes”figure 4. process model of the second alternative. the original activities a en e
are split up.
3442
39 40 41 27g
38 3741
34
27 22 18f
40
33 32 27 18d22 21
20 192327c
39
3136 35
32 18a4
3030
29 2827 22a3
31
24 2528a1
2629
25a21218
13b
25figure 5. the partitioning of the information element structure in smaller activities.
the original activities a en e are split up.
35c bf
ae
dgvalue
(27)
=
”yes”
value(27) = ”no”figure 6. process model of the third alternative. the original activities a en e are
combined.
3638 3741
34
27 22 18f
40
33 32 27 18d42
39 40 41 27g
22 21
20 192327c3239
3136 35
27ae
22 30
24 25 2628 2918
1218
13b
25figure 7. the partitioning of the information element structure in larger activities.
the original activities a en e are combined.
37table 1
similarities between software programs and workﬂow processes
software programs workﬂow processes
program workﬂow process
module/class activity
statement/method operation
variable/constant data element
table 2
cohesion and coupling for ﬁve alternative designs to the uwv case.
process cohesion process coupling coupling/cohesion ratio
original design 0.076 0.788 10.3
alternative 1 0.102 0.806 7.9
alternative 2 0.116 0.810 7.0
38figure 8. the structure of information elements and their operations for the uwv
case.
39b
j
l mki hg f e d ci37 in i1 not(i9) i37 in i8 i37 in i2 not(i37 in i1) and not(i37 in i2) andnot(i37 in i8) and i9
i10 not defined i10 defined
i17 not(i17)
not(i15) i15(i1, (i25, i37}), (i2, {i25, i37}), (i3, {i33, i37}), (i4, {i33, i37}),
(i5, {i37, i45}), (i6, {i21, i37}), (i7, {i24, i37}), (i8, {i23, i37}),
(i9, {i24, i39}), (i28, {i25, i37})
(i34, {i36, i37, i41}), (i42, {i47}),
(i10, {i13, i14, i34, i37, i42})
(i18, {i1}) (i18, {i2}) (i18, {i8}) (i18, {i9})
(i18, {i10})(i32, {i1, i2, i3, i4, i5, i6, i7, i8, i10, i27, i28}),
(i43, {i39, i49}), (i30, {i32, i37, i43}), (i17,
{i25, i30}), (i29, {i25, i30, i35, i36})
(i16, {i25, i30, i35, i36, i44}),
(i15, {i16, i17})(i15, {i17}),
(i40, {i39, i41}), (i31, {i29, i40, i48}),
(i11, {i31}), (i18, {i9, i11, i15})
(i40, {i39, i41}), (i31, {i29, i40, i48}),
(i11, {i31}), (i18, {i9, i11, i15})
(i18, {i15})figure 9. the original design for the uwv case.
40figure 10. screenshot of the metrics sheet of the cocoflow tool.
41figure 11. screenshot of the visualisation sheet of the cocoflow tool.
42figure 12. screenshot of the xml sheet of the cocoflow tool.
43