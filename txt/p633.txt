do petri nets provide the right
representational bias for process mining?
(short paper)
w.m.p. van der aalst
department of mathematics and computer science,
technische universiteit eindhoven, the netherlands.
w.m.p.v.d.aalst@tue.nl
abstract. process discovery is probably the most challenging process
mining task. given an event log, i.e., a set of example traces, it is di-
cult to automatically construct a process model explaining the behavior
seen in the log. many process discovery techniques use petri nets as a
language to describe the discovered model. this implies that the search
space|often referred to as the representational bias |includes many in-
consistent models (e.g., models with deadlocks and livelocks). moreover,
the low-level nature of petri nets does not help in nding a proper bal-
ance between overtting and undertting. therefore, we advocate a new
representation more suitable for process discovery: causal nets . causal
nets are related to the representations used by several process discovery
techniques (e.g., heuristic mining, fuzzy mining, and genetic mining).
however, unlike existing approaches, c-nets use declarative semantics
tailored towards process mining.
1 challenges in process mining
process mining is an emerging research area combining techniques from process
modeling, model-based analysis, data mining, and machine learning. the goal
is to extract knowledge about processes from event data stored in databases,
transaction logs, message logs, etc. process mining techniques are commonly
classied into: (a) discovery , (b) conformance , and (c) enhancement [2]. in this
paper, we restrict ourselves to control-ow discovery, i.e., learning a process
model based on example traces.
atrace is asequence of events for a particular process instance (also referred
to as case). events refer to some activity . for example, the trace ha;b;c;direfers
to a process execution starting with activity aand ending with activity d. an
event log is a multiset of traces, e.g., l=fha;b;c;di25;ha;c;b;di35;ha;e;di30g
describes the execution sequences of 90 cases. there are dozens of process dis-
covery techniques that are able to construct a process model from such an
event log. many of these techniques use petri nets as a target representation
[4,5,7,12,19,22,23]. given event log l, these techniques have no problems dis-
covering the petri net in which, after a, there is a choice between doing bandcconcurrently or just e, followed by d. note that this example is misleadingly
simple as process discovery based on real-life event logs is extremely challenging.
generally, we use four main quality dimensions for judging the quality of
the discovered process model: tness (the model should allow for the behavior
observed), simplicity (the model should be as simple as possible), precision (the
model should not allow for behavior that is very unlikely given the event log),
and generalization (the model should not just represent the observed examples
and also allow for behavior not yet observed but very similar to earlier behavior).
trace in 
event logfrequent 
behaviorall behavior
(including noise)target model non-fitting model
overfitting modelunderfitting model(a) (b) (c)
(d) (e)
fig. 1. illustrating typical problems encountered when discovering process models from
event logs: (c) a non-tting model, (d) an overtting model (poor generalization), and
(e) an undertting model (poor precision)
the simplicity dimension refers to occam's razor ; the simplest model that
can explain the behavior seen in the log, is the best model. figure 1 explains
some of the main challenges related to the other three quality dimensions. each
black dot represents a trace (i.e., a sequence of activities) corresponding to one
or more cases in the event log. (recall that multiple cases may have the same
corresponding trace.) an event log typically contains only a fraction of the pos-
sible behavior, i.e., the dots should only be seen as samples of a much larger set
of possible behaviors. moreover, one is typically primarily interested in frequent
behavior and not in all possible behavior, i.e., one wants to abstract from noise
(i.e., infrequent or exceptional behavior) and therefore not all dots need to be
relevant for the process model to be constructed.
it is interesting to analyze such noisy behaviors. however, when constructing
the overall process model, the inclusion of infrequent or exceptional behaviorleads to complex diagrams. moreover, it is typically impossible to make reliable
statements about noisy behavior given a relatively small set of observations. fig-
ure 1(a) distinguishes between frequent behavior (solid rectangle with rounded
corners) and all behavior (dashed rectangle), i.e., normal and noisy behavior.
the dierence between normal and noisy behavior is a matter of denition, e.g.,
normal behavior could be dened as the 80% most frequently occurring traces.
let us assume that the two rectangles with rounded corners can be deter-
mined by observing the process innitely long while the process is in steady-
state (i.e., no concept drift [9]). based on these assumptions, fig. 1 sketches
four discovered models depicted by shaded rectangles. these discovered models
are based on the example traces in the log, i.e., the black dots. the \ideal process
model" (fig. 1(b)) allows for the behavior coinciding with the frequent behavior
seen when the process would be observed ad innitum. the \non-tting model"
in fig. 1(c) is unable to characterize the process well as it is not even able to
capture the examples in the event log used to learn the model. the \overt-
ting model" (fig. 1d)) does not generalize and only says something about the
examples in the current event log. new examples will most likely not t into
this model. the \undertting model" (fig. 1(e)) lacks precision and allows for
behavior that would never be seen if the process would be observed ad innitum.
figure 1 illustrates the challenges that process discovery techniques need to
address: how to extract a simple target model that is not undertting, overtting,
nor non-tting?
2 petri nets as a representational bias for process
mining
one can think of process mining as a search problem with a search space dened
by the class of process models considered, i.e., the goal is to nd a \best" process
model in the collection of all permissible models. the observation that the target
language denes the search space is often referred to as the representational bias .
many process discovery techniques use petri nets as a representational bias
[4,5,7,12,19,22,23]. examples of such techniques are the -algorithm and its vari-
ants [5,22], state-based region techniques [4,19], and language-based region tech-
niques [7,23]. some of these techniques allow for labeled transitions, i.e., there
may be invisible/silent steps ( transitions not leaving a mark in the event log)
or multiple transitions with the same label. however, all of the models have a
clearly dened initial marking and one or more nal markings. in fact, most
techniques aim at discovering a so-called workow net (wf-net) [1]. a wf-net
has one source place (modeling the start of the process) and one sink place (mod-
eling the end), and all nodes are on a path from source to sink. ideally, such a
discovered wf-net is sound . soundness is a common correctness criterion for
wf-nets requiring that from any reachable marking it is possible to reach the
nal marking (weak termination) and there are no dead transitions (i.e., there
are no activities that can never happen).in the remainder, we assume that the goal is to discover sound wf-nets from
event logs. the particular soundness notion used is not very relevant. moreover,
the syntactical requirements imposed on wf-nets may be relaxed. however, a
basic assumption of any process discovery algorithm is that all traces in the
event log start in some initial state and ideally end in a well-dened end state.
petri nets allow for a wide variety of analysis techniques and provide a simple,
yet powerful, graphical representation. this is the reason why they were chosen
as a target language for dozens of process discovery techniques described in
literature [4,5,7,12,19,22,23]. nevertheless, in this paper, we pose the question
\are petri nets a suitable representational bias for process discovery?" .
in our view, there are several problems associated to using petri nets as a
representational bias.
{the search space is too large (including mostly \incorrect" models). when
randomly generating a petri net, the model is most likely not sound. the
fraction of sound process models is small. as a result, most of the process dis-
covery techniques tend to create incorrect process models. for example, the
-algorithm can generate models that have deadlocks and livelocks. region-
based techniques may also suer from such problems; they can replay the
event log but also exhibit deadlocks and livelocks.
{petri nets cannot capture important process patterns in a direct manner.
process modeling languages used by end-users tend to support higher-level
constructs, often referred to as workow patterns [3]. examples are the or-
split (multi-choice pattern) and or-join (synchronizing merge pattern).
many of these patterns can be expressed in terms of petri nets, i.e., the
higher-level construct is mapped onto a small network. this is no problem
for model-based analysis (e.g., verication). however, the discovered process
model needs to be interpreted by the end-user. whereas it is relatively easy
to translate higher-level constructs to petri nets, it is dicult to translate
lower-level constructs to languages such as bpmn, epcs, uml, yawl, etc.
{it is dicult to \invent" modeling elements. if all transitions need to have
a unique visible label, then the only task of a process discovery algorithm is
to \invent" places. if two transitions can have the same visible label, then
the process discovery algorithm may also need to duplicate transitions. if
transitions can be silent, e.g., to skip an activity, then the process discov-
ery algorithm needs to \invent" such silent transitions (if needed). places,
duplicate transitions, and silent transitions cannot be coupled directly to
observations in the event log. the fact that such modeling elements need to
be \invented" makes the search space larger (often innite) and the relation
between event log and model more indirect.
{the representational bias does not help in nding a proper balance between
overtting and undertting. because of the low-level nature of petri nets,
there are no natural patterns to support generalization. algorithms tend to
overt or undert the event log. one of the reasons is that the represen-
tational bias does not help in guiding the discovery algorithm towards a
desirable model. note that some of the more advanced region-based algo-rithms allow for the formulation of additional constraints (e.g., the target
model should be free-choice and the number of input and output arcs per
node is bounded) [23].
note that the above problems are not specic for petri nets. most of the cur-
rent representations suer from a subset of these problems. consider for example
bpmn; the fraction of sound bpmn models is small and the mining algorithm
needs to \invent" process fragments consisting of gateways and events to capture
behavior adequately. however, compared to petri nets, bpmn can capture more
patterns directly.
3 towards a better representational bias: causal nets
the goal of this paper is notto provide a solution for all of the problems in-
duced by using petri nets as a representational bias for process mining. instead,
we would like to discuss potential notations that provide a more suitable repre-
sentational bias . we do not propose new discovery techniques. instead, we note
that most of the existing process discovery techniques can be modied to support
a more rened representational bias.
to trigger this discussion, we advocate a new representation more suitable
for process discovery: causal nets (c-nets) [2]. on the one hand, c-nets are
related to the representations used by several process discovery techniques (e.g.,
heuristic mining [17,21], fuzzy mining [17], and genetic mining [18]). moreover,
in [6] a similar representation is used for conformance checking. on the other
hand, c-nets use declarative semantics not based on a local ring rule. this way
a larger fraction of models (if not all) is considered to be correct.
a c-net is a graph where nodes represent activities and arcs represent causal
dependencies . each activity has a set of possible input bindings and a set of
possible output bindings . consider, for example, the causal net shown in fig. 2.
activityahas only an empty input binding as this is the start activity. there
are two possible output bindings: fb;dgandfc;dg. this means that ais followed
by eitherbandd, orcandd. activityehas two possible input bindings ( fb;dg
andfc;dg) and three possible output bindings ( fgg,fhg, andffg). hence,e
is preceded by either bandd, orcandd, and is succeeded by just g,horf.
activityzis the end activity having two input bindings and one output binding
(the empty binding). this activity has been added to create a unique end point.
all executions commence with start activity aand nish with end activity z.
note that unlike, petri nets, there are no places in the causal net; the routing
logic is solely represented by the possible input and output bindings.
denition 1 (causal net [2]). acausal net (c-net) is a tuple c= (a;ai;ao;
d;i;o )where:
{ais a nite set of activities ;
{ai2ais the start activity ;
{ao2ais the end activity ;a
register 
requestb
examine 
thoroughly
c
examine 
casually
d
check
ticketdecidepay 
compensation
reject 
requesteg
h
fend
reinitiate 
requestz
xor-split and-split or-split
xor-join and-join or-joinfig. 2. example of a c-net and some of the typical input and output bindings present
in conventional business process modeling languages [2]
{daais the dependency relation ,
{as=fxp(a)jx=f;g _ ;62 xg;1
{i2a!as denes the set of possible input bindings per activity; and
{o2a!as denes the set of possible output bindings per activity,
such that
{d=f(a1;a2)2aaja12s
as2i(a2)asg;
{d=f(a1;a2)2aaja22s
as2o(a1)asg;
{faig=fa2aji(a) =f;gg ;
{faog=fa2ajo(a) =f;gg ; and
{all activities in the graph (a;d)are on a path from aitoao.
anactivity binding is a tuple (a;asi;aso) denoting the occurrence of activity
awith input binding asiand output binding aso. for example, ( e;fb;dg;ffg)
denotes the occurrence of activity ein fig. 2 while being preceded by band
d, and succeeded by f. a binding sequence is a sequence of activity bind-
ings. a possible binding sequence for the c-net of fig. 2 is ex=h(a;;;fb;dg);
(b;fag;feg);(d;fag;feg);(e;fb;dg;fgg);(g;feg;fzg);(z;fgg;;)i.
1p(a) =fa0ja0agis the powerset of a. hence, elements of asaresets of sets
of activities.a binding sequence is valid if a predecessor activity and successor activity
always \agree" on their bindings. for a predecessor activity xand successor
activityywe need to see the following \pattern": h:::;(x;f:::g;fy;:::g);:::;
(y;fx;:::g;f:::g); :::i, i.e., the occurrence of activity xwithyin its output
binding needs to be followed by the occurrence of activity yand the occurrence
of activityywithxin its input binding needs to be preceded by the occurrence
of activityx.exis an example of a valid sequence.
for technical details regarding these notions we refer to [2]. it is important
to note that the behavior of c-nets is limited to valid binding sequences . c-nets
are not driven by local ring rules (like a petri net), but by the more declarative
notion of valid binding sequences in which activities always \agree" on their
bindings.
it can be shown that c-nets are more expressive than petri nets . for any
sound wf-net one can construct a c-net such that any full ring sequence of the
wf-net corresponds to a valid binding sequence of the c-net and vice versa. note
that at rst sight, c-nets seem to be related to zero-safe nets [10]. the places
in a zero-safe net are partitioned into stable places and zero places. observable
markings only mark stable places, i.e., zero places need to be empty. in-between
observable markings zero places may be temporarily marked. in [15] an approach
is described to synthesize zero-safe nets. however, zero places cannot be seen as
bindings because the \agreement" between two activities may be non-local, i.e.,
an output binding may create the obligation to execute an activity occurring
much later in the process.
for process discovery, the representational bias provided by c-nets is more
suitable than the representational bias provided by petri nets.
{since the behavior of c-nets is limited to valid binding sequences, any c-net
is in principle correct. therefore, we do not need to consider a search space
in which most models are internally inconsistent (deadlocks, etc.)
{c-nets can capture important process patterns in a direct manner. for ex-
ample, or-splits (multi-choice pattern) and or-joins (synchronizing merge
pattern) can be modeled directly. moreover, there is no need to introduce
silent transitions or multiple transitions with the same label to discover a
suitable model for event logs such as l= [ha;b;ci20;ha;ci30]. c-nets are
closely connected to languages such as bpmn, epcs, uml, yawl, etc.
however, the interpretation is dierent as we only consider valid binding
sequences. models may be \cleaned up" as a post optimization.
{there is no need to \invent" modeling elements such as places and silent
transitions. we only need to nd the set of possible input and output bind-
ings per activity. note that input and output bindings have a more direct
connection to the event log than routing elements encountered in conven-
tional languages such as petri nets (places and silent/duplicate transitions),
bpmn (gateways, events, etc.), and epcs (connectors and events).
{the representational bias of c-nets is tailored towards nding a proper bal-
ance between overtting and undertting. it is easy to dene the types of
input and output bindings that are preferred, e.g., an and-split or xor-split is preferred over an or-split. for example, it is possible to associate
thresholds to extending the set possible bindings.
4 conclusion
this short paper does notaim to provide a new process discovery algorithm.
instead, its purpose is to trigger a discussion on the representational bias used
by existing process mining algorithms. we showed that petri nets are less suitable
as a target language. we introduced c-nets as an alternative representational
bias. c-nets are able to express behavioral patterns in a more direct manner.
moreover, by limiting the behavior of c-nets to valid binding sequences, we
obtain a more suitable search space. we believe that our formalization sheds
new light on the representations used in [6,17,18,20,21].
it is interesting to investigate how classical region theory [8,11,13,14,16] can
be applied to the synthesis of c-nets. for example, it seems possible to adapt
region-based mining approaches as described in [23] to c-nets. however, the
straightforward encoding of the synthesis problem into an integer linear pro-
gramming (ilp) problem makes discovery intractable for realistic examples.
moreover, existing region-based mining techniques have problems dealing with
noise and incompleteness. as a result, the discovered models typically do not
provide a good balance between overtting and undertting.
c-nets are very suitable for genetic process mining [18]. it is also possible
to use a mixture of heuristic mining [20,21] and genetic mining [18]. for exam-
ple, one can rst discover the dependency relation dusing heuristics and then
optimize the input bindings iand output bindings ousing genetic algorithms.
genetic operators such as crossover and mutation can be dened on c-nets in
a straightforward manner. the tness function can be based on replay, e.g., the
fraction of events and process instances in the log that t into the model. here
we suggest using the technique described in [6]. moreover, we also suggest to
incorporate the complexity of the model in the tness function.
currently, prom already provides basic support for c-nets (prom 6 can be
downloaded from www.processmining.org). in the future, we aim to add more
plug-ins working directly on c-nets.
references
1. w.m.p. van der aalst. the application of petri nets to workow management.
the journal of circuits, systems and computers , 8(1):21{66, 1998.
2. w.m.p. van der aalst. process mining: discovery, conformance and enhancement
of business processes . springer-verlag, berlin, 2011.
3. w.m.p. van der aalst, a.h.m. ter hofstede, b. kiepuszewski, and a.p. barros.
workow patterns. distributed and parallel databases , 14(1):5{51, 2003.
4. w.m.p. van der aalst, v. rubin, h.m.w. verbeek, b.f. van dongen, e. kindler,
and c.w. g unther. process mining: a two-step approach to balance between
undertting and overtting. software and systems modeling , 9(1):87{111, 2010.5. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workow mining:
discovering process models from event logs. ieee transactions on knowledge
and data engineering , 16(9):1128{1142, 2004.
6. a. adriansyah, b.f. van dongen, and w.m.p. van der aalst. towards robust con-
formance checking. in m. zur muehlen and j. su, editors, bpm 2010 workshops,
proceedings of the sixth workshop on business process intelligence (bpi2010) ,
volume 66 of lecture notes in business information processing , pages 122{133.
springer-verlag, berlin, 2011.
7. r. bergenthum, j. desel, r. lorenz, and s. mauser. process mining based on
regions of languages. in g. alonso, p. dadam, and m. rosemann, editors, inter-
national conference on business process management (bpm 2007) , volume 4714
oflecture notes in computer science , pages 375{383. springer-verlag, berlin,
2007.
8. r. bergenthum, j. desel, r. lorenz, and s. mauser. synthesis of petri nets from
finite partial languages. fundamenta informaticae , 88(4):437{468, 2008.
9. r.p. jagadeesh chandra bose, w.m.p. van der aalst, i.zliobaite, and m. pech-
enizkiy. handling concept drift in process mining. in h. mouratidis and c. rol-
land, editors, international conference on advanced information systems engi-
neering (caise 2011) , volume 6741 of lecture notes in computer science , pages
391{405. springer-verlag, berlin, 2011.
10. r. bruni and u. montanari. zero-safe nets: comparing the collective and indi-
vidual token approaches. information and computation , 156(1-2):46{89, 2000.
11. m.p. cabasino, a. giua, and c. seatzu. identication of petri nets from knowl-
edge of their language. discrete event dynamic systems , 17(4):447{474, 2007.
12. j. carmona and j. cortadella. process mining meets abstract interpretation. in
j.l. balcazar, editor, ecml/pkdd 210 , volume 6321 of lecture notes in articial
intelligence , pages 184{199. springer-verlag, berlin, 2010.
13. j. cortadella, m. kishinevsky, l. lavagno, and a. yakovlev. deriving petri nets
from finite transition systems. ieee transactions on computers , 47(8):859{882,
august 1998.
14. p. darondeau. unbounded petri net synthesis. in j. desel, w. reisig, and
g. rozenberg, editors, lectures on concurrency and petri nets , volume 3098 of
lecture notes in computer science , pages 413{438. springer-verlag, berlin, 2004.
15. p. darondeau. on the synthesis of zero-safe nets. in concurrency, graphs
and models , volume 5065 of lecture notes in computer science , pages 364{378.
springer-verlag, berlin, 2008.
16. a. ehrenfeucht and g. rozenberg. partial (set) 2-structures - part 1 and part 2.
acta informatica , 27(4):315{368, 1989.
17. c.w. g unther and w.m.p. van der aalst. fuzzy mining: adaptive process sim-
plication based on multi-perspective metrics. in g. alonso, p. dadam, and
m. rosemann, editors, international conference on business process management
(bpm 2007) , volume 4714 of lecture notes in computer science , pages 328{343.
springer-verlag, berlin, 2007.
18. a.k. alves de medeiros, a.j.m.m. weijters, and w.m.p. van der aalst. genetic
process mining: an experimental evaluation. data mining and knowledge dis-
covery , 14(2):245{304, 2007.
19. m. sole and j. carmona. process mining from a basis of regions. in j. lilius and
w. penczek, editors, applications and theory of petri nets 2010 , volume 6128 of
lecture notes in computer science , pages 226{245. springer-verlag, berlin, 2010.20. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151{162, 2003.
21. a.j.m.m. weijters and j.t.s. ribeiro. flexible heuristics miner (fhm). beta
working paper series, wp 334, eindhoven university of technology, eindhoven,
2010.
22. l. wen, w.m.p. van der aalst, j. wang, and j. sun. mining process models with
non-free-choice constructs. data mining and knowledge discovery , 15(2):145{
180, 2007.
23. j.m.e.m. van der werf, b.f. van dongen, c.a.j. hurkens, and a. serebrenik.
process discovery using integer linear programming. fundamenta informaticae ,
94:387{412, 2010.