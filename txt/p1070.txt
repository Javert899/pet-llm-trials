pm4py web services: easy development,
integration and deployment of process mining
features in any application stack
alessandro berti1, sebastiaan j. van zelst1;2, and wil van der aalst1;2
1process and data science chair, lehrstuhl f ur informatik 9 52074 aachen, rwth
aachen university, germany
2fraunhofer gesellschaft, institute for applied information technology (fit),
sankt augustin, germany
abstract. in recent years, process mining emerged as a set of tech-
niques to analyze process data, supported by dierent open-source and
commercial solutions. process mining tools aim to discover process mod-
els from the data, perform conformance checking, predict the future be-
havior of the process and/or provide other analyses that enhance the
overall process knowledge. additionally, commercial vendors provide in-
tegration with external software solutions, facilitating the external use of
their process mining algorithms. this integration is usually established
by means of a set of web services that are accessible from an external
software stack. in open-source process mining stacks, only a few solutions
provide a corresponding web service. however, extensive documentation
is often missing and/or tight integration with the front-end of the tool
hampers the integration of the services with other software. therefore,
in this paper, a new open-source python process mining service stack,
pm4py-ws, is presented. the proposed software supports easy integra-
tion with any software stack, provides an extensive documentation of the
api and a clear separation between the business logic, (graphical) inter-
face and the services. the aim is to increase the integration of process
mining techniques in business intelligence tools.
keywords: process mining pm4py web services process discovery
case management seamless integration.
1 introduction
process mining [1] is a growing branch of data science which, starting from data
stored and processed in information systems, aims to infer information about
the underlying processes, i.e. as captured in the data. several techniques, e.g.,
process discovery (automated discovery of a process model from the event data),
conformance checking (comparison between an event log and a process model),
prediction (given the current state of a process, predict the remaining time or
the value of some attribute in a future event), etc., have been developed.
process mining is supported by several open-source (prom [5], rapidprom
[9,2], apromore [7], bupar [6], pm4py [3], pmlab [4]) and commercial (disco,2 alessandro berti , sebastiaan j. van zelst, and wil van der aalst
celonis, processgold, qpr processanalyzer, etc.) software. apart from rapid-
prom (an extension of the data science framework rapidminer) and apromore,
the majority of the open-source projects provide a standalone tool that only
allows to import an event log and to perform process mining analyses on it.
pm4py and bupar provide a set of process mining features as a library, and
this provides integration with the corresponding python and r ecosystem. at
the same time, some commercial tools, e.g., celonis and processgold, as well as
the apromore open-source tool, oer a web-based interface supported by web
services. this leads to some advantages:
{the possibility to access the information related to the process everywhere,
from dierent devices.
{identity and access management (typically unsupported by standalone tools).
{the possibility for multiple users to collaborate in the same workspace.
a systematic introduction of web services in the process mining eld is oered
by [8]. process mining analyses oered through web services ideally permit an
easy integration with other software solutions. in the case of apromore, the
business logic is oered to the web application mainly through servlets-based
web services. this oers the possibility for external tools to use the algorithms
integrated in apromore by querying its web services. however, due to the high
customization on the client-side, required to provide a higher number of features
as application, apromore does not allow easy embedding of the visual elements
in external applications.
in this paper, the pm4py web services (pm4py-ws), that are built on top
of the recent process mining library pm4py [3], are presented. the high-level
goals of the web services are (1) to provide an easy entrypoint for the integra-
tion of process mining techniques in external (business intelligence) tools, and,
(2) to provide an extensible platform built on top of modern software engineer-
ing principles and guidelines (testing, documentation, clear separation between
stacks, separation from the front-end). a prototypal process mining web appli-
cation, supported by the services, is provided along with the services, in order to
demonstrate that the services work as intended, and to provide some evidence
that pm4py-ws is easily integrated in any external application stack.
while in python other ways to build non-trivial data visualization web inter-
faces are available, for example dash by plot.ly3that could oer an even simpler
prototyping of process mining visuals based on pm4py, they do not oer the
same possibility of integration with external applications as exposing a set of
web services, since the interface is more tightly coupled with the backend part.
the remainder of this paper is structured as follows. in section 2, the archi-
tecture of the web services is explained. section 3 provides information regarding
the repository hosting the tool, the maturity of the tool and a reference to the
video demo. section 4 concludes this paper.
3https://dash.plot.ly/introductionpm4py web services 3
2 architecture of the web services
pm4py-ws is written in python, i.e., a programming language popular among
data scientists and developers for its simplicity and the vast set of high-performing
data science libraries. the web-services are exposed as asynchronous rest
get/post services using the flask framework4, which supports:
{possibility to deploy the services using http/https.
{possibility to use an enterprise-grade server (e.g. iis, uwsgi).
{possibility to manage the cross-origin resource sharing (cors5).
pm4py web services are supported by the algorithms available in the pm4py
process mining library. the exposed services accept a session identier (used to
identify the user, and verify the general permissions of the user), and a process
id(used to identify the process, and verify the permissions of the user on the
given log). moreover, each service has access to a singleton object hosting all the
software components needed for authentication, session management, user-log
visibility and permissions, log management, and exception handling. each dif-
ferent component is provided as a factory method, that means several dierent
implementations are possible. currently, the following components are provided:
{session manager : responsible for user authentication and verication of the
validity of a session. two dierent session managers are available:
basic session manager : supported by a relational database with user/-
password information and a separate logs database table.
keycloak iam session manager6: users and sessions are veried through
the keycloak identity and user access control management solution, that
is the most popular enterprise solution in the eld. thanks to keycloak,
several applications can share the same credentials and sessions. the con-
guration of user/password data, and the settings related to the session
duration, are done in keycloak.
{log management : responsible to manage individual event logs, the visibili-
ty/permissions of the users w.r.t. the logs, and the analysis/ltering oper-
ations on the log. each process is managed by a handler that controls the
following operations on the log:
loading : depending on the log handler, the log is either persistently
loaded in memory, or loaded in memory when required. in the current
version, two in-memory handlers are provided: a xeshandler (that loads
an event log in the xesformat, and uses the pm4py eventlog struc-
ture to store events and cases), and a csvhandler (that loads an event
log in the csv/parquet7format, and uses pandas dataframes8). these
handlers both load event logs stored as les, however when the pm4py
library will be more mature, the le dependency might be gradually
dropped.
4http://flask.pocoo.org/
5https://de.wikipedia.org/wiki/cross-origin_resource_sharing
6https://www.keycloak.org/
7a popular columnar storage format, see https://parquet.apache.org/
8a popular data processing framework in python, see https://pandas.pydata.org/4 alessandro berti , sebastiaan j. van zelst, and wil van der aalst
fig. 1: pmtk prototypal web interface, using pm4py-ws as an underly-
ing service. the pmtk interface is available on github at the address
https://github.com/pm-tk/source.
filtering : the ltering algorithms implemented in the pm4py library are
applied to the log when the ltering services (add lter, remove lter)
are called.
analysis : the algorithms implemented in the pm4py library are applied
to the log, in order to get the process schema, get the social network,
perform conformance checking, etc.
{exception handler : triggered when debug warnings/error messages need to
be logged. the default setting is using the logging utility in python.
3 repository of the tool, video demo and maturity
pm4py-ws, along with the prototypal interface in angularjs, is available at
https://github.com/pm4py/pm4py-ws . the web services can be installed fol-
lowing the instructions contained in the install.txt le provided in the repos-
itory. a docker image9is also made available with the name javert899/pm4pyws
and could be run through the command docker run -d -p 5000:5000 javert899
/pm4pyws . the docker image uses port 5000, i.e., the web services are exposed
at the url http://localhost:5000 and the prototypal angular web interface
is made available at the url http://localhost:5000/index.html .
the documentation of the web services is available at the site http://pm4py.
pads.rwth-aachen.de/pm4py-web-services/ . a demo of the web services is
made available at http://212.237.8.106:5000/ (for example, the loginser-
vice and the getendactivities get services can be tested according to the
documentation). a demo of the prototypal angular web interface (represented
in figure 1) is made available at http://212.237.8.106:5000/index.html . a
video demo, that shows how the web services can be easily queried through a
browser, and shows the prototypal angular web interface in action, is available
athttp://pm4py.pads.rwth-aachen.de/pm4py-ws-demo-video/ .
9see https://en.wikipedia.org/wiki/docker_(software) for an introduction to
dockerpm4py web services 5
the web services have just been released and no real-life use case is available
yet. the web interface is in a prototypal status.
4 conclusion
in this paper, we presented pm4py-ws, a stack of web services developed on
top of the existing process mining python framework pm4py. pm4py-ws is
open-source and extendible, and allows to integrate process mining technology
in any external software stack.
when an algorithm is implemented in the pm4py library, it is not imme-
diately available in the pm4py web services: a service exposing the algorithm
should also be implemented. this does not hamper the scalability of the web ser-
vices (in terms of number of available features), but requires an extra eort by
the developer, that should work on both the pm4py library and the pm4py-ws
projects.
in terms of scalability on big amounts of data, the current pm4py-ws han-
dlers are limited to a single core, and the performance suers from the fact that
not all the cpu cores are used. some future work will consider to implement
distributed handlers for logs, that would be able to manage bigger amount of
data. we aim to actively develop pm4py-ws, allowing faster integration and
adoption of cutting-edge research into virtually any external tool.
references
1. van der aalst, w.: process mining - data science in action, second edition.
springer (2016)
2. van der aalst, w., bolt, a., van zelst, s.j.: rapidprom: mine your processes and
not just your data. corr abs/1703.03740 (2017)
3. berti, a., van zelst, s.j., van der aalst, w.: process mining for python (pm4py):
bridging the gap between process-and data science pp. 13{16 (2019)
4. carmona, j., sol e, m.: pmlab: an scripting environment for process mining. in:
proceedings of the bpm demo sessions 2014 co-located with the 12th interna-
tional conference on business process management (bpm 2014), eindhoven, the
netherlands, september 10, 2014. p. 16 (2014)
5. van dongen, b., de medeiros, a.k., verbeek, h., weijters, a., van der aalst, w.:
the prom framework: a new era in process mining tool support. in: international
conference on application and theory of petri nets. pp. 444{454. springer (2005)
6. janssenswillen, g., depaire, b., swennen, m., jans, m., vanhoof, k.: bupar: en-
abling reproducible business process analysis. knowl.-based syst. 163, 927{930
(2019)
7. la rosa, m., reijers, h.a., van der aalst, w., dijkman, r.m., mendling, j., dumas,
m., garc a-ba~ nuelos, l.: apromore: an advanced process model repository.
expert systems with applications 38(6), 7029{7040 (2011)
8. lambrechts, s., van der aalst, w., weijters, a.: scenario-based process mining:
web servicing and automated scenario generation (2009)
9. mans, r., van der aalst, w., verbeek, h.: supporting process mining workows
with rapidprom. in: bpm (demos). p. 56 (2014)