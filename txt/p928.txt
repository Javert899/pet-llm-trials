arxiv:1705.10202v1  [cs.lg]  25 may 2017mining process model descriptions of daily life
through event abstraction
n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
abstract process mining techniques focus on extracting insight in pr ocesses from
event logs. process mining has the potential to provide valu able insights in (un)healthy
habits and to contribute to ambient assisted living solutio ns when applied on data
from smart home environments. however, events recorded in s mart home environ-
ments are on the level of sensor triggers, at which process di scovery algorithms
produce overgeneralizing process models that allow for too much behavior and that
are difﬁcult to interpret for human experts. we show that abs tracting the events to
a higher-level interpretation can enable discovery of more precise and more com-
prehensible models. we present a framework for the extracti on of features that can
be used for abstraction with supervised learning methods th at is based on the xes
ieee standard for event logs. this framework can automatica lly abstract sensor-
level events to their interpretation at the human activity l evel, after training it on
training data for which both the sensor and human activity ev ents are known. we
demonstrate our abstraction framework on three real-life s mart home event logs and
show that the process models that can be discovered after abs traction are more pre-
cise indeed.
niek tax
eindhoven university of technology, e-mail: n.tax@tue.nl
natalia sidorova
eindhoven university of technology e-mail: n.sidorova@tue.nl
reinder haakma
philips research e-mail: reinder.haakma@philips.com
wil m.p. van der aalst
eindhoven university of technology e-mail: w.m.p.v.d.aalst@tue.nl
12 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
1 introduction
process mining is a fast growing discipline that combines me thods from compu-
tational intelligence, data mining, process modeling and p rocess analysis [1]. pro-
cess discovery , the task of extracting process models from logs, plays an im por-
tant role in process mining. there are many different proces s discovery algorithms
([2, 7, 37, 36, 18]), which can discover many different types of process models, in-
cluding bpmn models, petri nets, process trees, uml activit y diagrams, and state-
charts.
while originally the scope of process mining has been on busi ness processes, it
has broadened in recent years towards other application are as, including the analysis
of human behavior [29, 31, 32]. process model descriptions o f human behavior can
be used amongst others to aid lifestyle coaching for healthy living, or to asses the
ability of independent living of elderly or people with illn ess.
events in the event log are generated by e.g. motion sensors p laced in the home,
power sensors placed on appliances, open/close sensors pla ced on closets and cabi-
nets, etc. this clearly distinguishes process mining for sm art homes from the tradi-
tional application domain of business processes, where eve nts in the log are logged
by it systems when an business tasks are performed.
in event logs from business processes the event labels gener ally have a clear
semantic meaning, like register mortgage request . in the smart home domain the
events are on the sensor level, while the human expert is inte rested in analyzing the
behavior in terms of activities of daily life. additionally , simply using the sensor that
generated the event as the event label has been shown to resul t in non-informative
process models that overgeneralize the event log and allow f or too much behav-
ior [34]. in the ﬁeld of process mining such overgeneralizin g process models are
generally referred to as being imprecise .
in our earlier work [31] we showed how to discover more precis e process models
by taking the name of the sensor as a starting point for the eve nt label and then reﬁne
the labels using the time of the day at which the event occurre d. however, labels in
such process models still represent sensors, and they have n o direct interpretation
on the human activity level. in this paper we leverage diary s tyle annotations of
the activities performed on a human activity level and use th em learn a mapping
from sensor-level events to human activity events. this ena bles discovery of process
models that describe the human activities directly, leadin g to more comprehensible
and more precise descriptions of human behavior. often it is infeasible or simply too
expensive to obtain such diaries for periods of time longer t han a couple of weeks.
to mine a process model of human behavior more than a couple of weeks of data is
needed. therefore, there is a need to infer human level inter pretations of behavior
from sensors.
with supervised learning techniques the mapping from senso r-level events to
human activity level events can be learned through examples , without requiring a
hand-made ontology of how human activities relate to sensor s. similar approaches
have been explored in the activity recognition ﬁeld, where c ontinuous-valued time
series from sensors are mapped to time series of human activi ty. change points inmining process model descriptions of daily life through eve nt abstraction 3
these time series are triggered by sensor-level events like opening/closing the fridge
door , and the annotations of the higher level events (e.g. cooking ) are often obtained
through manual activity diaries. however, in contrast to te chniques from the activ-
ity recognition ﬁeld, we operate on discrete events on the se nsor-level instead of
continuous time series.
in this paper we extend the work started in [33]. we describe a framework for
supervised abstraction of events that enables the discover y of more precise process
models from smart home event logs. additionally, the proces s models obtained rep-
resent human activity directly, thereby enabling direct an alysis of human behavior
itself, instead of indirect analysis through sensor-level models. in section 2 we give
an overview of the related work from the activity recognitio n ﬁeld. basic concepts,
notations, and deﬁnitions that we use throughout the rest of the paper are introduced
in section 3. in section 4 we explain conceptually why abstra ction from sensor-level
to human activity level events can help to the process discov ery step to ﬁnd more
precise process models. in section 5 we describe a framework for retrieving useful
features for abstraction from event logs using speciﬁc conc epts of the ieee xes
standard for event logs [12]. section 6 demonstrates the add ed value of supervised
event abstraction for process mining in the smart home domai n and show that it
enables discovery of more precise models on three real life s mart home event logs.
section 7 concludes the paper and identiﬁes some areas of fut ure work.
2 related work
event abstraction based on supervised learning is an unexpl ored problem in process
mining. most related work for abstracting from sensor-leve l to human activity level
events can be found in the ﬁeld of activity recognition, whic h focuses on the task
of detecting different types of human activity from either p assive sensors [14, 30],
wearable sensors [3, 16], or cameras [22].
activity recognition methods generally operate on discret e time windows over
the time series of continuous-valued sensor values and aim t o map each time win-
dow onto the correct type of human activity, e.g. eating orsleeping . activity recog-
nition methods can be classiﬁed into probabilistic approac hes [14, 30, 3, 16] and on-
tological reasoning approaches [5, 25]. the advantage of pr obabilistic approaches
over ontological reasoning approaches is their ability to h andle noisy, uncertain and
incomplete sensor data [5].
tapia [30] was the ﬁrst to explore supervised learning for in ference of human
activities from passive sensors, using a naive bayes classi ﬁer. many more recent
activity recognition approaches use probabilistic graphi cal models [14, 13]: van
kasteren et al. [14] explored conditional random fields [17 ] and hidden markov
models [23], and van kasteren and kr¨ ose [13] applied bayesi an networks [10]
on the activity recognition task. kim et al. [15] found hidde n markov models to
be unable to capture long-range or transitive dependencies between observations,4 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
which results in difﬁculties recognizing multiple interac ting activities (concurrent
or interwoven). conditional random fields do not possess th ese limitations.
our work differentiates itself from existing activity reco gnition work in the form
of the input data on which they operate and in the goal that it a ims to achieve. on the
input side, activity recognition techniques consider the d ata to be a multidimensional
time series of the sensor values over time, based on which tim e windows are mapped
onto human activities. an appropriate time window size is de termined using domain
knowledge of the data set. instead, we aim for a generic metho d that does not require
this domain knowledge, and that works in general for any even t log. an approach
based on time windows contrasts with our aim for generality, as no single time
window size exists that is suitable for all event logs. the du rations of the events
within a single event log might differ drastically (e.g. one event might take seconds,
while another event takes months), in which case time window based approaches
will either miss short events in case of larger time windows o r resort to very large
numbers of time windows resulting in very long computationa l time. therefore, we
map each individual sensor-level event to a human activity l evel event and do not
use time windows. in a smart home environment context with pa ssive sensors, each
change in a binary sensor value can be considered to be a low-l evel event. a second
difference with existing activity recognition techniques is that our framework aims
to ﬁnd an abstraction of the data that enables discovery of mo re precise process
models, where classical activity recognition methods do no t have a link with the
application of process mining.
other related work can be found in the area of process mining, where several
techniques address the challenge of abstracting low-level (e.g. sensor-level) events
to high level (e.g. human activity level) events ([4, 11, 9]) . most existing event
abstraction methods rely on clustering methods, where each cluster of low-level
events is interpreted as one single high-level event. howev er, using unsupervised
learning introduces two new problems. first, it is unclear h ow to label high-level
events that are obtained by clustering low-level events. cu rrent techniques require
the user / process analyst to provide high-level event label s themselves based on
domain knowledge. secondly, unsupervised learning gives n o guidance with respect
to the desired level of abstraction. many existing event abs traction methods contain
one or more parameters to control the size the clusters, and ﬁ nding the right level of
abstraction providing meaningful results is often a matter of trial-and-error.
one abstraction technique from the process mining ﬁeld that does not rely on
unsupervised learning is proposed by mannhardt et al. [20]. this approach relies on
domain knowledge to abstract low-level events into high-le vel events, requiring the
user to specify a low-level process model for each high-leve l activity. however, in
the context of human behavior it is unreasonable to expect th e user to provide the
process model in sensor terms for each human activity from do main knowledge.mining process model descriptions of daily life through eve nt abstraction 5
3 preliminaries
in this section we introduce basic concepts and notation use d throughout the paper.
we use the standard sequence deﬁnition, and denote a sequenc e by listing its
elements, e.g. we write /an}bracketle{ta1,a2,..., an/an}bracketri}htfor a (ﬁnite) sequence s:{1,..., n}→ sof
elements from some alphabet s, where s(i)=aifor any i∈{1,..., n}.
3.1 petri nets
a process modeling notation that is commonly used in process mining is the petri
net. petri nets are directed bipartite graphs consisting of transitions and places, con-
nected by arcs. transitions represent activities, while pl aces represent the state of
the system before and after execution of a transition. label s are assigned to transi-
tions to indicate the type of activity that they represent. a special label τis used to
represent invisible transitions, which are only used for ro uting purposes and do not
represent any real activity.
deﬁnition 1 (labeled petri net). a labeled petri net is a tuple n= (p,t,f,r,ℓ)
where pis a ﬁnite set of places, tis aﬁnite set of transitions such that p∩t=/ 0,
andf⊆(p×t)∪(t×p)is a set of directed arcs, called the ﬂow relation, ris
a ﬁnite set of labels representing event types, with τ/∈ris a label representing an
invisible action, and ℓ:t→r∪{τ}is a labeling function that assigns a label to
each transition.
the state of a petri net is deﬁned w.r.t. the state that a proce ss instance can be in
during its execution. a state of a petri net is captured by the marking of its places
with tokens. in a given state, each place is either empty, or i t contains a certain
number of tokens. a transition is enabled in a given marking i f all places with an
outgoing arc to this transition contain at least one token. o nce a transition ﬁres (i.e.
is executed), a token is removed from all places with outgoin g arcs to the ﬁring tran-
sition and a token is put to all places with incoming arcs from the ﬁring transition,
leading to a new state.
deﬁnition 2 (marking, enabled transitions, and firing). a marked petri net is
a pair(n,m), where n= (p,t,f,l,ℓ)is a labeled petri net and m∈npdenotes
the marking of n. for n∈(p∪t)we use•nandn•to denote the set of inputs and
outputs of n respectively. let c(s,e)indicate the number of occurrences (count) of
element ein multiset s. a transition t∈tis enabled in a marking mof net nif
∀p∈•t:c(m,p)>0. an enabled transition tmay ﬁre, removing one token from
each of the input places •tand producing one token for each of the output places t•.
figure 1 shows four petri nets, with the circles representin g places, the squares
representing transitions. the gray rectangles represent ( invisible) τ-transitions.
places depicted as belong to the ﬁnal marking, indicating that the process ex-
ecution can terminate in this marking.6 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
the petri net shown in figure 1c initially has one token in the place p1, indicated
by the dot. firing the enabled silent transition takes the to ken from p1 and puts a
token in both p2 and p3, enabling both mcanddcc . when mcﬁres, it takes the
token from p2 and puts a token in p4. when dcc ﬁres, it takes the token from p3
and puts a token in p5. after mcanddcc have both ﬁred, resulting in a token in
both p4 and p5,wis enabled. executing wtakes the token from both p4 and p5,
and puts a token in p6, which is a place that belongs to the ﬁnal marking, indicate s
that the process execution can stop here. alternatively, it can ﬁre the silent transi-
tion, taking the token from p6 and placing a token in p2 and p5, which allows for
execution of mcandwto reach the marking consisting of p6 again. we refer the
interested reader to [24] for an extensive review of petri ne ts.
3.2 conditional random field
we consider the recognition of human activity level events a s a sequence labeling
task in which each sensor-level event is classiﬁed into one o f the human activity
level events. linear-chain conditional random fields (crf s) [17] are a type of
probabilistic graphical model which has shown to perform we ll on many sequence
labeling tasks in the ﬁelds of language processing and compu ter vision. conceptu-
ally crfs can be regarded as a sequential version of multicla ss logistic regression,
i.e., the predictions in the prediction sequence are depend ent on each other. a crf
models the conditional probability distribution of the lab el sequence given an ob-
servation sequence using a log-linear model. linear-chain crfs take the following
form:
p(y|x)=1
z(x)exp(∑
t=1∑
kλkfk(t,yt−1,yt,x)) (1)
where z(x)is the normalization factor which makes sure that the values of the prob-
ability distribution range from zero to one. x=/an}bracketle{tx1,..., xn/an}bracketri}htis an observation se-
quence (the sensor-level events), y=/an}bracketle{ty1,..., yn/an}bracketri}htis the associated label sequence
(the human activity level events), fkandλkrespectively are feature functions and
their weights. feature functions, which can be binary or rea l valued, are deﬁned
on the observations and are used to compute label probabilit ies. in contrast to hid-
den markov models [23], crfs do not assume the feature functi ons to be mutually
independent.
4 motivating example
figure 1 shows a simplistic example demonstrating how a proc ess can seem unstruc-
tured at the sensor level of events, while being structured a t a human behavior level.
petri net 1c shows the process at the human activity level. th etaking medicine hu-mining process model descriptions of daily life through eve nt abstraction 7
p1p2
p3mc
dccp4
p5w
p6
dcc = dishes & cups cabinet
mc = medicine cabinet
w = water
(a)cd dcc
d cd = cutlery drawer
d = dishwasher
dcc = dishes & cups cabinet
(b)
taking medicine
eating
(c) (d)
fig. 1 a human activity level process model (c) where the two transi tions themselves are deﬁned
as process models (shown in a and b), and the inductive miner r esult on the sensor-level traces
generated from this model (d).
man activity level activity is itself deﬁned as a process, wh ich is shown in figures
1a to 1c. eating is also deﬁned as a process, which is shown in figure 1b. when w e
apply the inductive miner process discovery algorithm [18] to sensor-level traces
generated by the hierarchical process of figure 1c, we obtai n the process model
shown in figure 1d. this process model allows for almost all p ossible sequences
over the alphabet {cd,d,dcc,mc,w}, with the only constraint introduced by the
model being that if a woccurs, then it has to be preceded by a dcc event. firing
of all other transitions in the model can be skipped. behavio rally this model is very
close to the so called ”ﬂower” model [1], the model that allow s for all behavior over
its alphabet. the alternating structure between taking medicine andeating that was
present in the human activity level process in figure 1c cann ot be observed in the
process model in figure 1d. this is caused by high variance in start and end events
of the sensor-level subprocesses of taking medicine andeating as well as by the
overlap in types of activities between these two subprocess es. both subprocesses
contain dcc , and the miner cannot see that there are actually two differe nt contexts
for the dcc activity to split the label in the model. abstracting the sen sor-level
events to their respective human activity level events befo re applying process dis-
covery to the resulting human activity log unveils the alter nating structure between
eating andtaking medicine as shown in figure 1c.8 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
fig. 2 xes event log meta-model, as deﬁned in [12].
5 event abstraction as a sequence labeling task
in this section we describe the framework for supervised abs traction of events based
on conditional random fields (crfs). additionally, we desc ribe feature functions
for event logs in a general way by using the ieee xes standard [ 12]. xes, which is
an abbreviation for extensible event stream , is the ieee standard for process min-
ing event logs. an overview of the xes ﬁle structure which is s hown in figure 2.
an event logis deﬁned as a set of traces , which in itself are a sequences of event s.
the log, traces and events can all contain one or more attribute s, which consist of
akeyand a value of a certain type. event or trace attributes may be global , which
indicates that the attribute needs to be deﬁned for each even t or trace respectively.
a log contains one or more classiﬁer s, which can be seen as labeling functions on
the events of a log, deﬁned on global event attributes. extension s deﬁne a set of
attributes on log, trace, or event level, in such a way that th e semantics of these
attributes are clearly deﬁned. one can view xes extensions a s a speciﬁcation of at-
tributes that events, traces, or event logs themselves freq uently contain. xes deﬁnes
the following standard extensions:mining process model descriptions of daily life through eve nt abstraction 9
concept speciﬁes the generally understood name of the event/trace/ log (attribute
’concept:name’).
lifecycle speciﬁes the lifecycle phase (attribute ’lifecycle:trans ition’) that the
event represents in a transactional model of their generati ng activity. the lifecy-
cleextension also speciﬁes a standard transactional model for activities.
organizational speciﬁes three attributes for events, which identify the ac tor hav-
ing caused the event (attribute ’organizational:resource ’), his role in the organi-
zation (attribute ’organizational:role’), and the group o r department within the
organization where he is located (attribute ’organization al:group’).
time speciﬁes the date and time at which an event occurred (attrib ute ’time:timestamp’).
we introduce a special attribute of type string with key label , which represents
the human activity level activity. the concept name of an event is then considered to
be a sensor-level name of an event. the label attribute speciﬁes the human activity
level label for each event individually, allowing for examp le one sensor-level event
of type dishes & cups cabinet to be of human activity level type taking medicine ,
and another sensor-level event of the same type to be of human level activity type
eating . note that for some traces human level activity annotations might be avail-
able, in which case its events contain the label attribute, while other traces might not
be annotated. human activity level interpretations of unan notated traces, obtained
by inferring the label attribute based on information that is present in the annota ted
traces, allow the use of unannotated traces for process disc overy and conformance
checking on a human activity level.
figure 3 provides a conceptual overview of the supervised ev ent abstraction
method. the approach takes two inputs: 1) a set of annotated t races, which are traces
where the human activity level event that each sensor level e vent belongs to (the la-
belattribute of the sensor-level event) is known, and 2) a set of unannotated traces,
which are traces where only the sensor-level events known. c onditional random
fields (crfs) are trained of the annotated traces to create a probabilistic mapping
from sensor-level events to human activity level events. th is mapping, once ob-
tained, can be applied to the unannotated traces in order to e stimate the correspond-
ing human activity level event for each sensor-level event ( itslabel attribute). often
multiple consecutive sensor-level events will have the sam elabel attribute. we as-
sume that multiple human activity level events cannot occur in parallel. this enables
us to interpret a sequence of events with identical label values as a single human ac-
tivity level event. to obtain a ﬁnal human activity level log , we collapse sequences
of events with the same value for the label attribute into two events with this value
asconcept name, where the ﬁrst event has a lifecycle ’start’ and the second has the
lifecycle ’complete’. table 1 and table 2 illustrate this collapsing p rocedure through
an input and output event log.
the method described in this section is implemented and avai lable for use as
package abstracteventssupervised in the prom 6 [35] process mining toolkit and
makes use of the grmm [28] implementation of crfs.
we now show for each xes extension how it can be translated int o useful feature
functions for event abstraction. note that we do not limit ou rselves to xes logs that10 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
table 1 a trace with predicted human activity level annotations ( label )
case time:timestamp concept:name label
1 03/11/2015 08:45:23 medicine cabinet taking medicine
1 03/11/2015 08:46:11 dishes & cups cabinet taking medicine
1 03/11/2015 08:46:45 water taking medicine
1 03/11/2015 08:47:59 dishes & cups cabinet eating
1 03/11/2015 08:47:89 dishwasher eating
1 03/11/2015 17:10:58 dishes & cups cabinet taking medicine
1 03/11/2015 17:10:69 medicine cabinet taking medicine
1 03/11/2015 17:11:18 water taking medicine
table 2 the resulting human activity level log after collapsing the consecutive identical label
values of the trace in table 1.
case time:timestamp concept:name lifecycle:transition
1 03/11/2015 08:45:23 taking medicine start
1 03/11/2015 08:46:45 taking medicine complete
1 03/11/2015 08:47:59 eating start
1 03/11/2015 08:47:89 eating complete
1 03/11/2015 17:10:58 taking medicine start
1 03/11/2015 17:11:18 taking medicine complete
fig. 3 conceptual overview
of supervised event abstrac-
tion.annotated traces
unannotated tracessensor-level to
activity-level
mapping
applylearn
traces with
predicted 
annotationsactivity-level
log
contain all xes extensions; when a log contains a subset of th e extensions, a sub-
set of the feature functions will be available for the superv ised learning step. this
approach leads to a feature space of unknown size, potential ly causing problems re-
lated to the curse of dimensionality. to address this we use l 1-regularized crfs. in
the training phase we search for values of weight vector λthat minimize the cross
entropy between the ground truth target and the predicted la bel on the training data.
l1-regularization adds a λpenalty terms to this minimization function that is pro-
portionate to the size of the weight vector, giving the model an incentive not to use
all of the available features (i.e., setting some features t o zero weight). this results
in prediction models that are sparse and therefore simpler, which helps to prevent
overﬁtting.mining process model descriptions of daily life through eve nt abstraction 11
fig. 4 the histogram
representation and a gaussian
mixture model ﬁtted to
timestamps values of the
plates cupboard sensor in the
van kasteren data set.
5.1 from a xes log to a feature space
we now discuss per xes extension how feature functions can be obtained.
concept extension the sensor-level labels (concept names) of the preceding
events in a trace can contain useful contextual information for classiﬁcation into
the correct human activity level event type. based on the n-g ram/an}bracketle{ta1,a2,..., an/an}bracketri}ht
consisting of the sensor-level labels of the nlast-seen events in a trace, we can
estimate a categorical probability distribution over the c lasses of human activity
level activities from the training log, such that the probab ility of class lis equal to the
number of times that the n-gram was observed while the n-th event was annotated
with class l, divided by the total number of times that the n-gram was obse rved.
the crf model requires feature functions with numerical ran ge. a feature function
based on the concept extension has two parameters, nandl, and is valued with the
estimated categorical probability density of the current s ensor-level event having
human activity level label lgiven the n-gram with the last nsensor-level event labels.
it can be useful to combine multiple features that are based o n the concept extension,
where the features have different values for nandl.
organizational extension similar to the concept extension feature functions,
categorical probability distributions can be estimated on the training set for n-
grams of resource ,role, orgroup attributes of the last nevents. likewise, an or-
ganizational extension based feature function with three p arameters, n-gram size
n,o∈ {resource,role,group}, and label l, is valued with the probability density
according to the estimated categorical probability distri bution of label lgiven the
n-gram of the last nevent resources/roles/groups.
time extension in terms of time, there are several potentially existing pat terns.
a certain type of human activity might for example be concent rated in a certain
parts of a day, of a week, or of a month. this concentration can however not be
modeled with a single gaussian distribution, as it might be t he case that a type of
human activity has high probability to occur in the morning o r in the evening, but
low probability to occur in the afternoon in-between. a mixt ure distribution con-
sisting of multiple components is therefore needed to model the probability distri-12 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
bution over timestamps. the most well-known mixture distri bution is the gaussian
mixture model (gmm), where each component of the mixture is d eﬁned by a nor-
mal distribution. the circular, non-euclidean, nature of t he data space of time-of-
the-day, time-of-the-week, or time-of-the-month however introduces problems for
the gmm, as, using time-of-the-day as an example, 00:00 is ac tually very close
to 23:59. figure 4 illustrates this problem. the gaussian co mponent with a mean
around 10 o’clock has a standard deviation that is much highe r than what one would
expect when looking at the histogram, as the gmm tries to expl ain the data points
just after midnight with this component. these data points j ust after midnight would
however have been much better explained with the gaussian co mponent with the
mean around 20 o’clock, which is much closer in time. alterna tively, we use a
mixture model with components of the von mises distribution , which is a close
approximation of a normal distribution wrapped around the c ircle. to determine the
correct number of components of such a von mises mixture mode l (vmmm) we
use bayesian information criterion (bic) [27], choses the n umber of components
which explains the data with the highest likelihood, while a dding a penalty for the
number of model parameters. a vmmm is estimated on training d ata, modeling the
probabilities of each type of human activity based on the tim e passed since the start
of the day, week or month. a time extension feature function w ith two parameters,
t∈{day,week,month,...}and label l, is valued with the vmmm-estimated proba-
bility of label lgiven the tview on the event timestamp. an alternative approach to
estimate the probability density on data that lies on a manif old, such as a circle, is
described by cohen and welling [6].
lifecycle extension & time extension the xes standard [12] deﬁnes several
lifecycle stages of process activities, which represent th e transactional model of their
generating activity. lifecycle values that are commonly fo und in real life logs are
start andcomplete which respectively represent when this activity started an d ended
however, a larger set of lifecycle values is deﬁned in the xes standard, including
schedule ,suspend , and resume . the time differences between different stages of an
activity lifecycle can be calculated when an event log posse sses both the lifecycle
extension and the time extension. for example, when observi ng the complete of an
activity, the time between this complete and the corresponding start of this activity
can contain useful information for predicting the correct h uman activity label. find-
ing the associated start event becomes nontrivial when multiple instances of the
same activity are in parallel, as it is then unknown which complete event belongs
to which start event. we assume consecutive lifecycle steps of activities running
in parallel to occur in the same order as the preceding lifecy cle step. for example,
when we observe two start events of an activity of type a in a row, followed by two
complete events of type a, we assume the ﬁrst complete to belong to the ﬁrst start,
and the second complete to belong to the second start.
the xes standard deﬁnes an ordering over the lifecycle value s. for each type
of human activity, we ﬁt a gaussian mixture model (gmm) to the set of time dif-
ferences between each two consecutive lifecycle steps. a fe ature based on both the
combination of the lifecycle and the time extension with act ivity label parameter
land lifecycle cis valued the probability density of activity las estimated by themining process model descriptions of daily life through eve nt abstraction 13
gmm given the time between the current event and lifecycle va luec. bayesian in-
formation criterion (bic) [27] is again used to determine th e number of components
of the gmm. note that while these features are time-based, re gular gmms can be
used instead of vmmms since time duration is a euclidean, non -circular, space.
5.2 evaluating human activity level event predictions for
process mining applications
existing approaches in the ﬁeld of activity recognition tak e as input time windows
where each time window is represented by a feature vector tha t describes the sensor
activity or status during that time window. hence, evaluati on methods in the activity
recognition ﬁeld are window-based, using evaluation metri cs like the percentage of
correctly classiﬁed time slices [30, 13, 14]. there are two r easons to deviate from
this evaluation methodology in a process mining setting. fi rst, our method operates
on events instead of time windows. second, the accuracy of th e resulting high level
sequences is much more important for many process mining tec hniques (e.g. process
discovery, conformance checking) than the accuracy of pred icting each individual
minute of the day.
a well-known metric for the distance of two sequences is the l evenshtein dis-
tance [19]. however, levenshtein distance is not suitable t o compare sequences of
human actions, as human behavior sometimes includes branch es in which it does
not matter in which order two activities are performed. for e xample, most people
shower andhave breakfast after waking up, but people do not necessarily always
perform the two in the same order. indeed, when /an}bracketle{ta,b/an}bracketri}htis the sequence of predicted
human activities, and /an}bracketle{tb,a/an}bracketri}htis the actual sequence of human activities, we consider
this to be only a minor error, since it is often not relevant in which order two parallel
activities are executed. levenshtein distance would assig n a cost of 2 to this abstrac-
tion, as transforming the predicted sequence into the groun d truth sequence would
require one deletion and one insertion operation. for examp le, most people shower
andhave breakfast after waking up, but people do not necessarily always perfor m
the two in the same order. an evaluation measure that better r eﬂects the prediction
quality of event abstraction is the damerau-levenstein dis tance [8], which adds a
swapping operation to the set of operations used by levensht ein distance. damerau-
levenshtein distance would assign a cost of 1 to transform /an}bracketle{ta,b/an}bracketri}htinto/an}bracketle{tb,a/an}bracketri}ht. to ob-
tain comparable numbers for different numbers of predicted events we normalize the
damerau-levenshtein distance by the maximum of the length o f the ground truth
trace and the length of the predicted trace and subtract the n ormalized damerau-
levenshtein distance from 1 to obtain damerau-levenshtein similarity (dls).14 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
6 case studies
in this section we evaluate the supervised event abstractio n framework on three case
studies on real life smart home data sets.
6.1 experimental setup
we include three real life smart home event logs in the evalua tion: the van kasteren
event log [14], and two event logs from a smart home experimen t conducted by mit
[30]. all three event logs used in for the evaluation consist of multidimensional time
series data with all dimensions binary, where each binary di mension represents the
state of one in-home sensor. these sensors include motion se nsors, open/close sen-
sors, and power sensors (discretized to 0/1 states). we tran sform the multidimen-
sional time series data from sensors into events by regardin g each sensor change
point as an event. cases are created by grouping events toget her that occurred in the
same day, with a cut-off point at midnight. high-level label s are provided for the
event logs.
the following xes extensions can be used for these event logs :
concept the sensor that generated the event.
time the time stamp of the sensor change point.
lifecycle start when the event represents a sensor value change from 0 to 1 and
complete when it represents a sensor value change from 1 to 0.
note that human activity level annotations are provided for all traces in the three
event logs. to evaluate how well the supervised event abstra ction method general-
ized to unannotated traces, we artiﬁcially use a part of the t races to train the ab-
straction model and apply them on a test set where we regard th e annotations to
be non-existent. we evaluate the obtained human activity la bels against the ground
truth labels in a leave-one-trace-out-cross-validation s etup where we iteratively
leave out one trace to evaluate how well this mapping general izes to unseen events
and cases. we measure the accuracy of the human activity leve l traces compared
to the ground truth human activity level traces in terms of da merau-levenshtein
similarity [8].
additionally, we evaluate the quality of the process model t hat can be discov-
ered from the human activity level traces. to discover a proc ess model from the
human activity level event log we use the inductive miner [18 ]. there are several
criteria to express the ﬁt between a process model and an even t log in the area of
process mining. two of those criteria are ﬁtness [26], which measures the degree to
which the behavior that is observed in the event log can be rep layed on the process
model, and precision [21], which measures the degree to which the behavior that
was never observed in the event log cannot be replayed on the p rocess model. low
precision typically is indicates an overly general process model, that allows for toomining process model descriptions of daily life through eve nt abstraction 15
much behavior. we compare the ﬁtness andprecision of the models produced by the
inductive miner on the sensor-level log and the human activi ty level log.
6.2 case study 1: van kasteren event log
for the ﬁrst case study we use the smart home environment log d escribed in van
kasteren et al. [14]. the van kasteren log contains 1285 even ts divided over four-
teen different sensors. the log contains 23 days of data.
the average damerau-levenshtein similarity between the pr edicted human ac-
tivity level traces in the leave-one-trace-out-cross-val idation experimental setup
and the ground truth human activity level traces is 0 .7516, which shows that the
supervised event abstraction method produces traces which are fairly similar to the
ground truth.
figure 5 shows the result of the inductive miner [18] for the s ensor-level events
in the van kasteren data set. the resulting process model sta rts with a choice be-
tween four activities: hall-toilet door ,hall-bedroom door ,hall-bathroom door , and
frontdoor . after this choice the model branches into three parallel bl ocks, where the
upper block consists of a large choice between eight differe nt activities. the other
two parallel blocks respectively contain a loop of the cups cupboard and the fridge .
this model closely resembles the ﬂower model, which allows f or all behavior in any
arbitrary order. there seems to be very little structure on t his sensor level of event
granularity.
figure 6 shows the result of the inductive miner on the aggreg ated set of pre-
dicted test traces. we can see that the main daily routine sta rts with breakfast , after
which the subject leaves the house to go to work. after work the subject prepares
dinner andgoes to bed . the activities use toilet andtake shower are put in parallel
to this sequence of activities, indicating that they occur a t different places in the
sequences of activities.
table 3 shows the effect of the abstraction on the ﬁtness and p recision of the
models discovered by the inductive miner. it shows that the p recision of the model
discovered on the abstracted log is much higher than the prec ision of the model
discovered on the sensor data, indicating that the abstract ion helps discovering a
model that is more behaviorally constrained and more speciﬁ c.
6.3 case study 2: mit household a event log
for the second case study we use the data of household a of a smart home experi-
ment conducted by mit [30]. household a contains data of 16 da ys of living, 2701
sensor-level events registered by 26 different sensors. th e human level activities are
provided in the form of a taxonomy of activities on three leve ls, called heading ,cat-
egory andsubcategory . on the heading level the human activities are very general in16 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
fig. 5 inductive miner result on the sensor-level events of the van kasteren event log.
fig. 6 inductive miner result on the human activity level events di scovered from the van kasteren
event log.
table 3 effect of abstraction on ﬁtness and precision of the process model discovered by the
inductive miner.
event log abstraction fitness precision
van kasteren no (figure 5) 0.9111 0.3308
van kasteren yes (figure 6) 0.7918 0.7804
mit household a no (figure 7) 0.9916 0.2289
mit household a yes (figure 8) 0.9880 0.3711
mit household b no (figure 9) 1.0 0.2389
mit household b yes (figure 10) 0.9305 0.4319
nature, such as the activity personal needs . the eight different activities on the head-
inglevel branch into 19 different activities on the category level, where personal
needs branches into e.g. eating ,sleeping , and personal hygiene . the 19 categories
are divided over 34 subcategories , which contain very speciﬁc human activities. at
thesubcategory level the category meal cleanup is for example divided into wash-
ing dishes andputting away dishes . at the subcategory level there are more types ofmining process model descriptions of daily life through eve nt abstraction 17
fig. 7 inductive miner result on the sensor-level mit household a e vent log.
fig. 8 inductive miner result on the discovered human activity lev el events on the mit household
a log.
human activities than there are sensors-level activities, which makes the abstraction
task very hard. therefore, we set the target label to the category level.
figure 7 shows the model discovered with the inductive miner on the sensor-level
events of the mit household a log. the model obtained allows f or too much behav-
ior, as it contains two large choice blocks. we found a damera u-levenshtein sim-
ilarity of 0 .6348 in the leave-one-trace-out-cross-validation experi ment. note
that the abstraction accuracy on this log is lower than the ab straction accuracy on
the van kasteren event log. however, the mit household a log c ontains more dif-
ferent types of human activity, resulting in a more difﬁcult prediction task with a
higher number of possible target classes. figure 10 shows th e process model dis-
covered from the human activity level traces that we predict ed from the sensor-level
events. even though the model is too large to print in a readab le way, from its shape
it is clear that the abstracted model is much more behavioral ly constrained than the
sensor-level model. the precision and ﬁtness values in tabl e 3 show that indeed the
process model after abstraction has become behaviorally mo re speciﬁc while the
portion of behavior of the data that ﬁts the process model rem ains more or less the
same.18 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
fig. 9 inductive miner result on the sensor-level mit household b e vent log.
fig. 10 inductive miner result on the discovered human activity lev el events on the mit household
b log
6.4 case study 3: mit household b event log
for the third case study we use the data of household b of the mit smart home
experiment [30]. household b contains data of 17 days of livi ng, 1962 sensor-
level events registered by 20 different sensors. identical ly to mit household a the
human-level activities are provided as a three-level taxon omy. again, we use the
subcategory level of this taxonomy as target activity label.
the model discovered with the inductive miner [18] from the s ensor-level events
is shown in figure 9. the model obtained allows for too much be havior, as it
contains two large choice blocks. we found a damerau-levens htein similarity of
0.5865 in the leave-one-trace-out-cross-validation experi ment, which is lower
than the similarity found on the mit a data set while the targe t classes of the ab-
straction are the same for the two data sets. this can be expla ined by the fact that
there is less training data for this event log, as household b contains 1932 sensor-
level events where household a contains 2701 sensor-level e vents. figure 10 shows
the process model discovered from abstracted log. again thi s model is not readable
due to its size, but its shape shows it to be behaviorally quit e speciﬁc. the precision
and ﬁtness values in table 3 also that process model after abs traction has indeedmining process model descriptions of daily life through eve nt abstraction 19
become behaviorally more speciﬁc while the portion of behav ior of the data that ﬁts
the process model decreased only slightly.
7 conclusion
in this paper we presented a framework to abstract events usi ng supervised learning
which has been implemented in the prom process mining toolki t. an important
part of the framework is a generic way to extract useful featu res for abstraction
from the extensions deﬁned in the xes ieee standard for event logs. we propose
the damerau-levenshtein similarity for evaluation of the a bstraction results, and
motivate why it ﬁts the application of process mining. final ly, we showed on three
real life smart home data sets that application of the superv ised event abstraction
framework enables us to mine more precise process model desc ription of human
life compared to what could be mined from the original data on the sensor-level.
additionally, these process models contain interpretable event labels on the human
behavior activity level.
references
[1] van der aalst wmp (2016) process mining: data science in a ction. springer
[2] van der aalst wmp, weijters t, maruster l (2004) workﬂow m ining: discov-
ering process models from event logs. ieee transactions on k nowledge and
data engineering 16(9):1128–1142
[3] bao l, intille ss (2004) activity recognition from user- annotated acceleration
data. in: pervasive computing, lncs, springer, pp 1–17
[4] bose rpjc, van der aalst wmp (2009) abstractions in proce ss mining: a
taxonomy of patterns. in: business process management, lnc s, springer, pp
159–175
[5] chen l, nugent c (2009) ontology-based activity recogni tion in intelligent
pervasive environments. international journal of web info rmation systems
5(4):410–430
[6] cohen t, welling m (2015) harmonic exponential families on manifolds.
in: proceedings of the 32nd international conference on mac hine learning,
jmlr workshop & conference proceedings, pp 1757–1765
[7] conforti r, dumas m, garc´ ıa-ba˜ nuelos l, la rosa m (2016 ) bpmn miner:
automated discovery of bpmn process models with hierarchic al structure. in-
formation systems 56:284–303
[8] damerau fj (1964) a technique for computer detection and correction of
spelling errors. communications of the acm 7(3):171–17620 n. tax, n. sidorova, r. haakma, w.m.p. van der aalst
[9] van dongen bf, adriansyah a (2010) process mining: fuzzy clustering and
performance visualization. in: business process manageme nt workshops,
springer, lnbip, pp 158–169
[10] friedman n, geiger d, goldszmidt m (1997) bayesian netw ork classiﬁers.
machine learning 29(2-3):131–163
[11] g¨ unther cw, rozinat a, van der aalst wmp (2010) activit y mining by global
trace segmentation. in: business process management works hops, springer,
lnbip, pp 128–139
[12] ieee (2016) ieee standard for extensible event stream ( xes) for achieving
interoperability in event logs and event streams. ieee std 1 849-2016 pp 1–50,
doi 10.1109/ieeestd.2016.7740858
[13] van kasteren t, kr¨ ose b (2007) bayesian activity recog nition in residence for
elders. in: proceedings of the 3rd iet international confer ence on intelligent
environments, ieee, pp 209–212
[14] van kasteren t, noulas a, englebienne g, kr¨ ose b (2008) accurate activity
recognition in a home setting. in: proceedings of the 10th in ternational con-
ference on ubiquitous computing, acm, pp 1–9
[15] kim e, helal s, cook d (2010) human activity recognition and pattern dis-
covery. pervasive computing 9(1):48–53
[16] kwapisz jr, weiss gm, moore sa (2011) activity recognit ion using cell
phone accelerometers. acm sigkdd explorations newsletter 12(2):74–82
[17] lafferty j, mccallum a, pereira fcn (2001) conditional random ﬁelds: prob-
abilistic models for segmenting and labeling sequence data . in: proceedings of
the 18th international conference on machine learning, mor gan kaufmann
[18] leemans sjj, fahland d, van der aalst wmp (2013) discove ring block-
structured process models from event logs - a constructive a pproach. in: ap-
plication and theory of petri nets and concurrency, lncs, sp ringer, pp 311–
329
[19] levenshtein vi (1966) binary codes capable of correcti ng deletions, inser-
tions, and reversals. soviet physics doklady 10:707–710
[20] mannhardt f, de leoni m, reijers ha, van der aalst wmp, to ussaint pj
(2016) from low-level events to activities - a pattern-base d approach. in: inter-
national conference on business process management, sprin ger, pp 125–141
[21] munoz-gama j, carmona j (2010) a fresh look at precision in process con-
formance. in: international conference on business proces s management,
springer, pp 211–226
[22] poppe r (2010) a survey on vision-based human action rec ognition. image
and vision computing 28(6):976–990
[23] rabiner lr, juang bh (1986) an introduction to hidden ma rkov models.
assp magazine 3(1):4–16
[24] reisig w (2012) petri nets: an introduction, vol 4. spri nger science & busi-
ness media
[25] riboni d, bettini c (2011) owl 2 modeling and reasoning w ith complex
human activities. pervasive and mobile computing 7(3):379 –395mining process model descriptions of daily life through eve nt abstraction 21
[26] rozinat a, van der aalst wmp (2008) conformance checkin g of processes
based on monitoring real behavior. information systems 33( 1):64–95
[27] schwarz g (1978) estimating the dimension of a model. th e annals of statis-
tics 6(2):461–464
[28] sutton c (2006) grmm: graphical models in mallet. imple mentation avail-
able athttp://mallet{}cs{}umass{}edu/grmm
[29] sztyler t, carmona j, v¨ olker j, stuckenschmidt h (2016 ) self-tracking
reloaded: applying process mining to personalized health c are from labeled
sensor data. in: transactions on petri nets and other models of concurrency
xi, springer berlin heidelberg, pp 160–180
[30] tapia em, intille ss, larson k (2004) activity recognit ion in the home using
simple and ubiquitous sensors. in: pervasive computing, ln cs, springer, pp
158–175
[31] tax n, alasgarov e, sidorova n, haakma r (2016) on genera tion of time-
based label reﬁnements. in: proceedings of the 25th interna tional workshop
on concurrency, speciﬁcation and programming, ceur-ws.or g, pp 25–36
[32] tax n, sidorova n, van der aalst wmp, haakma r (2016) heur istic ap-
proaches for generating local process models through log pr ojections. in: pro-
ceedings of ieee symposium on computational intelligence a nd data min-
ing, to appear.
[33] tax n, sidorova n, haakma r, van der aalst wmp (2016) even t abstraction
for process mining using supervised learning techniques. i n: proceedings of
the sai intelligent systems conference, ieee, pp 161–170
[34] tax n, sidorova n, haakma r, van der aalst wmp (2016) log- based evalua-
tion of label splits for process models. procedia computer s cience 96:63–72
[35] verbeek hmw, buijs jcam, van dongen bf, van der aalst wmp (2010)
prom 6: the process mining toolkit. in: proceedings of the bu siness process
management demonstration track, ceur-ws.org, pp 34–39
[36] weijters ajmm, ribeiro jts (2011) flexible heuristics miner (fhm). in: pro-
ceedings of the ieee symposium on computational intelligen ce and data
mining, ieee, pp 310–317
[37] van zelst sj, van dongen bf, van der aalst wmp (2015) avoi ding over-ﬁtting
in ilp-based process discovery. in: international confere nce on business pro-
cess management, springer international publishing, pp 16 3–171