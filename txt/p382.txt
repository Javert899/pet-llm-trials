formalization and veri¯cation of epcs with
or-joins based on state and context
jan mendling1and wil van der aalst2
1vienna university of economics and business administration
augasse 2-6, 1090 vienna, austria
jan.mendling@wu-wien.ac.at
2eindhoven university of technology
p.o. box 513, 5600 mb eindhoven, the netherlands
w.m.p.v.d.aalst@tue.nl
abstract. the semantics of the or-join in business process modeling
languages like epcs or yawl have been discussed for a while. still, the
existing solutions su®er from at least one of two major problems. first,
several formalizations depend upon restrictions of the epc to a sub-
set. second, several approaches contradict the modeling intuition since
the structuredness of the process does not guarantee soundness. in this
paper, we present a novel semantical de¯nition of epcs that addresses
these aspects yielding a formalization that is applicable for all epcs
and for which structuredness is a su±cient condition for soundness. fur-
thermore, we introduce a set of reduction rules for the veri¯cation of an
epc-speci¯c soundness criterion and present a respective implementa-
tion.
1 introduction
the event-driven process chain (epc) is a business process modeling language
for the represention of temporal and logical dependencies of activities in a busi-
ness process (see [1]). epcs o®er function type elements to capture the activities
of a process and event type elements describing pre- and post-conditions of func-
tions. furthermore, there are three kinds of connector types (i.e. and, or,
and xor) for the de¯nition of complex routing rules. connectors have either
multiple incoming and one outgoing arc (join connectors) or one incoming and
multiple outgoing arcs (split connectors). as a syntax rule, functions and events
have to alternate, either directly or indirectly when they are linked via one or
more connectors. control °ow arcs are used to link elements.
the informal (or intended) semantics of an epc can be described as follows.
the and-split activates all subsequent branches in a concurrent fashion. the
xor-split represents a choice between exclusive alternative branches. the or-
split triggers one, two or up to all of multiple branches based on conditions.
in both cases of the xor- and or-split, the activation conditions are given in
events subsequent to the connector. accordingly, splits from events to functions
are forbidden with xor and or since the activation conditions do not become2
clear in the model. the and-join waits for all incoming branches to complete,
then it propagates control to the subsequent epc element. the xor-join merges
alternative branches. the or-join synchronizes all active incoming branches,
i.e., it needs to know whether the incoming branches may receive tokens in
the future. this feature is called non-locality since the state of all (transitive)
predecessor nodes has to be considered.
since the informal description cannot be directly translated into proper se-
mantics (see [2]), epcs arguably belong to those process modeling languages for
which state based correctness criteria such as soundness are not directly appli-
cable. instead, several authors have proposed to consider structuredness of the
process graph as an alternative criterion for correctness (see e.g. [3{5]). essen-
tially, in a structured process model each split connector matches a join connector
of the same type and loops have one xor-join as entry and one xor-split as
exit point. these building blocks can be nested and extended with sequences of
functions and events. the structuredness of a process model can be tested by
repeatedly applying reduction rules that collapse several nodes of the respective
building blocks. if the reduction yields a single node for the whole process, the
model is structured. while structuredness represents a su±cient condition for
soundness of petri nets (see [6, 7]), the application of reduction rules to epcs
such as proposed in [5] rather represents a heuristic. figure 1 gives an example
of a structured epc that can be reduced to a single node by ¯rst collapsing the
two or-blocks, the and-block, and then the loop. the epc of figure 2 extends
this model with two additional start events e4 and e5. due to the introduction
of the or-joins c9 and c10, there are only two structured blocks left between
c3 and c4 and between c5 and c6. still, if we assume that the start event e1 is
always triggered, there is no problem to execute this unstructured epc. if the
start event e4 is triggered, it will synchronize with the ¯rst loop entry at c1.
e1
c1
e3f1 f2 e2c3c2
c4
c7c8f3 f4c5
c6
fig. 1. a structured epc with two or-
blocks c2¡c5 and c3¡c4 on a loop.
e1
c1
e3f1 f2 e2c3c2
c4
c7c8e4
c9
f3 f4c5
c6e5
c10 fig. 2. an unstructured epc with one
or-block c3¡c4 and an or loop entry.3
against this background, we present a novel epc semantics de¯nition that
has the following qualities. first, it is applicable for all epcs that are syntacti-
cally correct while several existing proposals restrict themselves only to a subset.
second, for this new semantics structuredness is a su±cient condition for sound-
ness. this aspect is of central importance both for the intuition of the semantics
and for the e±cient veri¯cation based on reduction rules. the remainder of this
paper is structured as follows. in section 2 we use the epcs of figures 1 and
2 as a running example to discuss related work on process modeling languages
with or-joins, i.e. epcs and yawl, in particular. this discussion reveals that
none of the existing formalizations captures both the complete set of syntacti-
cally correct epcs and at the same time supports the intuition that structured
models are sound. in section 3 we give an epc syntax de¯nition and present
our novel epc semantics de¯nition based on state and context. in section 4 we
elaborate on the relationship of structuredness and soundness showing that a
structured epc is indeed sound according to the new semantics. this is an im-
portant result that makes the semantics also a candidate for the formalization of
yawl nets without cancellation areas. section 5 concludes the paper and gives
an outlook on future research.
2 related research
the transformation to petri nets plays an important role in early epc formal-
izations. a problem of these approaches is their restriction to a subset of epcs.
the ¯rst concept is presented by chen and scheer [8] who de¯ne a mapping
of structured epcs with or-blocks to colored petri nets. a similar proposal is
repeated by rittgen [9]. yet, while these ¯rst petri net semantics provide a for-
malization for structured epcs such as in figure 1, it does not provide semantics
for or-joins in unstructured epcs.
the transformation approach by langner, schneider, and wehler [10] maps
epcs to boolean nets, a variant of colored petri nets whose token colors are 0
(negative token) and 1 (positive token). a connector propagates both negative
and positive tokens according to its logical type. this mechanism is able to cap-
ture the non-local synchronization semantics of the or-join similar to dead-path
elimination (see [11]). a drawback is that the epc syntax has to be restricted:
arbitrary structures are not allowed. if there is a loop it must have an xor-join
as entry point and an xor-split as exit point which are both mapped to one
place in the resulting boolean net. as a consequence, this approach does not
provide semantics for the unstructured epc in figure 2.
van der aalst [12] presents an approach to derive petri nets from epcs.
while this mapping provides clear semantics for xor- and and-connectors
as well as for the or-split, it does not cover the or-join. dehnert presents an
extension of this approach by mapping the or-join to a petri net block [13]. since
the resulting petri net block may not necessarily synchronize multiple tokens
at runtime (i.e., a non-deterministic choice), its state space is larger than the4
actual state space with synchronization. based on the so-called relaxed soundness
criterion it is possible to check whether a join should synchronize (cf. [13]).
nä uttgens and rump [14] de¯ne a transition relation for epcs that addresses
also the non-local semantics of the or-join, yet with a problem: the transition
relation for the or-join refers to itself under negation. van der aalst, desel, and
kindler show, that a ¯xed point for this transition relation does not always exist
[15]. they present an example to prove the opposite: an epc with two or-joins
on a circle waiting for each other. this vicious circle is the starting point for the
work of kindler towards a sound mathematical framework for the de¯nition of
non-local semantics for epcs [2]. the technical problem is that for the or-join
transition relation rdepends upon ritself in negation. instead of de¯ning one
transition relation, he considers a pair of transition relations ( p; q) on the state
space §of an epc and a monotonously decreasing function r. then, a function
'((p; q)) = ( r(q); r(p)) has a least and a greatest ¯xed point. pis called
pessimistic transition relation and qoptimistic transition relation. an epc is
called clean , ifp=q. for most epcs, this is the case. some epcs such as the
vicious circle epc are unclean since the pessimistic and the optimistic semantics
do not coincide. the epc of figure 2 belongs to the class of unclean epcs.
van der aalst and ter hofstede de¯ne a work°ow language called yawl [16]
which also o®ers an or-join with non-local semantics. the authors propose a
de¯nition of the transition relation r(p) with a reference to a second transition
relation pthat ignores all or-joins. a similar semantics that is calculated on
history-logs of the process is proposed by van hee et al. in [17]. mendling,
moser, and neumann relate epcs to yawl by the help of a transformation
[18]. even though this de¯nition provides semantics for the full set of models,
it yields a deadlock if the or-joins c4 and c6 are activated. in cases of chained
or-joins, there might be a lack of synchronization (see [19]). motivated by these
problems wynn et al. , present a novel approach based on a mapping to reset
nets. whether an or-join can ¯re (i.e. r(p)) is decided depending on (a) a
corresponding reset net (i.e. p) that treats all or-joins as xor-joins and (b)
a predicate called superm that hinders ¯ring if an or-join is on a directed
path from another enabled or-join. in particular, the reset net is evaluated
using backward search techniques that grant coverability to be decidable (see
[21, 22]). a respective veri¯cation approach for yawl nets is presented in [23].
the approach based on reset nets provides interesting semantics but in some
cases also leads to deadlocks, e.g. if the or-joins c4 and c6 are activated.
table 1 summarizes existing work on the formalization of the or-join. sev-
eral early approaches de¯ne syntactical restrictions such as or-splits to match
corresponding or-joins or models to be acyclic (see [8, 10]). newer approaches
impose little or even no restrictions (see [2, 16, 23]), but exhibit unexpected be-
havior for or-block re¯nements on loops with further or-joins on it.
in the following section, we propose a novel semantics de¯nition that pro-
vides soundness for structured epcs without restricting the set of models based
on the concepts reported in [19]. for veri¯cation we follow a reduction rules ap-
proach similar to the one proposed in sadiq & orlowska [3]. unfortunately, the5
table 1. overview of or-join semantics and their limitations
or-join semantics restricted to correctness of structured models
chen et al. [8] structured epcs correct
langner et al. [10] structured epcs correct
kindler [2] clean epcs correct (no proof available)
van der aalst et al. [16] no restriction potential deadlock, lack of synchronization
wynn et al. [23] no restriction potential deadlock
veri¯cation algorithm presented in [3] turned out to be incorrect since the set of
reduction rules provided was shown to be incomplete [24, 7]. in [24] there was an
attempt to repair this by adding additional reduction rules. in [7] it was shown
that the class of process models considered coincides with the well-known class
of free-choice nets for which a compact and complete set of reduction rules exist
[6]. moreover, using the well-known rank theorem for free-choice nets it is pos-
sible to ¯nd any errors in polynomial time for the class of work°ow considered
in [3] extended with loops. a set of reduction rules for epcs was ¯rst mentioned
invan dongen, van der aalst, and verbeek [5]. still, their reduction rules are
not related to a semantics de¯nition of epcs, but rather given as heuristics. in
this paper, we extend this work by relating reduction rules to epc soundness
and provide speci¯c rules to deal with multiple start and end events.
3 epc syntax and semantics
3.1 epc syntax
there is not only one, but there are several approaches towards the formalization
of epc syntax because the original paper introduces them only in an informal
way (see [1]). the subsequent syntax de¯nition of epcs is an abbreviation of a
more elaborate de¯nition given in [19] that consolidates prior work.
de¯nition 1 (epc syntax). a °at epc = (e; f; c; l; a ) consists of four
pairwise disjoint and ¯nite sets e; f; c , a mapping l:c! fand; or; xor g, and
a binary relation aµ(e[f[c)£(e[f[c) such that
{an element of eis called event .e6=;.
{ an element of fis called function .f6=;.
{ an element of cis called connector .
{ the mapping lspeci¯es the type of a connector c2casand,or, orxor.
{ade¯nes the control °ow as a coherent, directed graph. an element of ais
called an arc. an element of the union n=e[f[cis called a node.
in order to allow for a more concise characterization of epcs, notations are
introduced for incoming and outgoing arcs, paths, and several subsets.
de¯nition 2 (incoming and outgoing arcs, path). letnbe a set of
nodes andaµn£na binary relation over nde¯ning the arcs. for each
node n 2n, we de¯ne the set of incoming arcs nin=f(x; n)jx2n^(x; n)2ag,6
and the set of outgoing arcs nout=f(n; y)jy2n^(n; y)2ag. apath a ,!b
refers to a sequence of nodes n1; : : : ; n k2nwith a=n1andb=nksuch
that for all i21; : : : ; k holds: ( n1; n2); : : : ; (ni; ni+1); : : : ; (nk¡1; nk)2a. this
includes the empty path of length zero, i.e., for any node a:a ,!a.
de¯nition 3 (subsets). for an epc , we de¯ne the following subsets of its
nodes and arcs:
{es=fe2ej jeinj= 0gbeing the set of start-events,
eint=fe2ej jeinj= 1^ jeoutj= 1gbeing the set of intermediate-events,
ee=fe2ej jeoutj= 0gbeing the set of end-events.
{asµ f(x; y)2ajx2esgas the set of start-arcs,
aintµ f(x; y)2ajx =2es^y =2eegas the set of intermediate-arcs, and
aeµ f(x; y)2ajy2eegas the set of end-arcs.
in contrast to other approaches, we assume only a very limited set of constraints
for a epc to be correct. for an extensive set of constraints see e.g. [19].
de¯nition 4 (syntactically correct epc). anepc = (e; f; c; l; a ) is
called syntactically correct, if it ful¯lls the requirements:
1.epc is a directed and coherent graph such that 8n2n:9e12es; e22ee
such that e1,!n ,!ee
2.jej ¸2. there are at least two events in an epc.
3. events have at most one incoming and one outgoing arc.
8e2e:jeinj ·1^ jeoutj ·1.
4. functions have exactly one incoming and one outgoing arcs.
8f2f:jfinj= 1^ jfoutj= 1.
5. connectors have one incoming and multiple outgoing arcs or multiple in-
coming and one outgoing arc. 8c2c: (jcinj= 1^ jcoutj>1)_(jcinj>
1^ jcoutj= 1). if a connector does not have multiple incoming or multiple
outgoing arcs, it is treated as if it was an event.
3.2 epc semantics based on state and context
in this subsection, we introduce a novel formalization of the epc semantics. the
principal idea of these semantics lends some concepts from langner, schneider,
and wehler [10] and adapts the idea of boolean nets with true and false tokens in
an appropriate manner. the reachability graph that we will formalize afterwards
depends on the state and the context of an epc. the state of an epc is basically
an assignment of positive and negative tokens to the arcs. positive tokens signal
which functions have to be carried out in the process, negative tokens indicate
which functions are to be ignored. in order to signal or-joins that it is not
possible to have a positive token on an incoming branch, we de¯ne the context
of an epc. the context assigns a status of wait ordead to each arc of an epc.
a wait context indicates that it is still possible that a positive token might
arrive; a dead context status means that no positive token can arrive anymore.7
for example, xor-splits produce a dead context on those output branches that
are not taken and a wait context on the output branch that receives a positive
token. a dead context at an input arc is then used by an or-join to determine
whether it has to synchronize with further positive tokens or not.
de¯nition 5 (state and context). for an epc = (e; f; c; l; a ) the map-
ping ¾:a! f¡ 1;0;+1gis called a state of an epc . the positive token
captures the state as it is observed from outside the process. it is represented by
a black circle. the negative token depicted by a white circle with a minus on it
has a similar semantics as the negative token in the boolean nets formalization.
arcs with no state tokens on them have no circle depicted. furthermore, the
mapping ·:a! fwait; dead gis called a context of an epc . a wait context is
represented by a wand a dead context by a dnext to the arc.
in contrast to petri nets we distinguish the terms marking and state: the term
marking refers to state ¾and context ·collectively.
de¯nition 6 (marking of an epc). for a syntactically correct epc the
mapping m:a! f¡ 1;0;+1g £ f wait; dead gis called a marking. the set of all
markings mof an epc is called marking space with m=a£ f¡ 1;0;+1g £
fwait; dead g. the projection of a given marking mto a subset of arcs sµais
referred to as ms. if we refer to the ·- or the ¾-part of m, we write ·mand¾m,
respectively, i.e. m(a) = (¾m(a); ·m(a)).
the propagation of context status and state tokens is arranged in a four phase
cycle: (1) dead context, (2) wait context, (3) negative token, and (4) positive
token propagation. whether a node is enabled and how it ¯res is illustrated in
figure 3. a formalization of the transitions for each phase is presented in [25].
1.in the ¯rst phase, all dead context information is propagated in the epc
until no new dead context can be derived.
2.then, all wait context information is propagated until no new wait context
can be derived. it is necessary to have two phases (i.e., ¯rst the dead context
propagation and then the wait context propagation) in order to avoid in¯nite
cycles of context changes (see [25]).
3.after that, all negative tokens are propagated until no negative token can be
propagated anymore. this phase cannot run into an endless loop (see [25]).
4.finally, one of the enabled nodes is selected and propagates positive tokens
leading to a new iteration of the four phase cycle.
in order to set the start and the end point of the four phases, we de¯ne the
initial and the ¯nal marking of an epc similar to the de¯nition in rump [26].
de¯nition 7 (initial marking of an epc). for an epc i µmis de¯ned
as the set of all possible initial markings, i.e. m2iif and only if3:
{9as2as:¾m(as) = +1,
3note that the marking is given in terms of arcs.8
(c)
(e)(a) (b) d
d
d
d
ddd
(g) d
d
d(d)d d(f)d
d
(h)
ddd d
dd d
dddw w
w w
w
w
w
w
w www
w
w
w
w
w
w(a)
(b)
(c)
(d)d d
ddd(a)
(b)(f) w
dw
w
w
dw
w
(c)w w
w d(e)w
dw
w
(d)w
sw
ww
wdw
ww
w
dw
ww
dw
w
w w
w d(a)
(b)d
wd
d
d
wd
d(c)d d
d w(d)d
wd
d
d
wd
dd d
d w1) dead context propagation 
2) wait context propagation 
4) positive state propagation 
3) negative state 
propagation 
fig. 3. propagation of context and state in four phases9
{8as2as:¾m(as)2 f¡ 1;+1g,
{8as2as:·m(as) =wait if¾m(as) = +1 and
·m(as) =dead if¾m(as) =¡1, and
{8a2aint[ae:·m(a) =wait and¾m(a) = 0.
de¯nition 8 (final marking of an epc). for an epc o µmis de¯ned
as the set of all possible ¯nal markings, i.e. m2oif and only if:
{9ae2ae:¾m(ae) = +1 and
{8a2aint[as:¾m(a)·0.
initial and ¯nal markings are the start and end points for calculating the reach-
ability graph of an epc. in this context a marking m0is called reachable4from
another marking mif and only if after applying the phases of dead and wait
context and negative token propagation on m, there exists a node nwhose ¯ring
in the positive token propagation phase produces m0. then, we write mn!m0,
or only m!m0if there exists some node nsuch that mn!m0. furthermore, we
write m1¿!mqif there is a ¯ring sequence ¿=n1n2:::nq¡1that produces from
marking m1the new marking mqwith m1n1!m2; m2n2!:::nq¡1!mq. if there
exists a sequence ¿exists such that m1¿!mq, we write m1¤!mq. accordingly,
we de¯ne the reachability graph rgas follows.
de¯nition 9 (reachability graph of an epc). rgµmrg!n£mrg
is called the reachability graph of an epc if and only if:
(i)8i2i:i2mrg.
(ii)8m; m02rg: (m; n; m0),mn!m0.
e1
c1
e3f1 f2 e2c3c2
c4
c7c8e4
c9
f3 f4c5
c6e5
c10 e1
c1
e3f1 f2 e2c3c2
c4
c7c8e4
c9
f3 f4c5
c6e5
c10 e1
c1
e3f1 f2 e2c3c2
c4
c7c8e4
c9
f3 f4c5
c6e5
c10 w w w
w
ww
ww
ww
w
w
www
www
ww w wd d w
w
ww
ww
ww
w
w
www
www
ww w wd d d
w
ww
dw
ww
d
w
www
www
ww w w
fig. 4. applying the transition relations
based on the previous de¯nitions we can discuss the behavior of the unstruc-
tured example epc of figure 2. this epc and three markings are depicted
in figure 4. the ¯rst marking shows the example epc in an initial marking
4a formalization of reachability is given in [25].10
with all start arcs carrying a positive token represented by a black circle. in
this marking only the xor-join c1 is allowed to ¯re { the other or-joins have
await context on one of their incoming arcs; therefore, they are not allowed
to ¯re. in the second marking a token is propagated from c1, via synchronizing
with the second token at c9, to the and-split c2. the context of the start arcs
has changed to dead, but the arcs between the connectors c1¡c9 and c9¡c2
are still in wait since a token may arrive here via e2 on the loop. in order to
arrive at the third marking , ¯rst the connector c10 has to ¯re. after that both
or-splits c3 and c5 are activated and ¯re a positive token to the left branch
and a negative token to the right branch. after passing functions f1 tof4 we
achieve the current marking with the or-joins c4 and c6 being activated since
both input arcs carry a token (a positive and a negative). after this marking ,
the two positive tokens generated by c4 and c6 synchronize at the and-join c7.
then the loop can be run again, or the end arc can be reached. the loop can be
executed without a problem since both or-joins c9 and c10 have a dead context
on the arcs coming from the start events. therefore, the or-join can ¯re using
the last transition rule of (h) in positive state propagation.
fig. 5. reachability graph for the unstructured example epc
we have implemented the reachability graph calculation as a conversion plug-
in for the prom framework [27]. figure 5 displays the reachability graph of the
unstructured example epc that we used to illustrate the behavioral semantics.
it can be seen that this graph is already quite complex for a small epc. the
complexity of this example basically stems from three facts. first, there are
seven di®erent initial markings. second, parts of the loop can be executed in
concurrency. third, there are two or-splits that both can activate either one11
or the other or both output arcs. similar to the state explosion in petri nets,
the calculation of the reachability (or coverability) graph can turn out to be
very ine±cient for veri¯cation. therefore, we discuss an epc-speci¯c variant of
soundness and it veri¯cation using reduction rules in the following section.
4 epc veri¯cation based on reduction rules
soundness is an important correctness criterion for business process models in-
troduced in [28]. the original soundness property is de¯ned for a work°ow net,
a petri net with one source and one sink, and requires that (i) for every state
reachable from the source, there exists a ¯ring sequence to the sink (option to
complete); (ii) the state with a token in the sink is the only state reachable from
the initial state with at least one token in it (proper completion); and (iii) there
are no dead transitions [28]. for epcs, this de¯nition cannot be used directly
since epcs may have multiple start and end events. based on the de¯nitions
of the initial and ¯nal marking of an epc, we de¯ne soundness of an epc
analogously to soundness of work°ow nets.
de¯nition 10 (soundness of an epc). anepc is sound if there is a set
of initial markings isuch that:
(i)for each start-arc asthere exists an initial marking i2iwhere the arc (and
hence the corresponding start event) holds a positive token. formally:
8as2as:9i2i:¾i(as) = +1
(ii) for every marking mreachable from an initial state i2i, there exists a
¯ring sequence leading from marking mto a ¯nal marking o2o. formally:
8i2i:8m2m(i¤!m)) 9o2o(m¤!o)
(iii) the ¯nal markings o2oare the only markings reachable from a marking
i2isuch that there is no node that can ¯re. formally:
8m2m:69m0(m!m0))m2o
given this de¯nition, the epcs of figures 1 and figure 2 are sound, and any
initial marking of the second must include the state ¾i(e1; c1) = +1 for all i2i.
related to this soundness de¯nition, we identify a set of reduction rules that
is soundness preserving. a reduction rule t is a binary relation that transforms
a source epc 1to a simpler target epc 2that has less nodes and/or arcs (cf.
e.g. [6]). a reduction rule is bound to a condition that de¯nes for which arcs and
nodes it is applicable. the reduction rules for sound epcs include (1) sequence
elimination, (2) block reduction, (3) simple loop reduction, (4) join reduc-
tion, (5) split reduction, (6) start-join reduction, and (7) split-end reduction
(see figure 6). some of these rules (i.e.,1-5) were de¯ned in previous work by
[5]. in the following we sketch why these rules are soundness preserving for the
given epc semantics de¯nition.
(1) sequence elimination: an element nwith one input and one output arc
can be eliminated. this rule is applicable for functions and intermediate events,
but also connectors with such cardinality can be produced by the other rules. as12
1) sequence elimination 
2) block reduction 
c1
c26) start-join reduction 
7) split-end reduction c1
c2
c1
c2c1
c23) simple loop reduction 4) join reduction 
c1
c2 c2
5) split reduction 
c1
c2c1l(c1)=l(c2) l(c1)=l(c2) 
l(c1)=xor 
l(c2)=xor l(c1)=l(c2) 
fig. 6. soundness preserving reduction rules for epcs
mentioned before in def. 4, these connectors are treated as if they were events.
the idea for proving that the rule preserves soundness can be sketched as follows.
based on the soundness of the unreduced epc 1we have to show that the reduced
epc 2is also sound. in order to meet (i) we consider i2=i1ofepc 1. for (ii)
we consider the node xthat enables n, i.e. m1x!m2, and the ¯ring of n, i.e.
m2n!m3ofepc 1. obviously, in epc 2every marking that corresponds to m3
is reachable from m1by ¯ring x. therefore, still for all markings that can be
reached from some initial marking, some ¯nal marking is reachable. since no
new transitions are introduced, the ¯nal markings are still the only markings
that meet (iii). therefore, epc 2is also sound.
(2) block reduction: multiple arcs from split- to join-connectors of the same
type can be fused to a single arc. this might result in connectors with one input
and one output arc. the above argument also holds for this reduction, but it
must be adapted to cover all states that might be produced by ¯ring c1.
(3) simple loop reduction: the arc from an xor-split to an xor-join
can be deleted if there is also an arc from the join to the split. this rule might
produce connectors with one input and one output arc. the above argument
also holds for this rule.
(4) join reduction: multiple join connectors having the same label are merged
to one join. the above argument on soundness can be adapted here.
(5) split reduction: multiple split connectors are reduced to one split. the
above argument can be adapted for this rule.
(6) start-join reduction: multiple start events that are merged to one start
event. we replace the two joined start events of epc 1in each initial marking13
by the merged start event such that (i) is met for epc 2. since any marking
that is reachable by ¯ring the join in epc 1is also reachable directly from the
start event in epc 2, but no additional marking is reached, (ii) and (iii) hold
respectively for epc 2. therefore, epc 2is sound.
(7) split-end reduction: splits to multiple end events can be reduced to one
end event. the above argument can be adapted for this rule.
fig. 7. examples from the sap reference model
based on these reduction rules, it can be shown that the structured epc of
figure 1 is indeed sound. beyond that, we have implemented the reduction rules
for epcs that are available as aris xml ¯les. figure 7 shows two epcs from
the sap reference model [29]. both these models were analyzed with an existing
veri¯cation approach based on the relaxed soundness criterion [13]. even though
they are relaxed sound, they still have structural problems. using reduction rules
we found that the epcs are not sound according to the de¯nition reported in
this paper. in both models there are or-splits that are joined with an xor. the
website http://wi.wu-wien.ac.at/epc o®ers an interface to the implementation of
the reduction rules. uploading an aris xml ¯le generates an error report such
as shown in figure 7.14
5 contribution and limitations
in this paper we presented a novel semantics de¯nition for epcs covering also
the behavior of the or-join. in contrast to existing semantical proposals for
business process modeling languages with or-joins, our de¯nition provides se-
mantics that are (1) applicable for any epc without imposing a restriction on the
syntax, and (2) intuitive since structuredness of the process model yields sound
behavior. this is an important ¯nding because there is up to now no solution
reported that covers both aspects (1) and (2) in a formalization of the or-join.
furthermore, the reduction rules that we presented and their implementation
as a web interface are a useful tool for the veri¯cation of epcs. in particular,
the start-join and the split-end reduction rule directly address the de¯nition of
a soundness notion for epcs. moreover, they provide a novel solution for the
problem of multiple start and end events in an epc which is not appropriately
covered by existing approaches so far. still, our approach has a limitation with
respect to the completeness of the reduction rules. while for free-choice petri
nets there is a complete set of reduction rules, this completeness is not achieved
by the seven rules for epcs. in future work, we aim to enhance our set by adding
further rules in order to provide for an e±cient veri¯cation of epc soundness.
references
1.keller, g., nä uttgens, m., scheer, a.w.: semantische prozessmodellierung auf
der grundlage \ereignisgesteuerter prozessketten (epk)". heft 89, institut fä ur
wirtschaftsinformatik, saarbrä ucken, germany (1992)
2.kindler, e.: on the semantics of epcs: resolving the vicious circle. data knowl.
eng.56(2006) 23{40
3.sadiq, w., orlowska, m.e.: applying graph reduction techniques for identifying
structural con°icts in process models. in jarke, m., oberweis, a., eds.: proc. of
caise'99. vol. 1626 of lncs (1999) 195{209
4.kiepuszewski, b., ter hofstede, a.h.m., bussler, c.: on structured work°ow mod-
elling. in wangler, b., bergman, l., eds.: proc. of caise'00. vol. 1789 of lncs
(2000) 431{445
5.van dongen, b., van der aalst, w., verbeek, h.m.w.: veri¯cation of epcs: using
reduction rules and petri nets. in pastor, o., e cunha, j.f., eds.: proc. of caise'05.
vol. 3520 of lncs (2005) 372{386
6.esparza, j.: reduction and synthesis of live and bounded free choice petri nets.
information and computation 114(1994) 50{87
7.van der aalst, w., hirnschall, a., verbeek, h.: an alternative way to analyze
work°ow graphs. in banks-pidduck, a., mylopoulos, j., woo, c., ozsu, m., eds.:
proc. of caise'02. vol. 2348 of lncs. (2002) 535{552
8.chen, r., scheer, a.w.: modellierung von prozessketten mittels petri-netz-
theorie. heft 107, institut fä ur wirtschaftsinformatik, saarbrä ucken. (1994)
9.rittgen, p.: paving the road to business process automation. in: proc. of ecis
2000. (2000) 313{319
10.langner, p., schneider, c., wehler, j.: petri net based certi¯cation of event
driven process chains. in j. desel and m. silva, ed.: application and theory of
petri nets. vol. 1420 of lncs. (1998) 286{30515
11.leymann, f., altenhuber, w.: managing business processes as an information
resource. ibm systems journal 33(1994) 326{348
12.van der aalst, w.: formalization and veri¯cation of event-driven process chains.
information and software technology 41(1999) 639{650
13.dehnert, j., rittgen, p.: relaxed soundness of business processes. in dittrick,
k.r., geppert, a., norrie, m.c., eds.: proc. of caise'01. vol. 2068 of lncs (2001)
151{170
14.nä uttgens, m., rump, f.j.: syntax und semantik ereignisgesteuerter prozessketten
(epk). in j. desel, m. weske, ed.: promise'02. vol. 21 of lni. (2002) 64{77
15.van der aalst, w., desel, j., kindler, e.: on the semantics of epcs: a vicious
circle. in m. nä uttgens and f. j. rump, ed.: proc. of epk'02. (2002) 71{79
16.van der aalst, w., ter hofstede, a.: yawl: yet another work°ow language.
information systems 30(2005) 245{275
17.hee, k., oanea, o., serebrenik, a., sidorova, n., voorhoeve, m.: work°ow model
compositions perserving relaxed soundness. in dustdar, s., fiadeiro, j.l., sheth,
a., eds.: proc. of bpm 2006. vol. 4102 of lncs (2006) 225{240
18.mendling, j., moser, m., neumann, g.: transformation of yepc business process
models to yawl. in: proc. of acm sac, volume 2 (2006) 1262{1267
19.mendling, j., van der aalst, w.: towards epc semantics based on state and
context. in m. nä uttgens and f. j. rump and j. mendling, ed.: proc. of epk'06
(2006) 25{48
20.wynn, m., edmond, d., van der aalst, w., ter hofstede, a.: achieving a general,
formal and decidable approach to the or-join in work°ow using reset nets.
in ciardo, g., darondeau, p., eds.: applications and theory of petri nets 2005.
vol. 3536 of lncs (2005) 423{443
21.leuschel, m., lehmann, h.: coverability of reset petri nets and other well-
structured transition systems by partial deduction. in lloyd, j.w. et al., eds.:
proc. of computational logic 2000. vol. 1861 of lncs (2000) 101{115
22.finkel, a., schnoebelen, p.: well-structured transition systems everywhere! the-
oretical computer science 256(2001) 63{92
23.wynn, m., van der aalst, w., ter hofstede, a., edmond, d.: verifying work°ows
with cancellation regions and or-joins: an approach based on reset nets and
reachability analysis. in dustdar, s., fiadeiro, j., , sheth, a., eds.: proc. of bpm
2006. vol. 4102 of lncs (2006) 389{394
24.lin, h., zhao, z., li, h., chen, z.: a novel graph reduction algorithm to identify
structural con°icts. in: proc. of hicss. (2002) 289
25.mendling, j.: detection and prediction of errors in epc business process models.
ph.d. thesis, vienna university of economics and business administration (2007)
26.rump, f.j.: geschä aftsprozessmanagement auf der basis ereignisgesteuerter pro-
zessketten - formalisierung, analyse und ausfä uhrung von epks. teubner (1999)
27.van dongen, b., medeiros, a., verbeek, h., weijters, a., van der aalst, w.: the
prom framework: a new era in process mining tool support. in ciardo, g.,
darondeau, p., eds.: application and theory of petri nets 2005. volume 3536 of
lncs., springer-verlag, berlin (2005) 444{454
28.van der aalst, w.: veri¯cation of work°ow nets. in az¶ ema, p., balbo, g., eds.:
application and theory of petri nets 1997. vol. 1248 of lncs (1997) 407{426
29.keller, g., teufel, t.: sap(r) r/3 process oriented implementation: iterative
process prototyping. addison-wesley (1998)