workÔ¨Çow support using proclets: divide, interact, and conquer
w.m.p. van der aalst and r.s. mans and n.c. russell
eindhoven university of technology,
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
w.m.p.v.d.aalst@tue.nl
abstract
classical workÔ¨Çow notations primarily support monolithic processes. they are able to describe the life-
cycle of individual cases and allow for hierarchical decomposition. unfortunately, real-life processes
are fragmented and are often composed of separate but intertwined life-cycles running at different speeds
and coping with different levels of granularity. the proclets framework was one of the Ô¨Årst formalisms
to acknowledge this. proclets are lightweight interacting processes that can be used to divide complex
entangled processes into simple fragments and, in doing so, place increased emphasis on interaction-
related aspects of workÔ¨Çows. this paper describes the proclets approach and presents an application of
this approach to the gynecological oncology workÔ¨Çow process at a major dutch hospital.
1 introduction
although most information systems are ‚Äúprocess aware‚Äù the support for various aspects of operational pro-
cesses leaves much to be desired. for example, workÔ¨Çow technology is mostly used to automate repetitive
well-structured processes. there is little support for less structured processes that require more Ô¨Çexibility. as a
consequence of the widespread adoption of database technology in the seventies, the development of informa-
tion systems is predominantly data-centric , i.e., the design and implementation starts with object/information
modeling. however, since the nineties, consultants and vendors have been advocating more process-centric
approaches. today, the majority of larger organizations spend considerable time identifying and modeling pro-
cesses. business process management (bpm) techniques and tools support these more process-centric ap-
proaches and have received considerable attention. however, when looking at the actual implementations of
information systems there is still a mismatch between the processes modeled and reality (i.e., the real systems
and processes).
this mismatch has several reasons. one is that most actors have a simplistic and often incorrect view of the
processes in which they are involved. process mining techniques can be used to provide a more realistic view
of their actuality [3]. it is often the case that processes are more complex and ‚Äúspaghetti-like‚Äù than we expect.
reality cannot be captured in a structured monolithic workÔ¨Çow model. another reason is that an effective
balance/integration between/of the data perspective and the process perspective is missing. it is impossible to
separate these perspectives. moreover, it is obvious that the process-centric approaches used in the initial phases
of workÔ¨Çow speciÔ¨Åcation do not Ô¨Åt well with the predominant data-centric implementation approaches.
copyright 0000 ieee. personal use of this material is permitted. however, permission to reprint/republish this material for
advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any
copyrighted component of this work in other works must be obtained from the ieee.
bulletin of the ieee computer society technical committee on data engineering
1currently, there is a renewed interest in the mismatch described above. this is illustrated by the recent
nsf workshop on data-centric workÔ¨Çows that took place in arlington (virginia) in may 2009. (see [5] for
the workshop report.) during this workshop there was consensus that processes cannot be straightjacketed in
monolithic workÔ¨Çows and that the interplay between data and control-Ô¨Çow is essential.
in this paper, we advocate the use of proclets , one of the Ô¨Årst modeling languages to address these problems
[1, 2]. proclets can be seen as lightweight interacting processes. the proclets framework be used to integrate
data-centric and process-centric approaches at both the design and implementation level [1, 2]. to illustrate the
framework and the ideas behind it, the gynecological oncology workÔ¨Çow at the amc hospital in the nether-
lands is modeled in terms of proclets.
in the remainder of this paper we Ô¨Årst discuss the limitations of ‚Äúmonolithic workÔ¨Çows‚Äù (section 2), followed
by a brief introduction to the proclets framework (section 3). in section 4, we describe the application of proclets
at a dutch hospital. section 5 concludes the paper.
2 limitations of monolithic workÔ¨Çows
proclets aim to address the following problems that existing workÔ¨Çow approaches are currently facing:
models need to be artiÔ¨Åcially Ô¨Çattened and are unable to account for the mix of different perspectives and
granularities that coexist in real-life processes.
cases need to be straightjacketed into a monolithic workÔ¨Çow while it is more natural to see processes as
intertwined loosely-coupled object life-cycles.
it is impossible to capture the fact that one-to-many andmany-to-many relationships exist between entities
in a workÔ¨Çow, yet such relationships are common as can be seen in any data/object model.
it is difÔ¨Åcult to model interactions between processes, i.e., interaction is not a Ô¨Årst-class citizen in most
process notations.
in the remainder, we use proclets to address the problems that are experienced in monolithic workÔ¨Çows.
3 proclets: lightweight interacting processes
aproclet can be seen as a lightweight workÔ¨Çow process able to interact with other proclets that may reside at
different levels of aggregation [1, 2]. one can think of proclets as objects equipped with an explicit life-cycle
or as active documents. recently, this has been referred to as artifact centric workÔ¨Çows/processes [4]. proclets
interact via channels . a channel is the medium used to transport messages from one proclet to another. via a
channel, a message can be sent to a speciÔ¨Åc proclet or a group of proclets (i.e., multicast). such messages are
called performatives since they correspond to explicit actions such as those found in speech act theory and the
language/action perspective. based on the properties of the channel, different kinds of interaction are supported,
e.g., push/pull, synchronous/asynchronous, and verbal/non-verbal. proclets are connected to channels via ports .
each port has two attributes: (a) its cardinality and (b) its multiplicity . the cardinality speciÔ¨Åes the number
of recipients of performatives exchanged via the port. the multiplicity speciÔ¨Åes the number of performatives
exchanged via the port during the lifetime of any instance of the class. the life-cycle of a particular type
of proclet and its ports are speciÔ¨Åed in terms of a proclet class . using these concepts, complex monolithic
workÔ¨Çow deÔ¨Ånitions describing the control Ô¨Çow of an entire process can be broken up into smaller interacting
proclets, i.e., there is a shift in emphasis from control to communication .
proclets were introduced in the late nineties [1, 2]. in the original publications a variant of petri nets, called
workÔ¨Çow nets , was used as a basis. however, the main ideas are independent of the control-Ô¨Çow language
2*,1
take blood 
sample 
select lab 
tests 
receive 
result1,*1,1
perform 
test
make 
report 1,1
perform 
additional 
test1,? 
provide 
new result1,? determine 
need for 
more tests 
send 
report*,1lab test
receive 
updated 
result1,*his order system lab visit
(a) two proclet classes connected through two chann els lab test
(b) class diagram containing 
the two proclet classes 1..1
1..* requires 
*,1 1,1order system 
(c) examples of port attributes *,1output port with cardinality * (zero or more recipients) and multiplicity 1 (precisely one occurrence)
1,+output port with cardinality 1 (precisely one recipient) and multiplicity + (at least one occurrence)
1,? input port with cardinality 1 and multiplicity ? (at most one occurrence)finish lab 
visitfinish lab 
testlab visitfigure 1: example using two proclet classes: lab visit andlab test .
utilized. therefore, we use the yawl language rather than workÔ¨Çow nets, because yawl is more expressive
and supported by an extensive set of tools (editor, workÔ¨Çow engine, process mining, services, veriÔ¨Åcation,
simulation, etc.). see www.yawl-system.com for more information on the language and supporting tools.
figure 1(a) shows two proclet classes. proclet class lab visit consists of seven tasks and Ô¨Åve ports and
describes the process of taking a blood sample, ordering lab tests, and consolidating the results into a report.
proclet class lab test has Ô¨Åve tasks and Ô¨Åve ports and describes the life-cycle of a particular test. note that for
one blood sample many lab tests may be initiated. hence there is a one-to-many relationship between lab visit
andlab test as shown by the relationship requires in the class diagram in figure 1(b). the two proclet classes
are connected through two channels ( order system andhis). the mapping of ports to channels is shown in
figure 1(a).
the control-Ô¨Çow in each proclet class is expressed in terms of the yawl notation. first, an instance (i.e.
proclet) of class lab visit is created. after creation a blood sample is taken and lab tests are ordered. the output
port of select lab tests has cardinality , indicating that the performative is sent to potentially multiple recipients
(i.e., lab tests). we will use to denote an arbitrary number of recipients, +to denote at least one recipient,
1to denote precisely one recipient, and ?to denote no or just a single recipient. the performative is passed
on via the channel order system and instantiates the proclet class lab test potentially multiple times, i.e., one
proclet is created for every lab test that needs to be executed. the multiplicity of the output port of select lab
tests is denoted by the number 1. this means that during the lifetime of an instance of class lab visit exactly one
performative is sent via this port. the input port of the input condition of the lab test proclet has cardinality 1 and
multiplicity 1. in each created lab test proclet a test is performed and the report is sent back to the ‚Äúparent‚Äù lab
visit proclet via the channel his. note that the input port of task receive result has cardinality 1 and multiplicity
, indicating that multiple results may be received. each performative received is stored in a knowledge base.
3input: additional 
information , mdm , tests
output: visit, additional 
information , mdms , testsinput: tests
output: visit, mdms , 
tests, pathology
visit
input: request
output: result input: request, 
conclusion
output: preliminary 
result, final result
additional information
input: request, 
additional information,
output: conclusion, 
additional info , 
mdms , final result     input: request, test, 
additional information , 
output: conclusion, tests , 
additional information ,
mdms , final result
multi-disciplinary 
meeting 
(mdm)      input: request, mdms , 
tests
output: mdms , tests , 
additional information , 
final resultinput: request
output: preliminary 
result, 
final resultinput: request
output: final resultinput: request, 
conclusion
output: preliminary 
resultinput: request
output: final result
external: tests
testvisit outpatient clinicexamination under 
anesthetic
obtain gynecology data radiology revision pathology
radiology meeting mdo meeting pathology meetingpre-assessment lab ecgctmrix-ray
follows_80..*follows_1
preceding_11..1
0..*
0..*1..1
follows_2
preceding_20..*
0..*0..1
0..1
testsfollows_3
preceding_30..* 0..*
0..10..1follows_5preceding_50..*
0..*
0..1
0..1follows_4
preceding_40..*0..10..1
follows_6preceding_6
0..*0..*
0..*
0..*class diagram
follows_70..1 0..1
t1 t2 t3 t4
a1 a2
m1 m2 m3initial phase
input:
output: visit, 
additional information, 
mdms, tests
0..*
0..1
preceding_8preceding_7figure 2: class diagram outlining the concepts that exist within the healthcare process and their relationships.
thelab visit proclet continuously inspects this knowledge base and may decide to start analyzing the results to
see if more tests are needed. if so, these are ordered in one go by the task determine need for more tests . note
that the cardinality of the output port of this task is , i.e., in one step all relevant lab test proclets are triggered
in order to perform any additional tests. after this the new results are sent from the various lab test proclets to
the ‚Äúparent‚Äù lab visit proclet. finally, the task Ô¨Ånish lab visit triggers the completion of all child lab test proclets
that may have been initiated.
the example in figure 1 is rather simplistic and hides many details, but at the same time it compactly
illustrates the main features of proclets. for more details on the formalism we refer the reader to [1, 2]. note
that in figure 1 interaction is modeled explicitly and there is no need to artiÔ¨Åcially Ô¨Çatten the process into a
monolithic workÔ¨Çow, instead, the different levels of granularity are preserved. for more complex situations
involving not only one-to-many relationships (as in figure 1(b)) but also many-to-many relationships, it is still
possible to model the overall process as a collection of intertwined loosely-coupled object life-cycles whilst it
4examination 
under
anestheticobtain 
gynecology 
data
radiology 
revision
pathology
radiology meeting mdo meeting pathology meetingpre-
assessment
lab
ecgctmrix-ray
initial phase
visit outpatient 
clinic1,?
1,?
1,1
1,?
1,?
1,?1,?
1,?1,11,1
1,?
1,?
1,?1,?1,1
1,?1,?
1,11,?1,?1,?
1,11,?
1,?1,1
1,?1,?
1,?
1,?1,1
1,11,?
1,?1,?
1,?
1,?1,1
1,11,?
1,?
1,?1,?
1,?1,?1,?
1,?1,?
1,?
1,?
1,?1,?
1,?1,?
1,?1,?
1,?
1,?1,?1,?
1,?*,1
1,**,1
*,1
*,11,*
1,*1,*1,*1,*1,1
*,1
1,*1,*
1,*1,*
*,1*,1
*,1*,1
1,*1,*
*,1
*,1
*,1 *,11,1
1,*
1,*
1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?1,?1,?1,?1,?1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?
1,?
1,?1,?
1,?
1,?1,?
1,?
1,?
1,?
1,?
1,?1,?
1,?
1,*
*,1
1,*
*,1
1,**,1
*,1
*,1
*,1
*,1
*,1*,1
*,1
*,1
*,1
*,1
1,1
1,11,*
1,*
1,*
1,*1,?1,?
*,1figure 3: the proclets that are deÔ¨Åned for the healthcare process and all the possible interactions between them.
would be virtually impossible to straightjacket the desired behavior into a monolithic workÔ¨Çow process.
note that there is a strong correspondence between proclet classes and classes in a class diagram carrying
the same name. a class in a class diagram outlines the data a proclet class carries with it and its relationship
with other proclets. via object constraint language (ocl) expressions it is possible to access data of different
proclets.
4 application: gynecological oncology workÔ¨Çow at the amc
we have used proclets to model the gynecological oncology workÔ¨Çow at the academic medical center (amc)
in amsterdam. the amc is the most prominent medical research center in the netherlands and one of the
largest hospitals in the country.
given the complexity of the process and space limitations, we focus only on the main results. in total, 15
5prepare pathology 
meetingpathology meetingpathology,
administrative staffpathology,
pathologistgo, doctorpathology meeting
visit_oc.
output_mdms.
pathology_meeting.r
initial_phase.
output_mdms.
pathology_meeting.r
mdo_meeting.
output_mdms.
pathology_meeting.r
pathology_meeting.
output_mdms.
radiology_meeting.rexamination_
under_
anesthetic.
output_mdms.
pathology_meeting.r
pathology.send_report.pathology_
meeting.spathology_meeting.
output_make_conclusion.
pathology.s
pathology_meeting.
output_additional_
information.
pathology.
receive_fax.spathology_meeting.
output_additional_information.
pathology.
additional_investigation.spathology_meeting.
output_mdms.
pathology_
meeting.spathology_meeting.
end_pathology_
meeting.
mdo_meeting.s
1,*
1,*
1,*
1,*
1,*
1,*
*,1
*,1*,1*,11,1
create pathology 
meeting
receive pathology 
reportregister for meeting
(via ex. under 
anesthetic proclet)
register for meeting
(via visit outpatient 
clinic proclet)
register for meeting
(via initial phase 
proclet)
register for meeting
(via mdo meeting 
proclet)
register for meeting
(via radiology 
meeting proclet)end pathology 
meetingmake conclusion
request registration 
for pathology 
meetingrequest pathology 
slidesrequest additional 
coloringsgo, doctor go, doctor go, doctorfigure 4: the pathology meeting proclet.
proclet classes have been identiÔ¨Åed for the gynecological oncology workÔ¨Çow. figure 2 shows a class diagram
illustrating the relationships between the proclet classes. the dark rectangles correspond to concrete proclet
classes. the inheritance relationships show which proclet classes have common features, i.e., the gray and white
rectangles can be seen as abstract classes used to group and structure proclets. moreover, as in figure 1(b) the
relationships between the various classes are depicted.
the 15 proclet classes identiÔ¨Åed in figure 2 are connected to other proclet classes via the port and channel
concepts. figure 3 shows a high-level view of the interconnection structure. this diagram shows the complexity
of the process. given the different levels of granularity it is difÔ¨Åcult (if not practically intractable) to Ô¨Çatten this
structure into a monolithic workÔ¨Çow model.
each of the rectangles in figure 3 represents a proclet class and its ports. figure 4 shows one example. here
the control-Ô¨Çow and the names of the ports and their cardinalities and multiplicities are shown. the proclet class
models the weekly meeting in which the gynecological oncology doctors and a pathologist discuss the tissues
examined by the pathologist that require further consideration. during this meeting, the tissues of multiple
patients are discussed. for each weekly meeting, a separate proclet is created ( create pathology meeting ). in
order to discuss a tissue of a patient, it Ô¨Årst needs to be registered ( register for pathology meeting ). this can
be done at different points in the process. however, as is indicated by the cardinality 1 and multiplicity of
the associated ports, multiple patients can be registered using the same port. note that after the weekly meeting
(pathology meeting ), pathology examinations can be triggered for multiple patients. for example, as is indicated
by the cardinality and multiplicity 1 of the associated port of task request additional colorings , multiple tissues
may be reinvestigated by a pathologist.
in this paper, it is impossible to give a more comprehensive description of the process and its 15 proclet
classes. instead, we refer the reader to [6] for an extensive description of the model.
5 conclusion: divide, interact, and conquer
in this paper we have advocated the use of proclets to overcome the problems related to monolithic workÔ¨Çows.
proclets are particularly suited to environments where processes are fragmented, interaction is important, and
6tasks are done at different levels of granularity, e.g., healthcare processes where a visit to a doctor can trigger a
wide range of tests and experiments. the next challenge is to provide advanced tool support for the design, anal-
ysis, and enactment of proclets. for example, proclets-based veriÔ¨Åcation and process discovery pose interesting
and challenging research questions.
references
[1] w.m.p. van der aalst, p. barthelmess, c.a. ellis, and j. wainer. workÔ¨Çow modeling using proclets. in
o. etzion and p. scheuermann, editors, 7th international conference on cooperative information sys-
tems (coopis 2000) , volume 1901 of lecture notes in computer science , pages 198‚Äì209. springer-verlag,
berlin, 2000.
[2] w.m.p. van der aalst, p. barthelmess, c.a. ellis, and j. wainer. proclets: a framework for lightweight
interacting workÔ¨Çow processes. international journal of cooperative information systems , 10(4):443‚Äì482,
2001.
[3] w.m.p. van der aalst, h.a. reijers, a.j.m.m. weijters, b.f. van dongen, a.k. alves de medeiros,
m. song, and h.m.w. verbeek. business process mining: an industrial application. information sys-
tems, 32(5):713‚Äì732, 2007.
[4] k. bhattacharya, c. gerede, r. hull, r. liu, and j. su. towards formal analysis of artifact-centric
business process models. in g. alonso, p. dadam, and m. rosemann, editors, international conference
on business process management (bpm 2007) , volume 4714 of lecture notes in computer science , pages
288‚Äì304. springer-verlag, berlin, 2007.
[5] r. hull and j. su. research challenges in data-centric workÔ¨Çow. arlington, virginia, 2009 (to appear).
[6] r.s. mans, n.c. russell, w.m.p. van der aalst, a.j. moleman, and p.j.m. bakker. proclets in healthcare.
bpm center report bpm-09-05, bpmcenter.org, 2009.
7