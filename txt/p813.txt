exploring processes and deviations
sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
eindhoven university of technology, the netherlands
fs.j.j.leemans, d.fahland, w.m.p.v.d.aalst g@tue.nl
abstract in process mining, one of the main challenges is to discover a process
model, while balancing several quality criteria. this often requires repeatedly set-
ting parameters, discovering a map and evaluating it, which we refer to as process
exploration . commercial process mining tools like disco, perceptive and celonis
are easy to use and have many features, such as log animation, immediate param-
eter feedback and extensive ﬁltering options, but the resulting maps usually have
no executable semantics and due to this, deviations cannot be analysed accu-
rately. most more academically oriented approaches (e.g., the numerous process
discovery approaches supported by prom) use maps having executable semantics
(models), but are often slow, make unrealistic assumptions about the underlying
process, or do not provide features like animation and seamless zooming. in this
paper, we identify four aspects that are crucial for process exploration: zooma-
bility ,evaluation ,semantics , and speed . we compare existing commercial tools
and academic workﬂows using these aspects, and introduce a new tool, that aims
to combine the best of both worlds. a feature comparison and a case study show
that our tool bridges the gap between commercial and academic tools.
keywords: process exploration, multi-perspective process mining, process deviation
visualisation, conformance analysis
1 introduction
process mining, and in particular process discovery, have gained traction as a technique
for analysing actual process executions from event data recorded in event logs. process
mining is typically used to learn whether, where, and how a process deviated from the
intended behaviour. however, such information is usually not obtained by just running a
single algorithm on an event log. a wide variety of (combinations of) algorithms can be
used [20,19,18,2,14], typically heavily relying on various parameter settings to reveal
and analyse speciﬁc aspects and features of a process, depending on the speciﬁc inter-
ests of the process stakeholder. here we coin the term process exploration which refers
to repeated parameter selection and tuning, iteratively performing process discovery,
and continuously evaluating the resulting process map [1].
interestingly, academic and commercial process mining tools support different as-
pects of process exploration. in this paper, we demonstrate that process exploration can
be improved by combining beneﬁcial features of academic and commercial tools. ex-
isting commercial and some academic tools for process exploration, such as the fuzzy
miner (fm) [11], fluxicon disco (fd) [12], celonis discovery (cd) and perceptive2 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
process mining (pm), are based on showing directly-follows graphs: nodes are pro-
cess steps, and in general edges mean that an activity followed another. thus, one can
inspect the process by considering the arrows between them. these visualisations are
intuitive, an example is shown in figure 1, and some tools allow for extensive log ﬁl-
tering. although directly-follows graph-based maps are useful for global analysis, they
have some limitations. for instance, pure directly-follows based maps do not show par-
allelism, implying that in a map, the state of the system unrealistically solely depends
on the last executed process step. some tools support parallelism by sacriﬁcing exe-
cutable semantics, but their maps cannot be used for automated analysis ; the maps do
not show crucial features (e.g., types of splits and joins) and it is impossible to reason
over them (e.g., which traces are possible). (in this paper, we refer to a process map
with executable semantics as a process model .)
figure 1: example of a process
map, discovered by perceptive.to evaluate a model with respect to its event
log, several established quality metrics exist, for
instance ﬁtness, precision and generalisation [7].
fitness describes what part of the log is expressed
by the model, precision what part of the model is
present in the log, and generalisation what part of
future behaviour will be expressible by the model.
while useful for model comparison, these mea-
sures are coarse grained: they provide a number
for a model. using more ﬁne-grained measures
and visualisations, a detailed analysis of where
the model deviates from the log and where other
problems occur can be performed . these evalu-
ations require executable semantics and certain
guarantees, for instance that the model contains
no deadlocks, livelocks or other anomalies: that the model is sound . on an unsound
model, for instance, only an upper bound of ﬁtness can be computed reliably [13]. only
if a discovered process map is sound and has executable semantics, its quality with
respect to the event log can be assessed accurately.
academic tools are usually focused, powerful and the maps produced by them usu-
ally have executable semantics. therefore, deviations and quality metrics can be stud-
ied. however, academic tools or plug-ins are often designed for one particular pur-
pose, and combining tools, if possible, challenges usability. the prom framework [9]
streamlines cooperation between tools, as input and output formats of plug-ins of the
framework are standardised. however, consider for instance a typical process explo-
ration workﬂow in the prom framework: to mine a model from a log using ilp miner
and assessing the quality of the model, one has to click through 10 pop-up screens of
parameters and options.
in this paper, we aim to bridge this gap between commercial and academic tools
by introducing a process exploration tool, inductive visual miner (ivm), that provides
the features of commercial tools and aims to be as user-friendly, while providing maps
with semantics and built-in deviation visualisation. we consider some desirable features
from both commercial and academic tools, and describe how ivm improves on them.exploring processes and deviations 3
a prototype of ivm has been implemented as a plug-in of the prom framework and
is available for download from http://promtools.org. we perform a feature comparison
and a case study on real-life logs.
the remainder of this paper is organised as follows: we ﬁrst provide some back-
ground on process exploration. in section 3 we analyse existing process exploration
tools and discuss design decisions for ivm. a high-level feature comparison and a case
study are performed in section 4; section 5 concludes the paper.
2 process exploration
process exploration enables users to learn information from an event log. in this section,
we ﬁrst give an example of a process exploration case study, after which four aspects of
process exploration are explored: zoomability, evaluation, speed and semantics.
example. we illustrate process exploration using the winning case study of bpic12 [4].
in this case study, ﬁrst a high-level overview was generated to get an initial idea of the
complexity of the given event log. the complexity was reduced by applying activity and
life cycle ﬁlters to the event log. next, a ﬁlter leaving only successful traces was applied
and a high-level map was created, showing the ‘happy ﬂow’ through the process, i.e.
the path taken by an average trace. on this happy ﬂow, business impact was measured,
i.e. how many traces were successful or rejected with respect to each activity in the
happy ﬂow, leading for instance to the conclusion that “nearly 23% of the applications
that go to validation stage are declined, indicating possibilities for tightening upfront
scrutiny at application or offer stage”. further on in the case study, an analysis was
made whether the outcome of a trace (successful or rejected) was predictable during
execution, which for instance led to the conclusion that “slow moving applications had
a less than 6% chance of getting to approval”. the authors note that this analysis, which
was performed using decision tree miners, could be repeated at other stages.
this single case study already clearly shows the repeated process of setting param-
eters, selecting ﬁlters, generating process maps and continuously evaluating the results.
zoomability. in the case study of [4], the log was examined on a high level, and then
repeatedly examined in detail for different perspectives, e.g. by applying ﬁlters and
using both high-level and detailed process maps. compare it to electronic road maps:
users can get a high-level view to see highways, or can zoom in to see alleys. moreover,
different perspectives can be shown, such as bicycle or public transport maps. a process
exploration tool should support similar features by enabling a user adjust the level of
detail in a process map (e.g. highways and alleys) and to ﬁlter it in several ways (e.g.
bycicle maps); we refer to this ability as zoomability .
as the case study shows, a plethora of ﬁltering options must be available: ﬁlters on
event name (preﬁx), frequency, redundancy, data attributes and on resources were all
used. moreover, as used, the tool should be able to provide both a process map showing
only the frequent paths of the process, as well as one with the outliers; i.e. maps with
several levels of noise ﬁltering. many more ﬁlters are imaginable, however giving an
exhaustive list of them is outside the scope of this paper.
another powerful zoomability parameter is time: using log animation, a user can
inspect this time perspective: the event log is visually replayed on the map, which re-4 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
veals frequent paths and bottlenecks over time, and makes concept drift explicit. if an
animation can be paused, it gives a frozen view of the map with the traces that were in
the process at a particular point in time.
evaluation. given that the quality criteria ﬁtness, precision, generalisation and simplic-
ity compete [7], a perfect model often does not exist. any process discovery algorithm
has to make a trade-off between these criteria, so there may be many pareto optimal
models without there being a clear “best” one. for instance, low ﬁtness could indicate
a high-level model that is well-suited for getting the idea, but ill-suited for drawing
high-conﬁdence detailed conclusions. high precision indicates that the model closely
resembles the behaviour of the event log, while a low precision indicates that the model
allows for much behaviour that never happened. a model with bad generalisation has
little predictive value (overﬁts), as it only describes the behaviour of the event log.
more speciﬁcally, for instance the question whether a violation to the four-eyes prin-
ciple occurred, i.e. whether two different persons looked at a certain case, should not
be answered using a model with 80% ﬁtness, as roughly 20% of the behaviour is not
shown in it. another example: a question whether something could happen in the future
should be answered on a model with high generalisation, rather than an overﬁtting one.
thus, conclusions based on discovered models should be drawn carefully while
accounting for the quality criteria, and in order to ﬁnd the best model to answer the
question at hand, a process exploration tool should enable a user to evaluate a map.
a quality measure is typically expressed as a number, e.g., a ﬁtness of 0.8. however,
a single number for a complete model might be less informative. for example, one half
of the process model could have a ﬁtness of 0.6, while the other half might have a ﬁtness
of 1.0. a process exploration tool should provide detailed quality indicators, to locate
problems in speciﬁc parts of the model.
speed. the speed of process exploration is determined by two elements: the learning
curve for users and the responsivity of the tool. many aspects inﬂuence the learning
curve of a tool; we highlight two: the map should use a representation that is easy to
read by people who are not computer scientists, and the learning curve can be more
gradual if the tool invites users to play with its parameters (for which the tool should be
responsive).
responsivity is a challenge that comes with zoomability; exploration requires in-
teraction: a user should neither have to wait long nor have to perform many actions to
adjust the zoom; understanding a process requires a quick and responsive user interface.
semantics & guarantees. as described in the introduction, executable semantics and
guarantees are essential for evaluation in a process exploration tool. executable seman-
tics allow for replay, which enables decision point analysis (which was performed in
the bpic12 case study: for a speciﬁc point in the process it was analysed what made
a trace likely to succeed, and the authors note that they would like to repeat this ex-
periment for other points in the process; using a model, the decision points would be
known, allowing for automation [15]), enables prediction [22], and enables compliance
checking [16].exploring processes and deviations 5
3 existing tools and design decisions
in this section, we analyse existing tools with respect to the requirements discussed
in section 2. meanwhile, we describe the design decisions we made for the inductive
visual miner (ivm).
220
176
218187 203203
188
190199 203175203
200
222209188207
196
213
200199
196
199
193213
199
220
204
193184
e
1000
c
1000
d
1000
b
1000
a
1000
(a) parallelism clutter.
199 196 199 193 213
199 220 204 193 184
e
1000
c
1000
d
1000
b
1000
a
1000
(b) fd. ambiguous.
(c) ivm.
figure 2: examples of tools applied
to a log containing ﬁve parallel activ-
ities.tools. in this paper, we consider the following
commercial tools: fluxicon disco ( fd)1[12],
celonis discovery ( cd)2and perceptive pro-
cess mining ( pm)3. for the academic tools,
we consider three chains of plug-ins within
the prom framework: 1) fuzzy miner [11]
(fm), 2) the chain ( imi-c ), consisting of in-
ductive miner - infrequent (imi) [13], followed
by pnetreplayer [3] and project manifest to
model for conformance, and 3) the chain ( ilp-
c), consisting of ilp miner (ilp) [21], fol-
lowed by pnetreplayer [3] and project man-
ifest to model for conformance. we need to
consider chains of plug-ins to allow for a fair
comparison.
representation and process discovery tech-
nique. the ﬁrst choice to make for a process ex-
ploration tool is what discovery technique and
which representation to use.
the existing tools use three categories of
discovery techniques: directly-follows based
(fd, cd, pm, fm)4, inductive mining (imi)
and optimisation problem mining (ilp). directly-
follows based tools either provide no semantics
(fd, cd, fm) or do not support parallelism
(pm), but are fast and allow for ﬁltering; ilp
provides semantics, and guarantees perfect ﬁt-
ness and best-possible precision, but does not
guarantee soundness; imi strikes a balance: it
is fast, guarantees soundness, can guarantee ﬁt-
ness, and allows for noise ﬁltering.
the learning curve of a tool is important for the speed aspect. we consider the
directly-follows based representations to have the most gradual learning curve, and the
petri net based representations to have the steepest. therefore, in order to obtain the
most gradual learning curve, we design our representation to be as close as possible to
1http://ﬂuxicon.com/disco/ ; april/may 2014
2http://www.celonis.de/en/discover/our-product ; april/may 2014
3http://www.perceptivesoftware.co.uk/products/perceptive-process/process-mining ; fast miner, april/may 2014
4some tools (fm) can also take the eventually-follows relation into account.6 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
the directly-follows based representation, but we add parallelism while keeping seman-
tics.
for logs containing parallelism, directly-follows based tools usually connect all par-
allel activities, which yields clutter. for instance, the parallel execution of 5 activities
yields a clique containing 20 edges (figure 2a). a strategy to reduce this clutter is to
manually ﬁlter out the parallel activities, as done in the bpic12 case study [4]. another
strategy, used in for instance fd and fm, is to ﬁlter these edges (figure 2b). however,
figure 2b looks exactly like the exclusive choice between 5 activities; only the numbers
on the edges, denoting the frequency with which an edge was taken, tell the difference.
so, while ﬁxing parallelism, ambiguity is introduced.
in ivm, behind the scenes we use a variation of imi. internally, imi and ivm use
so-called process trees to ensure sound models. however, the results are shown to the
user using a directly-follows based representation to stay close to that representation
and its learning curve; we extend it with a start state, an end state and petri net places to
provide semantics, those are drawn very small and can be safely ignored by considering
them a way to connect edges; to support parallelism and to avoid parallelism clutter, we
extend it with bpmn parallel gateways (figure 2c). the complete representation is
easily translatable to both bpmn and petri nets.
enrichment. the edges and nodes of the map provide an opportunity to enrich the map
with information from the event log, such as frequency (fd, cd, pm, fm, imi-c, ilp-
c), performance metrics (fd, cd, pm), data, resources, and deviations (pm, imi-c,
ilp-c) (the latter helping towards evaluation). a perfect process exploration tool would
support all of them, and even more, as many measures can provide valuable insight. for
now, we demonstrate that these metrics contributing to zoomability can be added, by
visualising frequency on the nodes and edges; resources and deviations are visualised
using other means.
zoomabililty. all directly-follows based tools we considered support zoomability by
ﬁltering. we discuss a few ﬁltering options here, of which the most common, and basic,
are to consider only the most frequent paths (cd, pm, fd), and to consider only the
most frequent activities or edges (pm, cd, fd, fm).
figure 3: map discovered by imi-c from a
log in which bandewere not executed in a
single trace, which is not shown.another way to ﬁlter is on time, for
which two options exist: ﬁltering events
on timestamp (fd, cd, pm), which re-
sults in a map valid for the chosen inter-
val, and animation (fd, cd, pm, fm),
which results in a time-based overlay of
the overall map. animation in these four
tools is realised by showing tokens, rep-
resenting cases, ﬂowing over the edges of the map.
most tools we considered (pm, cd, fd, fm, imi-c) have problems discovering
and visualising long-distance dependencies, i.e. showing how a choice in the process
inﬂuences a choice later in the process. for instance, consider the log ll  rxa; c; e y100;
xa; c; d y100; xb; c; d y100s, in which bandeare never executed in a single case. this pre-
cision information might be interesting, but, as exempliﬁed by figures 1 and 3, cannot
be derived directly from the output of any tool we considered. in most tools (pm, cd,exploring processes and deviations 7
figure 4: ivm (excerpt). log animation on part of the bpic12 log [8].
fd, imi-c, ilp-c), it is possible to ﬁlter all traces not going through b, after which it
can be noted that edisappears or is never used. however, some tools make inspecting a
model difﬁcult by replacing the model with a new one on ﬁltering.
ideally, a process exploration tool supports as many easily accessible ﬁlters as pos-
sible. in ivm, we implemented three ﬁlters: 1) frequent paths, 2) frequent activities and
3) speciﬁc activities. to streamline long-distance dependency inspection, speciﬁc ac-
tivities (3) can be ﬁltered by clicking on nodes in the graph. moreover, animation was
implemented; figure 4 shows a screenshot.
evaluation and deviations. as explained in section 2, it is important that a process
exploration tool enables the evaluation of a model with respect to a log. we analyse
evaluation in the existing tools using three levels: model, activity and event. on the
model level, there is a single number for an entire model; on the activity level, evaluation
is possible on activities or other parts of the model; on the event level, for each event in
each trace evaluation is enabled.
the tools cd, fm and fd provide some model level evaluation by means of their
parameters. for instance, fd allows to set a percentage of most frequent paths that
should be visualised, giving an estimation of ﬁtness. these measures provide little guid-
ance on the quality of the map. better model-level ﬁtness metrics are given by fm and
pm, indicating what percentage of the events in the log have a corresponding edge in
the map. a detailed event-level view is available (fm) that shows for each event in each
trace whether it has such a corresponding edge.
the chains imi-c and ilp-c ﬁrst compute a model-log alignment, after which the
results are visualised in a plug-in common to both. such an alignment, given a trace
tand a model m, is intuitively a best guess of what run of mcould have produced
t(minimising the number of deviations between the trace and the path through the
model). an alignment consists of synchronous moves , in which mandtagree on the
step taken; model moves , in which mtook a step and tdid not; and log moves , in
which the ttook a step and mdid not. for more information about alignments, please
refer to [3]. both imi-c and ilp-c provide model level statistics as well as activity-
level based aggregations (see figure 5a). an event-level visualisation similar to fm’s is
available in another plug-in.
instead of using alignments to visualise deviations, they could be used to repair
the model [10]. while repairing a model, the model is updated to allow steps at the
position of log moves; model moves are accounted for using circumvention constructs.
after repair, perfect ﬁtness is guaranteed, but precision can only deteriorate. given
that process exploration should enable a user to ﬁnd the right balance between quality
dimensions, we cannot use model repair directly.8 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
(a) imi-c. non-white places contain log moves and their size indicates the frequency.
the third activity has model moves as is indicated by a bar and a thick border.
1
a
811
b
8 1c
7 2
d8
(b) ivm. dashed edges denote deviations: self-edges are log moves; the bypassing edge
is a model move.
figure 5: visualisation of deviations.
therefore, in ivm we combine the ideas of model repair and alignment visualisa-
tion: we perform a model repair, however do not apply it to the model, but add it to
the visualisation of the model in dashed/red edges. (we reduce the information about
log moves to frequencies for readability reasons) figure 5b shows an example; if all
dashed/red edges would be transformed to normal edges, the model would have perfect
ﬁtness, which suits a deviations visualisation.
ideally, a process exploration tool should enable evaluation on all three levels,
thereby providing zoomable evaluation . we implemented both the event and the activity-
level; the event-level visualisation is similar to the one used in fm.
4 comparison
in this section, we compare ivm to existing process discovery tools in two ways: 1) we
summarise the feature comparison of section 3 and 2) perform a case study on two real-
life examples. table 1 contains the feature comparison. most features were introduced
in section 3.5 6
case study. in this section, we compare the tools used in this paper on two real-life logs:
a log of a ﬁnancial institution (bpic12) [8], and a log from a building permit approval
process of a dutch municipality (wabo1bb) [5]7. all tools were applied using their
default settings.
the bpic12 log was ﬁltered to only contain the 23 ‘complete’ activities; figure 6
shows the results of process exploration tools applied to it. these ﬁgures exemplify
problems of tools we tested: figures 6c (cd), 6d (pm) and 6e (ilp-c) provide little
information by their omnipresence of edges; figures 6a (fd) and 6b (fm) could be
useful for analysis, but conclusions should be drawn carefully: note that in fd, from
5‘local tool’ denotes whether the tool can run on the machine of the user; ‘representational
bias’ refers to the class of models that can be discovered with a tool.
6remarks in table 1: (1) lower bound on ﬁtness (2) vector screenshot export broken; (3) vector
screenshot results in embedded bitmap; (4) pm provides a genetic ‘thorough’ miner, but that
does not guarantee termination; we excluded it from the comparison; (5) available in a separate
plug-in; (6) perfect ﬁtness until a ﬁlter is applied; (7) could possibly be achieved by writing
pql queries.
7the wabo1bb log has been published between submission and acceptance or this paper.exploring processes and deviations 9
table 1: feature comparison of process discovery tools.
fd cd fm pm(4) ivm imi-c ilp-c
log import from xes 3 7 3 7 3 3 3
log import from csv/xls 3 3 3 3 3 3 3
map export to vector image 3 7 (2)7(3)7(2)3 7 (3)7(3)
local tool 3 7 3 3 3 3 3semanticsexecutable semantics 7 7 7 3 3 3 3
guaranteed soundness - - - 3 3 3 7
guaranteed perfect ﬁtness (6) - - - 3 3 3 3
best-possible precision - - - 7 7 7 3
representational bias qparallelism - - - 7 3 3 3
representational bias ¥ilp-c - - - 7 7 7 3
representational bias ¥process trees - - - 7 3 3 7
model export to process tree - - - 7 3 3 7
model export to petri net - - - 7 3 3 3
avoid parallelism-clutter 3 7 3 7 3 3 3zoomabilityfrequency enrichment 3 3 3 3 3 3 3
performance enrichment 3 3 7 3 7 3 (5)3(5)
path frequency ﬁlter 3 7 (7)7 3 3 3 7
activity/edge frequency ﬁlter 3 3 3 3 3 7 7
speciﬁc activity/edge ﬁlter 3 3 3 3 3 3 3
timestamp ﬁlter 3 3 7 3 7 7 7
performance ﬁlter 3 7 (7)7 3 7 7 7
animation 3 3 3 3 3 7 7evaluationmodel level 7 7 7 3 (1)7 3 3
activity level 7 7 7 3 3 3 3
event level 7 7 7 7 3 3 (5)3(5)
model repair-semantics 7 7 7 3 3 7 7speedimmediate parameter feedback 3 3 3 3 3 7 7
long-distance dependency ﬁlter without model replacement
7 3 7 7 3 7 7
only six activities the bottom/end state can be reached, and in both maps it is unclear
what the presence or absence of edges actually means . as ivm and imi-c use a sim-
ilar discovery algorithm and both visualise deviations, their outputs closely resemble
one another. however, considering the speed aspect of process exploration, it took 10
screens of parameters/pop-ups to obtain figure 6g (imi-c), and none to obtain figure 6f
(ivm).
the wabo1bb log was ﬁltered to only contain the 22 ‘bb’ activities. given the
sensitive nature of this log, we were not allowed to upload it to cloud services at time of
writing; cd had to be excluded from the analysis. figure 7 shows the results. figures
7a (fd) and 7c (fm) are again useful for analysis, but should be read with care: it is
clear that the map deviates from the log as activity 01 bb730 occurred 13 times and
has only 4 outgoing edges in fd, but it is not clear how and where the map deviates.
figure 7b (pm) is a quite readable model, however some of the most-used activities
appear to be parallel. the model returned by ilp-c (figure 7d) is not a workﬂow net
and replay requires some log and model moves (this could be avoided using the ‘empty
after completion’ parameter). figures 7e and 7f show excerpts of the similar models10 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
269313087
64
1133
2114
2907
78927932515
320 5015134
44819883554
444 16822346959
70301597
3254
941
7712879
29075301
196
97467
2737
60413087
3429
655a_submitted
13087
a_partlysubmitted
13087
a_preaccepted
7367
a_accepted
5113
o_selected
7030
a_finalized
5015
o_created
7030
o_sent
7030w_completeren aanvraag
23967
w_nabellen offertes
22976
o_sent_back
3454
a_registered
2246a_approved
2246o_accepted
2243
a_activated
2246w_valideren aanvraag
7895a_declined
7635
o_cancelled
3655w_afhandelen leads
5898
a_cancelled
2807
w_nabellen incomplete dossiers
11407o_declined
802w_beoordelen fraude
270
(a) fd.
 (b) fm (excerpt).
 (c) cd (excerpt).
(d) pm (excerpt).
 (e) ilp-c (excerpt).
4153
+5
w_afhandelen leads
57966+a_accepted
4823
+
a_finalized
4381
(f) ivm (excerpt).
 (g) imi-c (excerpt).
figure 6: tools applied to bpic12, using default settings.
by imi-c and ivm. the added value of ivm comes when one would like to explore
the process and ﬁne-tune the parameters; imi-c and ilp-c require the user to re-run
several plug-ins with each adjustment, ivm does not.
this small case study shows that on the real-life logs we tried, some commercial
tools returned difﬁcult-to-interpret maps and others fail to produce readable maps at all.
probably, ﬁne-tuning the parameters might improve the readability of maps, especially
in cd and pm. the fm, while academic and a plug-in of prom, resembles the com-
mercial tools we considered: no executable model semantics but immediate parameter
feedback. as imi-c and ivm use a similar discovery algorithm, the most notable ob-
jective differences between ivm and imi-c are that ivm provides log animation and
immediate parameter feedback: exploring a process is easy, while imi-c and ilp-c re-
quire a user to leave the visualisation, call a mining plug-in, set all parameters, call an
alignment plug-in, and the visualisation plug-in again.
5 conclusion
in this paper, we identiﬁed a gap between commercial and academic process exploration
tools. the commercial tools we considered are easy to use and have many features, suchexploring processes and deviations 11
25
11 1
1242
16
131
1
11
111
2 126
1
1
11
12
1254
32
1 18
101_bb_540\\complete
75
01_bb_770\\complete
84
01_bb_630\\complete
20
01_bb_730\\complete
1301_bb_590\\complete
2
01_bb_550\\complete
1
01_bb_560\\complete
1
01_bb_740\\complete
2
01_bb_760\\complete
101_bb_765\\complete
8
01_bb_755\\complete
301_bb_635\\complete
1
01_bb_636\\complete
1
01_bb_640\\complete
1
01_bb_670\\complete
1
01_bb_680\\complete
101_bb_546\\complete
201_bb_545\\complete
2
01_bb_550_2\\complete
101_bb_550_1\\complete
201_bb_775\\complete
34
01_bb_766\\complete
1
(a) fd.
 (b) pm.
 (c) fm.
(d) ilp-c.
 (e) imi-c (excerpt).
2
93
1093
01_bb_770
8383 93218
01_bb_540
7575
9375
83+ + (f) ivm (excerpt).
figure 7: tools applied to wabo1bb, using default settings.
as log animation, immediate parameter feedback and extensive ﬁltering options, but the
process maps created either do not show parallelism or have no executable semantics
and deviations to the maps cannot be computed. academic tools often create maps
with executable semantics, and deviations can be analysed in detail using replay and
alignment techniques. however, features important for the exploration of processes are
missing and existing tool chains require many steps, thus making exploration tedious
and non-interactive.
we introduced a process exploration tool: the inductive visual miner (ivm). it aims
to bridge this gap between academic and commercial process exploration tools. ivm
immediately discovers an initial model, computes deviations and shows these to the
user, using a new visualisation that allows for the animation of the traces of a log. ivm
is not as feature-rich or scale-oriented as some of the commercial tools, but shows that
it is possible to use powerful academic techniques in a user-friendly package. we hope
that ivm will inspire commercial vendors to consider models with executable semantics
and support deviation analysis.
for future work, one could consider the fast computation of near-optimal align-
ments. this paper focused on visualising ﬁtness deviations; precision and generalisation
problems could be visualised as well, such as in [17]. furthermore, the evolutionary
tree miner [6] could be integrated to obtain an intuitive interactive guided miner.
acknowledgement. we thank robin wolffensperger for his contributions to the posi-
tioning of log moves.12 sander j.j. leemans, dirk fahland, and wil m.p. van der aalst
references
1. van der aalst, w.: process mining: discovery, conformance and enhancement of business
processes. springer (2011)
2. van der aalst, w., weijters, a., maruster, l.: workﬂow mining: discovering process models
from event logs. ieee trans. knowl. data eng. 16(9), 1128–1142 (2004)
3. adriansyah, a.: aligning observed and modeled behavior. ph.d. thesis, eindhoven univer-
sity of technology (2014)
4. bautista, a., wangikar, l., kumail akbar, s.: process mining-driven optimization of a con-
sumer loan approvals process - the bpic 2012 challenge case study. in: business process
management workshops. pp. 219–220 (2012)
5. buijs, j.: environmental permit application process (‘wabo’), coselog project - municipal-
ity 1 (2014), http://dx.doi.org/10.4121/uuid:c45dcbe9-557b-43ca-b6d0-10561e13dcb5
6. buijs, j., van dongen, b., van der aalst, w.: a genetic algorithm for discovering process
trees. in: ieee congress on evolutionary computation. pp. 1–8. ieee (2012)
7. buijs, j., van dongen, b., van der aalst, w.: on the role of ﬁtness, precision, generalization
and simplicity in process discovery. in: on the move to meaningful internet systems: otm
2012, pp. 305–322. springer (2012)
8. van dongen, b.: bpi challenge 2012 dataset (2012),
http://dx.doi.org/10.4121/uuid:3926db30-f712-4394-aebc-75976070e91f
9. van dongen, b., de medeiros, a., verbeek, h., weijters, a., van der aalst, w.: the prom
framework: a new era in process mining tool support. icatpn 3536, 444–454 (2005)
10. fahland, d., van der aalst, w.: repairing process models to reﬂect reality. in: bpm’12.
lncs, vol. 7481, pp. 229–245. springer (2012)
11. g ¨unther, c., van der aalst, w.: fuzzy mining–adaptive process simpliﬁcation based on multi-
perspective metrics. business process management pp. 328–343 (2007)
12. g ¨unther, c., rozinat, a.: disco: discover your processes. in: bpm (demos). ceur work-
shop proceedings, vol. 940, pp. 40–44. ceur-ws.org (2012)
13. leemans, s., fahland, d., van der aalst, w.: discovering block-structured process models
from event logs containing infrequent behaviour. in: business process management work-
shops. pp. 66–78 (2013)
14. leemans, s., fahland, d., van der aalst, w.: discovering block-structured process models
from incomplete event logs. in: petri nets 2014. pp. 91–110. springer (2014)
15. de leoni, m., van der aalst, w.: data-aware process mining: discovering decisions in pro-
cesses using alignments. in: sac. pp. 1454–1461. acm (2013)
16. ramezani, e., fahland, d., van der aalst, w.: where did i misbehave? diagnostic informa-
tion in compliance checking. in: bpm. lecture notes in computer science, vol. 7481, pp.
262–278. springer (2012)
17. rozinat, a.: process mining: conformance and extension. ph.d. thesis, eindhoven univer-
sity of technology (2010)
18. schimm, g.: process miner - a tool for mining process schemes from event-based data. in:
jelia. lncs, vol. 2424, pp. 525–528. springer (2002)
19. sol ´e, m., carmona, j.: process mining from a basis of state regions. in: petri nets. lncs,
vol. 6128, pp. 226–245. springer (2010)
20. weijters, a., ribeiro, j.: flexible heuristics miner. in: cidm. pp. 310–317. ieee (2011)
21. van der werf, j., van dongen, b., hurkens, c., serebrenik, a.: process discovery using inte-
ger linear programming. fundam. inform. 94(3-4), 387–412 (2009)
22. wynn, m., rozinat, a., van der aalst, w., ter hofstede, a., fidge, c.: process mining and
simulation. in: modern business process automation, pp. 437–457. springer (2010)