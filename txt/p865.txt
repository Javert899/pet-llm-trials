123
computing
archives for scientific computing
 
issn 0010-485x
 
computing
doi 10.1007/s00607-015-0441-1balanced multi-perspective checking of
process conformance
felix mannhardt, massimiliano de
leoni, hajo a. reijers & wil m. p. van
der aalst
123
your article is published under the creative
commons attribution license which allows
users to read, copy, distribute and make
derivative works, as long as the author of
the original work is cited. you may self-
archive this article on your own website, an
institutional repository or funder’s repository
and make it publicly available immediately.computing
doi 10.1007/s00607-015-0441-1
balanced multi-perspective checking of process
conformance
felix mannhardt ·massimiliano de leoni ·
hajo a. reijers ·wil m. p. van der aalst
received: 9 january 2014 / accepted: 19 january 2015
© the author(s) 2015. this article is published with open access at springerlink.com
abstract organizations maintain process models that describe or prescribe how cases
(e.g., orders) are handled. however, reality may not agree with what is modeled. con-
formance checking techniques reveal and diagnose differences between the behavior
that is modeled and what is observed. existing conformance checking approaches tend
to focus on the control-ﬂow in a process, while abstracting from data dependencies,
resource assignments, and time constraints. even in those situations when other per-
spectives are considered, the control-ﬂow is aligned ﬁrst, i.e., priority is given to this
perspective. data dependencies, resource assignments, and time constraints are only
considered as “second-class citizens”, which may lead to misleading conformance
diagnostics. for example, a data attribute may provide strong evidence that the wrong
activity was executed. existing techniques will still diagnose the data-ﬂow as deviat-
when conducting most of the research reported on in this paper, dr. de leoni was also afﬁliated with
university of padua, italy, and ﬁnancially supported by the eurostar-eureka project prompt (e! 6696).
f. mannhardt ( b)·m. de leoni ·h. a. reijers ·w. m. p . van der aalst
department of mathematics and computer science, technische universiteit eindhoven,
eindhoven, the netherlands
e-mail: f.mannhardt@tue.nl
m. de leoni
e-mail: m.d.leoni@tue.nl
h. a. reijers
vrije universiteit amsterdam, amsterdam, the netherlands
e-mail: h.a.reijers@vu.nl
f. mannhardt
perceptive software, naarden, the netherlands
w. m. p . van der aalst
international laboratory of process-aware information systems, national research university higher
school of economics, moscow, russia
e-mail: w.m.p.v.d.aalst@tue.nl
123f. mannhardt et al.
ing, whereas our approach will indeed point out that the control-ﬂow is deviating. in
this paper, a novel algorithm is proposed that balances the deviations with respect to all
these perspectives based on a customizable cost function. evaluations using both syn-thetic and real data sets show that a multi-perspective approach is indeed feasible and
may help to circumvent misleading results as generated by classical single-perspective
or staged approaches.
keywords process mining ·data petri nets ·multi-perspective conformance
checking ·log-process alignment
mathematics subject classiﬁcation 68u35
1 introduction
the practical relevance of process mining is on the rise as event data is readily available
due to advances in data monitoring and storage. process mining techniques aim todiscover, monitor and improve real processes by extracting knowledge from event
logs [ 1]. the two most prominent process mining tasks are: (i) process discovery :
learning a process model from example behavior recorded in an event log, and (ii)conformance checking : diagnosing and quantifying discrepancies between observed
behavior and modeled behavior. this paper focuses on conformance checking while
considering multiple perspectives (i.e. control-ﬂow, data, resources, time) at the sametime. deviations identiﬁed using conformance checking may, for example, point at
users in a process using undesirable workarounds, activities that are often executed
too late for a particular group of customers, or violations of the four-eyes principle forcases that follow a particular path.
up to this point, conformance checking techniques have almost exclusively focused
on the control-ﬂow perspective [1,9,26]. this means that the order of steps is being
analyzed to determine the conformance between prescribed and actual behavior. of
more recent date is the approach described in [ 15], which extends such a view with other
important perspectives that may be subject to quality requirements: data, resources,
and time. this paper follows the latter, multi-perspective approach. however, the
approach taken in this paper is distinctively different from the work in [ 15]: we do not
consider the control-ﬂow ﬁrst and the other perspectives only at a later stage. as will
be shown, following [ 15] may provide misleading results if control-ﬂow and the other
perspectives are closely inter-related.
compared to existing approaches, this paper provides two important contributions.
first of all, we address the potential concern that a multi-dimensional approach may
not be feasible to apply to real-life event logs, considering the longer computationsthat are required compared to a single-perspective approach. secondly, and in contrast
to the multi-dimensional approach in [ 15] in which control-ﬂow is considered as the
most important perspective in identifying deviations, the proposed approach in thispaper allows for balancing the different perspectives in a fully customizable manner.
by doing so, we claim that we can provide more meaningful analysis results than by
ﬁxing one perspective as the most dominant one.
123balanced multi-perspective checking of process conformance
our claims have been validated through an empirical evaluation using a real-life
event log and a process model, both of which are provided by the local police of
an italian city. the log contains information about more than 140,000 road-trafﬁcﬁnes. events relate to notiﬁcations, payments, and appeals. the evaluation shows
that the approach described in [ 15] may return unlikely or even wrong explanations
from a business viewpoint. that is, although formally correct, the explanations are notpossible if the speciﬁc context of the business process is taken into consideration. as
will be shown, this is caused by the fact that the control-ﬂow is considered initially
without any attention for the other perspectives, which are considered separately in asecond stage. using the techniques and tools developed as part of our research, the
analysis in this evaluation took roughly 6 min, which seems acceptable considering the
large size of the event log and the complexity of the problem. to further support the
feasibility of the approach, we also used a number of synthetic event logs to evaluate
its performance for logs of various sizes.
against this backdrop, this paper is structured as follows. we provide a motivating
example in sect. 2and some essential background information in sect. 3.t h em a i n
explanation of our approach can be found in sect. 4, whereas sect. 5contains a brief
description of the implementation. section 6presents the outcome of our real-life case
study as well as the analyses of the synthetic event logs. section 7provides a review
of the existing literature on conformance checking, in particular emphasizing thedistinctive nature of the multi-perspective conformance checking we propose against
the state of the art. finally, concluding remarks are given in sect. 8.
2 motivating example
a process model describes the life cycle of instances of a business process (also known
ascases ). process models consists of a number of activities as well as constraints that
describe which activities must be executed and in which order, depending on the char-
acteristics of a speciﬁc case. to clarify the purpose of a process model, let us consider
the model in bpmn notation shown in fig. 1(taken from [ 15]), which describes the
process of handling credit requests from a credit institute. an initial credit request
activity is executed for each case, which is to be followed by a verify activity.
however, variables are associated to cases, which are subject to modiﬁcation by the
execution of activities. in fig. 1, it can be seen that during the initial credit request
theamount of the loan is recorded. also, the verify activity results in a veriﬁcation
result. paths taken during the execution of a process are often governed by guardsand conditions deﬁned over these case variables. in fig. 1, the choice between the
execution of the activities renegotiate request ,advanced assessment , and simple
assessment is determined on the basis of the values for veriﬁcation andamount .t h e
data perspective of the process refers to the handling and use of such case variables.
in addition, it may also be relevant to capture the behavior of a process in terms of the
resource restrictions on the execution of activities. an activity is typically associatedwith a particular role, i.e., a selected group of resources (also known as actors ,agents
orusers ). in fig. 1, it can be seen that the verify activity must be performed by a
resource playing the role of assistant . there may be additional assignment rules in
123f. mannhardt et al.
fig. 1 bpmn diagram describing a process to handle credit requests [ 15]
place such as the “four-eyes principle”, i.e. the same resource cannot execute two
related activities for the same case. adding this resource perspective to conformance
checking is necessary to detect resource-related deviations.
in addition to data and resource constraints, there may be time-related constraints
that are important to govern. for example, if a renegotiation activity occurs, it needsto follow an assessment within 7 days. the process model in fig. 1shows that a ﬁnal
decision is made 1 week after the renegotiate request activity is initiated. this adds
atime perspective to a process model.
if conformance checking would only consider the control-ﬂow perspective ,t h e
activities themselves and their ordering are the only issues of concern. however, to fully
grasp whether a model conforms with reality other perspectives may be important aswell. in this paper, we focus on the additional perspectives on data, resource, and time.
this paper is grounded in the belief that even though resource and time are separate
concerns from a business or modeling perspective, they can be encoded into the data
perspective . therefore, in the remainder of this work, we use the data perspective to
capture any perspective different from control-ﬂow. we will show that the resourceand time dimensions can be handled through dedicated data elements. however, also
other perspectives such as costs and risks could be encoded in the same way.
to explain the different perspectives relevant for conformance, consider the fol-
lowing example trace:
1σexample =/angbracketleft(a,{a=3,000,r=michael ,ea=pete,ta=
3 jan }),(b,{v=fa l s e,eb=sue,tb=4 jan }}),(c,{i=530,d=
true,ec=sue,tc=5 jan }),(f,{ef=pete,tf=17 jan })/angbracketright.trace σexample
consists of 4 events. lower-case bold letters refer to activities using the mapping
in fig. 1, e.g., a=credit request . upper-case bold letters refer to data objects.
a=3,000 describes that the amount is 3,000 ( ais a shorthand for amount ) and
r=michael describes that credit request is initiated by michael ( ris a shorthand for
1notation (act,{attr 1=val1,..., attr n=valn})is used to denote the occurrence of activity act in
which variables attr 1,..., attr nare assigned values val1,...,v aln, respectively.
123balanced multi-perspective checking of process conformance
requester ).exandtxrespectively denote the last executor ofxand the timestamp
when xwas executed last.
conformance checking techniques that only consider the control-ﬂow perspective
cannot ﬁnd any conformance violations for this trace. after all, the trace shows the
subsequent execution of activities a,b,c, and f, which is indeed permitted by the
process model of fig. 1. by considering more perspectives, however, more deviations
between the process model and this trace can be identiﬁed. for example, only by
explicitly considering the data perspective, one can detect that activity cis performed
even though a’s value of 3,000 does not meet the guard for this activity (>5,000).
similarly, the value of vis ‘false’, which would have required activity cto be skipped
altogether given the process model of fig. 1.
the identiﬁcation of non-conformance in its different forms clearly has value in
itself. nonetheless, organizations are often interested in explanations that can steer
measures to improve the quality of the process. what may happen is that alternativeexplanations exist for a deviating trace. for the identiﬁed deviations in our example
trace, the explanation may be (1) that all data values were written correctly but that
activity cdid not need to be performed, or (2) that activity cwas performed properly
but that the variables aandvwere both not set correctly.
the approach in [ 15] seeks for explanations that put the control-ﬂow ﬁrst. this
approach would prefer explanation (2) even when the other perspectives strongly sug-gest an alternative explanation with more control-ﬂow deviations. such explanations
can be constructed quickly, at the potential expense of the inability to guarantee the
optimality of the solution (e.g., the explanation may not be the simplest or most likely).indeed, explanation (2) requires one to accept that two observed data values are incor-
rect, which in this particular case may actually be less likely than only one activity
being executed incorrectly. hence, explanation (1) may be more likely in certain set-tings. this shows that there are tradeoffs between the different perspectives.
the approach in this paper allows for balancing the control-ﬂow, data, resources,
and time perspectives in identifying explanations for deviations. if all perspectives
would be equally important it identiﬁes explanation (1) as the best explanation, since
it minimizes the number of deviations to explain the erratic trace and as such deliversthe simplest explanation among the two alternatives. however, the approach is cus-
tomizable and one may assign different weights to the different types of deviations. in
fact, there are many situations where we know that the data can be considered to bereliable. this can be reﬂected in the weights. recall, that we will use data perspective
to capture any perspective different from control-ﬂow for the remainder of this paper.
3 background
in this section, we introduce preliminaries such as the process model, event logs, and
alignments.
3.1 petri nets with dataour conformance-checking technique is independent of the speciﬁc formalism used
to capture processes in a model. therefore, bpmn, epcs, or any other formalism can
123f. mannhardt et al.
be employed to represent these perspectives. however, we need a simple modeling
language with clear semantics to explain our technique. we use petri nets as a well-
known language with clear semantics. to capture the interactions of the control-ﬂowperspective with the other perspectives, we use petri nets with data .
apetri net with data (dpn-net) is a petri net [ 11] in which transitions can write
variables [ 16]. a transition performs write operations on a given set of variables and
may have a data-dependent guard. note that, without loss of generality, we do not
explicitly consider read operations as a source of deviations for this work. the main
reason is that they are hardly ever recorded. a transition can ﬁre only if its guard issatisﬁed and all input places are marked. a guard can be any formula over the process
variables using relational operators ( <,>, =) as well as logical operators such as
conjunction ( ∧), disjunction ( ∨), and negation ( ¬). we denote with formulas (x)the
universe of such formulas deﬁned over a set xof variables. we also introduce a prime-
operator: in a guard of a transition t, a variable vcan also appear as v
/prime(i.e., with the
prime symbol). in this case, it refers to the value after the occurrence of t.
deﬁnition 1 (dpn-net ) a petri net with data (dpn-net) n=(p,t,f,v,u,val,w,
g)consists of:
– a set of places p;
– a set of transitions t;
– a ﬂow-relation f⊆(p×t)∪(t×p);
–a s e t vof variable names;
– a (potentially inﬁnite) set uof variable values;
– a function val:v→2uthat deﬁnes the values admissible for each variable
v∈v, i.e. val(v)is the domain of variable vand is potentially inﬁnite;
– a write function w:t→2vthat labels each transition with a set of write
operations , i.e. with the set of variables whose value needs to be written/updated;
– a guard function g:t→formulas (v∪{v/prime|v∈v})that associates each
transition with a different guard.2
some transitions do not correspond to actual pieces of work and are only added for
routing purposes. formally, there is no reason to distinguish such transitions from
others. in practical terms, such routing transitions are characterized by not leaving any
explicit trails in event logs. that is why these transitions are commonly referred toasinvisible . the preset of a transition tis the set of its input places:
•t={p∈p|
(p,t)∈f}. the postset of tis the set of its output places: t•={p∈p|(t,p)∈f}.
example 1 figure 2, taken from [ 15], shows the dpn-net that models the same process
as the bpmn model in fig. 1. in particular, fig. 2a depicts the control-ﬂow and the
write operations. in addition to the variables depicted in the ﬁgure, there exists a set of
variables to model the resource and time perspective, i.e., for each transition t, there
are two variables etandtt. moreover, these two variables are associated with a write
operation of t. figure 2b contains the data-perspective guards gd(t)for each transition
t. when deﬁning guards, we assume that string values can be lexicographically ordered
and, hence, it is also possible to use inequality operators (i.e., <and>) for strings. to
2if a transition tshould be associated with no guard, we set g(t)=true.
123balanced multi-perspective checking of process conformance
(a)
(b) (c)
fig. 2 the dpn-net of the working example [ 15]
also model the resource and time perspective, a second guard gr(t)can be associated
with each transition t(see fig. 2c). formally, only one guard g(t)can be assigned to
tand, hence, we set g(t)=gd(t)∧gr(t).
g i v e nas e t x,b(x)denotes the set of all multi-sets over a set x. in addition, given
a multiset m∈b(x), for each x∈x,w eu s e m(x)∈nto indicate the number of
duplicates of element xpresent in m.
deﬁnition 2 (state of a dpn-net )l e t n=(p,t,f,v,u,val,w,g)be a dpn-net.
the set of possible states ofnis formed by all pairs (m,a)where m∈b(p), i.e.
a multi-set of the places in p, and ais a partial function that associates a value with
some of the variables, i.e. a:v/negationslash→usuch that a(v)∈val(v)forv∈dom(a).3
3we use /negationslash→to denote partial functions, i.e. the function’s domain is a subset of v.dom(a)⊆vdenotes
the domain of partial function a.
123f. mannhardt et al.
for any state (m,a),mis known as the marking of petri net (p,t,f)and we say the
marking assigns to each place p∈pa number of tokens. often we use the shorthand
a(v)=⊥ to denote that v/negationslash∈dom(a). a special value ⊥is assigned to variables that
have not been initialized (can be seen as undeﬁned or missing).
each dpn-net deﬁnes two special markings mi,mf:t h e initial andﬁnal marking.
the initial state of a dpn-net is (mi,ai)with ai(v)=⊥ undeﬁned for each v∈v.
a non-empty set of ﬁnal states exists and includes every state (m,a)with m=mf.
in any state, zero or more transitions of a dpn-net may be able to ﬁre.
deﬁnition 3 (valid and invalid transition firings )l e t n=(p,t,f,v,u,val,w,
g)be a dpn-net. a transition ﬁring s is a pair (t,w)∈t×(v/negationslash→u). transition
ﬁring s=(t,w) isvalid in a state (m,a)ofnif four conditions are satisﬁed:
1. each place in the preset of tcontains at least one token, i.e. for each place p∈•t,
m(p)> 0;
2.twrites new values to the deﬁned set of variables, i.e. dom(w)=w(t);
3. each variables takes on an admissible value, i.e. for each variable v∈dom(w),
w(v)∈val(v);
4. guard g(t)evaluates to true with respect to assignment a.
a transition ﬁring sisinvalid in(m,a)when at least one of the above conditions is
not satisﬁed.
in the remainder, the set of possible transition ﬁrings, both valid and invalid, for a
dpn-net nis denoted as sn, i.e. sn=t×(v/negationslash→u).
we introduce the following functions to easily access the components of a transition
ﬁring s=(t,w) :#vars(s)=wand # act(s)=t. function # varsis also overloaded
such that # vars(s,v)=w(v) ifv∈dom(#vars(s)),o r# vars(s,v)=⊥ ifv/negationslash∈
dom(#vars(s)). on ﬁring of a transition the dpn-net moves from current state (m,a)
to next state (m/prime,a/prime).
deﬁnition 4 (transitions between dpn-net states )l e t n=(p,t,f,v,u,val,w,
g)be a dpn-net and (m,a)be a state of the dpn-net. let s=(t,w) b eav a l i d
transition ﬁring in (m,a). firing sin state (m,a)leads to state (m/prime,a/prime)where:
1. for each place p∈p,i fp∈•t,m/prime(p)=m(p)−1o r ,i f p∈t•,m/prime(p)=
m(p)+1 or, otherwise, m/prime(p)=m(p);
2. for each v∈v,a/prime(v)=a(v)if #vars(s,v)=⊥ , otherwise a/prime(v)=#vars(s,v).
this is denoted as (m,a)s−→(m/prime,a/prime).
the concept of single transition ﬁrings can easily be extended to sequences
σ=/angbracketlefts1,..., sn/angbracketrightof valid transition ﬁrings: (m0,a0)σ−→(mn,an)corresponds to
(m0,a0)s1−→(m1,a1)s2−→···sn−→(mn,an)
in the remainder, pn,mi,mfdenotes the set of valid process traces of a dpn-net
nthat lead from the initial marking mito ﬁnal marking mf:pn,mi,mf={σ∈s∗
n|
∃a/prime(mi,ai)σ−→(mf,a/prime)}. a valid trace σis such that (mi,ai)σ−→(m/prime,a/prime)with
(m/prime,a/prime)belonging to the set of ﬁnal states of n, i.e., m/prime=mf.
the alignment technique described in this paper requires dpn-nets to be relaxed
data sound : at least one sequence of transition ﬁrings exists that leads from the initial
123balanced multi-perspective checking of process conformance
state to a ﬁnal state. we use the word relaxed in comparison to stricter notions of data
soundness, such as described in [ 15].
deﬁnition 5 (relaxed data soundness )l e t n=(p,t,f,v,u,val,w,g)be a
dpn-net. let mibe the initial marking and let mfbe the ﬁnal marking. a dpn-
netnisrelaxed data sound iff the set of valid process traces contains at least one
valid trace: pn,mi,mf/negationslash=∅ .
3.2 alignment of event logs and process models
event logs serve as the starting point for process mining. an event log is a multi-set
oftraces . each trace describes the life-cycle of a particular process instance (i.e., a
case ) in terms of the activities executed.
deﬁnition 6 (event log )l e t n=(p,t,f,v,u,val,w,g)be a dpn-net. let sn
be the set of possible transition ﬁrings. a trace σl∈s∗
nis a sequence of transition
ﬁrings. an event log lover snis a multi-set of traces: l∈b(s∗
n).
multiple instances of a process may consist of the exact same sequence of transition
ﬁrings and, hence, result in the same trace. this motivates the deﬁnition of an event log
as a multi-set. transition ﬁrings in an event log are usually known as events . we assume
thatlonly contains events that are part of the dpn-net n. any event referring to a
transition that is not part of the process model is ﬁltered out. please note that transition
ﬁrings in lare not necessarily in line with the behavior that is described by dpn-net n.
conformance checking requires an alignment of event log land process model
n. the events in the event log need to be related to transitions in the model, and vice
versa. such an alignment shows how the event log can be replayed on the processmodel. building this alignment is far from trivial, since the log may deviate from the
model at an arbitrary number of places.
we need to relate “moves” in the log to “moves” in the model in order to establish
an alignment between a process model and an event log. however, it may be that some
of the moves in the log cannot be mimicked by the model and vice versa. we explicitly
denote such “no moves” by /greatermuch. figure 3a and b show alignments of the process model
log trace process
a{a= 3000 , a{a= 5001 ,
r=m i c h a e l } r=m i c h a e l }
b{v=false ) b{v=true }
c{i=5 3 0 , c{i=5 3 0 ,
d=true } d=false }
inv3
inv4
f{} f{}
inv5
(a) complete alignment γ1log trace process
a{a=3 0 0 0 , a{a=3 0 0 0 ,
r=m i c h a e l } r=m i c h a e l }
b{v=false ) b{v=false }
inv1
c{i= 530 ,d=true }
f{} f{}
inv5
(b) complete alignment γ2
fig. 3 examples of complete alignments of σexample andn
123f. mannhardt et al.
in fig. 2and the log trace σexample from sect. 2. for convenience, we introduce the
sets/greatermuch
n=sn∪{ /greatermuch } .
deﬁnition 7 (alignments )l e t n=(p,t,f,v,u,val,w,g)be a dpn-net with ini-
tial marking miand ﬁnal marking mf. a legal move in an alignment is represented
by a pair (sl,sm)∈(s/greatermuch
n×s/greatermuch
n)\{(/greatermuch,/greatermuch)}such that:
–(sl,sm)is amove in log ifsl∈snandsm=/greatermuch ,
–(sl,sm)is amove in model ifsl=/greatermuch andsm∈sn,
–(sl,sm)is amove in both with correct write operations ifsl∈sn,sm∈snand
#act(sl)=#act(sm)and∀v∈v#vars(sl,v)=#vars(sm,v),
–(sl,sm)is amove in both with incorrect write operations ifsl∈sn,sm∈sn
and # act(sl)=#act(sm)and∃v∈v#vars(sl,v)/negationslash=#vars(sm,v),
all other moves are considered as illegal .an={(sl,sm)∈(s/greatermuch
n×s/greatermuch
n)\{(/greatermuch,/greatermuch)}
|sl=/greatermuch ∨ sm=/greatermuch ∨ #act(sl)=#act(sm)}is the set of all legal moves. the
alignment of two execution traces σ/prime,σ/prime/prime∈s∗
nis a sequence γ∈a∗
nsuch that,
ignoring all occurrences of /greatermuch, the projection on the ﬁrst element yields σ/primeand the
projection on the second yields σ/prime/prime.
in particular, given a log trace σl∈l,γis acomplete alignment ofσlandn
ifσ/prime=σlandσ/prime/prime∈pn,mi,mf. the alignments in fig. 3a and b are both complete
alignments. in the remainder, given an alignment γofσ/primeandσ/prime/prime,γ|l=σ/primeand
γ|p=σ/prime/primeare referred to as the log and the process projection of γ.
note that we do not aim to ﬁnd just any complete alignment. our goal is to ﬁnd a
complete alignment of σlandnwith minimal deviation cost. in order to deﬁne the
severity of a deviation, we ﬁrst introduce a cost function on legal moves and, then,generalize it to alignments. the alignment with the lowest cost is called an optimal
alignment.
deﬁnition 8 (cost function and optimal alignment )l e t nandσ
lbe a dpn-net and
a log trace, respectively. assuming anas the set of all legal alignment moves, a cost
function κassigns a non-negative cost to each legal move: an→ r+
0.t h e c o s to fa n
alignment γbetween σlandnis computed as the sum of the cost of all constituent
moves: k(γ)=/summationtext
(sl,sm)∈γκ(sl,sm). alignment γis an optimal alignment if, for
any complete alignment γ/primeofnandσl,k(γ)≤k(γ/prime).
this cost function can be used to favor one type of explanation for deviations over the
other. the cost of each legal move depends on the speciﬁc model and process domainand, hence, the cost function κneeds to be deﬁned speciﬁcally for each setting. note
that an optimal alignment does not need to be unique, i.e. multiple complete alignments
with the same minimal cost may exist.
example 2 we can deﬁne the following cost function for the alignment of log trace
σ
example to the dpn-net n. let us shortcut w(#act(sm))asw(sm), then we choose
κto be:4
4we indicate the size of a set x as |x|.
123balanced multi-perspective checking of process conformance
κ(sl,sm)=⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎩1i f (s
l,sm)move in log
1+|w(sm)| if(sl,sm)move in model and
#act(sm)/negationslash∈{inv1,..., inv5}
|{v∈w(sm):#vars(sl,v)
/negationslash=#vars(sm,v)}| if(sl,sm)move in both
with incorrect write operations
0 otherwise.
using this cost function, the cost of the alignment γ1in fig. 3ai s k(γ1)=3 and
the cost of the alignment γ2in fig. 3bi s k(γ2)=1. for this cost function γ2is an
optimal alignment, as no other alignment with lower cost exists.
it is worth noting that moves for transitions inv1,..., inv5 are always assigned a cost
of 0. we previously referred to these as invisible transitions, i.e. they are never recordedin the event log. as such, there is no cost involved in not having observed them.
when focusing on the ﬁtness dimension of conformance, we are not only interested
in ﬁnding the optimal alignment and, hence, diagnosing where a log trace does notconform to a model. also, we wish to quantify the ﬁtness level of traces and logs. for
this reason, we introduce a ﬁtness function f:(s
∗
n×n)→[ 0,1].f(σl,n)=1i f
σlcan be replayed by the model from the beginning to the end with no discrepancies.
conversely, f(σl,n)=0 denotes the poorest level of conformance. kcannot be
used as ﬁtness function directly as we are interested in expressing the ﬁtness level as
a number between 0 and 1. normalization can be done in multiple ways. here, wedivide the cost of an optimal alignment by a reference cost, which is obtained using
a “worst case” alignment that is always possible. therefore, the ﬁtness level of a log
trace is deﬁned with respect to this “worst case” scenario.
the ﬁtness level deﬁnition as well as the following section require two additional
notations. given two sequences x=(x
0,..., xn),y=(y0,..., yn)the concatenation
of both sequences is deﬁned as x⊕y=(x0,..., xn,y0,..., yn).preﬁx(x)denotes the
set of all preﬁxes of x.i fz∈preﬁx(x)then a sequence wexists such that z⊕w=x.
deﬁnition 9 (fitness level )l e tσl=(s1,..., sn)∈s∗
nbe a log trace and let nbe
a dpn-net. let γo∈a∗
nbe an optimal alignment of σlandnandγe∈a∗
nbe an
optimal alignment of the empty trace and n.l e tγr∈a∗
nbe the reference alignment
given by γr=γe⊕/angbracketleft(s1,/greatermuch),... ,( sn,/greatermuch)/angbracketrightwith si∈σl. the ﬁtness level of σland
nis deﬁned as follows:
f(σl,n)=1−k(γo)
k(γr)
to compute the ﬁtness, the cost of the optimal alignment is confronted with the cost
of the reference alignment k(γr), which is computed by concatenating moves in
log for all events of σlwith the alignment of the empty trace. γris used as reference
alignment as it contains no move in both, which is not desirable. since γois an optimal
alignment; thus by deﬁnition: 0 ≤k(γo)≤k(γr)and, thus, 0 ≤f(σl,n)≤1.
123f. mannhardt et al.
4 balanced multi-perspective alignments
in this section, we present a technique to construct multi-perspective alignments that
arebalanced . as stated, earlier approaches focused on a single perspective or dealt
with the different perspectives sequentially. to illustrate, for the trace σexample ,u s i n g
cost function κexample deﬁned in example 2, the technique presented in [ 15] would
return the alignment γ1in fig. 3a. this alignment is sub-optimal in comparison with
γ2.
we formulate the problem of ﬁnding such an optimal alignment as a search problem
in a directed graph and employ the a* algorithm [ 10] to ﬁnd a least expensive path
through the graph. let z=(zv,ze)be a directed graph with edges weighted based
on a predeﬁned cost structure. the a* algorithm, as initially proposed in [ 10], ﬁnds
the path with the overall lowest cost from a given source node v0∈zvto a node of
a given goal set, i.e., a set of target nodes zg⊆zv. each node v∈zvis associated
with a cost that is determined by an evaluation function f(v)=g(v)+h(v), where
–g:zv→ r+gives the smallest path cost from v0tov;
–h:zv→ r+
0gives an estimate of the smallest path cost from vto any goal node
vg∈zgfromv.
function his admissible if it always underestimates the remaining cost to reach any
goal node vgfromv: for each node v∈zvand for each goal node vg∈zgthat is
reachable from v,h(v)≤g(vg)−g(v)holds. if his an admissible function, then a*
always returns a path that has the lowest overall cost.
in the remainder, given an alignment γ∈a∗
nwithγ=/angbracketleft(s1
l,s1
m),...,( sn
l,sn
m)/angbracketright,
we deﬁne ctrl(γ) as returning an alignment γ/prime∈a∗
nwithγ/prime=/angbracketleft(p1
l,p1
m) ,...,
(pn
l,pn
m)/angbracketrightthat is obtained from γby removing all write operations (i.e., only the ﬁred
transitions are retained). more precisely, for each 1 ≤i≤n,i fsi
l=/greatermuch , then pi
l=/greatermuch ,
otherwise # act(pi
l)=#act(si
l)anddom(#vars(pi
l))=∅ ,a sw e l la si f si
m=/greatermuch , then
pi
m=/greatermuch , otherwise # act(pi
m)=#act(si
m)anddom(#vars(pi
m))=∅ .
in order to use a* to ﬁnd an optimal alignment, the search space needs to be deﬁned
along with the cost of search-space nodes:
deﬁnition 10 (search space and path costs )l e t n=(p,t,f,v,u,val,w,g)be a
dpn-net and σlbe a log trace. the search space to ﬁnd an optimal alignment of nand
σlis a graph z=(zv,ze).t h es e t zvcontains preﬁxes of complete alignments
between σlandn:
zv={γ∈a∗
n|γ|l∈preﬁx(σl)∧∃σn∈pn:γ|p∈preﬁx(σn)}.
the set zecontains all (γ/prime,γ/prime/prime)∈zv×zv, where γ/prime/primeis obtained by adding one
legal move to γ/prime:
ze={(γ/prime,γ/prime/prime)∈zv×zv|∃(sl,sm)∈ans.t.ctrl(γ/prime/prime)=ctrl(γ/prime⊕(sl,sm))}.
the set of goal nodes zg⊆zvcontains all complete alignments of σlandn:
zg={γg∈a∗
n|γg|l=σl∧γg|p∈pn}.
123balanced multi-perspective checking of process conformance
in a reﬁnement of the proposal in [ 5], we add a small negligible cost /epsilon1∈r+to the
cost function kso as to guarantee termination (see theorem 2). adding /epsilon1does not
affect the optimality of the returned alignment as long as it is chosen sufﬁciently small.the cost associated with a path leading to a graph node γ∈z
vis then deﬁned as
follows:5
g(γ)=k(γ)+/epsilon1|γ|
as the search space zconsists of preﬁxes of complete alignments, from now on we
useγto denote nodes in z. to ﬁnd an optimal alignment of nandσl, we search a
path in zwith the lowest cost from the source node γ0=/angbracketleft /angbracketright to a goal node γg∈zg.
the a* algorithm guarantees to ﬁnd such a path only if the cost is monotonically
increasing while more nodes are added to the path. the following theorem proves that
the cost from deﬁnition 5satisﬁes a stricter form of this property:
theorem 1 (cost gis strictly increasing) let n = (p,t,f,v,u,val,w,g)be a
dpn-net and σlbe a log trace. let γ/prime,γ/prime/prime∈zvbe two nodes in the search space with
(γ/prime,γ/prime/prime)∈ze, i.e. there is an edge from γ/primetoγ/prime/prime. let g(γ)=k(γ)+/epsilon1|γ|be the cost
associated with a path leading to a graph node γ∈zv. then ∀γ/prime/prime:g(γ/prime)<g(γ/prime/prime).
proof by contradiction: assume that there is an alignment γ/prime/prime∈zvwith lower cost
thanγ/prime:g(γ/prime/prime)<g(γ/prime).a s(γ/prime,γ/prime/prime)∈ze, it follows that there exists (sl,sm)∈an:
γ/prime/prime=γ/prime⊕(sl,sm). the cost of an alignment is deﬁned as the sum of the cost of all
moves that led to this alignment: g(γ)=k(γ)+/epsilon1|γ|=/summationtext
(sl,sm)∈γκ(sl,sm)+/epsilon1|γ|.
therefore, the cost of γ/prime/primecan be expressed as g(γ/prime/prime)=g(γ)+κ((sl,sm))+/epsilon1.u s i n g
the assumption g(γ/prime/prime)=g(γ/prime)+κ((sl,sm))+/epsilon1< g(γ/prime)⇔κ((sl,sm))+/epsilon1< 0
should hold, but κ∈sa→ r+
0is non-negative and /epsilon1∈r+is positive. /intersectionsq/unionsq
here, we use the heuristic function introduced in [ 5], which exploits the petri-net mark-
ing equation to rule out most nodes for which all goal states have become unreachable.a formal introduction is out of scope here. furthermore, a comprehensive explanation
would require the introduction of several concepts related to the marking equation.
we limit ourselves to argue that this heuristic is also admissible when other perspec-tives are considered. to see this, imagine g
c(γ) to be the cost of an alignment/node γ
that only considers control-ﬂow deviations. we can take an alignment preﬁx γin our
search space zvand remove all information about the other perspectives (i.e. write
operations) to calculate this cost. in fact, such an alignment preﬁx would be part of
the search space in [ 5] and gcwould be the same cost function that is used in [ 5]. in
that work, h(γ) is proven to be admissible, i.e. for each alignment γ,gc(γ)≥h(γ).
our cost function g(γ) as deﬁned above only adds additional costs for deviations
with respect to other perspectives. such deviations can only be caused by incorrectwrite operations and we require a non-negative cost for any such deviation. there-
fore, g(γ)≥g
c(γ)≥h(γ) and, hence, hwill remain admissible when all process
perspectives are taken into consideration.
5we indicate the number of moves in an alignment γwith|γ|.
123f. mannhardt et al.
before introducing the actual algorithm, we need to introduce the concept of control-
ﬂow successors. let n=(p,t,f,v,u,val,w,g)be a dpn-net and mi,mfbe
the initial and ﬁnal marking, respectively. the set of control-ﬂow successors of analignment γof a trace σ
land a dpn-net nwith initial and ﬁnal markings miand
mf, denoted with ctrl_succ σl,n,mi,mf(γ), consists of every alignment that can
be obtained by adding one legal move, ignoring variables, guards, and write operations.
formally, let us introduce n/prime=(p,t,f,∅,u/prime,val/prime,w/prime,g/prime)as a dpn-net with
dom(val/prime)=dom(u/prime)=dom(w/prime)=dom(g/prime)=∅ . its control-ﬂow structure
is that of the dpn net nbut no variables, write operations and guards are deﬁned.
therefore, the set of control-ﬂow successors of an alignment γof a trace σland a
dpn-net nwith initial and ﬁnal markings miandmfis:
ctrl_succ σl,n,mi,mf(γ)={γc∈a∗
n|γc=γ⊕/angbracketleft(sl,s/prime
l)/angbracketright∧
γc|l∈preﬁx(σl)∧∃σn/prime,mi,mf∈pn/prime:γc|p∈preﬁx(σn/prime)}.
please note that γcis generally not a preﬁx alignment of the original dpn-net nsince
its process projection may not be a valid execution trace in n.
algorithm 1: balancedconformance
input : dpn-net ( n), initial and final markings ( mi,mf), log trace ( σl),
cost function ( k)
result : balanced alignment ( γ)
γ←γ0=/angbracketleft/angbracketright
queue q=/angbracketleft/angbracketright
while γ|p/∈pn∧γ|l/negationslash=σldo
foreach γ/prime
cinctrl succ σl,n,m i,mf(γ)do
γ/prime←augmentwd σl,n(γc)
ifγ/prime/negationslash=/latticetopthen
f(γ/prime)←k(γ/prime)+/epsilon1·|γ/prime|+h(γ/prime)
enqueue( q,γ/prime,f(γ/prime))
end
end
γ←polllowestcost( q)
end
algorithm 1 illustrates how we use the a* algorithm to search for an optimal
alignment. the algorithm takes a dpn-net nand a log trace σlas input and returns
the optimal alignment γthat is balanced according to a given cost function κ. instead
of building the graph zbeforehand—which is potentially inﬁnite—we build up the
search space incrementally. starting with the empty alignment γ0=/angbracketleft /angbracketright as its source
node, we build the set ctrl_succ σl,n,mi,mfwith all successors of γby taking
only the control-ﬂow perspective into account. as indicated, not every control-ﬂowsuccessor γ
cis a node of search space z.t ob ep a r to f z,γcneeds to be augmented
with the variable’s write operations. please note that process variables can be deﬁned
on inﬁnite domains and, as a result, γcmay have an inﬁnite number of successors.
since we aim to minimize the alignment cost, we only take one of the augmentations
with the lowest cost. here, we perform the augmentation in the same way as discussed
in [15] with the notable difference that we also augment alignments of preﬁxes of the
123balanced multi-perspective checking of process conformance
log trace process
a{a=3 0 0 0 ,r=m i c h a e l } a{}
b{v=false ) b{}
c{i= 530 ,d=true } c{}
(a) control-ﬂow successor
log trace process
a{a= 3000 ,r=m i c h a e l } a{a=a1,r=r1}
b{v=false ) b{v=v1}
c{i=5 3 0 ,d=true } c{i=i1,d=d1}
(b)the skeleton of all possible augmenta-
tions of the control-ﬂow successorminv1+i1+a1+r1+d1
v1= true
i1>0.1a1
i1<0.15a1
a1>5000
a1= 3000 ⇔a1=0
r1=m i c h a e l ⇔r1=0
v1=f a l s e ⇔v1=0
i1=5 3 0 ⇔i1=0
d1= true ⇔d1=0
(c)the milp problem
to ﬁnd the augmenta-
tions with the lowest
cost in deviations
fig. 4 illustration of the augmentation of a control-ﬂow successor of an alignment/node of the search space
log trace with the process model. by contrast, in the previous work only alignments of
entire log traces are augmented. at this point, we will not elaborate on this techniquebut provide an example.
example 3 let us consider the alignment in fig. 4a. this alignment is not a search-
space node to compute an optimal alignment of σ
example and the dpn-net in fig. 2,
since its process projection is obviously not a preﬁx of any process trace: the writeoperations need to be added. figure 4b shows the skeleton of all possible augmen-
tations where variables amount, requester, v eriﬁcation, interest and decision need
to be assigned values, which are represented by placeholders a
1,r1,v1,i1andd1.
these values need to be chosen so as to not violate any guard, i.e. the sequence of
transition ﬁrings need to be a preﬁx of a valid process trace. moreover, we aim to
minimize the cost of the deviations from what observed in the corresponding events inthe log. according to what proposed in [ 15], we need to solve a mixed integer linear
programming (milp) problem, which is fig. 4c in this case. the placeholders men-
tioned above become milp variables. when an optimal solution is found, the valuesof these milp variables are, in fact, the values to set in the alignments. two sets of
constraints can be observed. the ﬁrst set corresponds to the guards associated with
the transitions, deﬁned over these milp variables. moreover, for each variable, e.g.
a
1, there is a constraint that says that a boolean variable, e.g. /hatwidera1, is given a value 0 if
and only if a1is assigned the same value as observed in the corresponding event, e.g.
a1=3,000⇔/hatwidera1=0.6the objective function is the cost in term of severity of the
deviations, i.e. the sum of such boolean variable, e.g. /hatwidera1, weighted with coefﬁcient
corresponding to the cost for deviation of the respective process variable, which isequal to 1 for all variables for this example.
in the remainder, the augmentation is abstracted as a function augmentwd
σl,n:
a∗
n→zv, which takes a control-ﬂow successor and returns an alignment γ∈zv.
6although these constraints are not expressed in a linear form, each of these can be translated into a pair
of linear inequations as discussed in [ 15].
123f. mannhardt et al.
since nis assumed to be only relaxed data sound, it may happen that γccannot be
augmented with other perspectives (i.e., the milp problem has no solutions). in this
case, the function is assumed to return the special value /latticetop. note that the augmentation
γ/primeforγcneeds to be computed from scratch, ignoring the predecessor γ. indeed, the
last move may refer to a transition tthat is not allowed to ﬁre in the dpn-net state
reached by ﬁring sequence γ|p.
if an augmentation γ/primeexists, i.e. γ/prime/negationslash=/latticetop , the cost f(γ/prime)is computed and γ/primeis
inserted into the priority queue qusing the function enqueue . if it does not exist,
γcdoes not yield to any valid alignment to be added to q. once all the control ﬂow
successors are considered, a new alignment γis picked from the head of qusing the
functionpolllowestcost , i.e. one of the alignments associated with the lowest
cost. if γis a complete alignment, it is returned as the optimal alignment. since
the heuristic function is admissible and the cost gis monotonically increasing, the
application of a* guarantees that the returned alignment has the lowest cost of allcomplete alignments. otherwise, the node is expanded and successors are added to
the queue. therefore, the search-space successors of a given node are only created
when such a node is visited, without unnecessarily using the machine memory to storeinformation for search-space nodes that are never going to be visited.
example 4 figure 5shows the portion of the search space that algorithm 1 constructs
to ﬁnd an optimal alignment of σ
example andnwhen the standard cost function is
used. each node γ∈zvis represented by a circle, which includes both the values for
the actual cost g(γ) and the estimated cost h(γ) to extend the alignment to obtain a
complete one. nodes emphasized with a gray background are those which have been
visited during the search (i.e., the nodes that are polled from the priority queue). the
other nodes have been constructed and the values of functions gandhcomputed,
because they are successors of nodes that have been visited. the gray nodes are also
associated with numbers #1 ,..., #10, indicating the order in which they have been
visited. goal nodes γg∈zgare depicted with a double-line border. an edge between
two nodes/alignments γ/primeandγ/prime/primeis labelled with the move (s/prime,s/prime/prime)with which γ/primehas
been extended, i.e. γ/prime/prime=γ/prime⊕/angbracketleft(s/prime,s/prime/prime)/angbracketright. for readability, the labels do not show the
variable assignments but they only show the transition names; for the same reason, weomit some labels when they are not very signiﬁcant. as a matter of fact, example 3
refers to one of the control-ﬂow successors of the node/alignments with label #2,
namely the successor associated with a move in both for transition c. it is easy to see
that two is the cost of the optimal solution of the associated milp problem, shown
in fig. 4c, which is also the cost of such an alignment, i.e. the function k. to get the
cost g(γ),/epsilon1is added for each of the three steps in the alignment.
the optimal alignment is associated with the alignment/node γ
owith label #10.
note that fig. 5indicates a different target node/alignment γ/prime
oas well. in fact, g(γ/prime
o)=
g(γo)and, hence, γ/prime
ois also an optimal alignment. the choice between γ/prime
oandg(γo)
is totally arbitrary since there is no reason to prefer one alignment over the other.
theorem 2 (algorithm 1 terminates) let n = (p,t,f,v,u,val,w,g)be a relaxed
data sound dpn-net with m iinitial marking and m fﬁnal marking. let σl=
/angbracketleftl1,..., ln/angbracketrightbe a log trace. let k be a cost function. algorithm 1 terminates with
inputs n ,mi,mf,σl,k.
123balanced multi-perspective checking of process conformance
g=0
h=0#0
3+
2 1#1
1+
2
2+2
22
1#2
1+2
2
4+3
21+3
0#43
1#3 4+3
22+3
1
2+4
21+4
21+4
0#61+4
0#72+4
15+4
15+4
1
2+5
13+5
12+5
12+5
13+5
12+5
11+5
0#81+5
0#9
1+6
0#101+6
0(,a) (a,a) (a,)
(,b) (b,b) (b,)
(,d)
(c,) (,c) (,inv1 )(c,c)
(c,) (,inv1 )
(f,f) (f,f)
(,inv5 ) (,inv5 )
fig. 5 portion of the search space constructed to ﬁnd an optimal alignment of σexample and the dpn-net
in fig. 2. write operations omitted for readability
proof since nis relaxed data sound, there exists at least one valid process trace
σm=/angbracketleftp1,..., pm/angbracketright∈pn. therefore, there exists at least one complete alignment
γo=/angbracketleft(l1,/greatermuch) ,...( ln,/greatermuch),(/greatermuch,p1) ,...,( /greatermuch,pm)/angbracketright, which belongs to the target node
of the search space used by algorithm 1. suppose that algorithm 1 does not terminates
with inputs n,mi,mf,σl,k. it means that for each q∈n, there exists an alignment
γqcomposed by qmoves such that f(γq)≤f(γo). in particular, it holds for q/prime=
⌈f(γo)
/epsilon1+1⌉. since each alignment move adds at least a cost /epsilon1,f(γq/prime)≥⌈f(γo)
/epsilon1+
1⌉·/epsilon1≥f(γo)+/epsilon1. this cannot be true since we assumed f(γq)≤f(γo). /intersectionsq/unionsq
so, algorithm 1 will always terminate although, in theory, an arbitrary large number of
non-complete alignments need to be visited. in practice, this number is kept reasonably
small by the fact that models are usually designed in a way that there is no possibilityto have arbitrary long sequences in an alignment where each move takes on a zero
cost (i.e., the corresponding arcs in the search space is associated with a cost /epsilon1).
as discussed in [ 10], the worst-case complexity of the a* algorithm is exponential
in the length of the path that leads from the initial search-space node to the nearest
goal node. applied to the problem of ﬁnding an optimal alignment, this means that
the worst-case complexity is exponential in the length of the alignment. this is of the
123f. mannhardt et al.
same order of magnitude as the log-trace traces, assuming that, on average, each trace
event is associated with one or two moves (e.g., a move in both or a move in log plus
a move in model). for each node that is visited, a milp problem needs to be solved.so, the number of problems to be solved is exponential in the length of log trace. the
worst-case complexity of solving an milp problem is exponential in the number of
variables and constraints, which, in our setting, is translated to the number of variableswritten by and guards associated to transitions. in summary, the worst-case complexity
is double exponential.
finding a balanced alignment comes at the price of a higher computation cost in
comparison with the technique presented in [ 15]. recall that in [ 15] one cannot bal-
ance the different perspectives. nevertheless, efﬁciency is of the utmost importance.
hence, we provide a number of optimizations to speed up the computation. for fur-
ther information, readers are referred to [ 20]. along with our choice of the heuristic
function, these optimizations limit the number of nodes to be visited and, hence, thenumber of milp problems to be solved. as also discussed in sect. 6for what con-
cerns the real-life case study, in all the experiments, the double-exponential worst case
complexity is never encountered in practice.
5 implementation
we implemented the algorithm of section 4as a plug-in for the open-source prom
framework.
7the plug-in balanced data conformance checker , takes as input both
a process model in the form of a dpn-net and an event log in the xes format. forthese, it computes optimal balanced alignments for each trace based on the algorithm
described in sect. 4.
milp problems are solved through the open-source library lp_solve , which is based
on the revised simplex method combined with a branch-and-bound method for the
integers.
8however, we use a standardized interface and, hence, one is free to plug in
several solvers, including commercial ones.
the output of the plug-in is a set of alignments that can be used by other plug-ins of
the prom framework. for example, all visualization plug-ins that are described in [ 15]
require such a set of alignments as input. the basic visualization plug-in presents each
alignment as color-coded trace. colors are used for the different types of moves of
the alignment. for example, a move in both with correct write operations is colored
green and a move in log is colored yellow. whereas this visualization is well-suited
to analyze the alignment for a single trace, it does not provide a good overview of the
deviations in the whole event log.
ahelicopter view [15] on the whole event log is given by a second plug-in. it
projects the set of alignments for the entire event log onto the process model. figure 6
depicts the output of this projection on net plug-in for a set of alignments and the
process model of the road trafﬁc ﬁnes management process, which is discussed in
more detail in sect. 6. transitions and variables are colored according to the number
7http://www.promtools.org
8http://lpsolve.sourceforge.net
123balanced multi-perspective checking of process conformance
start
endcreate fine send fine no/g415ﬁca/g415on
appeal to 
prefectureinv3inv5
inv4appeal to judge
send for credit 
collec/g415oninv1 send appealreceive result no/g415fy oﬀenderpayment add penalty
inv2payment payment
inv6amount
pointspayment
expenses
delay
prefecturedelay
judge
delay
senddismissal
fig. 6 output of the projection on net plug-in of prom using a set of balanced alignments. the darker the
color , the higher the percentage of deviations that are detected for the transition or the variable. figure was
redrawn to improve readability (color ﬁgure online)
of deviations in the alignments, i.e. move in log ,move in model , and move in both with
incorrect write operations , in relation to the number of occurrences of the transition or
variable. the darker the color, the higher is the percentage of deviations for a transition
or variable. for example, the color of the send appeal transition encodes the fact that
the highest percentage of deviations is related to send appeal .
6 evaluation
to evaluate the usefulness and feasibility of the balanced approach we use both a real-
life and a synthetic data set. to assess the usefulness, we compare results returned
by the balanced approach with those returned by the non-balanced one from [ 15].
regarding the feasibility of the balanced approach, we show that our implementationcan easily handle traces with noise. moreover, traces of considerable length can be
handled in a reasonable amount of time. we use an event log from an information
system of the italian police as a real-life case. we also simulated the process model
that is shown in fig. 2using cpn tools
9to generate synthetic event logs. these allow
for various controlled experiments to evaluate the performance of the approach.
6.1 real-life event log
we applied our balanced multi-perspective conformance checking approach to a real-
life event log taken from an information system of the italian police. the information
9http://www.cpntools.org
123f. mannhardt et al.
start
endcreate fine send fine no/g415ﬁca/g415on
appeal to 
prefectureinv3inv5
inv4appeal to
 judge
send for credit 
collec/g415oninv1 send appealreceive result no/g415fy oﬀenderpayment add penalty
inv2payment payment
inv6amount (a)
points (po)payment (p)
expenses (e)
delay
prefecture (dp)delay
judge (dj)
delay
send (ds)dismissal (d)
fig. 7 dpn-net of the road trafﬁc ﬁne management process
transition guard
send fine delay send <9 0d a y s
appeal to judge delay judge <6 0d a y s
appeal to prefecture delay prefecture <6 0d a y s
receive result dismissal = nil
send for credit collection payment < amount + expenses
inv1 (dismissal != nil) ∨(payment ≥amount ∧points = 0)
inv2 payment ≥amount + expenses
inv3 payment ≥amount + expenses
inv4 dismissal = #
inv5 dismissal = nil
inv6 dismissal = g
fig. 8 guards of the road trafﬁc ﬁne management dpn-net
system supports the management and handling of road trafﬁc ﬁnes by a local police
force in italy. the system records sufﬁcient data to create an event log.
6.1.1 process model
the process model shown in fig. 7together with the guards in fig. 8specify the
management of road trafﬁc ﬁnes. we designed the process model manually using adiscovered model next to domain knowledge and information regarding trafﬁc regu-
lations. the process starts with the create fine transition that writes four variables:
amount (a),points (po),payment (p) and dismissal (d). the amount variable refers
to the amount that needs to be paid by the offender and the points variable records the
number of points that are deducted from the offender’s license. payment is the total
amount that has been paid by the offender. it is always initialized as p=0.0.dis-
123balanced multi-perspective checking of process conformance
missal contains a character that encodes the diverse reasons for a possible dismissal
of the ﬁne. a value of nil encodes that the ﬁne is not dismissed (i.e. has to be paid);
any other value encodes different motivations. in general, the offender can pay the ﬁne(partly or fully) at many moments in time: right after the creation, after a road ﬁne
notiﬁcation is sent by the police to the offender’s place of residence, or when such a
notiﬁcation is received by the offender herself. if the entire amount is paid (or, even,by mistake, more than that amount), the ﬁne management is closed. this motivates
the presence of the invisible transitions inv1,inv2 and inv3. if a notiﬁcation is sent,
the offender needs to also pay the postal expenses. if the offender does not pay within180 days, a penalty is added, usually as much as the ﬁne’s amount. after being notiﬁed
by post, the offender can appeal against the ﬁne through a judge and/or the prefecture.
if the appeal is successful, the variable dismissal is set to value gor #, respectively,
and the case ends (by ﬁring either inv4o r inv6). otherwise, the case continues by
ﬁring inv5o rreceive result . if the offender does not pay, eventually the ﬁne ends by
handing over the case for credit collection.
the italian laws speciﬁes a number of time constraints. the ﬁne notiﬁcation must
be sent within 90 days since its creation. after the notiﬁcation, the offender may onlyappeal to a judge/prefecture within 60 days. to check the conformance of the ﬁne
management with respect to these laws, we have introduced three additional variables
that record the various delays: delay send ,delay judge ,delay prefecture .
6.1.2 event log
the road trafﬁc ﬁne management process is supported by an information system that
records data about its operations in a postgressql database. the database snapshot
used here was taken in june 2013. we exported the event log to a csv format andconverted it to the xes format,
10which is the event log format supported by tools like
prom. from the analysis of the event log, we noticed that cases are usually completed
within 6 months, including those cases ending with a referral to credit collection. forthe analysis, we want to consider only ﬁnished cases. as a heuristic to ensure this, we
ﬁltered out any case that started after june 2012. since the relevant laws and procedures
are rather stable over the past years, the last year of the event log should show thesame behavior as in previous years.
the resulting event log contains 145,800 event traces, which were recorded between
january 2000 and june 2012. most of the traces are short: on average, a trace consistsof four events only. for 43 % of the traces the process ends after two events: the ﬁne
is paid ( payment ) before the letter with information about the ﬁne is sent out ( send
fine ). in contrast to this simple part of the log, 51 % of the traces recorded ﬁve or
more events and 62 % of the traces take longer than 100 days to ﬁnish. this suggests
that many offenders do not pay the ﬁne in time or appeal against the decision.
similar as for the process model, the event log has been extended to contain variables
delay send ,delay judge ,delay prefecture that record the delays.
10http://www.xes-standard.org/
123f. mannhardt et al.
6.1.3 conformance checking: choice of cost function
the balanced approach has been used to check the conformance of the event log
described in sect. 6.1.2 against the model in sect. 6.1.1 . as described in sect. 3.2,
the approach requires the deﬁnition of a cost function κ(sl,sm). a process analyst
chooses such a function assigning a higher cost to deviations that are considered asmore severe for the speciﬁc process. since the ﬁne’s amount and the deducted points
are deﬁned by law and the expenses follow the italian post tariffs, their values cannot
be modiﬁed to give an explanation of deviations. in order to respect this domaincharacteristic, we assigned signiﬁcantly higher costs to their deviations in comparison
to those for deviations of the values of payment anddismissal as well as the control
ﬂow.
the cost function is as speciﬁed by two tables in fig. 9. a tabular representation is
used to enhance the readability. however, we aim to quickly show that the so-deﬁnedcost function is compliant with the deﬁnition κ
/prime(sl,sm)→ r+
0. the cost for a legal
move(sl,sm)∈anis obtained by looking up the costs regarding the transition and
adding the cost of missing write operations in case of a move in model , or the cost of
incorrect write operations in case of a move in both with incorrect write operations .
this deﬁnition complies with the cost-function structure as given in deﬁnition 8.f o r
example, consider activity create fine , which writes variables amount ,expense and
payment . the part of the cost function referring to create fine is deﬁned as follows:
κ(sl,sm)=⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩1 (sl,sm)is a move in log for create fine
1+|w(#act(sm))| (sl,sm)is a move in model for create fine
3·| {v∈v:
#vars(sl,v)/negationslash=#vars(sm,v)
∧#vars(sl,v)/negationslash=⊥ } |
+| {v∈v:#vars(sl,v)=⊥
∧#vars(sm,v)/negationslash=⊥ } | (sl,sm)is a move in both for create fine
... ...
fig. 9 costs function κ/prime(sl,sm)for the road ﬁnes management process. the cost for move in both without
incorrect write operation is 0 for all transitions. log moves for invisible transitions take an inﬁnite cost: this
value is irrelevant since invisible transitions are never associated with any log’s event. the cost for move in
both with incorrect write operation is obtained by summing the speciﬁc costs associated with each variable
for which a missing or incorrect value has been written, as per right-hand side table
123balanced multi-perspective checking of process conformance
a cost of one is assigned to a move in log ,amove in model and each missing
write operation concerning the transition create fine . a higher penalty of three is
added for each incorrect write operation in case of a move in both with incorrect write
operations .
6.1.4 conformance checking: analysis of resultsafter applying the balanced approach for conformance checking with the cost function
discussed in sect. 6.1.3 , we used the plug-in projection on net to obtain an overview
of the non-conformance problems. figure 6shows the results of the project on net
plug-in.
the average ﬁtness level was 0.96, which testiﬁes a very good conformance of the
event log with the process model. in particular, 53.1 % of log traces are characterized
by a ﬁtness level of 1. however, as the net projection indicates, several deviationsare still present. for example, the transition send appeal is colored with the darkest
color: in 79.1 % of the alignments that contain send appeal there is a deviation from
the process model concerning this transition. particularly, send appeal is executed
2,895 times with an incorrect value for dismissal , 112 times as move in log , 3 times
asmove in model and the remaining 795 times without deviations. in particular, often
the dismissal value is # instead of g. this suggests that process participants should
pay attention not to confuse the dismissal code corresponding to a successful appeal
to a judge with one referring to a successful appeal to the prefecture.
moreover, fig. 6shows that the time constraints regarding send fine ,appeal to
judge andappeal to prefecture are often not respected. the value of the delay send
variable is incorrect in 46.8 % of the traces, the value of delay judge in 18 % of the
traces, and the value of delay prefecture in 15.4 % of the traces. this suggests that
authorities are currently unable to handle road ﬁnes in a timely and correct manner.
therefore, to remedy this situation more resources, i.e. police ofﬁcers, should be
assigned by the municipality. alternatively, some parts of the management should be
outsourced, e.g. the steps necessary to print ﬁne notiﬁcations, put these in envelops,
and send them by post. indeed, these are manual steps that require a lot of time fromthe involved police ofﬁcers.
a valuable insight is that there are deviations recorded for the send for credit
collection transition. in 8.2 % of all traces (i.e. 11,945 times) the transition appears
as a move in model in the alignment. for 11,945 ﬁnes, within 1 year, neither have
their amount been paid in full nor have they been forwarded for credit collection.
considering that sending for credit collection is supposed to usually occur within6 months after the ﬁne has been opened, this ﬁnding suggests that there may be issues
(e.g. unmotivated delays) with managing unpaid ﬁnes.
in order to compare the results of our balanced approach with those returned by a
non-balanced approach [ 15], we also applied the latter. figure 10shows a scatter plot
in which each black box represents one trace. the x-axis shows the ﬁtness level of non-
balanced alignment and the y-axis shows the ﬁtness level of the balanced alignment.
for all traces that are left from the main diagonal, which amounts to 21.7 % of all traces,
the balanced approach improved the alignment. for all traces on the main diagonal the
ﬁtness level remains unchanged. the balanced approach improved the ﬁtness level of
123f. mannhardt et al.
fig. 10 comparison of the
ﬁtness levels returned by thenon-balanced and the balanced
approach. dots on the diagonal
correspond to cases with
unchanged ﬁtness. dots above
the diagonal show cases for
which the non-balanced
approach returns lower ﬁtness
values
start
endcreate fine send fine no/g415ﬁca/g415on
appeal to 
prefectureinv3inv5
inv4appeal to judge
send for credit 
collec/g415oninv1 send appealreceive result no/g415fy oﬀenderpayment add penalty
inv2payment payment
inv6amount
pointspayment
expenses
delay
prefecturedelay
judge
delay
senddismissal
fig. 11 comparison of the projection on net output returned for the non-balanced ( right ) and the balanced
approach ( left). the darker the color , the higher the percentage of detected deviations for the transition or
the variable. the ﬁgure clearly shows that the balanced approach provides different results suggesting that
the approach to ﬁrst construct control-ﬂow alignments may provide misleading results. figure was redrawn
to improve readability (color ﬁgure online)
the alignment for 46.4 % of the traces if one excludes the perfectly-ﬁtting traces. note
that for perfectly-ﬁtting traces this is obviously impossible. 68,330 traces contain atleast one deviation.
after removing every perfectly-ﬁtting trace from the event log, we again applied
both the balanced and non-balanced approach. in fig. 11, the output of the projection
123balanced multi-perspective checking of process conformance
log trace process
create fine create fine
{a= 131 .0,d= nil , {a= 131 .0,d= nil ,
po=0,p=0} po=0,p= 141 .0}
send fine send fine
{ds= 1152 , {ds= 1152 ,
e=1 0.0} e=1 0.0}
inv2
(a) non-balanced alignment, with a ﬁt-
ness of f(σa,n)=0.77log trace process
create fine create fine
{a= 131 .0,d=n i l , {a= 131 .0,d=q,
po=0,p=0} po=0,p=0}
send fine
{ds= 1152 ,
e=1 0.0}
inv1
(b) balanced alignment, with a ﬁtness
off(σa,n)=0.85
fig. 12 comparison between balanced and non-balanced alignments of a trace σataken from the real-life
event log. the non-balanced alignment contains an incorrect variable assignment for the initial payment p,
whereas the balanced alignment contains an incorrect variables assignment for dismissal d
on net plug-in for the 68,330 non-perfectly ﬁtting traces is compared for both the
balanced, color shown on the right side of transitions and variables, and the non-balanced approach, color shown on the left side. the comparison shows that there
are signiﬁcant differences in the identiﬁcation of the root-causes of the deviations.
in particular, when applying the non-balanced approach, the net projection highlightsthat many traces are deviating due to wrong values of amount andpayment . indeed,
the color on the right side of these variables is yellow and dark yellow. vice versa, the
left side of the corresponding variables is white-colored.
in order to understand the reason for such a signiﬁcant difference in the identiﬁca-
tion of root causes, we have inspected the alignments returned by the two approaches.
we found out that there are alignments for hundreds of log traces of the following form:σ
a=/angbracketleft(create fine ,{a=131.0,d=nil,po=0,p=0}),(send fine ,{ds=
1152,e=10.0}}))/angbracketrightand a smaller number of traces of the following form: σb=
/angbracketleft(create fine ,{a=138.0,d=nil,po=6,p=0}),(send fine ,{ds=
3,409,e=11.0}}),(notiﬁcation ),(appeal to judge ,{ds=840,d=nil}}),
(add penalty ,{a=275.0}}),(payment ,{p=149.0}})/angbracketright.
figure 12compares the alignments returned by the balanced and non-balanced
approach for the trace σa. the non-balanced approach highlights that the ﬁne at
creation time should have already been associated with a payment of 49 euros. bycontrast, the balanced approach suggests that the ﬁne should have been dismissed,
e.g. with code q, and never sent out. it is easy to see that the alignment returned by
the non-balanced approach is not plausible, since it is impossible to create a ﬁne thatalready has a full payment associated to it. the payment by necessity can only be
made at a later stage.
regarding amount , any root cause that consists of changing the assignment of
such a data variable (i.e. an incorrect write operation) is not acceptable. after all, this
amount is deﬁned by the italian law and police ofﬁcers use road-ﬁne forms in which
the amount is predetermined. for instance, let us consider the trace σ
b. clearly, this
trace has problems. first, the ﬁne was sent too late, since the delay is longer than
what law permits. second, the ﬁne has been closed with a payment of 149 euros,
which corresponds to the initial amount plus the postal expenses. unfortunately, apenalty was also included, which the offender did not pay. as shown in fig. 13, both
approaches highlight the problem that the ﬁne is send too late. for the second source of
mis-conformance, the non-balanced approach suggests that, after applying the penalty,
123f. mannhardt et al.
(a) (b)
fig. 13 comparison between balanced and non-balanced alignments of a trace σbtaken from the real-
life event log. in the non-balanced alignment the amount aafter adding a penalty and the delay send ds
variables are marked as incorrect ( underlined ). in the balanced alignment the amount ais considered as
correct and instead the transition send to credit collection is inserted as model move
the due amount does not change. this is deﬁnitely not plausible since adding a penalty
needs to result in a higher amount to be paid. as a matter of fact, the italian law statesthat, besides very few exceptions, the due amount should even be doubled, excluding
expenses. by contrast, the balanced approach returns a meaningful result: the ﬁne
was not paid in full and, hence, needs to be sent for credit collection.
the reason for the differences in the returned alignments is related to the fact that
the non-balanced approach constructs alignments by initially aligning the control-ﬂow
and, only later, by aligning the other perspectives. the non-balanced approach makesthe assumption that control-ﬂow deviations are more costly and, hence, they can be
aligned ﬁrst. if this assumption does not hold, such as for this case study, the returned
alignments are not optimal and this may lead to implausible explanations. it is not a
solution to assign lower costs to deviations related to the control-ﬂow since this would
also return implausible explanations, being based on a wrong cost functions.
we conclude this section by brieﬂy reporting on the execution time. finding the
alignments took on average 2 .3 ms per trace for the balanced approach, versus 1 .2m s
for the non-balanced one. the balanced approach required slightly more time, whichstill appears reasonable and certainly justiﬁed by obtaining more meaningful expla-
nations for the deviations.
6.2 synthetic event log
we also conducted experiments with synthetic event logs in order to show that the
balanced approach is still feasible when dealing with loops in the process model,
event logs containing longer traces, and higher levels of noise. we constructed 3 event
logs that contain traces of considerable length (between 3 and 35 events per trace) andwe introduced different levels of noise in such logs l
1,l2,l3, namely 5, 10 and 15 %
of noise, respectively. introducing xmanipulated the event logs by swapping xtrace
and by changing the attribute values associated with transition ﬁrings such that xthe
123balanced multi-perspective checking of process conformance
(a)l1:5 %n o i s e (b)l2:1 0 %n o i s e (c)l3:1 5 %n o i s e
fig. 14 run-time per trace for different trace length and noise level. the non-balanced approach is shown
asgray diamonds , the balanced approach as black dots
respective guards are not satisﬁed. figure 14illustrates the execution time with three
scatter plots (one for each event log). a dot located at position (x,y)identiﬁes the fact
that a trace of length xrequired ymilliseconds to be aligned. two series of dots are
displayed: black dots refer to the execution time of the balanced algorithm describedin sect. 3.2, also featuring the optimizations, whereas gray dots refer to the execution
time of the non-balanced approach that is described in [ 15]. the balanced approach is
computationally more expensive than the unbalanced approach: the execution time
grows exponentially with log traces of increasing size. it is also easy to see that the
trend does not signiﬁcantly change in the three scatter plots.
7 related work
conformance checking based on event logs has several aspects [ 3], this paper focusses
on replay ﬁtness (rather than precision or generalization). as we explained in the
introduction, the data, resource and time perspectives are often neglected when con-
sidering conformance checking of an event log to a process model. however, thereare many papers on conformance checking that only consider the control-ﬂow per-
spective. therefore, we ﬁrst discuss some conformance approaches that abstract from
data-ﬂow, resources, time, etc.
one of the earlier works in this context is [ 9]. in [ 9], the log is considered as a
stream of events, which is matched to the model which is also considered as a stream
of events. in contrast to our approach, no guarantees are made about the optimality ofthe result and in special cases, the approach may not even terminate. in [ 26] and [ 25],
techniques are presented that compare an abstraction of a process model with a log.
in both cases, the process model is required to exhibit ﬁnite behavior. furthermore,no alignment is provided. instead, only a number that quantiﬁes the conformance is
returned.
token-based replay techniques [ 21,24,27] can handle inﬁnite behavior but need
to resort to heuristics to deal with silent/duplicate activities. in some cases, the use
of heuristics may lead to false negatives (i.e. perfectly ﬁtting process executions are
evaluated as non-ﬁtting executions), as shown in [ 4]. moreover, the user cannot set the
123f. mannhardt et al.
severity of different deviations (i.e., non-conformance is measured in terms of missing
and remaining tokens).
to overcome the limitations of earlier approaches (no guarantees for correctness
and the inability to handle silent/duplicate activities), alignment-based techniques were
proposed by adriansyah et al. [ 5]. these are tailored towards aligning the control ﬂow
of a procedural process model with a trace. they show that the a* algorithm canprovide an efﬁcient solution to the problem. unfortunately, the approach cannot be
straightforwardly extended to account, e.g., for the data perspective. in a previous
work [ 17], de leoni et al. have shown that, indeed, if the domains of all variables
are ﬁnite, a multi-perspective alignment problem can be translated into the classiﬁcal
alignment problem. however, the assumption of ﬁnite domains for any variable is too
restrictive and, hence, the practical relevance would be compromised. if the domain of
any variables is inﬁnite, the successors of a given search space node (i.e. the alignments
obtained by adding a legal move to a non-complete alignment) are inﬁnite in number.therefore, the a* algorithm is not directly applicable because it requires the number
of successors of a search space node to be ﬁnite. this paper uses a technique that limits
the number of successors to three, two of which are obtained by solving two milpproblems.
this paper reports on a technique that is signiﬁcantly different from what proposed
in [15]. the approach presented in [ 15] performs the alignment computation in two
steps. for each trace, a control-ﬂow alignment is built leveraging on work [ 5]; then, the
alignment is augmented with the write operations by solving a milp problem. this
approach is certainly faster since the a* algorithm only considers the control ﬂow andone milp problem needs to be solved in total. unfortunately, in certain situations, the
alignment is not optimal and, thus, can even return unlikely or wrong explanations
of deviations from a domain perspective. this has also been conﬁrmed by real-lifeexperiments reported on in sect. 6.1. by ﬁrst considering only the control ﬂow, this
approach cannot balance the costs related to data and control-ﬂow and, therefore, might
return such wrong explanations. the technique proposed in our work is guaranteed to
return optimal solutions and, hence, more likely explanations of diagnosed deviations.
this is due to the fact that the different perspectives are considered all together ratherthan sequentially.
our approach notably advances beyond existing techniques for data-aware behav-
ioral compliance checking [ 8,19]. there is more work related to compliance checking
of business processes with regard to norms and regulations [ 7,12,13,18]. in con-
trast to our work, these approaches focus on checking whether a process model can
exhibit non-compliant behavior by analyzing the model only, thereby ignoring eventdata.
some research approaches focus on verifying the compliance of process models
with respect to a set of formulas, which are mostly intended to encode business rulesof which one wants to verify the compliance (e.g. [ 8,19,22]) a log trace can possibly
be represented by a set of formulas (e.g., an event for activity ais followed by an
event for activity b) and, hence, its compliance can be checked by applying existing
techniques. unfortunately, their diagnostics are limited to highlighting which formulas
are not satisﬁed. we aim to pinpoint where in the process deviations occur, such as
the case that an activity has not been executed or has written a wrong value for a
123balanced multi-perspective checking of process conformance
variable. it is far from easy to derive the same insights on the basis of not-satisﬁed
formulas. this is due to the fact that the same log trace can be “repaired” in multiple
ways to satisfy one formula. when multiple, non-satisﬁed formulas come in to play,we would be interested in ﬁnding the least expensive changes that are needed to
ensure all formulas are satisﬁed. in fact, this is again the problem of ﬁnding the least
expensive solution in a certain search space, which is exactly what our application ofthe a* algorithm aims to be. to our knowledge, the same limitation is also shared by
approaches that use alternative languages to handle veriﬁcation with data variables
in processes (e.g. [ 6]), as well as by techniques to debug the execution of distributed
systems (e.g. [ 23,28]).
efﬁcient algorithms also exist to perform sequence alignments (e.g., the algo-
rithms of needleman-wunsch and smith-waterman). similarly, in process mining,
bose et al. [ 14] have proposed techniques to efﬁciently align pairs of log traces.
unfortunately, they cannot be applied to ﬁnd an alignment between a log trace anda process model. in our setting, the process trace that is to be aligned with the log
trace is not know a priori; hence, a process trace minimizing the severity of the
deviations needs to be chosen. moreover, sequence and trace alignments only focuson the activity names, i.e. the control-ﬂow perspective, ignoring the other perspec-
tives.
8 conclusion
in recent years, many techniques have been proposed to evaluate a model’s confor-
mance with respect to given logs. as mentioned in sect. 1, these techniques can only
evaluate the conformance with respect to control-ﬂow considerations and, hence, areunable to check, for example, the correctness of routing decisions, activities performed
by unqualiﬁed resources, and activities that happen outside the correct time frame.
in [15], a technique was presented to align log traces and processes for conformance
checking that takes all perspectives into account. the main drawback of that approach
is that in certain situations the returned alignments are not optimal and, hence, moredeviations are highlighted than necessary. as discussed, a sub-optimal solution may be
returned if there are trade-offs between the different perspectives. as a consequence,
the explanation of the deviations may be unlikely or, even, wrong from a businessviewpoint. as an example, consider the conformance-checking analysis on the event
log about road-ﬁne management, which has been reported on in sect. 6.1.4 .w eh a v e
shown that, for this case study, the approach discussed in [ 15] would return futile results
in a number of cases, such as diagnosing non-plausible deviations on amount .t h i s
experiments show that the balanced approach is also feasible in practice with event
logs of a considerable, industry-strength size. along with the evaluation of a real-lifeevent log, we also tested the approach on several synthetic event logs to evaluate how
the approach scales with logs of increasing size. while the problem is intrinsically
np-hard, the experiments show that solutions can be found in a reasonable amount oftime.
in contrast to [ 15], our approach allows for arbitrary cost functions covering all
perspectives. this allows us to express statements such as “skipping activity ais
123f. mannhardt et al.
more severe than executing activity aat too late a time” and “executing activity aby
a person not having role ris less severe than entering the wrong amount”. for future
work, we aim to investigate the nature and effects of different cost functions.
the application of the techniques described in different case studies demonstrated
the importance of providing a helicopter view that summarizes where deviations com-
monly occur. at the same time, one may be interested in looking at the speciﬁc align-ments to dig into speciﬁc deviations at the case level. therefore, as another part of our
future work we plan to improve the visualization such that it is easier to explore a large
set of alignments. it would also be interesting to not align traces in isolation. in severalscenarios, e.g. in process security checking, the conformance of a case depends on the
behavior observed in other cases that are being executed. the focus of this paper was
on ﬁtness. however, it is also interesting to investigate data conformance focusing
on precision and generalization [ 3]. moreover, decomposition techniques based on
the notion of so-called valid decompositions [ 2] can be used to further improve the
performance of our multi-perspective conformance checking approach.
open access this article is distributed under the terms of the creative commons attribution license
which permits any use, distribution, and reproduction in any medium, provided the original author(s) and
the source are credited.
references
1. van der aalst wmp (2011) process mining—discovery, conformance and enhancement of business
processes. springer
2. van der aalst wmp (2013) decomposing petri nets for process mining: a generic approach. distrib
parallel databases 31(4):471–507
3. van der aalst wmp , adriansyah a, van dongen b (2012) replaying history on process models for
conformance checking and performance analysis. wiley interdiscip rev: data min knowl discov
2(2):182–192
4. adriansyah a, van dongen bf, van der aalst wmp (2011) towards robust conformance checking. in:
proceedings of the 6th workshop on business process intelligence (bpi 2010), lnbip , vol 66, springer,
pp 122–133
5. adriansyah a, van dongen bf, van der aalst wmp (2013) memory-efﬁcient alignment of observed
and modeled behavior. technology report, bpmcenter.org. bpm center report bpm-13-03
6. alberti m, gavanelli m, lamma e, mello p , torroni p (2004) speciﬁcation and veriﬁcation of agent
interactions using social integrity constraints. electr notes theor comput sci 85(2):94–116
7. awad a, weidlich m, weske m (2009) speciﬁcation, veriﬁcation and explanation of violation for data
aware compliance rules. in: baresi l, chi ch, suzuki j (eds) service-oriented computing, lncs, vol
5900, springer, pp 500–515
8. belardinelli f, lomuscio a, patrizi f (2012) v eriﬁcation of gsm-based artifact-centric systems through
ﬁnite abstraction. in: proceedings of the 10th international conference on service-oriented computing
(icsoc’12), lncs, vol 7636, springer, pp 17–31
9. cook je, wolf al (1999) software process validation: quantitatively measuring the correspondence
of a process to a model. acm trans softw eng methodol (tosem) 8:147–176
10. dechter r, pearl j (1985) generalized best-ﬁrst search strategies and the optimality of a*. j acm
(jacm) 32:505–536
11. desel j, esparza j (1995) free choice petri nets. cambridge university press, cambridge
12. governatori g, milosevic z, sadiq sw (2006) compliance checking between business processes and
business contracts. in: proceedings of the 10th international enterprise distributed object computing
conference (edoc 2006), ieee computer society, pp 221–232
123balanced multi-perspective checking of process conformance
13. hoffmann j, weber i, governatori g (2012) on compliance checking for clausal constraints in anno-
tated process models. inf syst front 14(2):155–177
14. jagadeesh chandra bose rp , van der aalst wmp (2012) process diagnostics using trace alignment:
opportunities, issues, and challenges. inf syst 37(2):117–141
15. de leoni m, van der aalst wmp (2013) aligning event logs and process models for multi-perspective
conformance checking: an approach based on integer linear programming. in: the 11th international
conference on business process management (bpm’13), lncs, vol 8094, springer, pp 113–129
16. de leoni m, van der aalst wmp (2013) data-aware process mining: discovering decisions in processes
using alignments. in: proceedings of the 28th acm symposium on applied computing (sac’13), acm
(2013)
17. de leoni m, van der aalst wmp , van dongen bf (2012) data- and resource-aware conformance
checking of business processes. in: 15th international conference on business information systems,lnbip , vol 117, springer, pp 48–59
18. liu y , müller s, xu k (2007) a static compliance-checking framework for business process models.
ibm syst j 46(2):335–361
19. ly l, rinderle-ma s, knuplesch d, dadam p (2011) monitoring business process compliance using
compliance rule graphs. in: proceedings of on the move federated conferences and workshops (otm2011), lncs, vol 7044, springer, pp 82–99
20. mannhardt f, de leoni m, reijers ha, van der aalst wmp (2014) balanced multi-perspective checking
of process conformance. technical report, bpm center report bpm-14-07, bpmcenter.org
21. de medeiros aka, weijters aj, van der aalst wmp (2007) genetic process mining: an experimental
evaluation. data min knowl discov 14:245–304
22. montali m (2010) speciﬁcation and veriﬁcation of declarative open interaction models—a logic-based
approach. lnbip , vol 56. springer
23. reynolds p , killian c, wiener jl, mogul jc, shah ma, v ahdat a (2006) pip: detecting the unex-
pected in distributed systems. in: proceedings of the 3rd conference on networked systems design and
implementation, vol 3, usenix association, pp 115–128
24. rozinat a, van der aalst wmp (2008) conformance checking of processes based on monitoring real
behavior. inf syst 33:64–95
25. rozinat a, v eloso m, van der aalst wmp (2008) using hidden markov models to evaluate the quality
of discovered process models. bpm center report bpm-08-10
26. weidlich m, polyvyanyy a, desai n, mendling j, weske m (2011) process compliance analysis based
on behavioural proﬁles. inf syst 36(7):1009–1025
27. weijters ajmm, van der aalst wmp , de medeiros aka (2006) process mining with the heuristics
miner-algorithm. technical report, eindhoven university of technology. beta working paper series,
wp 166
28. xu w, huang l, fox a, patterson d, jordan mi (2009) detecting large-scale system problems by
mining console logs. in: proceedings of the acm sigops 22nd symposium on operating systemsprinciples (sosp’09), acm, pp 117–132
123