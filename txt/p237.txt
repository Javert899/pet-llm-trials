process mining and security:
detecting anomalous process executions
and checking process conformance
w.m.p. van der aalst and a.k.a. de medeiros
department of technology management, eindhoven university of technology
p.o. box 513, nl-5600 mb, eindhoven, the netherlands.
{w.m.p.v.d.aalst, a.k.medeiros }@tm.tue.nl
abstract. one approach to secure systems is through the analysis of
audit trails. an audit trail is a record of all events that take place ina system and across a network, i.e., it provides a trace of user/system
a c t i o n ss ot h a ts e c u r i t ye v e n t sc a nb er e l a t e dt ot h ea c t i o n so fas p e c i ﬁ c
individual or system component. audit trails can be inspected for thepresence or absence of certain patterns. this paper advocates the use of
process mining techniques to analyze audit trails for security violations. it
is shown how a speciﬁc algorithm, called the α-algorithm, can be used to
support security eﬀorts at various levels ranging from low-level intrusion
detection to high-level fraud prevention.
keywords : process mining, security, audit trails, pattern discovery, data mining, petri
nets.
1 introduction
fueled by the omnipresence of event logs in transactional information systems
(cf. wfm, erp, crm, scm, and b2b systems), process mining has becomea vivid research area [5, 6]. until recently, the information in these event logs
was rarely used to analyze the underlying processes. process mining aims at
improving this by providing techniques and tools for discovering process, control,data, organizational, and social structures from event logs, i.e., the basic idea
of process mining is to diagnose processes by mining event logs for knowledge.
so far, process mining research has focussed on process discovery and process
improvement. in this paper, we focus on the application of process mining to
security issues.
when considering an enterprise information system, security plays a role at
diﬀerent levels, i.e., from the level of unix processes to the level of interorga-
nizational business processes. security policies may refer to things ranging fromcryptography and role-based access control to auditing and the four-eyes prin-
ciple. security violations may be conducted by hackers but also by white-collar
criminals, cf. the discussions on “corporate governance” following the enron andparmalat scandals). literature on security can be split into computer security
[11] and auditing [31]. although computer security and auditing are at very dif-
ferent levels, the absence or presence of certain behavioral patterns may indicatesecurity violations. therefore, audit trails can be useful. fortunately, many en-
terprise information systems store relevant events in some structured form. forexample, workﬂow management systems typically register the start and com-
pletion of activities [3]. erp systems like sap log all transactions, e.g., users
ﬁlling out forms, changing documents, etc. business-to-business (b2b) systemslog the exchange of messages with other parties. call center packages but also
general-purpose crm systems log interactions with customers. these examples
show that many systems have some kind of event log often referred to as “au-
dit trail”, “history”, “transaction log”, etc. [5, 8, 21, 32]. the event log typically
contains information about events referring to an activity and a case. the case
(also named process instance) is the “thing” which is being handled, e.g., a cus-tomer order, a job application, an insurance claim, a building permit, etc. the
activity (also named task, operation, action, or work-item) is some operation on
the case. typically, events have a timestamp indicating the time of occurrence.
moreover, event logs typically also contain information on the actor, i.e., person
or system component, executing or initiating the event. we will refer to such anactor as the originator or performer. based on this information several tools and
techniques for process mining have been developed [2, 4, 5, 7, 8, 13, 22, 23, 28, 32,
35].
process mining is useful for at least two reasons. first of all, it could be used
as a tool to ﬁnd out how people and/or procedures really work. consider forexample processes supported by an erp system like sap (e.g., a procurement
process). such a system logs all transactions but in many cases does not enforce
a speciﬁc way of working. in such an environment, process mining could be used
to gain insight in the actual process. another example would be the ﬂow of pa-
tients in a hospital. note that in such an environment all activities are logged butinformation about the underlying process is typically missing. in this context it
is important to stress that management information systems provide informa-
tion about key performance indicators like resource utilization, ﬂow times, andservice levels but notabout the underlying business processes (e.g., causal rela-
tions, ordering of activities, etc.). second, process mining could be used for delta
analysis , i.e., comparing the actual process with some predeﬁned process. note
that in many situations there is a descriptive or prescriptive process model. such
a model speciﬁes how people and organizations are assumed/expected to work.
by comparing the descriptive or prescriptive process model with the discoveredmodel, discrepancies between both can be detected and used to improve the pro-
cess. consider for example the so-called reference models in the context of sap.
these models describe how the system should be used. using process mining itis possible to verify whether this is the case. in fact, process mining could also
be used to compare diﬀerent departments/organizations using the same erp
system.
clearly, both aspects (discovery and delta analysis) are relevant for computer
security and auditing. for example, in [18] an approach for intrusion detection
is presented. this method inspects audit trails and uses ﬁxed-length patterns
to distinguish self(i.e., normal process execution) from other (i.e., a potentialsecurity violation). in [36] this is extended to variable length patterns. unfor-
tunately, approaches such as [18, 36] do not consider the process structure andare unable to detect parallelism and causality. therefore, we explore the concept
of process mining and one algorithm in particular (the α-algorithm, [7]) in the
context of security.
the remainder of this paper is organized as follows. section 2 introduces
the concept of process mining. section 3 introduces the basic notation and
presents the basic α-algorithm. then the paper focuses on two problems: de-
tecting anomalous process executions (section 4) and checking process con-
formance (section 5). section 6 provides some related work. finally, section 7
concludes the paper.
2 process mining: an overview
the goal of process mining is to extract information about processes from trans-
action logs [5]. we assume that it is possible to record events such that (i) each
event refers to an activity (i.e., a well-deﬁned step in the process), (ii) each event
refers to a case(i.e., a process instance), (iii) each event can have a performer
also referred to as originator (the actor executing or initiating the activity), and
(iv) events have a timestamp and are totally ordered. table 1 shows an example
of a log involving 19 events, 5 activities, and 6 originators. in addition to the
information shown in this table, some event logs contain more information on
the case itself, i.e., data elements referring to properties of the case. for example,the case handling system flower logs every modiﬁcation of some data element.
case id activity id originator timestamp case id activity id originator timestamp
case 1 activity a john 9-3-2004:15.01 case 5 activity a sue 10-3-2004:13.05
case 2 activity a john 9-3-2004:15.12 case 4 activity c carol 11-3-2004:10.12
case 3 activity a sue 9-3-2004:16.03 case 1 activity d pete 11-3-2004:10.14
case 3 activity b carol 9-3-2004:16.07 case 3 activity c sue 11-3-2004:10.44
case 1 activity b mike 9-3-2004:18.25 case 3 activity d pete 11-3-2004:11.03
case 1 activity c john 10-3-2004:9.23 case 4 activity b sue 11-3-2004:11.18
case 2 activity c mike 10-3-2004:10.34 case 5 activity e clare 11-3-2004:12.22
case 4 activity a sue 10-3-2004:10.35 case 5 activity d clare 11-3-2004:14.34
case 2 activity b john 10-3-2004:12.34 case 4 activity d pete 11-3-2004:15.56
case 2 activity d pete 10-3-2004:12.50
table 1. an event log (audit trail).
event logs1such as the one shown in table 1 are used as the starting point for
mining. we distinguish three diﬀerent perspectives: (1) the process perspective,(2) the organizational perspective and (3) the case perspective. the process
perspective focuses on the control-ﬂow, i.e., the ordering of activities. the goal
of mining this perspective is to ﬁnd a good characterization of all possible paths,
e.g., expressed in terms of a petri net [30] or event-driven process chain (epc)
[23, 24]. the organizational perspective focuses on the originator ﬁeld, i.e., which
1in the context of security, event logs should be interpreted as audit trails.performers are involved and how are they related. the goal is to either structure
the organization by classifying people in terms of roles and organizational units orto show relation between individual performers (i.e., build a social network [9, 10,
12, 15, 19, 20, 27, 29, 33, 34]). the case perspective focuses on properties of cases.
cases can be characterized by their path in the process or by the originatorsworking on a case. however, cases can also be characterized by the values of the
corresponding data elements. for example, if a case represent a replenishment
order it is interesting to know the supplier or the number of products ordered.
aand
-splitb
cand
-join
d
e
(a) the control-flow structure expressed in terms of a petri net.
(b) the organizational structure expressed in
terms of a activity-role-performer diagram.john sue mike carol pete clarerole x role y role zjohn sue
mike
carol peteclare
(c) a sociogram based on transfer of work.
fig. 1. some mining results for the process perspective (a) and organizational (b and
c) perspective based on the event log shown in table 1.
the process perspective is concerned with the “how?” question, the orga-
nizational perspective is concerned with the “who?” question, and the caseperspective is concerned with the “what?” question. to illustrate the ﬁrst two
consider figure 1. the log shown in table 1 contains information about ﬁve
cases (i.e., process instances). the log shows that for four cases (1, 2, 3, and4) the activities a, b, c, and d have been executed. for the ﬁfth case only
three activities are executed: activities a, e, and d. each case starts with the
execution of a and ends with the execution of d. if activity b is executed, then
also activity c is executed. however, for some cases activity c is executed be-
fore activity b. based on the information shown in table 1 and by making someassumptions about the completeness of the log (i.e., assuming that the cases are
representative and a suﬃcient large subset of possible behaviors is observed), we
can deduce the process model shown in figure 1(a). the model is representedin terms of a petri net [30]. the petri net starts with activity a and ﬁnishes
with activity d. these activities are represented by transitions. after executing
a there is a choice between either executing b and c in parallel or just exe-cuting activity e. to execute b and c in parallel two non-observable activities
(and-split and and-join) have been added. these activities have been added
for routing purposes only and are not present in the event log. note that forthis example we assume that two activities are in parallel if they appear in any
order. by distinguishing between start events and complete events for activitiesit is possible to explicitly detect parallelism.
figure 1(a) does not show any information about the organization, i.e., it
does not use any information on the people executing activities. however, ta-
ble 1 shows information about the performers. for example, we can deduce thatactivity a is executed by either john or sue, activity b is executed by john,
sue, mike or carol, c is executed by john, sue, mike or carol, d is executed by
pete or clare, and e is executed by clare. we could indicate this information infigure 1(a). the information could also be used to “guess” or “discover” organi-
zational structures. for example, a guess could be that there are three roles: x,
y, and z. for the execution of a role x is required and john and sue have thisrole. for the execution of b and c role y is required and john, sue, mike and
carol have this role. for the execution of d and e role z is required and pete
and clare have this role. for ﬁve cases these choices may seem arbitrary but forlarger data sets such inferences capture the dominant roles in an organization.
the resulting “activity-role-performer diagram” is shown in figure 1(b). the
three “discovered” roles link activities to performers. figure 1(c) shows anotherview on the organization based on the transfer of work from one individual to
another, i.e., not focus on the relation between the process and individuals but
on relations among individuals (or groups of individuals). consider for example
table 1. although carol and mike can execute the same activities (b and c),
mike is always working with john (cases 1 and 2) and carol is always workingwith sue (cases 3 and 4). probably carol and mike have the same role but based
on the small sample shown in table 1 it seems that john is not working with
carol and sue is not working with mike.
2these examples show that the event
log can be used to derive relations between performers of activities, thus result-
ing in a sociogram. for example, it is possible to generate a sociogram based on
the transfers of work from one individual to another as is shown in figure 1(c).each node represents one of the six performers and each arc represents that
there has been a transfer of work from one individual to another. the deﬁnition
of “transfer of work from a to b” is based on whether for the same case anactivity executed by a is directly followed by an activity executed by b. for
example, both in case 1 and 2 there is a transfer from john to mike. figure 1(c)
does not show frequencies. however, for analysis purposes these frequencies canbe added. the arc from john to mike would then have weight 2. typically, we
do not use absolute frequencies but weighted frequencies to get relative values
between 0 and 1. figure 1(c) shows that work is transferred to pete but not vice
versa. mike only interacts with john and carol only interacts with sue. clare is
the only person transferring work to herself.
besides the “how?” and “who?” question (i.e., the process and organization
perspectives), there is the case perspective that is concerned with the “what?”
2clearly the number of events in table 1 is too small to establish these assumptions
accurately. however, for the sake of argument we assume that the things that did
not happen will never happen.question. figure 1 does not address this. in fact, focusing on the case perspec-
tive is most interesting when also data elements are logged but these are notlisted in table 1. the case perspective looks at the case as a whole and tries to
establish relations between the various properties of a case. note that some of
the properties may refer to the activities being executed, the performers workingon the case, and the values of various data elements linked to the case. using
clustering algorithms it would for example be possible to show a positive corre-
lation between the size of an order or its handling time and the involvement ofspeciﬁc people.
orthogonal to the three perspectives (process, organization, and case), the
result of a mining eﬀort may refer to logical issues and/or performance issues.
for example, process mining can focus on the logical structure of the processmodel (e.g., the petri net shown in figure 1(a)) or on performance issues such
as ﬂow time. for mining the organizational perspectives, the emphasis can be
on the roles or the social network (cf. figure 1(b) and (c)) or on the utilizationof performers or execution frequencies.
to address the three perspectives and the logical and performance issues
we have developed a set of tools including emit [2], thumb [35], and minson
[4]. these tools share a common xml format. for more details we refer tohttp://www.processmining.org.
3 wf-nets and the α-algorithm
this section contains the main deﬁnitions used in the α-algorithm. for more in-
formation on the α-algorithm and its supporting deﬁnitions the reader is referred
to [7]. we assume some basic knowledge of petri nets. readers not familiar with
basic concepts such as ( p,t,f ) as a representation for a petri net, the ﬁring
rule, ﬁring sequences, preset •x, postset x•, boundedness, liveness, reachability,
etc. are referred to [1, 14, 30].
3.1 workﬂow nets
before introducing the α-algorithm we brieﬂy discuss a subclass of petri nets
called a workflow nets (wf-nets). this subclass is tailored towards modeling
the control-ﬂow dimension of a workﬂow3or any other case driven process, e.g.,
logging onto a system. it should be noted that a wf-net speciﬁes the dynamic
behavior of a single case in isolation [1].
deﬁnition 3.1. (workﬂow nets) letn=(p,t,f ) be a petri net and ¯ta
fresh identiﬁer not in p∪t.nis aworkﬂow net (wf-net) iﬀ:
1.object creation :pcontains an input place isuch that •i=∅,
2.object completion :pcontains an output place osuch that o•=∅,
3.connectedness :¯n=(p,t∪{¯t},f∪{(o,¯t),(¯t,i)}) is strongly connected,
3note that we use the words workﬂow andprocess interchangeably.the petri net shown in figure 1 is a wf-net. note that although the net is
not strongly connected, the short-circuited net with transition ¯tis strongly con-
nected. even if a net meets all the syntactical requirements stated in deﬁni-
tion 3.1, the corresponding process may exhibit errors such as deadlocks, tasks
which can never become active, livelocks, garbage being left in the process aftertermination, etc. therefore, we deﬁne the following correctness criterion.
deﬁnition 3.2. (sound) letn=(p,t,f ) be a wf-net with input place i
and output place o.nissound iﬀ:
1.safeness :(n,[i]) is safe,
2.proper completion : for any marking s∈[n,[i]/angbracketright,o∈simplies s=[o],
3.option to complete : for any marking s∈[n,[i]/angbracketright,[o]∈[n,s/angbracketright,a n d
4.absence of dead tasks :(n,[i]) contains no dead transitions.
the set of all sound wf-nets is denoted w.
the wf-net shown in figure 1 is sound. soundness can be veriﬁed using stan-
dard petri-net-based analysis techniques [1, 3].
most process modeling languages oﬀer standard building blocks such as the
and-split, and-join, xor-split, and xor-join [3]. these are used to modelsequential, conditional, parallel and iterative routing. clearly, a wf-net can be
used to specify the routing of cases, i.e., process instances. tasks, also referred
to as activities , are modeled by transitions and causal dependencies are modeled
by places and arcs. in fact, a place corresponds to a condition which can be
used as pre- and/or post-condition for tasks. an and-split corresponds to atransition with two or more output places, and an and-join corresponds to
a transition with two or more input places. xor-splits/xor-joins correspond
to places with multiple outgoing/ingoing arcs. given the close relation betweentasks and transitions we use the terms interchangeably.
our process mining research aims at rediscovering wf-nets from event logs.
however, not all places in sound wf-nets can be detected. for example placesmay be implicit which means that they do not aﬀect the behavior of the process.
these places remain undetected. therefore, we limit our investigation to wf-
nets without implicit places.
deﬁnition 3.3. (implicit place)
letn=(p,t,f ) be a petri net with initial
marking s. a place p∈pis called implicit in ( n,s) if and only if, for all reachable
markings s/prime∈[n,s/angbracketrightand transitions t∈p•,s/prime≥•t\{p}⇒s/prime≥•t.4
figure 1 contains no implicit places. however, adding a place pconnecting tran-
sition aanddyields an implicit place. no mining algorithm is able to detect
psince the addition of the place does not change the behavior of the net and
therefore is not visible in the log.
for process mining it is very important that the structure of the wf-net
clearly reﬂects its behavior. therefore, we also rule out the constructs shown in
4[n,s/angbracketrightis the set of reachable markings of net nwhen starting in marking s,p•is the
set of output transitions of p,•tis the set of input places of t,a n d ≥is the standard
ordering relation on multisets.(i) (ii)
fig. 2. constructs not allowed in swf-nets.
figure 2. the left construct illustrates the constraint that choice and synchro-
nization should never meet. if two transitions share an input place, and therefore
“ﬁght” for the same token, they should not require synchronization. this means
that choices (places with multiple output transitions) should not be mixed withsynchronizations. the right-hand construct in figure 2 illustrates the constraint
that if there is a synchronization all preceding transitions should have ﬁred, i.e.,
it is not allowed to have synchronizations directly preceded by an xor-join.wf-nets which satisfy these requirements are named structured workﬂow nets
and are deﬁned as:
deﬁnition 3.4. (swf-net) a wf-net n=(p,t,f )i sa n swf-net (struc-
tured workﬂow net) if and only if:
1. for all p∈pandt∈twith ( p,t)∈f:|p•|>1 implies |•t|=1 .
2. for all p∈pandt∈twith ( p,t)∈f:|•t|>1 implies |•p|=1 .
3. there are no implicit places.
3.2 the α-algorithm
the starting point for process mining is the event log. a log is a set of traces.
event traces and logs are deﬁned as:
deﬁnition 3.5. (event trace, event log) lettbe a set of tasks. σ∈t
∗is
anevent trace andw∈p(t∗)i sa n event log .5
from an event log, ordering relations between tasks can be inferred. in the case
of the α-algorithm, every two tasks in the event log must have one of the follow-
ing four ordering relations: >w(follows), →w(causal), /bardblw(parallel) and # w
(unrelated). these ordering relations are extracted based on local information
in the event traces. the ordering relations are deﬁned as:
deﬁnition 3.6. (log-based ordering relations) letwbe an event log over
t, i.e., w∈p(t∗). let a,b∈t:
–a>wbif and only if there is a trace σ=t1t2t3...tn−1andi∈{1,...,n −2}
such that σ∈wandti=aandti+1=b,
–a→wbif and only if a>wbandb/negationslash>wa,
–a#wbif and only if a/negationslash>wbandb/negationslash>wa,a n d
–a/bardblwbif and only if a>wbandb>wa.
to ensure the event log contains the minimal amount of information necessary
to mine the process, the notion of log completeness is deﬁned as:
5t∗is the set of all sequences that are composed of zero of more tasks from t.p(t∗)
is the powerset of t∗, i.e., w⊆t∗.deﬁnition 3.7. (complete event log) letn=(p,t,f ) be a sound wf-net,
i.e.,n∈w.wis an event log of nif and only if w∈p(t∗) and every trace
σ∈wis a ﬁring sequence of nstarting in state [ i] and ending in state [ o], i.e.,
(n,[i])[σ/angbracketright(n,[o]).wis acomplete event log of nif and only if (1) for any event
logw/primeofn:>w/prime⊆>w, and (2) for any t∈tthere is a σ∈wsuch that t∈σ.
for figure 1, a possible complete event log wis{abcd,acbd,aed }.f r o m
this complete log, the following ordering relations are inferred:
–(follows) a> wb,a> wc,a> we,b> wc,b> wd,c> wb,
c> wdande> wd.
–(causal) a→wb,a→wc,a→we,b→wd,c→wdande→wd.
–(parallel) b/bardblwcandc/bardblwb.
now we can give the formal deﬁnition of the α-algorithm followed by a more
intuitive explanation.
deﬁnition 3.8. (mining algorithm α)letwbe an event log over t.t h e
α(w) is deﬁned as follows.
1.tw={t∈t|∃σ∈wt∈σ},
2.ti={t∈t|∃σ∈wt=ﬁrst(σ)},
3.to={t∈t|∃σ∈wt=last(σ)},
4.xw={(a,b)|a⊆tw∧b⊆tw∧∀a∈a∀b∈ba→wb∧∀a1,a2∈aa1#wa2∧
∀b1,b2∈bb1#wb2},
5.yw={(a,b)∈xw|∀(a/prime,b/prime)∈xwa⊆a/prime∧b⊆b/prime=⇒(a,b)=(a/prime,b/prime)},
6.pw={p(a,b)|(a,b)∈yw}∪{iw,ow},
7.fw={(a,p(a,b))|(a,b)∈yw∧a∈a}∪{ (p(a,b),b)|(a,b)∈
yw∧b∈b}∪ {(iw,t)|t∈ti}∪ {(t,ow)|t∈to},a n d
8.α(w)=(pw,tw,fw).
theα-algorithm works as follows. first, it examines the event traces and (step
1) creates the set of transitions ( tw) in the process, (step 2) the set of output
transitions ( ti) of the source place , and (step 3) the set of the input transitions
(to) of the sink place6. in steps 4 and 5, the α-algorithm creates sets ( xwand
yw, respectively) used to deﬁne the places of the discovered wf-net. in step 4,
theα-algorithm discovers which transitions are causally related. thus, for each
tuple ( a,b)i nxw, each transition in set acausally relates to alltransitions
in set b, and no transitions within a(orb) follow each other in some ﬁring
sequence. these constraints to the elements in sets aandballow the correct
mining of and-split/join and xor-split/join constructs. note that the xor-split/join requires the fusion of places. in step 5, the α-algorithm reﬁnes set x
w
by taking only the largest elements with respect to set inclusion. in fact, step
5 establishes the exact amount of places the discovered net has (excluding thesource place i
wand the sink place ow). the places are created in step 6 and
connected to their respective input/output transitions in step 7. the discovered
6in a wf-net, the source place ihas no input transitions and the sink place ohas no
output transitions.wf-net is returned in step 8. figure 3 shows the result of applying the α-
algorithm to the log shown in table 1, i.e. w={abcd,acbd,aed }. note
that the α-algorithm is not able to discover the and-split and and-join shown
in figure 1 (these are not in the log), but is still able to construct an equivalent
wf-net.
ab
cd e
fig. 3. the wf-net discovered by the α-algorithm (based on table 1).
finally, we deﬁne what it means for a wf-net to be rediscovered and roughly
characterize the class of processes for which the α-algorithm works correctly.
deﬁnition 3.9. (ability to rediscover) letn=(p,t,f ) be a sound wf-
net, i.e., n∈w, and let αbe a mining algorithm which maps event logs of n
onto sound wf-nets, i.e., α:p(t∗)→w. if for any complete event log wof
nthe mining algorithm returns n(modulo renaming of places), then αis able
torediscover n.
theorem 3.10. letn=(p,t,f ) be a sound swf-net and let wbe a complete
event log of n. if for all a,b∈ta•∩•b=∅orb•∩•a=∅, then α(w)=n
modulo renaming of places.
note that no mining algorithm is able to ﬁnd names of places. therefore, we
ignore place names, i.e., αis able to rediscover nif and only if α(w)=nmodulo
renaming of places. also note the requirement not allowing “short loops”. usingthe reﬁnement described in [26] this additional requirement can be avoided.
4 detecting anomalous process executions
in subsection 3.2, we presented how the α-algorithm can mine the cases in table
1, and discover a process (see figure 3) that describes allpossible behaviors. a
similar reasoning holds for security issues if we consider the event traces to be
audit trails , and the cases as e.g. session ids . in this section we show (i) how to
use the α-algorithm to discover the acceptable or normal behavior in systems
and (ii) how to use the discovered net to detect undesired behavior.
theα-algorithm discovers a net that models all acceptable behavior whenever
thecomplete log given as input has only acceptable audit trails and the discovered
net is a sound wf-net. for example, imagine a website that is used to sellproducts. assume every user in this website has a shopping basket that can be
edited at any time. if the shopping basket contains products when the user leaves
the website, the user basket’s status is saved and is retrieved when the user entersthe website again. possible user actions are described by the wf-net in figure 4.
now, assume we do not know the net in figure 4, but we do have a complete log of
acceptable audit trails. for instance, let this audit log be w
ok={“enter, selectproduct, add to basket, cancel order ”, “enter, select product, remove from
basket, cancel ”, “enter, select product, add to basket, continue shopping,
select product, remove from basket, continue shopping, select product, add to
basket, proceed to checkout, fill in delivery info, fill in payment info, provide
password, process order, finish checkout ”, “enter, select product, remove
from basket, proceed to checkout, fill in payment info, fill in delivery info,
provide password, process order, finish checkout ”}.g i v e n wokas input, the
α-algorithm discovers the net shown in figure 4.
sink placesource place
enterselect
productadd to basket
remove from
basketcontinue
shopping
proceed to
checkoutfill in delivery
info
fill in payment
infoprovide
password
process
orderfinish
checkoutcancel
order
fig. 4. example of a process description to buy products at a website.
once the net is discovered, the conformance of every new audit trail can be
veriﬁed by playing the “token game”. note that anomalous audit trails do not
correspond to possible ﬁring sequences in the “token game” for the discovered
net. furthermore, the “token game” detects the point in which the audit traildiverges from the normal behavior and allows also for the real time veriﬁcation
of trails. for example, let us verify the new audit log w
nok={“enter, select
product, remove from basket, proceed to checkout, fill in delivery info, fillin payment info, provide password, process order, finish checkout ”, “enter,
select product, remove from basket, proceed to checkout, fill in payment info,
fill in delivery info, process order, finish checkout ”}by playing every trace in
w
okin the net in figure 4. the ﬁrst audit trail in wnokis an acceptable one.
note that this trail is not inwok, but it can be generated by the discovered
net. the second trail is an anomalous one because it does not contain the task
provide password . by playing the “token game”, we see that two tokens get
stuck in the input places of provide password . in other words, the “token game”
explicitly shows the point where the anomalous behavior happened. the emit
tool supports the “token game” and indicates deadlocks and remaining tokens.
note that the α-algorithm correctly discovered the net in figure 4 without
requiring the “training” complete log wokto show all possible behavior (the
ﬁrst trace in wnokis not in wok). however, because the α-algorithm aims at
discovering the process perspective , it does not capture constraints that relate to
data in the system, like the maximum number of times a loop may iterate. for
the example in figure 4, the loop can be executed an unlimited number of timeswithout violating security issues. nonetheless, if the loop would correspond to
user attempts to log into the system, a maximum number of loop iterations mustbe set. if this is the case, the discovered wf-net must be explicitly modiﬁed to
incorporate the required data-related constraints. as a ﬁnal remark, we would
like to point out that the simple idea of playing the “token game” can also beused without applying the α-algorithm, i.e., by explicitly modeling the process.
however, given the evolving nature of systems and processes, the α-algorithm
is a useful tool to keep the “security process” up-to-date. for example, if anaudit trail “does not ﬁt” but does not correspond to a violation, then it can
be added to the event log used by the α-algorithm. audit trails that seemed
ok, but turned out to be potential security breaches can be removed from thelog. by applying the α-algorithm to the modiﬁed event log, a new and updated
“security process” can be obtained without any modeling eﬀorts.
5 checking process conformance
the ordering relations can be used to check system properties. in section 4,
a process model is derived from acceptable audit trails. the discovered net is
then used to check new audit trails. in this case, every audit trail must comply
with the process. however, sometimes security applies only to a part of the
process. for example, for the process in figure 4, the critical security issue is
to execute the task provide password before process order . in other words,
task provide password should cause task process order . the process fragment
for this situation is construct (a) in figure 5. this construct is mapped to the
ordering relation provide password →process order . thus, given an audit log, we
can check if this pattern holds for the system . i.e., considering allaudit trails,
we check if the ordering relations that are equivalent to the desired pattern
hold. back to our example in section 4 and considering an audit log w=
wok∪wnok, we do infer the relation provide password →wprocess order .
thus, we can conclude that the process described by wcontains the pattern
shown in figure 5(a).
x y (a) x  y
x
z(b)x  y, x  z,
and y||zyx
z (d)x  z, y  z,
and x||yy
x
z(c)x  y, x  z,
and y#zyx
z (e)x  z, y  z,
and x#y
y
fig. 5. relating the log-based relations >w,→w,/bardblw,a n d# wto basic petri-net
constructs.
the approach to check process conformance veriﬁes if a pattern holds, but
does not assure this is always the case. full conformance can be veriﬁed bycombining this approach with the one in section 4. the diﬀerence is that now
we play the “token game” with the subnet . by playing every event trace in the
desired pattern, we check if there is always a causal relation between provide
password and process order . note this will not be the case for all trails in w
and the anomalous one will be detected. the main advantage of the approachfor checking process conformance is that it does not require a complete audit log
for the whole process, but only for the tasks involved in the pattern. figure 5
illustrates the basic patterns that can be used to build process fragments.
6 related work
the idea of process mining is not new [2, 5, 7, 8, 13, 22, 23, 25, 28, 32, 35] and mosttechniques aim at the control-ﬂow perspective. however, process mining is not
limited to the control-ﬂow perspective. for example, in [4] we use process mining
techniques to construct a social network. for more information on process mining
we refer to a special issue of computers in industry on process mining [6] and
a survey paper [5]. in this paper, unfortunately, it is impossible to do justice tothe work done in this area.
the focus of this paper is on the α-algorithm. for more information on the
algorithm, we refer to [2, 7, 25, 35]. in [26] one of the problems raised in [25] is
tackled (“short loops”) and should be considered as an extension of [7].
in the security domain there are related papers dealing with intrusion de-
tection based on audit trails [18, 36]. these paper break “normal behavior” into
smaller patterns and then compare actual audit trails using these patterns. note
that, unlike the α-algorithm, these approaches do not consider explicit process
models.
there have been many formal approaches towards security, e.g., using petri
nets or process algebras [16, 17]. unlike our approach they typically focus on
veriﬁcation of a design rather than analyzing the actual behavior.
to support our mining eﬀorts we have developed a set of tools including emit
[2], thumb [35], and minson [4]. these tools share a common xml format. for
more details we refer to www.processmining.org.
7 conclusion
in this paper, we explored the application of process mining techniques in secu-
rity. first, we introduced process mining and then we focused on one algorithmto mine the process perspective. then we showed the application of this algo-
rithm to security issues. first we discussed the detection of anomalous process
executions in the mined wf-net by playing the “token game” for concrete cases.then, we showed that process conformance can be checked by comparing process
fragments with the discovered wf-net.
we would like to emphasize that we consider the application of the α-
algorithm at any level of security, i.e., from low-level intrusion detection tohigh-level fraud presenting. the focus on corporate governance and govern-
mental regulations such as sarbanes-oxley act trigger the development of tools
to enforce and check security at the level of business processes. we believe that
organizations will increasingly need to store and monitor audit trails. process
mining techniques such as the α-algorithm can assist in these eﬀorts.
acknowledgements
the author would like to thank ton weijters, boudewijn van dongen, min-seok song, laura maruster, eric verbeek, monique jansen-vullers, hajo reijers,
michael rosemann, and peter van den brand for their on-going work on process
mining techniques and tools at eindhoven university of technology.
references
1. w.m.p. van der aalst. the application of petri nets to workﬂow management.
the journal of circuits, systems and computers , 8(1):21–66, 1998.
2. w.m.p. van der aalst and b.f. van dongen. discovering workﬂow performance
models from timed logs. in y. han, s. tai, and d. wikarski, editors, international
conference on engineering and deployment of cooperative information systems
(edcis 2002) , volume 2480 of lecture notes in computer science , pages 45–63.
springer-verlag, berlin, 2002.
3. w.m.p. van der aalst and k.m. van hee. workﬂow management: models, methods,
and systems . mit press, cambridge, ma, 2002.
4. w.m.p. van der aalst and m. song. mining social networks: uncovering interac-
tion patterns in business processes. in m. weske, b. pernici, and j. desel, editors,international conference on business process management (bpm 2004) ,l e c t u r e
notes in computer science, springer-verlag, berlin, 2004.
5. w.m.p. van der aalst, b.f. van dongen, j. herbst, l. maruster, g. schimm, and
a.j.m.m. weijters. workﬂow mining: a survey of issues and approaches. data
and knowledge engineering , 47(2):237–267, 2003.
6. w.m.p. van der aalst and a.j.m.m. weijters, editors. process mining ,s p e c i a l
issue of computers in industry, volume 53, number 3. elsevier science publishers,
amsterdam, 2004.
7. w.m.p. van der aalst, a.j.m.m. weijters, and l. maruster. workﬂow mining: dis-
covering process models from event logs. qut technical report, fit-tr-2003-03,
queensland university of technology, brisbane, 2003. (accepted for publication
in ieee transactions on knowledge and data engineering.).
8. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ﬂow logs. in sixth international conference on extending database technology ,
pages 469–483, 1998.
9. a.a. bavelas. a mathematical model for group structures. human organization ,
7:16–30, 1948.
10. h.r. bernard, p.d. killworth, c. mccarty, g.a. shelley, and s. robinson. com-
paring four diﬀerent methods for measuring personal social networks. social
networks , 12:179–216, 1990.
11. m. bishop. computer security: art and science . addison-wesley, boston, usa,
2003.
12. r.s. burt and m. minor. applied network analysis: a methodological introduction .
sage, newbury park ca, 1983.13. j.e. cook and a.l. wolf. discovering models of software processes from event-
based data. acm transactions on software engineering and methodology ,
7(3):215–249, 1998.
14. j. desel and j. esparza. free choice petri nets , volume 40 of cambridge tracts
in theoretical computer science . cambridge university press, cambridge, uk,
1995.
15. m. feldman. electronic mail and weak ties in organizations. oﬃce: technology
and people , 3:83–101, 1987.
16. r. focardi and r. gorrieri. a classiﬁcation of security properties for process
algebras. journal of computer security , 3(1):5–33, 1995.
17. r. focardi, r. gorrieri, and f. martinelli. a comparison of three authentication
properties. theoretical computer science , 291(3):285–327, 2003.
18. s. forrest, a.s. perelson, l. allen, and r. cherukuri. self-nonself discrimination
in a computer. in proceedings of the 1994 ieee symposium on research in se-
curity and privacy , pages 202–212. ieee computer society press, los alamitos,
california, 1994.
19. l.c. freeman. a set of measures of centrality based on betweenness. sociometry ,
40:35–41, 1977.
20. l.c. freeman. centrality in social networks: conceptual clariﬁcation. social
networks , 1:215–239, 1979.
21. d. grigori, f. casati, u. dayal, and m.c. shan. improving business process qual-
ity through exception understanding, prediction, and prevention. in p. apers,p. atzeni, s. ceri, s. paraboschi, k. ramamohanarao, and r. snodgrass, ed-
itors, proceedings of 27th international conference on very large data bases
(vldb’01) , pages 159–168. morgan kaufmann, 2001.
22. j. herbst. a machine learning approach to workﬂow management. in proceedings
11th european conference on machine learning , volume 1810 of lecture notes in
computer science , pages 183–194. springer-verlag, berlin, 2000.
23. ids scheer. aris process performance manager (aris ppm). http://www.ids-
scheer.com, 2002.
24. g. keller and t. teufel. sap r/3 process oriented implementation . addison-
wesley, reading ma, 1998.
25. a.k.a. de medeiros, w.m.p. van der aalst, and a.j.m.m. weijters. workﬂow
mining: current status and future directions. in r. meersman, z. tari, and d.c.
schmidt, editors, on the move to meaningful internet systems 2003: coopis,
doa, and odbase , volume 2888 of lecture notes in computer science ,p a g e s
389–406. springer-verlag, berlin, 2003.
26. a.k.a. de medeiros, b.f. van dongen, w.m.p. van der aalst, and a.j.m.m. wei-
jters. process mining: extending the α-algorithm to mine short loops. beta
working paper series, wp 113, eindhoven university of technology, eindhoven,
2004.
27. j.l. moreno. who shall survive? nervous and mental disease publishing com-
pany, washington, dc, 1934.
28. m. zur m¨ uhlen and m. rosemann. workﬂow-based process monitoring and con-
trolling - technical and organizational issues. in r. sprague, editor, proceedings
of the 33rd hawaii international conference on system science (hicss-33) , pages
1–10. ieee computer society press, los alamitos, california, 2000.
29. h. nemati and c.d. barko. organizational data mining: leveraging enterprise
data resources for optimal performance . idea group publishing, hershey, pa,
usa, 2003.30. w. reisig and g. rozenberg, editors. lectures on petri nets i: basic models ,
volume 1491 of lecture notes in computer science . springer-verlag, berlin, 1998.
31. j.c. robertson. auditing . irwin, burr ridge, usa, 1993.
32. m. sayal, f. casati, and m.c. shan u. dayal. business process cockpit. in pro-
ceedings of 28th international conference on very large data bases (vldb’02) ,
pages 880–883. morgan kaufmann, 2002.
33. j. scott. social network analysis . sage, newbury park ca, 1992.
34. s. wasserman and k. faust. social network analysis: methods and applications .
cambridge university press, cambridge, 1994.
35. a.j.m.m. weijters and w.m.p. van der aalst. rediscovering workﬂow models
from event-based data using little thumb. integrated computer-aided engi-
neering , 10(2):151–162, 2003.
36. a. wespi, m. dacier, and h. debar. intrusion detection using variable-length
audit trail patterns. in h. debar, l. me, and s.f. wu, editors, recent advances
in intrusion detection , volume 1907 of lecture notes in computer science ,p a g e s
110–129. springer-verlag, berlin, 2000.