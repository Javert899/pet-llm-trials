big software on the run
in vivo software analytics based on process mining (keynote)
wil van der aalst
eindhoven university of technology
p .o. box 513, 5600 mb
eindhoven, the netherlands
w.m.p.v.d.aalst@tue.nl
abstract
software-related problems have an incredible impact on so-
ciety, organizations, and users that increasingly rely on in-
formation technology. specication, verication and test-
ing techniques aim to avoid such problems. however, the
growing complexity, scale, and diversity of software compli-
cate matters. since software is evolving and operates in a
changing environment, one cannot anticipate all problems
at design-time. hence, we propose to analyze software \in
vivo", i.e., we study systems in their natural habitat rather
than through testing or software design. we propose to ob-
serve running systems, collect and analyze data on them,
generate descriptive models, and use these to respond to fail-
ures. we focus on process mining as a tool for in vivo soft-
ware analytics. process discovery techniques can be used to
capture the real behavior of software. conformance checking
techniques can be used to spot deviations. the alignment
of models and real software behavior can be used to pre-
dict problems related to performance or conformance. re-
cent developments in process mining and instrumentation
of software make this possible. this keynote paper pro-
vides pointers to process mining literature and introduces
the \big software on the run" ( bsr) research program that
just started.
categories and subject descriptors
d.2.2 [ software engineering ]: design tools and tech-
niques; h.2.8 [ information systems ]: database applica-
tions| data mining ; d.2.8 [ software engineering ]: met-
rics| software science
general terms
measurement, performance, verication
keywords
process mining, software analytics, event logs, process dis-
covery, conformance checking, software engineering
permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proÔ¨Åt or commercial advantage and that copies
bear this notice and the full citation on the Ô¨Årst page. to copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciÔ¨Åc
permission and/or a fee.
icssp‚Äô15 , august 24‚Äì26, 2015, tallinn, estonia
copyright 2015 acm 978-1-4503-3346-7/15/08 ...$15.00.1. software challenges
software forms an integral part of the most complex arti-
facts built by humans. software systems may comprise hun-
dreds of millions of program statements, written by thou-
sands of dierent programmers, spanning several decades.
their complexity surpasses the comprehension abilities of
any single, individual human being [3]. accordingly, we
have become totally dependent on complex software arti-
facts. communication, production, distribution, healthcare,
transportation, education, entertainment, government, and
trade all increasingly rely on "big software". unfortunately,
we only recognize our dependency on software when it fails.
malfunction information systems of the dutch police force
and the dutch tax authority, outages of electronic payment
and banking systems, increasing downtime of high-tech sys-
tems, unusable phones after updates, failing railway sys-
tems, and tunnel closures due to software errors illustrate
the importance of good software.
problems are not limited to crashing and incorrectly oper-
ating software systems. software may also allow for security
breaches (unauthorized use, information leakage, etc.), cause
performance problems (long response times, etc.), or force
people to use the system in an unintended manner.
there is no reason to assume that things will get better
without a radical change of paradigm. we see the following
challenges [3]:
growing complexity : software systems do not operate
in a stand-alone manner, but are increasingly intercon-
nected resulting in complex distributed systems.
growing scale : increasing numbers of organizations
use shared infrastructures (e.g. cloud computing), the
number of devices connected to the internet is increas-
ing, and an increasing number of data is recorded (e.g.
sensor data, rfid data, etc.).
increasing diversity : there is a growing diversity in
platforms (covering traditional cpus, multi-core ar-
chitectures, cloud-based data centers, mobile devices,
and the internet of things), versions (dierent releases
having dierent capabilities), and congurations.
continuous evolution of software : late composition
(components are assembled and connected while they
are running), remote software updates (removing old
errors but introducing new ones), and functional ex-
tensions (by merely changing running software) lead
to unpredictable and unforeseen behavior.growing complexitygrowing scale
increasing diversitycontinuous evolution 
of software
continuously changing 
environment
threats to security and 
thrustfigure 1: challenges for today's and tomorrow's
software systems.
continuously changing environment : the software must
run in an ever-changing context of (virtualized) hard-
ware, operating systems, network protocols and stan-
dards, and must cope with wild variations of available
resources, such as computer cores, bandwidth, memory
and energy. moreover, the software may be applied in
ways not anticipated at design time.
increasing demands related to security and trust : as
our reliance on software grows, concerns about security
and privacy increase.
to date, the computer science discipline has tried to ad-
dress such problems by proposing new design methodologies
and programming/specication languages. however, these a
priori techniques have inherent limitations: we cannot pre-
dict evolving requirements and circumstances at design time
and numerous examples show that traditional approaches
cannot cope with the complexity of today's information sys-
tems. despite progress in software engineering, we still lack
the knowledge and expertise to build large software systems
that are reliable, robust, secure, fast, and well-aligned with
continuously changing circumstances. this is the reason
that manufacturers of electronic devices and information
systems have started to monitor actual system behavior.
they are recording problems (e.g. monitoring system crashes
and component failures), but typically only address prob-
lems in a trial-and-error fashion.
we propose to more systematically exploit the enormous
amounts of event data are already being recorded by/from
software systems running in their natural habitat. we ac-
cept that software may malfunction and study software sys-
tems in their natural environment to better understand the
problems and to minimize their impact.
2. big software on the run (bsr)
this paper is inspired by the \big software on the run"
(bsr) research program [7] that started in 2015. the pro-
gram will run for a period of four years and is supported
by the three dutch technical universities (eindhoven uni-
versity of technology, tu delft, and university of twente).it was initiated by 3tu.nirict, the netherlands institute
for research on ict, which comprises all ict research of
the three universities of technology in the netherlands. the
program is based on an earlier national grant proposal in-
volving additional partners such as vrije universiteit (vu)
and radboud university nijmegen (run) [3].
the bsr research program proposes to shift the main fo-
cus from a priori software design to a posteriori software
analytics thereby exploiting the large amounts of event data
generated by today's systems . the core idea is to study soft-
ware systems in vivo , i.e., at runtime and in their natural
habitat. we would like to understand the actual (desired or
undesired) behavior of software. running software needs to
adapt to evolving and diverging environments and require-
ments. this forces us to consider software artifacts as\living
organisms operating in changing ecosystem". this paradigm
shift requires new forms of empirical investigation that go
far beyond the common practice of collecting error messages
and providing software updates.
unlike traditional testing approaches (both white- and
black-box testing), we focus on analyzing the software sys-
tem in its natural environment rather than a controlled ex-
periment conducted oine. moreover, we consider many
variants of the same software system running under possi-
bly very dierent circumstances. most testing approaches
are not applied in vivo and try to cripple the system us-
ing usual and unusual input. we study systems in their
natural habitat and try to avoid that systems crash or are
slowed down. unlike research on fault tolerant design and
runtime verication, we focus on understanding the software
system rst. we do not assume that we can always dene
the correct behavior and corresponding countermeasures up-
front. instead, we aim to learn as much as possible from the
information derived from run time data, and subsequently
we use this knowledge to diagnose problems and recommend
actions. breakthroughs in discovery, conformance checking,
and prediction are tightly coupled to novel interactive visu-
alizations.
figure 2 shows an overview of the bsr research program.
running software systems are the result of software devel-
opment processes that we would like to provide with results
from in vivo software analytics. to do this we need to extract
events from the running software. this can be done in two
ways: (1) the code is instrumented with logging functionality
and (2) the data sets managed by the software are extracted
and transformed to event data. in both cases, event data
revealing the actual software behavior are created as input
for analysis. part of the bsr research program focuses on
process mining [1] as a tool to analyse behavior based on
such event data. the following techniques are used:
discovery techniques aim to discover process models
from event data and provide insightful visualizations
of the actual software behavior. the results reveal how
software systems are actually being used.
conformance checking techniques aim to detect devia-
tions from normative or descriptive models. the model
may be based on domain knowledge or based on dis-
covered models.
prediction techniques aim to predict functional and
non-functional properties of running cases, individual
systems, and classes of systems.results    
running software system
process mining
conformance 
checkingdiscovery predictionevent
data 
application
data software development 
code code 
instrumentation
extraction and 
transformation of 
application data
(process )
models 
(process )
models diagnostics
visualizations
figure 2: overview of the \big software on the run" ( bsr) research program and the role of process mining
in the bsr program.
as shown in figure 2, diagnostics, (process) models, and a
wide variety of visualizations are provided as input to the
software development process.
since the focus is on the behavior software systems and
not on their structure, process models play a central role in
thebsr research program. note that process models serve
as both input and output for analysis (see figure 2).
3. software as a living organism
to explain our focus on in vivo software analytics , it is
helpful to view a software system as a living organism (like
a human being). whereas traditional approaches in com-
puter science aim to create new \perfectly designed organ-
isms" from scratch, we try to better understand the relation-
ship between characteristics of individuals, lifestyles, symp-
toms, and health-related problems and use this information
to recommend corrective measures. instead of designing new
design methodologies and programming/specication lan-
guages, we want to provide a comprehensive set of tools for
the diagnosis, treatment, and prevention of software-related
problems.
collecting event data can be seen as recording blood pres-
sures, taking x-rays, examining blood counts, etc. medical
symptoms may point to diseases, just like system crashes,
service calls, and user complaints indicate software-related
problems. we would like to identify patterns that indicate a
particular type of software problem. to understand a disease
and its causes, one needs to monitor many patients. to un-
derstand software-related problems (i.e., diseases), we need
to compare event data from many dierent sources. the
same software or dierent versions/variants of the same soft-
ware may be used by dierent organizations and users. in a
similar vein to everyday health problems, software problems
may be inherited (e.g. built upon instable software compo-nents or platforms), accidental (e.g. unanticipated integra-
tion problems) or due to lifestyle factors (e.g. unintended
use or overloading). fortunately, modern computing infras-
tructures allow for the collection of event data from dierent
sources and use these data for comparative analysis.
just like humans, software systems need to adapt to chang-
ing circumstances. however, unlike diseases or traumas,
software problems are notcaused by wear, heavy use, or
aging. key problems are continuously changing function-
ality and circumstances as well as mankind's limited abil-
ity to predict such changes. an additional problem is that
software systems do not operate in isolation. to truly un-
derstand the behavior and usage of software, one needs to
consider the entire ecosystem consisting of a variety of in-
terconnected software systems. our focus on in vivo soft-
ware analytics makes it possible to study complex software
ecosystems. our analysis will not be restricted to individ-
ual software components. this is reected by our desire to
study \big software" systems in their natural habitat and to
emphasize the interaction and interference between dierent
subsystems.
we hope to provide a classication of software-related
problems , similar to the icd classication in healthcare. the
international classication of diseases (icd) provides codes
to classify diseases and a wide variety of signs, symptoms,
abnormal ndings, complaints, and external causes of in-
jury or disease. the icd is published by the world health
organization (who) and is used for morbidity and mortal-
ity statistics, reimbursement systems, and automated deci-
sion support in health care. we would like to understand
software at a comparable level. unfortunately, the diver-
sity in software systems is enormous compared to humans.
humans {despite being unique{ have many common fea-
tures (e.g. two legs, ten ngers, one liver, and one heart),whereas software systems tend to be much more diverse.
moreover, we would like to understand evolving software
ecosystems consisting of a variety of interconnected subsys-
tems. our classication will not focus on software-related
problems only. software has the amazing ability to function
properly for decades when left alone. there are software
artifacts that can adapt to frequent changes and remain op-
erational for an extended period. therefore, we would like
to learn from these best practices.
4. process mining as an enabler
the paper emphasizes the role of process mining in the
bsr research program. as shown in figure 2, we consider
three main types of process mining: discovery ,conformance
checking , and prediction .
input for process discovery is an event log . each event
in such a log refers to an activity (i.e., a well-dened step
in some process) and is related to a particular case (i.e., a
process instance ). the events are partially ordered. the set
of events related to a case describes one \run" of the process.
(hence, the term process instance.) such a run is often
referred to as a trace. it is important to note that an event
log contains only example behavior. in the software domain,
it is particularly challenging to choose a suitable case notion
[17]: what are the process instances in the software system
studied? the choice determines the scope and nature of the
process models discovered or used.
process discovery , i.e., discovering a process model from
a multiset of example traces, is a very challenging problem
and various discovery techniques have been proposed [5, 6,
8, 9, 11, 12, 13, 15, 18, 19, 23, 27, 29, 30]. many of these
techniques use petri nets during the discovery process. it is
impossible to provide a complete overview of all techniques
here. very dierent approaches are used, e.g., heuristics
[13, 29], inductive logic programming [15], state-based re-
gions [5, 12, 27], language-based regions [9, 30], and genetic
algorithms [23]. inductive mining techniques based on so-
called process trees provide various guarantees while still
being able to analyse large and noisy event logs [18, 19, 20].
conformance checking aims to \confront" process mod-
els (discovered or modeled by hand) with real-behavior as
recorded in event logs. various techniques have been devel-
oped [2, 14, 22, 24]. the more advanced conformance check-
ing techniques create alignments , i.e., observed behavior is
related to modeled behavior even if there are deviations.
prediction techniques use a combination of historic data,
learned models, and the current state of the software system.
it may be possible to learn so-called \problem signatures",
i.e., patterns in event data that point to particular problems
[10]. see [21] for a generic prediction framework.
see [25, 26] for recent case studies applying process mining
to software systems.
5. conclusion
this paper proposes to analyze software systems under
real-life circumstances using process mining. this approach
is followed in the \big software on the run" ( bsr) re-
search program [7] and pointers to existing process mining
approaches are provided in this paper.
however, the application of process mining to running
software is still in its infancy. lion's share of process miningliterature focuses on the operational processes supported by
the software rather than the software itself.
future work will focus on better instrumenting software
systems. source code transformation, binary weaving, or
techniques to capture communication events are used to cre-
ate the events. in [17] the jointpoint-pointcut approach from
aspect-oriented programming (aop) is used to instrument
the software. apart from technical challenges, we also face
the more conceptual challenge to select a proper case notion.
in [17] process instances are based on user requests (called
business transactions). however, dierent case notions are
possible.
we will also try to exploit the specics of software. the
fact that there is an architecture (implicit or explicit), can
be exploited by process mining techniques. for example, in
[4] it is show that the\location"of the event in some software
architecture can be used to discover better process models.
events often refer to a software component, class, service, or
some other entity. this provides insights into (im)possible
or (un)desirable interactions between parts of the software
system. we can dene patterns and anti-patterns [16, 28]
that can be checked against the actual software behavior.
6. acknowledgments
the author would like to thank arie van deursen, jack
van wijk, inald lagendijk, jaco van de pol, marieke huis-
man, henri bal, erik poll, bart jacobs, maikel leemans,
boudewijn van dongen for their participation in the original
big software on the run ( bsr) research proposal or/and the
current 3tu.bsr research program (see www.3tu-bsr.nl ).
7. references
[1] w. van der aalst. process mining: discovery,
conformance and enhancement of business processes .
springer-verlag, berlin, 2011.
[2] w. van der aalst, a. adriansyah, and b. van dongen.
replaying history on process models for conformance
checking and performance analysis. wires data
mining and knowledge discovery , 2(2):182{192, 2012.
[3] w. van der aalst, h.bal, a. van deursen, b. jacobs,
i. lagendijk, and j. van wijk. bsr: big software on
the run. gravitation research proposal, 2013.
[4] w. van der aalst, a. kalenkova, v. rubin, and
e. verbeek. process discovery using localized events.
in r. devillers and a. valmari, editors, applications
and theory of petri nets 2015 , volume 9115 of lecture
notes in computer science , pages 287{308.
springer-verlag, berlin, 2015.
[5] w. van der aalst, v. rubin, h. verbeek, b. van
dongen, e. kindler, and c. g unther. process mining:
a two-step approach to balance between
undertting and overtting. software and systems
modeling , 9(1):87{111, 2010.
[6] w. van der aalst, a. weijters, and l. maruster.
workow mining: discovering process models from
event logs. ieee transactions on knowledge and
data engineering , 16(9):1128{1142, 2004.
[7] w. van der aalst, j. van wijk, a. van deursen,
i. lagendijk, j. van de pol, and m. huisman.
3tu.bsr: big software on the run. www.3tu-bsr.nl ,
2015.[8] r. agrawal, d. gunopulos, and f. leymann. mining
process models from workow logs. in sixth
international conference on extending database
technology , volume 1377 of lecture notes in computer
science , pages 469{483. springer-verlag, berlin, 1998.
[9] r. bergenthum, j. desel, r. lorenz, and s. mauser.
process mining based on regions of languages. in
g. alonso, p. dadam, and m. rosemann, editors,
international conference on business process
management (bpm 2007) , volume 4714 of lecture
notes in computer science , pages 375{383.
springer-verlag, berlin, 2007.
[10] j.c. bose and w. van der aalst. discovering signature
patterns from event logs. in b. hammer, z. zhou,
l. wang, and n. chawla, editors, ieee symposium
on computational intelligence and data mining
(cidm 2013) , pages 111{118, singapore, 2013. ieee.
[11] j. carmona and j. cortadella. process mining meets
abstract interpretation. in j. balcazar, editor,
ecml/pkdd 210 , volume 6321 of lecture notes in
articial intelligence , pages 184{199. springer-verlag,
berlin, 2010.
[12] j. carmona, j. cortadella, and m. kishinevsky. a
region-based algorithm for discovering petri nets
from event logs. in business process management
(bpm2008) , pages 358{373, 2008.
[13] j. cook and a. wolf. discovering models of software
processes from event-based data. acm transactions
on software engineering and methodology ,
7(3):215{249, 1998.
[14] d. fahland, m. de leoni, b. dongen, and w. van der
aalst. behavioral conformance of artifact-centric
process models. in a. abramowicz, editor, business
information systems (bis 2011) , volume 87 of lecture
notes in business information processing , pages
37{49. springer-verlag, berlin, 2011.
[15] s. goedertier, d. martens, j. vanthienen, and
b. baesens. robust process discovery with articial
negative events. journal of machine learning
research , 10:1305{1340, 2009.
[16] g. hohpe and b. woolf. enterprise integration
patterns . addison-wesley professional, reading, ma,
2003.
[17] m. leemans and w. van der aalst. discovering
real-life business transactions and process models
from distributed systems. (technical note), 2015.
[18] s. leemans, d. fahland, and w. van der aalst.
discovering block-structured process models from
event logs containing infrequent behaviour. in
n. lohmann, m. song, and p. wohed, editors,
business process management workshops,
international workshop on business process
intelligence (bpi 2013) , volume 171 of lecture notes
in business information processing , pages 66{78.
springer-verlag, berlin, 2014.
[19] s. leemans, d. fahland, and w. van der aalst.
discovering block-structured process models from
incomplete event logs. in g. ciardo and e. kindler,
editors, applications and theory of petri nets 2014 ,
volume 8489 of lecture notes in computer science ,
pages 91{110. springer-verlag, berlin, 2014.[20] s. leemans, d. fahland, and w. van der aalst.
exploring processes and deviations. in f. fournier
and j. mendling, editors, business process
management workshops, international workshop on
business process intelligence (bpi 2014) , volume 202
oflecture notes in business information processing ,
pages 304{316. springer-verlag, berlin, 2015.
[21] m. de leoni, w. van der aalst, and m. dees. a
general framework for correlating business process
characteristics. in s. sadiq, p. soer, and h. voelzer,
editors, international conference on business process
management (bpm 2014) , volume 8659 of lecture
notes in computer science , pages 250{266.
springer-verlag, berlin, 2014.
[22] m. de leoni, w. van der aalst, and b. van dongen.
data- and resource-aware conformance checking of
business processes. in w. abramowicz,
d. kriksciuniene, and v. sakalauskas, editors,
business information systems (bis 2012) , volume 117
oflecture notes in business information processing ,
pages 48{59. springer-verlag, berlin, 2012.
[23] a. medeiros, a. weijters, and w. van der aalst.
genetic process mining: an experimental evaluation.
data mining and knowledge discovery , 14(2):245{304,
2007.
[24] a. rozinat and w. van der aalst. conformance
checking of processes based on monitoring real
behavior. information systems , 33(1):64{95, 2008.
[25] v. rubin, i. lomazova, and w. van der aalst. agile
development with software process mining. in
proceedings of the 2014 international conference on
software and system process (icssp 2014) , pages
70{74. acm press, new york, ny, usa, 2014.
[26] v. rubin, a. mitsyuk, i. lomazova, and w. van der
aalst. process mining can be applied to software
too! in m. morisio, editor, proceedings of the 8th
acm/ieee international symposium on empirical
software engineering and measurement (esem '14) ,
pages 57:1{57:8, new york, ny, usa, 2014. acm.
[27] m. sole and j. carmona. process mining from a basis
of regions. in j. lilius and w. penczek, editors,
applications and theory of petri nets 2010 , volume
6128 of lecture notes in computer science , pages
226{245. springer-verlag, berlin, 2010.
[28] n. trcka, w. van der aalst, and n. sidorova.
data-flow anti-patterns: discovering data-flow
errors in workows. in p. van eck, j. gordijn, and
r. wieringa, editors, advanced information systems
engineering, proceedings of the 21st international
conference on advanced information systems
engineering (caise'09) , volume 5565 of lecture
notes in computer science , pages 425{439.
springer-verlag, berlin, 2009.
[29] a. weijters and w. van der aalst. rediscovering
workow models from event-based data using little
thumb. integrated computer-aided engineering ,
10(2):151{162, 2003.
[30] j. van der werf, b. van dongen, c. hurkens, and
a. serebrenik. process discovery using integer linear
programming. fundamenta informaticae , 94:387{412,
2010.