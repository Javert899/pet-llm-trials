mining inter-organizational business process
models from edi messages: a case study from
the automotive sector⋆
robert engel1, wil van der aalst2, marco zapletal1, christian pichler1, and
hannes werthner1
1vienna university of technology
institute of software technology and interactive systems
electronic commerce group
fengel,marco,pichler,werthner g@ec.tuwien.ac.at
2eindhoven university of technology
department of computer science
w.m.p.v.d.aalst@tue.nl
abstract. traditional standards for electronic data interchange (edi),
such as edifact and ansi x12, have been employed in business-to-
business (b2b) e-commerce for decades. due to their wide industry cov-
erage and long-standing establishment, they will presumably continue
to play an important role for some time. edi systems are typically not
\process-aware", i.e., messages are standardized but processes simply
\emerge". however, to improve performance and to enhance the con-
trol, it is important to understand and analyze the \real" processes sup-
ported by these systems. in the case study presented in this paper we
uncover the inter-organizational business processes of an automotive sup-
plier company by analyzing the edifact messages that it receives from
its business partners. we start by transforming a set of observed messages
to an event log, which requires that the individual messages are corre-
lated to process instances. thereby, we make use of the specic structure
of edifact messages. then we apply process mining techniques to un-
cover the inter-organizational business processes. our results show that
inter-organizational business process models can be derived by analyzing
edi messages that are exchanged in a network of organizations.
keywords: process mining, inter-organizational business processes, bpm,
edi, event correlation
1 introduction
recent academic research on inter-organizational business processes has mainly
focused on web service choreographies and related xml-based technologies.
⋆this research has been conducted in the context of the edimine project and has
been funded by the vienna science and technology fund (wwtf) through project
ict10-010.2 r. engel et al.
nevertheless, many inter-organizational systems are still realized by traditional
electronic data interchange (edi) [12, 7, 16] standards, such as edifact [2]
or ansi x12. presumably they will continue to be the primary data formats in
business-to-business (b2b) interaction for years to come [24].
however, such traditional edi systems are usually process-unaware, mean-
ing that they are solely responsible for sending and receiving messages. when
companies intend to analyze their inter-organizational business processes they
generally have to rely on a-priori models, if models documenting the business
processes exist at all. in case there are models, those may describe the busi-
ness processes as they were planned, which is not necessarily in sync with the
real-world business processes. to address this shortcoming, we seek to derive
models of inter-organizational business processes from edi message exchanges
[8]. thereby we employ and extend existing process mining [19, 21] techniques,
which so far have concentrated on business processes within single organizations.
in this paper we present a case study where we analyze the edi-based inter-
organizational business processes of an automotive supplier company. these pro-
cesses include activities for placing and changing orders as well as for the manage-
ment of a just-in-time supply chain. our results show that inter-organizational
business process models can be derived by analyzing edi messages that are
exchanged between companies. this implies that we can apply a wide range
of process mining techniques. besides discovering the \real" processes, we can
discover bottlenecks, discover deviations from some predened behavior (confor-
mance checking), predict performance (e.g., predict the remaining ow time for
running instances), etc. [19].
to apply process mining techniques we need to convert a collection of edi
messages to an event log. in such an event log, each sent or received edi mes-
sage represents an event. process mining algorithms generally presuppose that
individual events can be assigned to process instances (i.e., cases) [19]. however,
in practice many legacy implementations of edi systems do not provide case
identiers in individual messages. this is also the case for the data set under
consideration in this case study. hence, in order to enable the application of
process mining techniques in such settings, it is necessary to correlate individual
edi messages to process instances . consequently, our approach for the analysis
of edi messages for deriving inter-organizational business process models com-
prises two main steps: (i) correlation of individual, unlinked edi messages to
process instances in order to attain an event log suitable for process mining and
(ii) application of a suitable process mining algorithm on the event log to derive
the inter-organizational business process models.
the remainder of this paper is organized as follows. in section 2, related work
is discussed. in section 3, we describe our approach of correlating individual edi
messages to process instances as a necessary prerequisite for the application of
process mining algorithms on the data set used in this case study. in section
4, the actual case study as well as an interpretation of the results are provided.
finally, in section 5, a critical discussion of the results and an outlook on future
work are given.mining inter-organizational business process models from edi messages 3
2 related work
in [8] we introduce our overall approach of extending process mining techniques
for inter-organizational business processes by means of examining edi message
exchanges. process mining techniques [19, 21, 1, 3, 4] extract knowledge about
business processes by analyzing event logs. so far, the main focus has been
on the analysis of processes inside single organizations. the few publications
on process mining in an inter-organizational context tend to focus on the area
of web services [20, 22, 6, 13, 15, 17]. for example, in [20] conformance checking
techniques are applied to the message logs of oracle bpel. another example
may be found in [22] where process mining techniques are applied in the context
of ibm's websphere.
dustdar et al. [6] proposed techniques for services interaction mining, i.e.,
applying process mining techniques to the analysis of service interactions, and in
[14, pp. 30-32], the suitability of general data mining methods [11] for correlating
messages is discussed, where, however, several serious limitations are identied.
in [18], an algorithm for mining sequential patterns from databases is presented.
nezhad et al. [13, 15] developed techniques for event correlation and process
discovery from web service interaction logs. the authors introduce the notion of
a \process view" which is the result of a particular event correlation. however,
they argue that correlation is subjective and that multiple views are possible.
a collection of process views is called the \process space". with regard to mes-
sage correlation, nezhad et al. [14] also describe correlation rule patterns , a
formalization of corresponding correlation rules as well as heuristics to derive
such rules for correlating a set of messages to conversations. the correlation
approach presented in the aforementioned work can be seen as a generaliza-
tion of the mechanism for message correlation used in this paper. for example,
key/value-correlation , as introduced in this paper, corresponds to key-based cor-
relation in [14]; the synonymy andconcatenation rules introduced in this paper
can also be expressed with reference-based correlation rules as described in [14].
however, the correlation mechanism presented in this paper - while potentially
applicable to other domains - was derived from specic observations on real-
world edi messages.
in [17], a technique is presented for correlating messages with the goal to
visualize the execution of web services.
in practice, however, neither explicit choreography modeling nor web services
are widely employed in electronic business transactions. rather, traditional ap-
proaches to edi such as edifact [2] still play an overwhelmingly dominant
role [24]. therefore, we developed techniques for the correlation of edi messages.
the problem of recognizing process instances from a set of edi messages
corresponds to the requirement of event correlation in process mining [19, p.
113]. literature on this topic is generally sparse with the notable exception of
[9], where a probabilistic approach for correlating events to cases without any
a-priori information is proposed. however, in the case of edi messages one can
work with richer information by examining the actual content of messages sent
and received by edi systems. this is a new approach to process mining, since it4 r. engel et al.
fig. 1: example for correlating edi messages by matching the ordernumber data
elements and their values
considers also the \content" within the execution of a process instance instead
of treating the sending and receiving of messages as opaque events.
related to mining process models from exchanged messages is mining from
i/o operations as described in [5]. in [10], an approach is presented that accounts
for the identication of dierent variants of processes by clustering traces that
share similar behavior patterns.
3 correlation of edi messages to process instances
contrary to process-based approaches such as bpel, traditional edi messages
usually do not contain explicit case identiers that map individual messages to
process instances. however, traditional edi standards such as edifact dene
data elements that may contain back references to previously sent or received
messages of the same business case. for example, the order andinvoice messages
of the purchase order transaction shown in fig. 1 both contain the data element
ordernumber . additionally, both messages contain the same value in this data
element ( 56271 ). hence, in this case the order number can be seen as a case
identier that allows for the conclusion that both messages belong to the same
process instance. typically, it is not as simple as shown in fig. 1. therefore, we
discuss the basic correlation mechanisms and then present a concrete algorithm.
3.1 key/value-correlation
we dene a trace as a set of edi messages that represents a process instance
or a fragment thereof. note that although in process mining the order of events
is generally crucial, we dene a trace as an unordered set of messages because
the order is given implicitly in the timestamps of the messages and can thus
be recovered after correlation. furthermore, we dene a correlator as a key for
a specic data element dened in one ore more edi message types that can
be used for correlating messages to traces by matching the values contained in
the data element. messages are assigned to a trace when each of them contains
the data element denoted by the correlator and the values in the data elements
match. we refer to this basic mechanism as key/value-correlation .mining inter-organizational business process models from edi messages 5
fig. 2: example for synonymous correlators
note that not all data elements can serve as correlators. some data elements
may contain repeating values across multiple messages by coincidence, or the
contained information may be unrelated to actual process instances (e.g., an ad-
dress). we dene a set of potential correlators cas a set of keys for data elements
that can be potentially used for correlation in some edi standard. in the case of
the edifact standards, a number of dierent segments is dened that group
related data elements. for example, the rff (for reference ) segment is intended
to hold information that references some other message, business document or
other business entity. this can be exploited for correlating edifact messages.
observations on the sample data set used in this case study reveal that many
data elements in the rff segment3represent indeed potentially eective corre-
lators (e.g., order numbers are usually contained in rff segments). hence, one
may use the various types of references dened in the rff segment as a start-
ing point for building a set of potential correlators (cf. section 4). in practice,
however, varying implementations of edi standards require further narrowing
of the set of potential correlators to a subset that suces for the correlation
of a specic edi implementation. we refer to such a subset as a correlator set
c ⊆c.
3.2 synonymous keys
as will be shown in detail in section 4, the data set used for this case study
reveals that distinct data elements sometimes contain identical information. for
example, a seller receives an order message ( m1) from a customer with a specic
order number ( 56271 ) (cf. fig. 2). the seller replies with a dispatch advice
message ( m2) indicating that ordered goods have been shipped. to facilitate
the alignment of orders with shipments, the seller references the order numbers
received from the customer in shipment ids of corresponding shipments. the
shipment id ( 56271 ) of the dispatch advice matches with the order number
that was originally assigned by the customer in the order message ( 56271 ).
if correlators ordernumber and shipmentid are dened as synonymous , then
they are regarded as identical keys in key/value-correlation, i.e., m1and m2
are correlated. note that every correlator is reexively synonymous, i.e., every
correlator is synonymous to itself.
3see http://live.unece.org/trade/untdid/d10b/tred/tred1153.htm6 r. engel et al.
fig. 3: example for concatenation of traces
3.3 concatenation of traces
we also consider that results may be further improved by concatenating traces
at points where they intersect (i.e., overlap) with respect to individual messages.
consider, for example, the three messages shown in fig. 3 representing a pur-
chase order transaction. an order message ( m1) of a customer is followed by a
corresponding invoice message ( m2) sent by the seller. because both messages
refer to the same ordernumber (56271 ), the trace ⟨m1; m2⟩can be recognized
by applying key/value-correlation. however, in the invoice message, the seller
assigns a new shipmentid (s4018 ) to a shipment of goods corresponding to the
order. when the customer receives the shipment, it advises the seller by sending
areceiving advice message ( m3) containing the same value in the shipmentid
data element ( s4018 ). hence, ⟨m2; m3⟩can also be recognized as a trace by
key/value-correlation. from a business point of view, all three messages may be
regarded as part of the same process instance since they belong to the same
purchase order transaction. the larger trace ⟨m1; m2; m3⟩can be reconstructed
by concatenating the traces ⟨m1; m2⟩and⟨m2; m3⟩as a result of recognizing m2
as the intersection of the message sets. in this example the overlap occurs with
respect to two dierent correlators ( ordernumber and shipmentid ), but over-
laps may also occur in traces of more than two correlators or a single correlator
in case the corresponding data element occurs multiple times in individual edi
messages.
note that this correlation rule may lead to undesired results in cases where
concatenation is not appropriate. this implies that subsets of the correlator
set need to be selected for which the concatenation rule should be applied. such
concatenation groups of correlators specify groups of correlators. when any com-
bination of one or more correlators in a concatenation group is encountered in
a single message that is contained in multiple traces resulting from key/value-
correlation, the respective traces are concatenated. this means that a new trace
is built from the union of the respective message sets and the original traces
get discarded. this also includes cases where just one of the correlators from
the concatenation group occurs repeatedly in one message that is contained in
multiple traces.mining inter-organizational business process models from edi messages 7
3.4 correlation algorithm
in the following we present the algorithm for correlating edi messages to pro-
cess instances that is used in the case study presented in section 4. it applies
key/value-correlation and selectively the rules for synonymous correlators and
concatenation of traces on a set of observed messages. the algorithm has to
be parameterized with a correlator set and a corresponding specication of rela-
tionships between the correlators with respect to synonymies and concatenation.
these relationships are modeled by means of synonymy sets andconcatenation
setsas described below.
potential correlators, correlator set .cis the set of potential correla-
tors, i.e., all keys for data elements that can potentially be used for correlating
edi messages. c ⊆cis the selected set of correlators. the keys in the set c\ c
will be discarded when correlating messages.
synonymy group, synonymy set . a synonymy group sg ⊆ c is a
set of correlators that are considered to be synonymous. for example, sg=
{ordernumber ;shipmentid }is a synonymy group for the transaction shown in
fig. 2. a synonymy group may be a singleton set, e.g., sg={nameandaddress }.
this implies that correlator nameandaddress is only synonymous with itself.
asynonymy set ss={sg 1;sg2; : : :sgm} ⊆ p (c) is a set of synonymy
groups partitioning c, i.e., sgi∩ sg j̸=∅implies that i=j(pairwise disjoint)
and∪ss=c.4
concatenation group, concatenation set. aconcatenation group cg ⊆
ssis a set of synonymy groups for which the traces that result from correlation
with these synonymy groups are to be concatenated in case of overlaps. for
example, cg={{ordernumber };{shipmentid }}is a concatenation group for
the transaction shown in fig. 3. a concatenation group may contain only a single
synonymy group; in this case concatenation of traces is applied with regard to
overlaps in traces that were correlated by this synonymy group. this may be
useful when an edi message contains multiple instances of the same data element
(e.g., multiple order numbers).
aconcatenation set cs={cg 1;cg2; : : :cgn} ⊆ p (ss) is a set of concatena-
tion groups. unlike synonymy sets, a concatenation set csdoes not necessarily
contain all correlators from c; synonymy groups that are inappropriate for the
concatenation rule are left out of concatenation sets. this is to prevent the con-
catenation of traces of single synonymy groups where this behavior is undesired.
messages, strings, values. mis the universe of edi messages, i.e., all
potential messages. sis the set of all strings, i.e., possible data values. ms ⊆ m
is a concrete set of messages. for modeling actual values in data elements of edi
messages we dene the values function val:m×ss → p (s). the values function
returns the values from a specic message and synonymy group. val(m;sg) is a
set of strings corresponding to message m∈mand synonymy group sg ∈ ss .
as certain data elements may occur repeatedly in a single edi message, the
4p(x) denotes the powerset of some set x.∪xdenotes the union of the subsets in
a set of sets x.8 r. engel et al.
values function might also yield multiple values for a particular message and
synonymy group. each of these values has to be considered for correlation. thus,
the values function returns a set of strings5. for example, for messages m1and
m2shown in fig. 2 and a synonymy group sg={ordernumber ;shipmentid },
both val(m1;sg) ={"56271" ;"80244" }and val(m2;sg) ={"56271" }hold.
correlation . for computing the traces that result from the application of
key/value-correlation and the synonymy rule using a single synonymy group
sg ∈ ss on a set of observed messages ms ⊆ m, we dene the correlation
function corr :p(m)× ss → p (p(s)× p(m)) as
corr(ms ;sg) ={
(v;ms′)∈ p(s)× p(ms)
v=∩
m∈ms′val(m;sg)\∪
m∈ms\ms′val(m;sg)̸=∅}
:
(v;ms′)∈corr(ms ;sg) represents a trace6containing messages ms′cor-
related using the set of values v. note that the resulting traces, which are sets
of messages, need not be disjoint: as a single message may yield multiple values
for a single synonymy group, it might be contained in multiple traces of this
synonymy group as well.
the set of all traces with respect to a synonymy set ssand message set ms
can be obtained as follows:
tss;ms=∪
sg∈sscorr(ms ;sg):
concatenation . letcsbe the concatenation set used to concatenate traces.
two traces ( v1;ms 1);(v2;ms 2)∈ tss;msare related, denoted ( v1;ms 1)∼cs
(v2;ms 2), if and only if:
∃cg∈cs∃sg1;sg2∈cg∃m∈ms 1∩ms 2v1⊆val(m;sg1)∧v2⊆val(m;sg2):
∼∗
csis the reexive transitive closure of ∼cs, i.e., two traces ( v1;ms 1) and
(v2;ms 2) are related, i.e. ( v1;ms 1)∼∗
cs(v2;ms 2), if ( v1;ms 1) = ( v2;ms 2)
or there exists a trace ( v;ms)∈ tss;mssuch that ( v1;ms 1)∼cs(v;ms)
and ( v;ms)∼∗
cs(v2;ms 2).
all traces related through ∼∗
csare merged into larger traces. the set of
traces resulting from the application of key-/value-correlation and selectively
the rules for synonymous correlators and concatenation of traces with respect
5however, if the same value occurs repeatedly in the same data element in a single
message, this will not be reected by the result of the values function as the function's
codomain is a set rather than a multiset.
6note that earlier we described a trace as a set of messages (the ordering can be
derived based on the timestamps). here, we refer to a trace as a pair ( v;ms′)
where ms′is the set of time-ordered messages and vis the set of strings used to
correlate the messages in the trace.mining inter-organizational business process models from edi messages 9
to a message message set ms, a synonymy set ssand a concatenation set cs
can be obtained as follows:
tcs
ss;ms={∪{
ms 2|(v2;ms 2)∈ tss;ms∧(v1;ms 1)∼∗
cs(v2;ms 2)}
(v1;ms 1)∈ tss;ms}
:
an event log suitable for the subsequent application of process mining tech-
niques can be obtained by generating an event for each message from ms. there,
the messages are grouped to process instances according to the traces in tcs
ss;ms
and sorted according to their timestamps.
4 case study
for the case study at hand we examined a data set of 410 edifact messages
that has been supplied by an automotive supplier company. the data set consists
of 180 delfor ( delivery schedule message ), 75 deljit ( delivery just in time
message ), 28 genral ( general purpose message ), 28 ordchg ( purchase
order change request message ), 2 orders ( purchase order message ) and 97
recadv ( receiving advice message ) messages received by the company in a
period of approximately two months. the set does not contain any messages sent
by the company. note that we do not presume any further knowledge about the
company's processes nor availability of any other meta-information about the
data set, in particular with regard to completeness.
4.1 methodology
we analyzed the data set with regard to the process models that can be mined
by applying existing process mining algorithms on sets of process instances that
have been recognized using the approach presented in section 3. for interpreting
the mined process models we referred to the edifact standards and the therein
specied purposes of particular message types. for evaluating the results we
discussed the mined process models as well as our interpretation of these models
with representatives from the company that has supplied the data set.
for performing the case study we implemented the correlation algorithm
described in section 3 in a plug-in7for prom 68[23]. we will further on refer to
the plug-in as correlation tool . the correlation tool comes with a pre-dened set
of 778 potential correlators for edifact messages. these potential correlators
were automatically derived from the code list that denes the possible values an
7the plug-in is publicly available in the edimine package of prom 6 nightly builds
as of november 2011.
8prom is developed at the eindhoven university of technology and currently regarded
as the most prevalent tool in the area of process mining. http://www.processmining.org10 r. engel et al.
table 1: potential correlators occurring in the data set with average trace lengths
resulting from key/value-correlation
correlator avg. trace length [msgs.]
profile number 30.0
order document identifier buyer assigned 14.7
delivery schedule number 9.6
previous delivery instruction number 4.5
sid shipper sidentifying number forshipment 1.8
release number 1.0
previous delivery schedule number 1.0
customer reference number 1.0
contract number 1.0
shipment reference number 1.0
rff ( reference ) segment can hold according to the un/edifact standard,
release d10b9. we use this set of 778 potential correlators in our case study10.
4.2 correlation
a rst examination of the messages in the data set reveals that ten of the 778
potential correlators derived from the possible rff segment qualiers actu-
ally occur in the examined data set. these ten correlators are shown in ta-
ble 1 ordered by average length of the traces (i.e., number of contained mes-
sages/activities) that result from applying key/value-correlation on the data
set using the corresponding correlator. the average length of the traces may
give an indication for the suitability of the corresponding correlator; however,
this metric can also be misleading. for example, adding profile number and
order document identifier buyer assigned to the correlator set and ap-
plying the correlation algorithm without any non-reexive synonymies and an
empty concatenation set results in the set of 18 recognized traces visualized
in fig. 4. these 18 traces comprise 250 of the 410 messages. the visualiza-
tion reveals that profile number is not a suitable correlator because the data
element it denotes contains always the same value and is only present in or-
der and ordchg messages that also contain order numbers (denoted by
order document identifier buyer assigned ). thus, it can be removed from
the correlator set without losing any traces.
a closer look at the data set reveals that most delfor (68%) and all
recadv messages contain the data element denoted by
order document identifier buyer assigned , and all deljit messages con-
tain the data element denoted by delivery schedule number . thus, the corre-
lator delivery schedule number , which is rated third in terms of average trace
9see http://live.unece.org/trade/untdid/d10b/trsd/trsdrff.htm
10however, the correlation tool allows a user to dene and use any set of potential
correlators.mining inter-organizational business process models from edi messages 11
fig. 4: recognized traces in a condensed visualization (screen-shot). columns
represent individual edi messages and rows represent recognized traces. the
labels on the left hand side show the correlator that was used for matching the
messages of a particular trace. dark markings in the matrix on the right hand
side indicate membership of a message in a trace. note that some traces exhibit
partial overlaps on the left hand border of the matrix.
length, is added to the correlator set. also, with respect to the aforementioned
three message types, the values contained in these two data elements match in
6 cases (of 12 resp. 28 cases total when comparing deljit with delfor and
recadv messages), giving a strong indication of the presence of a synonymy
relationship between these two correlators. hence, by putting these correlators
in a synonymy group it is possible to connect traces consisting of delfor and
recadv messages with traces consisting of just deljit messages. guided by
this insight, the two correlators are added to a synonymy group resulting in a
synonymy set ss={{order document identifier buyer assigned ;
delivery schedule number }}. note that although some of the remaining poten-
tial correlators may also lead to interesting results, we leave them unconsidered
in this case study for simplicity. thus, the resulting correlator set is c=
{order document identifier buyer assigned ;delivery schedule number }.
the absence of partial overlaps in a new visualization of the preliminar-
ily computed traces (as, for example, contrary to fig. 4) indicates that the
concatenation rule is not applicable to any of the previously dened correla-
tors/synonymy groups. hence, the concatenation set is left empty, i.e., cs=∅.
applying the correlation algorithm with this parameterization ( cs,ss) on the
data set ms yields 39 individual process instances tcs
ss;mscomprising 382 mes-
sages in total, where each message is assigned to exactly one trace. this amounts
exactly to the number of messages in the data set excluding messages of the
genral ( general purpose message ) message type. hence, at this point the
messages of the genral message type are discarded and not included in sub-
sequent process mining.
in order to derive the inter-organizational business process model, a process
mining algorithm has to be applied. hence, an event log suitable for the appli-
cation of process mining algorithms is built from the messages in the data set12 r. engel et al.
according to the discovered process instances tcs
ss;ms. in this event log each
message represents an event that is assigned to a specic process instance. fur-
thermore, the events are ordered according to the timestamps of the correspond-
ing messages. then a suitable process mining algorithm has to be selected, as
discussed in the following.
4.3 mining the inter-organizational business process model
dierent process mining algorithms exhibit dierent strengths and weaknesses
with regard to properties such as representational bias, robustness (i.e., ability
to deal with noise) or assumptions about completeness [19, pp. 159]. heuristic
mining algorithms consider frequencies of events and sequences when deriving
a process model. together with their favorable properties regarding representa-
tional bias, these factors make heuristic mining algorithms much more robust
than most other approaches [19, p. 163].
the data set under consideration shows apparent signs that it is incomplete.
for example, the appearance of multiple traces in the generated event log which
consist of repeated ordchg messages without corresponding orders mes-
sages is an indication that the data set is missing the initial orders messages.
this is likely due to the limited time frame under which messages were collected.
furthermore, knowing that the edi messages in the data set were observed in
a limited time window allows for the assumption that process instances may
be missing leading or trailing messages/activities. this assumed incompleteness
of the data set suggests that a relatively robust mining algorithm should be
used. hence, we choose the heuristics miner plug-in of prom 6 [25] for mining
a business process model from the correlated edi messages.
providing the previously generated event log as input to the heuristics miner
plug-in yields the inter-organizational process model shown in fig. 5.
a possible interpretation of the gure is that the observed edi messages are
artifacts of two separate sub-processes. the rst process appears to be a purchase
order process; it consists of an activity to place orders ( orders ), succeeded
by multiple requests for changing these orders ( ordchg ). the second pro-
cess appears to be a continuous (i.e., looping) supply chain management (scm)
process, where customers continuously send delivery forecasts (delfor ) and
just-in-time delivery requests ( deljit ). when goods are received, customers
send receiving advices (recadv ). note that the genral messages from the
data set do not appear in the mined process model because the business infor-
mation they convey is not covered by any of the correlators we have used in this
case study.
5 conclusion and reection
according to the edifact standards a delivery just in time message (deljit)
is intended to provide \rm deliver instructions" with ne-grained time gran-
ularity (i.e., days, hours) whereas delivery schedule messages (delfor) aremining inter-organizational business process models from edi messages 13
fig. 5: process model derived from the resulting traces with the heuristics miner
plug-in of prom 6. the arrows represent dependency relations between activities;
the associated values are measures for the strength of the dependency relation,
where values close to 1 indicate a strong positive dependency. the values next
to the activity labels indicate the number of events in the event log (i.e., the
number of messages) that led to the recognition of the corresponding activity
(see [25] for a detailed description of the elements in the graph).
intended for forecasts of supply needs with a more coarse-grained time granu-
larity (i.e., months, weeks). also, common sense dictates that a receiving advice
message (recadv) should be received after corresponding deljit and/or
delfor messages. these considerations suggest that a corresponding scm
process should look similar to the (ctional) process model illustrated in fig. 6.
the mined scm sub-process model visualized in fig. 5 diers from the process
model illustrated in fig. 6 insofar that (i) the causality relation (i.e., the \control
ow") represented by the arrows is in the opposite (and counter-intuitive) direc-
tion, (ii) that it contains repeated occurrences of individual messages/activities
(length-one loops) and (iii) that it does not \end" with a receiving advice, but is
a continuous (looping) process. furthermore, one could ask why there is no link
(i.e., no arrow in the graph) between the purchase order and scm sub-processes.
in the following, possible reasons for these dierences are discussed.
a discussion of our results with representatives of the company that sup-
plied the data set has led to some interesting insights. first, the company stated
that it actually only uses the information from received delfor and deljit
messages; received messages of other types are not processed. this means that
the remaining message types are artifacts of processes that were originally de-
signed and implemented unilaterally by customers of the company. secondly,
the company conrmed that a supply-chain-management process implemented
by delfor, deljit and recadv messages, including length-one loops as14 r. engel et al.
delfor deljit recadv
fig. 6: model of a ctional supply chain management process consisting of de-
livery forecasts, just-in-time delivery requests and receiving advices.
featured in the mined model, is indeed employed. however, as already conjec-
tured before, the order of the messages/activities (the direction of the arrows)
does not correspond to the real-world process. the question of what causes the
missing link between the order and scm sub-processes still remained open after
the discussion. we assume that this might be due to the limited time frame in
which the messages for the data set were collected. if the delay between or-
ders and ordchg messages on the one hand and delfor, deljit and
recadv messages on the other hand is long enough as to span over a signicant
portion of the period in which the messages were collected, this would prevent
us from nding references between these groups of messages in the data set (cf.
fig. 7).
regarding the inaccurate order of activities in the scm sub-process we con-
sider the possibility that this is a result of the observed data set being incomplete
within the observed time window. in other words, the data set may not contain
allmessages that were indeed received by the company in a specic timespan.
this in turn could lead to distortions in the mined process model such as an
incorrect order of activities in a looping process. however, one cannot draw such
a conclusion with certainty solely by analyzing a supposedly incomplete data set
itself when no other constraints are a priori known.
the reason that the general purpose messages (genral) do not lead to a
corresponding activity in the mined process model is rather trivial: the gen-
ral messages in the data set contained only free-text elds with maintenance
information for administrators of edi systems. therefore, they were not picked
up by any of the potential correlators that we have used in the case study. this
accurately reects the fact that the genral messages in the data set do not
represent tangible business activities.
in this paper we presented an initial case study using our approach for min-
ing inter-organizational business process models from edi messages. discussions
with representatives of the company that provided the data set for this case study
have shown that the mined process model allowed for a number of substantial
insights. the above mentioned peculiarities and limitations of the mined pro-
cess model are assumed to appear due to the relatively small size and assumed
incompleteness of the used data set. we expect that more reliable statements
about the generalizability of our approach can be made when using a larger data
set. however, based on our results we assume that such larger sets with longer
periods of observation and completeness of the data would increase the usability
of our approach.mining inter-organizational business process models from edi messages 15
fig. 7: long delays between messages of the procurement and scm sub-processes
may exceed the time window in which messages were collected for the data set.
we expect that our approach will help companies to rediscover and doc-
ument the relationships in their business network and enable the subsequent
application of business process management methods on inter-organizational
business processes realized by means of edi. our future research plans include
- besides working with larger sets - complexity analyses of the used correlation
algorithm as well as the development of methods for assessing the quality of
recognized process instances. furthermore, we intend to determine how inter-
organizational process models can be most eectively visualized to account for
the inter-organizational character of the mined process models.
references
1. r. agrawal, d. gunopulos, and f. leymann. mining process models from work-
ow logs. in 6th international conference on extending database technology
(edbt 1998) , volume 1377 of lecture notes in computer science , pages 469{483.
springer, 1998.
2. j. berge. the edifact standards . blackwell publishers, inc., 1994.
3. j. e. cook and a. l. wolf. discovering models of software processes from
event-based data. acm transactions on software engineering and methodol-
ogy, 7(3):215{249, july 1998.
4. a. datta. automating the discovery of as-is business process models: prob-
abilistic and algorithmic approaches. information systems research , 9(3):275,
1998.
5. p. c. diniz and d. r. ferreira. automatic extraction of process control flow from
i/o operations. in 6th international conference on business process management
(bpm 2008) , volume 5240 of lecture notes in computer science , pages 342{357.
springer, 2008.
6. s. dustdar and r. gombotz. discovering web service workows using web
services interaction mining. international journal of business process integration
and management , 1(4):256{266, 2006.
7. m. a. emmelhainz. edi: a total management guide . john wiley & sons, inc.,
new york, ny, usa, 2nd edition, 1992.
8. r. engel, w. krathu, m. zapletal, c. pichler, w. van der aalst, and h. werthner.
process mining for electronic data interchange. in 12th international confer-
ence on electronic commerce and web technologies (ec-web 2011) , volume 85
oflecture notes in business information processing , pages 77{88. springer, 2011.16 r. engel et al.
9. d. ferreira and d. gillblad. discovering process models from unlabelled event
logs. in 7th international conference on business process management (bpm
2009) , volume 5701 of lecture notes in computer science , pages 143{158. springer,
2009.
10. g. greco, a. guzzo, l. pontieri, and d. sacca. discovering expressive process
models by clustering log traces. ieee transactions on knowledge and data
engineering , 18(8):1010{1027, aug. 2006.
11. d. j. hand, p. smyth, and h. mannila. principles of data mining . mit press,
cambridge, ma, usa, 2001.
12. n. hill and d. ferguson. electronic data interchange: a denition and perspec-
tive. edi forum: the journal of electronic data interchange , 1:5{12, 1989.
13. h. r. m. nezhad, r. saint-paul, b. benatallah, and f. casati. deriving pro-
tocol models from imperfect service conversation logs. ieee transactions on
knowledge and data engineering , 20(12):1683{1698, 2008.
14. h. r. m. nezhad, r. saint-paul, b. benatallah, f. casati, and p. andritsos. mes-
sage correlation for conversation reconstruction in service interaction logs. tech-
nical report dit-07-010, university of trento, 2007.
15. h. r. m. nezhad, r. saint-paul, f. casati, and b. benatallah. event correla-
tion for process discovery from web service interaction logs. vldb journal ,
20(3):417{444, 2011.
16. j.-m. nurmilaakso. edi, xml and e-business frameworks: a survey. computers
in industry , 59(4):370{379, 2008.
17. w. d. pauw, m. lei, e. pring, l. villard, m. arnold, and j. morar. web ser-
vices navigator: visualizing the execution of web services. ibm systems journal ,
44(4):821{845, 2005.
18. r. srikant and r. agrawal. mining sequential patterns: generalizations and per-
formance improvements. in 5th international conference on extending database
technology (edbt 1996) , volume 1057, pages 3{17. springer, 1996.
19. w. van der aalst. process mining: discovery, conformance and enhancement of
business processes . springer, 2011.
20. w. van der aalst, m. dumas, a. r. c. ouyang, and h. verbeek. conformance
checking of service behavior. acm transactions on internet technology , 8(3):29{
59, 2008.
21. w. van der aalst, h. a. reijers, a. m. weijters, b. van dongen, a. alves de
medeiros, m. song, and h. verbeek. business process mining: an industrial ap-
plication. information systems , 32:713{732, 2007.
22. w. van der aalst and h. verbeek. process mining in web services: the websphere
case. ieee bulletin of the technical committee on data engineering , 31(3):45{48,
2008.
23. h. verbeek, j. buijs, b. van dongen, and w. van der aalst. xes, xesame, and
prom 6. in information systems evolution , volume 72 of lecture notes in business
information processing , pages 60{75. springer, 2011.
24. k. vollmer, m. gilpin, and j. stone. b2b integration trends: message formats .
forrester research, 2007.
25. a. weijters and w. van der aalst. rediscovering workow models from
event-based data using little thumb. integrated computer-aided engineering ,
10(2):151{162, 2003.