jxes: json support for the xes event log standard
madhavi bangalore shankara narayana, hossameldin khalifa, wil van der aalst
process and data science department, rwth aachen university
process and data science department, lehrstuhl fur informatik 9 52074 aachen, germany
emails: madhavi.shankar@pads.rwth-aachen.de, hossameldin.khalifa@rwth-aachen.de, wvdaalst@pads.rwth-aachen.de
abstract —process mining assumes the existence of an event log
where each event refers to a case, an activity, and a point in
time. xes is an xml based ieee approved standard format for
event logs supported by most of the process mining tools. json
(javascript object notation) is a lightweight data-interchange
format. in this paper, we present jxes, the json standard
for the event logs and also provide implementation in prom for
importing and exporting event logs in json format using 4 dif-
ferent parsers. the evaluation results show notable performance
differences between the different parsers (simple json, jackson,
gson, jsoninter).
keywords –jxes; event log format; ieee format
i. i ntroduction
process mining is a growing discipline in data science that
aims to use event logs obtained from information systems to
extract information about the business process. a lot of re-
search in process mining has been about proposing techniques
to discover the process models starting from event logs.
event logs are being produced in research and practice,
each system group has developed their own logging mecha-
nism for their logging system. an event log can be seen as a
collection of cases and a case can be seen as a trace/sequence
of events. different researchers and companies use different
formats for storing their event logs. event data can come
from a database system, a csv (comma-separated values), a
spreadsheet, json ﬁle, a transaction log, a message log and
even from apis providing data from websites or social media.
the xes (extensible event stream, an xml-based stan-
dard has been developed [1] to support the easy exchange of
event logs between different tools. this format is supported
by celonis, disco, uipath, prom, pm4py, apromore, qpr
processanalyzer, processgold, etc. the jxes structure is
based on a json object, which contains all the necessary
data and information for event logs. prom [2] is a process
mining framework that contains a large set of pre-processing,
process discovery, conformance and performance/enhancement
algorithms. in this paper, we deﬁne the json format for
event logs and also provide new plugin implementations for
importing/exporting events logs with json format.
the reminder of this paper is structured as follows. in
section ii, we discuss the related work and also deﬁne the
json ﬁle standard for event log. in section iii, we describe the
parser implementation. in section iv we discuss the evaluation
criteria. in section v we provide information on accessing this
plugin and also its demonstration information and section vi
concludes this paper.
ii. s upporting xes using json
the xes standard deﬁnes a grammar for a tag-based
language whose aim is to provide designers of informationsystems with a uniﬁed and extensible methodology for cap-
turing systems behaviors by means of event logs and event
streams. but, not all information systems support xes format
and would be beneﬁcial to extend the xes semantic to json
format. an xml schema shown in figure 1 describes the
structure of an event log.
figure 1. xes template.
openxes [3] is a standard implementation of xes.
openxes stores the event log in main memory using the
standard classes provided by the java collections framework.
this simpliﬁes the development and works well with small
event logs typically used as examples for research purposes.
however, when using openxes for large and complex real-life
event logs (e.g., 10 million events with 3 attributes each), the
available main memory on a typical workstation (e.g., 4 gb) is
insufﬁcient to load the event log. xeslite [4] can handle large
event logs and overcome the drawback of memory issue. db-
xes [5] is a database schema which resembles the standard
xes structure.
json is an open standard lightweight ﬁle format commonly
used for data interchange. it uses human-readable text to store
and transmit data objects. hence, the motivation to deﬁne a
json event log format and create a plugin lies in the fact that
we can easily use the json logs. we have used the 4 design
principles deﬁned for the xes format, namely, (i) simplicity,
(ii) flexibility, (iii) extensibility and (iv) expressivity. this
helped us to make design decisions with respect to deﬁning the
jxes standard format as well as evaluate the implementations
and make suggestions on the optimal parserarxiv:2009.06363v1  [cs.oh]  14 sep 2020for deﬁning the json standard format, we have taken into
account the xes meta-model shown in figure 1 which is repre-
sented by the basic structure (log, trace and event), attributes,
nested attributes, global attributes, event classiﬁers and
extensions. there are different types of primitive attributes.
the string and date attributes are stored as json strings.
json numbers represent ﬂoats andintegers .boolean values
are stored as json boolean. the listvalues is represented as
an array of json objects. lastly, the container is stored as
json object. a logobject contains 0 or more trace objects,
which are stored in the traces array of json objects. each
trace describes the execution of one speciﬁc instance, or case,
of the logged process. every trace contains an arbitrary number
ofevents objects. in addition every trace has its own attributes
stored in the attrs object. below is an example representation
of the basic structure
{
"traces": [{
"attrs":{
"name":"mohamed",
"age": "19",
},
"events": [{
"concept:name": "activity 1",
"date": "2013-10-21t13:28:06.419z",
"org:resource":"bob"
},
{
"concept:name": "activity 2",
"date": "2013-10-21t13:28:06.419z",
"org:resource":"alice"
}]
}]
}
because the string has the same power as the id, the id
data type is not supported in jxes. below is an example for
the representation of every attribute-type.
{
"string": "hi",
"date": "2013-10-21t13:28:06.419z",
"int":1,
"float": 1.0,
"boolean": true,
"list": [{"key":1},{"key":2},
{"new key":"new value"}],
"container":
{
"key":1,
"key-2":"value 2"
}
}
to represent nested attributes in jxes the container with two
keys with the names value andnested-attrs is reserved. which
means that every container with any of the keys value or
nested-attrs is reserved by jxes and can not be used by the
user. every other container is allowed.
below is an example for a nested attribute container.
{"person":
{
"value":1,
"nested-attrs":{"name":"mohamed",
"age":19,
"married":false}
}
}
global attributes are attributes that are understood to be
available and properly deﬁned for each element on their
respective level throughout the document. the log object holds
two lists of global attributes for the trace level and for the event
level. this means, a global attribute on the event level must
be available for every event in every trace. in jxes, we have
deﬁned elements for the trace level and the event level. they
are both stored in under the element global-attrs as nested
elements. below is an example for a global attribute.
{
"global-attrs":{"trace":{"key 1":1},
"event":{"key 2":2}}
}
event classiﬁers assigns to each event an identity, which
makes it comparable to other events (via their assigned iden-
tity). the jxes format makes event classiﬁcation conﬁgurable
and ﬂexible, by introducing the concept of event classiﬁers.
the classiﬁer name is stored in the key and the classiﬁer keys
are stored as an array of strings. an example of event classiﬁers
can be found below.
{
"classifiers":{
"activity classifier":
["concept:name","lifecycle:transition"]
}
}
extensions is a set of attributes on any levels of the xes
log hierarchy (log, trace, event, and meta for nested attributes).
extensions have many possible uses. one important use is
to introduce a set of commonly understood attributes which
are vital for a speciﬁc perspective or dimension of event log
analysis (and which may even not have been foreseen at the
time of designing the xes standard). they are stored in an
array. every object in this array represents an extension. the
name ,concept anduriare stored as key value pairs. see the
following example of extension deﬁnitions.
{
"extensions":[{"name":"test",
"prefix":"concept",
"uri":"http://www.test.org/test.xes"
}]
}
figure 2 shows the full format of the jxes event log.
iii. i mplementation
the basic idea is to enable usage of json format of event
logs in the prom tool. to achieve this we did a market research
of the top and best performing java json parsers. the pluginfigure 2. full jxes template.
to import and export the json ﬁle consists of 4 different parser
implementations of import as well as export. the parsers that
have been implemented are jackson, jsoninter, gson and
simple json. when the user clicks on ”import” in prom
tool and chooses a json ﬁle, the import options related to
jxes are displayed where the user can choose from one of the
parsers to import as shown in figure 3. when the user clicks
on ”export to disk” option, the console to save is displayed
with export parser options as shown in figure 4.
figure 3. available json import parsers for jxes event log.
figure 4. available json export parsers for jxes event log.
table i. l og characteristics .
traces events variants distinct activities max trace length
bpic15 5 1156 59083 1153 389 154
bpic17 31509 1202267 4047 26 180
level d2 1104 11855 60 8 24
flag x2 1104 11855 60 8 24
iv. e valuation
we used 2 real-life event logs and 2 artiﬁcial event logs for
our analysis. table i highlights some of the key characteristics
of the real-life event logs. the level d2 log contains all
standard attribute extensions like lifecycle, cost, concept and
time extensions of an event log. the flag x2 log is a level
d2 extended with attributes from non-standard xes extensions
and/or attributes without an extension.
the evaluation of parsers was done alongside to the ex-
isting xes naive and xes zipped implementations in prom.
the machine used to run the evaluation is equipped with a
4-core intel i7 processor and 8 gb of ram..
the criteria considered for evaluation are (1) speed (2)
memory usage and (3) size.
to test the speed and memory of the different parsers, the
ﬁle is imported/exported thrice and the average of the 3 runs
is recorded in the tables.
1) speed: the best result for json parsers is highlighted
in green. the unit of time speciﬁed in table ii and table iii
is in milliseconds.
table ii. i mport speed .
simple json gson jackson jsoninter xes naive xes zipped
bpic15 5 1644.33 1342 1861 62269 1950 1866.7
bpic17 50080.2 65741.66 29326.33 error 24248.67 17476
level d2 293.33 333.33 317.33 367 462.67 259
flag x2 444.33 390.33.67 421.66 326 248 268
table iii. e xport speed .
simple json gson jackson jsoninter xes naive xes zipped
bpic15 5 874 679 707 477 1915.33 1797
bpic17 error 6336.33 9432.66 2925 20726 33433
level d2 180.33 164.33 68 66.33 165 1750
flag x2 214.33 205 96.66 73.33 260.33 537table iv . i mport memory consumption .
simple json gson jackson jsoninter xes naive xes zipped
bpic15 5 1534.08 1374.84 953.878 2821.53 1421.53 1440.92
bpic17 2838.03 3060.57 2726.59 error 2264.38 1329.12
level d2 1168.21 572.93 378.79 576.80 1324.92 686.00
flag x2 517.17 630.73 284.85 754.37 356.15 780.43
table v . e xport memory consumption .
simple json gson jackson jsoninter xes naive xes zipped
bpic15 5 448.55 679.3 869.53 1040.04 355.528 1708.61
bpic17 error 1441.65 1293.80 2255.95 1958.743 1923.8
level d2 461.12 279.97 96.80 301.9 710.00 659.80
flag x2 467.20 264.58 110.27 302.96 350.29 305.34
2) memory: the memory consumption for different parsers
and the xes implementation is computed using difference
of the ja v a runtime memory methods totalmemory and
freememory . it is noticeable that the jackson json parser uses
signiﬁcantly less memory than the other parsers. and also that
simple json uses little less memory when it comes to average
sized ﬁles. the unit of memory given in table iv and table
v is mbs.
it is clear from the results of the export plugin that jxes
is up to 4x faster than xes. one reason is the reduced syntax
that gets written when exporting json as compared to xml.
it is also clear that the jsoninter parser achieves better
results than all others in terms of exporting speed. the speed
improvement in jsoninter can be attributed to its dynamic
class shadowing tri-tree feature. it is noticeable that the
jackson json parser uses signiﬁcantly less memory than
the other parsers. this performance can be attributed to the
incremental parsing/generation feature which reads and writes
json content as discrete events. and also that simple json
uses little less memory when it comes to average sized ﬁles.
in addition the jsoninter json parsers uses the most memory
in all cases.
3) size: table vi provides the size in mbs for the ﬁles
stored. the size improvement in jxes is obvious because the
type is not speciﬁed and tag names are not written twice and
the markup is not repeated.
we noted that there was no loss of information during
the conversion from xes to jxes and vice versa. the only
difference noted was the log version information in the header
of xes ﬁle. we observed that the performance of the xes
naive importer is surprisingly good when compared with the
json format. this can be attributed to the fact that xes format
has the datatype speciﬁed in the tag whereas in json we need
to parse it completely to determine the datatype.
v. access and demonstration
the jxes import and export plugins have been imple-
mented with 4 different json parsers. the code is available in
table vi. l ogfilesize.
xes jxes xes zipped
bpic15 5 43.9 29.6 1.6
bpic17 552 323.7 28.2
level d2 4.6 2.5 0.246
flag x2 5.1 2.6 0.305table vii. p arser recommendation chart .
speed memory
import jackson jackson
export jsoninter jackson
the svn repository [6]. the sample logs for jxes format can
be found under the tests/testﬁles/ directory. the tutorial video
of the parsers implemented as a prom plugin is available at
https://youtu.be/sz6untfssfi.
figure 3 and figure 4 show the different parser options to
import and export json event logs respectively. to run the
import plugin, we will require the event log in json format
shown in figure 2.
the application can also be run by importing any of the
event log in csv or xes format and then converting it into
the json format.
vi. conclusion
we have introduced jxes, which is a json format of event
log which adheres to the xes principles. in this paper, we
deﬁned the json format of event log as deﬁned by the ieee
xes standard. after deﬁning the standard, we have provided
4 different implementations of import and export options for
json event logs with different parsers.
table vii shows the authors recommendation for parser
choice in case of import and export considering speed and
memory criteria.
it would be interesting to evaluate more parsers (e.g.,
jsonp, fastjson and protobuf)
we hope that the jxes standard deﬁned by this paper will
be helpful and serve as a guideline for generating event logs
in json format. we also hope that the jxes standard deﬁned
in this paper will be useful for many tools like disco, celonis,
pm4py, etc., to enable support for json event logs. we also
hope that the plugin implemented in prom will be useful for
many with json event logs.
references
[1] ieee standard for extensible event stream (xes) for achieving inter-
operability in event logs and event streams, ieee standard 1849-2016,
2016.
[2] e. verbeek, j. c. a. m. buijs, b. f. van dongen, and w. m. p. van der
aalst, “prom 6: the process mining toolkit,” in proceedings of the
business process management 2010 demonstration track, hoboken,
nj, usa, september 14-16, 2010, ser. ceur workshop proceedings,
m. l. rosa, ed., vol. 615. ceur-ws.org, 2010. [online]. available:
http://ceur-ws.org/v ol-615/paper13.pdf
[3] openxes. [online]. available: http://www.xes-standard.org/openxes/start
[4] f. mannhardt, “xeslite - managing large xes event logs in prom,” 01
2016.
[5] a. syamsiyah, b. f. van dongen, and w. m. p. van der
aalst, “db-xes: enabling process discovery in the large,” in
data-driven process discovery and analysis - 6th ifip wg 2.6
international symposium, simpda 2016, graz, austria, december
15-16, 2016, revised selected papers, ser. lecture notes in business
information processing, p. ceravolo, c. guetl, and s. rinderle-ma,
eds., vol. 307. springer, 2016, pp. 53–77. [online]. available:
https://doi.org/10.1007/978-3-319-74161-1 4
[6] coderepository. [online]. available: https://svn.win.tue.nl/repos/prom/
packages/jxeseventlog/