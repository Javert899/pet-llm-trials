a framework for explainable concept drift
detection in process mining
jan niklas adams1, sebastiaan j. van zelst2;1, lara quack2, kathrin
hausmann2, wil m.p. van der aalst1;2, and thomas rose2;1
1rwth aachen university, germany
fniklas.adams, s.j.v.zelst, wvdaalst g@pads.rwth-aachen.de
2fraunhofer institute for applied information technology (fit), germany
flara.quack, kathrin.hausmann, thomas.rose g@fit.fraunhofer.de
abstract. rapidly changing business environments expose companies
to high levels of uncertainty. this uncertainty manifests itself in signi-
cant changes that tend to occur over the lifetime of a process and possibly
aect its performance. it is important to understand the root causes of
such changes since this allows us to react to change or anticipate future
changes. research in process mining has so far only focused on detect-
ing, locating and characterizing signicant changes in a process and not
on nding root causes of such changes. in this paper, we aim to close
this gap. we propose a framework that adds an explainability level onto
concept drift detection in process mining and provides insights into the
cause-eect relationships behind signicant changes. we dene dierent
perspectives of a process, detect concept drifts in these perspectives and
plug the perspectives into a causality check that determines whether
these concept drifts can be causal to each other. we showcase the eec-
tiveness of our framework by evaluating it on both synthetic and real
event data. our experiments show that our approach unravels cause-
eect relationships and provides novel insights into executed processes.
keywords: process mining Â·concept drift Â·cause-eect analysis
1 introduction
digitization poses great threats but also exceptional opportunities to compa-
nies. on the one hand, new technologies, business models, and legislation expose
companies to high levels of uncertainty. on the other hand, the introduction
of information systems over the last decades enables companies to collect and
analyze data on their business processes . these data can be converted into an
event log and are used to discover, monitor and improve the underlying business
processes. it, thus, helps the companies to deal with the uncertainty they are
exposed to. process mining [1] is the discipline of computer science that success-
fully analyzes and improves business processes by applying concepts of process
and data science to transform event logs into process models and actionable
insight for the process owner. when looking at business processes uncertaintyarxiv:2105.13155v1  [cs.ai]  27 may 20212 j. n. adams et al.
fig. 1. our proposed framework transforms event data into two time series repre-
sentations that can describe various dierent process perspectives, e.g., the weekly
workload. a cause-eect analysis is then conducted using the information of detected
concept drifts in the selected perspectives to unravel root causes for these drifts.
is often caused by signicant change, called concept drift , in some perspective
of a business process. for example, due to covid-19 a lot of companies had to
redesign or extend processes by including digital alternatives to previously in-
person activities. this resulted in so-called concept drifts. as the quality and
protability of organizations highly depend on their business processes concept
drift can have a huge impact on either of these dimensions. the restructuring
of a process to meet the health safety regulatory standards could, e.g., lead to
increased processing time and thus increased cost. detecting and handling con-
cept drift has, thus, been named one of the main challenges in process mining [2].
for the process owner the mere knowledge of past occurrences of concept drifts
is not sucient. to derive useful insights it is helpful to know the underlying
cause-eect relationships associated with these concept drifts, i.e., the user can
either anticipate future concept drifts or use the uncovered relations to further
improve the process.
in this paper, we introduce a generic framework that augments concept drift
detection in process mining by adding a cause-eect analysis on top of the de-
tected concept drifts. this cause-eect analysis extracts possible explanations for
the occurrence of a concept drift. the core idea of the framework is depicted in
figure 1. before starting, we choose a perspective of the process to be analyzed
for concept drift, i.e., the control-ow ,data,resource orperformance perspec-
tive. this perspective is called the primary perspective. as we are interested
in the root causes for these concept drifts, we choose a secondary perspective
that could contain root causes. this secondary perspective is also analyzed for
concept drifts and these are tested for causality with the concept drifts of the
primary perspective. in the rst step, we transform an event log into two time
series for both the chosen primary and secondary perspective. after detecting
concept drifts in both perspectives, we conduct a cause-eect analysis and check
which concept drifts of the secondary perspective could be causal to a concept
drift in the primary perspective. the set of explainable concept drifts forms the
output of our framework.
our framework touches the areas of concept drift detection and cause-eect
analysis in process mining which have, thus far, primarily been studied sepa-
rately. most of the work on concept drift deals with detecting concept drifts and
only considers the control-ow perspective of a process. the control-ow per-
spective describes the structuring and dependencies of activities. recent work,a framework for explainable concept drift detection in process mining 3
e.g., the approach of brockho et al. [11] introduces additional perspectives, i.e.,
the time perspective to concept drift detection. ostovar et al. [27] add an addi-
tional characterization of the drift, i.e., providing information about underlying
nature of the drift, on top of the mere detection of the drift. with our work, we
include more perspectives and add an explainability level to concept drift detec-
tion. most work on cause-eect analysis uncovers cause-eect relationships on a
process-instance-level, e.g., giving recommendations for individual customers to
maximize the outcome, as bozorgi et al. [10] recently introduced. pourbafrani et
al. [31] focus on nding cause-eect relationships on a global-process level and
use these to simulate what-if scenarios.
the remainder of this paper is structured as follows. we introduce the re-
lated work on concept drift detection and cause-eect analysis in section 2. in
section 3, we provide the denitions and background used in the remainder of
this paper. we illustrate our framework for explainable concept drift detection
in section 4. in section 5, we provide details on our specic implementation and
evaluate our framework with synthetic data and conduct a case study on real-life
event data. section 6 concludes the paper.
2 related work
a general introduction to the eld of process mining is given in [1]. in this
section, we introduce related work on concept drift detection and cause-eect
analysis in process mining.
concept drift detection (also: change point detection), has received much at-
tention outside of process mining. a general introduction can be found in [5].
as our use case does not provide labeled data sets for supervised algorithms,
we are only interested in unsupervised concept drift detection algorithms as the
training data for supervised algorithms is expensive to obtain and the ground
truth is hard to dene in the setting of real-life event logs. existing work on
concept drift detection in process mining focuses on the detection, localization
and characterization of changes, not the explanation of them. detection refers
to the presence of a concept drift, localization to the time of occurrence of the
drift and characterization to the nature of the drift, e.g., whether an activity was
removed or a performance indicator signicantly increased. explanation refers
to the root causes of a drift, e.g., why an activity was removed or why a perfor-
mance indicator signicantly increased. most of the work aims to detect drifts
in the control-ow perspective. bose et al. [8,9] and martjushev et al. [24] built
representations of the control-ow perspective by using the (directly) follows
relations. they employ hypothesis testing to compare a window of values be-
fore and after a potential change point for signicant dierences. maaradji et
al. [22] and ostovar et al. [27] use the and+-relations [25] to model the
control-ow perspective while also using hypothesis testing to determine change
points. one notable recent approach is the one of yeshchenko et al. [38]. the
authors use declare constraints to model the control-ow of a process. they
dene a range of time windows and subsequently calculate values for the declar-4 j. n. adams et al.
table 1. overview of the related approaches for cause-eect analysis and concept drift
detection in process mining. cause-eect analysis can be performed either on the case-
or the process level. approaches for concept drift detection have dierent scopes, i.e.,
they can detect, locate, characterize or explain a concept drift. our approach detects,
locates and explains concept drift and therefore yields insights into process level cause-
eects.
concept drift cause-eect analysis
detect. locat. char. expl. case level process level
[4,8,9,11,12,21,22,24,36,39] x x
[17,27,33,38] x x x
[10,16,18,19,28,34] x
[26,29{31] x
our approach x x x x
ative constraints for each time window, forming a multivariate time series. this
time series is analyzed for concept drifts by applying the pruned exact lin-
ear time algorithm. by visualizing the results of this clustering, the user can
characterize the occurring concept drifts. other authors also include other per-
spectives than control-ow. leontjeva et al. [20] and meisenbacher et al. [23] use
the data payload of past events to include the data perspective into their repre-
sentation. analyzing the related work on concept drift in process mining reveals
two shortcomings: the little consideration of additional perspectives other than
control-ow and the absence of root cause analysis for concept drifts. with this
paper we aim to close this gap.
the area of cause-eect analysis in process mining investigates relationships
that are present in a process. one way to dene dierent levels of analysis is
to either consider the local intra-trace, i.e., case level, or the global level of the
process. the case level deals with individual process instantiations, e.g., a cus-
tomer running through the process of applying for a loan. the global level is
the entirety of components and cases that are associated with the process. many
approaches in cause-eect analysis focus on the case level rather than the global
level, providing recommendations and predictions for handling individual cases.
de leoni et al. [19] and hompes et al. [16] provide methods to extract root
causes for performance variations on a case level. in another work, hompes et
al. [18] group events based on certain process performance characteristics and
further decompose these groups based on dierent characteristics. they subse-
quently test for cause-eects between these characteristics by looking at their
development over time and testing for granger-causality [15] to extract the root
causes of performance variations on a case level. this technique works well for
identifying causal factors for performance variations, however, other perspectives
of the process such as control-ow or resources are, so far, not considered, po-
tentially missing important cause-eects. bozorgi et al. [10] use techniques from
causal machine learning to provide recommendations for handling an individual
case that maximize the probability of a certain outcome. these approaches pro-
vide useful information for individual cases, however, they are not able to detect
important cause-eect relationships, that happen on a global level, e.g., an in-a framework for explainable concept drift detection in process mining 5
table 2. exemplary event log with two cases and resources handling the activities
case-id activity timestamp resource
1register 2021-06-15 12:30 peter
1 submit 2021-06-15 12:35 sophia
2register 2021-06-15 13:12 peter
1 reply 2021-06-15 14:21 christina
crease in customers, that leads to longer waiting times. other authors investigate
cause-eect relationships on a global level. pourbafrani et al. [30,31] use system
dynamics as a modeling tool of the process over time and construct a model
that contains cause-eect relationships between dierent metrics. this model is
subsequently used to simulate the outcomes for dierent scenarios. nakatumba
et al. [26] investigate the eect of resource workload on their performance using
regression analysis.
a selection of papers on concept drift and cause-eect analysis in process
mining is depicted in table 1. our framework is the only technique that covers
both spectra.
3 preliminaries
in this section, we introduce the core denitions of this paper and the main
notations used for improving the readability. p(x)=fx0jx0xgdenotes the
power set of a set x. a sequence allows enumerating the elements of a set. a
sequence of length noverxis a function :f1;:::;ng!xwhich we write as
=h(1);(2);:::; (n)i.
an event can be considered the \atomic datum" of process mining. an event
consists of values that are assigned to attributes, e.g., the executed activity, the
timestamp, a case-id and other attributes. each line in table 2 corresponds to an
event. each event needs to be assigned a case-id describing the process instance
which is the case this event belongs to. all lines with the same case-id in table 2
form a case. the collection of recorded cases forms an event log.
denition 1 (events, cases and projections). an event describes the in-
formation associated to the execution of an activity. let edenote the universe
of events. letddenote the universe of attributes and let vdenote the universe
of possible attribute values. let tdenote the universe of possible timestamps.
â¢for an attribute d2d we assume the existence of a mapping to retrieve the
corresponding attribute value e
d:e9v.
â¢the activity projection is a total function retrieving the activity of an event
e
act:e!a , whereadenotes the universe of activities.
â¢the time projection is a total function retrieving the timestamp of an event
e
time:e!t .
â¢each event has an identier e
idto dierentiate between events, that might
have the same values for each attribute. therefore, e;e02e(e
id(e)=e
id(e0))
e=e0)6 j. n. adams et al.
fig. 2. our proposed framework for uncovering cause-eect relationships. in step 1, the
event log is transformed into two time series representations of dierent perspectives.
in step 2, the change points are detected and checked for causality in step 3.
events belong to a case denoting the process instance of this event. let cbe the
universe of all cases.
â¢for an attribute d2dwe assume the existence of a projection function to
retrieve the corresponding attribute value c
d:c9v:
â¢each event e2ehas a case-id describing the case it belongs to. the projection
functione
case(e)retrieves the corresponding case-id.
â¢we furthermore assume the existence of an event projection that maps a
case on the set of its events c
events :c!p (e).cases are non-overlapping, i.e.,
8c1;c22c(c
events (c1)\c
events (c2)6=;)c1=c2).
an event log lis a set of cases, thus l2p(c).
â¢for an attribute d2dwe assume the existence of the projection functions
e
d(l)=fe
d(e)j9c2le2events (c)gandc
d(l)=fc
d(c)jc2lgto retrieve the set
of values for this attribute.
4 generic framework for explainable concept drift
in this section, we introduce the three steps of our framework. the framework is
depicted in figure 2. in the rst step, we construct time series representations for
both chosen perspectives. in the second step, a change point detection algorithm
is performed on both perspectives. in the third step, we test pairs of change
points for causality by taking the time lag between them and check whether the
two time series can be causal given the lag. if this test is positive the detected
concept drift together with the cause-eect-relationship are as explanation given
to the user. for each of the steps, we provide the input and output specications.a framework for explainable concept drift detection in process mining 7
4.1 time series construction
to express the development of a process perspective over time, we construct
a time series. a time series assigns values to subsequent time intervals. we,
therefore. need to map an event log onto time intervals and then assign values
to these intervals. for assigning values to a set of events that are contained in
a specic time interval, we rst need a way to look at these events in isolation
and thus dene a selection function for events based on a time interval.
denition 2 (time intervals). based on a reference timestamp tr2t, e.g.,
describing the beginning of an event log, we can express every timestamp as a
real number that describes the time, e.g., number of milliseconds or nanosec-
onds, passed since this reference timestamp. the real-valued representation of a
timestamp can be retrieved with the function rtr(t)2r. given two timestamps
t1;t22tandtr
1=rtr(t1);tr
2=rtr(t2)we dene a time interval ti=[tr
1;tr
2)where
tr
1<tr
2. lettidenote the universe of possible time intervals. jtij=tr
2 tr
1de-
nes the length of a time interval and start (ti) =tr
1. to extract the events of
an event log loccurring within a time interval ti2ti we dene the selection
functionsel(l;ti)=fe2ej9 c2le2c
events (c)^rtr(e
time(e))2tig.
this denition is used to map an event log onto time intervals. to nish con-
structing the time series we now calculate a value for each time interval. we
rst need to dene a function to map a collection of events onto a real-valued
number and can then extend this to multiple functions, mapping a collection of
events onto a real-valued vector and nally a time series, doing this for multiple
subsequent time intervals.
denition 3 (event log to time series). given a time interval ti2ti
and an event log l, we dene the function f(sel(l;ti))2rthat maps an event
log for a specic time interval onto a real-valued number. we use the notation
f(l;ti)=f(sel(l;ti))for readability. let f1;f2;:::;f mbe functions of the sig-
nature off. we dene the function g(l;ti) = (f1(l;ti);f2(l;ti);:::;f m(l;ti))
withg(l;ti)2rmto construct a real-valued vector for a specic time interval
of an event log. let ti2tidene a mutually exclusive sequence of time in-
tervals of equal lengths, i.e., 8tii;tij2ti(jtiij=jtijj^i6=j)tii\tij=;^i<j)
start (tii)<start (tij)). withti=hti1;:::;ti niwe dene the time series construc-
tion function hg;ti;l =(g(l;ti 1)|;:::;g (l;tin)|)withhg;ti;l2rmnto retrieve
a real-valued matrix, that represents a multivariate time series of an event log.
for each perspective there are many ways to represent it as a real-valued
number. take the control-ow as an example. we can count the number of dis-
tinct activities for subsequent time intervals. if the number of activities suddenly
increases we know that there is a concept drift in the control-ow since a new
activity was added. dierent measurements can be combined as a single one can
not represent the whole perspective. e.g., if one activity was removed and one
was added taking the number of distinct activities as representation could not
express this. table 3 depicts a non-exhaustive list of measurements for each of8 j. n. adams et al.
table 3. possible mapping functions to construct a real-valued representation of dif-
ferent perspectives of a business process.
control-flow performance data resources
directly-follows service times [26] aggregation of workload [26]
frequencies [3] case attributes
-relations [3] overtime cases [34] aggregation of involved resources
activity attributes
+-relations [25] case durations [18] number of number of
events or cases active resources
heuristic miner's activity sojourn threshold aggregation of
a)wbscore [37] time [18] exceedings attribute values
number of activities activity waiting time [18]
declare constraints [38]
::: ::: ::: :::
the introduced perspectives. for a detailed introduction we refer to the corre-
sponding papers.
for the control-ow perspective, we can use simple measures as, e.g., the
number of distinct activities or intermediate results of mining algorithms like
the-relations obtained from the -miner [3].
for the performance perspective we can leverage heavily on the recorded
times, which can be seen as a proxy for cost or service quality. we can, e.g.,
calculate the average service times for each activity, i.e., the time from start to
completion of an activity. furthermore, we can dene a threshold of processing
time and count all the cases that exceed this threshold and are thus classied as
overtime.
the measures for the data perspective use the additional attributes associ-
ated to events, e.g., the age or credit score of customers. we can use aggregation
functions such as average or maximum to map all the values of an attribute in
a time interval onto a single number, e.g., the average age of customers for each
time interval. we can, furthermore, count the number of events to describe the
event volume over time.
representations for the resource perspective rely on information about the
resources, often sta members, handling an activity. we can count the number
of events a resource is involved in to calculate the workload and its development
over time. by simply counting the number of active resources each time frame,
we can furthermore monitor the number of deployed resources over time.
the question remains which perspectives a user should choose. there is not
a general answer for this, domain knowledge and potential assumptions can be
used. however, the investigation of certain perspectives might be more promis-
ing than others. there are some examples of reoccurring cause-eect themes in
process mining. resources often have an impact onto the performance of a pro-
cess, e.g., the workload onto the service times [26], the workload onto overtime
cases [34] or the associated data onto the case duration [28]. furthermore, e.g.,
control-ow changes such as changing prevalence of a choice might inuence the
performance perspective.a framework for explainable concept drift detection in process mining 9
4.2 change point detection
after constructing multivariate time series for each the primary and the sec-
ondary perspective, we detect change points in these time series. the change
point detection technique maps a time series onto subsets of the time intervals
in which the distribution of the features signicantly changed.
denition 4 (change point detection in multivariate time series).
leth2rmnbe a multivariate time series and ti=hti1;:::;ti nibe the previ-
ously introduced sequence of time intervals used to construct this time series.
a change point detection technique cpd maps a time series onto a subset of
time intervals, where a signicant change of the underlying time series occurred
cpd (h)ti.
as an input the change point detection method has to be able to process a
multivariate time series. as mentioned in section 2, this method should be un-
supervised, i.e., be able to detect change points without seeing similar kinds of
time series with annotated change points before. examples of change point de-
tection techniques include cost-based techniques [35], hypothesis testing [9] or
clustering techniques [17].
4.3 cause-eect analysis
in the rst step, two time series for the primary and the secondary perspective
are constructed. a set of mpmapping functions for the primary perspective
andmsfor the secondary perspective are applied to construct the time series
hp2rmpnandhs2rmsn. the change point detection step of the framework
calculates two sets of change points cpd (hp) andcpd (hs). in the cause-
eect analysis step, we look at the change points in the primary perspective
and analyse which concept drifts in the secondary perspective potentially have
a cause-eect relationship to a concept drift in the primary perspective. we,
therefore, look at each primary drift and consider all preceding secondary drifts.
we calculate the time lag, i.e., the number of time intervals that lie between the
drifts, and test whether the secondary perspective can potentially be causal to
the primary perspective given this lag. we, therefore, test all pairs of features
between primary and secondary perspective for causality given this lag. a feature
is a row of the time series describing a single measurement over time. if a feature
pair is tested to be causal we add the change point pair and all causal feature
pairs to the output of our framework.
denition 5 (cause-eect analysis). lethp2rmpnandhs2rmsnbe
time series for the primary and secondary perspective. we dene the lag func-
tionlti(ti1;ti2)2nto retrieve the number of time intervals in tithat lie in
betweenti1andti2, i.e., the lag. for a change point of the primary perspective
cpp2cpd (hp)and a change point in the secondary perspective cps2cpd (hs)
we retrieve the lag kusing the lag function k=lti(cpp;cps). given a row,
i.e., a feature, of the primary and secondary perspective hp2hp;i;i2f1;:::;m pg10 j. n. adams et al.
andhs2hs;i;i2f1;:::;m sg, wherehs;hp2rn, a cause-eect analysis technique
ca maps these two features and a time lag konto a value between 0 and 1
ca(hp;hs;k)2[0;1]. this value indicates whether a cause-eect relationship with
lagkis present or not.
the set of all change point pairs with all detected cause-eect relationships
between feature pairs forms the output of the framework.
5 evaluation
5.1 implementation
we implemented our framework on the basis of pm4py [7]. the implemented
version is available at github3. in this section, we introduce the techniques in
change point detection and cause-eect analysis specic to our implementation.
similar to yeshchenko et al. [38], we use the pruned exact linear time
pelt-algorithm [14] as a change point detection technique for multivariate time
series. this technique uncovers change points by minimizing a cost function that
depends on assigning change points. it is able to process a multivariate time series
and computes an optimal solution in linear time and is therefore well suited for
our experiments. an exact description can be found in [14]. for applying the
pelt-algorithm a penalty has to be chosen that prevents overtting. the
calculated change points are subsequently used to calculate the lags needed for
cause-eect analysis. we use the concept of granger-causality [15]. granger-
causality determines with which probability two time series are correlated given
a time lag between them and can thus be seen as a type of predictive causality.
the user has to provide a p-value that describes the threshold probability at
which feature pairs should be classied as granger-causal.
5.2 experiments
we evaluate our framework using a synthetic event log and a real-life event log.
the synthetic log is used as a means to verify the implementation and a proof
of concept. we, then, expand this to conduct a case study on real-life event data
and discuss our ndings. for both experiments we provide the chosen parameters
for the three steps of our framework, i.e., perspectives and measurements in time
series construction, change point detection in multivariate time series and cause-
eect analysis. to verify our results, we compare our ndings to state-of-the-art
methods in concept drift detection and cause-eect analysis.
5.3 synthetic insurance event log
we use cpn tools [32] to generate an event log based on a simulation model
of claiming insurance shown in figure 3. the dierent ways of notication, i.e.
3https://github.com/niklasadams/explainable_concept_drift_pm.gita framework for explainable concept drift detection in process mining 11
fig. 3. synthetic process for claiming insurance. the availability of dierent ways of
notication, phone, e-mail and post, depends on the age of the customer. [8]
table 4. parameter choices for running the framework on the synthetic event log.
experimental setup
time series
constructionprimary perspective control-flow directly-follows frequencies
secondary perspective dataminimum, maximum, sum,
average, count, set average
time interval duration 1 day
change point
detectionpelt-algorithm primary = 3secondary = 1:5
cause-eect
analysisgranger-causality p-value=110 12
postal, phone and email, are available for dierent ages of customers. when
simulating we introduce a drift in the ages of customers that should then cause
a succeeding drift in the prevalence of notication activities, especially an in-
crease in email-notication. the chosen parameters for the instantiation of our
framework are depicted in table 4.
for change point detection we retrieve a change point in the primary control-
ow perspective at day 133 and in the secondary data perspective at day 132.
the lag between this drift is k=1. we, therefore, use a lag of 1 when testing for
a cause-eect relationship between the two perspectives.
with a p-value of 10 12, which is especially low due to the articial setting,
we retrieve 25 feature pairs that are granger-causal with lag k=1. all involved
features of the primary control-ow perspective concern the frequency of di-
rectly follows relationships between one of the notication activities and either
a preceding or succeeding activity. the features of the secondary perspective all
describe the distribution of age, i.e., the sum, average, minimum, maximum and
average of the set of values. we, therefore, limit our output to only 5 of the fea-
ture pairs, which are depicted in figure 4. the depicted features propose that a
decrease in the age of customers led to an increase in the prevalence of the email
notication activity one day later which is exactly the cause-eect relationship
we articially introduced. our framework has correctly detected and explained
the concept drift with the underlying cause-eect relationship.12 j. n. adams et al.
fig. 4. 5 granger-causal feature pairs for the cause-eect relationship between data
and control-ow perspective. a drift in the age of the customers is responsible for an
increase in email notications and a decrease in other notications.
5.4 case study
we also evaluated our framework using data from the business process intel-
ligence (bpi) challenge 2017 [13]. the event log considered belongs to a loan
application process through an online system. a customer can submit loan ap-
plications to the nancial institute and may receive an oer from the nancial
institute afterwards. the parameters for applying our framework are depicted
in table 5. we analyze the performance perspective, i.e., the service times, for
concept drifts. we search for root causes in the resource perspective, i.e., the
workload, as it has shown to often have a signicant impact on the service
times [26].
for the primary, performance perspective we retrieve a change point in week
28. for the secondary, workload perspective we retrieve a change point at week
22. the lag for cause-eect analysis is therefore k=6. the cause-eect analy-
sis with a p-value of 0 :015 yields 23 granger-causal feature pairs with a lag of
6 weeks. four dierent primary features are contained in these feature pairs.
since three of them do not exhibit a concept drift around week 28, we drop
the corresponding pairs for further analysis. the remaining pairs are depicted
in figure 5. the average duration of wvalidate application shows a signi-
cant decrease for week 28. we further analyze the resource workloads that are
granger-causal to this feature. most of the resources do not work continuously
over the span of the event log. we can see increases and peaks in the work-
load for some resource. when looking at the total workload of all resources,
which is among the granger-causal features, we can see a signicant increase.
the detected cause-eect relationship, therefore, states that an increase ina framework for explainable concept drift detection in process mining 13
table 5. parameter choices for running the framework on the bpi 2017 log.
experimental setup
time series
constructionprimary perspective performance service times [26]
secondary perspective resource workload [26]
time interval duration 1 week
change point
detectionpelt-algorithm primary = 3secondary = 1:5
cause-eect
analysisgranger-causality p-value=0:015
fig. 5. granger-causal feature pairs of the cause-eect relationship between resource
and performance perspective. the only concept drift for the duration perspective of
these features can be observed in wvalidate application . an increase of the workload
is granger-causal to the reduction of the service times.
the workload of resources led to a decrease in the service times for
wvalidate application .
one submission paper for the bpi challenge [6], amongst other things, inves-
tigates dierent kpis of the process over time. this paper also found a signicant
decrease in the manual validation time, i.e., the service times for validating an
application, and an increase in case numbers. due to the absence or the lack of
visibility of other factors such as additional training, change of sta, etc., the
paper suggests that the decrease in service times is a reaction to cope with the
increased workload.
5.5 comparison
our proposed framework for explainable concept drift detection touches two
areas of research: concept drift detection and cause-eect analysis. we, there-
fore, compare the results for the synthetic event log and the bpi 2017 log with
the results from state-of-the-art methods from both of these areas. for concept14 j. n. adams et al.
table 6. comparison of results for the concept drift detection
our approach visual analytics [38] prodrift [22]
synthetic log control-ow drift, day 133 x x
bpi 2017 performance drift, week 28  
table 7. comparison of results for cause-eect analysis
our approach pmsd [29]
synthetic log data (age)!control-ow 
bpi 2017 resource (workload) !performance x
drift detection we compare the results with the visual analytics approach of
yeshchenko et al. [38] and prodrift by maaradji et al. [21] as both approaches
have shown outstanding results in concept drift detection. for cause-eect analy-
sis we compare our results with the ndings of pourbafrani et al. [29] as they are
searching for relations between dierent process parameters on a system-wide
level.
table 6 depicts the comparison between the detected concept drifts for the
synthetic and the real-life event log. the control-ow drift in the synthetic log
is detected by both approaches. as prodrift relies on completed traces, the
drift is detected approximately 15 days later compared to our approach. both
approaches very clearly show the existence of a sudden drift through means of
their visualization. as both approaches do only focus on control-ow drifts they
can not be used to compare results on the detected performance drift for the
bpi 2017 log. table 7 depicts the results retrieved from pmsd compared to our
approach. as pmsd does not model the data perspective, we can not use it to
detect the cause-eect in the synthetic log. for the bpi 2017 log we apply the
pmsd framework and compute a system dynamics log. this log contains, among
others, the arrival rate and the service times of the process. we apply the relation
detection of pmsd with a lag of 6 weeks. the results show a negative correlation
between the lagged arrival rate and the service times. this corresponds to our
detected cause-eect as the higher inux of cases determined a decrease in service
times.
we veried our ndings by applying state-of-the-art methods from both con-
cept drift detection and cause-eect analysis. if the corresponding perspective
can be modeled, we are able to verify our ndings with these approaches. these
are promising results as they show the power of incorporating more perspec-
tives into concept drift detection and using these to nd possible cause-eects
of concept drifts.
6 conclusion
in this paper, we combine concept drift detection and cause-eect analysis to
create a framework for explainable concept drift detection. we dene a primary
perspective where concept drifts should be detected and a secondary perspectivea framework for explainable concept drift detection in process mining 15
with which these concept drifts are explained. by applying a cause-eect analysis
to the features of both perspectives, we identify feature pairs that can be used
to explain the concept drift. we veried our approach using a synthetically
generated event log. we furthermore analyzed the event log of the bpi challenge
2017 and were able to explain a concept drift in the performance with an increase
in the resources' workload. these rst experiments have shown a great potential
for explaining concept drifts.
future work to further improve our conceptual framework the following steps
can be taken. first of all, we want to plug dierent change point detection
algorithms and cause-eect analysis tools to detect other types of drifts and,
e.g., non-linear relationships. furthermore, spurious elements and rare signals
produce spikes in a signal that can be misleading to cause-eect analysis tech-
niques. we want to investigate whether the general application of noise ltering
on the time series is benecial. another interesting point for an extension of the
framework are non pairwise dependencies. a concept drift could, e.g., be caused
by two dierent concept drift in two other perspective and not by only one of
them.
references
1. van der aalst, w.m.p.: process mining: data science in action. springer (2016)
2. van der aalst, w.m.p., et al.: process mining manifesto. in: bpm. vol. 99, pp.
169{194. springer (2011)
3. van der aalst, w.m.p., weijters, t., maruster, l.: workow mining: discovering
process models from event logs. ieee trans. knowl. data eng. 16(9), 1128{1142
(2004)
4. accorsi, r., stocker, t.: discovering workow changes with time-based trace clus-
tering. in: simpda. pp. 154{168. springer (2011)
5. aminikhanghahi, s., cook, d.: a survey of methods for time series change point
detection. knowl. inf. syst. 51, 339{367 (2017)
6. berger, f.: mining event log data to improve a loan application pro-
cess. bpi challenge (2017), https://www.win.tue.nl/bpi/lib/exe/fetch.php?
media=2017:bpi2017_paper_3.pdf
7. berti, a., van zelst, s.j., van der aalst, w.m.p.: process mining for python
(pm4py): bridging the gap between process-and data science. arxiv preprint
arxiv:1905.06169 (2019)
8. bose, r.p.j.c., van der aalst, w.m.p., zliobait_ e, i., pechenizkiy, m.: handling
concept drift in process mining. caise pp. 391{405 (2011)
9. bose, r.p.j.c., van der aalst, w.m.p., zliobait_ e, i., pechenizkiy, m.: dealing with
concept drifts in process mining. ieee trans. neural networks learn. syst. 25(1),
154{171 (2014)
10. bozorgi, z.d., teinemaa, i., dumas, m., rosa, m.l., polyvyanyy, a.: process min-
ing meets causal machine learning: discovering causal rules from event logs. in:
icpm. pp. 129{136 (2020)
11. brockho, t., uysal, m.s., van der aalst, w.m.p.: time-aware concept drift de-
tection using the earth mover's distance. in: icpm. pp. 33{40 (2020)16 j. n. adams et al.
12. carmona, j., gavald a, r.: online techniques for dealing with concept drift in
process mining. in: ida. vol. 7619, pp. 90{102 (2012)
13. van dongen, b.: bpi challenge 2017
14. gachomo, d.: the power of the pruned exact linear time (pelt) test in multiple
changepoint detection. american journal of theoretical and applied statistics 4,
581 (2015)
15. granger, c.: some recent development in a concept of causality. journal of econo-
metrics 39(1), 199 { 211 (1988)
16. hompes, b., buijs, j.c.a.m., van der aalst, w.m.p.: a generic framework for
context-aware process performance analysis. in: otm. vol. 10033, pp. 300{317
(2016)
17. hompes, b., buijs, j.c.a.m., van der aalst, w.m.p., dixit, p.m., buurman, h.:
detecting change in processes using comparative trace clustering. in: simpda.
vol. 1527, pp. 95{108 (2015)
18. hompes, b.f.a., maaradji, a., rosa, m.l., dumas, m., buijs, j.c.a.m., van der
aalst, w.m.p.: discovering causal factors explaining business process performance
variation. in: caise 2017. vol. 10253, pp. 177{192 (2017)
19. de leoni, m., van der aalst, w.m.p., dees, m.: a general process mining framework
for correlating, predicting and clustering dynamic behavior based on event logs.
inf. syst. 56, 235{257 (2016)
20. leontjeva, a., conforti, r., francescomarino, c.d., dumas, m., maggi, f.m.: com-
plex symbolic sequence encodings for predictive monitoring of business processes.
in: bpm. vol. 9253, pp. 297{313 (2015)
21. maaradji, a., dumas, m., rosa, m.l., ostovar, a.: fast and accurate business
process drift detection. in: bpm. vol. 9253, pp. 406{422 (2015)
22. maaradji, a., dumas, m., rosa, m.l., ostovar, a.: detecting sudden and gradual
drifts in business processes from execution traces. ieee trans. knowl. data eng.
29(10), 2140{2154 (2017)
23. maisenbacher, m., weidlich, m.: handling concept drift in predictive process mon-
itoring. in: scc. pp. 1{8 (2017)
24. martjushev, j., bose, r.p.j.c., van der aalst, w.m.p.: change point detection
and dealing with gradual and multi-order dynamics in process mining. in: bir.
vol. 229, pp. 161{178 (2015)
25. de medeiros, a.k.a., van dongen, b.f., van der aalst, w.m.p., weijters,
a.j.m.m.: process mining : extending the -algorithm to mine short loops. in:
beta working paper series. vol. wp 113 (2004)
26. nakatumba, j., van der aalst, w.m.p.: analyzing resource behavior using process
mining. in: bpm. vol. 43, pp. 69{80 (2009)
27. ostovar, a., maaradji, a., rosa, m.l., ter hofstede, a.h.m.: characterizing drift
from event streams of business processes. in: caise. vol. 10253, pp. 210{228 (2017)
28. polato, m., sperduti, a., burattin, a., de leoni, m.: data-aware remaining time
prediction of business process instances. in: ijcnn. pp. 816{823 (2014)
29. pourbafrani, m., van der aalst, w.m.p.: pmsd: data-driven simulation using
system dynamics and process mining. in: bpm (phd/demos). vol. 2673, pp. 77{
81 (2020)
30. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: scenario-based prediction
of business processes using system dynamics. in: otm. vol. 11877, pp. 422{439
(2019)
31. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting automatic
system dynamics model generation for simulation in the context of process mining.
in: bis. vol. 389, pp. 249{263 (2020)a framework for explainable concept drift detection in process mining 17
32. ratzer, a.v., et al.: cpn tools for editing, simulating, and analysing coloured petri
nets. in: icatpn. vol. 2679, pp. 450{462 (2003)
33. seeliger, a., nolle, t., m uhlh auser, m.: detecting concept drift in processes using
graph metrics on process graphs. in: s-bpm one. p. 6 (2017)
34. suriadi, s., ouyang, c., van der aalst, w.m.p., ter hofstede, a.h.m.: root cause
analysis with enriched process logs. in: bpms. vol. 132, pp. 174{186 (2012)
35. truong, c., oudre, l., vayatis, n.: selective review of oine change point detection
methods. signal processing 167, 107299 (2020)
36. weber, p., bordbar, b., ti~ no, p.: real-time detection of process change using
process mining. in: iccsw. vol. dtr11-9, pp. 108{114 (2011)
37. weijters, a., van der aalst, w.m.p., medeiros, a.: process mining with the heuris-
tics miner-algorithm. cirp annals-manufacturing technology 166(2006)
38. yeshchenko, a., ciccio, c.d., mendling, j., polyvyanyy, a.: comprehensive process
drift detection with visual analytics. in: er. vol. 11788, pp. 119{135 (2019)
39. zheng, c., wen, l., wang, j.: detecting process concept drifts from event logs. in:
otm. vol. 10573, pp. 524{542 (2017)