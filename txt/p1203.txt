extracting process features from event logs
to learn coarse-grained simulation models
mahsa pourbafrani and wil m. p. van der aalst
chair of process and data science, rwth aachen university, germany
fmahsa.bafrani,wvdaalst g@pads.rwth-aachen.de
abstract. most process mining techniques are backward-looking, i.e.,
event data are used to diagnose performance and compliance problems.
the combination of process mining and simulation allows for forward-
looking approaches to answer \what if?" questions. however, it is dif-
cult to create ne-grained simulation models that describe the process
at the level of individual events and cases in such a way that reality is
captured well. therefore, we propose to use coarse-grained simulation
models (e.g., system dynamics) that simulate processes at a higher ab-
straction level. coarse-grained simulation provides two advantages: (1)
it is easier to discover models that mimic reality, and (2) it is possible
to explore alternative scenarios more easily (e.g., brainstorming on the
eectiveness of process interventions). however, this is only possible by
bridging the gap between low-level event data and the coarse-grained
process data needed to create higher-level simulation models where one
simulation step may correspond to a day or week. this paper provides a
general approach and corresponding tool support to bridge this gap. we
show that we can indeed learn system dynamics models from standard
event data.
keywords: process mining Â·quantifying processes Â·process variable
extraction Â·scenario-based simulation Â·system dynamics
1 introduction
as a business owner, the ability to know the process behavior in dierent situa-
tions is a crucial requirement to improve the process and foresee the upcoming
problems. process mining is a set of data-driven techniques that paves the way to
this aim and describes the processes from dierent aspects [1]. the next step in
process mining is to answer the questions regarding the future of processes. simu-
lation and prediction techniques in process mining are introduced to address this
goal [2]. it is possible to perform \what-if" analyses and apply dierent scenarios
on the systems, using ne-grained simulation models that behave close to the
real systems. such models are dicult to create and it is hard to explore alterna-
tive scenarios. for example, workers who are involved in multiple processes may
seem under-utilization while being overloaded with work. dierent aggregation
levels of the states of a process are required for high-level decisions and investi-
gating dierent scenarios. for instance, the average service time of cases per day2 m. pourbafrani and w.m.p. van der aalst
fig. 1: transforming ne-grained event logs into the quantitative variables to produce coarse-grained
process logs. time window ( tw) indicates the time step, i.e., a specic period of time, and vrepresents
the generated quantitative variable.
plays a more important role than the service time of a single case in deciding on
the number of resources to be allocated. as fig. 1 shows, by looking at event
data over a specic period of time, tw, dierent aspects of the process can be
aggregated as process variables such as cases, time-related variables, resources,
and activities. the aggregated state of the process and its behavior at that level
directly aect every single instance in the process. the resulting coarse-grained
process log has a value for each process variable per time window and is used
to create a system dynamics model. system dynamics is an aggregated simu-
lation technique that represents a system using the relationships between its
variables [15]. system dynamics techniques are able to capture external factors,
e.g., the eect of advertisement on the arrival rate of new customers, and simu-
late the general system without simulating low-level events, e.g., looking at the
system at the aggregated level per day instead of taking every single event into
consideration. therefore, unlike traditional discrete event simulations, they are
a good match to simulate processes at higher abstraction levels.
in [8], the idea of combining process mining techniques and system dynamics
for the purpose of the scenario-based analyses was rst presented. in this paper,
we propose an approach to extract all the possible measurable aspects of a pro-
cess systematically for creating coarse-grained process logs. as a result, we can
generate default simulation models to be used by system dynamics techniques.
the ultimate goal is to bridge the gap between the ne-grained event log and
the coarse-grained process log. to do so, we extract forward-looking scenarios
focusing on performance aspect w.r.t. the existing attributes in the event log.
these questions, i.e., scenarios, are the design choices that come from the process
mining insights. for instance, the process shows a bottleneck in an organization,
or a long waiting time for a specic part of the process, i.e., a set of activities.
we map event logs into the part of the process which we want to focus on and
analyze the ltered event logs. we split the ltered logs into the time steps,
then we calculate measurable elements over each time step. the remainder of
this paper is organized as follows. in section 2, we present the related works.
in section 3, we introduce background concepts and notations. in section 4, we
present our main approach. we evaluate the approach in section 5 by designing
simulation models and section 6 concludes this work.extracting process features from event logs 3
2 related work
several authors have explored approaches to use simulation in the context of pro-
cess mining. in [13], the authors introduced an approach to design and generate
discrete event simulation models from event logs in the form of colored petri
nets including many details such as resource pooling. in [5], the simulations are
mainly focused on the activity-ow level presented by petri nets. other simula-
tion techniques are based on bpmn models for simulating business processes.
in [3], business process simulation including user interaction is proposed.
however, several challenges have not been addressed in the current simula-
tion techniques. in many cases, simulation results are not accurate enough. this
is due to the lack of sucient historical information and not incorporating exter-
nal factors. the simulation of business processes can be improved by exploiting
the event logs and process mining techniques as proposed in [2]. despite detailed
simulation techniques such as discrete event simulation, system dynamics simu-
lation techniques are able to capture a system at a higher level of aggregation as
well as aecting the eect of external variables on the system [15]. techniques
such as system dynamics are able to capture external factors and inuences.
the combination of system dynamics and business processes is proposed in [4].
authors in [12] mention the possibility of designing system dynamics models for
the business processes. however, in the presented work the model generation
and simulation are not supported by the data and it is based on the domain
knowledge of the process.
the recently proposed approach in [8] introduces the idea of designing sys-
tem dynamics models using process mining insights. the main goal is to capture
the eects of the external variables in the simulation, e.g., the eciency of users.
however, only a proof of concept was provided to show the potential of the com-
bination. also,one of the approach applications, i.e., the production line, is shown
in [11]. furthermore, the extracted values for dierent variables are exploited to
form the models [10]. besides the hidden relationships between the variables, the
granularity of the time step to extract the values highly aects the quality of
the simulation results which is addressed in [9] by applying time-series analyses.
in this paper, we propose a framework to dene, generate and capture all the
possible process variables and their quantitative values for answering \what-if"
questions in the processes at dierent levels of aggregation. our approach ad-
dresses designing, extracting, and calculating the required aggregate-simulation
variables from event logs based on process mining insights.
3 preliminaries
in this section, we dene process mining and system dynamics concepts and the
functions which are used in the proposed approach.
process mining uses past executions of processes in the form of event logs. an
event log captures events which include, case id, timestamps, activity, resource,
and other possible attributes.4 m. pourbafrani and w.m.p. van der aalst
table 1: sample event log of a hospital. each row is an event. for each unique patient (case) in the
process, a specic activity at a specic time is performed by a specic resource.
case id activity age start timestamp complete timestamp resource
116 registration 28 1/1/2020 10:29 1/1/2020 10:47 john
117 registration 65 1/1/2020 10:29 1/1/2020 10:29 sarah
116 first visit 35 1/1/2020 10:30 1/1/2020 10:50 sam
118 registration 78 1/1/2020 10:31 1/1/2020 10:49 sarah
116 examine 54 1/1/2020 10:31 1/1/2020 10:31 carl
: : : : : : : : : : : : : : : : : :
denition 1 (event log). an event is a tuple e=(c;a;r;ts;tc), wherec2cis
the case identier, a2ais the corresponding activity for the event e,r2ris the
resource,ts2tis the start time, and tc2tis the complete time of the event e.
we call=cartt the universe of events. we also dene projection
functions,c:!c ,a:!a ,r:!r ,ts:!t andtc:!t for
attributes of events. we assume that events are unique and an event log lis a
set of events, i.e., l.
for event log l,ps(l)=min
e2lts(e) andpc(l)=max
e2ltc(e) return the
minimum start timestamp and maximum complete timestamp in l.
a sequence of events with the same case identier and ordered in time rep-
resents a process instance, i.e., a trace.
denition 2 (trace). a trace2is a nite sequence of events =he1;:::;eni,
where each ei2happens at most once and for each ei;ej2;c(ei)=c(ej)^
ts(ei)ts(ej);ifi<j . for2,e=fe2gis the set of events in . we
denotelas the set of all traces in the event log l.
for instance, for a patient in an event log of a hospital in table 1, the
rst eventerepresents that for the patient with case id 116 (c), the activity
registration (a) was started at timestamp 10:29 01.01.2020 (ts) by resource
john (r) and was completed at timestamp 10:47 01.01.2020 (tc). for the same
patient, the sequence of events w.r.t. time is called a trace in the process, e.g.,
the sequence of activities is registration, rst visit, examine, second visit .
fig. 2: the value of the stock number of pa-
tients in the hospital is calculated based on
thearrival rate of patients and nish rate
of patients ows (per time step). the value
ofnish rate of patients is aected by the
average treatment time of patients .system dynamics system dynamics tech-
niques model dynamic systems and their
interaction with their environment [16].
the stock-ow diagram is one of the main
modeling notations in system dynamics.
systems are modeled w.r.t. three dier-
ent elements, i.e., stocks, ows, and vari-
ables. stocks are accumulative variables
over time, ows manipulate the stock val-
ues and variables inuence the values of
ows and other variables over time. a simple stock-ow diagram for the hospital
example is shown in fig. 2. for instance, the arrival rate of the patients and the
release rate of the patients as ows add/remove to/from the values of the number
of patients in the hospital as a stock, also, average treatment time as a variableextracting process features from event logs 5
fig. 3: the main framework to generate possible process variables which describe the process over
the steps of time, i.e., sd-logs. these results are used to form simulation models.
aects the release rate. considering one day as the step of time w.r.t. fig. 2,
on average 160 patients, enter the process in the hospital, i.e., the arrival rate,
and on average the process takes 8 hours, i.e., average service time. therefore,
simulating the release rate and the number of patients in the hospital per day
is possible. the number of patients in the tthday of the simulation is equal to
the initial number of patients in the hospital at the beginning of the simulation
added bytr
0(+arrival rate of patients  release rate of patients )dt.
4 approach
our approach includes three main modules, as shown in fig. 3, i.e., applying
design choices ,preprocessing step, and extract variables . using our approach
process behavior is described at dierent levels. we generate process variables
describing the process quantitatively. the transformed process log (sd-log) pro-
vides a coarse-grained view of the observed behavior. these variables are used
to generate high-level simulation models to answer what-if questions.
questions and scenarios are based on the design choices, which are high-
lighted by the process mining insights. as shown in fig. 3, process discovery [1],
conformance checking [6], performance analysis, and organizational mining [14]
results enable designing the simulation scenarios and models. these insights
should be quantied in order to be put into action. based on these results, the
focus of the simulation models is either a set of activities, resources, or cases.
therefore, we use the projected event logs on the events including the specied
aspects. the focus can be on the whole process, the organizational level, or a part
of activity-ow in the process, e.g., workow pattern structures. for instance,
organizational mining shows low eciency for one of the organizations in the
process, therefore, simulation models w.r.t. this knowledge can be designed, e.g.,
does the resource allocation from the other organization improve the eciency?
to describe the process over the steps of time, we aggregate the event logs
at the time level, i.e., looking at the process in a specic period of time using
preprocessing module. the process event log is prepared w.r.t. the design choices
from design choice and the selected time window, the next step is to extract the
variables. the extract variables module denes and calculates possible variables
over the steps of time. these variables are the main components of the simulation
models for answering what-if questions.6 m. pourbafrani and w.m.p. van der aalst
table 2: possible design choices for generating simulation models using process mining techniques.
discovery and conformance checking techniques help in selecting a set of activities, resources,
organizations, and cases based on the process event log land the process model m.
pm techniquesinsightsset of casesset of activities set of resources
activity workow patterns resource roles organizations
discovery(l) + + + + + +
conformance checking( l;m ) + + + + + +
4.1 event log preparation
we break down the \forward-looking" analysis into the measurable elements
which can be measured over time. we refer to these measurable elements of
the scenarios/questions as process variables. these variables are either in the
process or in the process environment which some are captured in the event log.
to extract possible process variables over time steps, the rst step is to form an
event log based on the focus of the scenarios/questions and generating dierent
event logs of the process for each time step.
using the dened time window projection and design choices projection
functions, dierent levels of what-if analyses are achievable, and the performance
function generates the values of the performance variables.
design choices using process mining the insights provided by the pro-
cess mining techniques indicate the focus of the modeling. process discovery,
conformance checking, performance analyses, and organizational analyses result
in specic parts of a process to be simulated.
table 2 presents possible insights from dierent process mining techniques.
a set of cases, activities, and resources are possible targets of scenario-based
analyses. for instance, for the given example, there is an xor choice between
two activities, examine and radiology in the process, and the involved activities
can be a bottleneck based on the performance analysis and process discovery
results, or conformance checking reveals a skipped path for a specic type of
cases, e.g., second visit is not performed for young patients.
in order to apply the discovered design choices to the simulation model gen-
erations, the rst step is to use them for process variable extraction. to do so,
we dene design choice projection which projects an event log based on the
design choices in table 2. the projected event log includes the corresponding
events for the selected insights, e.g., a set of activities.
denition 3 (design choice projection). letbe the universe of events
andrr,cc, andaabe the selected sets of resources, cases, and activities,
respectively. dc2r2c2ais the universe of design choices. (r;c;a ): 292
is a function that projects a set of events on the given design choice (r;c;a )2
dc. forl,(r;c;a )(l)=fe2ljr(e)2r^c(e)2c^a(e)2ag.
for example, in our running example, the process performance analysis shows
that the rst activity for the patient, registration , is the bottleneck of the pro-
cess. projecting the event log of the hospital to that specic part structures theextracting process features from event logs 7
simulation model. therefore, the projected event log only includes the events
containing the registration activity.
preprocessing the design choices indicate which parts of the process should
be considered for simulation modeling. the projection functions return an event
log in which the events are only from the specied set of insights. moreover, we
dene a time projection function to capture the provided event logs between two
specic timestamps, e.g., indicated as twin fig. 1.
denition 4 (time window projection). letbe the universe of events
andtbe the universe of timestamps. for t2tand2n, givenl, we dene
eventt;t+(l)=fe2ljtts(e)t+gandcaseevent t;t+(l)=fe2lj92le2
^9e02tts(e0)t+g. the projection function pt;t+: 292returns a
set of events, such that, pt;t+(l)=eventt;t+(l)[caseevent t;t+(l).
an event log can be broken down into smaller ones per time period, e.g.,
instead of an event log of 10 days in an organization, 10 event logs for each
day exist. before extracting the variables on top of the projected event logs,
it is important to consider the overlapping events in dierent time steps, i.e.,
between every tandt+(a window of time tw). to address this issue, for k2n
as the number of times steps using as time window, two functions, event and
caseevent in denition 4 are dened. using eventt;t+, all the events started
and nished in ithstep are captured. for instance, assume to be one day, an
event started in one day and nished the next day is only considered in the step
that it has started in, i.e., the rst day. caseevent returns all the events related
to the cases that one of their events happened at ithtime step.
4.2 variable extraction (sd-log generation)
for each of the provided event logs as a result of applying time window pro-
jection in denition 4, the process variables should be designed. to design the
process variables for the given event logs, i.e., process describers over time steps,
performance indicators should be determined.
process performance indicators can be derived from the timestamp attributes
tsandtcfor the cases, activities, and resources at dierent levels, which all are
considered as aspects. for instance, service time of a case, an activity or a re-
source, waiting time of a case, and time in process of a case are the possible
performance indicators. the aggregation functions also can be applied on top
of the performance indicators. these functions can be chosen between mathe-
matical functions such as average, median, and sum. for instance, the average
service time of cases in an event log, i.e., paints in the hospital, is calculated us-
ingaverage as the aggregation function, case as the aspect, and service time as
the performance indicator. note that for calculating the performance indicators
related to the case aspect, caseevent makes it possible to capture the related
events from the present cases in that time window.
process variable in denition 5 denes process variables by assessing the
validity of combining dierent possible process aspects, performance indicators,8 m. pourbafrani and w.m.p. van der aalst
table 3: the validator table, which shows the possibility of applying dierent aggregation functions
(af) on top of the performance indicators (in) for dierent aspects (as). the valid combinations
provide process features which along with the selected design choices form process variables.
validatorin
value countservice
timewaiting
timetime in
process
afas numerical
variablecategorical
variablenumerical
variablecase resource activity case resource activity case resource activity case
sum true false true false false false true true true true true true true
average true false true false false false true true true true true true true
median true false true false false false true true true true true true true
? false true false true true true false false false false false false false
and aggregation functions. first, we dene a set of possible combinations as
shown in table 3. based on the design choices and dierent parameters, i.e.,
possible process features, process variables are designed. the process variables
values are calculated by denition 6.
denition 5 (process variable). letaf=faverage;median;sum; ?gbe the
set of aggregation functions, in=fservicetime;waiting time;timeinprocess
;count;valuegbe the set of performance indicators and as =
fcase; resource; activity; numerical attributes; categorical attributes g
be the set of process aspects. we denote f=afinas as the set of
process features (table 3).v=dcf is denoted as the set of process variables.
for the given design choice (r;c;a )2dc and the process feature f2f ,
v=((r;c;a );f)2v is a process variable.
table 3 shows the possibility of combining dierent parameters to gener-
ate valid process features, e.g., it is not possible to apply the average function
(af=average ) on the number ( in=count ) of activities ( as=activity ) in an event
log. these possible features are used to form process variables using the design
choices in denition 3.
denition 6 (performance function). letbe the universe of events and
vbe the set of process variables. :v2!r0generates the value of the
process variable of an event log.
we generate the set of sequential states of the process with time window pro-
jection function in denition 4 and dene performance variable in denition 5.
the next step is to generate the values of the process variables by applying
performance function on the projected event logs as dened in denition 6.
for instance, let lbe the event log of the running example, f=(af;in;as )
be a process feature where af=average ,in=time in process , andas=case,
based on table 3, the combination is valid. for the design choice ( r;c;a ),
considerr=fr(e)je2lg,c=fc(e)je2lg, anda=fa(e)je2lg, i.e.,
the sets of all the resources, cases, and activities in l, respectively. there-
fore,v= ((r;c;a );f) is the average time that all cases (patients) spend
in the hospital. ( v;l) represents the value of this process variable, i.e.,
(v;l)=pjlj
i=1pc(ei) ps(ei)
jlj.
the calculated values of variables form a coarse-grained process log, referred
to as sd-log, over time. the values dene the process over time at a higher levelextracting process features from event logs 9
of aggregation and can be used for designing the simulation models. denition 7
denes an sd-log and algorithm 1 transforms an event log to an sd-log.
denition 7 (sd-log). letlbe an event log, vbe a set of process
variables,2nbe the selected time window, and k=d(pc(l) ps(l))
ebe the num-
ber of time steps in the event log w.r.t. . the sd-log of a given landis
sdl;:f1;:::;kgv ! r0, such that sdl;(i;v)represents the value of perfor-
mance function (l;v)in theith-time window ( 1ik).
algorithm 1: variable extraction algorithm w.r.t. the given design
choices, which generates sd-logs for scenario-based analysis.
input:event log l ,set of process variables v,time window  ,
design choice des
output:sd log sd
1l0=des(l)
2ts=ps(l0)(start time of the event log)
3tc=pc(l0)(complete time of the event log)
4k=d(tc ts)
e
5foreachi2[1;k]do
6l00=pts;ts+(l0)
7ts=ts+
8 foreachv2vdo
9 add (v;l00) tosd(i;v)
10 end
11end
12returnsd;
table 4 (a) shows a sample sd-log with = 1daythat includes dierent
process variables for the sets of all the resources ( r), cases (c), and activities
(a) in the sample event log of the hospital, e.g., f=(average;servicetime;case )
and ((r;c;a );f) represents the process variable v, average service time for all
the cases, i.e., patients, and ( v;l) calculates the value of vin each day in the
sample log l. also, in table 4 (a), number of resources in the hospital per
day represents the process variable v= ((r;c;a );(?;count;resource ))2v,
table 4: a part of two sample sd-logs of the running example with a time window of 1 day using
dierent design choices. each row shows a time step, here 1 day, cell-values represent the process
variables' values and columns represent the process variables.
(a) (b)
time
window
(daily)arrival rate
of casesnumber
of resourcesaverage
service timeaverage
waiting time
in processtime
window
dailynumber
of resources
(registration )average
service time
(registration )average waiting time
in process
(registration)
1 180 6 0.359 0.609 1 2 0.425 0.237
2 147 6 0.415 0.540 2 1 0.120 0.483
3 160 6 0.401 0.596 3 1 0.806 0.506
...........................10 m. pourbafrani and w.m.p. van der aalst
wherer;c; andaare the sets of all the resources, cases and activities in the
log,r=fr(e)je2lg,c=fc(e)je2lg, anda=fa(e)je2lg. for generating
table 4 (b), a=fregistrationgandrandcare the same as (a).
based on the design choices, the whole process or specic parts of the process
are selected to be modeled and the time window projection function generates
all the steps of the time for the given time window. the rest of the algorithm is
calculating the values of the variables and forming the sd-log.
then investigating the relationships between process variables with each
other will result in a system dynamics model [10]. the simulation model can
be populated with the values of the process variables. hence, we have a model
on which dierent scenarios for a process can be played. for each question, the
components of the question, i.e., process variables, can be the target of the ques-
tion like the number of nished cases per day or the ones inuencing the target of
the question such as the number of resources available per day in this example.
5 evaluation
our goal is to design higher-level simulation models of processes using the pro-
posed approach. with the models and the extracted sd-logs which include
process variables over time, we assess the validity of the designed models based
on the simulated values. to do so, we start with presenting the possible valid
models, i.e., system dynamics models for the processes. we use the event logs
with common attributes to perform what-if analysis. a real event log, bpi chal-
lenge 2012, is considered to evaluate the approach, i.e., designing the models and
extracting the process variables of the process, sd-log. the possible scenarios
considered in the designed model for evaluation are presented in section 5.1. we
use one of the scenarios as an example to show the evaluation of the approach.
extracting the corresponding sd-log from the event log based on the dened
process variables to populate and run the models is the next step. in the last
step, the simulation results are compared to the real values inside the sd-logs,
e.g., the simulated number of cases per day in the process and the values in the
sd-log which are derived from the event log. finally, we discuss the evaluation
results, limitations, and possible improvements.
5.1 designing simulation models
to design the simulation models, capturing the relationship between variables
directly inuences the validity of the models. either the relations are known
beforehand which can be proven by the data or it is an assumption that can be
supported or rejected by values of variables over time. for instance, it is known
that the number of cases in the process is directly aected by the arrival rate
of the cases per hour and the process nish rate. based on the process and the
domain knowledge, the relationship between the number of resources and the
arrival rate is expected to be seen, and the variables in the sd-log can support
or reject this assumption.extracting process features from event logs 11
fig. 4: the sample stock-ow diagram model for the business processes including multiple scenar-
ios. the process variables directly extracted from the event logs are highlighted (blue). the model
includes known and expected relationships inside a process at an aggregated level and can be cus-
tomized for dierent levels, e.g., one organization.
we design the basic model shown in fig. 4 (highlighted elements), for the
general process which is possible for validation since the variables can be ex-
tracted from the event logs' attributes. we extend the model with the possible
external variables for possible business scenarios to answer more questions. this
model can be used for dierent levels in the process, from an activity level to
the general process based on the design choices. common scenarios are inserted
into the base model as follows:
{process eciency is the number of nished cases in the active time of the
process per unit of time. process eciency gets aected by the number of
cases in the process and the nish rate of the process.
{the eect of the arrival rate on adjusting the number of resources dynami-
cally. an increase in the number of cases arriving in the process leads to an
increase in the number of resources assigned to the process.
{adjusting resources to achieve the desired number of nished cases per unit
of time. in case that the nish rate is below the desired number per specied
window of time, the resources can be increased or in the opposite situation,
the unnecessary resources can be released.
{the eect of the desired capacity of the process on the number of rejected
cases. the capacity of the process for handling the cases can be adjusted
with the amount of possible rejected cases by the process.
{the eect of cases in the process per unit of time on the average service time
of cases. the average service time can be decreased since the resources work
faster under a specic amount of workload.
figure 4 shows the designed model which can be applied in the process at
dierent levels, e.g., one activity or one organization. it covers all the described
scenarios and the performance variables presented in the can be validated.
organizational/ process blocks the introduced models and scenarios can
be applied to the organizations, activities, and resources in the processes. more-
over, the extended models can be designed to capture the interaction between12 m. pourbafrani and w.m.p. van der aalst
fig. 5: the designed model for two organizations in the process which hand-over the tasks. assessing
possible scenarios such as how to share the resources between two organizations a and b for smaller
queues is possible.
fig. 6: the real and simulated values of the number of cases in the process only including the set of
activities that performed by the resources in bpi challenge 2012.
dierent parts of the process, e.g., two organizations which hand-over the work
or the ow of cases, e.g., items in a production line or between dierent activi-
ties in the process. the most common scenario is that organizations sharing the
ow of cases, therefore, organizations can exchange the resources and it can be
modeled as shown in fig. 5.
5.2 evaluation results
in this section, we assess the validity of the designed general models for the real
processes using the provided tool [7] which is publicly available. as indicated
in section 5.1, models with variables outside the captured information in event
logs are not possible to be validated completely. therefore, we use the basic
default models, highlighted part in fig. 4 for this section to show the validity
of the simulation models and their results. in the bpi challenge 2012 event log,
three dierent types of activities exist, i.e., performed by users, performed by
the system, and performed by the resources. performance analysis of the process
reveals that the most time-consuming part of the process is the ow of tasks
including the third type of activities, i.e., employees' tasks. the system-related
tasks such as the submission of a request are instance tasks, i.e., the durationextracting process features from event logs 13
fig. 7: the number of required unique resources using the dynamic assigning resources based on the
desired number of nished cases per day. as shown, exploiting the extended model fig. 4, on average
9% more resources per day is required to cover 90 nished cases instead of 80 cases.
is zero, and not related to the eciency and speed of the employees inside the
organization. therefore, we use the process which only includes the activities
and tasks performed by the employees, i.e., their speed and eciency aect the
process. using the design choice function, we created the projected event log
only including the corresponding events to the third category of activities, i.e.,
design choice =( r;c;a ), wherer= the set of all resources in the log, c= the
set of all cases in the log, and a= list of activities (employees' task).
based on the time series analysis approach presented in [9] for time window
selection, we chose a one day time window and focus on the general model for the
simulation of the process in bpi challenge 2012. we use the extracted variables
to dene the underlying equations inside the simulation models as proposed
in [10]. the populated model with the equations and the values from sd-log is
simulated for 150 steps (days).
the results for the variable number of cases in the process in each time
window are shown in fig. 6. calculating the average pair-wise error of the steps
shows 24%. in order to form the stock-ow model, we used the functions that
generate the random values for the variables such as the arrival rate using their
discovered distribution. the validated model and the values of variables from
the sd-log can be used to exploit further scenarios for the extended model. for
instance, in order to see the eect of an increase in the number of desired nished
cases from 80 per day to 90 cases, using the model in fig. 4, the simulation results
show that on average 9% increase in the number of unique resources per day is
required. figure 7 represents the results for the two scenarios. the dynamic
adjusting of the resources is done by captured relations among the variables,
i.e.,assigned resources ,number of missing cases , and average service time .
discussion using an event log, sd-logs can be generated which are used to
design and populate the corresponding system dynamics models. inserting the
eect of external factors increases the possibility of what-if analysis. however, by
adding external factors from outside the event logs into the simulation models,
the pair-wise evaluation is not possible, e.g., consider models including variables
such as resources expertise, or their eciency. therefore, we start with generating14 m. pourbafrani and w.m.p. van der aalst
models including the variables extracted from event logs and evaluate those, after
that, we introduce the external factors to the models for further simulations
and what-if analyses. moreover, capturing the dynamic behavior of processes
over windows of time is not always a straightforward task. for instance, in the
event log of an emergency room, it is dicult to capture similar patterns in
a daily manner for the process variables such as the arrival rate. therefore,
the evaluation of the results of the system dynamics simulation is not accurate
enough, and it depends on the time window.
generating sd-logs and simulation models using bigger windows of time,
e.g., one week instead of a daily manner, can increase the accuracy of the models
w.r.t. the pair-wise comparisons of results. given the above-mentioned concerns,
applying the approach on the case studies with known inuential external factors,
e.g., the amount of money spent on the advertisement and the duration of the
advertisement in a process, veries the approach in practice. in principle, the
quality of the captured data from event logs and the process domain knowledge
aect the quality of the models.
6 conclusion
in this paper, we presented an approach to capture the processes in a quanti-
ed manner over time. describing the processes using process variables makes
designing valid simulation models possible. we started from event logs and by
exploiting process mining techniques the possible design choices are identied.
all the possible process variables which represent the process over time w.r.t.
dierent aspects are extracted. the provided functions imply how the design
choices can be taken into action using the provided insights by process mining.
these design choices are applied to the event logs. moreover, performance func-
tions are introduced regarding the existed aspects and levels in the event logs.
the derived coarse-grained process logs, called sd-logs, are created based on
the performance functions for the generated variables over time and are used to
form simulation models for \what-if" analyses. furthermore, the general models
are presented as guidelines for designing possible scenarios which can be cus-
tomized based on the process variables and scenarios for dierent processes. we
assessed the validity of the designed model using real event logs. the next step
is to focus on the underlying equations between variables. these equations are
used as a baseline of more accurate stock-ow diagrams in system dynamics
modeling for simulation purposes.
acknowledgments
funded by the deutsche forschungsgemeinschaft (dfg, german research
foundation) under germany's excellence strategy{ exc 2023 internet of
production- project id: 390621612. we also thank the alexander von humboldt
(avh) stiftung for supporting our research.extracting process features from event logs 15
references
1. van der aalst, w.m.p.: process mining - data science in action, second edition.
springer (2016)
2. van der aalst, w.m.p.: process mining and simulation: a match made in heaven!
in: proceedings of the 50th computer simulation conference, summersim 2018.
pp. 4:1{4:12 (2018)
3. camargo, m., dumas, m., gonz alez, o.: automated discovery of business process
simulation models from event logs. decis. support syst. 134, 113284 (2020)
4. duggan, j.: a comparison of petri net and system dynamics approaches for mod-
elling dynamic feedback systems. in: 24th international conference of the systems
dynamics society (2006)
5. khodyrev, i., popova, s.: discrete modeling and simulation of business processes
using event logs. in: proceedings of the international conference on computational
science,. pp. 322{331 (2014)
6. munoz-gama, j.: conformance checking and diagnosis in process mining - com-
paring observed and modeled processes, lecture notes in business information
processing, vol. 270. springer (2016)
7. pourbafrani, m., van der aalst, w.m.p.: pmsd: data-driven simulation using
system dynamics and process mining. in: proceedings of demonstration at the
18th international conference on business process management. pp. 77{81 (2020),
http://ceur-ws.org/vol-2673/paperdr03.pdf
8. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: scenario-based predic-
tion of business processes using system dynamics. in: on the move to meaningful
internet systems: coopis 2019 conferences,. pp. 422{439 (2019)
9. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: semi-automated time-
granularity detection for data-driven simulation using process mining and system
dynamics. in: conceptual modeling - 39th international conference, er 2020,
proceedings. pp. 77{91 (2020). https://doi.org/10.1007/978-3-030-62522-1 6
10. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting automatic
system dynamics model generation for simulation in the context of process mining.
in: business information systems - 23rd international conference. pp. 249{263
(2020). https://doi.org/10.1007/978-3-030-53337-3 19
11. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: supporting deci-
sions in production line processes by combining process mining and system dy-
namics. in: intelligent human systems integration 2020. pp. 461{467 (2020).
https://doi.org/10.1007/978-3-030-39512-4 72
12. rosenberg, z., riasanow, t., krcmar, h.: a system dynamics model for business
process change projects. in: international conference of the system dynamics so-
ciety. pp. 1{27 (2015)
13. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation
models. inf. syst. 34(3), 305{327 (2009)
14. song, m., van der aalst, w.m.p.: towards comprehensive support for organiza-
tional mining. decis. support syst. 46(1), 300{317 (2008)
15. sterman, j.d.: business dynamics: systems thinking and modeling for a complex
world. mcgraw-hill (2000)
16. sterman, j.d.: all models are wrong: reections on becoming a systems scientist.
system dynamics review: the journal of the system dynamics society 18(4),
501{531 (2002)