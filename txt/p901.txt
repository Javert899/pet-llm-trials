process mining using bpmn: relating event logs and
process models
kalenkova, a.a.; van der aalst, w.m.p.; lomazova, i.a.; rubin, v.a.
published in:
software and systems modeling
doi:
10.1007/s10270-015-0502-0
published: 01/10/2017
document version
accepted manuscript including changes made at the peer-review stage
please check the document version of this publication:
• a submitted manuscript is the author's version of the article upon submission and before peer-review. there can be important differences
between the submitted version and the official published version of record. people interested in the research are advised to contact the
author for the final version of the publication, or visit the doi to the publisher's website.
• the final author version and the galley proof are versions of the publication after peer review.
• the final published version features the final layout of the paper including the volume, issue and page numbers.
link to publication
citation for published version (apa):
kalenkova, a. a., van der aalst, w. m. p., lomazova, i. a., & rubin, v. a. (2017). process mining using bpmn:
relating event logs and process models. software and systems modeling, 16(4), 1019-1048. doi:
10.1007/s10270-015-0502-0
general rights
copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners
and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights.
            • users may download and print one copy of any publication from the public portal for the purpose of private study or research.
            • you may not further distribute the material or use it for any profit-making activity or commercial gain
            • you may freely distribute the url identifying the publication in the public portal ?
take down policy
if you believe that this document breaches copyright please contact us providing details, and we will remove access to the work immediately
and investigate your claim.
download date: 14. jan. 2018softw syst model
doi 10.1007/s10270-015-0502-0
regular paper
process mining using bpmn: relating event logs and process
models
anna a. kalenkova1·wil m. p. van der aalst1,2·irina a. lomazova1·
vladimir a. rubin1
received: 11 march 2015 / revised: 17 july 2015 / accepted: 22 september 2015
© springer-v erlag berlin heidelberg 2015
abstract process-aware information systems (pais) are
systems relying on processes, which involve human and soft-
ware resources to achieve concrete goals. there is a need to
develop approaches for modeling, analysis, improvement and
monitoring processes within pais. these approaches include
process mining techniques used to discover process models
from event logs, ﬁnd log and model deviations, and analyze
performance characteristics of processes. the representa-
tional bias (a way to model processes) plays an important
role in process mining. the bpmn 2.0 (business process
model and notation) standard is widely used and allows to
build conventional and understandable process models. in
addition to the ﬂat control ﬂow perspective, subprocesses,
data ﬂows, resources can be integrated within one bpmn
diagram. this makes bpmn very attractive for both process
miners and business users, since the control ﬂow perspec-
communicated by prof. ulrich frank.
this work is supported by the scientiﬁc fund of the national
research university higher school of economics and is supported by
russian fund for basic research (project 15-37-21103).
b anna a. kalenkova
akalenkova@hse.ru
wil m. p . van der aalst
w.m.p.v.d.aalst@tue.nl
irina a. lomazova
ilomazova@hse.ru
vladimir a. rubin
vrubin@hse.ru
1national research university higher school of economics,
moscow, russia
2department of mathematics and computer science,
eindhoven university of technology, eindhoven, the
netherlandstive can be integrated with data and resource perspectives
discovered from event logs. in this paper, we describe and
justify robust control ﬂow conversion algorithms, which pro-
vide the basis for more advanced bpmn-based discovery
and conformance checking algorithms. thus, on the basis of
these conversion algorithms low-level models (such as petri
nets, causal nets and process trees) discovered from event
logs using existing approaches can be represented in terms of
bpmn. moreover, we establish behavioral relations between
petri nets and bpmn models and use them to adopt existing
conformance checking and performance analysis techniques
in order to visualize conformance and performance infor-
mation within a bpmn diagram. we believe that the results
presented in this paper can be used for a wide variety of
bpmn mining and conformance checking algorithms. we
also provide metrics for the processes discovered before and
after the conversion to bpmn structures. cases for which
conversion algorithms produce more compact or more com-
plicated bpmn models in comparison with the initial models
are identiﬁed.
keywords process mining ·process discovery ·confor-
mance checking ·bpmn (business process model and
notation) ·petri nets ·bisimulation
1 introduction
process-aware information systems (pais) are the systems
designed to manage processes, operating in various domains
of human activity. there is a natural requirement to monitor
their work and analyze executed processes. in many cases,
analysts are interested in a real system behavior, which may
be hidden from domain experts and system engineers. this
123a. a. kalenkova et al.
table 1 an event log of a booking process
case id event name timestamp price client ip
1 book ﬂight 2014-12-24 08:30:00:232 145 188.44.42.45
1 get insurance 2014-12-24 08:31:05:171 23 188.44.42.452 book ﬂight 2014-12-24 08:31:08:543 94 93.180.0.621 book hotel 2014-12-24 08:32:08:703 295 188.44.42.453 book ﬂight 2014-12-24 08:32:11:534 192 188.44.50.1031 pay 2014-12-24 08:34:17:456 463 188.44.42.451 conﬁrm 2014-12-24 08:35:17:537 463 188.44.42.45... ... ... ... ...
real behavior can be reconstructed from the event logs. for
that purpose, data science approaches can be applied. the
interest in data science and big data signiﬁes the growing
importance of evidence-based approaches. process miningtechniques provide wide range of data-driven approaches
that are process-centric at the same time. other data-driven
approaches are often no process-centric.
process mining offers techniques for automatic discovery
ofprocess models from event logs, checking compatibility
of process models and event logs (conformance checking)
and enhancing discovered processes with additional data [ 1].
process mining has been successfully applied in a variety of
application domains such as healthcare [ 2], tourism [ 3] and
education [ 4]. there is a ieee process mining community,
including more than 60 organizations [ 5]. moreover, there
is a wide range of research and commercial tools available
in this area: prom, disco (fluxicon), aris process perfor-mance manager (software ag), perceptive process mining(perceptive software), processanalyzer (qpr) and celonis.
today, bpmn 2.0 (business process model and nota-
tion) [ 6] is the de facto standard notation for modeling
business processes understandable by a wide audience of
people. business analysts and product managers, technical
designers and developers, system and enterprise architectseffectively use this notation in their everyday job almost
everywhere where bpm is applied. an absolute majority of
freeware and commercial bpm tools and business suites,
like oracle bpm suite, ibm business process manager,jbpm, activiti, appian bpm suite, bizagi bpm suite,
magicdraw enterprise architect (sparx), mega process
(mega), signavio process editor and others, either nativelysupport bpmn or provide conversion in order to stay com-
patible and up to date. bpmn applicability and best bpmn
modeling practices are presented in [ 7–9].
the representational bias used for process mining is not
only relevant for the understandability of the results, it is
also vital to guide process discovery by setting a suitableclass of target models. using the bpmn notation as a rep-
resentational bias within process mining opens excellentperspectives for applicability of process mining: discovered
process models become available and understandable by
the majority of users, the models can be imported/exported
from/to any bpmn-aware modeling tool and executed,process mining techniques can be easily integrated to the
existing suites (bpmn serves as an interface in this case).
moreover, bpmn models allow for the combination of dif-
ferent perspectives varying from control ﬂow (including
subprocesses) to the perspective of resources.
in this paper, we present methods for discovering the
control ﬂow perspective of a process in terms of bpmn .i t
should be noted that process mining offers plenty of algo-
rithms for the control ﬂow discovery and each of them has
its own characteristics. the goal is not to invent new algo-
rithms, but to beneﬁt from the existing ones and to make them
bpmn-compatible . thus the discovery of the control ﬂow
relies on conversion algorithms andexisting process mining
techniques . to that end we ﬁrstly formalize the semantics
for a subset of bpmn models and then present the con-
version algorithms from well-known control ﬂow modeling
formalisms such as petri nets (including non-free-choice
petri nets), causal nets
[10] and process trees [11]t ob p m n .
the conversion algorithms presented in the paper are also
given the justiﬁcations in order to show that behavioral prop-
erties of process models discovered from an event log are
preserved. moreover, we show relations between languages
of petri nets and corresponding bpmn models, tacking intoaccount properties of the initial petri nets.
as a short introductory example, let us consider an event
log
1reﬂecting a small portion of the history of a ticket book-
ing process, which is presented in table 1. in this process,
people use a web site to book a ﬂight, a hotel, get insurance
and pay for the ticket. different people in different cases
execute these activities in a different order. beside case iden-tiﬁers, event names and timestamps, an event log can contain
1in order to give an intuitive example, we consider a simple and expres-
sive synthetic event log. the analysis of process models discovered fromreal-life event logs is demonstrated in sect. 9.
123process mining using bpmn: relating event logs and process models
fig. 1 a petri net constructed from the log
additional event properties, such as costs and resources (par-
ticipants of the process); in this example, they are represented
by prices and clients ip addresses.
to discover a control ﬂow, an event log is represented as
a multiset of traces, each of which is a sequence of events,
corresponding to a concrete case identiﬁer:
l=/bracketleftbig
/angbracketleftbook f light ,get insurance ,book hotel ,pay,con f irm /angbracketright5,
/angbracketleftbook f light ,book hotel ,get insurance ,pay,con f irm /angbracketright4,
/angbracketleftbook hotel ,book f light ,get insurance ,pay,con f irm /angbracketright4,
/angbracketleftbook hotel ,get insurance ,book f light ,pay,con f irm /angbracketright3,
/angbracketleftget insurance ,book hotel ,book f light ,pay,con f irm /angbracketright1,
/angbracketleftget insurance ,book f light ,book hotel ,pay,con f irm /angbracketright1/bracketrightbig
.
apetri net discovered from lby the alpha mining algo-
rithm [ 12] is presented in fig. 1.
with the help of a conversion algorithm, we construct a
bpmn model from the petri net, as shown in fig. 2.t h i s
bpmn model is more compact than the initial petri net. thus,the result of process mining is available in a bpmn notation
now; this bpmn model can be easily imported and executed
by any of bpm tools mentioned above.
in order to estimate the advantages of using the bpmn
notation for mining, we additionally compare the complexity
of the models produced by the existing control ﬂow discovery
algorithms and the complexity of the corresponding bpmnmodels. we use the various metrics, such as the number
of nodes, density and diameter for this evaluation. correla-
tions between the process metrics and the quality of processmodels are discussed in [ 13–16]. we present not only theo-
retical but also practical evaluations based on real-life event
logs. moreover, applied to these event logs, the metrics ofthe discovered bpmn models are compared to the metricsof the models designed manually with a bpmn-editor. this
helps us to understand structural differences between models,
which are created by process analysts and models discoveredfrom event logs.
since not only discovery but also conformance checking
andprocess enhancement are essential steps in process min-
ing, this paper also shows how to enable them for bpmn
models. a bpmn model is converted to a petri net, and then
replay techniques are applied [ 17] to retrieve performance
and conformance information. this information is used tofig. 2 a bpmn model obtained by a conversion from the petri net
enhance bpmn models. theoretical observations presented
in this paper help us to relate states of a bpmn model with
the states of a corresponding petri net. thus, both confor-
mance and performance information obtained for a petri netcan be visualized using the initial bpmn model.
a general scheme of using bpmn for process mining is
presented in fig. 3. the user discovers a bpmn model by
applying discovery and bpmn conversions plugins. to showperformance and conformance information and to annotate
the bpmn diagram, the bpmn model is converted to a petri
net, such that replay techniques can be used.
the paper is organized as follows. section 2overviews
related work. section 3introduces basic deﬁnitions and
notions, including traces, petri nets, system nets, (weak)
fig. 3 a general scheme of using bpmn for process mining
123a. a. kalenkova et al.
simulation and (weak) bisimulation relations. in sect. 4,
we propose algorithms for conversion from well-known for-malisms such as petri nets to bpmn and prove correctness
of these conversions. in sect. 5, transformations of causal
nets and process trees to bpmn are introduced. section 6
contains a set of bpmn simpliﬁcation rules. in sect. 7,a
technique for conformance checking and performance analy-
sis on the basis of bpmn models is presented. a tool, which
implements the proposed conversion and enhancement tech-niques, is presented in sect. 8. section 9includes a case study ,
which shows the results of an application of the algorithms
presented in the paper to real-life event logs. also the struc-tural business-processes metrics are calculated and presented
in this section. section 10concludes the paper.
2 related work
this section surveys previous work on petri net and workﬂow
graph conversions and includes an overview of existing dis-
covery and conformance checking techniques dealing with
“high-level” process models (e.g., bpmn models and mod-els presented not only by the control ﬂow, but also includingdata and resource perspectives as well).
algorithms for conversion of free-choice workﬂow nets
[18] (a special subset of petri nets) to workﬂow graphs (gen-
eralization concept for process modeling notations such as
bpmn, uml activity [ 19], epc [ 20,21], etc) were proposed
in [22,23]. in our paper, we will deal with arbitrary petri nets
structures and arbitrary safe initial markings. moreover, in
contrast to the approaches proposed before [ 22,23], we prove
that the target model will simulate (i.e., will be able to mimic)the behavior of the initial net and vice versa. these simula-tion relations give the possibility to prove important (in the
context of process mining) propositions on the language rela-
tions. another key result is that having simulation relationsbetween initial and target models allows us to project various
analysis data (such conformance and performance informa-
tion) obtained for one model to another.
an approach for constructing bpmn models containing
subprocesses was presented in [ 24]. in contrast to our paper,
this technique is mainly focused on deriving subprocessesfrom event logs. we present basic robust conversion algo-rithms, which help to construct ﬂat control ﬂow skeletons of
the target bpmn models from the discovered petri nets and
other low-level models. we hope that our approach can be fur-ther used as a basis for discovering more advanced constructs.
as [ 24] our approach is generic and can work with multi-
ple discovery algorithms (such as [ 12,25,26]) in the process
mining context. the approach presented in [ 27] demon-
strates the possibility of mining bpmn models covering both
the control ﬂow perspective and the resource perspective.unfortunately, this approach is rather narrow in scope as itpresents very concrete algorithms for mining bpmn control
ﬂow and resource elements. algorithms for discovering dataand resources from event logs were proposed in [ 28–30],
respectively. to evaluate the quality of bpmn models and
multiperspective process models obtained from the real eventlogs, an analysis of process quality metrics proposed in var-ious studies, such as [ 13–16], can be applied. an approach
for ﬁnding deviations between an event log and a multiper-
spective process model was presented in [ 31].
3 preliminaries
in this section, we introduce basic notions, event logs, petri
nets, system nets and bpmn semantics.
multisets are used to present states of petri nets and bpmn
models, and also they are used to deﬁne event logs, in which
one trace can appear multiple times.
b(a)is the set of all multisets over some set a.f o rs o m e
multiset b∈b(a),b(a)denotes the number of times ele-
ment a∈aappears in b.b y b=[a12,a23]we denote
that elements a1,a2∈aappear in btwo and three times,
respectively.
the sum of two multisets band b/primeover set ais deﬁned
as:(b/unionmultib/prime)(a)=b(a)+b/prime(a)for all afrom a. we say that
b⊇b/primeiff∀a∈a:b(a)≥b/prime(a). for two multisets bandb/prime
over set a, such that b⊇b/prime, the difference function is deﬁned
as:(b\b/prime)(a)=b(a)−b/prime(a). the size of a multiset bover
setais denoted by |b|and deﬁned as |b|=/summationtext
a∈ab(a). sets
will be considered as a special case of multisets, where each
element can appear 0 or 1 times. thus, operations applicableto multisets can be applied to sets.
function f:x/notarrowright yis a partial function with
domain dom(f)⊆xand range deﬁned as rng(f)=
{f(x)|x∈dom(f)}⊆y.f:x→yis a total func-
tion, i.e., dom(f)=x.l e t f:x/notarrowrightybe a partial
function, f can be applied to sequences of x using the recur-
sive deﬁnition f(/angbracketleft/angbracketright)=/angbracketleft/angbracketrightand for some σ∈x
∗and
x∈xf(/angbracketleftx·σ/angbracketright)=/angbracketleftf(x)/angbracketright·f(σ),i fx∈dom(f)and
f(/angbracketleftx·σ/angbracketright)=f(σ) otherwise.
3.1 event logs and petri nets
deﬁnition 1 (petri net )a petri net is a tuple pn=
(p,t,f)with pthe set of places, tthe set of transitions,
p∩t=∅ , and f⊆(p×t)∪(t×p)the ﬂow relation.
deﬁnition 2 (marking )l e t pn=(p,t,f)be a petri net.
amarking m is a multiset of places, i.e., m∈b(p).
deﬁnition 3 (safe marking )am a r k i n g mof a petri net
pn=(p,t,f)issafe iff∀p∈p:m(p)≤1, i.e., each
place contains not more than 1 token.
123process mining using bpmn: relating event logs and process models
pictorially, places are represented by circles, transitions by
boxes and the ﬂow relation fby directed arcs. places may
carry tokens represented by ﬁlled circles. a current marking
mis designated by putting m(p)tokens into each place
p∈p.
for a node n∈p∪t,t h es e to f input nodes and the
set of output nodes are deﬁned as•n={x|(x,n)∈f}and
n•={x|(n,x)∈f}, respectively.
a transition t∈tisenabled in a marking mof net pn,
denoted as (pn,m)[t/angbracketright,i f f∀p∈•t:m(p)≥1, i.e., each
of its input places contains at least one token.
an enabled transition tmay ﬁre, i.e., one token is removed
from each of the input places•tand one token produced for
each of the output places t•. formally: m/prime=(m\•t)/unionmultit•
is the marking resulting from ﬁring enabled transition tin
marking mof petri net pn.(pn,m)[t/angbracketright(pn,m/prime)denotes
that tis enabled in mand ﬁring results in marking m/prime.
letσ=/angbracketleftt1,..., tn/angbracketright∈t∗be a sequence of transi-
tions. (pn,m)[σ/angbracketright(pn,m/prime)denotes that there is a set of
markings m0,m1,…, mn, such that m0=m,mn=m/prime,
and(pn,mi)/bracketleftbig
ti+1/angbracketright(pn,mi+1)for 0 ≤i<n.w es a y
that m/primeisreachable from mif there exists σ, such that
(pn,m)[σ/angbracketright(pn,m/prime).
r(pn,m)denotes the set of all markings reachable in
pnfrom the marking m.
deﬁnition 4 (labeled petri net ) a labeled petri net pn=
(p,t,f,l)is a petri net (p,t,f)with labeling function
l∈t/notarrowright uawhere uais some universe of activity labels.
letσv=/angbracketlefta1,..., an/angbracketright∈ua∗be a sequence of activity labels.
(pn,m)[σv⊿(pn,m/prime)iff there is a sequence σ∈t∗such
that(pn,m)[σ/angbracketright(pn,m/prime)andl(σ)=σv.
ift/∈dom(l), transition tis called invisible. an occur-
rence of visible transition t∈dom(l)corresponds to
observable activity label l(t).
in the context of process mining, we normally consider
so-called complete ﬁring sequences, and thus we deal with
processes, which have well-deﬁned initial and end states.
therefore, let us give a notion of a system net.
deﬁnition 5 (system net ) a system net is a triplet sn=
(pn,minit,mﬁnal)where pn=(p,t,f,l)is a labeled petri
net, minit∈b(p)is the initial marking and mﬁnal∈b(p)is
the ﬁnal marking.
deﬁnition 6 (language of a system net ) suppose that
sn=(pn,minit,mﬁnal)is a system net. language lsn
ofsn will be deﬁned as a set of all visible execution
sequences starting in minitand ending in mﬁnal, i.e., lsn=/braceleftbig
σv|(pn,minit)[σv⊿(pn,mﬁnal)/bracerightbig
.
event logs are considered as a starting point in the context
of process mining, so let us give their formal deﬁnition.fig. 4 a fragment of a non-free-choice petri net
deﬁnition 7 (trace, event log )l e t a⊆uabe a set of
activity labels. a trace σ∈a∗is a sequence of activity
labels. l∈b(a∗)is an event log, i.e., a multiset of traces.
note that a trace can appear multiple times in an event log.
some conversion techniques presented in this paper deal
with free-choice nets. let us deﬁne them.
deﬁnition 8 (free-choice nets ) a system net sn=(pn,
minit,mﬁnal)and a corresponding labeled petri net pn=
(p,t,f,l)are called free-choice iff for any two transitions
t1,t2∈twith•t1∩•t2/negationslash=∅ holds•t1=•t2.
to illustrate the concept of a free-choice petri net, let us
consider a fragment of a petri net presented in fig. 4.i ti s
not a free-choice petri net, and t1andt2share an input place,
but do not have identical sets of input places. indeed, if place
p1contains tokens enabling t1, while p2is empty, there is
“no free choice” between t1and t2, only t1is enabled and
may ﬁre. if an arc is added from p2tot1, then the net is
free-choice.
3.2 bpmn semantics
in this subsection, we will present an approach for the formal-
ization of bpmn control ﬂow semantics based on a concept
of token. this formalization will give an ability to justifythe conversion algorithms presented later in this paper. werestrict ourselves to the core set of bpmn elements, which
includes activities, start and end events, exclusive and parallel
gateways. we hope that these initial results will give a basisfor formal description of more advanced bpmn modeling
constructs.
let us give a formal deﬁnition of a bpmn model.
fig. 5 core bpmn modeling constructs
123a. a. kalenkova et al.
fig. 6 initial marking
deﬁnition 9 (bpmn model )a bpmn model is a tuple
bpmn model =(n,a,gxor,gand,estart,eend,sf,λ),
where
–nis a set of ﬂow nodes,
–a⊆nis a set of activities,
–gxor⊆n,gand⊆nare sets of exclusive and parallel
gateways,
–estart∈nis a start event,
–eend⊆nis a set of end events,
–s e t s a,gxor,gand,{estart},eendform a partition of n,
–sf⊆n×nis a set of sequence ﬂows,
–λ:n/notarrowright uais a labeling function, where uais some
universe of activity labels,
– start event estart does not have incoming sequence ﬂows,
and has not more than one outgoing sequence ﬂow,
– end events from eenddo not have outgoing sequence
ﬂows.
figure 5shows the core bpmn constructs used to model
processes.
letn∈nbe an arbitrary bpmn model node, the preset
•nand the postset n•are deﬁned as sets of incoming and
outgoing sequence ﬂows for the node n, respectively.
to restrict the set of all possible bpmn models, we will
consider and discover well-formed bpmn models, which are
revealed as weakly connected graphs with a source and sinknodes.
deﬁnition 10 (well-formed bpmn model ) a bpmn model
is called well-formed iff every node of this model is on a path
from the start event to some end event.
deﬁnition 11 (bpmn model marking )l e t bpmn
model be
a bpmn model with a set of sequence ﬂows sf.amarking
mis a multiset over the set sequence ﬂows, i.e., m∈b(sf).
aninitial marking m initis a marking, such that for all sffrom
sf m init(sf)=1, if sf∈e•
start, and minit(sf)=0, otherwise.
an illustration for the initial marking is presented in fig. 6.
each node independently of its type may be enabled , and
an enabled node may ﬁre. let us consider an arbitrary bpmn
fig. 7 firing activityfig. 8 firing exclusive gateway
model bpmn model =(n,a,gxor,gand,estart,eend,
sf,λ) and deﬁne its ﬁring rules:
1. an activity a∈aisenabled in a marking miff∃sf∈
sf:/parenleftbig•a(sf)=1)∧(m⊇/bracketleftbig
sf1/bracketrightbig/parenrightbig
. suppose activity a
is enabled and this activity may ﬁre, producing a newmarking m
/prime, such that m/prime=m\/bracketleftbig
sf1/bracketrightbig
/unionmultia•. in other
words, activity ais enabled in marking miff it has an
incoming sequence ﬂow, which contains at least one
token. when activity ﬁres, it consumes one token froman incoming sequence ﬂow and produces a token for
each outgoing sequence ﬂow (fig. 7).
2. exclusive gateways merge alternative paths: the incom-
ing sequence ﬂow token is routed to one of the outgoing
sequence ﬂows (fig. 8).
similar to activities, exclusive gateway g
xor∈gxor is
enabled in marking miff there is an incoming sequence
ﬂow, which contains at least one token in marking m,
i.e.,∃sf∈sf:/parenleftbig•gxor(sf)=1)∧(m⊇/bracketleftbig
sf1/bracketrightbig/parenrightbig
.i n
contrast to activities, it produces a token to one of theoutgoing sequence ﬂows. suppose an exclusive gateway
g
xor consumes a token from an incoming sequence ﬂow
sfand produces a token to an outgoing sequence ﬂow
sf/prime, and then a new model marking m/primewill be deﬁned
as follows: m/prime=m\/bracketleftbig
sf1/bracketrightbig
/unionmulti/bracketleftbig
sf/prime1/bracketrightbig
.
3. a parallel gateway gand∈gand is enabled in mark-
ingmiff∀sf∈•gand:m(sf)≥1, i.e., each incoming
sequence ﬂow contains at least one token. an enabledparallel gateway g
and may ﬁre and produce a new mark-
ing: m/prime, such that m/prime=m\•gand/unionmultig•
and, i.e., a
parallel gateway consumes a token from each incomingsequence ﬂow and produces a token to each outgoing
sequence ﬂow (fig. 9).
4. the unique start event is never enabled, since it does not
have any incoming sequence ﬂow.
5. an end event e
end∈eendis enabled in marking miff
∃sf∈sf:(sf∈•eend)∧(m(sf)≥1). when end event
ﬁres, it consumes a token from an incoming sequenceﬂow sf, and yields in a new marking m
/prime=m\/bracketleftbig
sf1/bracketrightbig
(fig. 10).
fig. 9 firing parallel gateway
123process mining using bpmn: relating event logs and process models
fig. 10 firing end event
when node n∈nﬁres, we denote this ﬁring as
(bpmn model,m)[n/angbracketright(bpmn model,m/prime).
we write (bpmn model,m)[σ/angbracketright(bpmn model,m/prime)for
some sequence of nodes σ=/angbracketleftn1,..., nk/angbracketright∈n∗iff there
are markings m0,..., mk, such that m0=m,mk=
m/prime, and for 0 ≤i<kthe following statement holds
(bpmn model,mi)/bracketleftbig
ni+1/angbracketright(bpmn model,mi+1).
likewise in petri nets marking m/primeisreachable from
marking miff there is a sequence σ∈n∗, such that
(bpmn model,m)[σ/angbracketright(bpmn model,m/prime).
for some sequence of activity labels σv∈u∗
a, we write
(bpmn model,m)[σv⊿(bpmn model,m/prime), if there is σ, such
that(bpmn model,m)[σ/angbracketright(bpmn model,m/prime)andλ(σ)=σv.
by r(bpmn model,m), we will denote the set of all mark-
ings reachable in bpmn model from the marking m.
to deﬁne the notion of language generated by a bpmn
model, let us ﬁrst give a deﬁnition of a ﬁnal marking.
deﬁnition 12 (final bpmn model marking )l e t
bpmn model be a bpmn model with an initial marking
minit and a set of nodes n.mﬁnal is a ﬁnal marking
iffmﬁnal∈ r(bpmn model,minit)and∀n∈n∄m/prime:
(bpmn model,m)[n/angbracketright(bpmn model,m/prime).
as it follows from this deﬁnition, the ﬁnal marking of a
bpmn model is the marking, in which no node can ﬁre.
deﬁnition 13 (language of a bpmn model )l e t bpmn model
be a bpmn model with an initial marking minitand a set of
ﬁnal markings mﬁnal.t h e language ofbpmn model is a set
lbpmn model={σv|(bpmn model,minit)[σv⊿(bpmn model,
m)∧m∈mﬁnal/bracerightbig
.
thus, we deﬁne the language of a bpmn model as a set of
all visible sequences starting in an initial marking and ending
in some ﬁnal marking.
according to the bpmn 2.0 speciﬁcation [ 6], bpmn
model gets the status completed iff there is no token remain-
ing. following the speciﬁcation, a language of a bpmn
model can be considered as a union of two disjoint sets:
lbpmn model=vbpmn model∪ibpmn model.
vbpmn model={σv|((bpmn model,minit)[σv⊿bpmn model,
m))∧(∀sf∈sf:m(sf)=0)}is a set of valid sequences ,
corresponding to the model executions, which lead to mark-ings with no tokens remaining. note that according to bpmn
semantics if no tokens remaining, no node is enabled.
i
bpmn model=lbpmn model\vbpmn model stands for a set of
invalid sequences , which are the traces of the bpmn modelexecutions, stopped in markings with tokens on sequence
ﬂows. these sequences of activity labels correspond to thebpmn model deadlocks.
3.3 transition systems, reachability graphs and
simulation relations
in this subsection, some basic deﬁnitions, which are used for
the justiﬁcation of the conversion algorithms, will be given.
deﬁnition 14 (transition system )l e t sand ebe two dis-
joint non-empty sets of states and events ,l e tτ∈ebe a
special silent event , and let b⊆s×e×sbe a transition
relation .atransition system is a tuple ts=(s,e,b,s
in),
where sin∈sis an initial state. elements of bare called
transitions .
we write se→s/prime, when (s,e,s/prime)∈b. assume that ∀s∈
s:sτ→s, i.e., there is a transition from every state to itself,
labeled by τ.
a state sisreachable from a state s/primeiff there is a (possibly
empty) sequence of transitions leading from stos/prime(denoted
bys∗→s/prime). the reﬂexive transitive closure ofτ→will be
denoted as ⇒.b y se⇒s/prime, we denote s⇒s/prime/primee→s/prime/prime/prime⇒s/prime,
i.e.,s/primecan be reached from sviaepreceded and followed by
zero or more τtransitions.
a transition system must satisfy the following basic
axiom: every state is reachable from the initial state: ∀s∈
s:sin∗→s.
deﬁnition 15 (simulation ) for transition systems: ts=
(s,e,b,sin)andts/prime=(s/prime,e,b/prime,s/prime
in)relation r⊆s×s/prime
is called a simulation iff:
–(sin,s/prime
in)∈r,
–∀(u,v)∈r∀e∈e:i f∃u/prime:ue→u/primethen∃v/prime:ve→v/prime
and(u/prime,v/prime)∈r.
deﬁnition 16 (weak simulation ) let us consider two transi-
tion systems: ts=(s,e,b,sin)andts/prime=(s/prime,e,b/prime,s/prime
in).
relation r⊆s×s/primeis called a weak simulation iff:
–(sin,s/prime
in)∈r,
–∀(u,v)∈r∀e∈e:i f∃u/prime:ue→u/primethen∃v/prime:ve⇒v/prime
and(u/prime,v/prime)∈r.
deﬁnition 17 (bisimulation )i f ris a (weak) simulation
relation and r−1is a(weak) simulation relation as well, then
relation ris called a (weak) bisimulation .
deﬁnition 18 (reachability graph for a system net )a
reachability graph for a system net sn=(pn,minit,mﬁnal),
where pn=(p,t,f,l), and l∈t/notarrowright ua, is a transition
system ts=(s,e,b,sin), such that:
123a. a. kalenkova et al.
–s=r(sn,minit), i.e., the set of states is deﬁned as a set
of markings reachable from minit,
–e=rng(l)∪{τ}, i.e., the set of events is deﬁned as a
union of the range of land a silent event τ,
–bcontains a transition (m,e,m/prime)iff at least one the
following conditions holds:
–∃t∈t:(sn,m)[t/angbracketright(sn,m/prime), such that l(t)=e,i f
t∈dom(l),o re=τ, otherwise,
–m=m/primeande=τ, this holds for silent transitions
from states to itself.
–sin=minit, i.e., the initial state in tsis the initial marking
ofsn.
deﬁnition 19 (reachability graph for a bpmn model )a
reachability graph for a bpmn model bpmn model=(n,
sf,a,gxor,gand,estart,eend,λ) with an initial marking
minitis deﬁned as a transition system ts=(s,e,b,sin),
such that:
–s=r(bpmn model,minit),
–e=rng(λ)∪{τ}, where τis a special silent event,
–(m,e,m/prime)∈biff at least one of the following condi-
tions holds:
–there exists n∈n, such that (bpmn model,m)[n/angbracketright
(bpmn model,m/prime), where λ(n)=e,i fn∈dom(λ),
ore=τ, otherwise,
–m=m/primeande=τ.
–sin=minit.
4 converting process models into bpmn
in this section, we will propose algorithms for the con-
version from well-known formalisms such as petri nets,
causal nets and process trees to bpmn. these formalismsare widely used within process mining as results of appli-cation of process discovery algorithms [ 12,25,26,32–35].
having conversion algorithms to bpmn format will give
an opportunity to discover control ﬂow models, which couldbe integrated with other process perspectives. the correct-
ness of the proposed system nets conversion algorithm will
be proven.
first, let us show that every system net with a safe ini-
tial marking can be transformed to an equivalent system net,
which contains a unique source place.
4.1 adding a source place to an arbitrary system net
with a safe initial marking
in most cases, models discovered from event logs are arbi-
trary system nets with safe initial markings. we start withfig. 11 creating a source place
transforming of a system net with a safe initial marking into
a system net, which contains a unique source place and doesnot contain hanging places (places without outgoing arcs). inthe next subsections, we will show algorithms for conversion
of such nets to bpmn.
algorithm 1 [adding a source place to a system net].
input: a system net sn=(pn,m
init,mﬁnal), where pn=
(p,t,f,l), such that ∀p∈p:minit(p)≤1.
step 0: adding a source place. a d dan o v e lp l a c e i∈p,
a novel initial transition t∗(note that t∗does not
have a label, since t∗/∈dom(l)) and connect them
with an arc (i,t∗). for each place p∈p, such that
minit(p)=1, add an arc (t∗,p).t h i ss t e pi sp r e -
sented in fig. 11.
step 1: handling unconnected transitions . for each transi-
tiont∈t, such that•t=∅ , add a place p, connected
with tby an incoming and outgoing arc. add an arc
from the initial transition t∗to the place p(fig. 12).
step 2: removing dead places. remove each place p∈p
and transitions from p•along with incident arcs, if
there is no path from itop. repeat step 2 until there
are no more dead places.
step 3: removing hanging places. remove all places p∈p,
such that |p•|= 0, along with incident arcs.
step 4: constructing novel markings. suppose that p/primeis the
resulting set of places, and p∗⊆p/primeis the set of
places added at step 1. then the initial and ﬁnal mark-ings m
/prime
initand m/prime
ﬁnalare deﬁned as follows: for all
p∈p/prime, such that p/negationslash=i,m/prime
init(p)=0,m/prime
init(i)=1,
for all p∈p∗holds that m/prime
fin a l(p)=1, and
for all p∈(p∩p/prime)the number of tokens is pre-
served, i.e., m/prime
ﬁnal(p)=mﬁnal(p). the source place
fig. 12 handling unconnected transitions
123process mining using bpmn: relating event logs and process models
does not contain any tokens in the ﬁnal marking, i.e.,
m/prime
fin a l(i)=0.
output: a system net sn/prime=(pn/prime,m/prime
init,m/prime
ﬁnal), where
pn/prime=(p/prime,t/prime,f/prime,l)is deﬁned on the basis of pn=
(p,t,f,l)at steps 0–3. markings m/prime
initand m/prime
fin a lare
deﬁned at step 4.
proposition 1 let sn =(pn,minit,mﬁnal)b eas y s -
tem net and sn/prime=(pn/prime,m/prime
init,mﬁnal), where pn/prime=
(p/prime,t/prime,f/prime,l), be a result of applying algorithm 1 to sn.
let i∈p/primebe a source place constructed by algorithm 1.
then for each node n ∈(p/prime∪t/prime)exists a path from i to n.
proof suppose that n∈p/prime. since all the places, to which
there were no paths from i, were deleted at the step 2, there
exists a path from iton.i fn∈t/prime, then either ndid not
have incoming arcs and was connected with iat the step 1,
or either it is connected by an incoming arc with a place, and
for this place there is a path from i, and hence there is a path
from iton. /intersectionsq/unionsq
note that places, which were added at step 1, contain
tokens in any reachable marking.
algorithm 1 transforms a system net with a safe initial
marking to an equivalent system net with a source place and
no hanging places. more formally, there is a weak bisimu-
lation relation between reachability graphs of the initial and
the target system nets. the proof is straightforward accord-
ing to deﬁnition 17. further we will consider only system
nets with unique source places and without hanging places
and call them just system nets.
4.2 free-choice system nets to bpmn conversion
in this subsection, an algorithm for conversion from a free-
choice system net to a bpmn model will be presented.
the conversion algorithm will be illustrated by a run-
ning example: a system net, which deﬁnes a booking process
fig. 13 a system net of a booking processfig. 14 an initial bpmn model
(fig. 13), will be converted to an equivalent bpmn model.
the source place is p1, the ﬁnal marking mﬁnal is the mark-
ing, such that mﬁnal(p)=0 for all p.
note that in contrast to the booking model presented ear-
lier (fig. 1), this model contains a choice construction (the
user books a ﬂight or a train ticket), also note that there isa transition used as a splitting node, and this transition doesnot have a label.
algorithm 2 [constructing a bpmn model for a system
net]. input: a free-choice system net sn, where sn=(pn,
m
init,mﬁnal),pn=(p,t,f,l), and iis a source place.
step 0: initializing bpmn model.
determine a bpmn model bpmn model=(n,a,
gxor,gand,estart,eend,sf,λ), which contains a
start event only, i.e., n={estart},sf=∅ ,a=∅ ,
gxor=∅ ,gand=∅ , and eend=∅ (fig. 14).
step 1: converting transitions .
create a bpmn model activity a∈afor each transi-
tiont∈tand determine the corresponding bijective
mapping function m:t→a. the labeling func-
tionλis deﬁned as follows λ(m(t))=l(t), for all
tfrom dom(l). if there exists a transition t∈t,
such that |t•|>1, i.e., thas more than one outgo-
ing arc, add a parallel gateway gand and a sequence
ﬂow(m(t),gand).bpmn model with activities and a
parallel gateway added is shown in fig. 15.
fig. 15 adding activities and parallel gateways to the bpmn model
of a booking process
fig. 16 identifying place nodes
123a. a. kalenkova et al.
step 2: converting places .
in this step, each place p∈pis converted to bpmn
routing constructs, identifying a corresponding
place node and a corresponding place ﬂow within
bpmn model . during the bpmn model construction,
we will deﬁne functions, which map places from
pto corresponding place nodes and place ﬂows
forbpmn model , and denote them as n:p→
nand f:p→ sf, where nand sf are
the sets of bpmn model nodes and sequence ﬂows,
respectively. the function nwill be used to deﬁne
nodes, which correspond to places, and used forestablishing connections within the target model.
the function fwill be used to show the rela-
tions between places and sequence ﬂows, and willhelp to relate a system net and a bpmn modelmarkings.
step 2.1: connecting to inputs. let us transform places and
identify place nodes , taking into account presets:
–i f|
•p|= 0(pdoes not have incoming arcs), then
place pis a source place of sn, and the place
node will be deﬁned as estart, i.e, n(p)=estart.
–i f|•p|= 1, i.e., there exists one and only one
transition t∈tconnected with pby an outgo-
ing arc. if there exists gand∈gand, such that
(m(t),gand)∈sf, then the place node is set to
gand:n(p)=gand, otherwise n(p)=m(t).
–i f|•p|>1 (there is more than one transi-
tion connected with pby outgoing arc), then an
exclusive gateway gxor is added to gxor and
for each transition tfrom•pa sequence ﬂow
is added to sf. if there exists gand∈gand,
such that (m(t),gand)∈sf, this sequence
ﬂow is deﬁned as (gand,gxor), otherwise the
sequence ﬂow is (m(t),gxor). the exclusive
gateway gxor is set as the place node forp, i.e.,
n(p)=gxor.
the result of applying step 2.1 to the bookingprocess is shown in fig. 16. for each place of the
initial system net, a corresponding place node is
speciﬁed.
step 2.2: merging places with coinciding postsets: for all
maximum sets of places {p
1,..., pn}⊆pwith
fig. 17 merging places with coinciding postsetsfig. 18 the resulting bpmn model
coinciding non-empty postsets ( p•
1=...=p•
n)2,
such that n≥2, an additional parallel gateway
gand is added to gand. this gateway is con-
nected by incoming sequence ﬂows with all thecorresponding place nodes , i.e., sequence ﬂows
(n(p
1),gand), ...,(n(pn),gand)are added to
sf and are deﬁned as place ﬂows: for all si
from{s1,..., sn},f(si)=(n(pi),gand).a f t e r
that the parallel gateway gand is considered to
b ean o v e l place node for places p1,…,pn, i.e.,
n(p1)=gand, ..., n(pn)=gand.f i g . 17
shows the result of applying the places merge
procedure to the booking process presented in
fig. 16.
step 2.3: connecting to outputs. in this step for each group
of places p1,…, pnwith coinciding postsets:
post=p•
1=...=p•
n3corresponding place
nodes :n(p1) ,..., n(pn)are connected by out-
going sequence ﬂows with other bpmn model
elements.
–i f|post|= 1, i.e., there is only one transition
t∈tconnected with p1,…,pnby incom-
ing arcs, then sequence ﬂow (n,m(t)), where
n=n(p1)=...=n(pn), is added to sf.
if the group of places with coinciding postsets
contains only one node (let this node be p1), then
f(p1)=(n,m(t)).
–i f|post|>1, an exclusive gateway gxor and
a sequence ﬂow (n,gxor)are added to gxor
andsf, respectively.4then for each tfrom post
a sequence ﬂow (gxor,m(t))is added to sf.i f
n=1,f(p1)=(n,gxor).
the resulting bpmn model is shown in fig. 18.
output: bpmn model and mappings: m,n,f.
2note that due to the free-choice structure of pn, postsets either coin-
cide or do not intersect.
3note that we consider system nets without hanging places.
4all the places have the same place node n, obtained on the previous
step of the algorithm.
123process mining using bpmn: relating event logs and process models
4.3 non-free-choice system nets to bpmn
often non-free-choice petri nets, which allow more behav-
ior than free-choice petri nets, are obtained as a result of
applying process discovery algorithms. in this subsection,we will introduce an algorithm for constructing free-choicepetri nets from petri nets with non-free-choice constructions.
this algorithm works as follows: for each arc, which pro-
duces a non-free-choice construction, do the transformationpresented in fig. 19. a more formal description of the algo-
rithm is presented below.
algorithm 3 [constructing a free-choice petri net from
an arbitrary petri net]. input: a labeled petri net pn=
(p,t,f,l).
for each arc (p
∗,t),p∗∈p,t∈t, such that ∃t/prime∈
t:p∗∈(•t∩•t/prime)and∃p/prime∈p:p/prime∈•t,p/prime/∈•t/prime
do the following transformation: remove ﬂow (p∗,t), add
transition t/prime/prime, place p/prime/prime, and connecting sequence ﬂows:
(p∗,t/prime/prime),(t/prime/prime,p/prime/prime),(p/prime/prime,t)(see fig. 19). the labeling func-
tion lis not deﬁned for t/prime/prime, i.e., t/prime/prime/∈dom(l).
output: labeled petri net pn/prime=(p∪/braceleftbig
p/prime/prime/bracerightbig
,t∪/braceleftbig
t/prime/prime/bracerightbig
,f∪/braceleftbig
(p∗,t/prime/prime),(t/prime/prime,p/prime/prime),(p/prime/prime,t)/bracerightbig
,l).
the algorithm can be applied iteratively and arcs can be
considered in any order, since each transformation does not
change the set of arcs, which have to be replaced.
4.4 system nets conversions justiﬁcation
this subsection presents justiﬁcations of the system nets con-
version algorithms.
let us prove that algorithm 2 preserves structural and
some behavioral properties of a process model.
lemma 1 let sn, where sn =(pn,minit,mﬁnal), and
pn=(p,t,f,l), be a free-choice system net with a source
place i. let bpmn model be a result of applying algorithm
2 to sn. suppose that m :t→a is a mapping function
obtained during an execution of algorithm 2. suppose alsothat n:p→n is a function, which deﬁnes place nodes in
bpmn
model . then for any two places p 1,p2∈p, such that
∃t∈t:(t∈p•
1)∧(t∈•p2)(fig. 20), there are paths from
n(p1)to m(t)and from m (t)ton(p2)within bpmn model .
proof according to the algorithm 2, node n(p1)is either
directly connected with m(t)or directly connected with
fig. 19 converting non-free-choice petri nets into free-choice petri
netsfig. 20 connected places
its immediate predecessor—an exclusive gateway (see step
2.3). hence there is a path from n(p1)tom(t).n o wl e tu s
consider n(p2). this node is either m(t)activity or a gate-
way, such that there is a path from m(t)to this gateway (see
steps 2.1, 2.2). this implies that there is a path from m(t)
ton(p2)within bpmn model . /intersectionsq/unionsq
lemma 2 suppose that sn is a system net with a source
place i. then the result of applying algorithm 2 is bpmn model
=(n,sf,a,gxor,gand,estart,eend,λ), such that for
each node there is a path from e startto this node.
proof source place iis converted to the start event estart.i t
inductively follows from lemma 1that all the place nodes
and all the activities aare located on paths from estart.a l l
other bpmn model nodes are gateways gxor,gand and end
events eend, which lie on paths from place nodes to activities
or from activities to the place nodes by the construction;
consequently, they are also located on paths from estart./intersectionsq/unionsq
theorem 1 (well-formedness) every system net with a safe
initial marking can be converted to a well-formed bpmn
model.
proof algorithm 3 allows to construct free-choice system
nets from non-free-choice system nets, preserving nodes con-nectivity. proposition 1shows that an arbitrary system net
with a safe initial marking can be converted to an equivalent
system net, which has a unique source place, such that for
every node of this net there is a path from the source place tothis node. lemma 2allows us to construct a bpmn model,
where for each node there is a path from the start event to
this node. according to algorithm 2, the only possible hang-ing nodes in the target bpmn model are activities. thus,
additional end events can be added to the bpmn model and
connected by incoming sequence ﬂows with activities, mak-ing all the nodes be on paths from a start event to end events.
/intersectionsq/unionsq
note that end events consume tokens from incoming
sequence ﬂows, and thus the global execution order of bpmn
model will not be changed. since end events do not changethe global execution order, further we will prove some propo-
sitions for model conversions, which do not involve addition
of end events.
now let us discuss the behavioral relation between initial
system net and the bpmn model generated by algorithm 2.
we will show that each ﬁring of a petri net corresponds to asequence of the bpmn model ﬁrings.
123a. a. kalenkova et al.
(a)
(b)
fig. 21 initial markings
theorem 2 (weak similarity) let sn be a free-choice system
net with a source place i, where sn =(pn,minit,mﬁnal),
pn=(p,t,f,l). let bpmn model be a result of applying
algorithm 2 to sn, m :t→a is the mapping function. let
ts=(s,e,b,sin),t s/prime=(s/prime,e,b/prime,s/prime
in)be reachability
graphs of sn and bpmn model , respectively. there exist weak
simulation relations r and r/primefrom ts to ts/primeand from ts/prime
to ts, respectively, such that:
1.(u,v)∈ri f f∀p∈p:u(p)=v(f(p)),
2. if(u,v)∈r then (v,u)∈r/prime,
3.∀v∈s/prime∃v/prime∈s/prime:(v∗→v/prime)∧(∃u/prime∈s:(u/prime,v/prime)∈r).i n
other words, from each state v∈s/primeit is always possible
to reach some state v/prime∈s/prime, which is in the relation r
with some state u/prime∈s.
but it is not guaranteed that a weak bisimulation relation
exists.
proof let us prove the existence of weak simulation relations
rand r/primebetween tsandts/primeinductively on pairs of states
u∈s,v∈s/primesuch that ∀p∈p:u(p)=v(f(p)).
induction basis.
1. pairs (sin,s/prime
in)and(s/prime
in,sin)belong to rand r/prime, respec-
tively, by the deﬁnition of a weak simulation relation.
both variants for initial markings of snandbpmn model
are presented in fig. 21. tokens in fig. 21are repre-
sented by black dots. as can be seen ∀p∈p:sin(p)=
s/prime
in(f(p)). for the proof of condition 3. see the induction
step .
2. let us prove that there is no weak bisimulation relation
between tsandts/prime. suppose there is such a relation r/prime/prime
(fig. 22), then by the deﬁnition (s/prime
in,sin)∈r/prime/prime.fig. 22 construction of a weak bisimulation relation
for variant b.it holds that exists v∈s/prime, such that s/prime
inτ→v,
and m(t)is enabled in v. the only state in ts, to which
there is a transition from sinlabeled by τ,i ssinitself, thus
(sin,v)∈r/prime/prime. state sinhas at least one outgoing transition
labeled with l(t/prime), such that t/prime/negationslash=t. suppose that l(t)/negationslash=l(t/prime),
then we get a contradiction, since vdoes not have an outgoing
transition labeled by l(t/prime).
induction step.
1. now let us consider state u∈s(fig. 23)
by the induction hypothesis, there exists a state vints/prime(a
marking of bpmn model ), such that (u,v)∈r(fig. 24).
furthermore, by the induction hypothesis the following
condition holds: ∀p∈p:u(p)=v(f(p)), i.e., each
place and its corresponding place ﬂow contain the same
number of tokens. note that more than one token can
appear in a place.
now let us show that if tshas a transition from state
u,ts/primehas a corresponding sequence of transitions from
statev, i.e., ∃v/prime/prime/prime:vl(t)/equal1⇒v/prime/prime/primeand∀p∈p:u/prime(p)=
v/prime/prime/prime(f(p)). thus, (u/prime,v/prime/prime/prime)will belong to r. state vof
bpmn model is presented in fig. 25.
note that we consider the most general case, which rep-resents all the routing elements. the remaining cases canbe treated similarly. the gateway g
1is enabled in mark-
ingv(by the construction, since tis enabled in u) and can
ﬁre, producing a novel marking, in which ﬁring g2yields
m(t)being enabled. let us call the marking, in which
fig. 23 marking uof a system net
123process mining using bpmn: relating event logs and process models
fig. 24 current states in transition systems
m(t)is enabled, u/prime, then u⇒u/prime.a f t e r m(t)ﬁres, some
marking v/prime/primeis reached: v/primel(t)→v/prime/prime. starting from marking
v/prime/primeﬁrings of gateways lead to adding a novel token to
each place ﬂow , which corresponds to some place from
t•, and producing marking v/prime/prime/prime:v/prime/prime⇒v/prime/prime/prime, i.e.,vl(t)/equal1⇒v/prime/prime/prime.
note that ∀p∈p, holds that:
v/prime/prime/prime(f(p))=⎧
⎪⎨
⎪⎩v(f(p))−1,ifp∈•t,p/∈t•,
v(f(p))+1,ifp∈t•,p/∈•t,
v(f(p)), otherwise .
initial conditions u/prime=u−•t+t•and∀p∈p:
v(f(p))=u(p)allow to conclude that ∀p∈p:
u/prime(p)=v/prime/prime/prime(f(p)).
2. let us consider state v∈s/prime. by the induction hypothesis
∃u∈s/prime:((v, u)∈r/prime)∧(∀p∈p:v(f(p))=
u(p)). two variants are possible either vdoes not have
outgoing transitions and then v⇒vand all the theorem
conditions hold. or there is a set of states v/prime, such that
∀v/prime∈v/prime:v⇒v/prime, i.e., all v/prime∈v/primeare reachable from v
byτtransitions. in this case, there is a state v/prime
1, such that
v⇒v/prime
1andm(t)is enabled in v/prime
1. transition tis enabled
inuby the induction hypothesis and by the construction.
pair(v/prime/prime,u/prime)belongs to r/prime, where v/prime
1l(t)→v/prime/primeandul(t)→u/prime.
let us denote the set of states v∗, such that v/prime/prime⇒v∗,
asv∗, and(v∗,u/prime)belongs to r/primefor∀v∗∈v∗.t h e
statev/prime/prime/prime∈ts/prime, such that ∀p∈p:v/prime/prime/prime(f(p))=u/prime(p),
is reachable from any state in v∗by the construction.
thus, the induction hypothesis and the condition 3 are
proven.
thus, it was shown that there are weak simulation relations
between tsand ts/prime, and conditions 1–3. are hold. in the
induction basis , it was shown that there is no weak bisimu-
lation relation between tsandts/prime. /intersectionsq/unionsq
this theorem has an important corollary within the process
mining context: the conversion algorithm allows to preservefig. 25 marking vof a bpmn model
the language of a free-choice system net under some assump-
tion.
corollary 1 (language equivalence for free-choice system
net) suppose there is a free-choice system net sn, where
sn=(pn,minit,mﬁnal), and i is a source place. sup-
pose also that m ﬁnal is the only reachable marking, in
which no transition enabled, i.e., if m ∈r(pn,minit)
then m /negationslash=mﬁnal iff∃t∃m/prime:(pn,m)[t/angbracketright(pn,m/prime). let
bpmn model be a result of applying algorithm 2 to sn, then
lsn=lbpmn model.
proof 1. let is consider a trace σv, such that (pn,minit)
[σv⊿(pn,mﬁnal), i.e.,σv∈lsn. there is a weak sim-
ulation relation r⊆(s×s)from tstots/prime, where ts
andts/primeare reachability graphs for snandbpmn model ,
respectively. thus, σvcan be replayed in bpmn model ,
and after the replay bpmn model will be in a marking m,
such that (mﬁnal,m)∈r.i f∃n∃m/prime(bpmn model,m)
[n/angbracketright(bpmn model,m/prime), then since ∀p∈p:mﬁnal(p)=
m(f(p)),∃m/prime/prime(pn,mﬁnal)[t/angbracketright(pn,m/prime/prime), we get a con-
tradiction. thus, lsn⊆lbpmn model.
2. now let us prove that lbpmn model do not contain traces,
which do not belong to lsn. suppose there is a trace
σv∈lbpmn model, such that (bpmn model,m/prime
init)[σv
123a. a. kalenkova et al.
fig. 26 splitting non-free-choice construction
⊿(bpmn model,m), where m/prime
initis an initial mark-
ing of bpmn model . theorem 2states that there exists
bpmn model marking m/prime, such that (m⇒m/prime)∧(∃m/prime/prime:
(m/prime/prime,m/prime)∈r), where m/prime/primeis a marking of sn.b yt h e
deﬁnition of bpmn model language, no node can ﬁreat the marking m, thus m=m
/prime, and(m/prime/prime,m)∈r.
we get that m/prime/primeis also a state ( snmarking) without
outgoing transitions, otherwise mis not a ﬁnal mark-
ing of a bpmn model , since (m/prime/prime,m)∈r. thus, σv:
(sn,minit)[σv⊿(sn,m/prime/prime), andσv∈lsn. /intersectionsq/unionsq
now let us compare behavioral properties of non-free-
choice petri nets and corresponding free-choice petri nets
constructed by algorithm 3.
theorem 3 (non-free-choice petri nets conversion) let
pn=(p,t,f,l)be an arbitrary labeled petri net, and
pn/prime=(p/prime,t/prime,f/prime,l)be a result of applying algorithm 3 to
pn. let ts =(s,e,b,sin)and ts/prime=(s/prime,e,b/prime,s/prime
in)be
reachability graphs of pn and pn/prime, respectively. then there
are weak simulation relations from ts to ts/prime, and from ts/primeto
ts. but it is not guaranteed that a weak bisimulation relation
exists.
proof let us deﬁne weak simulation relations rand r/prime
between tsandts/primein such a way that for every two states
s∈sand s/prime∈s/primeif∀p∈p:s(p)=s/prime(p), then (s,s/prime)
belongs to rand(s/prime,s)belongs to r/prime. let us consider a place
p∗∈p(fig. 26), such that ∃t,t/prime∈t:p∗∈(•t∩•t/prime)and
∃p/prime∈p:p/prime∈•t/prime,p/prime/∈•t.
for this place, the output ﬂow will be modiﬁed according
to algorithm 3. let us consider u-am a r k i n go f pn:u(p∗)≥
1 and construct fragments of reachability graphs for pnand
pn/prime, containing the marking uand a corresponding marking
ofpn/prime-v:∀p∈p:v(p)=u(p)(fig. 27).
fig. 27 simulation of non-free-choice net by the corresponding free-
choice netsuppose that tis enabled in u, and u/primeis a state ( pnmark-
ing) obtained after ﬁring of transition t:ul(t)→u/prime, then tis also
enabled in v, andv/primeis a marking of pn/prime, such that vl(t)→v/prime,
then∀p∈p:v/prime(p)=u/prime(p), and(u/prime,v/prime)∈r,(v/prime,u/prime)∈r.
now suppose that t/primeis enabled in uand can ﬁre producing a
novel marking u/prime/prime/prime.f o r ts/prime, there is a corresponding state v/prime/prime/prime,
such that vτ→v/prime/primel(t/prime)→v/prime/prime/prime, and∀p∈p:v/prime/prime/prime(p)=u/prime/prime/prime(p).
pair(u/prime/prime/prime,v/prime/prime/prime)will belong to r, pairs (v/prime/prime/prime,u/prime/prime/prime),(v/prime/prime,u)will
belong to r/prime. note that the state ucan simulate v/prime/prime, since
∀p∈p,p/negationslash=p∗:u(p)=v/prime/prime(p), and thus, it includes
behavior allowed in v/prime/prime. the procedure of deﬁning rand
r/primecan be considered for each transformation of pn, and
thus weak simulation relations between tsand ts/primecan be
derived.
there is no bisimulation relation, since there is no state,
which bisimulates v/prime/prime. /intersectionsq/unionsq
corollary 2 (language of non-free-choice system net) let
sn=(pn,minit,mﬁnal)be an arbitrary system net, where
pn=(p,t,f,l). let us apply algorithm 3 to pn and obtain
a free-choice petri net pn/prime=(p/prime,t/prime,f/prime,l). let us consider
a system net sn/prime=(pn/prime,minit,mﬁnal)with the same initial
and ﬁnal markings (we can construct such a system net since
p⊆p/prime). then l sn=lsn/prime.
proof lettsandts/primebe reachability graphs of snandsn/prime,
respectively. as it follows from theorem 3ts/primesimulates ts,
and vice versa, also they have the same ﬁnal marking mﬁnal,
thus lsn=lsn/prime. /intersectionsq/unionsq
corollary 3 (language inclusion) let us consider a system
net sn =(pn,minit,mﬁnal), such that pn =(p,t,f,l),
and∀t∄m:(pn,mﬁnal)[t/angbracketright(pn,m), i.e, there is no transi-
tion enabled in m ﬁnal. then let us apply algorithm 3 and to
obtain a free-choice system net sn/prime=(pn/prime,minit,mﬁnal)
with the same initial and ﬁnal markings. suppose that
bpmn model is a result of applying algorithm 2 to sn/prime. then
lsn⊆lbpmn model.
proof letts,ts/prime,tsbpmn be reachability graphs of sn,
sn/prime, and bpmn model , respectively. lsn=lsn/primeby corol-
lary 2. according to corollary 1ifsn/primedoes not contain any
state, in which no transition can be enabled, except mﬁnal,
then lsn/prime=lbpmn model. but under hypothesis of this corol-
lary ts(and consequently ts/prime) may contain states, in which
no transition can be enabled, and which are not ﬁnal. alsonote that sn
/primemay contain additional states (see the proof
of theorem 3), which represent the reduced behavior of sn;
among them there may be states without outgoing transitions.hence, l
bpmn model may contain additional traces. /intersectionsq/unionsq
corollary 4 (language equivalence for empty ﬁnal mark-
ing) suppose a bpmn model bpmn model was constructed
from a system net sn =(pn,minit,mﬁnal), where pn =
123process mining using bpmn: relating event logs and process models
fig. 28 relations between languages for system nets and corre-
sponding bpmn models. fc is a class of free-choice system nets.
fne —a class of system nets, for which no transitions are enabled in
ﬁnal markings. a system net belongs to the class fe, iff the ﬁnal mark-
ing is the empty marking. fois a class of system nets, for which their
ﬁnal markings are the only markings with no transitions enabled
(p,t,f,l), using algorithm 2. if ∀p∈p:mﬁnal(p)=0,
then v bpmn model=lsn. in other words, the set of valid
sequences coincides with the language of the system net.
proof as it follows from theorem 2for every marking mof
a system net sn, there is a marking m/primeinbpmn model , such
that for every position p, holds that m(p)=m/prime(f(p))and
vice versa. in a system net, such that for every node of this
net there is a path from the source place to this node, and in
a bpmn model no node can ﬁre in an empty marking, andhence, the theorem is proven. /intersectionsq/unionsq
fig. 28summarizes theoretical results presented above: it
shows relations between languages of system nets and cor-responding bpmn models depending on the type of system
nets.
note that if the initial system net contains transitions with
no incoming arcs (unconnected transitions), these transitions
will be enabled in any reachable marking of this net. such
nets do not meet the sufﬁcient condition for the languageinclusion, i.e., some transitions are always enabled in theﬁnal marking.
5 from other process notations to bpmn models
in this section, process modeling formalisms other than petrinets but relevant for process mining are mapped onto bpmn.
basic ideas of conversion algorithms will be given. first we
will present additional bpmn routing constructs, which arenaturally used in these conversions.(a) (b)
fig. 29 additional gateway types ainclusive gateway, bexclusive
event-based gateway
5.1 additional bpmn routing constructs
let us consider two additional bpmn gateway types spec-
iﬁed in [ 6]. inclusive gateways (fig. 29a) implement mul-
tichoice andsynchronized merge control ﬂow patterns [ 36].
an inclusive gateway is enabled in a current marking if some
of the incoming sequence ﬂows contain tokens, and it is notpossible to reach a marking from the current marking, in
which another (currently empty) incoming sequence ﬂow
will contain tokens, without ﬁring this gateway. note thatthe semantics of inclusive gateways is non-local . an enabled
inclusive gateway may ﬁre, adding one token to one or more
outgoing sequence ﬂows. the gateway presented in fig. 29a
can produce a token for one of the outgoing sequence ﬂowsor for both of them.
next, we consider event-based exclusive gateways, which
implement the deferred choice control ﬂow pattern [ 36].
like an ordinary exclusive gateway, an event-based exclusive
gateway (fig. 29b) is enabled if at least one of the incom-
ing sequence ﬂows contains at least one token. an exclusiveevent-based gateway produces a token to one of the outgoing
sequence ﬂows depending on the event, which ﬁrst occurred.
thus, a gateway presented in fig. 29b produces a token to
a path marked with a ﬁrst happened event (a receipt of aconcrete message or a timer event).
5.2 transforming causal nets to bpmn models
causal nets are known to be suitable for the representa-
tion of discovered process models. they are often used for
fig. 30 causal net of a booking process
123a. a. kalenkova et al.
fig. 31 bpmn model constructed from the causal net example
(fig. 30)
process mining (see e.g., the heuristic miner [ 26]), but tend
to be unclear for the majority of process analysts. although
an algorithm for the conversion of causal nets to petri nets
was already presented in [ 10], conversions from causal nets
to bpmn models should take into account the free-choicenature of bpmn models.
causal nets are represented by activities and their bind-
ings: each activity has a set of input and a set of outputbindings (pre- and post-conditions). let us consider a causal
net of a booking process shown in fig. 30.
the start activity register has only empty input binding.
there are three possible output bindings for this activ-
ity:{book f light },{bookhotel }and{book f light ,book
hotel}. these bindings imply that activity register is fol-
lowed by activity book f light , or activity book hotel ,o r
activities book f light and book hotel . the end activity
pay has an empty output binding and three possible input
bindings, i.e., activity pay is preceded by book f light and
book hotel activities, or book f light activity, or book hotel
activity.
while each activity of a causal net is converted to a bpmn
model activity, bindings are represented in terms of gateways.
if some activity has multiple input (output) bindings, a special
exclusive gateway is created, if some binding contains morethan one element, a parallel gateway should be added. in casecausal net has many start or end nodes, unique start/end nodes
are added to simplify the conversion to a bpmn model.
the result of the causal net (fig. 30) conversion is pre-
sented in fig. 31.
it is important to mention that causal nets provide declar-
ative description of the process behavior, while bpmn
presented in fig. 31has a local ﬁring rules semantics . thus,
potentially “unsound” bpmn models may be obtained as a
fig. 32 bpmn model with inclusive gatewaysresult of conversion. inclusive gateways can be exploited to
obtain simpler models. fig. 32shows how the initial causal
net can be represented as a bpmn diagram using inclusive
gateways.
5.3 converting process trees to bpmn models
process trees are often obtained as a result of applying
process discovery algorithms (e.g., inductive miner [ 25]o r
genetic miner [ 37]). in this subsection, basic transforma-
tions for constructing a bpmn model from a given process
tree will be proposed. although process trees can be repre-sented as system nets, and system nets can be converted tobpmn models using algorithms introduced above, a direct
conversion algorithm gives an ability to consider additional
perspectives during the conversion. moreover, the bpmnstandard natively supports such modeling elements as inclu-
sive gateways and exclusive event-based gateways. hence,
there is no need to convert these constructions to problem-atic, unreadable process models.
process trees were proposed in [ 25] and deﬁned as direct
acyclic graphs with branch and leaf nodes. each branch nodehas outgoing edges and is considered to be an operator node,
table 2 process tree to bpmn conversion
123process mining using bpmn: relating event logs and process models
fig. 33 a petri net discovered by the inductive miner from the event log
fig. 34 a bpmn model obtained from the petri net
and leaf nodes do not have outgoing edges and stand for
atomic activities.
transformation rules are applied inductively, starting from
the root node. for each branch node, the transformation
depends on a node type and each leaf node is transformed to
an activity or bpmn model event. we consider the follow-ing basic operators: sequence, exclusive/inclusive/deferred
(event-based) choice, exclusive/deferred (event-based) loop
and parallel execution. transformation rules for each type ofa branch node are presented in table 2. note that for each
exclusive event-based gateway, the types of the followingevents are speciﬁed by an additional information attached to
the corresponding branch node of the tree.
5.4 example
in this subsection, we will show how the presented conver-
sion techniques can be applied to discover bpmn modelsfrom real-life event logs. we took an event log generated by
anincident and problem management system from v olvo
it belgium as an example. for this log, we have applied the
fig. 35 a causal net discovered from the event log
123a. a. kalenkova et al.
fig. 36 a bpmn model obtained from the causal net
inductive miner [ 25] and have obtained a petri net presented
in fig. 33.
this petri net was converted to a bpmn model presented
in fig. 34.
this bpmn model looks more compact, since empty tran-
sitions can be omitted, and elements, such as activities, canbe connected with each other directly without using interme-diate elements. the analysis of cases when the conversions
produce simpler models is presented in sect. 9. a causal
net constructed from this log by the heuristic miner [ 26]i s
presented in fig. 35.
the causal net can be converted to a bpmn model as well
(fig. 36). note that this bpmn model explicitly represents
all routing constructions by means of inclusive and exclusive
gateways.
in sects. 4and 5, we have shown multiple ways to
construct bpmn models from event logs using conversions(refer to fig. 3for the overall picture).
in the remainder, we only consider process models without
additional routing constructs (inclusive gateways and event-based exclusive gateways). the reason is that we need to
convert bpmn models to classical petri nets for replay.
6 bpmn model simpliﬁcation
in this subsection, bpmn model transformations are pre-
sented. these transformations allow us to reduce the size oftarget bpmn models. similar petri nets and y awl reduc-
tion rules have already been presented in [ 38–40] and can be
applied to bpmn constructions as well.
1.removing silent activities. in contrast to petri nets,
bpmn models allow connecting arbitrary activities and
bpmn node bpmn node
bpmn node bpmn node
fig. 37 reducing gateways of the same typefig. 38 removing silent activities
gateways, and thus activities, which are not labeled, may
be removed (fig. 38).
note that all the activities constructed during an execution
of algorithm 2 have exactly one incoming and exactly
one outgoing sequence ﬂow.
2.reducing gateways. sequential gateways of the same
type, serving as join and split routers, can be reduced
(fig. 37).
3.merging activities and gateways. according to the
semantics of bpmn, activities can be merged with
preceding and following gateways of the right type
(fig. 39).
7 mapping conformance and performance info
onto bpmn models
process mining is not limited to discovery, but also offers con-
formance checking and enhancement techniques. to apply
existing replay methods, which will allow us to obtain
detailed conformance and performance information, the ini-tial bpmn model should ﬁrst be converted to a petri net, and
after that this petri net can be analyzed using existing tech-
niques for petri nets. note that bpmn models presented inthis section are based on the core subset of bpmn modelingelements.
fig. 39 merging activities with preceding exclusive join and following
parallel split gateways
123process mining using bpmn: relating event logs and process models
... ...
...
... ...
... ...
a a
...
fig. 40 bpmn to petri net conversion patterns
7.1 converting bpmn models to petri nets
bpmn models based on the core subset of bpmn mod-
eling elements and can be considered as workﬂow graphs.
every node of a workﬂow graph can be simply converted to
a corresponding petri net pattern (fig. 40) by the algorithms,
presented in [ 22,23].
note that according to [ 23] some preliminary transforma-
tions should be applied to a bpmn model: each gatewayand activity, containing multiple inputs and outputs, should
be splitted. also note that this basic conversion preserves
semantics and guarantees bisimilarity between a bpmn
model and a target petri net due to the correspondencebetween bpmn sequence ﬂows and workﬂow net places:
map:sf→p, i.e., for each sequence ﬂow of the bpmn
model, there is a corresponding place in the target petri net.the proof of bisimulation is straightforward.
7.2 mapping conformance and performance info
the bisimulation relation deﬁnes a mapping between states
of an initial bpmn model and a target petri net, and gives usan ability to visualize performance and conformance infor-book
hotel
book 
flight
get
insurancepaysf1 sf2sf3
sf4
sf5sf6
sf7sf8sf9 sf10
register
fig. 41 a bpmn of a booking procedure
mation, which is attached to some states of the petri net,
within the initial bpmn model.
to give an example, which shows how a conformance
information can be visualized within a bpmn diagram,
we have to introduce the notion of alignment. alignment
establishes log and model similarities and discrepancies bydeﬁning correspondence between moves on log and moves
(ﬁrings) on model.
leta
lbe a set of log events. let also pn=(p,t,f,l)
be a labeled petri net, where l:t/notarrowrightam, and amis a
set of model events. let /greatermuchbe a special event, such that
/greatermuch/∈(al∪am).
alignment step is a pair (x,y):
–(x,y)is amove on log ifx∈al,y=/greatermuch ,
–(x,y)is amove on model ifx=/greatermuch ,y∈am,
–(x,y)is amove in both ifx∈al,y∈am,
–(x,y)is an illegal move ifx=/greatermuch ,y=/greatermuch .
analignment is a sequence of alignment steps that are not
illegal moves .
now let us consider a bpmn model of a booking process
(fig. 41).
let us apply the conversion algorithm to obtain a petri net
with places, corresponding to bpmn sequence ﬂows. theresult is shown in fig. 42.
to illustrate enhancement of a process model with confor-
mance and performance information, an event log consisting
book hotel
book flight
get insurance
paym(sf1)
m(sf2)m(sf3)
m(sf4)
m(sf5)m(sf6)
m(sf7)
m(sf8)m(sf9)
m(sf10)register
fig. 42 a petri net constructed from the bpmn model presented in
fig. 41
123a. a. kalenkova et al.
table 3 an event log of a booking process with cancelation
case id event name timestamp
1 register ( r) 2014-12-24 09:30:01:727
1 book ﬂight ( bf) 2014-12-24 09:43:23:353
1 book hotel ( bh) 2014-12-24 09:52:14:252
1 cancel insurance ( ci) 2014-12-24 09:52:20:732
1p a y ( p) 2014-12-24 10:04:24:754
of only one trace, containing insurance cancelation event, is
considered (table 3).
to construct an alignment, this log should be represented
as a multiset of traces:
l=/bracketleftbig
/angbracketleftregister ,book f light ,book hotel ,
cancel insurance ,pay/angbracketright1/bracketrightbig
.
the result of application of the algorithm [ 41], which
ﬁnds an optimal (with the minimal number of log only
and model only moves) alignment, is presented below (thenames of events are represented by their ﬁrst letters, ﬁring
of silent transitions are denoted as τ). the ﬁrst row rep-
resents log moves, while the second row stands for modelﬁrings:
γ=
/greatermuchr/greatermuchbf/greatermuchbhci/greatermuchp
τrτbfgibh/greatermuchτp
such alignments can be used to enhance existing bpmn
models with conformance information (fig. 43).
note that the relation between states of the models allows
us to attach log move information to sequence ﬂows, whichcorrespond to a concrete state of the bpmn model—the state,in which log move is performed.
this bpmn model can be enriched with a performance
information (such as activity execution times) obtained as aresult of alignment-based replay (fig. 44).
note that different types of performance information, such
as average, minimal, maximal, relative execution times, canbe added to a diagram.
book
hotel
book 
flight
get
insurancepaysf1 sf2sf3
sf4
sf5sf6
sf7
sf8sf9 sf10
registerlog only move: 
cancel insurance
model only move
fig. 43 a bpmn model annotated with conformance informationbook
hotel
book 
flight
get
insurancepaysf1 sf2sf3
sf4
sf5sf6
sf7
sf8sf9 sf10
register13 min, 21 sec
22 min, 13 sec
12 min, 10 sec
fig. 44 a bpmn model annotated with performance information
8 tool support
the techniques presented in this paper have all been imple-
mented in prom, an open source framework for processmining. let us consider bpmn packages architecture and
their functionality in prom (fig. 45).
the core bpmn package provides basic interfaces for
working with bpmn models, including import and exportof bpmn diagrams in bpmn xml [ 6] and xpdl 2.2 [ 42]
formats. the bpmn conversions package depends on the
core bpmn package and provides the ability to convert petrinets, causal nets [ 10] and process trees [ 11] to bpmn, thus
supporting the discovery of bpmn models. besides that the
resource and the data ﬂow perspectives can be discovered aswell: data petri nets obtained using the data-aware process
mining algorithm [ 28] can be used to create bpmn models
with data perspective, and process trees with resources can be
prom
bpmn 
analysis 
packagebpmn 
conversions 
package
bpmn  
package«call»replay 
plugins
«call»
bpmn modeling toolimport/export of bpmn 
diagrams in bpmn xml 2.0 
and xpdl 2.2 formats «import» «import»
fig. 45 bpmn packages architecture
123process mining using bpmn: relating event logs and process models
converted to bpmn model with lanes. the bpmn analysis
package is constructed on top of the core bpmn, and thebpmn conversions packages and its plugins can be used
to enhance bpmn models with additional conformance and
performance information.
to illustrate this, we consider two main use cases for work-
ing with bpmn in prom.
use case 1 (discovering bpmn processes) : the user dis-
covers a bpmn model by applying discovery and bpmnconversions plugins, and then this model can be exported to
an external bpmn modeling or execution tool (fig. 46).
use case 2 (analyzing bpmn processes) : the user loads
a bpmn model from an external bpmn modeling tool, and
then, by applying the bpmn analysis package, it converts
this model into a petri net, replays a log to obtain con-formance and performance information, and enhances thebpmn diagram with this information (fig. 47).
more details about the functionality of the bpmn pack-
ages in prom can be found at [ 43].
9 case studies
in this section, we present case studies based on the event logs
produced by information systems from different domains.
fig. 46 discovering a bpmn model with data
fig. 47 analysis of a bpmn model
first we consider a complex ticket reservation system from
the traveling and transportation domain. this system belongs
t oac l a s so f computer reservation systems (crs) and is used
for booking all types of touristic products such as hotels,ﬂights, cars, excursions, activities, trains, etc. it integrates
multiple global distribution systems (gds) for pre-sales
(search, reservation) and sales (book, pay) processes. thesystem can be accessed by normal customers through a webinterface or by expert users, e.g., travel agency or system sup-
port, through a special rich client interface. independently
of the client interface, calls to the backend of the systemare logged in order to track the system state and perfor-
mance, to gather statistics and to analyze the user behavior
and make estimations and predictions.
5these logs contain
the timestamps, identiﬁers of the business cases (unique iden-
tiﬁer of the reservation) and also different business attributes
describing user operations (e.g., search, quote, book, pay),travel directions (e.g., origin, destination, booking code),traveling time (e.g., start and end date). for our experiments,
5these logs exclude user and commercial sensible information like
names, credit cards and invoices.
123a. a. kalenkova et al.
table 4 event log from a crsreservation id event name timestamp booking code notiﬁcation
390234516 t1-hf-h:tes 2013-12-18 08:36:00:570 ber
390234516 m55type010rsp-034 2013-12-18 08:36:04:717 998390234516 t3-hf-h:hh004 2013-12-18 08:36:09:337 ber390234516 m52rsp 2013-12-18 08:36:09:337 998390235717 t1-ba-h:tes 2013-12-18 08:36:12:155 ber45010 dh390235717 m52rsp 2013-12-18 08:36:18:397 712
we took a log of the ticket reservation system, which contains
94 cases, 50 event names, and describes the system behavior
during 4 h of its work. this event data are perfectly suitablefor applying process mining, since we identify the case byreservation id, event names by a subset of business attributes
and order of events by a timestamp.
the other system being analyzed is a tracker system (ts)
used for management of kanban and scrum software devel-
opment processes. the history of the system usage contains
short traces (the average number of events per trace is 3.5).each trace can be identiﬁed by a unique number, it cor-
responds to a concrete task for developers and represents
a sequence of task states, such as “open,” “in progress,”“resolved,” “reopened” and “closed.” these task states areconsidered as event names, and timestamps are used to order
them.
event logs produced by six different anonymous munic-
ipalities [ 44,45] within the coselog project in the nether-
lands were analyzed as well. these event logs contain
information about executions of a permit application process.
the original event logs were reduced in order to speed up thediscovery techniques applied: the number of traces for these
six logs varies from 17 to 324, and the number of different
event names is 22 for the log, which contains receiving phaseonly, and between 69 and 176 for the other event logs. for
the log corresponding to the receiving phase, the mean case
duration time is 3.1 days, and for the other logs the mean caseduration time lies between 21.4 days and 49.2 weeks.
fig. 48 a petri net discovered
by the alpha miner from theevent log
123process mining using bpmn: relating event logs and process models
fig. 49 a bpmn model constructed from the petri net presented in fig. 48
9.1 discovering bpmn models
in this subsection, we show fragments of the crs log and
describe models discovered from this log.
a short typical fragment of an event log is shown in
table 4. every log entry contains ﬁelds such as reserva-
tion id, an event name, a timestamp, a booking code and
a notiﬁcation. an event name is a shortcut built from a useroperation and of a product type, e.g., “t1-hf-h:tes” means
that user does operation “search” for a product type “hotel.”
the booking code identiﬁes the location, e.g., “ber” meansberlin, germany. thus, in the example in table 4we show
two reservations: “390234516” is a search for available hotels
in berlin and “390235717” is a reservation for a double roomin a concrete hotel in berlin.
further in this subsection, we use different discovery
(heuristic [ 26], alpha [ 12] and inductive [ 25] miners) to
construct process models from the event log. as a result ofapplying discovering methods, we obtain petri nets, causal
nets and process trees. all these models are converted to
bpmn using algorithms presented before. the log of thebooking process was ﬁltered: the parts, which contain only
positive or only negative cases (cases with booking error
events), were identiﬁed. moreover, since the booking ﬂightprocedure differs from other bookings, the log was also ﬁl-tered by containing booking ﬂight event.let us consider models constructed from a ﬁltered log
containing only positive traces without ﬂight booking proce-
dure
6;f i g . 48illustrates a petri net discovered with alpha
miner[ 12] for this log.
the bpmn model constructed for the given petri net
(fig. 48) by the conversion algorithm is shown in fig. 49.
note that in this case the amount of routing elements (gate-
ways) in the bpmn model is comparable with the numberplaces of the initial petri net, and the number of activities
coincides with the number of transitions. also note that
thanks to algorithm 1 all the activities of the target bpmnmodel are on paths from the start event to end events.
now let us consider a causal net (fig. 50) discovered using
the heuristic miner [ 26]. note that the start nodes and the end
nodes are highlighted in green and red, respectively.
this causal net can be converted to a bpmn model
(fig. 51) using the conversion algorithm presented before.
the bpmn model reveals the operational semantics of
the process. fig. 50is not explicitly showing the routing
constructions, but the bpmn model does. now we will con-
sider a process tree discovered by the inductive miner [ 25]
(fig. 52).
the corresponding petri net is presented in fig. 53.
6all the models presented in this section are discovered using prom
framework
123a. a. kalenkova et al.
fig. 50 a causal net discovered by heuristic miner from the event log
the bpmn model constructed from the process tree by
the conversion algorithm does not contain any silent activities
(fig. 54). moreover, the number of gateways is signiﬁcantly
less than the amount of places in the corresponding petri net(fig. 53). note that the process, discovered by the inductive
miner, is compactly presented in terms of bpmn.9.2 comparative analysis of the models discovered
in this subsection, we make a comparative analysis of
processes models discovered from the event logs and corre-sponding bpmn models obtained as a result of conversions
using various metrics [ 16]. we will consider the following
fig. 51 a bpmn model constructed from the causal net presented in fig. 50
123process mining using bpmn: relating event logs and process models
fig. 52 a process tree discovered by the inductive miner
metrics: the number of nodes, the diameter (the maximal
length of a shortest path from a start node to a node of thegraph) and density (ratio of the total number of arcs to the
maximum possible number of arcs of the graph). as stated
in [16], all these metrics have a negative correlation with the
process model understandability.
different process mining algorithms give process models
with different characteristics. of course, the set of consid-
ered process mining algorithms is far from complete. butour aim is to analyze the conversion techniques, thuswise wehave selected algorithms, representing the entire classes of
discovery approaches, which produce process models withcertain properties. the alpha mining algorithm is not tailored
toward handling noisy real-life logs and discovers unstruc-
tured process models; meanwhile, the inductive miner dealswith noise and produces structured models. the heuristicminer was chosen as a technique, which allows us to con-
struct causal nets from event logs.
let us consider a free-choice system net sn=(pn,m
init,
mﬁnal), where pn=(p,t,f,l)is a labeled petri net,
fig. 53 a petri net constructed from the process tree shown in fig. 52
123a. a. kalenkova et al.
fig. 54 a bpmn model, which corresponds to the process tree (fig. 52)
and a bpmn model bpmn model=(n,a,gxor,gand,
estart,eend,sf,λ), obtained by the conversion algorithm
from this net. the number of activities equals to the num-
ber of non-silent transitions: |a|=|{t∈t:tλ(t)/negationslash=τ}|.
in the worst case, the number of gateways |gxor∪gand|is
comparable to the number of places plus the number of transi-
tions : |p|+|t|, since every place can produce an xor-join,
and in the worst case, the number of and-join gateways andthe number of xor-split gateways are both comparable to⌊|t|/2⌋. note that and-split gateways will be deleted during
the simpliﬁcation of the bpmn model. in the best case (for a
sequential control ﬂow), a bpmn model will not contain anygateways. also note that all the constructions produced dur-
ing the transformation of arbitrary petri nets to free-choice
nets will contain only silent transitions and related places.
for a bpmn model constructed from a causal net, the
number of activities equals the number of causal net activ-
ities. the number of gateways is determined by input andoutput bindings of the activities.
a bpmn model constructed as a result of a process tree
conversion contains activities corresponding to non-silent
process tree leafs, and every branch node of the process treewill be converted to a routing construction of the bpmn
model, containing zero (in the case of a sequential con-
trol ﬂow), one or more routing nodes. note that somerouting nodes might be merged during the simpliﬁcation
procedure.to estimate the number of nodes of process models dis-
covered from the real-life event logs, let us consider table 5.
the rows in this and other tables are ordered by the number
of process models nodes.
the ﬁrst column refers to the event logs used: six event
logs, originating from municipal processes, of the coselog
project (denoted as cslg1–cslg6), the logs of csr (com-
puter reservation system) with various types of ﬁlteringapplied
7and the logs of ts(tracking system). each of the
other columns mentions the number of nodes of the initial
process model constructed by a discovery algorithm and the
number of nodes of the bpmn model obtained as a resultconversion (for petri nets and bpmn models the number of
transitions, places and the number of activities, xor gate-
ways, and gateways are speciﬁed, the values are separatedby a comma).
this table shows that the number of bpmn model nodes
depends on the properties of the initial petri net: bpmnmodels constructed for structured petri nets are more com-pact (see the inductive miner column). this holds due to
the fact that bpmn language allows simpliﬁcations, such
as silent nodes deletion (structured models usually containsilent nodes) and gateways reduction, which is also applica-
ble to structured nets, if some blocks can be merged. for
non-structured petri nets (see the alpha miner column), the
7by csr1, csr2, csr3 and csr4 we denote event logs of the
computer reservation system, containing only positive cases and/orbooking ﬂight event.
123process mining using bpmn: relating event logs and process models
table 5 number of nodes of process models discovered from the event logs
log traces heuristic miner
(c-net/ bpmna)alpha miner (petri
netb/b p m na)inductive miner (proc.
tree/ petri netb/bpmna)
cslg1 176/176,143,128 176,372/176,340,120 261/235,49/176,25,0
cslg2 134/134,58,56 134,238/134,159,54 273/223,89 /134,42,0cslg3 93/93,58,70 93,198/93,153,42 219/173,78/93,35,0cslg4 75/75,49,52 75,143/75,101,33 151/120,50/75,21,0cslg5 68/68,58,58 68,181/69,159,55 84/77,9/68,3,0csr1 30/30,14,4 30,23/30,18,13 130/100,53/ 30,25,0csr2 30/30,14,5 30,13/30,5,7 102/81,43/ 30,20,0csr3 27/27,10,4 27,28/27,24,13 107/82,52/ 27,24,2cslg6 22/22,8,6 22,24/22,14,12 54/41,19/ 22,7,0csr4 21/21,6,4 21,23/21,18,11 88/ 67,41/ 21,18,0ts 5/5,7,0 5,7/5,5,4 15 / 9,5 / 5,3,0
afor bpmn models, the number of activities, xor gateways and and gateways are speciﬁed, and the values are separated by a comma
bfor petri nets the number of transitions and places are speciﬁed and separated by a comma
number of bpmn model nodes is comparable or even greater
than the number of nodes of the initial petri net. also accord-
ing to the theoretical observations, the number of nodes of abpmn model is not always lower than the number of nodes
of the initial causal net, since bpmn models may have rout-
ing nodes.
similarly let us estimate the density of the models dis-
covered (table 6). graph density is deﬁned as d=|e|/
(|v|∗(|v|−1)), where eis a set of edges and vis a set of
nodes. density shows the relation between the real numberof edges and the maximum possible number of edges in the
graph.
the density of the bpmn models constructed from
unstructured petri nets is comparable with the density of
these petri nets (see the alpha miner column). the density of
structured petri nets is larger than the density of correspond-
table 6 density of the models discovered
log traces heuristic miner
(c-net/ bpmn)alpha miner
(petri net/bpmn)inductive miner
(petri net/bpmn)
cslg1 0.01/0.004 0.005/0.004 0.005/0.01
cslg2 0.01/0.005 0.005/0.005 0.005/0.01cslg3 0.02/0.01 0.01/0.01 0.005/0.02cslg4 0.02/0.01 0.01/0.01 0.01/0.02cslg5 0.02/0.005 0.005/0.005 0.01/ 0.02csr1 0.07/0.04 0.05/0.04 0.01/0.04csr2 0.07/0.04 0.03/0.05 0.01/0.04csr3 0.06/0.04 0.04/0.03 0.01/0.03
cslg6 0.07/0.05 0.04/0.04 0.03/0.06
csr4 0.08/0.05 0.05/0.04 0.01/0.04ts 0.5/0.2 0.19/0.12 0.1 / 0.16table 7 diameter of the process models discovered from the event logs
log traces heuristic miner
(c-net/ bpmn)alpha miner
(petri net/bpmn)inductive miner
(petri net/bpmn)
cslg1 12/24 17/21 37/14
cslg2 39/53 49/42 76/23cslg3 23/38 37/26 71/23cslg4 25/32 39/34 56/16cslg5 18/35 13/17 16/5csr1 3/7 6/10 20/6csr2 3/7 5/7 8/9csr3 6/12 11/13 39/14cslg6 6/11 13/13 25/7
csr4 5/8 10/11 41/12
ts 2/5 3/6 5/4
ing bpmn models (see the inductive miner column) due to
reductions applied in the case of structured processes. thedensity of causal nets is certainly greater than the density of
corresponding bpmn models, since novel gateways, which
connect process activities, are added.
now let us consider the diameter—the maximal length
of a shortest path from a start node to a node of the graph.
the results presented in table 7show that the statements
valid for the number of nodes parameter are also true for thediameter: bpmn models corresponding to structured petri
nets are more compact than the initial models.
in this subsection, we have evaluated the discovered
process models using metrics, such as the number of nodes,
the density and the diameter. the results show that the com-
pactness of the result bpmn models depends considerablyon characteristics of the initial models.
123a. a. kalenkova et al.
table 8 characteristics of process models from the signavio model
collection
number of nodes density diameter
maximal 58 .00 0.87 25
mean 20 .76 0.10 8
minimal 6 .00 0.00 1
another important issue in the context of our practical
case studies presented in this subsection was the understand-
ability of the process mining output format. the softwarearchitects and designers of the touristic system were espe-
cially interested in getting the results in the bpmn format.
they were familiar with bpmn, and bpmn was also usedin the speciﬁcation and design phases of the software prod-uct for documenting the typical touristic business processes.
moreover bpmn exchange formats, such as bpmn xml [ 6]
and xpdl 2.2 [ 42], give us an ability to integrate with a vari-
ety of bpmn supporting tools, and thus discovered processes
can be analyzed, improved or even automated using external
environments. in addition bpmn offers great opportunitiesto add other perspectives, such as data and resource informa-
tion, results of conformance and performance analysis. this
way the analyst can obtain a holistic view on the processesdiscovered.
9.3 comparing discovered and manually created bpmn
models
to compare the models discovered from the event log with
manually created bpmn models, we analyzed the signaviomodel collection, which contains a variety of bpmn modelsfrom different domains. we took only ﬂat models repre-
sented by start and end events, tasks, gateways and sequence
ﬂows. currently the signavio model collection contains 4900of such models. for these models, we calculated the struc-
tural characteristics: number of nodes, density and diameter
(table 8).
comparing these results with the measurements presented
in the tables 5and 7, one may conclude that models drawn
manually (excluding models discovered from the small ts
log) are usually more compact than those, which were auto-matically discovered using the well-known discovery and
conversion algorithms presented in this paper.
also these observations show that bpmn models created
manually have higher density than automatically discovered
bpmn models. the results obtained for the signavio model
collection are a consequence of the fact that business processanalysts and engineers are used to work with more struc-
tured models, so an algorithm for subprocesses discovery
is needed. an algorithm for the construction of bpmn sub-processes based on a log clustering and ﬁltering was proposedin [24]. however, more research is needed to compare hand-
made and discovered models.
10 conclusions and future work
this paper provides a solid basis for using bpmn in process
mining. the results presented in the paper concentrate on the
control ﬂow perspective, as it is usually considered to be themain perspective. it is the starting point for extending with
additional perspectives during an enhancement of the process
model discovered from an event log.
in this paper, we used various control ﬂow discovery algo-
rithms. these produce petri nets, causal nets, process trees,
etc. few algorithms produce directly a bpmn model. hence,we developed various conversion algorithms to mine bpmn.petri nets, process trees and causal nets discovered from a
real-life event log were compared with the corresponding
bpmn models on the basis of three process metrics. more-over, these metrics were applied to measure the difference
between bpmn models, which were created by analysts,
and bpmn models retrieved as a result of process discov-ery algorithms. an approach for enhancing a bpmn model
with additional conformance and performance information
was proposed as well.
the results presented in the paper can be used to retrieve
bpmn models out of event logs and verify them against event
logs. this work can be considered as a ﬁrst step toward the
development of more advanced process discovery methods,including novel perspectives.
as was shown in sect. 9.3, more structured process mod-
els are needed, and thus methods for subprocesses discoveryshould be introduced. in comparison with the approach pre-
sented in [ 24], we plan to build a method on top of the
decomposition techniques [ 46–48] to obtain structural mod-
els, preserving behavior recorded in an event log.
references
1. van der aalst, w.m.p .: process mining—discovery, conformance
and enhancement of business processes. springer, berlin (2011)
2. mans, r.s., schonenberg, m.h., song, m., van der aalst, w.m.p .,
bakker, p .j.m.: application of process mining in healthcare: a casestudy in a dutch hospital. in: biomedical engineering systems andtechnologies. communications in computer and information sci-ence, vol. 25, pp. 425–438. springer, berlin (2009)
3. mitsyuk, a.a., kalenkova, a.a., shershakov, s.a., van der aalst,
w.m.p .: using process mining for the analysis of an e-trade system:a case study. bus. informatics 3, 15–23 (2014)
4. trcka, n., pechenizkiy, m.: from local patterns to global models:
towards domain driven educational process mining. in: 9th inter-national conference on intelligent systems design and applications(isda), pp. 1114–1119. ieee computer society (2009)
5. ieee task force on process mining: process mining manifesto. in:
business process management workshops, lecture notes in busi-ness information processing, vol. 99, pp. 169–194. springer (2012)
123process mining using bpmn: relating event logs and process models
6. omg: business process model and notation (bpmn), v ersion
2.0. http://www.omg.org/spec/bpmn/2.0 (2011)
7. muehlen, m.z., ho, d.t.: service process innovation: a case study
of bpmn in practice. in: proceedings of the proceedings of the 41stannual hawaii international conference on system sciences, hicss’08, p. 372. ieee computer society, washington (2008)
8. muehlen, m.z., recker, j.: how much language is enough?
theoretical and practical use of the business process modelingnotation. in: proceedings of the 20th international conference onadvanced information systems engineering. caise ’08, pp. 465–479. springer, berlin, heidelberg (2008)
9. recker, j.: opportunities and constraints: the current struggle with
bpmn. business process manag. j. 16(1), 181–201 (2010)
10. van der aalst, w.m.p ., adriansyah, a., van dongen, b.f.: causal
nets: a modeling language tailored towards process discovery.in: concur, lecture notes in computer science, pp. 28–42.springer (2011)
11. van der aalst, w.m.p ., buijs, j.c.a.m., van dongen, b.f.: towards
improving the representational bias of process mining. in: ifipinternational symposium on data-driven process discovery andanalysis (simpda 2011). lecture notes in business informationprocessing, vol. 116, pp. 39–54. springer, berlin (2012)
12. van der aalst, w.m.p ., weijters, a.j.m.m., maruster, l.: workﬂow
mining: discovering process models from event logs. ieee trans.knowl. data eng. 16(9), 1128–1142 (2004)
13. cardoso, j., mendling, j., neumann, g., reijers, h.a.: a discourse
on complexity of process models. in: proceedings of the 2006 inter-national conference on business process management workshops.bpm’06, pp. 117–128. springer, berlin (2006)
14. latva-koivisto, a.: finding a complexity measure for business
process models tech. rep, helsinki university of technology,espoo, helsinki (2001)
15. laue, r., gruhn, v .: complexity metrics for business process mod-
els. in: business information systems, 9th international conferenceon business information systems, bis 2006, pp. 1–12 (2006)
16. sánchez-gonzález, l., garcía, f., mendling, j., ruiz, f., piattini,
m.: prediction of business process model quality based on struc-tural metrics. in: er, lecture notes in computer science. vol.6412, pp. 458–463. springer (2010)
17. van der aalst, w.m.p ., adriansyah, a., van dongen, b.f.: replay-
ing history on process models for conformance checking andperformance analysis. wiley interdiscp. rev. data min. knowl.discov. 2(2), 182–192 (2012)
18. van der aalst, w.m.p .: the application of petri nets to workﬂow
management. j. circuits syst. comput. 8(1), 21–66 (1998)
19. omg: omg uniﬁed modeling language 2.5. omg. http://www.
omg.org/spec/uml/2.5/ (2013)
20. kindler, e.: on the semantics of epcs: a framework for resolving
the vicious circle. in: international conference on business processmanagement (bpm 2004), lecture notes in computer science,vol. 3080, pp. 82–97. springer (2004)
21. mendling, j., van der aalst, w.m.p .: towards epc semantics based
on state and context. in: proceedings of ﬁfth workshop on event-driven process chains (wi-epk 2006), pp. 25–48. gesellschaft fürinformatik, bonn, vienna (2006)
22. van der aalst, w.m.p ., hirnschall, a., v erbeek, h.m.w.: an alter-
native way to analyze workﬂow graphs. in: proceedings of the14th international conference on advanced information systemsengineering (caise’02), vol. 2348, pp. 535–552 (2002)
23. favre, c., fahland, d., völzer, h.: the relationship between work-
ﬂow graphs and free-choice workﬂow nets. inf. syst. 47, 197–219
(2015)
24. conforti, r., dumas, m., garcia-baneulos, l., la rosa, m.:
beyond tasks and gateways: discovering bpmn models with sub-processes, boundary events and activity markers. in: internationalconference in business process management (bpm), pp. 101–117.
springer, haifa (2014)
25. leemans, s.j.j., fahland, d., van der aalst, w.m.p .: discovering
block-structured process models from event logs: a constructiveapproach. in: application and theory of petri nets and concur-rency, lecture notes in computer science. vol. 7927, pp. 311–329.springer (2013)
26. weijters, a.j.m.m., ribeiro, j.t.s.: flexible heuristics miner
(fhm). in: ieee symposium on computational intelligence anddata mining (cidm 2011), pp. 310–317. ieee, paris, france(2011)
27. weerdt, j.d., vanden broucke, s.k.l.m., caron, f.: bidimen-
sional process discovery for mining bpmn models. in: fournier,f., mendling, j. (eds.) business process management workshops,lecture notes in business information processing, vol. 202, pp.529–540. springer, (2014)
28. de leoni, m., van der aalst, w.m.p .: data-aware process mining:
discovering decisions in processes using alignments. in: acm sym-posium on applied computing (sac 2013), pp. 1454–1461. acmpress (2013)
29. burattin, a., sperduti, a., v eluscek, m.: business models enhance-
ment through discovery of roles. in: ieee symposium on compu-
tational intelligence and data mining, cidm 2013, singapore, pp.
103–110 (2013)
30. song, m., van der aalst, w.m.p .: towards comprehensive support
for organizational mining. decis. support syst. 46(1), 300–317
(2008)
31. de leoni, m., van der aalst, w.m.p ., van dongen, b.f.: data- and
resource-aware conformance checking of business processes. in:bis, lecture notes in business information processing. vol. 117,pp. 48–59. springer (2012)
32. van der aalst, w.m.p ., rubin, v .a., v erbeek, h.m.w., van don-
gen, b.f., kindler, e., günther, c.w.: process mining: a two-stepapproach to balance between underﬁtting and overﬁtting. softw.syst. model. 9(1), 87–111 (2010)
33. bergenthum, r., desel, j., lorenz, r., mauser, s.: process min-
ing based on regions of languages. in: international conferenceon business process management (bpm 2007), lecture notes incomputer science. vol. 4714, pp. 375–383. springer (2007)
34. carmona, j., cortadella, j.: process mining meets abstract interpre-
tation. in: ecml/pkdd 210, lecture notes in computer science,vol. 6321, pp. 184–199. springer (2010)
35. günther, c.w., van der aalst, w.m.p .: fuzzy mining: adaptive
process simpliﬁcation based on multi-perspective metrics. in: inter-national conference on business process management (bpm 2007),lecture notes in computer science, vol. 4714, pp. 328–343.springer (2007)
36. russell, n., ter hofstede, a.h.m., van der aalst, w.m.p ., mul-
yar, n.: workﬂow control-ﬂow patterns: a revised view. tech.rep. bpm-06-22, bpm center. http://bpmcenter.org/wp-content/
uploads/reports/2006/bpm-06-22.pdf (2006)
37. buijs, j.c.a.m., van dongen, b.f., van der aalst, w.m.p .: a
genetic algorithm for discovering process trees. in: ieee congresson evolutionary computation (cec 2012), pp. 1–8. ieee computersociety (2012)
38. desel, j., esparza, j.: free choice petri nets. cambridge university
press, new y ork (1995)
39. murata, t.: petri nets: properties, analysis and applications. proc.
ieee 77(4), 541–580 (1989)
40. wynn, m., v erbeek, h., van der aalst, w.m.p ., hofstede, a.,
edmond, d.: reduction rules for y awl workﬂows with cancella-tion regions and or-join. inf. softw. technol. 51
(6), 1010–1020
(2009)
41. adriansyah, a., van dongen, b.f., van der aalst, w.m.p .: confor-
mance checking using cost-based ﬁtness analysis. in: edoc, pp.55–64. ieee computer society (2011)
123a. a. kalenkova et al.
42. wfmc: xml process deﬁnition language v ersion 2.2. in: tech-
nical report wfmc-tc-1025, workﬂow management coalition,lighthouse point, florida, usa (2012)
43. kalenkova, a.a., de leoni, m., van der aalst, w.m.p .: discovering,
analyzing and enhancing bpmn models using prom. in: businessprocess management—12th international conference, bpm 2014,haifa, israel, september 7–11, 2014. proceedings (2014). in press
44. buijs, j.c.a.m.: environmental permit application process.
coselog project (2014)
45. buijs, j.c.a.m.: receipt phase of an environmental permit appli-
cation process. coselog project (2014)
46. van der aalst, w.m.p .: a general divide and conquer approach for
process mining. in: federated conference on computer science andinformation systems (fedcsis 2013), pp. 1–10 (2013)
47. kalenkova, a.a., lomazova, i.a.: discovery of cancellation
regions within process mining techniques. fundam. inform. 133(2–
3), 197–209 (2014)
48. kalenkova, a.a., lomazova, i.a., van der aalst, w.m.p .: process
model discovery: a method based on transition system decompo-sition. in: application and theory of petri nets and concurrency,lecture notes in computer science, pp. 71–90. springer (2014)
anna a. kalenkova was gradu-
ated in applied mathematics fromthe lomonosov moscow stateuniversity; in 2011 she com-pleted her phd in the com-puting center of russian acad-emy of sciences. currently sheis working in the laboratoryof process information systemshigher school of economics,moscow, russian federation asa senior researcher. her maintopics of interest are petri nets,workﬂow nets, business processmodeling languages, business
process management systems and process mining.
wil m. p. van der aalst is a full
professor of information sys-tems at the technische univer-siteit eindhoven (tu/e) wherehe is also scientiﬁc director ofthe data science center eind-hoven (dsc/e). his personalresearch interests include work-ﬂow management, process min-ing, petri nets, business processmanagement, process modeling,and process analysis. wil van der
aalst has published more than
180 journal papers, 18 books (asauthor or editor), 400 refereed
conference/workshop publications, and 60 book chapters. he is a mem-ber of the royal netherlands academy of arts and sciences, royalholland society of sciences and humanities, and academia european.
irina a. lomazova is a profes-
sor at the faculty of computerscience, national research uni-versity higher school of eco-nomics (moscow, russia), whereshe also heads the laboratoryfor process-aware informationsystems. her research interestsinclude process modeling andanalysis, formal models of con-currency, petri nets, and processmining.
vladimir a. rubin during
more than 14 years he has beenworking and researching in thearea of software engineering ina variety of projects in differ-ent consulting and technologycompanies (msg systems ag,capgemini, sd&m, netcracker)and scientiﬁc institutions in ger-many, russia, usa, holland,and switzerland. he graduatedin computer science from themoscow state university of rail-way transport and completed hisphd in a graduate school of
dynamic intelligent systems in paderborn, germany. currently he isworking as an independent lead it architect and consultant in frank-furt am main, germany.
123