temporal performance analysis for
block-structured process models in cortado
daniel schuster1,2[0000 −0002−6512−9580], lukas schade2, sebastiaan j. van
zelst1,2[0000 −0003−0415−1036], and wil m. p. van der aalst1,2[0000 −0002−0955−6940]
1fraunhofer institute for applied information technology, sankt augustin, germany
{daniel.schuster,sebastiaan.van.zelst }@fit.fraunhofer.de
2rwth aachen university, aachen, germany
lukas.schade@rwth-aachen.de, wvdaalst@pads.rwth-aachen.de
abstract. process mining techniques provide insight into operational
processes by systematically analyzing event data generated during pro-
cess execution. these insights are used to improve processes, for instance,
in terms of runtime, conformity, or resource allocation. time-based per-
formance analysis of processes is a key use case of process mining. this
paper presents the performance analysis functionality in the process min-
ing software tool cortado. we present novel performance analyses for
block-structured process models, i.e., hierarchical structured petri nets.
by assuming block-structured models, detailed performance indicators
can be calculated for each block that makes up the model. this detailed
temporal information provides valuable insight into the process under
study and facilitates analysts to identify optimization potential.
keywords: process mining ·performance analysis ·alignments
1 introduction
process mining [1] comprises various methods to systematically analyze event
data that are generated during the execution of operational processes and stored
within organizations’ information systems. analyzing event data offers great
potential for gaining valuable insights into the process under investigation. these
insights are used to improve processes, i.e., the key objective of process mining.
the temporal performance analysis of processes is of major practical rele-
vance, e.g., to determine bottlenecks within processes. this paper presents novel
performance analysis functionality for block-structured process models in the tool
cortado [11]. by focusing on block-structured models, performance indicators
(pis) can be calculated for each block that makes up the process model individu-
ally. calculating pis for individual blocks of block-structured models represents
a novelty compared to existing tools, which often only offer performance analysis
per activity in the process model and globally, i.e., for the entire process model.
in short, cortado contributes to the state-of-the-art in model-based performance
analysis.
the subsequent sections are structured as follows. sect. 2 introduces prelim-
inaries. sect. 3 presents cortado’s model-based performance analysis approach2 d. schuster et al.
table 1: example of an event log
event id case id activity label start timestamp completion timestamp . . .
1 1 activity a 07/13/21 08:00 07/13/21 09:30 . . .
2 1 activity b 07/13/21 08:30 07/13/21 11:00 . . .
3 1 activity c 07/13/21 09:00 07/13/21 12:00 . . .
4 1 activity d 07/13/21 11:30 07/13/21 13:30 . . .
5 1 activity e 07/13/21 11:40 07/13/21 13:00 . . .
6 1 activity b 07/13/21 14:30 07/13/21 16:00 . . .
7 1 activity b 07/13/21 16:30 07/13/21 17:00 . . .
8 2 activity a 07/13/21 08:00 07/13/21 09:30 . . .
9 2 activity b 07/13/21 09:00 07/13/21 10:00 . . .
...............
t3.1 t3.2t2.1t1.1 t1.2t0
→
⟲
×
→
a
t4.1b
t4.2∧
c
t4.3d
t4.4τ
t2.2∧
b
t2.3e
t2.4
fig. 1: example of a process tree t0. subtrees are highlighted in gray
including various pis calculated for block-structured models. sect. 4 presents
related work and tools. finally, sect. 5 concludes this paper.
2 preliminaries
event data , as considered in process mining [1], describe recorded process exe-
cutions. table 1 shows an example of an event log. each row corresponds to an
event capturing the execution of a process activity. each event is assigned to a
case by a case-id. for instance, the first event in table 1 shows that activity a
was executed on 07/13/21 from 08:00 to 09:30 for case 1. events assigned the
same case-id are also referred to as a trace.
cortado uses process trees representing block-structured process models that
are a subclass of sound workflow-nets (wf-nets). fig. 1 shows an example tree
t0. each inner node, including the root node, represents an operator that spec-
ifies the control-flow of its children. four operators exist: sequence ( →), choice
(×), loop ( ⟲), and parallelism ( ∧). leaf nodes represent process activities or the
so-called silent activity τ. fig. 2 shows the corresponding wf-net, describing
the same language as process tree t0. we use silent transitions (cf. black filledtemporal performance analysis in cortado 3
start
t1.1
t1start
t2.1
t2start
t3.1
t3
start
t3.2
t4a
t5b
t8compl.
t3.1
t11t3.1
t6c
t9
d
t10t12t3.2
compl.
t3.2
t13t2.1
compl.
t2.1
t14t7t2.2
compl.
t1.1
t15t1.1
start
t1.2
t16 t17b
t18
e
t19t20t1.2
compl.
t1.2
t21t0
t2.3
t2.4t4.1 t4.2
t4.3
t4.4
fig. 2: workflow net corresponding to process tree t0. silent transitions are used
to represent the start and completion of the corresponding blocks, i.e., subtrees.
≫≫≫ab≫≫≫≫≫≫dc≫≫≫≫≫≫ee≫≫≫
τ
t1τ
t2τ
t3a
t5b
t8τ
t11τ
t14τ
t7τ
t2τ
t4τ
t6d
t10c
t9τ
t12τ
t13τ
t14τ
t15τ
t16τ
t17e
t19≫b
t18τ
t20τ
t21
fig. 3: optimal alignment for ⟨a, b, d, c, e, e ⟩and the wf-net from fig. 2
transitions in fig. 2) to represent the start and completion for each subtree that
is not a leaf node. for a formal introduction to process trees and the translation
to and from wf-nets and process trees, we refer to [1].
alignments [2] relate observed process behavior (i.e., event data) with mod-
eled behavior (i.e., a process model). fig. 3 shows an alignment for the trace
⟨a, b, d, c, e, e ⟩and the wf-net from fig. 2. the first row of an alignment al-
ways corresponds to the given trace, ignoring the skip symbol ≫. the second row
always corresponds to a valid firing sequence from the initial to the final marking.
each column represents a move; we distinguish four types: synchronous moves
indicate a synchronization between the model and the trace, log moves indi-
cate a deviation , i.e., the current activity in the trace is not replayed in the
model, visible model moves indicate a deviation , i.e., the model executes an
activity not observed in the trace at this stage, and invisible model moves
indicate noreal deviation, i.e., a model move on a transition labeled with τ. an
alignment is optimal if it minimizes log moves and visible model moves. note
that multiple optimal alignments may exist for a given trace and a wf-net.
3 model-based performance analysis
this section introduces the model-based performance analysis approach in cor-
tado. the remainder is structured as follows. sect. 3.1 introduces various per-
formance indicators. sect. 3.2 presents the implementation in cortado from a
user’s perspective. finally, sect. 3.3 outlines the calculation and discusses open
challenges.4 d. schuster et al.
time 0 5 10 15 20 25 30 35a b c
dc
de
b
t4.1[ ]
t4.2 [ ]
t4.3 [ ] [ ]
t4.4 [ ][ ]
t2.3 [ ]
t2.4 [ ]
t3.1[ ]
t3.2 [ ][ ]
t2.1[ ][ ][ ]
t1.1[ ]
t1.2 [ ]
t0[ ]stwt
it
[ct]trace
fig. 4: example of the pis cycle (ct), service (st), waiting (wt), and idle time
(it) based on a fitting trace for process tree t0(cf. fig. 1).
3.1 defining performance indicators
fig. 4 depicts an example of the pis computed by cortado: waiting time (wt),
service time (st), idle time (it), and cycle time (ct). the pis are calculated
for a given trace and process tree t0(cf. fig. 1). at the top of fig. 4, we show
the trace, consisting of eight activities visualized as intervals. below, we show
the pis for each subtree. for instance, the first row describes t4.1. the [symbol
indicates that t4.1was started at time 0 and the symbol ]indicates its completion
at time 3. after executing t4.1,t4.2must be executed according to the process
model, cf. fig. 1. thus, t4.2is enabled directly after the completion of t4.1at
time 3. since the activity bstarts at time 6 according to the given trace, the
waiting time of t4.2is 3. the leaf nodes t4.1andt4.2belong both to the subtree
t3.1. thus, the cycle time of t3.1is 10, from the start of activity aat time 0
to the end of activity bat time 10. the service time of t3.1is 7, i.e., the union
of the service times of its leaf nodes. the waiting time of t3.1is 0 because after
the activation of t3.1at time 0, the activity awas directly executed. finally,
the idle time of t3.1is 3, which corresponds to the waiting time of t4.2.
the idle time of leaf nodes is always zero because an activity cannot be
paused since we only consider the start and completion of individual activities.
the waiting time of an inner node corresponds to the time that elapses from its
activation to the activation of its first executed leaf node. note that the root
node’s waiting time is always zero since it is immediately activated when the
first activity from the trace is executed. the root node is immediately closed
when the last activity is executed. once a subtree is active and a first leaf node
of this subtree has already been executed, periods in which no leaf node of the
subtree is being executed are considered idle time. the execution of invisible leaf
nodes happens instantly and does not cause any waiting, service, or idle time.temporal performance analysis in cortado 5
(a) mapping max service times onto the process tree using traces corresponding to the
selected variants 6., 7., and 8.
(b) pis for the selected sub-
tree per variant and overall.
(c) selected subtree’s ser-
vice time for all variants.
(d) color map settings.
fig. 5: example of the model-based performance functionality in cortado
for example, between closing t3.1and opening t3.2at time 10 (cf. fig. 4) the
invisible leaf node t2.2is executed (cf. fig. 1). however, this execution is not
visualized in fig. 4 as it is irrelevant for the pis. finally, the cycle time of any
(sub-)tree is the sum of its waiting, service, and idle times.
3.2 realization in cortado
we refer to [11] for a general introduction to the tool and details on cortado’s
architecture. cortado is available as a standalone build and can be downloaded
from https://cortado.fit.fraunhofer.de. fig. 5 shows screenshots of the model-
based performance analysis functionality. fig. 5a shows the entire user interface6 d. schuster et al.
p1...
pnactivity
t1...p′
1
p′
m
(a) initial case/before splittingp1...
pnactivity
start
t1,sp0activity
complete
t1,c...p′
1
p′
m
(b) after splitting
fig. 6: wf-net preparation for performance analysis—splitting visible transitions
(ui). the trace variants from the event log are visualized in the lower left ui-
component, called the variant explorer. all shown variants in fig. 5a are fitting
the process tree, which is indicated by the green check-mark to the left of each
variant. variants 6, 7, and 8 are used for the model-based performance analysis
because their performance analysis button is non-gray. as such, a user can in-
dividually select variants, i.e., traces corresponding to the variants, that should
be used for performance analysis by pressing the performance analysis button.
in the lower right ui-component (cf. fig. 5a), a color map is displayed that cur-
rently shows the max service times in the tree. note the subtree selected by the
user highlighted in red (cf. fig. 5a). the same ui-component displaying the color
map (cf. fig. 5a) also provides performance statistics for the selected subtree (cf.
fig. 5b). cortado provides the pis for this subtree either per variant or for all
selected variants, i.e., overall performance (cf. fig. 5). fig. 5c shows the service
time statistics for the overall performance (all incorporated variants, i.e., 6, 7,
and 8) for the selected subtree. as shown in fig. 5d, the color map can be fully
configured; all four pis can be shown. further, cortado offers a second mode
called variant comparison next to mode all nodes (fig. 5d), currently selected.
thevariant comparison mode allows comparing the performance of a variant
to all other variants. therefore, a user must select a single variant in the variant
explorer by clicking on the performance button. the color map then shows how
the performance of the selected variant compares to all other variants.
3.3 calculating pis and dealing with non-fitting traces
this section briefly outlines the computation of the presented pis. first, we con-
vert a given process tree into a wf net, as exemplified in fig. 2. next, we split
each non-silent transition, which represent a process activity, into two transitions
indicating the start and the completion of the related activity. fig. 6 illustrates
this splitting. a non-silent transition t1labeled activity is split into two transi-
tions t1,1, representing the start of activity , and t1,2, representing its completion.
next, we calculate an optimal alignment [2] for each trace using the prepared
wf-net. since the alignment provides a full execution sequence throughout the
model, we can replay the trace and track the transitions’ execution timestamps.
in general, the reliability of model-based performance analysis depends on
the quality of the used process model, i.e., how accurately it represents reality [1,
section 3.3.3]. thus, the significance of performance analysis is low if the event
log and a model have little behavior in common. however, non-fitting traces,temporal performance analysis in cortado 7
table 2: overview of calculable pis for a process tree per alignment combination
representing the start and completion of an activity
# alignment move combinations interpretation wt st it ct
1 synchronous move on start & complete perfect activity instance ✓ ✓ ✓ ✓
2 synchronous move on start & model
move on completepartial start ✓ -✓a-
3 model move on start & synchronous
move on completepartial complete ✓b-✓a✓c
4 model move on start & complete missing activity instance as per model - - - -
5 log move missing activity instance as per log - - - -
acannot be used for the it of the actual activity instance since it cannot be paused. however, the
information on start resp. completion can be potentially used to determine the it for blocks/subtrees
containing this activity.
bcannot be used for the wt of the actual activity instance. however, the completion information
can be used to determine the wt for a subsequently executed activity.
ccannot be used for the ct of the actual activity instance. instead, the completion information can
be potentially used to determine the ct for blocks/subtrees containing this activity.
i.e., traces not entirely replayable on a process model, can be incorporated for
performance analysis, cf. [2]. also, cortado allows the utilization of non-fitting
traces for performance analysis.
table 2 provides an overview of different situations, i.e., combinations of
alignment moves for a single activity instance, and the corresponding possibili-
ties regarding their incorporation into the calculation of pis. for instance, the
first alignment move combination is a synchronous move on an activity’s start
and completion. this combination is called a perfect activity instance, i.e., we
could replay the start and the completion of an activity in the model as it oc-
curred in the event data. reconsider the example in fig. 4 where each activity
from the trace corresponds to a perfect activity instance. we can utilize the in-
formation from a perfect activity instance for all four indicators. in the second
combination, we only know when an activity started, i.e., a synchronous move
on the activity’s start. however, we do not know precisely when it was com-
pleted as we observe a model move on complete. in this case, we can utilize the
timing information from the synchronous move to calculate waiting times and
cycle times of corresponding blocks and the entire process model. the third case
describes a partial complete. this case is particularly interesting because many
event logs do not contain two timestamps for each process activity in practice.
instead, only completion timestamps are available. under these circumstances,
we can still compute waiting, idle, and cycle times, cf. table 2. finally, we can-
not use the alignment information for any pi calculation in the fourth and fifth
cases.
although non-fitting traces can be incorporated for performance analysis (cf.
table 2), the nature of alignments—multiple optimal alignments may exist for a
given trace and model—adds a randomness factor to the performance analysis.
a detailed examination of this problem is outside this paper’s scope; instead,
fig. 7 illustrates an example of the problem. fig. 7b shows different optimal
alignments for a trace (cf. fig. 7a) and the wf-net from fig. 2 after splitting
transitions (cf. fig. 6). using these different alignments to compute the service8 d. schuster et al.
a
bc e
t 0 5 10 15 20
⟨astart, acomplete, bstart, cstart, ccomplete, estart, bcomplete, ecomplete ⟩
(a) non-fitting trace and its sequential representation, used for alignment calculation
a
starta
completeb
startc
start≫ ≫c
completee
startb
completee
complete
a
start
t5,sa
complete
t5,cb
start
t7,s≫b
complete
t7,sb
start
t18,s≫e
start
t19,sb
complete
t18,ce
complete
t19,c
0 5 6 - - - - 19 20 21
service time of the root node: st(t0) = (5 −0) + (21 −19) = 7
a
starta
completeb
start≫ ≫c
start≫c
complete≫e
startb
completee
complete
a
start
t5,sa
complete
t5,cb
start
t7,sb
complete
t7,sd
start
t10,sc
start
t9,sd
complete
t10,cc
complete
t9,cb
start
t18,se
start
t19,sb
complete
t18,ce
complete
t19,c
0 5 6 - - 7 - 8 19 - 21
service time of the root node: st(t0) = (5 −0) + (8 −7) + (21 −19) = 8
a
starta
complete≫ ≫b
startc
startc
completee
startb
completee
complete
a
start
t5,sa
complete
t5,cb
start
t7,sb
complete
t7,sb
start
t18,s≫ ≫e
start
t19,sb
complete
t18,ce
complete
t19,c
0 5 - - 6 - - 19 20 21
service time of the root node: st(t0) = (5 −0) + (21 −6) = 20
(b) optimal alignments for the given trace and the wf-net from fig. 2 after preparation
(cf. fig. 6). for simplicity, invisible model moves are omitted. below each synchronous
move, we show the respective timestamp. perfect instances (cf. table 2) are colored.
fig. 7: example of a non-fitting trace that causes unreliable performance analysis
results, e.g., the service time of t0depends on which optimal alignment is used
time of the process tree root, i.e., st(t0), we end up with three different values
because each alignment finds different perfect activity instances (cf. table 2).
since only perfect activity instances can be used for service time calculation (cf.
table 2), the service time depends on the optimal alignment found. cortado,
therefore, warns the user if non-fitting traces are used for performance analysis.
4 related work and tools
this section provides a brief overview of related work and tools to highlight
the differences in the proposed approach. note that an extensive and complete
overview is outside this paper’s scope. the fundamental idea of analyzing the
temporal performance of a process and enriching process models with perfor-
mance statistics has been discussed in [1, chapter 9], [6, chapter 7], and [4,
chapter 10]. in [2, chapter 9], the author describes how alignments can be uti-
lized for performance analysis for petri nets. the usage of alignments for the
performance analysis of yawl models has been shown in [3].
we surveyed commercial and academic tools: abbyy timeline, apromore [7],
aris process mining, celonis, disco, ibm process mining, minit, and thetemporal performance analysis in cortado 9
prom [5] plugins: inductive visual miner [9], replay log in yawl net [10],
discover using the statechart workbench [8], and replay a log on petri net for
performance analysis [2]. all commercial tools and the inductive visual miner
provide performance analysis for directly-follows-graphs (dfg). a dfg is a
directed graph representing the directly follows relation of process activities. the
expressiveness of a dfg is, however, limited [12] compared to the expressiveness
of, e.g., process trees. performance analysis for non-dfg models is only sup-
ported by apromore, aris, and the prom plugins. the plugin discover using
the statechart workbench [8] also supports hierarchical performance analysis of
process trees as cortado, but it only offers cycle time statistics per block. in
contrast, cortado’s approach calculates various pis for each block.
5 conclusion
this paper presented the performance analysis functionality of cortado. fo-
cusing on block-structured models, pis—we presented cycle, idle, waiting, and
service time—can be calculated for each block, each of which represents a part
of the overall process model. the main challenges for future work remain the
scalability of the alignment computation and the highlighted problem of incor-
porating non-fitting traces in model-based performance analysis.
references
1. van der aalst, w.m.p.: data science in action. springer (2016)
2. adriansyah, a.: aligning observed and modeled behavior. ph.d. thesis (2014)
3. adriansyah, a., van dongen, b., piessens, d., wynn, m., adams, m.: robust
performance analysis on yawl process models with advanced constructs. journal of
information technology theory and application (jitta) 12(3) (2012)
4. carmona, j., van dongen, b.f., solti, a., weidlich, m.: conformance checking -
relating processes and models. springer (2018)
5. van dongen, b.f., de medeiros, a.k.a., verbeek, h.m.w., weijters, a.j.m.m.,
van der aalst, w.m.p.: the prom framework: a new era in process mining tool
support. in: applications and theory of petri nets. springer (2005)
6. dumas, m., rosa, m.l., mendling, j., reijers, h.a.: fundamentals of business
process management. springer (2013)
7. la rosa, m., reijers, h.a., van der aalst, w.m., dijkman, r.m., mendling, j., du-
mas, m., garc´ ıa-ba˜ nuelos, l.: apromore: an advanced process model repository.
expert systems with applications 38(6) (2011)
8. leemans, m., van der aalst, w.m.p., van den brand, m.g.j.: hierarchical perfor-
mance analysis for process mining. association for computing machinery (2018)
9. leemans, s.: robust process mining with guarantees. ph.d. thesis (2017)
10. piessens, d., wynn, m.t., adams, m., van dongen, b.f., et al.: performance
analysis of business process models with advanced constructs (2010)
11. schuster, d., van zelst, s.j., van der aalst, w.m.p.: cortado—an interactive tool
for data-driven process discovery and modeling. in: application and theory of
petri nets and concurrency. springer (2021)
12. van der aalst, w.m.: a practitioner’s guide to process mining: limitations of the
directly-follows graph. procedia computer science 164(2019)