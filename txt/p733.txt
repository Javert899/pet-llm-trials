a knowledge-based integrated approach for
discovering and repairing declare maps
fabrizio m. maggi, r.p. jagadeesh chandra bose, and wil m.p. van der aalst
eindhoven university of technology, the netherlands.
ff.m.maggi, j.c.b.rantham.prabhakara, w.m.p.v.d.aalst g@tue.nl
abstract. process mining techniques can be used to discover process
models from event data. often the resulting models are complex due to
the variability of the underlying process. therefore, we aim at discovering
declarative process models that can deal with such variability. however,
for real-life event logs involving dozens of activities and hundreds or
thousands of cases, there are often many potential constraints resulting
in cluttered diagrams. therefore, we propose various techniques to prune
these models and remove constraints that are not interesting or implied
by other constraints . moreover, we show that domain knowledge (e.g.,
a reference model or grouping of activities) can be used to guide the
discovery approach. the approach has been implemented in the process
mining tool prom and evaluated using an event log from a large dutch
hospital. even in such highly variable environments, our approach can
discover understandable declarative models.
keywords: process discovery, model repair, linear temporal logic,
declare
1 introduction
imperative process models such as bpmn, uml ads, epcs, and petri nets are
often used to design and enact operational processes. the procedural nature of
such models also helps to guide users by showing \what's next?". unfortunately,
imperative process models are less appropriate for \turbulent" environments
characterized by the terms variability and exibility . consider, for instance, a
physician in a hospital that requires exibility to take into account individual
characteristics of a patient. but, also physicians have to follow regulations and
guidelines and may only deviate for good reasons. in such cases, declarative
process models are more eective than the imperative ones [15, 12, 2].
instead of explicitly specifying all possible sequences of activities in a pro-
cess, declarative models implicitly specify the allowed behavior using constraints,
i.e., rules that must be followed during execution. in comparison to imperative
approaches, which produce closed models (\what is not explicitly specied is
forbidden"), declarative languages are open (\everything that is not forbidden
is allowed"). in this way, models oer exibility and still remain compact.
declarative languages have been successfully applied in the context of pro-
cess discovery [7, 5, 6, 11, 10]. declare , a declarative process modeling languagebased on ltl (linear temporal logic) [13], was introduced in [2].1declare is
characterized by a user-friendly graphical representation and formal semantics
grounded in ltl. a declare map is a set of declare constraints each one with
its own graphical representation and ltl semantics (the constraints used in this
paper are introduced in table 1, see [2] for a full overview of declare).
declare maps are interesting in the context of process mining [1]. one can dis-
cover declare maps from event logs (extracted from audit trails, transaction logs,
and databases) without preexisting models and knowledge [10]. it is also fairly
easy to check conformance of an event log with respect to declare model and
diagnose deviations and bottlenecks. the unstructured nature of many real-life
processes |demonstrated by variability in event logs| suggests using declara-
tive models for process mining. however, when discovering a declare map from
an event log, there are often too many candidate constraints. showing all possible
constraints often results in a cluttered declare map. the number of constraints
in a declare map can be reduced by identifying only those constraints that are
the most interesting for the user. as proposed in [10], the \interestingness" of
a constraint can be dened using association rules metrics such as support and
condence. this paper proposes two sets of techniques to further improve the
relevance of discovered declare maps: (1) techniques to prune discovered process
maps using various reduction and simplication rules and (2) techniques using
apriori domain knowledge.
a constraint between two activities (e.g., ais eventually followed by b)
is redundant if a stronger constraint holds (e.g., ais directly followed by b).
there may also be constraints that are implied by other constraints (e.g., if ais
followed by bandbis followed by c, then ais also followed by c).by selectively
removing such redundant constraints, we can simplify the model without losing
information.
furthermore, using domain knowledge, activities in the log can often be
grouped in dierent categories. hence, it is possible to focus the discovery only
on constraints involving activities belonging to the same group ( intra-group
constraints ) or on constraints involving activities belonging to dierent groups
(inter-group constraints ). there may also be a reference map providing another
source of domain knowledge. instead of discovering a declare map from scratch,
it is possible to generate a new map by repairing the reference map. the refer-
ence map is modied using information retrieved from the event log, e.g., existing
constraints are strengthened, weakened or refuted and important missing con-
straints are added.
the paper is structured as follows. in section 2, we briey introduce the
declare language and the declare maps discovery approach proposed in [10]. in
section 3, we describe how we remove redundant constraints to create simpler
declare maps. here, we also explain how to use domain knowledge for discovering
and repairing declare maps. the proposed techniques can be integrated in a
general framework as shown in section 4. in section 5, we validate our approach
using a case study in a dutch hospital. section 6 concludes the paper.
1in the remainder, ltl refers to the version of ltl tailored towards nite traces [9].2 preliminaries
table 1 shows the graphical notation and the meaning of the declare constraints
used in this paper. consider, for example, the response constraint. this con-
straint indicates that if aoccurs, bmust eventually follow. therefore, this
constraint is satised for traces such as t1=ha; a; b; c i,t2=hb; b; c; d i,
andt3=ha; b; c; a; b i, but not for t4=ha; b; a; c ibecause, in this case, the
second ais not followed by a b.
in [10], the authors use the seminal apriori algorithm introduced in [3] for
discovering declare maps. in this way, only constraints involving frequent ac-
tivities are taken into consideration. the authors show that the apriori-based
approach signicantly improves the computational complexity and accuracy of
table 1. graphical notation and textual description of some declare constraints
constraint meaning graphical representation
responded existenceif a occurs then
b occurs before
or after a
co-existenceif a occurs then b occurs
before or after a
and vice versa
responseif a occurs then
eventually b occurs
after a
precedenceif b occurs then
a occurs
before b
successionfor a and b
both precedence and
response hold
alternate responseif a occurs then eventually
b occurs after a without other
occurrences of a in between
alternate precedenceif b occurs then
a occurs before b without
other occurrences of b in between
alternate successionfor a and b
both alternate precedence
and alternate response hold
chain responseif a occurs then
b occurs in the next
position after a
chain precedenceif b occurs then
a occurs in the next
position before b
chain successionfor a and b
both chain precedence
and chain response hold
not co-existencea and b
cannot occur
together
not successionif a occurs then
b cannot eventually occur
after a
not chain successionif a occurs then
b cannot occur in the next
position after athe uncovered declare maps with respect to the brute force approach where all
activities in the log are considered. in the same approach, the constraints in the
discovered map with a support lower than a given threshold are removed. the
support of a constraint is evaluated based on the number of traces where the
constraint is non-vacuously satised [8]. we explain vacuity using an example.
consider again the response constraint and the traces mentioned above. the
constraint is satised in t1,t2andt3. however, in t2, the response constraint
is satised in a trivial way because anever occurs. in this case, we say that
the constraint is vacuously satised . the validity of a constraint is, therefore,
more signicant if there is a high percentage of traces where the constraint is
non-vacuously satised.
3 pruning discovered maps
declare maps can be discovered by smartly testing all possible constraints. how-
ever, as section 3.1 shows this may result in an explosion of discovered con-
straints. in section 3.2, we illustrate how redundant and \less relevant" con-
straints can be pruned out to reduce the number of constraints in a map and
improve its readability. in section 3.3, we explain how domain knowledge can
help guiding the discovery process towards the identication of the most inter-
esting constraints.
3.1 the problem of discovering too many constraints
the support measure assessing the signicance of a constraint (i.e., the frac-
tion of traces satisfying the constraint non-vacuously) is not robust enough to
prune constraints. we have discovered declare maps on several event logs (both
synthetic as well as real-life logs) and our experiences show that the number of
discovered constraints is often beyond human comprehension. table 2 depicts
the number of declare constraints discovered for several logs and varying de-
grees of support. we see that even for very high support values, the number
of discovered constraints is too high to be visualized in a single understandable
diagram.
moreover, several of these constraints are considered to be trivial by domain
experts. analysts are more interested in nding patterns that are surprising and
table 2. number of discovered constraints for varying support thresholds across dif-
ferent event logs (log dis described in section 5)
log#cases #event #events support/#discovered constraints (dc)
classes supp #dc supp #dc supp #dc
a 1.104 12 11.855 60 515 80 439 100 174
b 221 37 15.643 60 2.647 80 2.248 100 1.767
c 223 74 10.664 60 13.625 80 8.885 100 453
d 289 152 10.215 60 9.570 80 7.178 100 195interesting. there is a need for robust methods for discovering such non-trivial
constraints. in this paper, we address this through two directions: (1) pruning
discovered constraints to lter out redundant ones and (2) exploiting domain
knowledge in the form of reference maps and grouped activities.
3.2 mine only for surprising (non-trivial) constraints
when discovering a declare map, there are many constraints that are redundant
thus cluttering the map. therefore, we propose various techniques to remove
redundant constraints.
removing weaker constraints implied by stronger constraints. a con-
straint between two activities is redundant if a stronger constraint holds be-
tween the same activities according to the constraint hierarchy shown in fig. 1.
for example, if a response constraint and a responded existence constraint hold
between the same activities aandb, the responded existence constraint is re-
dundant and can be discarded. note that if a chain succession constraint and
aresponse constraint hold between activities aandb, then the response con-
straint is redundant because there is a directed path of solid arrows from chain
succession toresponse in fig. 1.
co-existence
responded existenceresponse precedencesuccessionalternate response alternate precedencealternate successionchain precedencechain successionnot co-existence
not succession
not chain successionchain response
dominates dominates
transitive transitive 
fig. 1. the solid arcs indicate which constraints dominate other constraints, e.g., suc-
cession implies response . a constraint can be removed if there exists a directed path
to it from another constraint involving the same activities, e.g., if a succession con-
straint holds, then the corresponding response ,precedence ,co-existence , and responded
existence constraints are all redundant. the dashed arcs indicate constraints that are
transitive. for example, using transitive reduction we may remove a redundant prece-
dence constraint between aandcprovided that the same constraint holds between a
andbandbandc(a) declare map composed of
response constraints before the
transitive reduction
(b) declare map composed of
response constraints after the
transitive reduction
fig. 2. declare map composed of response constraints before and after the transitive
reduction
(a)
 (b)
 (c)
 (d)
fig. 3. transitive reduction for co-existence constraints: the original declare map (a)
can be pruned in three dierent ways using translative reduction (b, c, and d)
transitive reduction for declare maps. redundancy may also be caused by
the interplay of three or more constraints. removing such redundancies greatly
improves the readability of discovered declare maps.
consider the example in fig. 2(a). in this case, the response constraint be-
tween aandcis redundant, because it belongs to the transitive closure of the
set composed of the response constraints between aandband between band
c. for the same reason, several other constraints are also redundant in this map.
to prune these redundant constraints, we use techniques for transitive reduction
of a directed graph. in particular, we have implemented the algorithm presented
in [4], which can deal with cyclic graphs. applying this algorithm on the input
map in fig. 2(a) yields the pruned map in fig. 2(b).
not all constraints can be pruned using transitive reduction. for instance,
if we take the example in fig. 4(d), none of the constraints in the map can
be pruned out because the not co-existence is not transitive and none of the
constraints in the map is redundant.2the dashed arcs in fig. 1 show for which
declare constraints transitive reduction can be applied.
2ifais not co-existent with b, and bis not co-existent with c, then we cannot
conclude that ais also not co-existent with c. for example, consider traces ha; c i,
hb; d i. in these traces, the rst two constraints hold, whereas the third one does
not.(a)
 (b)
 (c)
 (d)
fig. 4. examples illustrating transitive reduction: (a) declare map composed of het-
erogeneous types of constraints before the transitive reduction, (b) declare map after
the transitive reduction, (c) map for which the chain response constraint cannot be
pruned, and (d) map illustrating that transitive reduction cannot be applied to not
co-existence constraints
the co-existence constraint is \bidirectional" and can be considered as a
special case for transitive reduction. for example, for the map in fig. 3(a), there
are three possible reductions (indicated in fig. 3(b){(d)).
the transitive reduction can also be used in case some of the constraints
involved are stronger. consider for example fig. 4(a). the response constraint
between aandcbelongs to the transitive closure of the set composed of the
chain response constraint between aandband the response constraint between
bandc. the chain response between aandb, implies the weaker response
constraint. hence, we can indeed apply transitive reduction and remove the
response constraint between aandc. fig. 4(b) shows the resulting map. in
contrast, in the example in fig. 4(c), the chain response constraint cannot be
pruned out because it indicates that the relation between aandcis stronger
than a simple response.
prune a declare map through reduction rules. another way to remove
redundant constraints is by using reduction rules. for example, reduction rules
can be used to prune out redundant not co-existence constraints from a map.
for the reduction rules dened here, we use the concept of co-existence path . a
co-existence path is a sequence of activities in a declare map connected through
co-existence constraints or through constraints stronger than co-existence (e.g.,
succession ,alternate succession , and chain succession ). for example, ha; c; e i
is a co-existence path in fig. 6(a){(d), and he; d; c iis a co-existence path in
fig. 7(a) and (b).
we illustrate the triangular reduction rule for not co-existence using the
example map in fig. 5(a). the co-existence constraints ensure that both aand
care in or out. hence, one not co-existence constraint is sucient to exclude b
in case aandcoccur. the resulting maps are shown in fig. 5(b) and (c).
another reduction rule is shown in fig. 6. here, instead of having one activity
connected through not co-existence constraints to a coexistence path, we have the
elements of two coexistence paths connected pair-wise through not co-existence
constraints. also in this case, only one of the not co-existence constraints is
enough (fig. 6(b){(d)) to imply all the original constraints in fig. 6(a).(a)
 (b)
 (c)
fig. 5. triangular reduction rule for not-coexistence constraints. the reduced map is
not unique: (a) original map, (b) pruned map, and (c) another pruned map
(a)
 (b)
 (c)
 (d)
fig. 6. reduction rule on parallel co-existence paths for not-coexistence constraints.
the original map (a) can be pruned in three dierent ways (b, c, and d)
as shown in fig. 7, the reduction rules in fig. 5 and in fig. 6 can be applied
in combinations and, also, with co-existence paths composed of heterogeneous
types of declare constraints. in fig. 7(a), the original map contains three parallel
co-existence paths: ha; b i,he; d; c iand hf; g i. in the pruned map depicted in
fig. 7(b), the not co-existence constraint between aanddand the not co-
existence constraint between dandgcan be removed through the triangular
reduction rule. then, the not co-existence constraint between bandcand
thenot co-existence constraint between candgcan be removed through the
reduction rule on parallel co-existence paths.
note that these rules are merely examples. currently, we are developing a
much larger set of reduction rules.
(a) original map
 (b) pruned map
fig. 7. four not-coexistence constraints can be removed using the two reduction rulesevent logapriori declare map 
(reference model)
conceptual groupingsdeclare miner
discovered/repaired 
declare mapoptional
optionalfig. 8. using additional domain knowledge to discover a meaningful declare map
3.3 guiding the discovery process through domain knowledge
the techniques provided above may still fail to single out interesting constraints
as they do not consider any domain knowledge. therefore, we propose several
means of integrating domain knowledge during the discovery process. the rst
class of techniques deals with repairing an apriori declare map (called a reference
map) provided by a domain expert while the second class of techniques deals
with discovering constraints based on conceptual groupings of activities . fig. 8
depicts the process of declare map discovery/repair based on apriori domain
knowledge. note that reference map and the groupings are optional.
repair a declare map. given an apriori declare map, it can be repaired in
several ways:
{we can use the set of templates (i.e., constraint types) and activities provided
in the initial map as a reference and discover constraints pertaining to those
templates and activities from the event log.
{we can try to repair the provided declare map based on the log by strength-
ening constraints or removing constraints that no longer hold.
{one of the challenges when discovering declare maps from event data is
to choose suitable thresholds for objective measures such as support and
condence [10]. given an apriori declare map, we can learn the thresholds
from the log and use them to enrich the map by discovering additional con-
straints. one can distinguish between two classes of thresholds, (a) global
thresholds and (b) local thresholds. global thresholds hold for all constraints
in the apriori map (e.g., the minimum support for all constraints), while lo-
cal thresholds vary based on the constraint type (e.g., the minimum support
forresponse might be dierent from the minimum support for succession ).
use activity ontologies to discover declare maps. activities in a log
can typically be grouped (clustered) based on their functionality, e.g., using an
ontology. for example, a log pertaining to the treatment procedures of can-
cer patients in a hospital contains activities related to patient administration,
diagnosis, surgery, therapy, etc. given such a grouping of activities, we can dis-
tinguish between two classes of constraints:group 1 group 2activity constraint(a) intra-group constraints
group 1 group 2 (b) inter-group constraints
fig. 9. inter- and intra-group constraints
{intra-group constraints: this refers to the class of constraints where the activ-
ities involved in a constraint all emanate from a single group (see fig. 9(a)).
in many scenarios, analysts would be interested in nding constraints be-
tween activities pertaining to a functionality, to a particular department in
an organization, etc. for example, in a hospital event log, an analyst would
be interested in nding relationships/constraints between the various admin-
istration activities.
{inter-group constraints: this refers to the class of constraints where the activ-
ities involved in a constraint belong to two dierent groups (see fig. 9(b)).
for example, in a hospital log, an analyst would be interested in constraints
between activities involved in surgery and therapy.
4 framework for discovering/repairing declare maps
we have developed and implemented a comprehensive framework for discover-
ing/repairing declare maps. fig. 10 shows that the framework consists of the
following building blocks (all implemented in prom).
event
logassociation
rule miningfrequent
activity setsinteresting
measuresdomain
knowledge
disposition
generationcandidate
dispositionsdeclare
miner
declare
mappruninginteresting
declare map
fig. 10. framework for discovering/repairing declare maps. the ellipses depict in-
put/output objects and the rounded rectangles depict steps{association rule mining: using the apriori association rule mining algo-
rithm, we rst identify the frequent activity sets (of size at most 2).3this
process can be assisted through interestingness measures such as support and
condence as well as through domain knowledge such as conceptual grouping
of activities and an initial map. the result of this step is a set of frequent
activity sets satisfying selected criteria.
{disposition generation: this step corresponds to the generation of candi-
date dispositions based on the frequent activity sets uncovered in the previ-
ous step. the candidate dispositions are the permissible permutations of the
activity sets and are necessary to instantiate declare constraints. for exam-
ple, if fa; bgis a frequent activity set, the candidate dispositions are ( a; b)
and ( b; a). one can use additional interestingness criteria such as diversity
to lter out some candidate dispositions.
{declare miner: this step corresponds to instantiating the ltered disposi-
tions with constraints and assessing their signicance based on the event log
using metrics such as support and condence as well as domain knowledge
such as an initial map.
{pruning: this step corresponds to pruning the discovered declare map using
the concepts presented in section 3.2 (removing weaker constraints, transi-
tive reduction, reduction rules, etc.).
we have implemented the functionalities described in fig. 10 as part of the de-
clare miner , a plug-in of the process mining tool prom (www.processmining.org).
5 experiments and validation
we evaluated the approach presented in this paper using a real-life event log
originating from a large dutch academic hospital. the log contains events re-
lated to the treatment of patients diagnosed for bladder cancer. bladder cancer
is a life-threatening disease and each patient must be treated in a dierent way,
depending on the patient's characteristics (e.g., age, gender), their histology,
stage of cancer and depth of invasion. there are several possible tests and treat-
ments the doctors can decide to use. due to the high variability of the treatment
process, it is impossible to create or discover an imperative model. therefore,
we apply the declare miner .
here, we report results based on an event log with 289 log traces (patients)
containing 152 event classes and 10.215 events. in table 2, we have already
shown how many constraints would be discovered from this log (log din the
table) by pruning the model only based on support. table 3 shows the number of
discovered constraints after removing redundant constraints using the pruning
techniques presented in section 3.2. we can see a signicant reduction (84%,
81% and 35% for support equal to 60, 80 and 100 respectively) in the number
of constraints. nevertheless, as shown in table 3, even for the reduced maps the
number of constraints is still too high for the maps to be readable.
3this is due to the fact that the declare templates considered in this paper comprise
one or two activities.table 3. eect of applying reduction techniques of section 3.2
support 60 80 100
discovered constraints without reduction 9.570 7.178 195
discovered constraints with reduction 1.522 1.316 127
reduction (percentage) 84% 81% 35%
table 4. sample activity groups
g1: administration g2: surgery g3: therapy
first outpatient visit cysto-urethroscopy intravesical chemo-/immunothe
order fee transurethral resection exercise therapy
contact after-pa result urethrot.int.blind endocervical electr.
phone consult t.u.proefexcisie bladder wall peripheral infusion insertion
information/education t.u.r.prostaat. urological beh. and dilatations
dbc registration code
coordination activities
short-out map cost anesthesia
emergency assistance
to reduce the number of discovered constraints, it is possible to use domain
knowledge as a criterion to \guide" the discovery task and to discriminate be-
tween constraints that are more interesting and others that are less relevant from
the domain point of view. to illustrate the conceptual grouping of activities pre-
sented in section 3.3, we dene three groups of activities (shown in table 4).
the rst group includes administrative activities ( g1), in the second group there
are surgery-related activities ( g2), and the last group includes therapy-related
activities ( g3).
fig. 11 depicts the discovered inter-group constraints . the map has been dis-
covered with a minimum support equal to 60 and the constraints in the map
are sorted by condence. their colors range from purple (indicating the highest
condence) to white (indicating the lowest condence). in fig. 11, the three ac-
tivity groups are highlighted with a dashed line. note that the constraints in the
map connect activities belonging to dierent groups and that there are no con-
nections between activities belonging to the same group. this way, we can focus
our analysis on inter-group relations. for example, if we consider the connections
between group g1 and group g2, we can see that after a cysto-urethroscopy and
a transurethral resection the patient is registered and the order fee is payed ( al-
ternate response ). also, activity short-out map cost for anesthesia is preceded
by cysto-urethroscopy ( alternate precedence ) and is followed by transurethral re-
section ( alternate response ). on the other hand, if we consider the connections
between group g2 and group g3, we can see that an intravesical chemother-
apy is preceded by a transurethral resection ( alternate precedence ) and by a
cysto-urethroscopy ( precedence ).
fig. 12 shows the discovered intra-group constraints . in this case, the con-
straints in the map connect activities belonging to the same group, whereas con-
nections between activities belonging to dierent groups are not shown. there-
fore, we focus our process analysis on intra-group relations. for example, in groupg2g1g3fig. 11. inter-group constraints
g2 g1
fig. 12. intra-group constraints
g2, we can see that, in most of the cases, activity cysto-urethroscopy is followed
by transurethral resection and, vice versa, transurethral resection is preceded byfig. 13. reference map made using the declare designer
fig. 14. repaired map using the approach in section 3.3
cysto-urethroscopy ( alternate succession ). in group g1, the rst visit is followed
by order fee payment ( alternate response ) and the payment is followed by the
patient registration ( response ).
instead of discovering a declare map from scratch, it is also possible to pro-
vide domain knowledge in the form of a reference declare map (cf. section 3.3).
this map is repaired based on the information from the event log. fig. 13 shows
a hand-made declare map. the map was created using the declare designer [14]
and describes the expected process behavior. this map can be given as input
to the declare miner . we repair the map by discovering constraints of the same
type as the ones in the map in fig. 13 and by using the same set of activities.
we search for constraints with a support greater or equal to 80.
the repaired map is shown in fig. 14. in the repaired map, some con-
straints are the same as in the initial map (e.g., the succession constraints
between histological examination and nursing period). some constraints have
been strengthened (e.g., the precedence constraint between preoperative screen-ing and transurethral resection becomes a succession and the response constraint
between transurethral resection and nursing period also becomes a succession ).
moreover, the resulting declare map shows that constraints can be removed (e.g.,
theinitconstraint), added (e.g., the response constraint between preoperative
screening and histological examination) or replaced by another constraint (e.g.,
theprecedence constraint between nursing period and dbc registration code has
been replaced by a response constraint).
6 conclusion
as shown in this paper, one may easily nd thousands of constraints for event
logs with only a moderate number of activities (see table 2). this results in
incomprehensible declare maps despite the assumed ability of declarative lan-
guages to deal with highly variable processes. however, most constraints in such
maps are not interesting or redundant. we developed new techniques to re-
move such constraints and only conserve the most interesting ones. moreover,
we showed that domain knowledge in the form of reference models or activity
groupings can be used to further guide the discovery process. the approach has
been implemented as a prom plug-in and experiments show that it is indeed
possible to produce simple, yet informative, declare maps. in this paper, we re-
ported on a case study involving a bladder cancer treatment process of a dutch
hospital.
references
1. van der aalst, w.: process mining: discovery, conformance and enhancement of
business processes. springer (2011)
2. van der aalst, w., pesic, m., schonenberg, h.: declarative workows: balancing
between flexibility and support. computer science - r&d pp. 99{113 (2009)
3. agrawal, r., srikant, r.: fast algorithms for mining association rules. in: vldb
1994. pp. 487{499 (1994)
4. case, m.l.: online algorithms to mantain a transitive reduction. in: depart-
ment of eecs, university of california, berkeley, cs 294-8 (2006)
5. chesani, f., lamma, e., mello, p., montali, m., riguzzi, f., storari, s.: exploiting
inductive logic programming techniques for declarative process mining. trans-
actions on petri nets and other models of concurrency (topnoc), special issue
on concurrency in process-aware information systems 5460, 278{295 (2009)
6. di ciccio, c., mecella, m.: mining constraints for artful processes. in: bis. pp.
11{23 (2012)
7. goedertier, s., martens, d., vanthienen, j., baesens, b.: robust process discovery
with articial negative events. journal of machine learning research 10, 1305{
1340 (2009)
8. kupferman, o., vardi, m.y.: vacuity detection in temporal model checking. in-
ternational journal on software tools for technology transfer pp. 224{233 (2003)
9. lichtenstein, o., pnueli, a., zuck, l.d.: the glory of the past. in: proceedings of
the conference on logic of programs. pp. 196{218. springer (1985)10. maggi, f.m., bose, r.p.j.c., van der aalst, w.m.p.: ecient discovery of un-
derstandable declarative models from event logs. in: ralyt e, j., franch, x.,
brinkkemper, s., wrycza, s. (eds.) caise. lecture notes in computer science,
vol. 7328, pp. 270{285. springer-verlag, berlin (2012)
11. maggi, f.m., mooij, a.j., van der aalst, w.m.p.: user-guided discovery of declar-
ative process models. in: ieee symposium on computational intelligence and
data mining. vol. 2725, pp. 192{199. ieee computer society (2011)
12. pichler, p., weber, b., zugal, s., pinggera, j., mendling, j., reijers, h.a.: impera-
tive versus declarative process modeling languages: an empirical investigation.
in: business process management workshops. pp. 383{394 (2011)
13. pnueli, a.: the temporal logic of programs. foundations of computer science,
annual ieee symposium on pp. 46{57 (1977)
14. westergaard, m., maggi, f.m.: declare: a tool suite for declarative workow mod-
eling and enactment. in: proceedings of the demo track of the ninth conference
on business process management 2011, clermont-ferrand, france, august 31st,
2011. ceur workshop proceedings, vol. 820. ceur-ws.org (2011)
15. zugal, s., pinggera, j., weber, b.: the impact of testcases on the maintainability
of declarative process models. in: bmmds/emmsad. pp. 163{177 (2011)