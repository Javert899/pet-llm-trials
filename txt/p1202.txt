data-driven process performance measurement
and prediction: a process-tree-based approach
sebastiaan j. van zelst1;2, luis f.r. santos2, wil m.p. van der aalst2;1
1fraunhofer institute for applied information technology (fit), germany
sebastiaan.van.zelst@t.fraunhofer.de
2rwth aachen university, aachen, germany
abstract. to achieve operational excellence, a clear understanding of
the core processes of a company is vital. process mining enables com-
panies to achieve this by distilling historical process knowledge based
on recorded historical event data. few techniques focus on the predic-
tion of process performance after process redesign. this paper proposes
a foundational framework for a data-driven business process redesign
approach, allowing the user to investigate the impact of changes in the
process, w.r.t. the overall process performance. the framework supports
the prediction of future performance based on anticipated activity-level
performance changes and control-ow changes. we have applied our ap-
proach to several real event logs, conrming our approach's applicability.
key words: process mining, process improvement, process redesign
1 introduction
information systems, e.g., enterprise resource planning (erp), support the
execution of a company's core processes. these systems capture at what point
in time an activity was performed for an instance of the process. process mining
techniques turn such event data into actionable knowledge [1]. for example,
various process discovery techniques exist that transform the event data into
aprocess model describing the process behavior as captured in the data [2].
similarly, conformance checking techniques quantify whether the process behaves
as recorded in the event data w.r.t. a given reference model [3].
the overarching aim of process mining techniques is to improve the process ,
e.g., decreasing the process duration while maintaining the same quality level.
yet, a relatively small amount of work focuses on data-driven techniques to sup-
port decision-makers in eectively improving the process. for example, in [4],
the authors propose to discover simulation models on the basis of recorded event
data, which can be used to simulate the process under dierent \what if" sce-
narios. in [5], a similar approach is proposed, explicitly focusing on macro-level
aspects of the process, e.g., average case duration. the work presented in this pa-
per acts in the middle of the two spectra covered by the work mentioned. similar
to [4], we measure performance on the activity-level . however, we do not learn a
complete simulation model. instead, we explain the historical behavior captured2 s.j. van zelst et al.
fig. 1: overview of our proposed framework. the current process performance
is quantied in the context of a (given) process model. anticipated performance
changes are injected to compute possible future performance.
in the event log in the context of a model specifying the process behavior. we
use the annotated model for the prediction of future behavior.
in fig. 1, we depict the proposed framework. an event log and a process
model act as the input artifacts. we compute timed partial order alignments ,
which we use to quantify the process's historical performance in the context of
the given model. our framework supports the assessment of changes in the time-
performance of activities (either waiting or service time), and it supports stacking
multiple anticipated improvements of the process. since our framework takes an
arbitrary process tree as an input, it is possible to extend it to calculate the
eect of control-ow changes. we have evaluated a prototypical implementation
of our framework using several collections of real event logs. our experiments
conrm that our framework allows us to identify the main bottlenecks of the
process. furthermore, we observe that, in some cases, the process model used as
an input inuences the measured performance of the bottlenecks identied.
the remainder of this paper is organized as follows. section 2 discusses related
work. in section 3, we present background notions. in section 4, we present our
framework, which we evaluate in section 5. section 6 concludes this paper.
2 related work
we refer to [1] for an overview of process mining. most papers on prediction,
focus on intra-case prediction , e.g., see [6]. early work, e.g., [7], learns and uses
annotated transition systems to predict possible future states of running pro-
cesses. in [8], lstm neural networks for predicting the next activity/remaining
time for a process instance are studied. data-driven global performance measure-
ment and prediction are studied less intensively. in [9], the authors structure the
eld and identify the lack of relevant work in this space. arguably the rst work
in this domain, i.e., [10], proposes to learn simulation models. in [11], a generic
framework describing the integration of data-driven simulation models in pro-
cess improvement/redesign is presented. more recently, the application of system
dynamics modeling in the context of process mining has been studied [5].data-driven process performance measurement and prediction 3
case-id instance-id activity name starting time finishing time ...
............... : : :
7 35 register(a) 2020-01-02 12:23 2020-01-02 12:25 : : :
7 36 analyze defect(b) 2020-01-02 12:30 2020-01-02 12:40 : : :
7 37 inform user(g) 2020-01-02 12:45 2020-01-02 12:47 : : :
7 38 repair(simple)(c) 2020-01-02 12:45 2020-01-02 13:00 : : :
8 39 register(a) 2020-01-02 12:23 2020-01-02 13:15 : : :
7 40 test repair(e) 2020-01-02 13:05 2020-01-02 13:20 : : :
7 41 archive repair(h) 2020-01-02 13:21 2020-01-02 13:22 : : :
8 42 analyze defect(b) 2020-01-02 12:30 2020-01-02 13:30 : : :
............... : : :
(a) example event log.a
[0;2]b
[7;17]c[22;37]
g
[22;24]e
[42;57]h
[58;59]
(b) poc of case 7 of fig. 2a.
fig. 2: example event log (fig. 2a) and partially-ordered case (poc) (fig. 2b).
3 background
event data; information systems store the historical execution of processes in
event logs . in fig. 2a, we depict an example event log. each row refers to an activ-
ity instance describing an executed activity. activity instances describe several
data attributes, e.g., the activity name, timestamps, resource, etc. the rst row
of fig. 2a describes an instance with id 35, describing activity register , executed
on january 2nd 2020, from 12:23 until 12:25, in the context of a process instance
with identier 7. activity instances referring to the same process instance com-
pose a case, e.g., in the context of case-id 7: register(a), analyze defect(b),
inform user(g), repair(simple)(c), test repair(e), archive repair(h) . hence, a
case describes a collection of activity instances . since activity instances record
a start and an end time, they may overlap in time, e.g., consider instances 37
(inform user) and instance 38 (repair (simple)). we assume a strict partial
ordering (an irreexive, anti-symmetric and transitive relation) of the activity
instances that belong to a case. in fig. 2b, we depict a partially ordered case
(poc) representation for case 7. an event log is a collection of cases.
process trees; we use process trees as a process modeling formalism, i.e.,
rooted trees in which the internal vertices represent control-ow constructs and
the leaves represent activities. in fig. 3a, we depict an example process tree. the
sequence operator (!) species sequential behavior, i.e., rst its left-most child is
executed, then its second left-most child, etc. the exclusive choice operator ()
species an exclusive choice between its children. parallel behavior is represented
by the parallel operator (^), i.e., all children are executed simultaneously/in any
order. repetition is represented by the loop operator (	). the!,, and^-
operator can have an arbitrary number of children. the 	-operator has exactly
two children. its left child is always executed, i.e., at least once. when executing
its right child, we again execute its left-most child to nish the operator. we
assume that a process tree describes a set of strict partial orders as its language,
e.g., in fig. 3b we depict one q1. due to the loop operator ( v2:1), the process
tree in fig. 3a describes an innite amount of lpo's.
partially-ordered alignments; alignments [3, chapters 7-9] quantify the be-
havior captured in an event log in terms of a reference process model. we consider
partially-ordered alignments (poas) [12]. poas align a poc with a partial or-4 s.j. van zelst et al.
!v0
av1:1
bv1:2
^v1:3
	v2:1
!v3:1
v4:1
cv5:1
dv5:2ev4:2fv3:2gv2:2hv1:4
(a) example process tree
q1. leaf vertices describe
activity labels, internal ver-
tices describe control-ow
operators.v1:1
av1:2
bv5:1c
v2:2
gv4:2
ev1:4
h
(b) labeled partial order
(lpo) that is in the lan-
guage of q1.av1:1
[0;2]bv1:2
[7;17]cv5:1[22;37]
g
v2:2
[22;24]ev4:2
[42;57]hv1:4
[58;59]
(c) partially-ordered align-
ment (poa) of the poc
in fig. 2b and the lpo in
fig. 3b.
fig. 3: example process tree (fig. 3a) and a member of its language (fig. 3b).
der in a process model's language. the elements of alignments are called moves .
an observed activity for a case that is also described by the process model is
referred to as a synchronous move , e.g., for the poc in fig. 2b the rst activity
instance describes activity a, which is in line with any partial order described
byq1. we record a synchronization as a tuple ( a; v1:1) aligning the observed
activity instance with label a, with the execution of vertex v1:1. if an activity
occurred that is not described by the model, we write ( a;), i.e., referred to
as a log move . if the model describes behavior that is not observed, written as
(; v) (here vis some leaf node), we refer to a model move . the ordering among
the moves is extracted from both the poc and the model. in fig. 3c, we depict
a poa of the poc in fig. 2b and the partial order in fig. 3b, i.e., only describ-
ing synchronous moves. the double-headed arrows represent ordering relations
that are both described by the process model and the poc. the single-headed
dashed arrow represents an order relation that is only present in the poc.
4 poa-based performance measurement and prediction
here, we present our framework for data-driven process performance measure-
ment and prediction. we focus on time-based performance, i.e., waiting ,service ,
idleand cycle time . these metrics are schematically visualized in fig. 4. in the
remainder, we describe the steps of the approach: 1.) performance quantica-
tion and 2.) performance change injection (cf. fig. 1).
4.1 performance quantication
to measure time performance, i.e., as recorded in an event log and conditional to
a given process model, we use the notion of timed partially-ordered alignments
(tpoa). in a tpoa, the moves of a poa are associated with timestampsdata-driven process performance measurement and prediction 5
fig. 4: overview of the performance metrics considered.
derived from the event log. for synchronous and log moves, the time range is
copied from the event log. model moves are interpreted as point-intervals , i.e.,
having a zero-duration (this design decision is easily changed, e.g., by taking
the log-based average duration of the activity described by the model move).
to compute a point-interval for a model move, we obtain the maximum interval
value xof any of its predecessors in the poa, i.e., according to the model's
ordering-relations, which is used as a point-interval of the form [ x; x] or [0 ;0] if
the move has no predecessors. in the remainder of this section, we describe and
exemplify the computation of the three core metrics considered for an arbitrary
subtree of a process tree and a given trace, i.e., based on timed moves.
service time; the service time of a (sub)tree comprises all intervals at which
it is active , i.e., work has been performed. in fig. 4, the service time of the root
operator, i.e., , consists of three time ranges, i.e., s1,s2ands3. the service time
range s2consists of the service times observed for q2andq3. in the running
example (fig. 3c), the service time of v3:1comprises the service times of moves
(c; v5:1) and ( e; v4:2), i.e., rangesf[22;37];[42;57]g. the service time of v1:3is
the same, i.e., ( g; v2:2) is executed concurrently with ( c; v5:1).
waiting time; the waiting time of a (sub)tree, i.e., win fig. 4, is the
time between the tree's enabling until the rst activity observed in any of its
children. given a subtree q0of a process tree q, its waiting time is computed by
subtracting the minimum starting time of any of the model/synchronous move
related to q0, from the maximum nishing time of any synchronous/model move
preceding any move related to q0. consider move ( e; v4:2) in fig. 3c. the move
starts at time 42. the maximum nishing time of any move preceding the move
is 37 recorded by ( c; v5:1). hence, the waiting time of the move is captured by
the range [37 ;42]. we ignore the nishing time of move ( g; v2:2), since v2:2does
not precede v4:2, i.e., their common ancestor is v1:3(parallel operator).
idle time; idle time comprises all time ranges in which we observe no ac-
tivity, yet the process tree has been active before and has not nished yet. for
example, the waiting time of ( e; v4:2), i.e., [37 ;42] represents the idle time of the
subtree formed by v3:1. we obtain the idle time of an arbitrary subtree by tak-
ing the union of all active times of the moves that are part of it, i.e., according
to the poa's timed moves. subsequently, we intersect the complement of the6 s.j. van zelst et al.
aforementioned set of ranges with the range formed by the rst start-time and
maximum end-time of any of the subtree's moves.
cycle time; each observed instance of a subtree q0of some process tree
q, generates a singleton waiting time interval as well as a set of service and
idle times respectively. hence, the cycle times of a subtree are calculated by
computing the union of the related sets of waiting, service and idle time.
4.2 performance change injection
fig. 5: computation of the
new start point of a move
(m00). before shifting, move
m0directly precedes m00, after
shifting, it precedes m00.we assume that the process owner calcu-
lates the eect of changing the process's time-
performance at the activity level , e.g., assessing
the impact of a waiting time reduction of 20%
of an activity of the process. given an expected
change (either positive or negative), we assume
that all other events behave the same. adopt-
ing such a scenario for performance prediction
translates to shifting the time range of the timed
moves, according to the desired improvement.
consider improving the performance of activity
cin the running example (fig. 2b and fig. 3c)
by 20%. this results in a new service time range
of [22 ;34] (0 :8(37 22)=12). we shift the range
of moves ( e; v4:2) and ( h; v 1:4) by 3, i.e., to
[39;54] and [55 ;56] respectively. hence, the re-
duction on activity c, yields a5% reduction in
the overall ow-time (3
59).
we use a move shift function , describing how
to shift a timed move based on a proposed change. the core idea is to maintain
a shift value on both the start and end time of a move of a tpoa. the shift
function allows us to derive the (new) interval boundaries described by the timed
move. given some move mwith time interval [ a; b] and a corresponding shift
function value xfor the start and yfor the end time of m. the new time interval
form, is equal to the interval [ a+x; b+y] (shift forward in time: x<0 and y<0).
moves that have no predecessors in the tpoa are not shifted or shifted on their
start/end time according to the performance change, e.g., a 5% reduction of
service time on ( a; v1:1) in fig. 3c, yields a shift on its end time of 2  0:952=0:1.
for a move mthat does have predecessor moves, rst, a new time range for all
its predecessors is computed, i.e., by applying (accumulated) shifting on top of
the initially recorded time annotation of the tpoa. the initial shift values of
move mare the dierence between the maximum end point of its predecessors
excluding any shift (i.e., based on the original time ranges of the predecessors)
and the maximum ending point of its predecessors including any shift (i.e., based
on the new time ranges of the predecessors). if a move relates to an activity with
an anticipated performance change, the change is computed on top of the initially
computed shift values. fig. 5 shows an exemplication of the computation.data-driven process performance measurement and prediction 7
table 1: experimental results. measured performance is in hours (rounded). the
impact of the bottleneck reductions is relative to the original cycle time.
event log discovery
thresholddetected
bottleneckavg. bottleneck
sojourn timeabg. overall
cycle timerel. cycle time red.
(1% bott. red.)rel. cycle time red.
(2.5% bott. red.)
bpi 2017 [14] 10% o cancelled 479 397.6 0.57355% 1.43387%
60% o cancelled 479 397.6 0.57355% 1.43387%
bpi 2020 domestic declarations [15] 10% declaration app... 107 304.8 0.27794% 0.69486%
30% declaration app.. 107 304.8 0.27794% 0.69486%
bpi 2020 international declarations [15] 10% start trip 500.7 1244.8 0.40223% 1.00558%
20% start trip 500.7 1244.8 0.39700% 0.99251%
bpi 2020 request payment [15] 10% payment handled 102.3 315.7 0.32398% 0.80995%
20% payment handled 102.3 315.7 0.32398% 0.80995%
bpi 2020 travel permit [15] 10% send reminder 1249.4 1331 0.19091% 0.47728%
20% send reminder 1349 1331 0.16858% 0.42145%
road trac [16] 10% send for credit... 11704.8 6976.8 0.66604% 1.66510%
20% send for credit... 11704.8 6976.8 0.66604% 1.66510%
hospital billing [17] 10% fin 560.2 556.7 0.65105% 1.62763%
20% fin 560.2 556.7 0.65105% 1.62763%
5 evaluation
in this section we evaluate our approach. we conducted our experiments us-
ing a publicly available implementation of our framework (https://github.com/
luisfsts/kpialgebras). we use seven publicly available event logs. for each log,
we discover two process trees by using dierent noise threshold values in the
discovery algorithm [13] (starting with threshold 10% and increasing with steps
of 10% until we discover a dierent process tree). to reduce time consumption,
we sampled 1000 cases per event log.
the results of the experiment are presented in table 1. in all cases, as ex-
pected, we observe that using a 2 :5% reduction on the bottleneck yields a better
improvement on the overall cycle time of the process, i.e., roughly 2.5 times the
1% reduction. only in the bpi 2020 travel permit data [15], the model im-
pacts the measured cycle time of the identied major bottleneck in the process.
upon inspection, this is the case because the 10%-model incorporates more syn-
chronizations of the bottleneck activity, and hence, more performance measure-
ments, leading to a slightly lower measured activity sojourn time. furthermore,
the aforementioned event log and the bpi 2020 international declarations [15]
event log are the only two event logs in which the process model has an inuence
on the global performance reduction.
6 conclusion
in this paper, we presented a foundational framework that allows us to mea-
sure the time-based performance of a process, based on historically logged event
data. the framework exploits partially ordered alignments (poas), which are
annotated with time-based performance information derived from the data. the
use of poas supports the use of data that records both start and end times
of events. the eect of anticipated changes of activity-level performance can be
injected into the framework. in our evaluation, we highlight the applicability of
our tool using real event data.8 s.j. van zelst et al.
references
1. van der aalst, w.m.p.: process mining - data science in action, second edition.
springer (2016)
2. augusto, a., conforti, r., dumas, m., rosa, m.l., maggi, f.m., marrella, a.,
mecella, m., soo, a.: automated discovery of process models from event logs:
review and benchmark. ieee trans. knowl. data eng. 31(4) (2019) 686{705
3. carmona, j., van dongen, b.f., solti, a., weidlich, m.: conformance checking -
relating processes and models. springer (2018)
4. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering simulation
models. inf. syst. 34(3) (2009) 305{327
5. pourbafrani, m., van zelst, s.j., van der aalst, w.m.p.: scenario-based predic-
tion of business processes using system dynamics. in panetto, h., debruyne, c.,
hepp, m., lewis, d., ardagna, c.a., meersman, r., eds.: otm 2019 conferences
- coopis, odbase, c&tc 2019, rhodes, greece, october 21-25, 2019, proceed-
ings. volume 11877 of lncs., springer (2019) 422{439
6. m arquez-chamorro, a.e., resinas, m., ruiz-cort es, a.: predictive monitoring of
business processes: a survey. ieee trans. serv. comput. 11(6) (2018) 962{977
7. van der aalst, w.m.p., schonenberg, m.h., song, m.: time prediction based on
process mining. inf. syst. 36(2) (2011) 450{475
8. tax, n., verenich, i., rosa, m.l., dumas, m.: predictive business process mon-
itoring with lstm neural networks. in dubois, e., pohl, k., eds.: caise 2017,
essen, germany, june 12-16, 2017, proceedings. volume 10253 of lncs., springer
(2017) 477{492
9. martin, n., depaire, b., caris, a.: the use of process mining in business process
simulation model construction - structuring the eld. bus. inf. syst. eng. 58(1)
(2016) 73{87
10. rozinat, a., mans, r.s., song, m., van der aalst, w.m.p.: discovering colored
petri nets from event logs. int. j. softw. tools technol. transf. 10(1) (2008) 57{74
11. maruster, l., van beest, n.r.t.p.: redesigning business processes: a methodology
based on simulation and process mining techniques. knowl. inf. syst. 21(3) (2009)
267{297
12. lu, x., fahland, d., van der aalst, w.m.p.: conformance checking based on
partially ordered event data. in: bpm 2014 international workshops, eindhoven,
the netherlands, september 7-8, 2014, revised papers. (2014) 75{88
13. leemans, s.j.j., fahland, d., van der aalst, w.m.p.: discovering block-structured
process models from event logs containing infrequent behaviour. in lohmann, n.,
song, m., wohed, p., eds.: business process management workshops - bpm 2013
international workshops, beijing, china, august 26, 2013, revised papers. volume
171 of lnbip., springer (2013) 66{78
14. van dongen, b.f.: bpi challenge 2017 (feb 2017)
15. van dongen, b.f.: bpi challenge 2020 (mar 2020)
16. de leoni, m.m., mannhardt, f.: road trac ne management process (feb 2015)
17. mannhardt, f.: hospital billing - event log (aug 2017)