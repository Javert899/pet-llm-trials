supporting domain experts to select and conﬁgure
precise compliance rules
elham ramezani, dirk fahland, and wil m.p.van der aalst
eindhoven university of technology, the netherlands
{e.ramezani,d.fahland,w.m.p.v.d.aalst}@tue.nl
abstract. compliance speciﬁcations concisely describe selected aspects of what
a business operation should adhere to. to enable automated techniques for compli-
ance checking, it is important that these requirements are speciﬁed correctly and
precisely, describing exactly the behavior intended. although there are rigorous
mathematical formalisms for representing compliance rules, these are often per-
ceived to be difﬁcult to use for business users. regardless of notation, however,
there are often subtle but important details in compliance requirements that need
to be considered. the main challenge in compliance checking is to bridge the gap
between informal description and a precise speciﬁcation of all requirements. in
this paper, we present an approach which aims to facilitate creating and under-
standing formal compliance requirements by providing conﬁgurable templates that
capture these details as options for commonly-required compliance requirements.
these options are conﬁgured interactively with end-users, using question trees
and natural language. the approach is implemented in the process mining toolkit
prom.
keywords: compliance speciﬁcation, compliance checking, conﬁgurable compli-
ance rules, auditing, question tree
1 introduction
compliance checking techniques determine if business operations are within the bound-
aries set by law, managers and other stakeholders or obey security requirements set by
the company. such constraints can be formalized using different speciﬁcation formalisms
such as temporal logic [ 14] or deontic logic [ 30] depending on the compliance checking
technique that is being employed. a problem often encountered in practise [ 19], however,
is specifying precisely the behavior intended.
many practitioners prefer capturing compliance requirements using informal no-
tations, such as natural language, instead of formal speciﬁcation languages. these
representations are more accessible but often imprecise and of less value when doing
automated compliance checking. since domain experts usually describe informally a
compliance requirement, technical experts may invest considerable effort formalizing it
and check if the recorded process executions conform with it, only to later determine
that the property has been speciﬁed incorrectly. whereas if domain experts are involved
in the speciﬁcation process, the intended behavior with all its subtle aspects can be
speciﬁed directly and thus avoiding ambiguities.
numerous researchers have developed speciﬁcation patterns to facilitate construction
of formal speciﬁcation of compliance requirements. feedback indicates [ 16] that these2 elham ramezani et al.
patterns are considered helpful but they fail to capture subtle aspects of a speciﬁc
requirement. in addition, adaption and application of these patterns are not trivial for
many practitioners as they are less familiar with the underlying formalization.
this paper describes an approach that addresses the gap between informal require-
ments and formal compliance speciﬁcations. we introduce an interactive approach for
using tacit knowledge of domain experts to specify compliance requirements. our ap-
proach aims at (i) enabling business users and compliance experts to specify compliance
constraints and (ii) encouraging them to think about the subtle aspects of their intended
behavior when specifying a constraint. the key components of this process are question
trees , and conﬁgurable generic compliance patterns pre-formalized in conﬁgurable petri
nets that capture common compliance requirements. we have developed a repository
of conﬁgurable compliance patterns. every pattern allows for alternative variations of
a compliant behavior. selecting an appropriate conﬁgurable pattern and conﬁguring a
pattern for its conﬁguration options are done interactively with user. a questionnaire
consisting of two question trees asks users about their intended compliant behavior.
the ﬁrst question tree helps the user selecting a general compliance requirement, i.e., a
conﬁgurable pattern. the second tree helps the user conﬁguring a general requirement
w.r.t. various subtle semantic aspects. the approach is implemented and a case study is
being prepared to evaluate the approach.
the remainder of this paper is organized as follows. sect. 2 explains a compliance
management life cycle. an overview of the methodology and notions that our work is
built on are discussed in sect. 3. sect. 4 introduces the repository of conﬁgurable com-
pliance patterns. sect. 5 describes how this approach facilitates compliance speciﬁcation
for domain experts and showcases implementation of the technique in prom. we will
review the related work in sect. 6 and ﬁnally sect. 7 concludes the paper and motivates
future work.
2 compliance management
elicit
compliance
requirementsformalize
implement checkimprove
fig. 1. compliance manage-
ment life cycleorganizations are confronted with an ever growing set
of laws and regulations to comply to. failing to comply
to regulations can impose severe risks such as penal con-
sequences on management level or lost contracts with
clients. compliance management (cm) within an orga-
nization comprises the design, implementation, mainte-
nance, veriﬁcation and reporting of compliance require-
ments and it calls for a structured methodology. we pro-
posed a compliance management life cycle in [ 23] as a
methodology to elicit, formalize, implement, check, and
optimize compliance requirements in organizations. as
is shown in fig. 1, compliance management activities can be identiﬁed as:
–compliance elicitation : determine the compliance requirements that need to be
satisﬁed. (i.e., rules deﬁning the boundaries of compliant behavior).
–compliance formalization : specify formally compliance requirements originating
from laws and regulations derived in the compliance elicitation phase.supporting domain experts to select and conﬁgure precise compliance rules 3
–compliance implementation : enforce speciﬁed compliance requirements in business
operation.
–compliance checking : investigate whether the constraints will be met (forward
compliance checking) or have been met (backward compliance checking).
–compliance optimization : improve business processes and their underlying informa-
tion systems based on the diagnostic information gained from compliance checking.
in the following we will elaborate on elicitation and formalization and brieﬂy discuss
compliance checking.
compliance elicitation and formalization. specifying precise compliance require-
ments spans over compliance elicitation andcompliance formalization phases of the
cm life cycle and introduces many challenges. it calls for combination of different
knowledge areas such as compliance expertise, formalization skills, and domain speciﬁc
knowledge.
regulations are usually presented informally and described in an abstract way
because they need to be independent from implementation. moreover, the writers and
users of regulations are lawyers or business users, their instrument of work uses natural
language. this language is non-formalized and incorporates domain speciﬁc terminology,
as well as structure and deﬁnitions. therefore enforcing and checking a compliance
requirement requires a precise formalization of this requirement. in the step from natural
language to precise formalization many subtle aspects of the requirement have to be
considered .
for instance, consider a compliance requirement we obtained from internal policies
of a specialized hospital that accepts only patients requiring a speciﬁc medical treatment:
“for every patient registered in the hospital an x-ray must be taken”. this compliance
requirement enforces that patient registration must be followed by activity x-ray . the
requirement seems very straightforward but no matter which formalism is chosen for
this simple requirement, while formalizing, it is important to decide about some details
e.g., : (1)whether patient registration should be directly followed by x-ray or other
activities may occur in between the speciﬁed sequence; (2)whether it is allowed that
other activities occur before patient registration or a patient cannot receive any treatment
without registration; (3)whether a patient can be registered several times (for instance
in different departments) and if yes; (4)should the speciﬁed sequence be followed
every time; (5)whether it is allowed that the speciﬁed sequence never occurs i.e., if it
is allowed that a patient is never registered. interpreting an informal rule with all its
details can be surprisingly difﬁcult and must be done by domain experts who are usually
less familiar with different formalisms. therefore an approach is required to hide the
complexity of formalization from business user and at the same time support automated
compliance checking. in this context an interactive ‘question and answer’ approach
based on “disciplined” natural language seems promising. such an approach is used in
property speciﬁcation for software development in [ 8,28,19] and is a suitable candidate
for compliance speciﬁcation. however, compliance speciﬁcation is more challenging as,
unlike in software development, the formalized requirement is not inspected again by an
expert in formal techniques and immediately used to check compliance.
compliance checking. precisely formulated compliance requirements derived from
previous phases in cm life cycle are used for veriﬁcation, monitoring and auditing4 elham ramezani et al.
of business processes. there are two basic types of compliance checking: (1) forward
compliance checking aims to design and implement processes where compliant behavior
is enforced [ 26,18,12,13,6] and (2) backward compliance checking aims at detecting
and localizing non-compliant behavior [ 5,25,17,2] that happened in the past. regardless
of which analysis technique is used, automated compliance checking can only be applied
if a compliance requirement has been speciﬁed precisely.
compliance rule repository. in [23,2] we have shown that compliance requirements
(originating from legislations) restrict one or several perspectives of a process including
control ﬂow, data ﬂow, process time or organizational aspects. in [ 20,22] we have shown
how a complex compliance requirement covering several perspectives of a process can
be decomposed into smaller compliance rules which can be formalized as parameterized
compliance patterns in terms of petri nets. these petri nets then can be used in backward
compliance checking to provide diagnostic information about compliance violations.
this approach is supported by a repository of more than 50 compliance patterns
covering a majority of the compliance rules found in literature [ 21]. in this paper we
present an approach to consolidate this repository and to select and conﬁgure the right
rule to precisely express a given informal description .
3 methodology
configurable compliance 
pattern repositoryquestions for selecting 
a configurable 
compliance pattern
a
questions for 
configuring a pattern
configured 
compliance patternconfigurable 
compliance pattern
fig. 2. compliance speciﬁcation overviewas is motivated in sect. 2, com-
pliance requirement speciﬁcation
calls for an approach that allows
for deﬁning different variations of
a compliance requirement, and is
accessible in order to beneﬁt from
the compliance expertise of busi-
ness users and mathematically pre-
cise to enable automated compli-
ance checking. that is, it needs to
offer variations of a speciﬁed be-
havior, hide complexity of formal-
ization from business users and at
the same time produce a formal def-
inition of the compliance require-
ment.
in this section, we explain how our approach can help practitioners elucidate a
compliance requirement by making informed choices between different variations of a
compliance rule. fig. 2 gives an overview of our approach for compliance speciﬁcation.
this approach is built upon a repository of conﬁgurable compliance patterns.
conﬁgurable compliance pattern repository. although the collection of compliance
rules in [ 21] is comprehensive, there are subtle variations of a compliance requirement
which cannot be expressed only by selecting a compliance rule from the rule repository
and instantiating it for its parameters, rather slight modiﬁcation in the underlying formal-
ization may be necessary. therefore one would like to see a general rule which allows to
deﬁne all possible variations.supporting domain experts to select and conﬁgure precise compliance rules 5
in addition there are over 50 compliance rules (only for control-ﬂow perspective) in
the rule repository which makes the choice of appropriate compliance rule cumbersome
and error prone if the user is not familiar with the underlying formalization. to help
the user selecting the right rule, we consolidated the compliance rules by merging
similar rules (that differ in variations of subtle semantic aspects) into one conﬁgurable
compliance pattern that is easier to describe in general terms. consolidating similar
rules into a conﬁgurable pattern is done manually following a generic approach. we ﬁrst
deﬁne a core behavior for the conﬁgurable pattern and then extend the core behavior with
all possible conﬁguration options. these conﬁguration options allow to deﬁne different
variations of a compliance requirement. the idea is that a user ﬁrst picks a general
conﬁgurable pattern with all its conﬁguration options and then conﬁgures it w.r.t. various
subtle aspects. details of the repository of conﬁgurable patterns are given in sect. 4.
question tree. in order to enable domain experts to specify the intended behavior of a
compliance requirement, we apply an interactive question and answer based approach.
we aim to guide users to select an appropriate conﬁgurable compliance pattern and
elaborate on how to conﬁgure its conﬁguration options such that it represents intended
behavior. thus we apply a question tree (qt) representation which is basically a
decision tree and its content is based on disciplined natural language.
we apply twodistinct question trees; a set of questions which guide the user to
select a speciﬁc conﬁgurable compliance pattern and a set of questions which are asked
to resolve different conﬁguration options of a chosen conﬁgurable pattern in order to
specify details of intended admissible behavior.
questions to select a conﬁgurable compliance pattern. the qt of the ﬁrst phase
breaks the problem of deciding which conﬁgurable pattern is most appropriate by asking
users to consider only one differentiating attribute at a time. in this phase, qt has a
hierarchical structure and this structure supports the isolation of concerns, only presenting
a question to the user that is relevant in context of their previous answer. a new question
that can be revealed after answering a given question is a child question of that previous
answer; the previous question is the parent question of that child question. by selecting
a different answer to a parent question, the user will explore a different set of child
questions that are relevant to that answer and will arrive at a different conﬁgurable
pattern. fig. 3 qt-phase1 (left) presents the question tree for selecting a conﬁgurable
pattern in the example discussed earlier in sect. 2.
questions to conﬁgure a conﬁgurable compliance pattern. questions in the sec-
ond phase concern conﬁguring subtle behavioral aspects of a speciﬁc pattern. not all
questions in this phase have a hierarchical structure. that is, many questions in this phase
can be asked in any order, since there are some options in each of conﬁgurable patterns
which are conceptually orthogonal to each other. these questions will be presented to
the user together and s/he may answer them in any order based on personal preferences
and understanding. however, some options are not orthogonal e.g., a question whether
a sequence of repeated events may occur several times is only meaningful if the user
ﬁrst answers that a sequence of repeated events is allowed. in such cases, the former
question is only asked if a certain pre-conﬁguration holds for it. please note that the
conﬁgurable pattern i.e., the underlying petri net and its conﬁguration options are not
shown to the end user and user only deals with textual descriptions of rules in terms of6 elham ramezani et al.
which activities are constrained by the rule?
one activity
two activities: patient_registration and x-ray 
choose the type of limitation you would like to exert.
dependent existence
bounded existence
sequence of occurrence
are the activities you would like to restrict structured or atomic?
the activities are structured (start and completion of activities 
are represented with two different events)
the activities are atomic (only one event represents 
occurrence of every activity)
activity patient_registration must be followed by 
activity x_ray.please specify the limitation you would like to exert.questions for selecting a configurable compliance pattern
activity x_ray must be preceded by activity 
patient_registration.
activity patient_registration must be followed by activity x_ray.
is it allowed that the sequence <(patient_registration) (x-ray)> 
occurs more than once in a trace?
yes. the sequence <(patient_registration) (x-ray) > may occur 
several times in a trace.
no. the sequence <(patient_registration) (x-ray)> must not 
occur several times in a trace.
is it allowed that a trace starts with activity x_ray?
yes. a trace may start with activity x-ray.
no. traces must not start with activity x_ray.
is it allowed that after sequence <(patient_registration) (x-ray)>, 
activity x_ray occurs independently from patient_registration ?
yes. after occurrence of sequence <(patient_registration) 
(x-ray)> activity x_ray may occur independently from 
patient_registration.
no. activity patient_registration must never occur without 
a following x_ray.is it allowed that other activities occur in between 
sequence <(patient_registration) (x-ray)>?questions for configuring a selected pattern
fig. 3. qt-phase1 (left), qt-phase2 (right)
questions and answers. in the back-end, every answer node of qt in the second phase is
mapped to a conﬁguration option in a conﬁgurable pattern and conﬁgures the pattern
based on choices user makes. the conﬁguration process is continued until all details of a
compliant behavior is decided. fig. 3 qt-phase2 (right) presents partially the question
tree of the second phase for the example of sect. 2.
illustrating a compliance rule to a domain expert. the conﬁgurable compliance
pattern is hidden from user and s/he is only represented with questions and answers
which are designed in a simple hence structured and clear text. in order to remove any
ambiguity for the user while answering questions of subtle behavioral aspects, there are
several compliant and non-compliant sample traces given for every answer. that is, a user
can easily see how a certain choice can impact (i.e., limit or extend) admissible behavior.
the conﬁgured compliance pattern determined in the second phase is a petri net that can
be used for automated compliance checking applying the techniques in [20,22].
in the following we will ﬁrst discuss the repository of conﬁgurable compliance
patterns and then show a walk-though example illustrating how a user selects and
conﬁgures a compliance rule using the two question trees.
4 consolidating and organizing compliance rules in a repository
the conﬁgurable compliance pattern repository is built upon the collection of control-
ﬂow compliance rules in [ 21]. we consolidated these rules by merging similar rules
into a conﬁgurable pattern to eliminate redundancies and allow for specifying different
variations of a rule. a conﬁgurable compliance pattern is a conﬁgurable petri net which
describes a group of compliance rules in a concise way. originally conﬁgurable process
models [ 3,24] were proposed to describe variants of a reference process. here, we are
applying the concept to describe variants of compliance requirements.
every conﬁgurable compliance pattern is parameterized and formalized in terms of
petri nets with a core component. this core structure enforces a core behavior (e.g., a
sequence). in addition a pattern has several other components which determine variationssupporting domain experts to select and conﬁgure precise compliance rules 7
of core behavior. core behavior enables a clear distinction between commonalities shared
among compliance rules in one category and variability.
to consolidate the rules in [ 21], we studied rules which share a common behavior. we
kept the core component in a conﬁgurable pattern and added all possible conﬁguration
options to it. the resulting conﬁgurable pattern can describe all the original rules it is
derived from, and many more because of the new possible combination of different
conﬁguration options. the conﬁgurable patterns are sound be design. please recall the
example given earlier in sect. 2. the petri net pattern shown in fig. 4 formalizes the
core behavior of the requirement of this example.
initial finalp-reg x-ray
endicmpω 
ist
start
fig. 4. sequence of p-reg andx-raythe compliance pattern starts by ﬁr-
ing transition start and a token in place
final represents a completed case. the
core of the rule is formalized in the grey-
shaded part between transitions istand
icmpwhich represents an instance of the
compliance rule. the rule becomes active
when istﬁres and it is satisﬁed when icmp
ﬁres. the hollow transitions ( start ,ist,icmp, and end) are invisible. the core structure
of the pattern enforces; if patient registration (p-reg ) occurs then it must be followed
byx-ray . every compliance pattern allows to focus on activities restricted by the cor-
responding compliance rule and abstract from all other activities in a process. the 
activity after icmprepresents any other activity in a process apart from p-reg andx-ray .
if we want to add other options to the behavior speciﬁed in the petri net pattern in fig. 4,
we need to add some more components to the pattern and build a conﬁgurable pattern
out of it.
the conﬁgurable pattern shown in fig. 5 is parameterized over the activity names
such that activity a=p-reg and activity b=x-ray . the conﬁgurable pattern allows for
deﬁning variations of the core behavior and by blocking or activating a component we
can extend or limit admissible behavior. in the following we will explain the components
of the conﬁgurable pattern in fig. 5 and explain how blocking or activating a component
can change the behavior of the pattern.
comp.1-
: activating this component allows for occurrence of arbitrary other
activities in between the sequence h(p-reg)(x-ray)iand blocking this component
enforces that activity p-reg must be followed directly by x-ray .
comp.1-
ω 
a b icmp
comp.6-
a comp.7-
b end1ω 
istcomp.3-
ƭ 
comp.2-
ω 
comp.4-
end2
start
initialfinal
activating blocking
comp.5-
a 
fig. 5. conﬁgurable sequence of p-reg andx-ray8 elham ramezani et al.
comp.2-
: activating or blocking this component, enforces that other activities
may occur before p-reg or not.
comp.3-: activating or blocking this component allows that the sequence h(p-reg)(x-ray)i
occurs multiple times in a trace or not.
comp.4-end 2: activating or blocking this component allows that a patient, would
never get registered or not.
comp.5-a : activating or blocking this component allows that several registrations
of a patient can be followed by one execution of activity x-ray or not.
comp.6-a : activating or blocking this component allows that after occurrence of
the sequenceh(p-reg)(x-ray)ia patient gets registered without a following x-ray
or not.
comp.7-b : activating or blocking this component allows that activity x-ray occurs
independently from the speciﬁed sequence of h(p-reg)(x-ray)ior not.
when designing a conﬁgurable compliance pattern, we abstract from concrete ex-
amples and consider all possible conﬁguration options. the conﬁguration options we
address in our approach include: activating ,blocking , and hiding/skipping a transition,
an arc or a group of transitions and arcs. in addition we consider conﬁguring arc weights .
by developing conﬁgurable patterns, we could eliminate redundancies in a compli-
ance rule family and reuse the commonalities, thus decreasing the number of patterns
to 22 conﬁgurable compliance patterns having 0-38 conﬁguration options each. this
way, over 1000 different compliance patterns can be derived (including the original 50
patterns) though picking different conﬁguration options.
5 supporting domain experts to specify compliance constraints
in this section we will elaborate our methodology and its implementation by going
through a real life example step by step and showcase how a user who is not familiar
with any formalism speciﬁes his/her admissible behavior considering its detailed aspects.
the technique is implemented in the compliance package of the process mining
toolkit prom6, available from http://www.processmining.org . the package
contains the repository of all conﬁgurable compliance patterns. the elicit compliance
rule plug-in takes a log as input and returns a compliance rule using the approach of
sect. 3. the returned rule can be used for compliance checking using the check compli-
ance of a log plug-in. in the following we show how a user can use this implementation
to select and conﬁgure a compliance rule.
we chose the event log taken from bpi challenge 2011 available from [1]. the log
is taken from a dutch academic hospital. this log contains some 150.000 events in over
1100 cases. apart from some anonymization, the log contains all data as it came from
the hospital’s systems. each case corresponds a patient of the hospital’s gynaecology
department. the log contains information about when certain activities took place, which
group performed the activity and so on. many attributes have been recorded that are
relevant to the process.
to demonstrate the approach, we chose to formalize a rule that captures the follow-
ing behavior observed on the event log [ 7]:glucose level must be estimated 4 times
repetitively if a patient diagnosed for cervical cancer of uterus (diagnosis code m13)supporting domain experts to select and conﬁgure precise compliance rules 9
and classiﬁed as an urgent case1. we have preprocessed this log for patients who are
suffering from cervical cancer of uterus. urgent patients are those cases where at least
one activity of type urgent is manifested. a very common activity representing an urgent
case is ‘haemoglobin photoelectric-urgent’ . if we rephrase the constraint and substitute
the activity names with corresponding event names in the log, the rule states: in case of
patients diagnosed for code m13, activity ‘haemoglobin-photoelectric-urgent’ must be
followed 4 times by activity ‘glucose-urgent’ .
we take this log as input and run the elicit compliance rule plug-in that implements
the approach of sect. 3. the very ﬁrst question of the questionnaire always asks the
user to specify the number of activities of primary interest. for this a list of available
activities in log is shown to user and the user can choose the activities s/he wants to
restrict from this list. depending on the number of activities chosen different sets of
questions will be triggered. for instance if the user chooses one activity of primary
interest, the next question will ask about the number of times a speciﬁed activity is
allowed to occur. if more than one activity (e.g., in case of our example two activities) is
chosen, the questions related to relationships between chosen activities will be asked. in
our example:
–which type of limitation you would like to exert?
dependent existence; deﬁne whether the occurrence or non-occurrence of an
activity imposes an obligation on occurrence or non-occurrence of another
activity, e.g., deﬁne an inclusive relation between two activities.
bounded existence; deﬁne whether number of occurrences of one activity is
dependent to number of occurrences of the other activity.
sequence of occurrence; deﬁne whether there should be a sequential relation
between occurrence of two activities, e.g., deﬁne a precedence or simultaneous
relation between two activities.
bounded sequence of occurrence; deﬁne whether a speciﬁed sequence must be
repeated.
we choose bounded sequence of occurrence from the list of alternative answers. as
the result of this choice, a conﬁgurable pattern is selected in the back-end and questions
to conﬁgure the selected pattern are presented.
the ﬁrst question from the second phase will ask whether the user wants to limit the
repetition of activity ‘glucose-urgent’ after activity ‘haemoglobin-photoelectric-urgent’
and if yes how many times ‘glucose-urgent’ must occur after ‘haemoglobin-photoelectric-
urgent’ . fig. 6 illustrates this step in ‘elicit compliance rule’ plug-in in prom where we
chose: 4 times repetition of ‘glucose-urgent’ after ‘haemoglobin-photoelectric-urgent’ .
in order to support the user to make informed choices, for every answer a sample
compliant trace and non-compliant trace is given as shown in fig. 6. additionally, the
outcome of the currently chosen conﬁguration is visualized to the user: the selected and
partially conﬁgured rule is used to check compliance of the log w.r.t. this preliminary
rule using the technique of [ 20]. the screen in fig. 6 shows several compliant and
non-compliant traces by which the user can use her domain knowledge to assess which
answer translates her intention best.
1please note that the observed behavior does not indicate a medical rule but we chose this
observation to show how we can specify a behavior using elicit compliance rule plug-in10 elham ramezani et al.
fig. 6. elicit compliance rule plug-in
subsequent questions assist the user in deciding about details of the intended behavior.
these questions concern conﬁguration options which are orthogonal to each other, hence
they can be resolved in any order. these questions include:
–is it allowed that other activities occur between occurrences of activity ‘haemoglobin-
photoelectric-urgent’ and‘glucose-urgent’ ?
–is it allowed that other activities occur between occurrences of activity ‘glucose-
urgent’ ?
–is it allowed that several occurrences of activity ‘haemoglobin-photoelectric-urgent’
be followed by speciﬁed repetitions of activity ‘glucose-urgent’ ?
–is it allowed that activity ‘glucose-urgent’ occurs before activity ‘haemoglobin-
photoelectric-urgent’ independently from the deﬁned sequence?
–is it allowed that the speciﬁed sequence of h(haemoglobin-photoelectric-urgent )
(glucose urgent ):::(glucose urgent )| {z }
4ioccurs multiple times?
–is it allowed that the speciﬁed sequence of h(haemoglobin-photoelectric-urgent )
(glucose urgent ):::(glucose urgent )| {z }
4inever occurs?
–is it allowed that after the speciﬁed sequence h(haemoglobin-photoelectric-urgent )
(glucose urgent ):::(glucose urgent )| {z }
4i, activity ‘haemoglobin-photoelectric-
urgent’ occurs without being followed by repetitions of ‘glucose-urgent’ ?
resolving these questions yields a conﬁgured pattern which describes precisely the
intended behavior. this petri net can be used further for automated compliance checking.
6 related work
informal description of compliance requirements can be interpreted differently in context
of different business operations. therefore precise speciﬁcation of them is necessary. [ 15]supporting domain experts to select and conﬁgure precise compliance rules 11
speciﬁcation patterns are extensively used in software development [ 9,8,28,4,16] and
also in formulating compliance requirements [ 10,11,29,27,12]. most of these approaches
use some type of structured natural language and pre-formulated templates to construct
formal speciﬁcations that can then be analyzed. often, these informal speciﬁcations
are initially mapped to an intermediate representation (e.g., model-driven patterns),
at which point context dependencies and ambiguities are resolved. the result is then
further reﬁned into a targeted formalism. in [ 11,10,29] elgammal et al. introduce a
pattern-based approach for capturing compliance requirements. their patterns are pa-
rameterized and formalized in ltl. in order to make the approach usable for business
users, they developed a tool-set where user can deﬁne compliance requirements using
a specialized version of declare modeling notation. a common problem in most of
above mentioned works is that pre-formulated patterns are limited and hard coded; hence
they fail to capture subtle aspects of different compliance requirements. in addition in
most of the approaches, mapping and adapting patterns in a speciﬁc context requires
extensive knowledge in speciﬁcation languages. our approach aims to allow compliance
speciﬁcation for end users without such extensive knowledge.
7 conclusion and future work
thecompliance plug-in of prom supports the capabilities described in this paper. the
conﬁgurable compliance pattern repository is comprehensive and allows for specifying
different types of compliance requirements we found in literature and many more.
however, an accurate evaluation of the tool and approach is required. in future we would
like to evaluate how effective the approach and tool are in practise involving business
users. in the presented approach, we focused on control-ﬂow compliance rules. we
would like to investigate similar approaches for formalizing requirements restricting
other perspectives of processes such as time, data, and resource. in addition we would like
to check the scalability of conﬁgurable compliance patterns by applying our approach in
different domains and identify compliance requirements that we are not able to specify
using our current set of conﬁgurable compliance patterns.
references
1.dx.doi.org/10.4121/uuid:d9769f3d-0ab0-4fb8-803b-0d1120ffcf54
2.van der aalst, w.m.p., adriansyah, a., van dongen, b.f.: replaying history on process
models for conformance checking and performance analysis. wiley interdisc. rew.: data
mining and knowledge discovery 2(2), 182–192 (2012)
3.van der aalst, w.m.p., dreiling, a., gottschalk, f., rosemann, m., jansen-vullers, m.h.:
conﬁgurable process models as a basis for reference modeling. in: bpm workshops. vol.
3812, pp. 512–518 (2005)
4.abid, n., dal-zilio, s., botlan, d.l.: real-time speciﬁcation patterns and tools. in: fmics.
lncs, vol. 7437, pp. 1–15. springer (2012)
5.adriansyah, a., van dongen, b., van der aalst, w.m.: conformance checking using cost-
based fitness analysis. edoc’11 0, 55–64 (2011)
6.awad, a., weidlich, m., weske, m.: visually specifying compliance rules and explaining
their violations for business processes. j. vis. lang. comput. 22(1), 30–55 (2011)12 elham ramezani et al.
7.bose, r.p.j.c., van der aalst, w.m.p.: analysis of patient treatment procedures. in: bpm
workshops. lnbip, vol. 99, pp. 165–166 (2012)
8.cobleigh, r.l., avrunin, g.s., clarke, l.a.: user guidance for creating precise and accessible
property speciﬁcations. in: sigsoft fse. pp. 208–218. acm (2006)
9.dwyer, m.b., avrunin, g.s., corbett, j.c.: property speciﬁcation patterns for ﬁnite-state
veriﬁcation. in: fmsp. pp. 7–15. acm (1998)
10.elgammal, a., t ¨uretken, o., van den heuvel, w.j.: using patterns for the analysis and
resolution of compliance violations. int. j. cooperative inf. syst. 21(1), 31–54 (2012)
11.elgammal, a., t ¨uretken, o., van den heuvel, w.j., papazoglou, m.p.: root-cause analysis of
design-time compliance violations on the basis of property patterns. in: icsoc. lncs, vol.
6470, pp. 17–31 (2010)
12.f¨otsch, d., pulverm ¨uller, e., rossak, w.: modeling and verifying workﬂow-based regulations.
in: remo2v . ceur workshop proceedings, vol. 241. ceur-ws.org (2006)
13.ghose, a., koliadis, g.: auditing business process compliance. in: icsoc. lncs, vol. 4749,
pp. 169–180. springer (2007)
14.governatori, g., milosevic, z., sadiq, s.w.: compliance checking between business processes
and business contracts. in: edoc. pp. 221–232. ieee computer society (2006)
15.koliadis, g., desai, n., narendra, n.c., ghose, a.k.: analyst-mediated contextualization of
regulatory policies. in: ieee scc. pp. 281–288. ieee computer society (2010)
16.konrad, s., cheng, b.h.c.: facilitating the construction of speciﬁcation pattern-based proper-
ties. in: re. pp. 329–338. ieee computer society (2005)
17.de leoni, m., van der aalst, w.m.p., van dongen, b.f.: data- and resource-aware conformance
checking of business processes. in: bis. lnbip, vol. 117, pp. 48–59. springer (2012)
18.lu, r., sadiq, s.w., governatori, g.: compliance aware business process design. in: business
process management workshops. lncs, vol. 4928, pp. 120–131. springer (2007)
19.rachel l. smith, george s. avrunin, l.a.c.: from natural language requirements to rigorous
property speciﬁcations. in: monterey workshop 2003 (sees 2003). pp. 40–46. no. um-cs-
2004-019, chicago.il (september 2003)
20.ramezani, e., fahland, d., aalst, w.: where did i misbehave? diagnostic information in
compliance checking. in: bpm. lncs, vol. 7481, pp. 262–278. springer (2012)
21.ramezani, e., fahland, d., van dongen, b., van der aalst, w.: diagnostic information in
temporal compliance checking. tech. rep., bpm center rep. bpm-12-17 (2012)
22.ramezani, e., fahland, d., van dongen, b., van der aalst, w.m.p.: diagnostic information for
compliance checking of temporal compliance requirements. in: caise 2013. lncs, springer
23.ramezani, e., fahland, d., werf, j.m.e.m.v.d., mattheis, p.: separating compliance man-
agement and business process management. in: bpm workshops 2011. lnbip, vol. 100, pp.
459–464. springer (2012)
24.rosemann, m., van der aalst, w.m.p.: a conﬁgurable reference modelling language. inf. syst.
32(1), 1–23 (2007)
25.rozinat, a., van der aalst, w.m.p.: conformance checking of processes based on monitoring
real behavior. inf. syst. 33(1), 64–95 (2008)
26.sadiq, s.w., governatori, g., namiri, k.: modeling control objectives for business process
compliance. in: bpm. lncs, vol. 4714, pp. 149–164. springer (2007)
27.schumm, d., t ¨uretken, o., kokash, n., elgammal, a., leymann, f., van den heuvel, w.j.:
business process compliance through reusable units of compliant processes. in: icwe
workshops. lncs, vol. 6385, pp. 325–337. springer (2010)
28.smith, r.l., avrunin, g.s., clarke, l.a., osterweil, l.j.: propel: an approach supporting
property elucidation. in: icse. pp. 11–21. acm (2002)
29.t¨uretken, o., elgammal, a., van den heuvel, w.j., papazoglou, m.p.: enforcing compliance
on business processes through the use of patterns. in: ecis (2011)
30.y .liu, s.muller, k.xu: a static compliance-checking framework for business process models.
ibm systems journal vol. 46, no. 2, 335–361 (2007)